quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Safety,"# This Pull request:. ## Changes or fixes:. Fixes https://its.cern.ch/jira/browse/ROOT-8129. The other option would be to add safety-checks in the code, but that would be probably detrimental to efficiency and defeat the purpose of option B ?. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15175:126,safe,safety-checks,126,https://root.cern,https://github.com/root-project/root/pull/15175,1,['safe'],['safety-checks']
Safety,# This Pull request:. ## Changes or fixes:. Prevents some null ptr access. Detected by clang-tidy.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11441:75,Detect,Detected,75,https://root.cern,https://github.com/root-project/root/pull/11441,1,['Detect'],['Detected']
Safety,"# This Pull request:. ## Changes or fixes:. ROOT is known to have a 1 GB maximum IO size, see https://github.com/root-project/root/issues/6734, but did not provide proper safety checks against this (since 18y). This lead to silent crashes in the WriteFastArray function. The length of the buffer Int_t l takes a negative value if we do not add these checks and n is high enough. This fixes the crash reported here: https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue ; A reproducer of the crash is also in that link.; Seems there are more people seeing a similar crash on the forum https://root-forum.cern.ch/t/writing-out-events-larger-than-1-gb/33106. I did not check in depth, but this PR also probably fixes https://github.com/cms-sw/cmssw/issues/40132. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/14644",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14627:171,safe,safety,171,https://root.cern,https://github.com/root-project/root/pull/14627,1,['safe'],['safety']
Safety,"# This Pull request:. ## Changes or fixes:. This is needed to avoid doxygen warning about `clang/Basic/LangOptions.def` not being found, for example when including it from `core/dictgen/src/rootcling_impl.cxx`. as well as one from `graf2d/gpadv7/inc/ROOT/RAttrAxis.hxx:36: warning: Found ';' while parsing initializer list! (doxygen could be confused by a macro call without semicolon)`. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9943:62,avoid,avoid,62,https://root.cern,https://github.com/root-project/root/pull/9943,1,['avoid'],['avoid']
Safety,# This Pull request:. ## Changes or fixes:. To avoid reports in the forum worrying about whether Minuit2 is gonna be removed. See https://root-forum.cern.ch/t/will-minuit2-be-removed-from-root/58078. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14814:47,avoid,avoid,47,https://root.cern,https://github.com/root-project/root/pull/14814,1,['avoid'],['avoid']
Safety,"# This Pull request:. ## Changes or fixes:. avoid crash if picture not found. and allow compilation, there was a missing header. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14379:44,avoid,avoid,44,https://root.cern,https://github.com/root-project/root/pull/14379,1,['avoid'],['avoid']
Safety,# This Pull request:. ## Changes or fixes:. to avoid error when building documentation. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10060:47,avoid,avoid,47,https://root.cern,https://github.com/root-project/root/pull/10060,1,['avoid'],['avoid']
Safety,"# This Pull request:. ## Changes or fixes:; Add option to change exponent offset for z-axis (within GAxis) . ## Checklist:. - [X] tested changes locally; - [X] updated the docs (if necessary) (technically the doc already even says ""xz"", though the ""z"" was not being used). This PR fixes # ; Often times when drawing 2D histograms (with the SURF option), the 10^n exponent on the z-axis will intersect the ""height"" lines drawn for the z-axis. To fix this, I've added the option to ""translate"" the exponent label (shifting x, y) for the z-axis, which was previously only possible to do with x and y-axes. . Here is the 10^n exponent intersecting with the height-lines:; ![before_offset](https://user-images.githubusercontent.com/32146461/225423544-92800949-b355-4382-83a6-1a2e2595d1d6.png). Here is the 10^n exponent shifted upwards in y very slightly to avoid this intersection:; ![after_offset](https://user-images.githubusercontent.com/32146461/225423842-b27bdd15-c62e-4a20-83b4-1202fa75c767.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12491:853,avoid,avoid,853,https://root.cern,https://github.com/root-project/root/pull/12491,1,['avoid'],['avoid']
Safety,# This Pull request:. ## Changes or fixes:; Detection of XrootD built from git commit. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #10604,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10605:44,Detect,Detection,44,https://root.cern,https://github.com/root-project/root/pull/10605,1,['Detect'],['Detection']
Safety,"# This Pull request:. ## Changes or fixes:; Each of the four commits contains an independent improvement that I made while working on something else (error handling). They are not necessary, but I think they are useful nonetheless, so here they are. 1. MultiProcess::Messenger worker to master messages implemented slightly more efficiently.; 2. Implemented full TestStatistics::RooAbsL::constOptimizeTestStatistic; these features are used rarely in Higgs fits, I think, but they are nonetheless features in non-MP RooFit fits that I now added for feature parity.; 3. Extend RooAbsL test suite with comparisons to the non-MP RooFit fits (RooNLLVar) that they were intended to reimplement.; 4. Extend NaNPacker test suite with some simple arithmetic demonstrations / sanity checks. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15499:766,sanity check,sanity checks,766,https://root.cern,https://github.com/root-project/root/pull/15499,1,['sanity check'],['sanity checks']
Safety,"# This Pull request:. ## Changes or fixes:; Impossibility to build ROOT when another ROOT is already installed under /usr/ or other global directory for CLANG.; The modulemap file which is loaded on start of the interpreter was renamed from module.modulemap to ROOT.modulemap , this allows to avoid collisions with filenames. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #7128",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14321:293,avoid,avoid,293,https://root.cern,https://github.com/root-project/root/pull/14321,1,['avoid'],['avoid']
Safety,# This Pull request:. ## Changes or fixes:; Improves cast safety by using static_cast instead of old C-style cast. ## Checklist:. - [x] tested changes locally. This PR fixes # . ## Additional context; http://www.open-std.org/jtc1/sc22/wg21/docs/papers/1992/WG21%201992/X3J16_92-0122%20WG21_N0199.pdf,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9761:58,safe,safety,58,https://root.cern,https://github.com/root-project/root/pull/9761,1,['safe'],['safety']
Safety,# This Pull request:. ## Changes or fixes:; Makes TDatabasePDG::GetParticle methods thread safe and adds a test for this feature. ## Checklist:. - [v] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #11580,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13541:91,safe,safe,91,https://root.cern,https://github.com/root-project/root/pull/13541,1,['safe'],['safe']
Safety,# This Pull request:. ## Changes or fixes:; Makes the list of timers thread-safe.; It attempts to fix some of the issues reported in https://github.com/root-project/root/issues/8365. This is a follow-up from: https://github.com/root-project/root/pull/8379#issuecomment-857765612. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8562:76,safe,safe,76,https://root.cern,https://github.com/root-project/root/pull/8562,1,['safe'],['safe']
Safety,# This Pull request:. ## Changes or fixes:; Prevents doxygen from parsing non-C++-standard keywords and avoids corresponding warnings.; This follows the recommendation from https://www.doxygen.nl/manual/preprocessing.html concerning hiding attribute and declspec from doxygen. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9946:104,avoid,avoids,104,https://root.cern,https://github.com/root-project/root/pull/9946,1,['avoid'],['avoids']
Safety,"# This Pull request:. ## Changes or fixes:; Reimplement the TGraph::Sort function using std::sort to avoid a segmentation fault when used with a large number of entries. It's also faster, ex. for a `10000 points`:; ```; BEFORE CHANGES -> Sort execution time: 148100 microseconds. AFTER CHANGES -> Sort execution time: 7065 microseconds; ```; ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #13632",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13635:101,avoid,avoid,101,https://root.cern,https://github.com/root-project/root/pull/13635,1,['avoid'],['avoid']
Safety,# This Pull request:. ## Changes or fixes:; thread safety of DirName; as suggested by pcanal here: https://github.com/root-project/root/pull/11443#discussion_r997428823. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11588:51,safe,safety,51,https://root.cern,https://github.com/root-project/root/pull/11588,1,['safe'],['safety']
Safety,# This Pull request:. - Respect cluster boundaries when assigning entry ranges to slots; - Add RPageSource::SetEntryRange to avoid cluster read-ahead into other slots entry range. ## Changes or fixes:. Fixes RDF-IMT with RNTuple. ## Checklist:. - [X] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14050:125,avoid,avoid,125,https://root.cern,https://github.com/root-project/root/pull/14050,1,['avoid'],['avoid']
Safety,"# This Pull request:. Adds a tutorial that shows how to create a derived data set with a subset of the columns and row of the input data set. Working on the tutorial triggered several improvements to the RNTuple API:. - RNTupleModel takes ownership of entries and returns weak pointers to them (entries need to be destructed before the model and with it its fields are destructed).; - Several safety improvements: make members `const` or private; - Add `RFieldBase::Compare()`; - Several minor improvements. This PR triggers several follow-up PRs, e.g.; - `RBulk` should be returned as weak pointers like entries.; - `RFieldBase::RValue` should use shared pointers, not raw pointers; - There should be read support for projected fields to complete the skimming tutorial. Nevertheless, the PR is already rather large and it does seem to make sense to review it as is. ## Changes or fixes:. Changes to the following APIs: `RNTupleReader`, `RNTupleWriter`, `RNTupleModel`, `REntry`. ## Checklist:. - [x] tested changes locally; - [x] updated the docs; - [ ] ping known users about the changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13604:393,safe,safety,393,https://root.cern,https://github.com/root-project/root/pull/13604,1,['safe'],['safety']
Safety,# This Pull request:. Adds more advanced options to parse CSV files:; ; - Left/right trimming; - Skipping of a given number of header/footer lines; - Comment character to skip lines / line remainders; - Impose column names. It brings the CSV datasource closer to the Pandas CSV parsing capabilities and should avoid in many cases the need for users to implement custom text file parsing code. ## Checklist:. - [X] tested changes locally; - [ ] add tutorial; - [x] add pythonization for `FromCSV` that uses named arguments for all the new options in `RCsvDS::ROptions`; - [ ] update release notes; - [ ] Update RCsvDS class documentation,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15045:310,avoid,avoid,310,https://root.cern,https://github.com/root-project/root/pull/15045,1,['avoid'],['avoid']
Safety,# This Pull request:. Adds more functionality to the RooPolyFunc. ## Changes or fixes:. Add a new constructor and change an existing one slightly to avoid collisions.; Add getters for internal variables.; Fix bugs in printout. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11953:149,avoid,avoid,149,https://root.cern,https://github.com/root-project/root/pull/11953,1,['avoid'],['avoid']
Safety,# This Pull request:. Fixes a bug that made the dict-version crash for HistFactory setups. ## Changes or fixes:. - make sure modifiers are always kept as a list such as to avoid collisions between HistoSys and OverallSys with the same name,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13537:172,avoid,avoid,172,https://root.cern,https://github.com/root-project/root/pull/13537,1,['avoid'],['avoid']
Safety,"# This Pull request:. Fixes various minor bugs in the HS3 implementation. ## Changes or fixes:. - avoid TH1 as intermediary objects; - flag overloads correctly; - add a ""type"" field to dataset exports; - add ""parameter_name"" field to histfactory PDF exports. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12636:98,avoid,avoid,98,https://root.cern,https://github.com/root-project/root/pull/12636,1,['avoid'],['avoid']
Safety,"# This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64.; ```; The following tests FAILED:; 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout); 	967 - tutorial-tmva-TMVAMulticlass (Timeout); ```; The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10886:41,timeout,timeouts,41,https://root.cern,https://github.com/root-project/root/pull/10886,5,"['Timeout', 'timeout']","['Timeout', 'timeout', 'timeouts']"
Safety,# This Pull request:. Loads factory expressions and export keys in RooFit automatically to avoid unnecessary imports. ## Changes:. It's not required to call `loadExportKeys` and `loadFactoryExpressions` every time to load default JSON I/O keys. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13152:91,avoid,avoid,91,https://root.cern,https://github.com/root-project/root/pull/13152,1,['avoid'],['avoid']
Safety,"# This Pull request:. The HistFactory exporter tends to crash with ""edited"" HistFactory pdfs that look like genuine HistFactory upon first inspection but turn out not to be.; This PR delays the writing to the node of the JSOn structure until after all components have been found and identified, such that the exporter can cleanly abort in case an export with the HistFactory template is not possible. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10842:330,abort,abort,330,https://root.cern,https://github.com/root-project/root/pull/10842,1,['abort'],['abort']
Safety,"# This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:; ~~~~; cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d; /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed.; Subprocess aborted; gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1; gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'; gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2; gmake[1]: *** Waiting for unfinished jobs....; ~~~~. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11704:677,abort,aborted,677,https://root.cern,https://github.com/root-project/root/pull/11704,1,['abort'],['aborted']
Safety,"# This Pull request:. This PR implements the correct copy constructors for the FitData classes and, when the user provides to teh Fitter, a reference to a Fit data classes, the data are copied. ; An interface using a `shared_ptr` to the data exists to avoid copying. . This PR fixes #11154",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11209:252,avoid,avoid,252,https://root.cern,https://github.com/root-project/root/pull/11209,1,['avoid'],['avoid']
Safety,# This Pull request:. This PR refactors the iterator implementation for the JSON interface to avoid performance issues with reading workspaces from JSON. ## Changes or fixes:. Reading JSON files is much faster now. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9728:94,avoid,avoid,94,https://root.cern,https://github.com/root-project/root/pull/9728,1,['avoid'],['avoid']
Safety,# This Pull request:; - Removes some dead or redundant code from RMiniFile.cxx (see commit comment for more details); - adds a utility to FileRaii to preserve the file after running. Useful to quickly debug a test file locally without having to recompile ntuple_test.hxx or doing some weird tricks. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15670:45,redund,redundant,45,https://root.cern,https://github.com/root-project/root/pull/15670,1,['redund'],['redundant']
Safety,# This Pull request:; - Returns the newly added node from call to TGeoVolume::AddNode; - Allows an option to avoid voxelation. ## Changes or fixes:. Profiling geometry building in CMSSW turned up two issues; 1. Doing a linear lookup for newly added nodes to a TGeoVolume was very slow2. ; 2. CMS uses DD4Hep (which uses ROOT) as a geometry description system not as a geometry navigation system. The building of the voxels was slow and is never used in CMSSW. . This change was temporarily incorporated into CMS' development branch and did not cause any noticeable problems and did give a speed boost. ## Checklist:. - [ x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10576:109,avoid,avoid,109,https://root.cern,https://github.com/root-project/root/pull/10576,1,['avoid'],['avoid']
Safety,# This Pull request:; - Returns the newly added node from call to TGeoVolume::AddNode; - Allows an option to avoid voxelation. back port of #10576. ## Changes or fixes:; Profiling geometry building in CMSSW turned up two issues. 1. Doing a linear lookup for newly added nodes to a TGeoVolume was very slow2.; 2. CMS uses DD4Hep (which uses ROOT) as a geometry description system not as a geometry navigation system. The building of the voxels was slow and is never used in CMSSW. This change was temporarily incorporated into CMS' development branch and did not cause any noticeable problems and did give a speed boost. ## Checklist:. - [ x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10642:109,avoid,avoid,109,https://root.cern,https://github.com/root-project/root/pull/10642,1,['avoid'],['avoid']
Safety,"# This Pull request:; Adds an optional safety parameter to : `TGeoManager::CheckPoint(Double_t x, Double_t y, Double_t z, Option_t *option, Double_t safety)`; ## Changes or fixes:; Backward-compatible interface change, allowing the user to inspect if a given distance is safe (not touching the volume surfaces neighbouring a point). ```cpp; gGeoManager->CheckPoint(4.00457, -62.4337, 4.46698);; === Check current point : (4.00457, -62.4337, 4.46698) ===; - path : /TOP_1; Safety radius : 35.433700; ```. ![root_arb8](https://github.com/root-project/root/assets/18400453/133e7f2e-a20b-4c89-b4c7-5587ba50df84). ```cpp; gGeoManager->CheckPoint(4.00457, -62.4337, 4.46698, """", 31.067 /*user-defined*/); === Check current point : (4.00457, -62.4337, 4.46698) ===; - path : /TOP_1; Safety radius : 31.067000; ```; ![surface](https://github.com/root-project/root/assets/18400453/425f7b02-24e2-486c-b8a4-0da323d7dd1a). ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary) Updated the class reference. This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14851:39,safe,safety,39,https://root.cern,https://github.com/root-project/root/pull/14851,5,"['Safe', 'safe']","['Safety', 'safe', 'safety']"
Safety,"# This Pull request:; As a follow-up from #8688, this is a sketch of a thread-safe, bounded queue that could be used as a channel to transfer work items between consumer and producer threads. Opened as draft to solicit input if such a class would be a useful addition to the ROOT internal infrastructure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8715:78,safe,safe,78,https://root.cern,https://github.com/root-project/root/pull/8715,1,['safe'],['safe']
Safety,"# This Pull request:; Avoid removing elements of `RooArgSet` in `RooBarlowBeestonLL` while looping over them. This was broken since ROOT v6.18, after `RooAbsCollection` was moved to `std::vector` . This (re)enables the analytical treatment of statistical uncertainties in bins with the Barlow-Beeston-Lite procedure. ## Changes or fixes:; As described above. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10921:22,Avoid,Avoid,22,https://root.cern,https://github.com/root-project/root/pull/10921,1,['Avoid'],['Avoid']
Safety,"# This Pull request:; Deprecates flawed method TGeoBBox::AreOverlapping; ## Changes or fixes:; The function fails to detect some box overlaps, and it is not used inside ROOT.; Added deprecation macro after the function definition. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes [ROOT-8712](https://its.cern.ch/jira/browse/ROOT-8712)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14954:117,detect,detect,117,https://root.cern,https://github.com/root-project/root/pull/14954,1,['detect'],['detect']
Safety,# This Pull request:; Eliminates duplicate linked libraries to avoid warnings on mac. ## Changes or fixes:. ## Checklist:. - [v] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13705:63,avoid,avoid,63,https://root.cern,https://github.com/root-project/root/pull/13705,1,['avoid'],['avoid']
Safety,# This Pull request:; Fix to compute radiation length on call TGeoMixture::ComputeDerivedQuantities(); The call leads to wrong results if the TGeoManager was created before the ; TGeo units change. This was not detected by the test previously prepared; for PR https://github.com/root-project/root/pull/11060. ## Changes or fixes:; Fix to call TGeoMixture::ComputeRadiationLength() to take into account the correct; unit normalizations. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #11060,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11115:211,detect,detected,211,https://root.cern,https://github.com/root-project/root/pull/11115,1,['detect'],['detected']
Safety,"# This Pull request:; Makes changes to ROOT v7 in order to comply with the API for DAOS 2.0.x, affecting the libraries `RPageStorageDaos`, `RDaos` and `libdaos_mock`, as well as the `ntuple_storage_daos` test suite. ## Changes or fixes:; - As of DAOS 2.0, pool service replica ranks are not longer specified in DAOS URIs. Thus, `daos_pool_connect` now forgoes the `svc_rank_list` argument.; - Container addresses follow the simplified pattern `daos://($pool)/($container)`. ; - `RPageStorageDaos` consequently drops parsing enforcement of the previous pattern.; - DAOS 2.0 introduced support for creating pools and containers from a label that is then hashed internally as a UUID. Pool and containers are now identifiable by user-provided labels of up to 127 characters (alphanumeric, colon, period, hyphen or underscore) or by 36-character UUIDs. Labels that match a UUID pattern are explicitly forbidden. ; - `RDaos` now only supports container creation from user-supplied labels (via `daos_cont_create_with_label`), due to deprecated usage of `daos_cont_create` with user-supplied UUIDs. However, existing containers may still be opened by their UUIDs. ; - `RPool` and `RContainer` maintain a copy of valid labels (when supplied) and UUIDs (after successfully opening pools and containers respectively); - Generation of object IDs in `RDaos`: new redundancy, sharding and object type flags; `daos_obj_generate_oid` replaces `daos_obj_generate_id`. ; - The `libdaos_mock` library is updated in lockstep.; - RNTuple backend testing is updated to follow the DAOS 2.0 URI pattern, using labels for default test pool and containers. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10720:1350,redund,redundancy,1350,https://root.cern,https://github.com/root-project/root/pull/10720,1,['redund'],['redundancy']
Safety,"# This Pull request:; Moves some code out of the parallel tasks in RNTupleMerger (particularly, `ThrowOnError` which is not necessarily happily parallelizable).; It also avoids spawning the parallel tasks if not needed, i.e. if we don't need to change the compression of the pages. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16073:170,avoid,avoids,170,https://root.cern,https://github.com/root-project/root/pull/16073,1,['avoid'],['avoids']
Safety,"# This Pull request:; Replace the shebang with python for the python scripts under `main/python`. ## Changes or fixes:; Use `/usr/bin/env python` as it is done everywhere else in ROOT (in some places; it's `python3` instead of `python`). Avoid having to; deal with the length of the shebang being too long when using a python installed; in deep locations (like in deep folder paths in cvmfs). I believe this shouldn't change anything in most setups except in those where; ROOT was built with one python and then the first python found in PATH is a; different one, but that is a weird setup (?). Alternatively it may be possible; to substitute only the name of the python executable, like `python3.11`, but; then it has to be in PATH. but I think this is the cleanest way and the cases; where this wouldn't work would be related to issues in the environment rather; than ROOT itself. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13380:238,Avoid,Avoid,238,https://root.cern,https://github.com/root-project/root/pull/13380,1,['Avoid'],['Avoid']
Safety,# This Pull request:; Returns the newly added node from call to TGeoVolume::AddNode; Allows an option to avoid voxelation. back port of #10576. ## Changes or fixes:; Profiling geometry building in CMSSW turned up two issues. 1. Doing a linear lookup for newly added nodes to a TGeoVolume was very slow2.; 2. CMS uses DD4Hep (which uses ROOT) as a geometry description system not as a geometry navigation system. The building of the voxels was slow and is never used in CMSSW. This change was temporarily incorporated into CMS' development branch and did not cause any noticeable problems and did give a speed boost. ## Checklist:. - [ x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10641:105,avoid,avoid,105,https://root.cern,https://github.com/root-project/root/pull/10641,1,['avoid'],['avoid']
Safety,"# This Pull request:; The `RooLagrangianMorphFunc` loads its input objects from a nested set of `TFolders` stored in a `TFile`. ; This MR adds protection (inspired by [ROOT-9275](https://sft.its.cern.ch/jira/browse/ROOT-9275) to avoid memory leaks in the initialisation of the `RooLagrangianMorphFunc`, which for large `RooFit` workspaces with many morphing functions can otherwise become unfeasible to use. . ## Changes or fixes:; - add a `cleanUpFolder` helper method to an existing anoymous namespace to `RooLagrangianMorphFunc.cxx`, which ensures ownership is enabled for `TFolder`s loaded from `TFile`s and optionally deletes the folders after setting them up ; - add a templated `loadFromFileResidentFolder` method to the same anonymous namespace in `RooLagrangianMorphFunc.cxx`, refactoring the procedure of loading an object from a nested `TFolder` structure that was previously performed in various locations in the class. The method exploits the `cleanUpFolder` method to prevent memory leaks in the access procedure. . ## Checklist:. - [ x ] tested changes locally - confirmed leak rate massively reduced in local testing. Draft test script (not yet merged) provided by @rahulgrit retains same output as before the changes; - [ ] updated the docs (if necessary) - no changes to user-accessible code. Inline doxygen documentation of new methods. . Tagging @rahulgrit @guitargeek",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9717:229,avoid,avoid,229,https://root.cern,https://github.com/root-project/root/pull/9717,1,['avoid'],['avoid']
Safety,"# This Pull request:; [DF] Added SaveGraph Tutorials; [DF] Remove static members from SaveGraph (Apply improvements from #9145). ## Changes or fixes:. Removed the static GraphNode id initializer (relevant for SaveGraph). Removed static maps, which were used to check if a define/filter/range node were already on the computation graph.; Solution is to pass a (non-static) map, which is created at each call of SaveGraph. The visited map is now only one and has signature `std::unordered_map<void *, std::shared_ptr<GraphNode>>` - in this manner, different type of nodes can use the same map. The size of the map of visited nodes is used to assign unique ids. Now, also the action nodes are in the visited map. Moreover, some friend methods are now redundant. Tests were adapted accordingly. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #9145",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9540:748,redund,redundant,748,https://root.cern,https://github.com/root-project/root/pull/9540,1,['redund'],['redundant']
Safety,"# This Pull request:; avoids throwing an exception when creating the descriptor for an RNTuple containing an unknown column type. We want to support this case for forward compatibility. Also adds a unit test testing this specific case.; Some dedicated code needs to be added to the internals of RNTuple to support this kind of test case, but it's not exposed to the user. ## Remarks; Currently the test just checks that we can read back the descriptor. A future PR will add a ""fwd compatibility mode"" to the read options that'll allow a user to reconstruct the model skipping over fields containing unknown column types. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16516:22,avoid,avoids,22,https://root.cern,https://github.com/root-project/root/pull/16516,1,['avoid'],['avoids']
Safety,"# This Pull request:; by @hahnjo suggestion, since we are exposing a type-erased virtual interface for `RColumnElement` through `RColumnElementBase`, we can hide all the concrete definitions into a cxx file.; This has the benefit of reducing the compile time of any translation unit that includes `RColumnElementBase.hxx` significantly, as the compiler won't have to instantiate all the combination matrix of `RColumnElement<CppT, ColumnType>` every time.; It also let us have better control on exactly which types of `RColumnElement` we allow to instantiate by explicitly listing them into a proxy enum. ## Changes or fixes:; - renamed `RColumnElement.hxx` to `RColumnElementBase.hxx`; - moved all concrete definitions from `RColumnElementBase.hxx` to `src/RColumnElement.hxx`. This is a private header file that is included by `RColumnElement.cxx` and by `ntuple_endian.cxx`. The reason to separate this from `RColumnElement.cxx` is that `ntuple_endian.cxx` needs to simulate a big-endian machine by defining `R__LITTLE_ENDIAN 0`, which changes the definitions of some `RColumnElement`s. To avoid including the whole `RColumnElement.cxx` in the test, we decided to split the definitions into a file that can be included independently by the test. It's not a perfect solution (the test executable ends up with mismatching instantiations of RColumnElement since it links to libROOTNTuple.so) but it's technically not worse than before. We still might want to think of alternative solutions.; - introduces an enum `EColumnCppType` that lists all the allowed c++ in-memory types for RColumnElement. This is used internally to map the templated `RColumnElementBase::Generate` to a non-templated function that can be implemented in the cxx file. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16299:1093,avoid,avoid,1093,https://root.cern,https://github.com/root-project/root/pull/16299,1,['avoid'],['avoid']
Safety,"# This Pull request:; is the first half of #15714. It deprecates `ECompressionAlgorithm` in favor of `RCompressionSetting::EAlgorithm` and fixes the code to use the new enum.; This PR should be much safer and less problematic to merge than #15714, so we can start with this and later discuss about changing the `RCompressionSetting` enums to enum classes. Depends on #15820 . ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15821:199,safe,safer,199,https://root.cern,https://github.com/root-project/root/pull/15821,1,['safe'],['safer']
Safety,# This Pull request:; moves the dtor of RNTupleInspector to the cxx to avoid including (or having the user include) RPageStorage.hxx (otherwise ~unique_ptr<RPageSource> complains about incomplete type). ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16533:71,avoid,avoid,71,https://root.cern,https://github.com/root-project/root/pull/16533,1,['avoid'],['avoid']
Safety,"# Udate cppyy. *Sister PR in `roottest`: https://github.com/root-project/roottest/pull/1071*. ## Summary. Synchronizes the [CPyCppyy](https://github.com/wlav/CPyCppyy) CPython extension and [cppyy](https://github.com/wlav/cppyy) Python library with upstream to fix bugs, add features, and avoid duplicate maintenance efforts. ## Behavior changes. ### No implicit conversion from fixed-sized char buffers to null-terminated string. If you have a `char` buffer with constant size, people might use it for different things. For example, to store null-terminated short strings in a TTree. Therefore, the current PyROOT converts such buffers to Python strings. However, that means it's impossible to get the full buffer if it contains zeros, which can be useful if the buffer doesn't contain a string but for example some status bytes. Therefore, the used is not required to *explicitly convert the buffer to a Python string* with the `as_string()` method. Demo:; ```python; import ROOT. ROOT.gInterpreter.Declare("""""". struct Struct {; char char_buffer[5] {};; };. void fill_char_buffer(Struct & st); {; std::string foo{""foo""};; std::memcpy(st.char_buffer, foo.data(), foo.size());; }. """"""); struct = ROOT.Struct(); ROOT.fill_char_buffer(struct); char_buffer = struct.char_buffer. # With thew new cppyy, you get access to the lower level buffer instead:; print(""struct.char_buffer : "", char_buffer). # However, you can turn the buffer into a string very easily with as_string():; print(""struct.char_buffer.as_string(): "", char_buffer.as_string()); ```; The output:; ```txt; struct.char_buffer : <cppyy.LowLevelView object at 0x74c7a2682fb0>; struct.char_buffer.as_string(): foo; ```. ## Associated GitHub issues. This will close the following GitHub issue:; * https://github.com/root-project/root/issues/12718; * https://github.com/root-project/root/issues/7686; * https://github.com/root-project/root/issues/11924; * https://github.com/root-project/root/issues/12230; * https://github.com/root-project/roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14507:289,avoid,avoid,289,https://root.cern,https://github.com/root-project/root/pull/14507,1,['avoid'],['avoid']
Safety,"## Backport of #14627. ## Changes or fixes:. ROOT is known to have a 1 GB maximum IO size, see https://github.com/root-project/root/issues/6734, but did not provide proper safety checks against this (since 18y). This lead to silent crashes in the WriteFastArray function. The length of the buffer Int_t l takes a negative value if we do not add these checks and n is high enough. This fixes the crash reported here: https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue ; A reproducer of the crash is also in that link.; Seems there are more people seeing a similar crash on the forum https://root-forum.cern.ch/t/writing-out-events-larger-than-1-gb/33106. I did not check in depth, but this PR also probably fixes https://github.com/cms-sw/cmssw/issues/40132. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/14644",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15687:172,safe,safety,172,https://root.cern,https://github.com/root-project/root/pull/15687,1,['safe'],['safety']
Safety,"## Changes or fixes:; - When building in MacOS with afterimage (building ROOT from spack), I consistently get the following error:. ```; export.c:159:18: error: call to undeclared library function 'malloc' with type 'void *(unsigned long)'; ISO C99 and later do not support implicit function declarations [-Wimplicit-function-declaration]; realfilename = safemalloc( dirname_len+filename_len+1 );; ^; ./asim_afterbase.h:220:24: note: expanded from macro 'safemalloc'; #define safemalloc(s) malloc(s); ^; export.c:159:18: note: include the header <stdlib.h> or explicitly provide a declaration for 'malloc'; ./asim_afterbase.h:220:24: note: expanded from macro 'safemalloc'; #define safemalloc(s) malloc(s); ^; export.c:177:2: error: call to undeclared library function 'free' with type 'void (void *)'; ISO C99 and later do not support implicit function declarations [-Wimplicit-function-declaration]; free( realfilename );; ^; export.c:177:2: note: include the header <stdlib.h> or explicitly provide a declaration for 'free'; export.c:404:11: error: call to undeclared library function 'calloc' with type 'void *(unsigned long, unsigned long)'; ISO C99 and later do not support implicit function declarations [-Wimplicit-function-declaration]; curr = calloc(*size, 1);; ^; export.c:404:11: note: include the header <stdlib.h> or explicitly provide a declaration for 'calloc'; export.c:676:19: error: call to undeclared library function 'realloc' with type 'void *(void *, unsigned long)'; ISO C99 and later do not support implicit function declarations [-Wimplicit-function-declaration]; buff->buffer = realloc( buff->buffer, buff->allocated_size );; ^; export.c:676:19: note: include the header <stdlib.h> or explicitly provide a declaration for 'realloc'; 4 errors generated.; make[3]: *** [Makefile:346: export.o] Error 1; make[3]: *** Waiting for unfinished jobs....; ~. ```. In this PR I'm removing an undef that I think it shouldn't be there; if that variable is not defined then stdlib.h is n",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15044:355,safe,safemalloc,355,https://root.cern,https://github.com/root-project/root/pull/15044,5,['safe'],['safemalloc']
Safety,"## Checklist:. - [X] tested changes locally; - ~[ ] updated the docs (if necessary)~. Dear ROOT maintainers,; While the ROOT version shipped with FairSoft (v6-26-10) seems not to compile with C++20 yet, the ROOT libraries (compiled with C++17) can be linked against C++20 code. . But while trying to do that, I noticed that my compiler got confused because it had multiple definitions of ``std::span``:; One in [span.hxx](https://github.com/root-project/root/blob/master/core/foundation/inc/ROOT/span.hxx#L147); ```; namespace std {; inline namespace __ROOT {; template<class T>; class span { ... };; }}; ```; and one provided in a header by g++ or libstdc++. . I feel that unless one is developing a libstdc++, there are few valid cases of declaring stuff in the std namespace. (Exceptions include overloading operators for iostream with custom classes.) The point of having namespaces in the first place is to avoid such collisions!. The following actions would resolve my complaint:; * Merging this PR or something similar and replacing std::span with std::__ROOT_NI::span (or perhaps ROOT::span?) ; * Removing span.hxx from the API, using it only internally during ROOT compilation.; * Requiring C++20 and using the std::span which comes with the users libstdc++; * Shipping your own libstdc++, thus taking responsibility for the whole std namespace. . Cheers,; Philipp",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11968:912,avoid,avoid,912,https://root.cern,https://github.com/root-project/root/pull/11968,1,['avoid'],['avoid']
Safety,"## Describe the bug. I am trying to use the new TBulkRead API. I have a set of branches that I read with (updated with full reproducer):. ```c++; #include <TBufferFile.h>; #include <TFile.h>; #include <TTree.h>; #include <iostream>. void foo() {; auto f = TFile::Open(""http://hyperloop.cern.ch/train-workdir/testdata/LFN/alice/data/2015/LHC15o/000245064/pass5_lowIR/PWGZZ/Run3_Conversion/71_20200915-2255_child_1/0935/AO2D.root"");; auto t = (TTree*)f->Get(""O2track"");; auto e = t->GetEntries();; auto b = t->GetBranch(""fAlpha"");; assert(b);; int pos = 0;; while (pos < e) {; TBufferFile buf(TBuffer::EMode::kWrite, 32*1024);; auto &r = b->GetBulkRead();; auto s = r.GetBulkEntries(pos, buf);; pos += s;; std::cout << ""Read "" << s << "" elements "" << std::endl;; b->Print();; }; }; ```. however when I get to read the last but one buffer, I get:. ```c++; Read 1000 elements; *Br 3398 :fAlpha : fAlpha/F *; *Entries : 3399743 : Total Size= 13939349 bytes File Size = 11798760 *; *Baskets : 3399 : Basket Size= 1000 bytes Compression= 1.17 *; *............................................................................*; Fatal: fExtraBasket == nullptr && ""fExtraBasket should have been set to nullptr by GetFreshBasket"" violated at line 1474 of `/Users/ktf/src/sw/SOURCES/ROOT/v6-20-02-alice7/v6-20-02-alice7/tree/tree/src/TBranch.cxx'; aborting; ```. ## Expected behavior. Reading all the baskets, with the last one returning the appropriate number of entries. ## To Reproduce. ## Setup. 6.20.0. ## Additional context. TFile with a few TTree in it, all the branches have basic types or arrays of basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6416:1335,abort,aborting,1335,https://root.cern,https://github.com/root-project/root/issues/6416,1,['abort'],['aborting']
Safety,"## Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->. With [ROOT-10692](https://sft.its.cern.ch/jira/browse/ROOT-10692) fixed, ROOT now, by default, uses the default C++ standard of the compiler rather than always using C++11. However, due to how our cmake logic is structured, root7 is still turned off by default, even if the default C++ standard used by the compiler was detected to be C++14 or higher. ## Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. With a compiler that defaults to `-std=C++14` or above, a vanilla `cmake path/to/root` should have root7 turned on. ## Additional context; <!--; Add any other context about the problem here.; -->. I think the root cause is that, at the following lines in our main `CMakeLists.txt`, we _first_ include `RootBuildOptions` (which sets root7 to OFF by default because it doesn't detect a high-enough C++ standard) and _then_ we include `CheckCompiler`, which sets our default `CMAKE_CXX_STANDARD` to the compiler default. https://github.com/root-project/root/blob/33458dc53621cf3e685a302a4bf899108aed0d0c/CMakeLists.txt#L128-L134. Moving `include(CheckCompiler)` above `include(RootBuildOptions)` fixes this issue but breaks Windows, because some cmake variable that `CheckCompiler` needs in the case of windows were defined earlier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6406:416,detect,detected,416,https://root.cern,https://github.com/root-project/root/issues/6406,2,['detect'],"['detect', 'detected']"
Safety,"## Description; Development of the functionality for parsing and converting a Keras H5 file to ROOT format using the Fast Inference System SOFIE for the **ROOT Storage of Deep Learning Models** Project of *Google Summer of Code'21*. Project Link: https://summerofcode.withgoogle.com/projects/#5424575602491392. ## Progress; - [x] Restructured SOFIE to avoid dependency conflicts between different Python libraries; - [x] Parser function for extracting the model information and weights and instantiate a RModel Object ; - [x] Support for Keras Sequential API Models ; - [x] Support for Keras Functional API Models ; - [x] Supports Dense (with relu activation),ReLU and Permute Layers ; - [ ] ~~Support for Keras Subclassing Models~~ (Currently not supported by Root); - [x] Header file for the function ; - [x] Function implementation ; ; ## Checklist:; - [x] tested changes locally; - [x] Parser. ## Tests; - [x] Emit Files for generating header files; - [x] Tests for Parser; - [x] CMake Configuration for tests. ## Documentation ; - [x] Doxygen Docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8430:352,avoid,avoid,352,https://root.cern,https://github.com/root-project/root/pull/8430,1,['avoid'],['avoid']
Safety,"## Overview. RDICT files store some useful information (in particular about class offsets) in ROOT files to avoid the potentially expensive call to the interpreter if the information is not the PCH. For example, ROOT's `libGeom` and other third-party code. This is done to circumvent the costly call to `ShowMembers` which will require parsing. CxxModules diminish that benefit as providing a finer grained control over the information deserialization. We see no observable benefits in generating RDICT files next to our pcm files. . ## Performance results. We have run several times all tests in `roottest/io` and `roottest/meta/MakeProject` folders and compared the results with and without generating RDICT (namely with ROOT master with `-Druntime_cxxmodules=On` with and without this PR). They are available [here](https://docs.google.com/spreadsheets/d/1Y_swct0USyX1DMp0tJOPdZzvmvIOTXOS9s7n08wCb2I/edit?usp=sharing) and [here](https://docs.google.com/spreadsheets/d/1s5LbPmhGBfhimirA0GH87nyEKcrGUfCX80H7-fOrjAU/edit?usp=sharing). ### Methodology. We have a forwarding `root.exe` which essentially calls `/usr/bin/time -v root.exe $@`. We have processed and stored this information in csv files. We have run in:; * (no)dict1-cold -- Tests are run immediately after restarting the physical test machine.; * (no)dict1a-cold -- Tests are run immediately after restarting the physical test machine. Second time.; * (no)dict2 -- Tests are run once again after running (no)dict1-cold;; * (no)dict3 -- Tests are run once again after running (no)dict2;; * (no)dict4 -- Tests are run once again after running (no)dict3;; * (no)dict5 -- Tests are run once again after running (no)dict4. The values of each column in (no)dict* are the sum of each value produced after running each test under roottest/io. The average values are computed in the columns under `dict` and `nodict`. The difference is shown in `diff`. There are two known test failures wrt to modules whose values are ignored. The machine specifi",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3012:108,avoid,avoid,108,https://root.cern,https://github.com/root-project/root/pull/3012,1,['avoid'],['avoid']
Safety,"## Pythonic interaction with the RooWorkspace. This issue tracks the progress on the GSoC project on the Pythonic interaction with the RooWorkspace:; https://hepsoftwarefoundation.org/gsoc/2023/proposal_RooFit-RooWorkspacePythonization.html. This project was assigned to @yashnator. ## Milestones and TODOs. - [x] Pythonic way to use the RooWorkspace factory language using `__setitem__` on the workspace (#12911); - [x] Enable creation of pdf, functions and variables from Python dictionaries passed to `RooWorksapce.__setitem__` (#12994); - [x] Implement automatic loading of JSON IO keys (#13152); - [ ] Support creation of binned datasets from dictionaries as described in [this comment](https://github.com/root-project/root/issues/13185#issuecomment-1621628860); - [ ] Move all logic except for `dict` to string conversion to the C++ side; - [ ] Avoid using nlohmann-json directly, but use RooFits `JSONInterface` instead. ## Merged PRs. 1. https://github.com/root-project/root/pull/12911; 2. https://github.com/root-project/root/pull/12994; 3. https://github.com/root-project/root/pull/13152; 4. https://github.com/root-project/root/pull/13150",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13185:851,Avoid,Avoid,851,https://root.cern,https://github.com/root-project/root/issues/13185,1,['Avoid'],['Avoid']
Safety,"## This Pull request:. This is to follow-up on the mistake I did when performing the rebase for the [previous PR](https://github.com/root-project/root/pull/9665). ; Stating the PR message for clarity. The pull request add the tutorials for the lagrangian ; morphing class and also add an example for the factory interface. The are some accompanying ; fixes as listed below.; Please take a look and let me know if this looks good !. ## This Pull request:. - Add two tutorials `rf711_lagrangianmorph` and `rf712_lagrangianmorphfit` to demonstrate ; the usage of the `RooLagrangianMorphFunc` class; - The PR also includes an update to `rf512_wsfactory_oper` showing an example for the new; options of `taylorexpand` and `lagrangianmorph`; ; ## Changes or fixes:; - formatting of `tutorials/roofit/rf710_roopoly.py`; - The attribute for new physics couplings in the `RooLagrangianMorphFunc` class is changed ; from `NP` to `NewPhysics` to avoid confusion with other abbreviations; - The `lagrangianmorph` factory interface is update to accept arguments in any order. ## Checklist:. - [x] tested changes locally. Cheers,; Rahul",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9680:935,avoid,avoid,935,https://root.cern,https://github.com/root-project/root/pull/9680,1,['avoid'],['avoid']
Safety,"### Check duplicate issues. - [ ] Checked for duplicates. ### Describe the bug. When I tried to run TMVA test code with the follow errors. root [0] ; Processing TMVA_Higgs_Classification.C...; <FATAL> : Can't import __main__; ***> abort program execution; libc++abi: terminating due to uncaught exception of type std::runtime_error: FATAL error. macOS 13.4, M1, root 6.28.04, any solution? thanks. . ### What is the expected behaviour?. run TMVA tutorial code on macOS M1 it reported an error about libc++abi exceptions. ### How to reproduce?. root $ROOTSYS/tutorials/tmva/TMVA_Higgs_Classification.C ; on macOS 13.4 M1 processor. ### ROOT version. 6.28.04. ### How did you install ROOT?. download from root.cern.ch. ### Which operating system are you using?. macOS 13.4. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13002:231,abort,abort,231,https://root.cern,https://github.com/root-project/root/issues/13002,1,['abort'],['abort']
Safety,"### Check duplicate issues. - [ ] Checked for duplicates. ### Describe the bug. When root is built with minuit2_omp=on then using RooFit with Minuit2 is broken out of the box because minuit2 multithreads the objective function evaluation, where the objective function is provided by RooFit and is in general not thread safe. ### What is the expected behaviour?. Probably RooFit should disable the minuit2 multithreading when it calls minuit2 (but actually I couldn't even figure out how to do this myself beyond the brute force solution of setting the environment variable OMP_NUM_THREADS=1. ### How to reproduce?. In a build with minuit2_omp (e.g. standard root package on arch linux). ```python. import ROOT; import time. def gaussian_minuit2():; """"""; """""". axis = ROOT.RooRealVar(""x"", ""x"", 50, 130); axis.setBins(100); axis.setRange(50, 130). mu = ROOT.RooRealVar(""mu"", ""mu"", 91.0, 85.0, 97.0) # 91; sigma = ROOT.RooRealVar(""sigma"", ""sigma"", 4.0, 0.5, 10.0) # 4. background = ROOT.RooGaussian(""gauss_bkg"", ""Gaussian background"",; axis, mu, sigma). NDATA = 100000. data = background.generateBinned({axis}, NDATA); data.SetName(""Data_gauss""). mu2 = ROOT.RooRealVar(""mu2"", ""mu2"", 97.0, 50.0, 130.0) # 91; sigma2 = ROOT.RooRealVar(""sigma2"", ""sigma2"", 6.0, 0.5, 10.0) # 4. bkg_fit = ROOT.RooGaussian(""bkg_fit"", ""Gaussian background for fit"",; axis, mu2, sigma2). expected_num = ROOT.RooRealVar(; ""nexp"", ""nexp"", NDATA, 90000, 110000). model = ROOT.RooExtendPdf(; ""Extended"", ""extend"", bkg_fit, expected_num). res2 = model.fitTo(data, ; ROOT.RooFit.Extended(True), ; ROOT.RooFit.Minimizer(""Minuit2""),; ROOT.RooFit.Save(True), ; ROOT.RooFit.PrintLevel(0)). print(""***********************************""); res2.Print(); res2.correlationMatrix().Print(); print(res2.status()); print(res2.covQual()). '''; c = ROOT.TCanvas(); c.cd(); frame = axis.frame(Title=""Title""); data.plotOn(frame); model.plotOn(frame); frame.Draw(); c.SaveAs(""gaussian.png""); '''. if __name__ == '__main__':. ROOT.RooRandom.randomGenerat",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12940:319,safe,safe,319,https://root.cern,https://github.com/root-project/root/issues/12940,1,['safe'],['safe']
Safety,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. As seen on https://github.com/root-project/roottest/pull/1106#issuecomment-2050216040 and https://github.com/root-project/roottest/pull/1106#issuecomment-2050220592 there are several tutorials failures in the TMVA tutorials. We do not see those failures in the new CI thus it could be that either the new CI is not running them (or ignoring the failures); or there is a missing protection against a bad/not-supported configuration. This is a blocker to completely retiring the jenkins build as they currently ""appear"" to show failure that the new CI does not detect. . ### Reproducer. A sample of the failure output in case the log are deleted can be found at https://gist.github.com/pcanal/d68be81d3ea618a83fb50a11d4ea1d1d. ### ROOT version. master. ### Installation method. Jenkins/CI. ### Operating system. Ubuntu 22.04. ### Additional context. Seen on; ROOT-ubuntu2004/python3. Running on root-ubuntu-2004-1.cern.ch; and; ROOT-ubuntu2204/nortcxxmod.Running on root-ubuntu-2204-2.cern.ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15211:634,detect,detect,634,https://root.cern,https://github.com/root-project/root/issues/15211,1,['detect'],['detect']
Safety,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Dear experts,. The tutorial that shows how to create a dictionary `root-master/tutorials/tree/dictionary` do not compile in newer versions of Osx / Xcode. The error happens during the configuration:; ```; cmake .. -G Xcode ; -- The C compiler identification is AppleClang 14.0.0.14000029; -- The CXX compiler identification is AppleClang 14.0.0.14000029; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Configuring done (12.8s); -- Generating done (0.0s); CMake Error in CMakeLists.txt:; The custom command generating. /Users/agramunt/Downloads/root-master/tutorials/tree/dictionary/xcode/G__data2Tree.cxx. is attached to multiple targets:. G__data2Tree; data2TreeLib. but none of these is a common dependency of the other(s). This is not; allowed by the Xcode ""new build system"". CMake Generate step failed. Build files cannot be regenerated correctly.; ```. ### Reproducer. Try to compile the tutorial `root-master/tutorials/tree/dictionary`. ### ROOT version. fails with several versions in the same manner. ```; ------------------------------------------------------------------; | Welcome to ROOT 6.26/14 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for macosx64 on Nov 28 2023, 00:39:39 |; | From tags/v6-26-14@v6-26-14 |; | With Apple clang version 14.0.0 (clang-1400.0.29.202) |; | Try '.help', '.demo', '.license', '.credits',",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14595:433,Detect,Detecting,433,https://root.cern,https://github.com/root-project/root/issues/14595,8,['Detect'],['Detecting']
Safety,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. If the build directory is named (for example): `master.c++20` we get (zillions of times the lines):; ```; CMake Error at cmake/modules/RootMacros.cmake:336 (list):; list sub-command FILTER, mode REGEX failed to compile regex; ""^/Users/pcanal/root_working/builds/master.c++20/ginclude"".; Call Stack (most recent call first):; cmake/modules/RootMacros.cmake:1361 (ROOT_GENERATE_DICTIONARY); core/clingutils/CMakeLists.txt:69 (ROOT_STANDARD_LIBRARY_PACKAGE). ```. We should either fix this or make the error messages clearer (i.e detect the case early and fail clearly)>. ### Reproducer. Use a wild card (eg `+`) in the build directory name. ### ROOT version. master. ### Installation method. source. ### Operating system. linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13731:602,detect,detect,602,https://root.cern,https://github.com/root-project/root/issues/13731,1,['detect'],['detect']
Safety,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Moved from JIRA: [ROOT-10269](https://its.cern.ch/jira/browse/ROOT-10269). First reported on the forum [here](https://root-forum.cern.ch/t/empty-stack-error-during-rdataframe-snapshot/35620). The issue has been mitigated in master and 6.18/02 by disabling parallel TTree::Fill (and therefore the primary cause of nested parallelism during an RDF event loop).; This does not protect from users spawning their own TBB tasks within an RDF event loop. The proper fix is to fully support nested parallelism in RDF, which requires more work. The goal is simply to make nested parallelism in RDF safe. This is a matter of correctness, even though typically users do not spawn TBB tasks from within the RDF event loop. ### Reproducer. Reproducer without jitting, input files are [here](https://cernbox.cern.ch/index.php/s/1pGFlHFDwp8Mcqf):. ```; #include <ROOT/RDataFrame.hxx>; #include <TROOT.h>; #include <vector>; #include <string>. int main(); {; ROOT::EnableImplicitMT();; ; for (UInt_t i = 0 ; i < 100; i++){; 	std::vector<std::string> input_files;; 	input_files.emplace_back(""test1.root"");; 	input_files.emplace_back(""test2.root"");	; std::vector<std::string> columnList = {""mcChannelNumber"", ""DeltaPhiJJ"", ""DeltaPhiMetJJ"", ""DeltaPhiMetJJ_corr"", ""DeltaPhiMin3"", ""DeltaRJJ"", ""DeltaRJJ_corr"", ""DeltaR_ratio"", ""EleWeight"", ""EleWeightTrig_e24_lhmedium_L1EM20VH_OR_e60_lhmedium_OR_e120_lhloose_OR_e26_lhtight_nod0_ivarloose_OR_e60_lhmedium_nod0_OR_e140_lhloose_nod0"", ""Electron_charge"", ""Electron_eta"", ""Electron_m"", ""Electron_passOR"", ""Electron_phi"", ""Electron_pt"", ""Electron_signal"", ""FatJet_eta"", ""FatJet_m"", ""FatJet_n_matchedasstrkjets"", ""FatJet_phi"", ""FatJet_pt"", ""ForwardJet_eta"", ""ForwardJet_m"", ""ForwardJet_phi"", ""ForwardJet_pt"", ""GenWeight"", ""GenWeightMCSampleMerging"", ""HtRatioMerged"", ""HtRatioResolved"", ""IsMETTrigPassed"", ""IsSingleElecTrigMatched"", ""IsSingleElecTrigPassed"", ""IsSingleMuonTrigMatched"", ""IsSingleMuonTrigPa",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15079:664,safe,safe,664,https://root.cern,https://github.com/root-project/root/issues/15079,1,['safe'],['safe']
Safety,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The TMVA rreader is not multithread safe. I created a message on the root forum here: https://root-forum.cern.ch/t/tmva-rreader-not-multithread-safe/59662. In the end I think it boils down to moving the lock [here](https://github.com/root-project/root/blob/master/tmva/tmva/inc/TMVA/RReader.hxx#L245) a few lines up, before setting the variables. As a workaround we put a lock before the compute call and that solves the problem. ### Reproducer. see https://root-forum.cern.ch/t/tmva-rreader-not-multithread-safe/59662. ### ROOT version. 6.30 (but still in master). ### Installation method. pre build. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16600:111,safe,safe,111,https://root.cern,https://github.com/root-project/root/issues/16600,3,['safe'],['safe']
Safety,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The function `TClass::GetClassInfo()` is not thread safe because `TObject::TestBit` is not thread safe. The function `TClass::GetClassInfo()` is used routinely outside of the global interpreter lock, e.g. https://github.com/root-project/root/blob/dcebd46c6dec4028f68f1b7bf8e37d64558f1e56/core/meta/src/TListOfDataMembers.cxx#L408. https://github.com/root-project/root/blob/dcebd46c6dec4028f68f1b7bf8e37d64558f1e56/core/meta/src/TListOfFunctions.cxx#L376C26-L376C38. As CMS is experiencing problems where the list of functions returned from TClass will infrequently be empty when we are running multi-threaded, it is possible this race condition is the cause. ### Reproducer. Visual inspection shows the problem. We have not been able to make a small reproducer for the thread problem we are seeing. ### ROOT version. 6.30. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15090:127,safe,safe,127,https://root.cern,https://github.com/root-project/root/issues/15090,2,['safe'],['safe']
Safety,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The test roottest-root-hist-h2root broken on Alma9 march=native builds. This PR https://github.com/root-project/root/pull/15935 deactivated FORTRAN on Alma9 march=native to avoid confusing developers with ""expected failures"" (broken windows). The test should be fixed and the PR reverted ASAP. ### Reproducer. Just run the aforementioned test on the aforementioned platform. ### ROOT version. master. ### Installation method. from sources. ### Operating system. Linux, Alma9, march=native on modern Intel/AMD. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15936:248,avoid,avoid,248,https://root.cern,https://github.com/root-project/root/issues/15936,1,['avoid'],['avoid']
Safety,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. This issue stems originally from https://github.com/cms-sw/cmssw/issues/43077 and is a place to continue the discussions of https://github.com/root-project/root/pull/14261 and https://github.com/root-project/root/pull/14276 . ## The symptoms. In seemingly innocent examples we end up opening a huge amount of files at ROOT startup time. See in particular https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225 or https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781128718 . It turns out that the immediate cause of the large amount of open calls is that some symbol is missing and cling needs to traverse many files in order to find it. So far, offending symbols have been `TString::kNPOS` and `k*` variables from `TError.h`. ## The way forward. While the two linked ROOT PRs solve (maybe hide?) the immediate problem, there is an underlying root cause which is highlighted by the fact that in ROOT 6.26 (LLVM9) none of this was an issue. Ideally, we need to find a way to avoid the eager search of symbols in all libraries in `$LD_LIBRARY_PATH`. In fact, the mere fact that we search for the symbol `TString::kNPOS` in such simple examples is a problem, that shouldn't be necessary. ### Reproducer. https://github.com/cms-sw/cmssw/issues/43077#issuecomment-1781108225. ### ROOT version. `>=6.28`. ### Installation method. build from source. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14277:1072,avoid,avoid,1072,https://root.cern,https://github.com/root-project/root/issues/14277,1,['avoid'],['avoid']
Safety,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Under some special circumstances, when trying to use completely legitimnate template functions from PyROOT, crashes occur. ### Reproducer. ```python; import ROOT. v = ROOT.std.vector['float']([1,2,3]); print(v). # not representable; print (ROOT.cling.printValue['std::vector<float>'](v). # Destroys pyroot; '''; File ""work/issue_12817/a.py"", line 6, in <module>; print (ROOT.cling.printValue['std::vector<float>'](ROOT.AddressOf(v))); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; cppyy.ll.AbortSignal: Could not instantiate printValue<std::vector<float>>:; string cling::printValue(const ROOT::Math::LorentzVector<vector<float> >* v) =>; AbortSignal: abort from C++; program state was reset; '''; print (ROOT.cling.printValue['std::vector<float>'](ROOT.AddressOf(v))). # This destroys pyroot; #print (ROOT.cling.printValue['std::vector<int>'](v)); ```. ### ROOT version. master. ### Installation method. built from sources. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13866:583,Abort,AbortSignal,583,https://root.cern,https://github.com/root-project/root/issues/13866,3,"['Abort', 'abort']","['AbortSignal', 'abort']"
Safety,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Using root installed via Homebrew in `CMakeLists.txt` fails to locate Vdt.; ```; -- The C compiler identification is AppleClang 15.0.0.15000040; -- The CXX compiler identification is AppleClang 15.0.0.15000040; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found nlohmann_json: /usr/local/share/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.11.2"", minimum required is ""3.11.2"") ; CMake Error at /usr/local/Cellar/cmake/3.27.8/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):; Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY); Call Stack (most recent call first):; /usr/local/Cellar/cmake/3.27.8/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE); /usr/local/Cellar/root/6.30.00/share/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args); /usr/local/Cellar/cmake/3.27.8/share/cmake/Modules/CMakeFindDependencyMacro.cmake:76 (find_package); /usr/local/share/root/cmake/rootConfig.cmake:132 (find_dependency); CMakeLists.txt:3 (find_package). -- Configuring incomplete, errors occurred!; ```. ### Reproducer. - Install Root and CMake using Homebrew.; - Create a simple project.; ```cmake; cmake_minimum_required(VERSION 3.20); project(minimum_root); find_package(Root CONFIG REQUIRED); ```; - Run CMake with `cmake -S .`. ### ROOT version; ```; -----------------------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14113:289,Detect,Detecting,289,https://root.cern,https://github.com/root-project/root/issues/14113,8,['Detect'],['Detecting']
Safety,### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We have seen recently ubuntu24 failures of the type; ```; 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec; -- TEST COMMAND -- ; cd /github/home/ROOT-CI/roottest/root/tree/branches; /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest; -- BEGIN TEST OUTPUT --; /usr/bin/gmake -f Makefile test; gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'; ; Processing runnoname.C...; Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'.; *** buffer overflow detected ***: terminated; Aborted (core dumped); gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'; ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510). ### Reproducer. The reproducer is the roottest test at https://github.com/root-project/roottest/blob/a05d63796f584020aa2e749d95218434ef28cc37/root/tree/branches/runnoname.C. ### ROOT version. Any. ### Installation method. Built from source. ### Operating system. Ubuntu 24.04. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15621:357,timeout,timeout,357,https://root.cern,https://github.com/root-project/root/issues/15621,3,"['Abort', 'detect', 'timeout']","['Aborted', 'detected', 'timeout']"
Safety,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. ```; root [0] .L sparsehist.C ; root [1] .x sparsehist.C ; Assertion failed: (isa<X>(Val) && ""cast<Ty>() argument of incompatible type!""), function cast, file Casting.h, line 255.; Abort trap: 6; ```. ### Reproducer. See description and https://root-forum.cern.ch/t/break-segmentation-violation-when-executing-sparsehist-c/56948/5. ### ROOT version. ```; ------------------------------------------------------------------; | Welcome to ROOT 6.31/01 https://root.cern |; | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for macosxarm64 on Nov 02 2023, 22:29:51 |; | From heads/master-13574@v6-31-01-108-g1cf66addc0 |; | With Apple clang version 15.0.0 (clang-1500.0.40.1) |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```. ### Installation method. local build. ### Operating system. MacOS but likely any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14012:256,Abort,Abort,256,https://root.cern,https://github.com/root-project/root/issues/14012,1,['Abort'],['Abort']
Safety,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. As requested by @Axel-Naumann in #13130 this is a follow up of [my note there](https://github.com/root-project/root/issues/13130#issuecomment-1798152115). Basically I recently built and linked to ROOT in an external project (in a Docker image) and I got all unit tests failing because of a memory leak detected by the address sanitiser. As ROOT was set up using CMake via; ```; cmake -DCMAKE_INSTALL_PREFIX=../root_install ../root_src -Dxrootd=OFF; ```; the backtrace reported in my previous note was pretty small. Hence, I tried to compile ROOT as; ```; cmake -DCMAKE_INSTALL_PREFIX=../root_install ../root_src -Dxrootd=OFF -Dasan=ON; ```; but this failed with [this output](https://github.com/root-project/root/files/13353729/ROOT_failed_build.txt). Then I tried to make a minimal build via; ```; cmake -DCMAKE_INSTALL_PREFIX=../root_install ../root_src -Dxrootd=OFF -Dasan=ON -Dminimal=ON; ```; and this succeeded and I got my Docker image built. Inside it the tests of my application were still failing as expected, but this time the backtrace was way larger. In [this file](https://github.com/root-project/root/files/13353730/ROOT_backtrace_leak.txt) you find it all. ### Reproducer. As the build fails because of a leak, I am pretty much expecting that the two issues are related and I did not invest more time in building up a MWE to reproduce the second issue. However, I would naively guess that linking to the build library in any executable with the address sanitiser on would make it. ### ROOT version. In the Docker container in the minimal build ROOT binary folder, I get:; ```; root@fc0d5912f35b:/SMASH/root_install/bin# ./root.exe -b -q; ------------------------------------------------------------------; | Welcome to ROOT 6.28/06 https://root.cern |; | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Aug 28 2023, 11:29:15 |; | From tags/v6-28-06@v6-28-06 |; ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14055:377,detect,detected,377,https://root.cern,https://github.com/root-project/root/issues/14055,1,['detect'],['detected']
Safety,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/190460/testReport/projectroot.roottest.root/hist/roottest_root_hist_h2root, `h2root` fails from time to time on Linux and always if the *march=native* option is active. ### Reproducer. ```; -- TEST COMMAND -- ; cd /home/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/hist; /usr/bin/timeout -s USR2 270s h2root mb4i1.hbook; -- BEGIN TEST OUTPUT --. *** Break *** segmentation violation. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007f55ea9f53ea in __GI___wait4 (pid=1686062, stat_loc=stat_loc; entry=0x7ffffe689758, options=options; entry=0, usage=usage; entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30; #1 0x00007f55ea9f53ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc; entry=0x7ffffe689758, options=options; entry=0) at ./posix/waitpid.c:38; #2 0x00007f55ea95bbdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171; #3 0x00007f55eb242bc4 in TUnixSystem::StackTrace() () from /home/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.so.6.31; #4 0x00007f55eb23fef5 in TUnixSystem::DispatchSignals(ESignals) () from /home/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.so.6.31; #5 <signal handler called>; #6 0x0000556fff8ce440 in mzlink_ (); #7 0x0000556fff8be829 in hlimit_ (); #8 0x0000556fff8ad586 in main (); #9 0x00007f55ea934d90 in __libc_start_call_main (main=main; entry=0x556fff8ad4d0 <main>, argc=argc; entry=2, argv=argv; entry=0x7ffffe68cf78) at ../sysdeps/nptl/libc_start_call_main.h:58; #10 0x00007f55ea934e40 in __libc_start_main_impl (main=0x556fff8ad4d0 <main>, argc=2, argv=0x7ffffe68cf78, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fff",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14155:463,timeout,timeout,463,https://root.cern,https://github.com/root-project/root/issues/14155,1,['timeout'],['timeout']
Safety,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT 6.28.06 from source with python 3.11 results in easily-trigger GC assertion errors for at least me and and other user (@clark2668, who ran into this issue and sought out help from me in debugging this), on two different platforms (me on F38, @clark2668 on some version of Ubuntu). . In particular, the following script fails from a fresh build. . ```; import ROOT; f = ROOT.TFile(""test.root"",""CREATE""); ; ```. with stack trace. ```; #6 0x00007fc00f3cf844 in __pthread_kill_implementation () from /lib64/libc.so.6; #7 0x00007fc00f37eabe in raise () from /lib64/libc.so.6; #8 0x00007fc00f36787f in abort () from /lib64/libc.so.6; #9 0x00007fc00f36779b in __assert_fail_base.cold () from /lib64/libc.so.6; #10 0x00007fc00f377147 in __assert_fail () from /lib64/libc.so.6; #11 0x00007fc00f7ed8f3 in subtype_traverse (self=0x7fbfe6b16be0, visit=0x7fc00f8df3c1 <visit_decref>, arg=0x7fbfe6b16be0) at Objects/typeobject.c:1210; #12 0x00007fc00f8ddad9 in subtract_refs (containers=containers; entry=0x7fc00fbd5768 <_PyRuntime+59656>) at Modules/gcmodule.c:478; #13 0x00007fc00f8dedfb in deduce_unreachable (base=base; entry=0x7fc00fbd5768 <_PyRuntime+59656>, unreachable=unreachable; entry=0x7ffcb1bbae50) at Modules/gcmodule.c:1100; #14 0x00007fc00f8df921 in gc_collect_main (tstate=tstate; entry=0x7fc00fbef818 <_PyRuntime+166328>, generation=generation; entry=2, n_collected=n_collected; entry=0x7ffcb1bbaea8, n_uncollectable=n_uncollectable; entry=0x7ffcb1bbaea0, nofail=nofail; entry=0) at Modules/gcmodule.c:1226; #15 0x00007fc00f8dfe5e in gc_collect_with_callback (tstate=tstate; entry=0x7fc00fbef818 <_PyRuntime+166328>, generation=generation; entry=2) at Modules/gcmodule.c:1400; #16 0x00007fc00f8e042f in PyGC_Collect () at Modules/gcmodule.c:2086; #17 0x00007fc00f8b893d in Py_FinalizeEx () at Python/pylifecycle.c:1830; #18 0x00007fc00f8dd981 in Py_RunMain () at Modules/main.c:682; #19 0x00007fc00f8dd9d4 in",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13694:685,abort,abort,685,https://root.cern,https://github.com/root-project/root/issues/13694,1,['abort'],['abort']
Safety,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building with cuDNN 9.0 or later results in the following errors:; ```; /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn/RecurrentPropagation.cu(500): error: identifier ""cudnnRNNForwardTraining"" is undefined; cudnnStatus_t status = cudnnRNNForwardTraining(; ^; detected during instantiation of ""void TMVA::DNN::TCudnn<AFloat>::RNNForward(const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::RNNDescriptors_t &, TMVA::DNN::TCudnn<AFloat>::RNNWorkspace_t &, bool) [with AFloat=Float_t]"" at line 43 of /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn.cu. /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn/RecurrentPropagation.cu(513): error: identifier ""cudnnRNNForwardInference"" is undefined; cudnnStatus_t status = cudnnRNNForwardInference(; ^; detected during instantiation of ""void TMVA::DNN::TCudnn<AFloat>::RNNForward(const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::RNNDescriptors_t &, TMVA::DNN::TCudnn<AFloat>::RNNWorkspace_t &, bool) [with AFloat=Float_t]"" at line 43 of /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn.cu. /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn/RecurrentPropagation.cu(545): error: identifier ""cudnnRNNBackwardData"" is undefined; cudnnStatus_t status = cudnnRNNBackwardData(; ^; detected during instantiation of ""void TMVA::DNN::TCudnn<AFloat>:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15413:354,detect,detected,354,https://root.cern,https://github.com/root-project/root/issues/15413,1,['detect'],['detected']
Safety,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Calling `GetNFiles()` on the object returned by `Define` gives an incorrect value. The underlying issue is the fact that the `RDFDescription` gets constructed without this number and thus `fFileCount` does not get properly initialized. It should be fixable by adding it as an argument in this line:; https://github.com/root-project/root/blob/f53eb1b4f7c5df1350b0a2756695c8e951e8a34f/tree/dataframe/src/RInterfaceBase.cxx#L286; Additionally, perhaps the constructor without this arguments should be removed altogether to avoid similar bugs in the future. ### Reproducer. ```; ROOT::RDataFrame df(1);; df.Describe.GetNFiles();; ```. ### ROOT version. v6.30 and up. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15617:595,avoid,avoid,595,https://root.cern,https://github.com/root-project/root/issues/15617,1,['avoid'],['avoid']
Safety,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Firstly, I realize that root 5.x is now ancient and there may be little anyone can/wants to do about this. But for the record.. NixOS now builds all packages with [`-D_FORTIFY_SOURCE=3`](https://developers.redhat.com/articles/2022/09/17/gccs-new-fortification-level), and this has caused the build for our `root5` package to fail with `*** buffer overflow detected ***: terminated`. This is around the section where `loadfile.cxx` is being built and the compiler's static checks are complaining extensively about e.g. `'__builtin___snprintf_chk' output 8 or more bytes (assuming 1054) into a destination of size 1024`. For a full build log see https://hydra.nixos.org/log/m5px209xi7xr4iinwsgjjf01xxlwsq9g-root-5.34.38.drv (mirrored https://gist.github.com/risicle/d2118ace061c90f8eca3d4c366a93434). ### Reproducer. Build on linux with `-D_FORTIFY_SOURCE=3`?. This is with gcc12 & glibc 2.37. ### ROOT version. 5.34.38 + 348f30a6a3b5905ef734a7bd318bc0ee8bca6dc9 (""gcc9 fix"") + 3c243b18768d3c3501faf3ca4e4acfc071021350 (""gcc10 fix"") + c75458024082de0cc35b45505c652b8460a9e71b (""python 3.7 fix""). ### Installation method. NixOS package. ### Operating system. NixOS Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13216:431,detect,detected,431,https://root.cern,https://github.com/root-project/root/issues/13216,1,['detect'],['detected']
Safety,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, I am trying to install a new version of ROOT. I wonder if this is related to newly enabled features maybe ?; ```; $ cmake ../src -DCMAKE_INSTALL_PREFIX=$SOFTWARE/root/20240113 -Dimt=ON -Dbuiltin_glew=ON -Dmathmore=ON -DCMAKE_CXX_STANDARD=17 -DROOT7=ON; -- Detected ROOT_VERSION 6.26.10; -- Checking internet connectivity...; -- Yes; -- Looking for Python; -- Could NOT find Python3 (missing: Python3_NumPy_INCLUDE_DIRS NumPy) (found version ""3.12.0""); -- Could NOT find Python2 (missing: Python2_EXECUTABLE Python2_INCLUDE_DIRS Python2_LIBRARIES Python2_NumPy_INCLUDE_DIRS Interpreter Development NumPy Development.Module Development.Embed) ; Reason given by package: ; Interpreter: Wrong major version for the interpreter ""/opt/homebrew/bin/python"". -- Found a macOS system 14.2; -- Found an AArch64 system; -- ROOT Platform: macosx; -- ROOT Compiler: AppleClang 15.0.0.15000100; -- ROOT Processor: arm64; -- ROOT Architecture: macosxarm64; -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'); -- Compiler Flags: -std=c++17 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Wall -Woverloaded-virtual -fsigned-char -fno-common -Qunused-arguments -pthread -stdlib=libc++ -O3 -DNDEBUG; -- ROOT default compression algorithm: zlib; -- PyROOT will be built for version 3.12.0; -- Looking for ZLib; -- Building freetype version 2.12.1 included in ROOT itself; -- Looking for PCRE; -- Looking for LZMA; -- Looking for ZSTD; -- Looking for LZ4; -- Building AfterImage library included in ROOT itself; -- Looking for GSL; -- Looking for OpenGL; -- Looking for LibXml2; -- Looking for MySQL; -- Looking for SQLite; -- Looking for FFTW3; -- Looking for XROOTD; -- Found Xrootd version num: 5.5.0 (setting -DROOTXRDVERS=500050000); -- libXrdMain not found: xproofd wil",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14337:338,Detect,Detected,338,https://root.cern,https://github.com/root-project/root/issues/14337,1,['Detect'],['Detected']
Safety,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/src/MethodLD.cxx`, line 177 and line 202, at `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)); A possible fix is in the PR #13321. ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13497:554,safe,safety,554,https://root.cern,https://github.com/root-project/root/issues/13497,1,['safe'],['safety']
Safety,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. ROOT is known to have a 1 GB maximum IO size, see https://github.com/root-project/root/issues/6734, but did not provide proper safety checks against this (since 18y). This leads to silent crashes in the WriteFastArray function. The length of the buffer Int_t l takes a negative value if we do not add these checks and n is high enough. Crash reported here: https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue. Seems there are more people seeing a similar crash on the forum https://root-forum.cern.ch/t/writing-out-events-larger-than-1-gb/33106. I did not check in depth, but this PR also probably fixes https://github.com/cms-sw/cmssw/issues/40132. ### Reproducer. https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue. ### ROOT version. ```; ROOT v6.30/04; Built for linuxx8664gcc on Jan 31 2024, 10:01:37; From heads/master@tags/v6-30-04; With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0; Binary directory: /opt/root/bin; ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14644:202,safe,safety,202,https://root.cern,https://github.com/root-project/root/issues/14644,1,['safe'],['safety']
Safety,### Check duplicate issues. - [X] Checked for duplicates. ### Description. ROOT_HEAD failed in the nightlies in centos7 platfom; The reported error estracted from the[ log file ](http://cdash.cern.ch/upload/43670d452f7f3ef813ce655ef9357e62800d1e7a/ROOT-HEAD-configure.log)is:; gnu/11.3.0/../../../../include/c++/11.3.0/x86_64-pc-linux-gnu:/cvmfs/sft.cern.ch/lcg/releases/gcc/11.3.0-ad0f5/x86_64-centos7/bin/../lib/gcc/x86_64-pc-linux-gnu/11.3.0/../../../../include/c++/11.3.0/backward' at runtime.; -- And then fallback to: 'g++'; -- Performing Test CXX_HAS_fno_rtti; -- Performing Test CXX_HAS_fno_rtti - Success; -- Performing Test found_arc4; -- Performing Test found_arc4 - Failed; -- Performing Test found_arc4_bsd; -- Performing Test found_arc4_bsd - Failed; -- Performing Test found_getrandom; -- Performing Test found_getrandom - Failed; CMake Error at core/unix/CMakeLists.txt:42 (message):; Fail to detect cryptographic random generator. ### Reproducer. [lcg_nightly_pipeline](https://lcgapp-services.cern.ch/spi-jenkins/view/LCG%20Nightlies/job/lcg_nightly_pipeline/). ### ROOT version. master. ### Installation method. build from source. ### Operating system. centos7. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14958:909,detect,detect,909,https://root.cern,https://github.com/root-project/root/issues/14958,1,['detect'],['detect']
Safety,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Using ROOT 6.30/04 built by EP-SFT stacks for `aarch64-el9-gcc13-dbg` on `lxplus-arm.cern.ch` the application is aborted because of a failed assert:; ```; root.exe: /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:77: clang::serialization::InputFile::InputFile(clang::FileEntryRef, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed.; ```. It turns out that the failure is implicitly caused by an updated version of GCC (from 11.3 to 11.4). ### Reproducer. Here is a redacted log a sessions exposing the problem:; ```; ssh lxplus-arm.cern.ch; > rpm -q gcc; gcc-11.4.1-2.1.el9.aarch64; > . /cvmfs/sft.cern.ch/lcg/releases/gcc/13.1.0-b3d18/aarch64-el9/setup.sh; > . /cvmfs/sft.cern.ch/lcg/views/LCG_105a/aarch64-el9-gcc13-dbg/setup.sh; > root; root.exe: /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.30.04/src/ROOT/6.30.04/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFile.h:77: clang::serialization::InputFile::InputFile(clang::FileEntryRef, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed.; >; ```. The optimized build, of course, works; ```; ssh lxplus-arm.cern.ch; > rpm -q gcc; gcc-11.4.1-2.1.el9.aarch64; > . /cvmfs/sft.cern.ch/lcg/releases/gcc/13.1.0-b3d18/aarch64-el9/setup.sh; > . /cvmfs/sft.cern.ch/lcg/views/LCG_105a/aarch64-el9-gcc13-opt/setup.sh; > root; ------------------------------------------------------------------; | Welcome to ROOT 6.30/04 https://root.cern |; | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxarm64 on Feb 03 2024, 21:41:03 |; | From heads/master@tags/v6-30-04 |; | With g++ (GCC) 13.1.0 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; --------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14789:188,abort,aborted,188,https://root.cern,https://github.com/root-project/root/issues/14789,1,['abort'],['aborted']
Safety,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. When building minuit2 standalone with root 6.30/02 (`-Dminuit2_standalone=ON`), cmake errors out because it is unable to find the `RVersion.hxx` file. It tries to look for `core/foundation/inc/ROOT/RVersion.hxx` but of course that directory does not exist inside `math/minuit2` and the version file has been copied by `copy_standalone()` to the top-level dir (i.e. in `math/minuit2`) itself. As a results, cmake does not find the version file and aborts. This is fixed by the following modification to `StandAlone.cmake`, whereupon the configuration and build proceeds without any error. ```patch; Index: root-6.30.02/math/minuit2/StandAlone.cmake; ===================================================================; --- root-6.30.02.orig/math/minuit2/StandAlone.cmake; +++ root-6.30.02/math/minuit2/StandAlone.cmake; @@ -40,8 +40,8 @@ endfunction(); include(copy_standalone.cmake). # Copy these files in if needed; -copy_standalone(SOURCE ../.. DESTINATION . OUTPUT VERSION_FILE; - FILES core/foundation/inc/ROOT/RVersion.hxx); +copy_standalone(SOURCE ../../core/foundation/inc/ROOT DESTINATION . OUTPUT VERSION_FILE; + FILES RVersion.hxx). copy_standalone(SOURCE ../.. DESTINATION .; FILES LGPL2_1.txt); ```. Please let me know if this is the right fix. Thanks in advance. ### Reproducer. Running `cmake -Dminuit2_standalone:BOOL=ON` should be enough to bring up the issue. ### ROOT version. 6.30/02. ### Installation method. Build from source. ### Operating system. Linux openSUSE Tumbleweed. ### Additional context. Found when building RPMs for distro.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14157:522,abort,aborts,522,https://root.cern,https://github.com/root-project/root/issues/14157,1,['abort'],['aborts']
Safety,"### Check duplicate issues. - [x] Checked for duplicates. ### Description. Hello,; I am trying to load a GDML file using matrix and variables. Here in an extract from the gdml:. ```; <matrix name=""someNumbers"" coldim=""1"" values=""4 3 2 3""/>; <variable name=""testVariable"" value=""someNumbers[1]""/>; ```. ROOT complains when parsing the GDML, with the following error:. ```; input_line_155:2:81: error: subscripted value is not an array, pointer, or vector; Double_t TFormula____id2222353222929674449(Double_t *x,Double_t *p){ return p[0][1] ; }; ~~~~^~; Error in <prepareMethod>: Can't compile function TFormula____id2222353222929674449 prototype with arguments Double_t*,Double_t*; Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling; Error in <TFormula::ProcessFormula>: Formula ""[someNumbers][1]"" is invalid !; Error in <TFormula::Eval>: Formula is invalid and not ready to execute ; Fatal in <TGDMLParse::Value>: Got bad value nan from string 'someNumbers[1]'; aborting; ```. It seems that the parser fails in understanding how to access the matrix element. . Cheers,; Noemi. ### Reproducer. [geometry_test.gdml.txt](https://github.com/root-project/root/files/11833941/geometry_test.gdml.txt). Please note the attached file is `.txt`. To reproduce the issue, you can do:. ```; root -l; TGeoManager::Import(""geometry_test.gdml""); ```. ### ROOT version. ROOT Version: 6.26/10. ### Installation method. build from source using gcc 12.2.1. ### Operating system. Linux Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13074:999,abort,aborting,999,https://root.cern,https://github.com/root-project/root/issues/13074,1,['abort'],['aborting']
Safety,"### Check duplicate issues. - [x] Checked for duplicates. ### Description. The latest master of ROOT doesn't compile with pytorch 2.0.1 installed. The error message is the following:; ```; Torch Version: 2.0.1; RecursiveScriptModule(; original_name=Model; (fc1): RecursiveScriptModule(original_name=Linear); (fc2): RecursiveScriptModule(original_name=Linear); (relu): RecursiveScriptModule(original_name=ReLU); (sigmoid): RecursiveScriptModule(original_name=Sigmoid); ); RecursiveScriptModule(; original_name=Model; (fc1): RecursiveScriptModule(original_name=Linear); (fc2): RecursiveScriptModule(original_name=Linear); (relu): RecursiveScriptModule(original_name=ReLU); (sigmoid): RecursiveScriptModule(original_name=Sigmoid); ); <string>:1: FutureWarning: 'torch.onnx.symbolic_helper._set_onnx_shape_inference' is deprecated in version 1.13 and will be removed in 2.0. Please remove its usage and avoid setting internal variables directly. Python error message:; Traceback (most recent call last):; File ""<string>"", line 6, in <module>; File ""<string>"", line 6, in <dictcomp>; TypeError: 'torch._C.Node' object is not subscriptable; terminate called after throwing an instance of 'std::runtime_error'; what(): ; Failed to run python code: for i in graph[0].nodes():; globals().update(locals()); nodeData={}; nodeData['nodeType']=i.kind(); nodeAttributeNames=[x for x in i.attributeNames()]; nodeAttributes={j:i[j] for j in nodeAttributeNames}; nodeData['nodeAttributes']=nodeAttributes; nodeInputs=[x for x in i.inputs()]; nodeInputNames=[x.debugName() for x in nodeInputs]; nodeData['nodeInputs']=nodeInputNames; nodeOutputs=[x for x in i.outputs()]; nodeOutputNames=[x.debugName() for x in nodeOutputs]; nodeData['nodeOutputs']=nodeOutputNames; nodeDType=[x.type().scalarType() for x in nodeOutputs]; nodeData['nodeDType']=nodeDType; modelData.append(nodeData); Subprocess aborted; make[2]: *** [tmva/pymva/test/CMakeFiles/SofieCompileModels_PyTorch.dir/build.make:70: SofieCompileModels_PyTorch] ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13155:899,avoid,avoid,899,https://root.cern,https://github.com/root-project/root/issues/13155,1,['avoid'],['avoid']
Safety,"### Describe the bug. Distributed RDataFrame roottest has been failing for a while on Mac (11 or 12) on ARM. Here is an example stacktrace (up until the calls to cling). ```; -- TEST COMMAND -- ; cd /Users/sftnight/build/workspace/roottest-pullrequests-build/build/roottest/python/distrdf/dask; /usr/bin/python3 /Users/sftnight/build/workspace/roottest-pullrequests-build/roottest/python/distrdf/dask/test_backend.py --fixcling; -- BEGIN TEST OUTPUT --; Assertion failed: (isInt<33>(Addend) && ""Invalid page reloc value.""), function encodeAddend, file /Users/sftnight/build/workspace/roottest-pullrequests-build/root/interpreter/llvm/src/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldMachOAArch64.h, line 210.; *** Break *** abort; [/Users/sftnight/build/workspace/roottest-pullrequests-build/build/lib/libCore.6.27.01.so] TUnixSystem::DispatchSignals(ESignals) (no debug info); [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info); [/usr/lib/system/libsystem_pthread.dylib] pthread_kill (no debug info); [/usr/lib/system/libsystem_c.dylib] abort (no debug info); [/usr/lib/system/libsystem_c.dylib] err (no debug info); [/Users/sftnight/build/workspace/roottest-pullrequests-build/build/lib/libCling.6.27.01.so] llvm::RuntimeDyldMachOAArch64::encodeAddend(unsigned char*, unsigned int, llvm::MachO::RelocationInfoType, long long) const (.cold.6) (no debug info); [/Users/sftnight/build/workspace/roottest-pullrequests-build/build/lib/libCling.6.27.01.so] llvm::RuntimeDyldMachOAArch64::encodeAddend(unsigned char*, unsigned int, llvm::MachO::RelocationInfoType, long long) const (no debug info); [/Users/sftnight/build/workspace/roottest-pullrequests-build/build/lib/libCling.6.27.01.so] llvm::RuntimeDyldImpl::resolveLocalRelocations() (no debug info); [/Users/sftnight/build/workspace/roottest-pullrequests-build/build/lib/libCling.6.27.01.so] llvm::RuntimeDyldImpl::resolveRelocations() (no debug info); [/Users/sftnight/build/workspace/roottest-pullrequests-build/build/lib/l",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10061:730,abort,abort,730,https://root.cern,https://github.com/root-project/root/issues/10061,1,['abort'],['abort']
Safety,"### Describe the bug. In PyROOT it has been possible to avoid the double `ROOT.ROOT` for some classes/functions for a while; ```py; import ROOT; df = ROOT.RDataFrame; ```; But that doesn't happen for every new class/function defined in C++ . This is a simple reproducer: create some entities in a namespace:; ```py; import ROOT. ROOT.gInterpreter.Declare(; """"""; namespace ROOT{; namespace Detail{; struct MyStruct{};; void dostuff(){}; int myint;; }}; """"""; ); ```; Then try to access them in a Python session; ```py; $ python -i namespace_function.py; >>> ROOT.Detail.MyStruct; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; AttributeError: <namespace cppyy.gbl.Detail at 0x55e51fdc7f50> has no attribute 'MyStruct'. Full details:; type object 'Detail' has no attribute 'MyStruct'; 'Detail::MyStruct' is not a known C++ class; 'MyStruct' is not a known C++ template; 'MyStruct' is not a known C++ enum; >>> ROOT.ROOT.Detail.MyStruct; <class cppyy.gbl.ROOT.Detail.MyStruct at 0x55e51fe1dd60>; >>> ROOT.Detail.dostuff; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; AttributeError: <namespace cppyy.gbl.Detail at 0x55e51fdc7f50> has no attribute 'dostuff'. Full details:; type object 'Detail' has no attribute 'dostuff'; 'Detail::dostuff' is not a known C++ class; 'dostuff' is not a known C++ template; 'dostuff' is not a known C++ enum; >>> ROOT.ROOT.Detail.dostuff; <cppyy.CPPOverload object at 0x7f522b684eb0>; >>> ROOT.Detail.myint; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; AttributeError: <namespace cppyy.gbl.Detail at 0x55e51fdc7f50> has no attribute 'myint'. Full details:; type object 'Detail' has no attribute 'myint'; 'Detail::myint' is not a known C++ class; 'myint' is not a known C++ template; 'myint' is not a known C++ enum; >>> ROOT.ROOT.Detail.myint; 0; ```. It's unclear how to avoid the double `ROOT.ROOT` in general. ### Expected behavior; <!--; A clear and concise description of what you expecte",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8745:56,avoid,avoid,56,https://root.cern,https://github.com/root-project/root/issues/8745,1,['avoid'],['avoid']
Safety,"### Describe the bug. On Mac ARM we get (found by René):. ```; sftnight@macphsft26 build % root; ------------------------------------------------------------------; | Welcome to ROOT 6.27/01 https://root.cern/ |; | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for macosxarm64 on May 09 2022, 11:42:50 |; | From heads/master@v6-25-02-1202-g8dc4bc40fb |; | With Apple clang version 13.1.6 (clang-1316.0.21.2.3) |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. root [0] whatever; input_line_9:2:3: error: use of undeclared identifier 'whatever'; (whatever); ^; libc++abi: terminating with uncaught exception of type cling::CompilationException; sftnight@macphsft26 build %; ```. ### Expected behavior; ```; % root; ------------------------------------------------------------------; | Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for macosx64 on May 09 2022, 05:37:55 |; | From heads/master@v6-25-02-1201-g797bb5dce1 |; | With Apple clang version 13.1.6 (clang-1316.0.21.2.3) |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. root [0] whatever; input_line_13:2:3: error: use of undeclared identifier 'whatever'; (whatever); ^; Error in <HandleInterpreterException>: Error evaluating expression (whatever); Execution of your code was aborted.; root [1] ; ```; ### To Reproduce; Type something unknown at the ROOT prompt. ### Setup; MacOS, ARM1 machine",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10548:1520,abort,aborted,1520,https://root.cern,https://github.com/root-project/root/issues/10548,1,['abort'],['aborted']
Safety,"### Describe the bug. There are several issues when compiling root 6.24.00 on ppc64le. 1. The fix for the altivec __vector keyword that was previously backported (from LLVM 10) was lost in the LLVM 9 upgrade (#8069). 2. After fixing that, running root 6.24.00 on ppc64le fails with an assert: https://github.com/root-project/root/blob/3b0d691a83cfe12c28d50a74d9d8b2c7da703c6c/interpreter/cling/lib/Interpreter/IncrementalExecutor.cpp#L81. 3. Trying to request the large code model rather than assert fail (https://github.com/ellert/root/commit/a71528ca1d5af631d49251ad9525f9d6a875ce7d) does not work. The build fails with a segmentation fault at the very end of the build when the hsimple.C macro is run to create the hsimple.root file. 4. Testing to run with the default code model (i.e. neither trying to change to the large model, nor assert if the model is not the large one) avoids the segmentation fault above, but many tests fail with:; ```; Relocation R_PPC64_REL32 overflow; UNREACHABLE executed at /builddir/build/BUILD/root-6.24.00/interpreter/llvm/src/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp:800!; ```. So it really needs the large code model. Enabling the large code model for ppc64le did not result in a segmentation fault in previous versions of root, so this is a regression. ### Expected behavior; Working root on ppc64le. ### To Reproduce; Compile root 6.24.00 for ppc64le. ### Setup; 1. ROOT version: 6.24.00; 2. Operating system: Fedora Linux 33",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8072:880,avoid,avoids,880,https://root.cern,https://github.com/root-project/root/issues/8072,1,['avoid'],['avoids']
Safety,"### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->. First reported on the forum [here](https://root-forum.cern.ch/t/rdataframe-and-friend-and-python/41923).; TTrees written to file preserve knowledge of their friends, and if they are also present in the file reading one TTree recovers the full friendship chain. When constructing an RDF object as `RDataFrame(treename, filename)`, friends are not automatically made available as they are if the TTree is read from file manually and then passed to RDF's ctor. . ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. ```cpp; root [0] TFile f(""f.root"", ""recreate""); T(TFile &) Name: f.root Title: ; root [1] TTree t1(""t1"", ""t1""); (TTree &) Name: t1 Title: t1; root [2] TTree t2(""t2"", ""t2""); (TTree &) Name: t2 Title: t2; root [3] int x = 42; (int) 42; root [4] t2.Branch(""x"", &x); (TBranch *) 0x5575916824d0; root [5] t2.Fill(); (int) 4; root [6] t1.AddFriend(&t2); (TFriendElement *) 0x557591f09790; root [7] t1.Write(); (int) 231; root [8] t2.Write(); (int) 343; root [9] f.Close(); root [10] ROOT::RDataFrame(""t1"", ""f.root"").Max<int>(""t2.x"").GetValue(); Error in <TRint::HandleTermInput()>: std::runtime_error caught: Unknown column: t2.x; ```. Note that extracting the TTree from file manually and then constructing RDF from the tree works:. ```cpp; auto t1 = file.Get<TTree>(""t1"");; ROOT::RDataFrame(*t1).Max<int>(""t2.x"").GetValue() // prints 42; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6741:322,recover,recovers,322,https://root.cern,https://github.com/root-project/root/issues/6741,1,['recover'],['recovers']
Safety,"### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->. Our nightly conda builds are affected. An example of the broken tests is [here](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/183/testReport/junit/projectroot.cling/array/roottest_cling_array_runarray1/). The relevant part of the output:. ```; cd /test_job/roottest_build/cling/array; /usr/bin/timeout -s USR2 270s /opt/conda/envs/test-root/bin/root -e '#define NDEBUG' -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/test_job/roottest_build/cling/array"",true)' -e 'gSystem->AddDynamicPath(""/test_job/roottest_build/cling/array"")' -e 'gROOT->SetMacroPath(""/test_job/roottest/cling/array"")' -e 'gInterpreter->AddIncludePath(""-I/test_job/roottest_build/cling/array"")' -e 'gSystem->AddIncludePath(""-I/test_job/roottest_build/cling/array"")' -q -l -b /test_job/roottest/cling/array/runarray1test.C; -- BEGIN TEST OUTPUT --. ROOT_cli_0:1:9: warning: 'NDEBUG' macro redefined [-Wmacro-redefined]; #define NDEBUG; ^; <command line>:1:9: note: previous definition is here; #define NDEBUG 1; ^; ```. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. To reproduce it's sufficient to compile ROOT with `-DCMAKE_BUILD_TYPE=Release -Droottest=OFF` ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6575:421,timeout,timeout,421,https://root.cern,https://github.com/root-project/root/issues/6575,1,['timeout'],['timeout']
Safety,"### Describe the bug; As seen in #7488, changing headers / data structures in Clang doesn't rebuild Clad and causes very weird test failures. ### Expected behavior; The build system should detect the changes and rebuild Clad as well as `libCling.so` as needed. ### To Reproduce; Apply / Revert #7488 to see a crash or just touch Clang header files and observe that Clad isn't rebuilt.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7977:189,detect,detect,189,https://root.cern,https://github.com/root-project/root/issues/7977,1,['detect'],['detect']
Safety,"### Describe the bug; Cling produces in the dictionary files code like this:. ```; static const char* fwdDeclCode = R""DICTFWDDCLS(; #line 1 ; ```; Which is invalid for VS if the string is longer than ~16000 characters.; In these cases either the C2026 is issued ; https://docs.microsoft.com/en-us/cpp/error-messages/compiler-errors-1/compiler-error-c2026?view=msvc-160; or, much worse, the code is silently truncated and then the compiled executables crash in runtime on code parsing. ### Expected behavior; Cling should take into account this limitation in VS. ### To Reproduce; Generate relatively large dictionary or, optionally manually increase the size of string literal in a small generated dictionary. Sorry that I don't provide a reproducer. My primary goal was to avoid this behavior when I saw it and not to debug it. ### Setup; 1. ROOT 6.22, VS 16.8? ( not sure actually, I've tried many builds, some worked, other didn't); 2. Windows; 3. Official site. ### Additional context; One can try to use an array of char* like that is done `classesHeaders[]` for the and add `TROOT::RegisterModule()`` that would accept it. But I cannot submit a PR. Sorry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6824:774,avoid,avoid,774,https://root.cern,https://github.com/root-project/root/issues/6824,1,['avoid'],['avoid']
Safety,"### Describe the bug; Drawing histograms one by one in a python loop crashes if `EnableImplicitMT()` is enabled. ### Expected behavior; Everything works in single threaded mode, so I would assume crash could be avoided with multithreading as well.; If not, exception still would be better. ### To Reproduce; ```python; import ROOT; # comment next line and everything works; ROOT.EnableImplicitMT(). vars = [""x"", ""x2""]. def get_histos():; df = ROOT.RDataFrame(10)\; .Define(""x"", ""rdfentry_"")\; .Define(""x2"", ""rdfentry_*rdfentry_""); ; histos = []; for var in vars:; h = df.Histo1D((""h_{}"".format(var), ""{}; x; y"".format(var), 100, 0, 100), var); histos.append(h); # event loop runs here; histos = [h.GetValue() for h in histos]; return histos. histos = get_histos(); for var, h in zip(vars, histos):; canvas = ROOT.TCanvas(""{}"".format(var)); h.Draw(); canvas.Update(); input(""Press something to get the next histogram""). ```; ### Setup; 1. ROOT version: 6.26/06; 2. OS: Centos 7; 3. ROOT is from cvmfs package `source /cvmfs/ilc.desy.de/key4hep/setup.sh`; 4. Python: 3.9.10. ### Additional context; Initially submitted on forum:; https://root-forum.cern.ch/t/rdataframe-multithreading-seg-faults-with-python-for-loops/53963",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12496:211,avoid,avoided,211,https://root.cern,https://github.com/root-project/root/issues/12496,1,['avoid'],['avoided']
Safety,"### Describe the bug; I get a crash with ROOT after a (stupid) test of undo sequences. ### Expected behavior; No crash. ### To Reproduce; ```; root -l; root [0] int x; (int) 0; root [1] .undo; root [2] x; (int) 0; root [3] .undo; root [4] .undo; root [5] x; input_line_13:2:3: error: use of undeclared identifier 'x'; (x); ^; Error in <HandleInterpreterException>: Error evaluating expression (x).; Execution of your code was aborted.; root [6] x; input_line_15:2:3: error: use of undeclared identifier 'x'; (x); ^; Error in <HandleInterpreterException>: Error evaluating expression (x).; Execution of your code was aborted.; root [7] int x; (int) 0; root [8] int x; (int) 0; root [9] x; (int) 0; root [10] x; (int) 0; root [11] x; (int) 0; root [12] x; (int) 0; root [13] .undo; root [14] x; (int) 0; root [15] .undo 5; root [16] x; input_line_24:2:3: error: use of undeclared identifier 'x'; (x); ^; terminate called after throwing an instance of 'cling::CompilationException'; what(): Error evaluating expression (x); ```. ### Setup; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jan 12 2022, 10:17:19 |; | From heads/master@v6-25-01-2870-gdac9b6398d |; | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10178:426,abort,aborted,426,https://root.cern,https://github.com/root-project/root/issues/10178,2,['abort'],['aborted']
Safety,"### Describe the bug; The following code when run with the interpreter crashes (on the line with std::seed_seq). Names are with underscore to avoid clashes.; ```; constexpr uint32_t seed_bits = 19937;; constexpr uint32_t seed_32_count = 19937 / 32 + bool(19937 % 32);. std::random_device _dev;; uint32_t _seed[seed_32_count];; for (uint32_t i = 0; i < seed_32_count; ++i) {; 	_seed[i] = _dev();; }; std::seed_seq _seq(_seed, _seed + seed_32_count);; ```. This may be related to handling of stack variables. (Calling alloca will also crash the interpreter, but that is a corner case, I suppose.). ### Expected behavior; Initialize a seed sequence for use with `std::mt19937` (`TRandom3` should suffice? But that doesn't give the whole seed vector). ### To Reproduce; Input the above line by line into interpreter. Also note that writing `_seed` to see a pointer or content on the last line will also crash the interpreter. . ### Setup; ROOT 32 bit 6.26; Windows (Not yet tested on linux).; Binary install. ### Additional context; Should be sufficient here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10386:142,avoid,avoid,142,https://root.cern,https://github.com/root-project/root/issues/10386,1,['avoid'],['avoid']
Safety,"### Describe the bug; Using the TGCommandLinePlugin, if I type ""T"" or ""new TBr"" and press tab for autocompletion, I get a crash:. ```; /opt/root_src/interpreter/llvm/src/tools/clang/include/clang/AST/DeclBase.h:2330: void clang::DeclContext::setMustBuildLookupTable(): Assertion `this == getPrimaryContext() && ""should only be called on primary context""' failed. 1 __GI_raise raise.c 51 0x7ffff6176fb7 ; 2 __GI_abort abort.c 79 0x7ffff6178921 ; 3 __assert_fail_base assert.c 92 0x7ffff616848a ; 4 __GI___assert_fail assert.c 101 0x7ffff6168502 ; 5 (anonymous namespace)::ClingASTImporter::Imported(clang::Decl *, clang::Decl *) 0x7fffea0cd56c ; 6 clang::ASTImporter::Import(clang::Decl *) 0x7fffec671055 ; 7 cling::ExternalInterpreterSource::ImportDecl(clang::Decl *, clang::DeclarationName&, clang::DeclarationName&, clang::DeclContext const *) 0x7fffea0cd5f4 ; 8 cling::ExternalInterpreterSource::completeVisibleDeclsMap(clang::DeclContext const *) 0x7fffea0ce4ac ; 9 LookupVisibleDecls(clang::DeclContext *, clang::LookupResult&, bool, bool, clang::VisibleDeclConsumer&, (anonymous namespace)::VisibleDeclsRecord&, bool, bool) [clone .part.1455] 0x7fffead875c6 ; 10 LookupVisibleDecls(clang::Scope *, clang::LookupResult&, (anonymous namespace)::UnqualUsingDirectiveSet&, clang::VisibleDeclConsumer&, (anonymous namespace)::VisibleDeclsRecord&, bool) 0x7fffead92949 ; 11 LookupVisibleDecls(clang::Scope *, clang::LookupResult&, (anonymous namespace)::UnqualUsingDirectiveSet&, clang::VisibleDeclConsumer&, (anonymous namespace)::VisibleDeclsRecord&, bool) 0x7fffead92540 ; 12 clang::Sema::LookupVisibleDecls(clang::Scope *, clang::Sema::LookupNameKind, clang::VisibleDeclConsumer&, bool, bool) 0x7fffead9319b ; 13 clang::Sema::CodeCompleteOrdinaryName(clang::Scope *, clang::Sema::ParserCompletionContext) 0x7fffeaa73a0f ; 14 clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt *, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation *, clang::Parser::",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8126:417,abort,abort,417,https://root.cern,https://github.com/root-project/root/issues/8126,1,['abort'],['abort']
Safety,### Describe the bug; concurrent call to methods like `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` can cause segmentation violation. Even with `ROOT::EnableImplicitMT()` Set. ### Expected behavior; ROOT::EnableImplicitMT() should make TDatabasePDG::GetParticle(...) thread safe without user taking locks. ### To Reproduce; Any program calling `TDatabasePDG::Instance()->GetParticle(xxx)->GetName()` at different thread. ### Setup; ```; ROOT Version: 6.26/06; Platform: Fedora 37 Beta; Compiler: g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2); ```. ### Additional context; https://root-forum.cern.ch/t/tdatabasepdg-is-not-thread-safe-while-creating-multiple-thread-only-instance-cause-log-spam/51957,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11580:284,safe,safe,284,https://root.cern,https://github.com/root-project/root/issues/11580,2,['safe'],"['safe', 'safe-while-creating-multiple-thread-only-instance-cause-log-spam']"
Safety,"### Existing issues; On the forums we didn't find any existing issues, errors, bug or Jira ticket related to this.; @rpezzi . ### Describe the bug; We are creating an object of the type: e.g. `std::array<std::array<std::vector<std::vector<Int_t>>, 4>, 4>`; Then, we fill it in a loop and ensure all elements of a size different than 0 and we write it in a root file using `WriteObjectAny`.; However, later we are loading this object using functionalities from ROOT `GetObjectChecked`, and we are getting elements with size 0. We use exactly the same function to print the zero elements if existing, at the creation and loading level. ### Expected behavior; We expect that when loading later this object we fully recover it without empty elements (without size 0). ### To Reproduce; 1. Open root in a terminal, compile the macro: `.L example.C`; 2. Create the object, fill it, and print the elements with size zero if exisiting: `finderBinner()`; 3. Loading the object and print the elements with size zero if exisiting: `loadFinderBinning()`. ### Setup; 1. ROOT 6.26/04 ; 2. macOSx64 Monterey version 12.6; 3. ROOT built from `aliBuild build O2 --defaults o2`, on Nov 09 2022, alibuild software used for the ALICE experiment @CERN with all dependencies . ### Code ; You can download the code `example.C` which reproduce the bug here at this cernbox link:; https://cernbox.cern.ch/s/fbiqsIdjVUqYISe",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11722:712,recover,recover,712,https://root.cern,https://github.com/root-project/root/issues/11722,1,['recover'],['recover']
Safety,"### Explain what you would like to see improved and how. As discussed in the workshop, our (ALICE) number one request for RNTuple would be to have a way to avoid the currently needed copy when doing bulk reads. During the meeting passing the allocator or some byte range was suggested as a possible solution, which I think would be doable on our side. We are open to any other solution which allows us to achieve writing directly in shared memory. ### ROOT version. master. ### Installation method. aliBuild. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14030:156,avoid,avoid,156,https://root.cern,https://github.com/root-project/root/issues/14030,1,['avoid'],['avoid']
Safety,"### Explain what you would like to see improved and how. Currently custom streamers have no reliable way to communicate failure to the calling code (e.g. to have it skip the current object).; A possible way to add this capability would be through exceptions, but the I/O code must be made exception safe and properly handle the exceptions if that is the way we wanna go. ### ROOT version. 6.33.01. ### Installation method. from source. ### Operating system. Linux. ### Additional context. RNTuple::Streamer currently uses exceptions to communicate failure, but this is not necessarily handled corrently in the calling code right now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15640:299,safe,safe,299,https://root.cern,https://github.com/root-project/root/issues/15640,1,['safe'],['safe']
Safety,"### Explain what you would like to see improved and how. Currently there is:; ```cpp; TH1::GetQuantiles(int nprobSum, double* q, const double* probSum);; ```; where `q` is the quantile, while `probSum` is the probability associated with the given quantile. In the description, however, we have:; ```; F(x_q) = q with 0 <= q <= 1.; ```; where `x_q` is the quantile (i.e. argument `q` of `GetQuantiles`), while `q` is the probability (i.e. argument `probSum`). I propose to change the argument names to `int n`, `double* xq` and `const double* q` to avoid confusion and be in agreement with both the description in ROOT and e.g. Wikipedia. Next, in the description we have; ```; [in] probSum - array of positions where quantiles will be computed.; ```; but this is confusing and, I think, wrong. It should rather be ""array of probabilities associated with calculated quantiles"". If the argument names were changed as I propose, then this text would not even be necessary, because the thing would be obvious from the equation above. The only thing about the arguments needing description would be `n` and the behaviour in case of `q == nullptr` (note that I mean the new `q`, not the current one). ### ROOT version. master. ### Installation method. irrelevant. ### Operating system. irrelevant. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16736:548,avoid,avoid,548,https://root.cern,https://github.com/root-project/root/issues/16736,1,['avoid'],['avoid']
Safety,"### Explain what you would like to see improved and how. From https://its.cern.ch/jira/browse/ROOT-10118. In Python, it's ""Pythonic"" convention that you can test the validity of containers by implicit cast to bool, e.g. ""if mylist: do_something"" rather than ""if len(mylist) > 0: ..."". Unfortunately PyROOT's wrapping of STL containers seems to break this: if I read a ROOT tree containing branches of type std::vector<float>, PyROOT's wrapper classes are automatically used, but the test ""if tree.some_vector_branch: ..."" always evaluates true, even if the vector is empty. To be consistently Pythonic and avoid bad surprises for users, can the STL container Pythonisations be given a def __bool__(self): return bool(self.size()) or similar method?. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14573:606,avoid,avoid,606,https://root.cern,https://github.com/root-project/root/issues/14573,1,['avoid'],['avoid']
Safety,"### Explain what you would like to see improved and how. From https://its.cern.ch/jira/browse/ROOT-10213. Suppose to have an RDataFrame and call Histo1D on it. This will return an RResultPtr to a TH1D. There are some functions of TH1D that only accept pointers to TH1D, such as Add. In the case that a user wants to add two histograms created with an RDataFrame computational graph, for instance:; ```python; import ROOT; df_1 = ROOT.RDataFrame(10); h_1 = df_1.Histo1D(""rdfentry_""); df_2 = ROOT.RDataFrame(10); h_2 = df_2.Histo1D(""rdfentry_""); h_1.Add(h_2); ```; The Add function of h_1 will be correctly called, but it will give an error while trying to overload with h_2 that is of type RResultPtr. This situation could be generalized to all functions of ROOT classes that accept pointers to ROOT objects. It should be so that RResultPtr behaved like a pointer to the result of the computational graph, in order to be accepted by this kind of functions. If a user wants to retrieve directly the result of the computational graph in Python, s/he can call the GetValue function. This is similar to how in C++ one can dereference the RResultPtr. With the modifications written above, the GetValue function could be avoided, so that when a user types Histo1D s/he can actually use the result of that as if it were a TH1D object. See the attached file for a specific situation in which the behaviour of GetValue is unclear. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14578:1214,avoid,avoided,1214,https://root.cern,https://github.com/root-project/root/issues/14578,1,['avoid'],['avoided']
Safety,"### Explain what you would like to see improved and how. From https://its.cern.ch/jira/browse/ROOT-10802. Users are continuously tripped up by multiple namecycles (for a non-exhaustive list of forum questions on the topic, see the forum threads that link to [this thread](https://root-forum.cern.ch/t/aux-1-aux-2-aux3/13345)). The only explanation I could find in our docs is in the ROOT users guide:. > Their cycle number, the number after the semicolon, differentiates objects on disk with the same name. which is true but insufficient to figure out what to do with those numbers. TFile's doxygen guide refers to the cycle number several times but never explains what it is. It would be great if we could have a complete source of information for everything about namecycles, e.g.:; * TTree namecycles only contain the metadata, but for other objects, the namecycles might be full copies; * TObject::kOverwrite can be used to avoid writing multiple namecycles; * retrieving an object from TFile by name automatically retrieves the highest namecycle; * relation to TTree's autoflush and autosave settings. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14584:928,avoid,avoid,928,https://root.cern,https://github.com/root-project/root/issues/14584,1,['avoid'],['avoid']
Safety,"### Explain what you would like to see improved and how. From https://its.cern.ch/jira/browse/ROOT-5157. Chapter on schema evolution support needs to be added to the Users' Guide.; For example bases in the scenario:. ```cpp; class Position { /* point in 3D space */; public:; Position(float x, float y, float z);; // get Cartesian coordinates; float x();; float y();; float z();; // get spherical coordinates; float r();; float phi();; float theta();; // get pseudorapidity; float eta();; };. class Hit : public Position { /* localized detector signal */; public:; Hit(float energy, float x, float y, float z);; // get energy and transverse energy; float e();; float et();; };; ```. * Now, consider 3 stages of evolution for Position:. 1. Simplest implementation is to have Cartesian coordinates as private attributes;. 2. The users find that they most often use radius and azimuth, hence decide to store spherical coordinates instead of (x,y,z);. 3. Actually, colliders use eta more often than theta, so that the internal state is now given by (r, phi, eta). * In parallel and independently, Hit also evolves:. a. Simplest implementation is to have only the energy as private member;. b. Because the number of requests for the transverse energy is very high, the users want to optimize the speed by keeping Et as private member;. c. Well, it happens that disk space is short and e() is rarely called, so that it makes sense to reduce the size of the Hit class by dropping the energy member and computing the energy just when calling the method e(). They also found that the detector parameters used to store data in version b are wrong, so that one needs to scale the energy by 1.3 only for version b (a and c are correct). Could you please provide a working example in which data are saved and fetched with different combinations of (1, 2, 3)x(a, b, c) (at least with 1a, 2b, 3c)?. * The next step is to consider collections of objects:. i) define. ```cpp; class Track { /* particle trajectory */. p",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14540:536,detect,detector,536,https://root.cern,https://github.com/root-project/root/issues/14540,1,['detect'],['detector']
Safety,"### Explain what you would like to see improved and how. In https://github.com/root-project/root/pull/15376#issuecomment-2099245931, in the ubuntu20 CI build, we saw a timeout of the Queue test, seemingly at the first test (FIFOQueue.TaskOrder), giving the following output:. ```; 2535/2551 Test #265: gtest-roofit-multiprocess-test-test-RooFit-MultiProcess-Queue .....................................***Timeout 1500.10 sec; Running main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc; [==========] Running 5 tests from 3 test suites.; [----------] Global test environment set-up.; [----------] 1 test from FIFOQueue; [ RUN ] FIFOQueue.TaskOrder; ```. It's unclear what is causing this. It seems to be spurious. We should investigate what is going on and then fix it. ### ROOT version. Master + PR https://github.com/root-project/root/pull/15376. ### Installation method. build from source. ### Operating system. Ubuntu20. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15494:168,timeout,timeout,168,https://root.cern,https://github.com/root-project/root/issues/15494,2,"['Timeout', 'timeout']","['Timeout', 'timeout']"
Safety,### Explain what you would like to see improved and how. It would be very helpful for debugging purposes if tests that are stopped by a timeout actually print to the log file the stack trace for all threads at the time the timeout is reached. (It may or may not be 'possible' to add this). ### ROOT version. master	. ### Installation method. from source. ### Operating system. any. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15144:136,timeout,timeout,136,https://root.cern,https://github.com/root-project/root/issues/15144,2,['timeout'],['timeout']
Safety,"### Explain what you would like to see improved and how. The CMake function `REFLEX_GENERATE_DICTIONARY` can only be called once for each CMake target as it generates a file based on the target name. . In CMS code, we allow multiple classes_def*.xml files for each library being created. This has sped up compilation and avoids excessing memory use by the compiler. Because of the restriction in `REFLEX_GENERATE_DICTIONARY` , my experiments to use CMake to generate some CMSSW code was unable to use that function. It appears that if `REFLEX_GENERATE_DICTIONARY` used part of the name of the `SELECTION` argument for the generate class name it could be possible to have multiple calls to the function for the same target. . ### ROOT version. ```; ------------------------------------------------------------------; | Welcome to ROOT 6.33.01 https://root.cern |; | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jul 22 2024, 08:52:38 |; | From heads/master@tags/v6-33-01 |; | With g++ (GCC) 12.3.1 20230527 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```. ### Installation method. from source. ### Operating system. Linux alma 8. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16256:321,avoid,avoids,321,https://root.cern,https://github.com/root-project/root/issues/16256,1,['avoid'],['avoids']
Safety,"### Explain what you would like to see improved and how. i am looking at speeding up some code that uses TMatrixDSym widely (for large matrices whose size is not known at compile time). One primary bottleneck is code used to set or get elements in the matrix like. ```; TMatrixDSym d(100);; for ( int i=0; i< 100; i++) d(i,i)=i;; ```. which is limited by the virtual function calls needed for the checks. . https://github.com/root-project/root/blob/master/math/matrix/inc/TMatrixT.h#L255. In the case I was looking at, the code to fill the matrix was slower than the code to invert it due to this... The only workaround I find is to use GetMatrixArray() to get access to the underlying array and then hope that the internals don't change (while already ignoring fRowLwb and fColLwb being potentially non-zero. Using [] is kinda 2x worse as there are two layers of these sanity checks instead of just one. I see this workaround is already in widespread use in math/matrix classes.. Is there a better approach currently possible? If not, would it be possible to provide the equivalent of ; ```; d.GetMatrixArray()[i*100+i] = i;; ```; via some more readable/safer interface (useful at least for both TMatrixT and TVectorT)?. ### ROOT version. any recent. ### Installation method. build from source. ### Operating system. linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15285:870,sanity check,sanity checks,870,https://root.cern,https://github.com/root-project/root/issues/15285,2,"['safe', 'sanity check']","['safer', 'sanity checks']"
Safety,"### Explain what you would like to see improved; <!--; Explain what isn't as good as it could be and why; -->. Currently there is a setup step done in the client before actually starting the distributed computations. During the setup, a list of ranges of entries from the original dataset is computed. The logic is as follows:; 1. For each file of the dataset, open it and compute a list of all the clusters in the file.; 2. From the list of all clusters of all files, divide it into groups of clusters (`Range`s) depending on the `npartitions` parameter of the dataframe. Each `Range` will be assigned its own task in the distributed resources. The point 1. above can be particularly expensive to run since it relies on `TFile::Open` . If the files of the dataset are stored remotely, the overhead adds up pretty quickly. The call happens specifically in:; https://github.com/root-project/root/blob/db3d4240abbda1c946fd2a7af08544cf1b357911/bindings/experimental/distrdf/python/DistRDF/Node.py#L363-L368. ### Optional: share how it could be improved; <!--; If you already have an idea what we could improve, then please tell us.; -->. Ideally we could avoid calling TFile::Open in the client. @Axel-Naumann proposed on mattermost to estimate the number of clusters of each file depending on its size and consequently compute the number of tasks to run on the distributed resources:; ```; If you have these files:. 50MB; 100MB; 300MB; 3GB. then I'd translate that to cluster estimates:. 2; 3; 10; 100. and split this into n tasks accordingly.; ```. The single task in the distributed worker would then be responsible to open only the file(s) where the estimated clusters should be stored. This needs to be explored. ### Additional context; <!--; Add any other context about the problem here.; -->; Thanks to @stwunsch for bringing this up. This issue will keep track of further discussion and updates on the matter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8232:1152,avoid,avoid,1152,https://root.cern,https://github.com/root-project/root/issues/8232,1,['avoid'],['avoid']
Safety,"### Explain what you would like to see improved; <!--; Explain what isn't as good as it could be and why; -->. Currently, when using RLogger, you get an output such as:. ```; Info in <[ROOT.RDF] Info ../../../root_verbose_rdf/tree/dataframe/src/RLoopManager.cxx:658 in void ROOT::Detail::RDF::RLoopManager::Run()>: Starting event loop number 0.; ```. Note in particular the redundant `Info`. ### Optional: share how it could be improved; <!--; If you already have an idea what we could improve, then please tell us.; -->. - `s/Info in <(.*)>/\1/`; - not 100% sure about this, but maybe we could shorten the filename to just the part under `$ROOTSYS`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7008:374,redund,redundant,374,https://root.cern,https://github.com/root-project/root/issues/7008,1,['redund'],['redundant']
Safety,"### Explain what you would like to see improved; Following https://mattermost.web.cern.ch/root/pl/k6amdch7bfdm5d8isiguo4i5re; there were a number of things detected wrt the behaviour of `TSystem::CleanCompiledMacros`. ### Optional: share how it could be improved; - [ ] In the doxygen documentation of `TSystem::CompileMacro`, it should be stated that the default behavior is to remove libraries after closing ROOT. Right now you only learn about this behaviour if you look closely at the `k` flag.; - [ ] Mention also in the doxygen documentation that, in contrast, even if functions do the same, the default behavior of `.L script.C+` is the opposite one, to leave things after closing, without removing. In other words, that `.L` always passes the `k` option behind the scenes.; - [ ] `TSystem::CleanCompiledMacros` should also remove also the `.d` and `.pcm`, not just the `.so`; - [ ] On Windows, `CleanCompiledMacros` should work, too, right now it does not. (Can not delete a ""in-use file"" and technically the code of `CleanCompiledMacros` should be updated to first unload the library.). ### To Reproduce; See reproducer at https://mattermost.web.cern.ch/root/pl/k6amdch7bfdm5d8isiguo4i5re. ### Setup; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jan 12 2022, 10:17:19 |; | From heads/master@v6-25-01-2870-gdac9b6398d |; | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10395:156,detect,detected,156,https://root.cern,https://github.com/root-project/root/issues/10395,1,['detect'],['detected']
Safety,"### Explain what you would like to see improved; I daily use QtCreator in my ROOT-based projects, and it would be great if there would be a config-flag to build ROOT with the `GENERATE_QHP` enabled in the doxygen file. https://github.com/root-project/root/blob/master/documentation/doxygen/Doxyfile#L1514. This way, one can consult the Doxygen documentation directly within QtCreator, no need to use a web browser, which is also great if you don't have internet connection.; See e.g. https://bugreports.qt.io/secure/attachment/48119/Added_doxygen_doc_2.PNG. ### Optional: share how it could be improved; cmake config flag, or automatically detect if qhelpgenerator is found as done in llvm; https://github.com/root-project/root/search?q=qhelpgenerator. ### Setup; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.25/01 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on May 17 2021, 10:49:42 |; | From heads/master@v6-25-01-861-g5ea261143f |; | With |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781:640,detect,detect,640,https://root.cern,https://github.com/root-project/root/issues/8781,1,['detect'],['detect']
Safety,"### Explain what you would like to see improved; I've been working (with couet and others) on reducing errors in the Doxygen documentation of the code, from 10k+ to a manageable level of under 1k (and going down). However, currently, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved; - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request; - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR).; - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes.; - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted.; - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell; - [ ] Alternative approach suggested by albert-github to avoid missing references: use the overnight tag file from h",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9953:246,safe,safeguard,246,https://root.cern,https://github.com/root-project/root/issues/9953,1,['safe'],['safeguard']
Safety,"### Explain what you would like to see improved; Implement a (templated) class that proxies access to STL collections. A major difference w.r.t. `TVirtualCollectionProxy` is that template specializations will be provided to avoid going through `TClass` in case the type is known at compile-time. This is a requirement for #10326, and enabling RField support for other STL collections.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10739:224,avoid,avoid,224,https://root.cern,https://github.com/root-project/root/issues/10739,1,['avoid'],['avoid']
Safety,"### Explain what you would like to see improved; RNTuple DAOS unit tests should be automatically run in a testing build. Specifically, `-Ddaos_mock=ON` should be set if `testing` is defined. `daos_mock` has no dependency on the real libdaos and is safe to run in our testing environment. ### Optional: share how it could be improved; Once PR #6825 is merged, a follow-up PR will be created to address this.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8074:248,safe,safe,248,https://root.cern,https://github.com/root-project/root/issues/8074,1,['safe'],['safe']
Safety,"### Explain what you would like to see improved; The TColor palettes are nicely described here: https://root.cern.ch/doc/master/classTColor.html; However, it is not clear which of these palettes are prone to artefacts, which are not CVD friendly, etc. Only the Rainbow one is mentioned and linked to https://root.cern.ch/rainbow-color-map. ### Optional: share how it could be improved; - I think it would be helpful if they would be split into two separate sections, namely those that are CVD-friendly and those that are not. This would help the users in quickly knowing which to avoid.; - Maybe adding this link in the docu would be interesting: https://www.nature.com/articles/s41467-020-19160-7; - I would also suggest to implement the 'batlow' palette described in the link above into the predefined palettes. And potentially others described in Box2 of that article.; - These graphs here are also quite informative https://matplotlib.org/stable/tutorials/colors/colormaps.html",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8098:580,avoid,avoid,580,https://root.cern,https://github.com/root-project/root/issues/8098,1,['avoid'],['avoid']
Safety,"### Explain what you would like to see improved; The TGCommandPlugin has an internal TTimer that I think is redundant. I don't understand why the function CheckRemote needs to be checked every one second, which also calls frame->Layout(). Shouldn't it be better to just check in the beginning with a TTimer::SingleShot? Or if gROOT->GetApplication() changes during lifetime, with a signal/slot ?. ```; fTimer = new TTimer(this, 1000);; fTimer->Reset();; fTimer->TurnOn();; ...; ////////////////////////////////////////////////////////////////////////////////; /// Handle timer event. Bool_t TGCommandPlugin::HandleTimer(TTimer *t); {; if ((fTimer == 0) || (t != fTimer)) return kTRUE;; CheckRemote("""");; return kTRUE;; }; void TGCommandPlugin::CheckRemote(const char * /*str*/); {; Pixel_t pxl;; TApplication *app = gROOT->GetApplication();; if (!app->InheritsFrom(""TRint"")); return;; TString sPrompt = ((TRint*)app)->GetPrompt();; Int_t end = sPrompt.Index("":root ["", 0);; if (end > 0 && end != kNPOS) {; // remote session; sPrompt.Remove(end);; gClient->GetColorByName(""#ff0000"", pxl);; fLabel->SetTextColor(pxl);; fLabel->SetText(Form(""Command (%s):"", sPrompt.Data()));; }; else {; // local session; gClient->GetColorByName(""#000000"", pxl);; fLabel->SetTextColor(pxl);; fLabel->SetText(""Command (local):"");; }; fHf->Layout();; }; ```; Alternatively, it would be nice to provide a function to stop the timer by the user, when performance is needed and you are sure that TApplication is always the same. ### Setup; 1. ROOT from git master; 2. Ubuntu 20; 3. Self-built. ### Additional context; https://root-forum.cern.ch/t/trentrantrwlock-thread-lock-program-freezes/45116",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8269:108,redund,redundant,108,https://root.cern,https://github.com/root-project/root/issues/8269,1,['redund'],['redundant']
Safety,"### Explain what you would like to see improved; The current Jenkins build matrix doesn't have any builds with `RooFit::MultiProcess` activated currently. PRs that touch anything related to this may silently break things, because it is too easy to forget to manually pass the build flags to the Jenkins bot to activate it. ### Optional: share how it could be improved; Ideally, all builds, except the Windows one, would build with `RooFit::MultiProcess`. To do this, currently, the easiest option is to add `-Droofit_multiprocess=ON -Dbuiltin_zeromq=ON -Dbuiltin_cppzmq=ON` to the build matrix (except the Windows build, because `MultiProcess` is not supported on Windows). A more minimalistic alternative would be to add the build flags to the `ROOT-performance-centos8-multicore/default` build only. ### Additional context; Note that the builtin options are necessary to avoid having to install ZeroMQ on the CI system as a dependency while still having `fail-on-missing` activated as well, as is currently the case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9430:873,avoid,avoid,873,https://root.cern,https://github.com/root-project/root/issues/9430,1,['avoid'],['avoid']
Safety,"### Explain what you would like to see improved; We had CI builds stuck in downloading dependencies, e.g. VecCore. That should timeout. ### Optional: share how it could be improved; Add the `TIMEOUT` parameter to all `ExternalProject` calls downloading sources.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6635:127,timeout,timeout,127,https://root.cern,https://github.com/root-project/root/issues/6635,2,"['TIMEOUT', 'timeout']","['TIMEOUT', 'timeout']"
Safety,"### Explain what you would like to see improved; ```; 0 0x00007ffff6f113d7 in raise () from /lib64/libc.so.6; 1 0x00007ffff6f12ac8 in abort () from /lib64/libc.so.6; 2 0x00007ffff6f0a1a6 in __assert_fail_base () from /lib64/libc.so.6; 3 0x00007ffff6f0a252 in __assert_fail () from /lib64/libc.so.6; 4 0x00007fffed24ed82 in clang::CodeGeneratorImpl::StartModule; 5 0x00007fffed24d33e in clang::CodeGenerator::StartModule; 6 0x00007fffed0664f1 in cling::IncrementalParser::StartModule; 7 0x00007fffed066f84 in cling::IncrementalParser::codeGenTransaction; 8 0x00007fffed066aec in cling::IncrementalParser::commitTransaction; 9 0x00007fffecf1af2c in cling::Interpreter::PushTransactionRAII::pop; 10 0x00007fffecf1ae72 in cling::Interpreter::PushTransactionRAII::~PushTransactionRAII; 11 0x00007fffece78534 in ClingMemberIterInternal::DCIter::DCIter; 12 0x00007fffece7712c in TClingMemberIter::TClingMemberIter; 13 0x00007fffece7724c in TClingDataMemberIter::TClingDataMemberIter; 14 0x00007fffece750b6 in TClingDataMemberInfo::TClingDataMemberInfo; 15 0x00007fffecd25918 in TCling::DataMemberInfo_Factory; 16 0x00007ffff6b0e33e in TListOfDataMembers::Load; 17 0x00007ffff6ae539d in TClass::CreateListOfDataMembers; 18 0x00007ffff6ae54d4 in TClass::GetListOfDataMembers; 19 0x00007ffff6ae3dd1 in TClass::GetDataMember; 20 0x00007ffff6b259a0 in ROOT::Detail::TSchemaRuleSet::AddRule; 21 0x00007ffff6adee6c in TClass::AddRule (rule=0x572670 ""HepMC::GenVertex m_event"",; 22 0x00007ffff6adead2 in (anonymous namespace)::ReadRulesContent; 23 0x00007ffff6adec40 in TClass::ReadRules; 24 0x00007fffecd0b3a0 in TCling::Initialize; ```. ### Optional: share how it could be improved. As discussed in root-project/root#7398, we should remove the `TClingMemberIter` iteration from the initialization phase as it causes a lot of deserialization resulting in redundant memory usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7724:134,abort,abort,134,https://root.cern,https://github.com/root-project/root/issues/7724,2,"['abort', 'redund']","['abort', 'redundant']"
Safety,### Feature description. From https://its.cern.ch/jira/browse/ROOT-5138. Add an implementation of the thread safe random123 generator. ; Need to see if we need to add as a new TRandom class as well. . use the patch provided in ; http://fc.isima.fr/~schweitz/schweitz/TRandom4.diff. see https://savannah.cern.ch/patch/?5528. ### Alternatives considered. _No response_. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14564:109,safe,safe,109,https://root.cern,https://github.com/root-project/root/issues/14564,1,['safe'],['safe']
Safety,"### Feature description. Hi,. I would like to use the functionality of [RDatasetSpec](https://root.cern.ch/doc/master/classROOT_1_1RDF_1_1Experimental_1_1RDatasetSpec.html) object to setup my RDataFrame code. However, this seems to lack one crucial functionality: the option to match events from different trees using friend trees and the ""BuildIndex"" functionality. I see that the object allows to pass some global friends via ""WithGlobalFriends"" but this adds a global friend trees without the option of matching events from the trees. One would also not want to match the events between the individual samples and a global friend tree. What I would want is to have an option to define per sample a tree/tchain that would be added as a friend tree for that given sample with the option to match the events between the trees using BuildIndex or similar functionality. . What this would mean in practice is probably to add FriendInfo support for the individual RSamples. This is also what is natural for my setup (which is rather common I think) where you want to match detector level events (one TTree) and truth level events (another TTree) and this matching is different for different samples in the specification. . Please, let me know if this is a reasonable thing or there is some workaround available already. Best,; Tomas. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14933:1070,detect,detector,1070,https://root.cern,https://github.com/root-project/root/issues/14933,1,['detect'],['detector']
Safety,"### Is your feature request related to a problem? Please describe. It's not relevant for this feature request, but: this would allow CMS to trace autoparsing by setting an environment variable, after https://github.com/root-project/root/pull/7609 is merged. ### Describe the solution you'd like. ```bash; export ROOT_LOG='ROOT.InterpreterPerf=Debug(3),ROOT.RBrowser=Error'; ```; should set verbosity for `ROOT.InterpreterPerf` to `kDebug+3` and for `ROOT.RBrowser` to `kError`. ### Describe alternatives you've considered; `.` in variable names is forbidden in bash, so `export ROOT_LOG_ROOT.InterpreterPerf='Debug(3)'` doesn't work, and we'd need to mangle this. That's ugly and complex. We could also have an entry in `.rootrc` - but it brings in a dependency for `RLogger` on `TEnv` that I'd like to avoid. ### Additional context. https://github.com/root-project/root/issues/6931",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7614:803,avoid,avoid,803,https://root.cern,https://github.com/root-project/root/issues/7614,1,['avoid'],['avoid']
Safety,"### Is your feature request related to a problem? Please describe.; As discussed in https://sft.its.cern.ch/jira/browse/SPI-2149 ATLAS would like to have a ROOT patch release 6.24/06a with the fix/patch for https://github.com/root-project/root/pull/10369. . If this is not feasible can ROOT 6.24/08 be releases soon ? But due to the imminent data taking start we'd like avoid potential interferences due to other patches that might come with 6.24/08. <!--; A clear and concise description of what the problem is. E.g ""I always have to [...] when I want to [...]""; -->. ### Describe the solution you'd like; <!--; A clear and concise description of what you want to happen.; -->. Release 6.24/06a. ### Describe alternatives you've considered; <!--; Can you think of alternative solutions or features?; -->. Release 6.24/08. ### Additional context; <!--; Add any other context or screenshots about the feature requested here.; -->. See https://sft.its.cern.ch/jira/browse/SPI-2149 for more details and the discussion with the CERN SFT SPI team experts. Cheers, Johannes (for ATLAS)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10515:370,avoid,avoid,370,https://root.cern,https://github.com/root-project/root/issues/10515,1,['avoid'],['avoid']
Safety,"### Is your feature request related to a problem? Please describe.; Compiled libraries of a ROOT macro often end up in the same folder, taking some extra space, and I remove then later by hand to avoid polluting too much source code directories. It makes also files in a folder with many scripts, harder to found, as two of every three is 'dummy' (.so, .d). ### Describe the solution you'd like; It would be nice to have an option or flag 't' in [TSystem::CompileMacro](https://root.cern/doc/master/classTSystem.html#ac557d8f24d067a9b89d2b8fb261d7e18) that automatically:; - Outputs the compiled macro to the default temp directory using [std::temp_directory_path](https://en.cppreference.com/w/cpp/filesystem/temp_directory_path); - It gives this file a hash-generated filename that is path-specific, to avoid that two macros called the same way overwrite each other.; ; The easiest way for this would be to remove all slashes from the full filename and transforms it to underscores. For example: ; `root -l my/full/path/to/folder/my_macro.C+t`; should give:; `/tmp/my_full_path_to_folder_my_macro.C_so`. Or alternatively, if a new flag is not wanted, that this could be specified via the rootrc. Also, if /tmp/ is not wanted, it could maybe be instead a user-config directory (https://github.com/root-project/root/issues/10148). ### Describe alternatives you've considered; Using; `gSystem->SetBuildDir(""/tmp/"");`; in my `rootlogon.C`.; But this does not solve the overwrite problem. ### Additional context; https://root.cern/doc/master/classTSystem.html#ae8790897e77f60ff37876b944f9f0091",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10147:196,avoid,avoid,196,https://root.cern,https://github.com/root-project/root/issues/10147,2,['avoid'],['avoid']
Safety,"### Is your feature request related to a problem? Please describe.; I'm merging multiple root files into one with hadd. I realized some of the files were corrupted, because the jobs that produced them were killed in the middle. When I try to open these files I see messages about ""recovered keys"".; When merging those files with hadd there are multiple messages displayed, like:; ```Info in <TFile::Recover>: ppfx_me000z-200i_run_98.root, recovered key TDirectoryFile:nuebar_thintarget at address 5276; Info in <TFile::Recover>: ppfx_me000z-200i_run_98.root, recovered key TDirectoryFile:nuebar_mippnumi at address 5409; Info in <TFile::Recover>: ppfx_me000z-200i_run_98.root, recovered key TDirectoryFile:nuebar_attenuation at address 5538; Info in <TFile::Recover>: ppfx_me000z-200i_run_98.root, recovered key TDirectoryFile:nuebar_others at address 5673; Info in <TFile::Recover>: ppfx_me000z-200i_run_98.root, recovered key TDirectoryFile:nuebar_total at address 5798; Warning in <TFile::Init>: successfully recovered 21 keys; Warning in <TFile::Init>: no StreamerInfo found in ppfx_me000z-200i_run_98.root therefore preventing schema evolution when reading this file. The file was produced with version 5.34/32 of ROOT.; hadd Source file 2: ppfx_me000z-200i_run_526.root; Warning in <TFile::Init>: no StreamerInfo found in ppfx_me000z-200i_run_526.root therefore preventing schema evolution when reading this file. The file was produced with version 5.34/32 of ROOT.; hadd Target path: out.root:/; hadd Target path: out.root:/nom; hadd Target path: out.root:/nom/parent; Error in <TBufferFile::ReadClassBuffer>: Could not find the StreamerInfo for version 7 of the class TH1, object skipped at offset 110; Error in <TBufferFile::CheckByteCount>: object of class TH1 read too few bytes: 2 instead of 2216; Error in <TBufferFile::ReadClassBuffer>: Could not find the StreamerInfo for version 7 of the class TH1, object skipped at offset 107; Error in <TBufferFile::CheckByteCount>: object of class ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8952:281,recover,recovered,281,https://root.cern,https://github.com/root-project/root/issues/8952,10,"['Recover', 'recover']","['Recover', 'recovered']"
Safety,"### Version; ROOT version: 6.18/04; OS: Linux, SLC7; How you obtained ROOT: conda install; ### Describe the bug. When using pyROOT (might not necessarily be due to using pyROOT) with '-h' or '--help' in sys.argv, if a ROOT method is called, a root CLI help message will be wrongly printed out. In a lot of cases when designing a python package that uses ROOT with CLI support, this bug will make the CLI print out the root help instead of the intended help message from the python package. ### To reproduce the issue (e.g. using python interpreter):; ```; import sys; sys.argv.append('-h'); import ROOT; ROOT.Double(); ```; This will print out the following message:. """"""; usage: root [-b B] [-x X] [-e E] [-n N] [-t T] [-q Q] [-l L] [-config CONFIG]; [-memstat MEMSTAT] [-h HELP] [--version VERSION]; [--notebook NOTEBOOK] [--web WEB] [--web=<browser> WEB=<BROWSER>]; [dir] [file:data.root] [file1.C...fileN.C]. OPTIONS:; -b Run in batch mode without graphics; -x Exit on exceptions; -e Execute the command passed between single quotes; -n Do not execute logon and logoff macros as specified in .rootrc; -t Enable thread-safety and implicit multi-threading (IMT); -q Exit after processing command line macro files; -l Do not show splash screen; -config print ./configure options; -memstat run with memory usage monitoring; -h, -?, --help Show summary of options; --version Show the ROOT version; --notebook Execute ROOT notebook; --web Display graphics in a default web browser; --web=<browser> Display graphics in specified web browser; [dir] if dir is a valid directory cd to it before executing; [file:data.root] Open the ROOT file data.root; [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C; """"""; And the program will terminate. ### Expected behaviour. No root CLI help message should be printed out",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7161:1122,safe,safety,1122,https://root.cern,https://github.com/root-project/root/issues/7161,1,['safe'],['safety']
Safety,"#2 0x00007ffff4c9c8f3 in __GI___libc_free (mem=<optimized out>) at malloc.c:3391; #3 0x00007ffff7b30e64 in TStorage::ObjectDealloc (vp=0x55555562e410) at ../core/base/src/TStorage.cxx:362; #4 0x00007ffff7b14518 in TObject::operator delete (ptr=0x55555562e410) at ../core/base/src/TObject.cxx:1001; #5 0x00007ffff7b11cba in TObject::~TObject (this=0x55555562e410, __in_chrg=<optimized out>) at ../core/base/src/TObject.cxx:91; #6 0x0000555555556242 in main () at foo.cpp:9; ```. where the line that accidentally sets the bit again is 3181 here:. ```cpp; 3172 /* Caller must ensure that we know tc_idx is valid and there's room; 3173 for more chunks. */; 3174 static __always_inline void; 3175 tcache_put (mchunkptr chunk, size_t tc_idx); 3176 {; 3177 tcache_entry *e = (tcache_entry *) chunk2mem (chunk);; 3178; 3179 /* Mark this chunk as ""in the tcache"" so the test in _int_free will; 3180 detect a double free. */; 3181 e->key = tcache_key;; 3182; 3183 e->next = PROTECT_PTR (&e->next, tcache->entries[tc_idx]);; ```. and this version of the test circumvents that behavior of `_int_free` so it does not crash (at least on my laptop):. ```cpp; void *mem = malloc(sizeof(TObject));; auto o = new (mem) TObject();; auto l = new TList();; l->SetName(""my own list"");; l->Add(o);; o->~TObject();; l->Clear();; free(mem);; ```. If my understanding is correct, this also means that the test failure is real in the sense that the `kNotDeleted` mechanism does not correctly work on platforms where `free` has that behavior. From Philippe (https://github.com/root-project/roottest/pull/880#issuecomment-1239663370):. > We (I) need to extend the core library to detect when there is a memory checker (or similar) that leads to the memory being salted after a delete and in that case disable our own already-deleted test (since it is now ineffective anyway and assumingly it is already doing the job of warning the user about use-after-delete). And subsequently the test needs to also be disabled in those cases.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11330:2021,detect,detect,2021,https://root.cern,https://github.com/root-project/root/issues/11330,1,['detect'],['detect']
Safety,' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:1169; /opt/root_src/builtins/lz4/lz4hc.c:1169:9: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Assuming the condition is false in /opt/root_src/builtins/lz4/lz4hc.c:1164; 2: Taking false branch in /opt/root_src/builtins/lz4/lz4hc.c:1164; 3: Assuming 'dictSize' is >= 4 in /opt/root_src/builtins/lz4/lz4hc.c:1165; 4: Taking false branch in /opt/root_src/builtins/lz4/lz4hc.c:1165; 5: Assuming 'dictSize' is <= 'prefixSize' in /opt/root_src/builtins/lz4/lz4hc.c:1166; 6: Taking false branch in /opt/root_src/builtins/lz4/lz4hc.c:1166; 7: Assuming 'safeBuffer' is equal to NULL in /opt/root_src/builtins/lz4/lz4hc.c:1167; 8: Taking true branch in /opt/root_src/builtins/lz4/lz4hc.c:1167; 9: 'dictSize' is > 0 in /opt/root_src/builtins/lz4/lz4hc.c:1168; 10: Taking true branch in /opt/root_src/builtins/lz4/lz4hc.c:1168; 11: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/builtins/lz4/lz4hc.c:1169; /opt/root_src/builtins/lz4/lz4hc.c:1578:10: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:1578; /opt/r,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:65501,safe,safeBuffer,65501,https://root.cern,https://github.com/root-project/root/issues/7411,1,['safe'],['safeBuffer']
Safety,'id' is < 'ndiv' in /opt/root_src/geom/geom/src/TGeoTube.cxx:1841; 7: Loop condition is true. Entering loop body in /opt/root_src/geom/geom/src/TGeoTube.cxx:1841; 8: Value assigned to field 'fNodes' in /opt/root_src/geom/geom/src/TGeoTube.cxx:1842; 9: Called C++ object pointer is null in /opt/root_src/geom/geom/src/TGeoTube.cxx:1843; /opt/root_src/geom/geom/src/TGeoTube.cxx:1857:31: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Control jumps to 'case 3:' at line 1846 in /opt/root_src/geom/geom/src/TGeoTube.cxx:1814; 2: Assuming 'id' is < 'ndiv' in /opt/root_src/geom/geom/src/TGeoTube.cxx:1855; 3: Loop condition is true. Entering loop body in /opt/root_src/geom/geom/src/TGeoTube.cxx:1855; 4: Value assigned to field 'fNodes' in /opt/root_src/geom/geom/src/TGeoTube.cxx:1856; 5: Called C++ object pointer is null in /opt/root_src/geom/geom/src/TGeoTube.cxx:1857; /opt/root_src/geom/geom/src/TGeoTube.cxx:2059:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2059; /opt/root_src/geom/geom/src/TGeoTube.cxx:2107:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2107; /opt/root_src/geom/geom/src/TGeoTube.cxx:2773:13: warning: Value stored to 's' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 's' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2773; /opt/root_src/geom/geom/src/TGeoTube.cxx:2909:13: warning: Value stored to 'sz1' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'sz1' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:29,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:74564,safe,safe,74564,https://root.cern,https://github.com/root-project/root/issues/7428,1,['safe'],['safe']
Safety,"(For context, this is important for multi-dimensional constant arrays as described in [ROOT-7016](https://sft.its.cern.ch/jira/browse/ROOT-7016) and tested in Cling's `Interfaces/evaluate.C` test. But for reasons unknown to me, the ROOT prompt now seems to have a different way of handling this case because just reverting commit https://github.com/root-project/root/commit/d97e4dca36370a1f036026cb6976416670882bc6 still works there...). Instead of using relying on recursive templated calls, perform the type cast in the `ValueExtractionSynthesizer`. This has the advantage of avoiding an ODR violation warning in `MultipleInterpreters.C` with LLVM 16 (while unclear if that one is correct or not).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13477:578,avoid,avoiding,578,https://root.cern,https://github.com/root-project/root/pull/13477,1,['avoid'],['avoiding']
Safety,"(reported by -Wimplicit-int-float-conversion). Fixing next failure (http://cdash.cern.ch/testDetails.php?test=69494934&build=706195):; -- TEST COMMAND -- ; cd /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core; /usr/bin/timeout -s USR2 270s root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gROOT->SetMacroPath(""/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core"")' -q -l -b /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+; -- BEGIN TEST OUTPUT --. Processing /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx+...; Checking FromHumanReadableSize; Checking ToHumanReadableSize; Checking 1024 vs 1.024KiB an 1KB; Checking 2097152 vs 2.09715MiB an 2MB; Checking 4294967296 vs 4.29497GiB an 4GB; Checking 8796093022208 vs 8.7960",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4257:271,timeout,timeout,271,https://root.cern,https://github.com/root-project/root/pull/4257,1,['timeout'],['timeout']
Safety,") != std::string::npos) { ; tf1_pol3_tf_ = new TF1(""tf1_pol3_tf_"", pol3_tf_, ptmin_, ptmax_, pol3_tf_.getNparams());; function_ = tf1_pol3_tf_;; ndim_ = tf1_pol3_tf_->GetNpar();; } else if (name.find(""pol4_tf"") != std::string::npos) {; tf1_pol4_tf_ = new TF1(""tf1_pol4_tf_"", pol4_tf_, ptmin_, ptmax_, pol4_tf_.getNparams());; function_ = tf1_pol4_tf_;; ndim_ = tf1_pol4_tf_->GetNpar();; // } else if (name.find(""erfPol2_tf"") != std::string::npos) {; // tf1_erfPol2_tf_ = new TF1(""tf1_erfPol2_tf_"", erfPol2_tf_, ptmin_, ptmax_, erfPol2_tf_.getNparams());; // function_ = tf1_erfPol2_tf_;; // ndim_ = tf1_erfPol2_tf_->GetNpar();; } else if (name.find(""pol3"") != std::string::npos) {; function_ = tf1_pol3_;; ndim_ = 4; ; } else if (name.find(""pol2"") != std::string::npos) {; function_ = tf1_pol2_;; ndim_ = 3;; } else if (name.find(""erf"") != std::string::npos) {; function_ = tf1_erf_;; ndim_ = 3;; } else {; std::cout << ""Smoothing function "" << name << "" not implemented. Abort"" << std::endl;; exit(EXIT_FAILURE);; }; return;; }. // Eigen::MatrixXd EtaPtCorrelatedEfficiency::covariance(int etabin) {; // Eigen::MatrixXd covMat(ndim_, ndim_);; // for (int i = 0; i < ndim_; ++i) {; // for (int j = 0; j < ndim_; ++j) {; // covMat(i,j) = covhist_->GetBinContent(etabin, i+1, j+1);; // }; // }; // // std::cout << ""covariance matrix = "" << std::endl << covMat << std::endl;; // return covMat;; // }. // void EtaPtCorrelatedEfficiency::DoHessianShifts(int etabin, int ipar, const std::vector<double> &inpars, std::vector<double> &outpars) {; //; // // diagonalize the covariance matrix; // Eigen::MatrixXd covMat = covariance(etabin);; // Eigen::SelfAdjointEigenSolver<Eigen::MatrixXd> es(covMat);; // Eigen::VectorXd eigenv = es.eigenvalues();; // Eigen::MatrixXd transformation = es.eigenvectors();; // // std::cout << ""Transformation = "" << std::endl << transformation << std::endl;; //; // // transform the pars in the diagonal basis; // const unsigned int npars = transformation.rows();; // const u",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16578:6677,Abort,Abort,6677,https://root.cern,https://github.com/root-project/root/issues/16578,1,['Abort'],['Abort']
Safety,") time (h:mm:ss or m:ss): 0:49.89. +this PR; Percent of CPU this job got: 14271%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.11; ```; This 'surprising' increase of CPU time by a factor 9 leading to only a factor 2 improvement in elapsed time is due to the bottleneck migrating from the ([re]moved mutex) to the (many) spin locks. The test can be tweaked (increase number of files, reduce number of entries per file) to stress the file opening more. On ntpl-perf01.cern.ch (single AMD EPYC 7702P 64-Core Processor), the test as is use close to 94% of all cpus and only a little system time:; ```; User time (seconds): 7250.76; System time (seconds): 3.58; Percent of CPU this job got: 12019%; ```; However tweaking to 390000 files of a 1000 entries, we get:; ```; User time (seconds): 450.77; System time (seconds): 438.39; Percent of CPU this job got: 7039%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.63; ```. Some are straight-forward to avoid:. ```; // Avoid lock internal to linux date/time:; diff --git a/io/io/src/TKey.cxx b/io/io/src/TKey.cxx; index e604af2980..f349bd8710 100644; --- a/io/io/src/TKey.cxx; +++ b/io/io/src/TKey.cxx; @@ -99,7 +99,7 @@ TKey::TKey() : TNamed(), fDatime((UInt_t)0); ////////////////////////////////////////////////////////////////////////////////; /// TKey default constructor.; ; -TKey::TKey(TDirectory* motherDir) : TNamed(), fDatime((UInt_t)0); +TKey::TKey(TDirectory* motherDir) : TNamed(), fDatime((UInt_t)0, (UInt_t)0); {; Build(motherDir, """", 0);; ; ```; Some require some thoughts:; ```; Try to avoid bottlenecking on recording TContext with gROOT when reading objects out files.; diff --git a/tree/dataframe/src/RLoopManager.cxx b/tree/dataframe/src/RLoopManager.cxx; index 4112e7aeb8..8d92534015 100644; --- a/tree/dataframe/src/RLoopManager.cxx; +++ b/tree/dataframe/src/RLoopManager.cxx; @@ -495,6 +495,7 @@ void RLoopManager::RunTreeProcessorMT(); const auto entryRange = r.GetEntriesRange(); // we trust TTreeProcessorMT to call SetEnt",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12761:1239,Avoid,Avoid,1239,https://root.cern,https://github.com/root-project/root/issues/12761,1,['Avoid'],['Avoid']
Safety,"), as I get runtime segfaults when I build a project with nvc++ and link it against root built with gcc 9.3.0. However, building root fails during cmake (3.21.3) with; ```; CMake Warning at cmake/modules/CheckCompiler.cmake:12 (message):; Unsupported compiler: NVHPC.; Call Stack (most recent call first):; CMakeLists.txt:130 (include). nvc++-Error-Unknown switch: -; CMake Error at cmake/modules/CheckCompiler.cmake:129 (if):; if given arguments:. ""STRGREATER"" ""201703L"". Unknown arguments specified; Call Stack (most recent call first):; CMakeLists.txt:130 (include); ```. so it looks like nvc++ doesn't know about the `__cplusplus` macro. If I hack around this, cmake finishes, but then the compilation dies with ; ```; [ 27%] Building CXX object interpreter/llvm/src/lib/Support/CMakeFiles/LLVMSupport.dir/GraphWriter.cpp.o; ""/bld4/atlas/root/src_6.24/interpreter/llvm/src/lib/Support/ErrorHandling.cpp"", line 116: error: the global scope has no ""write""; ssize_t written = ::write(2, MessageStr.data(), MessageStr.size());; ^; ```; and; ```; NVC++-F-0000-Internal compiler error. get_call_sptr(): indirect call not via LDA/ACON 154 (/bld4/atlas/root/src_6.24/interpreter/llvm/src/lib/DebugInfo/DWARF/DWARFContext.cpp: 193); NVC++/x86-64 Linux 21.9-0: compilation aborted; make[2]: *** [interpreter/llvm/src/lib/DebugInfo/DWARF/CMakeFiles/LLVMDebugInfoDWARF.dir/DWARFContext.cpp.o] Error 2; make[2]: *** Waiting for unfinished jobs....; [ 52%] Built target obj.clang-tblgen; make[1]: *** [interpreter/llvm/src/lib/DebugInfo/DWARF/CMakeFiles/LLVMDebugInfoDWARF.dir/all] Error 2; CMake Error at /bld4/atlas/root/bld.v6-24-06_nvhpc_c17/TBB-prefix/src/TBB-stamp/TBB-build-Release.cmake:49 (message):; Command failed: 2. 'make' 'cpp0x=1' 'CXXFLAGS= -mno-rtm' 'CPLUS=/opt/nvidia/hpc_sdk/Linux_x86_64/21.9/compilers/bin/nvc++' 'CONLY=/opt/nvidia/hpc_sdk/Linux_x86_64/21.9/compilers/bin/nvc' 'LDFLAGS='; ```. Has anyone tried/succeeded building root with nvc++?. FWIW, nvc++ was configured with gcc 9.3.0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9036:1351,abort,aborted,1351,https://root.cern,https://github.com/root-project/root/issues/9036,1,['abort'],['aborted']
Safety,* Avoid calling TTree::ChangeFile if file is TMemFile; * [docs] Update documentation in TTree::Fill and TTree::ChangeFile; * Avoid triggering TTree::ChangeFile mechanism in RDF Snapshot. Fixes ROOT-10896.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6798:2,Avoid,Avoid,2,https://root.cern,https://github.com/root-project/root/pull/6798,2,['Avoid'],['Avoid']
Safety,"* Avoid coning of plot variable twice then plotting a `RooAbsReal`, as the new BatchMode doesn't like model cloning; * Some minor fixes in `BatchModeHelpers`; * Improving the interface of `RooAbsReal::createPlotProjection`; * Use also the different BatchMode backends in the `createNLL` calls in `stressRooFit`, extending text coverage also to (profile) likelihood scans with the new BatchMode. The likelihood scans in the tutorials are up to 10 times faster now when using the new BatchMode compared to RooFit legacy. More detail can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11123:2,Avoid,Avoid,2,https://root.cern,https://github.com/root-project/root/pull/11123,1,['Avoid'],['Avoid']
Safety,* Avoids deleting non-owned pointer in destructor; * In a case where the graph does not have enough points for interpolation graph values are returned directly and a warning is emitted; this avoids heap overflow when trying to address graph points outside of the point array range. This PR resolves #8021,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14719:2,Avoid,Avoids,2,https://root.cern,https://github.com/root-project/root/pull/14719,2,"['Avoid', 'avoid']","['Avoids', 'avoids']"
Safety,"* Explain better which functions should be used to get category indices. * Make documentation of RooChi2Var less verbose. * Avoid duplicate deprecation notice in `RooDataHist::set()`: the `RooDataHist::set()` function is marked deprecated in the header file with `R__SUGGEST_ALTERNATIVE`. This already adds a deprecation notice to the doxygen, so it is not necessary to add a `\deprecated` tag manually to the documentation. https://root.cern.ch/doc/v626/classRooDataHist.html#a3053f0f1a21eb39bb2508be61e30d8b9. * Replace `NumEvent()` with the correct `NumEvents()` in the RooAbsPdf documentation. Closes #11418.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11420:124,Avoid,Avoid,124,https://root.cern,https://github.com/root-project/root/pull/11420,1,['Avoid'],['Avoid']
Safety,* Fix the link from the RooFit tutorials to the main RooFit page. * Fix broken link in `RooJSONFactoryWSTool`. * Remove redundant links in `roofit_hs3.md` (doxygen generates the links automatically). * Use relative paths to reference guide. * Avoid class names in the brief description because the duplicated name looks not nice in the generated docs: https://root.cern/doc/v628/group__Roofitcore.html. * Remove a few unneeded destructor declarations,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14130:120,redund,redundant,120,https://root.cern,https://github.com/root-project/root/pull/14130,2,"['Avoid', 'redund']","['Avoid', 'redundant']"
Safety,* List all headers and sources; * Restrict includes to target; * Avoid shadow and extra warnings from OpenCascade,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3031:65,Avoid,Avoid,65,https://root.cern,https://github.com/root-project/root/pull/3031,1,['Avoid'],['Avoid']
Safety,"* Make central function `TestReport()` which executes all planned tests for the canvas. ; * Print report when all images and scripts are generated. ; * Resort function orders to avoid need of forward declarations; * Use `TString::Format()` instead of `snprintf`; * Use `TFile::Open()` instead of `new TFile`; * Improve handling of command line args like `-k` or `-v`; * Create SVG instead of PS files when running in web mode, provide correspondent ref file; * Adjust web ref file to work on Chrome and Firefox. All this simplify structure of sressGraphics code. Execution time in web mode with chrome browser 109s. ```; ./stressGraphics --web=chrome; ... **********************************************************************; * All the tests passed. :-); **********************************************************************; * SYS: Linux hades58 6.10.11-1-default #1 SMP PREEMPT_DYNAMIC Thu S; **********************************************************************; * stressGraphics: Real Time = 109.74 seconds Cpu Time = 8.32 seconds; **********************************************************************; * ROOTMARKS =4870.6 * Root 6.33.01 20231010/0; **********************************************************************; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16579:178,avoid,avoid,178,https://root.cern,https://github.com/root-project/root/pull/16579,1,['avoid'],['avoid']
Safety,"* PyROOT_PyUnicode_AsString changed return type from char* to const char*; * Using _PyObject_GC_TRACK results in linking error:; undefined reference to `_PyGC_generation0'; The python documentation says this about _PyObject_GC_TRACK:; ""A macro version of PyObject_GC_Track(). It should not be used for; extension modules.""; So it should not be used. Calling PyObject_GC_Track instead avoids the; undefined symbol. I also removed the #ifndef R__WIN32 since the; comment indicates that this was added to avoid the same issue on; windows. Calling PyObject_GC_Track instead of using the; _PyObject_GC_TRACK macro should fix the undefined symbol probelem on; windows too.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2395:384,avoid,avoids,384,https://root.cern,https://github.com/root-project/root/pull/2395,2,['avoid'],"['avoid', 'avoids']"
Safety,"* Remove dangerous `RField` constructors, where the user could pass subfields into typed `RField<std::pair<T1, T2>>` and `RField<std::tuple<ItemTs...>>` without checks.; * Avoid UB in `RRecordField` construction, related to unspecified order of evaluation of function arguments.; * Take container of `unique_ptr`'s by value, to signal ownership handover.; * Fix `fSize` calculation in `RRecordField::AttachItemFields`, to have less (critical) logic in the typed `RField` constructors.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16764:172,Avoid,Avoid,172,https://root.cern,https://github.com/root-project/root/pull/16764,1,['Avoid'],['Avoid']
Safety,"* Since the `RooAbsMinimizeFcn` implementations don't need to be copied; anymore, we can use `std::unique_ptr` instead of `shared_ptr` for; clear ownership and less overhead. * Name variables to be consistent with RooFit style. * Streamline `public` and `private` scopes. * Avoid code duplication with new private member function that applies a; specific call to both the regular likelihood and the likelihood in the; gradient. * Additional commit fixes memory leaks of toy datasets in `TestStatistics` tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12361:274,Avoid,Avoid,274,https://root.cern,https://github.com/root-project/root/pull/12361,1,['Avoid'],['Avoid']
Safety,"* The `ROOFIT_MEMORY_SAFE_INTERFACES` macro is explained in the release notes, so that users and framework developers can use it to detect memory leaks. * Since people are now encouraged to use it, the `RooFit::Detail::owningPtr` helper function was renamed to `RooFit::makeOwningPtr`, because this is now not an implementation detail anymore but part of the user interface. * Remove `takeOwnership` constructor arguments from `PiecewiseInterpolation` and `RooAddition`, because there are not memory-safe and it's not easily possible to only exclude selected parameters behind the `ROOFIT_MEMORY_SAFE_INTERFACES` macro without also changing the sources. Like this, we ensure that the memory-safe interfaces can be used without re-building ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14177:132,detect,detect,132,https://root.cern,https://github.com/root-project/root/pull/14177,3,"['detect', 'safe']","['detect', 'safe']"
Safety,"* Use only **Browsable::Provider** class for all factory methods; * Split ROOT6 and ROOT7 drawing plugins; * Rename RBrowsable -> RBrowserData to avoid confusion; * Fix Windows compiler error, tests on Windows",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4785:146,avoid,avoid,146,https://root.cern,https://github.com/root-project/root/pull/4785,1,['avoid'],['avoid']
Safety,"* [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:; ```; [ RUN ] TRootTDS.DefineSlotMT; Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist; [ OK ] TRootTDS.DefineSlotMT (191 ms); [ RUN ] TRootTDS.FromARDFMT; Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file; C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:; 29.; Which is: 29; *max; Which is: 23; [ FAILED ] TRootTDS.FromARDFMT (6 ms); ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13500:58,safe,safe,58,https://root.cern,https://github.com/root-project/root/pull/13500,1,['safe'],['safe']
Safety,"* a direct ApplyInverse() function for Points and Vectors; * faster than using the Inverse() + operator() mechanism, because; - avoids intermediate calculation and memory of inverse; - we know the precise form of the inverse transformation a priori; (the inverse of an 3D rotation is is transpose, etc.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/464:128,avoid,avoids,128,https://root.cern,https://github.com/root-project/root/pull/464,1,['avoid'],['avoids']
Safety,"* fix invalid memory access in RooFuncWrapper by getting observables and parameters of the original function, and not the one that is compiled for a normalization set, which is temporary. What matters are the names of the parameters and observables, and they are the same anyway. * new `CodeSquashContext::buildCall()` function to avoid code duplication. * add support for `RooExponential`, including unit test. Followup to #12529.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12554:331,avoid,avoid,331,https://root.cern,https://github.com/root-project/root/pull/12554,1,['avoid'],['avoid']
Safety,"* print the **value** of the `RF_ARCH` macro, not the macro name. * avoid looging same info repeatedly",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10352:68,avoid,avoid,68,https://root.cern,https://github.com/root-project/root/pull/10352,1,['avoid'],['avoid']
Safety,* provide proper list of pythonization files for RootFit; * avoid empty string with extra . in produce file name,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8509:60,avoid,avoid,60,https://root.cern,https://github.com/root-project/root/pull/8509,1,['avoid'],['avoid']
Safety,"* remove unused variable fTmpBranches from TDataFrameImpl; * inizialize fLastCheckedEntry to -1 for all threads; * total size of collection returned by Take is now a ULong64_t; * {Ret,Arg}Type_t -> {Ret,Args}_t: more readable, no redundancy; * minor text fixes",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/336:230,redund,redundancy,230,https://root.cern,https://github.com/root-project/root/pull/336,1,['redund'],['redundancy']
Safety,"* remove wrong multiplication of type size in `CastPersistentToShared`. * restructure `InitializeTensor` to only provide read-only accessors, enforcing invariance of the right combination between type, shape and data. * avoid **memory leak** of persistified data when reading back from file. * reset `fSize` member in `CastSharedToPersistent` to avoid wrong size info when persistifying the same model twice (otherwise, the multiplication with the element size in bytes would happen twice, resulting in overruns when copying the transient data). Extends on #15162.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15163:220,avoid,avoid,220,https://root.cern,https://github.com/root-project/root/pull/15163,2,['avoid'],['avoid']
Safety,"* replace `Double_t` with `double` and `Int_t` with `int`. * replace `kTRUE` with `true` and `kFALSE` with `false`. * remove redundant member initializations. * avoid code duplication in internal-use constructors. * replace C-style casts with C++ casts. * add missing `_binnedPdf->setAttribute(""BinnedLikelihoodActive"") ;` to; one of the internal-use constructors to be consistent with the other; internal-use constructor. * fix memory leak of a `std::list<Double_t>`. * replace `fabs` with `std::abs`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9206:125,redund,redundant,125,https://root.cern,https://github.com/root-project/root/pull/9206,2,"['avoid', 'redund']","['avoid', 'redundant']"
Safety,"* replace wrong `dynamic_cast<RooAbsReal*>` with; `dynamic_cast<RooAbsPdf*>` (presumably a copy-paste error). * use `TIter` and range-based loop instead of `TIterator*`. * avoid C-style casts. * replace `assert(0)` with `std::runtime_error`, as asserts only work in; debug buils. * replace one orrurence of `coef->GetName()` with `pdf->GetName()`,; which was probably also a copy-paste error. This fixes the following warning in gcc11:. ```; ../roofit/roofitcore/src/RooAddModel.cxx: In constructor ‘RooAddModel::RooAddModel(const char*, const char*, const RooArgList&, const RooArgList&, Bool_t)’:; ../roofit/roofitcore/src/RooAddModel.cxx:125:106: warning: ‘this’ pointer is null [-Wnonnull]; 125 | coutE(InputArguments) << ""RooAddModel::RooAddModel("" << GetName() << "") pdf "" << pdf->GetName() << "" is not of type RooAbsPdf, ignored"" << endl ;; ```. This PR superseeds PR https://github.com/root-project/root/pull/8432 and addresses issue https://github.com/root-project/root/issues/8129.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8434:172,avoid,avoid,172,https://root.cern,https://github.com/root-project/root/pull/8434,1,['avoid'],['avoid']
Safety,"*********************************************************; *Tree :sig_tree : tree *; *Entries : 10000 : Total = 1177229 bytes File Size = 785298 *; * : : Tree compression factor = 1.48 *; ******************************************************************************; *Br 0 :Type : Type/F *; *Entries : 10000 : Total Size= 40556 bytes File Size = 307 *; *Baskets : 1 : Basket Size= 1500672 bytes Compression= 130.54 *; *............................................................................*; [ --- ]; *............................................................................*; *Br 28 :m_wwbb : m_wwbb/F *; *Entries : 10000 : Total Size= 40566 bytes File Size = 34410 *; *Baskets : 1 : Basket Size= 1500672 bytes Compression= 1.16 *; *............................................................................*; DataSetInfo : [dataset] : Added class ""Signal""; : Add Tree sig_tree of type Signal with 10000 events; DataSetInfo : [dataset] : Added class ""Background""; : Add Tree bkg_tree of type Background with 10000 events; <FATAL> : Unknown method index in map: 0; ***> abort program execution; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/tutorials/tmva/TMVA_Higgs_Classification.py"", line 141, in <module>; factory.BookMethod(; File ""/builddir/build/BUILD/root-6.28.00/redhat-linux-build/lib/ROOT/_pythonization/_tmva/_factory.py"", line 61, in BookMethod; return self._BookMethod(*args, **kwargs); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; TypeError: none of the 3 overloaded methods succeeded. Full details:; TMVA::MethodBase* TMVA::Factory::BookMethod(TMVA::DataLoader* loader, TString theMethodName, TString methodTitle, TString theOption = """") =>; TypeError: could not convert argument 2; TMVA::MethodBase* TMVA::Factory::BookMethod(TMVA::DataLoader* loader, TMVA::Types::EMVA theMethod, TString methodTitle, TString theOption = """") =>; runtime_error: FATAL error; TMVA::MethodBase* TMVA::Factory::BookMethod(TMVA::DataLoader*, TMVA::Types::EMVA, TString, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12429:11271,abort,abort,11271,https://root.cern,https://github.com/root-project/root/issues/12429,1,['abort'],['abort']
Safety,"**First two commits**:. Sanity checks for a non-jitted Vary asked the nominal Define'd; columns static type information that a jitted Define did not have. With this patch RJittedDefine should also have that type; information in most if not all cases. **Last commit**:. Fix potential invalid memory access when using Vary. Users can vary a single column or multiple columns simultaneously.; In the latter case, RVariation::fLastResults contains, for each; processing slot, an RVec of RVecs of results where the outer; dimension runs over the different columns and the inner one over; the varied values of each column. Before this commit, RVariation was initializing fLastResults to; the wrong size in the case of multiple columns varied simultaneously,; which ended up causing invalid memory accesses during the event loop; in some cases. This patch fixes the problem and adds a regression test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10699:24,Sanity check,Sanity checks,24,https://root.cern,https://github.com/root-project/root/pull/10699,1,['Sanity check'],['Sanity checks']
Safety,"**GitHub issue** that we still want to resolve before the v6.26.00 release:. - [x] https://github.com/root-project/root/issues/9372. **Other items** that still need to be done without any associated GitHub issue:. - [x] `Pythonizations`: write about new pythonizations in release notes; - [x] `RooFitHS3`: Write release notes; - [x] `RooFitHS3`: Put JSONInterface in `RooFit::Experimental` namespace; - [x] `Lagrangian morphing`: write about it in the release notes; - [x] `GlobalObservables`: write a tutorial about storing global observables in the datasets. **Other items** that are nice to have but can also be in **patch release**:. - [ ] `BatchMode`: Reduce overhead in RooFitDriver to achieve good evaluation time also for large computation graphs; - [ ] `BatchMode`: Implement the binned pdf optimization to speed up HistFactory fits; - [ ] `RooFitHS3`: Avoid having to import the default export keys from a file manually (e.g. like [here in the unit test](https://github.com/root-project/root/blob/master/roofit/hs3/test/testRooFitHS3.cxx#L47)). **Backports** that need to be made for the v6.26 branch (in this particular order from top to bottom, to not have a commit history too different from master):. - [x] https://github.com/root-project/root/pull/9478; - [x] https://github.com/root-project/root/pull/9504; - [x] https://github.com/root-project/root/pull/9458; - [x] https://github.com/root-project/root/pull/9553; - [x] https://github.com/root-project/root/pull/9447; - [x] https://github.com/root-project/root/pull/9552; - [x] https://github.com/root-project/root/pull/8784; - [x] https://github.com/root-project/root/pull/9177; - [x] https://github.com/root-project/root/pull/8595; - [x] https://github.com/root-project/root/pull/9444; - [x] https://github.com/root-project/root/pull/9456; - [x] https://github.com/root-project/root/pull/9640; - [x] https://github.com/root-project/root/pull/9482; - [x] https://github.com/root-project/root/pull/9690; - [x] https://github.com/root-",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9508:862,Avoid,Avoid,862,https://root.cern,https://github.com/root-project/root/issues/9508,1,['Avoid'],['Avoid']
Safety,"**This is a replay of #16274 with the ""clear build"" label for the CI, to see if we can reproduce the build error that were observed after merging said PR**. Our CMake code modifies `find_package` to ignore any ROOT builtins, such that the builtin LLVM doesn't find and use system versions of the builtin dependencies. This is a bit hacky, but fortunately this needs to be done only when builtins are used. Therefore, this commit suggests to only do this redefinition of `find_package` if any builtins are used. This closes #8633, where it was requested to avoid this hack for the sake of being compatible with the `vcpkg` package manager. Although the hack is not completely removed, it is removed for the case where not builtins are used, which is probably what is done when using a C++ package manager to manage dependencies.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16285:556,avoid,avoid,556,https://root.cern,https://github.com/root-project/root/pull/16285,1,['avoid'],['avoid']
Safety,", it looks; like this:. ```; struct NoBase {};. template <class T>; struct DataVectorBase; {; typedef NoBase Base;; };. // Specialized derived version.; template <class T, class BASE = typename DataVectorBase<T>::Base>; class DataVector : public BASE {...};. // Base class version.; template <class T>; class DataVector<T, NoBase> {...};; ```. where user classes then specialize the DataVectorBase class; (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that; it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach; archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```; $ . ./setup; $ echo $ROOTSYS; /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg; $ ./build.sh ; $ python -i test.py; python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed.; *** Break *** abort; ```. The test script here is loading dictionaries from two separate libraries:. ```; getattr( ROOT, 'DataVector<TrackParticle_v1>', None ); getattr( ROOT, 'DataVector<Egamma_v1>', None ); ```. Either of these lines works by itself, but together they cause this crash. See https://its.cern.ch/jira/browse/ATEAM-942.; May also be related to https://sft.its.cern.ch/jira/browse/ROOT-10940. ### Reproducer. See above. ### ROOT version. v6-28-00-patches. ### Installation method. lcg. ### Operating system. lxplus9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14186:2062,abort,abort,2062,https://root.cern,https://github.com/root-project/root/issues/14186,1,['abort'],['abort']
Safety,"- Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:; - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed); - picking, highlight and tooltips; - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4617:119,Detect,Detect,119,https://root.cern,https://github.com/root-project/root/pull/4617,1,['Detect'],['Detect']
Safety,"- Do static initialization in the header where possible.; - Remove unnecessary pointers to `TList` in the `TFileMerger` when the `TList` is owned by the `TFileMerger`, always created, and has the same lifetime. Avoids unnecessary heap allocations.; - As the data members have changed, increase the `ClassDef` version.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1204:211,Avoid,Avoids,211,https://root.cern,https://github.com/root-project/root/pull/1204,1,['Avoid'],['Avoids']
Safety,"- Instead of a raw pointer, a deleter, and some custom memory management methods, RValue now stores a shared void pointer to the object to be written to / read from disk. Follow-up PRs are coming to change the `RField::BindValue` API to a shared pointer interface and to change RValue to not return raw pointers.; - Splits the `REntry::CaptureValueUnsafe` API into a shared-pointer based safe `BindValue` and a `BindRawPtr` unsafe version. This could be a separate PR but it ended up here... It probably makes sense to review the final change set and not go through the transitional commits.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14412:388,safe,safe,388,https://root.cern,https://github.com/root-project/root/pull/14412,2,"['safe', 'unsafe']","['safe', 'unsafe']"
Safety,- Move LZMA to use modules from CMake instead of custom find modules; - Define R__HAVE_CONFIG with a `#cmakedefine` to avoid incompatibilities when compiling against ROOT; - Update required version of CMake in `ROOTUseFile.cmake`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4097:119,avoid,avoid,119,https://root.cern,https://github.com/root-project/root/pull/4097,1,['avoid'],['avoid']
Safety,"- Move some RenderCore specific classes and all shaders into RenderCore source tree. - Implement all existing Three.js functionality with RenderCore. - In RenderCore, further improve on existing functionality:; - Textured points - arbitrary size and shape.; - Mesh lines - arbitrary thickness.; - Object and sub-object picking through color buffer with fragment depth detection.; - Camera handling like in TEve, with ability to pick rotation center. - The development branch has been squashed to hide redundant changes. Full history is available in PR osschar/root#41. ## C++ / Server Changes. - REveManager: Make RenderCore the default rendering engine. - Stream interpreter errors and show them in client log. - Add flag fIsRCore to REveManager. - Make REvePointSet secondary-selectable. - Add parameter for projection depth in REveDataCollection. ## JS / Client Changes. - Remove error MessageBox popup during client updates. - EveManager.js: Check change bits in ImportSceneBinary when scene changes are streamed. - EveScene.js: Optimize visibility changes. - EveScene.js: pass eve_element instead of object3d in cases where it simplifies the code. - EveScene.js, GlViewer classes: Cleamup highlite/selection management so it can be abstracted for RCore. - Separate viewer-side selection processing for Three / RCore. ## Tutorials / Demos Changes. - event_demo.C: secondary select points, jet title include pT. - Tune marker sizes, colors, visual parameters.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11936:368,detect,detection,368,https://root.cern,https://github.com/root-project/root/pull/11936,2,"['detect', 'redund']","['detection', 'redundant']"
Safety,- Only rely on presence of TMCManager in multi run (PR#6 in vmc-project/vmc); - Withdraw unwanted TMCVerbose modifications to avoid changes in the tests outputs; - Recover TGeoManager::fIsOutside for transfer tracks (PR#3 in vmc-project/vmc),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4459:126,avoid,avoid,126,https://root.cern,https://github.com/root-project/root/pull/4459,2,"['Recover', 'avoid']","['Recover', 'avoid']"
Safety,- Use `PCRE_PCRE_LIBRARY` and `PCRE_PCREPOSIX_LIBRARY` variables; - Avoid installation of empty `lib/pkgconfig` directory. Fixes: [ROOT-9864](https://sft.its.cern.ch/jira/browse/ROOT-9864),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3266:68,Avoid,Avoid,68,https://root.cern,https://github.com/root-project/root/pull/3266,1,['Avoid'],['Avoid']
Safety,"- [ ] Implement batch eval for Chi2 test stat; - [x] Implement recovery from disallowed regions for batch eval (https://github.com/root-project/root/pull/6401); - [x] Implement getWeightBatch() and getBatches() for RooDataHist; - [ ] Implement getBatch for RooTreeDataStore?; - [ ] Don't clear all intermediate values in batch fits between fit cycles. Only the ones that changed.; - [ ] Disable recalculateCache etc belonging to Lvl2 optimisation.; - [ ] Use batch evaluation & inverted CDF for toys; - [ ] Continue to improve interface with variadic templates; - [ ] Profile and optimise new Batch interface; - [ ] Modernise proxyList member of RooSimultaneous; - [ ] Investigate if retrieving batch data with category states is better for batch evaluations. (vs. splitting composite datasets into components, and creating one NLL for each.); - [ ] Continue modernisation of RooSimultaneous. Requires rebasing and fixing an index bug in https://github.com/hageboeck/root/tree/updateRooSimultaneous; - [ ] Implement analytical integration of RooJohnson.; - [ ] Correct interface of RooAbsData and derived classes to use e.g. `std::size_t` for indexing events. `int` doesn't make sense.; - [ ] Always have a debug version of RooFit around with `-DROOFIT_CHECK_CACHED_VALUES`.; - [ ] Use analytic integrals in RooBinSamplingPdf when available.; - [ ] Check that different integrator settings are honoured in RooBinSamplingPdf.; - [ ] https://sft.its.cern.ch/jira/browse/ROOT-8304; - [ ] Implement evaluateSpan() in classes relevant for HistFactory fits.; - [ ] Throw Gaussian & Poisson constraints into dedicated fast class.; - [ ] Switch on FastEvaluations topic in RooFit message streams, and use it to trace down PDFs that don't implement the faster interface.; - [ ] #7210, slowly augment PDFs with checks of the definition range of parameters. This prevents evaluation errors and can stabilise fits.; - [ ] #7217, pythonisations for RooFit; - [ ] Vectorized generation of events. Unless specialised",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6557:63,recover,recovery,63,https://root.cern,https://github.com/root-project/root/issues/6557,1,['recover'],['recovery']
Safety,"- [ x] Checked for duplicates; ### Describe the bug; [Docs](https://root.cern/doc/master/classRooAbsCollection.html#a7427c51d759748b0fdc5c0164c0c2187); When using addOwned, the collection takes ownership of the object. When called from Python, ownership remains with PyROOT, though, so there's two owners now. A Pythonisation should be added to avoid this. It should include a call such as:; `ROOT.SetOwnership(obj, False)`. ### Expected behavior; Ownership is transferred to the collection. ### To Reproduce; Something like; ```py; coll = ROOT.RooArgSet(); if True:; x = ROOT.RooRealVar('x', 'x', -10, 10); coll.addOwned(x); # Similarly:; coll.addOwned(ROOT.RooRealVar('y', ...)). # Now should be able to touch x in coll without problems; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8120:345,avoid,avoid,345,https://root.cern,https://github.com/root-project/root/issues/8120,1,['avoid'],['avoid']
Safety,- [NFC][DF] Remove redundant virtual keyword: `final` implies `virtual`.; - [NFC][DF] Remove unnecessary pure virtual method: the line just re-declared a method from the RNodeBase base class.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9506:19,redund,redundant,19,https://root.cern,https://github.com/root-project/root/pull/9506,1,['redund'],['redundant']
Safety,- [ROOT-5311] Make it much less verbose; - [ROOT-4060] Make it abort when invalid sample names are given; - [ROOT-8033] **Needs review** @lmoneta Switch default MC stat error constraint from Gaus to Poisson to follow HistFactory paper.; - [ROOT-9365] Make documentation a bit easier to find.; - Properly format documentation of RooWorkspace::factory(),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5192:63,abort,abort,63,https://root.cern,https://github.com/root-project/root/pull/5192,1,['abort'],['abort']
Safety,"- [V] Checked for duplicates. ### Describe the bug; RooAddPdf, if initialized with pdfs with the same name, is evaluated wrongly. It interprets all pdfs with the same name as the first of them (function and parameters are the same for all pdfs, while the coefficient is the proper one, as should be if that pdf was the corresponding pdf). ### Expected behavior. - pdfs must be operated as different C++ objects/pointers, not based on name. Otherwise; - pdfs with the same name must be forbidden. RooAddPdf must fail to initialize if some pdfs have the same name. RooAddPdf class description should specify that pdfs with the same name are not allowed. ### To Reproduce; I make a 3-dimensional parametric fit of the detector. I model its parts as cylinders, and there are many of them, so I simply copied some common initialization code. The reused pdfs were not simply summed in RooAddPdf, but they were inside RooProdPdf-s (those had distinct names). Pdfs were different C++ objects and had different parameters. For different types of pdfs all converged well, but when I used 2 same pdfs (with the same name, but in absolutely different regions), the fit did not converge, and the plot was wrong. When I plotted (separate pdf or with RooFit::Component of the total sum), it showed that one pdf got parameters of another pdf (even though it was outside its allowed range), though its normalization was as it should probably be. The total sum (the pdf I fitted) was also plotted wrongly. I used RooAddPdf [constructor with RooArgList PdfList and RooArgList CoefList](https://root.cern.ch/doc/master/classRooAddPdf.html#acafcca576f7839c046bea7c9edf31c22), if that is important. I think the easiest would be to create a new example from scratch. I can copy some code here if needed. ### Setup; 1. ROOT version 6.22/06.; 2. Arch Linux.; 3. Built it myself.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8000:715,detect,detector,715,https://root.cern,https://github.com/root-project/root/issues/8000,1,['detect'],['detector']
Safety,"- [X] Checked for duplicates. ### Describe the bug; A non-void returning function (specifically, returning `std::vector<ROOT::RDF::RResultPtr<TH1D>>`) that throws, causes `cling::Value::~Value()` to try freeing resources that were, in principle, already released as part of exception handling. See behavior below:; ```c++; root [0] .x pointer_not_allocated_error.cc; free(): double free detected in tcache 2; ```. In principle, this seems to be dependent on NRVO. Crash seems to be avoided either by _(i)_ commenting out; ```c++; histograms.push_back(h);; ```; ; or _(ii)_ changing the `return` statement as follows; ```diff; - return histograms;; + return {h};; ```. ### To Reproduce; The issue can be reproduced with the following code in ArchLinux x86_64 with ROOT master:; ```c++; vector<ROOT::RDF::RResultPtr<TH1D>> pointer_not_allocated_error(){; // Create a data frame with 100 rows; ROOT::RDataFrame rdf(100);. // Define a new column `x` that contains random numbers and create a histogram; ROOT::RDF::RResultPtr<TH1D> h = rdf.Define(""x"", [](){ return gRandom->Rndm(); }).Histo1D(""x"");. // Add the histogram to a vector; vector<ROOT::RDF::RResultPtr<TH1D>> histograms;; histograms.push_back(h);. // Attempt to throw an error; throw std::runtime_error(""intended error throw for debugging"");. return histograms;; }; ```. ### Additional context; For additional context see https://root-forum.cern.ch/t/pointer-not-allocated-when-adding-rresultptr-to-vector/51831/2. Interesting part of the gdb backtrace follows (thanks @eguiraud!):; ```; >>> bt; #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at pthread_kill.c:44; #1 0x00007ffff72a1503 in __pthread_kill_internal (signo=6, threadid=<optimized out>) at pthread_kill.c:78; #2 0x00007ffff7251958 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26; #3 0x00007ffff723b53d in __GI_abort () at abort.c:79; #4 0x00007ffff729563e in __libc_message (action=action@entry=do_abort, fmt=f",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11494:387,detect,detected,387,https://root.cern,https://github.com/root-project/root/issues/11494,2,"['avoid', 'detect']","['avoided', 'detected']"
Safety,"- [X] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; Creating a branch in `TTree` with type `std::vector<A>` raises an internal error in ROOT, when class `A` inherits from a class that uses the old I/O system. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; Branch should be created successfully (I don't know if this behavior is supposed to be supported) or ROOT should abort with a more descriptive error message. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; Compile and run the following macro with `root -l -b -q T.C+`:; ```C++; #include <vector>; #include ""TTree.h"". #pragma link C++ class A;; #pragma link C++ class B+;; #pragma link C++ class std::vector<B>+;. struct A {; int x;; ClassDef(A, 1);; };; ClassImp(A);. struct B : A {; int y;; ClassDef(B, 1);; };; ClassImp(B);. void T() {; TTree* tree = new TTree(""T"", ""T"");; std::vector<B> bvec;; tree->Branch(""B"", &bvec);; }; ```; Macro aborts with the error: ; ```Fatal in <TBranchElement::InitializeOffsets>: Could not find the real data member 'B' when constructing the branch 'B' [Likely an internal error, please report to the developers].```. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; 1. ROOT version: 6.22.08 (built myself), 6.26.00 (",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10240:827,abort,abort,827,https://root.cern,https://github.com/root-project/root/issues/10240,1,['abort'],['abort']
Safety,"- [x ] Checked for duplicates. ### Describe the bug. ROOT 6.28.00 does not work correctly when $PWD is not accessible by the user. If I do:. ```bash; mkdir -p foo; cd foo; chmod 000 .; root; ```. it fails with:. ```bash; input_line_2:1:10: fatal error: cannot open file './cling/Interpreter/RuntimeUniverse.h': Permission denied; #include ""cling/Interpreter/RuntimeUniverse.h""; ^; Replaced symbol atexit cannot be found in JIT!; Replaced symbol at_quick_exit cannot be found in JIT!; input_line_4:2:10: fatal error: cannot open file './TError.h': Permission denied; #include ""TError.h""; ^; input_line_5:1:10: fatal error: cannot open file './cling/Interpreter/DynamicLookupRuntimeUniverse.h': Permission denied; #include ""cling/Interpreter/DynamicLookupRuntimeUniverse.h""; ```. the same snippet works fine with 6.26.10. Notice things work fine with just the x bit set (i.e. chmod 100 . still works). ### Expected behavior. The standard root prompt without any error. ### To Reproduce. See above. ```bash; mkdir -p foo; cd foo; chmod 000 .; root; ```. ### Setup. ROOT 6.28.00, both el7 and ubuntu. ### Additional context. While this can look like a corner case, it reflects the way ALICE runs its online reconstruction jobs, so it's rather critical for us. I am in parallel trying to understand if the unaccessible cwd can be avoided, but this might have non trivial implications (and its for sure beyond my responsibilities).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12409:1325,avoid,avoided,1325,https://root.cern,https://github.com/root-project/root/issues/12409,1,['avoid'],['avoided']
Safety,"- [x] Checked for duplicates. ### Describe the bug. In the LCG dev3 and dev4 build we see a segfault when testing DD4hep, when reading the XML description of the materials of the Detector.; ```; #0 0x00007ffff4c73a1a in TGeoElement::A (this=0x0) at /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-26-00-patches/src/ROOT/v6-26-00-patches/geom/geom/inc/TGeoElement.h:76; #1 0x00007ffff4c734ee in TGeoMixture::ComputeDerivedQuantities (this=0x2945cb0); at /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-26-00-patches/src/ROOT/v6-26-00-patches/geom/geom/src/TGeoMaterial.cxx:1262; #2 0x00007fffd42bb732 in dd4hep::Converter<dd4hep::Material, dd4hep::xml::Handle_t>::operator() (this=0x7ffffffe1960, e=...); at /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/DD4hep-01.22/src/DD4hep/01.22/DDCore/src/plugins/Compact2Objects.cpp:489; #3 0x00007fffd42cadc3 in dd4hep::xml::Collection_t::for_each<dd4hep::Converter<dd4hep::Material, dd4hep::xml::Handle_t> > (this=0x7ffffffe1990, oper=...); ```. Debugging the code, I can see that the TGeoMixture is supposed to contain fNelements=4 elements, and the last one is 0x0 hence the segfault when invoking A(). Digging further, I can see that the material is defined in DD4hep compact as:. ```; <!-- ### Pipe Supports Sintimid ### -->; <material name =""Pipe:Sintimid"">; <D type=""density"" value=""1.43"" unit=""g/cm3""/>; <composite ref=""C"" n=""18""/>; <composite ref=""O"" n=""5""/>; <composite ref=""N"" n=""2""/>; </material>. <!--### Pipe Supports Sintimid15G ###-->; <material name =""Pipe:Sintimid15G"">; <D type=""density"" value=""1.42"" unit=""g/cm3""/>; <fraction ref=""Pipe:Sintimid"" n=""0.85""/>; <fraction ref=""C"" n=""0.15""/>; </material>; ```; where the second mixture is a mixture of the first mixture and an element already present. ### Expected behavior; No segfault. ### To Reproduce. I have tried to reproduce the behaviour in a simple root macro:; ```; void test_mixture(); {; TGeoManager *geom = new TGeoManager(""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11272:179,Detect,Detector,179,https://root.cern,https://github.com/root-project/root/issues/11272,1,['Detect'],['Detector']
Safety,"- [x] Checked for duplicates. ### Describe the bug. The following code causes a crash:; ```cpp; // sink is destroyed before model; auto model = RNTupleModel::Create();; auto fieldPt = model->MakeField<float>(""pt"", 42.0);; {; RPageSinkFile sink(""myNTuple"", ""file.root"", RNTupleWriteOptions());; sink.Create(*model.get());; // uncomment to run successfully; // model = nullptr; ; } ; ```; ```; pure virtual method called; terminate called without an active exception; Aborted (core dumped); ```; The following sequence is seemingly to blame (worked out with @jblomer):; 1. The model owns fields; 2. On `sink.Create()`, these fields get their columns connected to the page sink ; 3. The columns get their pages allocated from the page sink; 4. On destruction, the columns ask the page sink to help the free the pages; 5. So the columns (i.e. fields, i.e. model) must not be deconstructed after the page sink they are connected to. Note: the user-level `RNTupleWriter` API is immune to this issue because of class member destruction order: ; https://github.com/root-project/root/blob/f7df9d527f121ca5f00690dc49f4911dd356cb1c/tree/ntuple/v7/inc/ROOT/RNTuple.hxx#L356-L358; <!--; A clear and concise description of what the wrong behavior is.; -->. ### Setup; ROOT master. ### Additional context; This bug is surprising, but low-severity because users will likely use the higher-level `RNTupleReader` and `Writer` APIs. The workaround is straightforward when the root cause is known.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8581:466,Abort,Aborted,466,https://root.cern,https://github.com/root-project/root/issues/8581,1,['Abort'],['Aborted']
Safety,"- [x] Checked for duplicates. ### Describe the bug. `TTreeCacheUnzip::GetUnzipBuffer()` does a binary search on `fSeekSort` and uses the return value in the loop that follows:. https://github.com/root-project/root/blob/412b2e8d829ee0a378b2aeb407505b2dcbb2595e/tree/tree/src/TTreeCacheUnzip.cxx#L694. This assumes that `fSeekSort` is sorted and stable. Neither assumption is safe in a multi-threaded program with prefetching enabled. This can lead to corruption of the `fSeekSort` array when prefetching calls the `sort()` method while `GetUnzipBuffer()` is searching for a block. The call paths to the `sort()` method go through `TTreeCacheUnzip::ReadBufferExt()`, which locks `fIOMutex`. To work with prefetching enabled, `TTreeCacheUnzip::UnzipBuffer()` needs to lock `fIOMutex` in the sections where it needs `fSeekSort` to be stable, and reacquire the block location after any sections where the mutex isn't held. This looks to be non-trivial. ### Expected behavior. `TTreeCacheUnzip` should work with prefetching without crashing. ### To Reproduce. Non-trivial, but I can supply a CMSSW recipe if necessary. ### Setup. 1. CMS ROOT6 master from CMSSW_12_3_ROOT6_X_2022-03-06-2300; 2. slc7_amd64_gcc10; 3. CMS CMSSW_12_3_ROOT6_X_2022-03-06-2300 in cvmfs. ### Additional context. We were hoping to use `TTreeCacheUnzip` as a way to increase parallelism in the CMS `PoolInputSource`, but this looks to be a blocker for that use.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10095:374,safe,safe,374,https://root.cern,https://github.com/root-project/root/issues/10095,1,['safe'],['safe']
Safety,"- [x] Checked for duplicates. ### Describe the bug. tutorial-tree-drawsparse fails on s390x. ### Expected behavior. No failure. ### To Reproduce. Steps to reproduce the behavior:; 1. Build root for 6.28.00 on s390x; 2. Run unit tests. ### Setup. 1. ROOT version: 6.28.00; 2. Operating system: Fedora Linux s390x, RHEL+EPEL s390x; 3. How you obtained ROOT: build from source. ### Additional context. Output from failing test:; ~~~; 1008/1272 Test #1006: tutorial-tree-drawsparse ................................\; ............***Failed 0.97 sec; Processing /builddir/build/BUILD/root-6.28.00/tutorials/tree/drawsparse.C...; /usr/include/c++/13/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = double; _Alloc = std::allocator<double>; reference = double&; size_type = long unsigned int]: Assertion '__n < this->size()' failed.; CMake Error at /builddir/build/BUILD/root-6.28.00/redhat-linux-build/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ~~~",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12431:1026,abort,aborted,1026,https://root.cern,https://github.com/root-project/root/issues/12431,1,['abort'],['aborted']
Safety,"- [x] Checked for duplicates. ### Describe the bug; Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior; ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ ; The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; On a AL9 instance with `liburing` installed (`dnf install liburing`), run; ```; grep -i uring /boot/config-$(uname -r); ```; to verify that `io_uring` is indeed not supported. The output should be; ```; # CONFIG_IO_URING is not set; ```. Build and install ROOT with `-During=on`. Run; ```; root-config --has-uring; ```; to confirm ROOT was in fact built with this option. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; ROOT version: master (but most likely every ROOT version that supports the `uring` option); OS: Alma Linux 9. ### Additional context; <!--; Add any other context about the problem here.; -->; A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12701:584,detect,detected,584,https://root.cern,https://github.com/root-project/root/issues/12701,1,['detect'],['detected']
Safety,"- [x] Checked for duplicates. ### Describe the bug; Attached ([HCAL_Chimney_Sector_Half_Plate.gdml.gz](https://github.com/root-project/root/files/10095037/HCAL_Chimney_Sector_Half_Plate.gdml.gz)) is a relatively simple GDML file (6280 bytes) with a single tesselated solid that is placed twice in positions that are not overlapping, yet for which ROOT reports an overlap. ### Expected behavior; ROOT should not report an overlap. Geant4 does not report an overlap, and visualizes the volumes this way (demonstrating they are not overlapping):; ![image](https://user-images.githubusercontent.com/4656391/204054829-cc8a1c58-f8d8-4b61-86f4-3679424e4d17.png). ### To Reproduce; - `TGeoManager* myGeo = new TGeoManager();`; - `myGeo->Import(""HCAL_Chimney_Sector_Half_Plate.gdml"")`; - `myGeo->CheckOverlaps()`; - `myGeo->PrintOverlaps()`. ```; 14:51:08 wdconinc@menelaos ~/EIC/detectors/epic (testcase *$%=) $ root -l ; root [0] TGeoManager* myGeo = new TGeoManager();; root [1] myGeo->Import(""HCAL_Chimney_Sector_Half_Plate.gdml""); Info in <TGeoManager::Import>: Reading geometry from file: HCAL_Chimney_Sector_Half_Plate.gdml; Info in <TGeoManager::TGeoManager>: Geometry GDMLImport, Geometry imported from GDML created; Info in <TGeoManager::SetTopVolume>: Top volume is worldVOL. Master volume is worldVOL; Info in <TGeoNavigator::BuildCache>: --- Maximum geometry depth set to 100; Info in <TGeoManager::CheckGeometry>: Fixing runtime shapes...; Info in <TGeoManager::CheckGeometry>: ...Nothing to fix; Info in <TGeoManager::CloseGeometry>: Counting nodes...; Info in <TGeoManager::Voxelize>: Voxelizing...; Info in <TGeoManager::CloseGeometry>: Building cache...; Info in <TGeoManager::CountLevels>: max level = 1, max placements = 2; Info in <TGeoManager::CloseGeometry>: 3 nodes/ 2 volume UID's in Geometry imported from GDML; Info in <TGeoManager::CloseGeometry>: ----------------modeler ready----------------; (TGeoManager *) 0x556b33e2bc60; root [2] myGeo->CheckOverlaps(); Info in <TGeoNodeMatri",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11781:871,detect,detectors,871,https://root.cern,https://github.com/root-project/root/issues/11781,1,['detect'],['detectors']
Safety,"- [x] Checked for duplicates. ### Describe the bug; ClassDef macro implements the ;:Streamer declaration in hundreds of classes. However, when generating the documentation, doxygen seems not to be able to detect its presence, and gives thousands of warnings, see e.g. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-v624/96/consoleFull. . of the type:; ```; geom/geom/src/TGeoArb8.cxx:1280: warning: no uniquely matching class member found for ; void TGeoArb8::Streamer(TBuffer &R__b); ```. ### Expected behavior; - Maybe the ClassDef macro can be tweaked so that doxygen finds correctly the link.; - Or if it is a bug in doxygen, I could file a report to them. ; - If none of the above solutions work, maybe hide this functions from doxygen?. ### To Reproduce; https://root.cern/for_developers/doxygen/. ### Setup; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jan 12 2022, 10:17:19 |; | From heads/master@v6-25-01-2870-gdac9b6398d |; | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```. ### Additional context; https://github.com/root-project/root/issues/8781",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9596:205,detect,detect,205,https://root.cern,https://github.com/root-project/root/issues/9596,1,['detect'],['detect']
Safety,"- [x] Checked for duplicates. ### Describe the bug; Configuring with `-DCUDA=ON` leads to; ```; -- Detecting CUDA compile features; -- Detecting CUDA compile features - done; CMake Warning (dev) at /opt/cmake-3.19/share/cmake-3.19/Modules/FindPackageHandleStandardArgs.cmake:426 (message):; The package name passed to `find_package_handle_standard_args` (CUDNN) does; not match the name of the calling package (CuDNN). This can lead to; problems in calling code that expects `find_package` result variables; (e.g., `_FOUND`) to follow a certain pattern.; Call Stack (most recent call first):; cmake/modules/FindCuDNN.cmake:40 (find_package_handle_standard_args); cmake/modules/SearchInstalledSoftware.cmake:17 (_find_package); cmake/modules/SearchInstalledSoftware.cmake:1669 (find_package); CMakeLists.txt:219 (include); This warning is for project developers. Use -Wno-dev to suppress it. -- Found CUDNN: /usr/include ; -- Found cuDNN: v? (include: /usr/include, library: /usr/lib64/libcudnn.so); ```. ### Expected behavior; Don't warn. ### To Reproduce; `cmake -Dcuda=ON <src>`. ### Setup; - centos8; - cuda 11.3 installed via yum.; - Manos' master branch. It branched off from master on 22. Jun @ d026b4918a . ### Additional context; --",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8537:99,Detect,Detecting,99,https://root.cern,https://github.com/root-project/root/issues/8537,2,['Detect'],['Detecting']
Safety,"- [x] Checked for duplicates. ### Describe the bug; During compilation, I get the following error:; ```; [6/20] Running utility command for SofieCompileModels_PyTorch; Torch Version: 1.7.0; RecursiveScriptModule(; original_name=Model; (fc1): RecursiveScriptModule(original_name=Linear); (relu): RecursiveScriptModule(original_name=ReLU); ); RecursiveScriptModule(; original_name=Model; (fc1): RecursiveScriptModule(original_name=Linear); (relu): RecursiveScriptModule(original_name=ReLU); ); libc++abi: terminating with uncaught exception of type std::runtime_error: TMVA::SOFIE - Parsing PyTorch node onnx::Shape is not yet supported ; /bin/sh: line 1: 21308 Abort trap: 6 ./emitFromPyTorch; ```. ### Expected behavior; I expect this to just compile. I believe the problem may lie with the PyTorch version I had installed, 1.7.0. CMake should detect the version and disable incompatible tests. Indeed, installing PyTorch 1.9.1 makes the problem go away. ### To Reproduce; Install PyTorch 1.7.0 with conda or pip, make sure it's in your PATH so CMake detects it, and build the `SofieCompileModels_PyTorch` target. ### Setup; 1. ROOT version: master; 2. Operating system: macOS 11.6; 3. How you obtained ROOT: built it myself",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9079:660,Abort,Abort,660,https://root.cern,https://github.com/root-project/root/issues/9079,3,"['Abort', 'detect']","['Abort', 'detect', 'detects']"
Safety,"- [x] Checked for duplicates. ### Describe the bug; Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior; Interpreter recovers. . ### To Reproduce; #### Prepare a file; ```; $ root -l; root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");; root [1] TTree *foo = new TTree(""t"",""t"");; root [2] foo->Write(); root [3] file->Close(); root [4] .q; ```; Open the file and read the tree in conjunction with a syntax error:; ```; $ root -l foo.root ; root [0] ; Attaching file foo.root as _file0...; (TFile *) 0x55f9f7a3e860; root [1] t->Print(=); ROOT_prompt_1:1:10: error: expected expression; t->Print(=); ^; ROOT_prompt_1:1:11: error: expected expression; t->Print(=); ^; root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed.; ```; ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:; ```; $ root -l foo.root ; root [0] ; Attaching file foo.root as _file0...; (TFile *) 0x55f9f7a3e860; root [1] t->Print(); .... correct output ...; root [2] t->Print(=); ROOT_prompt_2:1:10: error: expected expression; t->Print(=); ^; ROOT_prompt_2:1:11: error: expected expression; t->Print(=); ^; root [3]; ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup; 1. ROOT version: 6.26/08; 2. Operating system: Gentoo Linux; 3. How you obtained ROOT: `emerge root` (i.e. via package manager).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11651:334,recover,recovers,334,https://root.cern,https://github.com/root-project/root/issues/11651,2,['recover'],['recovers']
Safety,"- [x] Checked for duplicates. ### Describe the bug; ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}; [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm; FAILED: core/G__Core.cxx lib/Core.pcm ...; <snip/>; rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed.; #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0; #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0; #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0; #3 0x00007f1552225630 __restore_rt sigaction.c:0:0; #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387); #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78); #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6); #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252); #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0; #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0; #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0; #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0; #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0; #13 0x0000000001ba6284 clang::ParseAST(clang::Sema&, bool, bool) ParseAST.cpp:0:0; #14 0x00000000019f9",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861:995,abort,abort,995,https://root.cern,https://github.com/root-project/root/issues/10861,1,['abort'],['abort']
Safety,"- [x] Checked for duplicates. ### Describe the bug; When building CMS offline software stack with the ROOT commit 6f02c75fea, we get the following errors:; ```; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.29.01-8b1fb99c2f98c5fc80c3d3abd70c9452/etc/cling/std.modulemap:497:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'; module ""bits/uses_allocator_args.h"" {; ^; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/include/c++/11.2.1/memory_resource:42:10: note: submodule of top-level module 'std' implicitly imported here; #include // uninitialized_construct_using_alloc; ^; ```. ```; python3: /(...)/lcg/root/6.29.01-8b1fb99c2f98c5fc80c3d3abd70c9452/root-6.29.01/interpreter/llvm/src/tools/clang/lib/AST/DeclCXX.cpp:1499: clang::NamedDecl* getLambdaCallOperatorHelper(const clang::CXXRecordDecl&): Assertion `!Calls.empty() && ""Missing lambda call operator!""' failed.; *** Break *** abort; ```. We have previously tested ROOT commit 0bd51969ce, and did not get these errors. ### Expected behavior; No build errors. ### Setup; ROOT 6.29.01 / 6f02c75fea on AlmaLinux 8, built from source (gcc 11.2)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12240:1040,abort,abort,1040,https://root.cern,https://github.com/root-project/root/issues/12240,1,['abort'],['abort']
Safety,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->. Another incarnation of the ATLAS xAOD EDM overwhelming ROOT is at foot. :frowning: I was trying to understand the issue better before turning to you guys, but I feel that I would need to learn much more about LLVM/Cling to get further than what I'm willing to do... So... in a particular PyROOT test I encounter the following assertion in a debug build:. ```; (gdb) bt; #0 0x00007faf4a49d3d7 in raise () from /lib64/libc.so.6; #1 0x00007faf4a49eac8 in abort () from /lib64/libc.so.6; #2 0x00007faf4a4961a6 in __assert_fail_base () from /lib64/libc.so.6; #3 0x00007faf4a496252 in __assert_fail () from /lib64/libc.so.6; #4 0x00007faf409453d0 in clang::Sema::LookupQualifiedName (this=0x14ab0b0, R=..., LookupCtx=0x3035ca0, InUnqualifiedLookup=false); at /data/hdd-4tb/projects/ATLASG-1602/externals/build/AnalysisBaseExternals/src/ROOT/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2128; #5 0x00007faf40945d1b in clang::Sema::LookupQualifiedName (this=0x14ab0b0, R=..., LookupCtx=0x3035ca0, SS=...); at /data/hdd-4tb/projects/ATLASG-1602/externals/build/AnalysisBaseExternals/src/ROOT/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2364; #6 0x00007faf40b30acf in clang::Sema::CheckTypenameType (this=0x14ab0b0, Keyword=clang::ETK_Typename, KeywordLoc=..., QualifierLoc=..., II=..., IILoc=...); at /data/hdd-4tb/projects/ATLASG-1602/externals/build/AnalysisBaseExternals/src/ROOT/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplate.cpp:10051; #7 0x00007faf40c7d53d in clang::TreeTransform<(anonymous namespace)::TemplateI",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8578:910,abort,abort,910,https://root.cern,https://github.com/root-project/root/issues/8578,1,['abort'],['abort']
Safety,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; When plotting a RooFit function the `RooCurve` will try to use the `plotSamplingHint` method to get a list of optimal point locations. When using a `RooHistPdf` or `RooHistFunc` the list contains points a little (~1e-8*range) before and after each bin boundary. ; If the bins are aligned to the range (as they often are), one point per side falls outside the range.; However, there is no guarantee that the function is safe to execute there, so this may cause a NaN to be inserted in the plot.; Furthermore, when this happens the `RooCurve` seems to stop collecting points and just uses the current list, which in case of an histogram only contains the bin boundaries, meaning that the curve is not smooth between bins. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; The function is evaluated only in range, no NaN in frame, smooth function between bin boundaries. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; ```C++; void testRooHistPdfBinning() {; RooRealVar x(""x"", """", 0., 1);; ; RooGenericPdf sqrtPdf(""sqrtPdf"", ""sqrt(x)"", x);; ; TH1F h(""h"", """", 2, 0., 1);; h.Fill(0.2, 2);; h.Fill(0.8, 1);; RooDataHist dh(""dh"", """", x, RooFit::Import(h));; RooHistPdf hpdf(""hpdf"", """", x, dh);; ; RooRealVar frac(""frac"", """", 0.5, 0, 1);; RooAddPdf p(""p"", """", RooArgS",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11482:877,safe,safe,877,https://root.cern,https://github.com/root-project/root/issues/11482,1,['safe'],['safe']
Safety,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; I am trying to build Root (6.24.00_patches) against external XrootD that was built from a commit (`332967c` in my case).; However, ROOT complains that it can't find Xrootd:; ```; -- Looking for XROOTD; -- Found Xrootd version num: 20220304-332967c (setting -DROOTXRDVERS=20220304); -- Setting OLDPACK TRUE; CMake Error at cmake/modules/SearchInstalledSoftware.cmake:908 (message):; XROOTD not found. Set environment variable XRDSYS to point to your XROOTD; installation, or inlcude the installation of XROOTD in the; CMAKE_PREFIX_PATH. Alternatively, you can also enable the option; 'builtin_xrootd' to build XROOTD internally; Call Stack (most recent call first):; CMakeLists.txt:219 (include); ```. ### Expected behavior; XroodD should be detected. ### Additional context; In my case, the version of XrootD, as defined in `XrdVersion.hh` is `20220304-332967c` (date + commit ID, see [xrootd code](https://github.com/xrootd/xrootd/blob/master/genversion.sh#L193-L196)). Since it is not a dotted version, FindXROOTD [assumes](https://github.com/root-project/root/blob/master/cmake/modules/FindXROOTD.cmake#L47) that this is some old XrootD and uses the date part as a version. . One possible fix would be to look for `-` in version and use that as an indication of untagged version (same as if version is `unknown`, which is only used if XrootD couldn't use git to determine own version).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10604:1124,detect,detected,1124,https://root.cern,https://github.com/root-project/root/issues/10604,1,['detect'],['detected']
Safety,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; TKeys in a TFile with the same name as the requested RNTuple will be attempted to be parsed as an RNTuple, leading to internal parser errors later on. <!--; A clear and concise description of what the wrong behavior is.; -->. ### Expected behavior; The RNTupleReader should check the type of the TKey before parsing (and throw an exception if there's no RNTuple with the requested name).; <!--; A clear and concise description of what you expected to happen.; -->. ### To Reproduce; Create a TFile with a TKey with a certain name, then try to open that file as an RNTuple.; ```cpp; std::string filename = ""some_file.root"";; {; auto file = std::make_unique<TFile>(filename.c_str(), ""RECREATE"", """", 209);; auto tree = std::make_unique<TTree>(""Events"", """");; file->Write();; file->Close();; tree.release();; }. auto ntuple = RNTupleReader::Open(""Events"", filename);; ```; ```; Fatal: nread == nbytes violated at line 1011 of `~/root/tree/ntuple/v7/src/RMiniFile.cxx'; aborting; ```; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. ### Setup; Root master; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8284:1348,abort,aborting,1348,https://root.cern,https://github.com/root-project/root/issues/8284,1,['abort'],['aborting']
Safety,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; The build fails with gcc 9 and CMake 3.10, which I believe comes from the use of a CMake 3.11 feature.; The lines that fail are: https://github.com/root-project/root/blob/466fbd63a5d8486cd9f566bec8f70298161693c9/cmake/modules/SearchInstalledSoftware.cmake#L1780-L1783. Build log: ; ```; max@max-VirtualBox:~/projects/rootdev/root/new-build$ cmake .. -Dccache=ON -Dtesting=ON -Dxrootd=OFF -Droot7=ON -During=ON; -- Detected ROOT_VERSION 6.25.01; -- Looking for Python; -- Found GCC. Major version 9, minor version 3; -- ROOT Platform: linux; -- ROOT Compiler: GNU 9.3.0; -- ROOT Processor: x86_64; -- ROOT Architecture: linuxx8664gcc; -- Build Type: 'RelWithDebInfo' (flags = '-O3 -g'); -- Compiler Flags: -std=c++14 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -g; -- ROOT default compression algorithm: zlib; -- PyROOT will be built for version 2.7.17; -- Found ccache: /usr/bin/ccache; -- Looking for ZLib; -- Looking for Freetype; -- Building LZMA version 5.2.4 included in ROOT itself; -- Looking for X11; -- Could NOT find GIF (missing: GIF_LIBRARY GIF_INCLUDE_DIR) ; -- Could NOT find TIFF (missing: TIFF_LIBRARY TIFF_INCLUDE_DIR) ; -- Could NOT find JPEG (missing: JPEG_LIBRARY JPEG_INCLUDE_DIR) ; -- Building AfterImage library included in ROOT itself; -- Looking for liburing; -- Cannot select cudnn without selecting cuda or tmva-gpu. Option is ignored; CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1783 (target_compile_options):; Cannot specify compile options for imported target ""gtest"".; Call Stack (most recent call f",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7654:797,Detect,Detected,797,https://root.cern,https://github.com/root-project/root/issues/7654,1,['Detect'],['Detected']
Safety,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->; Yes. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; Root fails to build in Arch Linux.; `$ cmake -DCMAKE_INSTALL_PREFIX=../install ../gitclone`; <details>; <summary>output</summary>. ```; -- The C compiler identification is GNU 11.2.0; -- The CXX compiler identification is GNU 11.2.0; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: /usr/bin/cc - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/c++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Git: /usr/bin/git (found version ""2.36.0""); -- Detected ROOT_VERSION 6.27.01; -- Checking internet connectivity...; -- Yes; -- Looking for Python; -- Found Python3: /usr/bin/python3.10 (found version ""3.10.4"") found components: Interpreter Development NumPy Development.Module Development.Embed; -- Could NOT find Python2 (missing: Python2_NumPy_INCLUDE_DIRS NumPy) (found version ""2.7.18""); -- Found GCC. Major version 11, minor version 2; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success; -- Found Threads: TRUE; -- Performing Test GLIBCXX_USE_CXX11_ABI; -- Performing Test GLIBCXX_USE_CXX11_ABI - Success; -- ROOT Platform: linux; -- ROOT Compiler: GNU 11.2.0; -- ROOT Processor: x86_64; -- ROOT Architecture: linuxx8664gcc; -- Build Type: 'Release' (flags = '-O3 -",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10528:700,Detect,Detecting,700,https://root.cern,https://github.com/root-project/root/issues/10528,8,['Detect'],['Detecting']
Safety,"- [x] add ARCHITECTURE.md; - [x] use `fCapacity == -1` to indicate memory-adoption mode; - [x] switch `assert`s to `throw`s; - [x] expose the small buffer size as a template parameter (defaulted to `sizeof(T)*8 > 1024 ? 0 : 8` or similar, see also https://lists.llvm.org/pipermail/llvm-dev/2020-November/146613.html and the way they currently do it in LLVM: https://llvm.org/doxygen/SmallVector_8h_source.html#l01101); - [x] re-check before/after benchmark runtimes (first measurements at https://eguiraud.web.cern.ch/eguiraud/decks/20201112_rvec_redesign_ppp ); - [x] unit test for exceptions thrown during construction or resizing (and add note about lack of exception safety in docs); - [x] confirm that crediting of LLVM is ok (currently only in `math/vecops/ARCHITECTURE.md`)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502:671,safe,safety,671,https://root.cern,https://github.com/root-project/root/pull/7502,1,['safe'],['safety']
Safety,"- [yes] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; When I run the TMVARegression (root tutorial/tmva/TMVARegreession.C), I found the results by using FDA_GA and FDA_MT are different, but they use same function to do regression. The fit parameters from FDA_MT are always equal to zero. . ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; I have found the following ways to avoid this problem: ; In class TMVA::MinuitFitter, change the code at line 103 as shown bellow, and then reinstall root. Then the results from FDA_MT, FDA_SA and even FDA_GAMT are same.`. void TMVA::MinuitFitter::Init(); {; .......... ; //fMinWrap = new MinuitWrapper( fFitterTarget, 2*GetNpars() );; fMinWrap = new MinuitWrapper( fFitterTarget, GetNpars() );; ..........; }; `. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; root tutorial/tmva/TMVARegreession.C. In TMVARegression.C, I use the FDA method as bellow: ` . if (Use[""FDA_MC""]); factory->BookMethod( dataloader, TMVA::Types::kFDA, ""FDA_MC"",; ""!H:!V:Formula=(0)+(1)*x0+(2)*x1:ParRanges=(-100,100);(-100,100);(-100,100):FitMethod=MC:SampleSize=100000:Sigma=0.1"" );; ; if (Use[""FDA_GA""]) // can also use Simulated Annealing (SA) algorithm (see Cuts_SA options) .. the formula of this example is good for parabolas; factory->BookMethod( dataloader, TMVA::Types::kFDA, ""FDA_GA"",",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6773:830,avoid,avoid,830,https://root.cern,https://github.com/root-project/root/issues/6773,1,['avoid'],['avoid']
Safety,"- add check if rms is NaN; - output value of rms (zero, negative, or NaN); - set rms to zero if it is NaN (before only done for zero or negative values). → I suspect the training will have problems in that situation anyway but **I think** it makes the message easier to digest:. before:; ```; …; <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05; …; <HEADER> TFHandler_Factory : Variable Mean RMS [ Min Max ]; : ------------------------------------------------------------------------------------------------------------------; : LifeTime: 0.0011344 -nan [ 8.5046e-05 0.024133 ]. …; : Some more output; : -nan -nan -nan -nan -nan -nan; <FATAL> : <GetSeparation> signal and background histograms have different or invalid dimensions:; ***> abort program execution; terminate called after throwing an instance of 'std::runtime_error'; what(): FATAL error. ```; after; ```; …; <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05; …; <WARNING> <WARNING> : Variable ""LifeTime"" has zero, negative, or NaN RMS^2: -nan ==> set to zero. Please check the variable content. ```; I.e. the nan does not appear in the table anymore (where I didn't spot it first) but the abnormal value gets pulled out into a WARNING message. (Where it also comes with variable name, as opposed to the long list of correlation matrix warning, which makes it non-trivial to understand which variables are problematic, if many, and comes w/o human readable names). tbh: I have not yet understood why NaN arrives there (… well a few lines before the √ of a negative number is computed … but I don't yet know why that arrived there. Still investigating, will follow up once I know more).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1669:804,abort,abort,804,https://root.cern,https://github.com/root-project/root/pull/1669,1,['abort'],['abort']
Safety,- fix interaction of Vary and Range; - avoid useless clones of the nominal filters. @ikabadzhov will soon open a PR with a test for this as well as many other cases.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9914:39,avoid,avoid,39,https://root.cern,https://github.com/root-project/root/pull/9914,1,['avoid'],['avoid']
Safety,"- move important functions (constructors,destructors,accessors) to header; to avoid overhead in creating and accessing these small objects; - optimize access to TLorentzVector by avoiding a double switch statement; (switch on direction in TLorentzVector followed by same switch in TVector3)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/166:78,avoid,avoid,78,https://root.cern,https://github.com/root-project/root/pull/166,2,['avoid'],"['avoid', 'avoiding']"
Safety,"- move important functions (constructors,destructors,accessors) to header; to avoid overhead in creating and accessing these small objects; - optimize access to TLorentzVector by avoiding a double switch statement; (switch on direction in TLorentzVector followed by same switch in TVector3). This merge request is result of profiling work in the AliRoot framework where simple accesses to the mentioned objects are considerable (on the 2% level).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/165:78,avoid,avoid,78,https://root.cern,https://github.com/root-project/root/pull/165,2,['avoid'],"['avoid', 'avoiding']"
Safety,"- remove ClassDef for non-TObject files; - use `override` directive when virtual method is overriden; - use c++11 loops to iterate over containers; - avoid as much as possible usage of `iterator` class, remove them from LinkDef.h; - use `auto` as typename when iterator has to be used; - use `nullptr` instead of 0; - use more class members initializers, shrink default constructors; - more use of `std::string` instead `const char*`; - update copyright and authors blocks, adjust comments decoration",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3477:150,avoid,avoid,150,https://root.cern,https://github.com/root-project/root/pull/3477,1,['avoid'],['avoid']
Safety,- restructure the doc to avoid to much clicks; - fix many typos; - fix errors in the code examples; - delete useless files; - rename some .md files (index.md); - etc ...,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7118:25,avoid,avoid,25,https://root.cern,https://github.com/root-project/root/pull/7118,1,['avoid'],['avoid']
Safety,"- use ""\n"" instead of `std::endl` for all but last newline in PrintInfo; - avoid copying strings from getters when possible. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15890:75,avoid,avoid,75,https://root.cern,https://github.com/root-project/root/pull/15890,1,['avoid'],['avoid']
Safety,"-DINSTALL=1 | Enables an extra step to call make install; | -DCDASH=1 | Enables submission to CDash (needs CTestConfig.cmake). When enabling coverage, a report is generated by default in the `coverage/` directory inside the build directory. The results can be viewed by opening the file `html/coverage_details.html`. This step can be disabled by passing `-DGCOVR=0` to `ctest`. It is recommended to use a debug build to generate the coverage analysis. The configuration can be specified directly on the command line via the `-C` option. For example, to run a coverage build in debug mode, with less verbose output, and showing test output when a test failure happens, one can run:; ```sh; ctest -V --output-on-failure -C Debug -DCOVERAGE=1 -S test.cmake; ```; Some environment variables can also influence the behavior of the script, like `CC`, `CXX`, `CMAKE_GENERATOR`, `CTEST_CONFIGURATION_TYPE`, `CMAKE_BUILD_PARALLEL_LEVEL`, `CTEST_PARALLEL_LEVEL`, `CMAKE_ARGS`, `CDASH`, `DESTDIR`, `BASE_REF`, `HEAD_REF`, and GitHub Actions environment variables. These are mostly self-explanatory and can be used to override the provided defaults. For example, to build with the clang compiler and use Ninja as CMake generator, one can run:; ```sh; env CC=clang CXX=clang++ CMAKE_GENERATOR=Ninja ctest -V -S test.cmake; ```; Finally, the script tries to load configuration files from the `.ci/` subdirectory in the source directory. The default configuration is in `.ci/config.cmake`. It is used if no specific configuration is found for the detected OS. For example, on Ubuntu, a file named `ubuntu.cmake` will be used if present instead of `config.cmake`. The script also tries to detect a version, so, for example, on Alma, one could use `almalinux8.cmake` which would have higher precedence than `almalinux.cmake`. The default `config.cmake` tries to enable as many options as possible without failing if the dependencies are not installed. Sample `ubuntu.cmake` and `macos.cmake` are added in this commit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14999:2131,detect,detected,2131,https://root.cern,https://github.com/root-project/root/pull/14999,2,['detect'],"['detect', 'detected']"
Safety,". The failure is:; ```; 730/2406 Test #393: gtest-tree-dataframe-test-dataframe-vecops ........................................................***Failed 5.01 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; [==========] Running 4 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 4 tests from RDFAndVecOps; [ RUN ] RDFAndVecOps.ReadStdVectorAsRVec; [ OK ] RDFAndVecOps.ReadStdVectorAsRVec (4678 ms); [ RUN ] RDFAndVecOps.DefineRVec; [ OK ] RDFAndVecOps.DefineRVec (0 ms); [ RUN ] RDFAndVecOps.SnapshotRVec; [ OK ] RDFAndVecOps.SnapshotRVec (6 ms); [ RUN ] RDFAndVecOps.RVecBool; double free or corruption (out); CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ```. And gdb says:; ```; 0 0x00007f25d4eae834 in __pthread_kill_implementation () from /lib64/libc.so.6; 1 0x00007f25d4e5c8ee in raise () from /lib64/libc.so.6; 2 0x00007f25d4e448ff in abort () from /lib64/libc.so.6; 3 0x00007f25d4e457d0 in __libc_message.cold () from /lib64/libc.so.6; 4 0x00007f25d4eb87a5 in malloc_printerr () from /lib64/libc.so.6; 5 0x00007f25d4eba840 in _int_free_merge_chunk () from /lib64/libc.so.6; 6 0x00007f25d4ebd3de in free () from /lib64/libc.so.6; 7 0x00007f25d6c5efa8 in TList::Delete(char const*) () from /github/home/ROOT-CI/build/lib/libCore.so; 8 0x00007f25d6c56566 in THashList::Delete(char const*) () from /github/home/ROOT-CI/build/lib/libCore.so; 9 0x00007f25d67235b5 in TDirectoryFile::Close(char const*) () from /github/home/ROOT-CI/build/lib/libRIO.so; 10 0x00007f25d6741406 in TFile::Close(char const*) () from /github/home/ROOT-CI/build/lib/libRIO.so; 11 0x00000000004324e1 in MakeTreeWithBools(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (); 12 0x00000000004328da in RDFAndVecOps_RVecBool_Test::TestBody() ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14803:1269,abort,abort,1269,https://root.cern,https://github.com/root-project/root/pull/14803,1,['abort'],['abort']
Safety,"... and TCling__SplitAclicMode. The FileNotFound() method of TPPClingCallbacks is called via; Callbacks->FileNotFound(Filename, RecoveryPath) in; Preprocessor::HandleIncludeDirective(), allowing to compile code via; ACLiC when specifying #include ""myfile.C+"", and hence suppressing; preprocessor error message like:; input_line_23:1:10: fatal error: 'myfile.C+' file not found",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4:128,Recover,RecoveryPath,128,https://root.cern,https://github.com/root-project/root/pull/4,1,['Recover'],['RecoveryPath']
Safety,... to avoid an `unused-but-set-variable` warning on Linux.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13073:7,avoid,avoid,7,https://root.cern,https://github.com/root-project/root/pull/13073,1,['avoid'],['avoid']
Safety,...in an attempt to avoid bogus broken comparisons in the; RDFSnapshotArrays.SingleThread test case in dataframe_snapshot; on some platforms.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10723:20,avoid,avoid,20,https://root.cern,https://github.com/root-project/root/pull/10723,1,['avoid'],['avoid']
Safety,".28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:201; #6 0x00002b4bd1d276e5 in TUnixSystem::DispatchSignals (this=0x7472d0, sig=kSigAbort) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/unix/src/TUnixSystem.cxx:3610; #7 0x00002b4bd1d1f654 in SigHandler (sig=kSigAbort) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/unix/src/TUnixSystem.cxx:395; #8 0x00002b4bd1d2763b in sighandler (sig=6) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/unix/src/TUnixSystem.cxx:3586; #9 <signal handler called>; #10 0x00002b4bd102eaff in raise () from /lib64/libc.so.6; #11 0x00002b4bd1001ea5 in abort () from /lib64/libc.so.6; #12 0x00002b4bd1001d79 in __assert_fail_base.cold.0 () from /lib64/libc.so.6; #13 0x00002b4bd1027456 in __assert_fail () from /lib64/libc.so.6; #14 0x00002b4bd679065b in getLambdaCallOperatorHelper(clang::CXXRecordDecl const&) [clone .part.0] () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #15 0x00002b4bd67915cb in clang::CXXRecordDecl::getLambdaCallOperator() const () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #16 0x00002b4bd39f6a20 in clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseLambdaExpr(clang::LambdaExpr*, llvm::SmallVectorImpl<llvm::PointerIntPair<clang::Stmt*, 1u, bool, llvm::PointerLikeTypeTraits<clang::Stmt*>, llvm::PointerIntPairInfo<clang::Stmt*, 1u, llvm::PointerLikeTypeTraits<clang::Stmt*> > > >*) () from /poo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:3827,abort,abort,3827,https://root.cern,https://github.com/root-project/root/issues/12771,1,['abort'],['abort']
Safety,".Snapshot(""atree"", ""sig.root""); r.RDataFrame(1000).Define(""v"", ""gRandom->Gaus(1, 3)"").Define(""u"", ""gRandom->Gaus(1, 6)"").Define(""e"", ""rdfentry_"").Snapshot(""atree"", ""bkg.root""); r.RDataFrame(1000).Define(""v"", ""gRandom->Gaus(-5, 10)"").Define(""u"", ""gRandom->Gaus(-5, 20)"").Define(""e"", ""rdfentry_"").Snapshot(""atree"", ""oth.root""); fsig = r.TFile.Open(""sig.root""); tsig = fsig.atree; fbkg = r.TFile.Open(""bkg.root""); tbkg = fbkg.atree; foth = r.TFile.Open(""oth.root""); toth = foth.atree; fout = r.TFile.Open(""out.root"", ""recreate""). dl = r.TMVA.DataLoader(""dataset""); dl.AddVariable(""v"", ""v"", """", ""F""); dl.AddVariable(""u"", ""u"", """", ""F""); dl.AddSpectator(""e"", ""entry number"", """"); dl.AddTree(tsig, ""sig""); dl.AddTree(tbkg, ""bkg""); dl.AddTree(toth, ""oth""). dl.PrepareTrainingAndTestTree("""", r""nTest_sig=0:nTest_bkg=0:nTest_oth=0:NormMode=NumEvents:!V:SplitSeed=100:SplitMode=Random""); fact = r.TMVA.Factory(""TMVAClassification"", fout, r""!V:!Silent:AnalysisType=Multiclass""); fact.BookMethod(; dl,; r.TMVA.Types.kBDT,; ""BDT"",; r""!H:!V:nTrees=500:BoostType=Grad""; r"":UseBaggedGrad""; ); fact.TrainAllMethods(); fact.TestAllMethods(); fact.EvaluateAllMethods(). fout.Close(); model = r.TMVA.Experimental.RReader(""dataset/weights/TMVAClassification_BDT.weights.xml""); ```; Ends with error:; ```; <FATAL> : Dataset[Default] : You declared 0 spectators in the Reader while there are 1 spectators declared in the file; ***> abort program execution; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-1-cf70daeeb34f> in <module>; 34 ; 35 fout.Close(); ---> 36 model = r.TMVA.Experimental.RReader(""dataset/weights/TMVAClassification_BDT.weights.xml""). TypeError: none of the 2 overloaded methods succeeded. Full details:; RReader::RReader(TMVA::Experimental::RReader&&) =>; TypeError: could not convert argument 1; RReader::RReader(const string& path) =>; runtime_error: FATAL error; ```. ### Setup; ROOT 6.22/06; macOS; conda-forge",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7900:1896,abort,abort,1896,https://root.cern,https://github.com/root-project/root/issues/7900,1,['abort'],['abort']
Safety,".cxx#L1043, there is a timer being created, with a timeout of 20 ms, https://github.com/root-project/root/blob/a89eb12f83228833842813c4b690a2033778316b/core/thread/inc/TThread.h#L208. If I remove the `+ 10` ms and recompile ROOT, I get better results, (except for the first iteration):; ```; Chunk: 0 Time/ms: 0; Chunk: 1 Time/ms: 111; Chunk: 2 Time/ms: 161; Chunk: 3 Time/ms: 211; Chunk: 4 Time/ms: 262; Chunk: 5 Time/ms: 312; Chunk: 6 Time/ms: 362; Chunk: 7 Time/ms: 415; Chunk: 8 Time/ms: 469; Chunk: 9 Time/ms: 521; ```. ### Optional: share how it could be improved; It would be nice if there was a static method to tune the resolution of the `TThreadTimer` as well as the `TSystem::kITimerResolution` for applications requiring high performance, so that there is no 10ms (or 100ms at the beginning) delay due to a `Printf()` (or an` Emit()` for the signal-slot mechanism to communicate between threads). Right now, `ESysConstants::kItimerResolution` is not assignable at runtime, and `TThreadTimer` timeout is not configurable by the user, thus the only solution is a fork and recompile. ### To Reproduce. 1. cd /opt/ && git clone https://github.com/CLIUtils/CLI11; 2. Download [zdt2.zip](https://github.com/root-project/root/files/6744587/zdt2.zip) and unzip it, cd into it; 3. mkdir build && cd build; 4. cmake -DROOT_DIR=/build-debug-mode-ROOT -DCMAKE_BUILD_TYPE=Debug ../; 5. make; 6. gui/runGUI --prbs 26 -q. ### Setup; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.25/01 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jun 28 2021, 13:40:49 |; | From heads/th1_long@v6-25-01-1451-gaed0c8868c |; | With c++ (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0 |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```. ### Additional context; If you run the full example, you might find a deadlock at the e",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8582:3432,timeout,timeout,3432,https://root.cern,https://github.com/root-project/root/issues/8582,1,['timeout'],['timeout']
Safety,"// cling problem with lambda functions inside of template functions; //; // A code fragment illustrating the problem is given below. ; // Starting ROOT and running the macro once works, running it ; // a second time produces a crash. Commenting the (not-even used); // lambda function avoid the crash. The macro can be run as often as; // one likes.; //; // ROOT 6.20/02 on MacOSX 10.15.06; // root [1] .x crash.cc -> works; // root [2] .x crash.cc -> crash. template<class T> T square(T x) {; auto crash = [](double x) {return x;}; // comment this line to avoid the crash; return x*x;; }. void crash(); {; printf(""%d\n"",square(2));; }",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9850:285,avoid,avoid,285,https://root.cern,https://github.com/root-project/root/issues/9850,2,['avoid'],['avoid']
Safety,"/O annotation can be moved from the comments to using `C++ attributes` (in particular because support for the comment is implemented internally through the same mechanics). To quote the referred pull request:. The way dictionary information are propagated from the `C++` code or `XML` dictionaries to reflex and cling is rather roundabout:. - a; - `<field name=""data_"" comment=""!""/>` tags `XML` dictionaries are parsed by `genreflex` and injected into the `LLVM AST` of the corresponding `C++` code as comments `//!`;; - `C++` comments like `//!` or `//[size_]` are converted by `genreflex/rootcling` into `LLVM AST` annotations; cling parses the `LLVM` annotations and uses them to generate the desired behavior in the dictionaries. This approach does not work well with macro-generated data members:. - macros cannot generate comments, so `//!` or `//[size_]` cannot be used directly;; - macros cannot easily be used to generate the `class_def.xml` file, requiring manual intervention for their implementation and maintenance. However, it turns out that dictionaries can bypass the comments and use LLVM annotations directly within the C++ code. So; ```; private:; int size_;; float* data_; //[size_]; float* transient_; //!; ```; can be also expressed as; ```; private:; int size_;; float* data_ [[clang::annotate(""[size_]"")]];; float* transient_ [[clang::annotate(""!"")]];; ```; and annotations can be generated by macros. In order to avoid spurious warnings when compiling the header, we should offer a (set of) macro(s), eg:. - `ROOT_IO_TRANSIENT` can be used to annotate transient data members, like `//!; - `ROO_IO_SIZE(SIZE)` can be used to annotate dynamic arrays, like `//[SIZE]`; or. - `ROOT_IO_ANNOTATE` that can be used with `ROOT_IO_ANNOATE(""!"")` and `ROOT_IO_ANNOTATE(""[size]"")`. The advantage of the earlier case would be to (possibly) allow simplification of the internal parsing, by using:; ```; float* data_ [[rootio::size(""size_"")]];; float* transient_ [[rootio::transient]];; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12012:1499,avoid,avoid,1499,https://root.cern,https://github.com/root-project/root/issues/12012,1,['avoid'],['avoid']
Safety,"/TGeoXtru.cxx:558:13: warning: Value stored to 'dist' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'dist' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoXtru.cxx:558; /opt/root_src/geom/geom/src/TGeoXtru.cxx:878:11: warning: Although the value stored to 'indx2' is used in the enclosing expression, the value is never actually read from 'indx2' [clang-analyzer-deadcode.DeadStores]; 1: Although the value stored to 'indx2' is used in the enclosing expression, the value is never actually read from 'indx2' in /opt/root_src/geom/geom/src/TGeoXtru.cxx:878; /opt/root_src/geom/geom/src/TGeoXtru.cxx:939:13: warning: Value stored to 'safz' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safz' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoXtru.cxx:939; /opt/root_src/geom/geom/src/TGeoXtru.cxx:943:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoXtru.cxx:943; /opt/root_src/geom/geombuilder/src/TGeoSphereEditor.cxx:351:22: warning: Value stored to 'rmin' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'rmin' is never read in /opt/root_src/geom/geombuilder/src/TGeoSphereEditor.cxx:351; /opt/root_src/geom/geombuilder/src/TGeoVolumeEditor.cxx:239:17: warning: Although the value stored to 'label' is used in the enclosing expression, the value is never actually read from 'label' [clang-analyzer-deadcode.DeadStores]; 1: Although the value stored to 'label' is used in the enclosing expression, the value is never actually read from 'label' in /opt/root_src/geom/geombuilder/src/TGeoVolumeEditor.cxx:239; /opt/root_src/geom/geombuilder/src/TGeoVolumeEditor.cxx:317:17: warning: Although the value stored to 'label' is used in the enclosing expression, t",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:80301,safe,safe,80301,https://root.cern,https://github.com/root-project/root/issues/7428,1,['safe'],['safe']
Safety,/proof/proof/src/TDataSetManager.cxx:1267; 30: '?' condition is false in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1267; 31: Value assigned to 'newStagedFiles' in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1267; 32: Assuming 'newStagedFiles' is equal to 'flist' in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1268; 33: Taking false branch in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1268; 34: Assuming 'mss' is null in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1270; 35: Left side of '&&' is false in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1270; 36: 'stager' is null in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1271; 37: '?' condition is false in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1271; 38: Loop condition is false. Execution continues on line 1304 in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1280; 39: 'stager' is null in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1304; 40: expanded from macro 'SafeDelete' in /opt/root_src/core/foundation/inc/ROOT/RConfig.hxx:522; 41: Taking false branch in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1304; 42: expanded from macro 'SafeDelete' in /opt/root_src/core/foundation/inc/ROOT/RConfig.hxx:522; 43: 'getlistonly' is true in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1307; 44: Taking true branch in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1307; 45: Assuming 'dbg' is true in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1308; 46: Left side of '&&' is true in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1308; 47: Called C++ object pointer is null in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1308; /opt/root_src/proof/proof/src/TDataSetManager.cxx:1774:4: warning: Value stored to 'rc' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'rc' is never read in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1774; /opt/root_src/proof/proof/src/TDataSetManagerFile.cxx:1553:12: warning: Although the val,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7534:8283,Safe,SafeDelete,8283,https://root.cern,https://github.com/root-project/root/issues/7534,1,['Safe'],['SafeDelete']
Safety,"0 indirect) bytes in 19,999 blocks are definitely lost in loss record 3,515 of 3,515; ==12320== at 0x4C2BE7F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so); ==12320== by 0xAD090F2: gsl_rng_alloc (in /usr/lib/libgsl.so.23.0.0); ==12320== by 0x8223765: Allocate (GSLRngWrapper.h:99); ==12320== by 0x8223765: ROOT::Math::GSLMCIntegrator::GSLMCIntegrator(char const*, double, double, unsigned int) (GSLMCIntegrator.cxx:117); ==12320== by 0x108BF5: main (mcintegrator.cpp:8); ==12320==; ==12320== LEAK SUMMARY:; ==12320== definitely lost: 319,984 bytes in 19,999 blocks; ==12320== indirectly lost: 98,770,000 bytes in 19,754 blocks; ==12320== possibly lost: 1,225,000 bytes in 245 blocks; ==12320== still reachable: 340,874 bytes in 4,262 blocks; ==12320== suppressed: 0 bytes in 0 blocks; ==12320== Reachable blocks (those to which a pointer was found) are not shown.; ==12320== To see them, rerun with: --leak-check=full --show-leak-kinds=all; ==12320==; ==12320== For counts of detected and suppressed errors, rerun with: -v; ==12320== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0); ```. After fix:; ```; valgrind --tool=memcheck --leak-check=full --show-leak-kinds=definite \; --undef-value-errors=no ./mcintegrator. ==14294== Memcheck, a memory error detector; ==14294== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==14294== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info; ==14294== Command: ./mcintegrator; ==14294==; ==14294==; ==14294== HEAP SUMMARY:; ==14294== in use at exit: 335,858 bytes in 4,260 blocks; ==14294== total heap usage: 67,782 allocs, 63,522 frees, 101,539,078 bytes allocated; ==14294==; ==14294== LEAK SUMMARY:; ==14294== definitely lost: 0 bytes in 0 blocks; ==14294== indirectly lost: 0 bytes in 0 blocks; ==14294== possibly lost: 0 bytes in 0 blocks; ==14294== still reachable: 335,858 bytes in 4,260 blocks; ==14294== suppressed: 0 bytes in 0 blocks; ==14294== Reachable blocks (those to which a poi",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/928:2726,detect,detected,2726,https://root.cern,https://github.com/root-project/root/pull/928,1,['detect'],['detected']
Safety,"000	n: 3; TestVar1.GetSize(): 1000	n: 0; TestVar1.GetSize(): 1000	n: 1; TestVar1.GetSize(): 1000	n: 7; TestVar1.GetSize(): 1000	n: 5; TestVar1.GetSize(): 1000	n: 0; TestVar1.GetSize(): 1000	n: 2; Closing the output file; Snapshotting df3 {TestVar3} as tree3 into the output file; TestVar1.GetSize(): 1000	n: 5; TestVar1.GetSize(): 1000	n: 5; TestVar1.GetSize(): 1000	n: 5; TestVar1.GetSize(): 1000	n: 3; TestVar1.GetSize(): 1000	n: 0; TestVar1.GetSize(): 1000	n: 1; TestVar1.GetSize(): 1000	n: 7; TestVar1.GetSize(): 1000	n: 5; TestVar1.GetSize(): 1000	n: 0; TestVar1.GetSize(): 1000	n: 2; Snapshotting df3 {TestVar2} as tree2 into the output file; TestVar1.GetSize(): 1000	n: 5; Error in <TTree::Branch>: The class requested (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) for the branch ""TestVar2"" is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (ROOT::VecOps::RVec<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> > >) to avoid to write corrupted data.; RDataFrame::Run: event loop was interrupted; terminate called after throwing an instance of 'std::logic_error'; what(): Trying to insert a null branch address. ```. ### Setup; 1. ROOT version: 6.25/01, built against commit 24ea49d4702ba0aa9b1ea5521950520154ee151c on the master branch.; ```; ROOT Version: 6.25/01; Built for linuxx8664gcc on Jan 01 1980, 00:00:00; From @; ```; 2. Operating system: NixOS; ```console; $ nix-info -m; - system: `""x86_64-linux""`; - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`; - multi-user?: `yes`; - sandbox: `yes`; - version: `nix-env (Nix) 2.4pre20211006_53e4794`; - nixpkgs: `/nix/var/nix/profiles/per-user/root/channels/nixos`; ```; 3. How you obtained ROOT:; Custom build with Nix package manager against the Nixpkgs revision [60e709069fa2fbcfca943d8f6df8dc6d33c67025](https://github.com/ShamrockLee/nixpkgs/tree/60e709069fa2fbcfca943d8f6df8dc6d33c67025), a",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9240:9986,avoid,avoid,9986,https://root.cern,https://github.com/root-project/root/issues/9240,1,['avoid'],['avoid']
Safety,"000) (noaccess); IncrementalExecutor::executeFunction: symbol '_ZNK5cling5Value5getAsIP4TH1FEET_v' unresolved while linking function '_GLOBAL__sub_I_cling_module_25'!; You are probably missing the definition of TH1F* cling::Value::getAs<TH1F*>() const; Maybe you need to load the corresponding shared library?; ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (defined); ==22765== Warning: set address range perms: large range [0x1f838000, 0x33aaa000) (noaccess); ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (defined); ==22765== Warning: set address range perms: large range [0x1f838000, 0x2fae5000) (noaccess); terminate called after throwing an instance of 'cling::InvalidDerefException'; what(): Trying to dereference null pointer or trying to call routine taking non-null arguments; ==22765== ; ==22765== Process terminating with default action of signal 6 (SIGABRT); ==22765== at 0x546E18B: raise (raise.c:51); ==22765== by 0x544D92D: abort (abort.c:100); ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29); ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29); ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29); ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29); ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so); ==22765== by 0x4DFF3CC: ???; ==22765== by 0x1FFEFFBB3F: ???; ==22765== by 0xB60A6A5548AF56FF: ???; ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so); ==22765== by 0x4DEB03F: ???; ==22765== ; ==22765== HEAP SUMMARY:; ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks; ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated; ==22765== ; ==22765== LEAK SUMMARY:; ==22765== definitely lost: 0 bytes in 0 blocks; ==22765==",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11385:7069,abort,abort,7069,https://root.cern,https://github.com/root-project/root/issues/11385,2,['abort'],['abort']
Safety,1) Do not put the non-copiable ds in a header. It's very cumbersome; at runtime to expose it to the interpreter. The code is now in a string. 2) Make the test a death test. The static assert causes a non-recoverable; failure which should be handled by this kind of test and not with a try/catch; block.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1134:204,recover,recoverable,204,https://root.cern,https://github.com/root-project/root/pull/1134,1,['recover'],['recoverable']
Safety,1. Adjust several tutorials from `graphics` folder to work with TWebCanvas; 2. Optimize openui5-based code - avoid direct import of JSROOT modules; 3. Fix zooming update problem on lego plots; 4. Fix GED visibility update problem,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11737:109,avoid,avoid,109,https://root.cern,https://github.com/root-project/root/pull/11737,1,['avoid'],['avoid']
Safety,"1. Always register custom ""rootcheme"" to the Qt WebEngine libs before starting any widget. Was missing when QApplication was created by user; 2. Correctly cleanup QApplication in qt5 - only when ROOT shutdown procedure started, it should be deleted. Requires special workaround to detect shutdown; 3. Fix c++20 compiler warnings in qtweb tutorial; 4. Show full qt version in error printouts",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13465:281,detect,detect,281,https://root.cern,https://github.com/root-project/root/pull/13465,1,['detect'],['detect']
Safety,"1. Avoid referencing RooFuncWrapper inside code generation context; 2. Take out RooFit code generation context outside of Detail namespace; 3. Get rid of the `Experimental::RooFuncWrapper` class and make the code generation and AD with Clad accessible with the `RooFit::Evaluator`. The goal is to have one entry point for the user to do any kind of evaluation of RooFit computation graphs. Point number 3 still has to be done, which is why this is a draft PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16772:3,Avoid,Avoid,3,https://root.cern,https://github.com/root-project/root/pull/16772,1,['Avoid'],['Avoid']
Safety,"1. Avoid usage of `static constexpr` in header files. MSVC compiler is not happy about such construct; 2. Add R__LOAD_LIBRARY to test macros (like brower.cxx) to let it run in Windows; 3. Add handling of "".lnk"" files in RBrowser",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4791:3,Avoid,Avoid,3,https://root.cern,https://github.com/root-project/root/pull/4791,1,['Avoid'],['Avoid']
Safety,"1. Call TF1::Save with non-zero arguments, avoiding #13927 ; 2. Supports histogram creation for `TGraph2D`; 3. Update JSROOT with correspondent changes; 4. Adjust some tutorials where TF1/TF2 drawing is used",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13937:43,avoid,avoiding,43,https://root.cern,https://github.com/root-project/root/pull/13937,1,['avoid'],['avoiding']
Safety,"1. Correctly detect and use saved buffer in `TF1`. In some circumstances valid buffer was overwritten by 0 - and making webcanvas not displaying `TF1`. 2. Do not support `TPad::WaitPrimitive()` with web canvas. Creation of primitives not yet implemented, but original method requires `gROOT->SetSelectedPad()` and this screw-up `obj->DrawClone()`. Therefore do not set selected pad for web canvas. 3. Update JSROOT with several fixes - including #15791",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15826:13,detect,detect,13,https://root.cern,https://github.com/root-project/root/pull/15826,1,['detect'],['detect']
Safety,1. Detect OpenSSL version and activate v1.1 API when required; 2. Do not let load ssl libraries by civetweb - they already linked to libRHTTP.so; 3. Suppress compiler warnings in civetweb.c; 4. Use upper case for OPENSSL_VERSION variable - same as in standard FindOpenSSL.cmake script,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1836:3,Detect,Detect,3,https://root.cern,https://github.com/root-project/root/pull/1836,1,['Detect'],['Detect']
Safety,"1. Detect and support Edge as recognized browser `--web=edge`; 2. Newer versions of Edge browser requires registry change to work in headless mode. See https://learn.microsoft.com/en-us/deployedge/microsoft-edge-policies#headlessmodeenabled; 3. One have to use `--headless=old` for Edge browser, otherwise `--domp-dom` does not work; 4. Firefox on Windows on VirtualBox on OpenSUSE does not correctly support WebGL emulation, therefore disable `--web=firefox` stressGraphics test on Windows; 5. Optionally one can run `stressGraphics` without 3d tests to verify all other tests on Windows/Firefox; 6. Adjust reference file to let correctly run web stressGraphics on Windows on all three browsers - Chrome, Edge and Firefox",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16663:3,Detect,Detect,3,https://root.cern,https://github.com/root-project/root/pull/16663,1,['Detect'],['Detect']
Safety,"1. Fix leak with using TGraph2DPainter; 2. Fix leak with ""cont list"" draw option; 3. Use `std::unique_ptr` for all objects created and managed by hist painter, ensure proper deletion; 4. Use `std::vector` instead of plain C arrays, avoid any potential memory leak; 5. Replace plain `Form()` by `TString::Format()`; 6. Simplify some `TIter` loops; 7. Use more `nullptr`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10823:232,avoid,avoid,232,https://root.cern,https://github.com/root-project/root/pull/10823,1,['avoid'],['avoid']
Safety,"1. Fix problem with fragmented websocket messages - some browsers can split messages on 120KB chunks. Now message merged together before delivered to the user.; 2. Solve problem with Google Chrome run in headless mode. ; Now chrome browser can run in headless mode without any special debugging flags, which opens some http ports. Now THttpServer provides special ""dummy"" script, which timedout until batch job is not finished.; 3. Try to correctly handle situation when browser hangs and does not reply for a long time. After pre-configured timeout (default 50 sec) such browser application will be closed.; 4. Let identify connecting websocket at the very beginning - with the first connect request. Allows to reject not allowed connection. Also for the future simplifies re-connection.; 5. In TWebWindow clearly identify batch job connection, let reuse if for consequent jobs, close it after 20 sec of idle time; 6. Use std::recursive_mutex in WebWindowsManager to protect methods which creates THttpServer / creates new window / starts new web browser. Comment out special manager guard - useless without special threading functionality; 7. Correspondent changes in JSROOT. ; 8. Special handling of 2d/3d canvas when producing PNG images - now is more consistent, no need to use THREE.SVGRenderer for that; 9. Add canvas size to the RPadDisplayItem class, used only in batch mode to configure image size; 10. Use workaround with static mutex to protect I/O in canvas painter in multi-threaded environment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2603:542,timeout,timeout,542,https://root.cern,https://github.com/root-project/root/pull/2603,1,['timeout'],['timeout']
Safety,"1. Improve/fix problems with TKey/TDirectory handling.; In some cases objects were deleted, but still used in RBrowsable classes; 2. Fix bug with RBrowsable cache usage. ; Logic was not working when more than 1 levels of sub-directories in the TFile was there; 3. Empty RBrowser cache when top-level path is reloaded. Avoids holding of too many objects which are no longer used",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8101:318,Avoid,Avoids,318,https://root.cern,https://github.com/root-project/root/pull/8101,1,['Avoid'],['Avoids']
Safety,"1. Introduce central class registry in `RBrowsable` classes. It is the place which describes how class can be handled. Let avoid hardcoded class names in many other places of RBrowser. Registry also includes icons.; 2. Introduce internal `RBrowsable` objects cache. When any object read from the file, it preserved in the cache and provided again if same path is requested from browser. ; 3. Define/handle `actions` for `Browsable::RElement` class. Actions are: draw, browse, edit, image, .... Action are handled with double click on the browser item. Now when image is clicked, it automatically displayed in the image viewer.; 4. When object clicked with CodeEditor active - JSON will be shown for the object.; 5. Handle `CodeEditor` and `ImageViewer` content on server side. When web browser is reloaded, all correspondent tabs are recreated properly; 6. Update openui5 tarball - include missing CodeEditor snippets; 7. Lots of layout and code improvements in the RBrowser client-side.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7074:123,avoid,avoid,123,https://root.cern,https://github.com/root-project/root/pull/7074,1,['avoid'],['avoid']
Safety,"1. Introduce special timer to send data to clients. If not everything can be send at once, after short timeout will be tried again; 2. Extend functionality of control message, manage it per connection. All special messages like enabling editor, moving web browser, enable/disable tooltip - all belong now to control message; 3. Change message priority, try to send as much as possible. First one sends control message, then specially requests for menu or projection and finally update for canvas drawing.; 4. Implement `Raise() / Iconify()` methods, they fully depend on the web browser",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13285:103,timeout,timeout,103,https://root.cern,https://github.com/root-project/root/pull/13285,1,['timeout'],['timeout']
Safety,1. Remove no-longer existing warnings codes; 2. Copy sehmap.h used in dictionary generation; 3. Avoid warnings in `TQObject.h`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9669:96,Avoid,Avoid,96,https://root.cern,https://github.com/root-project/root/pull/9669,1,['Avoid'],['Avoid']
Safety,"1. Resolve complex issue when browser is resized. At the beginning canvas requires exact pixel size of drawing area and triggers web-browser resize. But at the same time user can start resize browser himself. Trying to avoid conflicts here. 2. Correctly resize browser when show/hide menu or status bar. Workaround bug in openui5 which does not correctly resize all elements after hiding menu. 3. Implement resize of qt5/qt6/cef window via server. Contrary to the normal browser, one have to use server side which control local window. 4. Support Qt6 in `tutorials/webgui/qtweb` example. Also add example how standalone canvas widget can be started. Resolve issue with openui5 widget embed into the qt6 `QWebEngineView`. 5. Update JSROOT with several fixes and improvments",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12931:219,avoid,avoid,219,https://root.cern,https://github.com/root-project/root/pull/12931,1,['avoid'],['avoid']
Safety,"1. Specify several JSROOT locations when using with `require.js`; 2. Use fully qualified functions names to avoid conflicts; 3. Increase JSON compression, reduces json files",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8528:108,avoid,avoid,108,https://root.cern,https://github.com/root-project/root/pull/8528,1,['avoid'],['avoid']
Safety,"1. Use hash value to detect any change in list of colors or with gStyle. If detected, modified version send to client.; 2. Interactive changes of draw options or histogram status bits send directly to server; 3. Small adjust of CEF build, tested with latest code; 4. Syntax adjusting of hist tutorials; 5. JSROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11775:21,detect,detect,21,https://root.cern,https://github.com/root-project/root/pull/11775,2,['detect'],"['detect', 'detected']"
Safety,1. Use std::vector instead of plain arrays; 2. More use of `nullptr`; 3. Avoid usage of global variables for local data in `TGraphPainter` class; 4. Test gPad before call gPad->GetView(),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10831:73,Avoid,Avoid,73,https://root.cern,https://github.com/root-project/root/pull/10831,1,['Avoid'],['Avoid']
Safety,"1. When doing interactive zooming, do not reset zoom range from TCanvas range; 2. When apply changes from client, avoid `TPad::Modified()` if nothing is changed; 3. Update JSROOT with code of 6.2.0 release",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8659:114,avoid,avoid,114,https://root.cern,https://github.com/root-project/root/pull/8659,1,['avoid'],['avoid']
Safety,"1.Split aggregation functionality into `RAttrAggregation` class.; It is base class for all kinds of `RAttrLine`, `RAttrFill`, ...; 2. Use `union` to reduce memory consumption in RAttrBase. ; Probably, one could use `variant` instead, but this requires c++17 and can be avoided.; 3. Use `const char *` for name storage in `RAttrBase`- it never changed.; If really necessary, one could create deep copy, but just by usage pattern it is not required at all.; 4. Use normal data type to keep default value for `RAttrValue`; 5. Let use value classes as `RAttrValue<int>` standalone. Finally reduce `sizeof(RAttrValue<int>)` from 120 to 40 bytes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8483:269,avoid,avoided,269,https://root.cern,https://github.com/root-project/root/pull/8483,1,['avoid'],['avoided']
Safety,"123 = t_1;; int j123 = t_2;; }; ```; works fine. Note that issuing on the prompt right after the `.x trun.C` the command `gROOT->SetDirLevel(t_1);` or `i123 = t_2;` works as well. But this version:; ```; {; gROOT->ProcessLine("".L t1.C"");; gROOT->ProcessLine("".L t2.C"");; int i123 = t_1;; int j123 = t_2;; gROOT->SetDirLevel(t_1);; }; ```; mysteriously fails with:; ```; Processing trun.C...; /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: error: cannot initialize an array element of type 'void *' with an rvalue of type 'TROOT *(*)()'; gROOT->SetDirLevel(t_1);; ^~~~~; /Users/pcanal/root_working/builds/master-pr/include/TROOT.h:407:16: note: expanded from macro 'gROOT'; #define gROOT (ROOT::GetROOT()); ^~~~~~~~~~~~~; ```; The error seems to indicate that the parser is 'prefixing' to `gROOT` something related to `array of void*` and initialization. Similarly; ```; {; gROOT->ProcessLine("".L t1.C"");; gROOT->ProcessLine("".L t2.C"");; int i123 = t_1;; int j123 = t_2;; i123 = t_2;; }; ```; fails with:; ```; Processing trun.C...; Assertion failed: (Node->getDependence() == ExprDependence::None), function VisitBinaryOperator, file DynamicLookup.cpp, line 628.; Abort trap: 6; ```. And weirdly:; ```; {; gROOT->ProcessLine("".L t1.C"");; gROOT->ProcessLine("".L t2.C"");; int i123 = t_1;; int j123 = t_2;; t_1 = 3;; }; ```; fails with:; ```; /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: warning: declaration without the 'auto' keyword is deprecated: function '__cling_Un1Qu30' [-Wdeprecated-declarations]; t_1 = 3;; ^~~; auto ; input_line_11:2:3: error: reference to 't_1' is ambiguous; (t_1); ^; /Users/pcanal/root_working/code/master/roottest/cling/return/t1.C:1:5: note: candidate found by name lookup is 't_1'; int t_1 = 3;; ^; /Users/pcanal/root_working/code/master/roottest/cling/return/./trun.C:7:1: note: candidate found by name lookup is '__cling_N50::t_1'; t_1 = 3;; ^; input_line_11:2:3: error: unknown type name 't_1'; (t_1); ^; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15481:2142,Abort,Abort,2142,https://root.cern,https://github.com/root-project/root/issues/15481,1,['Abort'],['Abort']
Safety,"1696) 'autoParseRaii' (line 2588); HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork; (longjmp and C++ exceptions *are* supported); SUMMARY: AddressSanitizer: stack-use-after-return src/interpreter/cling/lib/MetaProcessor/MetaLexer.cpp:58:11 in cling::MetaLexer::Lex(cling::Token&); Shadow bytes around the buggy address:; 0x10007e757ab0: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5; 0x10007e757ac0: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5; 0x10007e757ad0: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5; 0x10007e757ae0: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5; 0x10007e757af0: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5; =>0x10007e757b00: f5 f5 f5 f5 f5[f5]f5 f5 f5 f5 f5 f5 f5 f5 f5 f5; 0x10007e757b10: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5; 0x10007e757b20: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5; 0x10007e757b30: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5; 0x10007e757b40: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5; 0x10007e757b50: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5; Shadow byte legend (one shadow byte represents 8 application bytes):; Addressable: 00; Partially addressable: 01 02 03 04 05 06 07; Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; Shadow gap: cc; ==529104==ABORTING; ```; ```; at src/interpreter/cling/lib/MetaProcessor/MetaLexer.cpp:49; at src/interpreter/cling/lib/MetaProcessor/MetaParser.cpp:41; compRes=@0x7ffff3afd910: cling::Interpreter::kSuccess, result=0x7ffff3afd8c0, disableValuePrinting=false); at src/interpreter/cling/lib/MetaProcessor/MetaProcessor.cpp:314; input_line=0x7ffff3afd829 ""#define XYZ 21"", compRes=",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8041:7010,ABORT,ABORTING,7010,https://root.cern,https://github.com/root-project/root/pull/8041,1,['ABORT'],['ABORTING']
Safety,"18; ```. ```; (master)> python3 --version; Python 3.8.9; ```. ```; (master)> whereis python; python: /usr/bin/python3.8 /usr/bin/python /usr/bin/python2.7 /usr/bin/python2.7-config /usr/lib/python3.8 /usr/lib/python2.7 /usr/lib64/python3.8 /usr/lib64/python /usr/lib64/python2.7 /usr/local/lib/python3.8 /usr/include/python2.7 /usr/include/python /usr/share/man/man1/python.1.gz; ```. ```; (master)> sudo zypper se -i python | grep -e ""Interpreter"" -e ""dev""; i | libpython2_7-1_0 | Python Interpreter shared library | package; i | libpython3_8-1_0 | Python Interpreter shared library | package; i+ | python | Python Interpreter | package; i | python-base | Python Interpreter base package | package; i+ | python-devel | Include Files and Libraries Mandatory for Building Python Modules | package; i | python38 | Python 3 Interpreter | package; i | python38-base | Python 3 Interpreter and Stdlib Core | package; i | python38-pyudev | Udev bindings for Python | package; ```. # output. ```; -- Detected ROOT_VERSION 6.25.01; -- Looking for Python; -- Could NOT find Python3 (missing: Python3_INCLUDE_DIRS Python3_LIBRARIES Python3_NumPy_INCLUDE_DIRS Development NumPy Development.Module Development.Embed) (found version ""3.8.9""); -- Could NOT find Python2 (missing: Python2_NumPy_INCLUDE_DIRS NumPy) (found version ""2.7.18""); -- ROOT Platform: linux; -- ROOT Compiler: Clang 12.0.0; -- ROOT Processor: x86_64; -- ROOT Architecture: linuxx8664gcc; -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'); -- Compiler Flags: -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG; -- ROOT default compression algorithm: zlib; -- PyROOT will be built for version 2.7.18; -- Looking for ZLib; -- Looking for Freetype; -- Looking for LZMA; -- Looking for X11; -- Could NOT find GIF (mi",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8097:1288,Detect,Detected,1288,https://root.cern,https://github.com/root-project/root/issues/8097,1,['Detect'],['Detected']
Safety,"30; #2 0x402948 in TObject::operator new(unsigned long) [...]/root/include/TObject.h:167; #3 0x40241e in main mwe.C:10; #4 0x7fcd1f9b3bf6 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21bf6). SUMMARY: AddressSanitizer: heap-use-after-free root/io/io/src/TStreamerInfoActions.cxx:252 in int TStreamerInfoActions::WriteBasicType<unsigned int>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*); Shadow bytes around the buggy address:; 0x0c0c8001a4f0: fd fd fd fd fa fa fa fa fd fd fd fd fd fd fd fd; 0x0c0c8001a500: fa fa fa fa 00 00 00 00 00 00 00 00 fa fa fa fa; 0x0c0c8001a510: fd fd fd fd fd fd fd fd fa fa fa fa fd fd fd fd; 0x0c0c8001a520: fd fd fd fd fa fa fa fa fd fd fd fd fd fd fd fa; 0x0c0c8001a530: fa fa fa fa fd fd fd fd fd fd fd fa fa fa fa fa; =>0x0c0c8001a540: fd fd fd fd fd fd fd fa fa fa fa fa fd[fd]fd fd; 0x0c0c8001a550: fd fd fd fd fa fa fa fa fd fd fd fd fd fd fd fd; 0x0c0c8001a560: fa fa fa fa 00 00 00 00 00 00 00 00 fa fa fa fa; 0x0c0c8001a570: fd fd fd fd fd fd fd fd fa fa fa fa 00 00 00 00; 0x0c0c8001a580: 00 00 00 00 fa fa fa fa fd fd fd fd fd fd fd fd; 0x0c0c8001a590: fa fa fa fa 00 00 00 00 00 00 00 00 fa fa fa fa; Shadow byte legend (one shadow byte represents 8 application bytes):; Addressable: 00; Partially addressable: 01 02 03 04 05 06 07 ; Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; Shadow gap: cc; ==934566==ABORTING; ```. ### Expected behavior. Expected behavior is for ROOT to realize the branch address has been changed to nullptr and create an internal buffer, not read from the freed memory area. Interestingly it doesn't seem to have a problem without calling `SetAddress` as it then realizes it point",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8027:4459,ABORT,ABORTING,4459,https://root.cern,https://github.com/root-project/root/issues/8027,1,['ABORT'],['ABORTING']
Safety,"50, result=0x7ffd951b6748) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:774; ===========================================================. The lines below might hint at the cause of the crash. If you see question; marks as part of the stack trace, try to recompile with debugging information; enabled and export CLING_DEBUG=1 environment variable before running.; You may get help by asking at the ROOT forum https://root.cern/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at https://root.cern/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #10 0x00002b4bd102eaff in raise () from /lib64/libc.so.6; #11 0x00002b4bd1001ea5 in abort () from /lib64/libc.so.6; #12 0x00002b4bd1001d79 in __assert_fail_base.cold.0 () from /lib64/libc.so.6; #13 0x00002b4bd1027456 in __assert_fail () from /lib64/libc.so.6; #14 0x00002b4bd679065b in getLambdaCallOperatorHelper(clang::CXXRecordDecl const&) [clone .part.0] () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #15 0x00002b4bd67915cb in clang::CXXRecordDecl::getLambdaCallOperator() const () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #16 0x00002b4bd39f6a20 in clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseLambdaExpr(clang::LambdaExpr*, llvm::SmallVectorImpl<llvm::PointerIntPair<clang::Stmt*, 1u, bool, llvm::PointerLikeTypeTraits<clang::Stmt*>, llvm::PointerIntPairInfo<clang::Stmt*, 1u, llvm::PointerLikeTypeTraits<clang::Stmt*> > > >*) () from /poo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:15753,abort,abort,15753,https://root.cern,https://github.com/root-project/root/issues/12771,1,['abort'],['abort']
Safety,"8.so.1.0; #13 0x00007fd99fc28783 in run_mod () from /lib64/libpython3.8.so.1.0; #14 0x00007fd99fb149ce in PyRun_FileExFlags () from /lib64/libpython3.8.so.1.0; #15 0x00007fd99fb14186 in PyRun_SimpleFileExFlags () from /lib64/libpython3.8.so.1.0; #16 0x00007fd99fb0b351 in Py_RunMain.cold () from /lib64/libpython3.8.so.1.0; #17 0x00007fd99fbfb969 in Py_BytesMain () from /lib64/libpython3.8.so.1.0; #18 0x00007fd99fde1042 in __libc_start_main () from /lib64/libc.so.6; #19 0x0000564fd09cf07e in _start (); ===========================================================; ```; This not only segfaults, but it reprints values from the first entry before doing that instead of the second entry, suggesting the array access results in some sort of memory corruption. . Running valgrind (with ROOT suppressions) suggests that cppyy is reading some unallocated memory:; ```$ valgrind --suppressions=/usr/share/root/valgrind-root.supp python breaks.py ; ==774799== Memcheck, a memory error detector; ==774799== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==774799== Using Valgrind-3.16.0 and LibVEX; rerun with -h for copyright info; ==774799== Command: python breaks.py; ==774799== ; 0; 0.9989327176093981; -0.43476438941434026; 0.7817962561955079; 0; 0.9989327176093981; ==774799== Invalid read of size 8; ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02); ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0); ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0); ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0); ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0); ==774799== by 0x4C07E3A: PyEval_EvalCode (in /usr/lib64/libpython3.8.so.1.0); ==774799== by 0x4C29067: ??? (in /usr/lib64/libpython3.8.so.1.0); ==774799== by 0x4C28782: ??? (in /usr/lib64/libpython3.8.so.1.0); ==774799== by 0x4B149CD: PyRun_FileExFlags (in /u",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6468:4534,detect,detector,4534,https://root.cern,https://github.com/root-project/root/issues/6468,1,['detect'],['detector']
Safety,"8827664/roofit/roofitcore/src/Initialisation.cxx#L16-L31. ```console; $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby; Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University; All rights reserved, please read http://roofit.sourceforge.net/license.txt; ```. when RooFit was being developed in the early 2000s this might have been about the only way to get open source software recognized and (hopefully!) cited (I was not involved with scientific open source then, so someone who was should feel free to correct me if I have the history wrong). However, in the time since there has been significant improvements in the citation and scholarship of open source software (e.g., some key points being the existence of [JOSS](https://joss.theoj.org/) and [`CITATION.cff`](https://citation-file-format.github.io/) native support on GitHub). As RooFit is also effectively absorbed into ROOT (I hope this is safe to say given the [development history on the `rootfit` module in ROOT](https://github.com/root-project/root/tree/master/roofit) and that the [RooFit development GitHub org](https://github.com/roofit-dev) does their development in a fork of ROOT) and any development as a [solo project on SourceForge](https://sourceforge.net/projects/roofit/) has long halted, the banner is a recurring pain point and nuisance for many users. The banner can be [disabled at runtime](https://github.com/root-project/root/commit/43b6c775123c371bf02fe7d744e0be8612499f27) through adding `RooFit.Banner: no` to `.rootrc`. ```console; $ python -c 'from ROOT import RooFit' # Get banner. RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby; Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University; All rights reserved, please read http://roofit.sourceforge.net/license.txt. $ echo 'RooFit.Banner: no' > ~/.rootrc; $ python -c 'from ROOT import RooFit' # No banner now; ```. or [permanently disabled",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9954:1234,safe,safe,1234,https://root.cern,https://github.com/root-project/root/issues/9954,1,['safe'],['safe']
Safety,": /usr (Required is at least version ""2018""); -- Looking for VDT; -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""); -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH; -- Switching ON 'builtin_vdt' option; -- Cannot select cudnn without selecting cuda or tmva-gpu. Option is ignored; -- Looking for BLAS for optional parts of TMVA; -- Looking for sgemm_; -- Looking for sgemm_ - not found; -- Looking for sgemm_; -- Looking for sgemm_ - found; -- Found BLAS: /usr/lib/libblas.so; -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB; -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success; -- Building LLVM in 'Release' mode.; -- The ASM compiler identification is GNU; -- Found assembler: /usr/bin/cc; -- Could NOT find Z3: Found unsuitable version ""0.0.0"", but required is at least ""4.7.1"" (found Z3_LIBRARIES-NOTFOUND); -- Looking for backtrace; -- Looking for backtrace - found; -- backtrace facility detected in default set of libraries; -- Found Backtrace: /usr/include; -- Native target architecture is X86; -- Threads disabled.; -- Doxygen disabled.; -- Go bindings disabled.; -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH); -- OCaml bindings disabled.; -- Found Python module pygments; -- Found Python module pygments.lexers.c_cpp; -- Found Python module yaml; -- LLVM host triple: x86_64-unknown-linux-gnu; -- LLVM default target triple: x86_64-unknown-linux-gnu; -- Building with -fPIC; -- Found PythonInterp: /usr/bin/python3.10 (found version ""3.10.4""); -- Constructing LLVMBuild project information; -- Linker detection: GNU ld; -- Targeting X86; -- Targeting NVPTX; -- Clang version: 9.0.1; -- Cling version (from VERSION file): ROOT_1.0~dev; -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-pc-linux-gnu/11.2.0/../../../../include/c++/11.2.0:/usr/lib/gcc/x86_64-pc-linux-gnu/11.2.0/../../../../include/c++/11.2.0/x86_64-pc-linux-gnu:/usr/lib/gcc/x86_64-pc-",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10528:8549,detect,detected,8549,https://root.cern,https://github.com/root-project/root/issues/10528,1,['detect'],['detected']
Safety,"::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::RNNDescriptors_t &, TMVA::DNN::TCudnn<AFloat>::RNNWorkspace_t &) [with AFloat=Double_t]"" at line 44 of /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn.cu. /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn/RecurrentPropagation.cu(571): error: identifier ""cudnnRNNBackwardWeights"" is undefined; status = cudnnRNNBackwardWeights(cudnnHandle, rnnDesc, seqLength, desc.xDesc.data(), x.GetDataPointer(),; ^; detected during instantiation of ""void TMVA::DNN::TCudnn<AFloat>::RNNBackward(const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::RNNDescriptors_t &, TMVA::DNN::TCudnn<AFloat>::RNNWorkspace_t &) [with AFloat=Double_t]"" at line 44 of /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn.cu. 8 errors detected in the compilation of ""/build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn.cu"".; ```. The missing functions were [deprecated in cuDNN 8.0](https://docs.nvidia.com/deeplearning/cudnn/archives/cudnn-897/api/index.html#cudnnRNNForwardTraining) and [removed in cuDNN 9.0](https://docs.nvidia.com/deeplearning/cudnn/latest/api/overview.html#id1). ### Reproducer. Build from source with cuDNN 9.0 or newer. ### ROOT version. 6.30.06. ### Installation method. build from source. ### Operating system. Arch Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15413:7466,detect,detected,7466,https://root.cern,https://github.com/root-project/root/issues/15413,1,['detect'],['detected']
Safety,"::Experimental::REntry>>::reset[abi:v160006](ROOT::Experimental::REntry*) unique_ptr.h:297; #4 0x1046a7b7c in std::__1::unique_ptr<ROOT::Experimental::REntry, std::__1::default_delete<ROOT::Experimental::REntry>>::~unique_ptr[abi:v160006]() unique_ptr.h:263; #5 0x10469cb0c in std::__1::unique_ptr<ROOT::Experimental::REntry, std::__1::default_delete<ROOT::Experimental::REntry>>::~unique_ptr[abi:v160006]() unique_ptr.h:263; #6 0x10469a73c in main ao2dToAO2NT.cxx:163; #7 0x186307f24 (<unknown module>). previously allocated by thread T0 here:; #0 0x106a86ba4 in wrap_malloc+0x94 (libclang_rt.asan_osx_dynamic.dylib:arm64e+0x52ba4); #1 0x1062c0d60 in ROOT::Experimental::Detail::RFieldBase::GenerateValue() RField.cxx:332; #2 0x1062efd48 in ROOT::Experimental::RNTupleModel::CreateEntry() const RNTupleModel.cxx:147; #3 0x104699f00 in main ao2dToAO2NT.cxx:145; #4 0x186307f24 (<unknown module>). SUMMARY: AddressSanitizer: bad-free (libclang_rt.asan_osx_dynamic.dylib:arm64e+0x52ce0) in wrap_free+0x98; ==5670==ABORTING; [1] 5670 abort ./a.out AO2D.root; ```. Besides the crash, i would appreciate if one could show me how to create RNTuples in a given folder (which is probably something trivial I am missing). ### Reproducer. ```C++; #include <iostream>; #include <getopt.h>; #include <TFile.h>; #include <TTree.h>; #include <TKey.h>; #include <TLeaf.h>; #include <ROOT/RNTuple.hxx>; #include <ROOT/RNTupleModel.hxx>; #include <ROOT/RField.hxx>. void print_help(); {; std::cout << ""Usage: ao2dToAO2NT [options] input_file"" << std::endl;; std::cout << ""Options:"" << std::endl;; std::cout << "" -o, --output-file <file> Output file name"" << std::endl;; std::cout << "" -h, --help Print this help message"" << std::endl;; std::cout << "" -v, --verbose Verbose output"" << std::endl;; }. bool verbose = false;; std::string outputFile = ""ntuple.root"";; std::string inputFile;. void debug(const std::string& message); {; if (verbose) {; std::cout << message << std::endl;; }; }. void log(const std::string& me",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13996:8210,ABORT,ABORTING,8210,https://root.cern,https://github.com/root-project/root/issues/13996,2,"['ABORT', 'abort']","['ABORTING', 'abort']"
Safety,"::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::RNNDescriptors_t &, TMVA::DNN::TCudnn<AFloat>::RNNWorkspace_t &, bool) [with AFloat=Double_t]"" at line 44 of /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn.cu. /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn/RecurrentPropagation.cu(545): error: identifier ""cudnnRNNBackwardData"" is undefined; cudnnStatus_t status = cudnnRNNBackwardData(; ^; detected during instantiation of ""void TMVA::DNN::TCudnn<AFloat>::RNNBackward(const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::RNNDescriptors_t &, TMVA::DNN::TCudnn<AFloat>::RNNWorkspace_t &) [with AFloat=Double_t]"" at line 44 of /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn.cu. /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn/RecurrentPropagation.cu(571): error: identifier ""cudnnRNNBackwardWeights"" is undefined; status = cudnnRNNBackwardWeights(cudnnHandle, rnnDesc, seqLength, desc.xDesc.data(), x.GetDataPointer(),; ^; detected during instantiation of ""void TMVA::DNN::TCudnn<AFloat>::RNNBackward(const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15413:5591,detect,detected,5591,https://root.cern,https://github.com/root-project/root/issues/15413,1,['detect'],['detected']
Safety,":; Percent of CPU this job got: 1557%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:49.89. +this PR; Percent of CPU this job got: 14271%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.11; ```; This 'surprising' increase of CPU time by a factor 9 leading to only a factor 2 improvement in elapsed time is due to the bottleneck migrating from the ([re]moved mutex) to the (many) spin locks. The test can be tweaked (increase number of files, reduce number of entries per file) to stress the file opening more. On ntpl-perf01.cern.ch (single AMD EPYC 7702P 64-Core Processor), the test as is use close to 94% of all cpus and only a little system time:; ```; User time (seconds): 7250.76; System time (seconds): 3.58; Percent of CPU this job got: 12019%; ```; However tweaking to 390000 files of a 1000 entries, we get:; ```; User time (seconds): 450.77; System time (seconds): 438.39; Percent of CPU this job got: 7039%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.63; ```. Some are straight-forward to avoid:. ```; // Avoid lock internal to linux date/time:; diff --git a/io/io/src/TKey.cxx b/io/io/src/TKey.cxx; index e604af2980..f349bd8710 100644; --- a/io/io/src/TKey.cxx; +++ b/io/io/src/TKey.cxx; @@ -99,7 +99,7 @@ TKey::TKey() : TNamed(), fDatime((UInt_t)0); ////////////////////////////////////////////////////////////////////////////////; /// TKey default constructor.; ; -TKey::TKey(TDirectory* motherDir) : TNamed(), fDatime((UInt_t)0); +TKey::TKey(TDirectory* motherDir) : TNamed(), fDatime((UInt_t)0, (UInt_t)0); {; Build(motherDir, """", 0);; ; ```; Some require some thoughts:; ```; Try to avoid bottlenecking on recording TContext with gROOT when reading objects out files.; diff --git a/tree/dataframe/src/RLoopManager.cxx b/tree/dataframe/src/RLoopManager.cxx; index 4112e7aeb8..8d92534015 100644; --- a/tree/dataframe/src/RLoopManager.cxx; +++ b/tree/dataframe/src/RLoopManager.cxx; @@ -495,6 +495,7 @@ void RLoopManager::RunTreeProcessorMT(); const auto entryRange = r.GetEn",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12761:1223,avoid,avoid,1223,https://root.cern,https://github.com/root-project/root/issues/12761,1,['avoid'],['avoid']
Safety,":Internal::TExecutor x2{};; ROOT::Internal::TExecutor x3(ROOT::Internal::ExecutionPolicy::kMultithread, 20); // will actually have ROOT::GetPoolSize() threads; ROOT::Internal::TExecutor x4(ROOT::Internal::ExecutionPolicy::kMultiprocess, 8);; ROOT::Internal::TExecutor x5(ROOT::Internal::ExecutionPolicy::kSerial, 8); //nProcessing units is ignored in this case. x1.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map; x2.Map([](){return 1;}, 20); // runs TThreadExecutor::Map; x3.Map([](){return 1;}, 20); // runs TThreadExecutor::Map; x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map; x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map; ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | ; ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |; TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |; TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |; TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |; TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |; TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the chil",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6327:1386,avoid,avoid,1386,https://root.cern,https://github.com/root-project/root/pull/6327,1,['avoid'],['avoid']
Safety,"; // First, let's train a model with TMVA.; const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";; train(filename);. // Next, we load the model from the TMVA XML file.; RLegacyReader model(""TMVAClassification/weights/TMVAClassification_BDT.weights.xml"");. // In case you need a reminder of the names and order of the variables during; // training, you can ask the model for it.; auto variables = model.GetVariableNames();; std::cout << ""\nVariable names used during training: "" << variables << ""\n\n"";. // The model can now be applied in different scenarios:; // 1) Event-by-event inference; // 2) Batch inference on data of multiple events; // 3) Model inference as part of an RDataFrame graph. // 1) Event-by-event inference; // The event-by-event inference takes the values of the variables as a std::vector<float>.; // Note that the return value is as well a std::vector<float> since the reader; // is also capable to process models with multiple outputs.; auto prediction = model.Predict({0.5, 1.0, -0.2, 1.5});; std::cout << ""Single-event inference: "" << prediction << ""\n\n"";. // 2) Batch inference on data of multiple events; // For batch inference, the data needs to be structured as a matrix. For this; // purpose, TMVA makes use of the RTensor class. For convenience, we use RDataFrame; // and the AsTensor utility to make the read-out from the ROOT file.; ROOT::RDataFrame df(""TreeS"", filename);; auto df2 = df.Range(3); // Read only 10 events; auto x = AsTensor<float>(df2, variables);; std::cout << ""RTensor input for inference on data of multiple events:\n"" << x << ""\n\n"";. auto y = model.Predict(x);; std::cout << ""Prediction performed on multiple events: "" << y << ""\n\n"";. // 3) Perform inference as part of an RDataFrame graph; // We write a small lambda function that performs for us the inference on; // a dataframe to omit code duplication.; auto make_histo = [&](const std::string &treename) {; ROOT::RDataFrame df(treename, filename);; auto df2 = ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3321:1317,predict,prediction,1317,https://root.cern,https://github.com/root-project/root/pull/3321,1,['predict'],['prediction']
Safety,"; std::cout << i << "" memory usage "" << pinfo.fMemResident; << "" "" << pinfo.fMemVirtual << std::endl;; }; if (i==0); startMemResident=pinfo.fMemResident;; if (i==(niters-1)); endMemResident=pinfo.fMemResident;; }. int deltaMem=endMemResident-startMemResident;; double avgMem=(double)deltaMem/niters;; cout << endl << ""Memory increase = "" << deltaMem << endl;; cout << ""Avg increase per iteration = "" << avgMem << endl;; }; ```. The increase can be completely eliminated by not using the memory pool for RooDataSet. It is remarkable that the memory pool itself doesn't seem to be the problem. In fact, one can replace `RooDataSet::operator new` and `RooDataSet::operator delete` such that the memory pool is still active, but we don't use the addresses it gives us and pretend to deallocate immediately after allocating. This can be achieved by substituting the following code in [RooDataSet.cxx](https://github.com/root-project/root/blob/master/roofit/roofitcore/src/RooDataSet.cxx#L143):. ```C++; void* RooDataSet::operator new (size_t bytes) {; // pretend we use the memory pool to demonstrate the pool itself is not the problem; memPool()->deallocate(memPool()->allocate(bytes));. return ::operator new(bytes);; }. void RooDataSet::operator delete (void* ptr) { ::operator delete(ptr); }; ```. With this change, the memory increase is completely gone, at least for my setup. To me it is not clear why using the memory pool causes the memory increase. The memory increase happens about every 5000 iterations and is exactly 624 bytes. However, these events are uncorrelated with special events in the memory pool, i.e. adding a new arena to the memory pool. Could it be that without using the addresses suggested by the default allocator, we get some heap fragmentation which causes the memory reserved by the process to go up, while we don't have an actual increase of allocated memory?. The solution is probably to avoid using the memory pool for RooDataSet. My setup is ROOT master on Arch Linux.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8323:3116,avoid,avoid,3116,https://root.cern,https://github.com/root-project/root/issues/8323,1,['avoid'],['avoid']
Safety,"<https://bugs.gentoo.org/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>. For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from bin/root.exe...; (gdb) break f; Function ""f"" not defined.; Make breakpoint pending on future shared library load? (y or [n]) y; Breakpoint 1 (f) pending.; (gdb) run; Starting program: /srv/root/build/bin/root.exe ; warning: File ""/srv/root/build/lib/libCore.so-gdb.py"" auto-loading has been declined by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; 	add-auto-load-safe-path /srv/root/build/lib/libCore.so-gdb.py; line to your configuration file ""/home/amadio/.config/gdb/gdbinit"".; To completely disable this security protection add; 	set auto-load safe-path /; line to your configuration file ""/home/amadio/.config/gdb/gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; 	info ""(gdb)Auto-loading safe path""; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/usr/lib64/libthread_db.so.1"".; [Detaching after vfork from child process 798483]; [Detaching after vfork from child process 800084]; [Detaching after vfork from child process 800087]; ------------------------------------------------------------------; | Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Dec 13 2022, 14:33:20 |; | From heads/cling-profile-debug@v6-25-02-3189-gf5fced388b |; | With c++ (Gentoo 12.2.1_p20221203 p3) 12.2.1 20221203 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. [Detaching after vfork from child process 800350]; root [0] double f(double x) { return x*x; }; root [1] double y = ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11882:1879,safe,safe,1879,https://root.cern,https://github.com/root-project/root/pull/11882,1,['safe'],['safe']
Safety,"@bbockelm ; 1. I move signal handling from TSystem to a new class called TSigHandling and use gSigHandling as a global signal handling object in ROOT.; 2. To comply with some function calls like ""gSystem->ResetSignals()"". I move old ResetSignals() to the new class so TUnixSystem::ResetSignals() just call gSigHandling->ResetSignals(). I could also go over all such function calls and replace them with gSigHandling->(functions) if necessary.; 2. I replace old unsafe functions in signal handlers with thread-safe ones.; 3. I only implement StackTrace functions for SIGBUS, SIGSEGV, SIGILL. Other signals are still using default StackTrace functions. kSigAlarm and kSigChild are ignored for my current implementation. Do we need to change other signal handlers?; 4. @pcanal I have some problem with running roottest. I asked a question here:; https://github.com/root-mirror/root/pull/84; Could you take a look at it and I will write test case this patch also.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/133:461,unsafe,unsafe,461,https://root.cern,https://github.com/root-project/root/pull/133,2,"['safe', 'unsafe']","['safe', 'unsafe']"
Safety,"@bbockelm @pcanal This patch copies the code of signal handling in CMSSW. It avoids async-unsafe functions in signal handler functions. . For reference, see the link https://github.com/bbockelm/cmssw/blob/stacktrace_handler_revisit/FWCore/Services/src/InitRootHandlers.cc. I tried this patch with some simple multi-thread test cases and it worked fine. Is there any complicated test cases I can run? I think this patch is not very ready to merge, but it achieved basic functions. Any criticisms are welcome.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/97:77,avoid,avoids,77,https://root.cern,https://github.com/root-project/root/pull/97,2,"['avoid', 'unsafe']","['avoids', 'unsafe']"
Safety,"@bbockelm I am submitting a new pull request for signal handling:; 1. I move signal handling from TSystem to a new class called TSigHandling and use gSigHandling as a global signal handling object in ROOT.; 2. To comply with some function calls like ""gSystem->ResetSignals()"". I move old ResetSignals() to the new class so TUnixSystem::ResetSignals() just call gSigHandling->ResetSignals(). I could also go over all gSystem->(functions) and replace them with gSigHandling->(functions) if necessary.; 3. I replace old unsafe functions in signal handlers with thread-safe ones.; 4. I only implement StackTrace functions for SIGBUS, SIGSEGV, SIGILL. Other signals are still using default StackTrace functions. kSigAlarm and kSigChild are ignored for my current implementation. Do we need to change other signal handlers?; 5. @pcanal I have some problem with running roottest. I asked a question here:; #84; Could you take a look at it and I will write test case this patch also.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/134:517,unsafe,unsafe,517,https://root.cern,https://github.com/root-project/root/pull/134,2,"['safe', 'unsafe']","['safe', 'unsafe']"
Safety,"@oshadura @Axel-Naumann ; Dear Mentors,; Here's my pull request for the issue https://github.com/root-project/root/issues/6635.; Can you please review this. Please excuse any instances where the timeout parameter has been added unnecessarily as it wasn't clear to me how to test this. Since the desired interval for `TIMEOUT` hadn't been mentioned, I have added it as 600 s.; I'll fix any incorrect changes as soon as review comments and suggestions are added. I will squash the commits after the review. Thanks in advance !",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7136:195,timeout,timeout,195,https://root.cern,https://github.com/root-project/root/pull/7136,2,"['TIMEOUT', 'timeout']","['TIMEOUT', 'timeout']"
Safety,"A `RooListProxy` should always be constructed with the constructor that; takes the owner as an argument. The default constructor is only meant; for I/O, and any object created with it is invalid because a RooAbsProxy; is meaningless without an owner. With this commit, the RooListProxy member functions of; RooLagrangianMorphFunc are correctly initialized. The commit also avoids; templated helper functions where the type should always be the same, and; adds some TODOs to suspicious parts of the RooLagrangianMorphFunc code; that were spotted when this commit was created. FYI, @rahulgrit . This bug was uncovered now because it caused a nullpointer dereferencing in another PR: https://github.com/root-project/root/pull/8728. I also opened an issue with more **RooLagrangianMorphFunc** problems that I spotted while creating this PR: https://github.com/root-project/root/issues/9845",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9840:373,avoid,avoids,373,https://root.cern,https://github.com/root-project/root/pull/9840,1,['avoid'],['avoids']
Safety,A bunch of improvements to distributed module:; 1. Add all sources to the `py_compile` command in cmake; 2. Use postponed evaluation for type hints and avoid implicit import ROOT; 3. Test that `import DistRDF` has no side-effects: no implicit importing of ROOT and no implicit change of environment variables,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11241:152,avoid,avoid,152,https://root.cern,https://github.com/root-project/root/pull/11241,1,['avoid'],['avoid']
Safety,"A follow-up from the [discussion on #12664](https://github.com/root-project/root/pull/12664#discussion_r1175726403). The main questions are:. 1. Is a ""dense representation"" (bit vector + default constructed elements for non-available items) really needed; 2. Where is the break-even for the dense representation vs. the sparse representation; 3. Does a ""modified dense"" representation make sense? The modified dense representation would skip creating unavailable items. In order to avoid counting all the 1-bits from the start of the cluster, this representation would need to additionally store the cumulative number of 1 bits per page, e.g. in the page meta-data or in a separate column. To help answer the question, we should fill a table with size figures for the following tests with a few MB of data:. - Nullable field of `bool`, `char`, `float`, `double`, `struct` of a few tens of bytes; - Fill levels 0%, 10%, 50%, 90%, 100%; - Using sparse, dense, modified dense representation; - zstd compressed and uncompressed. For typical compression ratios, the data should follow a typical distribution, e.g. Gauss.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12842:482,avoid,avoid,482,https://root.cern,https://github.com/root-project/root/issues/12842,1,['avoid'],['avoid']
Safety,"A new `xRooFit/Config.h` header is introduced to configure the xRooFit; namespace without using compiler flags. Also, a symlink to `inc/RooFit` is replaced with an; `add_include_directories` entry in the CMakeFiles, because the symlink; doesn't work on Windows. In a separate commit: the right type to use `std::vector::at()` is `size_t`, and like this we; avoid the problem that `ssize_t` is not defined on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11932:357,avoid,avoid,357,https://root.cern,https://github.com/root-project/root/pull/11932,1,['avoid'],['avoid']
Safety,ACLiC now synthesizes a modulemap with a suffix _ACLiC_dict.modulemap. The file contains the source file to be compiled and the corresponding library.; ; The modulemap is then passed to rootcling via -fmodule-map-file= flag to avoid naming clashes with possibly existing other modulemap files.; ; This patch teaches cling to work with the -fmodule-map-file= flag.; ; ACLiC supports automatic inclusion of Rtypes.h (making ClassDef macro available). Modules are built in isolation and are resilient to #include of Rtypes.h at rootcling startup time. We make module Core (containing Rtypes.h) visible via a newly implemented callback. Depends on #3798,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3850:227,avoid,avoid,227,https://root.cern,https://github.com/root-project/root/pull/3850,1,['avoid'],['avoid']
Safety,"AIN_FILE=D:\dev\vcpkg\scripts\buildsystems\vcpkg.cmake ..; -- Building for: Visual Studio 16 2019; -- Selecting Windows SDK version 10.0.19041.0 to target Windows 10.0.19042.; -- The C compiler identification is MSVC 19.29.30037.0; -- The CXX compiler identification is MSVC 19.29.30037.0; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30037/bin/Hostx64/x64/cl.exe - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30037/bin/Hostx64/x64/cl.exe - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Git: C:/Program Files/Git/cmd/git.exe (found version ""2.30.0.windows.2""); -- Detected ROOT_VERSION 6.25.01; -- Looking for Python; -- Could NOT find Python3 (missing: Python3_NumPy_INCLUDE_DIRS NumPy) (found version ""3.9.2""); -- Could NOT find Python2 (missing: Python2_EXECUTABLE Python2_LIBRARIES Python2_INCLUDE_DIRS Python2_NumPy_INCLUDE_DIRS Interpreter Development NumPy Development.Module Development.Embed); Reason given by package:; Interpreter: Wrong major version for the interpreter ""C:/Program Files/Python39/python.exe"". -- Looking for pthread.h; -- Looking for pthread.h - not found; -- Found Threads: TRUE; -- Performing Test GLIBCXX_USE_CXX11_ABI; -- Performing Test GLIBCXX_USE_CXX11_ABI - Failed; -- ROOT Platform: win32; -- ROOT Compiler: MSVC 19.29.30037.0; -- ROOT Processor: AMD64; -- ROOT Architecture: win32; -- Build Type: '' (flags = ''); -- Compiler Flags: -nologo -IC:/dev/root/build/win -FIw32pragma.h -FIsehmap.h -Zc:__cplusplus -MD -GR -EHsc- -W3 -wd4141 -wd4291 -wd4244 -wd4049 -D_WIN32 -D_XKEYCHECK_H -DNOMINMAX -D_CRT_SECURE_NO_WARNINGS; -- ROOT defa",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8633:1918,Detect,Detected,1918,https://root.cern,https://github.com/root-project/root/issues/8633,1,['Detect'],['Detected']
Safety,"ALICE has reported regular crashes due to MT unsafe access in `TDirectory::RegisterGDirectory`. Example backtrace:. ```. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================. Thread 6 (Thread 0x7ff42998d700 (LWP 56550) ""o2-sim-hit-merg""):; #0 0x00007ff44b42eef6 in longest_match () from /home/aliperf/aliperf_workspace/sw/slc7_x86-64/zlib/v1.2.8-local3/lib/libz.so.1; #1 0x00007ff44b42fd58 in deflate_fast () from /home/aliperf/aliperf_workspace/sw/slc7_x86-64/zlib/v1.2.8-local3/lib/libz.so.1; #2 0x00007ff44b430822 in deflate () from /home/aliperf/aliperf_workspace/sw/slc7_x86-64/zlib/v1.2.8-local3/lib/libz.so.1; #3 0x00007ff447cbe8a5 in R__zipZLIB (irep=0x7ff4299869a8, tgt=0x7ff3c94c924f ""ZL\b\177\272"", tgtsize=0x7ff4299869ac, src=0x7ff4299868c0 ""\177"", srcsize=0x7ff4299869ac, cxlevel=<optimized out>) at /home/aliperf/aliperf_workspace/sw/SOURCES/ROOT/v6-24-02/v6-24-02/core/zip/src/RZip.cxx:213; #4 R__zipMultipleAlgorithm (compressionAlgorithm=<optimized out>, irep=0x7ff4299869a8, tgt=0x7ff3c94c924f ""ZL\b\177\272"", tgtsize=0x7ff4299869ac, src=0x7ff4299868c0 ""\177"", srcsize=0x7ff4299869ac, cxlevel=32756) at /home/aliperf/aliperf_workspace/sw/SOURCES/ROOT/v6-24-02/v6-24-02/core/zip/src/RZip.cxx:109; #5 R__zipMultipleAlgorithm (cxlevel=cxlevel; entry=1, srcsize=srcsize; entry=0x7ff4299869ac, src=src; entry=0x7ff3d000007f ""\300Ro\211\300=\200I\300>\277\341\300D'\254\300F\343\016\300Ix\232\300K\333^\300M\340!\300O\255T\300P\320\344\300Q\254\250\300<\225B\300S,g\300S\313\061\300Tf\250\300TӾ\300U.\b\300U\027\\\300T}d\300S\200\344\300R\220\234\300QT}\300D\241\221\300V\a\360\300U\246\060\300S; \300\300QV\026\300OE\345\300M\020\314\300J\365\f\300I(D\300G\250X\300FE6\300P\r\376\300B\240\300\300; zV\300>\225\324\300=\036\206\300<8t\300;\252d\300;v\376\300;\210w\300;\336J\300HǬ\300\071\322+\300:\205\232\300;\231H\300<\367\a\300=\350\252\300?"", <inco",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8931:45,unsafe,unsafe,45,https://root.cern,https://github.com/root-project/root/issues/8931,1,['unsafe'],['unsafe']
Safety,"According to `feature_test_macros`, this macro is obsolete and ""glibc has been thread-safe by default for many years."" Other platforms don't use it at all, for example FreeBSD. Some parts of ROOT used it to determine if we are compiling with `-pthread`, but this is essentially unused these days because the CMake build always enables threading support and there exists no option to turn it off.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13114:86,safe,safe,86,https://root.cern,https://github.com/root-project/root/pull/13114,1,['safe'],['safe']
Safety,"According to the console logs, this looks like a real failure. . `AddressSanitizer: heap-buffer-overflow`. libAsan seems to have detected a real error in the code. ### How it could be improved; The tests should be translated into CMake code and then the error(s) should be adressed",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8917:129,detect,detected,129,https://root.cern,https://github.com/root-project/root/issues/8917,1,['detect'],['detected']
Safety,"Add a helper method to check whether a model has a field with the; given name. We're using `string_view` on the API boundary, but this; unfortunately requires a `std::string` temporary to check if the name; exists in the unordered_set of field names until P0919R3 lands in; C++20. Switching to a plain `std::set` would also avoid this problem.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7480:324,avoid,avoid,324,https://root.cern,https://github.com/root-project/root/pull/7480,1,['avoid'],['avoid']
Safety,"Add a new interface to RooFit, which uses a `RunContext` object to store data. This allows for passing data around between nodes of the computation graph without having to alter class members.; Some residual altering of class members remains, so the interface is not thread safe. It, however, solves the problem of not being able to compute an integral, the likelihoods of entries in a dataset + possibly some other set of x-values while another computation is running. This is the key to solving things like ROOT-3874 or faster integrators. In this PR, the interface is never used. Uses + tests will come in later PRs, but I couldn't dump 30 commits in one PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6615:274,safe,safe,274,https://root.cern,https://github.com/root-project/root/pull/6615,1,['safe'],['safe']
Safety,"Add a utility function to call `TEntryList::Enter` with entries in a certain range, instead of having to do the loop manually. Especially useful in PyROOT to avoid doing the same in a Python loop; ### Initial idea; ```py; >>> import ROOT; >>> e = ROOT.TEntryList(); >>> e.GetN(); 0; >>> ROOT.ROOT.Detail.EnterRange(e, 0, 10); >>> e.GetN(); 10; ```. Not sure about the namespace and the naming, can be discussed. ### Final interface. ```py; >>> import ROOT; >>> e = ROOT.TEntryList(); >>> e.EnterRange(0,10); >>> e.GetN(); 10; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8740:158,avoid,avoid,158,https://root.cern,https://github.com/root-project/root/pull/8740,1,['avoid'],['avoid']
Safety,"Add member functions to RooAbsData and RooDataHist that forward to `RooAbsData::reduce()`, but cast the return value to the actual type. This is not that useful now except for avoiding some boiler plate code, but will be crucial once we change the return type to `std::unique_ptr` to fix memory leaks: in that case, PyROOT doesn't do the automatic conversion to the actual type anymore, and we would end up with RooDataHists or RooDataSets where we can't call their member functions (unless they are overrides of RooAbsData methods).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15444:176,avoid,avoiding,176,https://root.cern,https://github.com/root-project/root/pull/15444,1,['avoid'],['avoiding']
Safety,"Add range checks to `RNTupleView`'s indexing operators. Before this change out of bounds accesses were being caught by an internal assert (in `RPageStorageFile::PopulatePage`); ```cpp; auto model = RNTupleModel::Create();; auto fieldPt = model->MakeField<float>(""pt"", 42.0);; {; auto ntuple = RNTupleWriter::Recreate(std::move(model), ""myNTuple"", path);; ntuple->Fill();; ntuple->Fill();; // ntuple has 2 entries; }; auto ntuple = RNTupleReader::Open(""myNTuple"", path);; auto viewPt = ntuple->GetView<float>(""pt"");; std::cout << viewPt(2); // attempt to access the pt field at offset 2 ; ```. Before:; ```; Fatal: clusterId != kInvalidDescriptorId violated at line 400 of `/home/max/projects/rootdev/root/tree/ntuple/v7/src/RPageStorageFile.cxx'; aborting; ```. The assert location:; https://github.com/root-project/root/blob/a4b812bad84be0986ee416bbd65cf44527b92404/tree/ntuple/v7/src/RPageStorageFile.cxx#L391-L400. After this change we throw an exception like:; ```; index 2 out of bounds for field 'pt' with 2 elements; ```. This also required a change to `RFieldBase::GetNElements` to handle a few field corner cases: ; * before columns are generated; * class fields (which do not have a principal column)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7784:747,abort,aborting,747,https://root.cern,https://github.com/root-project/root/pull/7784,1,['abort'],['aborting']
Safety,Add redundant 'virtual' destructor declarations,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14093:4,redund,redundant,4,https://root.cern,https://github.com/root-project/root/pull/14093,1,['redund'],['redundant']
Safety,"Add scaling VarTransform functionality to TMVA preproccessing (like normalisation it linearly scales the data but the sign of the input and output data is retained). I have added to the functionality of the VariableNormalizeTransform class in the style of the VariableGaussTransform class to transform data such that it remains in the range of [-1,1], there is no offset, so the sign of the input data is unchanged by the transformation. . This is proving essential for my neural network analyses that treat a detector hit data like an image classification problem and use ReLU activation functions at the beginning of my network. I have also added a description to the TMVA documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4141:510,detect,detector,510,https://root.cern,https://github.com/root-project/root/pull/4141,1,['detect'],['detector']
Safety,"Add several methods to RCanvas like `IsShown`, `ClearShown`, `CreateJSON`. In python part:; * set special ""jupyter"" kind of web display; * detect if RCanvas compiled; * like with TCanvas, extract list of RCanvas after each cell; * use RCanvas methods to create JSON and then display it. This enables offline functionality of `RCanvas` like for `TCanvas`. As next step, one could try real __online__ mode - `jupyter` provides communication channel between cells and server.; But lets do first step",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8638:139,detect,detect,139,https://root.cern,https://github.com/root-project/root/pull/8638,1,['detect'],['detect']
Safety,"Add thread-safe, bounded queue to sychronize producer-consumer threads",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8715:11,safe,safe,11,https://root.cern,https://github.com/root-project/root/pull/8715,1,['safe'],['safe']
Safety,"Add yet another fence in TClass::GetClass to avoid lookups and memory consumption. This PR aims to fix #9029. Give the sophisticated implementation of TClass::GetClass, perhaps it would be good to collect some feedback, especially by @pcanal . # This Pull request:; This PR avoids lookups and parsing in some cases.; One of the principles of the TClass::GetClass method implementation is to avoid as much as possible. . ## Changes or fixes:; This commit adds yet another fence in TClass::GetClass, checking if the name in input is the name of a known fundamental type or typedef to it.; In order to avoid code duplication, a routine previously available within the implementation of TClassEdit has been made available with a public API. ## Checklist:. - [v ] tested changes locally; - [v ] updated the docs (if necessary). This PR fixes #9029",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13341:45,avoid,avoid,45,https://root.cern,https://github.com/root-project/root/pull/13341,4,['avoid'],"['avoid', 'avoids']"
Safety,Added function to detect c++ attributes at function definition.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2209:18,detect,detect,18,https://root.cern,https://github.com/root-project/root/pull/2209,1,['detect'],['detect']
Safety,Added thread safe method GetInverse to compute the inverse matrix for…,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2336:13,safe,safe,13,https://root.cern,https://github.com/root-project/root/pull/2336,4,['safe'],['safe']
Safety,Adding an option to TMVA/BDT to avoid the normalization of weights at boost procedure which was introduced in TMVA 4.1.2,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/244:32,avoid,avoid,32,https://root.cern,https://github.com/root-project/root/pull/244,1,['avoid'],['avoid']
Safety,Additional changes needed to safely use different TFormula on different threads while I/O is occurring on another thread.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/27:29,safe,safely,29,https://root.cern,https://github.com/root-project/root/pull/27,1,['safe'],['safely']
Safety,Additional thread safety fixes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/32:18,safe,safety,18,https://root.cern,https://github.com/root-project/root/pull/32,1,['safe'],['safety']
Safety,Address gcc9 warning about redundant move.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3944:27,redund,redundant,27,https://root.cern,https://github.com/root-project/root/pull/3944,2,['redund'],['redundant']
Safety,"Adds a `RRawFile` class in the `ROOT::Experimental::Detail` namespace for accessing files byte-wise or line-wise. This is supposed to be used in RNTuple as well as in the CSV and SQlite `RDataSource` classes. Files are addressed by URLs (e.g. http://server/file or file:///local/path) and derived classes of `RRawFile` implement the protocol-dependent low-level read routine. The class allows for; - unified access to files, either local or remote; - Automatic handling of UNIX and Windows line breaks ; - Control of the I/O buffer mechanism. Current todos:; - [ ] Use upcoming `RStatus` / `RException` based error handling; - [ ] Use RRawFile in RCsvDS and RSqliteDS and compare the performance to the current implementation ; - [x] Implementation of Davix based I/O, using ROOT's plugin infrastructure in order to avoid a dependency of RIO to RDAVIX; - [x] Revised I/O buffering mechanism to avoid buffer thrashing on `Readln`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3030:816,avoid,avoid,816,https://root.cern,https://github.com/root-project/root/pull/3030,2,['avoid'],['avoid']
Safety,"Adds a dummy shared pointer to RValue: the dummy shared pointer holds the control block with a noop deleter if BindRawPtr is used. The object shared pointer, in this case, shares the control block with the dummy shared pointer (aliasing constructor). In this way, we avoid a memory allocation for the control block every time BindRawPtr is called. Also some minor improvements to the internals of REntry. @Dr15Jones FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14731:267,avoid,avoid,267,https://root.cern,https://github.com/root-project/root/pull/14731,1,['avoid'],['avoid']
Safety,Adds infrastructure to instrument code parts with counters and timers -- either thread-safe atomics or simple integers. Adds a few key counters to the raw page source.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4300:87,safe,safe,87,https://root.cern,https://github.com/root-project/root/pull/4300,1,['safe'],['safe']
Safety,"After ROOT's cleanup has become more thread-safe, we can just let the user decide if they want to use threads or tasks with TBufferMerger. We no longer use a separate thread for merging, which means we do not oversubscribe the machine anymore either.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1737:44,safe,safe,44,https://root.cern,https://github.com/root-project/root/pull/1737,1,['safe'],['safe']
Safety,"After applying all updates on CentOS 8 Stream, `roottest-root-treeformula-stl-make` started crashing reproducibly both with GCC 8.5.0 and Clang 13 (assuming I didn't do something stupid). ### Output; ```; Processing runmapvector.C...; Warning in <TClass::Init>: no dictionary for class MyEvent is available; ***********************************; * Row * Instance * data.firs *; ***********************************; * 0 * 0 * 3 *; ***********************************; ***********************************; * Row * Instance * data.seco *; ***********************************; * 0 * 0 * 5 *; * 0 * 1 * 7 *; ***********************************; free(): invalid next size (fast); ```. ### Backtrace; ```; #0 0x00007ffff6674a4f in raise () from /lib64/libc.so.6; #1 0x00007ffff6647db5 in abort () from /lib64/libc.so.6; #2 0x00007ffff66b7057 in __libc_message () from /lib64/libc.so.6; #3 0x00007ffff66be1bc in malloc_printerr () from /lib64/libc.so.6; #4 0x00007ffff66bfb58 in _int_free () from /lib64/libc.so.6; #5 0x00007ffff77bb30f in TClass::Destructor (this=this@entry=0x20ee770, obj=<optimized out>, dtorOnly=dtorOnly@entry=false) at /home/jhahnfel/ROOT/src/core/meta/src/TClass.cxx:5460 ; #6 0x00007fffe03c2cf3 in TBranchElement::ReleaseObject (this=0x26cebe0) at /home/jhahnfel/ROOT/src/tree/tree/src/TBranchElement.cxx:4671 ; #7 0x00007fffe03c539b in TBranchElement::ResetAddress (this=this@entry=0x26cebe0) at /home/jhahnfel/ROOT/src/tree/tree/src/TBranchElement.cxx:4734 ; #8 0x00007fffe03c5411 in TBranchElement::~TBranchElement (this=0x26cebe0, __in_chrg=<optimized out>) at /home/jhahnfel/ROOT/src/tree/tree/src/TBranchElement.cxx:982 ; #9 0x00007fffe03c5949 in TBranchElement::~TBranchElement (this=0x26cebe0, __in_chrg=<optimized out>) at /home/jhahnfel/ROOT/src/tree/tree/src/TBranchElement.cxx:975 ; #10 0x00007ffff778b8f8 in TObjArray::Delete (this=this@entry=0x1e683a8) at /home/jhahnfel/ROOT/src/core/cont/src/TObjArray.cxx:376 ; #11 0x00007fffe04281c0 in TTree::~TTree (this=0x1e68250, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9543:780,abort,abort,780,https://root.cern,https://github.com/root-project/root/issues/9543,1,['abort'],['abort']
Safety,"After ending Python 2 support, the build configuration can be simplified further:. * don't use the deprecated `PYTHONLIBS_FOUND` (https://cmake.org/cmake/help/latest/module/FindPythonLibs.html). * remove unused `FundNumPy.cmake` (the `FindPython` takes care of that). * remove some unnessecary aliases. * avoid redundant printouts and checks in CMake. * profit from targets like `Python3::Python` and `Python3::NumPy`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15401:305,avoid,avoid,305,https://root.cern,https://github.com/root-project/root/pull/15401,2,"['avoid', 'redund']","['avoid', 'redundant']"
Safety,After introducing cling it is not allowed to redefine already existing variables in the macro.; Therefore one always should use unique names.; Also type of created variable always should be specified - at least `auto`.; Now one can store geometry which is defined in `tutorials/geom/mp3player.C` macro together with all other components. Adjust `tutorials/geom/mp3player.C` macro to avoid many duplicated transformation objects - it is enough to have few of them. Do not use canvas with spaces in names in `tutorials/geom/geodemo.C`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11900:383,avoid,avoid,383,https://root.cern,https://github.com/root-project/root/pull/11900,1,['avoid'],['avoid']
Safety,"After reviewing the implementation of `RPageSinkBuf` and starting to prototype parallel RNTuple writing, I would like to propose moving the code related to descriptor building and serialization into a new class. The main observation here is that ""wrapping"" `RPageSink`s do not need that functionality, only the ""final"" sink that actually writes to files or DAOS. For now, I named the class `RPagePersistentSink`, but that's of course up for debate. Other options include ""final"" (even though that is ambiguous in the context of a class hierarchy) and ""serializing"". The first two commits may be useful independent of the rest of the series; the one to ""Avoid calling `PageSink::UpdateSchema` from `RPageSinkBuf`"" depends on moving the `Commit` implementations first (which access `fOpenColumnRanges` and `fOpenPageRanges`. *If* we decide that we want to introduce an intermediate class, we need to carefully benchmark with buffered writes disabled (ie without `RPageSinkBuf`) because there will now be two `virtual` function calls for every `Commit`; with `RPageSinkBuf` we avoid the duplicate serialization. I would expect negligible impact, but better to be sure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14142:653,Avoid,Avoid,653,https://root.cern,https://github.com/root-project/root/pull/14142,2,"['Avoid', 'avoid']","['Avoid', 'avoid']"
Safety,"After updating to `clang-14.0.6-1.module_el8.7.0+1198+0c3eb6e2.x86_64`, many tests started failing when compiling ROOT with Clang (134 tests in my configuration). The reason seems to be that Clang is now built with [`GCC_INSTALL_PREFIX=/opt/rh/gcc-toolset-12/root/usr`](https://git.centos.org/rpms/clang/c/4e0495208f843a286dc0d06d9abdc3433a66983a) to detect and use `libstdc++` from GCC 12. Even if that was not the case, https://github.com/llvm/llvm-project/commit/35aaf548237a4f213ba9d95de53b33c5ce1eadce in Clang 15 will have a similar effect for people building the compiler from source. According to our own documentation, ROOT does not guarantee [""compatibility with compilers shipped with `devtoolsets` on CentOS or Red Hat""](https://root.cern/install/build_from_source/#caveats) which right now only leaves building with the system-default GCC 8.5 to get a fully working installation of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11601:351,detect,detect,351,https://root.cern,https://github.com/root-project/root/issues/11601,1,['detect'],['detect']
Safety,"All functions in RooRealSumFunc and RooRealSumPdf are overloaded in; exactly the same way. The two classes only differ in the base class. To avoid code duplication, the member functions are implemented as private; static functions in RooRealSumPdf, which the friend class RooRealSumFunc; can also use. This pattern might be used also to avoid further code; duplication, also with the other addition classes like RooAddition and; RooAddPdf in the future. This solution was preferred over changing the classes themselves, because; the right to run into schema evolution problems is much higher then. This closes also the RooRealSumFunc modernization issue #8374, as now; its implementation uses the code from the RooRealSumPdf which is already; modernized.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10825:141,avoid,avoid,141,https://root.cern,https://github.com/root-project/root/pull/10825,2,['avoid'],['avoid']
Safety,"All the RooFit tutorials were replicated in the `root/roofitcore/test` directory to be used as tests, which are never run as part of the unit tests. Actually, the RooFit tutorials made their way into a unit test in the `stressRooFit` test suite, which is run by `ctest` also in the CI. That means the tutorial files in `root/roofitcore/test` are redundant, and also badly out of sync with the actual tutorials and stressRooFit because they are never tested automatically.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11361:346,redund,redundant,346,https://root.cern,https://github.com/root-project/root/pull/11361,1,['redund'],['redundant']
Safety,"Allocate (GSLRngWrapper.h:99); ==12320== by 0x8223765: ROOT::Math::GSLMCIntegrator::GSLMCIntegrator(char const*, double, double, unsigned int) (GSLMCIntegrator.cxx:117); ==12320== by 0x108BF5: main (mcintegrator.cpp:8); ==12320==; ==12320== LEAK SUMMARY:; ==12320== definitely lost: 319,984 bytes in 19,999 blocks; ==12320== indirectly lost: 98,770,000 bytes in 19,754 blocks; ==12320== possibly lost: 1,225,000 bytes in 245 blocks; ==12320== still reachable: 340,874 bytes in 4,262 blocks; ==12320== suppressed: 0 bytes in 0 blocks; ==12320== Reachable blocks (those to which a pointer was found) are not shown.; ==12320== To see them, rerun with: --leak-check=full --show-leak-kinds=all; ==12320==; ==12320== For counts of detected and suppressed errors, rerun with: -v; ==12320== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0); ```. After fix:; ```; valgrind --tool=memcheck --leak-check=full --show-leak-kinds=definite \; --undef-value-errors=no ./mcintegrator. ==14294== Memcheck, a memory error detector; ==14294== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==14294== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info; ==14294== Command: ./mcintegrator; ==14294==; ==14294==; ==14294== HEAP SUMMARY:; ==14294== in use at exit: 335,858 bytes in 4,260 blocks; ==14294== total heap usage: 67,782 allocs, 63,522 frees, 101,539,078 bytes allocated; ==14294==; ==14294== LEAK SUMMARY:; ==14294== definitely lost: 0 bytes in 0 blocks; ==14294== indirectly lost: 0 bytes in 0 blocks; ==14294== possibly lost: 0 bytes in 0 blocks; ==14294== still reachable: 335,858 bytes in 4,260 blocks; ==14294== suppressed: 0 bytes in 0 blocks; ==14294== Reachable blocks (those to which a pointer was found) are not shown.; ==14294== To see them, rerun with: --leak-check=full --show-leak-kinds=all; ==14294==; ==14294== For counts of detected and suppressed errors, rerun with: -v; ==14294== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/928:3018,detect,detector,3018,https://root.cern,https://github.com/root-project/root/pull/928,2,['detect'],"['detected', 'detector']"
Safety,Allow user-defined safety to be drawn in TGeoManager::CheckPoint,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14851:19,safe,safety,19,https://root.cern,https://github.com/root-project/root/pull/14851,1,['safe'],['safety']
Safety,"Allow users to request multithreaded (de)compression even if IMT is not enabled globally with `ROOT::EnableImplicitMT()`. This required a change to `TTaskGroup` to avoid checking if IMT was enabled -- as I understand it, we can use TBB even if IMT isn't turned on because we don't use `RTaskArena`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8334:164,avoid,avoid,164,https://root.cern,https://github.com/root-project/root/pull/8334,1,['avoid'],['avoid']
Safety,Allows to avoid several problems when browser app already running.; Used for chrome and firefox browsers,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4513:10,avoid,avoid,10,https://root.cern,https://github.com/root-project/root/pull/4513,1,['avoid'],['avoid']
Safety,Already in virtual class introduce IsWeb() method.; Let detect web canvas without need to link against `Gpad` library. Fixes #13816,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13817:56,detect,detect,56,https://root.cern,https://github.com/root-project/root/pull/13817,1,['detect'],['detect']
Safety,Also avoid some heap allocations of `RooArgSet`s in `RooAbsPdf`. See commit messages for more information. The leak was a problem reported in the forum:; https://root-forum.cern.ch/t/roomomentmorph-slow-memory-leak/45062,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8238:5,avoid,avoid,5,https://root.cern,https://github.com/root-project/root/pull/8238,1,['avoid'],['avoid']
Safety,"Also simplify LinkDef.h file for TGraph2DPainter.; One can use ClassDef(TGraph2DPainter,0) to avoid complication by dictionary generation.; Class is not intend to be stored in the ROOT file",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4954:94,avoid,avoid,94,https://root.cern,https://github.com/root-project/root/pull/4954,1,['avoid'],['avoid']
Safety,"Although each thread will get its own copy of TGenCollectionStreamer,; that copy is made by calling Generate on a global instance of the class.; Therefore Generate needs to be thread safe. This translates to requiring; TGenCollectionProxy::Initialize be thread safe. This required that; TGenCollectionProxy::fValue be atomic and be the last value to be set; in TGenCollectionProxy::InitializeEx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/57:183,safe,safe,183,https://root.cern,https://github.com/root-project/root/pull/57,4,['safe'],['safe']
Safety,"Although padding is implementation-dependent, most add enough padding at the end to comply with the requirements of the type with strictest alignment.; Given that `GetValueSize()` is used to allocate memory for the described type, not accouting trailing padding may cause issues. `ROOT::Experimental::RFieldDescriptor::CreateField()` has a direct use of RRecordField. Despite it seems to be working in all tested platforms, be on the safe side and add this padding. This, does not affect derived classes `RPairField` and `RTupleField`, that override determination of the size of the type. ## Checklist:; - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10790:434,safe,safe,434,https://root.cern,https://github.com/root-project/root/pull/10790,1,['safe'],['safe']
Safety,An small bug detected in LCG98 that only affect python2; JupyROOT is not loaded when you are importing ROOT in the notebook. this code fix this problem. Omar.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6305:13,detect,detected,13,https://root.cern,https://github.com/root-project/root/pull/6305,1,['detect'],['detected']
Safety,And avoid nullptr dereference,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1726:4,avoid,avoid,4,https://root.cern,https://github.com/root-project/root/pull/1726,1,['avoid'],['avoid']
Safety,Another thread safety fix for TFormula,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/27:15,safe,safety,15,https://root.cern,https://github.com/root-project/root/pull/27,1,['safe'],['safety']
Safety,"Apparently xrootd 5.3.1 have a different sha256 hash (not clear how it could happened or if maybe in PR I was using old). Failure was detected on centos8 rootbench machine (https://lcgapp-services.cern.ch/root-jenkins/job/root-benchmark/):; ```; -- verifying file...; file='/data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/nortcxxmod/build/builtins/xrootd/XROOTD-prefix/src/v5.3.1.tar.gz'; -- SHA256 hash of; /data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/nortcxxmod/build/builtins/xrootd/XROOTD-prefix/src/v5.3.1.tar.gz; does not match expected value; expected: '1194ba435dc1e243f3cdb8273f6385407183799faf7622a582a828f4aff6807d'; actual: '0800b4c6444591a6514c5b81b2c4c79439875136ab2267ce4bed99cb94ead6e6'; -- Hash mismatch, removing...; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9103:134,detect,detected,134,https://root.cern,https://github.com/root-project/root/pull/9103,1,['detect'],['detected']
Safety,"Applies the clang-tidy suggestions from the following checks, which are the same as in the CMSSW `.clang-tidy`, only that the checks that replace copies with `const` references are removed:. ```; ,boost-use-to-string,; ,misc-definitions-in-headers,; ,misc-string-compare,; ,misc-uniqueptr-reset-release,; ,modernize-deprecated-headers,; ,modernize-make-shared,; ,modernize-make-unique,; ,modernize-use-bool-literals,; ,modernize-use-equals-delete,; ,modernize-use-nullptr,; ,modernize-use-override,; ,performance-inefficient-algorithm,; ,performance-inefficient-vector-operation,; ,performance-faster-string-find,; ,performance-move-const-arg,; ,readability-container-size-empty,; ,readability-redundant-string-cstr,; ,readability-static-definition-in-anonymous-namespace,; ,readability-uniqueptr-delete-release; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14011:694,redund,redundant-string-cstr,694,https://root.cern,https://github.com/root-project/root/pull/14011,2,['redund'],['redundant-string-cstr']
Safety,Apply some bug fixes in the TKDE class.; - Fix initialization for the automatic binning case; - Fix setting the bins using the setter functions.; - Fix mirroring for binned case (fix ROOT-8488); - Fix MirrorAsym case ; - Fix computation of non-adaptive bandwidth for binned case; ; Add also some improvements in the class avoid some unneeded re-initialization and some small speedup in the kernel calculations.; Improve also the documentations,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7096:322,avoid,avoid,322,https://root.cern,https://github.com/root-project/root/pull/7096,1,['avoid'],['avoid']
Safety,"Apply some small improvements in Minuit2. ; When using strategy 0 (i.e. when Hesse is not computed at the end of the minimization), the same state is added 2 times in the FunctionMinimum class. This is now fixed by adding a flag runHessian in the VariableMetric code. Add another improvement: do not compute Hessian during the iteration.When not using debug mode the Hessian, which requires a matrix inversion, was computed for each iteration. This is now fixed by avoid its computation, that is not needed by the algorithm.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7109:465,avoid,avoid,465,https://root.cern,https://github.com/root-project/root/pull/7109,1,['avoid'],['avoid']
Safety,Apply the suggestions by the following two checks:. * `cppcoreguidelines-prefer-member-initializer`; * `modernize-use-default-member-init`. This makes the code much less verbose and avoids possible mistakes in the initialization. I carefully went over the changes manually to make sure that they are correct.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14070:182,avoid,avoids,182,https://root.cern,https://github.com/root-project/root/pull/14070,1,['avoid'],['avoids']
Safety,"Arguments for removing the splash screen:; * It introduces a dependency of the `root` executable of graphics libraries, like X11 on Linux or Cocoa on macOS.; * The Windows version is not kept up to date ([see the list of core developers](https://github.com/root-project/root/blob/master/core/winnt/src/Win32Splash.cxx#L32)).; * According to [Wikipedia](https://en.wikipedia.org/wiki/Splash_screen), ""splash screens are typically used by particularly large applications to notify the user that the program is in the process of loading"". The ROOT interpreter takes almost no time to load today. Probably that was different in the past, and a splash screen was justified back then.; * Users don't see it unless they run `root` with the `-a` option. In this case, the interpreter quits immediately (I think the option only exists just to show the splash screen for the historical record).; * It [doesn't work on multi-display setups](https://github.com/root-project/root/issues/14819).; * `root -b -a` turns on display even if you think it should run in batch mode; * It doesn't work on Wayland (see #15723) --> EDIT: It does work on wayland, it's just that the Xs were not fine.; * We're avoiding three `FIXME`s in the CMakeLists.txt in case of Cocoa. Closes #14819.; Closes [ROOT-10948](https://its.cern.ch/jira/browse/ROOT-10948).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15056:1185,avoid,avoiding,1185,https://root.cern,https://github.com/root-project/root/pull/15056,1,['avoid'],['avoiding']
Safety,"As discussed in #12376, the release candidate tag was to be bumped to RC2 after late model extension + split encoding is available. In principle, it's safe to do it now. ## Checklist:; - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13566:151,safe,safe,151,https://root.cern,https://github.com/root-project/root/pull/13566,1,['safe'],['safe']
Safety,"As noted in d0088608, using `abs()` without `std::` can be very dangerous because there might be no overload for floating point numbers. To make sure that no bugs associated to this can happen, I suggest to avoid using `abs()` without `std::` all the way in RooFit. Also, to go with modern C++ all the way, the occurences of `fabs()` and `std::fabs()` are also replaced with `std::abs()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11986:207,avoid,avoid,207,https://root.cern,https://github.com/root-project/root/pull/11986,1,['avoid'],['avoid']
Safety,"As per discussion with Axel: have the ROOT interpreter warn about nullptr dereferences, but avoid injecting the checks in code that is not used interactively, as they bring a notable slowdown even to bug-free code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9112:92,avoid,avoid,92,https://root.cern,https://github.com/root-project/root/issues/9112,1,['avoid'],['avoid']
Safety,"As pointed out by ATLAS, it's currently not possible to use a `std::vector` with a non-default allocator in RNTuple:; ```c++; #include <ROOT/RNTupleModel.hxx>. #include <scoped_allocator>; #include <vector>. void ntuple_vector_allocator() {; auto model = ROOT::Experimental::RNTupleModel::CreateBare();; model->MakeField<std::vector<int, std::scoped_allocator_adaptor<std::allocator<int>>>>(""v"");; }; ```; leads to; ```; Processing ntuple_vector_allocator.C...; terminate called after throwing an instance of 'ROOT::Experimental::RException'; what(): vector<int,scoped_allocator_adaptor<allocator<int> > > is not supported; At:; ROOT::Experimental::RClassField::RClassField(std::string_view, std::string_view, TClass *) [/home/jhahnfel/ROOT/src/tree/ntuple/v7/src/RField.cxx:1807]. Aborted (core dumped); ```; This is because `RField` is only partially specialized for `std::vector<ItemT>`, so a non-default `Allocator` falls back to the default `RField` declaration (which assumes it's a class and checks that it's not in `std` namespace). Note that in principle, this affects all STL containers. For many of them, there are other template parameters, for example `Hash` for `std::unordered_set`:; ```c++; #include <ROOT/RNTupleModel.hxx>. #include <unordered_set>. struct IntHash : public std::hash<int> {};. void ntuple_unordered_set_hash() {; auto model = ROOT::Experimental::RNTupleModel::CreateBare();; model->MakeField<std::unordered_set<int, IntHash>>(""s"");; }; ```; leads to; ```; Processing ntuple_unordered_set_hash.C...; terminate called after throwing an instance of 'ROOT::Experimental::RException'; what(): unordered_set<int,IntHash,equal_to<int>,allocator<int> > is not supported; At:; ROOT::Experimental::RClassField::RClassField(std::string_view, std::string_view, TClass *) [/home/jhahnfel/ROOT/src/tree/ntuple/v7/src/RField.cxx:1807]. Aborted (core dumped); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16754:782,Abort,Aborted,782,https://root.cern,https://github.com/root-project/root/issues/16754,2,['Abort'],['Aborted']
Safety,"As pointed out in ROOT-10294, when using the CMSSW environment,; the lookup of an enum constant in the list of attributes of; the namespace does not succeed. This commit passes on the TEnum obtained when creating the; namespace proxy to the addition of the enum constants as; properties of the namespace, so that the underlying type of; the enum can be taken from the TEnum, and therefore we; avoid the lookup in the list of attributes of the namespace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4318:393,avoid,avoid,393,https://root.cern,https://github.com/root-project/root/pull/4318,1,['avoid'],['avoid']
Safety,"As reported by @behrenhoff MethodDL did not have so far an implementation for the dropout. ; (see https://root-forum.cern.ch/t/method-kdl-in-tmva/32863); This PR fixes the dropout for dense layers, implementing what has been done for the previous MethodDNN. . The implementation removes (by setting to zero) randomly input nodes and re-scale the surviving ones by a factor 1/(1.- dropout_probability). In this way no changes are needed for testing and evaluating a trained network with dropout. . The PR applies also some other small improvements such as print out of optimizer names and some fixes in the cross-evaluation function to avoid NaN outputs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3516:635,avoid,avoid,635,https://root.cern,https://github.com/root-project/root/pull/3516,1,['avoid'],['avoid']
Safety,"As reported in ROOT-9463, the result of GetColumnNames is redundant. A simple reproducer:; ```; TFile f(""f.root"", ""recreate"");; TTree t(""t"", ""t"");; int a;; t.Branch(""a"", &a);; a = 42;; t.Fill();; t.Write();; f.Close();; ROOT::RDataFrame df(""t"", ""f.root"");. for (auto x : df.GetColumnNames()); std::cout <<x <<std::endl;; ```. This redundancy is now not exposed to the user. **It would be nice** to have more tests on real use cases.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2443:58,redund,redundant,58,https://root.cern,https://github.com/root-project/root/pull/2443,2,['redund'],"['redundancy', 'redundant']"
Safety,"As reported in https://root-forum.cern.ch/t/pure-virtual-method-called-on-hadding-tfiles-with-tfriendelements/46836/6; (see there for reproducer), hadd at tear down accesses already deleted objects. In version of ROOT equal or newer than v6.22/08 and v6.24/00, the problem appears only in a slow merge. (for example `hadd -f0 output.root testroot_1,root testroot_2.root`) . The resulting stack trace is:. ```; ==1241== Process terminating with default action of signal 6 (SIGABRT); ==1241== at 0x5BB618B: raise (raise.c:51); ==1241== by 0x5B9592D: abort (abort.c:100); ==1241== by 0x58C2910: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28); ==1241== by 0x58CE38B: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28); ==1241== by 0x58CE3F6: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28); ==1241== by 0x58CF154: __cxa_pure_virtual (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28); ==1241== by 0x551449A: TCollection::RecursiveRemove(TObject*) (TCollection.cxx:579); ==1241== by 0x4A345D0: TTree::RecursiveRemove(TObject*) (TTree.cxx:7857); ==1241== by 0x551F16F: TList::RecursiveRemove(TObject*) (TList.cxx:813); ==1241== by 0x5518879: THashList::RecursiveRemove(TObject*) (THashList.cxx:354); ==1241== by 0x543C003: TROOT::RecursiveRemove(TObject*) (TROOT.cxx:2455); ==1241== by 0x496B26E: ROOT::CallRecursiveRemoveIfNeeded(TObject&) (TROOT.h:398); ==1241== by 0x5512E61: TCollection::~TCollection() (TCollection.cxx:189); ==1241== by 0x5506D19: TSeqCollection::~TSeqCollection() (TSeqCollection.h:37); ==1241== by 0x551BE8E: TList::~TList() (TList.cxx:92); ==1241== by 0x551BEAD: TList::~TList() (TList.cxx:95); ==1241== by 0x4A1DE02: TTree::~TTree() (TTree.cxx:975); ==1241== by 0x4A1E2C7: TTree::~TTree() (TTree.cxx:1023); ==1241== by 0x4A308E9: TTree::Merge(TCollection*, TFileMergeInfo*) (TTree.cxx:6908); ==1241== by 0x4960BA2: ROOT::merge_TTree(void*, TCollection*, TFileMergeInfo*) (G__Tree.cxx:4209); ==1241== by 0x4E739D6: TFileMerger::MergeOne(TDirectory*, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9017:548,abort,abort,548,https://root.cern,https://github.com/root-project/root/issues/9017,2,['abort'],['abort']
Safety,"As reported in issue https://github.com/root-project/root/issues/11421, the fact that in the RooFit command; arguments, the `RooArgSet`s are often stored by pointer is still a; problem. I attempted before to circumvent the problem by detecting; potential lifetime issues by having a dedicated `RooArgSet&&` overloads; that resulted in RooCmdArgs that owned copied of the RooArgSets. However, this still didn't work for the case where the Python collection; pythonizations are used in PyROOT, because there the `RooArgSet &&`; overloads are not hit. I realized now that the `RooCmdArg` class already has the slots to store; RooArgSets by value, which was alredy used by a few RooFit command; arguments. When these `set` slots are used, there are no ownership; issues. This commit suggests to always use these `set` slots for RooArgSets.; This entailed changing the functions that make use of the command; arguments, migrating from `defineObject` to `defineSet`. All the hacks to get owned copies of the RooArgSets and `RooArgSet&&`; overloads can now be removed. Now that the slot indices for the sets was changed in many RooFit; command arguments, there is only the caveat that command arguments are; not backwards compatible anymore. However, this should not be any; problem because `RooCmdArgs` are not supposed to be written to files; anyway. To explicitely disallow this and prevent any silet backwards; compatibility issue, the class version of the RooCmdArg was set to zero; to disable IO. A first commit in this PR fixes also an other issue where the wrong command argument name was used in the RooMCStudy. Closes https://github.com/root-project/root/issues/11421.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11425:234,detect,detecting,234,https://root.cern,https://github.com/root-project/root/pull/11425,1,['detect'],['detecting']
Safety,"As seen in https://github.com/cms-sw/cmssw/issues/40091 the code in `TPad::Close`:; ```; if (fPrimitives); fPrimitives->Clear();; if (fView) {; if (!ROOT::Detail::HasBeenDeleted(fView)) delete fView;; fView = nullptr;; }; if (fFrame) {; if (!ROOT::Detail::HasBeenDeleted(fFrame)) delete fFrame;; fFrame = nullptr;; }; ```; is failing in the case of reading a pad from a file in at least some circumstances. `TPad::Streamer` explicit set the bit `kCanDelete` on all objects in the list of primitives, thus including the frame which have their `kCanDelete` bit explicitly reset elsewhere (in the code run during the initial creation of the frame and view). This means that avoiding the a double deletion (the first is now during the `fPrimitives->Clear()`) relies on the heuristic of `HasBeenDeleted` to work properly, at least in the case seen in cmssw above) it does not and lead to crash.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11747:671,avoid,avoiding,671,https://root.cern,https://github.com/root-project/root/issues/11747,1,['avoid'],['avoiding']
Safety,"As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/3440/LABEL=ROOT-centos9,SPEC=noimt,V=master/testReport/junit/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_lz4_compr_level1 : ; ```; hadd Target file: hsimple401.root; hadd compression setting for all output: 401; hadd Source file 1: hsimple.root; hadd Target path: hsimple401.root:/; -- TEST COMMAND -- ; cd /home/sftnight/build/night/LABEL/ROOT-centos9/SPEC/noimt/V/master/build/roottest/root/io/filemerger; /usr/bin/timeout -s USR2 270s /home/sftnight/build/night/LABEL/ROOT-centos9/SPEC/noimt/V/master/build/bin/root.exe -q -l -b /home/sftnight/build/night/LABEL/ROOT-centos9/SPEC/noimt/V/master/roottest/root/io/filemerger/testSimpleFile.C(""hsimple401.root"",25000,401,418980,7); -- BEGIN TEST OUTPUT --. Processing /home/sftnight/build/night/LABEL/ROOT-centos9/SPEC/noimt/V/master/roottest/root/io/filemerger/testSimpleFile.C(""hsimple401.root"",25000,401,418980,7)...; Checking hsimple401.root; (int) 1000. -- END TEST OUTPUT --; -- BEGIN TEST ERROR --; Error in <testSimpleFile>: Disk size of hsimple401.root should have been 418980 but is 418988 (tolerance 7 bytes). -- END TEST ERROR --; CMake Error at /home/sftnight/build/night/LABEL/ROOT-centos9/SPEC/noimt/V/master/build/RootTestDriver.cmake:186 (message):; got exit code 255 but expected 0; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12438:528,timeout,timeout,528,https://root.cern,https://github.com/root-project/root/issues/12438,1,['timeout'],['timeout']
Safety,Assign directly to static variable to avoid race condition,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/48:38,avoid,avoid,38,https://root.cern,https://github.com/root-project/root/pull/48,1,['avoid'],['avoid']
Safety,"Assuming that `page_size` is a power of 2, the calculation of the base address of the page can be simplified and avoid a division. According to POSIX, either `MS_SYNC` or `MS_ASYNC` must be specified when calling `msync()`. Failure to include one of these flags will cause `msync()` to fail on some systems. When `msync()` returns -1, the pointer is only considered invalid when errno is set to `ENOMEM`. In principle, the other possible values for errno won't happen, but if they do, that should be considered an error, hence the assert condition needed an update. `EBUSY` shouldn't happen since we do not add `MS_INVALIDATE` to flags, and `EINVAL` shouldn't happen because we always pass a multiple of the page size to msync(). `EFAULT` is only used in Linux 2.4.18 and earlier instead of `ENOMEM`. See #4136 for more information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4159:113,avoid,avoid,113,https://root.cern,https://github.com/root-project/root/pull/4159,1,['avoid'],['avoid']
Safety,"At least according to my limited tests, removing the queuing mechanism from TBufferMerger is equally fast because it avoids the overhead of preparing a TBufferFile for queuing, and uses less memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14034:117,avoid,avoids,117,https://root.cern,https://github.com/root-project/root/pull/14034,1,['avoid'],['avoids']
Safety,Avoid C-Style Casts in Dictionary,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13301:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/13301,1,['Avoid'],['Avoid']
Safety,Avoid CDT doc in ROOT doc,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14066:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/14066,1,['Avoid'],['Avoid']
Safety,Avoid Python globbing when we actually need TChain globbing,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8490:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/issues/8490,1,['Avoid'],['Avoid']
Safety,Avoid ROOT fails reading objects derived from TH2Poly,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4560:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/4560,1,['Avoid'],['Avoid']
Safety,Avoid Snapshot errors when updating directories,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4964:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/4964,1,['Avoid'],['Avoid']
Safety,Avoid TPad::fFrame double delete when read from file,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11763:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/11763,1,['Avoid'],['Avoid']
Safety,Avoid XRootD dependency in public headers,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16660:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/16660,1,['Avoid'],['Avoid']
Safety,Avoid a double delete of histograms in TFractionFitter (ROOT-10752),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6255:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/6255,1,['Avoid'],['Avoid']
Safety,Avoid access to deleted object (indirectly) from TH1::Clone.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1818:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/1818,1,['Avoid'],['Avoid']
Safety,Avoid auto-parsing for std::pair during I/O init.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6061:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/6061,1,['Avoid'],['Avoid']
Safety,Avoid auto-parsing when core/meta does:. * Search for a enum type; * Search for __base_pair; * Search for one of ROOT synthetic class (for I/O customization rules). where a class is expected.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6445:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/6445,1,['Avoid'],['Avoid']
Safety,Avoid being able to create too many workers in hadd,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2736:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/2736,1,['Avoid'],['Avoid']
Safety,Avoid calling TTree::ChangeFile if file is TMemFile,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6570:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/6570,1,['Avoid'],['Avoid']
Safety,Avoid cloning the nuisance pdf single component. Make always a RooProdPdf of nuisances (constraints) also when there is a single term. This avoid cloning the real pdf components and will fix the noRounding bug in the Poisson constraints happening in the AsymptoticCalculator (ROOT-10920),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6048:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/6048,2,"['Avoid', 'avoid']","['Avoid', 'avoid']"
Safety,Avoid cloning the pdf when creating a NuisancePdf in RooStats::MakeNuisancePdf.; Without the cloning then the call in the AsymptoticCalculator to setNoRounding(true) is effective.; This fixes ROOT-10920. Also apply a small fix when setting an external nuisance pdf in the RooStats HybridCalculator,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6047:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/6047,1,['Avoid'],['Avoid']
Safety,Avoid complaint about external changes when calling TTreeReader::GetEntries(true).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3936:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/3936,2,['Avoid'],['Avoid']
Safety,"Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases; more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and; consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is; the 'public' address since only information are IP, port and name ... and the name is more or so; arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try; to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to; a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen; by the server.; For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine); ```; void GetPrimaryIp(char* buffer, size_t buflen); {; assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);; assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;; uint16_t kDnsPort = 53;; struct sockaddr_in serv;; memset(&serv, 0, sizeof(serv));; serv.sin_family = AF_INET;; serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);; serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));; assert(err != -1);. sockaddr_in name;; socklen_t namelen = sizeof(name);; err = getsockname(sock, (sockaddr*) &name, &namelen);; assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);; assert(p);. close(sock);; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4310:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/4310,2,"['Avoid', 'avoid']","['Avoid', 'avoid']"
Safety,Avoid crash during doxygen generation,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3563:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/3563,1,['Avoid'],['Avoid']
Safety,Avoid crash in IO and Prevent split in presence of Streamer free function,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4192:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/4192,1,['Avoid'],['Avoid']
Safety,Avoid crashes due to static initialization order,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10309:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/10309,1,['Avoid'],['Avoid']
Safety,Avoid deadlock caused by Cocoa code taking the ROOT lock,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1573:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/1573,1,['Avoid'],['Avoid']
Safety,Avoid deleting TFormulas twice,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10310:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/10310,1,['Avoid'],['Avoid']
Safety,Avoid double delete by registering to TGeoManager reflected shape ass…,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6012:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/6012,2,['Avoid'],['Avoid']
Safety,Avoid double increment to loop variable,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/499:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/499,1,['Avoid'],['Avoid']
Safety,Avoid duplicate detection of build byproducts,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/640:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/640,2,"['Avoid', 'detect']","['Avoid', 'detection']"
Safety,Avoid expansion of JSROOT drawing on full HTML page. Like this one: https://root.cern/doc/master/rbox_8cxx.html,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16368:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/16368,1,['Avoid'],['Avoid']
Safety,Avoid exposing of such big class when not necessary - especially for TF1.h,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5068:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/5068,1,['Avoid'],['Avoid']
Safety,Avoid failure of v7/line.cxx tutorial in such case. Disable headless in CEF and QWebEngine plugins.; Both do not provide any functionality without X-server running,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4880:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/4880,1,['Avoid'],['Avoid']
Safety,Avoid gPad usage when text size given in pixels.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12359:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/12359,1,['Avoid'],['Avoid']
Safety,Avoid generating gif output files in tutorials. Gif might not be available on some machine snd if a tutorial generates a gif it will produce an error when generating the doxygen documentation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9588:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/9588,1,['Avoid'],['Avoid']
Safety,Avoid getting confused by out-of-range request to TTreeCache,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2184:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/2184,1,['Avoid'],['Avoid']
Safety,Avoid gif,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9588:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/9588,1,['Avoid'],['Avoid']
Safety,"Avoid global stack for TCling's mutex states. This solves race condition and ordering issues for the content of TCling::fInitialMutex. Rather than relying on a global stack of state, leverage the fact that the code that temporarily; suspend the interpreter lock during user-code execution is already keeping/stashing away some; information. Extend that code to stash all the necessary information (was 'only' the delta; and is now the delta + initial state + recurse count.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6301:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/6301,1,['Avoid'],['Avoid']
Safety,Avoid having to modify TStreamerSTL when streaming it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5319:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/5319,1,['Avoid'],['Avoid']
Safety,Avoid including any headers from the `CPyCppyy/src` directory.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14494:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/14494,1,['Avoid'],['Avoid']
Safety,Avoid inclusion of arrow testing stuff,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13523:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/13523,1,['Avoid'],['Avoid']
Safety,Avoid interger overflow in TFile::GetBestBuffer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4444:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/4444,1,['Avoid'],['Avoid']
Safety,Avoid ldap.h sneaking in from wrong location as reported in SPI-1120,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3193:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/3193,1,['Avoid'],['Avoid']
Safety,Avoid leaking TBaskets in Bulk I/O operations,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11862:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/11862,1,['Avoid'],['Avoid']
Safety,"Avoid loading ROOT modules while Clang is instantiating a template class from STL, leading to ODR checks with an incomplete class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11514:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/11514,1,['Avoid'],['Avoid']
Safety,Avoid memory blowup of TBufferMerger,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14034:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/14034,1,['Avoid'],['Avoid']
Safety,Avoid memory leak in TROOT::GetFunction(),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14969:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/14969,1,['Avoid'],['Avoid']
Safety,Avoid modification of StreamerInfo during their streaming and thus remove the need for lock acquisition there.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1408:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/1408,1,['Avoid'],['Avoid']
Safety,Avoid needing to type `ROOT.ROOT` twice in PyROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8745:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/issues/8745,1,['Avoid'],['Avoid']
Safety,Avoid non ASCII characters in CREDITS,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5362:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/5362,1,['Avoid'],['Avoid']
Safety,Avoid null pointer dereference,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6464:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/6464,2,['Avoid'],['Avoid']
Safety,Avoid null pointer dereference in TPad::CopyBackgroundPixmaps,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6545:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/6545,1,['Avoid'],['Avoid']
Safety,Avoid null pointer dereference in TPad::CopyBackgroundPixmaps. Tag @couet,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6545:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/6545,1,['Avoid'],['Avoid']
Safety,Avoid null pointer dereference in TPad::DrawClassObject,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6544:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/6544,1,['Avoid'],['Avoid']
Safety,Avoid null pointer dereference in TPad::DrawClassObject. Tag @couet,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6544:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/6544,1,['Avoid'],['Avoid']
Safety,Avoid null pointer dereference in TPad::SetCrosshair,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6546:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/6546,1,['Avoid'],['Avoid']
Safety,Avoid null pointer dereference in TPad::SetCrosshair. Tag @couet,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6546:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/6546,1,['Avoid'],['Avoid']
Safety,Avoid null pointer dereference.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6459:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/6459,1,['Avoid'],['Avoid']
Safety,Avoid null pointer dereference. Tag @couet,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6543:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/6543,1,['Avoid'],['Avoid']
Safety,Avoid null pointer dereference.; Fixes crash in the codes like; ```; TPad* c= new TPad();; c->DivideSquare(4);; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6459:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/6459,1,['Avoid'],['Avoid']
Safety,Avoid null pointer dereference; Tag @couet,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6464:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/6464,1,['Avoid'],['Avoid']
Safety,Avoid nullptr dereference in TDirectoryFile::GetKey.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1584:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/1584,1,['Avoid'],['Avoid']
Safety,Avoid out of memory during linking regardless of build type,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14111:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/14111,1,['Avoid'],['Avoid']
Safety,Avoid out-of-bound read.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1997:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/1997,1,['Avoid'],['Avoid']
Safety,Avoid out-of-bounds vector element access,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11704:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/11704,1,['Avoid'],['Avoid']
Safety,Avoid over-sizing basket when they contain fixed size data.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1998:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/1998,1,['Avoid'],['Avoid']
Safety,Avoid pad creation with W<=0 or H<=0,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6396:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/6396,1,['Avoid'],['Avoid']
Safety,Avoid pointer subtraction with null pointers,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9969:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/9969,1,['Avoid'],['Avoid']
Safety,Avoid potential problems with other older nlohmann version like 3.6,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10838:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/10838,1,['Avoid'],['Avoid']
Safety,Avoid potential problems with other older nlohmann version like 3.6. Fixes #10814,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10817:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/10817,1,['Avoid'],['Avoid']
Safety,Avoid precision issues,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5491:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/5491,1,['Avoid'],['Avoid']
Safety,Avoid race condition between tutorial/roofit/rf512_wsfactory_oper.C and tutorial/roofit/rf512_wsfactory_oper.py,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11643:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/11643,1,['Avoid'],['Avoid']
Safety,Avoid re-jitting distributed tasks in the same process,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12363:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/12363,1,['Avoid'],['Avoid']
Safety,Avoid recursive powershell.exe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12575:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/12575,1,['Avoid'],['Avoid']
Safety,Avoid redundant read (both unzipping and unstreaming in case basket are not perfectly aligned and same size),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4568:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/4568,2,"['Avoid', 'redund']","['Avoid', 'redundant']"
Safety,Avoid registering to TGeoManager reflected assemblies.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6002:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/6002,1,['Avoid'],['Avoid']
Safety,Avoid searching in the standard system environment variables (i.e. PATH),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1172:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/1172,1,['Avoid'],['Avoid']
Safety,Avoid self comparison when sorting RooAbsArg,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8111:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/8111,1,['Avoid'],['Avoid']
Safety,Avoid setting fCollProxy multiple times.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2834:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/2834,2,['Avoid'],['Avoid']
Safety,Avoid spurrious errors message about iteration not set in ClassInfo.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1300:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/1300,1,['Avoid'],['Avoid']
Safety,Avoid spurrious header file parsing in TFileMerger,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4603:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/4603,1,['Avoid'],['Avoid']
Safety,Avoid stdlib.h in GUI includes ROOT-10336,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4486:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/4486,1,['Avoid'],['Avoid']
Safety,Avoid streaming a copy of the TPaveStats parent during the TH1 cloning process.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5597:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/5597,1,['Avoid'],['Avoid']
Safety,Avoid strict zero comparison in complex_quartic,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14291:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/14291,1,['Avoid'],['Avoid']
Safety,Avoid surrounding functions with brackets in GDML expressions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2574:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/2574,1,['Avoid'],['Avoid']
Safety,Avoid taking a lock if list of bases has already been computed.; Still need to reason about thread-safety prior to merging.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/957:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/957,2,"['Avoid', 'safe']","['Avoid', 'safety']"
Safety,Avoid template instantiation during tear down.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/5462,1,['Avoid'],['Avoid']
Safety,Avoid testing that an exception is thrown by cling on Apple M1,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9544:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/9544,2,['Avoid'],['Avoid']
Safety,Avoid the interpreter to query info for array pythonizations,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15011:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/15011,1,['Avoid'],['Avoid']
Safety,Avoid to deal with unique_ptrs created by the compiler in jitted code.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1121:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/1121,1,['Avoid'],['Avoid']
Safety,Avoid undefined behavior in RANLUX++,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8522:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/8522,1,['Avoid'],['Avoid']
Safety,Avoid undefined behavior in RANLUX++ [v6.24],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8568:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/8568,1,['Avoid'],['Avoid']
Safety,Avoid useless construction/destruction of imtHelper in TTree::Fill(),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/741:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/741,1,['Avoid'],['Avoid']
Safety,Avoid using NumCpu with strategy=3 (hybrid case) for a pdf which is not a RooSimultaneous (ROOT-9347),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5724:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/5724,1,['Avoid'],['Avoid']
Safety,Avoid using a deprecated function in RooAbsData::createHistogram,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10647:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/10647,1,['Avoid'],['Avoid']
Safety,Avoid using deperecated `RooCatType` in RooStats tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11234:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/11234,1,['Avoid'],['Avoid']
Safety,Avoid using deprecated `std::iterator` in TSeq and TTreeReader classes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10392:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/10392,1,['Avoid'],['Avoid']
Safety,Avoid using deprecated std::iterator in RTensor.hxx and RAxis.hxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10603:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/10603,1,['Avoid'],['Avoid']
Safety,"Avoid using forward-declared class as default template arguments in; `RooMinimizer` and `MinuitFcnGrad`. This is the fix for the following test failures in the nightlies:. ```; projectroot.roottest.python.cling.roottest_python_cling_class; projectroot.roottest.python.cling.roottest_python_cling_api; projectroot.roottest.root.meta.tclass.regression.roottest_root_meta_tclass_regression_execNormalizationInfPy; projectroot.roottest.python.cling.roottest_python_cling_cling; projectroot.roottest.root.meta.enumPayloadManipulation.roottest_root_meta_enumPayloadManipulation_checkEnumFwdDecl; ```. For sure we know that these failures got introduced by; root-project#8700. The failures that we see since [root-project#8700](root-project#8700), here are the comments where the bot reported them first:; First Ubuntu 16 fail:; [root-project#8700 (comment)](root-project#8700 (comment)). First Windows 10 fail:; [root-project#8700 (comment)](root-project#8700 (comment)). I narrowed down the origin of this regression to a small part of the; diff of the full PR. The bad guy is some change in one of these files:. * roofit/roofitcore/inc/RooMinimizer.h; * roofit/roofitcore/test/CMakeLists.txt; * roofit/roofitcore/test/TestStatistics/testLikelihoodSerial.cxx. What was fishy in `RooMinimizer.h` was the usage of a forward-declared; class as default template argument. The default template arguments are; commented out now, because these will only become relevant in later; developments by @egpbos.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8997:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/8997,1,['Avoid'],['Avoid']
Safety,Avoid using the interpreter from TDataMember if possible.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/807:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/807,1,['Avoid'],['Avoid']
Safety,Avoid virtual function call in Fill() if buffer map not needed,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2134:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/2134,1,['Avoid'],['Avoid']
Safety,Avoid warning about unused typedef/using,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3952:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/3952,1,['Avoid'],['Avoid']
Safety,Avoid warnings in Windows compilation,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7250:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/7250,1,['Avoid'],['Avoid']
Safety,Avoid warnings when -Wzero-as-null-pointer-constant is specified,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11351:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/11351,1,['Avoid'],['Avoid']
Safety,Avoid warnings when -Wzero-as-null-pointer-constant is used,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11350:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/11350,1,['Avoid'],['Avoid']
Safety,Avoid warnings when iterating over a TList in a range-based loop with `auto const&&`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12442:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/12442,1,['Avoid'],['Avoid']
Safety,Avoid warnings when overriding nChunks,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1028:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/1028,1,['Avoid'],['Avoid']
Safety,Avoid wild over read in badly clusted files,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1778:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/1778,1,['Avoid'],['Avoid']
Safety,Avoid {using namespace std} in global scope of dictionary [ROOT-10661],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5510:0,Avoid,Avoid,0,https://root.cern,https://github.com/root-project/root/pull/5510,1,['Avoid'],['Avoid']
Safety,"Avoids some memory allocations when the internal unzip buffer is never used throughout the decompressor's lifetime (since RNTupleDecompressor allocates a Buffer_t when default constructed).; With this change, RPageStorageDaos doesn't need to allocate a decompressor anymore. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15982:0,Avoid,Avoids,0,https://root.cern,https://github.com/root-project/root/pull/15982,1,['Avoid'],['Avoids']
Safety,Avoids the following compiler warning by Clang:; ```; delete called on non-final 'ROOT::Experimental::Internal::RPageAllocatorHeap' that has virtual functions but non-virtual destructor; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16261:0,Avoid,Avoids,0,https://root.cern,https://github.com/root-project/root/pull/16261,1,['Avoid'],['Avoids']
Safety,Avoids warnings when -Wzero-as-null-pointer-constant is used like:. ```; include/TInterpreter.h: In member function ‘virtual TypeInfo_t*; TInterpreter::MethodArgInfo_TypeInfo(MethodArgInfo_t*) const’:; include/TInterpreter.h:520:95: warning: zero as null pointer constant; [-Wzero-as-null-pointer-constant]; 520 | virtual TypeInfo_t *MethodArgInfo_TypeInfo(MethodArgInfo_t *; /* marginfo */) const {return 0;}; |; include/TInterpreter.h: In member function ‘virtual void*; TInterpreter::TypeInfo_QualTypePtr(TypeInfo_t*) const’:; include/TInterpreter.h:535:80: warning: zero as null pointer constant; [-Wzero-as-null-pointer-constant]; 535 | virtual void *TypeInfo_QualTypePtr(TypeInfo_t * /* tinfo */); const {return 0;}; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13412:0,Avoid,Avoids,0,https://root.cern,https://github.com/root-project/root/pull/13412,1,['Avoid'],['Avoids']
Safety,"Backport fix for ROOT-10648, ""Avoid having to modify TStreamerSTL when streaming it.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5593:30,Avoid,Avoid,30,https://root.cern,https://github.com/root-project/root/pull/5593,1,['Avoid'],['Avoid']
Safety,Backport in 6.28 fixes in pymva to avoid timeout in keras tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13807:35,avoid,avoid,35,https://root.cern,https://github.com/root-project/root/pull/13807,2,"['avoid', 'timeout']","['avoid', 'timeout']"
Safety,"Backport of #7750. Add an implementation of getValV for RooAddPdf to use stored normalization set by default when the pdf is evaluated without passing a set. Disable printing of warning message of evaluating un-normalized RooAddPdf when doing:; - Call getVal in constructor of RooRealIntegral (not sure why this is needed); - printValue of any RooAbsPdf, where getVal(0) is also called; - RooAbsArg::graphVizTree where also getVal(0) is called when exporting the tree in a graphVizTree. This avoids having un-needed warning messages when printing or examing RooWorkspaces or pdf's",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7814:492,avoid,avoids,492,https://root.cern,https://github.com/root-project/root/pull/7814,1,['avoid'],['avoids']
Safety,Backport of commit https://github.com/root-project/root/commit/f9eff417eea084261c3d27f4fb636f94db37138c from https://github.com/root-project/root/pull/9270. Includes also commit https://github.com/root-project/root/commit/8b216dec994bb9a963ec2006add3d3fe6976e877 to avoid backporting conflicts.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9282:266,avoid,avoid,266,https://root.cern,https://github.com/root-project/root/pull/9282,2,['avoid'],['avoid']
Safety,"Backporting some PRs to avoid test failures in the nightlies:; * https://github.com/root-project/root/pull/12693; * https://github.com/root-project/root/pull/13712; * https://github.com/root-project/root/pull/13718; * https://github.com/root-project/root/pull/13765; * https://github.com/root-project/root/pull/13524; * https://github.com/root-project/root/pull/13525; * https://github.com/root-project/root/pull/13613. After these trivial backports, the only PR that needs to be backported to fix the remaining failures is this one:; * https://github.com/root-project/root/pull/13533. However, this would not be a simple conflict-less backport because the changes interact with new feature development for ROOT 6.30. It's maybe better if @lmoneta takes care of this.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13777:24,avoid,avoid,24,https://root.cern,https://github.com/root-project/root/pull/13777,1,['avoid'],['avoid']
Safety,Backporting some commits that avoid unused variable warnings on mac,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10377:30,avoid,avoid,30,https://root.cern,https://github.com/root-project/root/pull/10377,1,['avoid'],['avoid']
Safety,"Base classes for attributes defined in gpad, but also some classes like; RPad uses line or fill attributes. Later attributes can be extracted; into separate library. Should resolve circular dependency error, detected only on Windows",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3702:208,detect,detected,208,https://root.cern,https://github.com/root-project/root/pull/3702,1,['detect'],['detected']
Safety,"Based on [1]. [1] Neri, C, ""Twisting the RTTI System for Safe Dynamic Casts of void\* in C++"", Dr.Dobb's Journal, April 05, 2011. http://drdobbs.com/cpp/229401004",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/200:57,Safe,Safe,57,https://root.cern,https://github.com/root-project/root/pull/200,1,['Safe'],['Safe']
Safety,"Befor we switched JSROOT to the local instances of the JS libraries, we could use jupyter with all features right after sourcing `thisroot.*`. Due to the switch, the path to the JS libraries was broken, which is now fixed by this PR. This makes `root --notebook` redundant in this case. Still to be added is the correct behaviour when ROOT is installed. I'll line out here how it should be done:. 1. We should abandon the `.rootnb` folder in `HOME` and use the default `.jupyter` folder.; 2. There, we have to add our config to the `jupyter_notebook_config.py` file, which is basically nothing else than `c.NotebookApp.extra_static_paths.append('/path/to/root/js')`.; 3. I think we should just get rid of the custom css things, which would be made default if installed into `.jupyter`.; 4. Install the ROOT kernel in `/usr/share/jupyter/kernels/root`, such as all other kernels. I would go first with this PR, which only improves the current behaviour. Next I'll have a look into a proper installation of our jupyter related files, but I'll make another PR for that. **Edit:** I've fixed the installation to a prefix. This just fixes the current issues but keeps the old installation/sourcing behaviour of jupyroot. We can refactor in another RP later!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6155:263,redund,redundant,263,https://root.cern,https://github.com/root-project/root/pull/6155,1,['redund'],['redundant']
Safety,"Before importing cppyy from PyROOT, instead of specifying the location of the PCH, we can just use the magic word 'none' to tell cppyy not to check the PCH. In both cases, the objective is to avoid a warning from cppyy when importing it. This needs to be merged after the next update of `cppyy-backend`, when a new release is out. The related discussion with Wim is here:; https://bitbucket.org/wlav/cppyy/issues/62/new-check-in-loaderpy-uses-wrong-include",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3555:192,avoid,avoid,192,https://root.cern,https://github.com/root-project/root/pull/3555,1,['avoid'],['avoid']
Safety,"Before this change:. [ RUN ] RNTuple.LargeFile; Warning in <ROOT [NTuple] Warning /builddir/build/BUILD/root-6.22.00/tree/ntuple/v7/src/RPageStorageFile.cxx:43 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Fatal: retval == nbytes violated at line 1007 of `/builddir/build/BUILD/root-6.22.00/tree/ntuple/v7/src/RMiniFile.cxx'; aborting",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5977:517,abort,aborting,517,https://root.cern,https://github.com/root-project/root/pull/5977,1,['abort'],['aborting']
Safety,"Before this commit, RDataSource columns were treated like a special; kind of Defined columns: they were registered in RBookedCustomColumn; and their contents were accessed via RCustomColumn::Get. This commit removes the logic that was Define'ing ad-hoc columns; corresponding to the RDS columns. Instead, we store the RDS column value; pointers in a dedicated std::map and teach RDSColumnReader to directly; use that. Logic is simpler, we avoid an extra function call and an extra; copy upon data-source value accesses, and we move closer to implementing; column readers specialized for a given RDS implementation. Sorry for the large commit, unfortunately changing how datasource columns _work_ requires touching a lot of different places and I am not sure it makes sense to split the commit in smaller pieces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6208:439,avoid,avoid,439,https://root.cern,https://github.com/root-project/root/pull/6208,1,['avoid'],['avoid']
Safety,"Before this commit, each action and filter was calling InitSlot on all; the defines it knew about. As a consequence, RDefine had to keep track; of whether InitSlot was already called on it for a given task and a; given slot. We can avoid the multiple InitSlot calls on the same objects and the; book-keeping of whether the call already happened or not by having; RLoopManager call InitSlot on every defined column once per task and per; slot. To this end, we need to register RDefine objects with the; RLoopManager when they are created and deregister them when they are; destroyed. This makes treatment of Define's `InitSlot` calls uniform with those of Filters and Actions. Systematic variations will look a lot like Defines and we want to treat everything uniformly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9199:232,avoid,avoid,232,https://root.cern,https://github.com/root-project/root/pull/9199,1,['avoid'],['avoid']
Safety,"Before this commit, whenever a function was constructing a node; of the computation graph it had to ""remember"" to also register; that node with the RLoopManager, which needs to know which nodes; are around so it can tell them e.g. to execute task initialization; and task finalization logic.; Deregistration happened in the node's destructors. With this patch, registration happen in the constructor and; deregistration in the destructor of a node, i.e. this logic is; where a reader might expect it to be and new code does not have; to ""remember"" to register objects with the RLoopManager. Jitted nodes of the computation graph (e.g. RJittedAction,; RJittedDefine) don't need to register themselves with the; RLoopManager: the _concrete_ nodes will be registered right; before the event loop, at jitting time, and that is good enough.; RJittedFilter is an exception: RLoopManager needs to know what; filters have been booked even before the event loop (i.e. before; concrete filters are instantiated by jitted code) in order to; return a correct list from RLoopManager::GetFiltersNames().; So RJittedFilters register themselves with RLoopManager at; construction time and deregister themselves in; RJittedFilter::SetFilter, i.e. when they can be sure that the; concrete filter has been instantiated in jitted code and it has; been registered with RLoopManager, making the RJittedFilter; registration redundant. To the reviewers: I'll make the naming more uniform (Register/Deregister instead of Book/Deregister) in a subsequent PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10653:1401,redund,redundant,1401,https://root.cern,https://github.com/root-project/root/pull/10653,1,['redund'],['redundant']
Safety,"Before this patch RDF would first, eagerly, declare a dummy lambda; that contained the user-defined expression to check verify the cling; could understand it; then, lazily, the actual lambda variable used; by the nodes of the computation graph was jitted, together with all; other declarations required by RDF, just before the event loop. With this patch, the first declaration serves both purposes: it checks; that the expression is just-in-time compilable _and_ jits precisely the; definition that will be required during the event loop. This removes; redundant logic and results in strictly less work required of the; interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5487:554,redund,redundant,554,https://root.cern,https://github.com/root-project/root/pull/5487,1,['redund'],['redundant']
Safety,"Before this patch, each node in the computation graph was; re-creating or re-requesting column readers for datasource and TTree/TChain; columns separately. We now create column readers for datasource and TTree/TChain columns early and; store them in RLoopManager which then gives out pointers to the; same RColumnReaderBase objects to all nodes. This is the first part of a series of changes aimed at; centralizing ownership and creation of all kinds of column; readers (defines and variations will come in a subsequent PR).; Sharing column readers among nodes of the computation; graph saves some redundant work and it is a pre-requisite for bulk; processing at the level of RDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10793:598,redund,redundant,598,https://root.cern,https://github.com/root-project/root/pull/10793,1,['redund'],['redundant']
Safety,"Before this patch, if a RLoopManager went out of scope before running; its event loop (a rare occurrence, but indeed possible, especially in; interactive sessions), we were leaking certain weak_ptrs and shared_ptrs; to components of the computation graph, that were meant to be used by; lazily jitted code that was never actually jitted in the end. With this change, when _any_ RLoopManager runs the event loop, we; trigger execution of _all_ jitted code that was registered, even if; it was registered by an RLoopManager that is now out of scope. In the; latter case, the code only performs clean-up of the heap-allocated; weak_ptrs and shared_ptrs and exits. We still ""leak"" in the odd case; in which RDF jitted code is registered but the application never actually; triggers any RDF event loops, in which case the code to be lazily jitted; remains in the pipeline until the end of the application, and parts of; the computation graph are kept alive indefinitely by heap-allocated shared_ptrs. For this to work, we need to detect when compiled objects went out of scope and we don't actually have to run the jitted code but just perform the clean-up, so we switch from heap-allocated shared_ptrs to heap-allocated weak_ptrs for those objects.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5488:1025,detect,detect,1025,https://root.cern,https://github.com/root-project/root/pull/5488,1,['detect'],['detect']
Safety,"Before this patch, in cases in which t.GetBranch(""a.b"") and; t.GetBranch(""b"") both returned a valid address, RDataFrame was adding; only ""a.b"" to the list of valid TTree columns.; With this patch, both ""a.b"" and ""b"" are recognized as valid column names. We need this change in behavior to avoid a _worse_ change in behavior,; described in detail in ROOT-10942: since ROOT-10702 was fixed,; TTree::GetBranch became more powerful and started returning non-null; addresses for branch names with form ""a.b"" while it was returning a; nullptr until v6.20/06. With RDataFrame's previous logic, this in turn; meant that valid code that was using ""a"" as a column broke as RDataFrame; was now adding the ""a.b"" spelling to the list of valid columns instead. This fixes the RDF-related part of ROOT-10942: ""a"" is recognized as a; valid spelling again, and ""a.b"" is kept as a new valid spelling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6072:289,avoid,avoid,289,https://root.cern,https://github.com/root-project/root/pull/6072,1,['avoid'],['avoid']
Safety,"Besides being more in line with our coding conventions, we will need; the split to avoid circular includes between ColumnReaders.hxx and; RDataSource.hxx when we implement lazy RDS column readers. This PR is NFC, at least in spirit, but let's see what the bot says anyway.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6339:83,avoid,avoid,83,https://root.cern,https://github.com/root-project/root/pull/6339,1,['avoid'],['avoid']
Safety,Better detection of XrootD version,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10605:7,detect,detection,7,https://root.cern,https://github.com/root-project/root/pull/10605,1,['detect'],['detection']
Safety,"Both EnableEmplicitMT and TThreadExecutor implementations share the; same task scheduler and the number of threads it has been set to run on. This patch modifies TThreadExecutor so it:. * avoids the termination (from TThreadExecutor) of the scheduler; initialized by EnableEmplicitMT.; * warns the user if she/he tries to change an already-set number of; threads, as the scheduler will always take the value of its first; initialization.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/326:188,avoid,avoids,188,https://root.cern,https://github.com/root-project/root/pull/326,1,['avoid'],['avoids']
Safety,"Both on CentOS 8 Stream and Arch Linux, when compiling with Clang 13.0.0, there are a number of RooFit test failures due to crashes. Example crash when running `tutorials/roofit/rf201_composite.C`:; ```; root.exe: /home/jhahnfel/ROOT/src/roofit/roofitcore/inc/RooSTLRefCountList.h:113: std::size_t RooSTLRefCountList<RooAbsArg>::size() const [T = RooAbsArg]: Assertion `_storage.size() == _refCount.size()' failed.; ```. ### Backtrace; ```; #0 0x00007ffff66c2a4f in raise () from /lib64/libc.so.6; #1 0x00007ffff6695db5 in abort () from /lib64/libc.so.6; #2 0x00007ffff6695c89 in __assert_fail_base.cold.0 () from /lib64/libc.so.6; #3 0x00007ffff66bb3a6 in __assert_fail () from /lib64/libc.so.6; #4 0x00007fffe0dea553 in RooSTLRefCountList<RooAbsArg>::size (this=0x1aa32f8); at /home/jhahnfel/ROOT/src/roofit/roofitcore/inc/RooSTLRefCountList.h:113; #5 RooSTLRefCountList<RooAbsArg>::findByNamePointer (this=this@entry=0x1aa32f8, item=item@entry=0x7fffffff72d0); at /home/jhahnfel/ROOT/src/roofit/roofitcore/inc/RooSTLRefCountList.h:153; #6 0x00007fffe0de1848 in RooAbsArg::findServer (this=0x1aa32b0, arg=...); at /home/jhahnfel/ROOT/src/roofit/roofitcore/inc/RooAbsArg.h:211; #7 RooAbsArg::dependsOn (this=this@entry=0x1aa32b0, testArg=..., ignoreArg=ignoreArg@entry=0x0, valueOnly=false); at /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooAbsArg.cxx:870; #8 0x00007fffe0de1a80 in RooAbsArg::dependsOn (this=0x1aa32b0, serverList=..., ignoreArg=0x0, valueOnly=false); at /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooAbsArg.cxx:847; #9 RooAbsArg::observableOverlaps (this=<optimized out>, nset=<optimized out>, testArg=...); at /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooAbsArg.cxx:923; #10 0x00007fffe0e6d04d in RooAddPdf::checkObservables (this=<optimized out>, nset=<optimized out>); at /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooAddPdf.cxx:832; #11 0x00007fffe0de178d in RooAbsArg::recursiveCheckObservables (this=0x7fffffff6bc8, nset=0x7fffffff6360); at /home/jhahnfel/ROOT/sr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9547:523,abort,abort,523,https://root.cern,https://github.com/root-project/root/issues/9547,1,['abort'],['abort']
Safety,"Boundary/FindNode implementations. * The use of a 3D voxel grid (TGeoVoxelGrid) structure, able to store properties ""local"" or in the vicinity of a cartesian coordinate P. This structure allows to reduce the (typical) algorithmic complexity for ""Safety"" queries to ~O(1) (with a constant factor determined by the voxel size). Filling of the 3D voxel grid cache for Safety is done on-the-fly (using the BVH once). * (Optional) Additional caching of ""last-call"" safety values for really quick return when the value is still valid at the next call. Ideas for these improvements come from prior work in related libraries such as VecGeom. -----. Implementation details:. * The implementation is, for now (until fully tested), provided in a backward compatible manner:. - By default, nothing changes; - Users have to activate the BVH mode by setting an environment variable TGEO_PW_USEBVH; - Users may hence compare the 2 modes. * Functions for Safety, FindNode, FindBoundary dispatch to some internal implementation. This causes an extra lookup/jump, which can be removed once BVH is fully validated. * For the BVH, a well known open source implementation is included in header-only form. The headers are copied from https://github.com/madmann91/bvh commit 66e445b92f68801a6dd8ef943fe3038976ecb4ff. * A new class, TGeoVoxelGrid is provided for the cartesian VoxelGrid container. ----. Performance examples:. In a test with the ALICE simulation framework including the ITS + TPC detectors with 48240 volumes on the parallel world, we see. * initialization time goes from TGeoVoxelFinder: 10s ---> BVH: 40ms; * Geant simulation time: 10s --> 2s; * memory usage: 3GB --> 1GB. Hence, this PR will make a big difference for the ALICE simulation program. It was verified, that identical results (number of hits, steps, etc) are obtained when going from TGeoVoxelFinder --> BVH+GRID. ----. Outlook:. Similar techniques could be applied to ordinary TGeoNavigator routines. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16442:2477,detect,detectors,2477,https://root.cern,https://github.com/root-project/root/pull/16442,1,['detect'],['detectors']
Safety,Build can not recover from partial 'cleanup',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16227:14,recover,recover,14,https://root.cern,https://github.com/root-project/root/issues/16227,1,['recover'],['recover']
Safety,Build system cannot detect version of oneTBB,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8260:20,detect,detect,20,https://root.cern,https://github.com/root-project/root/issues/8260,1,['detect'],['detect']
Safety,Builtin CFITSIO: 3.45 -> 4.4.0 to avoid indirect CURL dependency,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15508:34,avoid,avoid,34,https://root.cern,https://github.com/root-project/root/pull/15508,1,['avoid'],['avoid']
Safety,CMake ExternalProject: add `TIMEOUT`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6635:28,TIMEOUT,TIMEOUT,28,https://root.cern,https://github.com/root-project/root/issues/6635,1,['TIMEOUT'],['TIMEOUT']
Safety,"CMake should detect this, but since the output `G__Imt.cxx` is used both by `G__Imt` (custom target created by `ROOT_GENERATE_DICTIONARY()`) and `Imt` (via `target_sources()`), it leads to problems in parallel builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3227:13,detect,detect,13,https://root.cern,https://github.com/root-project/root/pull/3227,1,['detect'],['detect']
Safety,Caching and initialization of TClass::fIsAMethod have been changed; to make them thread safe and for calls to the TMethodCall can happen; concurrently.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/28:88,safe,safe,88,https://root.cern,https://github.com/root-project/root/pull/28,1,['safe'],['safe']
Safety,Call SetDirectory(0) for the internal histogram ( plot + MC prediction templates) managed by TFractionFitter. This avoids double-delete when deleting TFractionFitter and gDirectory and fixes ROOT-10752,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6255:60,predict,prediction,60,https://root.cern,https://github.com/root-project/root/pull/6255,2,"['avoid', 'predict']","['avoids', 'prediction']"
Safety,Call `Modified()` method for the canvas itself - there are no logical reasons why `gPad->Modified()` was called. Instead calling `SetName(name)` directly set `fName` member in all TCanvas constructors. ; This avoids triggering of `Modified()` signal from the constructor itself. Fix logic around empty canvas name in `TCanvas::SaveSource`. ; There also use direct assignment of `fName` member.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15518:209,avoid,avoids,209,https://root.cern,https://github.com/root-project/root/pull/15518,1,['avoid'],['avoids']
Safety,"Call `TCanvas::HighlightConnect` before canvas draw for the first time.; This let in case of `TWebCanvas` immediately detect such state and configure canvas. Also avoid forward declaration of functions just by resorting their order.; Use more c++11 syntax. Important - adjust `TH1::SetHighlight()` to use it without histogram painting, as with `TWebCanvas`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9714:118,detect,detect,118,https://root.cern,https://github.com/root-project/root/pull/9714,2,"['avoid', 'detect']","['avoid', 'detect']"
Safety,"Call typed overload of `SetBranchAddress` for array types like `np.ndarray` or `array.array`. The correct C++ template parameter is inferred from the array interface type information. This is an improvement for two reasons:. 1. We don't need to cast the arrays to a `void *` to avoid template resolution problems anymore. 2. More importantly: ROOT will do a runtime check for type compatibility, which was requested in the JIRA ticked linked below. To see the benefit of the added type check, take for example this code, where the branch address is set to an array address with a mismatched type:. ```python; import array; import ROOT. def create():; f = ROOT.TFile(""dummy.root"", 'RECREATE'); t = ROOT.TTree(""tree"", 'A tree'); a = array.array('f', [42]); br = t.Branch('a', a, 'a/F'). for x in (21, 42, 1337):; a[0] = x; t.Fill(). t.Write(); f.Close(). def test(typecode='f'):; f = ROOT.TFile(""dummy.root"", 'READ'); t = f.Get('tree'); a = array.array(typecode, [0]); status = t.SetBranchAddress('a', a); print(""Status = %s"" % (status, )). for i in range(t.GetEntries()):; t.GetEntry(i); print(""a = %s"" % (a[0], )). create(); test(""f""); test(""d""); ```. Before this commit, the output would be like this:; ```txt; Status = 4; a = 21.0; a = 42.0; a = 1337.0; Status = 4; a = 5.442276803e-315; a = 5.483722033e-315; a = 5.690664868e-315; ```. With this commit, you get a clear error:; ```txt; Status = 0; a = 21.0; a = 42.0; a = 1337.0; Error in <TTree::SetBranchAddress>: The pointer type given ""Double_t"" (8) does not correspond to the type needed ""Float_t"" (5) by the branch: a; Status = -2; a = 0.0; a = 0.0; a = 0.0; ```. Closes the following JIRA ticket:; https://its.cern.ch/jira/browse/ROOT-8213",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16171:278,avoid,avoid,278,https://root.cern,https://github.com/root-project/root/pull/16171,1,['avoid'],['avoid']
Safety,Can be activated for RWebWindow. ; Avoids blocking of application code due-to single slow client.; Use `cond.notify_all()` only when really condition in the wait state,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4143:35,Avoid,Avoids,35,https://root.cern,https://github.com/root-project/root/pull/4143,1,['Avoid'],['Avoids']
Safety,Change clang-format settings to avoid if statement and its body on the same line,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/795:32,avoid,avoid,32,https://root.cern,https://github.com/root-project/root/pull/795,1,['avoid'],['avoid']
Safety,Change raw pointer methods to shared pointers or const ref. Remove unsafe and unnecessary methods. Add `RNTupleModel::GenerateBulk()`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14454:67,unsafe,unsafe,67,https://root.cern,https://github.com/root-project/root/pull/14454,1,['unsafe'],['unsafe']
Safety,"Change the buffer management in the new RooFit BatchMode such that; queues get cleared when the RooFitDriver gets destructed. Like this one avoids the steady increase in memory that one would get; when doing different fits in one go with different numbers of events,; such as in test suites or MC studies with extended models.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10736:140,avoid,avoids,140,https://root.cern,https://github.com/root-project/root/pull/10736,1,['avoid'],['avoids']
Safety,"Change the name of the file where the tutorial TMVA_SOFIE_RDataFrame.py writes the model, to avoid a conflict with TMVA_SOFIE_RDataFrame.C",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15622:93,avoid,avoid,93,https://root.cern,https://github.com/root-project/root/pull/15622,1,['avoid'],['avoid']
Safety,Changed all static variables which were only being used as local variables to be local variables. This avoids threading problems.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/20:103,avoid,avoids,103,https://root.cern,https://github.com/root-project/root/pull/20,1,['avoid'],['avoids']
Safety,"Changes the file I/O in the CSV data source from `std::fstream` to `RRawFile`. This brings the following advantages. - Remote reading: the CSV file can come directly from a web server (via Davix); - Automatic detection of line breaks: CSV files on Windows can be processed on UNIX and vice versa. In addition, fixes an endless loop for empty input files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6458:209,detect,detection,209,https://root.cern,https://github.com/root-project/root/pull/6458,1,['detect'],['detection']
Safety,"Changing the definition of infinity in RooFit from `1e30` to `std::numeric_limits<double>::infinity()`, and making some other changes that ensure no evaluation errors are logged with this new definition. * Code-format RooNumber.h and RooNumber.cxx; * Inline infinity constant and checks in `RooNumber`; * Make `TMath::AreEqualAbs()` return `true` when comparing `inf`; * Define infinity as `std::numeric_limits<double>::infinity()`; * RooTruthModel: local `xmin` and `xmax` to make code more readable; * Avoid `sin` or `cos` of infinity in RooTruthModel integral code; * Note change of infinity definition in RooFit. More details in the commit descriptions. With the increased use of inlined code and simpler comparisons in `RooNumber`, this is also speeding up RooFit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12016:504,Avoid,Avoid,504,https://root.cern,https://github.com/root-project/root/pull/12016,1,['Avoid'],['Avoid']
Safety,Check qt5/qt6/cef in cmake before building ROOTWebDisplay library. Required to correctly detect if such displays can be used by default,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15349:89,detect,detect,89,https://root.cern,https://github.com/root-project/root/pull/15349,1,['detect'],['detect']
Safety,"Checked for duplicates: not found. Discussion started here:; https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug; Using from python:; A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:; ```; Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596; Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608; Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0; Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596; Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608; Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0; Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596; Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836; Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0; ```. ### Expected behavior; Any catch-able error either at TFile opening or at least when parsing and error is encounter ...; At this point i cannot check and asses the health of the file from within python. ### To Reproduce; https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202; a test file can be provided through private communication. ### Setup; fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d; manual build",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9154:378,detect,detected,378,https://root.cern,https://github.com/root-project/root/issues/9154,3,['detect'],['detected']
Safety,"Clang 18 changed the name mangling of function templates, see https://releases.llvm.org/18.1.0/tools/clang/docs/ReleaseNotes.html#c-specific-potentially-breaking-changes. The first mentioned case is ""When a template parameter in a function template depends on a previous template parameter"", for example:; ```; struct A {; template <typename T, std::enable_if_t<std::is_integral_v<T>, int> = 0>; void Member(T p) {}; };. template void A::Member(int);; ```. With Clang < 18 and current versions of GCC, this will mangle to `_ZN1A6MemberIiLi0EEEvT_`, but Clang 18 and later will mangle it to `_ZN1A6MemberIiTnNSt9enable_ifIXsr3stdE13is_integral_vIT_EEiE4typeELi0EEEvS2_` (unless reverted for compatibility with `-fclang-abi-compat=17`). For ROOT's use of Cling, this poses a bidirectional problem:; * If building current master with Clang 18, the compiler will, by default, mangle according to the new rules. At runtime, Cling based on LLVM/Clang 16 will generate the old name, but that symbol cannot be found in the shared library.; * Conversely, in the current attempt to upgrade to LLVM/Clang 18, the opposite situation will happen when building with an ""older"" compiler so the shared library has the old name. In both cases, a failure of `tutorial-tmva-tmva103_Application` can be observed, when Cling cannot find the symbol. Unfortunately, it is not easily possible to detect which symbol names are in the shared library because it depends on the host compiler and configuration. Furthermore, with the current LLVM/Clang 16, we do not have access to the new mangling. Finally, it is unclear if generating the template instantiations in question actually takes up significant time during compilation. As such, the best approach in the current situation is to remove the `extern template` declarations and let the compiler / Cling re-generate them as needed. FYI @devajithvs",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16176:1372,detect,detect,1372,https://root.cern,https://github.com/root-project/root/pull/16176,1,['detect'],['detect']
Safety,"Clang allows third party shared libraries to provide user-defined; extensions. For example, a custom libTemplateInstantiation.so can; visualize all template instantiation chains in clang. To enable it; one needs to pass a set of options such as -fplugin. Cling should be able to inherently work with clang plugins. However,; cling still does not make full use of the clang driver where the plugin; setup is handled. This patch enables plugins in cling and extends them in some aspects.; In particular, cling allows loading of plugins from shared libraries; but also if they are linked to the same library where cling is. This is; very useful in cases where cling runs itself in a shared library (eg; libCling). Users of libCling (such as ROOT) prefer to keep all llvm and; clang related symbols local to avoid symbol clashes if there is another; version of clang and llvm linked against a package. This can be done by; dlopen-ing libCling with RTLD_LOCAL visibility mode. Then the only way; for clang plugins to work in this scenario is to be linked to libCling. Patch by Aleksandr Efremov (@efremale) and me.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2371:804,avoid,avoid,804,https://root.cern,https://github.com/root-project/root/pull/2371,1,['avoid'],['avoid']
Safety,"Clang, and therefore cling, doesn't deal well with large amounts of; variable instantiations of types with non-trivial destructors in the; same function body. In this scenario the list of exception-handling; ""landing pads"" grows to sizes that make compilation times blow up.; What takes time specifically is the generation of code that deals; with calling the destructors of these variables in case an exception is; thrown in the function body. This patch avoids allocating many temporary std::strings and; std::vector<std::string>s in jitted code by generating code of the form; Jit{Filter,Define}Helper(..., const char*[]{""col1"", ""col2""}, ...) rather; than Jit{Filter,Define}Helper(..., std::vector<std::string>{""col1"", ""col2""}, ...).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7651:456,avoid,avoids,456,https://root.cern,https://github.com/root-project/root/pull/7651,2,['avoid'],['avoids']
Safety,Clean up all accumulated redundant files over the llvm upgrades.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1296:25,redund,redundant,25,https://root.cern,https://github.com/root-project/root/pull/1296,1,['redund'],['redundant']
Safety,Cleaned up dependencies for TMVA tuts for avoiding race conditions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/426:42,avoid,avoiding,42,https://root.cern,https://github.com/root-project/root/pull/426,1,['avoid'],['avoiding']
Safety,"Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:; ```; Generating tclass_methods.cxx, tclass_methods.rootmap; Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o; clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'; clang: error: no input files; make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1; make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5585:197,avoid,avoid,197,https://root.cern,https://github.com/root-project/root/pull/5585,1,['avoid'],['avoid']
Safety,Comment out part of the code to try to prevent false positive detection from several anti-virus engines on Windows (and multiproc is not supported on Windows anyway),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7005:62,detect,detection,62,https://root.cern,https://github.com/root-project/root/pull/7005,1,['detect'],['detection']
Safety,"Commit df0b689 simplified the search for the C++ include directories and; tried to use a locale independent regex. However this regex doesn't work for all locales, for example in German; the string in the output is not. ```; #include <...> search starts here:; ```. but the word order is switched and we have. ```; Suche für »#include <...>« beginnt hier:; ```. As such I propose to go back to C-locale for this query to be completely; safe against weird locale settings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5547:436,safe,safe,436,https://root.cern,https://github.com/root-project/root/pull/5547,1,['safe'],['safe']
Safety,"Commit ff86c30992 (""[RF] Implement SumW2 correction in new BatchMode with RooFitDriver"") introduced some `static constexpr`. When building with C++14, at least `weightVarName` requires a declaration because it is odr-used. Provide them for all three variables to avoid undefined references seen in debug builds without compiler optimizations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10263:263,avoid,avoid,263,https://root.cern,https://github.com/root-project/root/pull/10263,1,['avoid'],['avoid']
Safety,"Compared to `GetAtSlotUnchecked`, `GetAtSlotRaw` trades some more; safety for some more performance: not only it avoids checking for; slot initialization (as `GetAtSlotUnchecked` does) but it also avoids; (copy-)construction of a `shared_ptr`. I can add a test, just tell me where :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/934:67,safe,safety,67,https://root.cern,https://github.com/root-project/root/pull/934,3,"['avoid', 'safe']","['avoids', 'safety']"
Safety,"Consider the following code snippet:. nbkg = 10000; nsig = 100; masses = [125,400]; ; import ROOT; ws = ROOT.RooWorkspace(""workspace""); m = ws.factory(""m[0,1000]""); bkg_shape = ws.factory(""RooExponential::bkg_shape(m,c_bkg[-0.005])""); bkg = ws.factory(""RooExtendPdf::bkg(bkg_shape,n_bkg[{:f},0,{:f}])"".format(nbkg,2*nbkg)); ; bkgdata = bkg.generate(m,nbkg); bkgdata.SetName(""asimov_0""); ws.Import(bkgdata); ; funcs = ROOT.RooArgList(); funcs.add(bkg); for i in range(0,len(masses)):; sig_shape = ws.factory(""RooGaussian::sig_shape_{:d}(m,m_{:d}[{:f},0,1000],sigma_{:d}[10,1e-6,100])"".format(i,i,masses[i],i)); sig = ws.factory(""RooExtendPdf::sig_{:d}(sig_shape_{:d},n_sig_{:d}[{:f},0,{:f}])"".format(i,i,i,nsig,2*nsig)); funcs.add(sig); mainPdf = ws.factory(""RooAddPdf({""+"","".join([f.GetName() for f in funcs])+""})""). The last line results in . [#0] ERROR:ObjectHandling -- RooFactoryWSTool::createArg() ERROR number of arguments provided (1) for class is invalid, RooAddPdf expects 3; [#0] ERROR:ObjectHandling -- RooFactoryWSTool::processExpression() ERRORS detected, transaction to workspace aborted, no objects committed. despite this constructor being available for RooAddPdf:. RooAddPdf (const char *name, const char *title, const RooArgList &pdfList)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7965:1059,detect,detected,1059,https://root.cern,https://github.com/root-project/root/issues/7965,2,"['abort', 'detect']","['aborted', 'detected']"
Safety,"Copy assignment for RooAbsArgs was implemented in an unexpected and; inconsistent way. While one would expect that the copy assignment is; copying the object, it said in the documentation of; `RooAbsArg::operator=` that it will ""assign all boolean and string; properties of the original bject. Transient properties and client-server; links are not assigned."" This contradicted with the implementation,; where the server links were actually copied too. Indeed it is; questionable that adding also the servers of the `other` RooAbsArg makes; sense when the proxies are not changed. There was also a memory leak of the `_ownedComponents`, because; `_ownedComponents` got reset to `nullptr` without deleting the; pointed-to owned collection. Furthermore, in `RooAbsRealLValue`, the assigment operator was; overloaded by a function that only assigns the value of another; `RooAbsReal`. With all these inconsistencies, it was deemed safer to disable copy; assignment of RooAbsArgs from now on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11079:927,safe,safer,927,https://root.cern,https://github.com/root-project/root/pull/11079,1,['safe'],['safer']
Safety,Core: Avoid (indirect) memory hoarding in TPluginManager.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14200:6,Avoid,Avoid,6,https://root.cern,https://github.com/root-project/root/pull/14200,1,['Avoid'],['Avoid']
Safety,"Creating RooArgSets on the heap should be avoided. The existing; `RooAbsArg::getParameters/Observables` created a RooArgSet calling `operator new`.; This commit adds an overload of `RooAbsArg::getParameters/Observables` that takes an; output parameter such that the output RooArgSet can also be created on; the stack. Using these new methods, a memory leak in `RooAbsReal::evaluateSpan` is fixed. This leak was recently introduced in PR https://github.com/root-project/root/pull/7742 and backported to 6.24. Therefore, this fix should also be backported to 6.24.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8142:42,avoid,avoided,42,https://root.cern,https://github.com/root-project/root/pull/8142,1,['avoid'],['avoided']
Safety,"Current JSROOT dev version with lot of changes, potential v7.0 release. Really a lot of changes in dev version.; Fully avoids jQuery in the GUI, replace it by HTML5 code; Reduce significantly used code from d3.js (factor 3); Improve flexible layout in the GUI. Add support of many new classes/draw options; Like CANDLE/VIOLIN plots, TEfficiency,; Add many standard math functions to support majority of TF1/TF2 from tutorials. Upgrade three.js to r136. Adjust Eve7 code, fix few problems",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9638:119,avoid,avoids,119,https://root.cern,https://github.com/root-project/root/pull/9638,1,['avoid'],['avoids']
Safety,"Currently http/webgui/eve7 tutorials are vetoed because of many reasons; But main reason - such tutorials designed so that `THttpServer` should runs forever ; that user can test them in the web browsers. This can be changed.; All tutorials used in ROOT testing started with arguments `root -b -l -q tutorial_name.C`; In tutorials itself one could detect that using something like:; ```; bool test_mode = gApplication->Argn() > 3 &&; !strcmp(gApplication->Argv(1),""-b"") && ; !strcmp(gApplication->Argv(2),""-l"") && ; !strcmp(gApplication->Argv(3),""-q"");; ```; Especially `-q` argument is clear sign that macro should not be running forever. Alternatively, one can set special environment variable and test it inside tutorials with:; ```; bool test_mode = gSystem->Getenv(""ROOT_TESTING"") != nullptr;; ```; But this requires that ROOT_TESTING environment variable should be set before. In any case - if such `test_mode` detected, macro should behaves differently:; 1. Do not start real http server while it most probably will conflict with other tutorials running in parallel.; 2. Run macro for only limited number of loops for ~3 seconds.; 3. Check production of png images - for most of these tutorials `THttpServer` or `RCanvas` or `REve` can generate image",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6651:347,detect,detect,347,https://root.cern,https://github.com/root-project/root/issues/6651,2,['detect'],"['detect', 'detected']"
Safety,Currently if `CMAKE_SYSTEM_PROCESSOR` is not set ROOT silently falls back to returning `-m32` in `root-config --cflags` among other things. This can easily happen when cross-compiling and caused an issue in the first build of 6.18.00 for Conda (see https://github.com/conda-forge/root-feedstock/issues/41). I think it would be safer to fail immediately if the architecture is not recognised rather than allowing this to be missed and this is the approach used [elsewhere](https://boringssl.googlesource.com/boringssl/+/2272/CMakeLists.txt).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4013:327,safe,safer,327,https://root.cern,https://github.com/root-project/root/pull/4013,1,['safe'],['safer']
Safety,"Currently when installed with `-Dgnuinstall=ON` ROOT ends up exporting relative paths from the `${CMAKE_INSTALL_CMAKEDIR}` to the relevant binary, include and library directories. This can be a problem, especially when these paths may be evaluated from a different system folder assumed by CMake (e.g. when `CMAKE_INTSTALL_CMAKEDIR` is not the same for ROOT and CMake) as well as in other cases, when relative paths are not appropriate. Thus, it is safer in the general case to have these relative paths resolved to absolute system paths immediately before being passed to a caller. This merge request tries to accomplish just that with complete transparency and zero side-effects. It has been tested and deployed in Arch Linux x86_64, CMake 3.16.4, GCC 9.2.1:; - resulting relevant CMake config:; ```cmake; #----------------------------------------------------------------------------; # Configure the path to the ROOT headers, using a relative path if possible.; # This is only known at CMake time, so we expand a CMake supplied variable.; #. # ROOT configured for the install with relative paths, so use these; get_filename_component(_ROOT_INCLUDE_DIRS ""${_thisdir}/../../../include"" REALPATH). # resolve relative paths to absolute system paths; get_filename_component(ROOT_INCLUDE_DIRS ""${_ROOT_INCLUDE_DIRS}"" REALPATH). # ROOT configured for the install with relative paths, so use these; get_filename_component(_ROOT_LIBRARY_DIR ""${_thisdir}/../../root"" REALPATH). # resolve relative paths to absolute system paths; get_filename_component(ROOT_LIBRARY_DIR ""${_ROOT_LIBRARY_DIR}"" REALPATH). # ROOT configured for the install with relative paths, so use these; get_filename_component(_ROOT_BINDIR ""${_thisdir}/../../../bin"" REALPATH). # resolve relative paths to absolute system paths; get_filename_component(ROOT_BINDIR ""${_ROOT_BINDIR}"" REALPATH). # Deprecated value, please don't use it and use ROOT_BINDIR instead.; get_filename_component(ROOT_BINARY_DIR ""${ROOT_BINDIR}"" REALPATH); ```; - CMa",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5084:449,safe,safer,449,https://root.cern,https://github.com/root-project/root/pull/5084,1,['safe'],['safer']
Safety,"Currently, jitted actions spawn into existence right before the event; loop (at jitting time). This makes it impossible or unnecessarily complex to:; 1) let RResultPtrs own actions; 2) let actions own their previous node; 3) detect that an action has been booked before the event loop has run. Points 1 and 2 are required by ROOT-9416.; Point 3 is required by several graph-traversing features, e.g. ROOT-9458. The solution is to align the jitted action logic with jitted filters and; defines, and use a placeholder RJittedAction object that sits into the; computation graph and forwards all relevant calls to the concrete, jitted; action which will be created at a later time. RResultPtr logic is also greatly simplified since its action pointer can now always be set at construction time and is always guaranteed to be valid (it points to the RJittedAction owned by the RLoopManager).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2398:225,detect,detect,225,https://root.cern,https://github.com/root-project/root/pull/2398,1,['detect'],['detect']
Safety,"Currently, when I visited any page hosted at root.cern (but not root.cern.ch...) I get a big scary warning (on Firefox) which directs me to https://transparencyreport.google.com/safe-browsing/search?url=http:%2F%2Froot.cern%2F. ![image](https://user-images.githubusercontent.com/9206569/94927540-0b810400-0488-11eb-995d-0eb9ac4e9faf.png). This started this morning. I assume this will eventually be fixed, but as a workaround to make the documentation usable it might be worth changing all the internal links to point to root.cern.ch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6539:178,safe,safe-browsing,178,https://root.cern,https://github.com/root-project/root/issues/6539,1,['safe'],['safe-browsing']
Safety,"Curve::shiftCurveToZero()`; cf98956266 [RF] Add exceptions to setter methods for non-existing objects; 1cc5ec46c8 [RF] Forbid resetting RooFormula; b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test; 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes; 3dcea7036a [RF] Support simultaneous fits in NLL code generation; a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface; 3d01cd2e8f [RF] Remove deprecated RooAbsString; 059af6d55a [RF] Remove RooAbsRootFinder; bdc19e090e [RF] Get rid of RooScaledFunc; 88dbb6ad17 [RF] Make RooGenProdProj private; 94ee158ddc [RF] Remove deprecated RooCatType; d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h; f78558eb0a [RF] Mark template specialization as inline; ca29ccf161 [RF] Some cleanup of public `roofitcore` classes; 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code; 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads; 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`; 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum].; 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar; 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma; f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`; b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation; 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf.; 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files.; 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial.; e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions; 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code; 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing; 7a12837f66 [RF] Split up CodeSquashContext in `.h",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12971:2604,Avoid,Avoid,2604,https://root.cern,https://github.com/root-project/root/pull/12971,3,['Avoid'],['Avoid']
Safety,"Dear ROOT experts,. When using [DD4hep](https://dd4hep.web.cern.ch/dd4hep/) to try and describe the geometry of the upgraded LHCb detector geometry, we've noticed overlapping geometry that's not picked up by running `gGeoManager::CheckOverlaps`. The geometry is attached as ROOT files (Geometry.root and Geometry_ClampInModule.root). To view the geometry we run in a ROOT session (or as a macro); ```c++; TGeoManager::Import(""Geometry.root""); gGeoManager->GetMasterVolume()->Draw(""ogl""); ```; and then running `gGeoManager->CheckOverlaps(0.00001)` Does not find the overlap between the shapes `pvCoolingClamp` and `pvPipeBottom` (The list of shapes can be found by opening a `TBrowser` after importing the geometry and navigating the 'default' folder). The expected behavior here is that overlaps would be found between these shapes as one passes straight through the other. I have also tried moving the Cooling Clamp to the top of the shape and trying again there (see Geometry_ClampInModule.root) and here overlaps are only identified between the Cooling Clamp and simple shapes (e.g. Chips, glue) but not `lvDet` or `lvModule` itself. These 'simple shapes' refer to just cuboids/cylinders/etc rather than subtractions of shapes which is how the others are produced. The expected behavior here is that overlaps would be found between each of these visibly overlapping shapes. Do you know what may be causing this or how it could be fixed?. My setup typically is done by running dd4hep `geoDisplay` however with the attached root files it can be reproduced using any recent LCG view (I used 96b). Geometry ROOT files: [GeometryFiles.zip](https://github.com/root-project/root/files/5328354/GeometryFiles.zip)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6556:130,detect,detector,130,https://root.cern,https://github.com/root-project/root/issues/6556,1,['detect'],['detector']
Safety,"DeclUnloader was trying to unload template instantiations whose point of (first) instantiation was the PCH. This caused problems with the code below. In particular, the class specialization `std::vector<int>` was instantiated in the PCH as part of `std::stack<...>`, which in turn was required by the STL <regex> header.; ```; root [0] std::vector<int> foo, bar;; root [1] std::swap(foo, bar);; root [2] .undo 1; root [3] std::swap(foo, bar);; IncrementalExecutor::executeFunction: symbol '_ZSt15__alloc_on_swapISaIiEEvRT_S2_' unresolved while linking [cling interface function]!; ```. This PR fixes the issue avoiding the unload of decls instantiated in the PCH.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4447:610,avoid,avoiding,610,https://root.cern,https://github.com/root-project/root/pull/4447,1,['avoid'],['avoiding']
Safety,"Declares a new method `RNTuple::Merge` to conform to the `hadd` merger interface, namely: ; https://github.com/root-project/root/blob/331efa4c00fefc38980eaaf7b41b8e95fcd1a23b/io/doc/v530/index.html#L43-L53. I originally thought about to adding this method `RNTupleReader`, but think this is the right choice since it's the `RNTuple` blob that's stored on disk, and we have to parse it into a `RNTupleReader` to do any useful work. . Actually running it segfaults, and I'm not sure whether I've made a mistake in linking or elsewhere. ; ~~**Edit:** segfault fixed by #6016~~; **Edit**: I believe the segfault is fixed by 12fef499c109da4c2454d9cca2e60e88a883aa1c, where I avoid assuming that mergeable objects are derived from `TObject`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6008:670,avoid,avoid,670,https://root.cern,https://github.com/root-project/root/pull/6008,1,['avoid'],['avoid']
Safety,Detect and act upon incomplete TTree entries in RDataFrame,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15641:0,Detect,Detect,0,https://root.cern,https://github.com/root-project/root/pull/15641,1,['Detect'],['Detect']
Safety,Detect mismatched event counts in TTreeReader with friends,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16165:0,Detect,Detect,0,https://root.cern,https://github.com/root-project/root/pull/16165,1,['Detect'],['Detect']
Safety,Detected with -Ddev=ON cmake flags,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12216:0,Detect,Detected,0,https://root.cern,https://github.com/root-project/root/pull/12216,1,['Detect'],['Detected']
Safety,"Directly iterate over all columns and filter by the `fieldId`, avoiding quadratic complexity. This reduces the time for writing 10k integer fields from 28s to 20s. Note that the complexity overall still seems to be quadratic because mapping each field constructs an iterator for it, which requires looping over all columns. ---. Builds on https://github.com/root-project/root/pull/14365",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14366:63,avoid,avoiding,63,https://root.cern,https://github.com/root-project/root/pull/14366,1,['avoid'],['avoiding']
Safety,Disable tensorflow eager execution when evaluating the model in MethodPyKeras This speeds up by more than 100 the model prediction. Re-arrange the code and fixes also a memory leak in allocating the input array,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12261:120,predict,prediction,120,https://root.cern,https://github.com/root-project/root/pull/12261,1,['predict'],['prediction']
Safety,"Disabled not-allowed methods in derived classes (TH2,TH3) by making them protected, this will avoid calling them at run time and now one gets a compile error instead of a run time error as before. ; Unfortunately one cannot prevent calling these methods when using a base class pointer (e.g. TH1 for a TH2). IN that case a run time error will be produced.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4427:94,avoid,avoid,94,https://root.cern,https://github.com/root-project/root/pull/4427,1,['avoid'],['avoid']
Safety,"Do not skip the condition to avoid to build a normalization ratio integrals for the composite terms of the conditional RooProdPdf. The code which was avoid to create the ratio of integrals when the provided range is equal to the default range of the variables was skipped. Not clear why, it is now re-added. This seems to fix the performance issue observed in ; https://root-forum.cern.ch/t/bug-range-command-enforces-numerical-integral/43350.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7178:29,avoid,avoid,29,https://root.cern,https://github.com/root-project/root/pull/7178,2,['avoid'],['avoid']
Safety,Done! I think I've integrated all changes. **TODO:**. - [x] Make commit message more expressive; - [x] Try to make the counters in `RDefineBase` and `GraphNode` atomics; - [x] Look for another solution for the static `TRegex` members; - [x] Add a random sleep to the test cases to stir things up; - [x] Add tests for `Cache` and `Snapshot`; - [x] Point out in the docs that `SaveGraph` is not thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6266:400,safe,safe,400,https://root.cern,https://github.com/root-project/root/pull/6266,1,['safe'],['safe']
Safety,"Due to the way it works by default, sourcing a root version built with; current pyroot was failing, due to the fact that operations such as:. for pyroot_libs_dir in ${old_rootsys}/lib/python*. were performed both in experimental and current. In zsh, if a path specified with '*' is not found, an error like the; following is raised:. clean_environment:20: no matches found: zsh_build/lib/python*. and the program aborts, without sourcing anything. With these change, such loops are performed only if root is built with; pyroot experimental.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4693:413,abort,aborts,413,https://root.cern,https://github.com/root-project/root/pull/4693,1,['abort'],['aborts']
Safety,"Dvecgeom=OFF -Dvmc=no -Dx11=yes -Dxml=yes -Dxrootd=yes -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=/var/tmp/portage/sci-physics/root-9999/work/root-9999_build/gentoo_toolchain.cmake /var/tmp/portage/sci-physics/root-9999/work/root-9999; loading initial cache file /var/tmp/portage/sci-physics/root-9999/work/root-9999_build/gentoo_common_config.cmake; -- The C compiler identification is GNU 10.3.0; -- The CXX compiler identification is GNU 10.3.0; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: /usr/lib/ccache/bin/x86_64-pc-linux-gnu-gcc - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/lib/ccache/bin/x86_64-pc-linux-gnu-g++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Git: /usr/bin/git (found version ""2.31.1"") ; -- Detected ROOT_VERSION 6.25.01; -- Looking for Python; -- Found Python3: /usr/bin/python3.8 (found version ""3.8.10"") found components: Interpreter Development NumPy Development.Module Development.Embed ; -- The Fortran compiler identification is GNU 10.3.0; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Check for working Fortran compiler: /usr/bin/x86_64-pc-linux-gnu-gfortran - skipped; -- Checking whether /usr/bin/x86_64-pc-linux-gnu-gfortran supports Fortran 90; -- Checking whether /usr/bin/x86_64-pc-linux-gnu-gfortran supports Fortran 90 - yes; -- Found GCC. Major version 10, minor version 3; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed; -- Looking for pthread_create in pthreads; -- Looking for pthread_create in pthreads - not found; -- Looking for pthread_create in pthread; -- Looking for pthread_create in pthread - found; -- Found Threads",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8193:3239,Detect,Detected,3239,https://root.cern,https://github.com/root-project/root/issues/8193,1,['Detect'],['Detected']
Safety,"Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup.; ; This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1632:693,avoid,avoid,693,https://root.cern,https://github.com/root-project/root/pull/1632,1,['avoid'],['avoid']
Safety,"Enable `-Wredundant-parens`, to warn about redundant parentheses in declarators whose parsing might not match the user intent, e.g.; ```; root [0] int i = 1;; root [1] (bool)i; (bool) true; root [2] bool(i); ROOT_prompt_1:1:5: redundant parentheses surrounding declarator [-Wredundant-parens]; bool(i); ^~~; (bool) false; ```. For more information see the discussion [here](http://github.com/root-project/issues/8304).; This PR fixes issue #8304.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8555:43,redund,redundant,43,https://root.cern,https://github.com/root-project/root/pull/8555,2,['redund'],['redundant']
Safety,"Enabled when configured with `root --web` or `root --web=on`; It tries to use local displays like CEF or Qt6 or Qt5 first. ; If not available, try to use detected ""native"" browsers like Chrome or Firefox. ; All these display kinds provides comfortable window management which are very like to normal windows.; Only if none of this will work default system web browser will be started - as it was up to now. Extend TROOT::SetWebDisplay() docu and `root --help` output",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15313:154,detect,detected,154,https://root.cern,https://github.com/root-project/root/pull/15313,1,['detect'],['detected']
Safety,"Especially `gROOT->ProcessLine(Form(""pattern"",...))` can be risky.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13439:60,risk,risky,60,https://root.cern,https://github.com/root-project/root/pull/13439,1,['risk'],['risky']
Safety,Especially the integral code in `RooAbsAnaConvPdf` can be made more; concise by avoiding boilerplate code for iterators and manual memory; management.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10686:80,avoid,avoiding,80,https://root.cern,https://github.com/root-project/root/pull/10686,1,['avoid'],['avoiding']
Safety,Eve7: try avoid conflicts with normal GL/glu.h include,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2873:10,avoid,avoid,10,https://root.cern,https://github.com/root-project/root/pull/2873,1,['avoid'],['avoid']
Safety,Eve7: try to avoid TVirtualx.h and GL_glu.h in same file,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2905:13,avoid,avoid,13,https://root.cern,https://github.com/root-project/root/pull/2905,1,['avoid'],['avoid']
Safety,"Even if something within the event loop throws, we still need to call `CleanUpTask` to make sure `SnapshotHelperMT::FinalizeTask` gets called, to avoid teardown issues due to input and output TTrees of a Snapshot being deleted concurrently.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5214:146,avoid,avoid,146,https://root.cern,https://github.com/root-project/root/pull/5214,1,['avoid'],['avoid']
Safety,"Even though cloning the constraint term is technically only required when the computation graph is changed because global observables are taken from data, it is safer to clone the constraint model in general to reset the normalization integral caches and avoid ASAN build failures (the PDF of the main measurement is cloned too anyway, so not much overhead). This can be reconsidered after the caching of normalization sets by pointer is changed to a more memory-safe solution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11669:161,safe,safer,161,https://root.cern,https://github.com/root-project/root/pull/11669,3,"['avoid', 'safe']","['avoid', 'safe', 'safer']"
Safety,"Events are double counted if one accidentally defines overlapping ranges; and uses them in a multi-range fit. This happened for example in Jira; issue ROOT-9548 where the whole dataset was double counted, leading to; the parameter uncertainties being underestimated by a factor of sqrt(2).; ; That situation should be avoided. This commit introduces a check for; overlapping ranges before the multi-range likelihood is created. Confusing situations such as reported in [ROOT-9548](https://sft.its.cern.ch/jira/browse/ROOT-9548) are avoided now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7816:318,avoid,avoided,318,https://root.cern,https://github.com/root-project/root/pull/7816,2,['avoid'],['avoided']
Safety,"Every RooFit pdf is evaluated with a set of variables to normalize over; (normalization set). A pointer to the last used normalization set is; stored in the pdf class. sometimes, pdfs are evaluated without a; normalization set in RooFit if the normalization doesn't matter. But for; a specific class the normalization always matters: the RooAddPdf Because; if the components are unnormalized, you get the wrong shape of the sum. That's why commit f6d1543 added some lines to use the last-used; normalization set if you evaluate a RooAddPdf without a normalization; set. But since the pdf only has a *pointer* to the last-used; normalization set, it will have an invalid pointer if the actual; previous normalization set gets destroyed. Because of RooFits memory pool for the RooArgSets that only recycles; memory every 6000 RooArgSets, the invalid `_normSet` problem only gets; visible in large models, but if the model is large enough it causes; reproducible crashes, as reported by the ATLAS Higgs combination group. This commit fixes the issue by copying the last-used normalization set; into the RooAddPdf, instead of only storing a pointer. Furthermore, the; logic to override the empty normalization set with the last-stored; normalization set is moved to `RooAbsPdf::getNormAndCache()`, avoiding; the overload of `RooAbsPdf::getValV()`. Initially, the check where the copied normalization set needs to be updated was done based on the address of the normalization set. However, comparisons by address should be avoided because they can lead to false positives if memory is recycled. That's why this PR also contains the UniqueId mechanism already proposed and reviewed in https://github.com/root-project/root/pull/8324. The backport of this PR to v624 is the PR https://github.com/root-project/root/pull/8579, which doesn't use the safer uniqueId mechanism, which is probably too big of a change for a patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8580:1294,avoid,avoiding,1294,https://root.cern,https://github.com/root-project/root/pull/8580,3,"['avoid', 'safe']","['avoided', 'avoiding', 'safer']"
Safety,"Every RooFit pdf is evaluated with a set of variables to normalize over; (normalization set). A pointer to the last used normalization set is; stored in the pdf class. sometimes, pdfs are evaluated without a; normalization set in RooFit if the normalization doesn't matter. But for; a specific class the normalization always matters: the RooAddPdf Because; if the components are unnormalized, you get the wrong shape of the sum. That's why commit f6d1543 added some lines to use the last-used; normalization set if you evaluate a RooAddPdf without a normalization; set. But since the pdf only has a *pointer* to the last-used; normalization set, it will have an invalid pointer if the actual; previous normalization set gets destroyed. Because of RooFits memory pool for the RooArgSets that only recycles; memory every 6000 RooArgSets, the invalid `_normSet` problem only gets; visible in large models, but if the model is large enough it causes; reproducible crashes, as reported by the ATLAS Higgs combination group. This commit fixes the issue by copying the last-used normalization set; into the RooAddPdf, instead of only storing a pointer. Furthermore, the; logic to override the empty normalization set with the last-stored; normalization set is moved to `RooAbsPdf::getNormAndCache()`, avoiding; the overload of `RooAbsPdf::getValV()`. This is a backport of https://github.com/root-project/root/pull/8580, minus the safer uniqueId mechanism, which is probably too big of a change for a patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8579:1294,avoid,avoiding,1294,https://root.cern,https://github.com/root-project/root/pull/8579,2,"['avoid', 'safe']","['avoiding', 'safer']"
Safety,"Every worker stores the RDataFrame created and the computation graph jitted during the first task in a process-wide dictionary serving as a cache. This is required in order to avoid having to re-jit the computation graph at each task. This commit introduces a post-execution cleanup job for the Dask workers so that when a distributed execution ends, the workers are instructed to remove the artifacts generated by the execution from the caches. In particular, if the RDataFrame execution was processing a TTree-based dataset, removing the artifact from the cache also notably deallocates the corresponding TTreeCache, one per RDataFrame in-flight in the process. Here are some memory usage flamegraphs obtained with memray running the AGC analysis script. https://cernbox.cern.ch/s/YPEmBfULdvy8CbN. You will find the following:; * report_1sample_1file_2task_master.html : 1 RDataFrame, 1 file, 2 partitions. Total memory seen 293 MB; * report_1sample_1file_2task_cleancache.html : 1 RDataFrame, 1 file, 2 partitions. Total memory seen 238 MB; * report_5sample_1file_2task_master.html: 5 RDataFrames, 1 file each, 2 partitions each. Total memory seen 521 MB; * report_5sample_1file_2task_cleancache.html: 5 RDataFrames, 1 file each, 2 partitions each. Total memory seen 249 MB. One can search for the `TTreeCache` symbol and notice that e.g. between the second and the first flamegraphs the difference is ~40MB which is the size of the TTreeCache. Similarly between the 4th and 3rd there is approximately a difference of ~5 TTreeCache sizes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16094:176,avoid,avoid,176,https://root.cern,https://github.com/root-project/root/pull/16094,1,['avoid'],['avoid']
Safety,"Export RooSimultaneous channels as dictionary of names instead of having; the full pdf specification as the value. This change is done because all pdfs should be specified in the; top-level `pdf` structure. The code of the `RooJSONFactoryWSTool` is also refactored such that; `exportObject` doesn't need to take the node where is should put the; object. It's better if it figures out itself to avoid errors when; calling it. Also, I suggest to not strip the `model_` prefix of the name from the; pdf that specifies a HistFactory channel. Otherwise, the name values in; the RooSimultaneous don't match anymore, which is a problem now that we; use names as values.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10791:394,avoid,avoid,394,https://root.cern,https://github.com/root-project/root/pull/10791,1,['avoid'],['avoid']
Safety,External XrootD built from git commit is not detected,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10604:45,detect,detected,45,https://root.cern,https://github.com/root-project/root/issues/10604,1,['detect'],['detected']
Safety,Extraction from #5181 . First of all - add libraries in dependency list when class from such library used; Second - try to remove includes which are not used and coming from libraries which are not in dep list; In two places try to use virtual interfaces (TVirtualTreePlayer and TVirtualPacketizer) to avoid linking to implementation library.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5231:302,avoid,avoid,302,https://root.cern,https://github.com/root-project/root/pull/5231,1,['avoid'],['avoid']
Safety,"File::~TFile (this=0x559367a40820, __in_chrg=<optimized out>) at ../io/io/src/TFile.cxx:566; #17 0x00007fea7e9288d9 in TObject::Delete (this=0x559367a40820) at ../core/base/src/TObject.cxx:178; #18 0x00007fea802bbf82 in TTree::ChangeFile (this=0x559368ca6c20, file=0x559367a40820) at ../tree/tree/src/TTree.cxx:2813; #19 0x00007fea802bf66e in TTree::CopyEntries (this=0x559368ca6c20, tree=0x559368ca7a30, nentries=53446198, option=0x7ffcad78e7a1 "" fast"", needCopyAddresses=true) at ../tree/tree/src/TTree.cxx:3567; #20 0x00007fea802c825a in TTree::Merge (this=0x559368ca6c20, li=0x7ffcad78e560, info=0x7ffcad78e780) at ../tree/tree/src/TTree.cxx:6940; #21 0x00007fea8020066b in ROOT::merge_TTree (obj=0x559368ca6c20, coll=0x7ffcad78e560, info=0x7ffcad78e780) at tree/tree/G__Tree.cxx:4209; #22 0x00007fea7ef8e60d in TFileMerger::MergeOne (this=0x7ffcad78f2b0, target=0x559367a40820, sourcelist=0x7ffcad78f308, type=12, info=..., oldkeyname="""", allNames=..., status=; 0x7ffcad78e6ec: true, onlyListed=; 0x7ffcad78e6ed: false, path="""", current_sourcedir=0x559367c95120, current_file=0x559367c95120, key=0x55936842d580, obj=0x559368ca6c20, nextkey=...) at ../io/io/src/TFileMerger.cxx:660; #23 0x00007fea7ef8f9ae in TFileMerger::MergeRecursive (this=0x7ffcad78f2b0, target=0x559367a40820, sourcelist=0x7ffcad78f308, type=12) at ../io/io/src/TFileMerger.cxx:878; #24 0x00007fea7ef902d4 in TFileMerger::PartialMerge (this=0x7ffcad78f2b0, in_type=12) at ../io/io/src/TFileMerger.cxx:968; #25 0x00007fea7ef8ce3f in TFileMerger::Merge (this=0x7ffcad78f2b0) at ../io/io/src/TFileMerger.cxx:372; #26 0x000055936623997a in operator() (__closure=0x7ffcad78eee0, merger=...) at ../main/src/hadd.cxx:473; #27 0x0000559366239d6e in operator() (__closure=0x7ffcad78ee90, merger=..., start=3, nFiles=10) at ../main/src/hadd.cxx:501; #28 0x000055936623c2a0 in main (argc=13, argv=0x7ffcad78f618) at ../main/src/hadd.cxx:543; fish: Job 1, 'hadd -ff Run2012B_SingleMu10x.r…' terminated by signal SIGABRT (Abort); ⏎ ; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10102:6377,Abort,Abort,6377,https://root.cern,https://github.com/root-project/root/issues/10102,1,['Abort'],['Abort']
Safety,FindVdt.cmake: create imported target and detect version,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3827:42,detect,detect,42,https://root.cern,https://github.com/root-project/root/pull/3827,1,['detect'],['detect']
Safety,"First delete nop method `TMVA::SVWorkingSet::PrintStat()`, then remove many more unused variables in various areas. **Note**: If you absolutely require your part of this PR be split out, we can discuss but it's going to be work that I'd like to avoid if possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11157:245,avoid,avoid,245,https://root.cern,https://github.com/root-project/root/pull/11157,1,['avoid'],['avoid']
Safety,"First introduced by #5083, a mechanism was put in place to build PyROOT for both Python 2 and Python 3. As Python 2 is not supported anymore by ROOT, this patch can be reverted. This helps to get again closer with upstream cppyy and CPyCppyy, avoids setting environment variables when importing ROOT, and reduces overhead in importing the ROOT module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14703:243,avoid,avoids,243,https://root.cern,https://github.com/root-project/root/pull/14703,1,['avoid'],['avoids']
Safety,"First reported at https://root-forum.cern.ch/t/question-about-aliases-in-rdataframe/51155 . Reproducer:. ```cpp; #include <ROOT/RDataFrame.hxx>; #include <TTree.h>. int main() {; TTree t(""t"", ""t"");; auto x = std::make_pair(42, 84);; // This is a weird way to build a tree, but for the purposes of this test; // we we just need to mock a TTree with branches ""topbranch"" and; // ""topbranch.something"" where `something` must not be a data member of the type of ""topbranch""; // (otherwise things ""happen"" to work due to the order in which we do substitutions in RDF, see below).; t.Branch(""topbranch"", &x);; t.Branch(""topbranch"", &x, ""a/I:b/I"");; t.Fill();. auto df = ROOT::RDataFrame(t).Alias(""alias"", ""topbranch"");; // Here we transform `""alias.a == 42""` into `[](std::pair<int, int> &var0) { return var0.a == 42; }`,; // which is not valid C++.; return df.Filter(""alias.a == 42"").Count().GetValue();; }; ```; which yields:. ```; input_line_8:2:45: error: no member named 'a' in 'std::pair<int, int>'; auto func0(pair<int,int>& var0){return var0.a == 42; ~~~~ ^; terminate called after throwing an instance of 'std::runtime_error'; what():; RDataFrame: An error occurred during just-in-time compilation. The lines above might indicate the cause of the crash; All RDF objects that have not run an event loop yet should be considered in an invalid state. fish: Job 1, './repro2' terminated by signal SIGABRT (Abort); ```. The solution is to perform alias substitution in the expression first and then, in a second pass, substitute branch names with dummy variable names (`var0`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11207:1405,Abort,Abort,1405,https://root.cern,https://github.com/root-project/root/issues/11207,1,['Abort'],['Abort']
Safety,"First reported at https://root-forum.cern.ch/t/sequence-of-loading-root-file/48601 . The following is a reproducer:. ```cpp; #include <TFile.h>; #include <TNtuple.h>; #include <iostream>. int main() {; TFile f0(""o1.root"");; TFile f1(""o2.root"");. TNtuple *B2L = f0.Get<TNtuple>(""B2Lc"");; std::cout << ""No clone:\n"";; B2L->GetEntry(0);; std::cout << ""done\n"";. //f0.cd(); uncommenting fixes the issue; TNtuple *B2Lc = static_cast<TNtuple *>(B2L->Clone());; f1.cd();; std::cout << ""Clone:\n"";; B2Lc->GetEntry(0);; std::cout << ""done\n"";; return 0;; }; ```; prints; ```; No clone:; done; Clone:; Error in <TBasket::Streamer>: The value of fKeylen is incorrect (-23644) ; trying to recover by setting it to zero; Error in <TBasket::Streamer>: The value of fObjlen is incorrect (-2020426277) ; trying to recover by setting it to zero; Error in <TBranch::GetBasket>: File: o2.root at byte:3872444835, branch:m, entry:0, badread=1, nerrors=1, basketnumber=0; done; ```. [files.zip](https://github.com/root-project/root/files/7969912/files.zip)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9757:677,recover,recover,677,https://root.cern,https://github.com/root-project/root/issues/9757,2,['recover'],['recover']
Safety,"Fits using bin integrals or fits of ThnSparse where not working in multi-thread mode due to a usage of the non thread-safe function BinData::BinUpEdge; This was showing by failures of bin integral fits and thnsparse fits in the stressHIstoFit.cxx when running with ROOT MT. . This PR fixes this issues. Improvements have been done also for stressHIstoFit such as adding an option ""-t"" to run the tes in MT mode",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5626:118,safe,safe,118,https://root.cern,https://github.com/root-project/root/pull/5626,1,['safe'],['safe']
Safety,"Fix #6393 (at least incrementally) by avoiding the demangling step, and instead exposing the template-ness consistently.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6418:38,avoid,avoiding,38,https://root.cern,https://github.com/root-project/root/pull/6418,1,['avoid'],['avoiding']
Safety,Fix GetZaxis - may fail while dimension was checked before checking histogram. Simplify code - avoid gPad testing,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14892:95,avoid,avoid,95,https://root.cern,https://github.com/root-project/root/pull/14892,1,['avoid'],['avoid']
Safety,"Fix Jira issue #9469: TGFileBrowser ""ExpandDirectories"" Network FS detection",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3265:67,detect,detection,67,https://root.cern,https://github.com/root-project/root/pull/3265,1,['detect'],['detection']
Safety,Fix ROOT-9784. Avoid to use empty name in v5 'replacement name'.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3143:15,Avoid,Avoid,15,https://root.cern,https://github.com/root-project/root/pull/3143,1,['Avoid'],['Avoid']
Safety,Fix [this issue](https://github.com/root-project/root/issues/9514). The change inserts a new line in the SVG file before the <\text> tag. This avoids the syntax error the user sees when inserting a very long text.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14590:143,avoid,avoids,143,https://root.cern,https://github.com/root-project/root/pull/14590,1,['avoid'],['avoids']
Safety,"Fix a debug assertion failure with `vector iterators incompatible` error on Windows in debug mode.; In `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c))",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13321:523,safe,safety,523,https://root.cern,https://github.com/root-project/root/pull/13321,1,['safe'],['safety']
Safety,"Fix a few minor things and pave the way to integrate cutflow reports in TDataFrame. * TDFAction ctor can take a shared_ptr instead of a weak_ptr: TDFAction; can safely assume that the previous node in the chain still exists when it is; being constructed; * fPrevData is now a reference instead of a raw pointer in all classes:; a reference better indicates that we always expect fPrevData to be a valid; node of the chain. In fact, the only case when this condition might not be; met is when the TDataFrameImpl object goes out-of-scope before other nodes; of the chain; we detect this case and throw before trying to access; invalid fPrevData pointers/references.; * use `Long64_t` instead of `int` for all entry variables",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/333:161,safe,safely,161,https://root.cern,https://github.com/root-project/root/pull/333,2,"['detect', 'safe']","['detect', 'safely']"
Safety,Fix according to: https://root-forum.cern.ch/t/redundant-argument-in-tgraphpolar/40368,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6067:47,redund,redundant-argument-in-tgraphpolar,47,https://root.cern,https://github.com/root-project/root/pull/6067,1,['redund'],['redundant-argument-in-tgraphpolar']
Safety,Fix bug ROOT-10854. WHen a parameter is bound don;t go in the regions outside the bounds. This avoids that a new minimum is found. ; Add also a protection to avoid an infinite loop in the new minimum iterative search. Add fix also for the related issue ROOT-10835. In that case avoid 0/0 division in TMInuit when parameter is bounded and minimum is at 0 and bound is 0.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5899:95,avoid,avoids,95,https://root.cern,https://github.com/root-project/root/pull/5899,3,['avoid'],"['avoid', 'avoids']"
Safety,"Fix detected bugs, add separate function for chunk loading with filters, add tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15510:4,detect,detected,4,https://root.cern,https://github.com/root-project/root/pull/15510,1,['detect'],['detected']
Safety,Fix detection of Python3 on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5414:4,detect,detection,4,https://root.cern,https://github.com/root-project/root/pull/5414,1,['detect'],['detection']
Safety,Fix detection of clang version on macOS for builtin TBB,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3926:4,detect,detection,4,https://root.cern,https://github.com/root-project/root/pull/3926,1,['detect'],['detection']
Safety,Fix issue #6670. Avoid infinite recursion from TClass::InheritsFrom.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6680:17,Avoid,Avoid,17,https://root.cern,https://github.com/root-project/root/pull/6680,1,['Avoid'],['Avoid']
Safety,Fix minor redundant code in PyKeras,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6253:10,redund,redundant,10,https://root.cern,https://github.com/root-project/root/pull/6253,1,['redund'],['redundant']
Safety,"Fix nullptr dereference bugs in TClass and TList, wrap TClass.cxx to 120 columns to follow coding conventions, and avoid StreamerInfo lookup when it is cached.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/953:115,avoid,avoid,115,https://root.cern,https://github.com/root-project/root/pull/953,1,['avoid'],['avoid']
Safety,Fix small issues in JavaScript detected by DeepCode [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7467:31,detect,detected,31,https://root.cern,https://github.com/root-project/root/pull/7467,1,['detect'],['detected']
Safety,Fix stressRooFit #4 avoiding an integral error in fitting. Fixes ROOT-10834,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5860:20,avoid,avoiding,20,https://root.cern,https://github.com/root-project/root/pull/5860,1,['avoid'],['avoiding']
Safety,"Fix stressRooFit test #4, a fit of a beta pdf, avoiding the x=0 point where the pdf diverges for some parameter values. This fixes ROOT-10834. This PR fixes also a dependency issue in building test with make in both stressRooFit and StressRooStats",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5860:47,avoid,avoiding,47,https://root.cern,https://github.com/root-project/root/pull/5860,1,['avoid'],['avoiding']
Safety,Fix test tolerance to avoid some failures observed in the last nightly builds ; Do not build cudnn full test for simple RNN when cudnn is not available,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5380:22,avoid,avoid,22,https://root.cern,https://github.com/root-project/root/pull/5380,1,['avoid'],['avoid']
Safety,Fix the following crash when running `roodataset-numpy` and `roodatahist-numpy` on Windows 64:; ```; *** Break *** abort. ==========================================; =============== STACKTRACE ===============; ==========================================. ================ Thread 0 ================; C:\build\night\LABEL\windows64\SPEC\default\V\master\root\bindings\pyroot\cppyy\cppyy-backend\clingwrapper\src\clingwrapper.cxx(198): `anonymous namespace'::TExceptionHandlerImp::HandleException(); C:\build\night\LABEL\windows64\SPEC\default\V\master\root\core\winnt\src\TWinNTSystem.cxx(1766): TWinNTSystem::DispatchSignals(); ucrtbase!raise(); ucrtbase!abort(); ucrtbase!terminate(); VCRUNTIME140!_std_terminate(); VCRUNTIME140_1!??; VCRUNTIME140_1!_NLG_Return2(); VCRUNTIME140_1!_NLG_Return2(); VCRUNTIME140_1!_NLG_Return2(); VCRUNTIME140_1!_CxxFrameHandler4(); d:\a01\_work\43\s\src\vctools\crt\vcstartup\src\gs\amd64\gshandlereh4.cpp(86): __GSHandlerCheck_EH4(); ntdll!_chkstk(); ntdll!RtlUnwindEx(); ntdll!RtlUnwind(); VCRUNTIME140!_report_gsfailure(); C:\build\night\LABEL\windows64\SPEC\default\V\master\root\core\base\src\TException.cxx(33): Throw(); C:\build\night\LABEL\windows64\SPEC\default\V\master\root\bindings\pyroot\cppyy\cppyy-backend\clingwrapper\src\clingwrapper.cxx(201): `anonymous namespace'::TExceptionHandlerImp::HandleException(); C:\build\night\LABEL\windows64\SPEC\default\V\master\root\core\winnt\src\TWinNTSystem.cxx(1766): TWinNTSystem::DispatchSignals(); ucrtbase!seh_filter_exe(); python!??; VCRUNTIME140!_C_specific_handler(); ntdll!_chkstk(); ntdll!RtlRaiseException(); ntdll!KiUserExceptionDispatcher(); C:\build\night\LABEL\windows64\SPEC\default\V\master\root\bindings\pyroot\cppyy\cppyy-backend\clingwrapper\src\clingwrapper.cxx(600): Cppyy::GetActualClass(); C:\build\night\LABEL\windows64\SPEC\default\V\master\root\bindings\pyroot\cppyy\CPyCppyy\src\ProxyWrappers.cxx(897): CPyCppyy::BindCppObject(); C:\build\night\LABEL\windows64\SPEC\default\V\master\root\b,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10741:115,abort,abort,115,https://root.cern,https://github.com/root-project/root/pull/10741,2,['abort'],['abort']
Safety,"Fix the reference file for the v6.22 read test of RooCategory now that; v6.22 has been tagged. The previous file was using an outdated class; structure, and was therefore triggering warnings. (Warnings are not detected yet by CI, but can be seen here: #5591.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5658:210,detect,detected,210,https://root.cern,https://github.com/root-project/root/pull/5658,1,['detect'],['detected']
Safety,Fix thread safety data races,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8572:11,safe,safety,11,https://root.cern,https://github.com/root-project/root/pull/8572,1,['safe'],['safety']
Safety,Fix to avoid redefinition of injected value of macro in test stressTMVA. Visible for C++ module build for Clang 8.0.0:. In file included from <module-includes>:26: ../build/include/TMVA/MethodDNN.h:56:9: warning: 'DNNCPU' macro redefined [-Wmacro-redefined]. #define DNNCPU. While building module 'TMVA' imported from /.../root/test/stressTMVA.cxx:70: In file included from <built-in>:379:; #define DNNCPU 1,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2598:7,avoid,avoid,7,https://root.cern,https://github.com/root-project/root/pull/2598,1,['avoid'],['avoid']
Safety,Fix to avoid redefinition of injected value of macro in test stressTMVA. Visible for C++ module build for Clang 8.0.0:; ```; In file included from <module-includes>:26: ../build/include/TMVA/MethodDNN.h:56:9: warning: 'DNNCPU' macro redefined [-Wmacro-redefined]. #define DNNCPU. While building module 'TMVA' imported from /.../root/test/stressTMVA.cxx:70: In file included from <built-in>:379:; #define DNNCPU 1; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2582:7,avoid,avoid,7,https://root.cern,https://github.com/root-project/root/pull/2582,1,['avoid'],['avoid']
Safety,Fixed typedef names in TMCAutolock to avoid name clash with Geant4 :,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2662:38,avoid,avoid,38,https://root.cern,https://github.com/root-project/root/pull/2662,1,['avoid'],['avoid']
Safety,"Fixes #10449 . Avoids serialisation of the head node which triggered recursive serialisation of all nodes in the graph. The graph is now represented with a flat list with node information. Each element has the operation of the current node and a (integer id) reference to the parent , which the operation should be called upon. In turn, also recreating the graph on each task is not done recursively anymore. Update:. Tests added, code reviewed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10459:15,Avoid,Avoids,15,https://root.cern,https://github.com/root-project/root/pull/10459,1,['Avoid'],['Avoids']
Safety,"Fixes #11390. Improves the workflow of `DisplayHelper::Exec` as follows:; 1. We always check whether there are entries to be displayed with `RDisplay::HasNext`. If so, add one row to the display object; 2. If no more entries should be displayed, signal this node has finished its job. Make sure the call to `StopProcessing` is done only once with a boolean flag, to avoid early stop of the execution due to more stop signals than the children who actually have finished their job.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11398:366,avoid,avoid,366,https://root.cern,https://github.com/root-project/root/pull/11398,1,['avoid'],['avoid']
Safety,"Fixes #6523 . As per comments by Philippe and Guilherme, the behaviour triggered by `TTree::Fill` to change the associated TFile when reaching a size greater than `fgMaxTreeSize` doesn't fit within the scope of TBufferMerger. Avoid calling `TTree::ChangeFile` doesn't change anything from the user perspective and doesn't interfere with the I/O mechanism of TBufferMerger (and thus of the multithreaded RDF Snapshot as well). . While fixing the above issue I found another one that may be related to this. Meanwhile the draft can be discussed. TODO; - [x] Update docs in TTree::Fill, TTree::ChangeFile and TBufferMerger. Tell the users that TBufferMergerFile doesn't trigger this behaviour; - [x] Include the reproducer as test",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6570:226,Avoid,Avoid,226,https://root.cern,https://github.com/root-project/root/pull/6570,1,['Avoid'],['Avoid']
Safety,"Fixes #8750 . To support this usecase we need to send the distributed workers also the names of the subtrees in the main chain. At this point we might want to think of a bit of a reworking of the data structures like `ChainCluster` and `FileAndIndex`, plus I would like to make the function `get_clusters` return less redundant info (currently each cluster also reports the name of the file, the name of the tree and the number of entries which are all the same for clusters belonging to the same file). These improvements are left for the next PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8858:318,redund,redundant,318,https://root.cern,https://github.com/root-project/root/pull/8858,1,['redund'],['redundant']
Safety,"Fixes a ""buffer overflow"" in `G__defineMacro` of `cint`, where `snprintf` is given buffer length that is 1 byte longer that the actual buffer. It is seems like this never caused any actual buffer overflows - at least while building ROOT, where `cint` or rather `rootcint_tmp` is already used. However, this causes issues in certain scenarios, where GCC's (?) fortify mechanism causes `cint` (or rather `rootcint_tmp`) to abort during `G__DEFINE_MACRO(__linux__);`. Notes on my encounter with this issue:; - using GCC 13.2.0 on Ubuntu 24.04; - does not occur in `Debug` build mode, but was debuggable when using `RelWithDebInfo`; - the ROOT version is some legacy patched tarball apparently based on v5.34.00. I did not reproduce this issue using this branch, nor do I plan to, since I encountered other issues earlier during such a build attempt. Consequently, I also didn't run any tests.; If this makes this PR ineligible to merge, I'm fine with having it closed. This way, at least the potential error scenario and a solution are effectively ""documented"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16141:421,abort,abort,421,https://root.cern,https://github.com/root-project/root/pull/16141,1,['abort'],['abort']
Safety,"Fixes a compiler warning. Freetype 2.13.3 changed the type of a data member from char* to; unsigned char*, so we need to pass the correct type to FTContour to; avoid compiler warnings",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16706:160,avoid,avoid,160,https://root.cern,https://github.com/root-project/root/pull/16706,1,['avoid'],['avoid']
Safety,Fixes a problem with using genreflex to create a dictionary for a class that inherits from TObject. The problem was triggered by the thread-safety changes.; Depends on previous pull request (#12).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13:140,safe,safety,140,https://root.cern,https://github.com/root-project/root/pull/13,1,['safe'],['safety']
Safety,"Fixes for Python 3.7. * PyROOT_PyUnicode_AsString changed return type from char* to const char*; * Using _PyObject_GC_TRACK results in linking error:; undefined reference to `_PyGC_generation0'; The python documentation says this about _PyObject_GC_TRACK:; ""A macro version of PyObject_GC_Track(). It should not be used for extension modules.""; So it should not be used. Calling PyObject_GC_Track instead avoids the undefined symbol. I also removed the #ifndef R__WIN32 since the comment indicates that this was added to avoid the same issue on windows. Calling PyObject_GC_Track instead of using the _PyObject_GC_TRACK macro should fix the undefined symbol probelem on windows too.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2276:405,avoid,avoids,405,https://root.cern,https://github.com/root-project/root/pull/2276,2,['avoid'],"['avoid', 'avoids']"
Safety,"Fixes for bug ROOT-1036 (FitResult::Scan); When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer !; This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. ; One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals.; Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4557:296,avoid,avoid,296,https://root.cern,https://github.com/root-project/root/pull/4557,1,['avoid'],['avoid']
Safety,"Fixes issue #8284 where TKeys with the same name as the requested RNTuple; would be attempted to be parsed as an RNTuple, leading to internal; parser assert failures later on. e.g.; ```cpp; // actually holds a TTree named ""Events""; auto reader = RNTupleReader::Open(""Events"", ""test80X_NANO.root"");; ```. Internal error before: ; ```; Fatal: nread == nbytes violated at line 1011 of `~/root/tree/ntuple/v7/src/RMiniFile.cxx'; aborting; ```. Exception thrown after: ; ```; C++ exception with description ""no RNTuple named 'Events' in file 'test80X_NANO.root' (unchecked RResult access!); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8285:425,abort,aborting,425,https://root.cern,https://github.com/root-project/root/pull/8285,1,['abort'],['aborting']
Safety,"Fixes the following warning with CMake 3.24:; ```; CMake Warning (dev) at /usr/share/cmake/Modules/ExternalProject.cmake:3071 (message):; The DOWNLOAD_EXTRACT_TIMESTAMP option was not given and policy CMP0135 is; not set. The policy's OLD behavior will be used. When using a URL; download, the timestamps of extracted files should preferably be that of; the time of extraction, otherwise code that depends on the extracted; contents might not be rebuilt if the URL changes. The OLD behavior; preserves the timestamps from the archive instead, but this is usually not; what you want. Update your project to the NEW behavior or specify the; DOWNLOAD_EXTRACT_TIMESTAMP option with a value of true to avoid this; robustness issue.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11231:697,avoid,avoid,697,https://root.cern,https://github.com/root-project/root/pull/11231,2,['avoid'],['avoid']
Safety,Fixes thread safety issues in the matrix package. Adds consistent operators for TGeoMatrix-derived types.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2365:13,safe,safety,13,https://root.cern,https://github.com/root-project/root/pull/2365,1,['safe'],['safety']
Safety,Fixes version detection e.g. for release / cpack builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3174:14,detect,detection,14,https://root.cern,https://github.com/root-project/root/pull/3174,1,['detect'],['detection']
Safety,Following reproducer fails with a segfault:. ```python; import cppyy. cppyy.cppdef('''; struct Base {; float data;; float& operator[](int idx) { return data; }; };. struct Derived: public Base {; float data;. // Note that you have to derive from Base to make it break!; float& operator[](int idx) { return data; }. // Note that you must put the template here!; template <typename T>; float& operator[](int idx) { return data; }; };; '''). cppyy.gbl.Derived(); ```. There's a corresponding issue submitted to upstream cppyy: https://bitbucket.org/wlav/cppyy/issues/334/segfault-when-creating-proxy-to-derived. This issues were found in the wake of RVec 2.0 (#7502) and may just scratch the surface of an issue in cppyy with picking up methods from derived classes. See the workarounds for `operator[]` and `size` in RVec 2.0 to avoid this problem.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7686:827,avoid,avoid,827,https://root.cern,https://github.com/root-project/root/issues/7686,1,['avoid'],['avoid']
Safety,Following up on 1bd63965cf1 to avoid warnings like these on macOS:; ```; ld: warning: ignoring duplicate libraries: 'googletest-prefix/src/googletest-build/lib//libgtest.a'; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16255:31,avoid,avoid,31,https://root.cern,https://github.com/root-project/root/pull/16255,1,['avoid'],['avoid']
Safety,For Chrome and Firefox browsers full executable path should exists.; It is required to correctly start it with the fork. ; If browser executable was not detected - no need to try it,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2871:153,detect,detected,153,https://root.cern,https://github.com/root-project/root/pull/2871,1,['detect'],['detected']
Safety,"For better modularity in the future, the major end-user ROOT components; like RDataFrame, RooFit, and TMVA should not depend on each other. There was a dependency of RooFit on RDataFrame because of the; RooAbsDataHelper, but it is actually easy to avoid this with forward; declarations. This should have no impact on the user, because if they use RDF, they; probably include it already if they're not using the interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16606:248,avoid,avoid,248,https://root.cern,https://github.com/root-project/root/pull/16606,1,['avoid'],['avoid']
Safety,"For our users, it's important to fix certain parameters in the likelihood easily with any overhead. So far, this didn't work when using gradients from AD, because the gradients were only produced for the parameters that are floating at the time where the likelihood is created. However, it has no additional runtime overhead in backwards AD mode to simply generate the gradient for **all** parameters, and then filter out the right elements in the the RooMinimizer-related code. This is what is implemented in the second commit of this PR. Some changes in the RooAbsMinimizerFcn were necessary to do this filtering: so far it didn't store any information on all the parameters in order. It only stored two separate lists for floating and constant parameters. The first commit in this PR adds the necessary data members (`_allParams` and `_allParamsInit`) to the RooAbsMinimizerFcn for the filtering of parameters. Furthermore, the previous datamembers that stored the parameters separately are removed to avoid duplication and possible desync of information. On this occasion, the parameter management was completely rewritten to be more concise and robust. This will also help later when we integrate the discrete profiling from CMS combine, where changing the state and filtering of minimization parameters is also relevant. It was validated with the ATLAS and CMS likelihoods from ICHEP 2024 that this PR results in no performance regression, even though we are now generating the gradient for more parameters (roughly up to two times more, because for every floating nuisance parameter there is usually one constant global observable that constrains it).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16750:1005,avoid,avoid,1005,https://root.cern,https://github.com/root-project/root/pull/16750,1,['avoid'],['avoid']
Safety,"From Isabel Goos:. I am just writing because I found a mistake on your reference guide that should be corrected.; On this page: https://root.cern.ch/doc/master/classTRolke.html#a77ed9095b5fe47050eeec195eb3b669d; we see the example ""SetPoissonBkgGaussEff(x,y,em,sde,tau)""; but later ""void 	SetPoissonBkgGaussEff (Int_t x, Int_t y, Double_t em, Double_t tau, Double_t sde)"".; So, in the example sde and tau are interchanged. ; We lost some nerves finding this out :) so, if we can avoid this for someone else, we are happy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12976:479,avoid,avoid,479,https://root.cern,https://github.com/root-project/root/pull/12976,1,['avoid'],['avoid']
Safety,"From a high-level perspective, this PR does two things:; * It converts the LCG state back to RANLUX numbers to avoid a bias in the generated numbers as reported by Martin Lüscher. This comes from the fact that the modulus `m = 2 ** 576 - 2 ** 240 + 1` is not a power of 2, so just treating the LCG state as a pool of entropy means that the upper `576 - 240 = 336` bits have a higher probability of being 0 than 1.; * Extract only 48 bits instead of 52 bits per random number. This restores the connection to the theoretical properties derived from understanding the original subtract-with-borrow recursion as a dynamical system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8293:111,avoid,avoid,111,https://root.cern,https://github.com/root-project/root/pull/8293,1,['avoid'],['avoid']
Safety,Fully avoid blocking in TCanvas::Update().; Only for expert use.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9713:6,avoid,avoid,6,https://root.cern,https://github.com/root-project/root/pull/9713,1,['avoid'],['avoid']
Safety,"Get rid of the remaining memory leaks, avoid code duplication for simultaneous binned fit test, etc. There is also an additional commit that continues the campaign of making the `roofitcore` tests depend less on `roofit`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11793:39,avoid,avoid,39,https://root.cern,https://github.com/root-project/root/pull/11793,1,['avoid'],['avoid']
Safety,GetCollectionProxy during the setting of fCollProxy calls; TBranchElement::GetInfoImp that in some cases sets fCollProxy; and ends up recording it (sometimes) in the action sequence.; When GetCollectionProxy sets it too (i.e. change it) there is; now a disconnect between the branch and the action sequences that; lead to the action sequence to used an unset collection proxy:. Fatal in <TGenCollectionProxy>: Size> Logic error - no proxy object set.; aborting,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2834:452,abort,aborting,452,https://root.cern,https://github.com/root-project/root/pull/2834,2,['abort'],['aborting']
Safety,"GetTitle is const now, avoid const_cast",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/198:23,avoid,avoid,23,https://root.cern,https://github.com/root-project/root/pull/198,1,['avoid'],['avoid']
Safety,"Give more informative member names to avoid confusion (e.g. eveId, elementId, eve_id); Remove redundant member in object3d: eveId and mstrId, which can be accessed ad eve_el.fElementId, and eve_el.fMasterId. This PR is not a design change.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4810:38,avoid,avoid,38,https://root.cern,https://github.com/root-project/root/pull/4810,2,"['avoid', 'redund']","['avoid', 'redundant']"
Safety,"Given a tree with a branch of type `map<string, bool>`, like the one [in this forum post](https://root-forum.cern.ch/t/sample-splitting-using-rdataframe-not-working-for-the-trees-which-contains-vector-branches/49377), reading it with TTreeReader just yields a crash, while reading it with TTree first prints an error about the missing dictionary, _then_ crashes. ### TTreeReader. ```cpp; void repro_treereader() {; TFile f(""flatntuple_MC_.root"");; auto *t = f.Get<TTree>(""ntuplizer/tree"");; R__ASSERT(t != nullptr);; TTreeReader r(t);; TTreeReaderValue<std::map<std::string, bool>> rv(r, ""HLT_BPH_isFired"");; r.Next();; *rv;; }; ```; ```cpp; $ root -l repro_treereader.C; root [0]; Processing repro_treereader.C... *** Break *** segmentation violation; Root > .qqqqq; Info in <TRint::ProcessLine>: Bye... (try '.qqqqqqq' if still running). *** Break *** segmentation violation; Root > .qqqqqqq; ```. ### TTree. ```cpp; void repro_tree() {; TFile f(""flatntuple_MC_.root"");; auto *t = f.Get<TTree>(""ntuplizer/tree"");; R__ASSERT(t != nullptr);; std::map<std::string, bool> *m = nullptr;; t->SetBranchAddress(""HLT_BPH_isFired"", &m);; t->GetEntry(0);; }; ```; ```; $ root -l -b -q repro_tree.C. Processing repro_tree.C...; Error in <TTree::SetBranchAddress>: The class requested (map<string,bool>) for the branch ""HLT_BPH_isFired"" is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (map<string,bool>) to avoid to write corrupted data. *** Break *** segmentation violation; Root >; *** Break *** segmentation violation; ```. The TTreeReader version should also print the error, so users [don't get confused](https://root-forum.cern.ch/t/sample-splitting-using-rdataframe-not-working-for-the-trees-which-contains-vector-branches/49377).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10254:1481,avoid,avoid,1481,https://root.cern,https://github.com/root-project/root/issues/10254,1,['avoid'],['avoid']
Safety,"Given the following function declared to ROOT and accessed via a Python proxy:. ```; int foo(int x);; ```. Currently accessing its `func_doc`, which in turn calls `CPPMethod::GetPrototype`, gives:. 'int ::foo(int x)'. The extra set of '::' can be avoided by checking that the function is not declared inside a namespace. Note: this is a check, may be not worthy in the end if we find places that rely on those extra ""::"" being present",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11413:247,avoid,avoided,247,https://root.cern,https://github.com/root-project/root/pull/11413,1,['avoid'],['avoided']
Safety,"Given; ```cpp; // tree_with_pair.cpp; void tree_with_pair() {; TTree t(""t"", ""t"");; auto x = std::make_pair(42, 84);; //t.Branch(""topbranch"", &x, ""a/I:b/I""); t.Branch(""topbranch"", &x);; t.Fill();; t.Scan();; }; ```. , without this patch the output is:. ```; Error in <HandleInterpreterException>: Trying to dereference null pointer or trying to call routine taking non-null arguments; Execution of your code was aborted.; In module 'Core':; /home/blue/ROOT/dev/cmake-build-foo/include/TClass.h:635:38: warning: null passed to a callee that requires a non-null argument [-Wnonnull]; size_t hint_offset = ((char*)&(p->second)) - (char*)p;; ^; ```. with this patch:. ```; Processing tree_with_pair.cpp...; ************************************; * Row * topbranch * topbranch *; ************************************; * 0 * 42 * 84 *; ************************************; ```. This fixes #11215 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11227:411,abort,aborted,411,https://root.cern,https://github.com/root-project/root/pull/11227,1,['abort'],['aborted']
Safety,"Gives an example of how to create a derived dataset with the RNTuple API. As an API change, allows accessing a model's default entry while the entry is building. This is safe as values are only added to the entry and existing values remain untouched.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14604:170,safe,safe,170,https://root.cern,https://github.com/root-project/root/pull/14604,1,['safe'],['safe']
Safety,"GraphPolar.cxx.o CMakeFiles/Graf.dir/src/TGraphPolargram.cxx.o CMakeFiles/Graf.dir/src/TGraphQQ.cxx.o CMakeFiles/Graf.dir/src/TImage.cxx.o CMakeFiles/Graf.dir/src/TLatex.cxx.o CMakeFiles/Graf.dir/src/TLegend.cxx.o CMakeFiles/Graf.dir/src/TLegendEntry.cxx.o CMakeFiles/Graf.dir/src/TLine.cxx.o CMakeFiles/Graf.dir/src/TLink.cxx.o CMakeFiles/Graf.dir/src/TMarker.cxx.o CMakeFiles/Graf.dir/src/TMathText.cxx.o CMakeFiles/Graf.dir/src/TPave.cxx.o CMakeFiles/Graf.dir/src/TPaveLabel.cxx.o CMakeFiles/Graf.dir/src/TPaveStats.cxx.o CMakeFiles/Graf.dir/src/TPaveText.cxx.o CMakeFiles/Graf.dir/src/TPavesText.cxx.o CMakeFiles/Graf.dir/src/TPie.cxx.o CMakeFiles/Graf.dir/src/TPieSlice.cxx.o CMakeFiles/Graf.dir/src/TPoints.cxx.o CMakeFiles/Graf.dir/src/TPolyLine.cxx.o CMakeFiles/Graf.dir/src/TTF.cxx.o CMakeFiles/Graf.dir/src/TText.cxx.o CMakeFiles/Graf.dir/src/TWbox.cxx.o CMakeFiles/G__Graf.dir/G__Graf.cxx.o -Wl,-rpath,/home/graemes/tmp/root-build-nobrotli/lib: ../../FREETYPE-prefix/src/FREETYPE/objs/.libs/libfreetype.a /usr/lib/x86_64-linux-gnu/libz.so ../../lib/libmathtext.a ../../lib/libHist.so ../../lib/libMatrix.so ../../lib/libMathCore.so ../../lib/libImt.so ../../lib/libMultiProc.so ../../lib/libNet.so ../../lib/libRIO.so ../../lib/libThread.so ../../lib/libCore.so; 	/usr/bin/ld: ../../FREETYPE-prefix/src/FREETYPE/objs/.libs/libfreetype.a(sfnt.o): in function `sfnt_init_face':; 	sfnt.c:(.text+0x1173a): undefined reference to `BrotliDecoderDecompress'; 	collect2: error: ld returned 1 exit status; ```. If I re-run the link manually adding `/usr/lib/x86_64-linux-gnu/libbrotlicommon.so` it succeeds. The error is avoided entirely if the FTGL libraries are found on the system (specifically for Ubuntu by installing the `libfgtl-dev` package). Naively, it seems there is probably a missing library in `graf2d/graf/CMakeLists.txt`. ### To Reproduce. Try to build ROOT 6.26/06 on an Ubuntu 22.04 machine where FTGL is not natively installed and ROOT self-builds it (`builtin_ftgl` is enabled).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11239:2752,avoid,avoided,2752,https://root.cern,https://github.com/root-project/root/issues/11239,1,['avoid'],['avoided']
Safety,"Happens when try to find and execute static class method without arguments and which returns `void`. First detected with `TPluginHandler`. This is only plugin handler which defined with 0 arguments:; ```; gPluginMgr->AddHandler(""TGeoManagerEditor"", ""*"", ""TGeoManagerEditor"", ""GeomBuilder"", ""LoadLib()"");; ```; ROOT crashes when executed this plugin.; Problem can be cooked down to the reproducer - code which is executed by plugin handler:; ```; {; TClass *cl = TClass::GetClass(""TGeoManagerEditor"");. TString fCtor = ""LoadLib()"";. TString method = fCtor(0, fCtor.Index(""(""));; TString proto = fCtor(fCtor.Index(""("")+1, fCtor.Index("")"")-fCtor.Index(""("")-1);. auto fMethod = cl->GetMethodWithPrototype(method, proto);. auto fCallEnv = new TMethodCall;; fCallEnv->Init(fMethod);. fCallEnv->SetParams();. Longptr_t ret = 0;; fCallEnv->Execute(ret);; }. ```; It crashed when `fCallEnv->Execute` is called. . There is simple workaround:; ```; if (proto.Length() == 0) proto = ""()"";; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11930:107,detect,detected,107,https://root.cern,https://github.com/root-project/root/issues/11930,1,['detect'],['detected']
Safety,"Hi @guitargeek , this pull request add the tutorials for the lagrangian morphing class and also; add an example for the factory interface. The are some accompanying fixes as listed below.; Please take a look and let me know if this looks good !. ## This Pull request:. - Add two tutorials `rf711_lagrangianmorph` and `rf712_lagrangianmorphfit` to demonstrate ; the usage of the `RooLagrangianMorphFunc` class; - The PR also includes an update to `rf512_wsfactory_oper` showing an example for the new; options of `taylorexpand` and `lagrangianmorph`; ; ## Changes or fixes:; - formatting of `tutorials/roofit/rf710_roopoly.py`; - The attribute for new physics couplings in the `RooLagrangianMorphFunc` class is changed ; from `NP` to `NewPhysics` to avoid confusion with other abbreviations; - The `lagrangianmorph` factory interface is update to accept arguments in any order. ## Checklist:. - [ ] tested changes locally. Cheers,; Rahul",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9665:749,avoid,avoid,749,https://root.cern,https://github.com/root-project/root/pull/9665,1,['avoid'],['avoid']
Safety,"Hi Guys,. * Added support to check if R interface is running in the thread of event loop, to avoid segfault in scientific linux running tests.; * Fixed some datatypes according to coding conventions. Cheers,; Omar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/446:93,avoid,avoid,93,https://root.cern,https://github.com/root-project/root/pull/446,1,['avoid'],['avoid']
Safety,"Hi ROOTers!. ### Description; When setting text color in TPaveText (via TAttText::SetTextColor()), text that is set to white displays as black. ### To Reproduce; I produced this unexpected behavior by running the PyROOT code below (Python3). I was _also_ able to reproduce the error by running the equivalent C++ code in the ROOT interactive prompt.; ```; import sys, ROOT as rt; def main(args):; c = rt.TCanvas('c','c',800,600); pave = rt.TPaveText(0.25,0.25,0.75,0.75,option='NDC'); pave.AddText('This line is in black.'); # pave.GetListOfLines().Last().SetTextColor(rt.kBlack) # redundant (black is default); pave.AddText('This line is in red.'); pave.GetListOfLines().Last().SetTextColor(rt.kRed); pave.AddText('This line is in white.'); pave.GetListOfLines().Last().SetTextColor(rt.kWhite); pave.Draw(); c.Draw(); c.SaveAs('color_pave.png'); return; if __name__ == '__main__':; main(sys.argv); ```. ### Output; [Here is what I see as output from the code above (color_pave.png).](https://drive.google.com/file/d/16rtJc1gQtYeifRwNi4ZjDEOvg0TTVqQa/view?usp=sharing). ### Setup; ROOT version: 6.22/02 (built from source); Operating system: macOS 10.14.6. ---------------------------------------------; Let me know if you have any questions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6593:582,redund,redundant,582,https://root.cern,https://github.com/root-project/root/issues/6593,1,['redund'],['redundant']
Safety,"Hi, I am running nightly tests of COOL which is built using PyROOT, and since the 10th September, one test is failing when using ROOT master branch on all the platforms we test (slc6 with gcc8 and centos7 with gcc8-10 and clang10).; I suspect one commit from Sep 9, 2020 to be responsible for this change of behaviour. Here is the error and backtrace:; ```; python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; *** Break *** abort; ===========================================================; There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407).; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6; #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6; #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120; #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411; #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182; #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:195; #6 0x00007facdfe8f519 in TUnixSystem::DispatchSignals(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3644; #7 0x00007facdfe876c8 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6359:662,abort,abort,662,https://root.cern,https://github.com/root-project/root/issues/6359,1,['abort'],['abort']
Safety,"Hi,. I need to install ROOT 6.16 in my laptop (macOS Monterey M1 chip), but it's becoming so difficult due to the installation of TBB, and it also cannot detect the arm architecture (so when I configure the cmake building, I get ```Targeting X86```). . Regarding the TBB issue, this is the output; ```cmake; -- TBB download command succeeded. See also /Users/apereiro/root-histfact-test/new_build/TBB-prefix/src/TBB-stamp/TBB-download-*.log; [ 0%] No update step for 'TBB'; [ 0%] No patch step for 'TBB'; [ 0%] No configure step for 'TBB'; [ 0%] Performing build step for 'TBB'; CMake Error at /Users/apereiro/root-histfact-test/new_build/TBB-prefix/src/TBB-stamp/TBB-build-RelWithDebInfo.cmake:49 (message):; Command failed: 2. 'make' 'compiler=clang' 'CXXFLAGS= -mno-rtm -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX12.1.sdk' 'CPLUS=/Library/Developer/CommandLineTools/usr/bin/c++' 'CONLY=/Library/Developer/CommandLineTools/usr/bin/cc'. See also. /Users/apereiro/root-histfact-test/new_build/TBB-prefix/src/TBB-stamp/TBB-build-*.log; ```. I have been following [this](https://github.com/root-project/root/pull/6120/commits) pull request made by Axel and I made the same changes from the commits, but it's not sufficient to fix the whole problem. . Also I tried to configure with ```-Dbuiltin_tbb=OFF``` since I have the latest tbb from homebrew, but I get; ```cmake; -- Found TBB: /opt/homebrew; CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1159 (if):; if given arguments:. ""VERSION_LESS"" ""2018""; ```. Can you point me to a solution, or propagate the patches you have been developing to older versions like this one?. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10370:154,detect,detect,154,https://root.cern,https://github.com/root-project/root/issues/10370,1,['detect'],['detect']
Safety,"Hi,; One unit test in CMSSW is failing on `aarch64` ( https://github.com/cms-sw/cmssw/issues/31194 ) . We noticed that root is treating `char` as `unsigned` while root is build with `-fsigned-char` e.g. in root interactive shell we get this; 1. aarch64; ```; root [0] static_cast<int>(static_cast<char>(-1)); (int) 255; ``` . 2. amd64; ```; root [0] static_cast<int>(static_cast<char>(-1)); (int) -1; ```. https://github.com/cms-sw/cmsdist/blob/IB/CMSSW_11_2_X/master/root.spec#L40 is how we configure and build root for both amd64 and aarch64. . Is it a known issue? Any suggestion how to fix/avoid this. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6465:594,avoid,avoid,594,https://root.cern,https://github.com/root-project/root/issues/6465,1,['avoid'],['avoid']
Safety,"Highlights:; - Aliases to columns can be defined; - Aliases to column aliases can be defined; - Early detection of mistakes: non-existing column names, incoherent aliasing; - Support of aliased columns in actions and transformations, also jitted",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1048:102,detect,detection,102,https://root.cern,https://github.com/root-project/root/pull/1048,1,['detect'],['detection']
Safety,"HistFactory normally collects histograms automatically, but not if; `HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace` is used.; This commit fixes this defect, and adds sanity checks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3859:176,sanity check,sanity checks,176,https://root.cern,https://github.com/root-project/root/pull/3859,1,['sanity check'],['sanity checks']
Safety,"HistFactory normally collects histograms automatically, but not if; `HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace` is used.; This commit fixes this defect, and adds sanity checks. ROOT-10162. (cherry picked from commit 0f59f6b678ddbd95df0a1319eabbe4772b4b7541)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3899:176,sanity check,sanity checks,176,https://root.cern,https://github.com/root-project/root/pull/3899,1,['sanity check'],['sanity checks']
Safety,"Histo{1,2,3}D and Profile{1,2}D now return objects whose; fDirectory == nullptr, avoiding the possibility of double deletes; due to fDirectory being deleted before the TResultProxy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1772:81,avoid,avoiding,81,https://root.cern,https://github.com/root-project/root/pull/1772,1,['avoid'],['avoiding']
Safety,"I am trying to refactor the old code of ROOT I/O for compression but the even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes of this PR are based on top of another PR https://github.com/root-project/root/pull/3947 for adding support for ZSTD so for our goal just focus on the following commits. ### Removed pointers and unsigned chars https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3; Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer.; Also there is a mess in the compression algorithms since consider the buffers as unsigned chars, and other as chars. The type does not matter since we are only working with bytes but we should use only one to avoid all the casting that we find across the code base. ## TODO; - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be unsigned but perhaps in some section of the code a negative value is used to represent something.; - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`.; - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA.; - What is the current value of maintaining the legacy algorithm (from 1990) of ROOT compression? If it is maintained it would be nice to make it more readable and follow the same structure and naming as the rest of compression algorithm.; - [To be extended]",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4037:867,avoid,avoid,867,https://root.cern,https://github.com/root-project/root/pull/4037,1,['avoid'],['avoid']
Safety,"I had this lying around in an older branch. Could be interesting to add for 6.24, since it makes the new functionality more consistent. Otherwise, the recovery would only work in single-value mode. So far, the recovery from invalid parameters only worked in scalar mode.; Here, RooAbsPdf and RooNLLVar are augmented with the NaN packer trick; also in batch mode.; This allows for propagating information about evaluation errors to the; minimiser.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7266:151,recover,recovery,151,https://root.cern,https://github.com/root-project/root/pull/7266,2,['recover'],['recovery']
Safety,"I initially reported this on the [root forum](https://root-forum.cern.ch/t/roodllsignificancemcsmodule-merge-error/42702). ### Describe the bug; RooAbsMCStudyModule::finalizeRun() returning a RooDataSet sometimes causes a merge error which is difficult to avoid.; Caused by RooMCStudy::_fitParData and RooAbsMCStudyModule data being different sizes. ### Expected behavior; RooMCStudy and RooAbsMCStudyModule data merging correctly,; OR; A way to consistently make the datasets the same size. ### To Reproduce; Run included macro. ```. #include ""RooRealVar.h""; #include ""RooGaussian.h""; #include ""RooConstVar.h""; #include ""RooAddPdf.h""; #include ""RooMCStudy.h""; #include ""RooFFTConvPdf.h""; #include ""RooArgusBG.h""; #include ""RooDLLSignificanceMCSModule.h"". using namespace RooFit;; const double xmin = 4.3, xmax = 4.55, bratio = 0.3, m0 = 4.482;; const int nevents = 100;. void min_mcsign_error() {; 	RooRealVar x(""mresp"", ""x"", 4.3, 4.55);. 	// signal; 	RooRealVar mean_res(""#mean_{gauss}"", ""mean_res"", 4.47);; 	RooRealVar sigma_res(""#sigma_{gauss}"", ""sigma_res"", 0.05);; 	RooGaussian sig(""gs_res"", ""gs_res"", x, mean_res, sigma_res);. 	// background; 	RooRealVar argpar(""shape"", ""argus shape parameter"", -7);; 	RooRealVar power(""power"", ""argus power parameter"", 0.75);; 	RooArgusBG bkg(""bkg"", Form(""Background ARGUS, m_{0} = %.3f"", m0), x, RooConst(m0), argpar, power);. 	// generating distribution; 	RooRealVar nsig(""nsig"", ""signal number"", bratio);; 	RooRealVar nbg(""nbg"", ""bg number"", 1.-bratio); ; 	RooAddPdf mcdist(""distribution"", ""BW+a"", RooArgList(sig, bkg), RooArgList(nsig, nbg));. 	// signal used in model; 	RooRealVar fitmean_res(""#mean_{gauss}"", ""mean_res"", 4.2, 4., 5.);; 	RooRealVar fitsigma_res(""#sigma_{gauss}"", ""sigma_res"", 0.1, 0., 1.);; 	RooGaussian fitsig(""gs_res"", ""gs_res"", x, fitmean_res, fitsigma_res);; 	; 	// background used in model; 	RooRealVar fitargpar(""shape"", ""fit argus shape parameter"", -6.5, -8, -6);; 	RooRealVar fitpower(""power"", ""fit argus power parameter"", 0.5, 0",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6949:256,avoid,avoid,256,https://root.cern,https://github.com/root-project/root/issues/6949,1,['avoid'],['avoid']
Safety,"I introduced those targets because I thought we actually have; dependencies between the different rootcling invocations because; of the C++ modules. After some discussion with Axel, it turns out; we actually always have dependencies here, as the dictionaries; should regenerate the dictionary when one of the referenced; libraries/headers change (as the declarations in there change,; which might influence the current dictionary). We can just safely remove this, the actual dependency which is; ARG_DEPENDENCIES is still in the custom command dependencies; (currently the ROOTCLING_ targets where just a no-op that was; supposed to activated in a later commit when we remove the; ARG_DEPENDENCIES and replace it with the ROOTCLING_; dependencies if runtime_modules was set to ON).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/963:444,safe,safely,444,https://root.cern,https://github.com/root-project/root/pull/963,1,['safe'],['safely']
Safety,"I ported the changes from [pseyfert/tmva-mlp](https://github.com/pseyfert/tmva-mlp) to the code generation. As a test I just ran the class.C network resulting from tutorials/tmva/TMVAClassification.C (with ""MLP"") and evaluated it similar to tutorials/tmva/TMVAClassificationApplication.C. According to callgrind the network evaluation is ~17% cpu cycles faster.; NB: i did not port all changes from pseyfert/tmva-mlp - I did not import the SSE/AVX intrinsics and avoided what seemed too difficult (optimising the putIndices and getIndices out)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/121:463,avoid,avoided,463,https://root.cern,https://github.com/root-project/root/pull/121,1,['avoid'],['avoided']
Safety,"I realized this was broken when updating the VecCore version to 0.4.1. The new version now downloads Vc and UME::SIMD from LCG packages repository, and uses http instead of https, in order to avoid problems in systems in which curl has no support for https. I also took the oportunity to fix a few warnings due to wrong indentation of the code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/598:192,avoid,avoid,192,https://root.cern,https://github.com/root-project/root/pull/598,1,['avoid'],['avoid']
Safety,"I think `if (demangledEnumName)` was meant here, but it is redundant, because behaviour of `free`ing a null pointer is defined and it is no-op.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/248:59,redund,redundant,59,https://root.cern,https://github.com/root-project/root/pull/248,1,['redund'],['redundant']
Safety,"I think these files are fine to remove, but maybe even removing only the ROOT 5 ones would be already enough (they can be recovered from the older version tarballs in any case).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3202:122,recover,recovered,122,https://root.cern,https://github.com/root-project/root/pull/3202,1,['recover'],['recovered']
Safety,"I was looking into ways to improve the target-based usage of ROOT in CMake. I found the missing `INTERFACE_INCLUDE_DIRECTORIES` has already been added to master (Yay!), but there are still other additions that could really help a user trying to use targets:. | New target | Usage |; |---|---|; | `ROOT::Libraries` | This is the target equivalent of `ROOT_LIBRARIES`, and links all common and requested components. |; | ~~`ROOT::Flags`~~ | ~~The target equivalent of `ROOT_*_FLAGS`, `ROOT_DEFINITIONS`, and `ROOT_EXE_LINKER_FLAGS`. Adds the flags that ROOT recommends; this is a smart target and will add `C`, `CXX`, and `FORTRAN` flags as needed depending on the target you link to.~~ |. ~~I have added `_LIST` versions of `FLAGS` variables, since CMake expects the flags to be a real list in most cases (really everywhere except in the `CMAKE_CXX_FLAGS` variable itself). Actually changing them to CMake lists directly might break users code, so this way is safer.~~. Target based approach before (showing the old INCLUDE issue too). ```cmake; cmake_minimum_required(VERSION 3.4). project(RootSimpleExample LANGUAGES CXX); find_package(ROOT CONFIG REQUIRED COMPONENTS RooFit RooFitCore); # Note: Symbols missing compiling error if user forgets RooFitCore!. # Already fixed in ROOT master; set_property(TARGET ROOT::Core PROPERTY; INTERFACE_INCLUDE_DIRECTORIES ""${ROOT_INCLUDE_DIRS}""). # Fix for ROOT_*_FLAGS not actually being a CMake list; separate_arguments(ROOT_CXX_FLAGS); separate_arguments(ROOT_EXE_LINKER_FLAGS). # Setting up the recommended ROOT flags; add_library(ROOT::Flags IMPORTED INTERFACE); set_property(TARGET ROOT::Flags APPEND PROPERTY; INTERFACE_COMPILE_OPTIONS ${ROOT_CXX_FLAGS}); set_property(TARGET ROOT::Flags APPEND PROPERTY; INTERFACE_COMPILE_DEFINITIONS ${ROOT_DEFINITIONS}); #set_property(TARGET ROOT::Flags APPEND PROPERTY; # INTERFACE_LINK_LIBRARIES ${ROOT_EXE_LINKER_FLAGS}). # Adding an exectuable program and linking to needed ROOT libraries; add_executable(RootSimple",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1959:959,safe,safer,959,https://root.cern,https://github.com/root-project/root/pull/1959,1,['safe'],['safer']
Safety,"Idea to create separate actions list, which will be used only for text-based streaming.; Most actions functions can be reused from normal I/O, ; only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:; - creating separate list **fWriteText,** now used only with JSON; - provide new method TStreamerInfo::AddWriteTextAction() to fill actions list; - actions build from the full list of class members (avoid compressed members); - provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop; - make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:; - TNamed and TObject as direct data members; - correct store of kSTLp members with arrays; - kStreamLoop member with fCounter==0; - kStreamLoop member with fCounter==1; - rudimentary support for TRef; - store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/578:573,avoid,avoid,573,https://root.cern,https://github.com/root-project/root/pull/578,1,['avoid'],['avoid']
Safety,"If IMT is disabled, TTree::Fill() is constructing and destructing the; imtHelper object at every call and never using it. By moving its; declaration into the #ifdef, we avoid this penalty. This commit also; avoids the penalty of checking for fIMTEnabled if IMT is disabled. VTune performance analysis (comparison of two basic hotspots analyses):. ![screenshot](https://user-images.githubusercontent.com/249404/27871466-078e31c0-61a6-11e7-99f7-295d7282bc5c.png). Note the time difference in `TTree::Fill()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/741:169,avoid,avoid,169,https://root.cern,https://github.com/root-project/root/pull/741,2,['avoid'],"['avoid', 'avoids']"
Safety,"If ROOT compiled with CEF3 support, new canvas will be created not in the web browser, ; but with CEF methods. ; Also when rootqt5 is compiled, one can run macro and open canvas with Qt windows; See gui/canvaspainter/README for more details. @peremato ; Build procedure should be changed; CEF should be detected/configured when top ROOT cmake is called; Also some resources should be copied or linked from CEF into ROOT installation; ; rootqt5 executable should be compiled when qt5 with required plugins (qt5-webengine) is exists",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/789:303,detect,detected,303,https://root.cern,https://github.com/root-project/root/pull/789,1,['detect'],['detected']
Safety,"If browser executable were detected by cmake,; add `test-stressgraphics-chrome` and `test-stressgraphics-firefox` test. Analyze produced images by blocks - first run N tests and then check image sizes.; In web mode this allows to really use batch mode when up to 80 images produced with single browser call.; This reduce test execution time from 110 to 52 seconds, or even 43 seconds with firefox. Calculate web rootmark based on realtime - while most time spent in the browser execution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16610:27,detect,detected,27,https://root.cern,https://github.com/root-project/root/pull/16610,2,['detect'],['detected']
Safety,If gDirectory is a nullptr use gROOT. TObject::Clone uses; TDirectory[File]::CloneObject and the TDirectoryFile object; actually change the behavior (set gFile to nullptr) in a way; that probably require significant surgery to avoid using the; virtual function.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3184:227,avoid,avoid,227,https://root.cern,https://github.com/root-project/root/pull/3184,4,['avoid'],['avoid']
Safety,"If the constructor of the contained object is not run (e.g. because; assembling its arguments triggered an exception), the dtor must not; be run when destructing the cling::Value. Detect this case by imprinting; canary bytes into the contained object bytes: if they have changed,; run the dtor, if not assume that the constructor has failed. This will cause false positives in those cases where the constructor; is not modifying the first object bytes: in these cases, the dtor; is not run even though the ctor is run. That is still better than; the other case (where the dtor crashes because no ctor was run).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4074:180,Detect,Detect,180,https://root.cern,https://github.com/root-project/root/pull/4074,1,['Detect'],['Detect']
Safety,"If the parameters of a function are outside of the definition range,; all kinds of errors might occur. PDFs might be negative, have negative; integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit.; This value was always the same, though.; Like this, Minuit cannot compute a gradient to get out of this region,; because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a; parameter point into the mantissa of a NaN, e.g. how much negative the; values of a PDF came out or how far the sum of PDF coefficients is from; 1. This information is packed into NaN using ""RooNaNPacker"", and passed; through the computation graph. It is finally unpacked in RooMinimizerFcn; before being handed to the minimiser. This allows for the calculation of; gradients, enabling the fitter to recover from an invalid state more; easily. When NaNs are being unpacked, they are presented to Minuit as maximum; function value + badness * penaltyStrength, so a gradient can be; computed that points away from the bad region. The maximum function; value comes from previous minimisation steps, the badness is the payload; of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum; function value is not (yet) known, 0. + badness * strength is used.; Once a well-defined region is found, the valid function values are; offset such that they are all lower than 0. In this way, Minuit is; encouraged to step into the well-defined regions, and sees a rapidly; rising function when stepping out. When fit results are saved, though,; this offset is subtracted in order to recover ""correct"" NLL values. Concretely:; - Add RooNaNPacker.; - Add a function to set the magnitude of the penalty term that's; supposed to drive the minimiser away from undefined regions.; - Add a function to RooMinim",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6401:935,recover,recover,935,https://root.cern,https://github.com/root-project/root/pull/6401,1,['recover'],['recover']
Safety,"If the parameters of a function are outside of the definition range,; all kinds of errors might occur. PDFs might be negative, have negative; integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit.; This value was always the same, though.; Like this, Minuit cannot compute a gradient to get out of this region,; because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a; parameter point into the mantissa of a NaN, e.g. how much negative the; values of a PDF came out or how far the sum of PDF coefficients is from; 1. This information is packed into NaN using ""RooNaNPacker"", and passed; through the computation graph. It is finally unpacked in RooMinimizerFcn; before being handed to the minimiser. This allows for the calculation of; gradients, enabling the fitter to recover from an invalid state more; easily. When NaNs are being unpacked, they are presented to Minuit as maximum; function value + badness * penaltyStrength, so a gradient can be; computed that points away from the bad region.; If the minimisation starts out in an undefined region, and the maximum; function value is unknown, 0. + badness * strength is passed on.; Once a well-defined region is found, the valid function values are; offset such that they are all lower than 0. This way, Minuit is; encouraged to step into the well-defined regions. When fit results are; saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6383:935,recover,recover,935,https://root.cern,https://github.com/root-project/root/pull/6383,2,['recover'],['recover']
Safety,"Implement and use a thread-safe container for caching strings that are created and used in the computation graph. Notably, these include the strings representing column names generated by `Define`. This fixes the recent failures seen on MacOS in the `dataframe-vary` unittest. Since that underlines a thread-safety issue in the overall initialisation phase of MT RDF runs, it should be backported to 6.32",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15652:27,safe,safe,27,https://root.cern,https://github.com/root-project/root/pull/15652,2,['safe'],"['safe', 'safety']"
Safety,"Implement parallel page compression using `RPageSinkBuf`. When it's time to commit the cluster, the buffered pages are passed to the task scheduler to be compressed. Each page is given a `RNTupleCompressor` which both handles the compression and serves as the compression scratch buffer. `RNTupleCompressor` was adjusted to take a user-provided size to avoid wasting memory for small pages (16MB was the fixed size).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8077:353,avoid,avoid,353,https://root.cern,https://github.com/root-project/root/pull/8077,1,['avoid'],['avoid']
Safety,Improve startup by 15% (avoid redundant work).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10354:24,avoid,avoid,24,https://root.cern,https://github.com/root-project/root/pull/10354,2,"['avoid', 'redund']","['avoid', 'redundant']"
Safety,Improve the calculation for the binary cross entropy loss when the inputs are very large (and also very large negative). Use correct log approximation to avoid loss of precisions and returning infinity values. Fix both the CPU and GPU calculations. This has been initiated by this post https://root-forum.cern.ch/t/when-tmva-comput-loss-some-eopchs-loss-is-inf/57018/ where `inf` loss values were obtained during training,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14092:154,avoid,avoid,154,https://root.cern,https://github.com/root-project/root/pull/14092,1,['avoid'],['avoid']
Safety,Improve thread-safety in tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14472:15,safe,safety,15,https://root.cern,https://github.com/root-project/root/pull/14472,1,['safe'],['safety']
Safety,"Improved variant of PR #578 . Idea to create separate actions list, which will be used only for text-based streaming.; Most actions functions can be reused from normal I/O,; only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. creating separate list fWriteText, now used only with JSON; provide new method TStreamerInfo::AddWriteTextAction() to fill actions list; actions build from the full list of class members (avoid compressed members); provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop; make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. TNamed and TObject as direct data members; correct store of kSTLp members with arrays; kStreamLoop member with fCounter==0; kStreamLoop member with fCounter==1; rudimentary support for TRef; store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/580:592,avoid,avoid,592,https://root.cern,https://github.com/root-project/root/pull/580,1,['avoid'],['avoid']
Safety,In MakeProject avoid dereferencing deleted object.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4285:15,avoid,avoid,15,https://root.cern,https://github.com/root-project/root/pull/4285,1,['avoid'],['avoid']
Safety,"In Python 3, you can't do this because `None` is special:; ```Python; DataError=ROOT.RooAbsArg.None # syntax error!; ```. The tutorials used some workarounds that were either obfuscating `None`; by using the enum value directly, or used the more verbose `getattr`; approach:; ```Python; DataError=ROOT.RooAbsData.ErrorType(2); DataError=getattr(ROOT.RooAbsData, ""None""); ```. This commit pythonizes DataError with the usual string-to-enum; pythonization pattern already used for `LineColor` or `LineStyle` to; avoid this uglieness. One can do now:; ```Python; DataError=""None""; DataError=None; ```. This PR also generalized the string-to-enum pythonization for strings (see the first commit).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9721:510,avoid,avoid,510,https://root.cern,https://github.com/root-project/root/pull/9721,1,['avoid'],['avoid']
Safety,"In RooAbsPdf, the following check is done to check if the normalization; set has changed:; ```C++; RooFit::getUniqueId(nset) != RooFit::getUniqueId(_normSet); ```. This works, but like the previous pointer comparison it still gives; false results if the `_normSet` was replaced buy another RooArgSet at; the same memory location. The problem can be reproduced with this code:. ```C++; using namespace RooFit;. // Create observables; RooRealVar x(""x"", ""x"", -5, 5);; RooRealVar y(""y"", ""y"", -5, 5);. // Create signal pdf gauss(x)*gauss(y); RooGaussian gx(""gx"", ""gx"", x, RooConst(0), RooConst(1));; RooGaussian gy(""gy"", ""gy"", y, RooConst(0), RooConst(1));; RooProdPdf sig(""sig"", ""sig"", {gx, gy});. // Create composite pdf; RooAddPdf model(""model"", ""model"", RooArgList(sig), RooConst(100.));. // The results of the last two lines depend on the order of execution; // which should not be the case!; std::cout << model.getVal(x) << std::endl;; std::cout << model.getVal({x, y}) << std::endl;; ```. The solution would be to replace the `_normSet` member directly with; its unique ID value, but then it could not be used anymore. Hence we; need both. This commit also adds a new private `RooAbsPdf` member functions to set; the `_normSet` together with the new `_normSetId` member, and one; protected `isActiveNormSet(RooArgSet const*)` function. The latter; function is comparing the input to the current `_normSet`, but shortcuts; to `false` is the ID does not match with the last `_normSet` ID. Like; this, we avoid dereferencing invalid `_normSet` pointers. This change is mainly done to fix several of the ASAN build failures in; RooFit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11176:1504,avoid,avoid,1504,https://root.cern,https://github.com/root-project/root/pull/11176,1,['avoid'],['avoid']
Safety,"In RooDataSet, there are constructors to create a dataset as a subset of; another RooDataSet or a TTree, passing either a cut string or a; RooFormulaVar as the cut variable. There were two implementations for the cut string and the RooFormulaVar; case, but it's better to implement one in terms of the other to avoid; code duplication and divergence. The RooFormulaVar version has to be implemented in terms of the cut; string version, because the cut string version is more general: it can; also take an empty string, signifying no cut. Removing functions from the public interface of the data store classes is; okay, because as implementation details of the RooFit dataset classes; they are not supposed to be public anyway.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10506:311,avoid,avoid,311,https://root.cern,https://github.com/root-project/root/pull/10506,1,['avoid'],['avoid']
Safety,"In RooFit, there are many functions that return pointers that are owned; by the caller. We can't change this interface anymore, but we can wrap; the return values transparently in a raw pointer wrapper that is called; a `RooFit::Owner`. On the C++ side, this helps to analyze your code and detect potential; memory leaks. On the Python side, we can tell cppyy to take ownership; of the object if the pointer is wrapped in a owning pointer such as the; `RooFit::Owner`. This is more flexible and convenient than the existing; cppyy way of flagging the CPPOverloads on the Python side with the; `__creates__ = True` attribute for at least two reasons:. 1. This flag can't be applied at the granularity of indivirual C++; overloads; 2. It's only on the Python side, so if you want to flag these functions; in C++ as well as in Python you have to do some bookkeeping. A unit test was implemented to check that the `RooFit::Owner` behaves in; Python as expected, and that there is no memory leaking when using; functions that return them. As a first example, the `RooFit::Owner` is used in the highly used; function `RooAbsPdf::generate`, so we also get quite some test coverage; from the tutorials. In the future after this initial effort, the remaining RooFit functions; should be migrated to fix many memory leaks in PyROOT user code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9392:290,detect,detect,290,https://root.cern,https://github.com/root-project/root/pull/9392,1,['detect'],['detect']
Safety,In TBranchElement init offset avoid stripping part of the name.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7119:30,avoid,avoid,30,https://root.cern,https://github.com/root-project/root/pull/7119,1,['avoid'],['avoid']
Safety,"In `RooAbsReal::getPropagatedError`, the whole computation graph is; cloned with `RooAbsArg::cloneTree` just to evaluate the variations. The; original parameter values are reset after the variations, so it is safe; to use the original graph instead of a clone. The motivation for this change was that when the uncertainties of a; RooRealIntegral are evaluated with `RooAbsReal::getPropagatedError`, a; custom observable range is not effective anymore after cloning the; integral with `cloneTree`. Besides from the integral problem, it's probably good to avoid the clone; because there might be other issues related to the cloning that have not; been discovered yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7477:209,safe,safe,209,https://root.cern,https://github.com/root-project/root/pull/7477,2,"['avoid', 'safe']","['avoid', 'safe']"
Safety,"In a basic [toy experiment example from CMS](https://cms-analysis.github.io/HiggsAnalysis-CombinedLimit/part5/longexercise/#advanced-section-b-computing-limits-with-toys) one can see that [RooProdPdf::factorizeProduct](https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/combine_example_2_old/59) function takes a significant fraction of the runtime, most of which is spent in `RooArgSet::~RooArgSet()`. In this PR, the factorizeProduct method is rewritten with `std::vector`s that are kept alive during the whole loop over pdfs such that memory allocation is avoided in this performance-critical code. A more sustainable solution would be to reuse the model for every toy such that `factorizeProduct` is only called once, but since a lot of RooFit-based code probably doesn't do this I think it's worth speeding up this function. Igprof reports for the CMS combine toy experiment example:; * [without this PR](https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/combine_example_2_old); * [with this PR](https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/combine_example_2_new)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7907:571,avoid,avoided,571,https://root.cern,https://github.com/root-project/root/pull/7907,1,['avoid'],['avoided']
Safety,"In all sub-classes same part to store histogram, list of functions and basic attributes was duplicated. Now all this ; functionality collected in protected `TGraph::SaveHistogramAndFunctions` method. . Also provide `TGraph::SaveArray` method to optimize storage of TGraph arrays in macro - there are quite of them in `TGraphBentErrors` class. Use more compact form for arrays - 16 values in the line. Made `THStack::SavePrimitve()` re-entrant. Histograms names were changed when stored - now names set back. Check for `gPad` in several interactive methods like `TGraph::InsertPoint()` to avoid crash when called from macro. Exclude unnecessary casting to `TObjOptLink` - base `TObjLink` has all required virtual methods already.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11884:588,avoid,avoid,588,https://root.cern,https://github.com/root-project/root/pull/11884,1,['avoid'],['avoid']
Safety,"In case of named arguments, the RooFormula will replace the argument; names with `x[0]` to `x[n]`. There are two things that can go wrong if; RooFormula is not implemented right. First, if there is a variable named; ""x"" it should only be substituted if the matching substring is not; followed by ""["", to not replace existing x[i]. Second, variables with; integer names like ""0"" should only be substituted if the match is not; followed by a ""]"", again to avoid replacing x[i]. This test checks that; these cases are handled correctly. The second case was so far not dealt with correctly, but with this; commit it is. A corresponding unit test was also implemented. The preprocessor commands in `RooFormula` were also reorganized; slightly, such that one can test the `TPRegexp` backend simply by; commenting out the `define ROOFORMULA_HAVE_STD_REGEX`. This pull request fixes an issue reported in the forum:; https://root-forum.cern.ch/t/a-strange-bug-in-rf708-bphysics-c/49152/2",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10105:454,avoid,avoid,454,https://root.cern,https://github.com/root-project/root/pull/10105,1,['avoid'],['avoid']
Safety,In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. Occasionally when loading a shared object the dynamic linker will tell us if something is missing (via dlerror) but only on the intialization path. This patch fixes ROOT-10637.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5235:110,detect,detect,110,https://root.cern,https://github.com/root-project/root/pull/5235,1,['detect'],['detect']
Safety,"In clang a transient file is a header file which is stored in the pch/pcm file. If this file does not exist, clang creates a virtual file of the unzipped stored file. However, if the file exists it compares the size of the file on disk and the size of the transent file. If the two sizes are different it does not complain (as validation is off) but it triggers an assert in when constructing and outdated clang::InputFile. The implementation disallows a overridden or transient file to be out of date. This patch extends the DisableValidation abilities to span not only for timestamps but we avoid checking the file sizes if the file is on the disk. And, instead we just create a virtual file of the file that we already have. This patch should fix a relocation issue for cmssw and some of the reported LCG issues. cc: @oshadura, @davidlange6, @smuzaffar, @emanca, @zygoloid",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4480:593,avoid,avoid,593,https://root.cern,https://github.com/root-project/root/pull/4480,1,['avoid'],['avoid']
Safety,"In https://github.com/root-project/root/pull/11604, many redundancies in the RooMinimizer design became apparent,; and this PR aims to avoid them. The following changes are made:. * The signature of `RooAbsMinimizerFcn::Synchronize()` is changed to not; take a `bool optConst` argument anymore. Ths is because the value of; the argument that was passed by the RooMinimizer instance was always a; member of the `RooAbsMinimizerFcn` anyway. * Change type of `RooMinimizer::Config::verbose` to `bool`, because; `setVerbose()` also takes a `bool` flag. * Give `RooAbsMinimizerFcn` access to the RooMinimizer configuration; such that configuration data does not need to be duplicated. A separate commit in this PR formats the code of the `RooMinimizerFcn`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11695:57,redund,redundancies,57,https://root.cern,https://github.com/root-project/root/pull/11695,2,"['avoid', 'redund']","['avoid', 'redundancies']"
Safety,"In line with what it's done for jitted filters, now the jitting; of custom columns creates the RCustomColumn and assigns it as the; fConcreteCustomColumn of the corresponding RJittedCustomColumn that; was previously booked.; This avoids having the situation in which a certain custom column; has been ""booked"" but is not yet present in the map of custom columns. It will also help with the ""local custom columns"" that are coming; with ROOT-9465.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2239:230,avoid,avoids,230,https://root.cern,https://github.com/root-project/root/pull/2239,1,['avoid'],['avoids']
Safety,In methods like `FindBranch` or `GetBranch` nullptr as argument causing failure. Avoid casting to `(char *)`. Use `nullptr`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10882:81,Avoid,Avoid,81,https://root.cern,https://github.com/root-project/root/pull/10882,1,['Avoid'],['Avoid']
Safety,"In my analysis program I faced a memory leak which was caused by `TH3::DoProject2D` according to `valgrind --leak-check=full` and independently by simple git dissection. Valgrind report:; ```; ==24570== 114,000 (5,160 direct, 108,840 indirect) bytes in 5 blocks are definitely lost in loss record 16,382 of 16,451; ==24570== at 0x483FF3F: operator new(unsigned long) (vg_replace_malloc.c:422); ==24570== by 0x4D9CEF9: TStorage::ObjectAlloc(unsigned long) (in /opt/ROOT-6.24.06/lib/libCore.so.6.24.06); ==24570== by 0x577B7DF: TH3::DoProject2D(char const*, char const*, TAxis const*, TAxis const*, bool, bool, bool, bool) const (in /opt/ROOT-6.24.06/lib/libHist.so.6.24.06); ==24570== by 0x5776AA7: TH3::Project3D(char const*) const (in /opt/ROOT-6.24.06/lib/libHist.so.6.24.06); ```. So I quickly looked at the source code and found TH2D objects are created with the new operator but newer deleted.; https://github.com/root-project/root/blob/1f9dc812978722660f4a5f8310e0ca5fdf442ebe/hist/hist/src/TH3.cxx#L2114. Usually this if-branch in this function is avoided because TH2 is already created (if I understand the code above correctly), but I unfortunately chose the same name for all of my TH3 hists. [Here](https://github.com/root-project/root/files/8488019/report.txt) is my code which causes the memory leak.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10400:1055,avoid,avoided,1055,https://root.cern,https://github.com/root-project/root/issues/10400,1,['avoid'],['avoided']
Safety,"In old versions of RooFormula, one could mutate the internal formula; object from the outside. This was unsafe. Therefore, the visibility of; formula() was reduced.; It can, however, be beneficial to have at least read access. Therefore,; a const overload of the function was provided to give users access.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6250:104,unsafe,unsafe,104,https://root.cern,https://github.com/root-project/root/pull/6250,1,['unsafe'],['unsafe']
Safety,In order to avoid packaging errors from rpmlint:; root.x86_64: E: incorrect-fsf-address /usr/share/emacs/site-lisp/root/root-help.el,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/270:12,avoid,avoid,12,https://root.cern,https://github.com/root-project/root/pull/270,1,['avoid'],['avoid']
Safety,"In order to avoid thread-safety issues, the static class member; TClass::fgCallingNew is no longer a class member and is instead; a file scoped static declared thread_local. It was necessary to; not have it is a class member since CINT could not parse the new; thread_local keyword.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11:12,avoid,avoid,12,https://root.cern,https://github.com/root-project/root/pull/11,2,"['avoid', 'safe']","['avoid', 'safety']"
Safety,"In order to avoid {namespace std} interfering with following include files,; when generating a dictionary file add the {using namespace std;} only after; GenerateNecessaryIncludes method is called. Since many legacy root header files do require this global {using namespace std;}; to complete the tests, old behaviour is kept by default and the global; {using namespace std} can be avoided by adding -noGlobalUsingStd to rootcling invocation. Allow passing ACLiC RootCling flags via .rootrc (Vassil). This is a special patch tailored for v6-20-02",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5510:12,avoid,avoid,12,https://root.cern,https://github.com/root-project/root/pull/5510,2,['avoid'],"['avoid', 'avoided']"
Safety,"In order to avoid {namespace std} interfering with following include files,; when generating a dictionary file declare the {namespace std} only after; GenerateNecessaryIncludes method is called",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5296:12,avoid,avoid,12,https://root.cern,https://github.com/root-project/root/pull/5296,1,['avoid'],['avoid']
Safety,"In order to mark the file as zombie when this happens, I had to change a `goto zombie` into calls to a dedicated helper lambda (done in a separate commit). Otherwise I would have had to move around a few lines just so that the compiler would let me jump from the sanity check to the zombie label (compilers don't allow jumps across variable initializations). This fixes https://github.com/root-project/root/issues/10039.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11719:263,sanity check,sanity check,263,https://root.cern,https://github.com/root-project/root/pull/11719,1,['sanity check'],['sanity check']
Safety,"In particular, `RJitted{Action,Filter,Define}::Run` and similar functions; can be performance hotspots. Avoid the nullptr check there. Many thanks to Josh Bendavid for reporting the problem.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9258:104,Avoid,Avoid,104,https://root.cern,https://github.com/root-project/root/pull/9258,1,['Avoid'],['Avoid']
Safety,"In preparation of moving TError to foundation, this PR removes the direct use of gEnv and gSystem from TError. The functionality is implemented by helper functions instead, which are registered and de-registered upon creation and destruction gEnv and gSystem. The three tasks implemented by helpers are. - Read the ROOT environment in order to get the value of `Root.ErrorIgnoreLevel`; - Get the last system error message; - Abort the process",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5855:425,Abort,Abort,425,https://root.cern,https://github.com/root-project/root/pull/5855,1,['Abort'],['Abort']
Safety,"In rare cases, when processing a TChain and producing a Snapshot,; no entry in the first input TTree passes all Filters, so we never; have the chance to create the branches of the output TTree.; As a consequence, when switching from the first file to the next,; TTree::CopyAddresses fails to find the corresponding branches in; the output tree (which was added as its clone via TTree::AddClone),; and prints a warning (that can be safely ignored). We now instead add the output tree of a Snapshot as a clone of the; input tree more lazily, only when we first process an entry (if ever).; This removes the aforementioned warning, reported at #6848.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7121:431,safe,safely,431,https://root.cern,https://github.com/root-project/root/pull/7121,1,['safe'],['safely']
Safety,"In the RooBatchCompute CPU library, all scalar inputs have to be copied; n times into a buffer that is as long as the SIMD registers, to allow; for vectorization in all cases. To avoid frequent memory allocations, this buffer was made a `static`; variable in the original implementation of the batchcompute library,; which of course made it non-threadsafe. This is now hitting us, because RooFit needs to be able to do multiple; fits concurrently. This is a requirement for CMSSW, and a blocker for; ROOT master adoption in CMSSW since the new CPU backend is the default:; https://github.com/cms-sw/cmsdist/pull/9034. This commit fixes the concurrency problem by doing the buffering in the; DataMaps that are used in the `RooFit::Evaluator`. Like this, multiple; computation graphs can be concurrently evaluated. It was tested with the ATLAS benchmarks in `rootbench` that the fitting; performance remains the same. This PR also makes some code style and memory management improvements documented in the commit messages. It also updates the documentation to make clear the new CPU backend is now the default, which was not done in this PR:; https://github.com/root-project/root/pull/14742",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14877:179,avoid,avoid,179,https://root.cern,https://github.com/root-project/root/pull/14877,1,['avoid'],['avoid']
Safety,"In the RooChi2Var and the related `createChi2` functions in RooAbsReal; and RooAbsPdf, the `DataError` was not explained precisely enough. This commit changes the documentation of the RooChi2Var constructor to; exactly explain what is going on, and the the documentation of the; `createChi2` is updated to link to the RooChi2Var documentation to avoid; code duplication. This commit also replaces some LaTeX formulae from titiles in the; documentation because they are not rendered there. Closes #8615.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10914:346,avoid,avoid,346,https://root.cern,https://github.com/root-project/root/pull/10914,1,['avoid'],['avoid']
Safety,"In the `RooRealIntegral` constructor, there was a `O(N^2)` operation on; the computation graph, checking the dependency of the top-level function; on each other node. This is very expensive in the numer of RooAbsArgs N; is large. Instead of calling `dependsOnValue` for each leaf node, which is; very expensive because it's a recursive function, the value server; leaves are all put in a RooArgSet before the leaf iteration to check; quickly if a leaf is also a value server. This change speeds up the `createNLL` step of large models like the; ATLAS Higgs combination by at least a factor of two or three. In the same PR, I also bring a little other commit, where the ownership of the `cloneSet` in `cloneTree` is released before removing the top node element, in order to avoid ownership ambiguities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10959:774,avoid,avoid,774,https://root.cern,https://github.com/root-project/root/pull/10959,1,['avoid'],['avoid']
Safety,"In the `master` nightlies on Ubuntu 22.04, we see some warnings caused by civentweb:; https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2204,SPEC=soversion,V=master/lastBuild/parsed_console/. ```; warning: ‘SHA1_Init’ is deprecated: Since OpenSSL 3.0 [-Wdeprecated-declarations]; 12345 | SHA1_Init(&sha_ctx);; warning: ‘SHA1_Update’ is deprecated: Since OpenSSL 3.0 [-Wdeprecated-declarations]; warning: ‘SHA1_Final’ is deprecated: Since OpenSSL 3.0 [-Wdeprecated-declarations]; ```. Usage of these deprecated functions has been removed in the civetweb master branch:; https://github.com/civetweb/civetweb/pull/1072. Hence, once civetweb 1.16 is out, the code should by synchronized again with the ROOT repository to avoid these warnings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10403:773,avoid,avoid,773,https://root.cern,https://github.com/root-project/root/issues/10403,1,['avoid'],['avoid']
Safety,"In the current implementation of `RooDataSet::reduceEng`, the dataset; itself was queried to get the weight variable used in the reduced; dataset. This didn't work with the `RooCompositeDataStore`, because a; dataset with this data store doesn't have a weight variable, as these; are encapsulated in the components of the composite store. Hence,; reducing a weighted dataset with a RooCompositeDataStore yields an; unweighted dataset, which is a bug. To fix this problem, this commit implements a separate reduction logic; for the RooCompositeDataStore: the components are now reduced; individually, instead of naively creating a RooCompositeDataStore from a; RooVectorDataStore/RooTreeDataStore. To avoid further code branches in; RooDataSet, a new virtual function `RooAbsDataStore::reduce` is; introduced. The first two commits update the data reduction implementation details such the bugfix is easier to implement (see commit messages for more details). This closes https://github.com/root-project/root/issues/6951.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10397:700,avoid,avoid,700,https://root.cern,https://github.com/root-project/root/pull/10397,1,['avoid'],['avoid']
Safety,"In the implementation of `RooAbsArg::recursiveRedirectServers` a static variable was used to check for cyclic recursion. This is not thread safe an should be avoided. The problem is solved by creating a new `recursiveRedirectServersImpl` function that takes the `callStack` variable also as an argument, and this variable is instantiated separately in each `recursiveRedirectServers` call. Since the code was touched and moved anyway, the implementation of `recursiveRedirectServers` was formatted with clang-format.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11970:140,safe,safe,140,https://root.cern,https://github.com/root-project/root/pull/11970,2,"['avoid', 'safe']","['avoided', 'safe']"
Safety,"In the implementation of `RooHistPdf::plotSamplingHint`, some of the; returned values can be outside the variable definition range. This might; lead to invalid evaluations when the sampling hints are also used to; evaluate other PDF components of a composite PDF, as reported in https://github.com/root-project/root/issues/11482. This commit suggests an improved algorithm for the sampling hint:; consider only bin boundaries that are strictly between the plot limits; within some epsilon, and for the limits just sample two additional; points left and light that are some epsilon aways from the plot limits. The `stressRooFit_ref.root` reference file needs to be updated with this; change, because the sampling changes the RooPlots that are used as; reference objects. The final commit in this PR avoids code redundancy by calling the implementation of `RooHistPdf::plotSamplingHint` also in the `RooHistFunc`. Closes https://github.com/root-project/root/issues/11482.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11701:798,avoid,avoids,798,https://root.cern,https://github.com/root-project/root/pull/11701,2,"['avoid', 'redund']","['avoids', 'redundancy']"
Safety,"In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:; ```; Direct leak of 16 byte(s) in 1 object(s) allocated from:; #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599); #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370; #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108; ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15477:300,detect,detected,300,https://root.cern,https://github.com/root-project/root/pull/15477,1,['detect'],['detected']
Safety,"In the previous PR https://github.com/root-project/root/pull/7344, the biggest challenge has been to make `RooAbsOptTestStatistic` aware if batch mode is enabled to skip the cache optimization. The cleanest way of disabling the cache optimization is to do so directly in the `RooAbsOptTestStatistic` constructor so it is skipped. Unfortunately, the constructor of `RooAbsOptTestStatistic` and its base class `RooAbsTestStatistic` has already a very long signature, and it is already challenging to correctly align all parameters correctly with the position they should have. That's why I propose in this PR to use a struct to group all `RooAbsTestStatistic` parameters. This has several advantages:; * the struct can be initialized with tagged initialization, so alignment errors can be easily avoided; * if a new parameter is added (such as the `batchMode` flag in this PR), only the configuration struct declaration struct needs to be changed; * the default values are defined in a central place and not redundantly in all the relevant constructor declarations/`RooAbsTestStatistic::create` overrides. To make the review easier, this PR only includes the configuration refactor and disabling the cache optimization is batch mode is used. The `RunContextTracker`-related commits would follow in a separate PR, but I already tested that everything together does work and the unit test I created for the `RunContextTracker` succeeds. Two open questions are still:; * the `RooNLLVar::_batchEvaluations` flag is now redundant, but I still kept it to not have to change class versions too often. Is this acceptable?; * the new `RooAbsTestStatistic::_batchMode` takes part in the IO, entailing an increment of the class version. I that acceptable? The advantage here is that if one reads back a serialized RooFit workspace, it can remember if batch mode is used",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7616:794,avoid,avoided,794,https://root.cern,https://github.com/root-project/root/pull/7616,3,"['avoid', 'redund']","['avoided', 'redundant', 'redundantly']"
Safety,"In the v6.26 development cycle cycle, some RooFit helper header files; whose names don't start with the `Roo` prefix sneaked into the; RooFitCore library. These headers have the overly generic names; `Floats.h` and `UniqueId.h`, which calls for trouble in environments; where the ROOT headers are directly installed in the main system include; path (most Linux distributions). To prevent any possible issues, this commit proposes and follows new; conventions for RooFit headers:. * Installed RooFit headers must start with `Roo*` or must be located; in a subdirectory starting with `Roo*` (e.g. RooFit or RooStats).; * Similarly, if the class name doesn't start with Roo, it has to go in; a `Roo*` namespace (usually `RooFit`); * Free functions always need to go in this namespace; * For implmentation details that we can't avoid installing, we can use; a `Roo*::Detail` namespace like we have with `ROOT::Detail` (same; with `Experimental`). We should also keep in mind what we established in PR #9078:. * `inc/` is for installed headers; * `res/` is for headers that are only used at compile time of other; ROOT components; * Headers only used within a library go to `src/`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9394:824,avoid,avoid,824,https://root.cern,https://github.com/root-project/root/pull/9394,1,['avoid'],['avoid']
Safety,Increase test timeout,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10886:14,timeout,timeout,14,https://root.cern,https://github.com/root-project/root/pull/10886,1,['timeout'],['timeout']
Safety,Increase thread safety to fix RBatchGenerator tutorials segfaults,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13302:16,safe,safety,16,https://root.cern,https://github.com/root-project/root/pull/13302,1,['safe'],['safety']
Safety,Increase timeout for PPC64,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6246:9,timeout,timeout,9,https://root.cern,https://github.com/root-project/root/pull/6246,1,['timeout'],['timeout']
Safety,"Initial problem - static array `gLbc`, filled every time file dialog created new with entries with `StrDup`.; Was fixed with first commit. Then replace `char *` by `std::string` and avoid `StrDup`. And finally replace static array by `std::vector` - cleanup automatically when file dialog closed",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7337:182,avoid,avoid,182,https://root.cern,https://github.com/root-project/root/pull/7337,1,['avoid'],['avoid']
Safety,"Initialization of a function static variable is guaranteed to be; done in a thread safe manner by the C++11 standard. Previously, the; static was initialized to 0 and then reset which lead to a data race.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/48:83,safe,safe,83,https://root.cern,https://github.com/root-project/root/pull/48,1,['safe'],['safe']
Safety,"Initializing RooBatchCompute takes over a second when CUDA is also; available on the system. It is unreasonable to do this everytime the; RooFit library is loaded. For example, the time of small unit tests was; completely dominated by the RooBatchCompute initialization time before; this commit. This change entailed another change in `Buffers.cxx` to avoid static; initialization problems. If possible, I'll still try to backport this to the release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9915:352,avoid,avoid,352,https://root.cern,https://github.com/root-project/root/pull/9915,1,['avoid'],['avoid']
Safety,"Inject the ""_tls_array"" constant (0x2C) symbol to avoid unresolved symbol er…",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1804:50,avoid,avoid,50,https://root.cern,https://github.com/root-project/root/pull/1804,1,['avoid'],['avoid']
Safety,Inspired by this forum post:; https://root-forum.cern.ch/t/install-root-in-my-directory-in-a-share-server/60150/2. We can simply require the needed components to avoid manual checking and emitting `FATAL_ERROR`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16008:162,avoid,avoid,162,https://root.cern,https://github.com/root-project/root/pull/16008,1,['avoid'],['avoid']
Safety,"Instead of aborting after `R__ASSERT` fails, a proper exception is now thrown when the `RNTupleInspector` detects inconsistent compression across columns or clusters. Additionally, this PR improves the documentation related to this. N.B. Because at this point there is no way to have different compression across columns or clusters, no tests for checking this assumption have been added yet. When at one point this becomes possible, this should obviously be added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13401:11,abort,aborting,11,https://root.cern,https://github.com/root-project/root/pull/13401,2,"['abort', 'detect']","['aborting', 'detects']"
Safety,"Instead of aborting on an `R__ASSERT`, with this patch RNTuple throws a meaningful exception when trying to open a file that was generated in an incompatible, future format. Fixes lazy loading of the model in `RNTupleReader::LoadEntry()` along the way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7739:11,abort,aborting,11,https://root.cern,https://github.com/root-project/root/pull/7739,1,['abort'],['aborting']
Safety,"Instead, split the code RDataFrame jits every 1k newlines and jit; in chunks. This avoids an explosion in the time required by; optimizer passes, which seem to not deal well with very large; function bodies. See https://github.com/root-project/root/issues/9312 and; https://github.com/root-project/root/issues/7604 for more discussion. @hahnjo can you confirm this helps? It brings jitting times down to reasonable (<1m times) for the cases I tested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9328:83,avoid,avoids,83,https://root.cern,https://github.com/root-project/root/pull/9328,1,['avoid'],['avoids']
Safety,"Introduce a new connectivity check macro to only check for internet connection if needed. If the connection check fails, it means that the feature requiring the; internet connection has to be disabled. This is not allowed when; `fail-on-missing=ON`. Therefore, we can raise the fatal error already in; the connectivity check macro, to avoid some code repetition. The connectivity check macro takes parameter to propagate a hint; to the user on what option to set if he wants to avoid the configuration; code branch that requires the connection check. Also, move all connection check related things in; `SearchInstalledSoftware` to keep things simpler. This PR implements something suggested by @pcanal in this comment: https://github.com/root-project/root/pull/15467#discussion_r1596973607. Closes #11603.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16594:335,avoid,avoid,335,https://root.cern,https://github.com/root-project/root/pull/16594,2,['avoid'],['avoid']
Safety,"Introduce a new method to get a label for the data source that the current RDataFrame is processing. There are three major types:; * The dataframe will process a TTree dataset; * The dataframe will process an empty dataset; * The dataframe will process data from an RDataSource. The function returns a label with the suffix ""DS"" also for the first two cases, to be aligned as much as possible with the RDataSource infrastructure. Make use of this function in distributed RDataFrame to create the headnode of the Python computation graph. This also avoids extra parsing in the factory function which includes opening the first input file once more to distinguish between TTree or RNTuple input (in case the first input argument is a string).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15554:548,avoid,avoids,548,https://root.cern,https://github.com/root-project/root/pull/15554,1,['avoid'],['avoids']
Safety,"Introduce an internal elper class to build a map object that only uses `std::vector`, which can be implicitly converted to `std::map` in C++. This avoids using `std::map` in pythonizations, which can cause assertion failures in Windows debug builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16156:147,avoid,avoids,147,https://root.cern,https://github.com/root-project/root/pull/16156,1,['avoid'],['avoids']
Safety,"Introduce special handler for connecting and disconnecting events; Avoid usage of predefined ""CONN_READY"" and ""CONN_CLOSED"" arguments; Adjust existing widgets and tutorials; These changes in callbacks **brakes backward compatibility** - in my mind, it was necessary. Hide RWebWindowsManager for ordinary users - provide convenience `RWebWindow::Create()` and `RWebWindow::TerinateROOT()` methods. Now one can include just `ROOT/RWebWindow.hxx` to get all necessary functionality. Provide tutorial with simple openui5 panel - of course, using new methods",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4035:67,Avoid,Avoid,67,https://root.cern,https://github.com/root-project/root/pull/4035,1,['Avoid'],['Avoid']
Safety,Introduced by https://github.com/root-project/root/commit/617f5fb4fab9b92b2a95e506b4801364473672bc. The change to a variable length size was not properly propagated to the rest of the `TBranch::Init` function. Fixes the recent ubuntu24 failures of the type; ```; 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec; -- TEST COMMAND -- ; cd /github/home/ROOT-CI/roottest/root/tree/branches; /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest; -- BEGIN TEST OUTPUT --; /usr/bin/gmake -f Makefile test; gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'; ; Processing runnoname.C...; Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'.; *** buffer overflow detected ***: terminated; Aborted (core dumped); gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'; ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15620:487,timeout,timeout,487,https://root.cern,https://github.com/root-project/root/pull/15620,3,"['Abort', 'detect', 'timeout']","['Aborted', 'detected', 'timeout']"
Safety,It fully duplicates TPave::fName member and not required here; Detected in JSON code for TPaletteAxis class,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7490:63,Detect,Detected,63,https://root.cern,https://github.com/root-project/root/pull/7490,1,['Detect'],['Detected']
Safety,It is a minor fix but I though it would be nice to have the complete list since; I always forget the style names for polymarkers and use this documentation as; a reference. May also save someone else's time by avoiding a lookup in the; header file.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/98:210,avoid,avoiding,210,https://root.cern,https://github.com/root-project/root/pull/98,1,['avoid'],['avoiding']
Safety,"It is broken by design, there is no way that this interface can; be used in a safe way. Just get rid of it.# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12166:78,safe,safe,78,https://root.cern,https://github.com/root-project/root/pull/12166,1,['safe'],['safe']
Safety,"It is now base class for `RLegend`, `RPaveText`, `RHistStatsBox`.; Main functionality - consistent positioning relative to the `RFrame`. ; But also drawing without frame is possible - in that case just default frame position will be used.; Plus interactive moving of `RPave` around. Improve `RLegend` class. Now it correctly drawn and can be interactively moved.; Also one can configure custom attributes disregard of other drawables.; Also special I/O mechanism is used to avoid large data transfer of RLegend::REntry - ; referenced drawable ""masked out"" before streaming. Introduce `RPaveText` class. Update JSROOT code correspondingly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5897:474,avoid,avoid,474,https://root.cern,https://github.com/root-project/root/pull/5897,1,['avoid'],['avoid']
Safety,"It is now possible to create independent TMVA::Readers and use; them simultaneously on different threads.; Training of MVAs is still only safe single-threaded. In addition,; it is not safe to use multiple instances of MethodCFMlpANN either; single or multi-threaded because of a global 'this' pointer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/25:138,safe,safe,138,https://root.cern,https://github.com/root-project/root/pull/25,2,['safe'],['safe']
Safety,"It makes recovery of column values slightly faster, which is visible in rootbench.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6325:9,recover,recovery,9,https://root.cern,https://github.com/root-project/root/pull/6325,1,['recover'],['recovery']
Safety,"It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas; on the client side, but does not wait that real update is completed.; Avoids blocking of caller thread.; Have to be used if called from other web-based widget to avoid logical; dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13552:169,Avoid,Avoids,169,https://root.cern,https://github.com/root-project/root/pull/13552,2,"['Avoid', 'avoid']","['Avoids', 'avoid']"
Safety,It was deprecated (by comment) and emptied in year 2000. This patch removes all uses of it and 'registers' it to the modulemap to avoid our duplication algorithms do not find it as a duplicate.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2500:130,avoid,avoid,130,https://root.cern,https://github.com/root-project/root/pull/2500,1,['avoid'],['avoid']
Safety,"It will be central method to paint any primitive on specified pad. To support all kinds of old implementations in TObject class Paint() method will be implemented as:; ```; void TObject::Paint(Option_t *opt); {; if (gPad) ; PaintOn(gPad);; }; ```. Main trick will be painting of pad primitives. There one can use semi-standard method to detect ; if custom `Paint()` method implemented for the object. If yes - such old `Paint()` will be invoked.; ```; if ((void *) (obj->*(&TObject::Paint)) != (void *) (&TObject::Paint)); obj->Paint(lnk->GetOption());; else; obj->PaintOn(this, lnk->GetOption());; ```. If class converted into new scheme - `Paint()` method **MUST** be re removed and replaced by new `PaintOn()`. This is very important to support sub-classes of classes like `TLine` or `TBox`. `TLine::PaintOn()` implemented from very beginning, but `SubClass::Paint()` will exists. Calling scheme will be: `SubClass::Paint()` -> `TObject::Paint()` -> `TLine::PaintOn()`. Step-by-step in all ROOT classes one will implement `PaintOn()` methods - without breaking any existing code.; PR shows example with several ""simple"" classes how it can be done. . During ROOT code modifications graphics continues to work as before. ; But contentiously usage of `gPad` will be reduced.; Main goal - `gPad` should not be touched when painting ROOT classes. ; Only to support arbitrary user classes one will keep `TObject::PaintOn()` as shown. After code conversion is completed, one can declare ; special methods which are using `gPad` (like `TLine::PaintLineNDC()`) deprecated and ; advertise use of new methods (like `TLine::PaintLineNDCOn()`). Ultimate goal - painting of main ROOT classes do not touch `gPad` and thus will be really thread-safe. Interactive methods (like moving stats box around) will still rely on `gPad`, ; but this pointer will not be touched during any re-painting and will remain consistent.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15937:337,detect,detect,337,https://root.cern,https://github.com/root-project/root/pull/15937,2,"['detect', 'safe']","['detect', 'safe']"
Safety,"It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```; genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed.; --; /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12138:901,Abort,Aborted,901,https://root.cern,https://github.com/root-project/root/issues/12138,1,['Abort'],['Aborted']
Safety,"It would greatly help memory safety if ROOT could use more smart pointers in its interfaces. However, the automatic downcasting of returned values is only working for raw pointers. It should work for smart pointers as well. For example, right now this doesn't work:; ```Python; class ClassA {; public:. ClassDef(ClassA, 0);; };. class ClassB : public ClassA {; public:; void helloB() {}. ClassDef(ClassB, 0);; };. ClassA *fooRawPtr() { return new ClassB{}; }. std::unique_ptr<ClassA> fooUniquePtr() { return std::make_unique<ClassB>(); }; ```; Output:; ```txt; <class cppyy.gbl.ClassB at 0x5e1ddf85ed20>; Traceback (most recent call last):; File ""/home/rembserj/repro.py"", line 30, in <module>; out_2.helloB(); ^^^^^^^^^^^^; AttributeError: 'ClassA' object has no attribute 'helloB'; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16210:29,safe,safety,29,https://root.cern,https://github.com/root-project/root/issues/16210,1,['safe'],['safety']
Safety,"It's not necessary because the data token is not set for `RooRealVar`s to begin with:; https://github.com/root-project/root/blob/master/roofit/roofitcore/src/RooFit/Evaluator.cxx#L185. And by not doing this unnecessary resetting, we avoid potential crashes in case the `RooRealVar`s live not as long as the evaluator.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15844:233,avoid,avoid,233,https://root.cern,https://github.com/root-project/root/pull/15844,1,['avoid'],['avoid']
Safety,"I’ve recently updated my ROOT version to v6.20.06 and my once working code snippet to plot several pdf components on the same canvas broke. No matter if I select the pdf components by object reference or by name, i.e. by:. ```; modelTot.plotOn(frame, RooFit::Components(“ modelBkgTotTrig*”),; FillColor(93), LineColor(93), DrawOption(“F”));; ```. or by:. ```; modelTot.plotOn(frame, RooFit::Components(RooArgSet(expo)),; FillColor(93), LineColor(93), DrawOption(“F”));; ```. I get:. ```; [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelTot0) directly selected PDF components: (modelBkgTotTrig0); [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelTot0) indirectly selected PDF components: (); terminate called after throwing an instance of 'std::regex_error'; what(): Unexpected character in brace expression.; Aborted (core dumped); ```. It looks like they are found but then the regex_error appears.; Is this a known issure or shall I do something different to select the pdfs to plot?. Thanks,; Davide",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7115:802,Abort,Aborted,802,https://root.cern,https://github.com/root-project/root/issues/7115,1,['Abort'],['Aborted']
Safety,"LLVM had a bug where constructors with the same priority would not be stably sorted. This has been fixed upstream by https://github.com/llvm/llvm-project/pull/95532, but to avoid relying on a backport this commit works around the issue: The idea is that we lower the default priority of concerned constructors to make them sort correctly. ---. As discussed, this provides a bit of magic :magic_wand: to work around the bug if we don't have the backport, for example in the Conda releases. I propose we still leave the backport in our copy of LLVM though.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16420:173,avoid,avoid,173,https://root.cern,https://github.com/root-project/root/pull/16420,1,['avoid'],['avoid']
Safety,"LLVM had a bug where constructors with the same priority would not be stably sorted. This has been fixed upstream by; https://github.com/llvm/llvm-project/pull/95532, but to avoid relying on a backport this commit works around the issue: The idea is that we lower the default priority of concerned constructors to make them sort correctly. (cherry picked from commit https://github.com/root-project/root/commit/7db43f776d191807c1e4893312fabce7c60160bd, backport of https://github.com/root-project/root/pull/16420)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16462:174,avoid,avoid,174,https://root.cern,https://github.com/root-project/root/pull/16462,1,['avoid'],['avoid']
Safety,"LRngWrapper` pointer and thus invokes its dtor as well. However, `~GSLRngWrapper()` frees the allocated memory only if `fOwn` pointer is set to true, which is only set so in the assignment operator, but not in the `Allocate()` member function. Therefore, the `GSLMCIntegrator` class is leaking memory. This poses a problem, when doing a large number of integrations inside a for loop. The leak was discovered by running valgrind and inspecting the code. Minimal example:; ```cpp; #include <Math/GSLMCIntegrator.h> // ROOT::Math::GSLMCIntegrator. /* built with:. g++ -ggdb3 -Og `root-config --cflags` mcintegrator.cpp -o mcintegrator \; `root-config --libs` -lMathMore. */. int; main(); {; for(unsigned i = 0; i < 20000; ++i); {; ROOT::Math::GSLMCIntegrator vegas(""vegas"", 0., 1.e-1, 10);; }; return 0;; }; ```. Before fix:; ```; valgrind --tool=memcheck --leak-check=full --show-leak-kinds=definite \; --undef-value-errors=no ./mcintegrator. ==12320== Memcheck, a memory error detector; ==12320== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==12320== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info; ==12320== Command: ./mcintegrator; ==12320==; ==12320==; ==12320== HEAP SUMMARY:; ==12320== in use at exit: 100,655,858 bytes in 44,260 blocks; ==12320== total heap usage: 67,782 allocs, 23,522 frees, 101,539,078 bytes allocated; ==12320==; ==12320== 99,089,984 (319,984 direct, 98,770,000 indirect) bytes in 19,999 blocks are definitely lost in loss record 3,515 of 3,515; ==12320== at 0x4C2BE7F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so); ==12320== by 0xAD090F2: gsl_rng_alloc (in /usr/lib/libgsl.so.23.0.0); ==12320== by 0x8223765: Allocate (GSLRngWrapper.h:99); ==12320== by 0x8223765: ROOT::Math::GSLMCIntegrator::GSLMCIntegrator(char const*, double, double, unsigned int) (GSLMCIntegrator.cxx:117); ==12320== by 0x108BF5: main (mcintegrator.cpp:8); ==12320==; ==12320== LEAK SUMMARY:; ==12320== definitely lost: 319,984 bytes in 19,9",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/928:1281,detect,detector,1281,https://root.cern,https://github.com/root-project/root/pull/928,1,['detect'],['detector']
Safety,Let avoid compiler warnings if sub-project compiled with `-Wsuggest-override` . Only some classes are adjusted,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10444:4,avoid,avoid,4,https://root.cern,https://github.com/root-project/root/pull/10444,1,['avoid'],['avoid']
Safety,"Like the tests added in https://github.com/root-project/root/pull/15499/commits/e00aded416c4d8b0c364035353dfb529602fd0e1, these are also sanity checks meant in part as code-as-documentation for users to see how things work. It turns out in this case that GCC on the one hand and Clang and MSVC on the other hand have two different solutions for binary arithmetic operations on two NaNs. In both cases, one of the two NaNs is returned, but in one case it's the first, in the other is it's the second. The tests added in this commit will hopefully warn RooNaNPacker users of this behavior.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15908:137,sanity check,sanity checks,137,https://root.cern,https://github.com/root-project/root/pull/15908,1,['sanity check'],['sanity checks']
Safety,"Link to compilation error:; https://epsft-jenkins.cern.ch/view/ROOT%20Nightly/job/root-nightly-master/1977/LABEL=mac1012,SPEC=noimt/parsed_console/. The error is due to a bug in clang3.5, reproducible in isolation:; https://godbolt.org/z/jtYXv6. The workaround is to avoid specifying the template parameters of a; template base class -- the full type is injected in the derived class; anyway (thanks Axel!).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3098:267,avoid,avoid,267,https://root.cern,https://github.com/root-project/root/pull/3098,1,['avoid'],['avoid']
Safety,List of changes in JSROOT. 1. Fix - abort tree draw operation faster. 1. Fix - catch exception when parsing TF1 formula; 2. Fix - properly check THStack histograms axes when doing sum; 3. Fix - correctly handle negative offset on time axis; 4. Fix - do not use `inset` because of old Chrome browsers; 5. Fix - properly provide object hints. 1. Fix - draw histograms with negative bins #276; 2. Fix - correctly read TLeaf with fixed-size array; 3. Fix - bug in options handling in startGUI; 4. Fix - greyscale support in TLegend drawing; 5. Fix - correctly use text font for TGaxis title; 6. Fix - preserve auto colors in THStack #277; 7. Fix - correctly set pave name #278,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14804:36,abort,abort,36,https://root.cern,https://github.com/root-project/root/pull/14804,1,['abort'],['abort']
Safety,Long time ago this protection was introduced to avoid parsing of complex SQL includes.; With a cling this protection no longer work properly.; Remove it completely,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5255:48,avoid,avoid,48,https://root.cern,https://github.com/root-project/root/pull/5255,1,['avoid'],['avoid']
Safety,"Looking at the code, it was probably the idea at some point in the `RooAbsData` design that the ownership of the variables in the dataset can be shared, i.e. that the outside world can ""claim"" and ""release"" the variables in a RooAbsData. If anything else is still claiming the variables, they will not be deleted by the RooAbsData destructor. That's quite messy. For example, if the RooAbsData is destructed before the external ""claimers"" releases the variables, the claimers suddenly has the responsability to delete the variables themselves. And who of them should do it then? The ownership model is completely unclear. This and other reasons explain probably why the; `RooAbsData::claimVars()` and `RooAbsData::releaseVars()` are not used at all outside the RooAbsData, and this commit suggests to remove these memory-unsafe functions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13179:821,unsafe,unsafe,821,https://root.cern,https://github.com/root-project/root/pull/13179,1,['unsafe'],['unsafe']
Safety,"Looking for LZMA; -- Looking for X11; -- Could NOT find GIF (missing: GIF_LIBRARY GIF_INCLUDE_DIR); -- Could NOT find TIFF (missing: TIFF_LIBRARY TIFF_INCLUDE_DIR); -- Could NOT find PNG (missing: PNG_LIBRARY PNG_PNG_INCLUDE_DIR); -- Could NOT find JPEG (missing: JPEG_LIBRARY JPEG_INCLUDE_DIR); -- Building AfterImage library included in ROOT itself; -- Looking for LibXml2; -- Downloading and building XROOTD version; -- Cannot select cudnn without selecting cuda or tmva-gpu. Option is ignored; -- Building LLVM in 'Release' mode.; -- Could NOT find Z3: Found unsuitable version ""0.0.0"", but required is at least ""4.7.1"" (found Z3_LIBRARIES-NOTFOUND); -- Native target architecture is X86; -- Threads disabled.; -- Doxygen disabled.; -- Go bindings disabled.; -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH); -- OCaml bindings disabled.; -- LLVM host triple: x86_64-unknown-linux-gnu; -- LLVM default target triple: x86_64-unknown-linux-gnu; -- Building with -fPIC; -- Constructing LLVMBuild project information; -- Linker detection: GNU ld; -- Targeting X86; -- Targeting NVPTX; -- Clang version: 9.0.1; -- Cling version (from VERSION file): ROOT_0.9; -- Cling will look for C++ headers in '/usr/bin/../lib64/gcc/x86_64-suse-linux/10/../../../../include/c++/10:/usr/bin/../lib64/gcc/x86_64-suse-linux/10/../../../../include/c++/10/x86_64-suse-linux:/usr/bin/../lib64/gcc/x86_64-suse-linux/10/../../../../include/c++/10/backward' at runtime.; -- And then fallback to: 'clang-12.0.0'; -- Performing Test found_stdstringview; -- Performing Test found_stdstringview - Failed; -- Performing Test found_stdexpstringview; -- Performing Test found_stdexpstringview - Success; -- Performing Test found_stod_stringview; -- Performing Test found_stod_stringview - Failed; -- Performing Test found_stdapply; -- Performing Test found_stdapply - Failed; -- Performing Test found_stdinvoke; -- Performing Test found_stdinvoke - Failed; -- Performing Test found_stdindexsequence; -- ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8097:3288,detect,detection,3288,https://root.cern,https://github.com/root-project/root/issues/8097,1,['detect'],['detection']
Safety,Made TIsAProxy thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/49:22,safe,safe,22,https://root.cern,https://github.com/root-project/root/pull/49,1,['safe'],['safe']
Safety,Made calling TGenCollectionStreamer::Generate thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/57:53,safe,safe,53,https://root.cern,https://github.com/root-project/root/pull/57,2,['safe'],['safe']
Safety,"Made obtaining the list of enums from a TClass thread safe. As part of that, made all the statics used as return values by TCling to be thread_local.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/55:54,safe,safe,54,https://root.cern,https://github.com/root-project/root/pull/55,1,['safe'],['safe']
Safety,Made reading/writing ROOT files thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12:39,safe,safe,39,https://root.cern,https://github.com/root-project/root/pull/12,1,['safe'],['safe']
Safety,Made smatrix code thread safe by removing statics,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/20:25,safe,safe,25,https://root.cern,https://github.com/root-project/root/pull/20,1,['safe'],['safe']
Safety,Main GUI-related classes should be collected in `core/gui` folder.; Avoid situation like TToggle class situated in `core/meta` subfolder,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4543:68,Avoid,Avoid,68,https://root.cern,https://github.com/root-project/root/pull/4543,1,['Avoid'],['Avoid']
Safety,"Make ConditionalObservables accept RooRealVars directly by perfect forwarding all arguments to the RooArgSet constructor. Using ConditionalObservables command argument failed with some Python 3; versions due to ownership problems with the RooArgSet. This commit suggests to always make a copy of (or move) the passed RooArgSet,; and at the same time to change the function signature such that; it can also accept an arbitrary number of observables directly via; variadic templates. This change is to fix the RooFit python tutorial failures in the current nightlies. Note, @Harshalzzzzzzz, that you can reuse this pattern also for the other RooGlobalFuncs, as it also makes calling them more pythonic. For example, with ConditionalObservables, you can now use a tuple (or list) of arguments:; ```Python; effPdf.fitTo(data, ConditionalObservables=(x, y)); ```; instead of:; ```Python; effPdf.fitTo(data, ConditionalObservables=ROOT.RooArgSet(x, y)); ```; although the latter syntax still works because it will use the RooArgSet copy constructor (or move constructor if it's a temporary and detected as such in Python). So we don't break any existing code. This example is from the [rf702_efficiencyfit_2D.py](https://github.com/root-project/root/blob/master/tutorials/roofit/rf702_efficiencyfit_2D.py) tutorial.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8416:1088,detect,detected,1088,https://root.cern,https://github.com/root-project/root/pull/8416,1,['detect'],['detected']
Safety,Make G__FastAllocString cache thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/34:37,safe,safe,37,https://root.cern,https://github.com/root-project/root/pull/34,1,['safe'],['safe']
Safety,Make TCheckHashRecurveRemoveConsistency thread-safe for RecursiveRemo…,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1339:47,safe,safe,47,https://root.cern,https://github.com/root-project/root/pull/1339,2,['safe'],['safe']
Safety,Make TClass::fIsAMethod setting thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/28:39,safe,safe,39,https://root.cern,https://github.com/root-project/root/pull/28,1,['safe'],['safe']
Safety,Make TClass::fStreamerImpl thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/51:34,safe,safe,34,https://root.cern,https://github.com/root-project/root/pull/51,1,['safe'],['safe']
Safety,Make TListOfFunctions::Get thread-safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/118:34,safe,safe,34,https://root.cern,https://github.com/root-project/root/pull/118,1,['safe'],['safe']
Safety,Make TMVA thread-safe with respect to use of Reader,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/25:17,safe,safe,17,https://root.cern,https://github.com/root-project/root/pull/25,1,['safe'],['safe']
Safety,Make TSystem::CompileMacro thread-safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13655:34,safe,safe,34,https://root.cern,https://github.com/root-project/root/pull/13655,1,['safe'],['safe']
Safety,Make string caching in RLoopManager thread-safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15652:43,safe,safe,43,https://root.cern,https://github.com/root-project/root/pull/15652,1,['safe'],['safe']
Safety,Make sure we're using the macOS-native framework version in the OpenGL case. See:; * https://cmake.org/cmake/help/latest/module/FindOpenGL.html#macos-specific; * https://github.com/root-project/root/blob/master/cmake/modules/SearchInstalledSoftware.cmake#L22. This avoids indirectly picking up a X11 dependency by using some other OpenGL installed on the system.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15435:265,avoid,avoids,265,https://root.cern,https://github.com/root-project/root/pull/15435,1,['avoid'],['avoids']
Safety,Make tutorial filenames unique to avoid overwrites,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3029:34,avoid,avoid,34,https://root.cern,https://github.com/root-project/root/pull/3029,1,['avoid'],['avoid']
Safety,"Many improvements in CEF:; - support POST requests, let transfer arbitrary data from client to server; - replace text-based cefQuery messaging by longpoll, required for binary transfer; - assign X11 error handler to avoid application abort in case of minor X11 warnings; - use single-process mode in batch to reduce number of running processes. Provide special handling of batch mode for Chrome and Firefox:; - both support `--headless` mode completely without X ; - very simple workaround to stop browser after 30 s with `timeout 30 chromium ...` command; - let configure custom shell commands via `.rootrc` parameters. Changes in http and webgui libraries:; - ""hide"" TCivetweb, TFastCgi, THttpWSEngine classes from end-user (@Axel-Naumann); - remove some comments from civetweb.c (@amadio); - use std::copy() instead of memcpy() for std::string (@Axel-Naumann); - introduce simple key identification of clients, let recognize which client starts by TWebWindow::Show(); - simplify cmake files, separate v7 code in FitPanel",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1886:216,avoid,avoid,216,https://root.cern,https://github.com/root-project/root/pull/1886,3,"['abort', 'avoid', 'timeout']","['abort', 'avoid', 'timeout']"
Safety,Maybe this can help with timeouts such as https://github.com/root-project/root/actions/runs/8645662018/job/23703294577?pr=15200,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15209:25,timeout,timeouts,25,https://root.cern,https://github.com/root-project/root/pull/15209,1,['timeout'],['timeouts']
Safety,Mention that it is thread-safe and can be called after some data has already been written. Explain that the model is cloned internally and therefore recommend `RNTupleModel::CreateBare`. FYI @makortel @Dr15Jones,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15235:26,safe,safe,26,https://root.cern,https://github.com/root-project/root/pull/15235,1,['safe'],['safe']
Safety,"Minor optimization found by looking at profiles a while ago... `GetSpecialProtocols()` takes the global lock, so it's best to avoid calling it too much.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4357:126,avoid,avoid,126,https://root.cern,https://github.com/root-project/root/pull/4357,1,['avoid'],['avoid']
Safety,"Minuit2 uses the Pimpl idiom with a shared_ptr to avoid frequent copies, but the implementation is not good. The full interface of each class is duplicated, which is not necessary and makes the code confusing and difficult to change. This patch simplifies the implementation but keeps the semantics the same. This patch is a precursor of some improvements that I have prepared.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7882:50,avoid,avoid,50,https://root.cern,https://github.com/root-project/root/pull/7882,1,['avoid'],['avoid']
Safety,Missing Lock Error Detection for TCollection,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/647:19,Detect,Detection,19,https://root.cern,https://github.com/root-project/root/pull/647,1,['Detect'],['Detection']
Safety,Modified signal handler to avoid async-unsafe functions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/96:27,avoid,avoid,27,https://root.cern,https://github.com/root-project/root/pull/96,2,"['avoid', 'unsafe']","['avoid', 'unsafe']"
Safety,Most leaks are due to wrong management of allocated `char*` buffers via StrDup - thats how I detect them. Better to be applied after #4874,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4887:93,detect,detect,93,https://root.cern,https://github.com/root-project/root/pull/4887,1,['detect'],['detect']
Safety,"Moves from fixed page sizes on write to adaptive page sizes, following the original idea of @hahnjo . The new mechanism is explained in the tuning.md document in the PR. The PR also bumps the target compressed cluster size to 150MB. We may want to reduce that still. Evaluation of the new method is currently ongoing and the PR description will be amended with the results. EDIT: [Comparison](https://docs.google.com/spreadsheets/d/1maJhgvgVU8RkX7QXd7B3QiTBfKuYbTbvgkoHzBUOurY/edit?usp=sharing) of current write performance vs adaptive page sizes with 50MB, 100MB, 150MB target cluster size. To me it seems that there is not a good argument to go to 150 MB clusters. There may be an argument for 100 MB clusters. For the moment, I'll remove the commit that changes the default settings from the PR. An additional flavor, `adaptive / exp`, is included in the table to test the effect of flushing _foreign columns_. In the experimental mode, columns only flush themselves, which simplifies the `RWritePageMemoryManager` and avoids the upcall from the sink to the column. There is a small positive effect of foreign flushes on the file size in the nanoAOD sample. The effect is more visible for the number of pages. The memory consumption is slightly smaller without foreign column flushes. I'll see if I can construct an example that shows better the advantage of foreign column flushes (or not). As expected, the memory savings become visible for large EDMs (e.g., nanoAOD in this set of samples).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16311:1022,avoid,avoids,1022,https://root.cern,https://github.com/root-project/root/pull/16311,1,['avoid'],['avoids']
Safety,"Moving `RooMath` to RooBatchCompute caused linker errors for users that; we want to avoid: RooBatchCompute is a RooFit implementation detail and; we don't want poeple to link against it. For this reason, RooMath is moved back into RooFitCore, and the; Faddeeva implementation that is also used in RooBatchCompute is split; off into a new file `faddeeva_impl.h` that is not part of the public; interface.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10359:84,avoid,avoid,84,https://root.cern,https://github.com/root-project/root/pull/10359,1,['avoid'],['avoid']
Safety,"Much of the functionality of RooAddition and RooAddPdf is implemented in exactly the; same way as in RooRealSumPdf. Hence, to avoid code duplication, we can; reuse the static functions in RooRealSumPdf that provide this; implementation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10851:126,avoid,avoid,126,https://root.cern,https://github.com/root-project/root/pull/10851,1,['avoid'],['avoid']
Safety,"Native JSON does not support them, but at least use `null` to avoid problem with standard parsers.; Also null value can be distinguished from 0 in JavaScript.; When reading back with TBufferJSON, any null will be converted into NaN",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1927:62,avoid,avoid,62,https://root.cern,https://github.com/root-project/root/pull/1927,1,['avoid'],['avoid']
Safety,No need to have two separate places where the list of supported operations in distributed mode is declared. This PR also avoids that the operations are redeclared everytime in the `_classify_operation` method (now removed).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9867:121,avoid,avoids,121,https://root.cern,https://github.com/root-project/root/pull/9867,1,['avoid'],['avoids']
Safety,"Now TMVA does not have anymore dependency on Cuda at the header file.; In principle one could have MethodDL depending on Cuda tensor, but this is not needed if single event evaluation is not done on GPU.; With this PR now the Cuda headers are included from TMVA source files . This PR should avoid the problem of ROOT-10980 and #6999 should not be anymore needed",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7017:292,avoid,avoid,292,https://root.cern,https://github.com/root-project/root/pull/7017,1,['avoid'],['avoid']
Safety,"Now several parameters can be configured via rootrc file:. ```; WebEve.JsRootRender: 1 # use JSROOT Geometry Painter for GL drawings, default off; WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called; WebEve.HTimeout: 200 # timeout in ms for elements highlight; WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset; WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact; ```. Provide context menu, which activate browser at specified element; Improve/repair functionality with JSROOT GeoPainter. ; Provide single-click mouse handler, used for tracks/jets selection; Improve highlight handling in plain three.js mode; Make possibility to specify table row width via rootrc",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4966:257,timeout,timeout,257,https://root.cern,https://github.com/root-project/root/pull/4966,1,['timeout'],['timeout']
Safety,"Now that `builtin_afterimage` is deprecated and always `ON`, it has to build on all platforms. Update `config.guess` to the latest upstream version to auto-detect `riscv64-unknown-linux-gnu` and fix the build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16260:156,detect,detect,156,https://root.cern,https://github.com/root-project/root/pull/16260,1,['detect'],['detect']
Safety,"OMICS_WITHOUT_LIB - Success; -- Building LLVM in 'Release' mode.; -- The ASM compiler identification is GNU; -- Found assembler: /usr/bin/cc; -- Could NOT find Z3: Found unsuitable version ""0.0.0"", but required is at least ""4.7.1"" (found Z3_LIBRARIES-NOTFOUND); -- Looking for backtrace; -- Looking for backtrace - found; -- backtrace facility detected in default set of libraries; -- Found Backtrace: /usr/include; -- Native target architecture is X86; -- Threads disabled.; -- Doxygen disabled.; -- Go bindings disabled.; -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH); -- OCaml bindings disabled.; -- Found Python module pygments; -- Found Python module pygments.lexers.c_cpp; -- Found Python module yaml; -- LLVM host triple: x86_64-unknown-linux-gnu; -- LLVM default target triple: x86_64-unknown-linux-gnu; -- Building with -fPIC; -- Found PythonInterp: /usr/bin/python3.10 (found version ""3.10.4""); -- Constructing LLVMBuild project information; -- Linker detection: GNU ld; -- Targeting X86; -- Targeting NVPTX; -- Clang version: 9.0.1; -- Cling version (from VERSION file): ROOT_1.0~dev; -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-pc-linux-gnu/11.2.0/../../../../include/c++/11.2.0:/usr/lib/gcc/x86_64-pc-linux-gnu/11.2.0/../../../../include/c++/11.2.0/x86_64-pc-linux-gnu:/usr/lib/gcc/x86_64-pc-linux-gnu/11.2.0/../../../../include/c++/11.2.0/backward' at runtime.; -- And then fallback to: 'c++'; -- Performing Test CXX_HAS_fno_rtti; -- Performing Test CXX_HAS_fno_rtti - Success; -- Performing Test C_HAS_Wno_strict_overflow; -- Performing Test C_HAS_Wno_strict_overflow - Success; -- Performing Test C_HAS_Wno_maybe_uninitialized; -- Performing Test C_HAS_Wno_maybe_uninitialized - Success; -- Performing Test C_HAS_Wno_parentheses_equality; -- Performing Test C_HAS_Wno_parentheses_equality - Success; -- Looking for m; -- Looking for m - not found; -- Use SSL API VERSION 1.1 for civetweb; -- Performing Test GCC_HAS_BIDI_CHARS_FLAG; -- Per",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10528:9198,detect,detection,9198,https://root.cern,https://github.com/root-project/root/issues/10528,1,['detect'],['detection']
Safety,"OOT::RDataFrame rdf(100);. // Define a new column `x` that contains random numbers and create a histogram; ROOT::RDF::RResultPtr<TH1D> h = rdf.Define(""x"", [](){ return gRandom->Rndm(); }).Histo1D(""x"");. // Add the histogram to a vector; vector<ROOT::RDF::RResultPtr<TH1D>> histograms;; histograms.push_back(h);. // Attempt to throw an error; throw std::runtime_error(""intended error throw for debugging"");. return histograms;; }; ```. ### Additional context; For additional context see https://root-forum.cern.ch/t/pointer-not-allocated-when-adding-rresultptr-to-vector/51831/2. Interesting part of the gdb backtrace follows (thanks @eguiraud!):; ```; >>> bt; #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at pthread_kill.c:44; #1 0x00007ffff72a1503 in __pthread_kill_internal (signo=6, threadid=<optimized out>) at pthread_kill.c:78; #2 0x00007ffff7251958 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26; #3 0x00007ffff723b53d in __GI_abort () at abort.c:79; #4 0x00007ffff729563e in __libc_message (action=action@entry=do_abort, fmt=fmt@entry=0x7ffff73b4432 ""%s\n"") at ../sysdeps/posix/libc_fatal.c:155; #5 0x00007ffff72ab22c in malloc_printerr (str=str@entry=0x7ffff73b6ff8 ""free(): double free detected in tcache 2"") at malloc.c:5660; #6 0x00007ffff72ad587 in _int_free (av=0x7ffff73f1ba0 <main_arena>, p=0x55555e7134c0, have_lock=have_lock@entry=0) at malloc.c:4469; #7 0x00007ffff72af9f3 in __GI___libc_free (mem=<optimized out>) at malloc.c:3385; #8 0x00007ffff18d07b4 in std::_Vector_base<ROOT::RDF::RResultPtr<TH1D>, std::allocator<ROOT::RDF::RResultPtr<TH1D> > >::~_Vector_base (this=0x55555881f750) at /usr/lib/gcc/x86_64-pc-linux-gnu/12.2.0/../../../../include/c++/12.2.0/bits/stl_vector.h:366; #9 0x00007ffff23aa435 in cling::Value::~Value() () from /home/blue/ROOT/master/cmake-build-foo/lib/libCling.so; #10 0x00007ffff21a1869 in TCling::ProcessLine (this=0x5555555ee950, line=0x5555563e9c60 "".X /tmp/./pointer_n",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11494:1913,abort,abort,1913,https://root.cern,https://github.com/root-project/root/issues/11494,1,['abort'],['abort']
Safety,"OT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes?. This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance?. The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jup",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6421:3460,predict,predicted,3460,https://root.cern,https://github.com/root-project/root/issues/6421,1,['predict'],['predicted']
Safety,"On MacOS this simple code using std::sort of RooAbsArg crashed because std::sort MacOS implementation goes to element outside of the collection. ; This simple code reproduced the problem by crashing on MacOS. ```; std::vector<RooAbsArg*> v;; int n = 38;. for (int i = 0; i < n; ++i) {; TString name = TString::Format(""a_%d"",i);; v.push_back( new RooRealVar (name, name, 10,0,20) );; }. std::sort(v.begin(), v.end(), [](RooAbsArg*a, RooAbsArg*b) { return a->dependsOn(*b); } );; ```; ; The PR with the simple check avoid a crash observed running the example in ; https://root-forum.cern.ch/t/upper-limit-for-signal-strength-on-off-problem-multiple-independent-runs/44657",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8111:514,avoid,avoid,514,https://root.cern,https://github.com/root-project/root/pull/8111,1,['avoid'],['avoid']
Safety,"On some platform operator delete taints the memory, so even right after the deletion the information stored by ~TObject is already erased. On those platform we no longer rely on the kNotDelete bit hack and rely on the system (which has tainted the memory assumingly for a reason) to detect the use-after-delete problems. Introduce 2 new functions. TObject::IsDestructed (used by TClonesArray) that detects that the destructor has been run and is active in all configuration. This should be used if the code knows that the memory has not been freed/deleted. ROOT::Detail::HasBeenDeleted(TObject*) with returns true if the platform does not taint the memory and if the kNotDeleted is not set (in all other case, it returns false). This fixes #11330",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11334:283,detect,detect,283,https://root.cern,https://github.com/root-project/root/pull/11334,2,['detect'],"['detect', 'detects']"
Safety,"On some platform operator delete taints the memory, so even right after the deletion the information stored by ~TObject is already erased. On those platform we no longer rely on the kNotDelete bit hack and rely on the system (which has tainted the memory assumingly for a reason) to detect the use-after-delete problems. Introduce 2 new functions. TObject::IsDestructed (used by TClonesArray) that detects that the destructor has been run and is active in all configuration. This should be used if the code knows that the memory has not been freed/deleted. ROOT::Detail::HasBeenDeleted(TObject*) with returns true if the platform does not taint the memory and if the kNotDeleted is not set (in all other case, it returns false). This fixes #11330. Backport of https://github.com/root-project/root/pull/11334",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11405:283,detect,detect,283,https://root.cern,https://github.com/root-project/root/pull/11405,2,['detect'],"['detect', 'detects']"
Safety,"On some systems (CentOS 8) latest chrome not allows to run HTML files,; which are situated in /tmp directory. Only if such situation detected,; try to place HTML files into home directory and run headless chrome from such file. Fixes problem like this:; https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=ROOT-ubuntu2004,SPEC=cxx17,V=master/2435/testReport/projectroot/runtutorials/tutorial_v7_line_cxx/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5403:133,detect,detected,133,https://root.cern,https://github.com/root-project/root/pull/5403,1,['detect'],['detected']
Safety,"On weak GPUs, tests might take very long when they all run in parallel.; This can be avoided with a resource lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16803:85,avoid,avoided,85,https://root.cern,https://github.com/root-project/root/pull/16803,1,['avoid'],['avoided']
Safety,"On windows, there are instances when the rdict file is still in use when we try to remove it. This happens due to some problem with file handling in LLVM5 which got resolved in D63453(https://reviews.llvm.org/D63453). But it was difficult to backport. With this commit, we switch to the standard C++ library functions for generating rdict files and avoid using this particular API of LLVM. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6184:349,avoid,avoid,349,https://root.cern,https://github.com/root-project/root/pull/6184,1,['avoid'],['avoid']
Safety,"One also can configure websocket timeout when creating THttpServer. Required for TWebCanvas prototype,; but also can be used in other applications",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/503:33,timeout,timeout,33,https://root.cern,https://github.com/root-project/root/pull/503,1,['timeout'],['timeout']
Safety,"One have to provide connection id when accepting file dialog request from client.; This allows to use file dialogs for window with multiple connections at the same time. In eve7 use `RWebWindow` methods to avoid direct dependency from `RBrowser`. `RFileDialog` also used in `RBrowser`, `RCanvas`, `TWebCanvas`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13154:206,avoid,avoid,206,https://root.cern,https://github.com/root-project/root/pull/13154,1,['avoid'],['avoid']
Safety,"Only register actual observables as value servers in the `RooEvaluatorWrapper` this avoids that spurious variables appear in user code, which were only meant to be used internally by the new CPU evaluation backend. To make the management of the parameter easier, impose the new reasonable constraint that when resetting the data via `setData()`, the new dataset needs to have the same structure as the old one. It was confirmed with an ATLAS model provided by Will that this commit is fixing the problem of spurious variables. A unit test is also implemented. FYI @will-cern",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15061:84,avoid,avoids,84,https://root.cern,https://github.com/root-project/root/pull/15061,1,['avoid'],['avoids']
Safety,Original commit message:. The Sema::LookupConstructor is not iteration safe. When looking up a ctor the modules infrasturcture deserializes more ctor; candidates in the body of the function causing the internal vector implementation; to rellocate and invalidate the pointers. This workaround should address the failures reported by LCG. The real fix is being processed here https://reviews.llvm.org/D91524 and we; after being merged we should be able to backport it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7350:71,safe,safe,71,https://root.cern,https://github.com/root-project/root/pull/7350,1,['safe'],['safe']
Safety,"Originally, the changes in this branch avoided the unload/load cycle for the `.x` command, if the timestamp of a file has not changed. Due to potential problems with static variable initialization, this behavior is not finally part of this PR. Other than that, this branch includes several improvements:; - General `MetaSema.cpp` code cleanup.; - `.x` now has a list of (fallback) function names that we will try to call, in order. This makes it possible to add alternate entry points for a macro that are independent from the filename, and therefore immune to file renaming.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4465:39,avoid,avoided,39,https://root.cern,https://github.com/root-project/root/pull/4465,1,['avoid'],['avoided']
Safety,Our CMake code for making path to headers relative is broken; for the v7 headers (as they don't have the 'CURRENT_SOURCE/inc'; prefix we check for). This caused that we have absolute paths for; those headers in the modulemap we ship with ROOT. This patch just hacks in the additional check for v7 headers; and a sanity check that should prevent this error in the future.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2003:312,sanity check,sanity check,312,https://root.cern,https://github.com/root-project/root/pull/2003,1,['sanity check'],['sanity check']
Safety,"Our CMake code modifies `find_package` to ignore any ROOT builtins, such that the builtin LLVM doesn't find and use system versions of the builtin dependencies. This is a bit hacky, but fortunately this needs to be done only when builtins are used. Therefore, this commit suggests to only do this redefinition of `find_package` if any builtins are used. This closes #8633, where it was requested to avoid this hack for the sake of being compatible with the `vcpkg` package manager. Although the hack is not completely removed, it is removed for the case where not builtins are used, which is probably what is done when using a C++ package manager to manage dependencies.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16274:399,avoid,avoid,399,https://root.cern,https://github.com/root-project/root/pull/16274,1,['avoid'],['avoid']
Safety,"Over the years we have a pathological issue with cling when it calls directly; compiler API. Most of the API assume they are called from code residing in a; text file. This code has valid source locations which can be used for; comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling; should have an interface which gives a pseudo-valid, commonly-rooted unique; source location. We are bitten by this fact when preloading modules as if we have diagnostics; they cannot be ordered due to the fact that the compared decls from two; different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have; this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4339:691,avoid,avoids,691,https://root.cern,https://github.com/root-project/root/pull/4339,1,['avoid'],['avoids']
Safety,"Part of the RooFit code modernization, avoiding the use of unnecessary; wrapper classes and using a simple templated struct instead. The change in this PR is thoroughly tested by `stressRooFit`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10115:39,avoid,avoiding,39,https://root.cern,https://github.com/root-project/root/pull/10115,1,['avoid'],['avoiding']
Safety,"Partial fix of #8708.; In a setup where ROOT was installed in a system directory, ROOT was picking up headers from that directory instead of its own. . ## How to reproduce:; 1. `echo '#error This is the wrong header' > /my/include/directory/RooSpan.h` (or a few other headers).; 2. Install some builtins into that directory, e.g. VDT; 3. `cmake -DCMAKE_PREFIX_PATH=/my/include/directory/ <root>` to create a dependency to that include directory.; 4. Build. The problem only becomes visible when `A` depends on `B and C`, and `B` depends on something in `/system/include/`, and `C` is installed in those system includes as well. This generates a compile command such as:; ```; -I.../core/x -I.../core/y -I.../core/... -I.../A/include -I.../B/include -I/system/include/ -I.../C/include ...; ```. ## In this PR:; - Includes for VDT and XROOTD are fixed by making them `IMPORTED` targets, so their includes have lowest precedence.; - Some cheating where include directories are copied around between targets is removed. CMake should handle this.; - Some dependency and target management is simplified (or rather modernised with target-based cmake); - A broken dependency in RooFit is fixed, which was previously hidden by the cheating with include directories. ## What remains to be done:; It is likely that more builtins (or rather `FindXXX` have to be converted to `IMPORTED` targets, so they don't provoke this error again. A broken configuration can be detected by; 1. Having CMake pick up a dependency in some common directory; 2. Either; - Placing a lot of `#error`-ROOT headers in there or; - Searching `compile_commands.json` for `-I/my/include/directory/`; 3. Fixing the `FindXXX` for this dependency.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8709:1453,detect,detected,1453,https://root.cern,https://github.com/root-project/root/pull/8709,1,['detect'],['detected']
Safety,Patch Vc to avoid warnings about macro redefinitions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5168:12,avoid,avoid,12,https://root.cern,https://github.com/root-project/root/pull/5168,3,['avoid'],['avoid']
Safety,"People use RooFormula a lot via RooGenericPdf and RooFormulaVar!; Performance matters here. This commit avoids non-static `std::regex` in; `RooFormula::processFormula`, because constructing these on the fly can; become a bottleneck. This is a non-intrusive performance optimization that reduces the time spent for CMS workflows like the HZZ global fit by up to 5 %. Example profiles:; * HZZ multi-dim fit before this PR: https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/hzz_1/74; * HZZ multi-dim fit after this PR: https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/hzz_3/1815. `RooFormula::processFormula` is now more than ten times faster.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10205:104,avoid,avoids,104,https://root.cern,https://github.com/root-project/root/pull/10205,1,['avoid'],['avoids']
Safety,Please recover `SrvAuthenticate` from libSrvAuth library,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13387:7,recover,recover,7,https://root.cern,https://github.com/root-project/root/issues/13387,1,['recover'],['recover']
Safety,"Ported from Cppyy patch by @wlav :`; https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. Adds an iterator for using declarations to `TClingMethodInfo`. it should make redundant the pythonisations that add the method overloads from a base class to the derived class that uses them:; https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/PyROOT/src/PyzPythonHelpers.cxx#L113. Instead of relying on pythonisations for specific classes, this PR adds the necessary logic to have this functionality solved in a generic way in the bindings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3640:199,redund,redundant,199,https://root.cern,https://github.com/root-project/root/pull/3640,1,['redund'],['redundant']
Safety,Prefer string_view in function signatures.; Avoid instantiating strings whenever possible.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/937:44,Avoid,Avoid,44,https://root.cern,https://github.com/root-project/root/pull/937,1,['Avoid'],['Avoid']
Safety,"Prevent a TTree from calling its won RecursiveRemove. Call RecursiveRemove early in the TTree destructor (rather than last thing), to remove the tree; from any list (like another TTree's list of clones) to avoid that the destructor's deletion of; item (eg. the list of friends), provoke a call to this same TTree's RecursiveRemove which; will try to call the RecursiveRemove on the item being deleted. An alternative would be; to replace the pattern. `delete fFriends; fFriends = nullptr;`; with `auto tmp = fFriends; fFriends = nullptr; delete tmp;`. This fixes issue #9017 where we had a tear down crash because:. ~TTree call delete fFriends which call RecursiveRemove which reach another TTree's list of clone; where its find the (original) TTree and call its RecursiveRemove which tries (and fail) to call; RecursiveRemove on fFriends",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9021:206,avoid,avoid,206,https://root.cern,https://github.com/root-project/root/pull/9021,3,['avoid'],['avoid']
Safety,"Prevent unsafe shift that can cause FPE. Tag @couet . Note: no bad behavior of this code was observed, so this is ""an improvement"" rather than ""bug fix"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6561:8,unsafe,unsafe,8,https://root.cern,https://github.com/root-project/root/pull/6561,1,['unsafe'],['unsafe']
Safety,"Previously it detected the change of entry by comparing the 'current' instance to the last 'instance'; recorded. If all instance are used, this worked perfectly. If the instance are used sparsely (eg. with; selection in TTree::Draw) then from entry to the other, the 'first' instance used in an entry might be later/higher; than the last 'instance' used in the previous entry. This corrects the behavior introduced in 064e0a7d49b08e03667f9312421b6fb5b8d82285. This fixes ROOT-10170",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3946:14,detect,detected,14,https://root.cern,https://github.com/root-project/root/pull/3946,1,['detect'],['detected']
Safety,"Previously, the Canvas `Close` signal which triggers a call to the local function `close` which; was unconditionally call `Kill` on its associated thread would call it on an already deleted; object if the `TThread` was deleted before the `TCanvas`. This fix #10015 (detected by using ASAN).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10068:266,detect,detected,266,https://root.cern,https://github.com/root-project/root/pull/10068,1,['detect'],['detected']
Safety,"Primary changes proposed; - avoiding char to TString to char conversions; - avoid redundant call to xmlEngine().hasattr(node,att) checking instead for null ptr from getattr.; - Add specialization of void TMVA::Tools::ReadAttr( void* node, const char* attrname, T& value ) for float,int, short. [which seem to be the ones we use aside from bool, which now is the biggest contributor to ReadAttr* timing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/584:28,avoid,avoiding,28,https://root.cern,https://github.com/root-project/root/pull/584,3,"['avoid', 'redund']","['avoid', 'avoiding', 'redundant']"
Safety,Put float and int first as they might be more common column types. Also move call to TClass::GetClass last as it takes a lock and it's better to avoid it when possible. Following suggestion from https://github.com/root-project/root/pull/16528#issuecomment-2375899434,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16529:145,avoid,avoid,145,https://root.cern,https://github.com/root-project/root/pull/16529,1,['avoid'],['avoid']
Safety,Qualify calls to llvm::format that have ::std:: types as parameters to avoid ambiguity in overload resolution when ADL finds `std::format`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12730:71,avoid,avoid,71,https://root.cern,https://github.com/root-project/root/pull/12730,1,['avoid'],['avoid']
Safety,Quote variable to avoid CMake syntax warning,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1304:18,avoid,avoid,18,https://root.cern,https://github.com/root-project/root/pull/1304,1,['avoid'],['avoid']
Safety,"RBrowser: fix layout, avoid use of private data members",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4628:22,avoid,avoid,22,https://root.cern,https://github.com/root-project/root/pull/4628,1,['avoid'],['avoid']
Safety,"RNTupleWriter::CommitCluster (this=0xd7486120, commitClusterGroup=true) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTuple.cxx:370; #12 0xf7e2c674 in ROOT::Experimental::RNTupleWriter::~RNTupleWriter (this=0xd7486120, __in_chrg=<optimized out>) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTuple.cxx:327; #13 0x56560f58 in std::default_delete<ROOT::Experimental::RNTupleWriter>::operator() (__ptr=0xd7486120, this=<optimized out>) at /usr/include/c++/13/bits/unique_ptr.h:100; #14 0x565606cf in std::default_delete<ROOT::Experimental::RNTupleWriter>::operator() (__ptr=<optimized out>, this=<optimized out>) at /usr/include/c++/13/bits/unique_ptr.h:94; #15 std::unique_ptr<ROOT::Experimental::RNTupleWriter, std::default_delete<ROOT::Experimental::RNTupleWriter> >::~unique_ptr (this=0xffde8b50, __in_chrg=<optimized out>) at /usr/include/c++/13/bits/unique_ptr.h:405; #16 RNTuple_LargeFile2_Test::TestBody (this=0x57246b80) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_extended.cxx:260; #17 0xf7d7159c in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) [clone .constprop.0] () from /lib/libgtest.so.1.13.0; #18 0xf7d5cf46 in testing::Test::Run() () from /lib/libgtest.so.1.13.0; #19 0xf7d5d17a in testing::TestInfo::Run() () from /lib/libgtest.so.1.13.0; #20 0xf7d5d327 in testing::TestSuite::Run() () from /lib/libgtest.so.1.13.0; #21 0xf7d6a95b in testing::internal::UnitTestImpl::RunAllTests() () from /lib/libgtest.so.1.13.0; #22 0xf7d695cb in testing::UnitTest::Run() () from /lib/libgtest.so.1.13.0; #23 0xf7d1e137 in main () from /lib/libgtest_main.so.1.13.0; #24 0xf6837969 in __libc_start_call_main () from /lib/libc.so.6; #25 0xf6837a2c in __libc_start_main_impl () from /lib/libc.so.6; #26 0x56560e0b in _start (); CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ~~~",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12427:12422,abort,aborted,12422,https://root.cern,https://github.com/root-project/root/issues/12427,1,['abort'],['aborted']
Safety,"ROOT ""swallows"" `std::`, and we need to figure out how to handle the namespaces; `std::foo` vs `::foo`. Until we do that, avoid the issue by renaming the only; known ""clash"", using `std::__ROOT` as in several other backport cases. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9093:122,avoid,avoid,122,https://root.cern,https://github.com/root-project/root/pull/9093,1,['avoid'],['avoid']
Safety,"ROOT has several features which interact with libraries and require implicit header inclusion. This can be triggered by reading or writing data on disk, or user actions at the prompt. Often, the headers are immutable and reparsing is redundant. C++ Modules are designed to minimize the reparsing of the same header content by providing an efficient on-disk representation of C++ Code. More information about the C++ modules technology can be found at README/README.CXXMODULES.md. This undertaking was successful due to the efforts of many people. Especially, Raphael Isemann (@Teemperor), Oksana Shadura(@oshadura) and Yuka Takahashi (@yamaguchi1024). We are grateful to Liz Sexton-Kennedy, Peter Elmer (@pelmer), Brian Bockelman(@bbockelm) and Ken Bloom for putting (wo)manpower into the project and supporting it. This work has been supported by an Intel Parallel Computing Center grant, by U.S.National Science Foundation grants PHY-1450377, ACI-1450323 and PHY-1624356, and by the U.S. Department of Energy, Office of Science. Special thanks to Axel Naumann (@Axel-Naumann) and Philippe Canal (@pcanal) for helping and supporting the technical efforts over the years. We are thankful to Shahzad Malik Muzaffar (@smuzaffar), David Lange (@davidlange6) and Mircho Rodozov (@mrodozov) from the CMSSW development team, CERN/EP-SFT and the ROOT team.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4395:234,redund,redundant,234,https://root.cern,https://github.com/root-project/root/pull/4395,1,['redund'],['redundant']
Safety,"ROOT introduced a build flag in 6.26.00 that allowed you to build it using the `ryml` library instead of nlohmann-json as the backend for the JSON IO. But that was not particularly great. The `ryml` backend code is at risk of rotting, because to try and test it one needs a special ROOT build. It would be much better to just build both backends if `ryml` is installed on the system, and have a mechanism for developers to try this other backend. This is implemented in this commit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12221:218,risk,risk,218,https://root.cern,https://github.com/root-project/root/pull/12221,1,['risk'],['risk']
Safety,"ROOT's current copy of `FindTBB.cmake` cannot detect versions of newer TBBs without the header `tbb/tbb_stddef.h`. As a result, `TBB_VERSION` is unset and cannot be used for further checks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8260:46,detect,detect,46,https://root.cern,https://github.com/root-project/root/issues/8260,1,['detect'],['detect']
Safety,ROOT-8872 Optimize TTree::Fill() to avoid expensive modulo operations,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1058:36,avoid,avoid,36,https://root.cern,https://github.com/root-project/root/pull/1058,1,['avoid'],['avoid']
Safety,ROOT-9435 [TMVA] -- Avoid unsafe reinterpret_cast,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2254:20,Avoid,Avoid,20,https://root.cern,https://github.com/root-project/root/pull/2254,2,"['Avoid', 'unsafe']","['Avoid', 'unsafe']"
Safety,"ROOT/REntry.hxx>; #include <ROOT/RNTuple.hxx>; #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;; using ROOT::Experimental::RNTupleModel;; using ROOT::Experimental::RNTupleReader;; using ROOT::Experimental::RNTupleWriter;. static void write() {; auto particleModel = RNTupleModel::Create();; auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::CreateBare();; auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");; auto entry = writer->CreateEntry();. *energy = 1.0;; particles->Fill();; writer->Fill(*entry);; }. void collection_entry() {; write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");; reader->Show(0);; }. int main() {; collection_entry();; return 0;; }; ```. </details>. This doesn't work right now, even for a single entry as in the code example above; when opening the ntuple, the code crashes:; ```; terminate called after throwing an instance of 'std::bad_alloc'; what(): std::bad_alloc; Aborted (core dumped); ```. This is because `RNTupleModel::CreateEntry()` calls; https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RNTupleModel.cxx#L363-L365; for all top-level field. Conceptually it's possible to fix by applying the same logic as `RNTupleModel::MakeCollection`, something like; ```diff; diff --git a/tree/ntuple/v7/src/RNTupleModel.cxx b/tree/ntuple/v7/src/RNTupleModel.cxx; index c652608bf1..ed02338e2b 100644; --- a/tree/ntuple/v7/src/RNTupleModel.cxx; +++ b/tree/ntuple/v7/src/RNTupleModel.cxx; @@ -347,7 +347,11 @@ std::unique_ptr<ROOT::Experimental::REntry> ROOT::Experimental::RNTupleModel::Cr; ; auto entry = std::unique_ptr<REntry>(new REntry(fModelId));; for (const auto &f : fFieldZero->GetSubFields()) {; - entry->AddValue(f->CreateValue());; + if (auto *collectionField = dynamic_cast<RCollectionField *>(f)) {; + entry->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14642:2334,Abort,Aborted,2334,https://root.cern,https://github.com/root-project/root/issues/14642,1,['Abort'],['Aborted']
Safety,"ROOT/RVec.hxx(2062,16):. warning C4805: '==': unsafe mix of type 'const T' and type 'bool'; in operation [C:\Soft\root_64\math\vecops\test\vecops_rvec.vcxproj]; with; [; T=int; ]",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9812:46,unsafe,unsafe,46,https://root.cern,https://github.com/root-project/root/pull/9812,1,['unsafe'],['unsafe']
Safety,"ROOT::R::Label is a synonym of Rcpp::_. We should just bind to it, instead of; introducing a new variable causing redundant deserialization from the C++ module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4409:114,redund,redundant,114,https://root.cern,https://github.com/root-project/root/pull/4409,1,['redund'],['redundant']
Safety,ROOT_HEAD failed with error message: Fail to detect cryptographic random generator,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14958:45,detect,detect,45,https://root.cern,https://github.com/root-project/root/issues/14958,1,['detect'],['detect']
Safety,"RWebWindow uses credit-based data transport. ; Default number of credits was always 10 and can be too small.; Now this default value can be changed via ""WebGui.ConnCredits"" variable. In WebEve checks amount of available credits to suppress highlight operations - main source of small packets send to server.; Let avoid situation when such small packets over-flood communication channel. Latest JSROOT code with better organization how TCanvas and TFrame painters provided when required.; Previous implementation was not adequate, while cannot take into account that object may be drawn on TCanvas or on RCanvas. Now it clearly stated in the code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6920:313,avoid,avoid,313,https://root.cern,https://github.com/root-project/root/pull/6920,1,['avoid'],['avoid']
Safety,"Rather than non-const reference. This has two advantages:; - passing fundamental types by value is slightly more efficient; - passing by const value helps avoiding typos such as `if (x = 0)`. This fixes ROOT-11009. Reviewers, what do you think? Can this break any currently valid code?. - [x] add test",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6526:155,avoid,avoiding,155,https://root.cern,https://github.com/root-project/root/pull/6526,1,['avoid'],['avoiding']
Safety,"Re-implement `MakeNumpyDataFrame` with no interpreter calls, and avoid a; explicit lifetime management of Python objects in the RDNumpyDS helper. Like this, the former `RNumpyDS.hxx` helper could be moved to; `tree/dataframe`, as it doesn't import `Python.h` anymore. The `RNumpyDS` also got renamed to `RVecDS`, because it takes RVecs and; not NumPy arrays directly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15031:65,avoid,avoid,65,https://root.cern,https://github.com/root-project/root/pull/15031,1,['avoid'],['avoid']
Safety,"Reading with TTree works. This affects RDataFrame critically. To reproduce at the prompt:. ```; /tmp source /home/blue/ROOT/v6.24/_build/bin/thisroot.fish; /tmp root -l # with v6.24; root [0] ROOT::RDataFrame(10).Define(""x"", ""ROOT::RVec<int>{1,2,3}"").Snapshot(""t"", ""f.root"");; root [1] .q; /tmp source /home/blue/ROOT/master/_build/bin/thisroot.fish; /tmp root -l # now with master; root [0] ROOT::RDataFrame(""t"", ""f.root"").Display(""x"")->Print(); Fatal: 0 violated at line 1509 of `../io/io/src/TGenCollectionProxy.cxx'; aborting; #0 0x00007f4f9c4a99ea in wait4 () from /usr/lib/libc.so.6; #1 0x00007f4f9c427a2b in do_system () from /usr/lib/libc.so.6; #2 0x00007f4f9cdcc21c in TUnixSystem::Exec (this=0x55b0a9ebf800, shellcmd=0x55b0ae8f76d0 ""/home/blue/ROOT/master/_build/etc/gdb-backtrace.sh 143932 1>&2"") at ../core/unix/src/TUnixSystem.cxx:2120; #3 0x00007f4f9cdccb0e in TUnixSystem::StackTrace (this=0x55b0a9ebf800) at ../core/unix/src/TUnixSystem.cxx:2411; #4 0x00007f4f9cc5e089 in DefaultErrorHandler (level=6000, abort_bool=true, location=0x7f4f9c10b012 """", msg=0x55b0af523450 ""0 violated at line 1509 of `../io/io/src/TGenCollectionProxy.cxx'"") at ../core/base/src/TErrorDefaultHandler.cxx:174; #5 0x00007f4f9cd3a560 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7f4f9c10b012 """", fmt=0x7f4f9ce795d8 ""%s violated at line %d of `%s'"", ap=0x7ffe675d1310) at ../core/foundation/src/TError.cxx:152; #6 0x00007f4f9cd3ab94 in Fatal (location=0x7f4f9c10b012 """", fmt=0x7f4f9ce795d8 ""%s violated at line %d of `%s'"") at ../core/foundation/src/TError.cxx:249; #7 0x00007f4f9bf0a0fa in TGenCollectionProxy__VectorNext () at ../io/io/src/TGenCollectionProxy.cxx:1509; #8 0x00007f4f9c009167 in TStreamerInfoActions::GenericLooper::Numeric<int, int>::ConvertAction (items=0x55b0af2ac580, start=0x55b0af0e38d0, end=0x55b0af0e38dc, loopconf=0x7ffe675d1550) at ../io/io/src/TStreamerInfoActions.cxx:2447; #9 0x00007f4f9bff45fd in TStreamerInf",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9136:521,abort,aborting,521,https://root.cern,https://github.com/root-project/root/issues/9136,1,['abort'],['aborting']
Safety,"Rebased/improved version of #4966. Several parameters can be configured via rootrc file:; ```; WebEve.GLViewer: Three #kind of GLViewer, either Three, JSRoot or RCore; WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called; WebEve.HTimeout: 200 # timeout in ms for elements highlight; WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset; WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact; ```; Implement Browse functionality - shows selected item in SummaryView. In `JSRoot` viewer: ; * Provide single-click mouse handler, used for tracks/jets selection; In `Three` viewer: ; * Improve highlight handling in plain three.js mode; * provide position-dependent context menu; In `RCore` viewer:; * load required script during `init` call. Support more dashed styles for lines. By default, double-click ignored in GL view, can be configured",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4972:278,timeout,timeout,278,https://root.cern,https://github.com/root-project/root/pull/4972,1,['timeout'],['timeout']
Safety,"Recent llvm versions use llvm::Error as a facility for error handling. It includes an ErrorInfoBase class which has virtual methods (with a pinned vtable in the object file). This makes it harder to include headers that use transitively include llvm/Support/Error.h crossing rtti/no-rtti worlds (that is llvm is compiled with -fno-rtti and TCling and friends with -frtti). Newer llvm versions have a lot of usage of llvm::Error in its header files and it is practically impossible to solve this problem by avoiding the headers that use ErrorInfoBase. There are two other alternatives. First we can outline the functions in Error.h which use ErrorInfoBase but then we will hit other things like RTTIRoot which also needs special treatment. Secondly, we can enable llvm's RTTI builds for ROOT and this is what this patch does.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10289:506,avoid,avoiding,506,https://root.cern,https://github.com/root-project/root/pull/10289,1,['avoid'],['avoiding']
Safety,"Reduce amount of code, special treatments and the need for casting in RooFit by providing a type-safe proxy template that acts a bit like smart pointers. **For reviewers**:; The central part of this PR is the file `RooProxy.h`. Many other changes are just a fallout from unifying all proxy classes in this one. A `RooProxy<T>` is like a smart pointer to `T`, but it does additional important stuff in the base class.; Previously, RooFit proxies were storing only base class pointers forcing users of these proxies to cast whenever they wanted to do something. The weak point of the new thing is backward compatibility. Legacy root files and legacy RooFit classes act like a `RooProxy<RooAbsArg>`, a pointer to a very basic class. If the template argument was chosen properly, one wouldn't need any special functions because one can just use the newly provided `proxy->` to type-safely dereference the proxy, but that only works for new code. To support old code (e.g. outside of RooFit), there's four overloads of the function `lvptr`, which is supposed to cast the pointer to the payload into a type deriving from one of the ""LValue"" classes `RooAbsRealLValue` or `RooAbsCategoryLValue`. That's safe if the template argument derives from those, but it's unsafe for all other (=legacy) proxies. I tagged the unsafe conversion functions with `R__SUGGEST_ALTERNATIVE` to give users a way to move away from unsafe casts, but I'm unsure if one should just `static_cast` as RooFit was doing in the past (= no change of runtime behaviour) or `dynamic_cast` for better type safety. Opinions?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4969:97,safe,safe,97,https://root.cern,https://github.com/root-project/root/pull/4969,7,"['safe', 'unsafe']","['safe', 'safely', 'safety', 'unsafe']"
Safety,"Reduce usage of unsafe `Form()` function, especially in Thread.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11744:16,unsafe,unsafe,16,https://root.cern,https://github.com/root-project/root/pull/11744,1,['unsafe'],['unsafe']
Safety,Refactor signal handling and replace signal handlers with thread-safe functions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/133:65,safe,safe,65,https://root.cern,https://github.com/root-project/root/pull/133,3,['safe'],['safe']
Safety,Reimplement signal handler to avoid async-unsafe functions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/97:30,avoid,avoid,30,https://root.cern,https://github.com/root-project/root/pull/97,2,"['avoid', 'unsafe']","['avoid', 'unsafe']"
Safety,Remove all redundant header guards around #include directives,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/341:11,redund,redundant,11,https://root.cern,https://github.com/root-project/root/pull/341,1,['redund'],['redundant']
Safety,"Remove class hierarchy in RFieldValue. The templated, type-safe; inherited classes made the design vulnerable to slicing, because the; RField interface uses the base class. Instead, we use now templated; constructors and templated member functions in RFieldValue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3829:59,safe,safe,59,https://root.cern,https://github.com/root-project/root/pull/3829,1,['safe'],['safe']
Safety,Remove dangerous thread-unsafe accessors of RHistConcurrentFiller,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4708:24,unsafe,unsafe,24,https://root.cern,https://github.com/root-project/root/pull/4708,1,['unsafe'],['unsafe']
Safety,Remove extra redundant tensorboard Option,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5936:13,redund,redundant,13,https://root.cern,https://github.com/root-project/root/pull/5936,1,['redund'],['redundant']
Safety,Remove extra single quote in error message to avoid confusion what the actual class name is.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10099:46,avoid,avoid,46,https://root.cern,https://github.com/root-project/root/pull/10099,1,['avoid'],['avoid']
Safety,"Remove one layer of indirection by merging MakeColumnReadersHelper; and MakeColumnReader. Less code, we avoid some repeated checks,; and MakeColumnReader is not a bit simpler to call directly, which; we will need to implement RVariedColumnReaders for systematic variations. CC: @bendavid -- I think you are touching this code too, sorry! :sweat_smile:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9275:104,avoid,avoid,104,https://root.cern,https://github.com/root-project/root/pull/9275,1,['avoid'],['avoid']
Safety,Remove redundant RooCintUtils.h,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1720:7,redund,redundant,7,https://root.cern,https://github.com/root-project/root/pull/1720,1,['redund'],['redundant']
Safety,Remove redundant checks in TThreadExecutor,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/361:7,redund,redundant,7,https://root.cern,https://github.com/root-project/root/pull/361,1,['redund'],['redundant']
Safety,Remove redundant includes from http/webgui,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5045:7,redund,redundant,7,https://root.cern,https://github.com/root-project/root/pull/5045,1,['redund'],['redundant']
Safety,Remove redundant null pointer check,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/249:7,redund,redundant,7,https://root.cern,https://github.com/root-project/root/pull/249,1,['redund'],['redundant']
Safety,Remove redundant null pointer checks,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/260:7,redund,redundant,7,https://root.cern,https://github.com/root-project/root/pull/260,1,['redund'],['redundant']
Safety,Remove splash screen to avoid `root.exe` dependence on x11 or cocoa,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15056:24,avoid,avoid,24,https://root.cern,https://github.com/root-project/root/pull/15056,1,['avoid'],['avoid']
Safety,Remove the redundant dependencies from the target. This fixes a cxxmodules; nightly builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1741:11,redund,redundant,11,https://root.cern,https://github.com/root-project/root/pull/1741,1,['redund'],['redundant']
Safety,"Remove trailing whitespaces to avoid warnings like these:; ```; /home/rembserj/code/root/tree/treeplayer/src/TTreeFormula.cxx:3760:97: warning: backslash and newline separated by space; 3760 | ""Could not init branch associated to this leaf (%s)."", leaf->GetName()); \; |; /home/rembserj/code/root/tree/treeplayer/src/TTreeFormula.cxx:3829:97: warning: backslash and newline separated by space; 3829 | } \; |; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15465:31,avoid,avoid,31,https://root.cern,https://github.com/root-project/root/pull/15465,1,['avoid'],['avoid']
Safety,Remove wrong and redundant null pointer check,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/248:17,redund,redundant,17,https://root.cern,https://github.com/root-project/root/pull/248,1,['redund'],['redundant']
Safety,Removed redundant -fmodule-map-file= compilation flag.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/551:8,redund,redundant,8,https://root.cern,https://github.com/root-project/root/pull/551,1,['redund'],['redundant']
Safety,Removing usage of enum is easy in favor of using builtin strings to distinguish operation type in distributed RDataFrame. This also avoids an extra dependency for Python2,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7772:132,avoid,avoids,132,https://root.cern,https://github.com/root-project/root/pull/7772,1,['avoid'],['avoids']
Safety,Rename RooHistFunc::getObservables to not hide; RooAbsArg::getObservables. This is done to avoid breaking user code in the upcoming release (doesn't affect ROOT 6.24).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7911:91,avoid,avoid,91,https://root.cern,https://github.com/root-project/root/pull/7911,1,['avoid'],['avoid']
Safety,Replace gSystem->Which() with gSystem->FindFile() calls; Idea to avoid methods which returns `char *` value which should be deleted.; While there is already alternative - use it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4889:65,avoid,avoid,65,https://root.cern,https://github.com/root-project/root/pull/4889,1,['avoid'],['avoid']
Safety,"Reproducer:. ```; root [0] auto x = std::make_pair(42, 84);; root [1] auto *xp = &x;; root [2] TTree t(""t"", ""t""); (TTree &) Name: t Title: t; root [3] t.Branch(""x"", &xp); Error in <HandleInterpreterException>: Trying to dereference null pointer or trying to call routine taking non-null arguments; Execution of your code was aborted.; In module 'Core':; /home/blue/ROOT/dev/cmake-build-foo/include/TClass.h:635:38: warning: null passed to a callee that requires a non-null argument [-Wnonnull]; size_t hint_offset = ((char*)&(p->second)) - (char*)p;; ^; root [4] t.Branch(""x"", &x); Error in <HandleInterpreterException>: Trying to dereference null pointer or trying to call routine taking non-null arguments; Execution of your code was aborted.; /home/blue/ROOT/dev/cmake-build-foo/include/TClass.h:635:38: warning: null passed to a callee that requires a non-null argument [-Wnonnull]; size_t hint_offset = ((char*)&(p->second)) - (char*)p;; ^; ```. Note the ""Execution of your code was aborted"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11215:325,abort,aborted,325,https://root.cern,https://github.com/root-project/root/issues/11215,3,['abort'],['aborted']
Safety,"Respawn genvector tests because they accidentally dropped out from the building and testing process during the migration to CMake.; Minimal changes to the code were applied to let them run, respecting the original coding style. # This Pull request:. ## Changes or fixes:; It does not fix an existing issue, but rather it increases the test coverage recovering some tests. ## Checklist:. - [v] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13633:349,recover,recovering,349,https://root.cern,https://github.com/root-project/root/pull/13633,1,['recover'],['recovering']
Safety,Reuse component from `RBrowser`. Provide plugin to load file dialog on demand.; Avoids hard dependency from RBrowser libs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13118:80,Avoid,Avoids,80,https://root.cern,https://github.com/root-project/root/pull/13118,1,['Avoid'],['Avoids']
Safety,"Revert ""Avoid dupe ""llvm.ident"" operands.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10964:8,Avoid,Avoid,8,https://root.cern,https://github.com/root-project/root/pull/10964,1,['Avoid'],['Avoid']
Safety,"Revert ""Fix detection of Python3 on Windows""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5503:12,detect,detection,12,https://root.cern,https://github.com/root-project/root/pull/5503,1,['detect'],['detection']
Safety,"Revert ""Move inline method to implementation file to avoid inline",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/722:53,avoid,avoid,53,https://root.cern,https://github.com/root-project/root/pull/722,1,['avoid'],['avoid']
Safety,"Reverts root-project/root#9251 due to failures in LCG. In 1c38aa0 we made it possible to use installed json versions which do not have `json_fwd.h` to forward declare the json classes. However in this case, that brings the entire json package in the dictionaries. In turn, then we will need to build Json.pcm to avoid content duplication. This in turn requires LCG to provide ROOT_INCLUDE_PATH=/path/to/json at runtime. Is this all worth it?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9267:312,avoid,avoid,312,https://root.cern,https://github.com/root-project/root/pull/9267,1,['avoid'],['avoid']
Safety,Rewrite the RDataFrame JIT logic to avoid controlled leaks,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15520:36,avoid,avoid,36,https://root.cern,https://github.com/root-project/root/issues/15520,1,['avoid'],['avoid']
Safety,RooAddPdf: Avoid UB in checkObservables [v6.20],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9571:11,Avoid,Avoid,11,https://root.cern,https://github.com/root-project/root/pull/9571,1,['Avoid'],['Avoid']
Safety,RooAddPdf: Avoid UB in checkObservables [v6.22],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9570:11,Avoid,Avoid,11,https://root.cern,https://github.com/root-project/root/pull/9570,1,['Avoid'],['Avoid']
Safety,RooAddPdf: Avoid UB in checkObservables [v6.24],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9569:11,Avoid,Avoid,11,https://root.cern,https://github.com/root-project/root/pull/9569,1,['Avoid'],['Avoid']
Safety,RooAddPdf: Avoid UB in checkObservables [v6.26],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9568:11,Avoid,Avoid,11,https://root.cern,https://github.com/root-project/root/pull/9568,1,['Avoid'],['Avoid']
Safety,"RooFit currently includes the `RooCBShape` and `RooDSCBShape` to; represent the family of crystal ball distributions. The `RooCBShape`; only has a left tail, and `RooDSCBShape` has two independently; parametrized tails. Some users also want a crystal ball where the width of the Gaussian; core is different on the left and the right side (see e.g. Jira ticket; [ROOT-10388](https://sft.its.cern.ch/jira/browse/ROOT-10388)). To make the RooFit code more maintainable and also cover the use case; of an asymmetric Gaussian core, this commit implements a new; `RooCrystalBall` class that should cover all classes of crystal ball; shapes, such that `RooCBShape` and `RooDSCBShape` are in principle not; necessary anymore. The new features of the `RooCrystalBall` class that make it different; from `RooDSCBShape` are:. - possibility to set sigma of left side and right side of Gaussian; core separately. - code modernization and using `std::` math functions. - three constructors: fully parametrized, symmetric Gaussian core; (to replace `RooDSCBShape`), only left tail (to replace; `RooCBShape`). - useage of inlined helper functions to avoid code duplication. It is also carefully tested in `testRooCrystalBal`:. - test the fully parameterized case. - test the constructor for left-tail only case and compare values; with `RooCBShape`. - test the constructor with symmetric Gaussian core and compare; values with `RooDSCBShape`. - test the constructor for right-tail only and symmetric tails. - test integration with many possible combinations integration; ranges to cover all branches of integration code",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7257:1134,avoid,avoid,1134,https://root.cern,https://github.com/root-project/root/pull/7257,1,['avoid'],['avoid']
Safety,"RooMomentMorphND was initialising fractions to zero. That will lead to; an all-zero PDF, which triggers evaluation errors. Setting all fractions; to 1 avoids those warnings, and the correct values will be calculated; during the first fit step.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6110:151,avoid,avoids,151,https://root.cern,https://github.com/root-project/root/pull/6110,1,['avoid'],['avoids']
Safety,RooThresholdCategory cannot be successfully streamed because not all members are initialized safely in the default constructor. This PR fixes that.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4007:93,safe,safely,93,https://root.cern,https://github.com/root-project/root/pull/4007,1,['safe'],['safely']
Safety,"Root has two different ways to configure the build - the traditional configure script and cmake. The builds generated by the two systems are similar, but far from equivalent. Historically the configure script has been more feature complete and some things that the configure script is able to do are either missing or broken in the cmake build. However, new features are often only added to the cmake build. This has resulted in that today neither of the two is able to build root with a complete set of features. The cmake build is more standard and behaves in a more predictive way, e.g. it understands CFLAGS, LDFLAGS and friends which the configure script never did. It also integrates the test suite in the build and allows for running ""make test"", a feature that the configure script is missing. So the cmake build is in many ways better, if it wasn't for those missing and broken things mentioned earlier. This pull request is an attempt to address those missing and broken issues (though it fixes a few things for the configure script as well). Also contains a fix for ROOT-7326.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/153:569,predict,predictive,569,https://root.cern,https://github.com/root-project/root/pull/153,1,['predict'],['predictive']
Safety,Run `stressGraphics` in web mode when chrome/firefox detected,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16610:53,detect,detected,53,https://root.cern,https://github.com/root-project/root/pull/16610,1,['detect'],['detected']
Safety,Run stressGraphics in web mode when chrome/firefox detected,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16635:51,detect,detected,51,https://root.cern,https://github.com/root-project/root/pull/16635,1,['detect'],['detected']
Safety,Run tutorials with a maximum of 4 threads to avoid MT problems on some machines. Disable also OpenMP when running in MT in ROOT. Reduce also by a factor of 5 the number of input events,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12310:45,avoid,avoid,45,https://root.cern,https://github.com/root-project/root/pull/12310,1,['avoid'],['avoid']
Safety,"RunGraphs makes a summary log entry for the jitting time of all computation graphs that are being run concurrently. Generally this is ok, but in the case users specifically requested a log level of kDebug+10 or higher this would accidentally silence the logging of what code is being jitted.; With this patch, if log level is kDebug+10 or higher, RunGraphs avoids silencing inner logs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11832:357,avoid,avoids,357,https://root.cern,https://github.com/root-project/root/pull/11832,1,['avoid'],['avoids']
Safety,"S/ROOT/v6-24-02/v6-24-02/tree/tree/src/TBranch.cxx:854; #11 0x00007ff4494ae36b in TBranchElement::FillImpl (this=0x7ff42547e5f0, imtHelper=0x0) at /home/aliperf/aliperf_workspace/sw/SOURCES/ROOT/v6-24-02/v6-24-02/tree/tree/src/TBranchElement.cxx:1265; #12 0x00007ff4494ae069 in TBranchElement::FillImpl (this=0x7ff425170850, imtHelper=0x0) at /home/aliperf/aliperf_workspace/sw/SOURCES/ROOT/v6-24-02/v6-24-02/tree/tree/src/TBranchElement.cxx:1290; #13 0x00007ff44f4faf89 in TBranch::Fill (this=0x7ff425170850) at /home/aliperf/aliperf_workspace/sw/slc7_x86-64/ROOT/v6-24-02-local5/include/TBranch.h:201; #14 o2::base::DetImpl<o2::trd::Detector>::mergeAndAdjustHits<std::vector<o2::trd::Hit, std::allocator<o2::trd::Hit> > > (this=this; entry=0x3e69680, brname=..., origin=..., target=..., trackoffsets=..., nprimaries=..., subevtsOrdered=...) at /home/aliperf/aliperf_workspace/sw/SOURCES/O2/dev/0/Detectors/Base/include/DetectorsBase/Detector.h:403; #15 0x00007ff44f4fb507 in o2::base::DetImpl<o2::trd::Detector>::mergeHitEntries (this=0x3e69680, origin=..., target=..., trackoffsets=..., nprimaries=..., subevtsOrdered=...) at /home/aliperf/aliperf_workspace/sw/SOURCES/O2/dev/0/Detectors/Base/include/DetectorsBase/Detector.h:422; #16 0x00000000004456e1 in o2::devices::O2HitMerger::mergeAndFlushData (this=0x162d640, eventID=<optimized out>) at /home/aliperf/aliperf_workspace/sw/SOURCES/O2/dev/0/run/O2HitMerger.h:745; #17 0x00007ff446ec9f10 in std::execute_native_thread_routine (__p=0x7ad9e10) at ../../../../../gcc/libstdc++-v3/src/c++11/thread.cc:80; #18 0x00007ff44e186ea5 in start_thread () from /lib64/libpthread.so.0; #19 0x00007ff44680796d in clone () from /lib64/libc.so.6. Thread 5 (Thread 0x7ff42a18e700 (LWP 25519) ""o2-sim-hit-merg""):; #0 0x00007ff44e18ade2 in pthread_cond_timedwait. GLIBC_2.3.2 () from /lib64/libpthread.so.0; #1 0x00007ff44aca29d3 in __gthread_cond_timedwait (__abs_timeout=0x7ff42a187a30, __mutex=<optimized out>, __cond=<optimized out>) at /home/aliperf/aliper",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8931:4160,Detect,Detector,4160,https://root.cern,https://github.com/root-project/root/issues/8931,1,['Detect'],['Detector']
Safety,"See [SafeDelete definition](https://github.com/root-mirror/root/blob/edfa4cc5d8c02c626dbc3f0e9283f8fd9b28698b/core/base/inc/RConfig.h#L465). It seems that new static analyzer exhumes lots of ancient legacy. Do I (we) need to give attention to such cases?. And it seems that there is no ""Issues"" tab in this repository. I have got some suspicious places and I'm not sure how to fix them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/249:5,Safe,SafeDelete,5,https://root.cern,https://github.com/root-project/root/pull/249,1,['Safe'],['SafeDelete']
Safety,"See discussion at https://github.com/root-project/root/pull/7286. This set of improvements to TBufferMerger (and more) was inspired by the terrible performance of the parallel merging (and fast merging in general) in the case where the TTree has a very large number of branches (1000+). Where in the original version a TBufferMerger with a file with 1000+ branches and only 50s and ran with any number of threads would take more than 3m (did not wait until the end) the new version takes 11s with 1 thread, 8s with 6 threads and 22s with 6 thread when increased to 500 events. (using the CMS file ../data//250202_181_RECO.root). This PR includes:. * Skipping the boxing/compressing/uncompressing/unboxing cycle if the TBufferMerger is available (not already merging) when the thread is writing its TMemFile. * Skipping SetBranchAddress and SetMakeClass in when doing fast cloning (where that information is not used anyway). * Replacing calling to the slow TObjArray::GetEntries (which counts the slot used) by calling GetEntriesFast. * Speeding up the GetMother implementation (caching parent's address sooner when reading, use that information in GetMother). * In fast cloning, delay writing the output until the last input is processed (instead of writing the output after each input),. * Optimization of fast cloning handing of empty write basket. It also contains a couple of bug fixes (RNtuple merging forgetting to merge the result of the objects in the file, iofeatures incorrectly cloned). Also made TBufferMerger::GetQueueSize actually thread safe (it is necessary to use it to stop the producer from adding more data if the queue is too full). Also improved TClass::GetBaseClassOffset parallelism (benefit parallel boxing/unboxing) and reduced/removed contention see in the mechanism use to determine the actual object type at run-time (TIsAProxy).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7339:1553,safe,safe,1553,https://root.cern,https://github.com/root-project/root/pull/7339,1,['safe'],['safe']
Safety,See the bug report at Microsoft: [Problem with how the compiler generates covariant virtual functions](https://developercommunity.visualstudio.com/t/Problem-with-how-the-compiler-generates/1441440); And the proposed workaround:; >It turns out to be a problem with how the compiler generates the covariant virtual function `Clone` in `FunctorGradHandler`. To address the issue just use the original return type of the virtual base:; >```; >template; >class FunctorGradHandler : public ParentFunctor::Impl {; >...; > typename ParentFunctor::ImplBase* Clone() const { return Copy(); }; >...; >};; >```; > This should avoid the need for the compiler to generate the problematic covariant function.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8335:614,avoid,avoid,614,https://root.cern,https://github.com/root-project/root/pull/8335,1,['avoid'],['avoid']
Safety,"Seems like ignore-non-existent-contents is quite new,; so we just remove it for now to avoid crashing on; parsing this file with the old clang version inside; ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/536:87,avoid,avoid,87,https://root.cern,https://github.com/root-project/root/pull/536,1,['avoid'],['avoid']
Safety,Set the CMake policy `CMP0091 (MSVC runtime library flags are selected by an abstraction)` to `OLD` to keep the old way of selecting the runtime library with the `-MD`/`-MDd` compiler flag. This fixes several compilation errors like:; ```; RStl.obj : error LNK2038: mismatch detected for '_ITERATOR_DEBUG_LEVEL': value '0' doesn't match value '2' in rootcling_stage1.obj; RStl.obj : error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MD_DynamicRelease' doesn't match value 'MDd_DynamicDebug' in rootcling_stage1.obj; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8810:275,detect,detected,275,https://root.cern,https://github.com/root-project/root/pull/8810,2,['detect'],['detected']
Safety,"Set the environment for the tutorials, which is the eventual ROOT_environ plus some environment variables related to limiting the number of threads used by NumPy.; See: https://stackoverflow.com/questions/30791550/limit-number-of-threads-in-numpy. Possibly related to #16552, but the main motivation is to avoid an excessive number of threads when running the RooFit tutorials for simulation based inference. So far, the environment was set inside these tutorials, but this is distracting to users who look at these tutorials. Also, make sure that the same environment is used for all tutorials that are wrapped in `ROOT_ADD_TEST`. Furthermore, remove unused helper function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16717:306,avoid,avoid,306,https://root.cern,https://github.com/root-project/root/pull/16717,1,['avoid'],['avoid']
Safety,"Setting the flag must be protected by a lock. This is a recently-introduced test, and I think this bug caused the test to hang indefinitely in rare cases as in here (note the timeout): http://cdash.cern.ch/testDetails.php?test=85891275&build=874661. The stacktrace of the threads when the test was hanging was the following:. ```; Thread 2 (Thread 0xa2784b40 (LWP 4590)):; #0 0xb7fa1d61 in __kernel_vsyscall (); #1 0xb6ab9462 in futex_wait_cancelable (private=0, expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88; #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502; #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655; #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6; #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99; #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674); at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167; #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (; __f=...) at /usr/include/c++/8/bits/invoke.h:60; #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...); at /usr/include/c++/8/bits/invoke.h:95; #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674); at /usr/include/c++/8/thread:244; #10 0x004809",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5596:175,timeout,timeout,175,https://root.cern,https://github.com/root-project/root/pull/5596,1,['timeout'],['timeout']
Safety,"Setting the move constructor and move assignment operator to = default; causes linker errors because the copy assignment operator is not; implemented in the TIterator base class. Having the RooLinkedListIter move constructor and assignment operators; work is important to keep user code compatibility. This is done to avoid breaking user code in the upcoming release (doesn't affect ROOT 6.24 because problem exists only since https://github.com/root-project/root/pull/7641). With the current master, the linker error can be reproduces like this;; ```C++; void iterator_test() {. RooArgSet argSet1;; RooArgSet argSet2;. RooLinkedListIter iter{argSet1.iterator()};. iter = argSet2.iterator();; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7910:318,avoid,avoid,318,https://root.cern,https://github.com/root-project/root/pull/7910,1,['avoid'],['avoid']
Safety,"Setting the size of the transient buffer only in the constructor was a mistake, because it's never called when the RooBernstein is read back from a file. To be safe, the buffer size should be checked everytime that it's used. Closes #15690.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15695:160,safe,safe,160,https://root.cern,https://github.com/root-project/root/pull/15695,1,['safe'],['safe']
Safety,"Several small issues came up in the forum, and this is a collection of documentation updates, a few safety checks added to roofit and more understandable warning/error messages. Further, the class RooRealProxy (kind of a pointer with extra functionality) has been replaced by a templated class, as it always requires casting when the pointed-to object is used. Since it is internal to RooFit, this should not affect users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4739:100,safe,safety,100,https://root.cern,https://github.com/root-project/root/pull/4739,1,['safe'],['safety']
Safety,Should avoid problems on 32bit debian,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8574:7,avoid,avoid,7,https://root.cern,https://github.com/root-project/root/pull/8574,1,['avoid'],['avoid']
Safety,"Should solve ROOT-10583; When pgon used in CSG transformation, it is important to have shape without inner surface.; Also avoid use of implicit Bool_t -> Int_t conversion, it is not guaranteed that kTRUE value always 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5050:122,avoid,avoid,122,https://root.cern,https://github.com/root-project/root/pull/5050,1,['avoid'],['avoid']
Safety,"Significant revamp of FillBuffer. The new scheme insures a much more stable and efficient behavior in case of low; memory given by the user compared to the size of the buffer or 'odd' basket; layout. The basket collection is now done in 4 phases:. 1. One basket per branch, basket must contains the request entry and is not yet loaded or used,; 2. Even out by adding baskets so that all branches reach the same entry (or close); 3. Add the remaining branches from the current cluster.; 4. Add the basket from the begining of the clsuter to the current entry (if any). then repeat the 4 steps for the next cluster. The iteration is stopped as soon as the cache is 'full' as defined by these; rules:. - During step 1 of the first cluster, continue up to 4 times the user requested; cache size; - During steps 2 to 4 of the first cluster, continue up to 2 times the user; requested cache sizep; - During steps 2 to 4, the 'first' basket of a branch is accepted up to 4 times; the user requested cache size (i.e as if it had been selected during the 1st; step); - During the other clusters, continue up to the user requested cache size. A basket if rejected/skipped if its individual size is larger than the user; requested cache size. In addition, upon seeing a cache miss, FillBuffer now detects if all the basket; in the cache have already been used (read from the cache) in which case we can\; discard them and load the next set of baskets. As a side effect, we now keep a record of which baskets are in the cache and; which of those baskets have been used. The TTreePerfStats now keep a complete; log of all the basket that are:; - loaded in the main cache (and how many times); - loaded in the 'misss' cache (and how many times); - used; - read directly (complete cache miss); This will be helpful in understanding situation of over-read or slow operations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1960:1286,detect,detects,1286,https://root.cern,https://github.com/root-project/root/pull/1960,1,['detect'],['detects']
Safety,"Silence a zillion of compilation warnings like:; ```; warning C4267: 'initializing': conversion from 'size_t' to 'UInt_t', possible loss of data; ```; From Microsoft:; Compiler Warning (level 3) C4267; 'var' : conversion from 'size_t' to 'type', possible loss of data; The compiler detected a conversion from size_t to a smaller type.; To fix this warning, use size_t instead of type. Alternatively, use an integral type that is at least as large as size_t.; (size_t is unsigned __int64 or unsigned integer, depending on the target platform)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9197:282,detect,detected,282,https://root.cern,https://github.com/root-project/root/pull/9197,1,['detect'],['detected']
Safety,Simplify the deregistration procedure to `RLoopManager` and avoid relying on the order during member destruction of `RColumnRegister`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10072:60,avoid,avoid,60,https://root.cern,https://github.com/root-project/root/pull/10072,1,['avoid'],['avoid']
Safety,Since JSROOT v7 one should use modules or bundle provided as `build/jsroot.js`.; This bundle can be loaded with `require.js` (as in jupyter notebooks) or just as regular script (as in jupyter lab). Usage of `JSRootCore.js` is obsolete and should be avoided. Use JSROOT version 7.2.1 as fallback if local version is not available.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11767:249,avoid,avoided,249,https://root.cern,https://github.com/root-project/root/pull/11767,1,['avoid'],['avoided']
Safety,"Since ROOT 6.26, the HistFactory models include the RooBinWidthFunction; to multiply the yields in the RooHistFuncs with the inverse bin widths,; in order to get the correct probability density. That's great and fixes HistFactory for non-uniform binnings, but it is; not optimal for the `BinnedLikelihood` code path. Here, the bin widths; need to multiplied back again to get the event yields in each bin. This commit suggests to improve the situation for the new BatchMode by; propagating the information that we are building a binned likelihood; down to the RooBinWidthFunctions, such that they can remove themselves. Then, if such RooBinWidthFunctions were encountered and disabled, the NLL; knows that it can skip the multiplication with the bin widths. What is proposed here looks like a small performance optimization only,; but actually the main motivation is not performance but RooFit AD; support. By removing the RooBinWidthFunctions from the computation graphs; of HistFactory likelihoods, we don't need to implement code generation; support for this class, which would be not trivial in the general; n-dimensional case. With the suggestion in this PR, all that work is; avoided.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13024:1182,avoid,avoided,1182,https://root.cern,https://github.com/root-project/root/pull/13024,1,['avoid'],['avoided']
Safety,"Since TFormula accepts seriously broken formulae, ""x+t"" is, for example,; interpreted as a four-dimensional formula that can be evaluated; using Eval(x=2), using undefined values for {y,z,t}, RooFit needs to do; some safety checks. This formula would otherwise be valid in RooFit:; RooFormula form(""form"", ""x<y"", x);. That's an aftermath to #5360, where Enrico correctly raised that point that only writing a warning in the documentation will not help most users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5413:217,safe,safety,217,https://root.cern,https://github.com/root-project/root/pull/5413,1,['safe'],['safety']
Safety,"Since all df10* tutorials use IMT(hardware concurrency), it's; inefficient to run them in parallel. This regularly brings us into; timeouts in the nightlies.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6274:131,timeout,timeouts,131,https://root.cern,https://github.com/root-project/root/pull/6274,1,['timeout'],['timeouts']
Safety,"Since all df10* tutorials use IMT(hardware concurrency), it's; inefficient to run them in parallel. This regularly brings us into; timeouts in the nightlies.; To avoid this, those tutorials are now locking the resource; ""multithreaded"", which means that they don't run in parallel. Other; tests that don't have this resource lock still run, though. To reduce; congestion, the RDF tutorials now claim that they use 4 CPUs. That's in; general not true, on an e.g. 8-core machine, CMake will run an IMT=8; with 4 single-threaded ctest, leading to an oversubscription of 1.5; instead of the 2 or more we had before. Backported from 668e0444d17e2",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6280:131,timeout,timeouts,131,https://root.cern,https://github.com/root-project/root/pull/6280,2,"['avoid', 'timeout']","['avoid', 'timeouts']"
Safety,"Since output trees are recreated for each task, and each task only; processes one tree cluster (and never crosses file boundaries), we; don't need to add the output trees as clones of the input tress; unless the input trees have friends (which might cross file boundaries); even if the main tree does not. Usage of AddClone here is undesirable in the general case because; it generates many (safe) warnings printed at screen during the event; loop, see ROOT-9487.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2234:392,safe,safe,392,https://root.cern,https://github.com/root-project/root/pull/2234,2,['safe'],['safe']
Safety,"Since the upgrade to LLVM 13, the Cling test `CodeUnloading/RereadFile.C` fails with; ```; cling: /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/DeclCXX.cpp:1499: clang::NamedDecl *getLambdaCallOperatorHelper(const clang::CXXRecordDecl &): Assertion `!Calls.empty() && ""Missing lambda call operator!""' failed.; #0 0x00000000023cb663 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /home/jhahnfel/ROOT/src/interpreter/llvm/src/lib/Support/Unix/Signals.inc:565:13; #1 0x00000000023c9822 llvm::sys::RunSignalHandlers() /home/jhahnfel/ROOT/src/interpreter/llvm/src/lib/Support/Signals.cpp:98:18; #2 0x00000000023cbc6f SignalHandler(int) /home/jhahnfel/ROOT/src/interpreter/llvm/src/lib/Support/Unix/Signals.inc:407:1; #3 0x00007fdc3a8d4b50 __restore_rt (/lib64/libc.so.6+0x4eb50); #4 0x00007fdc3a8d4acf raise (/lib64/libc.so.6+0x4eacf); #5 0x00007fdc3a8a7ea5 abort (/lib64/libc.so.6+0x21ea5); #6 0x00007fdc3a8a7d79 _nl_load_domain.cold.0 (/lib64/libc.so.6+0x21d79); #7 0x00007fdc3a8cd426 (/lib64/libc.so.6+0x47426); #8 0x00000000037504a4 (/home/jhahnfel/ROOT/build-cling-clang/interpreter/llvm/src/bin/cling+0x37504a4); #9 0x00000000037504b6 clang::CXXRecordDecl::getLambdaCallOperator() const /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/DeclCXX.cpp:1513:14; #10 0x0000000003750559 clang::ValueDecl::getType() const /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/include/clang/AST/Decl.h:687:37; #11 0x0000000003750559 clang::CXXRecordDecl::getLambdaStaticInvoker() const /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/DeclCXX.cpp:1524:28; #12 0x00000000038a67b7 (anonymous namespace)::CXXNameMangler::mangleLambdaSig(clang::CXXRecordDecl const*) /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/ItaniumMangle.cpp:1977:3; #13 0x00000000038a59be (anonymous namespace)::CXXNameMangler::mangleLambda(clang::CXXRecordDecl const*) /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/ItaniumMangle.cpp:1948:3; #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12457:877,abort,abort,877,https://root.cern,https://github.com/root-project/root/issues/12457,1,['abort'],['abort']
Safety,"Skip registration of TFile UUIDs in the global list when using the """"""READ_WITHOUT_GLOBALREGISTRATION"""""" option with TFile (used by default in TTreeProcessorMT). This avoids the final use of the global write lock during typical RDataFrame event loops, significantly improving multi-threaded performance for cases with many files and many threads. This follows up on https://github.com/root-project/root/pull/9486 and mostly finishes addressing https://github.com/root-project/root/issues/7710. Skipping the UUID registration breaks the particular case where a TRef points to the TFile object, but as per the discussion in this PR, this use case has thread-safety problems for TFile objects being managed by TTreeProcessorMT anyways. A test case is below. Produce the test dataset:. ```cpp; #include ""TFile.h""; #include ""TTree.h""; #include ""TString.h""; #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;; const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {; TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");; TTree *tree = new TTree(""tree"", """");; tree->Branch(""outval"", &outval);; for (unsigned int ientry = 0; ientry < nentries; ++ientry) {; tree->Fill();; }; tree->Write();; fout->Close();; }. }; ```. Test event loop:. ```python; import ROOT; ROOT.gInterpreter.ProcessLine("".O3""); ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""); chain.Add(""test_*.root""). d = ROOT.ROOT.RDataFrame(chain); res = d.Sum(""outval""). resval = res.GetValue(); print(resval); ```. With 256 threads (on partly loaded machine, but still representative):. Baseline:; Percent of CPU this job got: 1557%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:49.89. +this PR; Percent of CPU this job got: 14271%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.11",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10318:167,avoid,avoids,167,https://root.cern,https://github.com/root-project/root/pull/10318,2,"['avoid', 'safe']","['avoids', 'safety']"
Safety,Small Minuit2 Improvements: Avoid a duplicate state in FunctionMinimum,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7109:28,Avoid,Avoid,28,https://root.cern,https://github.com/root-project/root/pull/7109,1,['Avoid'],['Avoid']
Safety,Small change to TTree::OptimizeBaskets to avoid disc reads,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/369:42,avoid,avoid,42,https://root.cern,https://github.com/root-project/root/pull/369,1,['avoid'],['avoid']
Safety,Small fix for geometry state recovery in VMC,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3882:29,recover,recovery,29,https://root.cern,https://github.com/root-project/root/pull/3882,1,['recover'],['recovery']
Safety,"Solves problem with `rootbrowse` utility. In PyROOT there are different ways how event loop is running.; Finally there is special thread where gSystem->ProcessEvents() regularly called. In such special case webgui should be informed that ProcessEvents called from special thread - ; via `gEnv->SetValue(""WebGui.ExternalProcessEvents"", ""yes"")`.; In such case RWebWindowManager tries to detect thread id and really use ProcessEvents context to process WebGui functionality. In such configuration extra http thread not required and will be disabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7948:385,detect,detect,385,https://root.cern,https://github.com/root-project/root/pull/7948,1,['detect'],['detect']
Safety,Solves problem with gcc10 warnings. Temporary skip CI to avoid load on Jenkins nodes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5840:57,avoid,avoid,57,https://root.cern,https://github.com/root-project/root/pull/5840,1,['avoid'],['avoid']
Safety,"Some headers contain redundant header guards around #include directives like this:. #ifndef ROOT_TTree; #include ""TTree.h""; #endif. This patch removes the #ifndef's around these includes as they don't serve any practical purpose and are no longer part of the current ROOT coding convention. This patch also fixes the 153 typos that are contained in the symbols of the #ifndef directives.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/341:21,redund,redundant,21,https://root.cern,https://github.com/root-project/root/pull/341,1,['redund'],['redundant']
Safety,"Some improvements in the RooFit build configuration to avoid that information that is only necessary for RooFit at build time is leaking into the public user interface. In particular, it is not necessary to define these `R__HAS_<*>` flags in the public ROOT config only to use them in the private `.cxx` sources. This should be avoided and instead be done with defines in the build configuration. * Move stressRooFit and stressRooStats to `roofit` directory; * Remove `R__HAS_ROOFIT_MULTIPROCESS` from ROOT configuration; * No need to check `R__HAS_MATHMORE` in roofitmore sources; * Avoid need for `R__HAS_CUDA`. More detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13915:55,avoid,avoid,55,https://root.cern,https://github.com/root-project/root/pull/13915,3,"['Avoid', 'avoid']","['Avoid', 'avoid', 'avoided']"
Safety,"Sometimes the `getxattr` call returns a valid string, but the string is incomplete. Namely, part of the full URL to the file on EOS is missing (usually the filename itself). Workaround by checking for the presence of the filename in the xurl string and in case it is not present, avoid calling TFile::Open.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16173:280,avoid,avoid,280,https://root.cern,https://github.com/root-project/root/pull/16173,1,['avoid'],['avoid']
Safety,"Sone changes are made to both the Python and C++ version of the; `rf212_plottingInRanges_blinding` tutorial:. * move around the `-----` that denote section headers to fix the; notebook formatting; * rename `exp` to `expo` to avoid an ambiguity error because of; `std::expr` in C++ tutorial notebook; * use `std::unique_ptr` to avoid leaking of datasets. In particular, the call to `fitTo` includes now the; `Range(""left,right"")` command argument. Otherthise, the fit would also; try to make the model adapt to the empty bins in the blinded region,; giving a wrong fit result (it can be easily seen that the fit was wrong; before by increasing the number of events in the toy dataset to 100k). To avoid that the plotting takes the (now correct) fit range as; `NormRange()` and we can't show what happens if the normalization range; is not set, the `fitrange` string attribute is reset after fitting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10955:225,avoid,avoid,225,https://root.cern,https://github.com/root-project/root/pull/10955,3,['avoid'],['avoid']
Safety,Specifically this fixes the one described at:; https://sft.its.cern.ch/jira/browse/ROOT-9773?focusedCommentId=87824&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-87824; where the issue was that adding a single branch did not close the learning and 'worth' provoke a learning; prefill. We solved this by distinguishing at the interface level adding branch manual and adding branch as; part of the learning. We can now avoid the LearningPrefill during manual adds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3007:449,avoid,avoid,449,https://root.cern,https://github.com/root-project/root/pull/3007,3,['avoid'],['avoid']
Safety,Speed-up CNN and RNN tutorials in TMVA (use less epochs) and add some fixes for IMT and to not use root-config in the python versions. ; Add also a dependency in the Python tutorials on the C++ to avoid conflicts with the same file name. Remove not needed veto for the no-imt case for the TMVA_CNN_Classification.C tutorial introduced in #13712,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13818:197,avoid,avoid,197,https://root.cern,https://github.com/root-project/root/pull/13818,1,['avoid'],['avoid']
Safety,"Spun off from [discussion](https://github.com/root-project/root/pull/5934/commits/6f3ec9372b011536fc314eef0835508a07d2513b#r448782416) on #5934, this PR lets us wrap move-only types in `RResult`. We add a new method `Unwrap()` to obtain the inner type by value. The caller takes ownership of the inner type, and for move-only types the `RResult` is left in an unspecified state. I decided against adding safeguards against double-moves for now because it would result in false-positive messages for types without move specializations (e.g. `return std::move(42)`). Instead, we should make clear through documentation and examples that `Unwrap()` consumes the `RResult`. . The existing const-ref access method `Get()` has been renamed `Inspect()` following Mozilla's `RResult`-like type [here](https://searchfox.org/mozilla-central/source/mfbt/Result.h#90-91). `Get()` has caused some confusion in code review and we've been looking for alternative names. . Example: ; ```cpp; auto TestMoveOnly = []() -> RResult<std::unique_ptr<int>> {; return std::make_unique<int>(1);; };; auto res = TestMoveOnly();. // Using Inspect to make a copy won't compile; // auto copy_inner = res.Inspect();. // This will compile, but we only have read-only access; const auto& copy_inner = res.Inspect();; EXPECT_EQ(1, *copy_inner);. // Instead, Unwrap is required to get ownership of the move-only type; auto move_inner = res.Unwrap();; EXPECT_EQ(1, *move_inner);; move_inner.reset();; move_inner = std::make_unique<int>(2);; EXPECT_EQ(2, *move_inner);; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5985:404,safe,safeguards,404,https://root.cern,https://github.com/root-project/root/pull/5985,1,['safe'],['safeguards']
Safety,"Starting from current master, we generate JSON for different v7 tutorials and embed them into HTML pages to; provide interactive images like:. https://root.cern/doc/master/draw__rh1__twoaxes_8cxx.html. For these images we are using https://root.cern/js/dev/ version, which constantly changes.; To be on the safe side, we should preserve JSROOT version with generated reference guide.; Most easy way - just copy JSROOT from ROOT sources into directory with doxygen HTML files ; and use that version of JSROOT in reference guide.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8599:307,safe,safe,307,https://root.cern,https://github.com/root-project/root/issues/8599,1,['safe'],['safe']
Safety,"Support for user defined sensitive detectors; new TVirtualMC::NIELEdep(); clean-up:; Details:; o TVirtualMCSensitiveDetector: the interface class for a user sensitive detector; o New functions in TVirtualMC:; void SetSensitiveDetector(const TString &volName, TVirtualMCSensitiveDetector *sd);; TVirtualMCSensitiveDetector *GetSensitiveDetector(const TString &volName) const;; void SetExclusiveSDScoring(Bool_t exclusiveSDScoring);; o New function in TVirtualMCApplication:; void ConstructSensitiveDetectors();; - Added new TVirtualMC::NIELEdep() function; - Removed default implementation for TVirtualMC::TrackPosition/Momentum with Float_t arguments",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1892:35,detect,detectors,35,https://root.cern,https://github.com/root-project/root/pull/1892,2,['detect'],"['detector', 'detectors']"
Safety,Synchronizes with this upstream commit and directly makes use of the new; API to avoid a patch:; https://github.com/wlav/CPyCppyy/commit/993b17bce2f43516a85931b40035ac7252e2ab7e,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15788:81,avoid,avoid,81,https://root.cern,https://github.com/root-project/root/pull/15788,1,['avoid'],['avoid']
Safety,TBuffer* classes should abort in case the 1GB limit is being hit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14770:24,abort,abort,24,https://root.cern,https://github.com/root-project/root/issues/14770,1,['abort'],['abort']
Safety,TClass::GetClassInfo() is not thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15090:37,safe,safe,37,https://root.cern,https://github.com/root-project/root/issues/15090,1,['safe'],['safe']
Safety,TClassEdit: make usage of static cache container thread safe.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10369:56,safe,safe,56,https://root.cern,https://github.com/root-project/root/pull/10369,1,['safe'],['safe']
Safety,TCling::UpdateListOfLoadedSharedLibraries() Linux thread safety,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6797:57,safe,safety,57,https://root.cern,https://github.com/root-project/root/issues/6797,1,['safe'],['safety']
Safety,TClingUtils: Avoid growing paths in GetFileName,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10387:13,Avoid,Avoid,13,https://root.cern,https://github.com/root-project/root/pull/10387,1,['Avoid'],['Avoid']
Safety,"TColor::GetColor(r,g,b) uses 5bit threshold by; default to create new colors. This differs; from normal X11 with 8bit colors. As a result,; images produced in batch and in interactive; session may differ - see greyscale.C macro. Make default 8bit resolution for colors, and; reduce it only if detecting such display.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14063:293,detect,detecting,293,https://root.cern,https://github.com/root-project/root/pull/14063,1,['detect'],['detecting']
Safety,TDatabasePDG::GetParticle(...) not being thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11580:48,safe,safe,48,https://root.cern,https://github.com/root-project/root/issues/11580,1,['safe'],['safe']
Safety,TF2 (with same name) construction can not be made thread safe without taking a lock,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11460:57,safe,safe,57,https://root.cern,https://github.com/root-project/root/issues/11460,1,['safe'],['safe']
Safety,"TFormula indirectly accesses gROOT->fGlobalFunctions. Therefore to safely call different TFormula on different threads, access to the global function list must be serialized.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/31:67,safe,safely,67,https://root.cern,https://github.com/root-project/root/pull/31,1,['safe'],['safely']
Safety,TH1::Fill Avoid redundancy,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5010:10,Avoid,Avoid,10,https://root.cern,https://github.com/root-project/root/pull/5010,2,"['Avoid', 'redund']","['Avoid', 'redundancy']"
Safety,TMVA GPU features are enabled only when both the cuda and tmva-gpu flags are enabled. These flags are not used anywhere else. It looks like the cuda flag is redundant in this case. . Related forum post - https://root-forum.cern.ch/t/feature-request-enable-cuda-if-detected/32764,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3438:157,redund,redundant,157,https://root.cern,https://github.com/root-project/root/pull/3438,2,"['detect', 'redund']","['detected', 'redundant']"
Safety,TMVA RReader not multithread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16600:29,safe,safe,29,https://root.cern,https://github.com/root-project/root/issues/16600,1,['safe'],['safe']
Safety,"TMVA headers must be included before TODBCServer.h to avoid compile error in TVirtualTreePlayer.h(45,75): error C2589: '(': illegal token on right side of '::'",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16638:54,avoid,avoid,54,https://root.cern,https://github.com/root-project/root/issues/16638,1,['avoid'],['avoid']
Safety,TODO: find a way to avoid repeating `RAction`'s code three times without losing performance,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2595:20,avoid,avoid,20,https://root.cern,https://github.com/root-project/root/pull/2595,1,['avoid'],['avoid']
Safety,TString sanity check nchar not larger than capacity,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11444:8,sanity check,sanity check,8,https://root.cern,https://github.com/root-project/root/pull/11444,1,['sanity check'],['sanity check']
Safety,"TTask exposes fTasks through (non-const) GetListOfTasks, so the invariant ""fTasks only contains pointers to TTask"" can not be enforced. ; This makes ; ``` while((task=(TTask*)next())) {```; an unsafe type cast. dynamic_cast should be used instead to avoid undefined behavior. . Generally, any C-style casts (or static_casts) should be avoided unless there is encapsulation to enforce an adequate invariant. ; C++ is a strongly typed language where type errors have to be caught at compile time because they will not lead to graceful failure at runtime.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11663:193,unsafe,unsafe,193,https://root.cern,https://github.com/root-project/root/issues/11663,3,"['avoid', 'unsafe']","['avoid', 'avoided', 'unsafe']"
Safety,TTask: unsafe cast in ExecuteTasks,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11663:7,unsafe,unsafe,7,https://root.cern,https://github.com/root-project/root/issues/11663,1,['unsafe'],['unsafe']
Safety,"TThreadedObject currently has a fixed amount of available slots,; the number of which can be set at construction time. This makes; it impossible to use TThreadedObject inside TBB tasks safely, because; TBB can potentially swap out worker threads for different threads at; runtime, resulting in TThreadedObject counting more thread ID's than; slots, and therefore in out-of-bound accesses to its contents. With this patch, TThreadedObject just appends a new slot when needed,; so it nevers runs out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5464:185,safe,safely,185,https://root.cern,https://github.com/root-project/root/pull/5464,1,['safe'],['safely']
Safety,"TTree::CopyAddresses has the built-in pre-condition that the input and; output branches are of the same kind. Clones might be added, however,; for which the pre-condition is violated. This is currently the case,; for example, with certain usages of RDataFrame::Snapshot, which might; create an output branch that is a simple TBranch while the input branch; is e.g. a TBranchElement. This results in wrong data being written out. With this patch we detect this case and complain.; A proper fix will be proposed soon. The issue is tracked as #8295.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8314:448,detect,detect,448,https://root.cern,https://github.com/root-project/root/pull/8314,2,['detect'],['detect']
Safety,TTreeCacheUnzip thread safety with prefetching enabled,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10095:23,safe,safety,23,https://root.cern,https://github.com/root-project/root/issues/10095,1,['safe'],['safety']
Safety,"TTreeProcessorMT now spawns tasks that process clusters from tasks that process files:; this should decrease the amount of file switches that each thread-local; TChain performs during an event loop, as each thread will tend to; process clusters that belong to the same file. In addition, when no friends and no TEntryList are present, we can avoid the preliminary full sweep of; input files, since we we can use local rather than global entry numbers.; In this case TTreeProcessorMT spawns one task per input file which first retrieves cluster boundaries; for that file and then spawns one sub-task per cluster. I also added myself to the list of authors. @etejedor there are a couple of things I am not super happy with in this implementation:; - each thread-local `TTreeView` duplicates all info about the dataset (file names, friend names, friend file names...); - `TTreeProcessorMT` has to query all of this information from `TTreeView`; - ~~the per-file task should only call `Internal::MakeClusters` once (just noticed, that's an easy refactoring)~~ fixed and squashed. Moving the dataset info from `TTreeView` to `TTreeProcessorMT`, on the other hand, would mean adding even more parameters to `TTreeView::GetTreeReader`. What do you think?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2143:342,avoid,avoid,342,https://root.cern,https://github.com/root-project/root/pull/2143,1,['avoid'],['avoid']
Safety,"TVirtualX.h contains not correct definition ""class GLUtesselator"", which is conflicts with real ""struct GLUtesselator"". ; For now just avoid use of both includes in one place.; In principle, one should remove GLUtesselator for TVirtualX at all",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2905:135,avoid,avoid,135,https://root.cern,https://github.com/root-project/root/pull/2905,1,['avoid'],['avoid']
Safety,"Test directories should be added using ROOT_ADD_TEST_SUBDIRECTORY. If add_subdirectory is used the test binaries get installed during ""make install"". if(testing) is redundant - it is already part of the ROOT_ADD_TEST_SUBDIRECTORY macro.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2247:165,redund,redundant,165,https://root.cern,https://github.com/root-project/root/pull/2247,1,['redund'],['redundant']
Safety,Thanks to Tomas Dado for noticing that this was broken. We should ensure that ROOT always builds with this flag. See also:; * https://root.cern/doc/v632/release-notes.html#compile-your-code-with-memory-safe-interfaces; * https://github.com/root-project/root/blob/master/roofit/roofitcore/inc/RooFit/Config.h#L16,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15946:202,safe,safe-interfaces,202,https://root.cern,https://github.com/root-project/root/pull/15946,1,['safe'],['safe-interfaces']
Safety,"The ""Math/Error.h"" header is not shipped with standalone Minuit2. It is not a perfect solution to just ship it with Minuit2, because the Error.h header behaves differently depending on the `MATHCORE_STANDALONE` macro being defined or not. The code would only work correctly if the user defines the `MATHCORE_STANDALONE` herself in the user code that uses standalone Minuit2, which would be annoying. Instead, this commit proposes another solution to the problem: for all headers also used in Minuit2 standalone, MathCore; moves the definitions of all functions that use `Math/Error.h` out of the header files in the cxx files. Like this, the `Math/Error.h` is only a build dependency of standalone Minuit2, and the user doesn't need to define the `MATHCORE_STANDALONE` macro for it to work. Including the ""Math/Util.h"" header needs to be avoided for similar reasons (it's about another preprocessor macro related to `veccore`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13646:838,avoid,avoided,838,https://root.cern,https://github.com/root-project/root/pull/13646,1,['avoid'],['avoided']
Safety,The 5 second timeout was not enough when trying to build ROOT in docker.; Possibly the issue was due to lag on the server as well. Patch by Alexander Penev (@alexander-penev).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9405:13,timeout,timeout,13,https://root.cern,https://github.com/root-project/root/pull/9405,1,['timeout'],['timeout']
Safety,The EnableAutoLoading interface needs to know about the internal TCling implementation to safely enable the autoloading facility in ROOT. Calling this interface cannot be user responsibility as he/she should not know the initialization details of TCling. Make this interface a nop and add a deprecation warning. This should resolve ROOT-10514 and ROOT-10528.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4868:90,safe,safely,90,https://root.cern,https://github.com/root-project/root/pull/4868,1,['safe'],['safely']
Safety,"The Failure is visible on the GCC 12 / Fedora 36 build: https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/3285/LABEL=ROOT-fedora36,SPEC=default,V=master/testReport/junit/projectroot.roottest.root.tree/branches/roottest_root_tree_branches_make/; for example:; ```; +Error in <TTree::Branch>: The class requested (vector<int>) for the branch ""vec"" is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (vector<int>) to avoid to write corrupted data.; ```; This indicates that the generation of the dictionary for `std::vector<int>` failed even-though it is explicitly requested as part of the G__Core.cxx dictionary. . And indeed when inspecting the build log we see for `G__Core.cxx`:; ```; Warning: Unused class rule: vector<Int_t> ; ```. I narrowed down the problem to the presence of:; ```; -cxxmodule -s /home/sftnight/build/manual/build/lib/libCore.so -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes ; ```; on the command line. And it can easily be reproduce with the files:; ```; // a.h; #include <vector>; ```; and; ```; // aLinkDef.h ; #pragma link C++ class vector<Int_t>+;; ```; and with; ```; /home/sftnight/build/manual/build/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx a.h aLinkDef.h; ```; we get a proper dictionary for the vector. While with; ```; /home/sftnight/build/manual/build/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/sftnight/build/manual/build/lib/libCore.so -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes a.h aLinkDef.h ; ```; we get an empty dictionary and the warning:. ```; Warning: Unused class rule: vector<Int_t> ; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11329:515,avoid,avoid,515,https://root.cern,https://github.com/root-project/root/issues/11329,1,['avoid'],['avoid']
Safety,"The IO of RooFit proxies can be quite fragile sometimes, and it can happen when reading a RooProduct that the `_proxyList` is not synced with the proxy members. In dbc96810, I decided to throw an exception is this case, but I realized this was too strong: too many old workspace are affected. In all cases that I know of, one can simply recover by correctly resetting the `_proxyList`. This is now what is done, and only a warning is printed. The warning includes information on all the proxies, so the user can figure out themselves if what RooFit is doing here is correct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12046:337,recover,recover,337,https://root.cern,https://github.com/root-project/root/pull/12046,1,['recover'],['recover']
Safety,"The RAII object in RDaos.cxx was constructed statically, which causes a DAOS-enabled RNTuple build to call `daos_init()` (or `daos_fini()` at exit) even if the only the file backend was used by user code. This commit turns the RAII object into a static variable in `RDaosPool::RDaosPool()` which is initialized during the first call to the; constructor. Note that static variable initialization is guaranteed to be thread-safe by ISO C++.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8093:422,safe,safe,422,https://root.cern,https://github.com/root-project/root/pull/8093,1,['safe'],['safe']
Safety,"The RNTuple binary format v1 states that feature flags bitmap is encoded as a sequence of 64-bit integers in which the MSb indicates that another 64-bit block follows. If more than one 64-bit integer is serialized, the MSb of all but the last integer should be `1` and the rest of the bits should preserve their original meaning.; Therefore, this PR avoids the use of two's complement in this case in favour of manually setting the MSb. According to my interpretation of the [RNTuple binary format v1](https://github.com/root-project/root/blob/master/tree/ntuple/v7/doc/specifications.md) specification, this is the only case in which this happens. All the other uses of two's complement are correct, e.g. in frames or locators we specify that negative sizes have a different/specific meaning. ## Changes or fixes:; - Fix feature flags bitmap serialization. ## Checklist:; - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9418:350,avoid,avoids,350,https://root.cern,https://github.com/root-project/root/pull/9418,1,['avoid'],['avoids']
Safety,The RNTuple datasource currently does not look at cluster boundaries when splitting the dataset into entry ranges that are fed to TBB tasks via RDF. A more sensible task splitting would avoid redundant decompression work.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10871:186,avoid,avoid,186,https://root.cern,https://github.com/root-project/root/issues/10871,2,"['avoid', 'redund']","['avoid', 'redundant']"
Safety,"The RResult class overwrites the `new` operator to prevent (make it harder for) heap creation of RResult objects. This does not work with PyROOT. E.g., PyROOT can't call `RFieldBase::Create()`. This patch removes the new operator overwrites. This should be a small safety compromise for PyROOT usability. Also: fixes namespace layering and moves RResultBase out of the Internal namespace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14463:265,safe,safety,265,https://root.cern,https://github.com/root-project/root/pull/14463,1,['safe'],['safety']
Safety,"The RooAbsPdf version number is incremented, going with the removal of; some unused data members:. * `_rawValue`; * `_traceCount`; * `_negCount`. Furthermore, the `_errorCount` member is now made transient, because it; is only related to logging, counting the logged errors to avoid printing; errors them repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11093:277,avoid,avoid,277,https://root.cern,https://github.com/root-project/root/pull/11093,1,['avoid'],['avoid']
Safety,"The RooFit test statistic classes give wrong results if they are; constructed from multiple comma-separated ranges. This can cause errors,; such as the one reported in Jira issue [ROOT-10038](https://sft.its.cern.ch/jira/browse/ROOT-10038). This commit suggests to throw an exception if multiple comma-separated; ranges are detected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7827:324,detect,detected,324,https://root.cern,https://github.com/root-project/root/pull/7827,1,['detect'],['detected']
Safety,"The RooPoisson is implemented with TMath::Poisson, which is normalized; if x covers the full definition range of the Poisson distribution, which; is zero to infinity. By correctly reporting this self-normalization in; that case, the creation of a dummy integral object that returns one is; avoided. The reduced overhead results in a significant speedup of; HistFactory fits with gamma constraints between 10 and 15 % in the hf001; tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:; ```; ----------------------------------------------------------------------------------------------; Benchmark Time CPU Iterations; ----------------------------------------------------------------------------------------------; hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391; hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762; hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156; hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423; ```. and after this PR:; ```; ----------------------------------------------------------------------------------------------; Benchmark Time CPU Iterations; ----------------------------------------------------------------------------------------------; hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744; hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786; hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835; hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10836:290,avoid,avoided,290,https://root.cern,https://github.com/root-project/root/pull/10836,1,['avoid'],['avoided']
Safety,The Sema::LookupConstructor is not iteration safe.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7298:45,safe,safe,45,https://root.cern,https://github.com/root-project/root/pull/7298,1,['safe'],['safe']
Safety,"The TIsAProxy does late initialization and caching, both of which; need to be done in a thread-safe manner.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/49:95,safe,safe,95,https://root.cern,https://github.com/root-project/root/pull/49,1,['safe'],['safe']
Safety,"The TPython library has one big caveat: it requires linking against `libpython`, which is not allowed in some context like the Python package manager. To avoid this problem that is blocking `pip install root`, this commit suggests to make TPython optional at build time. This makes also sense considering how TPython and PyROOT are used: if you intend to use ROOT via PyROOT from pip install ROOT, you probably won't need the functionality to run Python code from C++ that TPython provides. Possibly supersedes #15891, @vepadulano.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16337:154,avoid,avoid,154,https://root.cern,https://github.com/root-project/root/pull/16337,1,['avoid'],['avoid']
Safety,"The TTree::kEntriesReshuffled bit signals that a TTree is the output; of the processing of another TTree, and its entries are reshuffled; w.r.t. to the original TTree. As a safety measure, a TTree with this; bit set cannot add friends nor can be added as a friend. MT Snapshot, in RDataFrame, sets kEntriesReshuffled for the output tree to true. This fixes ROOT-9556.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5182:173,safe,safety,173,https://root.cern,https://github.com/root-project/root/pull/5182,1,['safe'],['safety']
Safety,"The `IOTests` test has run on my machine for 10000 times without crashing, so this may be safe to remove now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1426:90,safe,safe,90,https://root.cern,https://github.com/root-project/root/pull/1426,1,['safe'],['safe']
Safety,"The `Py_GetProgramName` function in the Python C API was deprecated in Python 3.13 and will be removed in Python 3.15. However, it seems behavior is unchanged by just passing an empty string instead. This avoids a warning when building CPyCppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16785:205,avoid,avoids,205,https://root.cern,https://github.com/root-project/root/pull/16785,1,['avoid'],['avoids']
Safety,"The `RooAbsData::createHistogram` has two overloads, one taking RooFit; command arguments and one taking integers for bin numbers (the version; with command arguments is much more common in RooFit code). They behave inconsistently when using default parameters, e.g. these two; calls result in different binnings:; ```C++; // 1. overload with int bin numbers:; data->createHistogram(obs->GetName());. // 2. overload with command arguments:; data->createHistogram(data->GetName(), dataObs);; ```. The function with integer bin numbers defaults to computing a binning; automatically from the distribution in the dataset. The function with; command arguments defaults to the binning stored in the variable, which; is much more suitable for RooFit. To avoid confusion in the future, this commit marks the overload with; the `int` parameters as deprecated so it is removed in ROOT 6.30. Closes https://github.com/root-project/root/issues/10401.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10411:748,avoid,avoid,748,https://root.cern,https://github.com/root-project/root/pull/10411,1,['avoid'],['avoid']
Safety,"The `RooAbsMinimizerFcn` and `RooMinimizerFcn` classes are; implementation details of the `RooMinimizer`. In one of the recent RooFit meetings, it was decided together with users; that this should be no problem, and doing so will greatly increase the; developers flexibility in updating the RooMinimizer implementation. This removal is mentioned in the v628 release notes. Furthermore, this PR suggests to make `RooMinimizer::applyCovarianceMatrix` a public function, and extends `RooAbsMinimizerFcn` by a `fit` function to avoid downcasting in the RooMinimizer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9874:524,avoid,avoid,524,https://root.cern,https://github.com/root-project/root/pull/9874,1,['avoid'],['avoid']
Safety,"The `RooAbsPdf::_normSet` member should be not used, because it can; happen in many situations that the RooArgSet it points to gets out of; scope and then you get a crash. There were several cases reported on the; forum where this happened with a RooAddPdf recently, becaues with ROOT; 6.26 some logic of the RooAddPdf got changed to better deal with empty; normalization sets. This commit avoids using `_normSet` by overriding `getValV` in RooAddPdf; directly, instead of `evaluate()`. This way, it has access to the actual; normalization set that is passed to the call to `getVal()`. For the batch mode, we now pass `nullptr` to; `RooAddPdf::getNormAndCache()` instead of `_normSet`. In this case it; falls back to using `_copyOfLastNormSet`, which is guaranteed to still; be valid because it's a unique_ptr owned by the RooAddPdf itself. Needs to be backported to ROOT 6.26.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10550:390,avoid,avoids,390,https://root.cern,https://github.com/root-project/root/pull/10550,1,['avoid'],['avoids']
Safety,"The `RooAbsReal::getValues` has already been established as the entry; point for evaluating RooFit objects with the batch mode and it should; not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar; mode all the time, because the `evaluateSpan` funtions it used got; replaced by `computeBatch`. In this commit, the desired behavior of; using the BatchMode is restored by using the RooFitDriver. To that end, a; new constructor has been added to the RooFitDriver that takes a; `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because; it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9986:859,avoid,avoid,859,https://root.cern,https://github.com/root-project/root/pull/9986,1,['avoid'],['avoid']
Safety,The `RooCFunction*Binding` classes and the associated `RooFit::bindFunction()` and `RooFit::bindPdf()` functions are deprecated and will be removed in ROOT 6.32. Their functionality is redundant with the `RooFormulaVar` and `RooGenericPdf` that should be used instead. This is another deprecation done in the spirit of avoiding duplicate interfaces and user confusion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11983:185,redund,redundant,185,https://root.cern,https://github.com/root-project/root/pull/11983,2,"['avoid', 'redund']","['avoiding', 'redundant']"
Safety,"The `RooFitResult::isIdentical` method so far only compared parameter; values and covariance matrix values. Even though comparing the final; parameter errors would be redundant with the covariance matrix checks,; it's still important to check parameter errors for two reasons:. 1. Initial parameter errors need to be compared, because the the; initial error determins the initial step size which influences the; minimization path. If initial errors are different, the final; parameter values are almost never identical. Catching differences in initial parameter errors informs the user; that differences in fit result are because of the starting; conditions. 2. In the case of `RooFitResult::isIdenticalNoCov`, we need to check; the error of final parameters because there is no comparison of; covariance matrix values. The signature of the public function `isIdenticalNoCov` is extended by a; tolerance parameter for the error comparison. This is expected to not; break user code, because the function was only introduced in 6.26 and is; so far only used in a single unit test (`testSumW2Error`). The `testRooAbsPdf` unit test didn't reset the initial parameter errors; correctly, which is now fixed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10465:167,redund,redundant,167,https://root.cern,https://github.com/root-project/root/pull/10465,1,['redund'],['redundant']
Safety,"The `RooMomentMorphND` and `RooMomentMorphFuncND` classes duplicated some copy-pasted code from stackoverflow. This is not factored out into a new private header file to avoid code duplication. Also, a semicolon is added after `TRACE_CREATE` and `TRACE_DESTROY` in order to not confuse clang-format.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11962:170,avoid,avoid,170,https://root.cern,https://github.com/root-project/root/pull/11962,1,['avoid'],['avoid']
Safety,"The `RooVectorDataStore` had two different buffers to store the row data in: the so-called ""attached buffers"" and the ""native buffers"". The problem is that when external buffers are attached, the call to `RooVectorDataStore::get()` is not loading the native buffers anymore, which is breaking some code that assumes this, like `RooVectorDataStore::loadValues`, which is used in `RooDataSet::reduce`. This breaks the reduction of datasets with externally attached buffers, which breaks the copy constructor of the `RooNLLVar`. This commit suggests to always load both the native and attached buffers if `RooVectorDataStore::get()` is called. This has almost no performance overhead and is much safeter. Since this change fixes the copy constructor of the `RooNLLVar`, which is used when plotting the NLL, this commit fixes this JIRA ticket: https://sft.its.cern.ch/jira/browse/ROOT-9752. A unit test that covers the problem reported in the JIRA ticket is also added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11477:693,safe,safeter,693,https://root.cern,https://github.com/root-project/root/pull/11477,1,['safe'],['safeter']
Safety,"The `bool` columns in RDF are special, because the Take action returns a `std::vector<bool>`, which has an implementation-depended memory layout for space optimization. Therefore, I suggest supporting taking `bool` columns as `unsigned char` with `Take()`, such that in `RDataFrameAsNumpy` the values can be directly taken as bytes. This avoids superfluous copying in the code, and keeps the special logic in the pythonization side minimal. Closes #8639.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15180:338,avoid,avoids,338,https://root.cern,https://github.com/root-project/root/pull/15180,1,['avoid'],['avoids']
Safety,"The `gMainDict` should be borrowed, i.e. we are not calling Py_INCREF(gMainDict). Like this, we avoid unexpectedly affecting how long `__main__` is kept alive. The `gMainDict` is only used in `Exec()`, `ExecScript()`, and `Eval()`, which should not be called after `__main__` is garbage collected anyway. Closes #16402. Needs to be backported to 6.32. Equivalent CPyCppyy PR:; https://github.com/wlav/CPyCppyy/pull/37",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16403:96,avoid,avoid,96,https://root.cern,https://github.com/root-project/root/pull/16403,1,['avoid'],['avoid']
Safety,"The `if (_normSet)` did not behave as intended, because the `RooAbsPdf::_normSet` member is a TString, and not a `char*`. And TStrings always convert to `true` booleans, even if they are empty. This commit fixes the empty normalization range check by using `TString::IsNull()` instead. This fix helps to benchmark RooAddPdfs with the new `codegen` backend, because it avoids the creation of unnecessary normalization integrals that codegen can't handle. This is a follow-up to 74e3099.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13518:368,avoid,avoids,368,https://root.cern,https://github.com/root-project/root/pull/13518,1,['avoid'],['avoids']
Safety,"The `if(roofit_multiprocess AND NOT minuit2)` check should be done after `ROOT_APPLY_OPTIONS()`, because otherwise the variables will not be defined as the defaults if the user didn't define them explicitly. This avoids warnings when not defining the `minuit2` option when setting `roofit_multiprocess=ON`. Follows up directly on 3acc0e601bd. To be backported to the 6.30 branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13879:213,avoid,avoids,213,https://root.cern,https://github.com/root-project/root/pull/13879,1,['avoid'],['avoids']
Safety,"The `max template recursion depth reached` error is due to the; implementation of std::tuple's move constructor in some STL; implementations (notably, gcc). The logic has been modified to avoid copying large tuples:; - the number of slots is now fixed for each node at construction time; - all the logic that was implemented by the `CreateSlot` methods has; been moved to the corresponding nodes' constructors.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/740:188,avoid,avoid,188,https://root.cern,https://github.com/root-project/root/pull/740,1,['avoid'],['avoid']
Safety,"The `max template recursion depth reached` error is due to the; implementation of std::tuple's move constructor in some STL; implementations (notably, gcc). The logic has been modified to avoid copying large tuples:; - the number of slots is now fixed for each node at construction time; - all the logic that was implemented by the `CreateSlot` methods has; been moved to the corresponding nodes' constructors. Cherry-pick conflicts:; 	tree/treeplayer/inc/ROOT/TDFNodes.hxx; 	tree/treeplayer/src/TDFNodes.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/743:188,avoid,avoid,188,https://root.cern,https://github.com/root-project/root/pull/743,1,['avoid'],['avoid']
Safety,"The `n_in_range` reference value in the unit test; `roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range` apparently doesn't get computed right on some 32 platforms. I can't reproduce the problem, but I'm sure it will be fixed by avoiding the use of the operators `&` and `|` with numpy arrays. Just doing a manual loop in Python should be more platform independent. Closes #12162.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13612:241,avoid,avoiding,241,https://root.cern,https://github.com/root-project/root/pull/13612,1,['avoid'],['avoiding']
Safety,"The `target` attribute in a rule specification is mandatory, but the list can be empty, in which case `TSchemaRule::GetTarget()` returns `nullptr`. In particular, @Nowakus reported the following error for read rules associated with class `ElementLinkBase`, which happens to have an empty `target` list; ```; Fatal: rule->GetTarget() != nullptr violated at line 1006 of; `/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/tree/ntuple/v7/src/RField.cxx'; aborting; ```; Therefore, in principle we should also allow these rules for now. ## Checklist:; - [X] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12049:488,abort,aborting,488,https://root.cern,https://github.com/root-project/root/pull/12049,1,['abort'],['aborting']
Safety,"The analytical integral code of the `RooTruthModel` was making the wrong assumption that if one uses the single-sided bases, the minimum x value is always at zero (or the maximum value at zero, for the case of the flipped bases). This resulted in wrong integral values when integrating over a subrange, as reported here on the forum:. https://root-forum.cern.ch/t/possible-bug-in-integration-of-roobdecay-and-rooabsanaconvpdf/56968. This commit rewrites the RooTruthModel analytical integral code to also consider these cases. To avoid that with the additional code branches the code becomes too verbose, the code was refactored to use a helper function for evaluating indefinite integrals of symmetric or asymmetric basis functions. The refactored code is tested by the integration tests in `stressRooFit`, and the problem that was reported on the forum is covered by a new unit test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14021:530,avoid,avoid,530,https://root.cern,https://github.com/root-project/root/pull/14021,1,['avoid'],['avoid']
Safety,"The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework.; Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:; ```; OVERVIEW: rootcling; USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>; ; OPTIONS:; ; Generic Options:; ; -help - Display available options (-help-hidden for more); -help-list - Display list of available options (-help-list-hidden for more); -version - Display the version of this program; ; rootcling common options:; ; -D=<string> - Specify defined macros.; -I=<string> - Specify an include path.; -W=<string> - Specify compiler diagnostics options.; -c - Deprecated, legacy flag which is ignored.; -cxxmodule - Generate a C++ module.; -excludePath=<string> - Do not store the <path> in the dictionary.; -f - Overwrite <file>s.; -failOnWarnings - Fail if there are warnings.; -inlineInputHeader - Does not generate #include <header> but expands the header content.; -interpreteronly - Generate minimal dictionary for interactivity (without IO information).; -m=<string> - The list of dependent modules of the dictionary.; -multiDict - If this library has multiple separate LinkDef files.; -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH.; -p - Deprecated, legacy flag which is ignored.; -rmf=<string> - Generate a rootmap file with the specified name.; -rml=<string> - Generate rootmap file.; -s=<string> - The path to the library of the built dictionary.; -selSyntaxOnly - Check the selection syntax only.; -split - Sp",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4171:408,safe,safety,408,https://root.cern,https://github.com/root-project/root/pull/4171,1,['safe'],['safety']
Safety,"The automatic conversion of ordinary obejcts to smart pointers is disabled for PyROOT because it can cause trouble with overload resolution. If a function has overloads for both ordinary objects and smart pointers, then the implicit conversion to smart pointers can result in the smart pointer overload being hit, even though there would be an overload for the regular object. Since PyROOT didn't have this feature before 6.32 anyway, disabling it was the safest option. Closes #15117. A regression test with the reproducer from the GitHub issue was added to roottest:; https://github.com/root-project/roottest/pull/1102",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15125:456,safe,safest,456,https://root.cern,https://github.com/root-project/root/pull/15125,1,['safe'],['safest']
Safety,"The automatic conversion of ordinary obejcts to smart pointers is disabled for PyROOT because it can cause trouble with overload resolution. If a function has overloads for both ordinary objects and smart pointers, then the implicit conversion to smart pointers can result in the smart pointer overload being hit, even though there would be an overload for the regular object. Since PyROOT didn't have this feature before 6.32 anyway, disabling it was the safest option. Closes #15117. Backport of https://github.com/root-project/root/pull/15125.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15311:456,safe,safest,456,https://root.cern,https://github.com/root-project/root/pull/15311,1,['safe'],['safest']
Safety,"The changes in this PR address this forum post...; https://root-forum.cern.ch/t/chi2fito-with-yvar-does-not-support-range-option/56369; ...and follows up on the discussion here:; https://github.com/root-project/root/pull/13638. Short summaries of the commits, more detail in the commit descriptions:; 1. Following up on #1455, the multi-range chi2 creation logic is removed from `createChi2()`, because for a few months already this can be dealt with in the test statistics base classes; 2. Avoid separate RooXYChi2Var constructors for pdfs and functions: instead of having separate constructors for RooAbsPdf and RooAbsReal, it's better and less code duplication to have one RooAbsReal constructor and dynamically check if it got a RooAbsPdf; 3. Support `NumCPU()` and `Range()` in createChi2() for RooDataSets; 4. Bugfix in `RooDataSet::reduce()` by also copying the stored errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13651:491,Avoid,Avoid,491,https://root.cern,https://github.com/root-project/root/pull/13651,1,['Avoid'],['Avoid']
Safety,"The commit 4c9c5d6b49 fixed the memory leaking of the `RooMomentMorph(Func)ND::Grid2::_grid` member by deleting it in the constructor, but it didn't consider that the copy constructor didn't make a clone of the `_grid`, ending up with double ownership. Now, the copy constructor is also cloning the binnings, just like the regular constructor, and the double ownership is avoided. Closes #12155.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12160:372,avoid,avoided,372,https://root.cern,https://github.com/root-project/root/pull/12160,1,['avoid'],['avoided']
Safety,The commit implements a few new unit tests and also fixes one bug related to the normalization of a RooAddPdf when the custom normalization set of its components is reset. There is also some code improvement by removing a redundant data member of the `RooAddPdf` and `RooAddModel` classes. More details in the commit descriptions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11485:222,redund,redundant,222,https://root.cern,https://github.com/root-project/root/pull/11485,1,['redund'],['redundant']
Safety,"The current API forces the user to copy the entire fColumnRanges map and do a map lookup if they want to iterate the column ranges. With this change, one can simply access the underlying map directly, avoiding extra work in most cases. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16022:201,avoid,avoiding,201,https://root.cern,https://github.com/root-project/root/pull/16022,1,['avoid'],['avoiding']
Safety,"The current code goes through different codepaths depending on the platform. One of the codepaths relies on a non-standard extension (variable-length arrays) and the other manually allocates and frees a char array.; Using a std::string, while losing a bit of performance on Linux/Mac, simplifies and unifies the codepaths and avoids using non-standard C++ (which in turns enable building with -Werror).; The perf hit is most likely negligible, especially given the use of dynamic_cast in the same block.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16476:326,avoid,avoids,326,https://root.cern,https://github.com/root-project/root/pull/16476,1,['avoid'],['avoids']
Safety,"The custom memory manager is only needed to avoid freeing the memory segments; the default `InProcessMemoryManager` (which is mostly copied) already does slab allocation to keep all segments together which is; needed for exception handling support. A limitation of this rudimentary support is that `CLING_DEBUG` and `CLING_PROFILE` do not work, they need to be registered as plugins.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11997:44,avoid,avoid,44,https://root.cern,https://github.com/root-project/root/pull/11997,1,['avoid'],['avoid']
Safety,The difference is only that the return type is casted to the actual; `RooArgSet` type. We avoid a few static casts all over the place like; this. A second commit in this PR applies some general improvements in memory management.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16100:90,avoid,avoid,90,https://root.cern,https://github.com/root-project/root/pull/16100,1,['avoid'],['avoid']
Safety,"The different overloads of `RooAbsRealLValue::inRange()` implemented; different tolerances when checking if a value `x` falls inside a; specific range. Some overloads checked if the interval; `[x - 1e-6, x + 1e6]` is overlapping with the range, an other overload; checked if the interval `[x - 1e-8*x, x + 1e8*x]` is overlapping. It's better is this is done consistently and predictably so this commit; suggests to leave out these epsilon margins that were never documented.; For backwards compatibility, one can set a custom relative or absolute; epsilon via the `RooNumber` interface. Also, the checks if the range limits are `RooNumber::isInfinite()` were; removed. They were mathematically redundant, since in RooFit, +/-; infinity is simply defined as +/-1e30. This PR fixes some corner cases in which you get paradox results from rage checks, like in this example:; ```C++; RooRealVar x{""x"", ""x"", 1e-6, 2e-6};; RooRealVar y{""y"", ""y"", 1e30, 1e30};. std::cout << x.inRange(0.0, nullptr) << std::endl;; std::cout << y.inRange(0.0, nullptr) << std::endl;; // both checks will return true without this PR!; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11999:375,predict,predictably,375,https://root.cern,https://github.com/root-project/root/pull/11999,2,"['predict', 'redund']","['predictably', 'redundant']"
Safety,"The example for range-based iteration in `TList.cxx` uses a pattern that; can yield compiler warnings for some GCC versions:. ```; warning: loop variable 'obj' is always a copy because the range of type 'TList' does not return a reference [-Wrange-loop-analysis]; ```. To avoid spreading this pattern, this commit suggests to change the; example to explicitly use the `TObject *` type, which also makes the; example clearer. One of the occurrences of this pattern in RooFit is also changed to `TObject *` to avoid a warning in the Ubuntu 18 nightlies:; https://lcgapp-services.cern.ch/root-jenkins/job/root-incremental-master/LABEL=ROOT-ubuntu1804-clangHEAD,SPEC=noimt/11389/parsed_console/log_content.html#WARNING1. A memory leak in the `HeatmapAnalyzer.cxx` is also fixed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12442:272,avoid,avoid,272,https://root.cern,https://github.com/root-project/root/pull/12442,2,['avoid'],['avoid']
Safety,"The function `RooAbsPdf::expectedEvents(const RooArgSet &)` doesn't have; to be reimplemented in the RooAbsPdf child classes, because it should; always redirect to `RooAbsPdf::expectedEvents(const RooArgSet *)`. In this way, we are also avoiding a virtual function call. The second PR is this commit does some modernization of `RooAddPdf::expectedEvents`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8151:237,avoid,avoiding,237,https://root.cern,https://github.com/root-project/root/pull/8151,1,['avoid'],['avoiding']
Safety,The gtest can safely go on in case this test case fails.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2230:14,safe,safely,14,https://root.cern,https://github.com/root-project/root/pull/2230,1,['safe'],['safely']
Safety,"The idea is to catch branch names, which will lead to problems when using the tree with `Draw` or `MakeClass`.; This can either be the member variables (branch names and `b_`branch names) which have to keep the generated code compilable (and ensure it does what it is expected to do). And the variable names should not lead to confusion with formula evaluation in Draw (e.g. branch names which are pure numbers). The tests suggested here are:; - test if branch name is a valid c++ variable name (w/o testing keywords).; - test if branch name begins with ""b_"" (potential problem with MakeClass). on top of that, I also have a [black list](https://github.com/pseyfert/tmva-branch-adder/blob/master/src/blacklist.cpp) of unfortunate branch names: methods of TTrees, which would clash in MakeClass, c++ keywords, variable types, and things TTree::Draw can parse (though I don't see how `TTree::Draw(""cos(x)"")` would clash with `TTree::Draw(""cos"")` if there is a variable named `cos`. Because the function `cos` wouldn't work without argument, and the variable `cos` wouldn't work with argument). I only warn here and don't abort the branch initialisation, not to break third party code (variables with `.` are probably common [e.g. dynamically generated from float](http://lhcb-release-area.web.cern.ch/LHCb-release-area/DOC/davinci/latest_doxygen/d9/d80/_tuple_tool_cone_isolation_8cpp_source.html#l00204) ). Feedback request:; I'm unsure if putting the blacklist into TBranch.cxx is really the best solution to apply here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/185:1119,abort,abort,1119,https://root.cern,https://github.com/root-project/root/pull/185,1,['abort'],['abort']
Safety,"The idea of the RooGenProdProj is that we divide two integral objects; each created with this makeIntgral() function to get the normalized; integral of a product. Therefore, we don't need to normalize the; numerater and denominator integrals themselves. Doing the normalization; would be expensive and it would cancel out anyway. However, if we don't; specify an explicit normalization integral in createIntegral(), the; last-used normalization set might be used to normalize the pdf,; resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed; to an empty set in this case. Note that in RooFit, a nullptr; normalization set and an empty normalization set is not equivalent. The; former implies taking the last-used normalization set, and the latter; means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit; test is implemented to make sure no new numeric integrals pop up in the; reproducer code to that issue. Unfortunately, this change means that there will be again warnings about; missing `RooAddPdf` normalization sets, but this is not a regression; because these warnings only got fixed in the 6.28 development cycle in; https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12010:499,redund,redundant,499,https://root.cern,https://github.com/root-project/root/pull/12010,1,['redund'],['redundant']
Safety,"The implementation of `TPython::Eval()` is fragile, and the funcitonality it provides is redundant. One can always communicate between Python and C++ using variables known to the ROOT interpreter. To make the output-variable-pattern easy to use in `TPython::Exec()`, a new output parameter of type `std::any` is introduced. Closes #12182.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16175:89,redund,redundant,89,https://root.cern,https://github.com/root-project/root/pull/16175,1,['redund'],['redundant']
Safety,The intent of this code seemed to be avoiding a CINT issue. Now cling can handle such constructs. This fixes an issue with runtime_cxxmodules on OSX sdk where even when NDEBUG is defined the assert still checks the identifier.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5336:37,avoid,avoiding,37,https://root.cern,https://github.com/root-project/root/pull/5336,1,['avoid'],['avoiding']
Safety,"The intent was to prevent the creation of sub branch with 2 consecutives dots; and to avoid a dot between the branch name of the collection and the underscore; for name of the index leaf. The major problem of the first try is that the name of the top level branch; was changed from ""t."" to ""t"" making existing code search for the branch by; fullname failing. Fix #7281. This effectively ammends/corrects d225f942b59b5b022cf635a16e90f84cad59819d. Before v6.23; ```; ******************************************************************************; *Tree :tree : treelibrated tree *; *Entries : 10000 : Total = 485042 bytes File Size = 177202 *; * : : Tree compression factor = 2.74 *; ******************************************************************************; *Br 0 :t. : Int_t t._ *; *Entries : 10000 : Total Size= 83464 bytes File Size = 12844 *; *Baskets : 4 : Basket Size= 32000 bytes Compression= 6.25 *; *............................................................................*; *Br 1 :t..fUniqueID : UInt_t fUniqueID[t._] *; *Entries : 10000 : Total Size= 80935 bytes File Size = 12857 *; *Baskets : 4 : Basket Size= 32000 bytes Compression= 6.25 *; *............................................................................*; *Br 2 :t..fBits : UInt_t fBits[t._] *; *Entries : 10000 : Total Size= 80903 bytes File Size = 12879 *; *Baskets : 4 : Basket Size= 32000 bytes Compression= 6.24 *; *............................................................................*; *Br 3 :t..e : Double_t e[t._] *; *Entries : 10000 : Total Size= 121029 bytes File Size = 65937 *; *Baskets : 6 : Basket Size= 32000 bytes Compression= 1.83 *; *............................................................................*; *Br 4 :t..t : Double_t t[t._] *; *Entries : 10000 : Total Size= 121029 bytes File Size = 71633 *; *Baskets : 6 : Basket Size= 32000 bytes Compression= 1.68 *; *............................................................................*; ```; After the first try:; ```; ***",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7843:86,avoid,avoid,86,https://root.cern,https://github.com/root-project/root/pull/7843,1,['avoid'],['avoid']
Safety,"The last commit that touched `roofit/histfactory/test/CMakeLists.txt` was accidentally removing the dependency on RooFitCommon, which needs to be there to avoid linker errors on Windows. Fixes these Windows build errors in the nightlies:; https://lcgapp-services.cern.ch/root-jenkins/job/root-incremental-master/LABEL=windows10,SPEC=default/10959/parsed_console/log_content.html#ERROR1",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11394:155,avoid,avoid,155,https://root.cern,https://github.com/root-project/root/pull/11394,1,['avoid'],['avoid']
Safety,The latest version of Apache Arrow requires C++17. This commit fixes the detection of Arrow and disable the arrow option if `CMAKE_CXX_STANDARD` is less than 17,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11681:73,detect,detection,73,https://root.cern,https://github.com/root-project/root/pull/11681,2,['detect'],['detection']
Safety,"The list of cleanups should be thread-safe now (and if it's not, we want to know!). I executed the test and the tutorial in a loop for a while (on a machine with 8 logical cores) and could not see any crash.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6885:38,safe,safe,38,https://root.cern,https://github.com/root-project/root/pull/6885,1,['safe'],['safe']
Safety,"The logic from RooAbsArg is copied into RooAbsData. This allows to use the hash-map functionality of RooLinkedList; for RooAbsData objects, as the namePtr mechanism allows to track; renaming and therefore avoids false negatives that result in; linear scans of the collection. In turn, this improves significantly the run-time of large workspace; imports (x2 to x4), which were dominated by embeddedData() calls.; This patch is based on the JSON tool use-case, but presumably will; significantly also improve other heavy uses of workspace import, such; as Higgs combination workspaces manipulation workflows. The cost of one additional pointer per RooAbsData object seems a low; price to pay.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9684:205,avoid,avoids,205,https://root.cern,https://github.com/root-project/root/pull/9684,1,['avoid'],['avoids']
Safety,"The longtime-deprecated `RooStats::HistFactory::EstimateSummary` class; is removed, including the functions that use it. The information that it; was meant to store is managed by the; `RooStats::HistFactory::Measurement` object since many years. As printed out by the HistFactory in a warning message for a long time; already, setting the `Const` attribute to the `<NormFactor>` tag is; deprecated and it will be ignored. Instead, add; `<ParamSetting Const=""True""> myparam </ParamSetting>`; to your top-level XML's `<Measurement>` entry.; ; This deprecation implied that the constant parameter flag in the; `RooStats:HistFactory::NormFactor` class had no effect as well. To avoid; ambiguity in the future, the possibility to set and retrieve this flag with; `NormFactor::SetConst()` and `NormFactor::GetConst()` was removed, and the; aforementioned deprecated warning is not printed anymore. Closes #8059. FYI @gartrog and @cburgard, if as ATLAS Higgs factory power users you have; something against this change please let me know!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10766:674,avoid,avoid,674,https://root.cern,https://github.com/root-project/root/pull/10766,1,['avoid'],['avoid']
Safety,"The macro should be already set via `${VecCore_DEFINITIONS}`, so setting it unconditionally is redundant and leads to many warnings. However, the build system is not quite ready for setting this only via; `${VecCore_DEFINITIONS}`, so we need to conditionally set it if dependencies are satisfied and it is not set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/677:95,redund,redundant,95,https://root.cern,https://github.com/root-project/root/pull/677,1,['redund'],['redundant']
Safety,"The model keeps track of field names to avoid creating the same top-level field multiple times. Fix this mechanism under exceptions, so that the used field name is not registered as taken.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14911:40,avoid,avoid,40,https://root.cern,https://github.com/root-project/root/pull/14911,1,['avoid'],['avoid']
Safety,"The new BatchMode was so far very hacky in the way it dealt with constraint terms, there were two places where it tried to consider them but they both failed in different scenarios:. * hack in `RooProdPdf::computeBatch()`, where PDFs with a span of size one in the datamap were ignored (failed if there was only one bin in the dataset because all PDFs were ignored then); * hack in `NormalizationHelpers`, where constrained RooProdPdfs were assumed to have only one factor that is a constraint. This was only the case in HistFactory and failed in other cases, like in `stressRooStats` and the `ATALS` Higgs combination fit. The new implementation in this PR follows a safer approach: when the constraints are obtained from the RooProdPdf via `getConstraints`, a new option is added to remove the obtained constraints from the RooProdPdf. This way, no other code is required downstream to deal with constraints. This means, to avoid mutating the computation graph, the constraint sum also needs to be extracted **after** the PDF is cloned. All changes in this PR follow from that line of thought and are explained more in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11606:668,safe,safer,668,https://root.cern,https://github.com/root-project/root/pull/11606,2,"['avoid', 'safe']","['avoid', 'safer']"
Safety,"The old PyROOT (pre 2019) had a slightly different `atexit` handler than the new one. The hard shutdown mode is different: `ClearProxiedObjects()` is called before the final `gROOT->EndOfProcessCleanups()`. I had the impresstion that this is redundant, and indeed the old PyROOT didn't do it. This commit suggests to only call `ClearProxiedObjects()` in soft shutdown mode, in an attempt to avoid the frequent crashes seen at the end of PyROOT tutorials, especially on Ubuntu 24.10. See also the original PRs where this functionality was introduced:. * https://github.com/root-project/root/pull/4687; * https://github.com/root-project/root/pull/4753",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16671:242,redund,redundant,242,https://root.cern,https://github.com/root-project/root/pull/16671,2,"['avoid', 'redund']","['avoid', 'redundant']"
Safety,"The old test statistic classes also supported enabling the offset; feature after their construction via the `RooAbsReal::enableOffsetting`; hook. This function is now also correctly overloaded in the; `RooNLLVarNew` for the BatchMode. Furthermore, the implementation of `RooAddition::enableOffsetting` is; now moved to the base class `RooAbsReal`. This implementation was only; recursively calling `enableOffsetting` for the servers, which did the; job for the old test statistics, which were only combined with; `RooAdditions`. The new BatchMode also adds the NLLs with RooAdditions,; but on top of them sits another wrapper class, the; `RooFitDriverWrapper`. It should also forward the `enableOffsetting`; calls correctly. The most general solution to this problem is probably; to forward the `enableOffsetting` call for all `RooAbsReal`-derived; classed, up to the point where the recursion ends either at an old or a; new test statistic object. This PR also includes two minor commits. One for avoiding some warnings in tests, and another one that cleans unused includes of `RooNLLVar.h`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11668:998,avoid,avoiding,998,https://root.cern,https://github.com/root-project/root/pull/11668,1,['avoid'],['avoiding']
Safety,"The options `minuit2_omp` and `minuit2_mpi` are dangerous because it means you can only minimize thread-safe functions with Minuit2. If you want Minuit2 with OpenMP or MPI support, it is better to build Minuit2 standalone. Related to #12940.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12970:104,safe,safe,104,https://root.cern,https://github.com/root-project/root/pull/12970,1,['safe'],['safe']
Safety,"The original `HistoToWorkspaceFactory` produced models that consisted of; a Poisson term for each bin. In this ""number counting form"" the; dataset has one row and the collumns corresponded to the number of; events for each bin. This led to severe performance problems in; statistical tools that generated pseudo-experiments and evaluated; likelihood ratio test statistics. Nowadays, everyone uses the faster `HistoToWorkspaceFactoryFast`; implementation that produces a model in the ""standard form"" where the; dataset has one row for each event, and the column corresponds to the; value of the observable in the histogram. Therefore, the original `HistoToWorkspaceFactory` is now removed to; avoid confusion and maintainance burden.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10220:692,avoid,avoid,692,https://root.cern,https://github.com/root-project/root/pull/10220,1,['avoid'],['avoid']
Safety,"The patch which I suggested on https://sft.its.cern.ch/jira/browse/ROOT-8056.; If the user uses GREP_OPTIONS which add characters to the output of grep (colors, but also filenames or line numbers), root cannot be started anymore. Ideally users would prefer an alias for `grep` over `GREP_OPTIONS` but the crash can also be avoided on the root side.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/144:323,avoid,avoided,323,https://root.cern,https://github.com/root-project/root/pull/144,1,['avoid'],['avoided']
Safety,"The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation; detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to; wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also; changed such that it takes ownership of the integrator, avoiding the; need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13350:634,avoid,avoiding,634,https://root.cern,https://github.com/root-project/root/pull/13350,1,['avoid'],['avoiding']
Safety,"The preprocessor defines enabled by the `march=native` flag are made part of the string of options to be hashed to create the artifact tarball names, therewith avoiding incompatible binaries. Moreover, the special builds preserve their overrides also for nightly builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15839:160,avoid,avoiding,160,https://root.cern,https://github.com/root-project/root/pull/15839,1,['avoid'],['avoiding']
Safety,"The reason for this split is that Development is not required, hence we; can't rely on it being found to set variables which are usually set even; if only Interpreter (and NOT Development) is found. The if(PythonX_Development_FOUND) condition is kept for what concern the; variables set and used only for the secondary Python version used to; biuld PyROOT, since Development is required for PyROOT. In the info messages related to PyROOT, the condition to be printed now; requires both PythonX_Interpreter_FOUND and PythonX_Development_FOUND,; in order to avoid them to be printed in case Development is found but not Interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5600:556,avoid,avoid,556,https://root.cern,https://github.com/root-project/root/pull/5600,1,['avoid'],['avoid']
Safety,"The rf503_wspaceread tutorial mus be run after the rf502_wspacewrite; tutorial in the unit tests. This dependency was already defined for the; C++ tutorial tests. The lines added to `tutorials/CMakeLists.txt` in; this commit make the same definitions for the Python tutorials, and also; indicate that the Python tests rf502 and rf503 should be run after the; C++ tests to avoid a race condition on the output file. Failures caused by the dependencies not handled correctly were observed in the ROOT nightlies, and this commit should avoid them in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8491:372,avoid,avoid,372,https://root.cern,https://github.com/root-project/root/pull/8491,2,['avoid'],['avoid']
Safety,"The roottest-python-cmdLineUtils test sometimes fails with error along the line of:; ```; 16/22 Test #1217: roottest-python-cmdLineUtils-SimpleRootrm1CheckOutput .......***Failed 0.86 sec; -- TEST COMMAND --; cd /home/pcanal/root_working/build/master-debug/roottest/python/cmdLineUtils; /usr/bin/timeout -s USR2 270s /home/pcanal/root_working/build/master-debug/bin/rootls -1 victim1.root; -- BEGIN TEST OUTPUT --; dir; hprof; hprof; hpxpy; hpxpy; tof. -- END TEST OUTPUT --; -- BEGIN OUTDIFF OUTPUT --; --- /home/pcanal/root_working/code/root/roottest/python/cmdLineUtils/SimpleRootrm.ref Thu Dec 3 17:25:54 2020; +++ /home/pcanal/root_working/build/master-debug/roottest/python/cmdLineUtils/SimpleRootrm1CheckOutput.log Fri Jan 15 15:57:03 2021; @@ -1,4 +1,6 @@; dir; hprof; +hprof; +hpxpy; hpxpy; tof. -- END OUTDIFF OUTPUT --. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7054:296,timeout,timeout,296,https://root.cern,https://github.com/root-project/root/issues/7054,1,['timeout'],['timeout']
Safety,"The same is done already in `stressRooStats`. Instead of manually propagating the BatchMode flag to all calls of `createNLL()` and `fitTo()`, it is easier and safer to just override the default, because then it can't be forgotten to add it in one of the calls. In particular, this is done now because it will make it much easier the extend the possible `stressRooFit` options to also use the codegen plus AD backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12719:159,safe,safer,159,https://root.cern,https://github.com/root-project/root/pull/12719,1,['safe'],['safer']
Safety,The static vectors look like a thread safety issue in our tests.; std::array avoid memory allocation on every execution in the same way; the static vector does. NB: `#include <array>` is already present in the codegen from `MethodBase.cxx`. WIP: local building and testing,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3254:38,safe,safety,38,https://root.cern,https://github.com/root-project/root/pull/3254,2,"['avoid', 'safe']","['avoid', 'safety']"
Safety,"The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source; or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as; dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that; the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4355:635,avoid,avoid,635,https://root.cern,https://github.com/root-project/root/pull/4355,1,['avoid'],['avoid']
Safety,"The test should be just removed since the initial reason for having that test is now void. The reason was to have *some way* to check that the packages we thought we had on our CI machines were actually there, since the Jenkins node didn't have any environment management. Now with the github actions CI our environment is more properly managed, at least for Linux. MacOS should get the same treatment at some point, but we can now more safely say ""we know which packages are installed on the CI"" than before.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15286:437,safe,safely,437,https://root.cern,https://github.com/root-project/root/pull/15286,1,['safe'],['safely']
Safety,"The tutorial is actually using the SPlots class wrong. It is calculating; sWeights for the isolation based on the invariant mass and the isolation; itself. That’s wrong. For sPlots, the control variable should not be in; the set of discriminating variables for the likelihood fit! See; https://arxiv.org/pdf/physics/0402083.pdf. That means when using the SPlot class, you should exclude the isolation; variable from the dataset that you pass. Big thanks to Dongliang for reporting this on the ROOT Forum!. https://root-forum.cern.ch/t/strange-results-in-rs301-splot-c. A second commit applies some other improvements to the tutorial:. * Code modernization. * Don't define number of events in toy data redundantly. * Add also plots of isolation models",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11475:701,redund,redundantly,701,https://root.cern,https://github.com/root-project/root/pull/11475,1,['redund'],['redundantly']
Safety,"The two classes inheriting from RooAbsCollection, namely RooArgList and; RooArgSet are by default non-owning collections. This means they should; not be initialized with temporary objects, otherwise they contain; invalid pointers right after construction. To avoid that this can ever happen, the universal reference mechanism is; used to statically check for temporaries, such that your code doesn't; even compile if you try to construct a RooArgList or RooArgSet from; temporaries. This fixes https://github.com/root-project/root/issues/8052. Some C++ code to validate that the `static_assert` works:; ```C++; #include ""RooRealVar.h""; #include ""RooArgList.h""; #include ""RooArgSet.h""; #include ""RooUniform.h"". void test() {. RooRealVar x(""x"", ""x"", 0, 0, 10);; RooRealVar y(""y"", ""y"", 0, 0, 10);. RooUniform u1(""u1"", ""u1"", x);; RooUniform u2(""u2"", ""u2"", y);. // this should work; RooArgSet (u1, u2);; RooArgList(u1, u2);. // all of these combinations should cause compiler errors; ///RooArgSet (RooUniform(""u1"", ""u1"", x), u2 );; //RooArgSet (u1, RooUniform(""u2"", ""u2"", y));; //RooArgSet (RooUniform(""u1"", ""u1"", x), RooUniform(""u2"", ""u2"", y));; //RooArgList(RooUniform(""u1"", ""u1"", x), u2 );; //RooArgList(u1, RooUniform(""u2"", ""u2"", y));; //RooArgList(RooUniform(""u1"", ""u1"", x), RooUniform(""u2"", ""u2"", y));. }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8065:259,avoid,avoid,259,https://root.cern,https://github.com/root-project/root/pull/8065,1,['avoid'],['avoid']
Safety,"The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:; ```; $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'; $: grep openat log.txt | wc -l; $: 16279; ```. After:; ```; $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'; $: grep openat log.txt | wc -l; $: 417 ; ```. FYI @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14276:576,avoid,avoided,576,https://root.cern,https://github.com/root-project/root/pull/14276,1,['avoid'],['avoided']
Safety,"The warnings were raised by TThreadExecutor trying to be smart when chunking, overriding user specified number of chunks to avoid accessing uninitialized positions of the results vector. This is annoying f.e. when Fitting, with several calls to Map() with the same ""conflictive when chunking"" data.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1028:124,avoid,avoid,124,https://root.cern,https://github.com/root-project/root/pull/1028,1,['avoid'],['avoid']
Safety,"There are circular dependencies, which are detected on some build platforms",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3470:43,detect,detected,43,https://root.cern,https://github.com/root-project/root/pull/3470,1,['detect'],['detected']
Safety,"There are several methods in TSystem, which returns `char *` as return value, which has to be deleted. These are:; * `ExapndPathName()`; * `DirName()` (Windows only, actually a bug); * `Which()`; * `ConcatFileName()`. There are many places in ROOT which does not do it correctly, making memory leaks.; I tried to fixed all these bugs - still open PRs are #4853, #4854, #4861, #4862, #4863 . Idea to modernize TSystem interface, providing thread-safe alternatives to all mentioned methods.; Means return TString instead of `char *` or `const char *`.; Keep old methods for a while, but replace in ROOT code to new one.; Later old methods should be declared as deprecated. This PR introduces `TString TSystem::GetDirName(const char *)` as replacement of `const char * TSystem::DirName(const char *)`. Solving Windows issue, which has memory leak. Replaces all places where DirName used by GetDirName - in most cases TString used anyway as storage for return value. . Also using more C++11 in declaration of TSystem classes. If we agreed on this approach, next methods can be refactored in same way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4874:445,safe,safe,445,https://root.cern,https://github.com/root-project/root/pull/4874,1,['safe'],['safe']
Safety,"There is a dependency problem between the RooFit packages that will; start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,; RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from; the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3; needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular; dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from; RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on; RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because; people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for; statisitcal procedures. Specifying model details in the; configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig; and the Asimov dataset generation. By moving the ModelConfig to; RooFit, we are also half way done avoiding the dependency of; HistFactory on RooStats. * The only thing that people use from RooStats is often only the; ModelConfig anyway, because it lets them specify analysis details in; the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12578:487,avoid,avoided,487,https://root.cern,https://github.com/root-project/root/pull/12578,3,['avoid'],"['avoided', 'avoiding']"
Safety,"There is an infinite loop in; `PyROOT::TMemoryRegulator::ClearProxiedObjects()`:. ```C++; while (!fObjectMap.empty()) {; auto elem = fObjectMap.begin();; auto cppobj = elem->first;; auto klassid = elem->second;; auto pyclass = CreateScopeProxy(klassid);; auto pyobj = (CPPInstance *)MemoryRegulator::RetrievePyObject(cppobj, pyclass);. if (pyobj && (pyobj->fFlags & CPPInstance::kIsOwner)) {; ...; } else {; // Non-owning proxy, just unregister to clean tables.; // The proxy deletion by Python will have no effect on C++, so all good; MemoryRegulator::UnregisterPyObject(pyobj, pyclass);; }; }; ```. In the second code branch, the object is not removed from the `fObjMap`,; if `UnregisterPyObject` doesn't call the unregister hook because it; quits early. This can happen if there is not C++ object corresponding to; the regulated python object, causing an infinite loop because; `fObjectMap` never gets empty. Although this seems like an obvious logic error, this was only noticed; after the cppyy upgrade. Probably the code path was not hit before. Addresses; https://github.com/root-project/root/issues/15085#issuecomment-2031363812. This PR also includes a second refactoring commit to reduce the amount of C++ code in PyROOT. **This could maybe also fix the problem with the distributed RDataFrame test timeouts!**",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15106:1309,timeout,timeouts,1309,https://root.cern,https://github.com/root-project/root/pull/15106,1,['timeout'],['timeouts']
Safety,"There used to be just one way of resolving an unknown name (eg. MyClass) -- by using the TCling::AutoLoad interface. However, there are two ingredients to resolve a name -- make the name known to the cling and make its library known to the JIT. Historically, these were one function. Later, we implemented performance optimization on top which divides the two steps in order to avoid excessive library loading. Now we have an auto parse step which is designed to avoid the heavy TCling::Autoload. The particular callback calls tryAutoParseInternal which is controlled by fIsAutoParsingSuspended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5756:378,avoid,avoid,378,https://root.cern,https://github.com/root-project/root/pull/5756,2,['avoid'],['avoid']
Safety,"There was a problem in the `IntegralEvaluator` class in the FitUtils.h; in case veccore and vc is used. To evaluate the integral, some input; doubles `x` need to be transferred each of them into a different; `ROOT::Double_v` to call the underlying function. However, the `ROOT::Double_v` can't load just a single double. Calling; the `Load()` function should be done with a pointer to a `double *`; arrary that is large enough to hold as many doubles as the; `ROOT::Double_v` for SIMD instructions. If you use pointers to single doubles anyway, then you get rightly and; out-of-bounds warning. This commits suggests to get gid of this problem by first transferring; the doubles to the beginning of temporary buffers of the right size, and; then passing these buffers to `vecCore::Load()`. Furthermore, I suggest to merge the two code paths of 1D and ND; functions into one. The difference was that the ND path allocated the; `Double_v`s on the heap in a STD vector, and the 1D path used just an; single `Double_v` on the stack, probably for performance reasons. This commit suggests to use the stack also for the ND code path using; stack arrays, so the 1D path would not be a special case anymore. Also, the `<Math/Util.h>` header can not be compiled with CUDA if `vc` is enabled, so there is a second commit in this PR to avoid that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13772:1324,avoid,avoid,1324,https://root.cern,https://github.com/root-project/root/pull/13772,1,['avoid'],['avoid']
Safety,"There was a segmentation fault in the RooFit batch mode with; multithreading that happened when there were too many threads for the; number of events to be calculated. This caused a `std::size_t` underflow in this line:; ```C++; // roofit/batchcompute/src/RooBatchCompute.cxx; batches.setNEvents(nEvents - idx * batches.getNEvents());; ```; And then the computation tried to access entries that were out of; bounds. This commit adds one more line to reset the number of threads to how; many are needed. Like this we avoid the underflow and also spawing; unnecessary threads. This PR also changes which stressRooFit tests are declared as longtest,; such that the BatchMode tests are also run in the CI and we can avoid; problems like this in the future. Before, the interpreted tests were not declared as longtests, and the; compiled versions were not. This is now flipped, such that the compiled; BatchMode CPU and CUDA tests are also run without `longtest`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10754:516,avoid,avoid,516,https://root.cern,https://github.com/root-project/root/pull/10754,2,['avoid'],['avoid']
Safety,"There was an evil hack in `RooAbsOptTestStatistic`:. ```c++; _dataClone->cacheArgs(this,_cachedNodes,_normSet,!_funcClone->getAttribute(""BinnedLikelihood"")) ;; ```. The final parameter determins if zero weights should be skipped when recalculating the caches. Indeed, for the NLL case, this corresponds to the BinnedLikelihood attrribute being present or not, but it broke the other test statistics for which zero weights should not be skipped at all. This commit suggests a safer way to manage this with a new `RooAbOptTestStatistic::_skipZeroWeights` flag. In particular, this change fixed a bug that got uncovered during a forum discussion:. https://root-forum.cern.ch/t/failing-chi2-fit/56309/3",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13639:475,safe,safer,475,https://root.cern,https://github.com/root-project/root/pull/13639,1,['safe'],['safer']
Safety,These PR fixes several issues in pymva: . - the scikit-learn methods require some update for new version of scikit-learn; - the disabling of eager execution for model prediction causes an issue on MacOS with the multi-processing. The tests are automatically restarted by the multi-processing. This is now avoided by not disabling eager-execution on MacOS platform. ; - Using .keras file is problematic for MacOS arm. (load_models does not work). Go back using .h5 files,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13634:167,predict,prediction,167,https://root.cern,https://github.com/root-project/root/pull/13634,2,"['avoid', 'predict']","['avoided', 'prediction']"
Safety,"These changes achieve two things:. 1. Performance improvement of CUDA backend by factor two by better organizing the copies from host to device; 2. Avoid the hardcoded maximum number of input variables for the compute function, which was a problem for RooAddPdfs with many components. More detail in the commit descriptions. Here are the reproduced CHEP 2023 plots with this PR:. ![benchRooFitBackends](https://github.com/root-project/root/assets/6578603/785828ac-5265-449a-833f-ff9ea018c649). ![benchRooFitUnbinned](https://github.com/root-project/root/assets/6578603/f79a8cc5-bb12-4efb-9917-790a06fe2f63). The older benchmark results can be found in this CHEP presentation:; https://indico.jlab.org/event/459/contributions/11570/attachments/9440/13688/roofit_heterogeneous_chep_2023_with_transitions.pdf",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13556:148,Avoid,Avoid,148,https://root.cern,https://github.com/root-project/root/pull/13556,1,['Avoid'],['Avoid']
Safety,These tutorials don't need to create an output root file of the traiining. This avoids potential problem of running the tutorials in parallel and writing on the same file,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14125:80,avoid,avoids,80,https://root.cern,https://github.com/root-project/root/pull/14125,1,['avoid'],['avoids']
Safety,"These two libraries do not need to be linked, they can be loaded at runtime when necessary. `ROOTVecOps` in particular forces `libPyROOT.so` to link against Vdt when that is enabled, which we would like to avoid. *Note:* `RVec` pythonization has been recently made lazy in 3017be2d80c160d8726c887fad2ede81c295c27a.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3225:206,avoid,avoid,206,https://root.cern,https://github.com/root-project/root/pull/3225,1,['avoid'],['avoid']
Safety,"These useful tests are relatively short (runtime 28 seconds in total) and test lower-level RooFit functionality. Moving them from roottest to roofit has the following benefits:. * Faster RooFit development experience: it's not necessary anymore to also add and compile all of `roottest`, if you want to make sure locally that the vectorized pdf tests always compile and pass. * The vectorized pdf tests will be able to consider the RooFit-internal preprocessor macros at build time, like `ROOFIT_CUDA` and `ROOFIT_LEGACY_EVAL_BACKEND`. Like this we can ensure that the tests will pass no matter how RooFit was configured at compile time. This is for me personally the strongest reason and was the motivator for this commit. * Avoid code repetition in `root` and `roottest`, because now the vectorized PDF tests will be able to re-use private code from RooFit. * If you want to build standalone RooFit with all tests, you won't have to stitch together the two repositories. Sister PR: https://github.com/root-project/roottest/pull/1199",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16661:726,Avoid,Avoid,726,https://root.cern,https://github.com/root-project/root/pull/16661,1,['Avoid'],['Avoid']
Safety,"They currently trigger segfaults in TClass*/cling of the like:. ```; RAssertion failed: ((*I)->isCompleted() && ""Nested transaction not completed!?""), function endTransaction, file IncrementalParser.cpp, line 511.; *** Break *** abort; Error in <TClingCallFunc::make_dtor_wrapper>: Failed to compile; ==== SOURCE BEGIN ====; __attribute__((used)) extern ""C"" void __dtor_32(void* obj, unsigned long nary, int withFree); {; if (withFree) {; if (!nary) {; delete (TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &>*) obj;; }; else {; delete[] (TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &>*) obj;; }; }; else {; typedef TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &> Nm;; if (!nary) {; ((Nm*)obj)->~Nm();; }; else {; do {; (((Nm*)obj)+(--nary))->~Nm();; } while (nary);; }; }; ```. ```; [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3926; [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] RecurseKeepNParams(clang::TemplateArgu",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13290:229,abort,abort,229,https://root.cern,https://github.com/root-project/root/pull/13290,1,['abort'],['abort']
Safety,"This PR adds a dependency of the Keras tutorial on the PyTorch ones, to avoid a conflict in the same used input file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12367:72,avoid,avoid,72,https://root.cern,https://github.com/root-project/root/pull/12367,1,['avoid'],['avoid']
Safety,"This PR adds a new data source for `RDataFrame` that is able to provide data from SQlite `SELECT` queries. It will be useful for cvmfs, where we have file catalogs and monitoring information in sqlite files. For instance, one can do. auto rdf = ROOT::RDF::MakeSqliteDataFrame(""catalog.sqlite"", ""select * from catalog"");; auto h = rdf.Define(""lname"", ""name.length()"").Histo1D(""lname"");. to show the distribution of file name sizes. There are probably more use cases, for instance sqlite export of conditions data. This is work in progress, I'm posting it for early comments and feedback. My open points are. - Unit and integration tests are yet to be done; - The data source work single-threaded only at the moment. I initially thought it might be enough to return only a single row in `GetEntryRanges()` to make it thread-safe but that's apparently not enough. So I'm now thinking to wrap `SetEntry()` and `GetEntryRanges()` in a mutex.; - The code is not reusing `TSQLiteServer`. It felt like it requires stretching the `TSQLServer` interface in perhaps unwanted ways, for saving only a handful of direct sqlite API calls. On the other hand, with (probably quite a bit) more work it might be possible to have a more general data source that works on any SQL result set.; - Determining column types in SQlite is tricky as it is dynamically typed and in principle each row can have different column types. If a table column is queried as is, I can use the default/declared column type. For expressions, I'll use the type of the first row of the result set. Still it can result in a column to be of type `NULL` where subsequent rows actually have meaningful values. My guess is that the current heuristic is practical enough, and of course the user can formulate the `SELECT` query to avoid ambiguity.; - It would not be impossible to add support for remote reading of sqlite files. To do so, one can add a custom implementation of an sqlite virtual file system to have data pouring in directly from HTT",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2322:822,safe,safe,822,https://root.cern,https://github.com/root-project/root/pull/2322,1,['safe'],['safe']
Safety,"This PR adds vectorized implementations of several functions in TMath. It is a work in progress, just to receive early feedback. Currently, the following functions are vectorized and tested:. - TMath::Min; - TMath::Gaus; - TMath::BreitWigner; - TMath::CauchyDist; - TMath::LaplaceDist; - TMath::LaplaceDistI. TODO:; - [ ] Refactor the tests to avoid repeated code.; - [ ] Implement remaining functions.; - [ ] Discuss what to do with functions that, i.e., receive an Int_t and return a Double_t. When vectorizing this kind of patterns, one problem arises: the length of integers and double vectors cannot be assumed to be the same. Any comment is more than welcome.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/655:344,avoid,avoid,344,https://root.cern,https://github.com/root-project/root/pull/655,1,['avoid'],['avoid']
Safety,"This PR applies several improvements to the RooAddPdf class:. 1. Avoid code duplication of `updateCoefficients()` with RooAddModel; 2. Reduce footprint of cache object by using `std::vector` and avoid creating dummy RooRealVars; 3. Avoid redundant computation of raw coefficient values in BatchMode, which fixes performance problems in important fits like the ATLAS Higgs combination. More details can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11161:65,Avoid,Avoid,65,https://root.cern,https://github.com/root-project/root/pull/11161,4,"['Avoid', 'avoid', 'redund']","['Avoid', 'avoid', 'redundant']"
Safety,This PR avoids all calls to `delete` in HistFactory.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11345:8,avoid,avoids,8,https://root.cern,https://github.com/root-project/root/pull/11345,1,['avoid'],['avoids']
Safety,This PR contains some follow-up changes to https://github.com/root-project/root/pull/8700 and https://github.com/root-project/root/pull/9078:. * avoid using `std::shared_ptr` for return values; * change copyright of roofitcore/TestStatistics to `(c) CERN` (requested by @Axel-Naumann in https://github.com/root-project/root/pull/8700#discussion_r738407080); * I used now the same copyright headers from https://github.com/root-project/root/pull/9078 also for the TestStatistics; * fix a build warning in non-debug mode; * don't install zmq.hpp header from builtins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9345:145,avoid,avoid,145,https://root.cern,https://github.com/root-project/root/pull/9345,1,['avoid'],['avoid']
Safety,"This PR extends the type templation that was already present in some classes in the GenVector library to improve support for using vectorised (Vc) types. Specifically it :-. 1. Extends the templation to the Plane3D, Transformation3D and Translation3D types.; 2. Where necessary provides specialised methods for the vector types, when the original code was not generic enough to work in both scalar and vector scenarios. Typically this happens in the case of conditionals, where the differences required (booleans versus masks) are difficult to avoid. This PR is not complete, in that there are still some classes in GenVector that still do not support Vc types, as they are still not templated, such as the Rotation like transformations. It would be nice to add this at some point, but the code associated to these is more extensive (3DConversions.cxx for instance) and that will require some work. My changes pass the built in ROOT tests. In addition I have prepared a simple test case for the Vc types (attached) that I have used to check the scalar and vector types give equivalent results. Tested on OS X with the compilation command. clang++ -O3 -mavx2 -mfma `root-config --cflags` -I/Users/chris/Projects/Vc/install/include main.cpp `root-config --libs` -lGenVector /Users/chris/Projects/Vc/install/lib/libVc.a. [main-cpp.txt](https://github.com/root-project/root/files/820450/main-cpp.txt)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/394:544,avoid,avoid,544,https://root.cern,https://github.com/root-project/root/pull/394,1,['avoid'],['avoid']
Safety,This PR fixes a problem found when building and using the R bindings on MacOS. - First we make sure that ROOT is not using the old RConfig.h but ROOT/RConfig.hxx; This avoids a conflict with the R file Rconfig.h; The first commit remove the usage of the old Rconfig.h when generating the dictionary for libCore . - The second commit fixes a conflicting definition of a macro between system macOS and R headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9836:168,avoid,avoids,168,https://root.cern,https://github.com/root-project/root/pull/9836,1,['avoid'],['avoids']
Safety,This PR fixes backports the fix to keep eager execution on macOS to avoid multi-processing issue that gives timeout of tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13807:68,avoid,avoid,68,https://root.cern,https://github.com/root-project/root/pull/13807,2,"['avoid', 'timeout']","['avoid', 'timeout']"
Safety,This PR fixes compiling the code for parsing Keras model when the C-API of Python 2 is used. In this case some functions are not available in Python.h. Those functions are used to parse the convolutional layers from Keras. ; This PR excludes the parsing of this layer and avoid calling those functions available only in Python3. ; Also the tests using the cone layer parsing are disabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11950:272,avoid,avoid,272,https://root.cern,https://github.com/root-project/root/pull/11950,1,['avoid'],['avoid']
Safety,"This PR fixes tons of memory leaks in RooFitHS3 by never using manual memory allocation in RooFitHS3. To facilitate this, an overload of `RooAbsArg::addOwnedComponents` was added that takes transfers the ownership via smart pointers (otherwise one would have to use raw owning pointers or `std::unique_ptr<T>::release()` which I want to avoid). If the CI passes, I'll squash the second and third commit and add commit messages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9690:337,avoid,avoid,337,https://root.cern,https://github.com/root-project/root/pull/9690,1,['avoid'],['avoid']
Safety,This PR fixes: ; - stressHistoFit - so not use colour (even black) to keep a nice output log; - TMVA Keras tutorial: use different output file to avoid sporadic failures; - mathmore (GSL) : add a check for correct GSL version (2.3) introducing the new function `gsl_linalg_cholesky_decomp1`. Use the older `gsl_linalg_cholesky_decomp` for the old versions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13047:146,avoid,avoid,146,https://root.cern,https://github.com/root-project/root/pull/13047,1,['avoid'],['avoid']
Safety,"This PR includes the commits of; * PR #833 ; * a fix (dependent on #833) for task-unsafety in TDataFrame's TColumnValue; * PR #828 ; * a patch for task-unsafety in TDataFrame's thread-slot distribution by @dpiparo (commit 2787af2). If we want to push these commits little by little, PR #833 and PR #828 should be merged first, then I can open a third PR with the second (and fourth?) fix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/835:82,unsafe,unsafety,82,https://root.cern,https://github.com/root-project/root/pull/835,2,['unsafe'],['unsafety']
Safety,"This PR introduces the logic necessary in TTreeReader to detect when an entry being read is ""incomplete"" for the following situations:; * When switching to a new tree in the chain, if a branch that was expected to be found is not available; * When doing event matching with TTreeIndex, in case one or more of the friend trees did not match the index value for the current entry. It also introduces new functionality in RDataFrame to allow users to act upon the situations described above:; * `DefaultValueFor(colname, defaultval)`: lets the user provide one default value for the current entry of the input column, in case the value is missing.; * `FilterAvailable(colname)`: works in the same way as the traditional `Filter` operation, where the ""expression"" is ""is the value available?"". If so, the entry is kept, if not, it is discarded.; * `FilterMissing(colname)`: works in the same way as the traditional `Filter` operation, where the ""expression"" is ""is the value missing?"". If so, the entry is kept, if not, it is discarded. The tutorials `df036_missingBranches` and `df037_TTreeEventMatching` show example usage of the new functionalities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15641:57,detect,detect,57,https://root.cern,https://github.com/root-project/root/pull/15641,1,['detect'],['detect']
Safety,"This PR is a backport of #9965 (see #9954) for 6.26. Optional, but it would be nice to avoid patching conda-forge root https://github.com/conda-forge/root-feedstock/issues/160.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9999:87,avoid,avoid,87,https://root.cern,https://github.com/root-project/root/pull/9999,1,['avoid'],['avoid']
Safety,"This PR is the second part of a split and clean-up of #8294, as suggested by @guitargeek. In this PR, we introduce ~three~ two packages: ~RooFit::MultiProcess,~ RooFitZMQ and a ZeroMQ builtin to ease dependency management. ~RooFit::MultiProcess is a task-based parallelization framework.~. ~It uses forked processes for parallelization, as opposed to threads. We chose this approach because A) the existing RooRealMPFE parallelization framework already made use of forks as well, so we had something to build on and B) it was at the time deemed infeasible to check the entire RooFit code for thread-safety. Moreover, we use MultiProcess to parallelize gradients -- i.e. the tasks to be executed in parallel are _partial derivatives_ -- and these are sufficiently large tasks that communication in between tasks is not a big concern in the big fits that we aimed to parallelize.~. Edit: We decided to keep this PR for ZeroMQ only, MultiProcess will come in a next PR. The communication between processes is done using ZeroMQ. The ZeroMQ dependency is wrapped in convenience classes contributed by @roelaaij which here are packaged as RooFitZMQ. ~Note: still working on ""cherry picking"" all changes and organizing them into functionally sensible commits. Will un-draft the PR once this is done.~ Ready for review.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8385:599,safe,safety,599,https://root.cern,https://github.com/root-project/root/pull/8385,1,['safe'],['safety']
Safety,"This PR is the third part of a split and clean-up of #8294, as suggested by @guitargeek. In this PR, we introduce the RooFit::MultiProcess package. RooFit::MultiProcess is a task-based parallelization framework that will be used to parallelize gradients in RooFit/Minuit2 fits. It uses forked processes for parallelization, as opposed to threads. We chose this approach because A) the existing RooRealMPFE parallelization framework already made use of forks as well, so we had something to build on and B) it was at the time deemed infeasible to check the entire RooFit code for thread-safety. Moreover, we use MultiProcess to parallelize gradients -- i.e. the tasks to be executed in parallel are partial derivatives -- and these are sufficiently large tasks that communication in between tasks is not a big concern in the big fits that we aimed to parallelize. The communication between processes is done using ZeroMQ, accessed through convenience functions in RooFitZMQ introduced in #8385. Notes:; - This PR branch is forked off of the branch in #8385, so until that is merged first, I may do some rebasing in this branch, so please be aware of that if you want to check this branch out locally.; - test_Job still fails, it has to be updated to the latest communication framework. With that in mind, this PR is ready for review.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8412:586,safe,safety,586,https://root.cern,https://github.com/root-project/root/pull/8412,1,['safe'],['safety']
Safety,"This PR moves the dictionaries for STL containers required for testing to a separate LinkDef. The rationale behind this is that these dictionaries are not directly related to the `CustomStruct` and once #13904 and #14069 are merged even more (unrelated) dictionary entries would be added, so it would be good to avoid clutter and separate these.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14072:312,avoid,avoid,312,https://root.cern,https://github.com/root-project/root/pull/14072,1,['avoid'],['avoid']
Safety,This PR provides some optimisation for Cuda. In particular: . - optimise update weights/gradient of SGD and ADAM/ ; - We avoid now creating temporary matrices in SGD ; - For ADAM it is more efficient defining three new updates functions which will blenched on the GPU. This also avoid creating temporaries . These changes speed-up by almost a factor of 2 the code in GPU for dense layer when using ADAM and restore the previous performances for SGD. - optimise also computation of convolutional weight gradients. ; In this case we can just simply use the ScaleAdd function. A speed up of ~ 20% is obtained . This PR also adds a commit that remove the computation of correlation matrix in case of large number of variables,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2502:121,avoid,avoid,121,https://root.cern,https://github.com/root-project/root/pull/2502,2,['avoid'],['avoid']
Safety,"This PR provides the support to add input features as vector data (arrays). This is useful in case of image data (.e.g for Convolutional networks). ; The PR avoid then the creation of input TTreeFormula objects for each single array element which can be very time consume in case of large input data (e,g, > 1000). ; A new function DataLoader::AddVariableArrays has been added to provide the input array name that corresponds to the TTree branch name. Note that TMVA was providing and it continues to provide support for input array data but assuming that each single array element is a different TMVA event. The array is split and for each TTree entry, n (the size of the array) events are created in TMVA. In this particular case one needs to provides all inputs (input features, labels and weights) as array of the same size. This PR mantains this use case, but adds now the possibility to represent the array elements as different columns in the event vector.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4407:157,avoid,avoid,157,https://root.cern,https://github.com/root-project/root/pull/4407,1,['avoid'],['avoid']
Safety,"This PR refactors (or rather, rewrites) `hadd`'s argument parsing code to achieve the following improvements:; - code is simpler to follow, more consistent among different flags and extracted from main; - adding new flags is easier; - allows the familiar syntax of `-j2` in addition to `-j 2`. As a bonus, and for consistency with `-cachesize=`, all flags can now also be passed as `-j=2` (except for `-f` which has a special logic).; - allows passing flags after the positional arguments; - hadd will abort when encountering invalid flag arguments, instead of just printing a message. In the name of code simplification, this PR doesn't attempt to replicate the same exact error-reporting behavior string-by-string as the current version, but the results should ideally be the same. I ran the roottest suite and all tests pass but we might want to add more tests to be sure. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16090:502,abort,abort,502,https://root.cern,https://github.com/root-project/root/pull/16090,1,['abort'],['abort']
Safety,"This PR shows the ingredients needed to provide a fix (or more like a workaround) to https://github.com/root-project/root/issues/8505. * A new function `TEntryList::AddSubList` which purpose is specifically of adding a sub list to the main TEntryList. With this we can avoid the logic of `TEntryList::Add` that merges multiple TEntryList referring to the same tree into a global list.; * A slight modification in `TChain::SetEntryList` to grab the sub-TEntryList with the same index as the current sub-tree in the chain. Currently, this is done instead with `GetEntryList(treename, filename, opt)` that will always report the same sub-TEntryList referring to the ""first"" file (because all files of the sublists of the global TEntryList have the same name). The changes are not definitive at all. I wanted to ask your opinion if it's a valid way forward. If so, I will polish the code and prepare it for a real PR. With this commit, the following snippet; ```cpp; int main(){; auto start_1{0};; auto start_2{0};; auto end_1{20};; auto end_2{10};. TEntryList elists;; TEntryList elist1{""e"",""e"",""entries"",""file_20entries_1.root""};; TEntryList elist2{""e"",""e"",""entries"",""file_20entries_1.root""};. for(auto entry = start_1; entry < end_1; entry++){; elist1.Enter(entry);; }. for(auto entry = start_2; entry < end_2; entry++){; elist2.Enter(entry);; }. elists.AddSubList(&elist1);; elists.AddSubList(&elist2);. TChain chain{""entries""};; chain.Add(""file_20entries_1.root"");; chain.Add(""file_20entries_1.root"");. chain.SetEntryList(&elists, ""sync"");. ROOT::RDataFrame df{chain};. std::cout << df.Count().GetValue() << ""\n"";; }; ```; Outputs the correct result:; ```; $: ./tentrylist_emptysource_addsublist ; 30; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8660:269,avoid,avoid,269,https://root.cern,https://github.com/root-project/root/pull/8660,1,['avoid'],['avoid']
Safety,"This PR solves ROOT-8873 ""Reinforce the mechanism to detect non existing branches"". All transformations and actions now throw an exception right when called if at least one of the columns they will work on is not present in the data nor is a custom column (created via `Define`). `test_missingBranches` is expected to start failing -- a PR in roottest will update the reference file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/775:53,detect,detect,53,https://root.cern,https://github.com/root-project/root/pull/775,1,['detect'],['detect']
Safety,This PR uses clad to calculate the AD-based derivatives for the C/C++ functions wrapped by the RooFuncWrapper class and introduces the 'getGradient' interface to get these derivatives from the generated gradient function. It also replaces a `std::span` templated type with `std::size` to avoid conflicts with system headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12219:288,avoid,avoid,288,https://root.cern,https://github.com/root-project/root/pull/12219,1,['avoid'],['avoid']
Safety,This Pull request fixes a memory leak reported in https://root-forum.cern.ch/t/gslmultifit-memory-leak-with-root-fitter/49566 when using GSLMultiFit. . In addition for fixing for the leak the handling of the internal transformation function is improved and an extra un-needed clone of the objective function in the Fitter class is avoided.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10439:331,avoid,avoided,331,https://root.cern,https://github.com/root-project/root/pull/10439,1,['avoid'],['avoided']
Safety,This Pull request fixes the correct dependency of some TMVA tutorial and PyMVA tests to avoid that the input data files are written at the same time. The PR contains also a fix for th TMVA_SOFIE_RSofieReader tutorial to handle correctly the model output vector,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12211:88,avoid,avoid,88,https://root.cern,https://github.com/root-project/root/pull/12211,1,['avoid'],['avoid']
Safety,"This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. ; Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. ; The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:; - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling.; - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called.; - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking.; - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10795:852,avoid,avoiding,852,https://root.cern,https://github.com/root-project/root/pull/10795,1,['avoid'],['avoiding']
Safety,This Pull request should fix the tutorial timeout observed in CI,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12038:42,timeout,timeout,42,https://root.cern,https://github.com/root-project/root/pull/12038,1,['timeout'],['timeout']
Safety,"This adds gdb pretty printers for a few objects such as TString and TNamed, as well; as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`; is set to ROOT's lib directory.; The printers should only be installed during debug builds. A couple of things are still unclear:; - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make.; - Is it correct to use `install(FILES ...)` to install?; - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail; o With old gdbs; o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3633:166,safe,safe-path,166,https://root.cern,https://github.com/root-project/root/pull/3633,1,['safe'],['safe-path']
Safety,This allows to avoid awkward errors due to the absence of moves.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2490:15,avoid,avoid,15,https://root.cern,https://github.com/root-project/root/pull/2490,1,['avoid'],['avoid']
Safety,"This almost broke me... I've been trying to find for days why ROOT would not build correctly in one particular (fairly complicated) setup for me. I just couldn't figure out why I wouldn't get the files meant for the `etc/` directory in my installation. Turns out that it was because in this weird setup I put the ROOT source code into a directory inside of another CMake project, into a directory that had `/CMakeFiles/` as part of its path. And would you know, macOS still comes with a case insensitive file system, so this exclusion rule was triggering for the full contents of the `etc/` directory in this setup. After realising this, I modified my project's setup to put the ROOT source code into a safer location. But this update should still help people avoid a similar situation later on... P.S. I checked in a simple standalone example that this formalism should do the right thing. (Took me some tries to find ""just the right"" incantation.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1625:703,safe,safer,703,https://root.cern,https://github.com/root-project/root/pull/1625,2,"['avoid', 'safe']","['avoid', 'safer']"
Safety,This avoid compiler warnings with GCC version 12 and later. See also the reasoning in upstream commit: https://github.com/nigels-com/glew/commit/37e614480216ff1485366d97794cd1354ac07337,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15528:5,avoid,avoid,5,https://root.cern,https://github.com/root-project/root/pull/15528,1,['avoid'],['avoid']
Safety,"This avoid loading the library containing the dictionary and avoids leaving the TClass::GetClass(""HepMC::GenVertex"") meta information in an odd state. This should bring the v6.18 behavior unintentionally broken in the refactoring commit c8cce31. This should fix ROOT-10514 completely.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4837:5,avoid,avoid,5,https://root.cern,https://github.com/root-project/root/pull/4837,2,['avoid'],"['avoid', 'avoids']"
Safety,"This avoids an error in the nightlies:; https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-debian10-i386,SPEC=default,V=master/lastBuild/testReport/projectroot/runtutorials/tutorial_v7_ntuple_ntpl008_import/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13447:5,avoid,avoids,5,https://root.cern,https://github.com/root-project/root/pull/13447,1,['avoid'],['avoids']
Safety,This avoids bloating the history with blank space commits.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3790:5,avoid,avoids,5,https://root.cern,https://github.com/root-project/root/pull/3790,1,['avoid'],['avoids']
Safety,"This avoids compiler warnings on 32bit platforms such as. ```; warning: format ‘%lu’ expects argument of type ‘long unsigned int’, but; argument 2 has type ‘std::vector<std::tuple<int, double, double> >::size_type’; {aka ‘unsigned int’} [-Wformat=]; ```. As seen in PR https://github.com/root-project/root/pull/13243",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13259:5,avoid,avoids,5,https://root.cern,https://github.com/root-project/root/pull/13259,1,['avoid'],['avoids']
Safety,This avoids problems during ctest like:; ```; 512/838 Test #516: tutorial-multicore-mp001_fillHistos .................................***Failed Error regular expression found in output. Regex=[Error in <] 2.61 sec; Processing /builddir/build/BUILD/root-6.14.06/tutorials/multicore/mp001_fillHistos.C...; SysError in <TFile::TFile>: could not delete myFile_3.root (errno: 2) (No such file or directory); Error in <TROOT::WriteTObject>: The current directory (Rint) is not associated with a file. The object (myHisto_3) has not been written.; (int) 0; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3029:5,avoid,avoids,5,https://root.cern,https://github.com/root-project/root/pull/3029,1,['avoid'],['avoids']
Safety,"This avoids that the first time the NLL is computed, a real calculation is performed and not a cached value is used. The cached value could be computed without subtracting the offset and this could be problematic in case the fcn is offsetting. This fixes #7659. Note that the real changes are only at around line 200, the rest are only extra whitespaces removed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7671:5,avoid,avoids,5,https://root.cern,https://github.com/root-project/root/pull/7671,1,['avoid'],['avoids']
Safety,"This avoids the following type of warning (obtained when compiling ROOT with -fsanitize=thread). ```; inlined from ‘virtual std::vector<ROOT::Experimental::RNTupleLocator> ROOT::Experimental::Internal::RPageSinkDaos::CommitSealedPageVImpl(std::__ROOT::span<ROOT::Experimental::Internal::RPageStorage::RSealedPageGroup>)’ at /rootproject/rootsrc/tree/ntuple/v7/src/RPageStorageDaos.cxx:417:28:; /usr/include/c++/13/bits/basic_string.h:1079:16: warning: ‘*(const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)((char*)&locator + offsetof(ROOT::Experimental::RNTupleLocator, ROOT::Experimental::RNTupleLocator::fPosition.std::variant<long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Variant_base<long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Move_assign_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Copy_assign_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Move_ctor_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Copy_ctor_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Variant_storage<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experiment",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15526:5,avoid,avoids,5,https://root.cern,https://github.com/root-project/root/pull/15526,1,['avoid'],['avoids']
Safety,"This avoids the following warning when building `rootbench` (gcc 13.2.1):. ```txt; In file included from /home/rembserj/spaces/master/root/src/build/include/ROOT/RDF/RInterface.hxx:15,; from /home/rembserj/spaces/master/root/src/build/include/ROOT/RDataFrame.hxx:21,; from /home/rembserj/spaces/master/root/src/root/rootbench/root/tree/dataframe/RDataFrameBenchmarks.cxx:1:; /home/rembserj/spaces/master/root/src/build/include/ROOT/RDF/ActionHelpers.hxx: In instantiation of ‘void ROOT::Internal::RDF::SnapshotHelperMT<ColTypes>::UpdateCArraysPtrs(unsigned int, ColTypes& ..., std::index_sequence<S ...>) [with long unsigned int ...S = {}; ColTypes = {}; std::index_sequence<S ...> = std::integer_sequence<long unsigned int>]’:; /home/rembserj/spaces/master/root/src/build/include/ROOT/RDF/ActionHelpers.hxx:1747:27: required from ‘void ROOT::Internal::RDF::SnapshotHelperMT<ColTypes>::Exec(unsigned int, ColTypes& ...) [with ColTypes = {}]’; /home/rembserj/spaces/master/root/src/build/include/ROOT/RDF/RAction.hxx:104:19: required from ‘void ROOT::Internal::RDF::RAction<Helper, PrevNode, ColumnTypes_t>::CallExec(unsigned int, Long64_t, ROOT::TypeTraits::TypeList<ColTypes ...>, std::index_sequence<_Ind ...>) [with ColTypes = {}; long unsigned int ...S = {}; Helper = ROOT::Internal::RDF::SnapshotHelperMT<>; PrevNode = ROOT::Detail::RDF::RLoopManager; ColumnTypes_t = ROOT::TypeTraits::TypeList<>; Long64_t = long long int; std::index_sequence<_Ind ...> = std::integer_sequence<long unsigned int>]’; /home/rembserj/spaces/master/root/src/build/include/ROOT/RDF/RAction.hxx:112:18: required from ‘void ROOT::Internal::RDF::RAction<Helper, PrevNode, ColumnTypes_t>::Run(unsigned int, Long64_t) [with Helper = ROOT::Internal::RDF::SnapshotHelperMT<>; PrevNode = ROOT::Detail::RDF::RLoopManager; ColumnTypes_t = ROOT::TypeTraits::TypeList<>; Long64_t = long long int]’; /home/rembserj/spaces/master/root/src/build/include/ROOT/RDF/RAction.hxx:108:9: required from here; /home/rembserj/spaces/master/r",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14044:5,avoid,avoids,5,https://root.cern,https://github.com/root-project/root/pull/14044,1,['avoid'],['avoids']
Safety,"This avoids the indirect dependence of ROOT on CURL, because the CURL dependence of CFITSIO is optional since version 3.49: https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/docs/changes.txt#L199. Note: I tested the `builtin_cfitsio` locally on Linux, and for macOS and Linux the CI will cover it because these platforms configure with `builtin_cfitsio=ON`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15508:5,avoid,avoids,5,https://root.cern,https://github.com/root-project/root/pull/15508,1,['avoid'],['avoids']
Safety,"This avoids the remaining uses of the global write lock in typical RDataFrame event loops. There are two parts to this. 1) A bug fix in the hashing of streamer info when opening files. (The hash was including the TKey timestamp and therefore ended up being unique even for files with identical streamer info). 2) Since TTreeProcessorMT can carefully manage its TChains and corresponding TFile and TTree objects, global lists/cleanup and thread safety features can be bypassed or disabled. Together these changes are enough to almost completely eliminate the use of the global write lock in typical event loops. The only remaining using is the calls from ```TFile``` to ```TProcessUUID::AddUUID``` and ```TProcessUUID::RemoveUUID``` There are still several remaining places where the global read lock is taken, and these still have some cost in light of the remaining global write lock usage. These changes have the biggest impact when analyzing a large number of files. A test case is below. Produce the test dataset:; ```cpp; #include ""TFile.h""; #include ""TTree.h""; #include ""TString.h""; #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;; const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {; TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");; TTree *tree = new TTree(""tree"", """");; tree->Branch(""outval"", &outval);; for (unsigned int ientry = 0; ientry < nentries; ++ientry) {; tree->Fill();; }; tree->Write();; fout->Close();. // make sure that each key has a distinct timestamp to maximally; // provoke different hashes for streamer info in each file; std::this_thread::sleep_for(1100ms);; }. }; ```. Test event loop:; ```python; import ROOT; ROOT.gInterpreter.ProcessLine("".O3""); ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""); chain.Add(""test_*.root""). d = ROOT.ROOT.RDataFrame(chain); res = d.Sum(""outval""). resval = res.GetValue(); print(resval); ```. With 256 threa",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9486:5,avoid,avoids,5,https://root.cern,https://github.com/root-project/root/pull/9486,2,"['avoid', 'safe']","['avoids', 'safety']"
Safety,This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:; * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily; * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available; * Reduce scope of interpreter locks in several places where the lock is taken before necessary; * Add locks where unprotected use of `gInterpreter` is made; * Improve code clarity and performance of `TTree::Fill()`; * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/709:223,avoid,avoid,223,https://root.cern,https://github.com/root-project/root/pull/709,2,"['Avoid', 'avoid']","['Avoid', 'avoid']"
Safety,"This change is done in order to avoid that the pythonizations modules; depend on methods defined in TPython. This commit can be descarded when we will update to CPyCppyy-1.9.7,; since TPython::CPPInstance_FromVoidPtr will become; CPyCppyy::CPPInstance_FromVoidPtr.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4643:32,avoid,avoid,32,https://root.cern,https://github.com/root-project/root/pull/4643,1,['avoid'],['avoid']
Safety,This change is done to avoid using the memory pool for `RooArgSets` in; toy dataset generation workflows.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9257:23,avoid,avoid,23,https://root.cern,https://github.com/root-project/root/pull/9257,1,['avoid'],['avoid']
Safety,This change is to avoid warnings from CMake 3.9.3 and newer on macOS.; See `cmake --help-policy CMP0068` for more information. Fixes [ROOT-9031](https://sft.its.cern.ch/jira/browse/ROOT-9031).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1285:18,avoid,avoid,18,https://root.cern,https://github.com/root-project/root/pull/1285,1,['avoid'],['avoid']
Safety,"This clearly signals ownership transfer and avoids circumventing smart pointer semantics. For more details on passing the vector by value, see also commit c7dac7370d.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16779:44,avoid,avoids,44,https://root.cern,https://github.com/root-project/root/pull/16779,1,['avoid'],['avoids']
Safety,"This commit enables serialization of the Python proxy defined within cppyy to the C++ std::runtime_error class. By doing so, we avoid errors that happen in certain configurations of Dask tasks where a std::runtime_error may be thrown within the event loop itself. Recent CI failures report the following:. ```; RDataFrame::Run: event loop was interrupted; Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor; 	which can be called without argument, objects of this class; 	can not be read with the current library. You will need to; 	add a default constructor before attempting to read it.; Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved; Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved; Error in <TClass::New>: cannot create object of class runtime_error; Error in <TBufferFile::ReadObject>: could not create object of class runtime_error; *** Break *** segmentation violation; ```. This is due to the fact that for some reason the std::runtime_error object is serialized at the end of the function scope within the Dask task. It is important to note that this has only appeared very recently (after October 20th 2023), somehow concurrently on multiple platforms/configurations:. * Alma9 (GCC 11, C++17, Python 3.9, Dask 2023.10) - also tested with Dask 2022.8.1 - 2023.9.3; * Ubuntu22 (GCC11, C++17, Python 3.10, Dask 2023.10); * Ubuntu23.10 (GCC13, C++20, Python 3.11, Dask 2023.10). ~~The reason why have appeared on these platforms and not on others (notably they do not appear in any Jenkins CI run) is unclear.~~Found culprit, see comment below",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13926:128,avoid,avoid,128,https://root.cern,https://github.com/root-project/root/pull/13926,1,['avoid'],['avoid']
Safety,"This commit provides a rewrite of key functions of TGeoParallelWorld, achieving: . (a) faster initialization; (b) faster execution of the Safety function (from ~O(N) to ~O(1)) ; (c) faster or equal execution of FindNode/FindBoundary functions (~log(N)) ; (d) less memory consumption (better memory scalability). The development for this commit was motivated from a use case in ALICE, in which the parallel world ""scene"" can be very large (~100K volumes). In this case, TGeoVoxelFinder takes very long; to construct and consumes a very large amount of memory (GBs). In addition, the evaluation of the Safety function dominates the Geant simulation time. The improvements in this commit are mainly achieved through:. * The use of a boundary volume hierarchy (BVH) as the base acceleration entity, replacing TGeoVoxelFinder.; BVH are the standard in industry/computer-graphics, for what concerns ray-object intersection tasks. The BVH is constructed from axis-aligned bounding boxes and employed in the FindBoundary/FindNode implementations. * The use of a 3D voxel grid (TGeoVoxelGrid) structure, able to store properties ""local"" or in the vicinity of a cartesian coordinate P. This structure allows to reduce the (typical) algorithmic complexity for ""Safety"" queries to ~O(1) (with a constant factor determined by the voxel size). Filling of the 3D voxel grid cache for Safety is done on-the-fly (using the BVH once). * (Optional) Additional caching of ""last-call"" safety values for really quick return when the value is still valid at the next call. Ideas for these improvements come from prior work in related libraries such as VecGeom. -----. Implementation details:. * The implementation is, for now (until fully tested), provided in a backward compatible manner:. - By default, nothing changes; - Users have to activate the BVH mode by setting an environment variable TGEO_PW_USEBVH; - Users may hence compare the 2 modes. * Functions for Safety, FindNode, FindBoundary dispatch to some internal i",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16442:138,Safe,Safety,138,https://root.cern,https://github.com/root-project/root/pull/16442,2,['Safe'],['Safety']
Safety,"This commit provides an (optional) optimization to reduce the cost of safety evaluations associated with TGeoParallelWorld. The approach consists in the introduction of additional cache-state in TGeoNavigator. This state remembers the last location for which TGeoParallelWorld::Safety was evaluated, together with the corresponding value returned. Since TGeoNavigator follows the evolution of tracks step-by-step, we have some sort of history-locality. This means that the cache-state has a high-probability of being relevant for multiple track locations in a row. The optimization proposed here is orthogonal to other improvements. It adds on top of algorithmic improvements within TGeoParallelWorld (bounding volume hierarchies, see separate PR), gaining a few extra percent in speed. By default, the new feature is not enabled by default for backward compatibility. Once fully verified, we can make it the default mode. That said, in ALICE simulations, the caching did not modify stepping behaviour and yielded identical results compared to not doing the caching. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16470:70,safe,safety,70,https://root.cern,https://github.com/root-project/root/pull/16470,2,"['Safe', 'safe']","['Safety', 'safety']"
Safety,"This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in; RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in; `RooAbsOptTestStatistic` to mask histogram entries out of the variable; range in case of a subrange fit. The reasons why `cacheValidEntries` and; the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is; creating a clone of the dataset with the subrange only using; `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For; the RooDataHist, `valid()` tells you ""if bin `i` is considered; valid within the current range definitions of all observables""; (according to the documentation). For the RooDataSet, it always; returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the; `mutable` state of the RooDataHist, which can cause trouble if one; updates the observable range but then forgets to call; `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`; was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep; it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful; way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9168:546,redund,redundant,546,https://root.cern,https://github.com/root-project/root/pull/9168,1,['redund'],['redundant']
Safety,This extends the previous work on enum thread-safety to encompass; all the ways the enums can be scoped.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/56:46,safe,safety,46,https://root.cern,https://github.com/root-project/root/pull/56,1,['safe'],['safety']
Safety,This fix avoids a crash when an invalid formula expression is given as input.; This ties ROOT-9990,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3472:9,avoid,avoids,9,https://root.cern,https://github.com/root-project/root/pull/3472,1,['avoid'],['avoids']
Safety,"This fixes #11747. As seen in https://github.com/cms-sw/cmssw/issues/40091 the code in `TPad::Close`:; ```; if (fPrimitives); fPrimitives->Clear();; if (fView) {; if (!ROOT::Detail::HasBeenDeleted(fView)) delete fView;; fView = nullptr;; }; if (fFrame) {; if (!ROOT::Detail::HasBeenDeleted(fFrame)) delete fFrame;; fFrame = nullptr;; }; ```; is failing in the case of reading a pad from a file in at least some circumstances. `TPad::Streamer` explicit set the bit `kCanDelete` on all objects in the list of primitives, thus including the view and the frame which have their `kCanDelete` bit explicitly reset elsewhere (in the code run during the initial creation of the frame and view). This means that avoiding the a double deletion (the first is now during the `fPrimitives->Clear()`) relies on the heuristic of `HasBeenDeleted` to work properly, at least in the case seen in cmssw above) it does not and lead to crash.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11763:703,avoid,avoiding,703,https://root.cern,https://github.com/root-project/root/pull/11763,1,['avoid'],['avoiding']
Safety,"This fixes #11747. As seen in https://github.com/cms-sw/cmssw/issues/40091 the code in `TPad::Close`:; ```; if (fPrimitives); fPrimitives->Clear();; if (fView) {; if (!ROOT::Detail::HasBeenDeleted(fView)) delete fView;; fView = nullptr;; }; if (fFrame) {; if (!ROOT::Detail::HasBeenDeleted(fFrame)) delete fFrame;; fFrame = nullptr;; }; ```; is failing in the case of reading a pad from a file in at least some circumstances. `TPad::Streamer` explicit set the bit `kCanDelete` on all objects in the list of primitives, thus including the view and the frame which have their `kCanDelete` bit explicitly reset elsewhere (in the code run during the initial creation of the frame and view). This means that avoiding the a double deletion (the first is now during the `fPrimitives->Clear()`) relies on the heuristic of `HasBeenDeleted` to work properly, at least in the case seen in cmssw above) it does not and lead to crash. Backport of https://github.com/root-project/root/pull/11763",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11849:703,avoid,avoiding,703,https://root.cern,https://github.com/root-project/root/pull/11849,1,['avoid'],['avoiding']
Safety,This fixes ROOT-9147. Also avoid future cases of nullptr dereference,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1572:27,avoid,avoid,27,https://root.cern,https://github.com/root-project/root/pull/1572,1,['avoid'],['avoid']
Safety,"This fixes [ROOT-9322](https://sft.its.cern.ch/jira/browse/ROOT-9322). If a `TTreeReaderValue` is used to read fixed or variable size array, TTreeReader now complains and does not finish construction successfully (rather than successfully construct and read only the first element of the array). When such a (wrongly constructed) `TTreeReaderValue `is used, the following error messages are printed on screen:. ```; Error in <TTreeReaderValueBase::GetBranchDataType()>: Must use TTreeReaderArray to read branch arr: it contains an array or a collection.; Error in <TTreeReaderValueBase::CreateProxy()>: The branch arr contains data of type {UNDETERMINED TYPE}, which does not have a dictionary.; Error in <TTreeReaderValue::Get()>: Value reader not properly initialized, did you remember to call TTreeReader.Set(Next)Entry()?; ```. I could not find a way to avoid the last two `Error`s and still have `TTreeReaderValue::IsValid` return `false`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1842:858,avoid,avoid,858,https://root.cern,https://github.com/root-project/root/pull/1842,1,['avoid'],['avoid']
Safety,"This fixes a thread safety issue in the matrix package [ROOT-9547], but also implements consistently operators +, +=, ==. = for matrix classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2364:20,safe,safety,20,https://root.cern,https://github.com/root-project/root/pull/2364,1,['safe'],['safety']
Safety,"This fixes and cleans up the Travis runner; most notably, things like modern CMake and clang 5.0 now come by default (since last December). In theory, this should build much faster since several minutes per job was being spent waiting for apt-get to work. This moves the scripts in `.travis` to `.ci/*`. * CMake 3.9 is now installed by default on Travis: https://docs.travis-ci.com/user/build-environment-updates/2017-12-12/; * Clang 5.0 (and clang-format, clang-tidy) are now installed on Travis; * Move extensive setup to .ci/*; * Fix usage of yaml keys; * Avoid if statements by using build matrix entries; * Note clearly that one block of code will not run; * Remove comments about interleaved macOS",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1775:559,Avoid,Avoid,559,https://root.cern,https://github.com/root-project/root/pull/1775,1,['Avoid'],['Avoid']
Safety,"This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date.; the file 'C:/Users/sftnight/git/master/CMakeLists.txt'; is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'; result='-1'; -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299.; -- Looking for python; -- Preferring Python version 3; -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development; CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):; No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(); Call Stack (most recent call first):; C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args); cmake/modules/SearchRootCoreDeps.cmake:72 (find_package); CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred!; See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"".; See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"".; CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:; find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows.; Apparently the keyword REQUIRED is not enough to avoid stopping the; compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5002:1374,avoid,avoid,1374,https://root.cern,https://github.com/root-project/root/pull/5002,1,['avoid'],['avoid']
Safety,This fixes the problem described in http://root-forum.cern.ch/t/ttreecache-fillbuffer-error-with-root-6-14-04/30914/1 (And avoid the same error message in another circumstance).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2786:123,avoid,avoid,123,https://root.cern,https://github.com/root-project/root/pull/2786,2,['avoid'],['avoid']
Safety,"This fixes the warning messages observed in RootBench when evaluating a not normalised RooAddPdf; where fixCoefNormalizationSet has been called. This PR should be back ported to 6.24. Now `RooAddPdf::getValV` does not print anymore the warning but avoids that `RooAbsPdf::getValV` set the stored `_normSet` to a null pointer when the passed `nset` is a null pointer. In this case `RooAddPdf` uses the default normalization set for defining the coefficients and evaluating when a normalization set is not passed explicitly , i.e. when calling `RooAddPdf::getVal(nulptr)`. ; This might have the side effect to not use the reference normalization that could have been defined previously using `fixCoefNormalization`. It is not clear if this is a wanted feature, since I don't see cases where one would need to evaluate an unnormalized `RooAddPdf`. Eventually another PR could remove `RooAddPdf::getValV`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8030:248,avoid,avoids,248,https://root.cern,https://github.com/root-project/root/pull/8030,1,['avoid'],['avoids']
Safety,This function is needed for newly introduced sensitive detectors framework; to provide a hook for a central call to fill ROOT trees before resetting data; in sensitive detector's end of event.; It would be nice if it could be still included in 6.18,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3954:55,detect,detectors,55,https://root.cern,https://github.com/root-project/root/pull/3954,2,['detect'],"['detector', 'detectors']"
Safety,"This improves thread safety in RooFit, as inspired by a recent forum; post where someone wanted to do multiple fits in parallel. It was checked that this has no visible impact on performance. Also, a small bugfix and general code improvements in separate commits.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16385:21,safe,safety,21,https://root.cern,https://github.com/root-project/root/pull/16385,1,['safe'],['safety']
Safety,"This initialization should be unnecessary, but avoids a warning on some compiler platforms about potentially uninitialized use of the variable. Most other compiler platforms should optimize away the assignment. Fixes an issue reported by @pcanal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1202:47,avoid,avoids,47,https://root.cern,https://github.com/root-project/root/pull/1202,1,['avoid'],['avoids']
Safety,"This introduces a `SetAutoSave()` function to `TBufferMerger` that lets users choose how often data is merged into the output file. This avoid excessive writing of TTree headers, which are compressed and causes the output thread to do too much work if merges happen at every buffer read from the queue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1052:137,avoid,avoid,137,https://root.cern,https://github.com/root-project/root/pull/1052,1,['avoid'],['avoid']
Safety,"This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:; https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt; 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`; 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore; cf653869f7 [RF] Don't bar xroofit behind `root7` anymore; e5a67bc647 [RF] More type safety and better memory management with CUDA interface; bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute; 529ba82432 [RF] RAII management of CUDA events and streams; cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays; 77299a2c34 [RF] Reduce public headers of `roobatchcompute`; 8b0a768f0c [RF] Refactor CUDA code in RooFit; 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra; a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors; e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude; 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction; 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`; bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`; 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`; 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`; e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx; 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr; 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions; 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf; 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface; e11a5e4d8c [RF] Improve `RooNumInt",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13295:623,safe,safety,623,https://root.cern,https://github.com/root-project/root/pull/13295,2,"['redund', 'safe']","['redundant-string-cstr', 'safety']"
Safety,"This is a follow up of what was investigated for https://github.com/root-project/root/issues/11581. In that ticket, it was detected that for certain types, for example `const char*`, the attribute `value_type` was not set for std::vector classes. This PR aligns with upstream cppyy in terms of setting the `value_type` and `value_size` attributes of a std::vector class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11623:123,detect,detected,123,https://root.cern,https://github.com/root-project/root/pull/11623,1,['detect'],['detected']
Safety,"This is a follow-up on c97ec173ee589ab2. In particular, this will avoid a flood of warnings on Jenkins, i.e. for roottest, where proof is still enabled, like here:; https://github.com/root-project/roottest/pull/1125. To be backported to 6.32, where this `TList` constructor is already deprecated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15489:66,avoid,avoid,66,https://root.cern,https://github.com/root-project/root/pull/15489,1,['avoid'],['avoid']
Safety,"This is a follow-up to https://github.com/root-project/root/pull/12040. The `RooAbsArg::redirectServer()` method is dangerous and should not be used directly. It was for example used wrongly in HistFactory. In the RooAbsAnaConvPdf is was actually used correctly, but it's still better to use `redirectServers()` consistently, which avoids the new warnings you get when using `redirectServer()`. More detail in the commit description. Also includes a commit that irons over RooFit with `clang-tidy`, adding some missing overrides.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12129:332,avoid,avoids,332,https://root.cern,https://github.com/root-project/root/pull/12129,1,['avoid'],['avoids']
Safety,"This is a followup to 5e424e4, where the Python finding was moved into `SearchInstalledSoftware.cmake`. However, what I missed is that there was a check in `RootBuildOptions` that disabled PyROOT by default if Python is not found, which is now not the case at that point! Therefore, ROOT builds won't have PyROOT by default anymore, which is a bad mistake. Fortunately, the check is entirely redundant and this commit suggests to remove it. There is already a check in `SearchInstalledSoftware` where PyROOT (and `tmva-pymva`) are disabled when the Python development headers where not found. Also, this kind of logic to conditionally change the defaults it bad because it doesn't go well with the ""fail on missing"" paradigm (if `fail-on-missing` is enabled).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15471:392,redund,redundant,392,https://root.cern,https://github.com/root-project/root/pull/15471,1,['redund'],['redundant']
Safety,"This is a followup to commit 8679898a. In that commit, the RooPlot was changed to not create an internal clone of the plot variables anymore. However, in rare cases like for the RooUnitTest, it is necessary that the RooPlot owns the plot plot variables to avoid dangling pointers when the RooPlot lives longer than the original plot variables. To support these cases, a new member function; `RooPlot::createInternalPlotVarClone()` is introduced. It can be used to convert the RooPlot to a plot that owns a clone of the plot variable at any point in time of the RooPlot lifetime.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11841:256,avoid,avoid,256,https://root.cern,https://github.com/root-project/root/pull/11841,1,['avoid'],['avoid']
Safety,"This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header; - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch; - [x] Implement the basic outline of the MethodPyTorch Class.; - [x] Implement the DeclareOptions methods.; - [x] Implement ProcessOptions methods.; - [x] Implement SetupTorchModel method.; - [x] Implement train methods. (Done); - [x] Implement simple basic structure for training; - [x] Add ability to load code from users; - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders; - [x] Use default (optional optimizer SGD); - [x] Add savebest model; - [x] Add scheduler; - [x] Implement Validation; - [x] Add model prediction function loading ability; - [x] Implement user code ability; - [x] Implement helper function. ## Tests; - [x] Add testPyTorchClassification.C; - [x] Add generatePyTorchModelClassification.py; - [x] Load, Train model and test all the parameter arguments; - [x] Verify response after model prediction function is added.; - [x] Add testPyTorchMulticlass.C; - [x] Add generatePyTorchModelMulticlass.py; - [x] Load, Train model and test all the parameter arguments; - [x] Verify response after model prediction function is added.; - [x] Add testPyTorchRegression.C; - [x] Add generatePyTorchModelRegression.py; - [x] Load, Train model and test all the parameter arguments; - [x] Verify response after model prediction function is added. ## GPU; - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials; These are implemented in #6273. ## Documentation; - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5757:915,predict,prediction,915,https://root.cern,https://github.com/root-project/root/pull/5757,4,['predict'],['prediction']
Safety,"This is a reproducer (segfaults frequently but not always):. ```cpp; #include <ROOT/TTreeProcessorMT.hxx>; #include <TROOT.h>; #include <TTreeReader.h>; #include <TTreeReaderArray.h>. void workload(TTreeReader &r) {; TTreeReaderArray<double> ra(r, ""truthCaloPt"");; while (r.Next()); ra.GetSize();; }. int main() {; ROOT::EnableImplicitMT(2);; ROOT::TTreeProcessorMT mt({""f1.root"", ""f2.root"", ""f3.root"", ""f4.root"", ""f5.root""}, ""t"");; mt.Process(workload);; }; ```. With these files: [files.zip](https://github.com/root-project/root/files/8451196/files.zip). The problem seems to be at the level of TGenCollectionProxy: multiple threads end up sharing the same TGenCollectionProxy objects, which is not thread safe (e.g. because of https://github.com/root-project/root/blob/bce5777b8f479212babb7a8af5485d9a6bbd251e/io/io/src/TEmulatedCollectionProxy.cxx#L84-L85). In principle, however, as we use different TChains/TTreeReaders in each thread, they should also access different TGenCollectionProxy instances. Example backtraces at the point of crash (this is one of several failure modes, but it's the one where the problem is clear -- both threads, at frame 0, are accessing the same TGenCollectionProxy instance):. ```; >>> thread apply all bt 10. Thread 2 (Thread 0x7fffdc0e2640 (LWP 312745) ""repro_ttreeproc""):; #0 0x00007ffff767d973 in TGenCollectionProxy::PopProxy (this=0x7fffd4016090) at ../io/io/src/TGenCollectionProxy.cxx:1333; #1 0x00007ffff7d57a15 in TVirtualCollectionProxy::TPushPop::~TPushPop (this=0x7fffdc0dad20, __in_chrg=<optimized out>) at ../core/cont/inc/TVirtualCollectionProxy.h:65; #2 0x00007ffff76274b1 in TEmulatedCollectionProxy::Destructor (this=0x7fffd4016090, p=0x7fffd40156e0, dtorOnly=false) at ../io/io/src/TEmulatedCollectionProxy.cxx:87; #3 0x00007ffff7d4f8c2 in TClass::Destructor (this=0x7fffd40152c0, obj=0x7fffd40156e0, dtorOnly=false) at ../core/meta/src/TClass.cxx:5417; #4 0x00007ffff676afdb in TBranchElement::ReleaseObject (this=0x7fffd4017590) at ../tree/t",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10357:708,safe,safe,708,https://root.cern,https://github.com/root-project/root/issues/10357,1,['safe'],['safe']
Safety,"This is a specialization of iterator::next for vector<bool> that always returns a nullptr and should never be used.; IIUC, this code only exists to avoid compilation errors when compiling I/O code for `vector<bool>`. With this patch we error out rather than silently returning a nullptr.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6891:148,avoid,avoid,148,https://root.cern,https://github.com/root-project/root/pull/6891,1,['avoid'],['avoid']
Safety,"This is already done the same way for many other external projects, like; Clad, etc. Closes https://github.com/root-project/root/issues/8815. Also, refactor some CMake code to avoid code duplication.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16275:176,avoid,avoid,176,https://root.cern,https://github.com/root-project/root/pull/16275,1,['avoid'],['avoid']
Safety,"This is an alternative fix vs. #3360 mentioned on Mattermost; this renames `root/ROOT/RConfig.h` to `root/ROOT/RConfig.hxx` so that on case insensitive filesystems `root/RConfig.h` doesn't end up including itself if a user has the base directory ROOT is installed in before the `root` include in the include path. A file `root/ROOT/RConfig.h` is provided that also points at `root/ROOT/RConfig.hxx` for backward compatibility, and it prints a removal message. Since including `ROOT/RConfig.h` is probably quite rare, this could be dropped. Or it could avoid printing a message because it does no harm. (Even `RConfig.h` probably tends to be included mostly by ROOT). If most/all other includes are `.h`, this might be better for consistency.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3361:552,avoid,avoid,552,https://root.cern,https://github.com/root-project/root/pull/3361,1,['avoid'],['avoid']
Safety,"This is an old branch I had from when I was working on ROOT, but at the time I could not merge it because it required at least CMake 3.12 to work, and we were still requiring only 3.9 at the time. I took the time to rework the commits against the current master yesterday and today, as rebasing was too hard. The original pull request that contained these changes was https://github.com/root-project/root/pull/4299, but the refactoring of core/ was removed. I hope now this would be ok to merge to simplify a bit how libCore is built and avoid having to add include directories by hand to targets that link against libCore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10690:538,avoid,avoid,538,https://root.cern,https://github.com/root-project/root/pull/10690,1,['avoid'],['avoid']
Safety,"This is done make the life of the developer easier when passing `nullptr` to the RooFit message logger. After all, just `nullptr` is much less verbose than the modern C++ code that had to be used so far (`static_cast<TObject*>(nullptr)`). It also often confused new contributors why `nullptr` could not be passed directly. All existing code was updated to not do the explicit casting to `TObject*` anymore. With this, we also avoid a lot of C-style casts in RooFit code. More info in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10546:426,avoid,avoid,426,https://root.cern,https://github.com/root-project/root/pull/10546,1,['avoid'],['avoid']
Safety,"This is done to avoid a compiler warning (or an error for me, as I treated compiler warnings as errors).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8159:16,avoid,avoid,16,https://root.cern,https://github.com/root-project/root/pull/8159,1,['avoid'],['avoid']
Safety,"This is done to avoid this compiler warning that I get when compiling; ROOT with gcc:. ```; core/base/inc/TStorage.h:131:37: warning: declaration of ‘static void TStorage::UpdateIsOnHeap(const volatile UInt_t&, volatile UInt_t&)’ with attribute ‘noinline’ follows inline declaration [-Wattributes]; 131 | R__NEVER_INLINE void TStorage::UpdateIsOnHeap(volatile const UInt_t &uniqueID, volatile UInt_t &bits) {; | ^~~~~~~~; core/base/inc/TStorage.h:91:20: note: previous declaration of ‘static void TStorage::UpdateIsOnHeap(const volatile UInt_t&, volatile UInt_t&)’ here; 91 | static void UpdateIsOnHeap(volatile const UInt_t &uniqueID, volatile UInt_t &bits);; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10500:16,avoid,avoid,16,https://root.cern,https://github.com/root-project/root/pull/10500,1,['avoid'],['avoid']
Safety,"This is done to better separate CUDA-specific code from the generic code; in RooBatchCompute. Two problems are addressed in this commit:. 1. The RooBatchCompute library had too many CUDA specific functions. The virtual RooBatchCompute interface should be backend agnostic, but; it had CUDA specific functions like `cudaMalloc()` and `cudaFree()`,; which where only implemented in the CUDA case. So an abstraction; didn't make much sense there. It's better to move the CUDA specifics; to a new `roofitcuda` library. Then, the functions from this library; are used in `batchcompute` and `roofitcore` behind preprocessor; macros when using CUDA. 2. Passing around `cudaStream_t` and `cudaEvent_t`. These types are only; available to `nvcc`, and in case gcc is used, these were forward; declared as stucts. This is a hack that should be avoided. In; particular, it can cause linker errors because the types are not the; same in the CUDA and C++ translation units. The proposed solution is to wrap the `cudaStream_t` and `cudaEvent_t`; pointers into C++ structs that are in the new CUDA support library,; and only when using `nvcc` it is allowed to unwrap these types. 3. Too specific signature of `RooAbsReal::computeBatch()`. This function; should not be too backend specific, but it took the `cudaStream_t`; directly. This parameter is removed. Now, the CUDA stream is stored; in a `RooBatchCompute::Config` struct that is passed around in the; `DataMap`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13409:833,avoid,avoided,833,https://root.cern,https://github.com/root-project/root/pull/13409,1,['avoid'],['avoided']
Safety,This is just a quickfix PR to add the header to the library generation (before it worked due to transitive inclusion in `RInterface.hxx`). In a followup PR I will propose a way to automatise this and avoid further cases,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13781:200,avoid,avoid,200,https://root.cern,https://github.com/root-project/root/pull/13781,1,['avoid'],['avoid']
Safety,"This is necessary to avoid ROOT's installed cmake modules to point to the build directory when using builtin GSL, since `$GSL_LIBRARIES` is the full path to `<BINARY_DIR>/lib/libgsl.so` when using builtin GSL.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4050:21,avoid,avoid,21,https://root.cern,https://github.com/root-project/root/pull/4050,1,['avoid'],['avoid']
Safety,"This is needed to fix MacPorts, https://trac.macports.org/ticket/57007, HomeBrew https://github.com/Homebrew/homebrew-core/pull/36585, and any similar system with case insensitivity. `RConfig.h` includes itself instead of `ROOT/RConfig.h`. This prioritizes relative imports for RConfig on most compilers. *Any similar changes should use double-quote imports too* to avoid this ambiguity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3360:366,avoid,avoid,366,https://root.cern,https://github.com/root-project/root/pull/3360,1,['avoid'],['avoid']
Safety,This is needed to fix the distrdf timeouts in our CI also for 6.26 . See the sibling roottest PR,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10251:34,timeout,timeouts,34,https://root.cern,https://github.com/root-project/root/pull/10251,1,['timeout'],['timeouts']
Safety,"This is not much better than using the internals via including private headers, which already got avoided in a previous PR. More detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14498:98,avoid,avoided,98,https://root.cern,https://github.com/root-project/root/pull/14498,1,['avoid'],['avoided']
Safety,This is part of the effort of making memory management in RooFit more; automatic and safer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11114:85,safe,safer,85,https://root.cern,https://github.com/root-project/root/pull/11114,1,['safe'],['safer']
Safety,"This is presumbaly a bit controversial. safeDeleteList remove elements in order in a RooAbsCollection,; starting with the ones that only have clients and no servers. This is a slow process, and takes 25% of CPU time on large workspace; manipulation workflows, as it takes place at each workspace::import; call. It can also lead to slow ~RooWorkspace. The point is, I don't think this logic is needed at all.; ~RooAbsArg takes care of properly breaking all the client-server links,; both uplinks and downlinks, for every object. I couldn't find a logical; case where a crash would occur if the safeDeleteList logic were to be; removed. All RooFit tests pass after this patch. No problem for my heavy; workspace manipulation worflows either.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9685:40,safe,safeDeleteList,40,https://root.cern,https://github.com/root-project/root/pull/9685,2,['safe'],['safeDeleteList']
Safety,This is related-to/necessary-for https://github.com/root-project/root/issues/13511 and https://github.com/root-project/root/issues/11353 . See also https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989/1; and https://github.com/root-project/root/issues/14767. See also https://its.cern.ch/jira/browse/ROOT-9448,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14792:177,abort,aborting-with-std-align-val-t-is-not-implemented-yet-rhel-,177,https://root.cern,https://github.com/root-project/root/pull/14792,1,['abort'],['aborting-with-std-align-val-t-is-not-implemented-yet-rhel-']
Safety,"This is to avoid any num-diff fallback in RooFit, which results in annoying warnings for the user. A new function `ROOT::Math::digamma` is added to the public interface, which wraps `gsl_sf_psi`. The digamma function is the derivative of `lgamma`, so it is used in `CladDerivator.h` to define the derivatives of `TMath::LnGamma` and the related gamma functions that are used to define Poisson cdfs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16747:11,avoid,avoid,11,https://root.cern,https://github.com/root-project/root/pull/16747,1,['avoid'],['avoid']
Safety,"This is to avoid compilier warnings, as usual. Commit will also be ported to `wlav/CPyCppyy`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16780:11,avoid,avoid,11,https://root.cern,https://github.com/root-project/root/pull/16780,1,['avoid'],['avoid']
Safety,"This is to avoid crashes on 32-bit platforms. It's not necessary to use; 64-bit integers anyway, because the return types of the caching codes; were `Int_t` anyway (now just int). And since caches are never part of; IO anyway, it's not important to be platform independent. For the UniqueId, using `unsigned long` is fine too, because the unique; ID is transient and therefore doesn't need to be platform independent.; Any fixed-size choice here caused either problems on either 32- or; 64-bit platforms. This fixes crashes in the nightly builds on Debian 10 32-bit, which was verified on the Debian 10 build node.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10349:11,avoid,avoid,11,https://root.cern,https://github.com/root-project/root/pull/10349,1,['avoid'],['avoid']
Safety,"This is to avoid having to call `new` and `delete` in the context of; caching in RooFit, as it has lead to memory leaks in the past.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7643:11,avoid,avoid,11,https://root.cern,https://github.com/root-project/root/pull/7643,1,['avoid'],['avoid']
Safety,This is to avoid having to do hacks with the `RooStringVar`. Closes #9845.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11899:11,avoid,avoid,11,https://root.cern,https://github.com/root-project/root/pull/11899,1,['avoid'],['avoid']
Safety,"This is to avoid output that doesn't indicate any problem and only makes; the test output harder to interpret. That's how the output of test 27 was before this commit:; ```; [#1] INFO:NumericIntegration -- RooRealIntegral::init(pxyz_Int[z|R]_Norm[x,y,z]_Int[y|R]) using numeric integrator RooIntegrator1D to calculate Int(y); Test 27 : Integration over non-rectangular regions...............OK; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8611:11,avoid,avoid,11,https://root.cern,https://github.com/root-project/root/pull/8611,1,['avoid'],['avoid']
Safety,"This is to avoid the following warning at configuration time when building ROOT with `cuda` enabled:. ```; CMake Warning (dev) at cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package):; Policy CMP0146 is not set: The FindCUDA module is removed. Run ""cmake; --help-policy CMP0146"" for policy details. Use the cmake_policy command to; set the policy and suppress this warning. Call Stack (most recent call first):; cmake/modules/SearchInstalledSoftware.cmake:1705 (find_package); CMakeLists.txt:347 (include); This warning is for project developers. Use -Wno-dev to suppress it.; ```. Indeed, FindCUDA is deprecated since CMake 3.10:; https://cmake.org/cmake/help/latest/module/FindCUDA.html. The minimum required CMake version by ROOT is 3.16, so it should be no problem to use the suggested new alternative: call the enable_language() command with CUDA. Similar to `enable_language(Fortran)`, this is now done in `CheckCompiler.cmake`. Also, some logic of managing the configuration flags was moved from `SearchInstalledSoftware.cmake` to `RootBuildOptions.cmake` where it belongs. What remains in `SearchInstalledSoftware.cmake` is only the code to find the CuDNN library. Also, since CUDA is now registered as a language in CMake, we can use the official `CMAKE_CUDA_COMPILER` variable in `RootConfiguration.cmake` when invoking nvcc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13437:11,avoid,avoid,11,https://root.cern,https://github.com/root-project/root/pull/13437,1,['avoid'],['avoid']
Safety,This is workaround to avoid circular dependency between v7primitives; and v7gpad. Detected by cmake on some platforms,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3468:22,avoid,avoid,22,https://root.cern,https://github.com/root-project/root/pull/3468,2,"['Detect', 'avoid']","['Detected', 'avoid']"
Safety,This makes the code much simpler and avoids using virtual implemetation classes with dubious inheritance chains.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12355:37,avoid,avoids,37,https://root.cern,https://github.com/root-project/root/pull/12355,1,['avoid'],['avoids']
Safety,"This method called from `CPyCppyy::CPPMethod` destructor, but also from assign operator.; Means it is strongly advisable to clear pointers to avoid potential use of destroyed objects.; Also `fConverters` must be cleaned. Indirectly discovered via DeepCode analyzers:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7692:142,avoid,avoid,142,https://root.cern,https://github.com/root-project/root/issues/7692,1,['avoid'],['avoid']
Safety,This mitigates ROOT-10269 by avoiding nested task execution due; to a parallel Snapshot.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4220:29,avoid,avoiding,29,https://root.cern,https://github.com/root-project/root/pull/4220,2,['avoid'],['avoiding']
Safety,This optimizes the ROOT startup for C++ Modules by avoiding deserialization of redundant declarations.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2998:51,avoid,avoiding,51,https://root.cern,https://github.com/root-project/root/pull/2998,2,"['avoid', 'redund']","['avoiding', 'redundant']"
Safety,This patch actually loads the modulemap as previously it wrongly detected; it was already loaded.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3695:65,detect,detected,65,https://root.cern,https://github.com/root-project/root/pull/3695,1,['detect'],['detected']
Safety,This patch affords trimming of redundant Jupyter notebook information contained within TCanvas .JSON objects. Specifically this includes the removing the list of TColors which reduces the size of a benchmark notebook (a compiled test notebook of Root Primer graphics) by up to 80% upon preliminary tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/760:31,redund,redundant,31,https://root.cern,https://github.com/root-project/root/pull/760,1,['redund'],['redundant']
Safety,This patch allows TFileMerger to work with externally created TFile-s. Being; able to control the creation of the TFile objects give us a chance to use; in-memory files. This is very helpful in benchmarking when we want to simulate; fast disks or we just want to avoid disk wearout.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1073:263,avoid,avoid,263,https://root.cern,https://github.com/root-project/root/pull/1073,1,['avoid'],['avoid']
Safety,"This patch installs python modules to python site-dir standard location (see some doc here:https://docs.python.org/2/library/site.html), see https://sft.its.cern.ch/jira/browse/ROOT-3316. It avoids to have to set PYTHONPATH when installing to a system folder /usr or /usr/local, and even the user site-dir ~/.local. Packaging may have to be reworked though (https://www.debian.org/doc/packaging-manuals/python-policy/ch-python.html#s-paths)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/73:191,avoid,avoids,191,https://root.cern,https://github.com/root-project/root/pull/73,1,['avoid'],['avoids']
Safety,"This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml; input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden; ^; rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and; on the distribution machine. We should probably rely on an environment variable; to turn off this diagnostic selectively and more the reponsibility if something goes; wrong to the distribution team. They should have better knowledge what is safe to; be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4495:1199,safe,safe,1199,https://root.cern,https://github.com/root-project/root/pull/4495,1,['safe'],['safe']
Safety,"This patch is a tentative fix to JIRA bug [ROOT-9907](https://sft.its.cern.ch/jira/browse/ROOT-9907) (TGeoNavigator::FindNextBoundaryAndStep yields nonsensical answers with overlapping volumes). The bug seems to be due to the fact that `/CUVE_1/FAIS_1/PLAQUE_2` fails the `Contains()` check on line 1416, despite the fact that (or because?) the point is exactly on the volume boundary. Therefore, `PLAQUE_2` is not considered **at all** for limiting the current step length, which is unsound. By suppressing the `Contains()` check, we allow `snext` to be set to 0.0, which is a sensible response in this situation. I am not sure whether suppressing this check is entirely reasonable. I perused the source code for a few `TGeoShape`s and I have the impression that `DistFromOutside()` returne `TGeoShape::Big()` if the point happens to be inside the shape, but I could not find any documentation where this post-condition is clearly spelt out. If this is true for any shape, then I would argue that it is safe to omit the `Contains()` check (at worst we will end up with `snext=TGeoShape::Big()`, which is exactly what we had with the check anyway). @agheata, I hope you can take a look at this patch. Perhaps you are also aware of other places in `TGeoNavigator` where it may be wise to apply a similar correction...? Thanks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3291:1004,safe,safe,1004,https://root.cern,https://github.com/root-project/root/pull/3291,1,['safe'],['safe']
Safety,This patch makes it more difficult for people to avoid the 'automatic' memory; ownership done by TMemFile. It forces people to explicitly construct the; data structure describing memory blob and makes it easier to grep for.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3977:49,avoid,avoid,49,https://root.cern,https://github.com/root-project/root/pull/3977,1,['avoid'],['avoid']
Safety,This patch makes the implementation reusable and ready to configure it such; that we can remove the redundant information for modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3687:100,redund,redundant,100,https://root.cern,https://github.com/root-project/root/pull/3687,1,['redund'],['redundant']
Safety,"This patch provides the method TGDMLWrite::WriteGDMLfile allowing to write the gdml corresponding to a volume hierarchy (like a detector). A geometry can be therefore exported in pieces, and the gdml parser was modified to avoid duplication of materials and other components upon reading.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1445:128,detect,detector,128,https://root.cern,https://github.com/root-project/root/pull/1445,2,"['avoid', 'detect']","['avoid', 'detector']"
Safety,"This patch reimplemented signal handling in CMSSW. It avoids async-unsafe functions in signal handler. For reference, see the link https://github.com/bbockelm/cmssw/blob/stacktrace_handler_revisit/FWCore/Services/src/InitRootHandlers.cc. I tried this patch with some simple multi-thread test cases and it worked fine. Is there any complicated test cases I can run? I think this patch is not very ready to merge, but it achieved basic functions. Any criticisms are welcome.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/96:54,avoid,avoids,54,https://root.cern,https://github.com/root-project/root/pull/96,2,"['avoid', 'unsafe']","['avoids', 'unsafe']"
Safety,"This patch removes an unnecessary assert, which is probably a left-over from early debugging. Asserts are a way to document certain runtime assumptions that the code makes. They should be only used if the code cannot run correctly if the condition is not fulfilled. This assert here does not serve that purpose. Starting the minimization iteration with an invalid initial state is fine as far as the algorithm is concerned, because it does not make use of that property. Edit: This is not a cosmetic change, because this assert triggers an abort in one of the iminuit tests if the code is compiled in debug mode, while the test runs fine in release mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6762:540,abort,abort,540,https://root.cern,https://github.com/root-project/root/pull/6762,1,['abort'],['abort']
Safety,"This patch set enabled C++17 (C++1z) support in ROOT. This will require at least GCC 7.1.0 (soon to be released, probably in a month). GCC 7 fully implements C++17 language features. CMSSW builds using GCC 6.2.0, GCC 6.3.0 and GCC 7.0.1 are all compiled with C++17. Note that biggest issues came from `TString` and `std::string` interaction due to `std::string_view` conversion operator in `TString`. This makes mixing `TString` and `std::string` painful. Thus to avoid ambiguity errors `std::string_view` operator is now marked as explicit. Otherwise in a lot of places I had to use `static_cast<>` to pick one of conversion operators (which makes the patch bigger).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/522:464,avoid,avoid,464,https://root.cern,https://github.com/root-project/root/pull/522,1,['avoid'],['avoid']
Safety,This patch teaches cling to detect if the essential libraries have modulemaps and if necessary it adds an overlay around libc and std. This tightens the implementation and makes cling standalone easier to run in -fmodules mode.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4563:28,detect,detect,28,https://root.cern,https://github.com/root-project/root/pull/4563,1,['detect'],['detect']
Safety,"This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in; addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same; STL collection (this is supported) and we have the following sequence of operation:. 1. load library A; 2. load library B (dictionary registration is ignored as intended); 3. request TClass for STL collection.; 4. unload (dclose) library B; 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL; collection to be marked as ""unloaded"" even though it library (A); was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed; from memory on first use and thus if the library was closed and re-opened/loaded; we no longer had the information needed to restore the TClass object corresponding; to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12863:805,avoid,avoid,805,https://root.cern,https://github.com/root-project/root/pull/12863,1,['avoid'],['avoid']
Safety,"This pull request adds [VecCore](https://gitlab.cern.ch/VecGeom/VecCore) external project and build options to ROOT. Some comments:. Vc is used by VecCore, and since it is not relocatable, it must be built by the VecCore build system in order to avoid the situation in which VecCore finds a broken temporary installed version of Vc in ROOT's `${CMAKE_BINARY_DIR}`. It is perfectly fine to use a builtin VecCore with an externally installed Vc, however. Ideally, though, both should be externally installed. When both are enabled as builtins, they will get installed at the end along with ROOT into the final prefix, with correct configurations. I can not test the build on ARM, please let me know if Jenkins shows any failures. @xvallspl Since you have been using VecCore within ROOT, could you please try this branch out? I did not find any code currently in ROOT that uses VecCore. I've marked this as work in progress to be able to make sure everything is ok prior to merging.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/393:246,avoid,avoid,246,https://root.cern,https://github.com/root-project/root/pull/393,1,['avoid'],['avoid']
Safety,"This pull request adds support for the concatenation of RNTuple pages into 'cages' that are then written to, and read from, DAOS containers as a single value of the key-value object store under the same attribute key, thus the smallest addressable unit. Pages from the same page-group are concatenated in the order they are handled on the DAOS side through vector I/O from the sealed pages' buffers. The name 'cage' is a portmanteau of ""concatenated pages"" and suggests the fact that pages caged together must be read together in DAOS. This change emancipates the DAOS backend from the original, on-disk ntuple page size. The option to concatenate sealed and buffered pages avoids unnecessary throughput constraints caused by the original page size (e.g., the on-disk default, 64KiB, generally leads to lower performance than pages an order of magnitude larger, e.g. 1MiB), particularly if the pattern of data analysis is based on reading back entire page-group ranges at once. On the other hand, this change ties the reader to the new, concatenated sizes; in DAOS key-value stores, it is impossible to read only a part of the value. It is important that the cage size limit be set adequately for the use-case during writing to DAOS. ## Changes or fixes:. - `RNTupleWriteOptions` provides a way to `SetMaxCageSize()` (default: caging enabled with 1 MiB cages), the maximum size a concatenation of pages from the same page-group can achieve.; - `RPageSinkDaos::CommitSealedPageVImpl()` maps pages from the same page-group to the same attribute key, thus concatenating them on the DAOS-side (i.e. relies on scatter-gathered I/O) until the cage limit is reached. The cage sizes can vary due to page compression and the length of page-groups, thus it is calculated and stored to be referenced when reading back.; - `RWOperation` is generalized to allow many IOVs associated with one attribute key in a request, enabling the non-contiguous buffers of sealed pages to be aggregated into a cage under the sam",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11466:674,avoid,avoids,674,https://root.cern,https://github.com/root-project/root/pull/11466,1,['avoid'],['avoids']
Safety,"This pull request improves the support for storage of collections that use `TVirtualCollectionProxy`, which was initially landed in #11525. However, `TVirtualCollectionProxy` allows for traversing a collection using iterators, which should be faster than using `TVirtualCollectionProxy::At()`. Also, this interface avoids (where possible) an additional copy during element insertion. ## Changes or fixes:; - Switches from using `TVirtualCollectionProxy::{Size,At}()` to the use of iterators. After merging this PR, an implementation for the following functions is required instead: `TVirtualCollectionProxy::GetFunctionCreateIterators()`, `GetFunctionNext()`, and `GetFunctionDeleteTwoIterators`. ## Checklist:; - [X] tested changes locally; - [X] updated the docs (if necessary). This PR fixes #11671.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12380:315,avoid,avoids,315,https://root.cern,https://github.com/root-project/root/pull/12380,1,['avoid'],['avoids']
Safety,"This pull request is a follow-up of #13197, improving the implementation of the internal class `RCollectionClassField::RCollectionIterableOnce`. ## Changes or fixes:; - Allow for faster iteration of elements in a collection whose elements are guaranteed to be contiguous in memory (e.g. a vector), i.e. the address of each element is known given the base pointer. For such cases, a non-zero value for the `stride` argument can be provided, thus avoiding an indirect call on each `operator++` call.; - Fix and clarify the use of read/write iterators on a proxied collection. The meaning of the `read` argument in many; TVirtualCollectionProxy functions is ""read from disk"", i.e. write in memory. This should improve the situation for the PR introducing support for `std::set<T>` fields (#12948). ## Checklist:; - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13235:445,avoid,avoiding,445,https://root.cern,https://github.com/root-project/root/pull/13235,1,['avoid'],['avoiding']
Safety,This pull request provides a bug fix:. - fixing wrong safety in TGeoParallelWorld due to double application of coordinate transformation) ; - fix a crash in VoxelFinder when we have only 1 primitive. as well as some optimizations for TGeoPallelWorld usage:. - call TGeoParallelWorld::Safety with existing limit from normal safety to speedup search; - make TGeoPhysicalNode::IsMatchingState faster,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16425:54,safe,safety,54,https://root.cern,https://github.com/root-project/root/pull/16425,3,"['Safe', 'safe']","['Safety', 'safety']"
Safety,"This pull request provides a page allocator that caches previous allocations up to a certain limit. The cache is thread-local and defaults to 16 pages per thread (~1MiB per thread for default-sized pages). This PR is largely based on the concepts in #8634. Reuse of memory allocations in `RPageAllocatorCache` not only reduces calls to the global allocator but also heap fragmentation. The global allocator is thread-safe albeit locked; thus, to also reduce contention, the cache in `RPageAllocatorCache` is thread-local.; Given the small size of the (per-thread) cache, the internal structure is a simple `std::deque`. Anything more complex is not justified at the moment of this writing. . **NOTE:** Performance evaluation (specially for the multi-threaded case) should be inserted here tomorrow. ## Changes or fixes:; - Add `RPageAllocatorCache`: this templated allocator returns pages that have at least the required capacity. `DeletePage()` does not immediately deallocate memory; instead, pages are returned to a thread-local cache, dropping the smallest allocated buffer if the cache is full. If a previous page cannot be recycled, the underlying allocator `AllocT` (`RPageAllocatorHeap` by default) is used to allocate memory.; - Change the signature of `RPageSource::UnsealPage()`: `SealPage()`, the counterpart of `UnsealPage()` takes an RPage and returns an RSealedPage. Make the interface of `UnsealPage()` symmetric and return an RPage.; - Make `UnsealPage()` use `RPageAllocatorCache` by default.; - Remove stray `RPageAllocator{File,Daos}` classes. ## Checklist:; - [X] tested changes locally; - [X] updated the docs (if necessary). This PR supersedes #8634.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12279:417,safe,safe,417,https://root.cern,https://github.com/root-project/root/pull/12279,1,['safe'],['safe']
Safety,This pull request replaces a variable's type from `size_t` to `uint64_t` to avoid warnings on 32-bit platforms. The variable is the output of a hashing function and undergoes shifting by 32 bits as the seeding step of a hash combination between the two-halves of a 64-bit value. The change has no functional impact. It prevents the following compilation warning in 32-bit systems:. ```; In file included from /path/to/src/RPageStorageDaos.cxx:29:; /path/to/src/tree/ntuple/v7/inc/ROOT/RPageStorageDaos.hxx: In static member function ‘static ROOT::Experimental::Detail::ntuple_index_t ROOT::Experimental::Detail::RDaosContainerNTupleLocator::Hash(const string&)’:; /path/to/src/tree/ntuple/v7/inc/ROOT/RPageStorageDaos.hxx:120:43: warning: right shift count >= width of type [-Wshift-count-overflow]; 120 | auto seed = static_cast<uint32_t>(h >> 32);; ```. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12473:76,avoid,avoid,76,https://root.cern,https://github.com/root-project/root/pull/12473,1,['avoid'],['avoid']
Safety,"This pull request:. 1. Closes #12453, where is was reported that weight errors are lost when splitting weighted datasets.; 2. Avoids the associated errors printed when doing the JSON IO of combined RooDataSets (run the unit test `gtest-roofit-hs3-test-testHS3SimultaneousFit` with ROOT master to see them); 3. Avoids the creation of dummy weight variables when constructing RooDataSets in all of RooFit. More detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12459:126,Avoid,Avoids,126,https://root.cern,https://github.com/root-project/root/pull/12459,2,['Avoid'],['Avoids']
Safety,This pull-request changes RField's `GetNormalizedType()` in order to discard cv-qualifiers. ## Changes or fixes:; - RField does not care about cv-qualifiers. Use `TClassEdit::CleanType()` to discard them in `GetNormalizedType()`. Removed the now redundant `Trim()` function.; - Improve `ntuple_types` test to cover the case described in issue #9140. ## Checklist:; - [X] tested changes locally. This PR fixes #9140.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9158:246,redund,redundant,246,https://root.cern,https://github.com/root-project/root/pull/9158,1,['redund'],['redundant']
Safety,"This pull-request disables the warning `redundant parentheses surrounding declarator [-Wredundant-parens]` for everything except input parsed via `Interpreter::process()` (e.g., for prompt input). ## Changes or fixes:; - `CompilationOptions::IgnorePromptDiags` extended to >1 bit and renamed to `CompilationOptions::IgnoreDiagsMask`. Several values from the `IgnoreDiags` enumeration can be bitwise-OR'd together. The original purpose of `IgnorePromptDiags` now corresponds to the `IgnoreDiags::kPromptBasic` flag.; - `FilteringDiagConsumer` has been extended to handle groups of diagnostics that can be masked via `CompilationOptions::IgnoreDiagsMask`.; - Default ignore diagnostics mask can be (optionally) specified as an argument to `Interpreter::makeDefaultCompilationOpts()`. All interface functions use `IgnoreDiags::kPromptExtended` except `Interpreter::process()`. ## Checklist:; - [X] tested changes locally. This PR fixes [SPI-2064](https://sft.its.cern.ch/jira/browse/SPI-2064).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9695:40,redund,redundant,40,https://root.cern,https://github.com/root-project/root/pull/9695,1,['redund'],['redundant']
Safety,"This requires some changes to the read path of `RColumn`, first to deduplicate the code and then avoid recursive `RColumn::ReadV` which makes the difference on my system between being able to limit test a single `std::vector` element of size 200k.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14390:97,avoid,avoid,97,https://root.cern,https://github.com/root-project/root/pull/14390,1,['avoid'],['avoid']
Safety,"This results in more modular code that is also safer: the `ROOT::Fit::Fitter` has no access to the RooAbsMinimizerFcn anymore, only to the member that is a lightweight adapter. This means the `RooAbsMinimizerFcn` also doesn't get cloned unexpectedly, so we don't need extra checks in the RooMinimizer to account for that!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12348:47,safe,safer,47,https://root.cern,https://github.com/root-project/root/pull/12348,1,['safe'],['safer']
Safety,"This set of improvements to TBufferMerger (and more) was inspired by the terrible performance of the parallel merging (and fast merging in general) in the case where the TTree has a very large number of branches (1000+). Where in the original version a TBufferMerger with a file with 1000+ branches and only 50s and ran with any number of threads would take more than 3m (did not wait until the end) the new version takes 11s with 1 thread, 8s with 6 threads and 22s with 6 thread when increased to 500 events. (using the CMS file ../data//250202_181_RECO.root). This PR includes:. * skipping the boxing/compressing/uncompressing/unboxing cycle if the TBufferMerger is available (not already merging) when the thread is writing its TMemFile. * skipping SetBranchAddress and SetMakeClass in when doing fast cloning (where that information is not used anyway). * Replacing calling to the slow TObjArray::GetEntries (which *counts* the slot used) by calling GetEntriesFast. * Speeding up the GetMother implementation (caching parent's address sooner when reading, use that information in GetMother). * In fast cloning, delay writing the output until the last input is processed (instead of writing the output after each input),. * Optimization of fast cloning handing of empty write basket. It also contains a couple of bug fixes (RNtuple merging forgetting to merge the result of the objects in the file, iofeatures incorrectly cloned). Also made TBufferMerger::GetQueueSize actually thread safe (it is necessary to use it to stop the producer from adding more data if the queue is too full). Also improved TClass::GetBaseClassOffset parallelism (benefit parallel boxing/unboxing) and reduced/removed contention see in the mechanism use to determine the actual object type at run-time (TIsAProxy).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7286:1489,safe,safe,1489,https://root.cern,https://github.com/root-project/root/pull/7286,1,['safe'],['safe']
Safety,"This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested; initialization of TClasses (leading to the outer nested initialization; to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```; namespace User {; class TrackerVtxBase; class BeamFlux : public User::TrackerVtxBase; class NTrackerVtx : public User::BeamFlux; }; ```. We had a crash during BuildOld for User::BeamFlux. ```; User::TBaseObject triggers replacement routines.; reaches NTrackerVtx; calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux; in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass); calls Init on the TStreamerElement base; this triggers the creation of the TClass for User::TrackerVtxBase; but BuildOld kept a stale pointer to the old TClass (was baseclass variable).; ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(; Usually it is just a waste of time.; In this case, one such type is User::TContext::Time (an enum) use as part; of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,; another class requested the update of the emulated StreamerInfo for the (still); emulated User::TContext, this in turn provoked the (unnecessary) call to; TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of; the TClass for User::TContext … one of the steps is to absorb the existing; StreamerInfo (including the one being updated) and clear them (i.e. delete; the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr); is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```; User::TDatum is loaded; provokes update of a StreamerInfo with a TTrueParticle; *spurrious* InitStreaming provoke need for TTrueParticle TClass; start consuming the TTr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4389:125,avoid,avoid,125,https://root.cern,https://github.com/root-project/root/pull/4389,2,['avoid'],['avoid']
Safety,"This should fix issue #10353. Use a spin lock to protect gInlined. Also, use in-place lamba calls instead of checking at each call if the static was initialized.; In addition to the (slight) performance gain, this make those intialization thread safe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10369:246,safe,safe,246,https://root.cern,https://github.com/root-project/root/pull/10369,1,['safe'],['safe']
Safety,This should reduce the amount of modules we load for namespace lookups at the cost of being more fragile. Improves the memory of hsimple.c from 145864 to 118696 and skips loading of 15 redundant modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6190:185,redund,redundant,185,https://root.cern,https://github.com/root-project/root/pull/6190,1,['redund'],['redundant']
Safety,"This tutorial crashed with the following stacktrace when run; interactively. Avoiding to register a canvas with the same name; multiple times fixes the crash:. ```; #8 0x00007f5b7876967d in TCanvas::Resize(char const*) (this=0x55e768e126c0) at ../graf2d/gpad/src/TCanvas.cxx:1740; #9 0x00007f5b3e90d668 in TRootCanvas::HandleContainerConfigure(Event_t*) (this=0x55e76852b460) at ../gui/gui/src/TRootCanvas.cxx:1789; #10 0x00007f5b3e8464fd in TGFrame::HandleEvent(Event_t*) (this=0x55e767938e70, event=0x7f5b79adff40) at ../gui/gui/src/TGFrame.cxx:476; #11 0x00007f5b3e7f4c9a in TGClient::HandleEvent(Event_t*) (this=0x55e768de2290, event=0x7f5b79adff40) at ../gui/gui/src/TGClient.cxx:846; #12 0x00007f5b3e7f531d in TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:656; #13 TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:648; #14 0x00007f5b3e7f536b in TGClient::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703; #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067; #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424; #17 0x00007f5b8130600d in (); #18 0x00007f5b79ae0450 in (); #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778; #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816; #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/cl",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9139:77,Avoid,Avoiding,77,https://root.cern,https://github.com/root-project/root/pull/9139,1,['Avoid'],['Avoiding']
Safety,This was detected by redundant loading on libRooStats when we are trying; to resolve _ZN5TTreeC1Ev. libRooStats contains it as an unresolved symbol; but the wrong flag checks did not filter it out. This patch should fix a few subtle test failures which fluctuate depending; on the linker optimizations.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2764:9,detect,detected,9,https://root.cern,https://github.com/root-project/root/pull/2764,2,"['detect', 'redund']","['detected', 'redundant']"
Safety,This will allow us to uniformly load all modules tagged as `[system]`. This way we avoid explicitly mentioning the module names (helpful for OSX).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1344:83,avoid,avoid,83,https://root.cern,https://github.com/root-project/root/pull/1344,1,['avoid'],['avoid']
Safety,This will avoid compiler warnings when compiling with option -Wsign-compare,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1883:10,avoid,avoid,10,https://root.cern,https://github.com/root-project/root/pull/1883,1,['avoid'],['avoid']
Safety,Thread safe TListOfFunctions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/46:7,safe,safe,7,https://root.cern,https://github.com/root-project/root/pull/46,1,['safe'],['safe']
Safety,Thread safety in TPad,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6510:7,safe,safety,7,https://root.cern,https://github.com/root-project/root/issues/6510,1,['safe'],['safety']
Safety,Thread safety issues with TListOfFunctions was found using the CMS threaded framework. These changes were done in consultation with Philippe Canal.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/46:7,safe,safety,7,https://root.cern,https://github.com/root-project/root/pull/46,1,['safe'],['safety']
Safety,Thread-safe TClass enums and TCling return values,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/55:7,safe,safe,7,https://root.cern,https://github.com/root-project/root/pull/55,1,['safe'],['safe']
Safety,Thread-safe changes specifically affecting reading/writing different ROOT files from different threads. These changes require the use of C++11.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12:7,safe,safe,7,https://root.cern,https://github.com/root-project/root/pull/12,1,['safe'],['safe']
Safety,Thread-safe determination of TObject::IsOnHeap,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8:7,safe,safe,7,https://root.cern,https://github.com/root-project/root/pull/8,1,['safe'],['safe']
Safety,Thread-safe interaction with all enum lists,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/56:7,safe,safe,7,https://root.cern,https://github.com/root-project/root/pull/56,1,['safe'],['safe']
Safety,Thread-safety issue in TClassEdit (StdLen)? [6.24.06],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10353:7,safe,safety,7,https://root.cern,https://github.com/root-project/root/issues/10353,1,['safe'],['safety']
Safety,Timeout of 600s added to ExternalProjects,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7136:0,Timeout,Timeout,0,https://root.cern,https://github.com/root-project/root/pull/7136,1,['Timeout'],['Timeout']
Safety,Timeout parameter added to ExternalProject,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7141:0,Timeout,Timeout,0,https://root.cern,https://github.com/root-project/root/pull/7141,1,['Timeout'],['Timeout']
Safety,To avoid compiler warning,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15325:3,avoid,avoid,3,https://root.cern,https://github.com/root-project/root/pull/15325,1,['avoid'],['avoid']
Safety,"To avoid fallback to numeric differentiation because the function is not; inlined. The pullbacks were automatically generated with Clad master, and then; manually simplified. It was carefully checked that the updated unit; tests cover all code branches of the pullback.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15501:3,avoid,avoid,3,https://root.cern,https://github.com/root-project/root/pull/15501,1,['avoid'],['avoid']
Safety,"To avoid having to use regex to parse trailing curly brackets with/without trailing whitespaces, the code command string is cleaned with the following strategy:; - Trim whitespaces at the borders; - Get the inner command (i.e. the part between quotes); - Trim whitespaces again; - Stitch back together. This should fix the unforeseen PyTorch failures brought by PyTorch's snafu (as described and https://github.com/pytorch/pytorch/issues/49460#issuecomment-911365091) and triggered by the use of std::regex introduced in https://github.com/root-project/root/pull/14716 . This replaces https://github.com/root-project/root/pull/14716 to fix https://github.com/root-project/root/issues/14462",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14773:3,avoid,avoid,3,https://root.cern,https://github.com/root-project/root/pull/14773,1,['avoid'],['avoid']
Safety,To avoid the largest merge conflicts this PR also backports some refactoring of RFriendInfo and TTreeProcessorMT. Fixes #12260 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12342:3,avoid,avoid,3,https://root.cern,https://github.com/root-project/root/pull/12342,1,['avoid'],['avoid']
Safety,To avoid warnings such as `_rvec.py:95: SyntaxWarning: invalid escape sequence '\p'`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15137:3,avoid,avoid,3,https://root.cern,https://github.com/root-project/root/pull/15137,1,['avoid'],['avoid']
Safety,"To be able compile with `-Dcxxmodules=ON`, one has to avoid `${CMAKE_BINARY_DIR}/include` in all include paths. Otherwise compiler can find same include (like `TString.h`) in ROOT source directories and in `${CMAKE_BINARY_DIR}/include`. But many builtins using `${CMAKE_BINARY_DIR}/include` to install their headers and therefore library appends that path to public include paths. . This PR tries to copy `VDT` and `TBB` includes into `ginclude` directory and use this directory for the compilation. . Solves compilation problem on Linux platform with `cxxmodules` enabled. Probably same adjustment could be done for other builtins",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5445:54,avoid,avoid,54,https://root.cern,https://github.com/root-project/root/pull/5445,1,['avoid'],['avoid']
Safety,To be merged after #2313 to avoid conflicts for @imaxoi,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2392:28,avoid,avoid,28,https://root.cern,https://github.com/root-project/root/pull/2392,1,['avoid'],['avoid']
Safety,"To fix the timeouts seen in our CI runs of the distributed RDataFrame with Dask suite. In particular, the Dask version used was 2021.10.0. Version 2021.11.2 fixes a couple of deadlock bugs which were most probably responsible for the timeouts (see https://distributed.dask.org/en/stable/changelog.html#v2021-11-2). We bump the minimum Dask version to 2022.02.0 (; https://distributed.dask.org/en/stable/changelog.html#v2022-02-0) because it is the last version with support for Python 3.7 (the current minimum Python version for distributed RDataFrame). The test suite was run with Dask 2021.10.0 on both Ubuntu and Fedora, showing the timeout. Version 2021.11.2 doesn't timeout.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11371:11,timeout,timeouts,11,https://root.cern,https://github.com/root-project/root/pull/11371,4,['timeout'],"['timeout', 'timeouts']"
Safety,To help debug the timeouts seen on MacOS.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6264:18,timeout,timeouts,18,https://root.cern,https://github.com/root-project/root/pull/6264,2,['timeout'],['timeouts']
Safety,To make the RReader usable in multi-thread we ned to move the loch to all the COmpute funcitions in order to protect the setting of the input variables. This fixes #16600 as suggested in https://root-forum.cern.ch/t/tmva-rreader-not-multithread-safe/59662,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16616:245,safe,safe,245,https://root.cern,https://github.com/root-project/root/pull/16616,1,['safe'],['safe']
Safety,"Today I read User's Guide and spotted many mistakes I noticed when reading it for the first time 15 years ago. I thought that now is the time for me to act and to finally fix them.; I'm not a native speaker, so I don't insist on all of them (I still doubt the usage of articles when I write this small report). If it's really easier for you, the next time I can try to make a push release with the corrections. The good thing that I noted is that there are some fixes in the recent html pages compared to the pdf User's Guide of 2018, so I refer to this page when I cite the mistakes:; https://root.cern/root/htmldoc/guides/users-guide/Trees.html. 14.3; is the use the TTree::Show method; \- to use; 14.4; the branches and the leaves, is TTree::Print.; \- no need for a comma; 14.6; boxes"".; \- no need for the quote.; witch is marked; \- which is marked; exposed expression; \- I think that would sound better as ""set expression"" or another adjective.; Below them there are two text widgets; \- possible, but I think 'there' is redundant here.; for specifying; \- to specify; \-\- I think this text should be checked by a native speaker for articles and other issues.; When the “Rec” box is checked, the Draw and Scan commands; \- no need for quotes around Rec (or add them around Draw and Scan); 14.7; This picture shows the TTree class:; \- should be rewritten with a reference to the picture. On the pdf manual the picture is on a separate page, away from this line!; 14.7.3; save all branch buffers every n byte.; \- bytes.; 14.7.4; When a TTree is memory resident, you set it up so that it retains retain only the last few entries.; \- retains; For example, this can be very useful for monitoring purpose.; \- just for monitoring, remove 'purpose'. Maybe rewrite this phrase.; 14.7.6; The function TTree::GetUserInfo() allows adding any object defined by a user to the tree that is not depending on the entry number.; \- allows to add to the tree any user\-defined object that doesn't depend on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7284:1029,redund,redundant,1029,https://root.cern,https://github.com/root-project/root/issues/7284,1,['redund'],['redundant']
Safety,Torus.cxx:576; /opt/root_src/geom/geom/src/TGeoTorus.cxx:577:21: warning: Value stored to 'nbPnts' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'nbPnts' is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:577; /opt/root_src/geom/geom/src/TGeoTorus.cxx:646:10: warning: Value stored to 'indx' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'indx' is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:646; /opt/root_src/geom/geom/src/TGeoTorus.cxx:661:10: warning: Value stored to 'indx' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'indx' is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:661; /opt/root_src/geom/geom/src/TGeoTorus.cxx:697:7: warning: Value stored to 'i' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'i' is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:697; /opt/root_src/geom/geom/src/TGeoTorus.cxx:741:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:741; /opt/root_src/geom/geom/src/TGeoTorus.cxx:1065:13: warning: Value stored to 's' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 's' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:1065; /opt/root_src/geom/geom/src/TGeoTrd1.cxx:199:13: warning: Value stored to 'snxt' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'snxt' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTrd1.cxx:199; /opt/root_src/geom/geom/src/TGeoTrd1.cxx:317:13: warning: Value stored to 'snxt' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'snxt' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTrd1.cxx:31,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:66209,safe,safe,66209,https://root.cern,https://github.com/root-project/root/issues/7428,1,['safe'],['safe']
Safety,Tree:Fix ROOT-10829. Avoid using deleted object.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5924:21,Avoid,Avoid,21,https://root.cern,https://github.com/root-project/root/pull/5924,1,['Avoid'],['Avoid']
Safety,TreePlayer-test: avoid use after delete of TEntryList by TTree,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10031:17,avoid,avoid,17,https://root.cern,https://github.com/root-project/root/pull/10031,1,['avoid'],['avoid']
Safety,Try to debug Windows Debug failures / timeouts (?),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16089:38,timeout,timeouts,38,https://root.cern,https://github.com/root-project/root/pull/16089,1,['timeout'],['timeouts']
Safety,"UNIX terminals, e.g. vt100, send escape sequences for many special key combinations. Entering the history search mode assigned a specific meaning to the `ESC` character and disabled the processing of escape sequences, thus accidentally printing some characters that are part of a CSI. As a workaround, avoid changing the meaning of `ESC`; users can still use the well-known `ESC ESC` sequence (or any other editor command, e.g. move left/right) to exit the history search mode. This change only affects UNIX terminals. Closes issue #10209. ## Checklist:; - [X] tested changes locally. This PR fixes #10209.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10281:302,avoid,avoid,302,https://root.cern,https://github.com/root-project/root/pull/10281,1,['avoid'],['avoid']
Safety,Undefine HZ macro to avoid name clash with variable name,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/309:21,avoid,avoid,21,https://root.cern,https://github.com/root-project/root/pull/309,1,['avoid'],['avoid']
Safety,Unfortunately I can't install Win64 version of Root 6.26 becasue of virus detection. See error during unzip and Btdefender report. ![error1](https://user-images.githubusercontent.com/75624059/193414303-f5b7d9c8-4837-431d-b7e2-e7f04c94e34b.JPG); ![error2](https://user-images.githubusercontent.com/75624059/193414309-ece88fe7-b75c-47ce-ac39-620b567ba7b3.JPG),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11473:74,detect,detection,74,https://root.cern,https://github.com/root-project/root/issues/11473,1,['detect'],['detection']
Safety,"Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code using a templated class. The functionality is completely unchanged, this is only to avoid code repetition.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12735:140,avoid,avoid,140,https://root.cern,https://github.com/root-project/root/pull/12735,1,['avoid'],['avoid']
Safety,Unset GLEW_FOUND in case of Mac OS X builds with CMake 3.17 (to avoid…,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5357:64,avoid,avoid,64,https://root.cern,https://github.com/root-project/root/pull/5357,1,['avoid'],['avoid']
Safety,Updating comment about bug in ccache 3.1.x used together with clang (https://bugzilla.samba.org/show_bug.cgi?id=8118).; In commit was added the detection of version of ccache and extra check to apply flag -Qunused-argument for ccache version less then 3.2.0.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2643:144,detect,detection,144,https://root.cern,https://github.com/root-project/root/pull/2643,1,['detect'],['detection']
Safety,Use Cling Interpreter to get at run time Python executable and avoid a compilation error when running the tutorial,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10253:63,avoid,avoid,63,https://root.cern,https://github.com/root-project/root/pull/10253,1,['avoid'],['avoid']
Safety,Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the ; model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5.; .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13533:54,avoid,avoids,54,https://root.cern,https://github.com/root-project/root/pull/13533,3,['avoid'],"['avoid', 'avoids']"
Safety,Use SafeDelete in several gui classes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7696:4,Safe,SafeDelete,4,https://root.cern,https://github.com/root-project/root/pull/7696,1,['Safe'],['SafeDelete']
Safety,"Use `std::span` instead of `std::vector const&` for function parameters in Minuit2. The motivation is that `std::span` is more general. If the function takes a `std::vector const&`, the inputs are forced to be allocated on the heap. So if one wants to call functions with constant size or even scalar input, that would cause a large overhead. This overhead can be avoided when generalizing with `std::span`. The standalone Minuit2 build files were also changed to consider the; `std::span` backport to C++17 that is already in ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15037:364,avoid,avoided,364,https://root.cern,https://github.com/root-project/root/pull/15037,1,['avoid'],['avoided']
Safety,"Use a single executable to parse all ONNX input files and generate the appropriate headers. This speed up the parsing especially in the case of using ROOT files, since we avoid the initialization/loading of libraries for every file. The CMakeFile is modified to generate automatically the C++ code to parse all input files",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12070:171,avoid,avoid,171,https://root.cern,https://github.com/root-project/root/pull/12070,1,['avoid'],['avoid']
Safety,Use consistent wording of the comments in the different TMVA classification tests to avoid confusion,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12375:85,avoid,avoid,85,https://root.cern,https://github.com/root-project/root/pull/12375,1,['avoid'],['avoid']
Safety,Use different filename in loopdir.C and loopdir11.C to avoid race condition,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11725:55,avoid,avoid,55,https://root.cern,https://github.com/root-project/root/pull/11725,1,['avoid'],['avoid']
Safety,Use direct cast to double to avoid warnings in StringConv.hxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4321:29,avoid,avoid,29,https://root.cern,https://github.com/root-project/root/pull/4321,1,['avoid'],['avoid']
Safety,Used in Qt5WebEngine chrome does not support `await import` statement; in main module body. But this is the only way for now to work with; node.js. To avoid problems just exclude peace of code marked; correspondently. Just a workaround. Backport of #10196,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10197:151,avoid,avoid,151,https://root.cern,https://github.com/root-project/root/pull/10197,1,['avoid'],['avoid']
Safety,Used in Qt5WebEngine chrome does not support `await import` statement; in main module body. But this is the only way for now to work with; node.js. To avoid problems just exclude peace of code marked; correspondingly. Just a workaround. Enables usage of future JSROOT fully based on es6 modules,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10196:151,avoid,avoid,151,https://root.cern,https://github.com/root-project/root/pull/10196,1,['avoid'],['avoid']
Safety,Used in `RCanvas::SaveAs()` method to avoid failure message when image production in ; tutorials macros is not possible. Should fix newly introduced errors in Jenkins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13115:38,avoid,avoid,38,https://root.cern,https://github.com/root-project/root/pull/13115,1,['avoid'],['avoid']
Safety,"Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14266:126,avoid,avoid,126,https://root.cern,https://github.com/root-project/root/pull/14266,2,['avoid'],['avoid']
Safety,"Using template functions in the generated code can cause linker errors, which is avoided with this suggested commit. Backport of https://github.com/root-project/root/pull/15502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15587:81,avoid,avoided,81,https://root.cern,https://github.com/root-project/root/pull/15587,1,['avoid'],['avoided']
Safety,"Using template functions in the generated code can cause linker errors,; which is avoided with this suggested commit. To be backported to the 6.32 branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15502:82,avoid,avoided,82,https://root.cern,https://github.com/root-project/root/pull/15502,1,['avoid'],['avoided']
Safety,VMC update: Added support for user defined sensitive detectors; plus few more features,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1892:53,detect,detectors,53,https://root.cern,https://github.com/root-project/root/pull/1892,1,['detect'],['detectors']
Safety,Variables are detected as used initialized if initialization is done via; a call to the interpreter.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3722:14,detect,detected,14,https://root.cern,https://github.com/root-project/root/pull/3722,1,['detect'],['detected']
Safety,"Via special command from client move object in list of primitives to the; end. Reflect changes which are done with ""Bring to front"" menu command; on client side. Supported for objects like `TLine`, `TBox`, `TMarker`, `TPave` and few; others. It is more safer version of `TObject::Pop()` method - do not relies on `gPad`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13089:253,safe,safer,253,https://root.cern,https://github.com/root-project/root/pull/13089,1,['safe'],['safer']
Safety,WIP: Avoid link on Python on macOS clang,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3396:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/3396,1,['Avoid'],['Avoid']
Safety,"Warning appears when building on Windows:. ```; Diagnostics.cpp; C:\git\root\interpreter\cling\lib\Utils\Diagnostics.cpp(37,27): warning; C4805: '|': unsafe mix of type 'bool' and type; 'int' in operation; [C:\Soft\root_64\interpreter\cling\lib\Utils\obj.clingUtils.vcxproj]; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13444:150,unsafe,unsafe,150,https://root.cern,https://github.com/root-project/root/pull/13444,1,['unsafe'],['unsafe']
Safety,"Warning like:; ```; geom/geom/src/TGeoManager.cxx:521:4: warning: this ‘if’ clause does not guard... [-Wmisleading-indentation]; 521 | if (fHashVolumes) fHashVolumes->Clear(""nodelete""); SafeDelete(fHashVolumes);; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8316:186,Safe,SafeDelete,186,https://root.cern,https://github.com/root-project/root/pull/8316,1,['Safe'],['SafeDelete']
Safety,"Warnings appear due to PEP 590 adding the tp_vectorcall field to some; structs which remain uninitialized in CPyCppyy. Following the conventions upstream, because the standard ensures a; zero-initialization, it's safe the leave them uninitialized such as also; done in the Python codebase itself. See discussion here:; https://bitbucket.org/wlav/cppyy/issues/186/warnings-with-python-38-due-to-vectorcall",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4737:213,safe,safe,213,https://root.cern,https://github.com/root-project/root/pull/4737,1,['safe'],['safe']
Safety,"We are currently discussing what the next ROOT release version number will be, and if we want to remove the deprecated methods now. To avoid the annoying warnings, change the check to 6.33.02; *if* we release a development release later this year, it would likely be called 6.33.01 or 6.33.02. Afterwards master would be bumped to 6.33.03 and we would again be reminded to remove the methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15148:135,avoid,avoid,135,https://root.cern,https://github.com/root-project/root/pull/15148,1,['avoid'],['avoid']
Safety,"We are working on LCFIPlus, a flavor tagging software used for linear collider (ILC/CLIC) studies.; We use multi-class BDT with output of b-tag, c-tag, and uds-tag (3 outputs).; We also separate events into four categories according to number of reconstructed vertices; (0-vtx, 1-vtx, 1-vtx+1-partial-vtx, and 2-vtx) which are trained and evaluated independently.; In the previous release with TMVA 4.1.0 we can use the output of BDTs as variables common to ; all categories, because the average value of eg. b-tag output from each BDT; over full training samples reflects the fraction of b events in the training samples.; (eg. if we have 80% of b and 20% of c + uds, we have the avarage value of .8 for b-tag output.); We found this feature is not preserved in the latest releases (after TMVA 4.1.2); due to the normalization procedure introduced in that version.; In result this causes significant degradation of our flavor tagging performance,; which was reported from a user using latest ROOT/TMVA.; We also found that just switching off the normalization procedure in the ROOT 6.06/TMVA 4.2.1; gives very similar performance to the ROOT 5.28/TMVA 4.1.0.; Therefore, we need to switch off the normalization to keep the performance,; which is realized in an option implemented in this pull request.; We hope this will be accepted, to avoid us from patching this to every release of ROOT; we use for studies using LCFIPlus flavor tagging feature.; We set this option to non-default, so current users should not be affected by this change.; ![btag-100k-root-6 06 02-skipnorm](https://cloud.githubusercontent.com/assets/7939934/18453216/0f501eb0-78f3-11e6-892c-912f9b68553d.png); B-tag performance with the SkipNormalization option; ![btag-100k-root-6 06 02-noskipnorm](https://cloud.githubusercontent.com/assets/7939934/18453215/0f4e6b60-78f3-11e6-94bd-b4be9631937d.png); B-tag performance without the SkipNormalization option",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/244:1338,avoid,avoid,1338,https://root.cern,https://github.com/root-project/root/pull/244,1,['avoid'],['avoid']
Safety,We can avoid quite some code repetition by employing a single `using` statement to ensure that the base class methods are not hidden.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11915:7,avoid,avoid,7,https://root.cern,https://github.com/root-project/root/pull/11915,1,['avoid'],['avoid']
Safety,We can change the code in the ROOT facade such that `gROOT` is always; retrieved via cppyy. This was done for `gInterpreter` and `gSystem`; already anyway. This is part of the general campaign of avoiding pythonization code in C++.; The experience of the last weeks has clearly shown that this is less robust than having the code on the Python side (see for example the discussion in #15788).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15833:196,avoid,avoiding,196,https://root.cern,https://github.com/root-project/root/pull/15833,1,['avoid'],['avoiding']
Safety,"We can't use the interpreter when generating a PCM as this would; generate AST nodes which then would end up in the module, which; is causing a long chain of modules (such as redefinitons as we; suddenly have the same cling warpper function multiple times). In this code path we seem to always have a number that we want; to convert to a string. So let's just use atol instead here if; the argument is just a number, which should avoid the issue with; the generated code. As we also now check if the input is a number, I added an assert; that verifies we only call atol when the string is actually a; number.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/807:430,avoid,avoid,430,https://root.cern,https://github.com/root-project/root/pull/807,1,['avoid'],['avoid']
Safety,We disabled that test in https://github.com/root-project/root/pull/14281. Relevant test failure output:; ```; ROOT::TestSupport::ForbidDiagnostics::handler(): Diagnostic in 'TUnixSystem::ACLiC':; creating shared library /github/home/ROOT-CI/build/core/metacling/test/concurrent_load_unload_one_lib_per_thread_4_cpp.so; terminate called after throwing an instance of 'std::bad_alloc'; what(): std::bad_alloc; CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14121:522,abort,aborted,522,https://root.cern,https://github.com/root-project/root/issues/14121,1,['abort'],['aborted']
Safety,"We get these symbols even for a simple hello world message. While it is not clear if we can skip all weak undefined symbols, we can certainly skip those which get resolved to libgcj.so and libitm.so. Oddly enough gcc emits a weak undefined symbol to _Jv_RegisterClasses (resolved in libgcj.so) which is some gcc/java library. _ITM_deregisterTMCloneTable and _ITM_registerTMCloneTable are emitted because (resolved in libitm.so) of pointer arithmetics for transactional memory support. The current understanding is that we can safely omit these when harvesting library dependencies. This should fix the rootbench builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4254:526,safe,safely,526,https://root.cern,https://github.com/root-project/root/pull/4254,1,['safe'],['safely']
Safety,"We have to avoid using the CPyCppyy internals in the ROOT pythonization; libray. Otherwise, the ROOT pythonizations will break when updating to the; new CPyCppyy, where the internals have changed a lot. This commit makes sure the internals are not used where it can easily; avoided by using the public CPyCppyy API, or using the C Python API; directly instead of some private compatibility macros defined in; CPyCppyy (that were necessary in the past to support both Python 2 and; 3). Furthermore, the private sources of `CPyCppyy` are now not publically; exposed anymore at the CMake level. This means that we are now forced to; include them via relative paths in the ROOT repository. This makes is; much easier to spot remaining usage of the internal headers (it is quite; hard to tell otherwise that `Utility.h` is a private header from; CPyCppyy). Better exposing this should help in the discussion about how; the get rid of the remaining usage of private headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14414:11,avoid,avoid,11,https://root.cern,https://github.com/root-project/root/pull/14414,2,['avoid'],"['avoid', 'avoided']"
Safety,We implement a workaround for ctest. ROOT_ADD_TEST cmake macro adds a test executable by invoking CMAKE_COMMAND -DCMD=... This breaks our FindLibraryName function which depends on dladdr and the cmake executable confuses it. This branch is not taken outside of ctest where the code just works. This was broken before but worked because we scanned all possible dynamic paths for rdict files which is redundant.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3747:399,redund,redundant,399,https://root.cern,https://github.com/root-project/root/pull/3747,1,['redund'],['redundant']
Safety,"We might be in a situation where we linked the library into an executable and; our trigger function is inside it. There is no point in trying to load rdict; and pcm files as it will fail. In that case we exit early avoiding the; invalid state pointed by an assert. This patch is another try to fix the assert in the incrementals. @Axel-Naumann, I have tested and this patch fixes the assert. However it does not fix the test failure. I checked with a local alternative patch which did not have the early exit but just avoided the LoadPCM section and the test fails in the same way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3896:215,avoid,avoiding,215,https://root.cern,https://github.com/root-project/root/pull/3896,2,['avoid'],"['avoided', 'avoiding']"
Safety,We need to have class.rules during configuration time to avoid silent error during generation of dictionary: Error in <TClass::ReadRules()>: Cannot find rules,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4876:57,avoid,avoid,57,https://root.cern,https://github.com/root-project/root/pull/4876,1,['avoid'],['avoid']
Safety,We needed to this change for avoiding infinite loop when building with cling modules,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2685:29,avoid,avoiding,29,https://root.cern,https://github.com/root-project/root/pull/2685,2,['avoid'],['avoiding']
Safety,We really need these symbols to be hidden. Solves; https://github.com/root-project/root/issues/12170. ```; Unable to find target for this triple (no targets are registered) *** Break *** abort; ```; where the llvm of PyTorch ends up using the RegisterTarget function of the llvm of cling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12179:187,abort,abort,187,https://root.cern,https://github.com/root-project/root/pull/12179,1,['abort'],['abort']
Safety,We see several timeouts when running in coverage mode; this might help. We also really do not care about coverage of interpreter/: there are dedicated test suites that are not run as part of testing ROOT. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13490:15,timeout,timeouts,15,https://root.cern,https://github.com/root-project/root/pull/13490,1,['timeout'],['timeouts']
Safety,"We should put the Python version check at the right place. Right now, the configuration logs tell you that ROOT requires Python; 3.0, because there is no minimum version yet, which can be misleading. Also, remove some redundant comments about the minimum C++ standard for `root7` and `webgui`. This PR should maybe be backported in one of the bulk backports, so the divergence between 6.32 and `master` doesn't increase too much.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15168:218,redund,redundant,218,https://root.cern,https://github.com/root-project/root/pull/15168,1,['redund'],['redundant']
Safety,"We will probably see an increasing amount of these failures with; C++ modules as we now deserialize all declarations instead of just; the PCH ones. To safe us a lot of debugging time on where to push; the needed transaction, let's directly print the stack trace here; in the rare case that we crash here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/921:151,safe,safe,151,https://root.cern,https://github.com/root-project/root/pull/921,1,['safe'],['safe']
Safety,"WebGui6 canvas: avoid TVirtualX, mark web canvas as batch",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2805:16,avoid,avoid,16,https://root.cern,https://github.com/root-project/root/pull/2805,1,['avoid'],['avoid']
Safety,"When CUDA is installed on macOS, `clang -v` prints also the version of CUDA that is found, which breaks version detection. As a workaround, `clang --version` prints the same information, but without printing the CUDA version. Fixes: [ROOT-9678](https://sft.its.cern.ch/jira/browse/ROOT-9678).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3926:112,detect,detection,112,https://root.cern,https://github.com/root-project/root/pull/3926,1,['detect'],['detection']
Safety,"When PR #4279 was initially sent on Aug 25th, the search for Python was; moved to RootBuildMacros in order to avoid a build failure due ot the; search for another package and the declaration of one of the new CMake; variables.; This seem not to be a problem anymore (something changed in the; meantime?), so the search for Python can be put back to the original; place.; This could also fix the tests failing with cxx17 due to a mismatch; between Python executable and libraries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4686:110,avoid,avoid,110,https://root.cern,https://github.com/root-project/root/pull/4686,1,['avoid'],['avoid']
Safety,"When RooFit's proxies were made more type safe, a typedef was introduced; to make the most type-general proxy equivalent to RooFit's previous; ""RooRealProxy"". This ensures backward compatibility.; However, the typedef and not the actual template instantiation has to be; mentioned in LinkDef.h. Otherwise, users will get a warning when reading; files. This fixes the warning that e.g. appears in #5530.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5536:42,safe,safe,42,https://root.cern,https://github.com/root-project/root/pull/5536,1,['safe'],['safe']
Safety,"When a continuous PDF is fit to binned data, bins need to be sampled more fine grained to avoid biases. This fixes; ROOT-3874; ROOT-3635. Note that the first commits before `AddRooBinSamplingPdf` are in #6693, so no need to review those.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6694:90,avoid,avoid,90,https://root.cern,https://github.com/root-project/root/pull/6694,1,['avoid'],['avoid']
Safety,"When building ROOT on slc6, it will detect and use xz (version 4.999.9) provided by OS, which is reported to have compatibility issues (`R__unzipLZMA: error 8 in lzma_code`). The proposed change fixes that by using CMake's own module (present since CMake 3.0.2) for detecting xz *and* checking it's version.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3838:36,detect,detect,36,https://root.cern,https://github.com/root-project/root/pull/3838,2,['detect'],"['detect', 'detecting']"
Safety,"When calling `TObject::kOverwrite`, the data itself is not actually replaced--the metadata is changed to avoid multiple cycles, but the data persists invisibly. Similar for `Purge`. This documents that behavior.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5097:105,avoid,avoid,105,https://root.cern,https://github.com/root-project/root/pull/5097,1,['avoid'],['avoid']
Safety,"When cling is compiled standalone against an external instance of LLVM and clang, cling cannot be reliably used. This is because ```createCI()``` throws an error about a non-existing clang resource directory inside the cling directories and a crash occurs shortly afterwards, when a code to be interpreted is entered. The reason of the above seems to be the inability of cling and its build system to flag properly that there is no built-in LLVM/clang and therefore cling should use the external one instead. This PR fixes it by introducing the ```LLVM_PATH``` pre-processor definition which is populated automatically by CMake with the detected LLVM directory as soon as both ```builtin_llvm``` and ```builtin_clang``` are off. If I should have done this in a different way, there are pieces of code where ```LLVM_PATH``` should be also used but it isn't (or vice versa), or you have any other comments, I'm happy to hear your suggestions :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13175:637,detect,detected,637,https://root.cern,https://github.com/root-project/root/pull/13175,1,['detect'],['detected']
Safety,"When cmake runs, detect and write chrome version into the rootrc file. When headless browser is required - switch `--headless=new` only for detected new version of chrome",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14800:17,detect,detect,17,https://root.cern,https://github.com/root-project/root/pull/14800,2,['detect'],"['detect', 'detected']"
Safety,"When composing the expressions to jit autoparsing is redundant as we; know what and when to synthesize. This patch has two effects, first it limits the recursive behavior of; autoparse and autoload (useful for modules); and secondly avoids deep call; chains of virtual function calls. EDIT: Rationale -- I was working on a new, cxxmodules-based implementation of TCling::GetClassSharedLibs which does not rely on rootmap files. I had to debug a few failures in RDF and I noticed the recursive calls to autoparse and autoload always without success. I thought it might be a simplification (and performance optimization) if we disabled that part.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3765:53,redund,redundant,53,https://root.cern,https://github.com/root-project/root/pull/3765,2,"['avoid', 'redund']","['avoids', 'redundant']"
Safety,"When creating histograms without adding them to gDirectory, do not use; global TH1::fgDirectoryStatus flag, since it is not thread safe and use instead,; as suggested by Philippe, TDirectory::TContext.; By creating a TDirectory::TContext witha null directory, gDirectory is set in the current context to; a nullptr and the corresponding histograms will not be added to gDirectory. Fix this for TGraph, TGraph2D and TEfficiency. This should finally fix ROOT-8095",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6514:131,safe,safe,131,https://root.cern,https://github.com/root-project/root/pull/6514,1,['safe'],['safe']
Safety,"When creating the test data sets for the CNN and RNN tutorials, it is better to create the TTree attached to the output file so we can avoid a potential issue when deleting the file and the TTree's",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14368:135,avoid,avoid,135,https://root.cern,https://github.com/root-project/root/pull/14368,1,['avoid'],['avoid']
Safety,"When deleting a TTree, we delete the list of friends and aliases. Their deletion is broadcasted; through RecursiveRemove which eventually reached back to the original TTree.; And if TTree::RecursiveRemove then tries to call RecursiveRemove on those deleted list ... then; disaster follows ... in the form of:. ```; pure virtual method called; terminate called without an active exception; Aborted (core dumped); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5924:389,Abort,Aborted,389,https://root.cern,https://github.com/root-project/root/pull/5924,1,['Abort'],['Aborted']
Safety,When getting the HIstogram associated to a TGraph avoid to add it by default first in gDirectory by using TH1::AddDirectory(false).; This fixes ROOT-8095. This is already the case in TGraph2D::GetHistogram,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6493:50,avoid,avoid,50,https://root.cern,https://github.com/root-project/root/pull/6493,1,['avoid'],['avoid']
Safety,"When importing data from a TTree in a RooDataSet, if some of the branches are not existing in the Tree ; do not import any data and make an empty dataset. ; This avoid importing the variables using the current values, which will be identical for every event.; This fixes ROOT-5112. After https://github.com/root-project/root/commit/b5c2fb7909fbd1e483a3e17b21d24093409d67c1 an error message was printed, but this can pass easly unnoticed. . If one needs to add ad-hoc some column to the dataset, it is also very easy to add branches to a TTree, using RDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7347:162,avoid,avoid,162,https://root.cern,https://github.com/root-project/root/pull/7347,1,['avoid'],['avoid']
Safety,"When performing multi-thread reads of ROOT files, we need to pick the number; of TBB tasks among which we will divide the dataset. Our heuristic is ""try to produce around `T = N/ntrees` tasks per tree per; worker thread"": we don't know the number of clusters in each tree before; we open the files, so we don't know the total number of clusters upfront.; Instead we set a ""desired value"" of T tasks per tree and per thread, and; then when each thread opens a file it tries to make T tasks out of it (if; the file turns out to be too small, it might end up producing _less_ tasks than; desired. If we are processing `M > N` small files, we might end up producing; _more_ tasks per worker than N). N is a free parameter, and it represents the desired total number of; tasks per worker. If N is too low, parallelism will be too coarse-grained; and we might get imbalance/tails with bad parallelization.; The higher N is, the more CPU time we spend in task setup/teardown. Empirically, I believe we have set N too high (before this patch we set; it to 24). We often see runtime improvements in benchmarks by setting it; to a lower value, e.g. 10.; Again from experience, N == 10 should be a high-enough value to avoid; load imbalance between threads while it significantly reduces the amount; of tasks spawned (and the overhead that comes with it).; Therefore this patch sets N to 10. More discussion:; - https://mattermost.web.cern.ch/root/pl/8ay6my4pwbru7kzqs97f8xcdre; - https://docs.oneapi.com/versions/latest/onetbb/tbb_userguide/Task-Based_Programming.html",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8565:1208,avoid,avoid,1208,https://root.cern,https://github.com/root-project/root/pull/8565,1,['avoid'],['avoid']
Safety,When run C++17 kernel in Jupyter notebook cause some errors; due to currently clang-5.0 in https://root.cern.ch/download/cling/ is not; support c++17.; So add support to C++1z for Jupyter kernel and we can try some new; features in Jupyter notebook. for avoiding following error:. [I 05:46:38.253 NotebookApp] Kernel restarted:; d3413fa0-7046-4b63-912b-a286610eacc1; error: invalid value 'c++17' in '-std=c++17'; note: use 'c++98' or 'c++03' for 'ISO C++ 1998 with amendments' standard; note: use 'gnu++98' or 'gnu++03' for 'ISO C++ 1998 with amendments and; GNU extensions' standard; note: use 'c++11' for 'ISO C++ 2011 with amendments' standard; note: use 'gnu++11' for 'ISO C++ 2011 with amendments and GNU; extensions' standard; note: use 'c++14' for 'ISO C++ 2014 with amendments' standard; note: use 'gnu++14' for 'ISO C++ 2014 with amendments and GNU; extensions' standard; note: use 'c++1z' for 'Working draft for ISO C++ 2017' standard; note: use 'gnu++1z' for 'Working draft for ISO C++ 2017 with GNU; extensions' standard,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/952:254,avoid,avoiding,254,https://root.cern,https://github.com/root-project/root/pull/952,1,['avoid'],['avoiding']
Safety,"When the EDM value in Migrad is NaN, it nevertheless reports convergence, because failure to converge is detected with the condition (edm > edmval) which fails (wrongly) if edm is NaN. The added code aborts the minimization at the earliest point if edm is NaN.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6415:105,detect,detected,105,https://root.cern,https://github.com/root-project/root/pull/6415,2,"['abort', 'detect']","['aborts', 'detected']"
Safety,"When the Min or Max actions are jitted, their result type is always; double, independently of the column type. If the column type happens; to be of a different type, std::min won't compile because template; parameter type deduction is ambiguous.; We now always explicitly cast the arguments of std::min to the desired; result type to avoid the ambiguity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6436:334,avoid,avoid,334,https://root.cern,https://github.com/root-project/root/pull/6436,1,['avoid'],['avoid']
Safety,"When the Min or Max actions are jitted, their result type is always; double, independently of the column type. If the column type happens; to be of a different type, std::min won't compile because template; parameter type deduction is ambiguous.; We now always explicitly cast the arguments of std::min to the desired; result type to avoid the ambiguity. This fixes #6435.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6437:334,avoid,avoid,334,https://root.cern,https://github.com/root-project/root/pull/6437,1,['avoid'],['avoid']
Safety,"When the column name contains a dot, we replace it with an underscore; and use the modified name as corresponding variable name for jitted; Defines/Filters.; To avoid potential name clashes with pre-existing columns, the; modified name is now prefixed with ""__tdf_arg_"", as it was already; the case before the latest refactoring of jitting. I'd like to introduce a test for this case, but I can't because of a different issue:; given a branch defined as `t.Branch(""v"", &v, ""a/I:b/I"")`, `Define(""a"", ""v.a"")` does not work: `""v""` comes before than `""v.a""` in the list of branches that we create, so it matches first, and later TDF complains that `""v""` is not a branch. @etejedor this is in the new `GetBranchNames`, do you think it might be an easy fix?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1857:161,avoid,avoid,161,https://root.cern,https://github.com/root-project/root/pull/1857,1,['avoid'],['avoid']
Safety,"When training a PyTorch model within TMVA (during `Factory::BookMethod`), this crash happens:; ```; : Preparing the Decorrelation transformation...; : Preparing the Gaussian transformation...; TFHandler_PyTorch : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]; : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]; : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]; : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]; : -----------------------------------------------------------; TFHandler_PyTorch : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]; : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]; : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]; : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]; : -----------------------------------------------------------; : Split TMVA training data in 6400 training events and 1600 validation events; : Print Training Model Architecture; : Option SaveBestOnly: Only model weights with smallest validation loss will be stored; Program aborted due to an unhandled Error:; Unable to find target for this triple (no targets are registered) *** Break *** abort; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12170:1123,abort,aborted,1123,https://root.cern,https://github.com/root-project/root/issues/12170,2,['abort'],"['abort', 'aborted']"
Safety,"When using C++11, the cache used by G__FastAllocString utilizes; a non-locking thread safe circular buffer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/34:86,safe,safe,86,https://root.cern,https://github.com/root-project/root/pull/34,1,['safe'],['safe']
Safety,"When using `TLegend::AddEntry()`, it is not necessary to get a pointer to the plotted object via `RooPlot::findObject()`. One can just use the `AddEntry` overload that takes the name as a string, and then looks up the object in the plot itself. This should be updated to avoid that users copy-paste overly verbose code from the tutorials. I noticed this when copy pasting code myself for a RooFit tutorial. Also fixes a typo in `rf711_lagrangianmorph.py`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11555:271,avoid,avoid,271,https://root.cern,https://github.com/root-project/root/pull/11555,1,['avoid'],['avoid']
Safety,"When using `builtin_openssl=ON`, CMake erroneously exports the builtin static libraries in `ROOTConfig-targets.cmake`, which causes problems with dependent projects. In order to avoid this, we need `Net` and `RHTTP` to use SSL as a private dependency. Since CMake requires `target_link_libraries()`; to either be all-plain (as before) or all-keyword (required to allow `PRIVATE` linking), we need to move the build system to use all-keyword linking only. Fixes: [ROOT-9532](https://sft.its.cern.ch/jira/browse/ROOT-9532).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2323:178,avoid,avoid,178,https://root.cern,https://github.com/root-project/root/pull/2323,1,['avoid'],['avoid']
Safety,"When using option ""x"" for TPrincipal::MakeHistograms(), the histogram is made with the number of bins as calculated by:; `Int_t xbins = fNumberOfDataPoints/100;`; If the number of data points is less than 100, this will try to make a histogram with 0 bins. The code still functions, as TH1 itself compensates by setting the number of bins to 1, and issuing a warning. But clearly TPrincipal could be smarter to avoid the unnecessary / unhelpful warning. The same happens for the calculation of `dbins` with the ""d"" option. Sidenote: this was a non-urgent issue I raised 7 years ago, but if no one else has been complaining, it's clearly a low priority ;-). https://sft.its.cern.ch/jira/browse/ROOT-8238. -Gene",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12926:411,avoid,avoid,411,https://root.cern,https://github.com/root-project/root/pull/12926,1,['avoid'],['avoid']
Safety,"When we run into an unkown identifier that is a namespace, we don't; really need to load its corresponding modules. Instead, we create a new; module that forward declared all namespaces and always load it first. By; doing so, we can avoid loading a lot of unnecessary modules. Signed-off-by: Jun Zhang <jun@junz.org>",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10910:233,avoid,avoid,233,https://root.cern,https://github.com/root-project/root/pull/10910,1,['avoid'],['avoid']
Safety,"When wrong-formatted TMessage is received, length of buffer may be 0.; As result, buffer may not be allocated at all.; One should avoid that in such case memory is accessed",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4551:130,avoid,avoid,130,https://root.cern,https://github.com/root-project/root/pull/4551,1,['avoid'],['avoid']
Safety,"While TCanvas, shown in web-browser, marked as batch canvas, all customs object painting performed via gVirtualPS classes. Therefore one need to catch all these calls and record for SVG creation in the client. TWebPadPainter is remained as fall-back solution if some objects painter does not follow strictly the ROOT painting logic. ; Highly optimize data which are transferred to clients - avoid large TObject overhead for simple fill/line/marker attributes. ; Try to merge painting if there are too many objects on the TCanvas - like in tutorials/graphics/greyscale.C macro. In such case simple SVG fails - one should try to combine primitives drawn with same attributes",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2862:391,avoid,avoid,391,https://root.cern,https://github.com/root-project/root/pull/2862,1,['avoid'],['avoid']
Safety,"While debugging the failure triggered by a recent PR updating the behavior of `gDirectory`: https://github.com/root-project/root/pull/11908#issuecomment-1361086304 (The reported error is that a name/symbol that should have been detected and loaded by Cling was not found ... the direct cause was that `gDirectory` was unexpectedly `nullptr`), I discovered that notebooks (or a least the way they are run in the test `JupyROOT-ROOT_kernel_notebook`), runs several threads to actually execute the cells. It is also clear from my investigation that it does not enable thread safety. Whether we need to change depends on whether `Jupyter` (or the way it is use here) guaranteed that only one of the thread would ever be run concurrently (if not then we must enable thread safety). However, one more thing to consider is that when thread safety is enabled, each thread get its own thread local gDirectory pointers. If each cell is run in a separate thread, then change to `gDirectory` in one cell will not be reflected in the next cell. (this would be true also for any user level thread local variable).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11955:228,detect,detected,228,https://root.cern,https://github.com/root-project/root/issues/11955,4,"['detect', 'safe']","['detected', 'safety']"
Safety,"While virtual `Copy(TObject &obj)` method is used in copy constructors, wrong cast may happen.; Simplest reproducer:; ```; TProfile p;; TH1D h(p);; ```; Causes fatal crash:; ```; Fatal in <TProfile::Copy>: Cannot copy a TProfile in a TH1D; aborting; #0 0x00007f2293b0a83a in wait4 () from /lib64/libc.so.6; #1 0x00007f2293a7403b in do_system () from /lib64/libc.so.6; #2 0x00007f22942c5a3d in TUnixSystem::StackTrace() () from /home/linev/build/webgui/lib/libCore.so; #3 0x00007f229418294c in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/linev/build/webgui/lib/libCore.so; #4 0x00007f22942497bd in ErrorHandler () from /home/linev/build/webgui/lib/libCore.so; #5 0x00007f22941988f4 in TObject::Fatal(char const*, char const*, ...) const () from /home/linev/build/webgui/lib/libCore.so; #6 0x00007f227d6fbde8 in TProfile::Copy(TObject&) const [clone .cold] () from /home/linev/build/webgui/lib/libHist.so; #7 0x00007f227d80aba7 in TH1D::TH1D(TH1D const&) () from /home/linev/build/webgui/lib/libHist.so; #8 0x00007f228c9dc028 in ?? (); #9 0x00007f2293f83460 in ?? (); #10 0x00007f228f062cfe in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /home/linev/build/webgui/lib/libCling.so; #11 0x00007f228efd6ea4 in cling::Interpreter::executeTransaction(cling::Transaction&) () from /home/linev/build/webgui/lib/libCling.so; #12 0x00007f228f07511c in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > >&, bool) () from /home/linev/build/webgui/lib/libCling.so; #13 0x00007f228f076c68 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/linev/build/webgui/lib/libCling.so; #14 0x00007f228efd4bb8 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<cha",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10919:240,abort,aborting,240,https://root.cern,https://github.com/root-project/root/issues/10919,1,['abort'],['aborting']
Safety,"Wim says: adding 'shell=True' makes the command run on; /bin/sh and allows you to use shell features (such as expansion and; replacement of variables). But nothing in the command seems to need that; feature, and anyway it's a risky thing to rely on, or what am I missing?. Spawning an intermediate shell makes a mess of the environment when running; under conda on Mac in the non-build environment. Running the normal way as; per the patched line above, and all seems good.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4406:226,risk,risky,226,https://root.cern,https://github.com/root-project/root/pull/4406,1,['risk'],['risky']
Safety,"With Davix not present on the machine, the tutorials tutorials/v7/ntuple/ntpl004_dimuon.C is ran and fails:; ```; ""tutorial-v7-ntuple-ntpl004_dimuon"" start time: Dec 04 11:53 CST; Output:; ----------------------------------------------------------. Processing /home/pcanal/root_working/code/root/tutorials/v7/ntuple/ntpl004_dimuon.C...; terminate called after throwing an instance of 'std::runtime_error'; what(): Cannot find plugin handler for RRawFileDavix; CMake Error at /home/pcanal/root_working/build/master-opt/RootTestDriver.cmake:237 (message):; error code: Child aborted. <end of output>; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6916:573,abort,aborted,573,https://root.cern,https://github.com/root-project/root/issues/6916,1,['abort'],['aborted']
Safety,"With `RNTupleWriter::Append` / `RNTupleParallelWriter::Append`, the application must organize synchronization to the underlying `TFile`. To avoid locking for every `Fill`, https://github.com/root-project/root/pull/15239 introduced `FillNoCommit` and gives some guarantees so that locking is only necessary when calling `CommitCluster`. However that's still not ideal because `CommitCluster` will first call `CommitCluster` on every field, which will flush the column write buffers and trigger compression. This can be substantial for many fields or very large page sizes (compared to the cluster size). Ideally a `RNTupleFillContext` had a method to perform this work outside of the critical section, like `PrepareCommitCluster` or `FlushPageBuffers`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16241:140,avoid,avoid,140,https://root.cern,https://github.com/root-project/root/issues/16241,1,['avoid'],['avoid']
Safety,"With a task scheduler, `RPageSinkBuf::CommitPage` copies the uncompressed page; https://github.com/root-project/root/blob/226e4c00e5dc4b7aaf881bad810a0c78c8a14185/tree/ntuple/v7/src/RPageSinkBuf.cxx#L167-L170; for asynchronous compression. However, the uncompressed page is only released in `FlushClusterImpl` which leads to significant memory overhead for high compression factors (such as CMS miniAOD). In principle, the uncompressed buffer can be released directly after compression, which is only a bit tricky because it requires the allocator to be thread-safe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16753:561,safe,safe,561,https://root.cern,https://github.com/root-project/root/issues/16753,1,['safe'],['safe']
Safety,With the latest version of the `centos` C++ compiler a new warning appeared in 20 years old code.; The way to fix/deactivate it is to compile the files producing this warning with the option `-Wbidirectional=none` (found by @couet) . @bellenot found the way to set this option in the `CMakeLists.txt` files for the compilers having this option.; Fix warning:; ```; warning: unpaired UTF-8 bidirectional character detected [-Wbidirectional=]; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9348:413,detect,detected,413,https://root.cern,https://github.com/root-project/root/pull/9348,1,['detect'],['detected']
Safety,"With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):; ```; Error in <readfile>: For entries 0 we have result=19200; ```; This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:; ```; if (!foundRelatedSplit) {; continue;; }; ```; which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```; diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx; index 58b50a93..e0aef7e1 100644; --- a/root/io/issue-9899/read_cmssw_class_v3.cxx; +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx; @@ -129,10 +129,8 @@ struct PersHighData {; }; int check(int slide = 1) {; int res = 0;; -#ifdef FIXED_ISSUE_99xx; for(auto &d : fPersLowData); res += d.check(slide, 0);; -#endif; for(auto &d : fLowData); res += d.check(slide * BIT(6), 10);; return res;; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9924:554,avoid,avoid,554,https://root.cern,https://github.com/root-project/root/issues/9924,1,['avoid'],['avoid']
Safety,"With this PR, a proper exception is thrown when a user tries to load an out-of-bounds RNTuple entry (instead of aborting due to a failed assert statement).; To prevent the `RColumn` destructor from attempting to again clean up the page for the entry that was (potentially) loaded prior to attempting to read the out-bounds entry, `fReadPage` in `RColumn` is reset to a null page before attempting to populate it. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14129:112,abort,aborting,112,https://root.cern,https://github.com/root-project/root/pull/14129,1,['abort'],['aborting']
Safety,"With very few entries passing a given RDataFrame cutflow, it can happen; that a TBB task ends up processing zero ""good"" entries.; In that scenario, it could happen that the first TTree header flushed to; the output file from a Snapshot action was for a tree with no entries and; no branches. This effectively set the number of branches to; zero for all the content written to file, even if following buffers; contained well-formed TTrees. With this commit, if the output tree contains zero entries, we avoid; flushing it to file. And since the next task will remove this TTree from; the output directory, we can be sure that the buffer with the malformed; TTree will never be written out. This fixes ROOT-9471. <hr>. The fix requires that output trees are deregistered from output directories at the end of a task, so that the output directory does not ever try to flush them. This is done by giving `SnapshotHelperMT` ownership of its output trees (see explanation in the relevant commit message).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2197:502,avoid,avoid,502,https://root.cern,https://github.com/root-project/root/pull/2197,1,['avoid'],['avoid']
Safety,"Without a task scheduler, seal in `CommitPage`. This avoids a page allocation and, in most cases, a copy of the uncompressed buffer (unless the element type is mappable and compression is disabled, in which case the sealed page would otherwise alias the page buffer). It also ensures that `CommitCluster` can vector-commit all sealed pages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14193:53,avoid,avoids,53,https://root.cern,https://github.com/root-project/root/pull/14193,1,['avoid'],['avoids']
Safety,"Writer::EmitStmt(unsigned int, unsigned int) (F:\gitP\root-project\root\build_x86_asan2\bin\libCling.dll+0x1121b5a6); #24 0x68c8b594 in clang::ASTStmtWriter::Emit(void) (F:\gitP\root-project\root\build_x86_asan2\bin\libCling.dll+0x1121b594); #25 0x68ca4c29 in clang::ASTWriter::WriteSubStmt(class clang::Stmt *) (F:\gitP\root-project\root\build_x86_asan2\bin\libCling.dll+0x11234c29); #26 0x68c8b96c in clang::ASTRecordWriter::FlushStmts(void) (F:\gitP\root-project\root\build_x86_asan2\bin\libCling.dll+0x1121b96c); #27 0x68b342ca in clang::ASTRecordWriter::Emit(unsigned int, unsigned int) (F:\gitP\root-project\root\build_x86_asan2\bin\libCling.dll+0x110c42ca); ; ==6948==HINT: if you don't care about these errors you may set allocator_may_return_null=1; SUMMARY: AddressSanitizer: out-of-memory (C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\bin\HostX64\x86\clang_rt.asan_dynamic-i386.dll+0x1003e141) ; ==6948==ABORTING; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(241,5): error MSB8066: Custom build for 'F:\gitP\root-project\root\build_x86_asan2\CMakeFiles\1b80de060c1a00976f83382f69cf2b7f\allDict.cxx.pch.rule;F:\gitP\root-project\root\build_x86_asan2\CMakeFiles\ecd3d997f4f89e0243288555110c5833\onepcm.rule;F:\gitP\root-project\root\CMakeLists.txt' exited with code 1. ; ```; ### To Reproduce; 1. Open a x86 Native Tools Command Prompt for VS 2019; 2. `git clone https://github.com/root-project/root.git root_src`; 3. `mkdir root_build && cd root_build`; 4. `cmake -G""Visual Studio 16 2019"" -A Win32 -Dtesting=ON -Droottest=ON ../root_src`; 5. `set _CL_= /fsanitize=address /GS- /wd5072 & set _LINK_= /InferASanLibs /incremental:no /debug` (please make sure use _ _ to inclose CL and LINK, since _ _ will style text Italic here ); 6. `set ASAN_OPTIONS=detect_odr_violation=0`; 7. `cmake --build . --config Release` . ### Setup; <!--; 1. Operating system: Windows 10; 2. How yo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9445:6097,ABORT,ABORTING,6097,https://root.cern,https://github.com/root-project/root/issues/9445,1,['ABORT'],['ABORTING']
Safety,Wrong delete operator was used (it is @a5db401 commit); To avoid any confusion in the future - just use TString instead,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4881:59,avoid,avoid,59,https://root.cern,https://github.com/root-project/root/pull/4881,1,['avoid'],['avoid']
Safety,[6.28] Avoid deprecated numpy.object,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12198:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/12198,1,['Avoid'],['Avoid']
Safety,[CI] Disable `tmva-cpu` on `alma9` to avoid openblas clashes with NumPy,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15302:38,avoid,avoid,38,https://root.cern,https://github.com/root-project/root/pull/15302,1,['avoid'],['avoid']
Safety,[CI] Update runner labels to avoid running on GPUs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16581:29,avoid,avoid,29,https://root.cern,https://github.com/root-project/root/pull/16581,1,['avoid'],['avoid']
Safety,[CMake] Add quotes to avoid failure on Windows node (?),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5271:22,avoid,avoid,22,https://root.cern,https://github.com/root-project/root/pull/5271,1,['avoid'],['avoid']
Safety,[CMake] Avoid duplicate linking against gtest,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16255:8,Avoid,Avoid,8,https://root.cern,https://github.com/root-project/root/pull/16255,1,['Avoid'],['Avoid']
Safety,[CMake] Avoid using deprecated `FindCUDA`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13437:8,Avoid,Avoid,8,https://root.cern,https://github.com/root-project/root/pull/13437,1,['Avoid'],['Avoid']
Safety,[CMake] Correctly return real (safe) install paths at runtime,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5084:31,safe,safe,31,https://root.cern,https://github.com/root-project/root/pull/5084,1,['safe'],['safe']
Safety,[CMake] Detect version of oneTBB,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14670:8,Detect,Detect,8,https://root.cern,https://github.com/root-project/root/pull/14670,1,['Detect'],['Detect']
Safety,[CMake] Fix version detection in `FindCUDNN.cmake`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15602:20,detect,detection,20,https://root.cern,https://github.com/root-project/root/pull/15602,1,['detect'],['detection']
Safety,[CPyCppyy] Avoid holding reference to `__main__` in the CPyCppyy API,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16403:11,Avoid,Avoid,11,https://root.cern,https://github.com/root-project/root/pull/16403,1,['Avoid'],['Avoid']
Safety,[DF] Add a sanity check to GetMergeableValue,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8978:11,sanity check,sanity check,11,https://root.cern,https://github.com/root-project/root/pull/8978,1,['sanity check'],['sanity check']
Safety,[DF] Avoid ROOT attribute lookup at module level,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10069:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10069,1,['Avoid'],['Avoid']
Safety,[DF] Avoid RVec construction+swap when possible,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11232:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/11232,1,['Avoid'],['Avoid']
Safety,[DF] Avoid TChain::AddClone in Snapshot when unnecessary,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2234:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/2234,2,['Avoid'],['Avoid']
Safety,[DF] Avoid calling InitSlot/FinaliseSlot multiple times on RDefines,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9199:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/9199,1,['Avoid'],['Avoid']
Safety,[DF] Avoid crash in tutorial due to reused canvas name,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9139:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/9139,1,['Avoid'],['Avoid']
Safety,[DF] Avoid duplicates in list of columns returned by GetColumnNames,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9699:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/9699,1,['Avoid'],['Avoid']
Safety,[DF] Avoid duplicates in list of columns returned by GetColumnNames (v6.26 backport),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9762:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/9762,1,['Avoid'],['Avoid']
Safety,[DF] Avoid exact comparisons on floating points,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11513:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/11513,1,['Avoid'],['Avoid']
Safety,[DF] Avoid expensive stringstream construction in RCsvDS,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10458:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10458,1,['Avoid'],['Avoid']
Safety,[DF] Avoid forward declarations of Define'd types,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3539:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/3539,3,['Avoid'],['Avoid']
Safety,[DF] Avoid heap allocation for column names,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9329:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/9329,1,['Avoid'],['Avoid']
Safety,"[DF] Avoid jitting a very large function body, which is slow",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9328:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/9328,1,['Avoid'],['Avoid']
Safety,[DF] Avoid memory-heavy histogram entry buffering in single-thread,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11552:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/11552,1,['Avoid'],['Avoid']
Safety,[DF] Avoid potential nullptr dereference,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8286:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/8286,1,['Avoid'],['Avoid']
Safety,[DF] Avoid public dependency of RDataFrame on `nlohmann::json`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14043:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/14043,1,['Avoid'],['Avoid']
Safety,[DF] Avoid registration of inner TChain with global lists,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11322:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/11322,1,['Avoid'],['Avoid']
Safety,[DF] Avoid relying on RVec class layout in Snapshot,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2757:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/2757,1,['Avoid'],['Avoid']
Safety,[DF] Avoid unused parameter warning in RDF ActionHelpers,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14044:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/14044,1,['Avoid'],['Avoid']
Safety,[DF] Avoid usage of Mathmore/gsl in df106 tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13989:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/13989,1,['Avoid'],['Avoid']
Safety,[DF] Avoid useless calls to TTree::GetBranch,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11538:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/11538,1,['Avoid'],['Avoid']
Safety,[DF] Avoid useless computation when we don't need its result.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9274:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/9274,1,['Avoid'],['Avoid']
Safety,[DF] Avoid using deprecated `std::iterator` in `TTreeReaderFast`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10491:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10491,1,['Avoid'],['Avoid']
Safety,[DF] Avoid using the same variable for 2 branches in in-memory tree,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11522:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/11522,1,['Avoid'],['Avoid']
Safety,[DF] Change test to avoid double free on Fedora39,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14803:20,avoid,avoid,20,https://root.cern,https://github.com/root-project/root/pull/14803,1,['avoid'],['avoid']
Safety,[DF] Move type-safety checks out of column readers,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11307:15,safe,safety,15,https://root.cern,https://github.com/root-project/root/pull/11307,1,['safe'],['safety']
Safety,[DF] Remove redundant call to TTreeReaderArray::GetSize,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8592:12,redund,redundant,12,https://root.cern,https://github.com/root-project/root/pull/8592,1,['redund'],['redundant']
Safety,[DF] Remove redundant calls to RDefine::InitSlot,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10812:12,redund,redundant,12,https://root.cern,https://github.com/root-project/root/pull/10812,1,['redund'],['redundant']
Safety,"[DF] Remove useless data member from RFilter, avoid (rare) reallocations",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9170:46,avoid,avoid,46,https://root.cern,https://github.com/root-project/root/pull/9170,1,['avoid'],['avoid']
Safety,[DF] Store RJittedAction on the heap to avoid use after delete,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2450:40,avoid,avoid,40,https://root.cern,https://github.com/root-project/root/pull/2450,1,['avoid'],['avoid']
Safety,[DF] Support rdfslot_ and rdfentry_ as well as avoid duplication of routines to check implicit columns,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2658:47,avoid,avoid,47,https://root.cern,https://github.com/root-project/root/pull/2658,1,['avoid'],['avoid']
Safety,[DF][PyROOT] Avoid deprecated numpy.object,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12159:13,Avoid,Avoid,13,https://root.cern,https://github.com/root-project/root/pull/12159,1,['Avoid'],['Avoid']
Safety,[DF][ROOT-9463] Avoid redundant results in GetColumnNames,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2443:16,Avoid,Avoid,16,https://root.cern,https://github.com/root-project/root/pull/2443,2,"['Avoid', 'redund']","['Avoid', 'redundant']"
Safety,[DOC][NFC] Mention that EnableThreadSafety does not make graphics thread-safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3412:73,safe,safe,73,https://root.cern,https://github.com/root-project/root/pull/3412,1,['safe'],['safe']
Safety,[Exp PyROOT] Pythonisations to avoid double delete of drawables,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3787:31,avoid,avoid,31,https://root.cern,https://github.com/root-project/root/pull/3787,1,['avoid'],['avoid']
Safety,[GeoCad] Reformat function to avoid misleading indentation warning,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3049:30,avoid,avoid,30,https://root.cern,https://github.com/root-project/root/pull/3049,1,['avoid'],['avoid']
Safety,[Geo][ROOT-9837] Avoid name clashes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3057:17,Avoid,Avoid,17,https://root.cern,https://github.com/root-project/root/pull/3057,1,['Avoid'],['Avoid']
Safety,[Graphics] avoid double delete in TRatioPlot dtor,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5312:11,avoid,avoid,11,https://root.cern,https://github.com/root-project/root/pull/5312,1,['avoid'],['avoid']
Safety,[IMT] Remove redundant call to EnableImplicitMT,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5305:13,redund,redundant,13,https://root.cern,https://github.com/root-project/root/pull/5305,1,['redund'],['redundant']
Safety,[IMT] Test thread safety of task arena and TThreadExecutor.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6189:18,safe,safety,18,https://root.cern,https://github.com/root-project/root/pull/6189,1,['safe'],['safety']
Safety,[IO] Avoid nullptr dereference in I/O of std::pair,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11227:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/11227,1,['Avoid'],['Avoid']
Safety,[Math] Avoid cloning before fitting the user provided FCN,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10650:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/10650,1,['Avoid'],['Avoid']
Safety,[Math] Avoid redefinition of `VECCORE_ENABLE_VC` macro,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/677:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/677,1,['Avoid'],['Avoid']
Safety,[Math] Avoid std::string in signature of template class method,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1936:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/1936,1,['Avoid'],['Avoid']
Safety,[Minuit2] Reduce boilerplate code by removing redundant overloads,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16443:46,redund,redundant,46,https://root.cern,https://github.com/root-project/root/pull/16443,1,['redund'],['redundant']
Safety,[Montecarlo][11580] Make TDatabasePDG::GetParticle methods thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13541:66,safe,safe,66,https://root.cern,https://github.com/root-project/root/pull/13541,1,['safe'],['safe']
Safety,[NFC] Try to prevent anti-virus false positive detection on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7005:47,detect,detection,47,https://root.cern,https://github.com/root-project/root/pull/7005,1,['detect'],['detection']
Safety,[NFC] v6-20: Try to prevent anti-virus false positive detection on Wi…,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7007:54,detect,detection,54,https://root.cern,https://github.com/root-project/root/pull/7007,1,['detect'],['detection']
Safety,[NFC] v6-22: Try to prevent anti-virus false positive detection on Wi…,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7006:54,detect,detection,54,https://root.cern,https://github.com/root-project/root/pull/7006,1,['detect'],['detection']
Safety,[PyROOT] Avoid SyntaxWarning about invalid escape sequence,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13905:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/13905,1,['Avoid'],['Avoid']
Safety,[PyROOT] Avoid bare except,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13026:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/13026,1,['Avoid'],['Avoid']
Safety,[PyROOT] Avoid linking TPython against libPython,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15891:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/15891,1,['Avoid'],['Avoid']
Safety,[PyROOT] Avoid need for exporting ROOT objects directly in PyROOTWrapper,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15833:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/15833,1,['Avoid'],['Avoid']
Safety,[PyROOT] Avoid using CPyCppyy internals in TPython via forward declarations,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14498:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/14498,1,['Avoid'],['Avoid']
Safety,[PyROOT] Avoid using deprecated `numpy._float`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16200:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/16200,1,['Avoid'],['Avoid']
Safety,[PyROOT] avoid using wildcard import in pyroot tutorial,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7668:9,avoid,avoid,9,https://root.cern,https://github.com/root-project/root/pull/7668,1,['avoid'],['avoid']
Safety,[RDF] Avoid unused variable warning,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4075:6,Avoid,Avoid,6,https://root.cern,https://github.com/root-project/root/pull/4075,1,['Avoid'],['Avoid']
Safety,[RDF] Enable thread safety,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6266:20,safe,safety,20,https://root.cern,https://github.com/root-project/root/pull/6266,1,['safe'],['safety']
Safety,[RF] Add overloads for memory-safe `RooAbsCollection::addOwned` and `RooAbsArg::addOwnedComponents`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9720:30,safe,safe,30,https://root.cern,https://github.com/root-project/root/pull/9720,1,['safe'],['safe']
Safety,[RF] Add recovery from invalid parameters for BatchMode,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7266:9,recover,recovery,9,https://root.cern,https://github.com/root-project/root/pull/7266,1,['recover'],['recovery']
Safety,[RF] Avoid RooBinWidthFunction in final likelihood computation graphs,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13024:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/13024,1,['Avoid'],['Avoid']
Safety,[RF] Avoid RooFit depenency in some RooFitCore unit tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8792:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/8792,1,['Avoid'],['Avoid']
Safety,[RF] Avoid `nlohmann_json` as a public dependency of RooFit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14266:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/14266,1,['Avoid'],['Avoid']
Safety,[RF] Avoid any dependencies of RooFitHS3 for dictionary generation and update HistFactory::JSONTool interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10082:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10082,1,['Avoid'],['Avoid']
Safety,[RF] Avoid clearing full RunContext after each NLL evaluation,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7344:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/7344,1,['Avoid'],['Avoid']
Safety,[RF] Avoid code duplication and move the evaluate function in a common place,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14440:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/14440,1,['Avoid'],['Avoid']
Safety,[RF] Avoid code duplication in RooAddModel cache generation,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11139:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/11139,1,['Avoid'],['Avoid']
Safety,[RF] Avoid code duplication in RooFit addition classes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10851:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10851,1,['Avoid'],['Avoid']
Safety,[RF] Avoid code duplication in RooRealSumFunc/RooRealSumPdf,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10825:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10825,1,['Avoid'],['Avoid']
Safety,[RF] Avoid code duplication with new private `Algorithms.h` file,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11962:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/11962,1,['Avoid'],['Avoid']
Safety,[RF] Avoid compile time dependency of RooFit on RDataFrame,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16606:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/16606,1,['Avoid'],['Avoid']
Safety,[RF] Avoid deprecated `createIterator()` function in RooStats tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15024:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/15024,1,['Avoid'],['Avoid']
Safety,[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13538:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/13538,1,['Avoid'],['Avoid']
Safety,[RF] Avoid dummy integral object for already self-normalized RooPoisson,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10836:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10836,1,['Avoid'],['Avoid']
Safety,[RF] Avoid duplicating minimizer steering code in `RooAbsPdf::fitTo()` and `RooAbsReal::chi2FitTo()`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13662:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/13662,1,['Avoid'],['Avoid']
Safety,[RF] Avoid heap allocation of `RooArgSet` in `Roo(Abs)GenContext`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9257:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/9257,1,['Avoid'],['Avoid']
Safety,[RF] Avoid including `RooMath.h` in RooFit headers and stress tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9214:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/9214,1,['Avoid'],['Avoid']
Safety,[RF] Avoid instantiating RooNLLVar directly in testRooAbsL.cxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16468:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/16468,1,['Avoid'],['Avoid']
Safety,[RF] Avoid manual memory allocation in RooConvGenContext,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10950:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10950,1,['Avoid'],['Avoid']
Safety,[RF] Avoid manual memory management in the rs101 tutorial,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11834:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/11834,1,['Avoid'],['Avoid']
Safety,[RF] Avoid overhead of tracking evaluation error messages when not needed,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12328:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/12328,1,['Avoid'],['Avoid']
Safety,[RF] Avoid printing false warning when passing both `FillColor/FillStyle` and `VisualizeError` to RooAbsReal::plotOn(),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9859:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/issues/9859,1,['Avoid'],['Avoid']
Safety,[RF] Avoid redundant copying of model in RooAbsL constructor,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12880:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/12880,2,"['Avoid', 'redund']","['Avoid', 'redundant']"
Safety,[RF] Avoid too verbose printout when doing unbinned toy studies,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14309:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/14309,1,['Avoid'],['Avoid']
Safety,[RF] Avoid uninitialized RooListProxies in RooLagrangianMorphFunc,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9840:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/9840,1,['Avoid'],['Avoid']
Safety,[RF] Avoid using HistFactory class in RooFitCore tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16596:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/16596,1,['Avoid'],['Avoid']
Safety,[RF] Avoid using RooCmdArg::_nextSharedData directly in header file,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8437:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/8437,1,['Avoid'],['Avoid']
Safety,[RF] Avoid using RooStringVar in RooCmdConfig,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10106:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10106,1,['Avoid'],['Avoid']
Safety,"[RF] Avoid using RooTObjWrap, RooDouble, and RooInt in RooCmdConfig",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10115:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10115,1,['Avoid'],['Avoid']
Safety,[RF] Avoid using `RooAbsArg::redirectServer()` in RooFit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12129:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/12129,1,['Avoid'],['Avoid']
Safety,[RF] Avoid using `_normSet` member in RooAddPdf,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10550:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10550,1,['Avoid'],['Avoid']
Safety,[RF] Avoid using `std::map` in RooFit pythonizations,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16156:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/16156,1,['Avoid'],['Avoid']
Safety,[RF] Avoid using forward-declared class as default template arguments,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8997:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/8997,1,['Avoid'],['Avoid']
Safety,[RF] Avoid using test statistics constructors directly in user code,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10610:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10610,1,['Avoid'],['Avoid']
Safety,[RF] Avoid using transient `std::unique_ptr`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15733:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/15733,1,['Avoid'],['Avoid']
Safety,[RF] Avoid using variable-length arrays in RooFit multiprocessing tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16777:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/16777,1,['Avoid'],['Avoid']
Safety,[RF] Do not stream RooAbsArg eocache to avoid memory leak when reading back workspaces,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12024:40,avoid,avoid,40,https://root.cern,https://github.com/root-project/root/pull/12024,1,['avoid'],['avoid']
Safety,[RF] Don't use redundant `RooPlot::findObject()` in RooFit tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11555:15,redund,redundant,15,https://root.cern,https://github.com/root-project/root/pull/11555,1,['redund'],['redundant']
Safety,[RF] Fix memory leaks in RooFitHS3 by completely avoiding manual memory management,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9690:49,avoid,avoiding,49,https://root.cern,https://github.com/root-project/root/pull/9690,1,['avoid'],['avoiding']
Safety,[RF] Fix splitting of RooDataSets with weight errors and avoid creating dummy weight variables,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12459:57,avoid,avoid,57,https://root.cern,https://github.com/root-project/root/pull/12459,1,['avoid'],['avoid']
Safety,[RF] Guard debugging code to avoid warning,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9981:29,avoid,avoid,29,https://root.cern,https://github.com/root-project/root/pull/9981,1,['avoid'],['avoid']
Safety,[RF] Improve recovery from invalid function values,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6401:13,recover,recovery,13,https://root.cern,https://github.com/root-project/root/pull/6401,1,['recover'],['recovery']
Safety,[RF] Improve recovery from invalid function values in RooFit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6383:13,recover,recovery,13,https://root.cern,https://github.com/root-project/root/pull/6383,1,['recover'],['recovery']
Safety,[RF] Make RooBatchCompute thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14877:33,safe,safe,33,https://root.cern,https://github.com/root-project/root/pull/14877,1,['safe'],['safe']
Safety,[RF] Make `RooAbsArg::recursiveRedirectServers` thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11970:55,safe,safe,55,https://root.cern,https://github.com/root-project/root/pull/11970,1,['safe'],['safe']
Safety,[RF] Make `roobatchcompute` header files safer,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9446:41,safe,safer,41,https://root.cern,https://github.com/root-project/root/pull/9446,1,['safe'],['safer']
Safety,[RF] New mechanism to detect if `_normSet` in RooAbsPdf is invalid,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11176:22,detect,detect,22,https://root.cern,https://github.com/root-project/root/pull/11176,1,['detect'],['detect']
Safety,[RF] Remove deprecated RooList and avoid remaining usage of it in RooFit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9851:35,avoid,avoid,35,https://root.cern,https://github.com/root-project/root/pull/9851,1,['avoid'],['avoid']
Safety,[RF] Remove redundant configuration members of `RooAbsMinimizerFcn`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11695:12,redund,redundant,12,https://root.cern,https://github.com/root-project/root/pull/11695,1,['redund'],['redundant']
Safety,[RF] Remove redundant sanity check,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8432:12,redund,redundant,12,https://root.cern,https://github.com/root-project/root/pull/8432,2,"['redund', 'sanity check']","['redundant', 'sanity check']"
Safety,[RF] Remove safeDeleteList functionality of RooAbsCollection,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9685:12,safe,safeDeleteList,12,https://root.cern,https://github.com/root-project/root/pull/9685,1,['safe'],['safeDeleteList']
Safety,[RF] Rename RooPower and RooExpPoly to avoid clash with classes fom CMS,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15558:39,avoid,avoid,39,https://root.cern,https://github.com/root-project/root/pull/15558,1,['avoid'],['avoid']
Safety,[RF] RooAddPdf: Avoid UB in checkObservables,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9557:16,Avoid,Avoid,16,https://root.cern,https://github.com/root-project/root/pull/9557,1,['Avoid'],['Avoid']
Safety,[RF] RooBarlowBeestonLL: Avoid removing elements of RooArgSet while looping over them,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10921:25,Avoid,Avoid,25,https://root.cern,https://github.com/root-project/root/pull/10921,1,['Avoid'],['Avoid']
Safety,[RF] Speed up RooFit BatchMode by avoiding to set oper mode to `Auto` in RooAbsReal::computeBatch,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10612:34,avoid,avoiding,34,https://root.cern,https://github.com/root-project/root/pull/10612,1,['avoid'],['avoiding']
Safety,[RF] Speed up RooProdPdf::factorizeProduct by avoiding manual memory allocation,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7907:46,avoid,avoiding,46,https://root.cern,https://github.com/root-project/root/pull/7907,1,['avoid'],['avoiding']
Safety,"[RF] `plotSamplingHint` can cause evaluation outside the ""safe"" range of an observable",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11482:58,safe,safe,58,https://root.cern,https://github.com/root-project/root/issues/11482,1,['safe'],['safe']
Safety,[RF] investigate and fix MultiProcess::Queue test timeout,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15494:50,timeout,timeout,50,https://root.cern,https://github.com/root-project/root/issues/15494,1,['timeout'],['timeout']
Safety,[RF] xRooFit: avoid having headers depending on preprocessor defines and other fixups,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11932:14,avoid,avoid,14,https://root.cern,https://github.com/root-project/root/pull/11932,1,['avoid'],['avoid']
Safety,[RF][ Remove unsafe casts in RooResolutionModel,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4975:13,unsafe,unsafe,13,https://root.cern,https://github.com/root-project/root/pull/4975,1,['unsafe'],['unsafe']
Safety,[RF][PyROOT] Avoid boolean operators on numpy arrays in unit test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13612:13,Avoid,Avoid,13,https://root.cern,https://github.com/root-project/root/pull/13612,1,['Avoid'],['Avoid']
Safety,[RF][PyROOT] Pythonize RooFit::DataError to avoid Python 3 syntax errors,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9721:44,avoid,avoid,44,https://root.cern,https://github.com/root-project/root/pull/9721,1,['avoid'],['avoid']
Safety,[RF][PyROOT] Use raw strings for docstrings in RooFit pythonization mirror classes and avoid mutating the docstring of an instancemethod in Python 2,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8926:87,avoid,avoid,87,https://root.cern,https://github.com/root-project/root/pull/8926,1,['avoid'],['avoid']
Safety,[RF][Tutorials] Avoid race condition in RooFit python tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8491:16,Avoid,Avoid,16,https://root.cern,https://github.com/root-project/root/pull/8491,1,['Avoid'],['Avoid']
Safety,"[ROOT-10713][ROOT-7986] Several objects were leaking when being read from a file. This is because ownership was unclear, and because reading apparently wasn't tested.; Here; - Four leaks are fixed; - A reading test is added (which is reading the object that revealed all the leaks. This tests both for leaks in address sanitizer builds, but also ensures that the updated streamers still work.); - A container overflow detected by address sanitizer is fixed.; - And the includes of RooRealVar are stripped down significantly. This is nice for RooFit, since almost everything includes RooRealVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5466:418,detect,detected,418,https://root.cern,https://github.com/root-project/root/pull/5466,1,['detect'],['detected']
Safety,"[SaveGraph](https://root.cern/doc/master/namespaceROOT_1_1RDF.html#ac06a36e745255fb8744b1e0a563074c9) would benefit from the following improvements:. - [x] usage of static variables should be removed, in order to make `SaveGraph` safe to be called concurrently from multiple threads; - [x] a tutorial should be added, and an example usage should be included in the docs in the reference guide. ### Additional context; <!--; Add any other context about the problem here.; -->. Related old jira tickets:; - https://sft.its.cern.ch/jira/browse/ROOT-11023 (this is the original issue regarding the usage of statics in the implementation of SaveGraph); - https://sft.its.cern.ch/jira/browse/ROOT-9721 (this contains a draft tutorial and an old SaveGraph bug report)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9145:230,safe,safe,230,https://root.cern,https://github.com/root-project/root/issues/9145,1,['safe'],['safe']
Safety,[TDF+CLING] Avoid instrumenting jitted code when possible,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/985:12,Avoid,Avoid,12,https://root.cern,https://github.com/root-project/root/pull/985,1,['Avoid'],['Avoid']
Safety,[TDF] Avoid accessing zero-length TTreeReaderArray,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1938:6,Avoid,Avoid,6,https://root.cern,https://github.com/root-project/root/pull/1938,1,['Avoid'],['Avoid']
Safety,[TDF] Avoid virtual calls in non-jitted transformations,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/869:6,Avoid,Avoid,6,https://root.cern,https://github.com/root-project/root/pull/869,1,['Avoid'],['Avoid']
Safety,[TMVA] Avoid torch-cppyy symbol clashing problem in tmva tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15290:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/15290,1,['Avoid'],['Avoid']
Safety,[TMVA] DNN - Tune minimization test to avoid false positives,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1958:39,avoid,avoid,39,https://root.cern,https://github.com/root-project/root/pull/1958,1,['avoid'],['avoid']
Safety,[TMVA] Make GetObjectSafe type-safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9783:31,safe,safe,31,https://root.cern,https://github.com/root-project/root/pull/9783,1,['safe'],['safe']
Safety,[TMVA] ROOT-9194 -- Sporadic timeouts for TMVARegression,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1973:29,timeout,timeouts,29,https://root.cern,https://github.com/root-project/root/pull/1973,1,['timeout'],['timeouts']
Safety,[TPython] Make TPython thread-safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16427:30,safe,safe,30,https://root.cern,https://github.com/root-project/root/pull/16427,1,['safe'],['safe']
Safety,[TREEPROCMT] Avoid useless construction of thread-local chains,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2169:13,Avoid,Avoid,13,https://root.cern,https://github.com/root-project/root/pull/2169,1,['Avoid'],['Avoid']
Safety,[TSpectrum] avoid recurrent questions on forum concerning legacy,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11315:12,avoid,avoid,12,https://root.cern,https://github.com/root-project/root/pull/11315,1,['avoid'],['avoid']
Safety,[TTree] Avoid deletion of TFile on the stack,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6528:8,Avoid,Avoid,8,https://root.cern,https://github.com/root-project/root/pull/6528,1,['Avoid'],['Avoid']
Safety,[TTree] Avoid getting the number of branches twice,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3601:8,Avoid,Avoid,8,https://root.cern,https://github.com/root-project/root/pull/3601,1,['Avoid'],['Avoid']
Safety,[TTree] Avoid time-consuming part of FindLeaf if leaf name has no '.',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2437:8,Avoid,Avoid,8,https://root.cern,https://github.com/root-project/root/pull/2437,1,['Avoid'],['Avoid']
Safety,[TWebFile] avoid if/else statement with same result ROOT-10373,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4574:11,avoid,avoid,11,https://root.cern,https://github.com/root-project/root/pull/4574,1,['avoid'],['avoid']
Safety,[VecOps] Avoid -ffast-math,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12214:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/12214,1,['Avoid'],['Avoid']
Safety,[VecOps] Avoid allocating temporaries on heap in InvariantMass[es],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4153:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/4153,1,['Avoid'],['Avoid']
Safety,[WIP] Load libCling with RTLD_DEEPBIND to avoid collissions of LLVM symbols,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4668:42,avoid,avoid,42,https://root.cern,https://github.com/root-project/root/pull/4668,1,['avoid'],['avoid']
Safety,[backport-v626] Avoid using deprecated std::iterator in several classes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11270:16,Avoid,Avoid,16,https://root.cern,https://github.com/root-project/root/pull/11270,1,['Avoid'],['Avoid']
Safety,[cling] Avoid assert firing on ODRHash collisions:,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9248:8,Avoid,Avoid,8,https://root.cern,https://github.com/root-project/root/pull/9248,1,['Avoid'],['Avoid']
Safety,[cling] DynamicLookup: avoid printing internal expression representation for non-debug builds,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6938:23,avoid,avoid,23,https://root.cern,https://github.com/root-project/root/pull/6938,1,['avoid'],['avoid']
Safety,[cling] Try to avoid crashes in llvm::identify_magic,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11174:15,avoid,avoid,15,https://root.cern,https://github.com/root-project/root/pull/11174,1,['avoid'],['avoid']
Safety,[cling] Try to avoid crashes in llvm::identify_magic [v6.26],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11187:15,avoid,avoid,15,https://root.cern,https://github.com/root-project/root/pull/11187,1,['avoid'],['avoid']
Safety,[cling] Warn on redundant parentheses in declarators whose parsing might not match the user intent,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8555:16,redund,redundant,16,https://root.cern,https://github.com/root-project/root/pull/8555,1,['redund'],['redundant']
Safety,[cling] fix unsafe mix of type warning in Diagnostic.cpp,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13444:12,unsafe,unsafe,12,https://root.cern,https://github.com/root-project/root/pull/13444,1,['unsafe'],['unsafe']
Safety,[clingutils] Modernize C++ casting in generated dictionaries to avoid potential warnings in derived applications,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9761:64,avoid,avoid,64,https://root.cern,https://github.com/root-project/root/pull/9761,1,['avoid'],['avoid']
Safety,"[cmake] Avoid ""warning: redirecting to https://""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1963:8,Avoid,Avoid,8,https://root.cern,https://github.com/root-project/root/pull/1963,1,['Avoid'],['Avoid']
Safety,[cmake] Avoid warning when building from tar file,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16226:8,Avoid,Avoid,8,https://root.cern,https://github.com/root-project/root/pull/16226,1,['Avoid'],['Avoid']
Safety,"[cmake] Fix Davix uuid detection, gfal defaults to off",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13059:23,detect,detection,23,https://root.cern,https://github.com/root-project/root/pull/13059,1,['detect'],['detection']
Safety,[cmake] Fix version detection for old TBB,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14942:20,detect,detection,20,https://root.cern,https://github.com/root-project/root/pull/14942,1,['detect'],['detection']
Safety,[cmake] Increase the internet connection test timeout.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9405:46,timeout,timeout,46,https://root.cern,https://github.com/root-project/root/pull/9405,1,['timeout'],['timeout']
Safety,[cmake] Reduce the redundant dependencies to onepcm.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1188:19,redund,redundant,19,https://root.cern,https://github.com/root-project/root/pull/1188,1,['redund'],['redundant']
Safety,[cmake] Some improvements related to feature detection,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14834:45,detect,detection,45,https://root.cern,https://github.com/root-project/root/pull/14834,1,['detect'],['detection']
Safety,[cmake][webgui] Decrease webgui-ping timeout,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16710:37,timeout,timeout,37,https://root.cern,https://github.com/root-project/root/pull/16710,1,['timeout'],['timeout']
Safety,"[core,v6-26] TViewPubDataMembersIter: avoid using deprecated `std::iterator`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10468:38,avoid,avoid,38,https://root.cern,https://github.com/root-project/root/pull/10468,1,['avoid'],['avoid']
Safety,[core/base] Null ptr access safety,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11443:28,safe,safety,28,https://root.cern,https://github.com/root-project/root/pull/11443,1,['safe'],['safety']
Safety,[core] Avoid deprecated `std::iterator`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10571:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/10571,1,['Avoid'],['Avoid']
Safety,[core] Remove redundant forward decl of std.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5300:14,redund,redundant,14,https://root.cern,https://github.com/root-project/root/pull/5300,1,['redund'],['redundant']
Safety,[core] Rework the field lookups in base classes to avoid iteration.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10245:51,avoid,avoid,51,https://root.cern,https://github.com/root-project/root/pull/10245,1,['avoid'],['avoid']
Safety,[core] TViewPubDataMembersIter: avoid using deprecated `std::iterator`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10457:32,avoid,avoid,32,https://root.cern,https://github.com/root-project/root/pull/10457,1,['avoid'],['avoid']
Safety,[core] avoid using VLA in TListOfTypes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16476:7,avoid,avoid,7,https://root.cern,https://github.com/root-project/root/pull/16476,1,['avoid'],['avoid']
Safety,[cxxmodules] Add pthread_setname_np forward decl to avoid warning in,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2629:52,avoid,avoid,52,https://root.cern,https://github.com/root-project/root/pull/2629,1,['avoid'],['avoid']
Safety,[cxxmodules] Avoid loading more modules while instantiating templates,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13046:13,Avoid,Avoid,13,https://root.cern,https://github.com/root-project/root/pull/13046,1,['Avoid'],['Avoid']
Safety,[cxxmodules] Avoid loading more modules while instantiating templates [v6.28],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13050:13,Avoid,Avoid,13,https://root.cern,https://github.com/root-project/root/pull/13050,1,['Avoid'],['Avoid']
Safety,[cxxmodules] Avoid lookup from system headers,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11514:13,Avoid,Avoid,13,https://root.cern,https://github.com/root-project/root/pull/11514,1,['Avoid'],['Avoid']
Safety,"[cxxmodules] Do not push a transaction per LoadModule. Prior to this patch, we push/pop transaction for each LoadModule call. This is reasonable if we assume modules are perfectly layered. That is, no eager module deserialization require definitions from another module. This is hard to achieve for dependent on ROOT codebases during their incremental migration process.; ; The current patch push/pops once per loading of all modules. This should perform slightly better and allow entangled modules to still load. This patch should address the CMSSW Modules IB:; Assertion `OldBuilder->DeferredDeclsToEmit.empty() && ""Should have emitted all decls deferred to emit.""' failed.; ```; 0 0x00007ffff6f113d7 in raise () from /lib64/libc.so.6; 1 0x00007ffff6f12ac8 in abort () from /lib64/libc.so.6; 2 0x00007ffff6f0a1a6 in __assert_fail_base () from /lib64/libc.so.6; 3 0x00007ffff6f0a252 in __assert_fail () from /lib64/libc.so.6; 4 0x00007fffed24ed82 in clang::CodeGeneratorImpl::StartModule; 5 0x00007fffed24d33e in clang::CodeGenerator::StartModule; 6 0x00007fffed0664f1 in cling::IncrementalParser::StartModule; 7 0x00007fffed066f84 in cling::IncrementalParser::codeGenTransaction; 8 0x00007fffed066aec in cling::IncrementalParser::commitTransaction; 9 0x00007fffecf1af2c in cling::Interpreter::PushTransactionRAII::pop; 10 0x00007fffecf1ae72 in cling::Interpreter::PushTransactionRAII::~PushTransactionRAII; 11 0x00007fffece78534 in ClingMemberIterInternal::DCIter::DCIter; 12 0x00007fffece7712c in TClingMemberIter::TClingMemberIter; 13 0x00007fffece7724c in TClingDataMemberIter::TClingDataMemberIter; 14 0x00007fffece750b6 in TClingDataMemberInfo::TClingDataMemberInfo; 15 0x00007fffecd25918 in TCling::DataMemberInfo_Factory; 16 0x00007ffff6b0e33e in TListOfDataMembers::Load; 17 0x00007ffff6ae539d in TClass::CreateListOfDataMembers; 18 0x00007ffff6ae54d4 in TClass::GetListOfDataMembers; 19 0x00007ffff6ae3dd1 in TClass::GetDataMember; 20 0x00007ffff6b259a0 in ROOT::Detail::TSchemaRuleSet::Add",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7398:762,abort,abort,762,https://root.cern,https://github.com/root-project/root/pull/7398,1,['abort'],['abort']
Safety,[cxxmodules] Do not trigger redundant deserializations.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4409:28,redund,redundant,28,https://root.cern,https://github.com/root-project/root/pull/4409,1,['redund'],['redundant']
Safety,[cxxmodules] Mark string_view as textual to avoid bugs in clang-5.0,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4451:44,avoid,avoid,44,https://root.cern,https://github.com/root-project/root/pull/4451,1,['avoid'],['avoid']
Safety,[cxxmodules] Order includes avoiding infinite loop in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4129:28,avoid,avoiding,28,https://root.cern,https://github.com/root-project/root/pull/4129,1,['avoid'],['avoiding']
Safety,[cxxmodules] Print stacktrace before aborting on a missing exception.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/921:37,abort,aborting,37,https://root.cern,https://github.com/root-project/root/pull/921,1,['abort'],['aborting']
Safety,[cxxmodules][cling] Avoid loading some unnecessary modules,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10910:20,Avoid,Avoid,20,https://root.cern,https://github.com/root-project/root/pull/10910,1,['Avoid'],['Avoid']
Safety,[davix] avoid using VLA,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16519:8,avoid,avoid,8,https://root.cern,https://github.com/root-project/root/pull/16519,1,['avoid'],['avoid']
Safety,[df] Avoid lock to check simple typeids,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16528:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/16528,1,['Avoid'],['Avoid']
Safety,[df] Avoid memory leak in JIT when the execution is not triggered,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15400:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/15400,1,['Avoid'],['Avoid']
Safety,"[dictgen] On macOS, use argv[0] to detect genreflex:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9501:35,detect,detect,35,https://root.cern,https://github.com/root-project/root/pull/9501,1,['detect'],['detect']
Safety,[geom] Add cache layer for TGeoParallelWorld safeties in TGeoNavigator,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16470:45,safe,safeties,45,https://root.cern,https://github.com/root-project/root/pull/16470,1,['safe'],['safeties']
Safety,"[gui] fix leak in TGFSComboBox, avoid usage of static variable",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7337:32,avoid,avoid,32,https://root.cern,https://github.com/root-project/root/pull/7337,1,['avoid'],['avoid']
Safety,[hadd] avoid large RAM usage in hadd with multiple subdirs,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15059:7,avoid,avoid,7,https://root.cern,https://github.com/root-project/root/pull/15059,1,['avoid'],['avoid']
Safety,[hist] Avoid `try-catch` in TH1,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13748:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/13748,1,['Avoid'],['Avoid']
Safety,"[http] Improve syntax, avoid interpreter calls",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15019:23,avoid,avoid,23,https://root.cern,https://github.com/root-project/root/pull/15019,1,['avoid'],['avoid']
Safety,[inc] avoid doxygen warnings,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9943:6,avoid,avoid,6,https://root.cern,https://github.com/root-project/root/pull/9943,1,['avoid'],['avoid']
Safety,[io] Avoid nullptr deref when printing warning in TStreamerInfo,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8351:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/8351,1,['Avoid'],['Avoid']
Safety,[math] Avoid out-of-bounds array access with `vc` in FitUtil.h,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13772:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/13772,1,['Avoid'],['Avoid']
Safety,[math] Avoid warnings about deleting unallocated objects in `TDecompLU`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10582:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/10582,1,['Avoid'],['Avoid']
Safety,[math] Avoid warnings from Vc.h from deprecated enum comparisons,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13360:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/13360,1,['Avoid'],['Avoid']
Safety,[math] Avoid warnings from Vc.h in Fedora nightlies and add some missing `override`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12987:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/12987,1,['Avoid'],['Avoid']
Safety,[math][minuit2] Avoid hiding member functions with `using`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11915:16,Avoid,Avoid,16,https://root.cern,https://github.com/root-project/root/pull/11915,1,['Avoid'],['Avoid']
Safety,"[net/monalisa/src/TMonaLisaWriter.cxx:956] -> [net/monalisa/src/TMonaLisaWriter.cxx:957]: (error) Iterator 'iter' used after element has been erased.; [proof/proofd/src/XrdProofdProofServMgr.cxx:4648] -> [proof/proofd/src/XrdProofdProofServMgr.cxx:4646]: (error) Iterator 'iter' used after element has been erased. [math/minuit2/src/Minuit2Minimizer.cxx:669] -> [math/minuit2/src/Minuit2Minimizer.cxx:669]: (style) Same expression on both sides of '||'.; [math/minuit2/src/Minuit2Minimizer.cxx:736] -> [math/minuit2/src/Minuit2Minimizer.cxx:736]: (style) Same expression on both sides of '||'.; [math/minuit2/src/Minuit2Minimizer.cxx:753] -> [math/minuit2/src/Minuit2Minimizer.cxx:753]: (style) Same expression on both sides of '||'. [tree/tree/src/TBasket.cxx:852]: (style) Redundant condition: If 'flag >= 80', the comparison 'flag' is always true.; [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check.; [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check.; [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check.; [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed.; [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd; [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s; [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname; [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname; [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1343:775,Redund,Redundant,775,https://root.cern,https://github.com/root-project/root/pull/1343,1,['Redund'],['Redundant']
Safety,[netxng] Avoid XRootD warnings in generated source,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9582:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/9582,1,['Avoid'],['Avoid']
Safety,[netxng] Avoid XRootD warnings in generated source [v6.26],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9701:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/9701,1,['Avoid'],['Avoid']
Safety,[ntuple] Avoid double delete in RField<RVec<T>>::DestroyValue,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9097:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/9097,1,['Avoid'],['Avoid']
Safety,[ntuple] Avoid gtest warnings about deprecated `TYPED_TEST_CASE`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12489:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/12489,1,['Avoid'],['Avoid']
Safety,[ntuple] Avoid lambda capture of structured binding,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12009:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/12009,1,['Avoid'],['Avoid']
Safety,[ntuple] Avoid the use of `TClassEdit::ResolveTypedef()` in the creation of class members' fields,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13255:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/13255,1,['Avoid'],['Avoid']
Safety,[ntuple] Avoid unnecessary meta-data memory copies,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4347:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/4347,1,['Avoid'],['Avoid']
Safety,[ntuple] Avoid warning about possibly uninitialized variable,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12440:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/12440,2,['Avoid'],['Avoid']
Safety,[ntuple] Fix ASAN detected buffer overflow,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10071:18,detect,detected,18,https://root.cern,https://github.com/root-project/root/pull/10071,1,['detect'],['detected']
Safety,[ntuple] Minor safety improvements to the RField API,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13507:15,safe,safety,15,https://root.cern,https://github.com/root-project/root/pull/13507,1,['safe'],['safety']
Safety,[ntuple] avoid inheriting from std::iterator for all homebrew iterators (NFC),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5890:9,avoid,avoid,9,https://root.cern,https://github.com/root-project/root/pull/5890,1,['avoid'],['avoid']
Safety,[ntuple] avoid page source/sink in public reader/writer interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14521:9,avoid,avoid,9,https://root.cern,https://github.com/root-project/root/pull/14521,1,['avoid'],['avoid']
Safety,[ntuple] avoid some memory allocations in RPageStorageFile,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15879:9,avoid,avoid,9,https://root.cern,https://github.com/root-project/root/pull/15879,1,['avoid'],['avoid']
Safety,[ntuple] fix cycle detection for collection proxy classes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14907:19,detect,detection,19,https://root.cern,https://github.com/root-project/root/pull/14907,1,['detect'],['detection']
Safety,[ntuple] rearrange code to avoid a compiler warning,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16709:27,avoid,avoid,27,https://root.cern,https://github.com/root-project/root/pull/16709,1,['avoid'],['avoid']
Safety,[qt5web] Avoid clang warnings,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13379:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/13379,1,['Avoid'],['Avoid']
Safety,[rawfile] clarify thread safetiness in class comment (NFC),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6474:25,safe,safetiness,25,https://root.cern,https://github.com/root-project/root/pull/6474,1,['safe'],['safetiness']
Safety,[reve] rename some members to avoid duplication,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8195:30,avoid,avoid,30,https://root.cern,https://github.com/root-project/root/pull/8195,1,['avoid'],['avoid']
Safety,[rootcling] Drop redundant function parameter.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4545:17,redund,redundant,17,https://root.cern,https://github.com/root-project/root/pull/4545,1,['redund'],['redundant']
Safety,[rootcling] Remove redundant flag,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4270:19,redund,redundant,19,https://root.cern,https://github.com/root-project/root/pull/4270,1,['redund'],['redundant']
Safety,[rpdutils] Avoid linux macro redefinition warning.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3874:11,Avoid,Avoid,11,https://root.cern,https://github.com/root-project/root/pull/3874,1,['Avoid'],['Avoid']
Safety,"[skip-ci]. # This Pull request:. Makes the CI load OpenStack object-store credentials from files on runners instead of using GitHub secrets. When `pull_request` is a workflow trigger, the job can't access secrets, which means that the S3 secret token is unavailable. Adding S3 credentials to the runners themselves solves this issue. The OpenStack credentials are defined [here](https://gitlab.cern.ch/ai/it-puppet-hostgroup-lcgapp/-/blob/rootci_test/code/manifests/build/root.pp#L43) (using [teigi](https://configdocs.web.cern.ch/secrets/adding.html)). If a malicious actor makes a PR with a job to print the credentials, or to upload a malicious artifact, it would still have to be approved by a maintainer. A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12201:712,safe,safer,712,https://root.cern,https://github.com/root-project/root/pull/12201,1,['safe'],['safer']
Safety,[skip-ci][v628][tutorials] Fix `tensorflow` and `pytorch` detection in TMVA tutorial,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15296:58,detect,detection,58,https://root.cern,https://github.com/root-project/root/pull/15296,1,['detect'],['detection']
Safety,[skip-ci][v630][tutorials] Fix `tensorflow` and `pytorch` detection in TMVA tutorial,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15297:58,detect,detection,58,https://root.cern,https://github.com/root-project/root/pull/15297,1,['detect'],['detection']
Safety,[tmva] Avoid calling TMVA::Python_Executable() when Pymva is not available,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10253:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/10253,1,['Avoid'],['Avoid']
Safety,"[tmva] Impose correct test dependencies, avoid multiple invocations of Declare, avoid races when writing model files",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16711:41,avoid,avoid,41,https://root.cern,https://github.com/root-project/root/pull/16711,2,['avoid'],['avoid']
Safety,[tmva] More fixes to avoid timeout in TMVA tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12041:21,avoid,avoid,21,https://root.cern,https://github.com/root-project/root/pull/12041,2,"['avoid', 'timeout']","['avoid', 'timeout']"
Safety,[tmva][pymva] Avoid creating the output file tmva.root,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14125:14,Avoid,Avoid,14,https://root.cern,https://github.com/root-project/root/pull/14125,1,['Avoid'],['Avoid']
Safety,[tmva][pymva] Backport in 6.28 the fix to avoid creating output file tmva.root,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14996:42,avoid,avoid,42,https://root.cern,https://github.com/root-project/root/pull/14996,1,['avoid'],['avoid']
Safety,[tree] Avoid buffer overflow in TBranch,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15620:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/15620,1,['Avoid'],['Avoid']
Safety,[tree] Avoid odr-using TTree::kMaxEntries,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12352:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/12352,1,['Avoid'],['Avoid']
Safety,[tree] Avoid odr-using TTree::kMaxEntries (v6.28),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12369:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/12369,1,['Avoid'],['Avoid']
Safety,[tree] avoid dependency from TreePlayer,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5246:7,avoid,avoid,7,https://root.cern,https://github.com/root-project/root/pull/5246,2,['avoid'],['avoid']
Safety,[tree] public method should be safe against fImpl = null,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15324:31,safe,safe,31,https://root.cern,https://github.com/root-project/root/pull/15324,1,['safe'],['safe']
Safety,"[tutorial,pythia8] Try to work around timeout on Fed28.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2359:38,timeout,timeout,38,https://root.cern,https://github.com/root-project/root/pull/2359,1,['timeout'],['timeout']
Safety,[tutorials] Fix `tensorflow` and `pytorch` detection in TMVA tutorial,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15295:43,detect,detection,43,https://root.cern,https://github.com/root-project/root/pull/15295,1,['detect'],['detection']
Safety,[tutorials] safer version of CPUMeter.C,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14379:12,safe,safer,12,https://root.cern,https://github.com/root-project/root/pull/14379,1,['safe'],['safer']
Safety,[v6-28] Add a safety check on `std::multimap::empty()`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14240:14,safe,safety,14,https://root.cern,https://github.com/root-project/root/pull/14240,1,['safe'],['safety']
Safety,[v6-28] Qualify calls to llvm::format that have ::std:: types as parameters to avoid ambiguity in overload resolution when ADL finds `std::format`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12732:79,avoid,avoid,79,https://root.cern,https://github.com/root-project/root/pull/12732,1,['avoid'],['avoid']
Safety,[v6-30] Add a safety check on `std::multimap::empty()`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14239:14,safe,safety,14,https://root.cern,https://github.com/root-project/root/pull/14239,1,['safe'],['safety']
Safety,[v6-32][cmake] Avoid warning when building from tar file,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16231:15,Avoid,Avoid,15,https://root.cern,https://github.com/root-project/root/pull/16231,1,['Avoid'],['Avoid']
Safety,[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13500:73,safe,safe,73,https://root.cern,https://github.com/root-project/root/pull/13500,1,['safe'],['safe']
Safety,[v628] io: Avoid infinite recursion in TFile::Open,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15625:11,Avoid,Avoid,11,https://root.cern,https://github.com/root-project/root/pull/15625,1,['Avoid'],['Avoid']
Safety,[v628][CI] Disable `tmva-cpu` on `alma9` to avoid openblas clashes with NumPy,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15305:44,avoid,avoid,44,https://root.cern,https://github.com/root-project/root/pull/15305,1,['avoid'],['avoid']
Safety,[v630][CI] Disable `tmva-cpu` on `alma9` to avoid openblas clashes with NumPy,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15303:44,avoid,avoid,44,https://root.cern,https://github.com/root-project/root/pull/15303,1,['avoid'],['avoid']
Safety,[v630][DF][backport] Avoid usage of Mathmore/gsl in df106 tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13994:21,Avoid,Avoid,21,https://root.cern,https://github.com/root-project/root/pull/13994,1,['Avoid'],['Avoid']
Safety,[v632][CI] Disable `tmva-cpu` on `alma9` to avoid openblas clashes with NumPy,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15304:44,avoid,avoid,44,https://root.cern,https://github.com/root-project/root/pull/15304,1,['avoid'],['avoid']
Safety,[v632][tutorials] Fix `tensorflow` and `pytorch` detection in TMVA tutorial,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15298:49,detect,detection,49,https://root.cern,https://github.com/root-project/root/pull/15298,1,['detect'],['detection']
Safety,"[web geom] avoid binary data transfer, use JSON_base64",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4146:11,avoid,avoid,11,https://root.cern,https://github.com/root-project/root/pull/4146,1,['avoid'],['avoid']
Safety,[webgui] detect available browser when producing image,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13097:9,detect,detect,9,https://root.cern,https://github.com/root-project/root/pull/13097,1,['detect'],['detect']
Safety,[windows] Make `OpenDirectory` and `GetDirEntry` thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13472:56,safe,safe,56,https://root.cern,https://github.com/root-project/root/pull/13472,1,['safe'],['safe']
Safety,"\n"";. // The model can now be applied in different scenarios:; // 1) Event-by-event inference; // 2) Batch inference on data of multiple events; // 3) Model inference as part of an RDataFrame graph. // 1) Event-by-event inference; // The event-by-event inference takes the values of the variables as a std::vector<float>.; // Note that the return value is as well a std::vector<float> since the reader; // is also capable to process models with multiple outputs.; auto prediction = model.Predict({0.5, 1.0, -0.2, 1.5});; std::cout << ""Single-event inference: "" << prediction << ""\n\n"";. // 2) Batch inference on data of multiple events; // For batch inference, the data needs to be structured as a matrix. For this; // purpose, TMVA makes use of the RTensor class. For convenience, we use RDataFrame; // and the AsTensor utility to make the read-out from the ROOT file.; ROOT::RDataFrame df(""TreeS"", filename);; auto df2 = df.Range(3); // Read only 10 events; auto x = AsTensor<float>(df2, variables);; std::cout << ""RTensor input for inference on data of multiple events:\n"" << x << ""\n\n"";. auto y = model.Predict(x);; std::cout << ""Prediction performed on multiple events: "" << y << ""\n\n"";. // 3) Perform inference as part of an RDataFrame graph; // We write a small lambda function that performs for us the inference on; // a dataframe to omit code duplication.; auto make_histo = [&](const std::string &treename) {; ROOT::RDataFrame df(treename, filename);; auto df2 = df.Define(""y"", Predict<4, float>(model), variables);; return df2.Histo1D({"""", """", 30, -1, 1}, ""y"");; };. auto sig = make_histo(""TreeS"");; auto bkg = make_histo(""TreeB"");. gStyle->SetOptStat(0);; auto c = new TCanvas("""", """", 800, 800);; sig->SetLineColor(kRed);; bkg->SetLineColor(kBlue);; bkg->GetXaxis()->SetTitle(""Model response"");; bkg->Draw(""HIST"");; sig->Draw(""HIST SAME"");; c->SaveAs(""bdt_response.pdf"");; }; ```. ![x](https://user-images.githubusercontent.com/6951222/51740397-2f295f80-2094-11e9-8c29-b40bc618a4bc.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3321:1956,Predict,Predict,1956,https://root.cern,https://github.com/root-project/root/pull/3321,3,['Predict'],"['Predict', 'Prediction']"
Safety,"_renderer, ; GLX_MESA_swap_control, GLX_OML_swap_method, GLX_OML_sync_control, ; GLX_SGIS_multisample, GLX_SGIX_fbconfig, GLX_SGIX_pbuffer, ; GLX_SGIX_visual_select_group, GLX_SGI_make_current_read, ; GLX_SGI_swap_control, GLX_SGI_video_sync; GLX version: 1.2; GLX extensions:; GLX_ARB_get_proc_address, GLX_ARB_multisample, GLX_EXT_import_context, ; GLX_EXT_visual_info, GLX_EXT_visual_rating, GLX_MESA_query_renderer, ; GLX_OML_swap_method, GLX_SGIS_multisample, GLX_SGIX_fbconfig, ; GLX_SGI_make_current_read; Extended renderer info (GLX_MESA_query_renderer):; Vendor: VMware, Inc. (0xffffffff); Device: llvmpipe (LLVM 10.0.0, 256 bits) (0xffffffff); Version: 20.0.8; Accelerated: no; Video memory: 7279MB; Unified memory: no; Preferred profile: core (0x1); Max core profile version: 3.3; Max compat profile version: 3.1; Max GLES1 profile version: 1.1; Max GLES[23] profile version: 3.1; ... Full error:; Error in <TEveViewer::SpawnGLViewer>: Insufficient support from the graphics hardware. Aborting.; *** Break *** segmentation violation; Generating stack trace...; 0x00007fd360487563 in TEveViewer::SpawnGLViewer(TGedEditor*, bool, bool) at /media/disk1/SHiPBuild/sw/SOURCES/ROOT/5479ddb618_FAIRSHIP/0/graf3d/eve/src/TEveViewer.cxx:182 from /media/disk1/SHiPBuild/sw/ubuntu2004_x86-64/ROOT/5479ddb618_FAIRSHIP-1/lib/libEve.so.6.22; 0x00007fd360430693 in TEveManager::SpawnNewViewer(char const*, char const*, bool) at /media/disk1/SHiPBuild/sw/SOURCES/ROOT/5479ddb618_FAIRSHIP/0/graf3d/eve/src/TEveManager.cxx:327 (discriminator 4) from /media/disk1/SHiPBuild/sw/ubuntu2004_x86-64/ROOT/5479ddb618_FAIRSHIP-1/lib/libEve.so.6.22; 0x00007fd360433458 in TEveManager::TEveManager(unsigned int, unsigned int, bool, char const*) at /media/disk1/SHiPBuild/sw/SOURCES/ROOT/5479ddb618_FAIRSHIP/0/graf3d/eve/src/TEveManager.cxx:175 (discriminator 1) from /media/disk1/SHiPBuild/sw/ubuntu2004_x86-64/ROOT/5479ddb618_FAIRSHIP-1/lib/libEve.so.6.22; 0x00007fd360433885 in TEveManager::Create(bool, char const*",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6774:2298,Abort,Aborting,2298,https://root.cern,https://github.com/root-project/root/issues/6774,1,['Abort'],['Aborting']
Safety,"` is still empty. So the `diagrams.size() > 0` check will never be true and the if-block can be removed, no?; - [x] The [`_nonInterferig`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/inc/RooLagrangianMorphFunc.h#L266) data member is used in a few member functions, but it is never filled so always an empty vector. How meaningful is that? Can `_nonInterfering` be removed? ; - [x] It's annoying to have all these explicit usage of `this`, just to access a class member that is already marked as a class member with the underscore prefix convention. Please replace all occurences of `this->_` in the source file with just `_`.; - [x] [`makeCrosssectionContainer()`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2128) returns a `TPair*` that is owned by the caller. Please return `std::unique_ptr<TPair>` is this case, or even better return a `std::pair` instead (avoid using old ROOT container classes that were written before the standard library was introduced).; - [x] Similarly, [`createTH1`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2621) returns an owning raw pointer too, while it should return a `std::unique_ptr<TH1>` in this case. Can this interface still be changed without disrupting users too much? **No, this can break usercode, so this suggestion was not implemented!**. All these flaws above have been addressed by @rahulgrit in #9912. Some more flaws were fixed in #11023. - [x] The `getCache` function takes a unused argument. It is a private function, so to signature can simply be changed and the argument removed; - [x] The unused `_ownsParameters` member should be removed. However, that's not all! There are more issues with this class that have to be resolved in a followup PR:. - [x] Various memory leaks (search for `new ` in the file and you will fi",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9845:1800,avoid,avoid,1800,https://root.cern,https://github.com/root-project/root/issues/9845,1,['avoid'],['avoid']
Safety,`EnableThreadSafety()` is called in `_batchgenerator.py` making another call for it redundant and `class RBatchGenerator` depends to Internal namespace,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14860:84,redund,redundant,84,https://root.cern,https://github.com/root-project/root/pull/14860,1,['redund'],['redundant']
Safety,"`FunctionScopesStart` and `InventedParameterInfosStart` were introduced by upstream commit https://github.com/llvm/llvm-project/commit/5c845c1c50ac89a6f12557d1571678f3d1432478 and are handled in `ContextRAII`, but not our `ContextAndScopeRAII`. The second commit reuses `ContextRAII` and should avoid this kind of problem in the future. Could fix https://github.com/root-project/root/issues/14230, to be confirmed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15004:295,avoid,avoid,295,https://root.cern,https://github.com/root-project/root/pull/15004,1,['avoid'],['avoid']
Safety,"`GetEntriesFast` is not as fast as it could be: it constructs and; destructs a `TReadLockGuard`, and might need to modify `TObjArray::fLast`.; This PR introduced `GetEntriesUnsafe`, a thread-unsafe version of `GetEntriesFast`; that side-steps these operations when possible. Measurements for the benchmarks in the `philippe` branch of the [df_bench](https://gitlab.com/bluehood/df_bench) repository:. With `GetEntriesFast`:; ```; -----------------------------------------------------------------------------------; Benchmark Time CPU Iterations; -----------------------------------------------------------------------------------; TreeGetEntryOneBranch 192943 ns 192939 ns 3664; TreeGetEntryTwoBranchesAndAllStatusFalse 110524 ns 110521 ns 6433; TreeGetEntryTwoBranches 195864 ns 195859 ns 3430; TreeGetEntryTwoBranchesWithoutSetStatus 317772 ns 317761 ns 2095; BranchGetEntryOneBranch 103652 ns 103650 ns 6730; BranchGetEntryTwoBranches 104072 ns 104070 ns 6707; ```. With `GetEntriesUnsafe`:; ```; -----------------------------------------------------------------------------------; Benchmark Time CPU Iterations; -----------------------------------------------------------------------------------; TreeGetEntryOneBranch 152708 ns 152690 ns 4579; TreeGetEntryTwoBranchesAndAllStatusFalse 91277 ns 91274 ns 7731; TreeGetEntryTwoBranches 173940 ns 173922 ns 4024; TreeGetEntryTwoBranchesWithoutSetStatus 279271 ns 279261 ns 2514; BranchGetEntryOneBranch 104515 ns 104503 ns 6721; BranchGetEntryTwoBranches 104180 ns 104177 ns 6652; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3603:191,unsafe,unsafe,191,https://root.cern,https://github.com/root-project/root/pull/3603,1,['unsafe'],['unsafe']
Safety,"`RColumnRegister` has a copy-on-write policy, introduced by https://github.com/root-project/root/pull/10899 and further explained at https://github.com/root-project/root/pull/11297 . For very large computation graphs (e.g. O(10K) `Define` calls) this means that we are allocating/deallocating `std::shared_ptr<std::unordered_map<std::string, std::shared_ptr<RDefinesWithReaders>>>` of thousands of nodes, with an increasing size at each Define call. While keeping the map with *all* the defined columns is necessary in order to avoid losing information about the computation graph itself, I wonder if we can move away from the copy-on-write policy without too many problems, given the situation presented by the large computation graphs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14490:528,avoid,avoid,528,https://root.cern,https://github.com/root-project/root/pull/14490,1,['avoid'],['avoid']
Safety,`TDirectory::RegisterGDirectory` is MT unsafe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8931:39,unsafe,unsafe,39,https://root.cern,https://github.com/root-project/root/issues/8931,1,['unsafe'],['unsafe']
Safety,"```; 6 0x00007fc41ee3de62 in Fatima::ReadSensitive(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSFatima.so; #7 0x00007fc42d774f3d in DetectorConstruction::ReadAllSensitive(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSCore.so; #8 0x00007fc42d756444 in EventAction::EndOfEventAction(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSCore.so; #9 0x00007fc42b8aaf23 in G4EventManager::DoProcessing(G4Event*) () at /home/apal/G4/geant4-install/lib/libG4event.so; #10 0x00007fc42d2240f7 in G4RunManager::DoEventLoop(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so; #11 0x00007fc42d221d22 in G4RunManager::BeamOn(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so; #12 0x00007fc42d23fb27 in G4RunMessenger::SetNewValue(G4UIcommand*, G4String) () at /home/apal/G4/geant4-install/lib/libG4run.so; #13 0x00007fc42d14f35f in G4UIcommand::DoIt(G4String) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so; #14 0x00007fc42d16cc9a in G4UImanager::ApplyCommand(char const*) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so; #15 0x00007fc42d2e28bf in G4VBasicShell::ExecuteCommand(G4String const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so; #16 0x00007fc42d2e7afe in G4VBasicShell::ApplyShellCommand(G4String const&, bool&, bool&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so; #17 0x00007fc42d2daac4 in G4UIQt::ButtonCallback(QString const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so; #18 0x00007fc4283cf328 in QMetaObject::activate(QObject*, int, int, void**) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5; #19 0x00007fc428f0e3e6 in QAction::triggered(bool) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5; #20 0x00007fc428f10aa2 in QAction::activate(QAction::ActionEvent) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5; #21 0x00007fc42900ae10 in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5; #22 0x00007fc42900b035 in QAbstractButton::mouseRele",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11071:150,Detect,DetectorConstruction,150,https://root.cern,https://github.com/root-project/root/issues/11071,1,['Detect'],['DetectorConstruction']
Safety,"```; The following tests FAILED:; 1312 - roottest-python-basic-basic (Failed); 1313 - roottest-python-basic-datatype (Failed); 1315 - roottest-python-basic-overload (Failed); 1409 - roottest-python-pythonizations-pythonizations (Failed); 1410 - roottest-python-pythonizations-smartptr (Failed); 1413 - roottest-python-stl-stl (Failed); 2106 - roottest-root-tree-fastcloning-runabstract-copy (Failed); ```. All tests have the following issue:. ```; Start 1312: roottest-python-basic-basic. 1312: Test command: /usr/bin/cmake ""-DCMD=/usr/bin/timeout^-s^USR2^270s^/home/sftnight/swunsch/python/bin/python3^/home/sftnight/swunsch/root/roottest/python/basic/PyROOT_basictests.py^--fixcling"" ""-DPRE=/home/sftnight/swunsch/build/bin/root.exe^-b^-q^-l^-e^.L ArgumentPassingCompiled.C+"" ""-DOUT=/home/sftnight/swunsch/build/roottest/python/basic/basic.log"" ""-DCWD=/home/sftnight/swunsch/build/roottest/python/basic"" ""-DDIFFCMD=/home/sftnight/swunsch/python/bin/python3^/home/sftnight/swunsch/root/roottest/scripts/custom_diff.py"" ""-DCHECKOUT=true"" ""-DCHECKERR=true"" ""-DSYS=/home/sftnight/swunsch/build"" ""-DENV=LEGACY_PYROOT=False#ROOTSYS=/home/sftnight/swunsch/build#PATH=/home/sftnight/swunsch/build/bin:/home/sftnight/swunsch/python/bin:/home/sftnight/.local/bin:/home/sftnight/bin:/usr/lib64/ccache:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin#PYTHONPATH=/home/sftnight/swunsch/build/lib:#LD_LIBRARY_PATH=/home/sftnight/swunsch/build/lib:/home/sftnight/swunsch/python/lib:"" ""-DCOPY=/home/sftnight/swunsch/root/roottest/python/basic/ArgumentPassingCompiled.C^/home/sftnight/swunsch/root/roottest/python/basic/ReturnValues.C^/home/sftnight/swunsch/root/roottest/python/basic/SimpleClass.C^/home/sftnight/swunsch/root/roottest/python/basic/ArgumentPassingInterpreted.C"" ""-P"" ""/home/sftnight/swunsch/build/RootTestDriver.cmake""; 1312: Environment variables: ; 1312: ROOT_HIST=0; 1312: Test timeout computed to be: 300; 1312: Info in <TUnixSystem::ACLiC>: creating shared library /home/sftnight/swunsch/build",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6597:540,timeout,timeout,540,https://root.cern,https://github.com/root-project/root/issues/6597,1,['timeout'],['timeout']
Safety,"```valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C; ==22765== Memcheck, a memory error detector; ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info; ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C; ==22765== . Processing assertSparseSelection.C...; ==22765== Conditional jump or move depends on uninitialised value(s); ==22765== at 0x9D9A01A: llvm::Co",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11385:902,detect,detector,902,https://root.cern,https://github.com/root-project/root/issues/11385,1,['detect'],['detector']
Safety,"`fork()`-ing a multi-thread program typically ends up badly. In ROOT, TBB spawns threads when RTaskArena is constructed, and Cocoa spawns threads, on Mac, when graphics are activated. We would like to employ a similar mechanism to what is used to loop over threads to print their stacktraces on a crash in order to detect whether `TTreeProcessorMP::Process` is called from a multi-thread program, and warn users if so.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7167:315,detect,detect,315,https://root.cern,https://github.com/root-project/root/issues/7167,1,['detect'],['detect']
Safety,`rootcling` does not properly detect the class doc when using a `ClassDefOverride`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9900:30,detect,detect,30,https://root.cern,https://github.com/root-project/root/issues/9900,1,['detect'],['detect']
Safety,"`roottest-python-JupyROOT-tpython_notebook` fails with `nbconvert-7.14`:; ```diff; --- tpython.ipynb; +++ tpython_out.ipynb; @@ -16,7 +16,14 @@; ""name"": ""stdout"",; ""output_type"": ""stream"",; ""text"": [; - ""1\n""; + ""1""; + ]; + },; + {; + ""name"": ""stdout"",; + ""output_type"": ""stream"",; + ""text"": [; + ""\n""; ]; }; ],; ```. For now, we avoid that version since https://github.com/root-project/roottest/pull/1041 / commit https://github.com/root-project/roottest/commit/a68af407d9577a055f44c58e42c42b1244b484cc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14303:330,avoid,avoid,330,https://root.cern,https://github.com/root-project/root/issues/14303,1,['avoid'],['avoid']
Safety,"`std::vector<T,Allocator>::operator[]` with unsafe assignment break pretty printer",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9166:44,unsafe,unsafe,44,https://root.cern,https://github.com/root-project/root/issues/9166,1,['unsafe'],['unsafe']
Safety,"a namespace:; ```py; import ROOT. ROOT.gInterpreter.Declare(; """"""; namespace ROOT{; namespace Detail{; struct MyStruct{};; void dostuff(){}; int myint;; }}; """"""; ); ```; Then try to access them in a Python session; ```py; $ python -i namespace_function.py; >>> ROOT.Detail.MyStruct; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; AttributeError: <namespace cppyy.gbl.Detail at 0x55e51fdc7f50> has no attribute 'MyStruct'. Full details:; type object 'Detail' has no attribute 'MyStruct'; 'Detail::MyStruct' is not a known C++ class; 'MyStruct' is not a known C++ template; 'MyStruct' is not a known C++ enum; >>> ROOT.ROOT.Detail.MyStruct; <class cppyy.gbl.ROOT.Detail.MyStruct at 0x55e51fe1dd60>; >>> ROOT.Detail.dostuff; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; AttributeError: <namespace cppyy.gbl.Detail at 0x55e51fdc7f50> has no attribute 'dostuff'. Full details:; type object 'Detail' has no attribute 'dostuff'; 'Detail::dostuff' is not a known C++ class; 'dostuff' is not a known C++ template; 'dostuff' is not a known C++ enum; >>> ROOT.ROOT.Detail.dostuff; <cppyy.CPPOverload object at 0x7f522b684eb0>; >>> ROOT.Detail.myint; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; AttributeError: <namespace cppyy.gbl.Detail at 0x55e51fdc7f50> has no attribute 'myint'. Full details:; type object 'Detail' has no attribute 'myint'; 'Detail::myint' is not a known C++ class; 'myint' is not a known C++ template; 'myint' is not a known C++ enum; >>> ROOT.ROOT.Detail.myint; 0; ```. It's unclear how to avoid the double `ROOT.ROOT` in general. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. Be able to avoid typing the name twice, at least for classes/functions defined in ROOT source code. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->. ROOT master on Fedora32",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8745:1880,avoid,avoid,1880,https://root.cern,https://github.com/root-project/root/issues/8745,2,['avoid'],['avoid']
Safety,"able to provide data from SQlite `SELECT` queries. It will be useful for cvmfs, where we have file catalogs and monitoring information in sqlite files. For instance, one can do. auto rdf = ROOT::RDF::MakeSqliteDataFrame(""catalog.sqlite"", ""select * from catalog"");; auto h = rdf.Define(""lname"", ""name.length()"").Histo1D(""lname"");. to show the distribution of file name sizes. There are probably more use cases, for instance sqlite export of conditions data. This is work in progress, I'm posting it for early comments and feedback. My open points are. - Unit and integration tests are yet to be done; - The data source work single-threaded only at the moment. I initially thought it might be enough to return only a single row in `GetEntryRanges()` to make it thread-safe but that's apparently not enough. So I'm now thinking to wrap `SetEntry()` and `GetEntryRanges()` in a mutex.; - The code is not reusing `TSQLiteServer`. It felt like it requires stretching the `TSQLServer` interface in perhaps unwanted ways, for saving only a handful of direct sqlite API calls. On the other hand, with (probably quite a bit) more work it might be possible to have a more general data source that works on any SQL result set.; - Determining column types in SQlite is tricky as it is dynamically typed and in principle each row can have different column types. If a table column is queried as is, I can use the default/declared column type. For expressions, I'll use the type of the first row of the result set. Still it can result in a column to be of type `NULL` where subsequent rows actually have meaningful values. My guess is that the current heuristic is practical enough, and of course the user can formulate the `SELECT` query to avoid ambiguity.; - It would not be impossible to add support for remote reading of sqlite files. To do so, one can add a custom implementation of an sqlite virtual file system to have data pouring in directly from HTTP or XRootD. This is perhaps something to keep in mind.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2322:1783,avoid,avoid,1783,https://root.cern,https://github.com/root-project/root/pull/2322,1,['avoid'],['avoid']
Safety,"ace/sw/SOURCES/ROOT/v6-24-02/v6-24-02/tree/tree/src/TBranchElement.cxx:1265; #12 0x00007ff4494ae069 in TBranchElement::FillImpl (this=0x7ff425170850, imtHelper=0x0) at /home/aliperf/aliperf_workspace/sw/SOURCES/ROOT/v6-24-02/v6-24-02/tree/tree/src/TBranchElement.cxx:1290; #13 0x00007ff44f4faf89 in TBranch::Fill (this=0x7ff425170850) at /home/aliperf/aliperf_workspace/sw/slc7_x86-64/ROOT/v6-24-02-local5/include/TBranch.h:201; #14 o2::base::DetImpl<o2::trd::Detector>::mergeAndAdjustHits<std::vector<o2::trd::Hit, std::allocator<o2::trd::Hit> > > (this=this; entry=0x3e69680, brname=..., origin=..., target=..., trackoffsets=..., nprimaries=..., subevtsOrdered=...) at /home/aliperf/aliperf_workspace/sw/SOURCES/O2/dev/0/Detectors/Base/include/DetectorsBase/Detector.h:403; #15 0x00007ff44f4fb507 in o2::base::DetImpl<o2::trd::Detector>::mergeHitEntries (this=0x3e69680, origin=..., target=..., trackoffsets=..., nprimaries=..., subevtsOrdered=...) at /home/aliperf/aliperf_workspace/sw/SOURCES/O2/dev/0/Detectors/Base/include/DetectorsBase/Detector.h:422; #16 0x00000000004456e1 in o2::devices::O2HitMerger::mergeAndFlushData (this=0x162d640, eventID=<optimized out>) at /home/aliperf/aliperf_workspace/sw/SOURCES/O2/dev/0/run/O2HitMerger.h:745; #17 0x00007ff446ec9f10 in std::execute_native_thread_routine (__p=0x7ad9e10) at ../../../../../gcc/libstdc++-v3/src/c++11/thread.cc:80; #18 0x00007ff44e186ea5 in start_thread () from /lib64/libpthread.so.0; #19 0x00007ff44680796d in clone () from /lib64/libc.so.6. Thread 5 (Thread 0x7ff42a18e700 (LWP 25519) ""o2-sim-hit-merg""):; #0 0x00007ff44e18ade2 in pthread_cond_timedwait. GLIBC_2.3.2 () from /lib64/libpthread.so.0; #1 0x00007ff44aca29d3 in __gthread_cond_timedwait (__abs_timeout=0x7ff42a187a30, __mutex=<optimized out>, __cond=<optimized out>) at /home/aliperf/aliperf_workspace/sw/slc7_x86-64/GCC-Toolchain/v10.2.0-alice2-local3/include/c++/10.2.0/x86_64-unknown-linux-gnu/bits/gthr-default.h:872; #2 std::condition_variable::__wait_until_imp",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8931:4337,Detect,Detectors,4337,https://root.cern,https://github.com/root-project/root/issues/8931,3,['Detect'],"['Detector', 'Detectors', 'DetectorsBase']"
Safety,"acters (`[` and `]`, in this case), and these characters end up in variable names in the .C macro. I have included a reproducer below (`test_plot_macros.cpp`) which produces three .C macros, two of which are broken as described above.; For instance, in `plot1.C` (one of the produced macros), one can find invalid code such as ; ```cpp; Double_t pdf_Norm[x]_fx1[114] = {; -10.2002,; -10.2,; ...; ```. Would it be possible to filter these special characters when producing the macros?. ### Reproducer. Create a file `test_plot_macros.cpp` containing the script below and run `root test_plot_macros.cpp`. ```cpp; #include ""TCanvas.h"". #include ""RooArgSet.h""; #include ""RooDataSet.h""; #include ""RooGaussian.h""; #include ""RooPlot.h""; #include ""RooRealVar.h"". using namespace RooFit;. void test_plot_macros() {; // Create a PDF; RooRealVar x(""x"", ""x"", -10, 10);; RooRealVar mean(""mean"", ""mean"", 0, -10, 10);; RooRealVar width(""width"", ""width"", 2, 0, 5);; RooGaussian gaus(""pdf"", ""pdf"", x, mean, width);. // Generate some data; RooDataSet* data = gaus.generate(RooArgSet(x), Name(""data""), NumEvents(2000));. // Plots; TCanvas* c = new TCanvas(""c"");. // Plot 1; // Broken .C macro because of default pdf ""Name()""; RooPlot* frame1 = x.frame();; data->plotOn(frame1);; gaus.plotOn(frame1);; frame1->Draw();; c->SaveAs(""./plot1.png"");; c->SaveAs(""./plot1.C"");. // Plot 2; // Not broken .C macro because of explicit (and safe) ""Name()"" configuration; RooPlot* frame2 = x.frame();; data->plotOn(frame2);; gaus.plotOn(frame2, Name(""gaus""));; frame2->Draw();; c->SaveAs(""./plot2.png"");; c->SaveAs(""./plot2.C"");. // Plot 3; // Broken .C macro again because special charecters are not filtered from ""Name""; RooPlot* frame3 = x.frame();; data->plotOn(frame3);; gaus.plotOn(frame3, Name(""a+b""));; frame3->Draw();; c->SaveAs(""./plot3.png"");; c->SaveAs(""./plot3.C"");; }; ```. ### ROOT version. 6.24.06. ### Installation method. Built from source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15887:1811,safe,safe,1811,https://root.cern,https://github.com/root-project/root/issues/15887,1,['safe'],['safe']
Safety,all edges; e4555770c7 [tmva][sofie-gnn] Add support for LayerNormalization and registering additional functions; b6ac312508 [tmva][sofie-gnn] Test LHCb toy model with SOFIE-GNN; 5455f90c3a [tmva][sofie-gnn] Python in-memory parse function and tests; d925d6a805 [tmva][sofie-gnn] Introducing RModel_GraphIndependent; 2df806aa32 [tmva][sofie-gnn] Introducing RFunctions for SOFIE-GNN; 1ca9b4c240 [tmva][sofie-gnn] Introducing SOFIE-GNN; 6cb0d0a957 [TMVA] Don't use the same file name (`TMVA.root`) everywhere (#13576); 4fe2f6ef61 [pymva] Refactor TestRModelParserPyTorch to use RSofieReader; e53fcb7b6a [tmva][sofie] Fix formattting in RModel; f93775a9dc [tmva][sofie] Add options to append generated C++ code and weights; 4f0450b46e [tmva] fix bug in reshape operator when it is used as the first operator of the model; 8fa423de1a [TMVA/SOFIE] Save weights in ROOT binary files (#13423); 91d7dc9cee [tmva] use SetDirectory(nullptr); 34c4a497c5 [tmva] reduce usage of `Form` method; df8ab656e3 [tmvagui] avoid usage of Form function; 5bf591928a [tmva] avoid Form usage in tests; a18373ec99 [tmva] fix wrong Form usage in remaining classes; c251183d62 [tmva] reduce usage of Form; a50b03c9b7 [tmva] fix multiple places where Form is wrongly used twice is same call; 20fa3a3b4d [tmva] fix wrong Form usage is several next classes; 9eba38ba7a [tmva] fix wrong usage of Form in several classes; 9b3e9dc4e0 [tmva] replace Form by TString::Format in several classes; a6c9608215 [tmva] avoid Form usage in Classification.cxx; 50bd755c37 [tmva] fix Form usage in MethodTMlpANN; befd36fdb1 Fix yet another assertion failure on Windows; fb94e0b032 [tmva] Fix RTensor::ExpandDims(); 99378cfba9 Fix Lenght typos (#13281); 8786fa4392 Added cpp files for RBatchGenerator; 3f55b20888 feat: added tutorial links; c432106115 feat: include link for sofie onnx parser; cf5449bd63 fix: email id for communication; 4f8a5972df docs: Update SOFIE documentation; cdb4a81f87 Error function implemented successfully with the corr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13783:2297,avoid,avoid,2297,https://root.cern,https://github.com/root-project/root/pull/13783,3,['avoid'],['avoid']
Safety,and a test.; This PR includes also #3363 just to avoid conflicts,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3364:49,avoid,avoid,49,https://root.cern,https://github.com/root-project/root/pull/3364,1,['avoid'],['avoid']
Safety,"and fitTo() to ModelConfig; cf98956266 [RF] Add exceptions to setter methods for non-existing objects; 1cc5ec46c8 [RF] Forbid resetting RooFormula; b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test; 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes; 3dcea7036a [RF] Support simultaneous fits in NLL code generation; a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface; 3d01cd2e8f [RF] Remove deprecated RooAbsString; 059af6d55a [RF] Remove RooAbsRootFinder; bdc19e090e [RF] Get rid of RooScaledFunc; 88dbb6ad17 [RF] Make RooGenProdProj private; 94ee158ddc [RF] Remove deprecated RooCatType; d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h; f78558eb0a [RF] Mark template specialization as inline; ca29ccf161 [RF] Some cleanup of public `roofitcore` classes; 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code; 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads; 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`; 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum].; 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar; 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma; f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`; b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation; 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf.; 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files.; 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial.; e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions; 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code; 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing; 7a12837f66 [RF] Split up CodeSquashContext in `.h",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12905:3635,Avoid,Avoid,3635,https://root.cern,https://github.com/root-project/root/pull/12905,1,['Avoid'],['Avoid']
Safety,and templates in the context of private methods to avoid doc squeezed to the right.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2744:51,avoid,avoid,51,https://root.cern,https://github.com/root-project/root/pull/2744,1,['avoid'],['avoid']
Safety,"and therewith notebooks.; This was necessary to work around fakemodule, which has been removed; from ipython a long time ago.; The invocation to TPython triggers the loading of the TPyClassGenerator; TClassGenerator. Such generator acquires the GIL from within C++ code; unavoidably leading to deadlocks if ROOT thread safety is enabled. As a side effect, importing Python from within notebooks and ipython significantly speeds up.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3262:319,safe,safety,319,https://root.cern,https://github.com/root-project/root/pull/3262,1,['safe'],['safety']
Safety,"andleContainerMotion(Event_t*) (this=0x3565110, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TRootEmbeddedCanvas.cxx:387; #8 0x00007fc5a14a19f1 in TGFrame::HandleEvent(Event_t*) (this=0x35665d0, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGFrame.cxx:531; #9 0x00007fc5a1458a48 in TGClient::HandleEvent(Event_t*) (this=0x2e17e80, event=0x7ffe06062550) at /usr/src/debug/root-6.22.02/gui/gui/src/TGClient.cxx:843; #10 0x00007fc5a1458f85 in TGClient::ProcessOneEvent() (this=this; ```. I was able to trace the problem to the math operations performed in the TPad.cxx and TPavelabel.cxx and it looks in many cases there are simply divisions by zero. e.g. in TPaveLabel.cxx instead of . ```; Double_t wh = (Double_t)gPad->XtoPixel(gPad->GetX2());; Double_t hh = (Double_t)gPad->YtoPixel(gPad->GetY1());; Double_t labelsize, textsize = GetTextSize();; Int_t automat = 0;; if (GetTextFont()%10 > 2) { // fixed size font specified in pixels; labelsize = GetTextSize();; } else {; if (TMath::Abs(textsize -0.99) < 0.001) automat = 1;; if (textsize == 0) { textsize = 0.99; automat = 1;}; Int_t ypixel = TMath::Abs(gPad->YtoPixel(y1) - gPad->YtoPixel(y2));; labelsize = textsize*ypixel/hh;; if (wh < hh) labelsize *= hh/wh;; }; ```; One can have; ```; Double_t wh = gPad->XtoPixel(gPad->GetX2())==0?1.0:(Double_t)gPad->XtoPixel(gPad->GetX2());; Double_t hh = gPad->YtoPixel(gPad->GetY1())==0?1.0:(Double_t)gPad->YtoPixel(gPad->GetY1());; ....; ```. In the TPad.cxx there are many unsafe operations in the TPad::ExecuteEvent and TPad::Resize, e.g. ```; // Compute new pad positions in the NDC space of parent; fXlowNDC = Double_t(apx1 - parentpx1)/Double_t(parentpx2 - parentpx1);; fYlowNDC = Double_t(apy1 - parentpy1)/Double_t(parentpy2 - parentpy1);; fWNDC = Double_t(apx2 - apx1)/Double_t(parentpx2 - parentpx1);; fHNDC = Double_t(apy2 - apy1)/Double_t(parentpy2 - parentpy1);; ```. Would someone from developers be interested to look there ?. Best regards,. Andrii",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6344:2189,unsafe,unsafe,2189,https://root.cern,https://github.com/root-project/root/issues/6344,1,['unsafe'],['unsafe']
Safety,"anks in advance for fixing that issue, ; Romain. ### Reproducer. ```C++; #include ""TFileMerger.h""; #include ""TSystem.h""; #include ""TUUID.h""; #include ""TFile.h""; #include ""TH1F.h"". #include <iostream>; #include <string> . // Function defined after the main function ; void createFileWithHists(const std::string &fileName);. int main(){. // Choose the number of the test; // 0 or 1 ; int numTest = 0;. createFileWithHists(""myFileWithHists.root"");. TFileMerger fileMerger(false);; fileMerger.SetMsgPrefix(""selectiveHadd"");; fileMerger.SetPrintLevel(1);. // Set a selective list of objects to hadd ; // The rest of objects will not be considered in the input files ; fileMerger.AddObjectNames(""hist1"");; fileMerger.AddObjectNames(""hist2"");. // Set output file ; fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) ; fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){; ; // In that case add a dummy file i.e. empty file ; // In order to avoid the bug in in the TFileMerger class ; // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();; // create a unique empty file ; std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;; // Just create dummy file ; TFile *file = TFile::Open(dummyFileName.c_str(),""recreate"");; delete file;; fileMerger.AddFile(dummyFileName.c_str());; }; ; // Will only merge in the output files ; // the list of objects specified ; Int_t mode = (TFileMerger::kAll | TFileMerger::kRegular | TFileMerger::kOnlyListed);; ; fileMerger.PartialMerge(mode);; ; return 0;; }. void createFileWithHists(const std::string &fileName){; TFile *file = TFile::Open(fileName.c_str(), ""recreate""); . TH1F *hist1 = new TH1F(""hist1"", ""hist1"", 1 , 0 , 2);; TH1F *hist2 = new TH1F(""hist2"", ""hist2"", 1 , 0 , 2);; TH1F *hist3 = new TH1F(""hist3"", ""hist3"", 1 , 0 , 2);; TH1F *h",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13359:3178,avoid,avoid,3178,https://root.cern,https://github.com/root-project/root/issues/13359,1,['avoid'],['avoid']
Safety,"aps_samp_thr.patch; [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch; ```diff; diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx; index fc93cc8b82..0e77517729 100644; --- a/geom/geompainter/src/TGeoChecker.cxx; +++ b/geom/geompainter/src/TGeoChecker.cxx; @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T; /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints; /// inside the volume shape. -void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */, Int_t npoints) const; +void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t ovlp, Int_t npoints) const; {; Int_t nd = vol->GetNdaughters();; if (nd < 2); @@ -1268,7 +1268,7 @@ void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */,; }; // The point is inside 2 or more daughters, check safety; safe = shape->Safety(local, kTRUE);; - // if (safe < ovlp) continue;; + if (safe < ovlp) continue;; // We really have found an overlap -> store the point in a container; iovlp++;; if (!novlps) {; ```. 3. Recompile/Reinstall and Re-run: big overlaps unchanged as expected, known overlaps of size ~0.4 still there with low threshold but masked with sufficient threshold, overlap of size ~10^-8 cut in all cases as expected. ### ROOT version. Original observation with `v6.22` to `v6.26`; Cross-check with current master, given source commit probably present from `v5-19-04` until current master. ### Installation method. Built from source within Fairsoft, built from source standalone. ### Operating system. Ubuntu 20.04, Debian 10 and 11. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14675:4473,safe,safety,4473,https://root.cern,https://github.com/root-project/root/issues/14675,5,"['Safe', 'safe']","['Safety', 'safe', 'safety']"
Safety,"ar intermediate results into loops in generated code; 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing; 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file; 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector; 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`; d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers; cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`; 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers; f4fc140268 [RF] Remove RooMomentMorphND; 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf; d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10; 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper.; 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument; 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext; ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(); c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew.; 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation; c51376731b [RF][NFC] Fix typo.; 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off.; 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit.; 98d004c200 [RF] Fix visibility of the res/ directories.; e97347056c [RF] Make RooBatchCompute dependency public.; 4483b01b7f [RF] Add initial interface and implementation for code-squashing.; f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer; 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; fce73f0565 [R",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12681:1870,Avoid,Avoid,1870,https://root.cern,https://github.com/root-project/root/pull/12681,4,['Avoid'],['Avoid']
Safety,"ard for unknown arguments. ; * `TRint` crashes when instantiated with `*argc = nullptr` and / or `argv = nullptr` which are the default values for `TApplication` and hence may be used by existing users of the `TRint` constructor. . ### Affected use cases; Applications may do something like:; ```cpp; TRint *app = new TRint(""app"", 0, NULL);; ...; app->Run(kTRUE);; ```; Applications may also use `TRint` during operation. One existing model some applications I use are employing is:; * Create a `TRint` shortly after startup, passing in `argc` and `argv`. ; * Allow the user to drop to a ROOT interpreter prompt. This is then done by calling `app->Run(kTRUE);`. A user can use the interpreter to inspect state of the analysis software, and exit it again to let the software continue. . The latter approach is extremely useful for example to shell out after analysis software startup, or inside an event, such that the user can interactively analyze objects right from a ROOT interpreter shell. . ### Questions; * Is the use case ""use TRint as class to drop into the interpreter"" supported? ; The changelog of 6.26.00 reads like `TRint` is meant for internal use by `root.exe` only, but there seems to be no easy alternative. ; Depending on the reply, this could be a separate bug report, or a ""wontfix"". ; * If the use case is / should be supported, It would be useful to be able to allow unsupported arguments to pass through, for use in applications which are not `root.exe`. ; * For improved backwards compatibility and safety, not crashing when being passed `*argc = nullptr` and / or `argv = nullptr` would be nice. . In case somebody else is hit by this, I am right now using this hack as workaround:; ```cpp; int dargc = 1;; char** dargv = &argv[0];; myApp = new TRint(""myApp"", &dargc, dargv, nullptr, 0, kTRUE);; myApp->GetOptions(&argc, (argv));; gSystem->SetProgname(argv[0]);; ```; This allows to re-use the `TApplication` functionality as before, without triggering one of the two issues.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10090:1775,safe,safety,1775,https://root.cern,https://github.com/root-project/root/issues/10090,1,['safe'],['safety']
Safety,"as it turnes out the `...class.C` files generated by the TMVA MLP are not thread safe (`fWeights` is a constant array of contant pointers to beginnings of double arrays, and the contents therein vary at runtime inside the GetMvaValue__ method). So the quick hack here is to replace the class member of dynamically allocated arrays by fixed sized arrays in the function scope. # QUASICODE OLD. ```; class mlp {; private:; double *fweights[3]; mlp() {; fweights[0] = new double[5];; fweights[1] = new double[10];; fweights[2] = new double[1];; }; ~mlp() {; delete fweights[0];; delete fweights[1];; delete fweights[2];; }; getmvavalue( std::vector<double> input) const {; fweights[0] = input;; fweights[1] = some_function(fweights[0]);; fweights[2] = some_other_function(fweights[1]);; return fweights[2][0];; }; ```. # QUASICODE NEW. ```; class mlp {; private:; mlp() {; }; ~mlp() {; }; getmvavalue( std::vector<double> input) const {. double fweights0[5];; double fweights1[10];; double fweights2[1];; fweights0 = input;; fweights1 = some_function(fweights0);; fweights2 = some_other_function(fweights1);; return fweights2[0];; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/572:81,safe,safe,81,https://root.cern,https://github.com/root-project/root/pull/572,1,['safe'],['safe']
Safety,"assInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state.; fState = kForwardDeclared;. delete fIsA; fIsA = 0;; // Disable the autoloader while calling SetClassInfo, to prevent; // the library from being reloaded!; {; TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);; TInterpreter::SuspendAutoParsing autoParseRaii(gCling);; gInterpreter->SetClassInfo(this,kTRUE);; }; ```. Likely disabling template instantiation inside SetClassInfo in this use case. ```; art: /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837: void clang::ClassTemplateSpecializationDecl::setInstantiationOf(clang::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462:1463,Abort,Aborted,1463,https://root.cern,https://github.com/root-project/root/pull/5462,1,['Abort'],['Aborted']
Safety,"at version: RC 1; [ OK ] RNTuple.ReconstructModel (160 ms); [ RUN ] RNTuple.MultipleInFile; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Fatal: nread == nbytes violated at line 1083 of `/builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RMiniFile.cxx'; aborting; [ --- ]; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-endian. Here the bytes are in the right order, but shifted 4 bytes. $ printf '%016x\n%016x\n' 1234605615003729920 287454020; 1122334400000000; 0000000011223344; $ printf '%016x\n%016x\n' 6153737371142586367 1432778632; 55667788ffffffff; 0000000055667788; ~~~; 449/1272 Test #424: gtest-tree-ntuple-v7-test-ntuple-endian .............................***Failed 0.04 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 9 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 9 tests from RColumnElementEndian; [ RUN ] RColumnElementEndian.Float; [ OK ] RColumnElementEndian.Float (6 ms); [ RUN ] RColumnElementEndian.Double; [ OK ] RColumnElementEndian.Double (3 ms); [",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:2796,abort,aborted,2796,https://root.cern,https://github.com/root-project/root/issues/12426,1,['abort'],['aborted']
Safety,"ate a histogram; ROOT::RDF::RResultPtr<TH1D> h = rdf.Define(""x"", [](){ return gRandom->Rndm(); }).Histo1D(""x"");. // Add the histogram to a vector; vector<ROOT::RDF::RResultPtr<TH1D>> histograms;; histograms.push_back(h);. // Attempt to throw an error; throw std::runtime_error(""intended error throw for debugging"");. return histograms;; }; ```. ### Additional context; For additional context see https://root-forum.cern.ch/t/pointer-not-allocated-when-adding-rresultptr-to-vector/51831/2. Interesting part of the gdb backtrace follows (thanks @eguiraud!):; ```; >>> bt; #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at pthread_kill.c:44; #1 0x00007ffff72a1503 in __pthread_kill_internal (signo=6, threadid=<optimized out>) at pthread_kill.c:78; #2 0x00007ffff7251958 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26; #3 0x00007ffff723b53d in __GI_abort () at abort.c:79; #4 0x00007ffff729563e in __libc_message (action=action@entry=do_abort, fmt=fmt@entry=0x7ffff73b4432 ""%s\n"") at ../sysdeps/posix/libc_fatal.c:155; #5 0x00007ffff72ab22c in malloc_printerr (str=str@entry=0x7ffff73b6ff8 ""free(): double free detected in tcache 2"") at malloc.c:5660; #6 0x00007ffff72ad587 in _int_free (av=0x7ffff73f1ba0 <main_arena>, p=0x55555e7134c0, have_lock=have_lock@entry=0) at malloc.c:4469; #7 0x00007ffff72af9f3 in __GI___libc_free (mem=<optimized out>) at malloc.c:3385; #8 0x00007ffff18d07b4 in std::_Vector_base<ROOT::RDF::RResultPtr<TH1D>, std::allocator<ROOT::RDF::RResultPtr<TH1D> > >::~_Vector_base (this=0x55555881f750) at /usr/lib/gcc/x86_64-pc-linux-gnu/12.2.0/../../../../include/c++/12.2.0/bits/stl_vector.h:366; #9 0x00007ffff23aa435 in cling::Value::~Value() () from /home/blue/ROOT/master/cmake-build-foo/lib/libCling.so; #10 0x00007ffff21a1869 in TCling::ProcessLine (this=0x5555555ee950, line=0x5555563e9c60 "".X /tmp/./pointer_not_allocated_error.C"", error=0x7fffffffb600) at ../core/metacling/src/TCling.cxx:2633; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11494:2163,detect,detected,2163,https://root.cern,https://github.com/root-project/root/issues/11494,1,['detect'],['detected']
Safety,"attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; See the following reproducer https://gist.github.com/vepadulano/cf52f6326ae2058c36a35d08dee3a258. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; ROOT master; Fedora 32; `cmake -GNinja -Ddev=ON -DCMAKE_BUILD_TYPE=Debug -Dtesting=ON -Droottest=ON -DCMAKE_INSTALL_PREFIX=$ROOT_INSTALL $ROOT_HOME`; ### Additional context; <!--; Add any other context about the problem here.; -->; Stack trace of the reproducer; ```; Fill: Switching to new file: filemergerinput_1.root; Fill: Switching to new file: filemergerinput_2.root; Fill: Switching to new file: filemergeroutput_1.root; Fatal in <TFileMerger::RecursiveRemove>: Output file of the TFile Merger (targeting filemergeroutput.root) has been deleted (likely due to a TTree larger than 100Gb); aborting; #0 0x00007fb64aa08eca in __GI___wait4 (pid=307930, stat_loc=stat_loc; entry=0x7ffcc038dd08, options=options; entry=0, usage=usage; entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27; #1 0x00007fb64aa08e8b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc; entry=0x7ffcc038dd08, options=options; entry=0) at waitpid.c:38; #2 0x00007fb64a984aa7 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172; #3 0x00007fb64d2901a2 in TUnixSystem::Exec (this=0x1ce7800, shellcmd=0x3dc6940 ""/home/vpadulan/Programs/rootproject/rootinstall/debugtest/etc/gdb-backtrace.sh 307906 1>&2"") at /home/vpadulan/Programs/rootproject/root/core/unix/src/TUnixSystem.cxx:2120; #4 0x00007fb64d290a08 in TUnixSystem::StackTrace (this=0x1ce7800) at /home/vpadulan/Programs/rootproject/root/core/unix/src/TUnixSystem.cxx:2411; #5 0x00007fb64d1328b7 in DefaultErrorHandler (level=6000, abort_bool=true, location=0x7fb64a12d1e4 ""TFileMerger::RecursiveRemove"", msg=0x376e0b0 ""Output file of the TFile Merger (targeting filemergeroutput.root) ha",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6640:2232,abort,aborting,2232,https://root.cern,https://github.com/root-project/root/issues/6640,1,['abort'],['aborting']
Safety,avoid error bar clipping,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6697:0,avoid,avoid,0,https://root.cern,https://github.com/root-project/root/pull/6697,1,['avoid'],['avoid']
Safety,avoid error when copy&pasting code from doxygen,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/268:0,avoid,avoid,0,https://root.cern,https://github.com/root-project/root/pull/268,1,['avoid'],['avoid']
Safety,avoid memory copy in TDecompChol::TDecompChol,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15284:0,avoid,avoid,0,https://root.cern,https://github.com/root-project/root/pull/15284,1,['avoid'],['avoid']
Safety,"b.com/minimistjs/minimist/commit/47acf72c715a630bf9ea013867f47f1dd69dfc54""><code>47acf72</code></a></li>; <li>don't assign onto <strong>proto</strong> <a href=""https://github.com/minimistjs/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94""><code>63e7ed0</code></a></li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/minimistjs/minimist/commit/c590d75b741a12b5423e2b299f38a7f7c7d25a18""><code>c590d75</code></a> v1.2.7</li>; <li><a href=""https://github.com/minimistjs/minimist/commit/0ebf4ebcd5f7787a5524d31a849ef41316b83c3c""><code>0ebf4eb</code></a> [meta] add <code>auto-changelog</code></li>; <li><a href=""https://github.com/minimistjs/minimist/commit/e115b63fa9d3909f33b00a2db647ff79068388de""><code>e115b63</code></a> [actions] add reusable workflows</li>; <li><a href=""https://github.com/minimistjs/minimist/commit/01fc23f5104f85c75059972e01dd33796ab529ff""><code>01fc23f</code></a> [meta] add <code>safe-publish-latest</code></li>; <li><a href=""https://github.com/minimistjs/minimist/commit/f58745b9bb84348e1be72af7dbba5840c7c13013""><code>f58745b</code></a> [eslint] add eslint; rules to enable later are warnings</li>; <li><a href=""https://github.com/minimistjs/minimist/commit/228ae938f3cd9db9dfd8bd7458b076a7b2aef280""><code>228ae93</code></a> [Tests] add <code>aud</code> in <code>posttest</code></li>; <li><a href=""https://github.com/minimistjs/minimist/commit/236f4a07e4ebe5ee44f1496ec6974991ab293ffd""><code>236f4a0</code></a> [readme] rename and add badges</li>; <li><a href=""https://github.com/minimistjs/minimist/commit/ab033567b9c8b31117cb026dc7f1e592ce455c65""><code>ab03356</code></a> [Dev Deps] switch from <code>covert</code> to <code>nyc</code></li>; <li><a href=""https://github.com/minimistjs/minimist/commit/49c5f9fb7e6a92db9eb340cc679de92fb3aacded""><code>49c5f9f</code></a> [Dev Deps] update <code>covert</code>, <code>tape</code>; remove unnecessary <code",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11865:5960,safe,safe-publish-latest,5960,https://root.cern,https://github.com/root-project/root/pull/11865,1,['safe'],['safe-publish-latest']
Safety,"b293ffd""><code>236f4a0</code></a></li>; <li>[meta] create FUNDING.yml; add <code>funding</code> in package.json <a href=""https://github.com/minimistjs/minimist/commit/783a49bfd47e8335d3098a8cac75662cf71eb32a""><code>783a49b</code></a></li>; <li>[meta] use <code>npmignore</code> to autogenerate an npmignore file <a href=""https://github.com/minimistjs/minimist/commit/f81ece6aaec2fa14e69ff4f1e0407a8c4e2635a2""><code>f81ece6</code></a></li>; <li>Only apps should have lockfiles <a href=""https://github.com/minimistjs/minimist/commit/56cad44c7f879b9bb5ec18fcc349308024a89bfc""><code>56cad44</code></a></li>; <li>[Dev Deps] update <code>covert</code>, <code>tape</code>; remove unnecessary <code>tap</code> <a href=""https://github.com/minimistjs/minimist/commit/49c5f9fb7e6a92db9eb340cc679de92fb3aacded""><code>49c5f9f</code></a></li>; <li>[Tests] add <code>aud</code> in <code>posttest</code> <a href=""https://github.com/minimistjs/minimist/commit/228ae938f3cd9db9dfd8bd7458b076a7b2aef280""><code>228ae93</code></a></li>; <li>[meta] add <code>safe-publish-latest</code> <a href=""https://github.com/minimistjs/minimist/commit/01fc23f5104f85c75059972e01dd33796ab529ff""><code>01fc23f</code></a></li>; <li>[meta] update repo URLs <a href=""https://github.com/minimistjs/minimist/commit/6b164c7d68e0b6bf32f894699effdfb7c63041dd""><code>6b164c7</code></a></li>; </ul>; <h2><a href=""https://github.com/minimistjs/minimist/compare/v1.2.5...v1.2.6"">v1.2.6</a> - 2022-03-21</h2>; <h3>Commits</h3>; <ul>; <li>test from prototype pollution PR <a href=""https://github.com/minimistjs/minimist/commit/bc8ecee43875261f4f17eb20b1243d3ed15e70eb""><code>bc8ecee</code></a></li>; <li>isConstructorOrProto adapted from PR <a href=""https://github.com/minimistjs/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d""><code>c2b9819</code></a></li>; <li>security notice for additional prototype pollution issue <a href=""https://github.com/minimistjs/minimist/commit/ef88b9325f77b5ee643ccfc97e2ebda577e4c4e2""><code>ef88b93</code></",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11865:2394,safe,safe-publish-latest,2394,https://root.cern,https://github.com/root-project/root/pull/11865,1,['safe'],['safe-publish-latest']
Safety,"bCore.so; #12 0x00007f682e411d18 in TScopeAdapter::Init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, bool) () from /sw/atlas/Athena/22.0.60/InstallArea/x86_64-centos7-gcc11-opt/lib/libDataModelRoot.so; ```. The place in the code where it's crashing in GetSplit after it calls; to StdLen:. ```; if ( mode & kDropStd) {; unsigned int offset = (0==strncmp(""const "",full.c_str(),6)) ? 6 : 0;; RemoveStd( full, offset );; }; ```. where RemoveStd is inlined:. ```; static void RemoveStd(std::string &name, size_t pos = 0); {; size_t len = StdLen({name.data()+pos,name.length()-pos});; if (len) {; ```. So, it calls to StdLen, which apparently then crashes by branching to 0.; It's unfortunately difficult to then tell exactly why that happened.; FWIW, the registers at the crash were:. ```; rip: 0033:0000000000000000 eflags: 0000000000010202; rax: 00000000ffffffeb rbx: 0000000000000220; rcx: 0000000000000078 rdx: 0000000000000000; r08: ffffffffffffffff r09: 00007f68354af4d0; r10: 72543a3a444f4178 r11: 0000000000000006; r12: 00000000961170c0 r13: 00007f67e4395a90; r14: 0000000000000000 r15: 00007f683459fb22; rsi: 00000000961170c0 rdi: 000000000000001f; rbp: 00007f67e4395c28 rsp: 00007f67e4395a48; ```. However, the reason i'm writing this up here is that StdLen contains; a mutable, static std::set instance:. ```; static ShuttingDownSignaler<std::set<std::string>> gInlined;; ```. So this appears to be a thread-safety issue, regardless of whether; this is actually reponsible for the observed crash. There is no lock protecting this in either StdLen or in the TClass; methods that call it. There is a lock (gCoreMutex) taken in TClass::GetClass,; so we should be safe against other code that's using GetClass.; However, ATLAS code also directly uses TClassEdit in a number of places,; so i think we do have a potential race. (Though we don't use it from so many places, so it may be feasible; to wrap our uses of TClassEdit with taking gCoreMutex.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10353:3016,safe,safety,3016,https://root.cern,https://github.com/root-project/root/issues/10353,2,['safe'],"['safe', 'safety']"
Safety,"back port of https://github.com/root-project/root/pull/12863. This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in; addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same; STL collection (this is supported) and we have the following sequence of operation:. 1. load library A; 2. load library B (dictionary registration is ignored as intended); 3. request TClass for STL collection.; 4. unload (dclose) library B; 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL; collection to be marked as ""unloaded"" even though it library (A); was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed; from memory on first use and thus if the library was closed and re-opened/loaded; we no longer had the information needed to restore the TClass object corresponding; to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12914:867,avoid,avoid,867,https://root.cern,https://github.com/root-project/root/pull/12914,1,['avoid'],['avoid']
Safety,"bits are immediately modified again by `_int_free`:. ```cpp; #0 tcache_put (tc_idx=0, chunk=0x55555562e400) at malloc.c:3183; #1 _int_free (av=0x7ffff4dfdbc0 <main_arena>, p=0x55555562e400, have_lock=0) at malloc.c:4481; #2 0x00007ffff4c9c8f3 in __GI___libc_free (mem=<optimized out>) at malloc.c:3391; #3 0x00007ffff7b30e64 in TStorage::ObjectDealloc (vp=0x55555562e410) at ../core/base/src/TStorage.cxx:362; #4 0x00007ffff7b14518 in TObject::operator delete (ptr=0x55555562e410) at ../core/base/src/TObject.cxx:1001; #5 0x00007ffff7b11cba in TObject::~TObject (this=0x55555562e410, __in_chrg=<optimized out>) at ../core/base/src/TObject.cxx:91; #6 0x0000555555556242 in main () at foo.cpp:9; ```. where the line that accidentally sets the bit again is 3181 here:. ```cpp; 3172 /* Caller must ensure that we know tc_idx is valid and there's room; 3173 for more chunks. */; 3174 static __always_inline void; 3175 tcache_put (mchunkptr chunk, size_t tc_idx); 3176 {; 3177 tcache_entry *e = (tcache_entry *) chunk2mem (chunk);; 3178; 3179 /* Mark this chunk as ""in the tcache"" so the test in _int_free will; 3180 detect a double free. */; 3181 e->key = tcache_key;; 3182; 3183 e->next = PROTECT_PTR (&e->next, tcache->entries[tc_idx]);; ```. and this version of the test circumvents that behavior of `_int_free` so it does not crash (at least on my laptop):. ```cpp; void *mem = malloc(sizeof(TObject));; auto o = new (mem) TObject();; auto l = new TList();; l->SetName(""my own list"");; l->Add(o);; o->~TObject();; l->Clear();; free(mem);; ```. If my understanding is correct, this also means that the test failure is real in the sense that the `kNotDeleted` mechanism does not correctly work on platforms where `free` has that behavior. From Philippe (https://github.com/root-project/roottest/pull/880#issuecomment-1239663370):. > We (I) need to extend the core library to detect when there is a memory checker (or similar) that leads to the memory being salted after a delete and in that case disable ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11330:1260,detect,detect,1260,https://root.cern,https://github.com/root-project/root/issues/11330,1,['detect'],['detect']
Safety,"build/master-debug/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date; <<< cling interactive line includer >>>: note: imported by module 'Hist' in '/home/pcanal/root_working/build/master-debug/lib/Hist.pcm'; ....; ```. This seems ""reversed and indeed:. ```; ls -lrt lib/RIO.pcm lib/Hist.pcm; -rw-r--r-- 1 pcanal pcanal 5537736 Mar 25 21:11 lib/Hist.pcm; -rw-r--r-- 1 pcanal pcanal 3220264 Mar 25 21:13 lib/RIO.pcm; ```. Maybe either:; ```; <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/master-debug/lib/Hist.pcm' is out of date and needs to be rebuilt: module file out of date; <<< cling interactive line includer >>>: note: imported module 'RIO' in '/home/pcanal/root_working/build/master-debug/lib/RIO.pcm' is newer.; ....; ```. ```; <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/master-debug/lib/RIO.pcm' is newer and all dependent module needs to be rebuilt; <<< cling interactive line includer >>>: note: imported by module 'Hist' in '/home/pcanal/root_working/build/master-debug/lib/Hist.pcm'; ....; ```. Cheers,; Philippe. PS Full error message:; ```; <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/master-debug/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date; <<< cling interactive line includer >>>: note: imported by module 'Hist' in '/home/pcanal/root_working/build/master-debug/lib/Hist.pcm'; Failed to load module Hist; Failed to load module RDAVIX; Failed to load module RooFitMore; Failed to load module RooFitRDataFrameHelpers; Failed to load module FITSIO; Failed to load module FFTW; Failed to load module MathMore; root.exe: /home/pcanal/root_working/code/root/interpreter/llvm/src/tools/clang/lib/Lex/Lexer.cpp:3940: bool clang::Lexer::LexTokenInternal(clang::Token&, bool): Assertion `Result.is(tok::eof) && ""Preprocessor did not set tok:eof""' failed. ; Aborted; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7704:2206,Abort,Aborted,2206,https://root.cern,https://github.com/root-project/root/issues/7704,1,['Abort'],['Aborted']
Safety,"by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; 	add-auto-load-safe-path /srv/root/build/lib/libCore.so-gdb.py; line to your configuration file ""/home/amadio/.config/gdb/gdbinit"".; To completely disable this security protection add; 	set auto-load safe-path /; line to your configuration file ""/home/amadio/.config/gdb/gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; 	info ""(gdb)Auto-loading safe path""; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/usr/lib64/libthread_db.so.1"".; [Detaching after vfork from child process 798483]; [Detaching after vfork from child process 800084]; [Detaching after vfork from child process 800087]; ------------------------------------------------------------------; | Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Dec 13 2022, 14:33:20 |; | From heads/cling-profile-debug@v6-25-02-3189-gf5fced388b |; | With c++ (Gentoo 12.2.1_p20221203 p3) 12.2.1 20221203 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. [Detaching after vfork from child process 800350]; root [0] double f(double x) { return x*x; }; root [1] double y = f(3.0);; Failure value returned from cantFail wrapped call; inconsistent use of embedded source; UNREACHABLE executed at /srv/root/src/root/interpreter/llvm/src/include/llvm/Support/Error.h:782!. Program received signal SIGABRT, Aborted.; __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at pthread_kill.c:44; 44	 return INTERNAL_SYSCALL_ERROR_P (ret) ? INTERNAL_SYSCALL_ERRNO (ret) : 0;; (gdb) . ```; I will try with dwarf-5 for everything, let's see if that helps. At least GDB didn't crash this time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11882:3088,Abort,Aborted,3088,https://root.cern,https://github.com/root-project/root/pull/11882,1,['Abort'],['Aborted']
Safety,c/TGeoTube.cxx:2107:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2107; /opt/root_src/geom/geom/src/TGeoTube.cxx:2773:13: warning: Value stored to 's' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 's' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2773; /opt/root_src/geom/geom/src/TGeoTube.cxx:2909:13: warning: Value stored to 'sz1' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'sz1' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2909; /opt/root_src/geom/geom/src/TGeoTube.cxx:3015:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:3015; /opt/root_src/geom/geom/src/TGeoVolume.cxx:2899:7: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Assuming field 'fNodes' is null in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2876; 2: Taking false branch in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2876; 3: Assuming field 'fFinder' is null in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2880; 4: Taking false branch in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2880; 5: Assuming 'ncells' is not equal to 0 in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2885; 6: Left side of '||' is false in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2885; 7: Assuming the condition is false in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2885; 8: Taking false branch in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2885; 9: Taking false branch in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2892; 10: Assuming 'i' is < 'ncells' in /opt/root_src/geom/geom/src/TG,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:75764,safe,safe,75764,https://root.cern,https://github.com/root-project/root/issues/7428,1,['safe'],['safe']
Safety,c/TProof.cxx:10517; 2: Taking false branch in /opt/root_src/proof/proof/src/TProof.cxx:10517; 3: Assuming 'sl' is non-null in /opt/root_src/proof/proof/src/TProof.cxx:10522; 4: Left side of '||' is false in /opt/root_src/proof/proof/src/TProof.cxx:10522; 5: Assuming the condition is false in /opt/root_src/proof/proof/src/TProof.cxx:10522; 6: Left side of '||' is false in /opt/root_src/proof/proof/src/TProof.cxx:10522; 7: Assuming 's' is non-null in /opt/root_src/proof/proof/src/TProof.cxx:10522; 8: Taking false branch in /opt/root_src/proof/proof/src/TProof.cxx:10522; 9: Assuming the condition is true in /opt/root_src/proof/proof/src/TProof.cxx:10527; 10: Left side of '||' is true in /opt/root_src/proof/proof/src/TProof.cxx:10527; 11: 'shutdown' is true in /opt/root_src/proof/proof/src/TProof.cxx:10530; 12: Left side of '&&' is true in /opt/root_src/proof/proof/src/TProof.cxx:10530; 13: Taking true branch in /opt/root_src/proof/proof/src/TProof.cxx:10530; 14: Assuming 'timeout' is <= 20 in /opt/root_src/proof/proof/src/TProof.cxx:10535; 15: '?' condition is false in /opt/root_src/proof/proof/src/TProof.cxx:10535; 16: Calling 'TProof::Collect' in /opt/root_src/proof/proof/src/TProof.cxx:10539; 17: 'list' is not equal to kAll in /opt/root_src/proof/proof/src/TProof.cxx:2728; 18: Taking false branch in /opt/root_src/proof/proof/src/TProof.cxx:2728; 19: 'list' is equal to kActive in /opt/root_src/proof/proof/src/TProof.cxx:2729; 20: Taking true branch in /opt/root_src/proof/proof/src/TProof.cxx:2729; 21: Value assigned to 'mon' in /opt/root_src/proof/proof/src/TProof.cxx:2729; 22: 'list' is not equal to kUnique in /opt/root_src/proof/proof/src/TProof.cxx:2730; 23: Taking false branch in /opt/root_src/proof/proof/src/TProof.cxx:2730; 24: 'list' is not equal to kAllUnique in /opt/root_src/proof/proof/src/TProof.cxx:2731; 25: Taking false branch in /opt/root_src/proof/proof/src/TProof.cxx:2731; 26: Assuming 'mon' is equal to field 'fCurrentMonitor' in /opt/root_src/proof/pr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7534:13477,timeout,timeout,13477,https://root.cern,https://github.com/root-project/root/issues/7534,1,['timeout'],['timeout']
Safety,c/geom/geom/src/TGeoSphere.cxx:994; 4: Value assigned to field 'fNodes' in /opt/root_src/geom/geom/src/TGeoSphere.cxx:999; 5: Called C++ object pointer is null in /opt/root_src/geom/geom/src/TGeoSphere.cxx:1000; /opt/root_src/geom/geom/src/TGeoSphere.cxx:1158:32: warning: Value stored to 'nbPnts' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'nbPnts' is never read in /opt/root_src/geom/geom/src/TGeoSphere.cxx:1158; /opt/root_src/geom/geom/src/TGeoSphere.cxx:1163:4: warning: Value stored to 'nbSegs' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'nbSegs' is never read in /opt/root_src/geom/geom/src/TGeoSphere.cxx:1163; /opt/root_src/geom/geom/src/TGeoSphere.cxx:1168:4: warning: Value stored to 'nbPols' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'nbPols' is never read in /opt/root_src/geom/geom/src/TGeoSphere.cxx:1168; /opt/root_src/geom/geom/src/TGeoSphere.cxx:1533:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoSphere.cxx:1533; /opt/root_src/geom/geom/src/TGeoTessellated.cxx:745:15: warning: Missing reference in range-for with non trivial type (std::__cxx11::basic_string<char>) [clazy-range-loop]; 1: const in /opt/root_src/geom/geom/src/TGeoTessellated.cxx:745; 2: & in /opt/root_src/geom/geom/src/TGeoTessellated.cxx:745; /opt/root_src/geom/geom/src/TGeoTorus.cxx:297:13: warning: Value stored to 'snext' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'snext' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:297; /opt/root_src/geom/geom/src/TGeoTorus.cxx:305:13: warning: Value stored to 'dphi' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'dphi' during its initialization is never read in /opt/roo,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:63679,safe,safe,63679,https://root.cern,https://github.com/root-project/root/issues/7428,1,['safe'],['safe']
Safety,"cale_data_public'; typedef struct __crt_locale_data_public; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt.h:610:16: note: previous definition is here; typedef struct __crt_locale_data_public; ^; In file included from libGeom dictionary payload:17:; In file included from C:/root-dev/root\include\TGeoExtension.h:15:; In file included from C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\ucrt\corecrt.h:617:16: error: redefinition of '__crt_locale_pointers'; typedef struct __crt_locale_pointers; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt.h:617:16: note: previous definition is here; typedef struct __crt_locale_pointers; ^; In file included from libGeom dictionary payload:17:; In file included from C:/root-dev/root\include\TGeoExtension.h:15:; In file included from C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\ucrt\corecrt.h:625:16: error: redefinition of '_Mbstatet'; typedef struct _Mbstatet; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt.h:625:16: note: previous definition is here; typedef struct _Mbstatet; ^; Error in <TInterpreter::AutoParse>: Error parsing payload code for class gGeoManager with content:. ... Assertion failed: !m_Unloading && ""Must not nest within unloading transaction"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\Transaction.cpp, line 98; *** Break *** abort. ==========================================; =============== STACKTRACE ===============; ==========================================; ...; ```; This PR fixes #14302",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14335:3661,abort,abort,3661,https://root.cern,https://github.com/root-project/root/pull/14335,1,['abort'],['abort']
Safety,"ch test.; Some things to note:. - Test pyunittests-pyroot-import-load-libs fails with; ```sh; ERROR: test_import (import_load_libs.ImportLoadLibs); Test libraries loaded after importing ROOT; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/srv/root/src/root/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 117, in test_import; raise Exception('Found not whitelisted libraries after importing ROOT:' \; Exception: Found not whitelisted libraries after importing ROOT:; - libz3; If the test fails with a library that is loaded on purpose, please add it to the whitelist.; ```; Note that z3 is a library used by LLVM. It may be that because I have other versions of LLVM/Clang in the system, z3 got installed and picked up by the builtin LLVM from the ROOT build. Ideally, this sort of behavior of automatically picking whatever is installed on the system should be avoided, as it can cause problems, so I recommend looking into the configuration of the builtin LLVM more closely and either disabling z3 if not used, or adding it to the dependencies of ROOT and enabling by force. - Test tutorial-v7-ntuple-ntpl005_introspection failure is related to uring support, is that tested in nightlies? It could also be a permissions issue that I don't have configured properly, I don't know.; ```sh; Start 995: tutorial-v7-ntuple-ntpl005_introspection; 7/18 Test #995: tutorial-v7-ntuple-ntpl005_introspection ...........***Failed 1.57 sec; ...; terminate called after throwing an instance of 'std::runtime_error'; what(): Fatal Error: failed to allocate memory for the smallest possible io_uring instance. 'memlock' memory has been exhausted for this user; CMake Error at /srv/root/build/RootTestDriver.cmake:237 (message):; error code: Subprocess aborted; ```; - The dataframe tests all fail with something like this; ```sh; Processing /srv/root/src/roottest/root/dataframe/test_ctors.C+...; Info in <TUnixSystem::ACLiC>: creat",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936:3454,avoid,avoided,3454,https://root.cern,https://github.com/root-project/root/issues/7936,1,['avoid'],['avoided']
Safety,"cided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). ; With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. ; This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain.; * If we ever add fields to the class, Clone could be buggy (missing the added field); In contrast, the copy constructor will never miss any fields. ; * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: ; * define default values for a field descriptor; * remove move-only restriction on `RFieldDescriptor`; * implement a builder class for `RFieldDescriptor` to make construction (and using `RNTupleDescriptorBuilder`) more explicit. ; </details>. We introduce a new type, `RDanglingFieldDescriptor`, that supports the builder pattern for field descriptor values, e.g. ; ```c++; RFieldDescriptor fieldDesc = RDanglingFieldDescriptor(); .FieldId(1); .FieldName(""some_field""); .Structure(ENTupleStructure::kCollection); .UnwrapDescriptor(); ; ```. Dangling descriptors let us modify all field descriptor information except for relationship information (i.e. they have no idea about field parents or",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5934:1558,risk,risk,1558,https://root.cern,https://github.com/root-project/root/pull/5934,1,['risk'],['risk']
Safety,"civetweb server creates pre-coinfigured number of threads and this number cannot be change once server running. Each active websocket consumes one thread, where all communication handling is performed. ; To avoid situation that simple http requests fails just while websockets blocked all threads number of; websocket connection will be limited by 90% of configured threads. Issue warning message from `TCivetweb.cxx` when websocket connection refused because of threads number like:; ```; Error in <TCivetweb::WebSocketHandler>: Only 2 threads are available, reject connection request for win3. Increase WebGui.HttpThreads parameter in rootrc, now it is 7; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13542:207,avoid,avoid,207,https://root.cern,https://github.com/root-project/root/pull/13542,1,['avoid'],['avoid']
Safety,"ck (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/tutorials/math/exampleFunction.py"", line 57, in <module>; fitter.Result().Print(ROOT.std.cout); ReferenceError: attempt to access a null-pointer; CMake Error at /builddir/build/BUILD/root-6.28.00/redhat-linux-build/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### tutorial-tmva-TMVA_CNN_Classification-py. There are probably 6 thread, not 25769803776. (Zero-extended from 32 to 64 bits in the wrong direction.). $ printf '%016x\n' 25769803776; 0000000600000000. TypeError: none of the 3 overloaded methods succeeded.; ~~~; 1270/1272 Test #1267: tutorial-tmva-TMVA_CNN_Classification-py ............................***Failed 1.33 sec; TMVA_CNN_Classificaton:0: RuntimeWarning: Skip using Keras since tensorflow is not installed; TMVA_CNN_Classificaton:0: RuntimeWarning: Skip using PyTorch since torch is not installed; DataSetInfo : [dataset] : Added class ""Signal""; : Add Tree sig_tree of type Signal with 1000 events; DataSetInfo : [dataset] : Added class ""Background""; : Add Tree bkg_tree of type Background with 1000 events; <FATAL> : Unknown method index in map: 0; ***> abort program execution; Running with nthreads = 25769803776; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/tutorials/tmva/TMVA_CNN_Classification.py"", line 299, in <module>; factory.BookMethod(; File ""/builddir/build/BUILD/root-6.28.00/redhat-linux-build/lib/ROOT/_pythonization/_tmva/_factory.py"", line 61, in BookMethod; return self._BookMethod(*args, **kwargs); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; TypeError: none of the 3 overloaded methods succeeded. Full details:; TMVA::MethodBase* TMVA::Factory::BookMethod(TMVA::DataLoader* loader, TString theMethodName, TString methodTitle, TString theOption = """") =>; TypeError: could not convert argument 2; TMVA::MethodBase* TMVA::Factory::BookMethod(TMVA::DataLoader* loader, TMVA::Types::EMVA theMethod, TString methodTitle, TString theOption = """") =>; runtime_e",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12429:8486,abort,abort,8486,https://root.cern,https://github.com/root-project/root/issues/12429,1,['abort'],['abort']
Safety,"cked for duplicates. ### Description. When using Python in interactive mode, the web window does not launch properly (see screenshot). It works from a C++ macro. One can also save canvas contents in ROOT batch mode. ![image](https://github.com/root-project/root/assets/1557360/2181f05e-27bd-4473-9151-b28a90773900). ### Reproducer. ```python; import ROOT; import numpy as np. def main():; voltages = np.array([1,2,3], dtype=np.uint32); capacitances = np.array([4,5,6], dtype=np.float32). #ROOT.gROOT.SetBatch(True); df = ROOT.RDF.FromNumpy({'voltages': voltages, 'capacitances': capacitances}); df = df.Define('inv', '1/(capacitances*capacitances)'). c = ROOT.TCanvas(); graph = df.Graph('voltages', 'inv'); graph.Draw('APL'). c.SaveAs(""graph.pdf""). if __name__ == ""__main__"":; main(); ```; Output:; ```bash; $ python3 -i repro.py ; Info in <THttpEngine::Create>: Starting HTTP server on port 127.0.0.1:9449; Opening in existing browser session.; [102887:102898:0312/160727.268507:ERROR:object_proxy.cc(576)] Failed to call method: org.freedesktop.DBus.Properties.Get: object_path= /org/freedesktop/portal/desktop: org.freedesktop.DBus.Error.InvalidArgs: No such interface “org.freedesktop.portal.FileChooser”; [102887:102898:0312/160727.268546:ERROR:select_file_dialog_linux_portal.cc(285)] Failed to read portal version property; [102887:102887:0312/160727.306050:ERROR:policy_logger.cc(156)] :components/enterprise/browser/controller/chrome_browser_cloud_management_controller.cc(161) Cloud management controller initialization aborted as CBCM is not enabled. Please use the `--enable-chrome-browser-cloud-management` command line flag to enable it if you are not using the official Google Chrome build.; 13986 bytes written to file /home/jakob/Documents/CERN/ROOT/demo/graph.pdf; Info in <ProduceImage>: PDF file graph.pdf with 1 pages has been created; >>> ; ```. ### ROOT version. master. ### Installation method. From sources. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14943:1568,abort,aborted,1568,https://root.cern,https://github.com/root-project/root/issues/14943,1,['abort'],['aborted']
Safety,"clang-tidy with `modernize-use-bool-literals` complains about the fact that 0 is used in place of false. Given I assume there is no particular reason for using `0` rather than `false`, I suggest to change it to avoid the false positives.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/472:211,avoid,avoid,211,https://root.cern,https://github.com/root-project/root/pull/472,1,['avoid'],['avoid']
Safety,cling error recovery issues,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7970:12,recover,recovery,12,https://root.cern,https://github.com/root-project/root/issues/7970,1,['recover'],['recovery']
Safety,cling: changes needed on MacOS to avoid G__Core.cxx generation failures complaining about time_point,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16494:34,avoid,avoid,34,https://root.cern,https://github.com/root-project/root/pull/16494,1,['avoid'],['avoid']
Safety,"code.DeadStores]; 1: Value stored to 'dist' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoXtru.cxx:558; /opt/root_src/geom/geom/src/TGeoXtru.cxx:878:11: warning: Although the value stored to 'indx2' is used in the enclosing expression, the value is never actually read from 'indx2' [clang-analyzer-deadcode.DeadStores]; 1: Although the value stored to 'indx2' is used in the enclosing expression, the value is never actually read from 'indx2' in /opt/root_src/geom/geom/src/TGeoXtru.cxx:878; /opt/root_src/geom/geom/src/TGeoXtru.cxx:939:13: warning: Value stored to 'safz' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safz' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoXtru.cxx:939; /opt/root_src/geom/geom/src/TGeoXtru.cxx:943:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoXtru.cxx:943; /opt/root_src/geom/geombuilder/src/TGeoSphereEditor.cxx:351:22: warning: Value stored to 'rmin' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'rmin' is never read in /opt/root_src/geom/geombuilder/src/TGeoSphereEditor.cxx:351; /opt/root_src/geom/geombuilder/src/TGeoVolumeEditor.cxx:239:17: warning: Although the value stored to 'label' is used in the enclosing expression, the value is never actually read from 'label' [clang-analyzer-deadcode.DeadStores]; 1: Although the value stored to 'label' is used in the enclosing expression, the value is never actually read from 'label' in /opt/root_src/geom/geombuilder/src/TGeoVolumeEditor.cxx:239; /opt/root_src/geom/geombuilder/src/TGeoVolumeEditor.cxx:317:17: warning: Although the value stored to 'label' is used in the enclosing expression, the value is never actually read from 'label' [clang-analyzer-deadcode.DeadStores]; 1: Although the value stored to",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:80405,safe,safe,80405,https://root.cern,https://github.com/root-project/root/issues/7428,1,['safe'],['safe']
Safety,"control.cpp#L50. It just opens a web browser with the following [link](https://gitlab.com/kicad/code/kicad/-/issues/new?issue[description]=%3C%21--%20Before%20Creating%20a%20New%20Issue%3A%0A%2A%20Search%20the%20issue%20tracker%20to%20verify%20the%20issue%20has%20not%20already%20been%20reported.%0A%2A%20Only%20report%20one%20problem%20per%20issue.%20--%3E%0A%0A%23%20Description%0A%3C%21--%20What%20is%20the%20current%20behavior%20and%20what%20is%20the%20expected%20behavior%3F%20--%3E%0A%3C%21--%20Please%20attach%20screenshots%20if%20they%20will%20help%20explain%20the%20problem.%20--%3E%0A%0A%23%20Steps%20to%20reproduce%0A%3C%21--%20Please%20include%20a%20screen%20recording%20if%20it%20will%20help%20explain%20how%20to%20reproduce.%20--%3E%0A%3C%21--%20If%20this%20issue%20is%20specific%20to%20a%20project%2C%20please%20attach%20it.%20--%3E%0A1.%0A2.%0A%23%20KiCad%20Version%0A%0A%60%60%60%0AApplication%3A%20KiCad%20PCB%20Editor%0A%0AVersion%3A%205.99.0-unknown-baf6798695~131~ubuntu18.04.1%2C%20release%20build%0A%0ALibraries%3A%0A%09wxWidgets%203.0.4%0A%0APlatform%3A%20Linux%205.4.0-77-generic%20x86_64%2C%2064%20bit%2C%20Little%20endian%2C%20wxGTK%2C%20mate%2C%20x11%0A%0A%09wxWidgets%3A%203.0.4%20%28wchar_t%2Cwx%20containers%2Ccompatible%20with%202.8%29%20GTK%2B%203.22%0A%09Boost%3A%201.65.1%0A%09OCC%3A%207.5.1%0A%09Curl%3A%207.58.0%0A%09ngspice%3A%2033%0A%09Compiler%3A%20GCC%207.5.0%20with%20C%2B%2B%20ABI%201011%0A%0ABuild%20settings%3A%0A%09KICAD_USE_OCC%3DON%0A%09KICAD_SPICE%3DON%0A%0A%60%60%60), that looks like this:. ![image](https://user-images.githubusercontent.com/10653970/128146364-f40a992b-1730-40d8-996a-7d51a262aec7.png). This homogenizes bug reports and saves time of the dev's asking what their current settings and versions are. The KiCad gitlab bot also warns the user if it detects that no version info was added to the issue. And they have a very nice webpage to aid users in reporting issues at the right repository: https://www.kicad.org/help/report-an-issue/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8795:2863,detect,detects,2863,https://root.cern,https://github.com/root-project/root/issues/8795,1,['detect'],['detects']
Safety,"cout<<""\n"";; ULong64_t y = x-1;; formula = TString::Format(""x-%lld"", y);; std::cout<<"" TTree::Scan(\""""<<formula<<""\"");\n"";; std::cout<<""Expected output: ""<<std::setw(19)<<x-y<<""\n"";; t->Scan(formula, """", ""colsize=25 col=lld"");; ; std::cout<<""\n"";; y = x-926;; formula = TString::Format(""x-%lld"", y);; std::cout<<"" TTree::Scan(\""""<<formula<<""\"");\n"";; std::cout<<""Expected output: ""<<std::setw(19)<<x-y<<""\n"";; t->Scan(formula, """", ""colsize=25 col=lld"");; ; ; f.Close();; }. int main() {; ULong64_t x = 1617047019150033926;; ; write(x);; read(x);; }; ```. The program:. 1. Creates a tree with a single ULong64_t branch and single entry, and saves it to file f.root; 2. Reads the file and the tree:; - Reads the value from tree with TTree::GetEntry() to confirm the variable is saved properly – this seems to work correctly; - Displays the value with Scan() – displayed value is different on the last digit; - Perform simple subtractions using Scan() – the results are incorrect as well. This is output I obtained with 6.22/08 in Linux:; ```; Written to tree: 1617047019150033926; Read from tree: 1617047019150033926 (correct). TTree::Scan(""x"");; Expected output: 1617047019150033926; ****************************************; * Row * x *; ****************************************; * 0 * 1617047019150033920 *; ****************************************. TTree::Scan(""x-1617047019150033925"");; Expected output: 1; ****************************************; * Row * x-1617047019150033925 *; ****************************************; * 0 * 0 *; ****************************************. TTree::Scan(""x-1617047019150033000"");; Expected output: 926; ****************************************; * Row * x-1617047019150033000 *; ****************************************; * 0 * 1024 *; ****************************************; ```; I encountered similar issues when trying to plot the values with TTree::Draw(). It seems to me that the values are rounded... perhaps casted to double? Is there any way to avoid it?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7844:2966,avoid,avoid,2966,https://root.cern,https://github.com/root-project/root/issues/7844,1,['avoid'],['avoid']
Safety,coverity 94012: removed redundant unreachable return statement			89a4a67; coverity 82573: fixed copy paste error fXaxis to fZaxis			1f8f137; coverity 82274: fixed uninitialised class members,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/384:24,redund,redundant,24,https://root.cern,https://github.com/root-project/root/pull/384,1,['redund'],['redundant']
Safety,critical bugfix in RooFit to avoid last bin getting lost in histogram,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1916:29,avoid,avoid,29,https://root.cern,https://github.com/root-project/root/pull/1916,1,['avoid'],['avoid']
Safety,"ct %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; The second-order RooChebyshev class produces negative values for certain parameter range around `c1=-0.5` and `c2=-0.55`. ; These negative values are then handled differently in different versions of ROOT; ![chebtest_6 2004](https://user-images.githubusercontent.com/8844360/223719234-2a99dc62-3c1a-4f2b-9690-3ccc5fa45df0.png); ![chebtest_6 2406](https://user-images.githubusercontent.com/8844360/223719704-06e4d558-9aa0-4d48-a15c-7316297f0bfb.png). ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. A preferred solution would be to set negative values to 0 as in ROOT 6.20, because setting them to +inf is causing the fits to diverge. ; Is it possible to avoid the negative values in RooChebychev in the first place?. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. The code which produces the plots above:; ```; import ROOT; canvas = ROOT.TCanvas(""cv1"", ""cv1"", 700, 500); #ROOT.__version__ = '6.20/04' # Earlier pyROOT implementations have no __version__; mass = ROOT.RooRealVar(""KS_M"", ""m(#pi^{+}#pi^{-}) GeV/c^{2}"", 0.47, 0.53); frame = mass.frame(ROOT.RooFit.Bins(100), ROOT.RooFit.Title(ROOT.__version__)); c1 = ROOT.RooRealVar(""c1"", "" 1st cheb parameter"",-0.5, -1, 1); c2 = ROOT.RooRealVar(""c2"", "" 2nd cheb parameter"", -0.55, -1, 1); bkg = ROOT.RooChebychev(""bkg"", ""Chebyshev Polynomial"", mass, ROOT.RooArgList(c1, c2)); bkg.plotOn(frame); canvas.cd(); frame.Draw(); canvas.Draw(); canvas.Update(); canvas.SaveAs(f'pdf/chebtest_{ROOT._",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12452:1164,avoid,avoid,1164,https://root.cern,https://github.com/root-project/root/issues/12452,1,['avoid'],['avoid']
Safety,"d final part of a split and clean-up of #8294. ## Changes or fixes:; - Adds `LikelihoodJob` and `LikelihoodGradientJob` under the `RooFit::TestStatistics` namespace.; - Adds the `LikelihoodGradientJob` test case, which also covers the rest of the `TestStatistics` framework, as promised in https://github.com/root-project/root/pull/8700#issue-947741252.; - Adds two `KahanSum` constructors that allow for initialization of the full internal state. This is necessary for serializing and rematerializing `KahanSum`s so they can be sent over ZeroMQ sockets.; - `RooMinimizer` templated constructors and create factory functions were removed. These are replaced with enum class flags that allow the user to choose the type of `RooAbsMinimizerFcn` (this was already in place) and the `Likelihood(Gradient)Wrapper` implementations to use, i.e. the classes introduced in this PR. Similar changes were made in `MinuitFcnGrad`, which is now also template-free.; - `RooMinimizer`'s (now) two constructors use two helper functions now to avoid code duplication.; - There were some mistakes in the build setup of `RooFitZMQ` and `RooFit::MultiProcess` that only came to light now when building these classes that depend on `RooFit::MultiProcess`. These are fixed.; - A few functions had to be added to `LikelihoodGradientWrapper` and `MinuitFcnGrad` for passing along previous gradient, second derivative and step size information from Minuit2 to RooFit and back, i.e. using the functionality introduced in #8694. ## Checklist:. - [x] tested changes locally; - [x] update the docs (if necessary); - [x] unify copyright/license headers with previous commits; - [x] includes: correct order (matching header, RooFit, ROOT, std) and ROOT includes in quotation marks; - [x] refactor member names: underscore suffix; - [x] remove commented out code and TODOs and other junk; - [x] clang-tidy up; - [ ] rebase into two commits (one for `KahanSum` and one for the rest); - [x] make Readme.md for developers with some exam",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9349:1559,avoid,avoid,1559,https://root.cern,https://github.com/root-project/root/pull/9349,1,['avoid'],['avoid']
Safety,"d it to the whitelist.; ```; Note that z3 is a library used by LLVM. It may be that because I have other versions of LLVM/Clang in the system, z3 got installed and picked up by the builtin LLVM from the ROOT build. Ideally, this sort of behavior of automatically picking whatever is installed on the system should be avoided, as it can cause problems, so I recommend looking into the configuration of the builtin LLVM more closely and either disabling z3 if not used, or adding it to the dependencies of ROOT and enabling by force. - Test tutorial-v7-ntuple-ntpl005_introspection failure is related to uring support, is that tested in nightlies? It could also be a permissions issue that I don't have configured properly, I don't know.; ```sh; Start 995: tutorial-v7-ntuple-ntpl005_introspection; 7/18 Test #995: tutorial-v7-ntuple-ntpl005_introspection ...........***Failed 1.57 sec; ...; terminate called after throwing an instance of 'std::runtime_error'; what(): Fatal Error: failed to allocate memory for the smallest possible io_uring instance. 'memlock' memory has been exhausted for this user; CMake Error at /srv/root/build/RootTestDriver.cmake:237 (message):; error code: Subprocess aborted; ```; - The dataframe tests all fail with something like this; ```sh; Processing /srv/root/src/roottest/root/dataframe/test_ctors.C+...; Info in <TUnixSystem::ACLiC>: creating shared library /srv/root/build/roottest/root/dataframe/test_ctors_C.so; /usr/lib/gcc/x86_64-pc-linux-gnu/8.4.0/../../../../x86_64-pc-linux-gnu/bin/ld: /srv/root/build/roottest/root/dataframe/par: _ZTISt16invalid_argument: invalid version 7 (max 0); /usr/lib/gcc/x86_64-pc-linux-gnu/8.4.0/../../../../x86_64-pc-linux-gnu/bin/ld: /srv/root/build/roottest/root/dataframe/par: error adding symbols: bad value; collect2: error: ld returned 1 exit status; ```; Could it be a mismatch between Clang and GCC ABIs? Or maybe an issue with my linker? (I am using binutils version 2.35.2). Please let me know if you have any questions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936:4330,abort,aborted,4330,https://root.cern,https://github.com/root-project/root/issues/7936,1,['abort'],['aborted']
Safety,"dangling-pointer=]; 783 | if (objname && strlen(objname) > 0 && strcmp(objname, ""htemp"")) {; | ~~~~~~^~~~~~~~~~~~~~~~~~; root/proof/proofplayer/src/TProofDraw.cxx:782:62: note: unnamed temporary defined here; 782 | const char *objname = fTreeDrawArgsParser.GetObjectName();; | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~; root/proof/proofplayer/src/TProofDraw.cxx:789:30: warning: dangling pointer to an unnamed temporary may be used [-Wdangling-pointer=]; 789 | PDB(kDraw,1) Info(""SlaveBegin"", ""original object '%s' not found""; | ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; 790 | "" or it is not a histogram"", objname);; | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; root/proof/proofplayer/src/TProofDraw.cxx:782:62: note: unnamed temporary defined here; 782 | const char *objname = fTreeDrawArgsParser.GetObjectName();; | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~; root/proof/proofplayer/src/TProofDraw.cxx:784:60: warning: dangling pointer to an unnamed temporary may be used [-Wdangling-pointer=]; 784 | TH1 *hist = dynamic_cast<TH1*> (fInput->FindObject(objname));; | ~~~~~~~~~~~~~~~~~~^~~~~~~~~; root/proof/proofplayer/src/TProofDraw.cxx:782:62: note: unnamed temporary defined here; 782 | const char *objname = fTreeDrawArgsParser.GetObjectName();; | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~; root/proof/proofplayer/src/TProofDraw.cxx:783:38: warning: dangling pointer to an unnamed temporary may be used [-Wdangling-pointer=]; 783 | if (objname && strlen(objname) > 0 && strcmp(objname, ""htemp"")) {; | ~~~~~~~~~~~~~~~~^~~; root/proof/proofplayer/src/TProofDraw.cxx:782:62: note: unnamed temporary defined here; 782 | const char *objname = fTreeDrawArgsParser.GetObjectName();; ```. Indeed, `GetObjectName()` returns a temporary `TString` here, and with; the implicit `const char*` conversion we get a dangling pointer to the; TString data. If we avoid the copy in `GetObjectName()` and company such that a `const&` is returned, we not only fix the dangling pointer problem but also avoid an unnecessary copy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10581:2281,avoid,avoid,2281,https://root.cern,https://github.com/root-project/root/pull/10581,2,['avoid'],['avoid']
Safety,"derArray<o2::trd::Tracklet64>* tracklets = new TTreeReaderArray<o2::trd::Tracklet64>(*dataReader, ""Tracklet"");. dataTree->AddFriend(""o2sim"", ""trddigits.root"");; TTreeReaderArray<o2::trd::Digit>* digits = new TTreeReaderArray<o2::trd::Digit>(*dataReader, ""TRDDigit"");. int tfno = 0;; while(dataReader->Next()) {; cout << ""Next TF: "" << tfno << endl;. for (auto tracklet : *tracklets) {; cout << tracklet << endl;; }; cout << dec << ""Start to sort "" << std::distance(tracklets->begin(), tracklets->end()) << "" tracklets..."" << endl;; std::stable_sort(tracklets->begin(), tracklets->end(), comp_tracklet);; cout << ""Start to sort "" << std::distance(digits->begin(), digits->end()) << "" digits..."" << endl;; std::stable_sort(digits->begin(), digits->end(), comp_digit);; }. }; ```. The code creates the following stack trace:; ```; Fatal: fArray && ""invalid iterator!"" violated at line 118 of `/scratch/tdietel/alisw/slc7_x86-64/ROOT/v6-28-04-14/include/TTreeReaderArray.h'; aborting; #0 0x00007fa77058860c in waitpid () from /lib64/libc.so.6; #1 0x00007fa770505f62 in do_system () from /lib64/libc.so.6; #2 0x00007fa7712b7b8c in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2104; #3 TUnixSystem::StackTrace (this=0x165c5b0) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/unix/src/TUnixSystem.cxx:2395; #4 0x00007fa771198e69 in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=<optimized out>) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TErrorDefaultHandler.cxx:177; #5 0x00007fa77124a7d5 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fa750f2eabe """", fmt=<optimized out>, ap=0x7fff0771d888) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13314:4108,abort,aborting,4108,https://root.cern,https://github.com/root-project/root/issues/13314,1,['abort'],['aborting']
Safety,dexIter.hxx strlcpy.h snprintf.h strtok.h root_std_complex.h ROOT/TSeq.hxx TArrayC.h TArrayD.h TArrayF.h TArray.h TArrayI.h TArrayL64.h TArrayL.h TArrayS.h TBits.h TBtree.h TClassTable.h TClonesArray.h TCollection.h TCollectionProxyInfo.h TExMap.h THashList.h THashTable.h TIterator.h TList.h TMap.h TObjArray.h TObjectTable.h TOrdCollection.h TRefArray.h TRefTable.h TSeqCollection.h TSortedList.h TVirtualCollectionProxy.h ESTLType.h RStringView.h TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TUnixSystem.h /bld6/root/src/core/base/inc/LinkDef.h; Subprocess aborted; ```. I understand thought that a special version of clang is needed (at least that's what a warning in one of the CMakelists.txt states). Are there any instructions on how to build it or what patches need to be applied?. I've been using v6-30-03 for this. ### Reproducer. . ### ROOT version. v6-30-03. ### Installation method. source. ### Operating system. centos7. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14250:8461,abort,aborted,8461,https://root.cern,https://github.com/root-project/root/issues/14250,1,['abort'],['aborted']
Safety,"e ""B.h"". #undef _BACKWARD_BACKWARD_WARNING_H; ```. ### What is the expected behaviour?. The correct output is:; ```. Loading A.sl. Processing macro.cc...; init A with arg=0; test A; init A with arg=0; test A; ```. ### How to reproduce?. ```; unzip linker_example.zip; make; root.exe -b -q -q macro.cc; ```. ### ROOT version. Any v6 version. ### How did you install ROOT?. any. ### Which operating system are you using?. linux. ### Additional context. The problem might have been introduced by commit 3081bf5e006. In particular applying this diff 'fixes' the problem:; ```; diff --git a/core/dictgen/src/rootcling_impl.cxx b/core/dictgen/src/rootcling_impl.cxx; index f56ce23b7a..7cd24d2c63 100644; --- a/core/dictgen/src/rootcling_impl.cxx; +++ b/core/dictgen/src/rootcling_impl.cxx; @@ -4971,7 +4971,7 @@ int RootClingMain(int argc,; if (!gOptCxxModule) {; headersClassesMapString = GenerateStringFromHeadersForClasses(headersDeclsMap,; detectedUmbrella,; - true);; + false);; if (!gDriverConfig->fBuildingROOTStage1) {; if (!gOptWriteEmptyRootPCM); fwdDeclsString = GenerateFwdDeclString(scan, interp);; ```; This introduces the following diff in the generated dictionary:; ```; rootsrv1:2023-dict pcanal$ diff -C2 dict.cxx dict.good.2.cxx ; *** dict.cxx 2023-06-15 15:55:39.818476668 -0500; --- dict.good.2.cxx 2023-06-15 14:54:48.505264642 -0500; ***************; *** 187,192 ****; )DICTPAYLOAD"";; static const char* classesHeaders[] = {; ! ""A"", payloadCode, ""@"",; ! ""B"", payloadCode, ""@"",; nullptr; };; --- 187,192 ----; )DICTPAYLOAD"";; static const char* classesHeaders[] = {; ! ""A"", ""A.h"", ""@"",; ! ""B"", ""B.h"", ""@"",; nullptr; };; ```. and indeed in practice the order of operation are as follow: (macro.cc contains a `#include ""A.h""`):; * Process the `A.h` and then start declaring class `A`:; * While declaring `A`, process the constructor (of anything involving `A` itself in `A` declaration and call ` TCling::AutoParse`; * ` TCling::AutoParse` recognizes `A` for the dictionary's `classesHea",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13034:2200,detect,detectedUmbrella,2200,https://root.cern,https://github.com/root-project/root/issues/13034,1,['detect'],['detectedUmbrella']
Safety,"e '\s'; m = re.match('\s*(const\s+)?(RVec\w+|RVec<[\w\s]+>)', t); ```. Then, upon ROOT import, the system crashes:; ```; ~>python -c ""import ROOT""; [/foo/build/lib/libcppyy_backend3_12.so] (anonymous namespace)::do_trace(int) /foo/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:184; [/foo/build/lib/libcppyy_backend3_12.so] (anonymous namespace)::TExceptionHandlerImp::HandleException(int) /foo/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:202; [/foo/build/lib/libCore.so] TUnixSystem::DispatchSignals(ESignals) /foo/root/core/unix/src/TUnixSystem.cxx:3626; [/foo/build/lib/libCore.so] SigHandler(ESignals) /foo/root/core/unix/src/TUnixSystem.cxx:402; [/foo/build/lib/libCore.so] sighandler(int) /foo/root/core/unix/src/TUnixSystem.cxx:3603; [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info); [/usr/lib/system/libsystem_pthread.dylib] pthread_kill (no debug info); [/usr/lib/system/libsystem_c.dylib] abort (no debug info); [/usr/lib/system/libsystem_c.dylib] err (no debug info); [/foo/build/lib/libcppyy3_12.so] PyMethod_GET_SELF(_object*) /Library/Frameworks/Python.framework/Versions/3.12/include/python3.12/cpython/classobject.h:40; [/foo/build/lib/libcppyy3_12.so] CPyCppyy::im_descr_get(_object*, _object*, _object*) /foo/root/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx:215; [/Library/Frameworks/Python.framework/Versions/3.12/Python] _Py_type_getattro_impl (no debug info); [/foo/build/lib/libcppyy3_12.so] CPyCppyy::meta_getattro(_object*, _object*) /foo/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx:308; [/Library/Frameworks/Python.framework/Versions/3.12/Python] _PyObject_LookupAttr (no debug info); [/Library/Frameworks/Python.framework/Versions/3.12/Python] builtin_getattr (no debug info); [/Library/Frameworks/Python.framework/Versions/3.12/Python] _PyEval_EvalFrameDefault (no debug info); [/foo/build/lib/libcppyy3_12.so] CPyCppyy::Pythonize(_object*, std::__1::basic_string<char, std::__",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13864:1713,abort,abort,1713,https://root.cern,https://github.com/root-project/root/issues/13864,1,['abort'],['abort']
Safety,"e (219 ms); [ RUN ] LikelihoodJobTest.UnbinnedGaussianND; [ OK ] LikelihoodJobTest.UnbinnedGaussianND (331 ms); [ RUN ] LikelihoodJobTest.SimBinned; [ OK ] LikelihoodJobTest.SimBinned (323 ms); [ RUN ] LikelihoodJobTest.BinnedConstrained; [ OK ] LikelihoodJobTest.BinnedConstrained (311 ms); [ RUN ] LikelihoodJobTest.SimUnbinned; [ OK ] LikelihoodJobTest.SimUnbinned (281 ms); [ RUN ] LikelihoodJobTest.SimUnbinnedNonExtended; [ OK ] LikelihoodJobTest.SimUnbinnedNonExtended (264 ms); [ RUN ] LikelihoodJobTest.BatchedUnbinnedGaussianND; [ OK ] LikelihoodJobTest.BatchedUnbinnedGaussianND (362 ms); [----------] 9 tests from LikelihoodJobTest (2698 ms total); [----------] 2 tests from LikelihoodJobBinnedDatasetTest; [ RUN ] LikelihoodJobBinnedDatasetTest.UnbinnedPdf; [ OK ] LikelihoodJobBinnedDatasetTest.UnbinnedPdf (152 ms); [ RUN ] LikelihoodJobBinnedDatasetTest.BinnedNLL; [ OK ] LikelihoodJobBinnedDatasetTest.BinnedNLL (325 ms); [----------] 2 tests from LikelihoodJobBinnedDatasetTest (480 ms total); [----------] 2 tests from LikelihoodJobSimBinnedConstrainedTest; [ RUN ] LikelihoodJobSimBinnedConstrainedTest.BasicParameters; [ OK ] LikelihoodJobSimBinnedConstrainedTest.BasicParameters (452 ms); [ RUN ] LikelihoodJobSimBinnedConstrainedTest.ConstrainedAndOffset; /usr/include/c++/14/bits/stl_vector.h:1130: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = ROOT::Math::KahanSum<double>; _Alloc = std::allocator<ROOT::Math::KahanSum<double> >; reference = ROOT::Math::KahanSum<double>&; size_type = long unsigned int]: Assertion '__n < this->size()' failed.; ```; The test hangs at this point, and is eventually killed by the timeout limit. ### Reproducer. Compile ROOT with `-Wp,-D_GLIBCXX_ASSERTIONS` in CXXFLAGS. This is part of the default flags for Fedora package builds. ### ROOT version. 6.32.00. ### Installation method. Package build on Fedora from source. ### Operating system. Fedora Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15730:2350,timeout,timeout,2350,https://root.cern,https://github.com/root-project/root/issues/15730,1,['timeout'],['timeout']
Safety,"e = '/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0/test-listarray.root'; tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). tests/test_1781-rdataframe-snapshot.py:53: SystemError; ```; while running the same code line by line in `Python` or in `lldb`:; ```python; >>> data_frame.Snapshot(""ListArray"", ""listarray.root"", (""x"",)); Error in <TStreamerInfo::Build>: awkward::ArrayView, discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved; <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>; ```; ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; The first `TStreamerInfo::Build` error can be avoided by appending a comment `//!` to `long* ptrs_` line.; Would it be possible to propagate the `TStreamerInfo::Build:0: RuntimeWarning` message to the user?. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; Unfortunately, it is not reproducible if the code is run line by line in `Python`:; ```python; % python ; Python 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:43:44) [Clang 13.0.1 ] on darwin; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import awkward as ak; >>> import ROOT; >>> ak_array_in = ak.Array([[[1.1], [2.2]], [[3.3], [4.4, 5.5]]]); >>> data_frame = ak.to_rdataframe({""x"": ak_array_in}); >>> data_frame.Snapshot(""ListArray"", ""filename.root"", (""x"",)); TStreamerInfo::Build:0: RuntimeWarning: awkward::List",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11602:4214,avoid,avoided,4214,https://root.cern,https://github.com/root-project/root/issues/11602,1,['avoid'],['avoided']
Safety,"e configuration file provided by ""nlohmann_json""; (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake; nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set; ""nlohmann_json_DIR"" to a directory containing one of the above files. If; ""nlohmann_json"" provides a separate development package or SDK, be sure it; has been installed.; Call Stack (most recent call first):; /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency); gui/CMakeLists.txt:28 (find_package); ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```; cmake ../testroot/; -- The C compiler identification is GNU 11.4.0; -- The CXX compiler identification is GNU 11.4.0; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: /usr/bin/cc - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/c++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") ; CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):; Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY); Call Stack (most recent call first):; /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE); /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args); /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package); /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency); CMakeLists.txt:5 (find_package); ```. And not sure how to solve it. ### Reproducer. ```; cmake_minimum_required(VERSION 3.25). project(ProjectName). find_package(ROOT 6.30 CONFI",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14163:1339,Detect,Detecting,1339,https://root.cern,https://github.com/root-project/root/issues/14163,8,['Detect'],['Detecting']
Safety,"e in ALICE, in which the parallel world ""scene"" can be very large (~100K volumes). In this case, TGeoVoxelFinder takes very long; to construct and consumes a very large amount of memory (GBs). In addition, the evaluation of the Safety function dominates the Geant simulation time. The improvements in this commit are mainly achieved through:. * The use of a boundary volume hierarchy (BVH) as the base acceleration entity, replacing TGeoVoxelFinder.; BVH are the standard in industry/computer-graphics, for what concerns ray-object intersection tasks. The BVH is constructed from axis-aligned bounding boxes and employed in the FindBoundary/FindNode implementations. * The use of a 3D voxel grid (TGeoVoxelGrid) structure, able to store properties ""local"" or in the vicinity of a cartesian coordinate P. This structure allows to reduce the (typical) algorithmic complexity for ""Safety"" queries to ~O(1) (with a constant factor determined by the voxel size). Filling of the 3D voxel grid cache for Safety is done on-the-fly (using the BVH once). * (Optional) Additional caching of ""last-call"" safety values for really quick return when the value is still valid at the next call. Ideas for these improvements come from prior work in related libraries such as VecGeom. -----. Implementation details:. * The implementation is, for now (until fully tested), provided in a backward compatible manner:. - By default, nothing changes; - Users have to activate the BVH mode by setting an environment variable TGEO_PW_USEBVH; - Users may hence compare the 2 modes. * Functions for Safety, FindNode, FindBoundary dispatch to some internal implementation. This causes an extra lookup/jump, which can be removed once BVH is fully validated. * For the BVH, a well known open source implementation is included in header-only form. The headers are copied from https://github.com/madmann91/bvh commit 66e445b92f68801a6dd8ef943fe3038976ecb4ff. * A new class, TGeoVoxelGrid is provided for the cartesian VoxelGrid contai",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16442:1369,Safe,Safety,1369,https://root.cern,https://github.com/root-project/root/pull/16442,1,['Safe'],['Safety']
Safety,"eSpan()` family of functions; 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code; 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing; 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file; 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector; 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`; d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers; cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`; 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers; f4fc140268 [RF] Remove RooMomentMorphND; d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10; 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper.; 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument; 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext; ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(); c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew.; 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation; c51376731b [RF][NFC] Fix typo.; 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off.; 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit.; 98d004c200 [RF] Fix visibility of the res/ directories.; e97347056c [RF] Make RooBatchCompute dependency public.; 4483b01b7f [RF] Add initial interface and implementation for code-squashing.; f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer; 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; fce73f0565 [R",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12723:1900,Avoid,Avoid,1900,https://root.cern,https://github.com/root-project/root/pull/12723,5,['Avoid'],['Avoid']
Safety,"eady----------------; (TGeoManager *) 0x556180ad1d50; root [1] geo->CheckOverlaps(); Info in <TGeoNodeMatrix::CheckOverlaps>: Checking overlaps for barrel and daughters within 0.1; warning: Failed to call `P020_REveGeoPainter()` to execute the macro.; Add this function or rename the macro. Falling back to `.L`.; Check overlaps: [==========] 3 [100.00 %] 00:00 ; Info in <TGeoNodeMatrix::CheckOverlaps>: Number of illegal overlaps/extrusions : 1. root [2] geo->PrintOverlaps(); === Overlaps for Default ===; = Overlap ov00000: barrel/plate_1 overlapping barrel/plate_2 ovlp=10.0823; root [3] auto* vol1 = geo->GetTopNode()->GetDaughter(0)->GetVolume(); (TGeoVolume *) 0x556181070960; root [4] auto* vol2 = geo->GetTopNode()->GetDaughter(1)->GetVolume(); (TGeoVolume *) 0x556181070960; root [5] auto* mat1 = geo->GetTopNode()->GetDaughter(0)->GetMatrix(); (TGeoMatrix *) 0x5561811a2390; root [6] auto* mat2 = geo->GetTopNode()->GetDaughter(1)->GetMatrix(); (TGeoMatrix *) 0x5561811b19c0; root [7] TGeoChecker ch(geo); (TGeoChecker &) Name: TGeoChecker Title: a simple geometry checker; root [8] overlap = ch.MakeCheckOverlap(""overlap"", vol1, vol2, mat1, mat2, false, 0.1); (TGeoOverlap *) 0x55618132f820; root [9] overlap->Print(); = Overlap : overlap ovlp=3.51789; - first volume: plate at position:; matrix - tr=1 rot=1 refl=0 scl=0 shr=0 reg=0 own=0; 0.959245 0.282576 0.000000 Tx = 75.401418; -0.282576 0.959245 0.000000 Ty = 214.140485; 0.000000 0.000000 1.000000 Tz = 25.354000; - second volume: plate at position:; matrix - tr=1 rot=1 refl=0 scl=0 shr=0 reg=0 own=0; 0.964608 0.263688 0.000000 Tx = 71.182515; -0.263688 0.964608 0.000000 Ty = 215.579615; 0.000000 0.000000 1.000000 Tz = 25.354000; ```. ### Setup; This occurs on an install of ROOT 6.26.06 with spack (v0.19) as well as a compiled version of `master`. ### Additional context; This issue originates in a DD4hep geometry of a detector at the Electron-Ion Collider, but we have been able to narrow it down to this minimal example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11784:4355,detect,detector,4355,https://root.cern,https://github.com/root-project/root/issues/11784,1,['detect'],['detector']
Safety,"ected during instantiation of ""void TMVA::DNN::TCudnn<AFloat>::RNNForward(const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::RNNDescriptors_t &, TMVA::DNN::TCudnn<AFloat>::RNNWorkspace_t &, bool) [with AFloat=Float_t]"" at line 43 of /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn.cu. /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn/RecurrentPropagation.cu(513): error: identifier ""cudnnRNNForwardInference"" is undefined; cudnnStatus_t status = cudnnRNNForwardInference(; ^; detected during instantiation of ""void TMVA::DNN::TCudnn<AFloat>::RNNForward(const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::RNNDescriptors_t &, TMVA::DNN::TCudnn<AFloat>::RNNWorkspace_t &, bool) [with AFloat=Float_t]"" at line 43 of /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn.cu. /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn/RecurrentPropagation.cu(545): error: identifier ""cudnnRNNBackwardData"" is undefined; cudnnStatus_t status = cudnnRNNBackwardData(; ^; detected during instantiation of ""void TMVA::DNN::TCudnn<AFloat>::RNNBackward(const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloa",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15413:1149,detect,detected,1149,https://root.cern,https://github.com/root-project/root/issues/15413,1,['detect'],['detected']
Safety,"eeds to hook `find_package` itself to point it to the installed dependencies. ### Expected behavior. ROOT can be configured with vcpkg and other tools sensitive to overriden `find_package`. This requires ROOT to not override `find_package`. ### To Reproduce. Clone ROOT, create `build_win` folder, run:; ```; PS C:\dev\root\build_win> cmake -DCMAKE_TOOLCHAIN_FILE=D:\dev\vcpkg\scripts\buildsystems\vcpkg.cmake ..; -- Building for: Visual Studio 16 2019; -- Selecting Windows SDK version 10.0.19041.0 to target Windows 10.0.19042.; -- The C compiler identification is MSVC 19.29.30037.0; -- The CXX compiler identification is MSVC 19.29.30037.0; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30037/bin/Hostx64/x64/cl.exe - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30037/bin/Hostx64/x64/cl.exe - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Git: C:/Program Files/Git/cmd/git.exe (found version ""2.30.0.windows.2""); -- Detected ROOT_VERSION 6.25.01; -- Looking for Python; -- Could NOT find Python3 (missing: Python3_NumPy_INCLUDE_DIRS NumPy) (found version ""3.9.2""); -- Could NOT find Python2 (missing: Python2_EXECUTABLE Python2_LIBRARIES Python2_INCLUDE_DIRS Python2_NumPy_INCLUDE_DIRS Interpreter Development NumPy Development.Module Development.Embed); Reason given by package:; Interpreter: Wrong major version for the interpreter ""C:/Program Files/Python39/python.exe"". -- Looking for pthread.h; -- Looking for pthread.h - not found; -- Found Threads: TRUE; -- Performing Test GLIBCXX_USE_CXX11_ABI; -- Performing Test GLIBCXX_USE_CXX11_ABI - Failed; -- ROOT Platfor",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8633:1449,Detect,Detecting,1449,https://root.cern,https://github.com/root-project/root/issues/8633,4,['Detect'],['Detecting']
Safety,"efinition of '__crt_locale_data_public'; typedef struct __crt_locale_data_public; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt.h:610:16: note: previous definition is here; typedef struct __crt_locale_data_public; ^; In file included from libGeom dictionary payload:17:; In file included from C:/root-dev/root\include\TGeoExtension.h:15:; In file included from C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\ucrt\corecrt.h:617:16: error: redefinition of '__crt_locale_pointers'; typedef struct __crt_locale_pointers; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt.h:617:16: note: previous definition is here; typedef struct __crt_locale_pointers; ^; In file included from libGeom dictionary payload:17:; In file included from C:/root-dev/root\include\TGeoExtension.h:15:; In file included from C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\ucrt\corecrt.h:625:16: error: redefinition of '_Mbstatet'; typedef struct _Mbstatet; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt.h:625:16: note: previous definition is here; typedef struct _Mbstatet; ^; Error in <TInterpreter::AutoParse>: Error parsing payload code for class gGeoManager with content:. ... Assertion failed: !m_Unloading && ""Must not nest within unloading transaction"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\Transaction.cpp, line 98; *** Break *** abort. ==========================================; =============== STACKTRACE ===============; ==========================================; ...; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14346:3661,abort,abort,3661,https://root.cern,https://github.com/root-project/root/pull/14346,1,['abort'],['abort']
Safety,"ems to notice. The best I've managed is to delete all `lib/*.pcm` files which obviously triggers them to be rebuilt:. ```bash; $ root; input_line_1:1:10: remark: building module 'std' as '/home/cburr/miniconda3/envs/test/lib/std.pcm' [-Rmodule-build]; #include <new>; ^; input_line_1:1:10: remark: finished building module 'std' [-Rmodule-build]; input_line_2:1:10: remark: building module 'Cling_Runtime' as '/home/cburr/miniconda3/envs/test/lib/Cling_Runtime.pcm' [-Rmodule-build]; #include ""cling/Interpreter/RuntimeUniverse.h""; ^; While building module 'Cling_Runtime' imported from input_line_2:1:; In file included from <module-includes>:3:; /home/cburr/miniconda3/envs/test/etc//cling/Interpreter/DynamicLookupRuntimeUniverse.h:16:10: remark: building module 'Cling_Runtime_Extra' as '/home/cburr/miniconda3/envs/test/lib/Cling_Runtime_Extra.pcm' [-Rmodule-build]; #include ""cling/Interpreter/DynamicExprInfo.h""; ^; ```. I don't know if ROOT is supposed to be able to recover from this but I run in to three issues, the first is the known `tbb` dependency issue in 6.24.0 that is already fixed for the next patch release. The second issue is that `MathCore.pcm` fails to build with:. ```bash; <<< cling interactive line includer >>>: remark: building module 'MathCore' as '/home/cburr/miniconda3/envs/test/lib/MathCore.pcm' [-Rmodule-build]; While building module 'MathCore':; In file included from <module-includes>:3:; In file included from /home/cburr/miniconda3/envs/test/include/Fit/Chi2FCN.h:19:; /home/cburr/miniconda3/envs/test/include/Fit/FitUtil.h:404:23: error: no matching constructor for initialization of 'std::vector<double>'; std::vector<double> ones{1, 1, 1, 1};; ^ ~~~~~~~~~~~~~~~~; ```. I can workaround this by using four `ones.push_back(1.0);` lines instead of initialising it as ones though it doesn't explain why this fails. Finally after fixing this it, running `root.exe -b -l -q -e '1+1' -x` repeatedly continues to rebuild modules, e.g. on the second iteration:. ```;",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8518:1667,recover,recover,1667,https://root.cern,https://github.com/root-project/root/issues/8518,1,['recover'],['recover']
Safety,"er takes very long; to construct and consumes a very large amount of memory (GBs). In addition, the evaluation of the Safety function dominates the Geant simulation time. The improvements in this commit are mainly achieved through:. * The use of a boundary volume hierarchy (BVH) as the base acceleration entity, replacing TGeoVoxelFinder.; BVH are the standard in industry/computer-graphics, for what concerns ray-object intersection tasks. The BVH is constructed from axis-aligned bounding boxes and employed in the FindBoundary/FindNode implementations. * The use of a 3D voxel grid (TGeoVoxelGrid) structure, able to store properties ""local"" or in the vicinity of a cartesian coordinate P. This structure allows to reduce the (typical) algorithmic complexity for ""Safety"" queries to ~O(1) (with a constant factor determined by the voxel size). Filling of the 3D voxel grid cache for Safety is done on-the-fly (using the BVH once). * (Optional) Additional caching of ""last-call"" safety values for really quick return when the value is still valid at the next call. Ideas for these improvements come from prior work in related libraries such as VecGeom. -----. Implementation details:. * The implementation is, for now (until fully tested), provided in a backward compatible manner:. - By default, nothing changes; - Users have to activate the BVH mode by setting an environment variable TGEO_PW_USEBVH; - Users may hence compare the 2 modes. * Functions for Safety, FindNode, FindBoundary dispatch to some internal implementation. This causes an extra lookup/jump, which can be removed once BVH is fully validated. * For the BVH, a well known open source implementation is included in header-only form. The headers are copied from https://github.com/madmann91/bvh commit 66e445b92f68801a6dd8ef943fe3038976ecb4ff. * A new class, TGeoVoxelGrid is provided for the cartesian VoxelGrid container. ----. Performance examples:. In a test with the ALICE simulation framework including the ITS + TPC detect",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16442:1464,safe,safety,1464,https://root.cern,https://github.com/root-project/root/pull/16442,1,['safe'],['safety']
Safety,"er.h""; #include ""TGeoPcon.h""; #include ""TGeoPgon.h""; #include ""TGeoPhysicalConstants.h""; #include ""TGeoPhysicalNode.h""; #include ""TGeoPolygon.h""; #include ""TGeoRCPtr.h""; #include ""TGeoRegion.h""; #include ""TGeoScaledShape.h""; #include ""TGeoShape.h""; #include ""TGeoShapeAssembly.h""; #include ""TGeoSphere.h""; #include ""TGeoStateInfo.h""; #include ""TGeoSystemOfUnits.h""; #include ""TGeoTorus.h""; #include ""TGeoTrd1.h""; #include ""TGeoTrd2.h""; #include ""TGeoTube.h""; #include ""TGeoUniformMagField.h""; #include ""TGeoVolume.h""; #include ""TGeoVoxelFinder.h""; #include ""TGeoXtru.h""; #include ""TGeoTessellated.h""; #include ""TGeoVector3.h""; #include ""TVirtualGeoConverter.h""; #include ""TVirtualGeoPainter.h""; #include ""TVirtualGeoTrack.h""; #include ""TVirtualMagField.h"". #undef _BACKWARD_BACKWARD_WARNING_H. Assertion failed: !m_Unloading && ""Must not nest within unloading transaction"", file C:\build\ws\BUILDTYPE\Release\LABEL\windows64\V\6-30\root\interpreter\cling\lib\Interpreter\Transaction.cpp, line 98; *** Break *** abort. ==========================================; =============== STACKTRACE ===============; ==========================================. ================ Thread 0 ================; libcppyy_backend3_8!??; libCore!TWinNTSystem::DispatchSignals(); ucrtbase!raise(); ucrtbase!abort(); ucrtbase!get_wpgmptr(); ucrtbase!get_wpgmptr(); ucrtbase!wassert(); libCling!TClingValue::ToTypeAndValueString(); libCling!cling::Value::print(); libCling!TClingValue::ToTypeAndValueString(); libCling!TCling::LoadEnums(); libCore!TListOfEnums::Load(); libCore!TClass::GetListOfEnums(); libCling!TCling::InvalidateCachedDecl(); libCling!TCling::UpdateListsOnUnloaded(); libCling!TCling::UpdateListsOnUnloaded(); libCling!cling::runtime::internal::EvaluateDynamicExpression(); libCling!cling::runtime::internal::EvaluateDynamicExpression(); libCling!cling::Value::print(); libCling!TClingValue::ToTypeAndValueString(); libCling!TClingValue::ToTypeAndValueString(); libCling!TClingTypedefInfo::Init(); libCli",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14302:4965,abort,abort,4965,https://root.cern,https://github.com/root-project/root/issues/14302,1,['abort'],['abort']
Safety,"er` | `ESnapshotOutputFormat::kDefault` | `ESnapshotOutputFormat::kRNTuple` |. ## Implementation; As mentioned, the existing `Snapshot` interface is used. A new `SnapshotRNTupleHelper` has been created to handle the creation and writing of the RNTuple, akin to the existing `SnapshotHelper` (which has been renamed to `SnapshotTTreeHelper` for consistency). ### RLoopManager data source initialization (rev bbf221f); The snapshot action creates a new loop manager which manages the snapshotted data set. The loop manager gets initialized before the actual snapshotting takes place. Originally, the pointer to the data source owned by the loop manager was marked as `const`. Because the RNTuple's data source _has_ to be created after the loop manager, for this PR the `const` qualifier has been dropped. ### Move `ROOT::RDF::Experimental::FromRNTuple` (rev 0a29b02); For snapshotting RNTuples, we need to include the header file for RNTupleDS in `ActionHelpers.hxx`. To avoid dependency conflicts related to including `ROOT/RDataFrame.hxx`, the free `FromRNTuple` functions have been moved to a separate header. ## Current limitations and follow-ups; This PR adds the minimal functionality for (single-threaded) snapshotting to RNTuple. A number of follow-ups are foreseen:. ### RNTuple write options; Currently no RNTuple-specific write options have been added to `RSnapshotOptions` yet, except for compression settings which were already present as an option. Adding (a subset) of the other `RNTupleWriteOptions` is trivial. ### Default compression settings; `RSnapshotOptions`' default compression setting is 101 (Zlib). However, RNTuple's default compression setting is 505 (zstd). We could change the default compression setting to `kInherit` and decide which settings to use according to the target data format (unless explicitly set by the user, of course). ### Multithreaded snapshotting; This PR only adds single-threaded RNTuple snapshotting. Multithreaded (and parallel) snapshotting will b",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15750:1700,avoid,avoid,1700,https://root.cern,https://github.com/root-project/root/pull/15750,1,['avoid'],['avoid']
Safety,"erface/GBRForestTools.h. The interface remains the same, only that the template parameter; specifying the backend is gone. This change adds support for unbalanced trees. To see the fixed logic, as one run a modified version of the `tmva101_Training.py` tutorial (remember to run `tutorials/tmva/tmva100_DataPreparation.py` first):; ```python; import ROOT; import numpy as np. from tmva100_DataPreparation import variables. def load_data(signal_filename, background_filename):; # Read data from ROOT files; data_sig = ROOT.RDataFrame(""Events"", signal_filename).AsNumpy(); data_bkg = ROOT.RDataFrame(""Events"", background_filename).AsNumpy(). # Convert inputs to format readable by machine learning tools; x_sig = np.vstack([data_sig[var] for var in variables]).T; x_bkg = np.vstack([data_bkg[var] for var in variables]).T; x = np.vstack([x_sig, x_bkg]). # Create labels; num_sig = x_sig.shape[0]; num_bkg = x_bkg.shape[0]; y = np.hstack([np.ones(num_sig), np.zeros(num_bkg)]). # Compute weights balancing both classes; num_all = num_sig + num_bkg; w = np.hstack([np.ones(num_sig) * num_all / num_sig, np.ones(num_bkg) * num_all / num_bkg]). return x, y, w. # Load data; x, y, w = load_data(""train_signal.root"", ""train_background.root""). # Fit xgboost model; from xgboost import XGBClassifier; xbdt = XGBClassifier(max_depth=3, n_estimators=500); xbdt.fit(x, y, sample_weight=w). # Save model in TMVA format; ROOT.TMVA.Experimental.SaveXGBoost(xbdt, ""myBDT"", ""tmva101.root"", num_inputs=x.shape[1]). # Load data; x, y_true, w = load_data(""test_signal.root"", ""test_background.root""). # Load trained model; File = ""tmva101.root"". bdt = ROOT.TMVA.Experimental.RBDT(""myBDT"", File). # Make prediction; y_pred_ref = xbdt.predict_proba(x)[:, 1]; y_pred = bdt.Compute(x).T. diff = y_pred - y_pred_ref. print(""max diff"", np.max(np.abs(diff))); ```; Before, the max difference was `0.379578`, and with this PR it is `5.9604645e-08`, compatible with floating point precision. FYI @martamaja10, @lmoneta, @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15173:2040,predict,prediction,2040,https://root.cern,https://github.com/root-project/root/pull/15173,1,['predict'],['prediction']
Safety,"est/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 8 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 8 tests from MiniFile; [ RUN ] MiniFile.Raw; [ OK ] MiniFile.Raw (0 ms); [ RUN ] MiniFile.Stream; Error in <TFile::ReadBuffer>: error reading all requested bytes from file test_ntuple_minifile_stream.root, got 0 of 6816316; Error in <TFile::Init>: test_ntuple_minifile_stream.root failed to read the file header information at 1677721600 (size=6816316); /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_minifile.cxx:84: Failure; Value of: file; Actual: false; Expected: true; [ FAILED ] MiniFile.Stream (191 ms); [ RUN ] MiniFile.Proper; Fatal: nread == nbytes violated at line 1083 of `/builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RMiniFile.cxx'; aborting; [ --- ]; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-rdf. $ printf '%x\n' 1677721600; 64000000. Header length shoud be 0x00000064 = 100; ~~~; 491/1272 Test #431: gtest-tree-ntuple-v7-test-ntuple-rdf ................................***Failed 74.39 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 1 test from 1 test suite.; [----------] Global test environment set-up.; [----------] 1 test from RNTuple; [ RUN ] RNTuple.RDF; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:9737,abort,aborting,9737,https://root.cern,https://github.com/root-project/root/issues/12426,1,['abort'],['aborting']
Safety,"find_package(Python) seems to have the following unsexpected behavior:; if Python_EXECUTABLE is specified to e.g. /usr/bin/python3 and; DEVELOPMENT is required but not found, then CMake looks for the; development package of python2. If it succeeds, Python_INCLUDE_DIRS and; Python_LIBRARIES are set as a consequently. This brings to a mismatch; between the variables set, since they refer to different python; versions.; ; To avoid this, we use find_package(PythonX) also for the build with one; version of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5579:426,avoid,avoid,426,https://root.cern,https://github.com/root-project/root/pull/5579,1,['avoid'],['avoid']
Safety,"for all builds since it is subject to timeouts when the build happens from scratch. This is of course a temporary measure, until we find a future proof solution for this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16355:38,timeout,timeouts,38,https://root.cern,https://github.com/root-project/root/pull/16355,1,['timeout'],['timeouts']
Safety,"from one entry to another.; It can happen that the size of C arrays stored in branches varies a lot; from event to event. It can happen also that a very small array becomes; suddently very big. This triggers a reallocation of the buffer ROOT; uses internally to hold the read content.; When snapshotting, RDataFrame, was setting the addresses of the output; tree only once at the 1st event processed (per slot). This of course could; lead to the persistification of corrupted values. This change allow to keep track of the changing addresses and properly; handle them via the TBranch::SetAddress method. A test is also added to the suite in order to avoid regressions in the; future. Nota bene: this **does also** fix ROOT-9860",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3153:650,avoid,avoid,650,https://root.cern,https://github.com/root-project/root/pull/3153,1,['avoid'],['avoid']
Safety,"g; `RNTupleView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior; The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:; ```c++; auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");; {; auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");; {; auto copy{std::move(viewH1IsMuon)};; } // dtor for copy, frees shared state; } // dtor for viewH1IsMuon, double free; ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup; ```; bgruber@graviola:$ root --version; ROOT Version: 6.29/01; Built for linuxx8664gcc on Jan 16 2023, 14:47:00; From remotes/origin/HEAD@v6-29-01-212-gc8ad008463; ```; Built with g++-12 on Ubunt",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12136:1095,detect,detect,1095,https://root.cern,https://github.com/root-project/root/issues/12136,1,['detect'],['detect']
Safety,"gDirectory is now backed by an atomic thread local pointer so that the thread deleting a TFile can update other thread's gDirectory.; TDirectory now has a `std::vector<std::atomic<TDirectory*>*>` to keep track of the gDirectory's thread local pointing to the TDirectory.; TDirectory::TContext was already thread safe.; gDirectory is a macro that now actualy 'return' a TDirectoryAtomicAdapter which provides an adaption from std::atomic<TDirectory*> to the; outstanding usage (i.e. behave somewhat like a TDirectory*).; TDirectory::CurrentDirectory now returns a reference to a `std::atomic<TDirectory*>`. Note: due to the actual (but intended to be unnoticeable) change in the type of gDirectory, there is no plan to backport this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6952:312,safe,safe,312,https://root.cern,https://github.com/root-project/root/pull/6952,1,['safe'],['safe']
Safety,"gcc9-dbg/include/GaudiKernel/StatEntity.h:12:; In file included from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Tue/x86_64-centos7-gcc9-dbg/include/Gaudi/Accumulators.h:14:; In file included from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Tue/x86_64-centos7-gcc9-dbg/include/Gaudi/MonitoringHub.h:15:; In file included from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Tue/x86_64-centos7-gcc9-dbg/include/nlohmann/json.hpp:49:; In file included from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Tue/x86_64-centos7-gcc9-dbg/include/nlohmann/adl_serializer.hpp:5:; In file included from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Tue/x86_64-centos7-gcc9-dbg/include/nlohmann/detail/conversions/from_json.hpp:18:; /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Tue/x86_64-centos7-gcc9-dbg/include/nlohmann/detail/meta/type_traits.hpp:11:10: fatal error: cannot open file '/build/jenkins/workspace/lcg_nightly_pipeline/install/dev3/jsonmcpp/3.9.1/x86_64-centos7-gcc9-dbg/include/nlohmann/json_fwd.hpp': No such file or directory; #include <nlohmann/json_fwd.hpp>; ^; python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/cling/lib/Interpreter/TransactionUnloader.cpp:72: bool cling::TransactionUnloader::unloadFromPreprocessor(cling::Transaction*, cling::DeclUnloader&): Assertion `Successful && ""Cannot handle that yet!""' failed.; *** Break *** abort; ...; ```; The header file being loaded is in `/cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Tue/x86_64-centos7-gcc9-dbg/include/nlohmann/json_fwd.hpp`, which is included in `ROOT_INCLUDE_PATH `. According to Vassil. This is due to some bug/feature in clang when it resolves include paths with symlinks. The problem is avoided if the realpath of the directory containing the header is prepended explicitely to `ROOT_INCLUDE_PATH`. ```; $ export ROOT_INCLUDE_PATH=/cvmfs/sft.cern.ch/lcg/releases/jsonmcpp/3.9.1-72770/x86_64-centos7-gcc9-dbg/include:$ROOT_INCLUDE_PATH; $ python -c 'import GaudiPython'; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7950:2130,abort,abort,2130,https://root.cern,https://github.com/root-project/root/issues/7950,2,"['abort', 'avoid']","['abort', 'avoided']"
Safety,"ge`. ### To Reproduce. Clone ROOT, create `build_win` folder, run:; ```; PS C:\dev\root\build_win> cmake -DCMAKE_TOOLCHAIN_FILE=D:\dev\vcpkg\scripts\buildsystems\vcpkg.cmake ..; -- Building for: Visual Studio 16 2019; -- Selecting Windows SDK version 10.0.19041.0 to target Windows 10.0.19042.; -- The C compiler identification is MSVC 19.29.30037.0; -- The CXX compiler identification is MSVC 19.29.30037.0; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30037/bin/Hostx64/x64/cl.exe - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30037/bin/Hostx64/x64/cl.exe - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Git: C:/Program Files/Git/cmd/git.exe (found version ""2.30.0.windows.2""); -- Detected ROOT_VERSION 6.25.01; -- Looking for Python; -- Could NOT find Python3 (missing: Python3_NumPy_INCLUDE_DIRS NumPy) (found version ""3.9.2""); -- Could NOT find Python2 (missing: Python2_EXECUTABLE Python2_LIBRARIES Python2_INCLUDE_DIRS Python2_NumPy_INCLUDE_DIRS Interpreter Development NumPy Development.Module Development.Embed); Reason given by package:; Interpreter: Wrong major version for the interpreter ""C:/Program Files/Python39/python.exe"". -- Looking for pthread.h; -- Looking for pthread.h - not found; -- Found Threads: TRUE; -- Performing Test GLIBCXX_USE_CXX11_ABI; -- Performing Test GLIBCXX_USE_CXX11_ABI - Failed; -- ROOT Platform: win32; -- ROOT Compiler: MSVC 19.29.30037.0; -- ROOT Processor: AMD64; -- ROOT Architecture: win32; -- Build Type: '' (flags = ''); -- Compiler Flags: -nologo -IC:/dev/root/build/win -FIw32pragma.h -FIsehmap.h -Zc:__cplusplus -MD -GR",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8633:1758,Detect,Detecting,1758,https://root.cern,https://github.com/root-project/root/issues/8633,2,['Detect'],['Detecting']
Safety,"get energy and transverse energy; float e();; float et();; };; ```. * Now, consider 3 stages of evolution for Position:. 1. Simplest implementation is to have Cartesian coordinates as private attributes;. 2. The users find that they most often use radius and azimuth, hence decide to store spherical coordinates instead of (x,y,z);. 3. Actually, colliders use eta more often than theta, so that the internal state is now given by (r, phi, eta). * In parallel and independently, Hit also evolves:. a. Simplest implementation is to have only the energy as private member;. b. Because the number of requests for the transverse energy is very high, the users want to optimize the speed by keeping Et as private member;. c. Well, it happens that disk space is short and e() is rarely called, so that it makes sense to reduce the size of the Hit class by dropping the energy member and computing the energy just when calling the method e(). They also found that the detector parameters used to store data in version b are wrong, so that one needs to scale the energy by 1.3 only for version b (a and c are correct). Could you please provide a working example in which data are saved and fetched with different combinations of (1, 2, 3)x(a, b, c) (at least with 1a, 2b, 3c)?. * The next step is to consider collections of objects:. i) define. ```cpp; class Track { /* particle trajectory */. private:; std::vector< Hit > m_hits;. };; ```. ii) Because the crazy developers of Hit decided to make such class variable size, one needs to store a vector of pointers instead of objects:. ```cpp; class Track { /* particle trajectory */. private:; std::vector< Hit* > m_hits;. };; ```. iii) Disk space is very short! We cannot waste the single 32-bits word used by the STL vector... ```cpp; class Track { /* particle trajectory */. private:; unsigned int m_Nhits;; Hit* m_hits; //[m_Nhits]. };; ```. Please, provide some working example that shows how to write and read all these 3 evolutions of Track (you may use",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14540:1575,detect,detector,1575,https://root.cern,https://github.com/root-project/root/issues/14540,1,['detect'],['detector']
Safety,"gle AMD EPYC 7702P 64-Core Processor), the test as is use close to 94% of all cpus and only a little system time:; ```; User time (seconds): 7250.76; System time (seconds): 3.58; Percent of CPU this job got: 12019%; ```; However tweaking to 390000 files of a 1000 entries, we get:; ```; User time (seconds): 450.77; System time (seconds): 438.39; Percent of CPU this job got: 7039%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.63; ```. Some are straight-forward to avoid:. ```; // Avoid lock internal to linux date/time:; diff --git a/io/io/src/TKey.cxx b/io/io/src/TKey.cxx; index e604af2980..f349bd8710 100644; --- a/io/io/src/TKey.cxx; +++ b/io/io/src/TKey.cxx; @@ -99,7 +99,7 @@ TKey::TKey() : TNamed(), fDatime((UInt_t)0); ////////////////////////////////////////////////////////////////////////////////; /// TKey default constructor.; ; -TKey::TKey(TDirectory* motherDir) : TNamed(), fDatime((UInt_t)0); +TKey::TKey(TDirectory* motherDir) : TNamed(), fDatime((UInt_t)0, (UInt_t)0); {; Build(motherDir, """", 0);; ; ```; Some require some thoughts:; ```; Try to avoid bottlenecking on recording TContext with gROOT when reading objects out files.; diff --git a/tree/dataframe/src/RLoopManager.cxx b/tree/dataframe/src/RLoopManager.cxx; index 4112e7aeb8..8d92534015 100644; --- a/tree/dataframe/src/RLoopManager.cxx; +++ b/tree/dataframe/src/RLoopManager.cxx; @@ -495,6 +495,7 @@ void RLoopManager::RunTreeProcessorMT(); const auto entryRange = r.GetEntriesRange(); // we trust TTreeProcessorMT to call SetEntriesRange; const auto nEntries = entryRange.second - entryRange.first;; auto count = entryCount.fetch_add(nEntries);; + // TDirectory::TContext ctxt(nullptr);; try {; // recursive call to check filters and conditionally execute actions; while (r.Next()) {; diff --git a/tree/treeplayer/src/TTreeProcessorMT.cxx b/tree/treeplayer/src/TTreeProcessorMT.cxx; index ad0100e377..f29a67b65b 100644; --- a/tree/treeplayer/src/TTreeProcessorMT.cxx; +++ b/tree/treeplayer/src/TTreeProcessorMT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12761:1823,avoid,avoid,1823,https://root.cern,https://github.com/root-project/root/issues/12761,1,['avoid'],['avoid']
Safety,"gleMu.root Run2012B_SingleMu.root Run2012B_SingleMu.root Run2012B_SingleMu.root Run2012B_SingleMu.root Run2012B_SingleMu.root Run2012B_SingleMu.root Run2012B_SingleMu.root Run2012B_SingleMu.root; hadd Target file: Run2012B_SingleMu10x.root; hadd compression setting for all output: 1; hadd Source file 1: Run2012B_SingleMu.root; hadd Source file 2: Run2012B_SingleMu.root; hadd Source file 3: Run2012B_SingleMu.root; hadd Source file 4: Run2012B_SingleMu.root; hadd Source file 5: Run2012B_SingleMu.root; hadd Source file 6: Run2012B_SingleMu.root; hadd Source file 7: Run2012B_SingleMu.root; hadd Source file 8: Run2012B_SingleMu.root; hadd Source file 9: Run2012B_SingleMu.root; hadd Source file 10: Run2012B_SingleMu.root; hadd Target path: Run2012B_SingleMu10x.root:/; Fill: Switching to new file: Run2012B_SingleMu10x_1.root; Fatal in <TFileMerger::RecursiveRemove>: Output file of the TFile Merger (targeting Run2012B_SingleMu10x.root) has been deleted (likely due to a TTree larger than 100Gb); aborting; #0 0x00007fea7e19b48a in wait4 () from /usr/lib/libc.so.6; #1 0x00007fea7e10d09b in do_system () from /usr/lib/libc.so.6; #2 0x00007fea7ea7fdac in TUnixSystem::Exec (this=0x5593666eb200, shellcmd=0x559368e19160 ""/home/blue/ROOT/master/cmake-build-foo/etc/gdb-backtrace.sh 538334 1>&2"") at ../core/unix/src/TUnixSystem.cxx:2108; #3 0x00007fea7ea8069e in TUnixSystem::StackTrace (this=0x5593666eb200) at ../core/unix/src/TUnixSystem.cxx:2399; #4 0x00007fea7e911bc1 in DefaultErrorHandler (level=6000, abort_bool=true, location=0x7fea7d7ab1b5 ""TFileMerger::RecursiveRemove"", msg=0x55936842c8a0 ""Output file of the TFile Merger (targeting Run2012B_SingleMu10x.root) has been deleted (likely due to a TTree larger than 100Gb)"") at ../core/base/src/TErrorDefaultHandler.cxx:174; #5 0x00007fea7e9ee212 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fea7d7ab1b5 ""TFileMerger::RecursiveRemove"", fmt=0x7fea7f1cb4c8 ""Output file of ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10102:1560,abort,aborting,1560,https://root.cern,https://github.com/root-project/root/issues/10102,1,['abort'],['aborting']
Safety,"gtests can print errors using ROOT's message system, but these get; ignored completely.; Several problems could have been caught automatically, but they went undetected. This adds a default regex to all gtests that checks for; ""(Fatal|Error|Warning) in <"", unless an explicit FAILREGEX is passed to; ROOT_ADD_GTEST. ### How to fix the tests:; - [Easy, but unsafe] Add `FAILREGEX """"` to `ROOT_ADD_GTEST`. In that case, we will not grep for anything.; - [Safe] Use the macros from https://github.com/root-project/root/blob/master/test/unit_testing_support/ROOTUnitTestSupport.h and catch the diagnostics ; - Fix what triggers the warnings/errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5591:356,unsafe,unsafe,356,https://root.cern,https://github.com/root-project/root/pull/5591,2,"['Safe', 'unsafe']","['Safe', 'unsafe']"
Safety,"he Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947; - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:; - [ ] https://github.com/root-project/root/issues/9953; - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999; - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process.; - [x] Make the doxygen documentation thread-safe; - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally; - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md; - [ ] Update rootspi scripts to build docu in CI accordingly; - [ ] tutorial generation does not work yet as ""out of source"". To-do...; - [x] require min doxygen version 1.9.4; - [ ] pre-check that output directory is empty ?; - [ ] if GVIZ not found, disable dot; - [ ] Stamp file generation to only recompile when changes; - [x] Remove unneeded unnecessary files Images.dat etc ? (or prevent that they appear in root source); - [x] Make filter.cxx threadsafe but giving unique names to ImageSizes.dat .root etc; - [x] set NUM_PROC_THREADS; - [ ] listLibs pass ROOT_CMD as variable; - [x] check why there are stdout.dat and NumberOfImages not being removed; - [ ] Consider enabling https://www.doxygen.nl/manual/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9966:1353,safe,safe,1353,https://root.cern,https://github.com/root-project/root/pull/9966,1,['safe'],['safe']
Safety,"hen trying to fill them. I've attached an example below. ### Reproducer. This is a minimal script that shows that issue. ```cpp; #include <ROOT/RNTupleModel.hxx>; #include <ROOT/RNTupleWriter.hxx>; ; #include <TSystem.h>; ; #include <vector>; #include <variant>; #include <optional>; ; using RNTupleModel = ROOT::Experimental::RNTupleModel;; using RNTupleWriter = ROOT::Experimental::RNTupleWriter;; ; void ntpl_issue(); {; auto model = RNTupleModel::Create();; ; auto fldVvar = model->MakeField<std::vector<std::variant<std::optional<int>,float>>>(""vvar"");; ; auto ntuple = RNTupleWriter::Recreate(std::move(model), ""F"", ""ntpl_issue.root"");; ; for (int i = 0; i < 10; i++) {; fldVvar->clear();; ; for (int j = 0; j < 5; ++j) {; std::variant<std::optional<int>,float> var(1.0);; fldVvar->emplace_back(var);; }; ; ntuple->Fill();; }; }; ```. And this is the error that it produces.; ```; Fatal: (typedValue->size() % fItemSize) == 0 violated at line 2432 of `.../root_src/tree/ntuple/v7/src/RField.cxx'; aborting; ```. Another way to get it to fail is by using `std::vector<std::variant<std::atomic<int>,float>>`. ### ROOT version. 6.33/01 (commit eef2244). ### Installation method. Built from source. ### Operating system. macOS. ### Additional context. I found this issue while trying to generate `std::variant` types in an invalid state by doing something like this. ```cpp; struct S {; operator int() { throw 42; }; };. std::variant<int,float> var;; try {; var = S();; } catch (int) {}; fldVvar->emplace_back(var);; ```. The spec indicates that invalid states are supported, as shown in the line below. I wanted to ask what's the reason for them being supported given that they are not really supposed to be ""legal"", and it seems like one can't successfully generate an RNTuple with an invalid state. It either ends up initializing the first variant or it crashes. https://github.com/root-project/root/blob/95307116ca3dd811ac1b5e496ad7f9828402dc51/tree/ntuple/v7/doc/specifications.md?plain=1#L780",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15534:1149,abort,aborting,1149,https://root.cern,https://github.com/root-project/root/issues/15534,1,['abort'],['aborting']
Safety,"his=this; entry=0x7ff42547e5f0, imtHelper=imtHelper; entry=0x0) at /home/aliperf/aliperf_workspace/sw/SOURCES/ROOT/v6-24-02/v6-24-02/tree/tree/src/TBranch.cxx:854; #11 0x00007ff4494ae36b in TBranchElement::FillImpl (this=0x7ff42547e5f0, imtHelper=0x0) at /home/aliperf/aliperf_workspace/sw/SOURCES/ROOT/v6-24-02/v6-24-02/tree/tree/src/TBranchElement.cxx:1265; #12 0x00007ff4494ae069 in TBranchElement::FillImpl (this=0x7ff425170850, imtHelper=0x0) at /home/aliperf/aliperf_workspace/sw/SOURCES/ROOT/v6-24-02/v6-24-02/tree/tree/src/TBranchElement.cxx:1290; #13 0x00007ff44f4faf89 in TBranch::Fill (this=0x7ff425170850) at /home/aliperf/aliperf_workspace/sw/slc7_x86-64/ROOT/v6-24-02-local5/include/TBranch.h:201; #14 o2::base::DetImpl<o2::trd::Detector>::mergeAndAdjustHits<std::vector<o2::trd::Hit, std::allocator<o2::trd::Hit> > > (this=this; entry=0x3e69680, brname=..., origin=..., target=..., trackoffsets=..., nprimaries=..., subevtsOrdered=...) at /home/aliperf/aliperf_workspace/sw/SOURCES/O2/dev/0/Detectors/Base/include/DetectorsBase/Detector.h:403; #15 0x00007ff44f4fb507 in o2::base::DetImpl<o2::trd::Detector>::mergeHitEntries (this=0x3e69680, origin=..., target=..., trackoffsets=..., nprimaries=..., subevtsOrdered=...) at /home/aliperf/aliperf_workspace/sw/SOURCES/O2/dev/0/Detectors/Base/include/DetectorsBase/Detector.h:422; #16 0x00000000004456e1 in o2::devices::O2HitMerger::mergeAndFlushData (this=0x162d640, eventID=<optimized out>) at /home/aliperf/aliperf_workspace/sw/SOURCES/O2/dev/0/run/O2HitMerger.h:745; #17 0x00007ff446ec9f10 in std::execute_native_thread_routine (__p=0x7ad9e10) at ../../../../../gcc/libstdc++-v3/src/c++11/thread.cc:80; #18 0x00007ff44e186ea5 in start_thread () from /lib64/libpthread.so.0; #19 0x00007ff44680796d in clone () from /lib64/libc.so.6. Thread 5 (Thread 0x7ff42a18e700 (LWP 25519) ""o2-sim-hit-merg""):; #0 0x00007ff44e18ade2 in pthread_cond_timedwait. GLIBC_2.3.2 () from /lib64/libpthread.so.0; #1 0x00007ff44aca29d3 in __gthread_cond_timedw",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8931:4054,Detect,Detectors,4054,https://root.cern,https://github.com/root-project/root/issues/8931,3,['Detect'],"['Detector', 'Detectors', 'DetectorsBase']"
Safety,http: increase websocket timeout to 300 s,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/503:25,timeout,timeout,25,https://root.cern,https://github.com/root-project/root/pull/503,1,['timeout'],['timeout']
Safety,http: try to avoid civetweb warnings on clang/mac,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1966:13,avoid,avoid,13,https://root.cern,https://github.com/root-project/root/pull/1966,1,['avoid'],['avoid']
Safety,"ication (Failed); 1070 - tutorial-tmva-TMVA_RNN_Classification (Failed); 1071 - tutorial-tmva-TMVA_SOFIE_PyTorch (Failed); 1203 - tutorial-dataframe-df102_NanoAODDimuonAnalysis-py (Failed); 1205 - tutorial-dataframe-df104_HiggsToTwoPhotons-py (Failed); 1261 - tutorial-rcanvas-df104-py (Failed); 1564 - roottest-python-JupyROOT-importROOT_notebook (Failed); 1565 - roottest-python-JupyROOT-simpleCppMagic_notebook (Failed); 1566 - roottest-python-JupyROOT-thread_local_notebook (Failed); 1567 - roottest-python-JupyROOT-ROOT_kernel_notebook (Failed); 1568 - roottest-python-JupyROOT-tpython_notebook (Failed); 1664 - roottest-python-distrdf-backends-test_all (Failed); ```; The specific run I references only failed the `TMapFile` test (which sometimes fails, sometimes succeed). The set of failure types is as follow:; ```; Warning in <TMVA_CNN_Classification>: TMVA is not build with GPU or CPU multi-thread support. Cannot use TMVA Deep Learning for CNN; Running with nthreads = 4; [37;41;1m<FATAL> : Can't import __main__[0m; ***> abort program execution; ```; ```; Setup TMVA...; [37;41;1m<FATAL> : Can't import __main__[0m; ***> abort program execution; ```; ```; Generate PyTorch model...; Traceback (most recent call last):; File ""/github/home/ROOT-CI/build/tmva/pymva/test/generatePyTorchModelClassification.py"", line 1, in <module>; import torch; ModuleNotFoundError: No module named 'torch'; ```; ```; RDataFrame::Run: event loop was interrupted; Traceback (most recent call last):; File ""/github/home/ROOT-CI/src/tutorials/dataframe/df102_NanoAODDimuonAnalysis.py"", line 50, in <module>; h.SetTitle(""""); ^^^^^^^^^^; cppyy.gbl.std.bad_alloc: TH1D& ROOT::RDF::RResultPtr<TH1D>::operator*() =>; bad_alloc: std::bad_alloc; CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```; ```; Traceback (most recent call last):; File ""/github/home/ROOT-CI/src/tutorials/dataframe/df104_HiggsToTwoPhotons.py"", line 87, in <module>; ROOT.RDF.RunGraphs([hist",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16242:2568,abort,abort,2568,https://root.cern,https://github.com/root-project/root/issues/16242,1,['abort'],['abort']
Safety,"identification is GNU 10.3.0; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: /usr/lib/ccache/bin/x86_64-pc-linux-gnu-gcc - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/lib/ccache/bin/x86_64-pc-linux-gnu-g++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Git: /usr/bin/git (found version ""2.31.1"") ; -- Detected ROOT_VERSION 6.25.01; -- Looking for Python; -- Found Python3: /usr/bin/python3.8 (found version ""3.8.10"") found components: Interpreter Development NumPy Development.Module Development.Embed ; -- The Fortran compiler identification is GNU 10.3.0; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Check for working Fortran compiler: /usr/bin/x86_64-pc-linux-gnu-gfortran - skipped; -- Checking whether /usr/bin/x86_64-pc-linux-gnu-gfortran supports Fortran 90; -- Checking whether /usr/bin/x86_64-pc-linux-gnu-gfortran supports Fortran 90 - yes; -- Found GCC. Major version 10, minor version 3; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed; -- Looking for pthread_create in pthreads; -- Looking for pthread_create in pthreads - not found; -- Looking for pthread_create in pthread; -- Looking for pthread_create in pthread - found; -- Found Threads: TRUE ; -- Performing Test GLIBCXX_USE_CXX11_ABI; -- Performing Test GLIBCXX_USE_CXX11_ABI - Success; -- ROOT Platform: linux; -- ROOT Compiler: GNU 10.3.0; -- ROOT Processor: x86_64; -- ROOT Architecture: linuxx8664gcc; -- Build Type: 'Debug' (flags = ''); -- Compiler Flags: -march=native -O2 -pipe -Og -fno-omit-frame-pointer -g -ggdb -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Wove",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8193:3499,Detect,Detecting,3499,https://root.cern,https://github.com/root-project/root/issues/8193,2,['Detect'],['Detecting']
Safety,"if ""[skip ci]"" is detected in the PR title, the CI does not start. This is done to have at least one string in common with the ones the GH CI uses for commits.; The test of this PR is that the CI does not start given its title.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15524:18,detect,detected,18,https://root.cern,https://github.com/root-project/root/pull/15524,1,['detect'],['detected']
Safety,"if imt is not specified, this tutorial should not be run as a test. # This Pull request:; Avoids running the `TMVA_CNN_Classification.C` when ROOT is not built with imt, since it is a requirement and trying to proceed nevertheless causes errors. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13712:90,Avoid,Avoids,90,https://root.cern,https://github.com/root-project/root/pull/13712,1,['Avoid'],['Avoids']
Safety,"ify compile options for imported target ""gmock"".; Call Stack (most recent call first):; CMakeLists.txt:219 (include). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1783 (target_compile_options):; Cannot specify compile options for imported target ""gmock_main"".; Call Stack (most recent call first):; CMakeLists.txt:219 (include). -- Building LLVM in 'Release' mode.; -- Could NOT find Z3: Found unsuitable version ""0.0.0"", but required is at least ""4.7.1"" (found Z3_LIBRARIES-NOTFOUND); -- Could NOT find LibXml2 (missing: LIBXML2_LIBRARY LIBXML2_INCLUDE_DIR) ; -- Native target architecture is X86; -- Threads disabled.; -- Doxygen disabled.; -- Go bindings disabled.; -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH) ; -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH) ; -- OCaml bindings disabled.; -- LLVM host triple: x86_64-unknown-linux-gnu; -- LLVM default target triple: x86_64-unknown-linux-gnu; -- Building with -fPIC; -- Constructing LLVMBuild project information; -- Linker detection: GNU ld; -- Targeting X86; -- Targeting NVPTX; -- Clang version: 9.0.1; -- Cling version (from VERSION file): ROOT_0.9~dev; -- Cling will look for C++ headers in '/usr/include/c++/9:/usr/include/x86_64-linux-gnu/c++/9:/usr/include/c++/9/backward' at runtime.; -- And then fallback to: 'x86_64-linux-gnu-g++-9'; -- Performing Test found_stdstringview; -- Performing Test found_stdstringview - Failed; -- Performing Test found_stdexpstringview; -- Performing Test found_stdexpstringview - Success; -- Performing Test found_stod_stringview; -- Performing Test found_stod_stringview - Failed; -- Performing Test found_stdapply; -- Performing Test found_stdapply - Failed; -- Performing Test found_stdinvoke; -- Performing Test found_stdinvoke - Failed; -- Performing Test found_stdindexsequence; -- Performing Test found_stdindexsequence - Success; -- 530/857 C++ tutorials have been activated.; -- 119/166 python tutorials have been activ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7654:3421,detect,detection,3421,https://root.cern,https://github.com/root-project/root/issues/7654,1,['detect'],['detection']
Safety,"ile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 8 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 8 tests from MiniFile; [ RUN ] MiniFile.Raw; [ OK ] MiniFile.Raw (0 ms); [ RUN ] MiniFile.Stream; Error in <TFile::ReadBuffer>: error reading all requested bytes from file test_ntuple_minifile_stream.root, got 0 of 6816316; Error in <TFile::Init>: test_ntuple_minifile_stream.root failed to read the file header information at 1677721600 (size=6816316); /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_minifile.cxx:84: Failure; Value of: file; Actual: false; Expected: true; [ FAILED ] MiniFile.Stream (191 ms); [ RUN ] MiniFile.Proper; Fatal: nread == nbytes violated at line 1083 of `/builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RMiniFile.cxx'; aborting; [ --- ]; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-rdf. $ printf '%x\n' 1677721600; 64000000. Header length shoud be 0x00000064 = 100; ~~~; 491/1272 Test #431: gtest-tree-ntuple-v7-test-ntuple-rdf ................................***Failed 74.39 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 1 test from 1 test suite.; [----------] Global test environment set-up.; [----------] 1 test from RNTuple; [ RUN ] RNTuple.RDF; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RN",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:9880,abort,aborted,9880,https://root.cern,https://github.com/root-project/root/issues/12426,1,['abort'],['aborted']
Safety,"in case keys could not be recovered, the file was made a Zombie; and caused the system to crash.; Relates to https://github.com/root-project/roottest/pull/217",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2583:26,recover,recovered,26,https://root.cern,https://github.com/root-project/root/pull/2583,1,['recover'],['recovered']
Safety,"in(){. // Choose the number of the test; // 0 or 1 ; int numTest = 0;. createFileWithHists(""myFileWithHists.root"");. TFileMerger fileMerger(false);; fileMerger.SetMsgPrefix(""selectiveHadd"");; fileMerger.SetPrintLevel(1);. // Set a selective list of objects to hadd ; // The rest of objects will not be considered in the input files ; fileMerger.AddObjectNames(""hist1"");; fileMerger.AddObjectNames(""hist2"");. // Set output file ; fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) ; fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){; ; // In that case add a dummy file i.e. empty file ; // In order to avoid the bug in in the TFileMerger class ; // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();; // create a unique empty file ; std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;; // Just create dummy file ; TFile *file = TFile::Open(dummyFileName.c_str(),""recreate"");; delete file;; fileMerger.AddFile(dummyFileName.c_str());; }; ; // Will only merge in the output files ; // the list of objects specified ; Int_t mode = (TFileMerger::kAll | TFileMerger::kRegular | TFileMerger::kOnlyListed);; ; fileMerger.PartialMerge(mode);; ; return 0;; }. void createFileWithHists(const std::string &fileName){; TFile *file = TFile::Open(fileName.c_str(), ""recreate""); . TH1F *hist1 = new TH1F(""hist1"", ""hist1"", 1 , 0 , 2);; TH1F *hist2 = new TH1F(""hist2"", ""hist2"", 1 , 0 , 2);; TH1F *hist3 = new TH1F(""hist3"", ""hist3"", 1 , 0 , 2);; TH1F *hist4 = new TH1F(""hist4"", ""hist4"", 1 , 0 , 2);. hist1->Fill(1);. hist2->Fill(1);; hist2->Fill(2);. hist3->Fill(1);; hist3->Fill(1);; hist3->Fill(1);. hist4->Fill(1);; hist4->Fill(1);; hist4->Fill(1);; hist4->Fill(1);. // Write and close file; file->Write();; delete file;; }; ```. ### ROOT version. Tested with ROOT Version: 6.26",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13359:3489,avoid,avoid,3489,https://root.cern,https://github.com/root-project/root/issues/13359,1,['avoid'],['avoid']
Safety,"ing boxes and employed in the FindBoundary/FindNode implementations. * The use of a 3D voxel grid (TGeoVoxelGrid) structure, able to store properties ""local"" or in the vicinity of a cartesian coordinate P. This structure allows to reduce the (typical) algorithmic complexity for ""Safety"" queries to ~O(1) (with a constant factor determined by the voxel size). Filling of the 3D voxel grid cache for Safety is done on-the-fly (using the BVH once). * (Optional) Additional caching of ""last-call"" safety values for really quick return when the value is still valid at the next call. Ideas for these improvements come from prior work in related libraries such as VecGeom. -----. Implementation details:. * The implementation is, for now (until fully tested), provided in a backward compatible manner:. - By default, nothing changes; - Users have to activate the BVH mode by setting an environment variable TGEO_PW_USEBVH; - Users may hence compare the 2 modes. * Functions for Safety, FindNode, FindBoundary dispatch to some internal implementation. This causes an extra lookup/jump, which can be removed once BVH is fully validated. * For the BVH, a well known open source implementation is included in header-only form. The headers are copied from https://github.com/madmann91/bvh commit 66e445b92f68801a6dd8ef943fe3038976ecb4ff. * A new class, TGeoVoxelGrid is provided for the cartesian VoxelGrid container. ----. Performance examples:. In a test with the ALICE simulation framework including the ITS + TPC detectors with 48240 volumes on the parallel world, we see. * initialization time goes from TGeoVoxelFinder: 10s ---> BVH: 40ms; * Geant simulation time: 10s --> 2s; * memory usage: 3GB --> 1GB. Hence, this PR will make a big difference for the ALICE simulation program. It was verified, that identical results (number of hits, steps, etc) are obtained when going from TGeoVoxelFinder --> BVH+GRID. ----. Outlook:. Similar techniques could be applied to ordinary TGeoNavigator routines. Checkli",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16442:1943,Safe,Safety,1943,https://root.cern,https://github.com/root-project/root/pull/16442,1,['Safe'],['Safety']
Safety,ing: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Control jumps to 'case 3:' at line 1846 in /opt/root_src/geom/geom/src/TGeoTube.cxx:1814; 2: Assuming 'id' is < 'ndiv' in /opt/root_src/geom/geom/src/TGeoTube.cxx:1855; 3: Loop condition is true. Entering loop body in /opt/root_src/geom/geom/src/TGeoTube.cxx:1855; 4: Value assigned to field 'fNodes' in /opt/root_src/geom/geom/src/TGeoTube.cxx:1856; 5: Called C++ object pointer is null in /opt/root_src/geom/geom/src/TGeoTube.cxx:1857; /opt/root_src/geom/geom/src/TGeoTube.cxx:2059:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2059; /opt/root_src/geom/geom/src/TGeoTube.cxx:2107:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2107; /opt/root_src/geom/geom/src/TGeoTube.cxx:2773:13: warning: Value stored to 's' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 's' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2773; /opt/root_src/geom/geom/src/TGeoTube.cxx:2909:13: warning: Value stored to 'sz1' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'sz1' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2909; /opt/root_src/geom/geom/src/TGeoTube.cxx:3015:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:3015; /opt/root_src/geom/geom/src/TGeoVolume.cxx:2899:7: warning: Called C++ object pointer is null [clang-analyzer-c,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:74944,safe,safe,74944,https://root.cern,https://github.com/root-project/root/issues/7428,1,['safe'],['safe']
Safety,io: Avoid infinite recursion in TFile::Open,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15591:4,Avoid,Avoid,4,https://root.cern,https://github.com/root-project/root/pull/15591,3,['Avoid'],['Avoid']
Safety,"is PR adds a CLI to the `RNTupleImporter` utility. The executable is called `ttree2rntuple` (can be changed if there are suggestions for better names), usage is as follows (copied from `ttree2rntuple --help`):. ```; Usage:; ttree2rntuple (--ttree|-t) name; (--infile|-i) path; (--outfile|-o) path; [(--rntuple|-r) name]; [(--compression|-c) compression]; [--unzipped-page-size size]; [--zipped-cluster-size size]; [--max-unzipped-cluster-size size]; [--convert-dots]; [(--verbose|-v)]; ttree2rntuple [--help|-h]. ttree2rntuple: a utility CLI for converting ROOT TTrees to ROOT RNTuples. Required arguments:; --ttree, -t name; The name of the source TTree to convert to RNTuple.; --infile, -i path; The path to the ROOT file that contains the source TTree.; --outfile, -o path; The path to the ROOT file to write the target RNTuple to. This file does not have to exist yet.; This may be the same file as the input file. Note that in this case the name of the target RNTuple should; be set to something different from the source TTree name using `--rntuple`, to avoid naming conflicts. Optional arguments:; --rntuple, -r name; The name of the target RNTuple.; This argument is optional. When not provided, the name of the source TTree will be used.; --compression, -c compression; The compression settings of the target RNTuple, provided as an integer.; This argument should be provided following ROOT's compression setting scheme (algorithm * 100 + level),; where `algorithm` uses the following mapping: {1: ZLIB, 2: LZMA, 4: LZMA, 5: ZSTD} ; and `level` is a number from 0 to 9 (inclusive, 0 indicating no compression).; If not specified, the default zstd (505) compression is used.; --unzipped-page-size size; The desired approximate unzipped (in-memory) page size in bytes, provided as an integer.; If not specified, the default size of 64 * 1024 bytes is used.; --zipped-cluster-size size; The desired approximate zipped cluster size in bytes, provided as an integer.; If not specified, the default",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14038:1062,avoid,avoid,1062,https://root.cern,https://github.com/root-project/root/pull/14038,1,['avoid'],['avoid']
Safety,"is false in /opt/root_src/geom/geom/src/TGeoPcon.cxx:680; 17: 'is_seg' is false in /opt/root_src/geom/geom/src/TGeoPcon.cxx:681; 18: Taking false branch in /opt/root_src/geom/geom/src/TGeoPcon.cxx:681; 19: 'is_tube' is false in /opt/root_src/geom/geom/src/TGeoPcon.cxx:685; 20: Taking false branch in /opt/root_src/geom/geom/src/TGeoPcon.cxx:685; 21: Value assigned to field 'fNodes' in /opt/root_src/geom/geom/src/TGeoPcon.cxx:690; 22: Called C++ object pointer is null in /opt/root_src/geom/geom/src/TGeoPcon.cxx:691; /opt/root_src/geom/geom/src/TGeoPcon.cxx:857:11: warning: Although the value stored to 'indx2' is used in the enclosing expression, the value is never actually read from 'indx2' [clang-analyzer-deadcode.DeadStores]; 1: Although the value stored to 'indx2' is used in the enclosing expression, the value is never actually read from 'indx2' in /opt/root_src/geom/geom/src/TGeoPcon.cxx:857; /opt/root_src/geom/geom/src/TGeoPcon.cxx:1108:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoPcon.cxx:1108; /opt/root_src/geom/geom/src/TGeoPcon.cxx:1174:7: warning: Value stored to 'iplane' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'iplane' is never read in /opt/root_src/geom/geom/src/TGeoPcon.cxx:1174; /opt/root_src/geom/geom/src/TGeoPcon.cxx:1175:7: warning: Value stored to 'saftmp' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'saftmp' is never read in /opt/root_src/geom/geom/src/TGeoPcon.cxx:1175; /opt/root_src/geom/geom/src/TGeoPcon.cxx:1200:7: warning: Value stored to 'dz' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'dz' is never read in /opt/root_src/geom/geom/src/TGeoPcon.cxx:1200; /opt/root_src/geom/geom/src/TGeoPcon.cxx:1205:4: warning: Value stored to 'saftmp' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:52194,safe,safe,52194,https://root.cern,https://github.com/root-project/root/issues/7428,1,['safe'],['safe']
Safety,"ition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested; dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt is implemented in mathmore, however there is already a non relativistic voigt in TMath ( called Voigt https://root.cern.ch/doc/master/namespaceTMath.html ). I'm unsure if this is possible but it would be ideal if the documentation here could mention in the non relativistic voigt case that there is a relativistic version available as I think as is very few people even if they want a relativistic case woul",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11049:3377,detect,detector,3377,https://root.cern,https://github.com/root-project/root/pull/11049,1,['detect'],['detector']
Safety,"ject/root/issues/8947; - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:; - [ ] https://github.com/root-project/root/issues/9953 in combination with https://github.com/ammaraskar/gcc-problem-matcher; - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999; - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process.; - [x] Make the doxygen documentation thread-safe; - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally; - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md; - [x] Update rootspi scripts to build docu in CI accordingly; - [ ] tutorial generation does not work yet as ""out of source"". To-do...; - [x] require min doxygen version 1.9.4; - [ ] pre-check that output directory is empty ?; - [ ] if GVIZ not found, disable dot; - [ ] Stamp file generation to only recompile when changes; - [x] Remove unneeded unnecessary files Images.dat etc ? (or prevent that they appear in root source); - [x] Make filter.cxx threadsafe but giving unique names to ImageSizes.dat .root etc; - [x] set NUM_PROC_THREADS; - [x] listLibs pass ROOT_CMD as variable; - [x] Understand why libs.C does not find classes such as TBrowserTimer in libCore.so; - [x] check why there are stdout.dat and N",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15160:1874,safe,safe,1874,https://root.cern,https://github.com/root-project/root/pull/15160,1,['safe'],['safe']
Safety,"k: 3 Time/ms: 150; Chunk: 4 Time/ms: 200; Chunk: 5 Time/ms: 250; Chunk: 6 Time/ms: 301; Chunk: 7 Time/ms: 352; Chunk: 8 Time/ms: 402; Chunk: 9 Time/ms: 453; ```; (A similar result is obtained if I use the `std::cout` statement instead of the `TThread::Printf`.). Now the problem. If I run this same loop in an application with a GUI window and a `TThread` (full reproducer code is below), then I get quite weird results. The first step takes 107 ms ! And the later steps take 60 ms instead of 50 ms.; ```; Chunk: 0 Time/ms: 0; Chunk: 1 Time/ms: 107; Chunk: 2 Time/ms: 167; Chunk: 3 Time/ms: 226; Chunk: 4 Time/ms: 287; Chunk: 5 Time/ms: 347; Chunk: 6 Time/ms: 409; Chunk: 7 Time/ms: 470; Chunk: 8 Time/ms: 531; Chunk: 9 Time/ms: 592; ```; (In contrast, if I use `std::cout` instead of `Printf`, every step is perfectly 50 ms). I found out that on line https://github.com/root-project/root/blob/a89eb12f83228833842813c4b690a2033778316b/core/thread/src/TThread.cxx#L1043, there is a timer being created, with a timeout of 20 ms, https://github.com/root-project/root/blob/a89eb12f83228833842813c4b690a2033778316b/core/thread/inc/TThread.h#L208. If I remove the `+ 10` ms and recompile ROOT, I get better results, (except for the first iteration):; ```; Chunk: 0 Time/ms: 0; Chunk: 1 Time/ms: 111; Chunk: 2 Time/ms: 161; Chunk: 3 Time/ms: 211; Chunk: 4 Time/ms: 262; Chunk: 5 Time/ms: 312; Chunk: 6 Time/ms: 362; Chunk: 7 Time/ms: 415; Chunk: 8 Time/ms: 469; Chunk: 9 Time/ms: 521; ```. ### Optional: share how it could be improved; It would be nice if there was a static method to tune the resolution of the `TThreadTimer` as well as the `TSystem::kITimerResolution` for applications requiring high performance, so that there is no 10ms (or 100ms at the beginning) delay due to a `Printf()` (or an` Emit()` for the signal-slot mechanism to communicate between threads). Right now, `ESysConstants::kItimerResolution` is not assignable at runtime, and `TThreadTimer` timeout is not configurable by the user",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8582:2479,timeout,timeout,2479,https://root.cern,https://github.com/root-project/root/issues/8582,1,['timeout'],['timeout']
Safety,"l>; This is free software: you are free to change and redistribute it.; There is NO WARRANTY, to the extent permitted by law.; Type ""show copying"" and ""show warranty"" for details.; This GDB was configured as ""x86_64-pc-linux-gnu"".; Type ""show configuration"" for configuration details.; For bug reporting instructions, please see:; <https://bugs.gentoo.org/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>. For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from bin/root.exe...; (gdb) break f; Function ""f"" not defined.; Make breakpoint pending on future shared library load? (y or [n]) y; Breakpoint 1 (f) pending.; (gdb) run; Starting program: /srv/root/build/bin/root.exe ; warning: File ""/srv/root/build/lib/libCore.so-gdb.py"" auto-loading has been declined by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; 	add-auto-load-safe-path /srv/root/build/lib/libCore.so-gdb.py; line to your configuration file ""/home/amadio/.config/gdb/gdbinit"".; To completely disable this security protection add; 	set auto-load safe-path /; line to your configuration file ""/home/amadio/.config/gdb/gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; 	info ""(gdb)Auto-loading safe path""; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/usr/lib64/libthread_db.so.1"".; [Detaching after vfork from child process 798483]; [Detaching after vfork from child process 800084]; [Detaching after vfork from child process 800087]; ------------------------------------------------------------------; | Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Dec 13 2022, 14:33:20 |; | From heads/cling-profile-debug@v6-25-02-31",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11882:1537,safe,safe-path,1537,https://root.cern,https://github.com/root-project/root/pull/11882,1,['safe'],['safe-path']
Safety,lang-analyzer-deadcode.DeadStores]; 1: Value stored to 'nbPnts' is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:577; /opt/root_src/geom/geom/src/TGeoTorus.cxx:646:10: warning: Value stored to 'indx' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'indx' is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:646; /opt/root_src/geom/geom/src/TGeoTorus.cxx:661:10: warning: Value stored to 'indx' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'indx' is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:661; /opt/root_src/geom/geom/src/TGeoTorus.cxx:697:7: warning: Value stored to 'i' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'i' is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:697; /opt/root_src/geom/geom/src/TGeoTorus.cxx:741:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:741; /opt/root_src/geom/geom/src/TGeoTorus.cxx:1065:13: warning: Value stored to 's' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 's' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:1065; /opt/root_src/geom/geom/src/TGeoTrd1.cxx:199:13: warning: Value stored to 'snxt' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'snxt' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTrd1.cxx:199; /opt/root_src/geom/geom/src/TGeoTrd1.cxx:317:13: warning: Value stored to 'snxt' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'snxt' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTrd1.cxx:317; /opt/root_src/geom/geom/src/TGeoTrd1.cxx:456:31: warning: Called C++ object pointer is null [clang-analyzer-cor,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:66313,safe,safe,66313,https://root.cern,https://github.com/root-project/root/issues/7428,1,['safe'],['safe']
Safety,"lapping, yet for which ROOT reports an overlap. (This is similar to #11781, but this time there is no explanation due to incorrect default units.). ### Expected behavior; There should be no overlap reported. Drawing the overlap (last line in reproduce commands below) shows the two tessellated objects without overlap:; ![image](https://user-images.githubusercontent.com/4656391/204112181-59b9798d-ca48-4426-9ab8-734e11f895d0.png). ### To Reproduce; ```console; auto* geo = TGeoManager::Import(""overlap_issue.gdml""); geo->CheckOverlaps(); geo->PrintOverlaps(); auto* vol1 = geo->GetTopNode()->GetDaughter(0)->GetVolume(); auto* vol2 = geo->GetTopNode()->GetDaughter(1)->GetVolume(); auto* mat1 = geo->GetTopNode()->GetDaughter(0)->GetMatrix(); auto* mat2 = geo->GetTopNode()->GetDaughter(1)->GetMatrix(); TGeoChecker ch(geo); overlap = ch.MakeCheckOverlap(""overlap"", vol1, vol2, mat1, mat2, false, 0.1); overlap->Print(); overlap->Draw(); ```; which produces:; ```console; 17:07:21 wdconinc@menelaos ~/EIC/detectors/epic (main *$%=) $ root -l ; root [0] auto* geo = TGeoManager::Import(""overlap_issue.gdml""); Info in <TGeoManager::Import>: Reading geometry from file: overlap_issue.gdml; Info in <TGeoManager::TGeoManager>: Geometry GDMLImport, Geometry imported from GDML created; Info in <TGeoManager::SetTopVolume>: Top volume is barrel. Master volume is barrel; Info in <TGeoNavigator::BuildCache>: --- Maximum geometry depth set to 100; Info in <TGeoManager::CheckGeometry>: Fixing runtime shapes...; Info in <TGeoManager::CheckGeometry>: ...Nothing to fix; Warning in <TGeoManager::CheckGeometry>: Volume ""plate"" has no medium: assigned dummy medium and material; Warning in <TGeoManager::CheckGeometry>: Volume ""barrel"" has no medium: assigned dummy medium and material; Info in <TGeoManager::CloseGeometry>: Counting nodes...; Info in <TGeoManager::Voxelize>: Voxelizing...; Info in <TGeoManager::CloseGeometry>: Building cache...; Info in <TGeoManager::CountLevels>: max level = 1, max placem",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11784:1296,detect,detectors,1296,https://root.cern,https://github.com/root-project/root/issues/11784,1,['detect'],['detectors']
Safety,"lar expression found in output. Regex=[: error:] 30.90 sec. Processing /home/vvassilev/workspace/sources/root/tutorials/dataframe/df004_cutFlowReport.C...; In module 'std' imported from input_line_1:1:; /usr/include/c++/7/string_view:88:41: error: static data member 'npos' already has an initializer; static constexpr size_type npos = size_type(-1);; ^; /usr/include/c++/7/string_view:319:43: note: in instantiation of static data member 'std::basic_string_view<char, std::char_traits<char> >::npos' requested here; rfind(_CharT __c, size_type __pos = npos) const noexcept;; ^; /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/include/ROOT/RDF/RInterface.hxx:468:14: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::SnapshotImpl<double, int>' requested here; return SnapshotImpl<ColumnTypes...>(treename, filename, columnList, options);; ^; input_line_102:2:206: note: in instantiation of function template specialization 'ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::Snapshot<double, int>' requested here; *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager>>*>(0x7fffffff9598) = reinterpret_cast<ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase>*>(0x7fffffff95d0)->Snapshot<__rdf1::b13_type, __rdf1::b24_type>(""myTree"", ""df004_cutFlowReport.root"", *reinterpret_cast<std::vector<std::string>*>(0x7fffffff9940),*reinterpret_cast<ROOT::RDF::RSnapshotOptions*>(0x7fffffff9a40));; ^; /usr/include/c++/7/string_view:88:41: note: previous initialization is here; static constexpr size_type npos = size_type(-1);; ^; terminate called after throwing an instance of 'std::runtime_error'; what(): ; An error occurred while jitting in Snapshot. The lines above might indicate the cause of the crash. CMake Error at /home/vvassilev/workspace/builds/root_runtime_modules_builtin_clang_debug/RootTestDriver.cmake:238 (message):; error code: Child aborted. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4437:2432,abort,aborted,2432,https://root.cern,https://github.com/root-project/root/pull/4437,1,['abort'],['aborted']
Safety,le '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:24' (0x7f7b0e15ea60) of size 5; 1148: '<string literal>' is ascii string 'true'; 1148: SUMMARY: AddressSanitizer: global-buffer-overflow (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db) in __asan_memcpy; 1148: Shadow bytes around the buggy address:; 1148: 0x0fefe1c23cf0: 00 00 03 f9 f9 f9 f9 f9 00 06 f9 f9 00 00 03 f9; 1148: 0x0fefe1c23d00: f9 f9 f9 f9 00 f9 f9 f9 07 f9 f9 f9 00 f9 f9 f9; 1148: 0x0fefe1c23d10: 00 00 01 f9 f9 f9 f9 f9 00 00 00 00 06 f9 f9 f9; 1148: 0x0fefe1c23d20: f9 f9 f9 f9 00 00 00 00 00 00 07 f9 f9 f9 f9 f9; 1148: 0x0fefe1c23d30: 00 00 00 00 05 f9 f9 f9 f9 f9 f9 f9 07 f9 f9 f9; 1148: =>0x0fefe1c23d40: 00 00 f9 f9 00 00 00 00 f9 f9 f9 f9[05]f9 f9 f9; 1148: 0x0fefe1c23d50: 06 f9 f9 f9 00 04 f9 f9 00 04 f9 f9 00 04 f9 f9; 1148: 0x0fefe1c23d60: 00 00 00 00 07 f9 f9 f9 f9 f9 f9 f9 00 00 00 00; 1148: 0x0fefe1c23d70: 03 f9 f9 f9 f9 f9 f9 f9 00 00 00 03 f9 f9 f9 f9; 1148: 0x0fefe1c23d80: 00 00 00 00 00 04 f9 f9 f9 f9 f9 f9 03 f9 f9 f9; 1148: 0x0fefe1c23d90: 02 f9 f9 f9 00 00 00 03 f9 f9 f9 f9 00 00 00 00; 1148: Shadow byte legend (one shadow byte represents 8 application bytes):; 1148: Addressable: 00; 1148: Partially addressable: 01 02 03 04 05 06 07; 1148: Heap left redzone: fa; 1148: Freed heap region: fd; 1148: Stack left redzone: f1; 1148: Stack mid redzone: f2; 1148: Stack right redzone: f3; 1148: Stack after return: f5; 1148: Stack use after scope: f8; 1148: Global redzone: f9; 1148: Global init order: f6; 1148: Poisoned by user: f7; 1148: Container overflow: fc; 1148: Array cookie: ac; 1148: Intra object redzone: bb; 1148: ASan internal: fe; 1148: Left alloca redzone: ca; 1148: Right alloca redzone: cb; 1148: ==4075620==ABORTING; ```. Note: There may be other problems in the test after this issue is fixed. Please check locally with an instrumented build that the test passes afterwards!,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11629:17961,ABORT,ABORTING,17961,https://root.cern,https://github.com/root-project/root/issues/11629,1,['ABORT'],['ABORTING']
Safety,"le::Open fixes this behaviour. ## Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. TTree::ChangeFile should not rely on the original TFile to be on the heap. ## To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; See the following gist:; https://gist.github.com/vepadulano/848ebbfbbb7efc95d2f5726538583b82. ## Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; 1. ROOT master; 2. Fedora 32; 3. ROOT build with cmake: `cmake -GNinja -Ddev=ON -DCMAKE_BUILD_TYPE=Debug -Dtesting=ON -Droottest=ON`. ## Additional context; Stacktrace; ```; #0 __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50; #1 0x00007ffff54f2535 in __GI_abort () at abort.c:79; #2 0x00007ffff5549508 in __libc_message (action=action@entry=do_abort, fmt=fmt@entry=0x7ffff565428d ""%s\n"") at ../sysdeps/posix/libc_fatal.c:181; #3 0x00007ffff554fc1a in malloc_printerr (str=str@entry=0x7ffff5655ff8 ""double free or corruption (out)"") at malloc.c:5341; #4 0x00007ffff5551730 in _int_free (av=0x7ffff568bc40 <main_arena>, p=0x7fffffffde90, have_lock=<optimized out>) at malloc.c:4306; #5 0x00007ffff7bf3dfc in TStorage::ObjectDealloc (vp=0x7fffffffdea0) at ../../../root_dbg/core/base/src/TStorage.cxx:362; #6 0x00007ffff7bd95c8 in TObject::operator delete (ptr=0x7fffffffdea0) at ../../../root_dbg/core/base/src/TObject.cxx:998; #7 0x00007ffff75db056 in TFile::~TFile (this=0x7fffffffdea0, __in_chrg=<optimized out>) at ../../../root_dbg/io/io/src/TFile.cxx:542; #8 0x00007ffff683c479 in TTree::ChangeFile (this=0x7fffffffdbd0, file=0x7fffffffdea0) at ../../../root_dbg/tree/tree/src/TTree.cxx:2792; #9 0x00007ffff6841802 in TTree::Fill (this=0x7ffff",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6527:1298,abort,abort,1298,https://root.cern,https://github.com/root-project/root/issues/6527,1,['abort'],['abort']
Safety,le>) [clazy-range-loop]; 1: const in /opt/root_src/geom/gdml/src/TGDMLParse.cxx:819; 2: & in /opt/root_src/geom/gdml/src/TGDMLParse.cxx:819; /opt/root_src/geom/geom/src/TGeoArb8.cxx:594:13: warning: Value stored to 's' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 's' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoArb8.cxx:594; /opt/root_src/geom/geom/src/TGeoArb8.cxx:918:13: warning: Value stored to 'ddmin' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'ddmin' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoArb8.cxx:918; /opt/root_src/geom/geom/src/TGeoArb8.cxx:1549:4: warning: Value stored to 'snxt' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'snxt' is never read in /opt/root_src/geom/geom/src/TGeoArb8.cxx:1549; /opt/root_src/geom/geom/src/TGeoArb8.cxx:1711:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoArb8.cxx:1711; /opt/root_src/geom/geom/src/TGeoArb8.cxx:1716:21: warning: Value stored to 'az' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'az' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoArb8.cxx:1716; /opt/root_src/geom/geom/src/TGeoArb8.cxx:1968:11: warning: Maybe you meant to call TGeoTrap::DistFromInside() instead [clazy-skipped-base-method]; /opt/root_src/geom/geom/src/TGeoArb8.cxx:1983:11: warning: Maybe you meant to call TGeoTrap::DistFromOutside() instead [clazy-skipped-base-method]; /opt/root_src/geom/geom/src/TGeoArb8.cxx:2032:11: warning: Maybe you meant to call TGeoTrap::Safety() instead [clazy-skipped-base-method]; /opt/root_src/geom/geom/src/TGeoBBox.cxx:324:25: warning: Called C++ object pointer is null [clang-analyzer-co,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:1156,safe,safe,1156,https://root.cern,https://github.com/root-project/root/issues/7428,1,['safe'],['safe']
Safety,"ly, there is no safeguard to prevent new commits from introducing new errors, which is prone to happen, as not everyone is familiar with the doxygen syntax. To maintain in a sustainable way the 'clean status' of the reference guide and online documentation, it would be helpful to add an automation script that compiles the documentation only with the files modified in the Pull Request to be merged, in the same way that a bot checks now about clang-format, etc. Because Doxygen can be configured to have only one input file, this extra check will not involve much time as compared to building the whole documentation. Then, it could be checked whether no warnings are produced by the 'touched' files. ### Optional: share how it could be improved; - [ ] The Github action or CI script should modify the -DDOCU_INPUT CMake flag to only add those touched by the Pull Request; - [x] The INCLUDE_PATH in the Doxyfile should be extended (for good, not just in the script) to all possible include folders, as you might touch a 'source file', but would get a bunch of warnings if Doxygen does not find the corresponding include path. (This is not the case in the full build, as the include files are also part of the INPUT, but wouldn't be the case if we just 'touch' the sources in the PR).; - [ ] The WARN_LOGFILE (-DDOCU_LOGFILE in cmake) should be set by the CI script to a useful filename. If the file is empty after running doxygen, the Test passes.; - [ ] Optional: HAVE_DOT, listLibs, etc. could be set to NO in case a speedup is wanted.; - [ ] Potentially hook it also up with spell-checking checks, see https://github.com/codespell-project/codespell; - [ ] Alternative approach suggested by albert-github to avoid missing references: use the overnight tag file from https://root.cern/reference/ with the pull request update test; - [ ] https://github.com/root-project/jenkins-pipelines/issues/10 jenkins parsing log fine-tune. ### Additional context; See https://root.cern/for_developers/doxygen/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9953:1942,avoid,avoid,1942,https://root.cern,https://github.com/root-project/root/issues/9953,1,['avoid'],['avoid']
Safety,"mIntFactory` plugin system; 10085390e5 [RF] Generalize RooMultiVarGaussian to be constructed from TMatrixDBase; 37f1e60345 [RF] Refactor RooIntegrator1D to use free functions; 47332b7fd5 [RF] Add `testRooIntegrator1D.cxx`; 9009fb2218 [RF] Fix bug in NLL summation in RooBatchCompute. 695eeef717 [RF] No need to create NLL manually in testLikelihoodJob; 498e846794 [RF] New `gtest_wrapper.h` for gtest backwards compatibility; c8c5b0d9c0 [RF] Add unit test for binned likelihood optimization; aedc556499 [RF] Use `BinnedLikelihood` in createNLL also without RooSimultaneous; 1ab0f6ddba [RF] Remove default constructors of old test statistic classes; 8d79da19c3 [RF] Deprecate now unused RooDataWeightedAverage; 2de763972e [RF] Use BatchMode for data projection plots; a6d0b50a63 [RF] Remove useless variable ownership management from RooAbsData; f07f77dfad [RF] Replace `RooCmdArg()` with `{}` in default parameter lists; d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`; 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit; 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists; 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory; 07b56333f9 [RF] Put members in RooAbsReal class declaration in order; 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal; 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows; 1e74086875 [RF] Extend AD tests in `testHistFactory`; 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory; 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal.; 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation.; 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD; efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`; 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface; 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper; 168b9ef861 [RF] Add Cod",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13295:2986,Avoid,Avoid,2986,https://root.cern,https://github.com/root-project/root/pull/13295,2,"['Avoid', 'safe']","['Avoid', 'safe']"
Safety,"me/sftnight/swunsch/python/bin/python3^/home/sftnight/swunsch/root/roottest/scripts/custom_diff.py"" ""-DCHECKOUT=true"" ""-DCHECKERR=true"" ""-DSYS=/home/sftnight/swunsch/build"" ""-DENV=LEGACY_PYROOT=False#ROOTSYS=/home/sftnight/swunsch/build#PATH=/home/sftnight/swunsch/build/bin:/home/sftnight/swunsch/python/bin:/home/sftnight/.local/bin:/home/sftnight/bin:/usr/lib64/ccache:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin#PYTHONPATH=/home/sftnight/swunsch/build/lib:#LD_LIBRARY_PATH=/home/sftnight/swunsch/build/lib:/home/sftnight/swunsch/python/lib:"" ""-DCOPY=/home/sftnight/swunsch/root/roottest/python/basic/ArgumentPassingCompiled.C^/home/sftnight/swunsch/root/roottest/python/basic/ReturnValues.C^/home/sftnight/swunsch/root/roottest/python/basic/SimpleClass.C^/home/sftnight/swunsch/root/roottest/python/basic/ArgumentPassingInterpreted.C"" ""-P"" ""/home/sftnight/swunsch/build/RootTestDriver.cmake""; 1312: Environment variables: ; 1312: ROOT_HIST=0; 1312: Test timeout computed to be: 300; 1312: Info in <TUnixSystem::ACLiC>: creating shared library /home/sftnight/swunsch/build/roottest/python/basic/./ArgumentPassingCompiled_C.so; 1312: ; 1312: -- TEST COMMAND -- ; 1312: cd /home/sftnight/swunsch/build/roottest/python/basic; 1312: /usr/bin/timeout -s USR2 270s /home/sftnight/swunsch/python/bin/python3 /home/sftnight/swunsch/root/roottest/python/basic/PyROOT_basictests.py --fixcling; 1312: -- BEGIN TEST OUTPUT --; 1312: INTERNALERROR> Traceback (most recent call last):; 1312: INTERNALERROR> File ""/home/sftnight/swunsch/root/roottest/python/pytest/_pytest/main.py"", line 77, in wrap_session; 1312: INTERNALERROR> config.do_configure(); 1312: INTERNALERROR> File ""/home/sftnight/swunsch/root/roottest/python/pytest/_pytest/config.py"", line 608, in do_configure; 1312: INTERNALERROR> self.hook.pytest_configure(config=self); 1312: INTERNALERROR> File ""/home/sftnight/swunsch/root/roottest/python/pytest/_pytest/core.py"", line 377, in __call__; 1312: INTERNALERROR> return self._docall(method",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6597:1884,timeout,timeout,1884,https://root.cern,https://github.com/root-project/root/issues/6597,1,['timeout'],['timeout']
Safety,ml/src/TGDMLParse.cxx:819; /opt/root_src/geom/geom/src/TGeoArb8.cxx:594:13: warning: Value stored to 's' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 's' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoArb8.cxx:594; /opt/root_src/geom/geom/src/TGeoArb8.cxx:918:13: warning: Value stored to 'ddmin' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'ddmin' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoArb8.cxx:918; /opt/root_src/geom/geom/src/TGeoArb8.cxx:1549:4: warning: Value stored to 'snxt' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'snxt' is never read in /opt/root_src/geom/geom/src/TGeoArb8.cxx:1549; /opt/root_src/geom/geom/src/TGeoArb8.cxx:1711:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoArb8.cxx:1711; /opt/root_src/geom/geom/src/TGeoArb8.cxx:1716:21: warning: Value stored to 'az' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'az' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoArb8.cxx:1716; /opt/root_src/geom/geom/src/TGeoArb8.cxx:1968:11: warning: Maybe you meant to call TGeoTrap::DistFromInside() instead [clazy-skipped-base-method]; /opt/root_src/geom/geom/src/TGeoArb8.cxx:1983:11: warning: Maybe you meant to call TGeoTrap::DistFromOutside() instead [clazy-skipped-base-method]; /opt/root_src/geom/geom/src/TGeoArb8.cxx:2032:11: warning: Maybe you meant to call TGeoTrap::Safety() instead [clazy-skipped-base-method]; /opt/root_src/geom/geom/src/TGeoBBox.cxx:324:25: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Control jumps to 'case 1:' at line 298 in /opt/root_src/geom/geom/src/TGeoBBox.cxx:297; 2: E,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:1260,safe,safe,1260,https://root.cern,https://github.com/root-project/root/issues/7428,1,['safe'],['safe']
Safety,n /opt/root_src/geom/geom/src/TGeoTube.cxx:1841; 8: Value assigned to field 'fNodes' in /opt/root_src/geom/geom/src/TGeoTube.cxx:1842; 9: Called C++ object pointer is null in /opt/root_src/geom/geom/src/TGeoTube.cxx:1843; /opt/root_src/geom/geom/src/TGeoTube.cxx:1857:31: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Control jumps to 'case 3:' at line 1846 in /opt/root_src/geom/geom/src/TGeoTube.cxx:1814; 2: Assuming 'id' is < 'ndiv' in /opt/root_src/geom/geom/src/TGeoTube.cxx:1855; 3: Loop condition is true. Entering loop body in /opt/root_src/geom/geom/src/TGeoTube.cxx:1855; 4: Value assigned to field 'fNodes' in /opt/root_src/geom/geom/src/TGeoTube.cxx:1856; 5: Called C++ object pointer is null in /opt/root_src/geom/geom/src/TGeoTube.cxx:1857; /opt/root_src/geom/geom/src/TGeoTube.cxx:2059:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2059; /opt/root_src/geom/geom/src/TGeoTube.cxx:2107:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2107; /opt/root_src/geom/geom/src/TGeoTube.cxx:2773:13: warning: Value stored to 's' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 's' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2773; /opt/root_src/geom/geom/src/TGeoTube.cxx:2909:13: warning: Value stored to 'sz1' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'sz1' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2909; /opt/root_src/geom/geom/src/TGeoTube.cxx:3015:13: warning: Value stored to 'safe' during its initialization is ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:74668,safe,safe,74668,https://root.cern,https://github.com/root-project/root/issues/7428,1,['safe'],['safe']
Safety,"n Mac (11 or 12) on ARM. Here is an example stacktrace (up until the calls to cling). ```; -- TEST COMMAND -- ; cd /Users/sftnight/build/workspace/roottest-pullrequests-build/build/roottest/python/distrdf/dask; /usr/bin/python3 /Users/sftnight/build/workspace/roottest-pullrequests-build/roottest/python/distrdf/dask/test_backend.py --fixcling; -- BEGIN TEST OUTPUT --; Assertion failed: (isInt<33>(Addend) && ""Invalid page reloc value.""), function encodeAddend, file /Users/sftnight/build/workspace/roottest-pullrequests-build/root/interpreter/llvm/src/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldMachOAArch64.h, line 210.; *** Break *** abort; [/Users/sftnight/build/workspace/roottest-pullrequests-build/build/lib/libCore.6.27.01.so] TUnixSystem::DispatchSignals(ESignals) (no debug info); [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info); [/usr/lib/system/libsystem_pthread.dylib] pthread_kill (no debug info); [/usr/lib/system/libsystem_c.dylib] abort (no debug info); [/usr/lib/system/libsystem_c.dylib] err (no debug info); [/Users/sftnight/build/workspace/roottest-pullrequests-build/build/lib/libCling.6.27.01.so] llvm::RuntimeDyldMachOAArch64::encodeAddend(unsigned char*, unsigned int, llvm::MachO::RelocationInfoType, long long) const (.cold.6) (no debug info); [/Users/sftnight/build/workspace/roottest-pullrequests-build/build/lib/libCling.6.27.01.so] llvm::RuntimeDyldMachOAArch64::encodeAddend(unsigned char*, unsigned int, llvm::MachO::RelocationInfoType, long long) const (no debug info); [/Users/sftnight/build/workspace/roottest-pullrequests-build/build/lib/libCling.6.27.01.so] llvm::RuntimeDyldImpl::resolveLocalRelocations() (no debug info); [/Users/sftnight/build/workspace/roottest-pullrequests-build/build/lib/libCling.6.27.01.so] llvm::RuntimeDyldImpl::resolveRelocations() (no debug info); [/Users/sftnight/build/workspace/roottest-pullrequests-build/build/lib/libCling.6.27.01.so] llvm::RuntimeDyld::finalizeWithMemoryManagerLocking() (no debug ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10061:1062,abort,abort,1062,https://root.cern,https://github.com/root-project/root/issues/10061,1,['abort'],['abort']
Safety,"n be specified besides the compression level: this is https://github.com/root-project/root/issues/6438; - `ROOT:::CompressionSettings` is undocumented (I only just now realized that it does precisely this conversion). One of the overloads has one line of documentation that mention it is deprecated but it is not actually deprecated with `R__DEPRECATE` ; - expected usage of `RCompressionSetting::EAlgorithm::EValues` is unclear (see https://root.cern/doc/master/structROOT_1_1RCompressionSetting_1_1EAlgorithm.html), the docs should probably point to `ROOT::CompressionSettings`. The docstring ""Note: this is only temporarily a struct and will become a enum class hence the name. "" should probably not appear in Doxygen, seems to be a not for developers; - `ROOT::CompressionSettings` requires that the user mentions the desired compression level. most of the time users just want to use whatever ROOT's default is. IIRC there is an enum for that too, but I could not find it in Doxygen. I would suggest the following improvements:; - `hadd --help` should mention that `-f` can also be used to trigger the compression algorithm, and it could have an examples section that shows how to use it and mentions `ROOT::CompressionSettings` as the API to recover the required integer given the desired compression algorithm; - `RCompressionSetting` should be documented with an example usage and pointers to the enums/structs to be used in conjunction to it; - the deprecated `RCompressionSetting` should be actually deprecated; - `RCompressionSetting` should provide a default value for the second argument that simply provides ROOT's default compression level for the specified compression algorithm; - the `RCompressionSetting::EAlgorithm` enum (which is currently a struct) should be made an enum, and its docs should point to `RCompressionSetting`; - the deprecated [ECompressionAlgorithm](https://root.cern/doc/master/namespaceROOT.html#a60945f6fe634f9f3be9872e57bf87f2e) should actually be deprecated",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8444:1614,recover,recover,1614,https://root.cern,https://github.com/root-project/root/issues/8444,1,['recover'],['recover']
Safety,"n version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved; <!--; If you already have an idea what we could improve, then please tell us.; -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1). ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code: build it / `root myMacro.C` / ...; -->. There isn't a bug explicitly here, but for a discussion on the Python 3 binding and modern `setuptools` issue that was resolved in XRootD `v5.4.1` see the links in additional context. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf in",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9967:1555,safe,safely,1555,https://root.cern,https://github.com/root-project/root/issues/9967,1,['safe'],['safely']
Safety,"n't itself use the offset (it doesn't calculate the likelihood), it must still synchronize offsets, because during the gradient calculation the LikelihoodSerial objects on the workers are used to calculate the likelihoods there, so for them the offsets must be up to date.; * The LikelihoodJob contains a LikelihoodSerial member as well now. This allows the LikelihoodJob to trigger calculating the offsets on the master process before sending them to the workers.; * LikelihoodWrapper has some added private helper functions for managing offsets. - Other miscellaneous changes:; * LikelihoodWrapper::setApplyWeightSquared was implemented properly for RooSumL likelihoods as well, passing along the call to component RooUnbinnedLs. Note, however, that it is currently not reachable for users because there is no interface to pass this along from the RooMinimizer, which contains the MinuitFcnGrad, which contains the LikelihoodWrapper. A comment in MinuitFcnGrad.h refers to this, reminding future devs to also flip offsets_reset_ when (un)setting squared weights.; * LikelihoodWrapper now holds the likelihood_type. This cleans up some code duplication in LikelihoodSerial and LikelihoodJob, which previously used the type only in their ctors, and avoids dynamic_casts later, e.g. on when calculating offsets.; * A RooSubsidiaryL can now also be computed with LikelihoodSerial and LikelihoodJob; this case was still missing in their evaluation functions.; * The LikelihoodSerial, LikelihoodJob and LikelihoodGradientJob ""ConstrainedAndOffset"" test cases used the wrong argument for the constrained parameter. These are now corrected from alpha_bkg_obs_A to become alpha_bkg_A.; * In LikelihoodJobTest, the added test case ""UnbinnedGaussian1DSelectedParameterValues"" shows where splitting over events can lead to bit-wise differences. This test will be useful in the future if further precision enhancements are made. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12202:3890,avoid,avoids,3890,https://root.cern,https://github.com/root-project/root/pull/12202,1,['avoid'],['avoids']
Safety,"n_codeset in libpython3.10.a(_localemodule.o); ""_libintl_bindtextdomain"", referenced from:; __locale_bindtextdomain in libpython3.10.a(_localemodule.o); ""_libintl_dcgettext"", referenced from:; __locale_dcgettext in libpython3.10.a(_localemodule.o); ""_libintl_dgettext"", referenced from:; __locale_dgettext in libpython3.10.a(_localemodule.o); ""_libintl_gettext"", referenced from:; __locale_gettext in libpython3.10.a(_localemodule.o); ""_libintl_setlocale"", referenced from:; __locale_setlocale in libpython3.10.a(_localemodule.o); __locale_localeconv in libpython3.10.a(_localemodule.o); ""_libintl_textdomain"", referenced from:; __locale_textdomain in libpython3.10.a(_localemodule.o); ld: symbol(s) not found for architecture x86_64; clang: error: linker command failed with exit code 1 (use -v to see invocation); make[2]: *** [lib/libPyMVA.so] Error 1; make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2; make: *** [all] Error 2; ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```; root -b -q ; ------------------------------------------------------------------------------; | Welcome to ROOT 6.31/01 https://root.cern |; | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for macosx64 on Feb 13 2024, 09:47:07 |; | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |; | With Apple clang version 13.0.0 (clang-1300.0.29.30) |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's build is detecting `libintl` but not using necessary linker flags when compiling. For example, fix for my local build is to add `-L/usr/local/lib -lintl`. ```; Python 3.10.1 (main, Jan 10 2022, 12:04:16) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14672:2013,detect,detecting,2013,https://root.cern,https://github.com/root-project/root/issues/14672,1,['detect'],['detecting']
Safety,"nating with default action of signal 6 (SIGABRT); ==22765== at 0x546E18B: raise (raise.c:51); ==22765== by 0x544D92D: abort (abort.c:100); ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29); ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29); ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29); ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29); ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so); ==22765== by 0x4DFF3CC: ???; ==22765== by 0x1FFEFFBB3F: ???; ==22765== by 0xB60A6A5548AF56FF: ???; ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so); ==22765== by 0x4DEB03F: ???; ==22765== ; ==22765== HEAP SUMMARY:; ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks; ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated; ==22765== ; ==22765== LEAK SUMMARY:; ==22765== definitely lost: 0 bytes in 0 blocks; ==22765== indirectly lost: 0 bytes in 0 blocks; ==22765== possibly lost: 7,728 bytes in 66 blocks; ==22765== still reachable: 66,622,884 bytes in 169,043 blocks; ==22765== of which reachable via heuristic:; ==22765== stdstring : 111 bytes in 1 blocks; ==22765== multipleinheritance: 7,776 bytes in 10 blocks; ==22765== suppressed: 278,964 bytes in 3,461 blocks; ==22765== Rerun with --leak-check=full to see details of leaked memory; ==22765== ; ==22765== Use --track-origins=yes to see where uninitialised values come from; ==22765== For lists of detected and suppressed errors, rerun with: -s; ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20); Aborted (core dumped); ```. That seems an important issue to fix. We should also probably run valgrind on all the tests to get a feeling of where we stand. And, yes I know it can take days or weeks but I think it is worth it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11385:8599,detect,detected,8599,https://root.cern,https://github.com/root-project/root/issues/11385,2,"['Abort', 'detect']","['Aborted', 'detected']"
Safety,new branch to avoid warning about missing roottest PR.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3760:14,avoid,avoid,14,https://root.cern,https://github.com/root-project/root/pull/3760,1,['avoid'],['avoid']
Safety,"nfo, re-calculated the state.; fState = kForwardDeclared;. delete fIsA; fIsA = 0;; // Disable the autoloader while calling SetClassInfo, to prevent; // the library from being reloaded!; {; TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);; TInterpreter::SuspendAutoParsing autoParseRaii(gCling);; gInterpreter->SetClassInfo(this,kTRUE);; }; ```. Likely disabling template instantiation inside SetClassInfo in this use case. ```; art: /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837: void clang::ClassTemplateSpecializationDecl::setInstantiationOf(clang::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/green",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462:1553,abort,abort,1553,https://root.cern,https://github.com/root-project/root/pull/5462,1,['abort'],['abort']
Safety,night/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22; #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12; #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const; Shadow bytes around the buggy address:; 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa; 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd; 0x0c2c800baf60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd; 0x0c2c800baf70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd; =>0x0c2c800baf80: fd fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd; 0x0c2c800baf90: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa; 0x0c2c800bafa0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c2c800bafb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c2c800bafc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c2c800bafd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00; Shadow byte legend (one shadow byte represents 8 application bytes):; Addressable: 00; Partially addressable: 01 02 03 04 05 06 07 ; Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; ==1544443==ABORTING. -- END TEST OUTPUT --; CMake Error at /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/RootTestDriver.cmake:186 (message):; got exit code 1 but expected 0. Standard Output. -- TEST COMMAND --,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12715:22260,ABORT,ABORTING,22260,https://root.cern,https://github.com/root-project/root/issues/12715,1,['ABORT'],['ABORTING']
Safety,"o it existed, to the value set on its initialization. ```cpp; //We initialize the scheduler with 4 threads; ROOT::EnableIMT(4);; { ; //The scheduler is active, so the value passed to TThreadExecutor; //is overriden with the number of threads the scheduler has been; //initialized with (4); TThreadExecutor executor(9);; }; ROOT::DisableIMT();. //The scheduler is not alive at this point, ; //so we initialize it with 2 threads; ROOT::EnableIMT(2);; ROOT::TThreadExecutor executor(8);; ROOT::DisableIMT();. executor.MapReduce(...); //Runs on two threads!. ROOT::EnableIMT(3);; //Still two threads! TThreadExecutor instance was keeping the scheduler alive; ```; This also implies that given two co-existent instances of TThreadExecutor initialized with a different number of threads, the first one to be initialized forces on the second one the number of threads to work with. ```cpp; ROOT::TThreadExecutor executor(4);; ROOT::TThreadExecutor executor2(8); //will run limited to two threads!!; ```; This setup was useful [to avoid undefined behaviours between the implicit and explicit parallelism modes of ROOT](https://indico.cern.ch/event/607814/contributions/2466931/attachments/1409778/2155811/TScheduler.pdf). . # New behaviour; With this PR, we can separate this two modes of execution. We support the co-existance of several TThreadExecutors, each handling a different number of threads, by initializing the scheduler with the [default number of threads](tbb::task_scheduler_init::default_num_threads) and using a ```tbb::task_arena``` per TThreadExecutor to work with a subset of them instead. ```cpp. //Each of the executor manages its own tbb::task_arena,; //which allows the co-existance of TThreadExecutors; //handling different number of threads.; TThreadExecutor executor1(8); //will run on 8 threads; TThreadExecutor executor2(4); //will run on 4 threads. //IMT keeps a different task Arena too!; ROOT::EnableIMT(4); //4 threads will be used in IMT operations; //executor3 will be initi",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2389:1924,avoid,avoid,1924,https://root.cern,https://github.com/root-project/root/pull/2389,1,['avoid'],['avoid']
Safety,"oPcon.cxx:681; 18: Taking false branch in /opt/root_src/geom/geom/src/TGeoPcon.cxx:681; 19: 'is_tube' is false in /opt/root_src/geom/geom/src/TGeoPcon.cxx:685; 20: Taking false branch in /opt/root_src/geom/geom/src/TGeoPcon.cxx:685; 21: Value assigned to field 'fNodes' in /opt/root_src/geom/geom/src/TGeoPcon.cxx:690; 22: Called C++ object pointer is null in /opt/root_src/geom/geom/src/TGeoPcon.cxx:691; /opt/root_src/geom/geom/src/TGeoPcon.cxx:857:11: warning: Although the value stored to 'indx2' is used in the enclosing expression, the value is never actually read from 'indx2' [clang-analyzer-deadcode.DeadStores]; 1: Although the value stored to 'indx2' is used in the enclosing expression, the value is never actually read from 'indx2' in /opt/root_src/geom/geom/src/TGeoPcon.cxx:857; /opt/root_src/geom/geom/src/TGeoPcon.cxx:1108:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoPcon.cxx:1108; /opt/root_src/geom/geom/src/TGeoPcon.cxx:1174:7: warning: Value stored to 'iplane' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'iplane' is never read in /opt/root_src/geom/geom/src/TGeoPcon.cxx:1174; /opt/root_src/geom/geom/src/TGeoPcon.cxx:1175:7: warning: Value stored to 'saftmp' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'saftmp' is never read in /opt/root_src/geom/geom/src/TGeoPcon.cxx:1175; /opt/root_src/geom/geom/src/TGeoPcon.cxx:1200:7: warning: Value stored to 'dz' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'dz' is never read in /opt/root_src/geom/geom/src/TGeoPcon.cxx:1200; /opt/root_src/geom/geom/src/TGeoPcon.cxx:1205:4: warning: Value stored to 'saftmp' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'saftmp' is never read in /opt/root_src/geom/geom/src/TGeoPcon.cxx:1205; /opt/root_src/geom/geom/src/TGe",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:52298,safe,safe,52298,https://root.cern,https://github.com/root-project/root/issues/7428,1,['safe'],['safe']
Safety,"oRealVar mean(""mean"", ""mean of gaussian"", 1, -10, 10);; RooRealVar sigma(""sigma"", ""width of gaussian"", 1, 0.1, 10);. RooGaussian gauss(""gauss"", ""gaussian PDF"", x, mean, sigma);. RooRealVar mean2(mean);. gauss.replaceServer(mean, mean2, true, false);; gauss.Print(""v"");. std::cout << ""x : "" << &gauss.getX() << std::endl;; std::cout << ""mean : "" << &gauss.getMean() << std::endl;; std::cout << ""sigma: "" << &gauss.getSigma() << std::endl;; ```. Here, the proxy for `mean` will still point to the original `mean`, but; the server was redirected to the copy `mean2`. This is dangerous, and; desyncing of the proxy and server list are actually the underlying; reason for a set of RooFit problems. The safter `RooAbsArg::redirectServers()` should always be used,; becauese that one is also updating the proxies. Therefore, the; `replaceServer()` interface is now marked as dangerous everywhere; possible: in a printout when you use it, in the docs, and with the; `R__SUGGEST_ALTERNATIVE` macro. Internally, the `replaceServer()` was also used in `redirectServers()`.; But this was also causing problems: `replaceServer()` always adds the; new server at the end of the server list, which means the list gets; reordered. This can confuse usercode that rely on the server list being; ordered (yes, that's not a good idea anyway, but there are many codes; that do this). This reordering can also be seein in the example code; above. Therefore, the `redirectServers()` function is now rewritten to replace; the server without changing its position in the server list. This also; means that the original server list doesn't need to be copied, as not; iterators are invalidated. Furthermore, the `redirectServers()` is more optimized now. Before, it; redundantly figured out whether a server was a value and/or shape; server. Now, this is figured out only once when removing the original; server from the client. In summary: this PR makes RooFit code safer and faster by changing; `RooAbsArg::redirectServers()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12040:1941,redund,redundantly,1941,https://root.cern,https://github.com/root-project/root/pull/12040,2,"['redund', 'safe']","['redundantly', 'safer']"
Safety,"oid setting internal variables directly. Python error message:; Traceback (most recent call last):; File ""<string>"", line 6, in <module>; File ""<string>"", line 6, in <dictcomp>; TypeError: 'torch._C.Node' object is not subscriptable; terminate called after throwing an instance of 'std::runtime_error'; what(): ; Failed to run python code: for i in graph[0].nodes():; globals().update(locals()); nodeData={}; nodeData['nodeType']=i.kind(); nodeAttributeNames=[x for x in i.attributeNames()]; nodeAttributes={j:i[j] for j in nodeAttributeNames}; nodeData['nodeAttributes']=nodeAttributes; nodeInputs=[x for x in i.inputs()]; nodeInputNames=[x.debugName() for x in nodeInputs]; nodeData['nodeInputs']=nodeInputNames; nodeOutputs=[x for x in i.outputs()]; nodeOutputNames=[x.debugName() for x in nodeOutputs]; nodeData['nodeOutputs']=nodeOutputNames; nodeDType=[x.type().scalarType() for x in nodeOutputs]; nodeData['nodeDType']=nodeDType; modelData.append(nodeData); Subprocess aborted; make[2]: *** [tmva/pymva/test/CMakeFiles/SofieCompileModels_PyTorch.dir/build.make:70: SofieCompileModels_PyTorch] Error 1; make[1]: *** [CMakeFiles/Makefile2:62828: tmva/pymva/test/CMakeFiles/SofieCompileModels_PyTorch.dir/all] Error 2; make[1]: *** Waiting for unfinished jobs....; ```. ### Reproducer. `cmake ../src -DCMAKE_BUILD_TYPE=RelWithDebInfo -Droofit=on -Dmysql=off -Dpgsql=off -Droostats=on -Dfortran=off -Dhistfactory=on -Dtmva=on -Dminuit2=on -Droottest=on -Droot7=on -Dtesting=on -Dbuiltin_llvm=on -Dbuiltin_tbb=off -Dbuiltin_nlohmannjson=on -DCMAKE_CXX_STANDARD=17 -DPYTHON_EXECUTABLE=$(which python) -Dfail-on-missing=on -Doracle=off -Dpythia6=off -Dpythia8=off -Dgfal=off -Dvdt=off -Ddavix=off -Droofit_hs3_yml=ON -Droofit_multiprocess=ON -Dbuiltin_zeromq=ON -Dbuiltin_cppzmq=ON`. ### ROOT version. ROOT Version: 6.29/01; Built for linuxx8664gcc on Jul 03 2023, 09:06:02; From heads/master@v6-29-01-1847-g7f288f1ca8e. ### Installation method. compiled with cmake from master. ### Operating system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13155:1877,abort,aborted,1877,https://root.cern,https://github.com/root-project/root/issues/13155,1,['abort'],['aborted']
Safety,"oject %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->; Yes. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; Root fails to build in Arch Linux.; `$ cmake -DCMAKE_INSTALL_PREFIX=../install ../gitclone`; <details>; <summary>output</summary>. ```; -- The C compiler identification is GNU 11.2.0; -- The CXX compiler identification is GNU 11.2.0; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: /usr/bin/cc - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/c++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Git: /usr/bin/git (found version ""2.36.0""); -- Detected ROOT_VERSION 6.27.01; -- Checking internet connectivity...; -- Yes; -- Looking for Python; -- Found Python3: /usr/bin/python3.10 (found version ""3.10.4"") found components: Interpreter Development NumPy Development.Module Development.Embed; -- Could NOT find Python2 (missing: Python2_NumPy_INCLUDE_DIRS NumPy) (found version ""2.7.18""); -- Found GCC. Major version 11, minor version 2; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success; -- Found Threads: TRUE; -- Performing Test GLIBCXX_USE_CXX11_ABI; -- Performing Test GLIBCXX_USE_CXX11_ABI - Success; -- ROOT Platform: linux; -- ROOT Compiler: GNU 11.2.0; -- ROOT Processor: x86_64; -- ROOT Architecture: linuxx8664gcc; -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'); -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG; -- ROOT def",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10528:1172,Detect,Detected,1172,https://root.cern,https://github.com/root-project/root/issues/10528,1,['Detect'],['Detected']
Safety,"oot-project/root/pull/9539; Only the first four commits that are not about code modernization; - [x] https://github.com/root-project/root/pull/11969; - [x] https://github.com/root-project/root/pull/11962; - [x] https://github.com/root-project/root/pull/11970; - [x] https://github.com/root-project/root/pull/11966; - [x] https://github.com/root-project/root/pull/11984; - [x] https://github.com/root-project/root/pull/11986; - [x] https://github.com/root-project/root/pull/11841; - [x] https://github.com/root-project/root/pull/11985; - [x] https://github.com/root-project/root/pull/11988; - [x] https://github.com/root-project/root/pull/11995; - [x] https://github.com/root-project/root/pull/11999; - [x] https://github.com/root-project/root/pull/12000; - [x] https://github.com/root-project/root/pull/12010; - [x] https://github.com/root-project/root/pull/12011; - [x] https://github.com/root-project/root/pull/12017; - [x] https://github.com/root-project/root/pull/12022; All commits except for the last one for `RooAbsArg`, which might be a bit too unsafe...; - [x] https://github.com/root-project/root/pull/12024; - [x] https://github.com/root-project/root/pull/12029; - [x] https://github.com/root-project/root/pull/12030; - [x] https://github.com/root-project/root/pull/12033; - [x] https://github.com/root-project/root/pull/12039; - [x] https://github.com/root-project/root/pull/12046; - [x] https://github.com/root-project/root/pull/12051; - [x] https://github.com/root-project/root/pull/12048; - [x] https://github.com/root-project/root/pull/12061; - [x] https://github.com/root-project/root/pull/12071; Only the first commit that is not a fixup to a recent typo is `master`; - [x] https://github.com/root-project/root/pull/12089; - [x] https://github.com/root-project/root/pull/12079; - [x] https://github.com/root-project/root/pull/12040; - [x] https://github.com/root-project/root/pull/12064; - [x] https://github.com/root-project/root/pull/12114; - [x] https://github.com/root-project/ro",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11856:2640,unsafe,unsafe,2640,https://root.cern,https://github.com/root-project/root/issues/11856,1,['unsafe'],['unsafe']
Safety,"oot/issues/8523), a next step is to translate also the [RooStats tutorials](https://root.cern/doc/master/group__tutorial__roostats.html) to pyROOT. The RooStats tutorials can be found in the [tutorials/roostats](https://github.com/root-project/root/tree/master/tutorials/roostats) directory. Right now, none of the tutorials are translated to Python yet. For a start, one could start with the translation of the very popular [StandardHypoTestInvDemo](https://root.cern.ch/doc/master/StandardHypoTestInvDemo_8C.html) tutorial, which explains the widely used AsymptoticCalculator and HypoTestInverter classes. Any new Python tutorials should be formatted with [black](https://github.com/psf/black):; ```; black --line-length=120 <tutorial file>.py; ```. *Please note:* if you want to work on this issue, please don't open a PR with all tutorials translated at once! This makes the review process unsustainable. For example, if you submit one translation at a time, you will get feedback that will help you improving your next translation, so the same comments don't have to be made redundantly. This saves time for both the contributor and reviewer :slightly_smiling_face: . Here is the list of all the RooStats tutorials and whether they have already been translated:. - [x] FourBinInstructional.C; - [x] HybridInstructional.C; - [x] HybridStandardForm.C; - [x] IntervalExamples.C; - [ ] ModelInspector.C; - [x] MultivariateGaussianTest.C; - [ ] OneSidedFrequentistUpperLimitWithBands.C; - [x] rs101_limitexample.C; - [ ] rs102_hypotestwithshapes.C; - [x] rs301_splot.C; - [ ] rs302_JeffreysPriorDemo.C; - [x] rs401c_FeldmanCousins.C; - [ ] rs401d_FeldmanCousins.C; - [x] rs601_HLFactoryexample.C; - [ ] rs602_HLFactoryCombinationexample.C; - [ ] rs603_HLFactoryElaborateExample.C; - [x] rs701_BayesianCalculator.C; - [x] rs_bernsteinCorrection.C; - [ ] rs_numberCountingCombination.C; - [x] rs_numbercountingutils.C; - [ ] StandardBayesianMCMCDemo.C; - [ ] StandardBayesianNumericalDemo.C; - [ ] Stan",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8758:1190,redund,redundantly,1190,https://root.cern,https://github.com/root-project/root/issues/8758,1,['redund'],['redundantly']
Safety,"or validity of the existing `FileEntry` was removed:. ```; - if (UFE.isValid() &&; - llvm::sys::toTimeT(Status.getLastModificationTime()) == UFE.ModTime) {; + if (llvm::sys::toTimeT(Status.getLastModificationTime()) == UFE->ModTime) {; ```. In praticed this resulted in the usage of the zero-initialized `FileEntry` for files with mtime equal zero. The check for the mod time is a ROOT specific patch introduced by commit 8d492b6b9ca359294d018995d097736f762866c8 we the commit log:. Make sure the inode did not get updated since we read it. During the upgrade to LLVM svn revision 214630, the code was sub-optimally merged with the new related code:. ```; + if (UFE.isValid()) { // Already have an entry with this inode, return it.; +; + // FIXME: this hack ensures that if we look up a file by a virtual path in; + // the VFS that the getDir() will have the virtual path, even if we found; + // the file by a 'real' path first. This is required in order to find a; + // module's structure when its headers/module map are mapped in the VFS.; + // We should remove this as soon as we can properly support a file having; + // multiple names.; + if (DirInfo != UFE.Dir && Data.IsVFSMapped); + UFE.Dir = DirInfo;; + }; if (UFE.isValid() && Data.ModTime == UFE.ModTime) {; - // Already have an entry with this inode, return it.; - // If the stat process opened the file, close it to avoid a FD leak.; - if (F); - delete F;; -; return &UFE;; }; ```. where the new code (top part) should also have not been executed unless the UFE was actually returned. This also made meger the LLVM code more challenged were one the change was:; ```; - if (UFE.isValid()) { // Already have an entry with this inode, return it.; + if (ReusingEntry) { // Already have an entry with this inode, return it. ```; this lead to the inadvertent removal of `UFE.isValid() conditional` in the patched part (and the forgetting of adding `ReusingEntry conditional`). This patch remerge the two section under the a single if statement.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14373:1438,avoid,avoid,1438,https://root.cern,https://github.com/root-project/root/pull/14373,1,['avoid'],['avoid']
Safety,"or_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::RNNDescriptors_t &, TMVA::DNN::TCudnn<AFloat>::RNNWorkspace_t &) [with AFloat=Double_t]"" at line 44 of /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn.cu. /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn/RecurrentPropagation.cu(571): error: identifier ""cudnnRNNBackwardWeights"" is undefined; status = cudnnRNNBackwardWeights(cudnnHandle, rnnDesc, seqLength, desc.xDesc.data(), x.GetDataPointer(),; ^; detected during instantiation of ""void TMVA::DNN::TCudnn<AFloat>::RNNBackward(const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::RNNDescriptors_t &, TMVA::DNN::TCudnn<AFloat>::RNNWorkspace_t &) [with AFloat=Double_t]"" at line 44 of /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn.cu. 8 errors detected in the compilation of ""/build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn.cu"".; ```. The missing functions were [deprecated in cuDNN 8.0](https://docs.nvidia.com/deeplearning/cudnn/archives/cudnn-897/api/index.html#cudnnRNNForwardTraining) and [removed in cuDNN 9.0](https://docs.nvidia.com/deeplearning/cudnn/latest/api/overview.html#id1). ### Reproducer. Build from source with cuDNN 9.0 or newer. ### ROOT version. 6.30.06. ### Installation method. build from source. ### Operating system. Arch Linux. ### Additional context. _N",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15413:6656,detect,detected,6656,https://root.cern,https://github.com/root-project/root/issues/15413,1,['detect'],['detected']
Safety,"otd/5.5.0/lib/libXrdUtils.dylib;/Users/marcomeyer/Software/xrootd/5.5.0/lib/libXrdCl.dylib; -- Checking for module 'davix>=0.6.4'; -- Found davix, version 0.8.4; -- Cannot select cudnn without selecting cuda or tmva-gpu. Option is ignored; -- Looking for BLAS for optional parts of TMVA; -- Building LLVM in 'Release' mode.; -- Could NOT find Z3: Found unsuitable version ""0.0.0"", but required is at least ""4.7.1"" (found Z3_LIBRARIES-NOTFOUND); -- Found libtool - /Library/Developer/CommandLineTools/usr/bin/libtool; -- Native target ARM is not selected; lli will not JIT code; -- Threads disabled.; -- Doxygen disabled.; -- Go bindings disabled.; -- Found ld64 - /Library/Developer/CommandLineTools/usr/bin/ld; -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH) ; -- OCaml bindings disabled.; -- LLVM host triple: arm-apple-darwin23.2.0; -- LLVM default target triple: arm-apple-darwin23.2.0; -- Building with -fPIC; -- Constructing LLVMBuild project information; -- Linker detection: unknown; -- Targeting AArch64; -- Targeting NVPTX; -- Clang version: 9.0.1; -- Cling version (from VERSION file): ROOT_1.0~dev; CMake Warning at interpreter/cling/lib/Interpreter/CMakeLists.txt:278 (MESSAGE):; Cannot determine location of C++ headers for runtime. -- Cling will look for C++ headers in '' at runtime.; -- And then fallback to: 'clang'; -- Performing Test found_stdstringview; -- Performing Test found_stdstringview - Success; -- Performing Test found_stod_stringview; -- Performing Test found_stod_stringview - Failed; -- Performing Test found_stdapply; -- Performing Test found_stdapply - Success; -- Performing Test found_stdinvoke; -- Performing Test found_stdinvoke - Success; -- Performing Test found_stdindexsequence; -- Performing Test found_stdindexsequence - Success; -- ROOT Configuration . System Darwin-23.2.0; Processor 10 core Apple M1 Max (arm64); Build type Release; Install path /Users/marcomeyer/Software/root/20240113; Compiler AppleClang 15.0.0.1500010",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14337:3239,detect,detection,3239,https://root.cern,https://github.com/root-project/root/issues/14337,1,['detect'],['detection']
Safety,otherwise there is a risk of overcommiting the machine with too many workers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3661:21,risk,risk,21,https://root.cern,https://github.com/root-project/root/pull/3661,1,['risk'],['risk']
Safety,"produced with version 5.34/32 of ROOT.; hadd Source file 2: ppfx_me000z-200i_run_526.root; Warning in <TFile::Init>: no StreamerInfo found in ppfx_me000z-200i_run_526.root therefore preventing schema evolution when reading this file. The file was produced with version 5.34/32 of ROOT.; hadd Target path: out.root:/; hadd Target path: out.root:/nom; hadd Target path: out.root:/nom/parent; Error in <TBufferFile::ReadClassBuffer>: Could not find the StreamerInfo for version 7 of the class TH1, object skipped at offset 110; Error in <TBufferFile::CheckByteCount>: object of class TH1 read too few bytes: 2 instead of 2216; Error in <TBufferFile::ReadClassBuffer>: Could not find the StreamerInfo for version 7 of the class TH1, object skipped at offset 107; Error in <TBufferFile::CheckByteCount>: object of class TH1 read too few bytes: 2 instead of 2213; Error in <TBufferFile::ReadClassBuffer>: Could not find the StreamerInfo for version 7 of the class TH1, object skipped at offset 109; Error in <TBufferFile::CheckByteCount>: object of class TH1 read too few bytes: 2 instead of 2215; ```; however hadd proceeds to operate despite of corrupted input. Moreover the exit code is 0, which typically means successful completion of a process.; When merging multiple sets of files it is possible to miss the printed messages. I don't know of any way of automating the process of detecting the issues. ### Describe the solution you'd like; I believe the operation would be much more robust if; 1. hadd produced no output file if any issues with the input files are encountered, except when option `-k` is provided explicitly; 2. hadd generates exit code different from 0 if any issues with input files are encountered. ### Describe alternatives you've considered; Alternative solution is of course avoiding the errors to occur and checking for them separately. ### Additional context; Input ROOT files were produced with ROOT version 5.34.32, but I can use more modern versions of hadd to merge them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8952:2566,detect,detecting,2566,https://root.cern,https://github.com/root-project/root/issues/8952,2,"['avoid', 'detect']","['avoiding', 'detecting']"
Safety,"py `hist1`, `hist2`. ; But instead the full file is copied and `myExclusiveFile.root` contains all histograms. ; ```; selectiveHadd Source file 1: myFileWithHists.root; [TFile::Cp] Total 0.00 MB	|====================| 100.00 % [6.7 MB/s]. romain@romain-dell:~/Desktop$ root -l myExclusiveFile.root ; root [0] ; Attaching file myExclusiveFile.root as _file0...; (TFile *) 0x562d3abbe360; root [1] .ls; TFile**		myExclusiveFile.root	; TFile*		myExclusiveFile.root	; KEY: TH1F	hist1;1	hist1; KEY: TH1F	hist2;1	hist2; KEY: TH1F	hist3;1	hist3; KEY: TH1F	hist4;1	hist4; root [2] ; ```. The case `numTest=1` is a way to avoid this bug. ; One can create a dummy empty file and add it as input file of the `TFileMerger` so that there is 2 input files the one of interest + the dummy empty one . ; In that case as requested only `hist1` and `hist2` are found in the `myExclusiveFile.root` file.; ```; selectiveHadd Source file 1: myFileWithHists.root; Creating a dummy empty file to avoid a bug in TFileMerger class: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root; selectiveHadd Source file 2: /tmp/dummyEmptyFile-52fce558-3043-11ee-8e02-2201a8c0beef.root; selectiveHadd Target path: myExclusiveFile.root:/. romain@romain-dell:~/Desktop$ root -l myExclusiveFile.root ; root [0] ; Attaching file myExclusiveFile.root as _file0...; (TFile *) 0x55932d5cd940; root [1] .ls; TFile**		myExclusiveFile.root	; TFile*		myExclusiveFile.root	; KEY: TH1F	hist1;1	hist1; KEY: TH1F	hist2;1	hist2; root [2] ; ```. Many thanks in advance for fixing that issue, ; Romain. ### Reproducer. ```C++; #include ""TFileMerger.h""; #include ""TSystem.h""; #include ""TUUID.h""; #include ""TFile.h""; #include ""TH1F.h"". #include <iostream>; #include <string> . // Function defined after the main function ; void createFileWithHists(const std::string &fileName);. int main(){. // Choose the number of the test; // 0 or 1 ; int numTest = 0;. createFileWithHists(""myFileWithHists.root"");. TFileMerger fileMerger(false);; fileMerger.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13359:1667,avoid,avoid,1667,https://root.cern,https://github.com/root-project/root/issues/13359,1,['avoid'],['avoid']
Safety,"pyROOT uses special thread for events processing, where `gSystem->ProcessEvents()` are called.; Both in script and interactive mode. Problem that thread id is not known from beginning and changing once when running python in script mode. Therefore special mode is now implemented, which simply uses `gSystem->ProcessEvents()` calls to allow processing; of web-windows communication. RWebWindow simply ""trust"" that ProcessEvents will not be called concurrently. Also improve timeout handling in THttpServer and in TWebCanvas. Both using special timers to process their events.; While it is not always possible `TurnOn/TurnOff` timers (it fails from inside timeout handler), just increase/decrease timeout interval, but always let run timer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13630:474,timeout,timeout,474,https://root.cern,https://github.com/root-project/root/pull/13630,3,['timeout'],['timeout']
Safety,r is null in /opt/root_src/geom/geom/src/TGeoTube.cxx:1843; /opt/root_src/geom/geom/src/TGeoTube.cxx:1857:31: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Control jumps to 'case 3:' at line 1846 in /opt/root_src/geom/geom/src/TGeoTube.cxx:1814; 2: Assuming 'id' is < 'ndiv' in /opt/root_src/geom/geom/src/TGeoTube.cxx:1855; 3: Loop condition is true. Entering loop body in /opt/root_src/geom/geom/src/TGeoTube.cxx:1855; 4: Value assigned to field 'fNodes' in /opt/root_src/geom/geom/src/TGeoTube.cxx:1856; 5: Called C++ object pointer is null in /opt/root_src/geom/geom/src/TGeoTube.cxx:1857; /opt/root_src/geom/geom/src/TGeoTube.cxx:2059:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2059; /opt/root_src/geom/geom/src/TGeoTube.cxx:2107:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2107; /opt/root_src/geom/geom/src/TGeoTube.cxx:2773:13: warning: Value stored to 's' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 's' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2773; /opt/root_src/geom/geom/src/TGeoTube.cxx:2909:13: warning: Value stored to 'sz1' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'sz1' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2909; /opt/root_src/geom/geom/src/TGeoTube.cxx:3015:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:30,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:74840,safe,safe,74840,https://root.cern,https://github.com/root-project/root/issues/7428,1,['safe'],['safe']
Safety,"r"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; In a `RooAddPdf`, the coefficients are tied to the normalization range. When passing a range name to the `RooAbsPdf::fitTo` call, this is visible because new integrals will be created over the fit range, to fix the definition of the coefficients. I will refer to these integrals as coefnorm integrals.; In ROOT 6.28, coefnorm integrals for ranged fits of `RooAddPdf`s were changed. This, however, added several integrals that with the old method would not be evaluated. In particular:; - the new implementation is unable to elide coefnorm integrals over ranges equivalents to the full range; - in the new implementation, to every coefnorm integral over the fit range correspond an integral over an empty named range. This is separate to the integral with no range, which is also done; - calling `addPdf.fixAddCoefRange(fit_range)` before the fit (a common solution if you wanted to avoid coefnorm integrals) removes the unnamed range coefnorm integrals, but not the named range ones. Note, however, that in all the test I performed these integral do not seem to affect fit results, which are the same before and after 6.28.; Instead, the problem is that those integrals may not be easy to compute: this issue was noticed because among the extra integrals was a complex numeric integral that had to be evaluated at each event in the dataset, was extremely slow, and in practice caused the fit to never converge. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; No extra integrals over unnamed ranges, passing the full range to fitTo does not add integrals, calling `fixAddCoefRange` removes all coefnorm integrals. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your cod",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12645:1340,avoid,avoid,1340,https://root.cern,https://github.com/root-project/root/issues/12645,1,['avoid'],['avoid']
Safety,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':; TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'; CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':; TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'; CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':; TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'; CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':; TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'; CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':; TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'; CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':; TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'; collect2: error: ld returned 1 exit status; io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed; make[3]: *** [lib/libRIO.so] Error 1; CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed; make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2; CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed; make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2; Makefile:5971: recipe for target 'RIO' failed; make: *** [RIO] Error 2; ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4561:3436,safe,safest,3436,https://root.cern,https://github.com/root-project/root/pull/4561,1,['safe'],['safest']
Safety,"rc/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411; #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182; #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:195; #6 0x00007facdfe8f519 in TUnixSystem::DispatchSignals(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3644; #7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407; #8 0x00007facdfe8f474 in sighandler(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3620; #9 <signal handler called>; #10 0x00007facdea2e4f5 in raise () from /lib64/libc.so.6; #11 0x00007facdea2fcd5 in abort () from /lib64/libc.so.6; #12 0x00007facdea2766e in __assert_fail_base () from /lib64/libc.so.6; #13 0x00007facdea27730 in __assert_fail () from /lib64/libc.so.6; #14 0x00007facd7a7438f in llvm::isa_impl_cl<clang::UsingDecl, clang::Decl const*>::doit(clang::Decl const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106; #15 0x00007facd7a74211 in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const*, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:133; #16 0x00007facd7a7407a in llvm::isa_impl_wrap<clang::UsingDecl, clang::Decl const* const, clang::Decl const*>::doit(clang::Decl const* const&) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:124; #17 0x00007facd7a73d65 in bool llvm::isa<clang::UsingDecl, clang::Decl const*>(clang::Decl const* const",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6359:2361,abort,abort,2361,https://root.cern,https://github.com/root-project/root/issues/6359,1,['abort'],['abort']
Safety,recovering cmake option descriptions when forcing values,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2056:0,recover,recovering,0,https://root.cern,https://github.com/root-project/root/pull/2056,1,['recover'],['recovering']
Safety,ring its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2059; /opt/root_src/geom/geom/src/TGeoTube.cxx:2107:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2107; /opt/root_src/geom/geom/src/TGeoTube.cxx:2773:13: warning: Value stored to 's' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 's' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2773; /opt/root_src/geom/geom/src/TGeoTube.cxx:2909:13: warning: Value stored to 'sz1' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'sz1' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:2909; /opt/root_src/geom/geom/src/TGeoTube.cxx:3015:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTube.cxx:3015; /opt/root_src/geom/geom/src/TGeoVolume.cxx:2899:7: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Assuming field 'fNodes' is null in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2876; 2: Taking false branch in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2876; 3: Assuming field 'fFinder' is null in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2880; 4: Taking false branch in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2880; 5: Assuming 'ncells' is not equal to 0 in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2885; 6: Left side of '||' is false in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2885; 7: Assuming the condition is false in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2885; 8: Taking false branch in /opt/root_src/geom/geom/src/TGeoVolume.cxx:2885; 9: Taking false branch i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:75660,safe,safe,75660,https://root.cern,https://github.com/root-project/root/issues/7428,1,['safe'],['safe']
Safety,"root.cern marked as ""unsafe"" by Google",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6539:21,unsafe,unsafe,21,https://root.cern,https://github.com/root-project/root/issues/6539,1,['unsafe'],['unsafe']
Safety,"rt; terminate called after throwing an instance of '. terminate called after throwing an instance of 'std::length_errorstd::length_error'. '; what(): what(): vector::_M_fill_insert; vector::_M_fill_insert; terminate called after throwing an instance of 'terminate called after throwing an instance of 'std::length_error'; terminate called after throwing an instance of 'std::length_error'; terminate called after throwing an instance of 'terminate called after throwing an instance of 'std::length_errorstd::length_errorstd::length_error'; what(): vector::_M_fill_insert; what(): vector::_M_fill_insert; '; '; what(): vector::_M_fill_insert what(): ; vector::_M_fill_insert; what(): vector::_M_fill_insert; terminate called after throwing an instance of 'std::length_error'; what(): vector::_M_fill_insert; terminate called after throwing an instance of 'std::length_error'; what(): vector::_M_fill_insert; terminate called after throwing an instance of 'std::length_error'; what(): vector::_M_fill_insert; terminate called after throwing an instance of 'std::length_error'; terminate called after throwing an instance of ' what(): vector::_M_fill_insert; std::length_error'; terminate called after throwing an instance of 'std::length_error what(): terminate called after throwing an instance of ''; terminate called after throwing an instance of 'vector::_M_fill_insertstd::length_error; '; std::length_error'; what(): vector::_M_fill_insert; what(): vector::_M_fill_insert; what(): vector::_M_fill_insert; RooRealMPFE::evaluate(nll_exp_expData_55d734b4c5e0_MPFE0) ERROR: unexpected message from server process: 8; ```. At the same time, either setting `BatchMode(0)` or reducing the number of requested CPU cores allows to avoid this misbehavior. I have also encountered a case (with a complex simultanous fit) where the `BatchMode(1)` alone was leading to this terminate even without any NumCPU request. . I believe this can be handled by RooFit in a more careful manner to avoid such terminates.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9406:3193,avoid,avoid,3193,https://root.cern,https://github.com/root-project/root/issues/9406,2,['avoid'],['avoid']
Safety,"rts of errors. Consider the following example code:. ```Python; from ROOT import RooArgList,RooArgSet,RooRealVar,TMatrixDSym,RooMultiVarGaussian,RooFit,RooWorkspace,RooStats,RooExtendPdf; ; allvars = []; ; xvals = RooArgList(); variables = RooArgSet(); muvals = RooArgList(); ; for i in range(0,3):; mu = RooRealVar(""mu_{:d}"".format(i),""mu_{:d}"".format(i),1.,-10,10); muvals.add(mu); x = RooRealVar(""x_{:d}"".format(i),""x_{:d}"".format(i),1.); xvals.add(x); variables.add(x); ; # side problem: unless these two lines are executed, the python garbage collector deletes mu and x; # causing a segfault in the construction of the RooMultiVarGaussian; allvars.append(mu); allvars.append(x); ; covmat = TMatrixDSym(3); covmat[0][0] = 1.; covmat[1][1] = 2.; covmat[2][2] = 3.; covmat[0][1] = 0.2; covmat[1][0] = 0.2; covmat[1][2] = 0.6; covmat[2][1] = 0.6; covmat[2][0] = 0.3; covmat[0][2] = 0.3; ; nevents = 1000.; mvg = RooMultiVarGaussian(""mvg"",""mvg"",xvals,muvals,covmat); allvars.append(mvg); ; ws = RooWorkspace(""ws""); ws.Import(mvg); mc = RooStats.ModelConfig(""model"",""model"",ws); mc.SetObservables(xvals); mc.SetParametersOfInterest(muvals); mc.SetPdf(mvg.GetName()); ; # main problem: AsymptoticCalculator doesn't accept RooMultiVarGaussian; data = RooStats.AsymptoticCalculator.MakeAsimovData(mc,muvals,RooArgSet()); ```; ; Also, wrapping the Multivariate Gaussian in `RooExtendPdf` doesn't help either, as this results in lots of warnings saying `WARNING::Detected a bin with zero expected events- skip it` - probably that warning should only be emitted once.; Also, the resulting asimov dataset has 0 events. norm = RooRealVar(""norm"",""norm"",1000); extmvg = RooExtendPdf(""extPdf"",""extPdf"",mvg,norm); ws.Import(extmvg,RooFit.RecycleConflictNodes()); mc_cnt = RooStats.ModelConfig(""countingModel"",""countingModel"",ws); mc_cnt.SetObservables(xvals); mc_cnt.SetParametersOfInterest(muvals); mc_cnt.SetPdf(extmvg.GetName()); ; data = RooStats.AsymptoticCalculator.MakeAsimovData(mc_cnt,muvals,RooArgSet())",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7967:1600,Detect,Detected,1600,https://root.cern,https://github.com/root-project/root/issues/7967,1,['Detect'],['Detected']
Safety,"running rootdrawtree without arguments leads to a crash; ```; [user@host]$ rootdrawtree ; /usr/include/c++/8/bits/stl_vector.h:932: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::reference = std::__cxx11::basic_string<char>&; std::vector<_Tp, _Alloc>::size_type = long unsigned int]: Assertion '__builtin_expect(__n < this->size(), true)' failed.; *** Break *** abort; ```; root 6.22.08 from EPEL on CentOS8 x86_64 . Sorry if that is a duplicate. Best regards,. Andrii",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8778:557,abort,abort,557,https://root.cern,https://github.com/root-project/root/issues/8778,1,['abort'],['abort']
Safety,"ry::TContext ctxt(nullptr);; try {; // recursive call to check filters and conditionally execute actions; while (r.Next()) {; diff --git a/tree/treeplayer/src/TTreeProcessorMT.cxx b/tree/treeplayer/src/TTreeProcessorMT.cxx; index ad0100e377..f29a67b65b 100644; --- a/tree/treeplayer/src/TTreeProcessorMT.cxx; +++ b/tree/treeplayer/src/TTreeProcessorMT.cxx; @@ -492,7 +492,8 @@ void TTreeProcessorMT::Process(std::function<void(TTreeReader &)> func); const auto &clusters = clustersAndEntries.first[0];; const auto &entries = clustersAndEntries.second[0];; auto processCluster = [&](const EntryRange &c) {; - auto r = fTreeView->GetTreeReader(c.first, c.second, treeNames, fileNames, fFriendInfo, fEntryList, {entries});; + gDirectory = nullptr; // TDirectory::TContext ctxt(nullptr);; + auto r = fTreeView->GetTreeReader(c.first, c.second, treeNames, fileNames, fFriendInfo, fEntryList, {entries});; func(*r);; };; fPool.Foreach(processCluster, clusters);; ```; Some might require some redesign:; ```; // Avoid spin lock inside GetThisSlotNumber just to get a thread local value ... but is this value; // really the same for the life of the thread ... and if so why is the next bottleneck then in: ROOT::Internal::RSlotStack::ReturnSlot; diff --git a/core/thread/inc/ROOT/TThreadedObject.hxx b/core/thread/inc/ROOT/TThreadedObject.hxx; index b3d73228e3..cff216e67f 100644; --- a/core/thread/inc/ROOT/TThreadedObject.hxx; +++ b/core/thread/inc/ROOT/TThreadedObject.hxx; @@ -279,7 +279,8 @@ namespace ROOT {; /// ~~~; std::shared_ptr<T> Get(); {; - return GetAtSlot(GetThisSlotNumber());; + static thread_local unsigned thisSlotNumber = GetThisSlotNumber();; + return GetAtSlot(thisSlotNumber);; }; ; /// Access the wrapped object and allow to call its methods.; ```; The next bottleneck after that might be:; ```; #5 0x00007ffff01a8c69 in std::unique_lock<std::mutex>::unique_lock (this=0x7ffedfffd910, __m=...) at /usr/include/c++/11/bits/unique_lock.h:69; #6 0x00007ffff01ca1e9 in TClingClassInfo::Ge",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12761:3405,Avoid,Avoid,3405,https://root.cern,https://github.com/root-project/root/issues/12761,1,['Avoid'],['Avoid']
Safety,"s);; 	; 	// background used in model; 	RooRealVar fitargpar(""shape"", ""fit argus shape parameter"", -6.5, -8, -6);; 	RooRealVar fitpower(""power"", ""fit argus power parameter"", 0.5, 0, 1);; 	RooArgusBG fitbkg(""fitbkg"", ""Fit Background ARGUS"", x, RooConst(m0), fitargpar, fitpower);; 	RooRealVar fitnsig(""nsig"", ""signal number"", 0.6 * nevents, 0, 1.2 * nevents);; 	RooRealVar fitnbg(""nbg"", ""bg number"", 0.4 * nevents, 0, 1.2 * nevents);. 	// fitting model; 	RooAddPdf model(""model"", ""BW+a fitted"", RooArgList(fitsig, fitbkg), RooArgList(fitnsig, fitnbg));. 	RooMCStudy* mcstudy =; 		new RooMCStudy(mcdist, x, FitModel(model), Binned(kFALSE), Silence(), Extended(kFALSE),; 			FitOptions(Extended(kFALSE), PrintEvalErrors(-1), Save(kTRUE)));. 	RooDLLSignificanceMCSModule sigModule(""nsig"", 0);; 	mcstudy->addModule(sigModule);. 	mcstudy->generateAndFit(100, nevents, kTRUE);. 	std::cout << mcstudy->fitParDataSet() << std::endl;; }; ```. which results in . ```; [#0] ERROR:InputArguments -- RooDataSet::merge(fitParData_model_distribution) ERROR: datasets have different size; RooDataSet::fitParData_model_distribution[#mean_{gauss},#sigma_{gauss},nbg,nsig,power,shape,NLL,ngen,#mean_{gauss}err,#mean_{gauss}pull,#sigma_{gauss}err,#sigma_{gauss}pull,nbgerr,nbgpull,nsigerr,nsigpull,powererr,powerpull,shapeerr,shapepull] = 84 entries; ```. ### Setup; ROOT 6.22/02; WSL v2 with Ubuntu 20.04 ; Binay download (built for linuxx8664gcc). ### Additional context; RooDLLSignificanceMCSModule::finalizeRun() states that ` If a RooDataSet is returned, it must have a length equal to the number of toy experiments performed and will merged with the fitpar dataset of RooMCStudy. `, however that is not true.; If some of the toy experiments performed did not converge, the RooMCStudy dataset size is lower than the number of experiments. At the same time, there is no way (that i could find) to access the fit result status of current run from RooAbsMCStudyModule, making it hard to consistently avoid the merge error",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6949:3801,avoid,avoid,3801,https://root.cern,https://github.com/root-project/root/issues/6949,1,['avoid'],['avoid']
Safety,"s, ROOT complains as above. If the dot is _not_ at the; start of a path component (e.g., `LIBDIR=foo.libs`), then all is; fine. . So it seems that somewhere deep in the ROOT code, there is some; assumption about a dot (`.`) as the leading character of a; sub-directory name which shouldn't be there. As far as I can tell,; the dot makes the code think that the library loaded is the ROOT; executable (`<ROOTSYS>/bin/root.exe`) rather than the actual shared; library. The reason seems to be that, because of some bad stripping; of path components, the shared library isn't found by Cling and then; the binary image falls back to the executable binary image. . ## Why this is problematic . Many build tools (e.g., Autotools) uses temporary directories that; start with a dot (`.`), including for building examples and tests. The; current behaviour of ROOT prevents building production level packages; with these tools that has rigorous test suites and rich examples. . More than that, ROOT should not assume _anything_ given a path _name_.; Rather, it should use system tools to detect if a given path is a; directory, a file, or what not. File and directory names are; completely volatile and proper tools should be used to deduct what it; is the code is dealing with. ## Additional tests . Sub-directory with dot in name . 	$ make clean ; 	$ make test LIBDIR=foo.libs ; 	...; 	LD_LIBRARY_PATH=foo.libs:<ROOTSYS>/lib root -l -b -q Test.C. 	Processing Test.C...; 	this is a Foo; 	hello from a Foo; 	; Sub-directory with leading underscore . 	$ make clean ; 	$ make test LIBDIR=_libs; 	...; 	LD_LIBRARY_PATH=_libs:<ROOTSYS>/lib root -l -b -q Test.C. 	Processing Test.C...; 	this is a Foo; 	hello from a Foo; 	; Current directory . 	$ make clean ; 	$ make test LIBDIR=. ; 	...; 	LD_LIBRARY_PATH=.:<ROOTSYS>/lib root -l -b -q Test.C. 	Processing Test.C...; 	this is a Foo; 	hello from a Foo. [root-library-load-test.tar.gz](https://github.com/root-project/root/files/8843058/root-library-load-test.tar.gz)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10704:3425,detect,detect,3425,https://root.cern,https://github.com/root-project/root/issues/10704,1,['detect'],['detect']
Safety,"s://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; Creating a branch in `TTree` with type `std::vector<A>` raises an internal error in ROOT, when class `A` inherits from a class that uses the old I/O system. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; Branch should be created successfully (I don't know if this behavior is supposed to be supported) or ROOT should abort with a more descriptive error message. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; Compile and run the following macro with `root -l -b -q T.C+`:; ```C++; #include <vector>; #include ""TTree.h"". #pragma link C++ class A;; #pragma link C++ class B+;; #pragma link C++ class std::vector<B>+;. struct A {; int x;; ClassDef(A, 1);; };; ClassImp(A);. struct B : A {; int y;; ClassDef(B, 1);; };; ClassImp(B);. void T() {; TTree* tree = new TTree(""T"", ""T"");; std::vector<B> bvec;; tree->Branch(""B"", &bvec);; }; ```; Macro aborts with the error: ; ```Fatal in <TBranchElement::InitializeOffsets>: Could not find the real data member 'B' when constructing the branch 'B' [Likely an internal error, please report to the developers].```. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; 1. ROOT version: 6.22.08 (built myself), 6.26.00 (binary download); 2. Operating System: Ubuntu 18.04. ### Additional context; <!--; Add any other context about the problem here.; -->; None.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10240:1587,abort,aborts,1587,https://root.cern,https://github.com/root-project/root/issues/10240,1,['abort'],['aborts']
Safety,"sable the rcanvas/rbox.py test which is failing with the following errors:; ```; Start 993: tutorial-rcanvas-rbox-py. 993: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python39-32/python.exe^C:/Users/bellenot/git/master/tutorials/launcher.py^C:/Users/bellenot/git/master/tutorials/rcanvas/rbox.py"" ""-DSYS=C:/Users/bellenot/build/release"" ""-DENV=ROOTSYS=C:/Users/bellenot/build/release#PYTHONPATH=C:/Users/bellenot/build/release/bin#PYTHIA8DATA=C:/Users/bellenot/libs/pythia8/8.3.03/share/Pythia8/xmldoc"" ""-P"" ""C:/Users/bellenot/build/release/RootTestDriver.cmake""; 993: Environment variables:; 993: ROOT_HIST=0; 993: Test timeout computed to be: 1500; 993: input_line_35:10:7: warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]; 993: ((const shared_ptr<ROOT::Experimental::RCanvas>*)obj)->operator-><ROOT::Experimental::RCanvas, 0>();; 993: ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; 993: input_line_39:10:7: warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]; 993: ((const shared_ptr<ROOT::Experimental::RBox>*)obj)->operator-><ROOT::Experimental::RBox, 0>();; 993: ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; 993: Traceback (most recent call last):; 993: File ""C:\Users\bellenot\git\master\tutorials\launcher.py"", line 34, in <module>; 993: spec.loader.exec_module(module); 993: File ""<frozen importlib._bootstrap_external>"", line 850, in exec_module; 993: File ""<frozen importlib._bootstrap>"", line 228, in _call_with_frames_removed; 993: File ""C:/Users/bellenot/git/master/tutorials/rcanvas/rbox.py"", line 24, in <module>; 993: box1.border.color = RColor.kBlue; 993: AttributeError: <class cppyy.gbl.ROOT.Experimental.RColor at 0x12092B98> has no attribute 'kBlue'. Full details:; 993: attribute access requires an instance; 993: 'ROOT::Experimental::RColor::kBlue' is not a known C",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9035:642,timeout,timeout,642,https://root.cern,https://github.com/root-project/root/pull/9035,1,['timeout'],['timeout']
Safety,"see https://sft.its.cern.ch/jira/browse/ROOT-10300. If sub-class of TObject uses `=default` specifier for default constructor, all members (including from TObject) are initialized. By this special logic for TObject::kIsOnHeap bit is corrupted. The only solution for now - avoid such `= default` specifier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4320:272,avoid,avoid,272,https://root.cern,https://github.com/root-project/root/pull/4320,1,['avoid'],['avoid']
Safety,"self. [This patch has now been included in libzmq proper](https://github.com/zeromq/libzmq/pull/4255). Another blocking review comment was that libzmq symbols must not be allowed to be exported through our libraries. [This has been solved in theory, and in practice is pending another PR to libzmq](https://github.com/zeromq/libzmq/pull/4266). Having fixed these two blockers, we should now be able to continue. To recap:. > In this PR, we introduce two packages: RooFitZMQ and RooFit::MultiProcess. It also adds two builtins for ZeroMQ to ease dependency management: libzmq and cppzmq. The builtin for libzmq is especially necessary at this point because it has recently gained a necessary feature that has not been released yet.; > ; > RooFit::MultiProcess is a task-based parallelization framework.; > ; > It uses forked processes for parallelization, as opposed to threads. We chose this approach because A) the existing RooRealMPFE parallelization framework already made use of forks as well, so we had something to build on and B) it was at the time deemed infeasible to check the entire RooFit code for thread-safety. Moreover, we use MultiProcess to parallelize gradients -- i.e. the tasks to be executed in parallel are partial derivatives -- and these are sufficiently large tasks that communication in between tasks is not a big concern in the big fits that we aimed to parallelize.; > ; > The communication between processes is done using ZeroMQ. The ZeroMQ dependency is wrapped in convenience classes contributed by @roelaaij which here are packaged as RooFitZMQ. Will un-draft the PR once the following is done (based on previous review comments by @guitargeek @hageboeck @amadio @lmoneta and also some other things from myself):; - [x] includes: correct order (matching header, RooFit, ROOT, std) and ROOT includes in quotation marks; - [x] fix ZMQ deprecation warnings; - [x] refactor member names: underscore suffix; - [x] document important things with doxygen; - [x] remove comment",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9078:1320,safe,safety,1320,https://root.cern,https://github.com/root-project/root/pull/9078,1,['safe'],['safety']
Safety,"sor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::RNNDescriptors_t &, TMVA::DNN::TCudnn<AFloat>::RNNWorkspace_t &) [with AFloat=Float_t]"" at line 43 of /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn.cu. /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn/RecurrentPropagation.cu(571): error: identifier ""cudnnRNNBackwardWeights"" is undefined; status = cudnnRNNBackwardWeights(cudnnHandle, rnnDesc, seqLength, desc.xDesc.data(), x.GetDataPointer(),; ^; detected during instantiation of ""void TMVA::DNN::TCudnn<AFloat>::RNNBackward(const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::RNNDescriptors_t &, TMVA::DNN::TCudnn<AFloat>::RNNWorkspace_t &) [with AFloat=Float_t]"" at line 43 of /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn.cu. /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn/RecurrentPropagation.cu(500): error: identifier ""cudnnRNNForwardTraining"" is undefined; cudnnStatus_t status = cudnnRNNForwardTraining(; ^; detected during instantiation of ""void TMVA::DNN::TCudnn<AFloat>::RNNForward(const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloa",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15413:3000,detect,detected,3000,https://root.cern,https://github.com/root-project/root/issues/15413,1,['detect'],['detected']
Safety,"std::set was not good because it sorted libraries by alphabetical order; and didn't preserve LD_LIBRARY_PATH order information. We can use; std::vector instead. (Erasing rarely happens and doesn't cost so much). Path prefix like ""/home/yuka/modules/lib/"" costs memory, I; think it makes sense to avoid path duplication in sLibraries and make sPaths; vector for this prefix. With this patch; ```; Processing tutorials/hsimple.C...; hsimple : Real Time = 0.14 seconds Cpu Time = 0.14 seconds; (TFile *) 0x31eb0d0; Processing memory.C...; cpu time = 0.861813 seconds; sys time = 0.155326 seconds; res memory = 178.988 Mbytes; vir memory = 435.332 Mbytes; ```. w/o; ```; Processing tutorials/hsimple.C...; hsimple : Real Time = 0.21 seconds Cpu Time = 0.20 seconds; (TFile *) 0x30db6e0; Processing memory.C...; cpu time = 1.266833 seconds; sys time = 0.227562 seconds; res memory = 178.965 Mbytes; vir memory = 435.301 Mbytes; ```. Actually cpu time improved",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2137:296,avoid,avoid,296,https://root.cern,https://github.com/root-project/root/pull/2137,1,['avoid'],['avoid']
Safety,"t TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::RNNDescriptors_t &, TMVA::DNN::TCudnn<AFloat>::RNNWorkspace_t &) [with AFloat=Float_t]"" at line 43 of /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn.cu. /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn/RecurrentPropagation.cu(500): error: identifier ""cudnnRNNForwardTraining"" is undefined; cudnnStatus_t status = cudnnRNNForwardTraining(; ^; detected during instantiation of ""void TMVA::DNN::TCudnn<AFloat>::RNNForward(const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::RNNDescriptors_t &, TMVA::DNN::TCudnn<AFloat>::RNNWorkspace_t &, bool) [with AFloat=Double_t]"" at line 44 of /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn.cu. /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn/RecurrentPropagation.cu(513): error: identifier ""cudnnRNNForwardInference"" is undefined; cudnnStatus_t status = cudnnRNNForwardInference(; ^; detected during instantiation of ""void TMVA::DNN::TCudnn<AFloat>::RNNForward(const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::RNNDesc",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15413:4007,detect,detected,4007,https://root.cern,https://github.com/root-project/root/issues/15413,1,['detect'],['detected']
Safety,"t/swunsch/build/bin:/home/sftnight/swunsch/python/bin:/home/sftnight/.local/bin:/home/sftnight/bin:/usr/lib64/ccache:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin#PYTHONPATH=/home/sftnight/swunsch/build/lib:#LD_LIBRARY_PATH=/home/sftnight/swunsch/build/lib:/home/sftnight/swunsch/python/lib:"" ""-DCOPY=/home/sftnight/swunsch/root/roottest/python/basic/ArgumentPassingCompiled.C^/home/sftnight/swunsch/root/roottest/python/basic/ReturnValues.C^/home/sftnight/swunsch/root/roottest/python/basic/SimpleClass.C^/home/sftnight/swunsch/root/roottest/python/basic/ArgumentPassingInterpreted.C"" ""-P"" ""/home/sftnight/swunsch/build/RootTestDriver.cmake""; 1312: Environment variables: ; 1312: ROOT_HIST=0; 1312: Test timeout computed to be: 300; 1312: Info in <TUnixSystem::ACLiC>: creating shared library /home/sftnight/swunsch/build/roottest/python/basic/./ArgumentPassingCompiled_C.so; 1312: ; 1312: -- TEST COMMAND -- ; 1312: cd /home/sftnight/swunsch/build/roottest/python/basic; 1312: /usr/bin/timeout -s USR2 270s /home/sftnight/swunsch/python/bin/python3 /home/sftnight/swunsch/root/roottest/python/basic/PyROOT_basictests.py --fixcling; 1312: -- BEGIN TEST OUTPUT --; 1312: INTERNALERROR> Traceback (most recent call last):; 1312: INTERNALERROR> File ""/home/sftnight/swunsch/root/roottest/python/pytest/_pytest/main.py"", line 77, in wrap_session; 1312: INTERNALERROR> config.do_configure(); 1312: INTERNALERROR> File ""/home/sftnight/swunsch/root/roottest/python/pytest/_pytest/config.py"", line 608, in do_configure; 1312: INTERNALERROR> self.hook.pytest_configure(config=self); 1312: INTERNALERROR> File ""/home/sftnight/swunsch/root/roottest/python/pytest/_pytest/core.py"", line 377, in __call__; 1312: INTERNALERROR> return self._docall(methods, kwargs); 1312: INTERNALERROR> File ""/home/sftnight/swunsch/root/roottest/python/pytest/_pytest/core.py"", line 388, in _docall; 1312: INTERNALERROR> res = mc.execute(); 1312: INTERNALERROR> File ""/home/sftnight/swunsch/root/roottest/python/pytest/_pytes",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6597:2167,timeout,timeout,2167,https://root.cern,https://github.com/root-project/root/issues/6597,1,['timeout'],['timeout']
Safety,"t>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::RNNDescriptors_t &, TMVA::DNN::TCudnn<AFloat>::RNNWorkspace_t &, bool) [with AFloat=Float_t]"" at line 43 of /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn.cu. /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn/RecurrentPropagation.cu(545): error: identifier ""cudnnRNNBackwardData"" is undefined; cudnnStatus_t status = cudnnRNNBackwardData(; ^; detected during instantiation of ""void TMVA::DNN::TCudnn<AFloat>::RNNBackward(const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::RNNDescriptors_t &, TMVA::DNN::TCudnn<AFloat>::RNNWorkspace_t &) [with AFloat=Float_t]"" at line 43 of /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn.cu. /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn/RecurrentPropagation.cu(571): error: identifier ""cudnnRNNBackwardWeights"" is undefined; status = cudnnRNNBackwardWeights(cudnnHandle, rnnDesc, seqLength, desc.xDesc.data(), x.GetDataPointer(),; ^; detected during instantiation of ""void TMVA::DNN::TCudnn<AFloat>::RNNBackward(const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15413:1936,detect,detected,1936,https://root.cern,https://github.com/root-project/root/issues/15413,1,['detect'],['detected']
Safety,"t_src/proof/proof/src/TDataSetManager.cxx:1267; 32: Assuming 'newStagedFiles' is equal to 'flist' in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1268; 33: Taking false branch in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1268; 34: Assuming 'mss' is null in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1270; 35: Left side of '&&' is false in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1270; 36: 'stager' is null in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1271; 37: '?' condition is false in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1271; 38: Loop condition is false. Execution continues on line 1304 in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1280; 39: 'stager' is null in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1304; 40: expanded from macro 'SafeDelete' in /opt/root_src/core/foundation/inc/ROOT/RConfig.hxx:522; 41: Taking false branch in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1304; 42: expanded from macro 'SafeDelete' in /opt/root_src/core/foundation/inc/ROOT/RConfig.hxx:522; 43: 'getlistonly' is true in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1307; 44: Taking true branch in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1307; 45: Assuming 'dbg' is true in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1308; 46: Left side of '&&' is true in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1308; 47: Called C++ object pointer is null in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1308; /opt/root_src/proof/proof/src/TDataSetManager.cxx:1774:4: warning: Value stored to 'rc' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'rc' is never read in /opt/root_src/proof/proof/src/TDataSetManager.cxx:1774; /opt/root_src/proof/proof/src/TDataSetManagerFile.cxx:1553:12: warning: Although the value stored to 'rc' is used in the enclosing expression, the value is never actually read from 'rc' [clang-analyzer-deadcode.DeadStores]; 1: Although the value stored to 'rc' is use",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7534:8462,Safe,SafeDelete,8462,https://root.cern,https://github.com/root-project/root/issues/7534,1,['Safe'],['SafeDelete']
Safety,"taframe-df102_NanoAODDimuonAnalysis-py (Failed); 1205 - tutorial-dataframe-df104_HiggsToTwoPhotons-py (Failed); 1261 - tutorial-rcanvas-df104-py (Failed); 1564 - roottest-python-JupyROOT-importROOT_notebook (Failed); 1565 - roottest-python-JupyROOT-simpleCppMagic_notebook (Failed); 1566 - roottest-python-JupyROOT-thread_local_notebook (Failed); 1567 - roottest-python-JupyROOT-ROOT_kernel_notebook (Failed); 1568 - roottest-python-JupyROOT-tpython_notebook (Failed); 1664 - roottest-python-distrdf-backends-test_all (Failed); ```; The specific run I references only failed the `TMapFile` test (which sometimes fails, sometimes succeed). The set of failure types is as follow:; ```; Warning in <TMVA_CNN_Classification>: TMVA is not build with GPU or CPU multi-thread support. Cannot use TMVA Deep Learning for CNN; Running with nthreads = 4; [37;41;1m<FATAL> : Can't import __main__[0m; ***> abort program execution; ```; ```; Setup TMVA...; [37;41;1m<FATAL> : Can't import __main__[0m; ***> abort program execution; ```; ```; Generate PyTorch model...; Traceback (most recent call last):; File ""/github/home/ROOT-CI/build/tmva/pymva/test/generatePyTorchModelClassification.py"", line 1, in <module>; import torch; ModuleNotFoundError: No module named 'torch'; ```; ```; RDataFrame::Run: event loop was interrupted; Traceback (most recent call last):; File ""/github/home/ROOT-CI/src/tutorials/dataframe/df102_NanoAODDimuonAnalysis.py"", line 50, in <module>; h.SetTitle(""""); ^^^^^^^^^^; cppyy.gbl.std.bad_alloc: TH1D& ROOT::RDF::RResultPtr<TH1D>::operator*() =>; bad_alloc: std::bad_alloc; CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```; ```; Traceback (most recent call last):; File ""/github/home/ROOT-CI/src/tutorials/dataframe/df104_HiggsToTwoPhotons.py"", line 87, in <module>; ROOT.RDF.RunGraphs([hists[s] for s in [""ggH"", ""VBF"", ""data""]]); cppyy.gbl.std.bad_alloc: unsigned int ROOT::RDF::RunGraphs(vector<ROOT::RDF::RResultHandle>) =>; bad",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16242:2670,abort,abort,2670,https://root.cern,https://github.com/root-project/root/issues/16242,1,['abort'],['abort']
Safety,"tal::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ OK ] RNTuple.LargeFile1 (34858 ms); [ RUN ] RNTuple.LargeFile2; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Fatal: fWritePage[otherIdx].IsEmpty() violated at line 82 of `/builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RColumn.cxx'; aborting; Thread 6 (Thread 0xe26ffb40 (LWP 117258) ""ntuple_extended""):; #0 0xf7ef1559 in __kernel_vsyscall (); #1 0xf69239bb in syscall () from /lib/libc.so.6; #2 0xf7338c73 in tbb::internal::rml::private_worker::thread_routine(void*) () from /lib/libtbb.so.2; #3 0xf689f47d in start_thread () from /lib/libc.so.6; #4 0xf6927d6c in clone3 () from /lib/libc.so.6; Thread 5 (Thread 0xe2afeb40 (LWP 117257) ""ntuple_extended""):; #0 0xf7ef1559 in __kernel_vsyscall (); #1 0xf69239bb in syscall () from /lib/libc.so.6; #2 0xf7338c73 in tbb::internal::rml::private_worker::thread_routine(void*) () from /lib/libtbb.so.2; #3 0xf689f47d in start_thread () from /lib/libc.so.6; #4 0xf6927d6c in clone3 () from /lib/libc.so.6; Thread 4 (Thread 0xe2cffb40 (LWP 117256) ""ntuple_extended""):; #0 0xf7ef1559 in __kernel_vsyscall (); #1 0xf69239bb in syscall () from /lib/libc.so.6; #2 0xf7338c73 in tbb::internal::rml::private_worker::thread_routine(void*) () from /lib/libtbb.so.2; #3 0xf689f47d in start_thread () from /lib/libc.so.6; #4 0xf6927d6c in clone3 () from /lib/libc.so.6; Threa",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12427:7167,abort,aborting,7167,https://root.cern,https://github.com/root-project/root/issues/12427,1,['abort'],['aborting']
Safety,"tall precompiled ROOT 6.30.04, downloaded from root.cern, on RHEL8 or 9.; - Run `thisroot.sh` to set up the runtime environment; - Type rootn.exe; - Hard crash. Transcript of session on RHEL8:; ```; % source /apps/ROOT/6.30.04/bin/thisroot.sh; % root-config --version; 6.30.04; % root-config --features; cxx17 asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_davix builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xrootd builtin_xxhash builtin_zeromq builtin_zlib builtin_zstd clad dataframe davix fftw3 fitsio fortran gdml http imt mathmore mlp minuit2 mysql opengl pgsql proof pyroot roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shadowpw shared soversion sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore x11 xml xrootd; % which rootn.exe; /apps/ROOT/6.30.04/bin/rootn.exe; % rootn.exe; Fatal in <operator new>: with std::align_val_t is not implemented yet; aborting; ... longish stack trace ...; ```; This works without error with ROOT 6.26.14 and 6.28.12 on the exact same machine. Running plain `root` 6.30.04 also works, of course. Only `rootn.exe` seems affected. ### ROOT version. ```; ------------------------------------------------------------------; | Welcome to ROOT 6.30/04 https://root.cern |; | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jan 31 2024, 09:46:18 |; | From heads/master@tags/v6-30-04 |; | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-21) |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```. ### Installation method. pre-built binary, downloaded from root.cern. ### Operating system. Linux RHEL8 or 9. ### Additional context. Tried several different Linux hosts running RHEL8/CentOS 8, all with same result.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14767:1346,abort,aborting,1346,https://root.cern,https://github.com/root-project/root/issues/14767,1,['abort'],['aborting']
Safety,"ted during instantiation of ""void TMVA::DNN::TCudnn<AFloat>::RNNForward(const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::RNNDescriptors_t &, TMVA::DNN::TCudnn<AFloat>::RNNWorkspace_t &, bool) [with AFloat=Double_t]"" at line 44 of /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn.cu. /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn/RecurrentPropagation.cu(513): error: identifier ""cudnnRNNForwardInference"" is undefined; cudnnStatus_t status = cudnnRNNForwardInference(; ^; detected during instantiation of ""void TMVA::DNN::TCudnn<AFloat>::RNNForward(const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::RNNDescriptors_t &, TMVA::DNN::TCudnn<AFloat>::RNNWorkspace_t &, bool) [with AFloat=Double_t]"" at line 44 of /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn.cu. /build/root/src/root-6.30.06/tmva/tmva/src/DNN/Architectures/Cudnn/RecurrentPropagation.cu(545): error: identifier ""cudnnRNNBackwardData"" is undefined; cudnnStatus_t status = cudnnRNNBackwardData(; ^; detected during instantiation of ""void TMVA::DNN::TCudnn<AFloat>::RNNBackward(const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFloat>::Tensor_t &, const TMVA::DNN::TCudnn<AFlo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15413:4803,detect,detected,4803,https://root.cern,https://github.com/root-project/root/issues/15413,1,['detect'],['detected']
Safety,ter/buildtrees/root/src/57b00fa7ea-10a10c16cc/core/base/v7/inc -IE:/vcpkg_folders/new_master/buildtrees/root/src/57b00fa7ea-10a10c16cc/core/base/inc -IE:/vcpkg_folders/new_master/buildtrees/root/x64-windows-dbg/ginclude -IE:/vcpkg_folders/new_master/buildtrees/root/src/57b00fa7ea-10a10c16cc/io/io/v7/inc -IE:/vcpkg_folders/new_master/buildtrees/root/src/57b00fa7ea-10a10c16cc/io/io/inc -IE:/vcpkg_folders/new_master/buildtrees/root/src/57b00fa7ea-10a10c16cc/core/clib/res TBufferXML.h TKeyXML.h TXMLEngine.h TXMLFile.h TXMLPlayer.h TXMLSetup.h E:/vcpkg_folders/new_master/buildtrees/root/src/57b00fa7ea-10a10c16cc/io/xml/inc/LinkDef.h; #0 0x00007ffefe214d7b HandleAbort E:\vcpkg_folders\new_master\buildtrees\root\src\57b00fa7ea-10a10c16cc\interpreter\llvm\src\lib\Support\Windows\Signals.inc:408:0; #1 0x00007fff6c0690ed (C:\Windows\SYSTEM32\ucrtbased.dll+0xa90ed); #2 0x00007fff6c06ae49 (C:\Windows\SYSTEM32\ucrtbased.dll+0xaae49); #3 0x00007fff20c79818 TWinNTSystem::Abort(int) E:\vcpkg_folders\new_master\buildtrees\root\src\57b00fa7ea-10a10c16cc\core\winnt\src\TWinNTSystem.cxx:3902:0; #4 0x00007fff20c7897c TWinNTSystem::DispatchSignals(enum ESignals) E:\vcpkg_folders\new_master\buildtrees\root\src\57b00fa7ea-10a10c16cc\core\winnt\src\TWinNTSystem.cxx:1781:0; #5 0x00007fff20c81f52 `anonymous namespace'::SigHandler E:\vcpkg_folders\new_master\buildtrees\root\src\57b00fa7ea-10a10c16cc\core\winnt\src\TWinNTSystem.cxx:456:0; #6 0x00007fff20c81d8e `anonymous namespace'::sighandler E:\vcpkg_folders\new_master\buildtrees\root\src\57b00fa7ea-10a10c16cc\core\winnt\src\TWinNTSystem.cxx:398:0; #7 0x00007fff6c067ade (C:\Windows\SYSTEM32\ucrtbased.dll+0xa7ade); #8 0x00007ff6481b6f38 `__scrt_common_main_seh'::`1'::filt$0 D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl:304:0; #9 0x00007fffaa5bc96b (C:\Windows\SYSTEM32\VCRUNTIME140D.dll+0x1c96b); #10 0x00007fffb6e323df (C:\Windows\SYSTEM32\ntdll.dll+0xa23df); #11 0x00007fffb6de14a4 (C:\Windows\SYSTEM32\ntdll.dll+0x514a4); #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12738:13953,Abort,Abort,13953,https://root.cern,https://github.com/root-project/root/issues/12738,1,['Abort'],['Abort']
Safety,"test=OFF -Drpath=OFF -Druntime_cxxmodules=OFF -Dshadowpw=yes -Dspectrum=ON -Dsqlite=yes -Dssl=yes -Dtcmalloc=OFF -Dtest_distrdf_pyspark=OFF -Dtesting=no -Dtmva=yes -Dtmva-cpu=yes -Dtmva-gpu=no -Dtmva-pymva=yes -Dtmva-rmva=yes -Dunuran=yes -During=no -Dvc=yes -Dvdt=OFF -Dveccore=OFF -Dvecgeom=OFF -Dvmc=no -Dx11=yes -Dxml=yes -Dxrootd=yes -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=/var/tmp/portage/sci-physics/root-9999/work/root-9999_build/gentoo_toolchain.cmake /var/tmp/portage/sci-physics/root-9999/work/root-9999; loading initial cache file /var/tmp/portage/sci-physics/root-9999/work/root-9999_build/gentoo_common_config.cmake; -- The C compiler identification is GNU 10.3.0; -- The CXX compiler identification is GNU 10.3.0; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: /usr/lib/ccache/bin/x86_64-pc-linux-gnu-gcc - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/lib/ccache/bin/x86_64-pc-linux-gnu-g++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Git: /usr/bin/git (found version ""2.31.1"") ; -- Detected ROOT_VERSION 6.25.01; -- Looking for Python; -- Found Python3: /usr/bin/python3.8 (found version ""3.8.10"") found components: Interpreter Development NumPy Development.Module Development.Embed ; -- The Fortran compiler identification is GNU 10.3.0; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Check for working Fortran compiler: /usr/bin/x86_64-pc-linux-gnu-gfortran - skipped; -- Checking whether /usr/bin/x86_64-pc-linux-gnu-gfortran supports Fortran 90; -- Checking whether /usr/bin/x86_64-pc-linux-gnu-gfortran supports Fortran 90 - yes; -- Found GCC. Major version 10, minor version 3; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Performing Test",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8193:2703,Detect,Detecting,2703,https://root.cern,https://github.com/root-project/root/issues/8193,8,['Detect'],['Detecting']
Safety,the calling code in TFileMerger is not exception-safe and this ends up hiding the original exception under some bogus error. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15898:49,safe,safe,49,https://root.cern,https://github.com/root-project/root/pull/15898,1,['safe'],['safe']
Safety,"the goal of this commit is to avoid too many allocations/deallocations in two cases:; 1. sophisticated expressions manipulating RVec<T> instances: churn kicks in due to temporaries; 2. RDataFrame runs with Defines returning RVec<T>s which are saved within custom columns via a copy. For every event, the old value is deallocated and the new one allocated. This change implements a thread local stack of buffers in the RAdoptAllocator.; If the allocation is smaller than RAdoptAllocator<T>::fgBuffersSize, before allocating; a fresh region of memory through the stl allocator, a pop from the aforementioned stack is tried.; At deallocation time, the memory taken from the stak, is put back in the stack.; In some sense, this is an optimisation for short (defined by RAdoptAllocator<T>::fgBuffersSize) RVec<T>s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3467:30,avoid,avoid,30,https://root.cern,https://github.com/root-project/root/pull/3467,1,['avoid'],['avoid']
Safety,"the implementation of histo models has been simplified avoiding code duplication.; The creation of the shared_pointer containing the histogram has been moved to; the model classes, in order to simplify the TDFInterface.; Test coverage has been significantly increased.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1770:55,avoid,avoiding,55,https://root.cern,https://github.com/root-project/root/pull/1770,1,['avoid'],['avoiding']
Safety,"theMethod, TString methodTitle, TString theOption = """") =>; runtime_error: FATAL error; TMVA::MethodBase* TMVA::Factory::BookMethod(TMVA::DataLoader*, TMVA::Types::EMVA, TString, TString, TMVA::Types::EMVA, TString) =>; TypeError: takes at least 6 arguments (4 given); CMake Error at /builddir/build/BUILD/root-6.28.00/redhat-linux-build/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### tutorial-tmva-TMVA_RNN_Classification-py. TypeError: none of the 3 overloaded methods succeeded.; ~~~; 1272/1272 Test #1269: tutorial-tmva-TMVA_RNN_Classification-py ............................***Failed 1.39 sec; Warning in <TMVA_RNN_Classificaton>: Skip using Keras since tensorflow is not installed; Warning in <TMVA_RNN_Classification>: TMVA is not build with GPU or CPU multi-thread support. Cannot use TMVA Deep Learning for RNN; DataSetInfo : [dataset] : Added class ""Signal""; : Add Tree sgn of type Signal with 2000 events; DataSetInfo : [dataset] : Added class ""Background""; : Add Tree bkg of type Background with 2000 events; <FATAL> : Unknown method index in map: 0; ***> abort program execution; Running with nthreads = 25769803776; --- RNNClassification : Using input file: time_data_t10_d30.root; number of variables is 300; vars_time0[0]; [ --- ]; vars_time9[29]; prepared DATA LOADER ; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/tutorials/tmva/TMVA_RNN_Classification.py"", line 331, in <module>; factory.BookMethod(; File ""/builddir/build/BUILD/root-6.28.00/redhat-linux-build/lib/ROOT/_pythonization/_tmva/_factory.py"", line 61, in BookMethod; return self._BookMethod(*args, **kwargs); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; TypeError: none of the 3 overloaded methods succeeded. Full details:; TMVA::MethodBase* TMVA::Factory::BookMethod(TMVA::DataLoader* loader, TString theMethodName, TString methodTitle, TString theOption = """") =>; TypeError: could not convert argument 2; TMVA::MethodBase* TMVA::Factory::BookMethod(TMVA::DataLoader* loader, TMVA::",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12429:13092,abort,abort,13092,https://root.cern,https://github.com/root-project/root/issues/12429,1,['abort'],['abort']
Safety,therewith avoiding memory hogging because of the attached TTreeChaches. This code has been written by David Smith and minimally edited for its integration in root.; See sister PR in roottest: https://github.com/root-project/roottest/pull/1161. This PR fixes [ROOT-6286](https://its.cern.ch/jira/browse/ROOT-6286),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16198:10,avoid,avoiding,10,https://root.cern,https://github.com/root-project/root/pull/16198,1,['avoid'],['avoiding']
Safety,thread-safe gSystem list of timers,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8562:7,safe,safe,7,https://root.cern,https://github.com/root-project/root/pull/8562,1,['safe'],['safe']
Safety,threadsh1: Avoid heap-use-after-free.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10068:11,Avoid,Avoid,11,https://root.cern,https://github.com/root-project/root/pull/10068,1,['Avoid'],['Avoid']
Safety,to avoid an odd namespace to appear in the doc,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3145:3,avoid,avoid,3,https://root.cern,https://github.com/root-project/root/pull/3145,1,['avoid'],['avoid']
Safety,"to avoid excessive memory usage, which can lead to issues on machines with a low memory per core. - [v] tested changes locally; - [v] updated the docs (if necessary). Fixes #16252",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16262:3,avoid,avoid,3,https://root.cern,https://github.com/root-project/root/pull/16262,1,['avoid'],['avoid']
Safety,to avoid malformed names in the string passed to CPack for the creation of the binary archive.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15800:3,avoid,avoid,3,https://root.cern,https://github.com/root-project/root/pull/15800,1,['avoid'],['avoid']
Safety,to avoid warnings about unused variable. This is possible because in master c++17 is enforced.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13835:3,avoid,avoid,3,https://root.cern,https://github.com/root-project/root/pull/13835,1,['avoid'],['avoid']
Safety,to avoid warnings when building docu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15446:3,avoid,avoid,3,https://root.cern,https://github.com/root-project/root/pull/15446,1,['avoid'],['avoid']
Safety,"train a model with TMVA.; const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";; train(filename);. // Next, we load the model from the TMVA XML file.; RLegacyReader model(""TMVAClassification/weights/TMVAClassification_BDT.weights.xml"");. // In case you need a reminder of the names and order of the variables during; // training, you can ask the model for it.; auto variables = model.GetVariableNames();; std::cout << ""\nVariable names used during training: "" << variables << ""\n\n"";. // The model can now be applied in different scenarios:; // 1) Event-by-event inference; // 2) Batch inference on data of multiple events; // 3) Model inference as part of an RDataFrame graph. // 1) Event-by-event inference; // The event-by-event inference takes the values of the variables as a std::vector<float>.; // Note that the return value is as well a std::vector<float> since the reader; // is also capable to process models with multiple outputs.; auto prediction = model.Predict({0.5, 1.0, -0.2, 1.5});; std::cout << ""Single-event inference: "" << prediction << ""\n\n"";. // 2) Batch inference on data of multiple events; // For batch inference, the data needs to be structured as a matrix. For this; // purpose, TMVA makes use of the RTensor class. For convenience, we use RDataFrame; // and the AsTensor utility to make the read-out from the ROOT file.; ROOT::RDataFrame df(""TreeS"", filename);; auto df2 = df.Range(3); // Read only 10 events; auto x = AsTensor<float>(df2, variables);; std::cout << ""RTensor input for inference on data of multiple events:\n"" << x << ""\n\n"";. auto y = model.Predict(x);; std::cout << ""Prediction performed on multiple events: "" << y << ""\n\n"";. // 3) Perform inference as part of an RDataFrame graph; // We write a small lambda function that performs for us the inference on; // a dataframe to omit code duplication.; auto make_histo = [&](const std::string &treename) {; ROOT::RDataFrame df(treename, filename);; auto df2 = df.Define(""y"", Pred",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3321:1336,Predict,Predict,1336,https://root.cern,https://github.com/root-project/root/pull/3321,1,['Predict'],['Predict']
Safety,"ttp://root.cern.ch/files/tmva_class_example.root"";; train(filename);. // Next, we load the model from the TMVA XML file.; RLegacyReader model(""TMVAClassification/weights/TMVAClassification_BDT.weights.xml"");. // In case you need a reminder of the names and order of the variables during; // training, you can ask the model for it.; auto variables = model.GetVariableNames();; std::cout << ""\nVariable names used during training: "" << variables << ""\n\n"";. // The model can now be applied in different scenarios:; // 1) Event-by-event inference; // 2) Batch inference on data of multiple events; // 3) Model inference as part of an RDataFrame graph. // 1) Event-by-event inference; // The event-by-event inference takes the values of the variables as a std::vector<float>.; // Note that the return value is as well a std::vector<float> since the reader; // is also capable to process models with multiple outputs.; auto prediction = model.Predict({0.5, 1.0, -0.2, 1.5});; std::cout << ""Single-event inference: "" << prediction << ""\n\n"";. // 2) Batch inference on data of multiple events; // For batch inference, the data needs to be structured as a matrix. For this; // purpose, TMVA makes use of the RTensor class. For convenience, we use RDataFrame; // and the AsTensor utility to make the read-out from the ROOT file.; ROOT::RDataFrame df(""TreeS"", filename);; auto df2 = df.Range(3); // Read only 10 events; auto x = AsTensor<float>(df2, variables);; std::cout << ""RTensor input for inference on data of multiple events:\n"" << x << ""\n\n"";. auto y = model.Predict(x);; std::cout << ""Prediction performed on multiple events: "" << y << ""\n\n"";. // 3) Perform inference as part of an RDataFrame graph; // We write a small lambda function that performs for us the inference on; // a dataframe to omit code duplication.; auto make_histo = [&](const std::string &treename) {; ROOT::RDataFrame df(treename, filename);; auto df2 = df.Define(""y"", Predict<4, float>(model), variables);; return df2.Histo1D({""""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3321:1412,predict,prediction,1412,https://root.cern,https://github.com/root-project/root/pull/3321,1,['predict'],['prediction']
Safety,ty checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1678; /opt/root_src/builtins/lz4/lz4.c:1678:9: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Assuming the condition is false in /opt/root_src/builtins/lz4/lz4.c:1673; 2: Taking false branch in /opt/root_src/builtins/lz4/lz4.c:1673; 3: Assuming 'dictSize' is <= field 'dictSize' in /opt/root_src/builtins/lz4/lz4.c:1674; 4: Taking false branch in /opt/root_src/builtins/lz4/lz4.c:1674; 5: Assuming 'safeBuffer' is equal to NULL in /opt/root_src/builtins/lz4/lz4.c:1676; 6: Taking true branch in /opt/root_src/builtins/lz4/lz4.c:1676; 7: Assuming 'dictSize' is > 0 in /opt/root_src/builtins/lz4/lz4.c:1677; 8: Taking true branch in /opt/root_src/builtins/lz4/lz4.c:1677; 9: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/builtins/lz4/lz4.c:1678; /opt/root_src/builtins/lz4/lz4.c:1833:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'me,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:15352,safe,safeBuffer,15352,https://root.cern,https://github.com/root-project/root/issues/7411,1,['safe'],['safeBuffer']
Safety,"unction not viable: no known conversion from 'integral_constant<...>' to 'integral_constant<...>' for 2nd argument; _M_move_assign(vector&& __x, std::true_type) noexcept; ^; /usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_vector.h:1688:7: note: candidate function not viable: no known conversion from 'integral_constant<[...], true aka true>' to 'integral_constant<[...], false>' for 2nd argument; _M_move_assign(vector&& __x, std::false_type); ^; /usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_vector.h:601:2: error: no matching member function for call to '_M_move_assign'; _M_move_assign(std::move(__x), __bool_constant<__move_storage>());; ^~~~~~~~~~~~~~; /usr/include/Pythia8/HelicityBasics.h:240:9: note: in instantiation of member function 'std::vector<std::vector<std::complex<double>, std::allocator<std::complex<double> > >, std::allocator<std::vector<std::complex<double>, std::allocator<std::complex<double> > > > >::operator=' requested here; rho = vector< vector<complex> >(spinStates(),; ^; /usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_vector.h:1677:7: note: candidate function not viable: no known conversion from 'integral_constant<...>' to 'integral_constant<...>' for 2nd argument; _M_move_assign(vector&& __x, std::true_type) noexcept; ^; /usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_vector.h:1688:7: note: candidate function not viable: no known conversion from 'integral_constant<[...], true aka true>' to 'integral_constant<[...], false>' for 2nd argument; _M_move_assign(vector&& __x, std::false_type); ^; Error: /home/jhahnfel/ROOT/build/bin/rootcling: compilation failure (/home/jhahnfel/ROOT/build/lib/libEGPythia898309100d9_dictUmbrella.h); ```. ### Expected behavior; The build should succeed. ### To Reproduce; Configure current `master` with `cmake -DCMAKE_CXX_STANDARD=14` (or on a platform where this is detected as the default) and then switch to `CMAKE_CXX_STANDARD=17`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8642:10091,detect,detected,10091,https://root.cern,https://github.com/root-project/root/issues/8642,1,['detect'],['detected']
Safety,v6-22: Fix issue #6670. Avoid infinite recursion from TClass::InheritsFrom.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6732:24,Avoid,Avoid,24,https://root.cern,https://github.com/root-project/root/pull/6732,1,['Avoid'],['Avoid']
Safety,v6-26: Avoid TPad::fFrame double delete when read from file,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11849:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/11849,1,['Avoid'],['Avoid']
Safety,v6-28 Core: Avoid (indirect) memory hoarding in TPluginManager.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14375:12,Avoid,Avoid,12,https://root.cern,https://github.com/root-project/root/pull/14375,1,['Avoid'],['Avoid']
Safety,v6-30 Core: Avoid (indirect) memory hoarding in TPluginManager.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14374:12,Avoid,Avoid,12,https://root.cern,https://github.com/root-project/root/pull/14374,1,['Avoid'],['Avoid']
Safety,v616 Avoid crash in IO and Prevent split in presence of Streamer free function,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4194:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/4194,1,['Avoid'],['Avoid']
Safety,v618 Avoid crash in IO and Prevent split in presence of Streamer free function,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4193:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/4193,1,['Avoid'],['Avoid']
Safety,v620: Avoid streaming a copy of the TPaveStats parent during the TH1 cloning process.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5635:6,Avoid,Avoid,6,https://root.cern,https://github.com/root-project/root/pull/5635,1,['Avoid'],['Avoid']
Safety,v620: Avoid template instantiation during tear down.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5463:6,Avoid,Avoid,6,https://root.cern,https://github.com/root-project/root/pull/5463,1,['Avoid'],['Avoid']
Safety,"vc++ -DCMAKE_C_COMPILER=nvc -DCMAKE_CXX_FLAGS=-std=c++17 -Dx11=OFF -Dtbb=OFF -Dopengl=OFF -Dgviz=OFF -Dimt=OFF -Ddavix=OFF -Dvdt=OFF -Dxrootd=OFF -Dwebgui=OFF -Dsqlite=OFF -Dssl=OFF -Dmysql=OFF -Doracle=OFF -Dpgsql=OFF -Ddavix=OFF -Dgfal=OFF -Dimt=OFF -Dbuiltin_llvm=OFF -DC_SUPPORTS_FPIC=true -DCXX_SUPPORTS_FPIC=true -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"" -DCMAKE_INSTALL_PREFIX=/opt/root/v6-30-03_nvhpc239 ../src; ```. However this results in the following error:; ```; rootcling_stage1: /bld6/root/bld_nvhpc/interpreter/llvm-project/clang/include/clang/Driver/Options.inc:7564: lambda []()->auto::operator()()->auto: Assertion `ValuesWereAdded && ""Couldn't add values to OptTable!""' failed.; #0 0x000000000cb9e5b1 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0; #1 0x000000000cb9bf7e SignalHandler(int) Signals.cpp:0:0; #2 0x00007ffb0ce97630 __restore_rt sigaction.c:0:0; #3 0x00007ffb0a4f4387 raise (/lib64/libc.so.6+0x36387); #4 0x00007ffb0a4f5a78 abort (/lib64/libc.so.6+0x37a78); #5 0x00007ffb0a4ed1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6); #6 0x00007ffb0a4ed252 (/lib64/libc.so.6+0x2f252); #7 0x000000000628a2f0 clang::driver::getDriverOptTable()::'lambda'()::operator()() const /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:7569:1; #8 0x000000000628a22a clang::driver::getDriverOptTable() /bld6/root/src/interpreter/llvm-project/clang/lib/Driver/DriverOptions.cpp:43:1; #9 0x0000000004324c6c cling::CompilerOptions::Parse(int, char const* const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:152:1; #10 0x00000000043257e4 cling::InvocationOptions::InvocationOptions(int, char const* const*) /bld6/root/src/interpreter/cling/lib/Interpreter/InvocationOptions.cpp:265:1; #11 0x00000",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14250:1826,abort,abort,1826,https://root.cern,https://github.com/root-project/root/issues/14250,1,['abort'],['abort']
Safety,"ware Foundation, Inc.; License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>; This is free software: you are free to change and redistribute it.; There is NO WARRANTY, to the extent permitted by law.; Type ""show copying"" and ""show warranty"" for details.; This GDB was configured as ""x86_64-pc-linux-gnu"".; Type ""show configuration"" for configuration details.; For bug reporting instructions, please see:; <https://bugs.gentoo.org/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>. For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from bin/root.exe...; (gdb) break f; Function ""f"" not defined.; Make breakpoint pending on future shared library load? (y or [n]) y; Breakpoint 1 (f) pending.; (gdb) run; Starting program: /srv/root/build/bin/root.exe ; warning: File ""/srv/root/build/lib/libCore.so-gdb.py"" auto-loading has been declined by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; 	add-auto-load-safe-path /srv/root/build/lib/libCore.so-gdb.py; line to your configuration file ""/home/amadio/.config/gdb/gdbinit"".; To completely disable this security protection add; 	set auto-load safe-path /; line to your configuration file ""/home/amadio/.config/gdb/gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; 	info ""(gdb)Auto-loading safe path""; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/usr/lib64/libthread_db.so.1"".; [Detaching after vfork from child process 798483]; [Detaching after vfork from child process 800084]; [Detaching after vfork from child process 800087]; ------------------------------------------------------------------; | Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |; ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11882:1433,safe,safe-path,1433,https://root.cern,https://github.com/root-project/root/pull/11882,1,['safe'],['safe-path']
Safety,webgui: avoid compiler warnings when Qt5 and/or CEF are not used,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1964:8,avoid,avoid,8,https://root.cern,https://github.com/root-project/root/pull/1964,1,['avoid'],['avoid']
Safety,x(); python38!PyEval_GetFuncDesc(); python38!PyEval_EvalFrameDefault(); python38!PyEval_EvalCodeWithName(); python38!PyFunction_Vectorcall(); python38!PyEval_GetFuncDesc(); python38!PyEval_EvalFrameDefault(); python38!PyEval_EvalCodeWithName(); python38!PyFunction_Vectorcall(); python38!PyEval_GetFuncDesc(); python38!PyEval_EvalFrameDefault(); python38!PyObject_Call(); python38!PyFunction_Vectorcall(); python38!PyEval_GetFuncDesc(); python38!PyEval_EvalFrameDefault(); python38!PyObject_Call(); python38!PyFunction_Vectorcall(); python38!PyEval_GetFuncDesc(); python38!PyEval_EvalFrameDefault(); python38!PyObject_Call(); python38!PyFunction_Vectorcall(); python38!PyMethod_Self(); python38!PyVectorcall_Call(); python38!PyOS_SigintEvent(); python38!PyThread_init_thread(); ucrtbase!recalloc(); KERNEL32!BaseThreadInitThunk(); ntdll!RtlUserThreadStart(). ==========================================; ============= END STACKTRACE =============; ==========================================. *** Break *** abort. ==========================================; =============== STACKTRACE ===============; ==========================================. ================ Thread 0 ================; libcppyy_backend3_8!??; libCore!TWinNTSystem::DispatchSignals(); ucrtbase!raise(); ucrtbase!abort(); ucrtbase!get_wpgmptr(); ucrtbase!get_wpgmptr(); ucrtbase!wassert(); libCling!TClingValue::ToTypeAndValueString(); libCling!cling::Value::print(); libCling!TClingValue::ToTypeAndValueString(); libCling!TCling::LoadEnums(); libCore!TListOfEnums::Load(); libCore!TClass::GetListOfEnums(); libCling!TCling::InvalidateCachedDecl(); libCling!TCling::UpdateListsOnUnloaded(); libCling!TCling::UpdateListsOnUnloaded(); libCling!cling::runtime::internal::EvaluateDynamicExpression(); libCling!cling::runtime::internal::EvaluateDynamicExpression(); libCling!cling::Value::print(); libCling!TClingValue::ToTypeAndValueString(); libCling!TClingValue::ToTypeAndValueString(); libCling!TClingTypedefInfo::Init(); libCling!TCli,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14302:23573,abort,abort,23573,https://root.cern,https://github.com/root-project/root/issues/14302,1,['abort'],['abort']
Safety,"xx:3189; #9 0x00007ff4494a1b11 in TBranch::FillImpl (imtHelper=0x0, this=0x7ff42547e5f0) at /home/aliperf/aliperf_workspace/sw/SOURCES/ROOT/v6-24-02/v6-24-02/tree/tree/src/TBranch.cxx:923; #10 TBranch::FillImpl (this=this; entry=0x7ff42547e5f0, imtHelper=imtHelper; entry=0x0) at /home/aliperf/aliperf_workspace/sw/SOURCES/ROOT/v6-24-02/v6-24-02/tree/tree/src/TBranch.cxx:854; #11 0x00007ff4494ae36b in TBranchElement::FillImpl (this=0x7ff42547e5f0, imtHelper=0x0) at /home/aliperf/aliperf_workspace/sw/SOURCES/ROOT/v6-24-02/v6-24-02/tree/tree/src/TBranchElement.cxx:1265; #12 0x00007ff4494ae069 in TBranchElement::FillImpl (this=0x7ff425170850, imtHelper=0x0) at /home/aliperf/aliperf_workspace/sw/SOURCES/ROOT/v6-24-02/v6-24-02/tree/tree/src/TBranchElement.cxx:1290; #13 0x00007ff44f4faf89 in TBranch::Fill (this=0x7ff425170850) at /home/aliperf/aliperf_workspace/sw/slc7_x86-64/ROOT/v6-24-02-local5/include/TBranch.h:201; #14 o2::base::DetImpl<o2::trd::Detector>::mergeAndAdjustHits<std::vector<o2::trd::Hit, std::allocator<o2::trd::Hit> > > (this=this; entry=0x3e69680, brname=..., origin=..., target=..., trackoffsets=..., nprimaries=..., subevtsOrdered=...) at /home/aliperf/aliperf_workspace/sw/SOURCES/O2/dev/0/Detectors/Base/include/DetectorsBase/Detector.h:403; #15 0x00007ff44f4fb507 in o2::base::DetImpl<o2::trd::Detector>::mergeHitEntries (this=0x3e69680, origin=..., target=..., trackoffsets=..., nprimaries=..., subevtsOrdered=...) at /home/aliperf/aliperf_workspace/sw/SOURCES/O2/dev/0/Detectors/Base/include/DetectorsBase/Detector.h:422; #16 0x00000000004456e1 in o2::devices::O2HitMerger::mergeAndFlushData (this=0x162d640, eventID=<optimized out>) at /home/aliperf/aliperf_workspace/sw/SOURCES/O2/dev/0/run/O2HitMerger.h:745; #17 0x00007ff446ec9f10 in std::execute_native_thread_routine (__p=0x7ad9e10) at ../../../../../gcc/libstdc++-v3/src/c++11/thread.cc:80; #18 0x00007ff44e186ea5 in start_thread () from /lib64/libpthread.so.0; #19 0x00007ff44680796d in clone () from /lib64/l",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8931:3791,Detect,Detector,3791,https://root.cern,https://github.com/root-project/root/issues/8931,1,['Detect'],['Detector']
Safety,xx:999; 5: Called C++ object pointer is null in /opt/root_src/geom/geom/src/TGeoSphere.cxx:1000; /opt/root_src/geom/geom/src/TGeoSphere.cxx:1158:32: warning: Value stored to 'nbPnts' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'nbPnts' is never read in /opt/root_src/geom/geom/src/TGeoSphere.cxx:1158; /opt/root_src/geom/geom/src/TGeoSphere.cxx:1163:4: warning: Value stored to 'nbSegs' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'nbSegs' is never read in /opt/root_src/geom/geom/src/TGeoSphere.cxx:1163; /opt/root_src/geom/geom/src/TGeoSphere.cxx:1168:4: warning: Value stored to 'nbPols' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'nbPols' is never read in /opt/root_src/geom/geom/src/TGeoSphere.cxx:1168; /opt/root_src/geom/geom/src/TGeoSphere.cxx:1533:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoSphere.cxx:1533; /opt/root_src/geom/geom/src/TGeoTessellated.cxx:745:15: warning: Missing reference in range-for with non trivial type (std::__cxx11::basic_string<char>) [clazy-range-loop]; 1: const in /opt/root_src/geom/geom/src/TGeoTessellated.cxx:745; 2: & in /opt/root_src/geom/geom/src/TGeoTessellated.cxx:745; /opt/root_src/geom/geom/src/TGeoTorus.cxx:297:13: warning: Value stored to 'snext' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'snext' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:297; /opt/root_src/geom/geom/src/TGeoTorus.cxx:305:13: warning: Value stored to 'dphi' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'dphi' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:305; /opt/root_src/geom/geom/src/TGeoTorus.cxx:378:13: warning: Value stored to 'd,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:63783,safe,safe,63783,https://root.cern,https://github.com/root-project/root/issues/7428,1,['safe'],['safe']
Safety,"yle) Array index 'ib' is used before limits check.; [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check.; [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed.; [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd; [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s; [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname; [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname; [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS; [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfB. [roofit/roofitcore/src/RooAbsArg.cxx:280]: (style) Redundant checking of STL container element existence before removing it. [core/dictgen/src/rootcling_impl.cxx:457]: (performance) Possible inefficient checking for 'fieldSelRules' emptiness.; [core/dictgen/src/rootcling_impl.cxx:4573]: (performance) Possible inefficient checking for 'filesIncludedByLinkdef' emptiness.; [gui/canvaspainter/v7/src/TCanvasPainter.cxx:322]: (performance) Possible inefficient checking for 'fWebConn' emptiness.; [gui/canvaspainter/v7/src/TCanvasPainter.cxx:374]: (performance) Possible inefficient checking for 'fCmds' emptiness.; [gui/canvaspainter/v7/src/TCanvasPainter.cxx:419]: (performance) Possible inefficient checking for 'fWebConn' emptiness.; [gui/canvaspainter/v7/src/TCanvasPainter.cxx:475]: (performance) Possible inefficient checking for 'fWebConn' emptiness.; [gui/canvaspainter/v7/src/TCanvasPainter.cxx:587]: (performance) Possible inefficient checking for 'fCmds' emptiness.; [gui/canvaspainter/v7/src/TCanvasPainter.cxx:787]: (performance) Possible inefficient checking for 'fC",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1343:2118,Redund,Redundant,2118,https://root.cern,https://github.com/root-project/root/pull/1343,1,['Redund'],['Redundant']
Safety,"your feature request related to a problem? Please describe.; I'm merging multiple root files into one with hadd. I realized some of the files were corrupted, because the jobs that produced them were killed in the middle. When I try to open these files I see messages about ""recovered keys"".; When merging those files with hadd there are multiple messages displayed, like:; ```Info in <TFile::Recover>: ppfx_me000z-200i_run_98.root, recovered key TDirectoryFile:nuebar_thintarget at address 5276; Info in <TFile::Recover>: ppfx_me000z-200i_run_98.root, recovered key TDirectoryFile:nuebar_mippnumi at address 5409; Info in <TFile::Recover>: ppfx_me000z-200i_run_98.root, recovered key TDirectoryFile:nuebar_attenuation at address 5538; Info in <TFile::Recover>: ppfx_me000z-200i_run_98.root, recovered key TDirectoryFile:nuebar_others at address 5673; Info in <TFile::Recover>: ppfx_me000z-200i_run_98.root, recovered key TDirectoryFile:nuebar_total at address 5798; Warning in <TFile::Init>: successfully recovered 21 keys; Warning in <TFile::Init>: no StreamerInfo found in ppfx_me000z-200i_run_98.root therefore preventing schema evolution when reading this file. The file was produced with version 5.34/32 of ROOT.; hadd Source file 2: ppfx_me000z-200i_run_526.root; Warning in <TFile::Init>: no StreamerInfo found in ppfx_me000z-200i_run_526.root therefore preventing schema evolution when reading this file. The file was produced with version 5.34/32 of ROOT.; hadd Target path: out.root:/; hadd Target path: out.root:/nom; hadd Target path: out.root:/nom/parent; Error in <TBufferFile::ReadClassBuffer>: Could not find the StreamerInfo for version 7 of the class TH1, object skipped at offset 110; Error in <TBufferFile::CheckByteCount>: object of class TH1 read too few bytes: 2 instead of 2216; Error in <TBufferFile::ReadClassBuffer>: Could not find the StreamerInfo for version 7 of the class TH1, object skipped at offset 107; Error in <TBufferFile::CheckByteCount>: object of class TH1 re",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8952:914,recover,recovered,914,https://root.cern,https://github.com/root-project/root/issues/8952,2,['recover'],['recovered']
Safety,"zeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ OK ] RNTuple.ReconstructModel (160 ms); [ RUN ] RNTuple.MultipleInFile; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Fatal: nread == nbytes violated at line 1083 of `/builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RMiniFile.cxx'; aborting; [ --- ]; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-endian. Here the bytes are in the right order, but shifted 4 bytes. $ printf '%016x\n%016x\n' 1234605615003729920 287454020; 1122334400000000; 0000000011223344; $ printf '%016x\n%016x\n' 6153737371142586367 1432778632; 55667788ffffffff; 0000000055667788; ~~~; 449/1272 Test #424: gtest-tree-ntuple-v7-test-ntuple-endian .............................***Failed 0.04 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 9 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 9 tests from RColumnElementEndian; [ RUN ] RColumnElementEndian.Float; [ OK ] RColumnElementEndi",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:2653,abort,aborting,2653,https://root.cern,https://github.com/root-project/root/issues/12426,1,['abort'],['aborting']
Safety,"| Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Oct 28 2022, 09:49:15 |; | From heads/redirect-xrootd@v6-09-01-24773-gd85df4c5e9 |; | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");; root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");; root [2] f1->GetName(); (const char *) ""Run2012BC_DoubleMuParked_Muons.root""; root [3] f2->GetName(); (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root""; root [4] .q; $; ```; and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:; ```diff; void df102_NanoAODDimuonAnalysis(const char* filename); {; // Enable multi-threading; ROOT::EnableImplicitMT();; ; - // std::cout << ""Using filename: "" << filename << std::endl;; + auto f = TFile::Open(filename);; + auto t = f->Get<TTree>(""Events"");; ; - ROOT::RDataFrame df(""Events"", filename);; + ROOT::RDataFrame df(*t);; ```. I got the following:. ```sh; $ time ./dimuon file://Run2012BC_DoubleMuParked_Muons.root ; Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created; Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %; Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %; 13.34; $ time ./dimuon Run2012BC_DoubleMuParked_Muons.root ; Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created; Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %; Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %; 8.81; $; ```. **Note:** With the final version of the patch, instead of using `file://`, which now doe",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11644:1641,avoid,avoid,1641,https://root.cern,https://github.com/root-project/root/pull/11644,1,['avoid'],['avoid']
Safety,"~~~; /home/bgruber/root/hist/hist/inc/TF1.h: In member function ‘virtual Double_t TF2::FindMinMax(Double_t*, Bool_t) const’:; /home/bgruber/root/hist/hist/inc/TF1.h:764:18: note: by argument 2 of type ‘const Double_t*’ {aka ‘const double*’} to ‘Double_t (TF1::)(const Double_t*, const Double_t*)’ {aka ‘double (TF1::)(const double*, const double*)’}; /home/bgruber/root/hist/hist/src/TF2.cxx:349:13: note: ‘xx’ declared here; 349 | Double_t xx[2];; | ^~; ```. ```; /home/bgruber/root/graf2d/graf/src/TText.cxx: In member function ‘virtual void TText::Copy(TObject&) const’:; /home/bgruber/root/graf2d/graf/src/TText.cxx:117:72: warning: ‘void operator delete(void*, std::size_t)’ called on pointer ‘obj’ with nonzero offset 112 [-Wfree-nonheap-object]; 117 | delete reinterpret_cast<std::wstring*>(&((TText&)obj).fWcsTitle);; | ^; ```. ```; /home/bgruber/root/geom/geom/src/TGeoManager.cxx:521:4: warning: this ‘if’ clause does not guard... [-Wmisleading-indentation]; 521 | if (fHashVolumes) fHashVolumes->Clear(""nodelete""); SafeDelete(fHashVolumes);; | ^~; ...; /home/bgruber/root/core/foundation/inc/ROOT/RConfig.hxx:534:26: note: ...this statement, but the latter is misleadingly indented as if it were guarded by the ‘if’; 534 | # define SafeDelete(p) { if (p) { delete p; p = 0; } }; | ^; ```. Several `may be used uninitialized` warnings in `/home/bgruber/root/graf2d/asimage/src/TASImage.cxx` and `/home/bgruber/root/gui/gui/src/TGNumberEntry.cxx`. ```; In function ‘char* strncpy(char*, const char*, size_t)’,; inlined from ‘TGTextLine::TGTextLine(const char*)’ at /home/bgruber/root/gui/gui/src/TGText.cxx:74:14:; /usr/include/bits/string_fortified.h:95:34: warning: ‘char* __builtin_strncpy(char*, const char*, long unsigned int)’ output truncated before terminating nul copying as many bytes from a string as its length; -Wstringop-truncation]; 95 | return __builtin___strncpy_chk (__dest, __src, __len,; | ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~; 96 | __glibc_objsize (__dest));; ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8129:4402,Safe,SafeDelete,4402,https://root.cern,https://github.com/root-project/root/issues/8129,1,['Safe'],['SafeDelete']
Safety,"… separate files containing different volumes. (Markus Frank). This patch provides the method TGDMLWrite::WriteGDMLfile allowing to write the gdml corresponding to a volume hierarchy (like a detector). A geometry can be therefore exported in pieces, and the gdml parser was modified to avoid duplication of materials and other components upon reading.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1434:191,detect,detector,191,https://root.cern,https://github.com/root-project/root/pull/1434,2,"['avoid', 'detect']","['avoid', 'detector']"
Safety,"…akeLists.txt. This commit reverts some of the changes introduced in c9cedcc.; ROOT_LINKER_LIBRARY insures that the shared library is generated with; the suffix '.so', avoiding troubles in MacOS where it would be generated; with '.dylib' otherwise.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5478:168,avoid,avoiding,168,https://root.cern,https://github.com/root-project/root/pull/5478,1,['avoid'],['avoiding']
Safety,"…alizing. When we deserialize a function with noexcept(constant_expression) qualifier the; constant_expression itself might trigger deserialization. Triggering nested; deserializations is not supported in clang. Currently we just removed the assert but this shows problems when we go to; higher version of stl's (such as the one in ubuntu19) which more heavily; rely on constexpr. We segfault in cases where we do equivalent of:; ```; cling::Interpreter *interp = ((TCling*)gCling)->GetInterpreterImpl();; auto& lh = interp->getLookupHelper();; auto diag = cling::LookupHelper::WithDiagnostics;; auto S = lh.findScope(""ROOT::Internal::RDF"", diag);; lh.findAnyFunction(S, ""RDataFrameTake<float>"", diag);; lh.findAnyFunction(S, ""RDataFrameTake<std::vector<float>>"", diag);; ```. This patch delays the unsafe computation of type of the deserialized function; and thus the evaluation of the exception qualifier. This should fix the failing; pyunittests-pyroot-rdataframe-asnumpy nightly on ubuntu 19. The red pill is applying llvm-mirror/clang@5d50602a8de220e1f0bbdd136e9a7be21a1b63c0. This will happen after releasing v6.20.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4656:799,unsafe,unsafe,799,https://root.cern,https://github.com/root-project/root/pull/4656,1,['unsafe'],['unsafe']
Safety,…avoid clash with classes that CMS Combine will eventually provide. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15558:1,avoid,avoid,1,https://root.cern,https://github.com/root-project/root/pull/15558,1,['avoid'],['avoid']
Safety,"…ent and NumPy. As found out after investigating this failure:. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84131/console. PythonX_EXECUTABLE, if set when find_package(PythonX) is called one; first time, is unset if find_package(PythonX) fails when called the; second time (i.e. whether Developmnet or NumPy are not found). To avoid that, as a consequence, PYTHON_EXECUTABLE is not set at all, we; set it (along with other variables) right after the first call to; find_package(PythonX).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5764:356,avoid,avoid,356,https://root.cern,https://github.com/root-project/root/pull/5764,1,['avoid'],['avoid']
Safety,"…ffer. This patch avoids asking ROOT to create a TClass entry in interpreted mode when loading an enum from a given namespace. This is dangerous in case no call to TClass::GetClass(""enum::namespace"") is not called in a context where autoloading is enabled. This should fix ROOT-10528 where GaudiMath::Interpolation is available across dictionaries. When reading the LHCbMathDict_rdict.pcm we find an enum GaudiMath::Interpolation::Type. This in turn creates a never used TClass entry for GaudiMath::Interpolation for which ROOT complains at teardown with:. Fatal in <TClass::SetUnloaded>: The TClass for GaudiMath::Interpolation is being unloaded when in state 3. Patch by Marco Clemencic(@pikacic) and me!. cc: @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4944:18,avoid,avoids,18,https://root.cern,https://github.com/root-project/root/pull/4944,1,['avoid'],['avoids']
Safety,"…hanged. This patch (also) aims to make runtime module installable. This part of code in Clang is comparing the location of ""modulemap which; is currently loaded and gives a definition of current module (say, stl); and ""the location of the modulemap where the current implicit module (like stl) was built"". This was problematic for CMSSW, as they should install modulemaps; and prebuilt pcms to other directory. stl and libc pcms should be; prebuilt, installed and used from installed directory, so this check is; redundant for that usecase.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3180:514,redund,redundant,514,https://root.cern,https://github.com/root-project/root/pull/3180,1,['redund'],['redundant']
Safety,"…ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date.; the file 'C:/Users/sftnight/git/master/CMakeLists.txt'; is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'; result='-1'; -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299.; -- Looking for python; -- Preferring Python version 3; -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development; CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):; No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(); Call Stack (most recent call first):; C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args); cmake/modules/SearchRootCoreDeps.cmake:72 (find_package); CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred!; See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"".; See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"".; CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:; find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows.; Apparently the keyword REQUIRED is not enough to avoid stopping the; compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5001:1383,avoid,avoid,1383,https://root.cern,https://github.com/root-project/root/pull/5001,1,['avoid'],['avoid']
Safety,…ndows. Comment out part of the code to try to prevent false positive detection from several anti-virus engines on Windows (and multiproc is not supported on Windows anyway),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7006:70,detect,detection,70,https://root.cern,https://github.com/root-project/root/pull/7006,2,['detect'],['detection']
Security, 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/base/src/TFolder.cxx:331; /opt/root_src/core/base/src/TPRegexp.cxx:416:10: warning: Value stored to 'nrMatch' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'nrMatch' is never read in /opt/root_src/core/base/src/TPRegexp.cxx:416; /opt/root_src/core/base/src/TQConnection.cxx:115:16: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/base/src/TQConnection.cxx:115; /opt/root_src/core/base/src/TQConnection.cxx:186:16: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/base/src/TQConnection.cxx:186; /opt/root_src/core/base/src/TQObject.cxx:183:23: warning: Call to function 'strcpy' is insecure as it does not provide bo,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7412:110130,secur,security,110130,https://root.cern,https://github.com/root-project/root/issues/7412,1,['secur'],['security']
Security, 'z' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'z' is never read in /opt/root_src/gui/guihtml/src/TGHtmlTable.cxx:1226; /opt/root_src/gui/guihtml/src/TGHtmlUri.cxx:230:7: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/gui/guihtml/src/TGHtmlUri.cxx:230; /opt/root_src/gui/guihtml/src/TGHtmlUri.cxx:353:10: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/gui/guihtml/src/TGHtmlUri.cxx:353; /opt/root_src/gui/guihtml/src/TGHtmlUri.cxx:357:16: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/guihtml/src/TGHtmlUri.cxx:357; /opt/root_src/gui/guihtml/src/TGHtmlUri.cxx:370:19: warning: Call to function 'strcpy' is insecure as it does not provide bo,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:94825,secur,security,94825,https://root.cern,https://github.com/root-project/root/issues/7533,1,['secur'],['security']
Security, '||' is true in /opt/root_src/core/clib/src/Demangle.c:2679; 55: Returning from 'string_append' in /opt/root_src/core/clib/src/Demangle.c:1315; 56: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/core/clib/src/Demangle.c:1316; /opt/root_src/core/clib/src/Demangle.c:1528:10: warning: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:1528; /opt/root_src/core/clib/src/Demangle.c:1910:34: warning: Array access (via field 'typevec') results in a null pointer dereference [clang-analyzer-core.NullDereference]; 1: Assuming 'mangled' is not equal to NULL in /opt/root_src/core/clib/src/Demangle.c:503; 2: Left side of '&&' is true in /opt/root_src/core/clib/src/Demangle.c:503; 3: Assuming the condition is true in /opt/root_src/core/clib/src/Demangle.c:503; 4: Taking true branch in /opt/root_src/core/clib/src/Demangle.c:503; 5: Null pointer value stored to field 'typevec' in /opt/root_src/core/clib/src/Demangle.c:505; 6: Assuming the condition is false in /opt/root_src/core/clib/src/Demangle.c:507; 7: Taking false branch in /opt/root_src/core/clib/src/Demangle.c:507; 8: Assuming the condition is false in /opt/root_src/core/clib/src/Demangle.c:519; 9: expanded from macro 'AUTO_DEMANGLING' in /opt/root_src/core/clib/res/Demangle.h:56; 10: Left side of '||' is false in /opt/root_src/core/clib/src/Demangle.c:519; 11: expanded from macro 'AUTO_DEMANGLING' in /opt/root_src/core/clib/res/Demangle.h:56; 12: Assuming the condition ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:13468,access,access,13468,https://root.cern,https://github.com/root-project/root/issues/7422,1,['access'],['access']
Security," (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584; #12 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102; #13 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1ab6a80) at /usr/include/c++/12/bits/stl_construct.h:151; #14 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1ab6a80) at /usr/include/c++/12/bits/alloc_traits.h:648; #15 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12023:7470,hash,hash,7470,https://root.cern,https://github.com/root-project/root/issues/12023,1,['hash'],['hash']
Security," (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584; #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102; #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151; #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648; #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12023:18323,hash,hash,18323,https://root.cern,https://github.com/root-project/root/issues/12023,2,['hash'],['hash']
Security," /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:4003; [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TClingDataMemberInfo::TypeTrueName(ROOT::TMetaUtils::TNormalizedCtxt const&) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TClingDataMemberInfo.cxx:609; [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:8611; [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::DeepAutoLoadImpl(char const*, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6181; [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] TCling::AutoLoad(char const*, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:6260; [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:3104; [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCore.6.29.01.so] TClass::GetClass(char const*, bool, bool) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:2970; [/Users/sftn",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13290:4054,hash,hash,4054,https://root.cern,https://github.com/root-project/root/pull/13290,1,['hash'],['hash']
Security, /opt/root_src/build/rmkdepend/main.c:403; 12: Loop condition is true. Entering loop body in /opt/root_src/build/rmkdepend/main.c:489; 13: Assuming 'rootBuild' is not equal to 0 in /opt/root_src/build/rmkdepend/main.c:495; 14: Taking false branch in /opt/root_src/build/rmkdepend/main.c:495; 15: Passing null pointer value via 1st parameter 'file' in /opt/root_src/build/rmkdepend/main.c:498; 16: Calling 'base_name' in /opt/root_src/build/rmkdepend/main.c:498; 17: Passing null pointer value via 1st parameter 'str' in /opt/root_src/build/rmkdepend/main.c:659; 18: Calling 'copy' in /opt/root_src/build/rmkdepend/main.c:659; 19: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/build/rmkdepend/main.c:567; /opt/root_src/build/rmkdepend/main.c:569:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/build/rmkdepend/main.c:569; /opt/root_src/build/rmkdepend/main.c:716:7: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/build/rmkdepend/main.c:7,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7410:35010,secur,security,35010,https://root.cern,https://github.com/root-project/root/issues/7410,1,['secur'],['security']
Security, /opt/root_src/builtins/lz4/lz4.c:1458; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4.c:1621:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1621; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1678:9: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1678; /opt/root_src/builtins/lz4/lz4.c:1678:9: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Assuming the condition is false in /opt/root_src/builtins/lz4/lz4.c:1673; 2: Taking false branch in /opt/root_src/builtins/lz4/lz4.c:1673; 3: Assuming 'dictSize' is <= field 'dictSize' in /opt/root_src/builtins/lz4/lz4.c:1674; 4: Taking false branch in /opt/root_src/builtins/lz4/lz4.c:1674; 5: Assuming,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:14367,secur,security,14367,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security, /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 12: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:166; 13: Null pointer value stored to 'i' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:167; 14: Control jumps to 'case kIsEnum:' at line 171 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:169; 15: Control jumps to 'case kBool_t:' at line 173 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:172; 16: Access to field 'boolean' results in a dereference of a null pointer (loaded from variable 'i') in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:173; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:174:35: warning: Access to field 's_char' results in a dereference of a null pointer (loaded from variable 'i') [clang-analyzer-core.NullDereference]; 1: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is non-null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 3: '?' condition is true in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 6: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_s,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:47670,Access,Access,47670,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security, /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 12: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:166; 13: Null pointer value stored to 'i' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:167; 14: Control jumps to 'case kIsEnum:' at line 171 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:169; 15: Control jumps to 'case kChar_t:' at line 174 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:172; 16: Access to field 's_char' results in a dereference of a null pointer (loaded from variable 'i') in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:174; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:175:35: warning: Access to field 's_short' results in a dereference of a null pointer (loaded from variable 'i') [clang-analyzer-core.NullDereference]; 1: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is non-null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 3: '?' condition is true in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 6: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:49365,Access,Access,49365,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security, /opt/root_src/net/http/civetweb/civetweb.c:17937; 21: Taking false branch in /opt/root_src/net/http/civetweb/civetweb.c:17937; 22: 1st function call argument is an uninitialized value in /opt/root_src/net/http/civetweb/civetweb.c:17939; /opt/root_src/net/http/civetweb/civetweb.c:18152:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:18152; /opt/root_src/net/http/civetweb/civetweb.c:18334:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:18334; /opt/root_src/net/http/civetweb/civetweb.c:18899:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; 2: Call to function 'strcat' is insecure as it d,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:73427,secur,security,73427,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security," 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071; #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524; #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175; #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43; #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104; #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82; ===========================================================; ```; </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12023:30996,hash,hash,30996,https://root.cern,https://github.com/root-project/root/issues/12023,1,['hash'],['hash']
Security," 0x000000010d95af83 clang::Sema::diagnoseTypo(clang::TypoCorrection const&, clang::PartialDiagnostic const&, bool) + 51; 10 rootcling_stage1 0x000000010d6f0a39 clang::Sema::DiagnoseUnknownTypeName(clang::IdentifierInfo*&, clang::SourceLocation, clang::Scope*, clang::CXXScopeSpec*, clang::OpaquePtr<clang::QualType>&, bool) + 985; 11 rootcling_stage1 0x000000010d57ef20 clang::Parser::ParseImplicitInt(clang::DeclSpec&, clang::CXXScopeSpec*, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::ParsedAttributesWithRange&) + 2288; 12 rootcling_stage1 0x000000010d579427 clang::Parser::ParseDeclarationSpecifiers(clang::DeclSpec&, clang::Parser::ParsedTemplateInfo const&, clang::AccessSpecifier, clang::Parser::DeclSpecContext, clang::Parser::LateParsedAttrList*) + 6855; 13 rootcling_stage1 0x000000010d5f8a6a clang::Parser::ParseDeclOrFunctionDefInternal(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec&, clang::AccessSpecifier) + 138; 14 rootcling_stage1 0x000000010d5f8725 clang::Parser::ParseDeclarationOrFunctionDefinition(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) + 373; 15 rootcling_stage1 0x000000010d5f7477 clang::Parser::ParseExternalDeclaration(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) + 2423; 16 rootcling_stage1 0x000000010d5f641c clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&) + 588; 17 rootcling_stage1 0x000000010cd68a90 cling::IncrementalParser::ParseInternal(llvm::StringRef) + 2704; 18 rootcling_stage1 0x000000010cd6ca91 cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) + 81; 19 rootcling_stage1 0x000000010cd94044 cling::Interpreter::DeclareInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const + 884; 20 rootcling_stage1 0x000000010cd9110e cling::In",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3586:2176,Access,AccessSpecifier,2176,https://root.cern,https://github.com/root-project/root/pull/3586,1,['Access'],['AccessSpecifier']
Security, 2: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6914; 3: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; /opt/root_src/net/http/civetweb/civetweb.c:6937:7: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; 3: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6937; 4: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 5: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; /opt/root_src/net/http/civetweb/civetweb.c:6945:7: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; 3: Call to ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:30738,secur,security,30738,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security, 8: Left side of '&&' is false in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:94; 9: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:96; 10: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:102; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:102; 12: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:104; 13: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:104; 14: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:105; 15: Null pointer value stored to 'helper' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:106; 16: Control jumps to 'case kIsEnum:' at line 110 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:108; 17: Control jumps to 'case kFloat16_t:' at line 119 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:111; 18: Access to field 'flt' results in a dereference of a null pointer (loaded from variable 'helper') in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:120; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:121:30: warning: Forming reference to null pointer [clang-analyzer-core.NonNullParamChecker]; 1: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:243; 3: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:243; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:246; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:246; 6: Calling 'TEmulatedMapProxy::ReadMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:247; 7: Assuming the condition is false in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:94; 8: Left side of '&&' is false in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:94; 9: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:96; 10: 'idx' is < 'nElements' in /,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:26842,Access,Access,26842,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security," <!--; A clear and concise description of what the wrong behavior is.; -->; I have run into issue reported on ROOT forum here:; https://root-forum.cern.ch/t/tpython-problem/46064; and managed to narrow it down a little. When ROOT is compiled with python3.8/3.9, running the following (in both compiled code and interactively):; ; const char * b = (const char*) TPython::Eval(""'done'"");. leads to following error:. input_line_29:74:12: error: expected member name or ';' after declaration specifiers; TPyReturn isascii() {; ~~~~~~~~~ ^; /usr/include/ctype.h:234:22: note: expanded from macro 'isascii'; # define isascii(c) __isascii (c); ^; .; .; . ; (const char *) nullptr. It does not happen with python 3.6. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; Running the TPython::Eval command should simply return ""done"". Tested with ROOT 6.24.6+python3.6. root [1] const char * b = (const char*) TPython::Eval(""'done'""); (const char *) ""done"". ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; Compile ROOT (tested with 6.24.6 and 6.26.8) with python 3.8 or 3.9 and run following in root interactive:. root [1] const char * b = (const char*) TPython::Eval(""'done'""). ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; 1. 6.24.6 + python3.8/ 6.26.8 +python3.9; 2. Ubuntu18.04/centos7; 3. compiled locally / provided by remote host. ### Extra note:; I have been told that ROOT 6.26.10+python3.9 does not have this issue, so maybe some change in the python binding fixed this. Unfortunately I don't have access to python3.9 right now to test it myself. But I tested ROOT 6.26.10+python3.8 and the issue persists there.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12182:2268,access,access,2268,https://root.cern,https://github.com/root-project/root/issues/12182,1,['access'],['access']
Security, <= field 'dictSize' in /opt/root_src/builtins/lz4/lz4.c:1674; 4: Taking false branch in /opt/root_src/builtins/lz4/lz4.c:1674; 5: Assuming 'safeBuffer' is equal to NULL in /opt/root_src/builtins/lz4/lz4.c:1676; 6: Taking true branch in /opt/root_src/builtins/lz4/lz4.c:1676; 7: Assuming 'dictSize' is > 0 in /opt/root_src/builtins/lz4/lz4.c:1677; 8: Taking true branch in /opt/root_src/builtins/lz4/lz4.c:1677; 9: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/builtins/lz4/lz4.c:1678; /opt/root_src/builtins/lz4/lz4.c:1833:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1833; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1837:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:16223,secur,security,16223,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security, Assuming 'hp' is non-null in /opt/root_src/net/auth/src/rsalib.cxx:394; 11: Taking true branch in /opt/root_src/net/auth/src/rsalib.cxx:394; 12: Assuming 'ab' is < rsa_MAXBIT in /opt/root_src/net/auth/src/rsalib.cxx:406; 13: Loop condition is false. Execution continues on line 393 in /opt/root_src/net/auth/src/rsalib.cxx:406; 14: Assuming 'bi' is > 0 in /opt/root_src/net/auth/src/rsalib.cxx:393; 15: Loop condition is true. Entering loop body in /opt/root_src/net/auth/src/rsalib.cxx:393; 16: 2nd function call argument is an uninitialized value in /opt/root_src/net/auth/src/rsalib.cxx:394; /opt/root_src/net/http/civetweb/civetweb.c:1635:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:1635; /opt/root_src/net/http/civetweb/civetweb.c:3243:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3243; /opt/root_src/net/http/civetweb/civetweb.c:3365:11: warning: Call to function 'vsnprintf' is i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:21697,secur,security,21697,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security, C11 in /opt/root_src/builtins/lz4/lz4.c:1965; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2038:17: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2038; /opt/root_src/builtins/lz4/lz4.c:2083:21: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2083; /opt/root_src/builtins/lz4/lz4.c:2089:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support leng,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:26788,secur,security,26788,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security, C11 in /opt/root_src/builtins/lz4/lz4.c:469; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:484:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:484; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4.c:487:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:487; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:488:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:4923,secur,security,4923,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security, Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:1635; /opt/root_src/net/http/civetweb/civetweb.c:3243:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3243; /opt/root_src/net/http/civetweb/civetweb.c:3365:11: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetwe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:22352,secur,security,22352,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security, Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8724; /opt/root_src/net/http/civetweb/civetweb.c:8750:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8750; /opt/root_src/net/http/civetweb/civetweb.c:9169:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:9169; /opt/root_src/net/http/civetweb/civetweb.c:9223:4: warning: Call to function 'memset' is insec,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:44264,secur,security,44264,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security, Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:5799; /opt/root_src/net/http/civetweb/civetweb.c:6620:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6620; /opt/root_src/net/http/civetweb/civetweb.c:6829:2: warning: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6829; /opt/root_src/net/http/civetweb/civetweb.c:6884:9: warning: Call to function 'vsnprintf' i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:27529,secur,security,27529,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security, Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7374; /opt/root_src/net/http/civetweb/civetweb.c:7477:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7477; /opt/root_src/net/http/civetweb/civetweb.c:7535:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7535; /opt/root_src/net/http/civetweb/civetweb.c:7556:5: warning: Call to function 'memmove' is inse,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:33282,secur,security,33282,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security, Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7477; /opt/root_src/net/http/civetweb/civetweb.c:7535:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7535; /opt/root_src/net/http/civetweb/civetweb.c:7556:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7556; /opt/root_src/net/http/civetweb/civetweb.c:7631:2: warning: Call to function 'memset' is i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:33937,secur,security,33937,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security, Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7631; /opt/root_src/net/http/civetweb/civetweb.c:7708:7: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7708; /opt/root_src/net/http/civetweb/civetweb.c:7717:10: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7717; /opt/root_src/net/http/civetweb/civetweb.c:7726:10: warning: Call to function 'sscanf' is ins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:35906,secur,security,35906,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security, Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7746; /opt/root_src/net/http/civetweb/civetweb.c:7927:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7927; /opt/root_src/net/http/civetweb/civetweb.c:8127:8: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8127; /opt/root_src/net/http/civetweb/civetweb.c:8412:2: warning: Call to function 'memset' is insec,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:39184,secur,security,39184,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security, Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7927; /opt/root_src/net/http/civetweb/civetweb.c:8127:8: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8127; /opt/root_src/net/http/civetweb/civetweb.c:8412:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8412; /opt/root_src/net/http/civetweb/civetweb.c:8637:2: warning: Call to function 'strcpy' is insec,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:39839,secur,security,39839,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security, Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8127; /opt/root_src/net/http/civetweb/civetweb.c:8412:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8412; /opt/root_src/net/http/civetweb/civetweb.c:8637:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/net/http/civetweb/civetweb.c:8637; /opt/root_src/net/http/civetweb/civetweb.c:8638:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:40494,secur,security,40494,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security, Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8705; /opt/root_src/net/http/civetweb/civetweb.c:8724:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8724; /opt/root_src/net/http/civetweb/civetweb.c:8750:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8750; /opt/root_src/net/http/civetweb/civetweb.c:9169:4: warning: Call to function 'memset' is insec,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:43609,secur,security,43609,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security, Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8750; /opt/root_src/net/http/civetweb/civetweb.c:9169:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:9169; /opt/root_src/net/http/civetweb/civetweb.c:9223:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:9223; /opt/root_src/net/http/civetweb/civetweb.c:9502:9: warning: Call to function 'sscanf' is insec,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:44919,secur,security,44919,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security, Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:9169; /opt/root_src/net/http/civetweb/civetweb.c:9223:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:9223; /opt/root_src/net/http/civetweb/civetweb.c:9502:9: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:9502; /opt/root_src/net/http/civetweb/civetweb.c:9911:11: warning: Although the value stored to 'p' ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:45574,secur,security,45574,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security," Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:9223; /opt/root_src/net/http/civetweb/civetweb.c:9502:9: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:9502; /opt/root_src/net/http/civetweb/civetweb.c:9911:11: warning: Although the value stored to 'p' is used in the enclosing expression, the value is never actually read from 'p' [clang-analyzer-deadcode.DeadStores]; 1: Although the value stored to 'p' is used in the enclosing expression, the value is never actually read from 'p' in /opt/root_src/net/http/civetweb/civetweb.c:9911; /opt/root_src/net/http/civetweb/civetweb.c:9918:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Ca",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:46229,secur,security,46229,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security, Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7735; /opt/root_src/net/http/civetweb/civetweb.c:7746:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7746; /opt/root_src/net/http/civetweb/civetweb.c:7927:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7927; /opt/root_src/net/http/civetweb/civetweb.c:8127:8: warning: Call to function 'memset' is insec,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:38529,secur,security,38529,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security, Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8656; /opt/root_src/net/http/civetweb/civetweb.c:8705:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8705; /opt/root_src/net/http/civetweb/civetweb.c:8724:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:8724; /opt/root_src/net/http/civetweb/civetweb.c:8750:2: warning: Call to function 'memset' is insec,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:42954,secur,security,42954,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security, Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 12: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:166; 13: Null pointer value stored to 'i' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:167; 14: Control jumps to 'case kIsEnum:' at line 171 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:169; 15: Control jumps to 'case kBool_t:' at line 173 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:172; 16: Access to field 'boolean' results in a dereference of a null pointer (loaded from variable 'i') in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:173; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:174:35: warning: Access to field 's_char' results in a dereference of a null pointer (loaded from variable 'i') [clang-analyzer-core.NullDereference]; 1: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is non-null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 3: '?' condition is true in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 6: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/ro,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:47457,Access,Access,47457,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security, Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 12: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:166; 13: Null pointer value stored to 'i' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:167; 14: Control jumps to 'case kIsEnum:' at line 171 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:169; 15: Control jumps to 'case kDouble_t:' at line 181 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:172; 16: Access to field 'dbl' results in a dereference of a null pointer (loaded from variable 'i') in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:181; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:182:35: warning: Access to field 'u_char' results in a dereference of a null pointer (loaded from variable 'i') [clang-analyzer-core.NullDereference]; 1: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is non-null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 3: '?' condition is true in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 6: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:61019,Access,Access,61019,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security, Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 12: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:166; 13: Null pointer value stored to 'i' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:167; 14: Control jumps to 'case kIsEnum:' at line 171 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:169; 15: Control jumps to 'case kUChar_t:' at line 182 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:172; 16: Access to field 'u_char' results in a dereference of a null pointer (loaded from variable 'i') in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:182; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:183:35: warning: Access to field 'u_short' results in a dereference of a null pointer (loaded from variable 'i') [clang-analyzer-core.NullDereference]; 1: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is non-null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 3: '?' condition is true in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 6: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/ro,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:62712,Access,Access,62712,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security, Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 12: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:166; 13: Null pointer value stored to 'i' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:167; 14: Control jumps to 'case kIsEnum:' at line 171 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:169; 15: Control jumps to 'case kULong_t:' at line 185 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:172; 16: Access to field 'u_long' results in a dereference of a null pointer (loaded from variable 'i') in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:185; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:186:35: warning: Access to field 'u_longlong' results in a dereference of a null pointer (loaded from variable 'i') [clang-analyzer-core.NullDereference]; 1: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is non-null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 3: '?' condition is true in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 6: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:67800,Access,Access,67800,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security, Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:344; /opt/root_src/core/clib/src/Demangle.c:345:16: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:345; /opt/root_src/core/clib/src/Demangle.c:361:19: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:361; /opt/root_src/core/clib/src/Demangle.c:362:19: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:362; /opt/root_src/core/clib/src/Demangle.c:385:16: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:2632,secur,security,2632,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security, Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:345; /opt/root_src/core/clib/src/Demangle.c:361:19: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:361; /opt/root_src/core/clib/src/Demangle.c:362:19: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:362; /opt/root_src/core/clib/src/Demangle.c:385:16: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:385; /opt/root_src/core/clib/src/Demangle.c:386:16: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:3198,secur,security,3198,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security, Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:361; /opt/root_src/core/clib/src/Demangle.c:362:19: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:362; /opt/root_src/core/clib/src/Demangle.c:385:16: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:385; /opt/root_src/core/clib/src/Demangle.c:386:16: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:386; /opt/root_src/core/clib/src/Demangle.c:387:16: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:3764,secur,security,3764,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security, Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:362; /opt/root_src/core/clib/src/Demangle.c:385:16: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:385; /opt/root_src/core/clib/src/Demangle.c:386:16: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:386; /opt/root_src/core/clib/src/Demangle.c:387:16: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:387; /opt/root_src/core/clib/src/Demangle.c:401:16: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:4330,secur,security,4330,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security, Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:385; /opt/root_src/core/clib/src/Demangle.c:386:16: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:386; /opt/root_src/core/clib/src/Demangle.c:387:16: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:387; /opt/root_src/core/clib/src/Demangle.c:401:16: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:401; /opt/root_src/core/clib/src/Demangle.c:402:16: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:4896,secur,security,4896,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security, Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:386; /opt/root_src/core/clib/src/Demangle.c:387:16: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:387; /opt/root_src/core/clib/src/Demangle.c:401:16: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:401; /opt/root_src/core/clib/src/Demangle.c:402:16: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:402; /opt/root_src/core/clib/src/Demangle.c:416:10: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:5462,secur,security,5462,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security, Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:387; /opt/root_src/core/clib/src/Demangle.c:401:16: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:401; /opt/root_src/core/clib/src/Demangle.c:402:16: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:402; /opt/root_src/core/clib/src/Demangle.c:416:10: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:416; /opt/root_src/core/clib/src/Demangle.c:417:10: warning: Call to function 'strncat' is insecure as it does not provide security checks intro,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:6028,secur,security,6028,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security, Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:401; /opt/root_src/core/clib/src/Demangle.c:402:16: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:402; /opt/root_src/core/clib/src/Demangle.c:416:10: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:416; /opt/root_src/core/clib/src/Demangle.c:417:10: warning: Call to function 'strncat' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncat_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncat' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncat_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:417; /opt/root_src/core/clib/src/Demangle.c:505:7: warning: ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:6594,secur,security,6594,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security," ```; [1965517:tpc-tracker]: ====>Rebuilding TStreamerInfo for class: o2::tpc::CalDet<o2::tpc::PadFlags>, version: 1; [1965517:tpc-tracker]: Creating StreamerInfo for class: o2::tpc::CalDet<o2::tpc::PadFlags>, version: 2; [1965517:tpc-tracker]:; [1965517:tpc-tracker]: StreamerInfo for class: o2::tpc::CalDet<o2::tpc::PadFlags>, version=2, checksum=0x93700773; [1965517:tpc-tracker]: string mName offset= 0 type=300 ,stl=365, ctype=365, name of the object; [1965517:tpc-tracker]: vector<o2::tpc::CalArray<o2::tpc::PadFlags> > mData offset= 32 type=300 ,stl=1, ctype=61, internal CalArrays; [1965517:tpc-tracker]: o2::tpc::PadSubset mPadSubset offset= 56 type= 3 Pad subset granularity; [1965517:tpc-tracker]: i= 0, mName type=300, offset= 0, len=1, method=0; [1965517:tpc-tracker]: i= 1, mData type=300, offset= 32, len=1, method=0; [1965517:tpc-tracker]: i= 2, mPadSubset type= 3, offset= 56, len=1, method=0; [1965517:tpc-tracker]:; [1965517:tpc-tracker]: StreamerInfo for class: o2::tpc::CalDet<o2::tpc::PadFlags>, version=1, checksum=0x93700773; [1965517:tpc-tracker]: string mName offset= 0 type=300 ,stl=365, ctype=365, name of the object; [1965517:tpc-tracker]: vector<o2::tpc::CalArray<o2::tpc::PadFlags> > mData o",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16312:1119,checksum,checksum,1119,https://root.cern,https://github.com/root-project/root/issues/16312,1,['checksum'],['checksum']
Security," and execute function [file](w/o extension); Xk [file] : keep [file] it already loaded else load it. and execute function [file](w/o extension); E <[file]>: open editor and evaluate {statements} in the file; Load/Unload: L [file] : load [file]; Lk [file] : keep [file] if already loaded, else load it; La [file] : reload all files loaded after [file]; U [file] : unload [file]; C [1|0] : copy source to $TMPDIR (on/off); undo : undo previous declarations; lang : local language (EUC,SJIS,EUROPEAN,UNKNOWN); preproc : toggle preprocessing of interpreted files; Monitor: g <[var]> : list global variable; l <[var]> : list local variable; proto <[scope]::>[func] : show function prototype; class <[name]> : show class definition (one level); Class <[name]> : show class definition (all level); typedef <name> : show typedefs; function : show interpreted functions; macro : show macro functions; template : show templates; include : show include paths; file : show loaded files; where : show current file position; security : show security level; refcount : reference count control on/off; garbage : show garbage collection buffer; Garbage : Do garbage collection; cover [file] : save trace coverage; return [val] : return undefined symbol value; Run: S : step over function/loop; s : step into function/loop; i : ignore and step over; c <[line]>: continue <to [line]>; e : step out from function; f [file] : select file to debug; b [line] : set break point; db [line] : delete break point; a [assert]: break only if assertion is true; O [0~4] : Set bytecode compiler mode; debug : bytecode status display on/off; asmstep : bytecode step mode on/off; status : show bytecode exec flags; dasm : disassembler; except : toggle exception catching; Quit: q : quit cint; qqq : quit cint - mandatory; qqqqq : exit process immediately; qqqqqqq : abort process; save : call emergency routine to save important data. ROOT special commands.; ===========================================================================",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10191:4331,secur,security,4331,https://root.cern,https://github.com/root-project/root/issues/10191,2,['secur'],['security']
Security, arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1868; /opt/root_src/builtins/lz4/lz4hc.c:96:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:96; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4hc.c:97:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:97; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4hc.c:754:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:61515,secur,security,61515,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security, arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:852; /opt/root_src/builtins/lz4/lz4frame.c:859:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:859; /opt/root_src/builtins/lz4/lz4frame.c:918:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:918; /opt/root_src/builtins/lz4/lz4frame.c:1122:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that suppo,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:39550,secur,security,39550,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security, arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:859; /opt/root_src/builtins/lz4/lz4frame.c:918:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:918; /opt/root_src/builtins/lz4/lz4frame.c:1122:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1122; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:1166:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security c,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:40194,secur,security,40194,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security, arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2752; /opt/root_src/core/clib/src/attach.c:146:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/attach.c:146; /opt/root_src/core/clib/src/attach.c:147:3: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/core/clib/src/attach.c:147; /opt/root_src/core/clib/src/attach.c:186:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:23861,secur,security,23861,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security, arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/zip/src/ZDeflate.c:519; /opt/root_src/core/zip/src/ZInflate.c:439:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/zip/src/ZInflate.c:439; /opt/root_src/core/zip/src/ZInflate.c:700:11: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/zip/src/ZInflate.c:700; /opt/root_src/core/zip/src/ZInflate.c:707:27: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]; 1: Calling 'R__Inflate_block' in /opt/root_src/core/zip/src/ZInflate.c:1075; 2: Loop condition is true. Entering loop body in /opt/root_src/core/zip/src/ZInflate.c:1019; 3: expanded from macro 'NEEDBITS' in /opt/root_src/core/zip/src/ZInflate.c:348; 4: Assuming the condition is false in /opt/root_src/core/zip/src/ZInflate.c:1019; 5: expanded from macro 'NEEDBITS' in /opt/root_src/core/zip/src/ZInflate.c:348; 6: Taking false branch in /opt/root_src/core/,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7427:8332,secur,security,8332,https://root.cern,https://github.com/root-project/root/issues/7427,1,['secur'],['security']
Security, arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/mmalloc.c:115; /opt/root_src/core/clib/src/mmalloc.c:116:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/mmalloc.c:116; /opt/root_src/core/clib/src/mrealloc.c:77:16: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/mrealloc.c:77; /opt/root_src/core/clib/src/mrealloc.c:120:16: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:27715,secur,security,27715,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security, arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/guihtml/src/TGHtmlUri.cxx:370; /opt/root_src/gui/sessionviewer/src/TProofProgressDialog.cxx:276:4: warning: Value stored to 'height1' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'height1' is never read in /opt/root_src/gui/sessionviewer/src/TProofProgressDialog.cxx:276; /opt/root_src/gui/sessionviewer/src/TProofProgressDialog.cxx:277:4: warning: Value stored to 'width1' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'width1' is never read in /opt/root_src/gui/sessionviewer/src/TProofProgressDialog.cxx:277; /opt/root_src/gui/sessionviewer/src/TSessionViewer.cxx:2673:9: warning: Access to field 'fStatus' results in a dereference of a null pointer (loaded from field 'fActQuery') [clang-analyzer-core.NullDereference]; 1: Calling 'TSessionQueryFrame::Progress' in /opt/root_src/gui/sessionviewer/src/TSessionViewer.cxx:2739; 2: Assuming field 'fProof' is non-null in /opt/root_src/gui/sessionviewer/src/TSessionViewer.cxx:2621; 3: Taking false branch in /opt/root_src/gui/sessionviewer/src/TSessionViewer.cxx:2621; 4: Assuming 'sender' is non-null in /opt/root_src/gui/sessionviewer/src/TSessionViewer.cxx:2625; 5: Left side of '||' is false in /opt/root_src/gui/sessionviewer/src/TSessionViewer.cxx:2625; 6: Assuming 'sender' is equal to field 'fProof' in /opt/root_src/gui/sessionviewer/src/TSessionViewer.cxx:2625; 7: Taking false branch in /opt/root_src/gui/sessionviewer/src/TSessionViewer.cxx:2625; 8: Assuming field 'fActQuery' is null in /opt/root_src/gui/sessionviewer/src/TSessionViewer.cxx:2628; 9: Assuming pointer value is null in /opt/root_src/gui/sessionviewer/src/TSessionViewer.cxx:2628; 10: Left side of '&&' is ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:96873,Access,Access,96873,https://root.cern,https://github.com/root-project/root/issues/7533,1,['Access'],['Access']
Security, as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/build/rmkdepend/include.c:289; /opt/root_src/build/rmkdepend/include.c:292:10: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/build/rmkdepend/include.c:292; /opt/root_src/build/rmkdepend/include.c:294:10: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/build/rmkdepend/include.c:294; /opt/root_src/build/rmkdepend/include.c:318:10: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7410:3498,secur,security,3498,https://root.cern,https://github.com/root-project/root/issues/7410,1,['secur'],['security']
Security, boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:918; /opt/root_src/builtins/lz4/lz4frame.c:1122:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1122; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:1166:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1166; /opt/root_src/builtins/lz4/lz4frame.c:1336:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:40809,secur,security,40809,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security, case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:503; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:822:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:822; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4.c:1228:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:10817,secur,security,10817,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security, case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1458; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4.c:1621:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1621; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1678:9: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1678; /opt/root_src/builtins/lz4/lz4.c:1678:9: warning: Null po,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:13963,secur,security,13963,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security, checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/zip/src/Bits.c:358; /opt/root_src/core/zip/src/RZip.cxx:220:5: warning: Value stored to 'err' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'err' is never read in /opt/root_src/core/zip/src/RZip.cxx:220; /opt/root_src/core/zip/src/ZDeflate.c:254:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/zip/src/ZDeflate.c:254; /opt/root_src/core/zip/src/ZDeflate.c:519:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/zip/src/ZDeflate.c:519; /opt/root_src/core/zip/src/ZInflate.c:439:3: warning: Call to function 'memset' is insecure as it does not provi,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7427:6522,secur,security,6522,https://root.cern,https://github.com/root-project/root/issues/7427,1,['secur'],['security']
Security, checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12278; /opt/root_src/net/http/civetweb/civetweb.c:12281:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12281; /opt/root_src/net/http/civetweb/civetweb.c:12447:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:12447; /opt/root_src/net/http/civetweb/civetweb.c:12454:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:57660,secur,security,57660,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security, checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:17324; /opt/root_src/net/http/civetweb/civetweb.c:17584:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:17584; /opt/root_src/net/http/civetweb/civetweb.c:17916:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:17916; /opt/root_src/net/http/civetweb/civetweb.c:17939:29: warning: 1st function call argument is an uninitialized value [clang-analyzer-core.CallAndMessage]; 1: Calling 'master_thread_run' in /opt/root_src/net/http/civetweb/civetweb.c:18156; 2: Assuming 'ctx' is non-null in /opt/root_src/net/http/civetweb/civetweb.c:18021; 3: Taking false branch in /opt/root_src/net/http/civetweb/civetweb.c:18021; 4: Assuming field 'init_thread' is null in /opt/root_src/net/http/civetweb/civetweb.c:18049; 5: Taking false branch in /opt/root_src/net/http/civetweb/civetweb.c:18049; 6: Assuming field 'stop,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:70151,secur,security,70151,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security," commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/root-project/root/network/alerts). </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11863:2604,secur,security,2604,https://root.cern,https://github.com/root-project/root/pull/11863,6,"['Secur', 'secur']","['Security', 'security']"
Security," const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:613; #16 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:346; #17 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:317; #18 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071; #19 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524; #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175; #21 ROOT::Internal:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12023:9846,hash,hash,9846,https://root.cern,https://github.com/root-project/root/issues/12023,1,['hash'],['hash']
Security," const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613; #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346; #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317; #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071; #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524; #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175; #28 ROOT::Internal:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12023:20699,hash,hash,20699,https://root.cern,https://github.com/root-project/root/issues/12023,2,['hash'],['hash']
Security, copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGNumberEntry.cxx:439; /opt/root_src/gui/gui/src/TGNumberEntry.cxx:446:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGNumberEntry.cxx:446; /opt/root_src/gui/gui/src/TGNumberEntry.cxx:449:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGNumberEntry.cxx:449; /opt/root_src/gui/gui/src/TGNumberEntry.cxx:574:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGNumberEntry.cxx:574; /opt/root_src/gui/gui/src/TGPack.cxx:561:30: warning: Access to field 'fFrame' results in a dereference of a null pointer (lo,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:47237,secur,security,47237,https://root.cern,https://github.com/root-project/root/issues/7533,1,['secur'],['security']
Security, copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGNumberEntry.cxx:446; /opt/root_src/gui/gui/src/TGNumberEntry.cxx:449:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGNumberEntry.cxx:449; /opt/root_src/gui/gui/src/TGNumberEntry.cxx:574:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGNumberEntry.cxx:574; /opt/root_src/gui/gui/src/TGPack.cxx:561:30: warning: Access to field 'fFrame' results in a dereference of a null pointer (loaded from variable 'f0') [clang-analyzer-core.NullDereference]; 1: Assuming 'delta' is >= 'min_dec' in /opt/root_src/gui/gui/src/TGPack.cxx:532; 2: Taking false branch in /opt/root_src/gui/gui/src/TGPack.cxx:532; 3: 'f0' initialized to a null pointer value in /opt/root_src/gui/gui/src/TGPack.cxx:537; 4: Calling 'TGPack::FindFrames' in /opt/root_src/gui/gui/src/TGPack.cxx:538; 5: Loop condition is false. Execution continues on line 226 in /opt/root_src/gui/gui/src/TGPack.cxx:217; 6: Returning without writing to 'f0' in /opt/root_src/gui/gui/src/TGPack.cxx:227; 7: Return,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:47812,secur,security,47812,https://root.cern,https://github.com/root-project/root/issues/7533,1,['secur'],['security']
Security," duplicate issues. - [X] Checked for duplicates. ### Description. In reference to https://github.com/root-project/root/pull/14287#issuecomment-1867435765 . > > Consider that many of those newfstatat calls are spurious and I'm trying to understand where they come from.; >; > These are likely garbage that's put by rootcling into the pcm files. We can verify if that theory is right if we make a build with -Druntime_cxxmodules=Off and see if we still get them at such high numbers... And indeed, a ROOT build with `-Druntime_cxxmodules=OFF` leads to the following results. ```; strace -e file python -c 'import ROOT' 2>&1 | awk -v FS='""' '{ print $1 }' | sort | uniq -c; 172 access(; 2 chdir(; 1 execve(; 1 +++ exited with 0 +++; 73 getcwd(; 2 newfstatat(0, ; 2 newfstatat(1, ; 2 newfstatat(2, ; 329 newfstatat(3, ; 29 newfstatat(4, ; 3482 newfstatat(AT_FDCWD, ; 480 openat(AT_FDCWD, ; 243 readlink(; 1 --- SIGCHLD {si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=95832, si_uid=1000, si_status=0, si_utime=0, si_stime=0} ---; 1 --- SIGCHLD {si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=95834, si_uid=1000, si_status=0, si_utime=0, si_stime=0} ---; 1 --- SIGCHLD {si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=95838, si_uid=1000, si_status=0, si_utime=0, si_stime=0} ---; 1 --- SIGCHLD {si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=95840, si_uid=1000, si_status=0, si_utime=0, si_stime=0} ---; ```; ```; time python -c ""import ROOT"". real	0m0.447s; user	0m0.317s; sys	0m0.130s; ```. Compared with current master which shows; ```; strace -e file python -c 'import ROOT' 2>&1 | awk -v FS='""' '{ print $1 }' | sort | uniq -c; 206 access(; 2 chdir(; 1 execve(; 1 +++ exited with 0 +++; 181 getcwd(; 2 newfstatat(0, ; 2 newfstatat(1, ; 2 newfstatat(2, ; 532 newfstatat(3, ; 29 newfstatat(4, ; 10123 newfstatat(AT_FDCWD, ; 546 openat(AT_FDCWD, ; 843 readlink(; 1 --- SIGCHLD {si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=95944, si_uid=1000, si_status=0, si_utime=0, si_stime=0} ---; 1 --- SIGCHLD {si_signo=SIGC",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14296:684,access,access,684,https://root.cern,https://github.com/root-project/root/issues/14296,1,['access'],['access']
Security," errors would still persist and ruin any chances of exact bit-wise equality.; 2. In `mathcore`: Some additions to `IFunction` were made to allow Minuit2 to probe functions for their ability to generate gradients and second derivatives. Similar additions were made to function adapter classes in Minuit2.; 3. In RooFit:; 1. Most RooMinimizerFcn functionality was moved into an abstract base class RooAbsMinimizerFcn, which in turn forms the base class of the new RooMinimizerFcn, but also of the added RooGradMinimizerFcn (serial, but gradient external to Minuit2) and MinuitFcnGrad (with parallel MultiProcess back-end) classes.; 2. The RooRealMPFE based classes can make use of an added parameter `CPUAffinity`. In Unix systems (not macOS), this makes the MPFE based parallelization a lot faster by pinning processes to physical CPU cores.; 3. To accomodate the new minimization frameworks, RooMinimizer was changed quite a bit as well. It is still backwards compatible, but the new functionality can be accessed through a new `create` template factory function. This template function allows users to pass in their own calculation back-ends, e.g. for calculating on GPUs or in autograd enabled frameworks. The commit history also contains the proof of concept version, the benchmark results of which were presented at [ACAT19](https://indico.cern.ch/event/708041/contributions/3276177/) and [CHEP19](https://doi.org/10.1051/epjconf/202024506027) (and [preliminary results at the 2018 ROOT Users workshop in Sarajevo](https://indico.cern.ch/event/697389/contributions/3062028/)). That version was redesigned starting from 2019 to better integrate with the rest of the code and at the same time untangle the test statistics classes to conceptually bring them closer to the math, instead of the more implementation-detail oriented existing design (RooAbsTestStatistic et al.). The new packages include the following tests, which should probably still be added to the testing infrastructure somehow:. 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8294:3070,access,accessed,3070,https://root.cern,https://github.com/root-project/root/pull/8294,1,['access'],['accessed']
Security," false branch in /opt/root_src/core/clib/src/Demangle.c:1810; 67: Assuming the condition is false in /opt/root_src/core/clib/src/Demangle.c:1818; 68: expanded from macro 'isdigit' in /usr/include/ctype.h:192; 69: expanded from macro '__isctype' in /usr/include/ctype.h:89; 70: Taking false branch in /opt/root_src/core/clib/src/Demangle.c:1818; 71: Returning the value 1, which participates in a condition later in /opt/root_src/core/clib/src/Demangle.c:1836; 72: Returning from 'get_count' in /opt/root_src/core/clib/src/Demangle.c:1904; 73: Left side of '||' is false in /opt/root_src/core/clib/src/Demangle.c:1904; 74: Assuming 'n' is < field 'ntypes' in /opt/root_src/core/clib/src/Demangle.c:1904; 75: Taking false branch in /opt/root_src/core/clib/src/Demangle.c:1904; 76: Array access (via field 'typevec') results in a null pointer dereference in /opt/root_src/core/clib/src/Demangle.c:1910; /opt/root_src/core/clib/src/Demangle.c:2264:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2264; /opt/root_src/core/clib/src/Demangle.c:2683:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced i",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:19797,secur,security,19797,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security," for copyright info; ==774799== Command: python breaks.py; ==774799== ; 0; 0.9989327176093981; -0.43476438941434026; 0.7817962561955079; 0; 0.9989327176093981; ==774799== Invalid read of size 8; ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02); ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0); ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0); ==774799== by 0x4B8CD53: _PyEval_EvalCodeWithName (in /usr/lib64/libpython3.8.so.1.0); ==774799== by 0x4C07E78: PyEval_EvalCodeEx (in /usr/lib64/libpython3.8.so.1.0); ==774799== by 0x4C07E3A: PyEval_EvalCode (in /usr/lib64/libpython3.8.so.1.0); ==774799== by 0x4C29067: ??? (in /usr/lib64/libpython3.8.so.1.0); ==774799== by 0x4C28782: ??? (in /usr/lib64/libpython3.8.so.1.0); ==774799== by 0x4B149CD: PyRun_FileExFlags (in /usr/lib64/libpython3.8.so.1.0); ==774799== by 0x4B14185: PyRun_SimpleFileExFlags (in /usr/lib64/libpython3.8.so.1.0); ==774799== by 0x4B0B350: ??? (in /usr/lib64/libpython3.8.so.1.0); ==774799== by 0x4BFB968: Py_BytesMain (in /usr/lib64/libpython3.8.so.1.0); ==774799== Address 0xbfad0a0da4191a40 is not stack'd, malloc'd or (recently) free'd; ==774799== ; *** Break *** segmentation violation; ```. ## Setup; ROOT 6.22/02 , Python 3.8.5 ; Fedora 32, all installed via dnf. (Can also reproduce on Centos 7 with same ROOT version self-compiled with gcc10/python3.7. Haven't tried other platforms.) . ## Additional context. This used to work fine before. We have a lot of data in a format similar to this, so changing the format to use a std::array< > is a bit annoying because I'm not 100% sure the automatic schema migration would work and would prefer not to find out the hard way (even though it should be binary compatible). Maybe it would but either way this seems like a regression. . And yes, there are other ways to access the data that probably work better... but it would be nice not to have to update old scripts!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6468:6578,access,access,6578,https://root.cern,https://github.com/root-project/root/issues/6468,1,['access'],['access']
Security," for the error comparison. This is expected to not; break user code, because the function was only introduced in 6.26 and is; so far only used in a single unit test (`testSumW2Error`). The `testRooAbsPdf` unit test didn't reset the initial parameter errors; correctly, which is now fixed.; + gcc --version; gcc (GCC) 12.0.1 20220413 (Red Hat 12.0.1-0); Copyright (C) 2022 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. + cmake -GNinja -S source -B build -Dxrootd=OFF; (...skip...); -- ROOT Configuration. System Linux-5.16.9-200.rog.fc35.x86_64; Processor 8 core AMD Ryzen 7 5800HS with Radeon Graphics (x86_64); Build type Release; Install path /usr/local; Compiler GNU 12.0.1; Compiler flags:; C -fdiagnostics-color=always -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG; C++ -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG; Linker flags:; Executable -rdynamic; Module; Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_llvm builtin_lz4 builtin_nlohmannjson builtin_openui5 builtin_tbb builtin_vdt builtin_xxhash builtin_zstd clad dataframe exceptions gdml http imt mlp minuit2 roofit webgui root7 rpath runtime_cxxmodules shared ssl tmva spectrum vdt x11 xml; -- Configuring done; -- Generating done; -- Build files have been written to: /reproducer/build; + cmake --build build; (...skip...); ```; ```; [7047/9103] Generating G__Core.cxx, ../lib/Core.pcm; FAILED: core/G__Core.cxx lib/Core.pcm /reproducer/build/core/G__Core.cxx /reproducer/build/lib/Core.pcm; cd /reproducer/build/core && /usr/bin/cmake -E env LD_LIBRARY_PATH=/reproducer/build/lib:/.singularity.d/libs /reproducer/build/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10478:3128,hash,hash-style,3128,https://root.cern,https://github.com/root-project/root/issues/10478,1,['hash'],['hash-style']
Security, functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3287; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3288:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3288; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3289:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3289; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3290:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3290; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3291:20: warning: Call to function 'strcpy' is insecu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7423:16519,secur,security,16519,https://root.cern,https://github.com/root-project/root/issues/7423,1,['secur'],['security']
Security, functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3288; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3289:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3289; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3290:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3290; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3291:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3291; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3292:20: warning: Call to function 'strcpy' is insecu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7423:17109,secur,security,17109,https://root.cern,https://github.com/root-project/root/issues/7423,1,['secur'],['security']
Security, functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3289; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3290:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3290; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3291:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3291; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3292:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3292; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3293:20: warning: Call to function 'strcpy' is insecu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7423:17699,secur,security,17699,https://root.cern,https://github.com/root-project/root/issues/7423,1,['secur'],['security']
Security, functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3290; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3291:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3291; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3292:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3292; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3293:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3293; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3294:20: warning: Call to function 'strcpy' is insecu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7423:18289,secur,security,18289,https://root.cern,https://github.com/root-project/root/issues/7423,1,['secur'],['security']
Security, functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3291; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3292:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3292; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3293:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3293; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3294:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3294; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3295:20: warning: Call to function 'strcpy' is insecu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7423:18879,secur,security,18879,https://root.cern,https://github.com/root-project/root/issues/7423,1,['secur'],['security']
Security, functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3292; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3293:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3293; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3294:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3294; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3295:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3295; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3296:20: warning: Call to function 'strcpy' is insecu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7423:19469,secur,security,19469,https://root.cern,https://github.com/root-project/root/issues/7423,1,['secur'],['security']
Security, functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3293; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3294:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3294; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3295:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3295; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3296:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3296; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3297:20: warning: Call to function 'strcpy' is insecu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7423:20059,secur,security,20059,https://root.cern,https://github.com/root-project/root/issues/7423,1,['secur'],['security']
Security, functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3294; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3295:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3295; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3296:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3296; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3297:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3297; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3298:20: warning: Call to function 'strcpy' is insecu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7423:20649,secur,security,20649,https://root.cern,https://github.com/root-project/root/issues/7423,1,['secur'],['security']
Security, functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3295; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3296:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3296; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3297:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3297; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3298:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3298; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3299:20: warning: Call to function 'strcpy' is insecu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7423:21239,secur,security,21239,https://root.cern,https://github.com/root-project/root/issues/7423,1,['secur'],['security']
Security, functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3296; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3297:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3297; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3298:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3298; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3299:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3299; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3300:20: warning: Call to function 'strcpy' is insecu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7423:21829,secur,security,21829,https://root.cern,https://github.com/root-project/root/issues/7423,1,['secur'],['security']
Security, functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3297; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3298:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3298; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3299:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3299; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3300:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3300; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3301:20: warning: Call to function 'strcpy' is insecu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7423:22419,secur,security,22419,https://root.cern,https://github.com/root-project/root/issues/7423,1,['secur'],['security']
Security, functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3298; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3299:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3299; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3300:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3300; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3301:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3301; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3302:20: warning: Call to function 'strcpy' is insecu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7423:23009,secur,security,23009,https://root.cern,https://github.com/root-project/root/issues/7423,1,['secur'],['security']
Security, functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3299; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3300:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3300; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3301:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3301; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3302:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3302; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3303:20: warning: Call to function 'strcpy' is insecu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7423:23599,secur,security,23599,https://root.cern,https://github.com/root-project/root/issues/7423,1,['secur'],['security']
Security, functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3300; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3301:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3301; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3302:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3302; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3303:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3303; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3304:20: warning: Call to function 'strcpy' is insecu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7423:24189,secur,security,24189,https://root.cern,https://github.com/root-project/root/issues/7423,1,['secur'],['security']
Security, functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3301; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3302:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3302; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3303:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3303; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3304:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3304; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3305:20: warning: Call to function 'strcpy' is insecu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7423:24779,secur,security,24779,https://root.cern,https://github.com/root-project/root/issues/7423,1,['secur'],['security']
Security, functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3302; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3303:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3303; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3304:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3304; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3305:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3305; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3306:20: warning: Call to function 'strcpy' is insecu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7423:25369,secur,security,25369,https://root.cern,https://github.com/root-project/root/issues/7423,1,['secur'],['security']
Security, functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3303; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3304:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3304; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3305:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3305; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3306:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3306; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3307:20: warning: Call to function 'strcpy' is insecu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7423:25959,secur,security,25959,https://root.cern,https://github.com/root-project/root/issues/7423,1,['secur'],['security']
Security, functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3304; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3305:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3305; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3306:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3306; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3307:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3307; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3308:20: warning: Call to function 'strcpy' is insecu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7423:26549,secur,security,26549,https://root.cern,https://github.com/root-project/root/issues/7423,1,['secur'],['security']
Security, functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3305; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3306:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3306; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3307:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3307; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3308:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3308; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3309:20: warning: Call to function 'strcpy' is insecu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7423:27139,secur,security,27139,https://root.cern,https://github.com/root-project/root/issues/7423,1,['secur'],['security']
Security, functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3306; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3307:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3307; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3308:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3308; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3309:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3309; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3310:20: warning: Call to function 'strcpy' is insecu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7423:27729,secur,security,27729,https://root.cern,https://github.com/root-project/root/issues/7423,1,['secur'],['security']
Security, functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3307; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3308:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3308; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3309:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3309; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3310:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3310; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3311:21: warning: Call to function 'strcpy' is insecu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7423:28319,secur,security,28319,https://root.cern,https://github.com/root-project/root/issues/7423,1,['secur'],['security']
Security, functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3308; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3309:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3309; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3310:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3310; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3311:21: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3311; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3312:21: warning: Call to function 'strcpy' is insecu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7423:28909,secur,security,28909,https://root.cern,https://github.com/root-project/root/issues/7423,1,['secur'],['security']
Security, functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3309; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3310:20: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3310; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3311:21: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3311; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3312:21: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3312; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3688:18: warning: Called C++ object pointer is null [,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7423:29499,secur,security,29499,https://root.cern,https://github.com/root-project/root/issues/7423,1,['secur'],['security']
Security, functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3310; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3311:21: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3311; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3312:21: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3312; /opt/root_src/core/clingutils/src/TClingUtils.cxx:3688:18: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Assuming the object is a 'TemplateTypeParmDecl' in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3609; 2: 'ttpdPtr' is non-null in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3610; 3: Taking false branch in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3610; 4: Calling 'TemplateTypeParmDecl::hasDefaultArgument' in /opt/root_src/core/clingutils/src/TClingUtils.cxx:3611; 5: Calling 'DefaultArgStorage::isSet' in /opt/root_src/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1282; 6: Calling 'PointerUnion::isNull' in ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7423:30089,secur,security,30089,https://root.cern,https://github.com/root-project/root/issues/7423,1,['secur'],['security']
Security," guess SrvAuthenticate is defined in DaemonUtils.[h|cxx] and refers to the libSrvAuth !; ```; $ grep srvauthenticate -i -R ../src; ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;; ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);; ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);; ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);; ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate; ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");; ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");; ```. Additionally, https://root.cern/doc/master/authserv_8C.html is not working due to this. Knowing that there are all these ./src/net/net/ useful classes about remote connections.. why is that TSocket is being deprecated ? https://github.com/root-project/root/commit/8ef5d04e0102290cc2457c5a7cc40fc9874fa006 . This is incredibly useful feature.. same for all other basic communication protocol developped in `./net/net/` directory. ```; $ grep srvauthenticate -i -R ../src; ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;; ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);; ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);; ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);; ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate; ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");; ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");; ```. ### Reproducer. https://root.cern/doc/master/authserv_8C.html; https://root.cern/doc/master/authclient_8C.html. ### ROOT version. 2023/08/01. ### Installation method. build form source. ### Operating system. macos. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13387:2006,Authenticat,Authenticate,2006,https://root.cern,https://github.com/root-project/root/issues/13387,1,['Authenticat'],['Authenticate']
Security, in /opt/root_src/build/rmkdepend/parse.c:335; 26: Field 'i_defs' is not equal to NULL in /opt/root_src/build/rmkdepend/parse.c:340; 27: Taking false branch in /opt/root_src/build/rmkdepend/parse.c:340; 28: Assuming 'last' is < 'first' in /opt/root_src/build/rmkdepend/parse.c:345; 29: Loop condition is false. Execution continues on line 376 in /opt/root_src/build/rmkdepend/parse.c:345; 30: 'sp' is equal to NULL in /opt/root_src/build/rmkdepend/parse.c:376; 31: Taking false branch in /opt/root_src/build/rmkdepend/parse.c:376; 32: 'sp' is <= 'dest' in /opt/root_src/build/rmkdepend/parse.c:384; 33: Loop condition is false. Execution continues on line 388 in /opt/root_src/build/rmkdepend/parse.c:384; 34: Value assigned to 'stab' in /opt/root_src/build/rmkdepend/parse.c:388; 35: Assuming 'stab' is equal to NULL in /opt/root_src/build/rmkdepend/parse.c:389; 36: Taking true branch in /opt/root_src/build/rmkdepend/parse.c:389; 37: Access to field 's_name' results in a dereference of a null pointer (loaded from variable 'stab') in /opt/root_src/build/rmkdepend/parse.c:392; /opt/root_src/build/rmkdepend/pr.c:108:10: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/build/rmkdepend/pr.c:108; /opt/root_src/build/rmkdepend/pr.c:119:10: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7410:42697,Access,Access,42697,https://root.cern,https://github.com/root-project/root/issues/7410,1,['Access'],['Access']
Security, in /opt/root_src/builtins/lz4/lz4.c:414; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:447:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:447; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:451:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:451; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:469:10: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-securit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:1777,secur,security,1777,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security, in /opt/root_src/builtins/lz4/lz4.c:447; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:451:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:451; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:469:10: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:469; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:469:30: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-securit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:2565,secur,security,2565,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security, in /opt/root_src/builtins/lz4/lz4.c:487; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:488:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:488; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:489:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:489; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:492:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:6497,secur,security,6497,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security, in /opt/root_src/builtins/lz4/lz4.c:488; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:489:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:489; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:492:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:492; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:493:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:7284,secur,security,7284,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security, in /opt/root_src/builtins/lz4/lz4.c:489; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:492:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:492; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:493:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:493; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:500:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:8071,secur,security,8071,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security, in /opt/root_src/builtins/lz4/lz4.c:492; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:493:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:493; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:500:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:500; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:503:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:8858,secur,security,8858,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security, in /opt/root_src/builtins/lz4/lz4.c:493; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:500:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:500; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:503:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:503; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:822:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-securit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:9645,secur,security,9645,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security, in /opt/root_src/builtins/lz4/lz4.c:500; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:503:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:503; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:822:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:822; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4.c:1228:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.in,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:10433,secur,security,10433,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security, in /opt/root_src/builtins/lz4/lz4.c:822; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4.c:1228:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1228; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1449:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1449; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4.c:1458:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:12006,secur,security,12006,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security, in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 12: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:166; 13: Null pointer value stored to 'i' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:167; 14: Control jumps to 'case kIsEnum:' at line 171 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:169; 15: Control jumps to 'case kInt_t:' at line 176 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:172; 16: Access to field 's_int' results in a dereference of a null pointer (loaded from variable 'i') in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:176; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:177:35: warning: Access to field 's_long' results in a dereference of a null pointer (loaded from variable 'i') [clang-analyzer-core.NullDereference]; 1: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is non-null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 3: '?' condition is true in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 6: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_s,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:52755,Access,Access,52755,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security, in /opt/root_src/net/http/civetweb/civetweb.c:6945; 4: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 5: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; /opt/root_src/net/http/civetweb/civetweb.c:7374:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7374; /opt/root_src/net/http/civetweb/civetweb.c:7477:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7477; /opt/root_src/net/http/civetweb/civetweb.c:7535:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks intr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:32973,secur,security,32973,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security, in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1449; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4.c:1458:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1458; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4.c:1621:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/l,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:13175,secur,security,13175,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security, in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:484; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4.c:487:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:487; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:488:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:5309,secur,security,5309,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security, in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:96; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4hc.c:97:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:97; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4hc.c:754:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:754; /opt/root_src/builtins/lz4/lz4hc.c:893:9: warning: Call to fu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:61899,secur,security,61899,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security," in typical event loops. The only remaining using is the calls from ```TFile``` to ```TProcessUUID::AddUUID``` and ```TProcessUUID::RemoveUUID``` There are still several remaining places where the global read lock is taken, and these still have some cost in light of the remaining global write lock usage. These changes have the biggest impact when analyzing a large number of files. A test case is below. Produce the test dataset:; ```cpp; #include ""TFile.h""; #include ""TTree.h""; #include ""TString.h""; #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;; const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {; TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");; TTree *tree = new TTree(""tree"", """");; tree->Branch(""outval"", &outval);; for (unsigned int ientry = 0; ientry < nentries; ++ientry) {; tree->Fill();; }; tree->Write();; fout->Close();. // make sure that each key has a distinct timestamp to maximally; // provoke different hashes for streamer info in each file; std::this_thread::sleep_for(1100ms);; }. }; ```. Test event loop:; ```python; import ROOT; ROOT.gInterpreter.ProcessLine("".O3""); ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""); chain.Add(""test_*.root""). d = ROOT.ROOT.RDataFrame(chain); res = d.Sum(""outval""). resval = res.GetValue(); print(resval); ```. With 256 threads:. + Baseline:; Percent of CPU this job got: 391%; Elapsed (wall clock) time (h:mm:ss or m:ss): 5:17.52. + +hashing fix; Percent of CPU this job got: 453%; Elapsed (wall clock) time (h:mm:ss or m:ss): 3:15.25. + +hashing fix and reduction of remaining global write locks (this PR):; Percent of CPU this job got: 1639%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:38.98. + +hashing fix and reduction of remaining global write locks + remove TFile UUID registration (not in this PR anymore):; Percent of CPU this job got: 19861%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:17.52",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9486:1633,hash,hashes,1633,https://root.cern,https://github.com/root-project/root/pull/9486,4,['hash'],"['hashes', 'hashing']"
Security, is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/mmalloc.c:116; /opt/root_src/core/clib/src/mrealloc.c:77:16: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/mrealloc.c:77; /opt/root_src/core/clib/src/mrealloc.c:120:16: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/core/clib/src/mrealloc.c:120; /opt/root_src/core/clib/src/mrealloc.c:142:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduce,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:28172,secur,security,28172,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security, is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'nrMatch' is never read in /opt/root_src/core/base/src/TPRegexp.cxx:416; /opt/root_src/core/base/src/TQConnection.cxx:115:16: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/base/src/TQConnection.cxx:115; /opt/root_src/core/base/src/TQConnection.cxx:186:16: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/base/src/TQConnection.cxx:186; /opt/root_src/core/base/src/TQObject.cxx:183:23: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/base/src/TQObject.cxx:183; /opt/root_src/core/base/src/TQObject.cxx:240:21: warning: Call to function 'strcpy' is insecure as it does not provide bounding o,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7412:110708,secur,security,110708,https://root.cern,https://github.com/root-project/root/issues/7412,1,['secur'],['security']
Security," is the entire stack trace of all threads:; 2187: ===========================================================; 2187: #0 0x00007f2a616e15db in waitpid () from /lib64/libc.so.6; 2187: #1 0x00007f2a61643ce7 in do_system () from /lib64/libc.so.6; 2187: #2 0x00007f2a630125cb in TUnixSystem::StackTrace (this=<optimized out>) at /home/jhahnfel/ROOT/src/core/unix/src/TUnixSystem.cxx:2395; 2187: #3 0x00007f2a6301c2df in TUnixSystem::DispatchSignals (this=0x617000000080, sig=kSigSegmentationViolation) at /home/jhahnfel/ROOT/src/core/unix/src/TUnixSystem.cxx:3615; 2187: #4 <signal handler called>; 2187: #5 0x00000000002d353e in __interceptor_strcmp.part.325 (); 2187: #6 0x00007f2a62e33daf in TClassTable::AddAlternate (normName=0x7f2a6007c780 <.str> ""UserClassViaTypedef"", alternate=0x7f2a6007c7c0 <.str> ""UserClass_t"") at /home/jhahnfel/ROOT/src/core/cont/src/TClassTable.cxx:447; 2187: #7 0x00007f2a62e382ed in ROOT::AddClassAlternate (normName=0x1 <error: Cannot access memory at address 0x1>, alternate=0x7f2a491937c0 <error: Cannot access memory at address 0x7f2a491937c0>) at /home/jhahnfel/ROOT/src/core/cont/src/TClassTable.cxx:792; 2187: #8 0x00007f2a60081efb in _GLOBAL__sub_I_libInitOrder.cxx () at roottest/root/meta/tclass/libInitOrder.cxx:123; 2187: #9 0x00007f2a631f305a in call_init (l=<optimized out>, argc=argc; 2187: entry=37, argv=argv; 2187: entry=0x7ffc0cd45a68, env=env; 2187: entry=0x61600030f680) at dl-init.c:72; 2187: #10 0x00007f2a631f315a in call_init (env=0x61600030f680, argv=0x7ffc0cd45a68, argc=37, l=<optimized out>) at dl-init.c:30; 2187: #11 _dl_init (main_map=0x61a00008b280, argc=37, argv=0x7ffc0cd45a68, env=0x61600030f680) at dl-init.c:119; 2187: #12 0x00007f2a617509bc in _dl_catch_exception () from /lib64/libc.so.6; 2187: #13 0x00007f2a631fa88e in dl_open_worker (a=0x7ffc0cd41a20) at dl-open.c:794; 2187: #14 dl_open_worker (a=0x7ffc0cd41a20) at dl-open.c:757; 2187: #15 0x00007f2a61750964 in _dl_catch_exception () from /lib64/libc.so.6; 2187: #16 0x00007f2a",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11867:2020,access,access,2020,https://root.cern,https://github.com/root-project/root/issues/11867,2,['access'],['access']
Security, not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:9918; /opt/root_src/net/http/civetweb/civetweb.c:10419:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:10419; /opt/root_src/net/http/civetweb/civetweb.c:11294:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:11294; /opt/root_src/net/http/civetweb/civetweb.c:11508:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:48266,secur,security,48266,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security, read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'ok' is never read in /opt/root_src/gui/guibuilder/src/TGuiBldDragManager.cxx:3806; /opt/root_src/gui/guihtml/src/TGHtmlDraw.cxx:149:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/gui/guihtml/src/TGHtmlDraw.cxx:149; /opt/root_src/gui/guihtml/src/TGHtmlDraw.cxx:208:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/gui/guihtml/src/TGHtmlDraw.cxx:208; /opt/root_src/gui/guihtml/src/TGHtmlIndex.cxx:394:13: warning: Value stored to 'p' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'p' is never read in /opt/root_src/gui/guihtml/src/TGHtmlIndex.cxx:394; /opt/root_src/gui/guihtml/src/TGHtmlLayout.cxx:469:33: warning: Value stored to 'p' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'p' is never read in /opt/root_src/gui/guihtml/src/TGHtmlLayout.cxx:469; /opt/root_src/gui/guihtml/src/TGHtmlLayout.cxx:498:19: warning: Value stored to 'descent2' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'descent2' is never read in /opt/root_src/gui/guihtml/src/TGHtmlLayout.cxx:498; /op,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:77891,secur,security,77891,https://root.cern,https://github.com/root-project/root/issues/7533,1,['secur'],['security']
Security," special column `rdfentry_`, despite the name, does not correspond to the global TChain entry number _in MT runs_ (see also [the relevant docs](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#helper-cols)). This is surprising for users (hence the big warning in the docs linked above) and makes it unnecessarily difficult to e.g. attach a numpy array as an additional column (because it's hard to index into it correctly without stable global row numbers). We could instead make `rdfentry_` always match the ""real"" (global) entry number in the dataset -- if only each MT task knew the offset of the current tree w.r.t. all other trees in the chain. ### Proposed solution . - have TTreeProcessorMT tell each MT task which tree it is processing w.r.t. to the global chain (`#1`, `#2`, `#3`, ...); - have each task calculate its tree's offset by going over a list of tree entry numbers, filling missing values as needed (the list of entry numbers would be implemented as an array of fixed size `nTrees` with atomic elements. This plus the fact that threads only need to write into the atomic elements if they see the value has not been calculated yet should minimize thread contention) . ### Other solution considered. - we could always build a global TChain, for every task, and always use global entry numbers everywhere. However this would require that TTreeProcessorMT reads out the number of entries in each tree before the tasks even start, because it first needs to come up with entry ranges for each task. My intuition is that this would bring a larger performance impact than the proposed solution: we know from DistRDF that the (redundant) opening O(1k) remote files at startup is a significant cost.; - we could do nothing: `rdfentry_` would be unstable and it could not be relied upon to e.g. index into manually added ""friend columns"" or to fill TEntryLists (like [this user would have liked to do](https://root-forum.cern.ch/t/accessing-entry-information-using-rdataframe/52378))",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12190:1963,access,accessing-entry-information-using-rdataframe,1963,https://root.cern,https://github.com/root-project/root/issues/12190,1,['access'],['accessing-entry-information-using-rdataframe']
Security," std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, bool> > >::_M_insert_range_unique<const std::pair<const std::__cxx11::basic_string<char>, bool> *>' requested here; { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }; ^; /home/blue/Scratchpad/work/forum_rvec_crash_2/repro_modules_crash.C:2:31: note: in instantiation of member function 'std::map<std::__cxx11::basic_string<char>, bool, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, bool> > >::map' requested here; std::map<std::string, bool> m{{""foo"", true}, {""bar"", false}};; ^; /usr/lib/gcc/x86_64-pc-linux-gnu/11.2.0/../../../../include/c++/11.2.0/bits/stl_tree.h:315:7: note: previous definition is here; operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT; ^; ```. Note 1: A `Release` build seems to work fine. I can reproduce the problem on CentOS 8 Stream with a self-built GCC 11.1.0. When testing with self-built versions of GCC 11.2.0, 10.2.0, and 9.3.0, I get a probably related crash `ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/Decl.cpp:3857: unsigned int clang::FunctionDecl::getODRHash() const: Assertion 'hasODRHash()' failed.` where the `FunctionDecl` is the constructor of `std::_Rb_tree_iterator`. Note 2: The system-default GCC 8.5.0 and a self-built GCC 8.4.0 are both fine. The only ""relevant"" change that I see for `_Rb_tree_iterator` in GCC 9 is the move from (member) `bool operator==` to `friend bool operator==`, which matches the error message quite nicely. Finally, I was able to reproduce the assertion in a Docker container of `ubuntu:latest` (Ubuntu 22.04.4 LTS at the time of writing), after installing; ```; # apt update; # apt upgrade; # apt install --no-install-recommends ca-certificates cmake gcc g++ git libc6-dev libz-dev make ninja-build patch python3 uuid-dev; ```; and then configuring as `cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -Dx11=OFF ../root.src/`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10291:3258,certificate,certificates,3258,https://root.cern,https://github.com/root-project/root/issues/10291,1,['certificate'],['certificates']
Security, support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:844; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:852:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:852; /opt/root_src/builtins/lz4/lz4frame.c:859:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:859; /opt/root_src/builtins/lz4/lz4frame.c:918:9: warning: Call to function 'memcpy' is insecure as it does not prov,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:38383,secur,security,38383,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security, that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3365; 3: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; /opt/root_src/net/http/civetweb/civetweb.c:3502:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3502; /opt/root_src/net/http/civetweb/civetweb.c:3633:23: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; 3: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3633; 4: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 5: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; /opt/root_src/net/http/civetweb/civetweb.c:3878:5: warning: Cal,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:24207,secur,security,24207,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security, that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/build/rmkdepend/include.c:158; /opt/root_src/build/rmkdepend/include.c:289:10: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/build/rmkdepend/include.c:289; /opt/root_src/build/rmkdepend/include.c:292:10: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/build/rmkdepend/include.c:292; /opt/root_src/build/rmkdepend/include.c:294:10: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7410:3036,secur,security,3036,https://root.cern,https://github.com/root-project/root/issues/7410,1,['secur'],['security']
Security, the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6937; 4: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 5: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; /opt/root_src/net/http/civetweb/civetweb.c:6945:7: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; 3: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6945; 4: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 5: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; /opt/root_src/net/http/civetweb/civetweb.c:7374:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks su,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:31781,secur,security,31781,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security," the above-mentioned; headers. In more detail:; - Replace RooCatType by an integer.; - Replace names saved in each row of dataset with RooCatType by a map in; RooAbsCategory that maps state names to numbers. This saves 64 bytes; + the size of TObject for each event, and makes loading strings in each; event unnecessary.; - Provide legacy iterator for iterating through states instances of; RooCatType, which will be created on the fly.; - Make RooVectorDataStore store integers instead of RooCatType instances.; - With this, also reduce the amount of unnecessary members in RooVectorDataStore.; - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:; - Provide new interfaces for categories to work without RooCatType.; - Add bracket operator and constructor arguments to define multiple; category states at once or using category[""stateName""] = 1.; - Mark legacy interfaces exposing RooCatType as deprecated in doxygen.; - Stop including RooCatType when R__LESS_INCLUDES is set.; - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE.; - Don't create RooCatType instances, unless users continue to use; the legacy interface.; - Provide functions hasIndex() and hasLabel() to check validity of; index/label.; - Provide function states() with direct access to map of category names; to category numbers.; - Add functions getCurrent{Index|Label} to make clear that they access; class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since; derived category classes might need to recompute their shapes if one; of their input categories change. Changes in special category classes:; - Consolidate RooMultiCategory and RooSuperCategory. These share almost; all the code, so RooSuperCategory will now use a RooMultiCategory for; state definition and retrieval. The only additional functionality for; RooSuperCategory is that it can assign states to its subcategories.; - Clean up header of RooMappedCategory. Outline as much as possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5502:2439,access,access,2439,https://root.cern,https://github.com/root-project/root/pull/5502,2,['access'],['access']
Security," the class are arrays (c-style). Accessing the array members works for the first time the GetEntry() is called, but subsequent accesses result in segmentation faults. I am using the ""old"" way of reading the tree (with SetBranchAddress). . One possible workaround might be to use std::array instead of c-style arrays, although I have not fully tested if this works. . ## Expected behavior; Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: ; ```. #ifndef _mwe_event_h; #define _mwe_event_h. #include ""TObject.h"" ; #include <array>. class MWEEvent ; {. public: ; MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly ; double get_foo(int i) const { return foo[i]; } . int iev; ; double bar; ; double foo[2]; ; virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);; }; ; ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```; import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); ; t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): ; t.GetEntry(i); ; print (ev.iev) ; print (ev.bar) ; print (ev.get_foo(0)); print (ev.get_foo(1)); ```. But if you try to access the array member directly (as used to work), it does not work:; ```; import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); ; t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): ; t.GetEntry(i); ; print (ev.iev) ; print (ev.bar) ; print (ev.foo[0]); print (ev.foo[1]). ```. This results in . ```; python breaks.py ; 0; 0.9989327176093981 ; -",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6468:1068,access,access,1068,https://root.cern,https://github.com/root-project/root/issues/6468,1,['access'],['access']
Security, to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/core/clib/src/Demangle.c:416; /opt/root_src/core/clib/src/Demangle.c:417:10: warning: Call to function 'strncat' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncat_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncat' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncat_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:417; /opt/root_src/core/clib/src/Demangle.c:505:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:505; /opt/root_src/core/clib/src/Demangle.c:1316:22: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Assuming 'mangled' is not equal to NULL in /opt/root_src/core/clib/src/Demangle.c:503; 2: Left side of '&&' is true in /opt/root_src/core/clib/src/Demangle.c:503; 3: Assuming the condition is true in /opt/root_src/core/clib/src/Demangle.c:503; 4: Taking true branch in /opt/root_src/core/clib/sr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:7647,secur,security,7647,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security, to null in /opt/root_src/core/cont/src/TBtree.cxx:547; 8: expanded from macro 'R__CHECK' in /opt/root_src/core/foundation/inc/TError.h:124; 9: Taking true branch in /opt/root_src/core/cont/src/TBtree.cxx:547; 10: expanded from macro 'R__CHECK' in /opt/root_src/core/foundation/inc/TError.h:124; 11: Loop condition is false. Exiting loop in /opt/root_src/core/cont/src/TBtree.cxx:547; 12: expanded from macro 'R__CHECK' in /opt/root_src/core/foundation/inc/TError.h:123; 13: Null pointer value stored to field 'fTree' in /opt/root_src/core/cont/src/TBtree.cxx:548; 14: Returning from constructor for 'TBtNode' in /opt/root_src/core/cont/src/TBtree.cxx:688; 15: Calling 'TBtInnerNode::MaxIndex' in /opt/root_src/core/cont/src/TBtree.cxx:690; 16: Access to field 'fInnerMaxIndex' results in a dereference of a null pointer (loaded from field 'fTree') in /opt/root_src/core/cont/inc/TBtree.h:248; /opt/root_src/core/cont/inc/TBtree.h:314:41: warning: Access to field 'fLeafMaxIndex' results in a dereference of a null pointer (loaded from field 'fTree') [clang-analyzer-core.NullDereference]; 1: Passing null pointer value via 3rd parameter 't' in /opt/root_src/core/cont/src/TBtree.cxx:1695; 2: Calling constructor for 'TBtLeafNode' in /opt/root_src/core/cont/src/TBtree.cxx:1695; 3: Passing null pointer value via 3rd parameter 't' in /opt/root_src/core/cont/src/TBtree.cxx:1363; 4: Calling constructor for 'TBtNode' in /opt/root_src/core/cont/src/TBtree.cxx:1363; 5: Assuming 'p' is equal to null in /opt/root_src/core/cont/src/TBtree.cxx:546; 6: Taking true branch in /opt/root_src/core/cont/src/TBtree.cxx:546; 7: 't' is equal to null in /opt/root_src/core/cont/src/TBtree.cxx:547; 8: expanded from macro 'R__CHECK' in /opt/root_src/core/foundation/inc/TError.h:124; 9: Taking true branch in /opt/root_src/core/cont/src/TBtree.cxx:547; 10: expanded from macro 'R__CHECK' in /opt/root_src/core/foundation/inc/TError.h:124; 11: Loop condition is false. Exiting loop in /opt/root_src/core/cont/src/TBtr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7424:1865,Access,Access,1865,https://root.cern,https://github.com/root-project/root/issues/7424,1,['Access'],['Access']
Security, unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/rint/src/TTabCom.cxx:1431; /opt/root_src/core/rint/src/TTabCom.cxx:1452:13: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/rint/src/TTabCom.cxx:1452; /opt/root_src/core/rint/src/TTabCom.cxx:1455:13: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/rint/src/TTabCom.cxx:1455; /opt/root_src/core/rint/src/TTabCom.cxx:1459:10: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/rint/src/TTabCom.cxx:1459; /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:93:5: warning: Value stored to 'sSignalHandlerActive' is never read,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7427:1425,secur,security,1425,https://root.cern,https://github.com/root-project/root/issues/7427,1,['secur'],['security']
Security, unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/rint/src/TTabCom.cxx:1452; /opt/root_src/core/rint/src/TTabCom.cxx:1455:13: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/rint/src/TTabCom.cxx:1455; /opt/root_src/core/rint/src/TTabCom.cxx:1459:10: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/rint/src/TTabCom.cxx:1459; /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:93:5: warning: Value stored to 'sSignalHandlerActive' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'sSignalHandlerActive' is never read in /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:93; /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:102:11: warning: Value stored to 'sSignalHandlerActive' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'sSignalHandlerActive' is never read in /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:102; /opt/root_src/core/unix/src/TUnixSystem.cxx:689:19: warning: Call to function 'strcat' is insecure,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7427:1995,secur,security,1995,https://root.cern,https://github.com/root-project/root/issues/7427,1,['secur'],['security']
Security, warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1336; /opt/root_src/builtins/lz4/lz4frame.c:1346:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1346; /opt/root_src/builtins/lz4/lz4frame.c:1349:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1349; /opt/root_src/builtins/lz4/lz4frame.c:1349:9: warning: Null pointer passed to 2nd parameter expecting 'nonnul,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:42409,secur,security,42409,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security, warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1434; /opt/root_src/builtins/lz4/lz4frame.c:1490:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1490; /opt/root_src/builtins/lz4/lz4frame.c:1542:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1542; /opt/root_src/builtins/lz4/lz4frame.c:1584:21: warning: Call to function 'memcpy' is insecure as it does not,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:54585,secur,security,54585,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security, warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1490; /opt/root_src/builtins/lz4/lz4frame.c:1542:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1542; /opt/root_src/builtins/lz4/lz4frame.c:1584:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1584; /opt/root_src/builtins/lz4/lz4frame.c:1626:17: warning: Call to function 'memcpy' is insecure as it does not,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:55231,secur,security,55231,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security, warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1542; /opt/root_src/builtins/lz4/lz4frame.c:1584:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1584; /opt/root_src/builtins/lz4/lz4frame.c:1626:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1626; /opt/root_src/builtins/lz4/lz4frame.c:1690:25: warning: Call to function 'memcpy' is insecure as it does not,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:55877,secur,security,55877,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security, warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1584; /opt/root_src/builtins/lz4/lz4frame.c:1626:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1626; /opt/root_src/builtins/lz4/lz4frame.c:1690:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1690; /opt/root_src/builtins/lz4/lz4frame.c:1728:17: warning: Call to function 'memcpy' is insecure as it does not,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:56523,secur,security,56523,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security, warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1626; /opt/root_src/builtins/lz4/lz4frame.c:1690:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1690; /opt/root_src/builtins/lz4/lz4frame.c:1728:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1728; /opt/root_src/builtins/lz4/lz4frame.c:1768:17: warning: Call to function 'memcpy' is insecure as it does not,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:57169,secur,security,57169,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security, warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1690; /opt/root_src/builtins/lz4/lz4frame.c:1728:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1728; /opt/root_src/builtins/lz4/lz4frame.c:1768:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1768; /opt/root_src/builtins/lz4/lz4frame.c:1810:17: warning: Call to function 'memcpy' is insecure as it does not,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:57815,secur,security,57815,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security, warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1728; /opt/root_src/builtins/lz4/lz4frame.c:1768:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1768; /opt/root_src/builtins/lz4/lz4frame.c:1810:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1810; /opt/root_src/builtins/lz4/lz4frame.c:1860:13: warning: Call to function 'memcpy' is insecure as it does not,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:58461,secur,security,58461,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security, warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1768; /opt/root_src/builtins/lz4/lz4frame.c:1810:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1810; /opt/root_src/builtins/lz4/lz4frame.c:1860:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1860; /opt/root_src/builtins/lz4/lz4frame.c:1868:13: warning: Call to function 'memcpy' is insecure as it does not,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:59107,secur,security,59107,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security, warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1810; /opt/root_src/builtins/lz4/lz4frame.c:1860:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1860; /opt/root_src/builtins/lz4/lz4frame.c:1868:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1868; /opt/root_src/builtins/lz4/lz4hc.c:96:5: warning: Call to function 'memset' is insecure as it does not provi,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:59753,secur,security,59753,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security, warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1860; /opt/root_src/builtins/lz4/lz4frame.c:1868:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1868; /opt/root_src/builtins/lz4/lz4hc.c:96:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:96; 3: expanded from macro 'MEM_INIT' in /opt/ro,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:60399,secur,security,60399,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security," was configured as ""x86_64-pc-linux-gnu"".; Type ""show configuration"" for configuration details.; For bug reporting instructions, please see:; <https://bugs.gentoo.org/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>. For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from bin/root.exe...; (gdb) break f; Function ""f"" not defined.; Make breakpoint pending on future shared library load? (y or [n]) y; Breakpoint 1 (f) pending.; (gdb) run; Starting program: /srv/root/build/bin/root.exe ; warning: File ""/srv/root/build/lib/libCore.so-gdb.py"" auto-loading has been declined by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; 	add-auto-load-safe-path /srv/root/build/lib/libCore.so-gdb.py; line to your configuration file ""/home/amadio/.config/gdb/gdbinit"".; To completely disable this security protection add; 	set auto-load safe-path /; line to your configuration file ""/home/amadio/.config/gdb/gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; 	info ""(gdb)Auto-loading safe path""; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/usr/lib64/libthread_db.so.1"".; [Detaching after vfork from child process 798483]; [Detaching after vfork from child process 800084]; [Detaching after vfork from child process 800087]; ------------------------------------------------------------------; | Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Dec 13 2022, 14:33:20 |; | From heads/cling-profile-debug@v6-25-02-3189-gf5fced388b |; | With c++ (Gentoo 12.2.1_p20221203 p3) 12.2.1 20221203 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; -------------------------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11882:1682,secur,security,1682,https://root.cern,https://github.com/root-project/root/pull/11882,1,['secur'],['security']
Security, which participates in a condition later in /opt/root_src/io/io/src/TMapFile.cxx:727; 23: Assuming 'mr' is equal to field 'fLast' in /opt/root_src/io/io/src/TMapFile.cxx:728; 24: Taking true branch in /opt/root_src/io/io/src/TMapFile.cxx:728; 25: Null pointer value stored to field 'fLast' in /opt/root_src/io/io/src/TMapFile.cxx:729; 26: Execution continues on line 743 in /opt/root_src/io/io/src/TMapFile.cxx:737; 27: 'lock' is false in /opt/root_src/io/io/src/TMapFile.cxx:743; 28: Taking false branch in /opt/root_src/io/io/src/TMapFile.cxx:743; 29: Returning from 'TMapFile::Remove' in /opt/root_src/io/io/src/TMapFile.cxx:614; 30: Assuming the condition is false in /opt/root_src/io/io/src/TMapFile.cxx:614; 31: Taking false branch in /opt/root_src/io/io/src/TMapFile.cxx:614; 32: Assuming field 'fFirst' is non-null in /opt/root_src/io/io/src/TMapFile.cxx:619; 33: Taking false branch in /opt/root_src/io/io/src/TMapFile.cxx:619; 34: Access to field 'fNext' results in a dereference of a null pointer (loaded from field 'fLast') in /opt/root_src/io/io/src/TMapFile.cxx:623; /opt/root_src/io/io/src/TMemFile.cxx:181:40: warning: Value stored to 'mode' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'mode' is never read in /opt/root_src/io/io/src/TMemFile.cxx:181; /opt/root_src/io/io/src/TStreamerInfo.cxx:1116:30: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Assuming field 'fClass' is non-null in /opt/root_src/io/io/src/TStreamerInfo.cxx:731; 2: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:731; 3: Assuming the condition is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:777; 4: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:777; 5: Assuming field 'fIsSyntheticPair' is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:785; 6: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:785; 7: Assuming the condition is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:793;,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:95158,Access,Access,95158,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security," you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->. Creating a distributed RDataFrame with an in-memory-only TTree should not be possible. Currently, this case is untested and the following reproducer triggers a couple of spurious errors:. ```python; from array import array; import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. tree = ROOT.TTree(""tree"", ""Tree in memory""); x = array(""f"", [0]); tree.Branch(""x"", x, ""x/F""). r = ROOT.TRandomMixMax(). for i in range(100000):; x[0] = r.Gaus(10, 1); tree.Fill(). df = RDataFrame(tree). print(df.Count().GetValue()); ```. The first error is; ```; File ""/home/vpadulan/Programs/rootproject/rootinstall/devrelease/lib/DistRDF/Node.py"", line 717, in get_treename; return first_arg.GetUserInfo().At(0).GetName(); ReferenceError: attempt to access a null-pointer; ```; Since the `get_treename` function calls `GetUserInfo()` which is empty in this case. Changing that line to `return first_arg.GetName()` triggers; ```; File ""/home/vpadulan/Programs/rootproject/rootinstall/devrelease/lib/DistRDF/Backends/Base.py"", line 158, in mapper; for f in current_range.filelist:; TypeError: 'NoneType' object is not iterable; ```; And in this case the name of the tree is correctly retrieved, but the function [build_ranges](https://github.com/root-project/root/blob/bdd8a241d5ce5d2f7d3b5b273a0660d7ed52a517/bindings/experimental/distrdf/python/DistRDF/Node.py#L605) expects the inputfiles to be non-empty, otherwise the ranges will be created as if the constructor called was `RDataFrame(ULong64_t numEntries)` instead. So that's a silent fallback to something completely different from the requested input arguments. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. Distributed RDataFrame should raise an exception if the user is tryin",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7788:1212,access,access,1212,https://root.cern,https://github.com/root-project/root/issues/7788,1,['access'],['access']
Security," — to flag up potential security problems for you to investigate before merging a PR.; * On every push to your default branch and other protected branches — this keeps the analysis results on your repository’s *Security* tab up to date.; * Once a week at a fixed time — to make sure you benefit from the latest updated security analysis even when no code was committed or PRs were opened. #### What will this cost?; Nothing! The CodeQL engine will run inside GitHub Actions, making use of your [unlimited free compute minutes for public repositories](https://docs.github.com/en/actions/learn-github-actions/usage-limits-billing-and-administration#about-billing-for-github-actions). #### What types of problems does CodeQL find?; The CodeQL engine that powers GitHub code scanning is the exact same engine that powers LGTM.com. The exact set of rules has been tweaked slightly, but you should see almost exactly the same types of alerts as you were used to on LGTM.com: we’ve enabled the [`security-and-quality` query suite](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs) for you. #### How do I upgrade my CodeQL engine?; No need! New versions of the CodeQL analysis are constantly deployed on GitHub.com; your repository will automatically benefit from the most recently released version. #### The analysis doesn’t seem to be working; If you get an error in GitHub Actions that indicates that CodeQL wasn’t able to analyze your code, please [follow the instructions here](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/troubleshooting-the-codeql-workflow) to debug the analysis. #### How do I disable LGTM.com?; If you have LGTM’s automatic pull request analysis enabled, then you can [follow these steps to disable the LGTM pull request analysis](https://lgtm.com/help/lgtm/managing-automated-code-revie",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11808:2994,secur,security-and-quality,2994,https://root.cern,https://github.com/root-project/root/pull/11808,1,['secur'],['security-and-quality']
Security,"# 6.28.00. **GitHub issue** that we still want to resolve before the v6.28.00 release:. - [x] https://github.com/root-project/root/issues/11951; Issue is not closed yet because the solution we have is not perfect, but there is a way of doing it already in `v628`: with the `RooBinIntegrator`; - [x] https://github.com/root-project/root/issues/11814; - [x] https://github.com/root-project/root/issues/11954; - [x] https://github.com/root-project/root/issues/8984; Issue is not closed yet because the solution still needs to be validated to the user, but patch is already merged to `master` and `v628` branch. **Other items** that still need to be done without any associated GitHub issue:. - [x] New test statistics should consider the `Offset()` command in `RooAbsPdf::fitTo()`, @Zeff020; - [x] Write release notes for the change in the `KahanSum` class, @egpbos; - [x] If you run the `testInterface` unit test binary in `roofitcore`, you get errors printed out and there is one disabled test. Please take a look, @Zeff020. **Backports** that need to be made for the v6.28 branch (in this particular order from top to bottom, to not have a commit history too different from master):. - [x] https://github.com/root-project/root/pull/11940; - [x] https://github.com/root-project/root/pull/11941; - [x] https://github.com/root-project/root/pull/10210; Except for the commit to RooStats, which is a fixup only relevant to a commit in master; - [x] https://github.com/root-project/root/pull/11953; Excluding the one technical commit about the `snapshot()` overload; - [x] https://github.com/root-project/root/pull/9539; Only the first four commits that are not about code modernization; - [x] https://github.com/root-project/root/pull/11969; - [x] https://github.com/root-project/root/pull/11962; - [x] https://github.com/root-project/root/pull/11970; - [x] https://github.com/root-project/root/pull/11966; - [x] https://github.com/root-project/root/pull/11984; - [x] https://github.com/root-project/root/p",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11856:526,validat,validated,526,https://root.cern,https://github.com/root-project/root/issues/11856,1,['validat'],['validated']
Security,"# This Pull request: Adds all the Basic Binary ONNX operators to TMVA/SOFIE with the unit tests to validate the code. 1) Adds all the four Basic Binary Operators with the unit tests; - Add; - Sub; - Mul; - Div. 2) Fix issue in parsing binary operators when one input is an initialized tensor; ; In Add,Sub, Mul or Div one of the input can be an initialized tensor therefore we don't have its input type registered before parsing. We need to look if the tensor is in Initializer tensor list. 3) Support for Multi-directional Broadcasting in SOFIE. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10822:99,validat,validate,99,https://root.cern,https://github.com/root-project/root/pull/10822,1,['validat'],['validate']
Security,# This Pull request: Adds the Cast ONNX Operator with the corresponding Unit tests to validate the written code. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11033:86,validat,validate,86,https://root.cern,https://github.com/root-project/root/pull/11033,1,['validat'],['validate']
Security,# This Pull request: Adds the Neg ONNX Operator with the corresponding unit tests to validate the code. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10946:85,validat,validate,85,https://root.cern,https://github.com/root-project/root/pull/10946,1,['validat'],['validate']
Security,"# This Pull request: Adds the Tanh Activation function to SOFIE with the corresponding unit tests; 1. Adds the Tanh ONNX operator, an activation function to SOFIE.; 2. Adds the unit tests to validate the code. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10913:191,validat,validate,191,https://root.cern,https://github.com/root-project/root/pull/10913,1,['validat'],['validate']
Security,# This Pull request: Fix Swap overload of RVec-s. ## Changes or fixes:. Iterators are used to swap elements of RVecs. Previously swap was trying to access element by indexing.; That was not a valid operation. Test cases were added to verify the swap. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes swap overload of RVec.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9303:148,access,access,148,https://root.cern,https://github.com/root-project/root/pull/9303,1,['access'],['access']
Security,# This Pull request: Pow ONNX Operator implemented with the corresponding unit tests to validate the written code. ## Checklist:. - [X] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10971:88,validat,validate,88,https://root.cern,https://github.com/root-project/root/pull/10971,1,['validat'],['validate']
Security,# This Pull request: [RNTuple] Addition of the evil storage layer. ## Changes or fixes:; - Add modifications to `RRawFile` to enable failures (bit flips and short reads) to be injected into the `ReadAt` and `ReadV` methods.; - Add I/O error unit test file `ntuple_ioerrors`. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13434:176,inject,injected,176,https://root.cern,https://github.com/root-project/root/pull/13434,1,['inject'],['injected']
Security,# This Pull request:. ## Changes or fixes:. Absence of safety in public methods resulting in nullptr access if ftraininfo was undefined by constructor. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/14569,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14859:101,access,access,101,https://root.cern,https://github.com/root-project/root/pull/14859,1,['access'],['access']
Security,"# This Pull request:. ## Changes or fixes:. At FreeBSD 13.1, the following compilation error appears:; ```; core/base/src/TUUID.cxx:444:33: error: member access into incomplete type 'struct sockaddr'; if (ifa->ifa_addr->sa_family != AF_INET) { // check only IP4; ^; /usr/include/ifaddrs.h:37:9: note: forward declaration of 'sockaddr'; struct sockaddr *ifa_addr;; ^; 1 error generated.; ```; The `struct sockaddr` is defined in the header file sys/socket.h ([specification](https://pubs.opengroup.org/onlinepubs/9699919799.2018edition/basedefs/sys_socket.h.html#tag_13_61)), which is missing. The header is added in this request. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10703:154,access,access,154,https://root.cern,https://github.com/root-project/root/pull/10703,1,['access'],['access']
Security,# This Pull request:. ## Changes or fixes:. Fixes Nullptr access after raising Error. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15094:58,access,access,58,https://root.cern,https://github.com/root-project/root/pull/15094,1,['access'],['access']
Security,# This Pull request:. ## Changes or fixes:. Fixes https://its.cern.ch/jira/browse/ROOT-8051. Solution copy-pasted from JIRA issue (V Gonzalez). And adds some security to function arguments. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15022:158,secur,security,158,https://root.cern,https://github.com/root-project/root/pull/15022,1,['secur'],['security']
Security,"# This Pull request:. ## Changes or fixes:. For compatibility with Python 3.13. See: https://docs.python.org/3.13/whatsnew/3.13.html. From the above page:. * Classes have a new __firstlineno__ attribute, populated by the compiler, with the line number of the first line of the class definition. (Contributed by Serhiy Storchaka in gh-118465.). * Classes have a new __static_attributes__ attribute, populated by the compiler, with a tuple of names of attributes of this class which are accessed through self.X from any function in its body. (Contributed by Irit Katriel in gh-115775.). Without adding the new attributes to the blacklist there are errors:. AttributeError: 'int' object attribute 'doc' is read-only from the __firstlineno__ attribute. AttributeError: 'tuple' object attribute 'doc' is read-only from the __static_attributes__ attribute. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #15430",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15798:485,access,accessed,485,https://root.cern,https://github.com/root-project/root/pull/15798,1,['access'],['accessed']
Security,"# This Pull request:. ## Changes or fixes:. In preparation for coming optimizations, we introduce here some changes to RooFit::MultiProcess::Queue. 1. Queue itself is now an abstract base class. This means we must access it as a pointer from e.g. within JobManager. Queue still holds a lot of the old generic Queue functionality, like Queue::loop.; 2. The old ""default"" Queue implementation is now FIFOQueue. This behaves the same as before: first task in == first task out.; 3. A new Queue implementation is added: PriorityQueue. As the name implies: the user can set task priorities when using this queue. The type of Queue and also task priorities can be set through RooFit::MultiProcess::Config::Queue. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11627:214,access,access,214,https://root.cern,https://github.com/root-project/root/pull/11627,1,['access'],['access']
Security,"# This Pull request:. ## Changes or fixes:. In some corner cases, there might be some nullptr access problems. This solves the warnings found by clang-tidy",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11443:94,access,access,94,https://root.cern,https://github.com/root-project/root/pull/11443,1,['access'],['access']
Security,# This Pull request:. ## Changes or fixes:. Prevent infinite loops and add more security for overflows; ; Fixes in part https://github.com/root-project/root/issues/14770. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14820:80,secur,security,80,https://root.cern,https://github.com/root-project/root/pull/14820,1,['secur'],['security']
Security,# This Pull request:. ## Changes or fixes:. Prevents some null ptr access. Detected by clang-tidy.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11441:67,access,access,67,https://root.cern,https://github.com/root-project/root/pull/11441,1,['access'],['access']
Security,"# This Pull request:. ## Changes or fixes:. Shell-name was not being found if the script was an executable, in that case it was assumed it was bash (see https://github.com/root-project/root/pull/10418). This PR applies a fix in the function getting the shell name, technical details are discussed here in the comments section:; https://stackoverflow.com/questions/71944436/how-to-get-the-unix-shell-executable-name-for-a-script-marked-as-executable-and . Now, the shell is correctly identified in all tested cases. For security, it will print a warning if shell name is not found, but still run. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10424:519,secur,security,519,https://root.cern,https://github.com/root-project/root/pull/10424,1,['secur'],['security']
Security,"# This Pull request:. ## Changes or fixes:. With `dev=1`, `asserts=1`, `pythia6=1`, `CMAKE_BUILD_TYPE=Debug`, `LLVM_BUILD_TYPE=Debug`, and `LLVM_ENABLE_ASSERTIONS=1`, a missing `#include ""strlcpy.h"" is exposed in `TPythia6.cxx` which is fixed by this PR. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9563:202,expose,exposed,202,https://root.cern,https://github.com/root-project/root/pull/9563,1,['expose'],['exposed']
Security,"# This Pull request:. ## Changes or fixes:. nullptr access when branch is not found. Fixes first part of https://its.cern.ch/jira/browse/ROOT-8842 by @jpivarski. `GetNextRange(int)`. but it still crashes later at:. ```; 1 frombuf                                                      Bytes.h                  384 0x7f62c0ded275 ; 2 ROOT::Experimental::TTreeReaderValueFast<float>::Deserialize TTreeReaderValueFast.hxx 171 0x7f62b6563bd0 ; 3 ROOT::Experimental::TTreeReaderValueFast<float>::Get         TTreeReaderValueFast.hxx 162 0x7f62b6563b42 ; 4 ROOT::Experimental::TTreeReaderValueFast<float>::operator *  TTreeReaderValueFast.hxx 165 0x7f62b6563b60 ; 5 reader                                                       reader.C                 30  0x7f62b6563004 ; 6 ??                                                                                        0x7f62b7e280bc ; 7 ??                                                                                        0x7ffda58c2b60 ; 8 ??                                                                                        0x7ffda58c2b28 ; 9 ??                                                                                                       ; ```. and this part, I do not know how to solve. The crash happens every time at a different entry. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15929:52,access,access,52,https://root.cern,https://github.com/root-project/root/pull/15929,1,['access'],['access']
Security,"# This Pull request:. ## Changes or fixes:; Commit 23d861273f56c28a6bad45028115f80228816b6f removed `get_wgt`, but this is used in RooFitExtensions, which in turn is used for Higgs combination fits. This commit adds `get_wgt` back in. It also adds it in places where it was missing before; some new additions since `get_wgt` was added (about 6 years ago) did not use `get_wgt`, but rather directly accessed the `_wgt` array, which again breaks the usecase within RooFitExtensions (`RooExpandedDataHist`). ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11736:398,access,accessed,398,https://root.cern,https://github.com/root-project/root/pull/11736,1,['access'],['accessed']
Security,# This Pull request:. ## Changes or fixes:; Prevents 181 warnings in https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-v624/96/consoleFull when running Doxygen concerning the ::Streamer functions. And 4 or 5 warnings are solved also in Bindings/R documentation. It also exposes some parts of ClassDef macro that were not included in doxygen before. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/9596,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9629:292,expose,exposes,292,https://root.cern,https://github.com/root-project/root/pull/9629,1,['expose'],['exposes']
Security,"# This Pull request:. ## Changes or fixes:; This commit adds the Config class to provide a user-accessible place set the desired number of workers. The number of workers was previously settable from a static public member of JobManager, but since we do not expose MultiProcess internals to users, it was unreachable from the ROOT interpreter and scripts. Thanks to @Zeff020 for noticing this omission. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9409:96,access,accessible,96,https://root.cern,https://github.com/root-project/root/pull/9409,2,"['access', 'expose']","['accessible', 'expose']"
Security,# This Pull request:. ## Changes or fixes:; segmentation violation due to empty vector access. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/10180,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10181:87,access,access,87,https://root.cern,https://github.com/root-project/root/pull/10181,1,['access'],['access']
Security,# This Pull request:. Adds `FromRNTuple` for vectors of file names. Gives easy access to the RNTuple chains in RDF through PyROOT.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14196:79,access,access,79,https://root.cern,https://github.com/root-project/root/pull/14196,1,['access'],['access']
Security,"# This Pull request:. Fixes to TDavixFile documentation when accessing files on Amazon S3. The options suggested do not work. Instead the options must be used without the underscore. e.g. . ""S3_SECKEY"" -> ""S3SECKEY""; ""S3_ACCKEY"" -> ""S3ACCKEY""; ""S3_TOKEN"" -> ""S3TOKEN""; etc. You can see the source code here: https://github.com/root-project/root/blob/4e8c577dfd6a19d7c38a74e3074b406a598bf76a/net/davix/src/TDavixFile.cxx#L69. where they are defined without the underscore. ```c; const char* s3_seckey_opt = ""s3seckey="";; const char* s3_acckey_opt = ""s3acckey="";; const char* s3_region_opt = ""s3region="";; const char* s3_token_opt = ""s3token="";; const char* s3_alternate_opt = ""s3alternate="";; ```. For example, this works:. ```; const std::string options(""S3SECKEY="" + aws_secret_access_key + "" "" ; + ""S3ACCKEY="" + aws_access_key_id + "" ""; + ""S3TOKEN="" + aws_session_token);. TFile::Open(input_filename.c_str(), (options + "" READ"").c_str()) );; ```. ## Changes or fixes:. TDavixFile documentation. ## Checklist:. - [y] tested changes locally; - [y] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13499:61,access,accessing,61,https://root.cern,https://github.com/root-project/root/pull/13499,1,['access'],['accessing']
Security,# This Pull request:. Implements writing page checksums and checksum verification on read.; Page checksums are written on `SealPage`. They are verified on `LoadSealedPage()` and on `UnsealPage()`. Note that the page size stored in locators does not change. Pages flagged as having a checksum are serialized with additional trailing 8 bytes. Still some commit cleanup todo. Depends on #15767,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15789:46,checksum,checksums,46,https://root.cern,https://github.com/root-project/root/pull/15789,4,['checksum'],"['checksum', 'checksums']"
Security,"# This Pull request:. Setting `useHashMapForFind(true)` is not supported for RooArgLists; anymore, since hash-assisted finding by name hash can be ambiguous: a; RooArgList is allowed to have different elements with the same name. If one wants to use name-lookups on a RooArgList, one can just convert; it to a RooArgSet, which is cheap anyway (copy of a vector of pointers). Also inside RooFit itself, `useHashMapForFind` is only used for; RooArgSets, most notably the RooArgSet that contains all the components; of a RooWorkspace. Closes https://github.com/root-project/root/pull/9425.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16102:105,hash,hash-assisted,105,https://root.cern,https://github.com/root-project/root/pull/16102,2,['hash'],"['hash', 'hash-assisted']"
Security,"# This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:; ~~~~; cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d; /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed.; Subprocess aborted; gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1; gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'; gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2; gmake[1]: *** Waiting for unfinished jobs....; ~~~~. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11704:88,access,access,88,https://root.cern,https://github.com/root-project/root/pull/11704,1,['access'],['access']
Security,# This Pull request:. This patch was proposed by @vgvassilev on mattermost. When building with a macOS SDK before 12.0 and running with 12.0+ the; validation of private modulemaps fails due to a change in layout. This; change disables the check when DisablePCHValidation is active. See these bug reports:; * https://root-forum.cern.ch/t/conda-root-and-macos-12-reprise/49135/5; * https://github.com/conda-forge/root-feedstock/issues/149; * https://github.com/conda-forge/root-feedstock/issues/167. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10555:147,validat,validation,147,https://root.cern,https://github.com/root-project/root/pull/10555,1,['validat'],['validation']
Security,"# This Pull request:. Updates the binary format to release candidate 2. The changes are result of the RNTuple design workshop. The changes improve forward compatibility, scalability, and design limits. **Note**: I reverted the removal of the compression settings per column and cluster from the page list. We concluded to remove the settings based on the assumption that this information would only be useful for reporting, and for reporting it is acceptable to check the pages directly. However, meanwhile I realized another use case: scheduling decision based on the compression algorithm. We may decide to perform decompression on an accelerator based on the algorithm. In addition, the overhead after compression is low, [<1% of the size of footer + page list](https://docs.google.com/spreadsheets/d/17jGTCO90nzYr3Ktevq2DBn1DpEQLqzVGy3Uuy3oKtMA/edit?usp=sharing). ## Changes or fixes:. - Add a document version to the RNTuple binary format specification; - Add format version to RNTuple anchor; - Make all sizes in the anchor 64bit wide; - Remove individual versioning from envelopes; - Use 64bit xxhash3 for anchor and envelope checksums (replaces crc32); - Allow for 64bit wide envelopes and frames; - Clarify use of feature flag; - Add minimum entry and entry span to cluster group records; - Move cluster summaries into the page lists; - Enlarge switch column to 96bit. ## Checklist:. - [X] tested changes locally; - [X] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13779:1133,checksum,checksums,1133,https://root.cern,https://github.com/root-project/root/pull/13779,1,['checksum'],['checksums']
Security,# This Pull request:; * Add server status info; * Corrections in accessing table expression for derived classes; * Enable navigation to Lego view,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9005:65,access,accessing,65,https://root.cern,https://github.com/root-project/root/pull/9005,1,['access'],['accessing']
Security,"# This Pull request:; - Allows users to set/access the floating point precision when writing GDML.; Setter/Getter was already present, but was moved to public visibility. ## Changes or fixes:; More flexibility writing GDML files. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11890:44,access,access,44,https://root.cern,https://github.com/root-project/root/pull/11890,1,['access'],['access']
Security,# This Pull request:; Adds a GitHub Actions workflow that runs clang-format on pull requests. Could be extended with jobs to also run the clang-tidy checks that Travis currently runs. ## Changes or fixes:; - Adds a GH Actions workflow that runs on pull requests; - Modifies one line of the format_script.sh so that both Travis and GH Actions can run it.; - Modifies the .travis.yml to pass in the base ref SHA hash to the format_script.sh. ## Checklist:. - [x] tested changes locally (see https://github.com/roofit-dev/root/pull/23); - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8530:410,hash,hash,410,https://root.cern,https://github.com/root-project/root/pull/8530,1,['hash'],['hash']
Security,"# This Pull request:; Adds a new flag to CompileMacro, ""h"". ## Changes or fixes:; This new functionality allows not to rebuild the macro even if the file is newer than the library based on a hash built for the macro and its name. This helps distributed execution, providing a clean way to augment python analyses with accelerated functions in C++ and compiled when the worker cannot be setup but just individual tasks. ## Checklist:. - [v] tested changes locally; - [v] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14067:191,hash,hash,191,https://root.cern,https://github.com/root-project/root/pull/14067,1,['hash'],['hash']
Security,# This Pull request:; Adds the Max ONNX Operator and the corresponding unit tests to validate the code. - [X] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11198:85,validat,validate,85,https://root.cern,https://github.com/root-project/root/pull/11198,1,['validat'],['validate']
Security,"# This Pull request:; Choosing an appropriate color scheme is essential for making results easy to understand and; interpret. Factors like colorblindness and converting colors to grayscale for publications; can impact accessibility. Furthermore, results should be aesthetically pleasing. The following; three color schemes, recommended by M. Petroff in [arXiv:2107.02270v2](https://arxiv.org/pdf/2107.02270); and available on [GitHub](https://github.com/mpetroff/accessible-color-cycles); under the MIT License, meet these criteria. ## Changes or fixes:; - Implement the new three colors scheme in TColor.cxx et RTypes.h; - Add 3 missing colors (kBrown, kGrape and kAsh); - Automaticallically set the name of a new color to its hexadecimal value; - Implement two new tutorials illustrating these new color schemes; - Update the doc; - Improve the dark and bright colors management. Modify the documentation accordingly. ## Checklist:. - [X] tested changes locally; - [X] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16348:218,access,accessibility,218,https://root.cern,https://github.com/root-project/root/pull/16348,2,['access'],"['accessibility', 'accessible-color-cycles']"
Security,"# This Pull request:; Fixing a crash in HistoToWorkspaceFactoryFast.cxx where a parameter that was globally set to be constant was not found a given region, but the code was still accessing the parameter even when it was nullptr. . ## Changes or fixes:; Now the parameter is set to constant only when found in a given region. Also demoting the error to warning as this does not always indicate a wrong setup. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #14225",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14249:180,access,accessing,180,https://root.cern,https://github.com/root-project/root/pull/14249,1,['access'],['accessing']
Security,"# This Pull request:; Makes changes to ROOT v7 in order to comply with the API for DAOS 2.0.x, affecting the libraries `RPageStorageDaos`, `RDaos` and `libdaos_mock`, as well as the `ntuple_storage_daos` test suite. ## Changes or fixes:; - As of DAOS 2.0, pool service replica ranks are not longer specified in DAOS URIs. Thus, `daos_pool_connect` now forgoes the `svc_rank_list` argument.; - Container addresses follow the simplified pattern `daos://($pool)/($container)`. ; - `RPageStorageDaos` consequently drops parsing enforcement of the previous pattern.; - DAOS 2.0 introduced support for creating pools and containers from a label that is then hashed internally as a UUID. Pool and containers are now identifiable by user-provided labels of up to 127 characters (alphanumeric, colon, period, hyphen or underscore) or by 36-character UUIDs. Labels that match a UUID pattern are explicitly forbidden. ; - `RDaos` now only supports container creation from user-supplied labels (via `daos_cont_create_with_label`), due to deprecated usage of `daos_cont_create` with user-supplied UUIDs. However, existing containers may still be opened by their UUIDs. ; - `RPool` and `RContainer` maintain a copy of valid labels (when supplied) and UUIDs (after successfully opening pools and containers respectively); - Generation of object IDs in `RDaos`: new redundancy, sharding and object type flags; `daos_obj_generate_oid` replaces `daos_obj_generate_id`. ; - The `libdaos_mock` library is updated in lockstep.; - RNTuple backend testing is updated to follow the DAOS 2.0 URI pattern, using labels for default test pool and containers. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10720:652,hash,hashed,652,https://root.cern,https://github.com/root-project/root/pull/10720,1,['hash'],['hashed']
Security,"# This Pull request:; The `RooLagrangianMorphFunc` loads its input objects from a nested set of `TFolders` stored in a `TFile`. ; This MR adds protection (inspired by [ROOT-9275](https://sft.its.cern.ch/jira/browse/ROOT-9275) to avoid memory leaks in the initialisation of the `RooLagrangianMorphFunc`, which for large `RooFit` workspaces with many morphing functions can otherwise become unfeasible to use. . ## Changes or fixes:; - add a `cleanUpFolder` helper method to an existing anoymous namespace to `RooLagrangianMorphFunc.cxx`, which ensures ownership is enabled for `TFolder`s loaded from `TFile`s and optionally deletes the folders after setting them up ; - add a templated `loadFromFileResidentFolder` method to the same anonymous namespace in `RooLagrangianMorphFunc.cxx`, refactoring the procedure of loading an object from a nested `TFolder` structure that was previously performed in various locations in the class. The method exploits the `cleanUpFolder` method to prevent memory leaks in the access procedure. . ## Checklist:. - [ x ] tested changes locally - confirmed leak rate massively reduced in local testing. Draft test script (not yet merged) provided by @rahulgrit retains same output as before the changes; - [ ] updated the docs (if necessary) - no changes to user-accessible code. Inline doxygen documentation of new methods. . Tagging @rahulgrit @guitargeek",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9717:1010,access,access,1010,https://root.cern,https://github.com/root-project/root/pull/9717,2,['access'],"['access', 'accessible']"
Security,"# This Pull request:; avoids throwing an exception when creating the descriptor for an RNTuple containing an unknown column type. We want to support this case for forward compatibility. Also adds a unit test testing this specific case.; Some dedicated code needs to be added to the internals of RNTuple to support this kind of test case, but it's not exposed to the user. ## Remarks; Currently the test just checks that we can read back the descriptor. A future PR will add a ""fwd compatibility mode"" to the read options that'll allow a user to reconstruct the model skipping over fields containing unknown column types. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16516:351,expose,exposed,351,https://root.cern,https://github.com/root-project/root/pull/16516,1,['expose'],['exposed']
Security,# This Pull request:; implements access to some cpu information via gSystem->GetSysInfo. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #13128,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13129:33,access,access,33,https://root.cern,https://github.com/root-project/root/pull/13129,1,['access'],['access']
Security,"# This Pull request:; refactors RNTupleMerger to properly support late model extension.; The ""Union"" merging mode is added, allowing the merger to late-model-extend the destination to include all the fields of the input ntuples (instead of ignoring unknown fields / complaining when models don't match).; Likewise, the ""Strict"" merging mode is added that checks that all inputs have the exact same structure.; By default, the old behavior (named ""Filter"") is used. To better compare the RNTuples structures, the merging logic is now more properly considering the fields of each input, rather than just the columns as it was previously. This also allows for more descriptive messages to the user if some mismatch is found. NOTE: the `RNTupleMerger::Merge` function now returns a RResult instead of throwing exceptions on error. ## TODO; - the new merging modes should be exposed to hadd. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16080:870,expose,exposed,870,https://root.cern,https://github.com/root-project/root/pull/16080,1,['expose'],['exposed']
Security,"## Describe the bug; I store a custom event class in a TTree. Some of the members of the class are arrays (c-style). Accessing the array members works for the first time the GetEntry() is called, but subsequent accesses result in segmentation faults. I am using the ""old"" way of reading the tree (with SetBranchAddress). . One possible workaround might be to use std::array instead of c-style arrays, although I have not fully tested if this works. . ## Expected behavior; Array members of objects in TTrees are accessible via PyROOT as was the case before 6.22. . ## To Reproduce. I attached a MWE (really a minimal failing example), including a script to build/generate a tree/run the offending python scripts (faiing.sh): [mwe.tar.gz](https://github.com/root-project/root/files/5286101/mwe.tar.gz). The gist is that the event here is a simple class: ; ```. #ifndef _mwe_event_h; #define _mwe_event_h. #include ""TObject.h"" ; #include <array>. class MWEEvent ; {. public: ; MWEEvent() { iev =-1; bar=-1; foo[0] =-1; foo[1]=-1; } . // workaround for not being able to access foo directly ; double get_foo(int i) const { return foo[i]; } . int iev; ; double bar; ; double foo[2]; ; virtual ~MWEEvent() { ; } . ClassDef(MWEEvent,1);; }; ; ```. A tree of these objects can be read with PyROOT fine if only the scalar members are touched, or the getter is used:. ```; import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); ; t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): ; t.GetEntry(i); ; print (ev.iev) ; print (ev.bar) ; print (ev.get_foo(0)); print (ev.get_foo(1)); ```. But if you try to access the array member directly (as used to work), it does not work:; ```; import ROOT . ROOT.gSystem.Load(""build/libmwe.so"") . f = ROOT.TFile(""out.root""); ; t = f.Get(""tree""); . ev = ROOT.MWEEvent() . t.SetBranchAddress(""event"",ev) . for i in range(10): ; t.GetEntry(i); ; print (ev.iev) ; print (ev.bar) ; print (ev.foo[0]); print (",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6468:117,Access,Accessing,117,https://root.cern,https://github.com/root-project/root/issues/6468,3,"['Access', 'access']","['Accessing', 'accesses', 'accessible']"
Security,"## Profiler for inspecting C++ models generated with SOFIE; Added a new class called `RModelProfiler` that allows to generate an hardcoded C++ header that automatically measures the time that each operator took during one or more runs of the `infer` function. In other words it profiles the model by means of _code instrumentation_. ### Under the hood; `RModelProfiler` is a friend class of `RModel` that initializes a private reference to an existing `RModel` object.; When the code is generated through `RModelProfiler::Generate()` (rewritten to inject profiling code in between operators), the latter access the private member `fGC`, thus generating the model directly into the `RModel` object.; In the generated code, profiling info such as time (microseconds) are saved in `::profiler_results`. ### Affine changes; - Added public member `std::string name` in `ROperator` (e.g. Gemm_1, ..).; - Changed `make_ROperator()` so that is assigns `name` of the operator with the one it had within the original ONNX model.; - Added an example of how to use the profiler in `README.md`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8957:548,inject,inject,548,https://root.cern,https://github.com/root-project/root/pull/8957,2,"['access', 'inject']","['access', 'inject']"
Security,## This Pull request:; * Add server status info; * Corrections in accessing table expression for derived classes; * Enable navigation to Lego view. It is a correction to #9005,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9013:66,access,accessing,66,https://root.cern,https://github.com/root-project/root/pull/9013,1,['access'],['accessing']
Security,"### Check duplicate issues. - [ ] Checked for duplicates. ### Describe the bug. https://github.com/root-project/root/blob/master/core/foundation/inc/ROOT/span.hxx#L153. Manipulating in any way the std namespace should not be done, this is why namespace exists in the first place, to separate things. In this case this will collide with https://en.cppreference.com/w/cpp/container/span. ### What is the expected behaviour?. If you want / need to use a span adaptor and you can not use c++20 do not inject in the std namespace but use another one, this is why namespace exists!. ### How to reproduce?. https://github.com/root-project/root/blob/master/core/foundation/inc/ROOT/span.hxx#L153 is violating c++ guidelines. ### ROOT version. master. ### How did you install ROOT?. irrelevant. ### Which operating system are you using?. irrelevant. ### Additional context. https://github.com/root-project/root/blob/master/core/foundation/inc/ROOT/span.hxx#L153 is violating c++ guidelines",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13042:497,inject,inject,497,https://root.cern,https://github.com/root-project/root/issues/13042,1,['inject'],['inject']
Security,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. As seen in https://lcgapp-services.cern.ch/root-jenkins/job/roottest-pullrequests-build/14222/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_dependency_versions/. this test fails because of missing access to `scikit-learn` and `xgboost`. Are those hard requirement of ROOT? . If they are, why does the configuration succeed?. If they are not, why does the test fail?. ### Reproducer. ```; test_versions (dependency_versions.DependencyVersions); Test the versions of the installed packages versus the ... Attempting requirement 'numpy>=1.4.1'; Attempting requirement 'scikit-learn'; Attempting requirement 'xgboost'; Attempting requirement 'numba>=0.47.0; python_version < ""3.11""'; Attempting requirement 'numba>=0.57.0; python_version >= ""3.11"" and python_version < ""3.12""'; Attempting requirement 'cffi>=1.9.1'; Attempting requirement 'notebook>=4.4.1'; Attempting requirement 'metakernel>=0.20.0'; Ignore dependency pyspark>=2.4; Ignore dependency dask>=2022.08.1; python_version >= ""3.8""; Ignore dependency distributed>=2022.08.1; python_version >= ""3.8"". Full path to requirements.txt: /home/sftnight/build/workspace/roottest-pullrequests-build/root/requirements.txt; Details about not matched dependencies:; - The 'scikit-learn' distribution was not found and is required by the application; - The 'xgboost' distribution was not found and is required by the application; ERROR; ```. ### ROOT version. master. ### Installation method. Jenkins/CI. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15212:304,access,access,304,https://root.cern,https://github.com/root-project/root/issues/15212,1,['access'],['access']
Security,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. From [ROOT-9699](https://its.cern.ch/jira/browse/ROOT-9699). ### Reproducer. When trying to access the list of public methods of a class in python I observe; ```; RuntimeWarning: failed offset calculation between TList and TViewPubFunctions; ```. For me this can simply be reproduced with. ```; python3 -c ""import ROOT; ROOT.TObject.Class().GetListOfAllPublicMethods()""; ```. ### ROOT version. master on Mac and 6.32 on Alma9. ### Installation method. from sources. ### Operating system. all, I fear. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15919:167,access,access,167,https://root.cern,https://github.com/root-project/root/issues/15919,1,['access'],['access']
Security,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. From https://its.cern.ch/jira/browse/ROOT-10196. Since boundary check of TH1D::fArray is not performed in TH1D::AddBinContent, the method can cause memory issues.  . I understand that TH1::AddBinContent is very frequently called from TH1::Fill and thus I guess the developers do not want to repeat a boundary check again in TH1::AddBinContent. But TH1::SetBinContent does a boundary check and users like me expect that TH1::AddBinContent also checks the TH1::fArray boundary. ```cpp; void test() {}; int nbins = 500;;  TH1D* h = new TH1D(""h"", """", nbins, 0, nbins);.   for(int j = 0; j < 1000; j++){;     int bin = h->GetBin(500);;     for(int i = bin; i < bin + 100; i++){;       h->AddBinContent(i, 1);;     };   }; ```; ```; $ root; root [0] .L test.C; root [1] for(int i = 0; i < 100; i++) test();; Warning in <TROOT::Append>: Replacing existing TH1: h (Potential memory leak).; Warning in <TROOT::Append>: Replacing existing TH1: h (Potential memory leak).; Warning in <TROOT::Append>: Replacing existing TH1: h (Potential memory leak).; Warning in <TROOT::Append>: Replacing existing TH1: h (Potential memory leak).; Warning in <TROOT::Append>: Replacing existing TH1: h (Potential memory leak).; Warning in <TROOT::Append>: Replacing existing TH1: h (Potential memory leak).; root.exe(67870,0x10be0f5c0) malloc: Incorrect checksum for freed object 0x7fedb5190a00: probably modified after being freed.; Corrupt value: 0x408f400000000000}}{{root.exe(67870,0x10be0f5c0) malloc: *** set a breakpoint in malloc_error_break to debug; ```. ### Reproducer. As per the description. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14575:1403,checksum,checksum,1403,https://root.cern,https://github.com/root-project/root/issues/14575,1,['checksum'],['checksum']
Security,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi root team,. We are the ATLAS VHbbcc analysis team and we are testing with the new root preview version v6.32-rc1 since it has the bug fix related to the issue: https://root-forum.cern.ch/t/cling-jit-session-error-cannot-allocate-memory/56744. However we met some different behavior in this version compared to the previous 6.32/02 that we use. . 1) The pyROOT, we got a different type when access the RooCategory allowedState name. In the new version, it returns `cppyy.gbl.std.string` object, previously it is a python `str` object. May I ask it is designed or a bug? ; 2) We found this because it crushes when we tried to pass it to `re.findall()` function. But according to the cppyy document, the cppyy should convert `cppyy.gbl.std.string` to `str` automatically when the `str` is needed. So what is the reason for not being converted automatically?; 3) We also found that it takes much longer time to run the fit using the new root version, in our case, a 1-hour fit now takes 3-hours to finish. Is there any hint what may be the cause?. Thanks a lot for your time. Yuhao. ### Reproducer. ```; import ROOT. g = ROOT.TFile.Open(""/afs/cern.ch/work/y/yuhao/public/test.root""); ws=g.combined; simpdf=ws.pdf(""simPdf""); channelCat = simpdf.indexCat(); print(type(channelCat.begin().first)); ```. ### ROOT version. 6.32-rc1. ### Installation method. build from source. ### Operating system. Linux el9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15479:468,access,access,468,https://root.cern,https://github.com/root-project/root/issues/15479,1,['access'],['access']
Security,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi,. starting the webgui (`new TBrowser`) opens a chromium window which complains:; ```; Your file couldn’t be accessed; It may have been moved, edited, or deleted.; ERR_FILE_NOT_FOUND; ```; I guess this corresponds to the following process:; ```; axel 17508 3604 4 15:51 pts/0 00:00:01 /snap/chromium/2950/usr/lib/chromium-browser/chrome --password-store --disable-features=TFLiteLanguageDetectionEnabled --window-size=1200,700 --new-window --app=file:///tmp/root_start_t9pNYd.html; ```. Note that this is a snap package; the browser might not be allowed to access files in `/tmp` as per https://forum.snapcraft.io/t/can-browsers-open-local-files/3016. (*I* can work around this, but I thought it'd still be worthwhile to report this.). Cheers, Axel. ### Reproducer. `new TBrowser` with web gui. ### ROOT version. master. ### Installation method. source. ### Operating system. Ubuntu 24.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16488:186,access,accessed,186,https://root.cern,https://github.com/root-project/root/issues/16488,3,"['access', 'password']","['access', 'accessed', 'password-store']"
Security,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. See the report on the forum https://root-forum.cern.ch/t/accessing-attributes-of-distributed-rdataframe-instance-after-filter-and-define-are-called/59261. This is simply due to distributed RDataFrame not keeping track of the defined columns. In general, the inner, local RDataFrame object is really just an empty shell for now. ### Reproducer. See the report. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15442:132,access,accessing-attributes-of-distributed-rdataframe-instance-after-filter-and-define-are-called,132,https://root.cern,https://github.com/root-project/root/issues/15442,1,['access'],['accessing-attributes-of-distributed-rdataframe-instance-after-filter-and-define-are-called']
Security,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The dataset produces by RooFit's built-in generate method appears to have some buggy behaviour, exhibited at least in its behaviour of the `reduce` method on it. ; The xRooFit built-in generate method's dataset does not exhibit these issues. ### Reproducer. ```; {; using namespace ROOT::Experimental::XRooFit;; // create a two-channel model; xRooNode w(""RooWorkspace"",""combined"",""my workspace"");; w[""simPdf/SR""]->SetXaxis(1,0,1);; w[""simPdf/CR""]->SetXaxis(1,0,1);; w[""simPdf/SR/bkg""]->SetBinContent(1,20);; w[""simPdf/CR/bkg""]->SetBinContent(1,20);. // xRooFit's generate method works fine:; auto toy = w[""simPdf""]->generate();; std::cout << toy.get<RooAbsData>()->reduce(""channelCat==0"")->sumEntries() << "" vs "" << toy.get<RooAbsData>()->sumEntries(""channelCat==0"") << std::endl;. // but RooFit's generate method produces a buggy dataset:. // extract list of obs and access RooAbsPdf:; RooArgSet obs( *w.obs().get<RooArgList>() );; auto pdf = w[""simPdf""]->get<RooAbsPdf>();. // call RooFit's generate method:; auto ds = pdf->generate(obs,RooFit::Extended());. std::cout << ds->reduce(""channelCat==0"")->sumEntries() << "" vs "" << ds->sumEntries(""channelCat==0"") << std::endl;; ; }; ```. ### ROOT version. 6.32, possibly 6.30 as well. ### Installation method. source. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15744:943,access,access,943,https://root.cern,https://github.com/root-project/root/issues/15744,1,['access'],['access']
Security,### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When RDataFrame encouters:. ```; Error in <TNetXNGSystem::GetDirEntry>: Unable to give access - user access restricted - unauthorized identity used ; Permission denied; ```. Python exits due to the segfault when I would expect it to raise an exception. ### Reproducer. See: https://github.com/root-project/root/issues/16475. ### ROOT version. 6.32.2. ### Installation method. sft.cern.ch. ### Operating system. Linux. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16502:162,access,access,162,https://root.cern,https://github.com/root-project/root/issues/16502,2,['access'],['access']
Security,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When a class is schema evoled (see reproducer) using a renaming rules. At least on line 1258 of `StreamerInfoReadBuffer.cxx`:; ```; subinfo = (TStreamerInfo*)newProxy->GetValueClass()->GetConversionStreamerInfo( oldProxy->GetValueClass(), vClVersion );; ```. is not properly handling the case whether the classes are unversion and thus the search ought to be done using the checksum rather than the class version. ### Reproducer. ```; template <typename T>; struct Wrapper; {; bool present = true;; T obj;; };. struct MatchedCSCSegment; {; float someValue = 0.0;. MatchedCSCSegment(float in = 0.0) : someValue{in} {}. // The simeple update fails if the class version is not set.; ClassDef(MatchedCSCSegment, 5);; };. struct CSCSegment; {; float someValue;. operator MatchedCSCSegment(); {; return MatchedCSCSegment{someValue};; }. #ifdef OLD_VERSION; std::vector<CSCSegment> theDuplicateSegments;; ClassDef(CSCSegment, 3);; #else; std::vector<MatchedCSCSegment> theDuplicateSegments;. ClassDef(CSCSegment, 4);; #endif; };; ```; and rule:; ```; #pragma read sourceClass=""CSCSegment"" targetClass=""MatchedCSCSegment""; ```. ### ROOT version. master. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14491:449,checksum,checksum,449,https://root.cern,https://github.com/root-project/root/issues/14491,1,['checksum'],['checksum']
Security,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When accessed after the generating RNTupleReader is gone, the RNTupleView segfaults. It should fail more gracefully. ### Reproducer. ```; TEST(RNTuple, ViewPastLifetime); {; FileRaii fileGuard(""test_ntuple_view_pastlifetime.root"");. auto model = RNTupleModel::Create();; auto fieldPt = model->MakeField<float>(""pt"", 42.0);; {; auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl"", fileGuard.GetPath());; writer->Fill();; }. auto reader = RNTupleReader::Open(""ntpl"", fileGuard.GetPath());; EXPECT_EQ(1u, reader->GetNEntries());; auto viewPt = reader->GetView<float>(""pt"");; reader.reset();; EXPECT_FLOAT_EQ(42.0, viewPt(0));; }; ```. ### ROOT version. master. ### Installation method. n/a. ### Operating system. n/a. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16489:80,access,accessed,80,https://root.cern,https://github.com/root-project/root/issues/16489,1,['access'],['accessed']
Security,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. `TTreeFormula` (and thus by extend `TTree::Scan` and `TTree::Draw`) does not handle well (under-statement) cases of schema evolution that involves renaming a class. See the reproducer for more details. We need to verify if whether `TTreeReader` and thus `RDataFrame` suffer from the same issue. ### Reproducer. [conversion.tgz](https://github.com/root-project/root/files/14105386/conversion.tgz); run:; ```; root.exe -b -l -q writedata.C+; # Read with the 'old' schema, the result is accurate.; root.exe -b -l -q oldread.C+; # Read with the complex rule ; TTree::Scan is broken; root.exe -b -l -q readwithrule.C+; # Read with the renaming rule ; TTree::Scan only works for accessing the inner content in the case of a split branch.; root.exe -b -l -q readwithrenaming.C+; ```. The correct output for the full object printing part of the reading script is:; ```; Content of branch seg_split.; Wrapper; CSCSegment::someValue = 1; CSCSegment::theDuplicateSegments size = 2; MatchedCSCSegment::someValue = 2; MatchedCSCSegment::someValue = 3; Content of branch seg_unsplit.; Wrapper; CSCSegment::someValue = 1; CSCSegment::theDuplicateSegments size = 2; MatchedCSCSegment::someValue = 2; MatchedCSCSegment::someValue = 3; ```. The expected result of the `TTree::Scan` part of the reading script is:. ```; ******************************************************************; * Row * Instance * seg_split.obj.theDuplicateSegments@.size *; ******************************************************************; * 0 * 0 * 2 *; ******************************************************************; **************************************************************************************; * Row * Instance * seg_split.obj.theDuplicateSegments.someValue *; **************************************************************************************; * 0 * 0 * 2 *; * 0 * 1 * 3 *; **********************************************************************",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14493:748,access,accessing,748,https://root.cern,https://github.com/root-project/root/issues/14493,1,['access'],['accessing']
Security,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. ```; Processing /Users/pcanal/root_working/code/master/tutorials/fit/exampleFit3D.C...; In file included from input_line_38:1:; /opt/build/root_builds/master-pr/include/Math/CladDerivator.h:25:10: fatal error: 'plugins/include/clad/Differentiator/Differentiator.h' file not found; #include <plugins/include/clad/Differentiator/Differentiator.h>; ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; input_line_39:4:1: error: use of undeclared identifier 'clad'; clad::hessian(TFormula____id13317627456646018083, ""p[0:2]"" );; ^; ```. This is due to `TFormula` seemingly unconditionally running:; ```; IncludeCladRuntime; from TFormula::GenerateHessianPar(; from TFormula::HessianPar; from GeneralHessianCalc<T>::Hessian; from GeneralHessianCalc<T>::IsAvailable(fFunc); from WrappedMultiTF1Templ<T>::HasParameterHessian(); from BasicFCNL::HasHessian; from ROOT::Fit::Fitter::DoInitMinimizer; ```. Note: The tutorials seems unrelated to Clad. ### Reproducer. disabled and run `ctest -R tutorial-fit-exampleFit3D`. With clad disabled, we get:; ```; Command: ""/Applications/CMake.app/Contents/bin/cmake"" ""-DCMD=/Users/pcanal/root_working/builds/master-pr/bin/root.exe^-b^-l^-q^/Users/pcanal/root_working/code/master/tutorials/fit/exampleFit3D.C"" ""-DSYS=/Users/pcanal/root_working/bu; ilds/master-pr"" ""-DENV=PATH=/Users/pcanal/root_working/builds/master-pr/bin::/Library/Frameworks/Python.framework/Versions/3.9/bin:/Library/Frameworks/Python.framework/Versions/3.9/bin:/Library/Frameworks/Python.framework/Versions/3; .8/bin:/Users/pcanal/bin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstra; p/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/opt/podman/bin#DYLD_LIBRARY_PATH=/Users/pcanal/root_working/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15091:915,HasH,HasHessian,915,https://root.cern,https://github.com/root-project/root/issues/15091,1,['HasH'],['HasHessian']
Security,"### Check duplicate issues. - [X] Checked for duplicates. ### Describe the bug. During parsing of the JSON file, the main keys ""samples"", are parsed in an alphabetical order. . For example, while parsing the JSON file: . '{; ""samples"": {; ""B"": {; ""trees"": [""subTree""],; ""files"": [""TestFileB.root""]; },; ""A"": {; ""trees"": [""subTree""],; ""files"": [""TestFileA.root""]; }; }; }'. the sample's A:`TestFileA.root` file will be accessed first, even though sample's B file should be accessed first according to the nominal ordering. The alphabetical ordering can lead to problems while the RDataFrame of interest has friend trees as the friend trees need to be aligned with the main TChain. . ### What is the expected behaviour?. The keys of the JSON file should be parsed according to the nominal ordering of the JSON file (non-alphabetical). . ### How to reproduce?. [JSON_ordering_issue.zip](https://github.com/root-project/root/files/11769777/JSON_ordering_issue.zip). Run `fromspec_ordering.py` with `spec.json`. . The output is `TestFileA.root` before `TestFileB.root`. ### ROOT version. 6.28. ### How did you install ROOT?. source. ### Which operating system are you using?. MacOS 13. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13037:418,access,accessed,418,https://root.cern,https://github.com/root-project/root/issues/13037,2,['access'],['accessed']
Security,"### Check duplicate issues. - [X] Checked for duplicates. ### Describe the bug. Trying to use `std::source_location` in a header exposed to cling result in an error. See, for example, https://gitlab.cern.ch/gaudi/Gaudi/-/issues/266#note_6757681, where we had to hide `source_location` to cling as a workaround (https://gitlab.cern.ch/gaudi/Gaudi/-/merge_requests/1455/diffs#afb7337014c145ecb07b8ea11c702bcae52ff226_29_28). ### What is the expected behaviour?. I expect to be able to use `std::source_location` in a header that I pass to cling to generate a dictionary. ### How to reproduce?. On lxplus9.cern.ch; ```; ❯ . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev4/Mon/x86_64-el9-gcc13-dbg/setup.sh ; ❯ root; ------------------------------------------------------------------; | Welcome to ROOT 6.28/05 https://root.cern |; | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jun 10 2023, 00:28:00 |; | From heads/v6-28-00-patches@v6-28-04-94-gb7de1efc73 |; | With g++ (GCC) 13.1.0 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. root [0] #include <source_location>; root [1] auto loc = std::source_location::current();; ROOT_prompt_1:1:17: error: 'source_location' is not a class, namespace, or enumeration; auto loc = std::source_location::current();; ^; ROOT_prompt_1:1:17: note: 'source_location' declared here; root [2] ; ```. ### ROOT version. v6-28-00-patches. ### How did you install ROOT?. LCG nightly builds in /cvmfs/sft-nightlies.cern.ch. ### Which operating system are you using?. Linux Alma 9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12993:129,expose,exposed,129,https://root.cern,https://github.com/root-project/root/issues/12993,1,['expose'],['exposed']
Security,"### Check duplicate issues. - [X] Checked for duplicates. ### Describe the bug. With ROOT v6-28-00-patches@v6-28-04-96-g9248a09 compiled with C++17 (**not** C++20) the code; ```cpp; #ifdef __has_include; #if __has_include(<span>); #include <span>; #endif; #endif; ```; (found in `range/v3/range/access.hpp`) causes an error in the interpreter:; ```; /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Thu/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-dbg/etc/cling/std.modulemap:312:10: error: module 'std.span' requires feature 'cplusplus20'; module ""span"" {; ```; Meaning that the interpreter thinks the header `<span>` exists, but it cannot be loaded. What I find very surprising too, is that (still without C++20) I can do:; ```; ❯ root; ------------------------------------------------------------------; | Welcome to ROOT 6.28/05 https://root.cern |; | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jun 13 2023, 00:22:00 |; | From heads/v6-28-00-patches@v6-28-04-96-g9248a09 |; | With g++ (GCC) 12.1.0 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. root [0] std::span<int> s; (std::span<int> &) {}; root [1] ; ```; which looks wrong to me. ### What is the expected behaviour?. `__has_include(<span>)` should evaluate to false in C++17 builds. ### How to reproduce?. from lxplus.cern.ch; ```; ❯ . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev4/Thu/x86_64-centos7-gcc12-dbg/setup.sh; ❯ root; ------------------------------------------------------------------; | Welcome to ROOT 6.28/05 https://root.cern |; | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jun 13 2023, 00:22:00 |; | From heads/v6-28-00-patches@v6-28-04-96-g9248a09 |; | With g++ (GCC) 12.1.0 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. root [0] #inc",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13032:295,access,access,295,https://root.cern,https://github.com/root-project/root/issues/13032,1,['access'],['access']
Security,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. A pyroot python program crashes when reading a TFile containing a TTree containing a TClonesArray. It appears to crash the second time it accesses the TClonesArray. This has started happening since moving to ROOT 6.32 on AlmaLinux 9.4. It worked fine with 6.20.04 running on Centos7. The library for accessing the TTree information was created using MakeProject. . ### Reproducer. This is the python code that crashes; ```; #!/usr/bin/env python3; import os; import ROOT; import argparse. parser = argparse.ArgumentParser(description='Analyse events.'); parser.add_argument(""inputfile""); parser.add_argument(""-o"",""--outputfile"",default=""Output.root"",help=""Name of output file""); args = parser.parse_args(). READEVENTANALYSISLIBRARY=ROOT.gSystem.Getenv(""READEVENTANALYSISLIBRARY"");; ROOT.gSystem.Load(READEVENTANALYSISLIBRARY);. globalRecon = ROOT.TChain(""ReconDir/Global""); globalRecon.AddFile(args.inputfile). OutputFile = ROOT.TFile(args.outputfile,""RECREATE"",""ND280 Analysis""); hTrackMomenta = ROOT.TH1F(""TrackMomenta"", ""Charged Track Momentum"", 100, 0, 1000.0). entries = globalRecon.GetEntries(); for entry in range(entries):; 	print("" entry = ""+str(entry)); 	ientry = globalRecon.LoadTree(entry); 	if ientry < 0:; 		break; 	nb = globalRecon.GetEntry(entry); 	if nb<=0:; 		continue; 	; 	for	pid in globalRecon.PIDs :; 		if(pid.Charge != 0) :; 			print("" charge is ""+str(pid.Charge)); 		#	hTrackMomenta.Fill(pid.FrontMomentum); OutputFile.Write(); OutputFile.Close(); ```. The crash traceback suggest this as the line causing the crash:. #7 0x00007fe963a68e9a in TBranchElement::ReadLeavesClones(TBuffer&) () from /home/aleph/ajf/t2k/root/lib/libTree.so; #8 0x00007fe963a60899 in TBranch::GetEntry(long long, int) () from /home/aleph/ajf/t2k/root/lib/libTree.so; #9 0x00007fe963a7326b in TBranchElement::GetEntry(long long, int) () from /home/aleph/ajf/t2k/root/lib/libTree.so; #10 0x00007fe963ad7300 in TTree::GetEntry(lo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16725:213,access,accesses,213,https://root.cern,https://github.com/root-project/root/issues/16725,2,['access'],"['accesses', 'accessing']"
Security,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. After following advice to transition from `genreflex` to `rootcling --genreflex`, we discovered that IO dictionaries generated for classes with transient (non-persistent) data members actually included stream information for those data members, in contrast both with the behavior of `genreflex` and our desire. ### Reproducer. 1. Download, unpack and `cd` into the top level directory of [rootcling-genreflex-transient-bug.tgz](https://github.com/root-project/root/files/12439967/rootcling-genreflex-transient-bug.tgz); 2. `./makeit good`; 3. `./makeit`. The output of the final `ROOT -b` command should be the same down to the checksum reported if the problem were not present. ### ROOT version. `ROOT 6.28/04@30598a8430`. ### Installation method. UPS. ### Operating system. SL7. ### Additional context. Compiled with GCC 13.1.0/C++20. May be related to the (insufficiently detailed) #13361.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13543:703,checksum,checksum,703,https://root.cern,https://github.com/root-project/root/issues/13543,1,['checksum'],['checksum']
Security,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. CMake complains. ```console; $ cmake ../root; CMake Error at CMakeLists.txt:20 (message):; ROOT must be built out-of-source.; Please see README/INSTALL for more information. -- Configuring incomplete, errors occurred!; ```. and exit with status 1 even when building out-of-source as instructed by `README/INSTALL`. ### Reproducer. 1. Run. ```sh; ssh <username>@lxplus8.cern.ch; git clone https://github.com/root-project/root.git; mkdir root-build.foo; cd root-build.foo; cmake ../root; ```. 2. See the error described above. ### ROOT version. Git branch: master; Git revision: 2ee691da61ca51e4dd857ac8c88f778948fb49a7. ### Installation method. Out-of-tree build using CMake 3. ### Operating system. LXPLUS8 (CentOS Stream 8, x86_64-linux). ### Additional context. * CMake version 3.20.2; * `/etc/os-release` content. ```; NAME=""Red Hat Enterprise Linux""; VERSION=""8.9 (Ootpa)""; ID=""rhel""; ID_LIKE=""fedora""; VERSION_ID=""8.9""; PLATFORM_ID=""platform:el8""; PRETTY_NAME=""Red Hat Enterprise Linux 8.9 (Ootpa)""; ANSI_COLOR=""0;31""; CPE_NAME=""cpe:/o:redhat:enterprise_linux:8::baseos""; HOME_URL=""https://www.redhat.com/""; DOCUMENTATION_URL=""https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8""; BUG_REPORT_URL=""https://bugzilla.redhat.com/"". REDHAT_BUGZILLA_PRODUCT=""Red Hat Enterprise Linux 8""; REDHAT_BUGZILLA_PRODUCT_VERSION=8.9; REDHAT_SUPPORT_PRODUCT=""Red Hat Enterprise Linux""; REDHAT_SUPPORT_PRODUCT_VERSION=""8.9""; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14159:1215,access,access,1215,https://root.cern,https://github.com/root-project/root/issues/14159,1,['access'],['access']
Security,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Calling `Show` on an RNTupleReader that contains friends raises the following exception:; ```; no type name specified for Field ntpl1 (unchecked RResult access!); At:; static ROOT::Experimental::RResult<std::unique_ptr<ROOT::Experimental::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&, const std::string&) [/home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:493]; static ROOT::Experimental::RResult<std::unique_ptr<ROOT::Experimental::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&) [/home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:485]; ```. The reason for this is that RNTuple friends are (virtually) represented as untyped record fields. One solution could be to create an artificial `RRecordField` to bind the fields to, in a similar fashion to what is done here: https://github.com/root-project/root/blob/f3fc75b2078cec442c0f6060d2bfd4e86cf83b06/tree/ntuple/v7/src/RNTupleDescriptor.cxx#L65-L77. With the reproducer below this would result in the following:; ``` ; // Show; {; ""ntpl1"": {; ""foo"": 3.14; },; ""ntpl2"": {; ""bar"": 2.72; }; }. // PrintInfo; ************************************ NTUPLE ************************************; * N-Tuple : _friends *; * Entries : 10 *; ********************************************************************************; * Field 1 : ntuple1 *; * Field 1.1 : x (std::int32_t) *; * Field 2 : ntuple2 *; * Field 2.1 : y (std::int32_t) *; ********************************************************************************; ```; As a quick fix this is fine, but it might be nicer to have a representation that better respects the meaning of befriended RNTuples. ### Reproducer. ```cpp; void show_friends() {; {; auto model = RNTupleModel::Create();; auto foo = model->MakeField<float>(""foo"");; auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl1"", ""ntpl1.root"");; *foo = 3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14748:228,access,access,228,https://root.cern,https://github.com/root-project/root/issues/14748,1,['access'],['access']
Security,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Can't install RooFit because of RooJSON. ```; /opt/root/src/roofit/hs3/src/JSONFactories_RooFitCore.cxx: In member function ‘virtual bool {anonymous}::RooExpPolyStreamer::exportObject(RooJSONFactoryWSTool*, const RooAbsArg*, RooFit::Detail::JSONNode&) const’:; /opt/root/src/roofit/hs3/src/JSONFactories_RooFitCore.cxx:448:25: error: ‘const class RooExpPoly’ has no member named ‘x’; did you mean ‘RooRealProxy RooExpPoly::_x’? (not accessible from this context); 448 | elem[""x""] << pdf->x().GetName();; | ^; In file included from /opt/root/src/roofit/hs3/src/JSONFactories_RooFitCore.cxx:20:; /opt/root/install/include/RooExpPoly.h:37:17: note: declared protected here; 37 | RooRealProxy _x;; | ^~; /opt/root/src/roofit/hs3/src/JSONFactories_RooFitCore.cxx:453:32: error: ‘const class RooExpPoly’ has no member named ‘lowestOrder’; did you mean ‘int RooExpPoly::_lowestOrder’? (not accessible from this context); 453 | for (int i = 0; i < pdf->lowestOrder(); ++i) {; | ^~~~~~~~~~~; /opt/root/install/include/RooExpPoly.h:39:8: note: declared protected here; 39 | int _lowestOrder;; | ^~~~~~~~~~~~; /opt/root/src/roofit/hs3/src/JSONFactories_RooFitCore.cxx:456:36: error: ‘const class RooExpPoly’ has no member named ‘coefList’; did you mean ‘RooListProxy RooExpPoly::_coefList’? (not accessible from this context); 456 | for (const auto &coef : pdf->coefList()) {; | ^~~~~~~~; /opt/root/install/include/RooExpPoly.h:38:17: note: declared protected here; 38 | RooListProxy _coefList;; | ^~~~~~~~~; make[2]: *** [roofit/hs3/CMakeFiles/RooFitHS3.dir/build.make:132: roofit/hs3/CMakeFiles/RooFitHS3.dir/src/JSONFactories_RooFitCore.cxx.o] Error 1; ```. Tried to change method names to those with underscores, got another error about a protected field:. ```; /opt/root/src/roofit/hs3/src/JSONFactories_RooFitCore.cxx: In member function ‘virtual bool {anonymous}::RooExpPolyStreamer::exportObject(RooJSONFactoryWSTool*, const RooA",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13101:508,access,accessible,508,https://root.cern,https://github.com/root-project/root/issues/13101,2,['access'],['accessible']
Security,### Check duplicate issues. - [X] Checked for duplicates. ### Description. During https://github.com/root-project/root/pull/14669 a new test was added which tests `std::set` in PyROOT. This exposed an issue where creating a set in PyROOT on the windows builds fails. A conditional windows test skip was added in `bindings/pyroot/pythonizations/test/CMakeLists.txt` to fix this (where the `stl_set.py` is added). Whenever this issue is resolved this test skip should also be removed. - [ ] Remove windows test skip for `stl_set.py`. ### Reproducer. `s = ROOT.std.set['int']()` (in windows). ### ROOT version. 6.31/01 (dev). ### Installation method. Build from source. ### Operating system. Windows. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14710:190,expose,exposed,190,https://root.cern,https://github.com/root-project/root/issues/14710,1,['expose'],['exposed']
Security,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. For a class with read rules, data members may report wrong offsets (see reproducer). ### Reproducer. [infobug.tar.gz](https://github.com/user-attachments/files/15884205/infobug.tar.gz). In the attached reproducer, the output of `offset` is. ```; $ ./offset ; 0; 8; 0. StreamerInfo for class: Event, version=3, checksum=0x153ea7a; Event@@3 @@alloc offset= 0 type=1001 ; float pt offset= 8 type= 5 (cached) ; float pt offset= 0 type= 5 (write) ; Event@@3 @@dealloc offset= 0 type=1002 ; i= 0, @@alloc type=1001, offset= 0, len=1, method=0; i= 1, pt type= 5, offset= 8, len=1, method=0 [cached]; i= 2, pt type= 5, offset= 0, len=1, method=0 [write]; i= 3, @@dealloc type=1002, offset= 0, len=1, method=0; ```. Demonstrating that `pt` is reported with an offset of 8 by the streamer info element. The wrong offset in the streamer info seems to stem from `TStreamerInfo::BuildOld`, which adds a second, faulty cached member to the list of streamer info elements. ### ROOT version. master. ### Installation method. From sources. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15877:385,checksum,checksum,385,https://root.cern,https://github.com/root-project/root/issues/15877,1,['checksum'],['checksum']
Security,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello,. The program I wrote would core-dump at the end of running. Using Valgrind, I found an error regarding an `Invalid write of size 1` from `gSystem->CopyFile()`.`. Part of the Valgrind stacktrace is shown below; ```; ==3160809== Invalid write of size 1; ==3160809== at 0x484E803: memmove (vg_replace_strmem.c:1400); ==3160809== by 0x62339F3: TString::Replace(int, int, char const*, int) (in /cvmfs/atlas.cern.ch/repo/sw/software/24.2/AnalysisBaseExternals/24.2.27/InstallArea/x86_64-el9-gcc13-opt/lib/libCore.so); ==3160809== by 0x634451C: TUnixSystem::AccessPathName(char const*, EAccessMode) (in /cvmfs/atlas.cern.ch/repo/sw/software/24.2/AnalysisBaseExternals/24.2.27/InstallArea/x86_64-el9-gcc13-opt/lib/libCore.so); ==3160809== by 0x6342063: TUnixSystem::CopyFile(char const*, char const*, bool) (in /cvmfs/atlas.cern.ch/repo/sw/software/24.2/AnalysisBaseExternals/24.2.27/InstallArea/x86_64-el9-gcc13-opt/lib/libCore.so); ==3160809== by 0x27AC5109: TQPathManager::~TQPathManager() (TQPathManager.cxx:461); ```. Line ` TQPathManager::~TQPathManager() (TQPathManager.cxx:461)` was; ```; gSystem->CopyFile(localPath.Data(), targetPath.Data(), kTRUE);; ```. Where `localPath` and `targetPath` were strings holding locations of files.; Example (These files are on different volumes):; `localPath.Data() = ""/tmp/mlyukova/3167235_4_3475779823.html""`; `targetPath.Data() = ""/eos/home-m/mlyukova/Analysis/HWWCAFCore_24/HWWAnalysis/HWWAnalysisCode/share/results/R22-test/MCValidation/NTuples/cutflows/c21-mm-processes_bbmm-cutflow-cuts.html"" `. I have replaced this line with `copy` from the library `<filesystem>`; ```; std::filesystem::copy(localPath.Data(), targetPath.Data());; ```. Now my program no longer core dumps, and Valgrind no longer complains of an invalid write of size 1. ### Reproducer. This code is part of a large project. If a self-contained file is needed, we can make one.; This is the snippet of code c",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14096:633,Access,AccessPathName,633,https://root.cern,https://github.com/root-project/root/issues/14096,1,['Access'],['AccessPathName']
Security,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Importing the ROOT module and accessing anything inside it is enough to freeze the program.; All tests in the CI are failing because of this. ### Reproducer. ```python; import ROOT; ROOT.TH1F(); ```. ### ROOT version. master. ### Installation method. built from sources. ### Operating system. MacOS 12, x86 and ARM. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13769:105,access,accessing,105,https://root.cern,https://github.com/root-project/root/issues/13769,1,['access'],['accessing']
Security,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/inc/TMVA/RTensor.hxx`, line 217 and line 231.; With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):; > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior.; A possible fix is in the PR #13322 . ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13498:452,access,access,452,https://root.cern,https://github.com/root-project/root/issues/13498,1,['access'],['access']
Security,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:; 1. A crash, upon first execution; 2. A system freeze, once the browser is loaded. ## Crash; Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:; ```; [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:; ERROR: Failed parsing extensions; [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ ; -> Created TensorFlow Lite XNNPACK delegate for CPU.; ```; The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze; Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py; import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(); h = ROOT.TH1D("""","""",64, -4,4); h.FillRandom(""gaus""); h.Draw(). input(""Press Enter to exit""); ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15474:497,certificate,certificate,497,https://root.cern,https://github.com/root-project/root/issues/15474,1,['certificate'],['certificate']
Security,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Opening a TFile and doing Get() on an RNTuple object throws an exception. The file is created with the same ROOT version (6.32.02). This worked before and it works again in 6.33 - for some reason 6.32.2 fails. Is there some fix for that in HEAD that could be ported to 6.32-patches?. ### Reproducer. ```; file:; KEY: ROOT::Experimental::RNTuple EventData;1 object title; KEY: ROOT::Experimental::RNTuple EventTag;1 object title. root [0] TFile::Open(""https://atlas-art-data.web.cern.ch/atlas-art-data/grid-output/main--dev3LCG/Athena/x86_64-el9-gcc13-opt/2024-07-23T1230/RNTupleART/test_data23_rawtoall_rntuple_esd_aod/myAOD.pool.root"")->Get(""EventData""). Error in <TRint::HandleTermInput()>: ROOT::Experimental::RException caught: checksum mismatch in RNTuple anchor; At:; void ROOT::Experimental::RNTuple::Streamer(TBuffer&) [/build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.32.02/src/ROOT/6.32.02/tree/ntuple/v7/src/RNTuple.cxx:48]; ```. ### ROOT version. 6.32.2 and 6.32-patches. ### Installation method. SFT releases. ### Operating system. Alma9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16134:807,checksum,checksum,807,https://root.cern,https://github.com/root-project/root/issues/16134,1,['checksum'],['checksum']
Security,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Reporting on behalf of Fermilab SBN collaboration and SciSoft group. ---. We have some ROOT data files containing `RooInt` objects (we used then for storing ""metadata"").; That class was removed from ROOT (ca29ccf1) and we can't read that data any more.; This is not exactly a bug, since ROOT works as intended — but that intention breaks our data. Twofold question:; 1. how to work around the problem for existing data using newer ROOT; 2. are there other recommended ways to simply store an integer with a name in a ROOT file?; `TNamed` comes to mind, but it needs explicit conversions, and that is why `RooInt` was preferred. For people with Fermilab access, there is a [related Redmine ticket #28974](https://cdcvs.fnal.gov/redmine/issues/28974). ### Reproducer. 1. Write a `RooInt` object in a new `TFile` with ROOT 6.28; 2. Try to read that object from that `TFile` with the latest ROOT. ### ROOT version. `v6-32-00`. ### Installation method. Build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16380:728,access,access,728,https://root.cern,https://github.com/root-project/root/issues/16380,1,['access'],['access']
Security,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Since last Friday's dev3LCG nightly (i.e. from 26/7) we cannot create a field for `signed char`. This used to work fine w/ the LCG dev3 nightly from 25/7. Here is the error message:. ```; Error in <TRint::HandleTermInput()>: ROOT::Experimental::RException caught: unknown type: signed char (unchecked RResult access!); At:; ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&, const std::string&, bool)::<lambda(const std::string&)> [/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/tree/ntuple/v7/src/RField.cxx:629]; static ROOT::Experimental::RResult<std::unique_ptr<ROOT::Experimental::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&, const std::string&, bool) [/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/tree/ntuple/v7/src/RField.cxx:852]; static ROOT::Experimental::RResult<std::unique_ptr<ROOT::Experimental::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&) [/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/tree/ntuple/v7/src/RField.cxx:592]. ```. ### Reproducer. To setup ROOT:; ```; export ATLAS_LOCAL_ROOT_BASE=/cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase; source ${ATLAS_LOCAL_ROOT_BASE}/user/atlasLocalSetup.sh; lsetup ""asetup Athena,main--dev3LCG,latest""; # any version after r26 (inclusive); ```. To reproduce the error:; ```; root [0] using namespace ROOT::Experimental;; root [1] auto field = RFieldBase::Create(""foo"", ""signed char"").Unwrap();; ```. ### ROOT version. dev3/Fri/ROOT/HEAD (from 26/7). ### Installation method. LCG dev3 nightly build. ### Operating system. AlmaLinux release 9.4 (Shamrock Pampas Cat). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16135:384,access,access,384,https://root.cern,https://github.com/root-project/root/issues/16135,1,['access'],['access']
Security,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. There is a `can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx` (at line 23) when running `ntuple_show.exe` on Windows. This code is the issue: `*end_arena = &(*vec.end());` one cannot dereference `end()`, [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):; > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. Note there is the same kind of potential issue at line 27 with `static_cast<IteratorData *>(*end_arena)->ptr = &(*vec.end());`. ### Reproducer. Run the `ntuple_show.exe` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13568:549,access,access,549,https://root.cern,https://github.com/root-project/root/issues/13568,1,['access'],['access']
Security,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. This bug can be triggered only on MacOS 12 for the x86 architecture.; PyROOT freezes if:; - A `TCanvas` is instantiated in a script or at the prompt; - The `name ROOT.TCanvas` is accessed at the prompt. ### Reproducer. ```python; import ROOT. ROOT.TCanvas # Enough to freeze the prompt; c = ROOT.TCanvas() # Triggers freeze in a script; ```. ### ROOT version. Master. ### Installation method. built from sources. ### Operating system. MacOS 12, x86. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13770:254,access,accessed,254,https://root.cern,https://github.com/root-project/root/issues/13770,1,['access'],['accessed']
Security,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. This code in [RTensor.hxx](https://github.com/root-project/root/blob/master/tmva/tmva/inc/TMVA/RTensor.hxx#L460):; ```; shape.insert(shape.end() + 1 + idx, 1);; ```; generates a debug assertion failure ""cannot seek vector iterator after end"".; As explained [in the standard](https://en.cppreference.com/w/cpp/container/vector/end): end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. ### Reproducer. Compile ROOT in Debug mode on Windows with the `/RTC1` compiler flag and run the TMVA tests/tutorials. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13325:540,access,access,540,https://root.cern,https://github.com/root-project/root/issues/13325,1,['access'],['access']
Security,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. When adding a commit to a PR, the rerun of clang-format fails with an output like the following. ```; + echo 'Running clang-format against branch master, with hash 60f72758eafe149ffba9bc6d3742eb10cc8d892d'; Running clang-format against branch master, with hash 60f72758eafe149ffba9bc6d3742eb10cc8d892d; ++ git diff --name-status 60f72758eafe149ffba9bc6d3742eb10cc8d892d; ++ grep -i -v LinkDef; ++ sed -E 's,^.[[:space:]]+,,'; ++ grep -v -E '^D +'; fatal: bad object 60f72758eafe149ffba9bc6d3742eb10cc8d892d; + COMMIT_FILES=; +++ which clang-format; ++ git-clang-format --commit 60f72758eafe149ffba9bc6d3742eb10cc8d892d --diff --binary /usr/bin/clang-format; fatal: bad object 60f72758eafe149ffba9bc6d3742eb10cc8d892d; + RESULT_OUTPUT=; ```. ### Reproducer. Submit a PR, add a commit to it. ### ROOT version. master. ### Installation method. n/a. ### Operating system. n/a. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15107:234,hash,hash,234,https://root.cern,https://github.com/root-project/root/issues/15107,2,['hash'],['hash']
Security,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. When building ROOT from sources without support for Vc, file `vc.modulemap` still gets created and registered in cling. This leads to problems when compiled ROOT is placed to read-only location (cvmfs) and user tries to use its own Vc library. ROOT tries to build `Vc.pcm` file and place it under `$ROOTSYS/lib` which is not accessible for writing. To fix this problem as I see it, 2 things need to be changed:; 1) In file `core/clingutils/CMakeLists.txt` code `set(custom_modulemaps ${custom_modulemaps} vc.modulemap)` (around line 119) should be called only if ROOT is built with Vc support. There is already FIXME placed so this seems to be a known issue.; 1) In file `interpreter/cling/lib/Interpreter/CIFactory.cpp` around line 722 adding `vc.modulemap` (maybeAppendOverlayEntry(...,vc.modulemap,...)) should not happen if ROOT is not built with Vc support/should be disabled. If not disabling this part, even removing `etc/cling/vc.modulemap` after build will not prevent ROOT from attempting to create the `lib/Vc.pcm` file. ### Reproducer. try to build ROOT from source. ### ROOT version. ROOT v6.30.06, looking at sources concerns v6.28.xx and master as well. ### Installation method. build from source. ### Operating system. CentOS 7, AlmaLinux 9.2. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15267:400,access,accessible,400,https://root.cern,https://github.com/root-project/root/issues/15267,1,['access'],['accessible']
Security,"### Check duplicate issues. - [x] Checked for duplicates. ### Description. A commit (https://github.com/root-project/root/commit/b327dd8fd159494666842607708140c429fa4055) deleted an important feature about authentication using local accounts from TServerSocket. I think it is wrong that the file is not used. I guess SrvAuthenticate is defined in DaemonUtils.[h|cxx] and refers to the libSrvAuth !; ```; $ grep srvauthenticate -i -R ../src; ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;; ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);; ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);; ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);; ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate; ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");; ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");; ```. Additionally, https://root.cern/doc/master/authserv_8C.html is not working due to this. Knowing that there are all these ./src/net/net/ useful classes about remote connections.. why is that TSocket is being deprecated ? https://github.com/root-project/root/commit/8ef5d04e0102290cc2457c5a7cc40fc9874fa006 . This is incredibly useful feature.. same for all other basic communication protocol developped in `./net/net/` directory. ```; $ grep srvauthenticate -i -R ../src; ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;; ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);; ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);; ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);; ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate; ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");; ../src/net/net/src/TServerSocket.cxx: Er",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13387:206,authenticat,authentication,206,https://root.cern,https://github.com/root-project/root/issues/13387,2,"['Authenticat', 'authenticat']","['Authenticate', 'authentication']"
Security,"### Check duplicate issues. - [x] Checked for duplicates. ### Description. Hello,; I am trying to load a GDML file using matrix and variables. Here in an extract from the gdml:. ```; <matrix name=""someNumbers"" coldim=""1"" values=""4 3 2 3""/>; <variable name=""testVariable"" value=""someNumbers[1]""/>; ```. ROOT complains when parsing the GDML, with the following error:. ```; input_line_155:2:81: error: subscripted value is not an array, pointer, or vector; Double_t TFormula____id2222353222929674449(Double_t *x,Double_t *p){ return p[0][1] ; }; ~~~~^~; Error in <prepareMethod>: Can't compile function TFormula____id2222353222929674449 prototype with arguments Double_t*,Double_t*; Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling; Error in <TFormula::ProcessFormula>: Formula ""[someNumbers][1]"" is invalid !; Error in <TFormula::Eval>: Formula is invalid and not ready to execute ; Fatal in <TGDMLParse::Value>: Got bad value nan from string 'someNumbers[1]'; aborting; ```. It seems that the parser fails in understanding how to access the matrix element. . Cheers,; Noemi. ### Reproducer. [geometry_test.gdml.txt](https://github.com/root-project/root/files/11833941/geometry_test.gdml.txt). Please note the attached file is `.txt`. To reproduce the issue, you can do:. ```; root -l; TGeoManager::Import(""geometry_test.gdml""); ```. ### ROOT version. ROOT Version: 6.26/10. ### Installation method. build from source using gcc 12.2.1. ### Operating system. Linux Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13074:1069,access,access,1069,https://root.cern,https://github.com/root-project/root/issues/13074,1,['access'],['access']
Security,"### Check duplicate issues. - [x] Checked for duplicates. ### Description. Hi all,. [MSVC] ROOT_x86 failed due to failed due to libCling.exp : error LNK2001: unresolved external symbol ""char const * __cdecl __std_find_trivial<char const ,char>(char const *,char const *,char). It can be reproduced on this commit `1f86c24` Could you please help look at this issue? Thanks in advance!. ### Reproducer. Steps to reproduce the behavior:; 1. https://github.com/root-project/root C:\gitP\root-project/root; 2. Open a VS2022 x86 cmd; 3. set VSCMD_SKIP_SENDTELEMETRY=1 & ""C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"" -host_arch=x86 -arch=x86 & set _CL_= /Bcapture_repro C:\a\_work\_temp\rwc_project_logs\ROOT\preprocessed_repro_build & set _LINK_= /onfailrepro:C:\a\_work\_temp\rwc_project_logs\ROOT\link_repro_build; 4. cd /d C:\gitP\root-project\root\build_x86; 5. msbuild /m /p:Platform=Win32 /p:Configuration=Release ALL_BUILD.vcxproj /t:Rebuild 2>&1. Error Message: After updating the hash commit, ROOT_amd64 passed but ROOT_X86 failed with the following error:; libCling.exp : error LNK2001: unresolved external symbol ""char const * __cdecl __std_find_trivial<char const ,char>(char const *,char const *,char)"". **What is the expected behaviour?**; Project Pass. **Operating System**; Windows. **What versions of the operating systems?**; VS 2022 + Windows Server 2022 Datacenter. **Architectures**; 86-bit. **Stacktrace**; No response. **Plug-in formats (if applicable)**; No response. **Plug-in host applications (DAWs) (if applicable)**; No response. **Testing on the develop branch**; The bug is present on the develop branch. ### ROOT version. N/A. ### Installation method. N/A. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15336:1023,hash,hash,1023,https://root.cern,https://github.com/root-project/root/issues/15336,1,['hash'],['hash']
Security,"### Describe the bug. Entering `PtEtaPhiMVector` in Doxygen's search brings us here: https://root.cern/doc/master/namespaceROOT_1_1Math.html#a6cea5921731c7ac99dea921fb188df31 - the documentation of the typedef, which happens to be in `Vector4Dfwd.h`. That header cannot be included as `Vector4Dfwd.h` (but only as `ROOT/Vector4Dfwd.h` - *and* it doesn't provide the definition of this type!. ### Expected behavior. Instead, the forward header should be reserved for the specialists, and documentation should point to `Vector4D.h`. It's fine if this header repeats the `typedef`s, and those in `Vector4Dfwd.h` are hidden from Doxygen. In the end, Doxygen's search should get me to the header that I need to `#include`, as a user, to access `PtEtaPhiMVector`, and it should be obvious how to see `PtEtaPhiMVector`'s members.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8051:732,access,access,732,https://root.cern,https://github.com/root-project/root/issues/8051,1,['access'],['access']
Security,"### Describe the bug. In PyROOT it has been possible to avoid the double `ROOT.ROOT` for some classes/functions for a while; ```py; import ROOT; df = ROOT.RDataFrame; ```; But that doesn't happen for every new class/function defined in C++ . This is a simple reproducer: create some entities in a namespace:; ```py; import ROOT. ROOT.gInterpreter.Declare(; """"""; namespace ROOT{; namespace Detail{; struct MyStruct{};; void dostuff(){}; int myint;; }}; """"""; ); ```; Then try to access them in a Python session; ```py; $ python -i namespace_function.py; >>> ROOT.Detail.MyStruct; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; AttributeError: <namespace cppyy.gbl.Detail at 0x55e51fdc7f50> has no attribute 'MyStruct'. Full details:; type object 'Detail' has no attribute 'MyStruct'; 'Detail::MyStruct' is not a known C++ class; 'MyStruct' is not a known C++ template; 'MyStruct' is not a known C++ enum; >>> ROOT.ROOT.Detail.MyStruct; <class cppyy.gbl.ROOT.Detail.MyStruct at 0x55e51fe1dd60>; >>> ROOT.Detail.dostuff; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; AttributeError: <namespace cppyy.gbl.Detail at 0x55e51fdc7f50> has no attribute 'dostuff'. Full details:; type object 'Detail' has no attribute 'dostuff'; 'Detail::dostuff' is not a known C++ class; 'dostuff' is not a known C++ template; 'dostuff' is not a known C++ enum; >>> ROOT.ROOT.Detail.dostuff; <cppyy.CPPOverload object at 0x7f522b684eb0>; >>> ROOT.Detail.myint; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; AttributeError: <namespace cppyy.gbl.Detail at 0x55e51fdc7f50> has no attribute 'myint'. Full details:; type object 'Detail' has no attribute 'myint'; 'Detail::myint' is not a known C++ class; 'myint' is not a known C++ template; 'myint' is not a known C++ enum; >>> ROOT.ROOT.Detail.myint; 0; ```. It's unclear how to avoid the double `ROOT.ROOT` in general. ### Expected behavior; <!--; A clear and concise description of what you expecte",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8745:477,access,access,477,https://root.cern,https://github.com/root-project/root/issues/8745,1,['access'],['access']
Security,"### Describe the bug. In pyROOT, if one defines a function that returns a RooArgSet object that contains cloned RooAbsArg objects, the returned RooArgSet object will crash if accessed. This is likely due to some garbage collection within the function that removes reference to the cloned object. This behavior occurs only in pyROOT and is not restricted to functions that return a RooArgSet object. Any object that is associated with the RooArgSet object, e.g. RooAbsPdf with ownedComponents being the RooArgSet object defined in the function, will also crash when the underlying RooArgSet object is accessed. . ### Expected behavior; The returned RooArgSet object should contain the reference to the cloned RooAbsArg object. . ### To Reproduce; ```; import ROOT. macro = \; """"""; RooArgSet make_argset(const RooRealVar& v){; 	RooArgSet argset(*(RooRealVar*)v.Clone(""new_x""));; 	return argset;; }; """""". def reproducer_ROOT():; 	x = ROOT.RooRealVar(""x"", ""x"", -10, 10); 	ROOT.gInterpreter.Declare(macro); 	output = ROOT.make_argset(x); 	print(output[0] == x); 	# True; 	print(output[0] is x); 	# False; 	return output[0]. def reproducer_pyROOT():; 	x = ROOT.RooRealVar(""x"", ""x"", -10, 10). 	def make_argset(v):; 		argset = ROOT.RooArgSet(v.Clone(""new_x"")); 		return argset. 	output = make_argset(x); 	return output[0]; 	# these also crashes; 	#return output.first(); 	#return [i for i in output]. # this does not crash; reproducer_ROOT(). # this crash; reproducer_pyROOT(); ```; ### Setup. 1. ROOT version: 6.22/06; 2. Operating system: lxplus; 3. How you obtained ROOT: conda install -c conda-forge ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8845:175,access,accessed,175,https://root.cern,https://github.com/root-project/root/issues/8845,2,['access'],['accessed']
Security,"### Describe the bug. Then changing the Address of a Branch in TTree it seems to sometimes still use the old memory address after the call. As a minimal example here we create a TNamed, set it as branch but directly after delete it and set the branch address to `nullptr` before filling:. ```c++; #include <TTree.h>; #include <TFile.h>. #include <iostream>. int main() {; auto* tf = TFile::Open(""test.root"", ""RECREATE"");; auto* t = new TTree(""tree"", ""tree"");. TNamed *f = new TNamed(""foo"", ""bar"");; auto* b = t->Branch(""FileMetaData"", &f);; ; delete f;; f = nullptr;; b->SetAddress(nullptr);. t->Fill();; t->Write();; tf->Close();; return 0;; }; ```. When running this with address sanitizer it gives the following error with 6.24:. ```; g++ -g `root-config --cflags --libs` -fsanitize=address -o mwe mwe.C && ./mwe ; =================================================================; ==934566==ERROR: AddressSanitizer: heap-use-after-free on address 0x606000112a68 at pc 0x7fcd23e920f0 bp 0x7ffcc8579ab0 sp 0x7ffcc8579aa8; READ of size 4 at 0x606000112a68 thread T0; #0 0x7fcd23e920ef in int TStreamerInfoActions::WriteBasicType<unsigned int>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) root/io/io/src/TStreamerInfoActions.cxx:252; #1 0x7fcd239c8950 in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const root/io/io/inc/TStreamerInfoActions.h:123; #2 0x7fcd239c8950 in TBufferFile::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) root/io/io/src/TBufferFile.cxx:3572; #3 0x7fcd21fdd5dc in TBranch::FillImpl(ROOT::Internal::TBranchIMTHelper*) root/tree/tree/src/TBranch.cxx:891; #4 0x7fcd22016bfa in TBranchElement::FillImpl(ROOT::Internal::TBranchIMTHelper*) root/tree/tree/src/TBranchElement.cxx:1265; #5 0x7fcd22016441 in TBranchElement::FillImpl(ROOT::Internal::TBranchIMTHelper*) root/tree/tree/src/TBranchElement.cxx:1290; #6 0x7fcd22016441 in TBranchElement::FillImpl(ROOT::Internal::TBranchIMTHelper*) root/tree/tree/src/TBranchElemen",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8027:682,sanitiz,sanitizer,682,https://root.cern,https://github.com/root-project/root/issues/8027,1,['sanitiz'],['sanitizer']
Security,"### Describe the bug. Using:; [hep3vec.tar.gz](https://github.com/root-project/root/files/11658469/hep3vec.tar.gz); we get:; ```; . ./go. StreamerInfo for class: Hep3Vec, version=1, checksum=0x0; Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class Hep3Vec; Error in <CreateRealData>: Cannot find data member # 0 of class Hep3Vec for parent Holder!; ```; which is cause by the `TClass` (for the class enclosing the anonymous enum) being created during the reading of the rootpcm **before** its own `TProtoClass` is fully loaded (actually during its loading).; ```; #7 0x00007ffff7784e29 in TClass::GetClass (name=0x7fffffff9ec0 ""Hep3Vec"", load=true, silent=false) at /nashome/p/pcanal/root/core/meta/src/TClass.cxx:2970; ...; #9 0x00007ffff77a7c80 in TEnum::GetEnum (enumName=0xf5c810 ""Hep3Vec::(unnamed)"", sa=TEnum::kInterpLookup) at /nashome/p/pcanal/root/core/meta/src/TEnum.cxx:310; #10 0x00007ffff77a0150 in TDataMember::Init (this=0xf5c6d0, afterReading=true) at /nashome/p/pcanal/root/core/meta/src/TDataMember.cxx:225; #11 0x00007ffff77a3606 in TDataMember::Streamer (this=0xf5c6d0, b=...) at /nashome/p/pcanal/root/core/meta/src/TDataMember.cxx:949; ....; #27 0x00007ffff763e5ed in TProtoClass::Streamer (this=0xf5c0e0, R__b=...) at core/G__Core.cxx:26439; ....; #38 0x00007fffeab11c72 in TCling::LoadPCM (this=0x738b90, pcmFileNameFullPath=...) at /nashome/p/pcanal/root/core/metacling/src/TCling.cxx:1906. ### What is the expected behaviour?. properly loading of the dictionary. ### How to reproduce?. Use [hep3vec.tar.gz](https://github.com/root-project/root/files/11658469/hep3vec.tar.gz); and run `go`. ### ROOT version. work in progress ... . ### How did you install ROOT?. local build. ### Which operating system are you using?. alll. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12953:182,checksum,checksum,182,https://root.cern,https://github.com/root-project/root/issues/12953,1,['checksum'],['checksum']
Security,"### Describe the bug; 1) The TTree::Scan() can't properly display a vector<vector<vector<>>>. It always shows a single element of value 0.; 2) The TBrowser shows such vectors as having 0 elements.; 3) 1D and 2D vectors work OK. ### Expected behaviour; 1) TTree::Scan() showing all the elements of the 3D vector like for 2D and 1D vector; 2) TBrowser being able to show all the values and proper number of elements of the 3D vector, like for 2D and 1D vectors. ### To Reproduce; Please run the attached macro or store a 3D vector in a TTree.; [ttree_vector_bug.zip](https://github.com/root-project/root/files/11268478/ttree_vector_bug.zip). ### Setup; self-compiled ROOT 6.28.00, Fedora 37. ### Additional context; This bug is quite important for 2 reasons:; 1) For users trying to access the TTree with TBrowser the vector seems empty and they think they have the wrong data files; 2) There is no easy way to check the vector contents with Scan() quickly not working, which makes debugging experiment much harder.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12680:781,access,access,781,https://root.cern,https://github.com/root-project/root/issues/12680,1,['access'],['access']
Security,"### Describe the bug; <!--; Setup snap ""root-framework"" (723) security profiles for auto-connections (cannot obtain mount security snippets for snap ""root-framework"": shared-memory plug with ""private: true"" cannot be connected if ""/dev/shm"" is a symlink).; -->. ### Expected behavior; <!--; Root-framework can be installed.; -->. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. sudo daemonize /usr/bin/unshare --fork --pid --mount-proc /lib/systemd/systemd --system-unit=basic.target; 2. exec sudo nsenter -t $(pidof systemd) -m -p su - $LOGNAME; 3. snap version; snap 2.56.2+22.04ubuntu1; snapd 2.56.2+22.04ubuntu1; series 16; ubuntu 22.04; kernel 5.10.102.1-microsoft-standard-WSL2; -->. ### Setup; <!--; 1. ROOT version: v6-26-06; 2. Operating system:; Distributor ID: Ubuntu; Description: Ubuntu 22.04.1 LTS; Release: 22.04; Codename: jammy; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself:; snap install root-framework; -->. ### Additional context; <!--; NA.; -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11338:62,secur,security,62,https://root.cern,https://github.com/root-project/root/issues/11338,2,['secur'],['security']
Security,"### Describe the bug; An interactive ROOT session crashes on definition of a simple C++20 concept, e.g.; ```c++; template <typename T> concept Hashable = requires(T a) {; { std::hash<T>{}(a) } -> std::convertible_to<std::size_t>;; };; ```. For reference, the relevant stack trace frames is provided below.; ```; #5 0x00007f388ee59180 in cling::isDefinition(clang::Decl const*) () from /home/jalopezg/CERN/root/_build.cxx20/lib/libCling.so; #6 0x00007f388ee59c60 in cling::DefinitionShadower::invalidatePreviousDefinitions(clang::NamedDecl*) const () from /home/jalopezg/CERN/root/_build.cxx20/lib/libCling.so; #7 0x00007f388ee5b37b in cling::DefinitionShadower::Transform(clang::Decl*) () from /home/jalopezg/CERN/root/_build.cxx20/lib/libCling.so; #8 0x00007f388ee509c2 in cling::DeclCollector::TransformDecl(clang::Decl*) const () from /home/jalopezg/CERN/root/_build.cxx20/lib/libCling.so; #9 0x00007f388ee50b75 in cling::DeclCollector::Transform(clang::DeclGroupRef&) () from /home/jalopezg/CERN/root/_build.cxx20/lib/libCling.so; #10 0x00007f388ee50d41 in cling::DeclCollector::HandleTopLevelDecl(clang::DeclGroupRef) () from /home/jalopezg/CERN/root/_build.cxx20/lib/libCling.so; #11 0x00007f388ee11089 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/jalopezg/CERN/root/_build.cxx20/lib/libCling.so; #12 0x00007f388ee118ac in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/jalopezg/CERN/root/_build.cxx20/lib/libCling.so; #13 0x00007f388ed6e87c in cling::Interpreter::DeclareInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions const&, cling::Transaction**) const () from /home/jalopezg/CERN/root/_build.cxx20/lib/libCling.so; #14 0x00007f388ed71e7e in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/jalopezg/CERN/root/_b",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12779:143,Hash,Hashable,143,https://root.cern,https://github.com/root-project/root/issues/12779,2,"['Hash', 'hash']","['Hashable', 'hash']"
Security,"### Describe the bug; Hi All,. I have follow below steps to build root project with msvc on AddressSanitizer mode, but hit below errors. And I have seen ""WARNING ""Address sanitizer builds only tested with gcc and Clang"" on CMakeLists. So I am not sure if root support asan mode with msvc. Could you please help have a look and confirm it? Thanks a lot!. (The error message shows ""The items cannot be built in parallel."" but I have tried build single parallel still hit this error); Error:; ```; CustomBuild:; ""The build of 'F:\gitP\root-project\root\build_x86_asan2\CMakeFiles\ecd3d997f4f89e0243288555110c5833\onepcm.rule' depends on 'F:\GITP\ROOT-PROJECT\ROOT\BUILD_X86_ASAN2\ETC\ALLDICT.CXX.PCH' which is produced by the build of 'F:\gitP\root-project\root\build_x86_asan2\CMakeFiles\1b80de060c1a00976f83382f69cf2b7f\allDict.cxx.pch.rule'. The items cannot be built in parallel.""; Generating etc/allDict.cxx.pch; ; Generating PCH for core core\clingutils core\imt core\rint core\thread graf2d\asimage graf2d\gpad graf2d\gpadv7 graf2d\graf graf2d\postscript graf2d\primitivesv7 graf2d\win32gdk graf3d\g3d graf3d\gl gui\fitpanel gui\fitpanelv7 gui\gui hist\hist hist\histdrawv7 hist\histpainter hist\histv7 hist\spectrum hist\spectrumpainter io\io math\genetic math\genvector math\mathcore math\matrix math\minuit math\minuit2 math\physics math\smatrix math\vecops net\net roofit\RDataFrameHelpers roofit\roofit roofit\roofitcore roofit\roostats tmva\sofie tmva\tmva tmva\tmvagui tree\dataframe tree\ntuple tree\tree tree\treeplayer tree\treeviewer; ; =================================================================; ==6948==ERROR: AddressSanitizer: allocator is out of memory trying to allocate 0x203ffff bytes; #0 0x6684e141 (C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\bin\HostX64\x86\clang_rt.asan_dynamic-i386.dll+0x1003e141); #1 0x693e0308 in llvm::safe_realloc(void *, unsigned int) (F:\gitP\root-project\root\build_x86_asan2\bin\libCling.dll+0x11",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9445:171,sanitiz,sanitizer,171,https://root.cern,https://github.com/root-project/root/issues/9445,1,['sanitiz'],['sanitizer']
Security,"### Describe the bug; If DaviX is installed, it is used for TFile::Open(""https://..."") likes, but unlike TWebFile, it does not seem to support basic auth for passwords with @ in them. (or it supports them differently?). . ### Expected behavior; `auto f = TFile::Open(""https://user:p\\@ssword@example.org/lotterynumbers.root"")` should work regardless of if DaviX is installed or not, as `auto f = TFile::Open(""https://user:password@example.org/lotterynumbers.root"")` does. . ### To Reproduce. Try to access a file hidden behind http basic authentication using TFile::Open with and without DaviX where the password contains an @. Without DaviX installed, TFile::Open( ) delegates to TWebFile and it works. With DaviX, DaviX tries to handle it but it doesn't support basic auth. . ### Setup; root 6.24/04 on Fedora 34 (x86-64) installed via dnf, with and without root-net-davix. . ### Additional context; Note that there is some functionality supported by DaviX not supported by TWebFile (see e.g. #8890), so delegating to TWebFile is not necessarily the right solution. Probably better have Davix do the same TUrl parsing of passwords, so that escaping @ remains the same.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9072:158,password,passwords,158,https://root.cern,https://github.com/root-project/root/issues/9072,6,"['access', 'authenticat', 'password']","['access', 'authentication', 'password', 'passwords']"
Security,"### Describe the bug; Opening a file containing data (e.g. a `TTree`) and creating histograms in memory afterwards, finally opening a new-style `TBrowser`, the in-memory histograms are not accessible from the browser. . ### Expected behavior; Histograms can either be accessed in `root => ROOT Memory` or (as in the old-style `TBrowser`) in the list below the file (even if not yet written out), since they were created in the context of the file's `TDirectory`. . ### To Reproduce; Using ROOT 6.26.00 (or switching to the web-GUI via other ways) and executing the following macro:; ```; {; TFile *f = new TFile(""bar.root"", ""RECREATE"");; TTree *foobar = new TTree(""t"", ""t"");; foobar->Write();; TH1D *foo = new TH1D(""foo"", ""foo"", 10, 0, 10);; new TBrowser();; }; ```; reproduces the behaviour: The tree `t` is visible in the browser, but the histogram `foo` is not. . `.ls` shows (as expected):; ```; root [1] .ls; TFile** bar.root; TFile* bar.root; OBJ: TTree t t : 0 at: 0x5617aee19b60; OBJ: TH1D foo foo : 0 at: 0x5617afef9650; KEY: TTree t;1 t; ```; The old `TBrowser` shows both objects. . Either not writing out the `TTree` or writing out the histogram makes it visible. . However, this breaks the use case of reading in a file with a `TTree` and creating histograms in-memory, then inspecting them via a `TBrowser`. ; (arguably, users should care about the `TDirectory` context...). ### Setup; 1. ROOT version: 6.26.00; 2. Operating system: Gentoo Linux; 3. ROOT built via package manager :wink:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10389:189,access,accessible,189,https://root.cern,https://github.com/root-project/root/issues/10389,2,['access'],"['accessed', 'accessible']"
Security,"### Describe the bug; ROOT master (c8ad00846344c090c3a6f653e0decf38ad324d65) fails to build with g++ 12.2 with `cmake -DCMAKE_CXX_STANDARD=20`. The reported error is:; ```; In file included from /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamReader.h:16,; from /home/bgruber/dev/root/interpreter/llvm/src/lib/Support/BinaryStreamReader.cpp:9:; /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected unqualified-id before ‘const’; 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other); | ^~~~~; /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected ‘)’ before ‘const’; 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other); | ~^~~~~; | ); ```. Checking out the offending file:; ```c++; template <typename T>; class FixedStreamArrayIterator; : public iterator_facade_base<FixedStreamArrayIterator<T>,; std::random_access_iterator_tag, const T> {. public:; FixedStreamArrayIterator(const FixedStreamArray<T> &Array, uint32_t Index); : Array(Array), Index(Index) {}. FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other) // ERROR HERE; : Array(Other.Array), Index(Other.Index) {}; ...; ```; indeed looks like wrong C++ syntax (the constructor shall only be named via an id-expression referring to the injected class name, see [here](https://eel.is/c++draft/class.ctor#general-1)). The `<T>` should be removed. The issue was fixed in upstream LLVM with [this commit](https://github.com/llvm/llvm-project/commit/2ccf0b76bcaf0895e04f14e3ff53c59dd96f9f0f). Please consider cherry-picking this commit. ### To Reproduce; 1. git clone ROOT master; 2. `cmake -DCMAKE_CXX_STANDARD=20`; 3. `make`. ### Setup. * gcc 12.2; * Ubuntu 22.10",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12037:1396,inject,injected,1396,https://root.cern,https://github.com/root-project/root/issues/12037,1,['inject'],['injected']
Security,"### Describe the bug; The build errors when switching from `CMAKE_CXX_STANDARD=14` (the default with GCC 8.4.1 on CentOS 8) to `CMAKE_CXX_STANDARD=17` (for example to get ROOT7).; ```; FAILED: tree/treeplayer/G__TreePlayer.cxx lib/TreePlayer.pcm; [...]; In module 'std' imported from input_line_1:1:; /usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/hashtable.h:2084:4: error: no matching member function for call to '_M_rehash_aux'; _M_rehash_aux(__n, __unique_keys());; ^~~~~~~~~~~~~; /usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/hashtable.h:1730:8: note: in instantiation of member function 'std::_Hashtable<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::unique_ptr<ROOT::Internal::TNamedBranchProxy, std::default_delete<ROOT::Internal::TNamedBranchProxy> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::unique_ptr<ROOT::Internal::TNamedBranchProxy, std::default_delete<ROOT::Internal::TNamedBranchProxy> > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char> >, std::hash<std::__cxx11::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_rehash' requested here; _M_rehash(__do_rehash.second, __saved_state);; ^; /usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/hashtable_policy.h:739:16: note: in instantiation of member function 'std::_Hashtable<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::unique_ptr<ROOT::Internal::TNamedBranchProxy, std::default_delete<ROOT::Internal::TNamedBranchProxy> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::unique_ptr<ROOT::Internal::TNamedBranchProxy, std::default_delete<ROOT::Internal::TNamedBranchProxy> > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char> >, std::hash<std::__cxx11::st",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8642:367,hash,hashtable,367,https://root.cern,https://github.com/root-project/root/issues/8642,3,['hash'],"['hash', 'hashtable']"
Security,"### Describe the bug; When accessing arrays in TTree::Scan() (or Draw()) if the array index is a formula like 1-1 it should be enclosed by ""()"" otherwise it does not work as expected. See:. ```; root [3] t1->Scan(""energy[1-1]:energy[(1-1)]:energy[0]""); ************************************************; * Row * energy[1- * energy[(1 * energy[0] *; ************************************************; * 0 * 275.16714 * 326.72375 * 326.72375 *; * 1 * 213.84567 * 261.90139 * 261.90139 *; * 2 * 413.62146 * 415.01107 * 415.01107 *; ```; The problem was [posted on the forum](https://root-forum.cern.ch/t/strange-operations-with-array-indices/52384). ### Expected behavior; `1-1` should be the same as `(1-1)`. ### To Reproduce; Use any tree with an array `x` and access` x[1-1]` and `x[(1-1)]`. ### Setup; Any ROOT version.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11712:27,access,accessing,27,https://root.cern,https://github.com/root-project/root/issues/11712,2,['access'],"['access', 'accessing']"
Security,"### Describe the bug; `cmake -Dasan=ON` uses `add_compile_options` to add `-fsanitize=address` for all C++ files. This does not affect externally pulled in dependencies, in particular Clad. ### Expected behavior; The option should result in a build where *all* components are built with Address Sanitizer. ### To Reproduce; Configure with `-Dasan=ON` and notice that ASan reports a `use-after-poison` when only starting `./bin/root.exe`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7968:295,Sanitiz,Sanitizer,295,https://root.cern,https://github.com/root-project/root/issues/7968,1,['Sanitiz'],['Sanitizer']
Security,"### Description. Using a conditional RooProdPdf in a RooSimultaneous spawns too many integrals with new CPU evaluation backend. This is a deal breaker for fitting the open likelihood of the CMS Run 1 Higgs analysis with the new CPU evaluation backend, because evaluating these unnecessary integrals takes too much time (although the result is correct). Since the RooFit AD backend uses the same ""`compileForNormSet`"" method to sanitize the computation graph, it's also a blocker for minimizing the CMS Higgs Run 1 likelihood with AD. ### Reproducer. ```c++; RooRealVar x{""x"", ""x"", 0, 1};; RooRealVar y{""y"", ""y"", 0, 1};. RooGenericPdf pdfx{""pdfx"", ""1.0 + x - x"", {x}};; RooGenericPdf pdfxy{""pdfxy"", ""1.0 + x - x + y - y"", {x, y}};. RooProdPdf pdf{""pdf"", ""pdf"", pdfx, RooFit::Conditional(pdfxy, y)};. RooArgSet normSet{x, y};. RooCategory cat{""cat"", ""cat"", {{""0"", 0}}};; RooSimultaneous simPdf{""simPdf"", ""simPdf"", {{""0"", &pdf}}, cat};. {; std::cout << ""This looks good:"" << std::endl;; RooFit::Detail::CompileContext ctx{normSet};; std::unique_ptr<RooAbsPdf> compiled{static_cast<RooAbsPdf*>(pdf.compileForNormSet(normSet, ctx).release())};; compiled->getVal(normSet);; }; {; std::cout << ""Too many integrals:"" << std::endl;; RooFit::Detail::CompileContext ctx{normSet};; std::unique_ptr<RooAbsPdf> compiled{static_cast<RooAbsPdf*>(simPdf.compileForNormSet(normSet, ctx).release())};; compiled->getVal(normSet);; }; ```; The output is:; ```; This looks good:; [#1] INFO:NumericIntegration -- RooRealIntegral::init(pdfx_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x); [#1] INFO:NumericIntegration -- RooRealIntegral::init(pdfxy_Int[y]) using numeric integrator RooIntegrator1D to calculate Int(y). Too many integrals:; [#1] INFO:NumericIntegration -- RooRealIntegral::init(_0_pdfx_Int[_0_x]) using numeric integrator RooIntegrator1D to calculate Int(_0_x); [#1] INFO:NumericIntegration -- RooRealIntegral::init(_0_pdfxy_Int[_0_y]) using numeric integrator RooIntegrator1D to calcula",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15751:427,sanitiz,sanitize,427,https://root.cern,https://github.com/root-project/root/issues/15751,1,['sanitiz'],['sanitize']
Security,"### Explain what you would like to see improved and how. There are many useful operations such as `GetColumnType` that is trivial to be included in the operation list of distributed RDF. I suggest to expose these operations to users. The `GetColumnType` method is useful when someone tries to save columns based on the column type, e.g. I only want to save columns that are standard supported types for numpy arrays when I try to do `AsNumpy`. . The very easy way to implement this would be to add it similar to how `GetColumnNames` is added [here](https://github.com/root-project/root/blob/a29e81cb1cd217ca2096a44d01fb273e085b4e8b/bindings/experimental/distrdf/python/DistRDF/HeadNode.py#L246). A workaround for now would be to do; ```; rdf._headnode._localdf.GetColumnType; ```. ### ROOT version. 6.30/04. ### Installation method. LCG (Swan). ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15039:200,expose,expose,200,https://root.cern,https://github.com/root-project/root/issues/15039,1,['expose'],['expose']
Security,### Explain what you would like to see improved and how. We can speed up the builds significantly by using the github actions cache system. More can be read here: https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows . Essentially we need a `actions/cache/restore@v3`. This is done in the clad CI here: https://github.com/vgvassilev/clad/blob/d2df9008e071f7f78d1606a040b21149ade66eea/.github/workflows/ci.yml#L637-L678. The idea is to cache the builds of ROOT up to cling and make a hash that will invalidate the cache only if something in cling is touched. In that case the system will regenerate the caches. We need to figure out if the 10GB storage is enough per project or we can store these things locally. For the Clad project it has been working flawlessly for ~1 year now. . ### ROOT version. N/A. ### Installation method. N/A. ### Operating system. N/A. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14987:523,hash,hash,523,https://root.cern,https://github.com/root-project/root/issues/14987,1,['hash'],['hash']
Security,"### Explain what you would like to see improved and how. i am looking at speeding up some code that uses TMatrixDSym widely (for large matrices whose size is not known at compile time). One primary bottleneck is code used to set or get elements in the matrix like. ```; TMatrixDSym d(100);; for ( int i=0; i< 100; i++) d(i,i)=i;; ```. which is limited by the virtual function calls needed for the checks. . https://github.com/root-project/root/blob/master/math/matrix/inc/TMatrixT.h#L255. In the case I was looking at, the code to fill the matrix was slower than the code to invert it due to this... The only workaround I find is to use GetMatrixArray() to get access to the underlying array and then hope that the internals don't change (while already ignoring fRowLwb and fColLwb being potentially non-zero. Using [] is kinda 2x worse as there are two layers of these sanity checks instead of just one. I see this workaround is already in widespread use in math/matrix classes.. Is there a better approach currently possible? If not, would it be possible to provide the equivalent of ; ```; d.GetMatrixArray()[i*100+i] = i;; ```; via some more readable/safer interface (useful at least for both TMatrixT and TVectorT)?. ### ROOT version. any recent. ### Installation method. build from source. ### Operating system. linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15285:661,access,access,661,https://root.cern,https://github.com/root-project/root/issues/15285,1,['access'],['access']
Security,"### Explain what you would like to see improved. For vector-like constructs (`TVector2`, `TVector3`, `TLorentzVector`, `ROOT::Math::DisplacementVector3D`, etc.), it would be very helpful to support structured bindings to the Cartesian coordinates (e.g.):. ```cpp; auto const [x, y] = func_that_returns_TVector2();. // which would be equivalent to the pair of statements:; TVector2 const vec = func_that_returns_TVector2();; auto const [a, b] = std::pair{vec[0], vec[1]};. assert(x == a);; assert(y == b);; ```. I understand that this utility would only be helpful for accessing Cartesian coordinates, and not those related to (e.g.) polar representations. ### Optional: share how it could be improved. This can be done by introducing suitable template specializations of `get<std::size_t>`, `std::tuple_size`, and `std::tuple_element`. See https://compiler-explorer.com/z/bv4Yef8GE as an example. If this seems a desirable feature, I am willing to consider helping implement it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11806:568,access,accessing,568,https://root.cern,https://github.com/root-project/root/issues/11806,1,['access'],['accessing']
Security,"### Explain what you would like to see improved; <!--; Explain what isn't as good as it could be and why; -->. Normalization of fields created through `RFieldBase::Create` does not work to the same extent as directly templated fields:; ```cpp; // works ; auto ulong_field = RField<unsigned long>(""ulong""); ; EXPECT_STREQ(""std::uint64_t"", ulong_field.GetType().c_str());; // throws runtime exception; auto other_ulong = RFieldBase::Create(""other ulong"", ""unsigned long"").Unwrap();; ```; ```; C++ exception with description ""Field other ulong has unknown type unsigned long (unchecked RResult access!); At:; static ROOT::Experimental::RResult<std::unique_ptr<ROOT::Experimental::Detail::RFieldBase> > ROOT::Experimental::Detail::RFieldBase::Create(const string&, const string&) [/home/max/projects/rootdev/root/tree/ntuple/v7/src/RField.cxx:202]; ```; Typedef / type alias fields are also an issue:; ```cpp; // works; auto str_size_field = RField<std::string::size_type>(""str_size"");; // throws exception; auto other_str_size = RFieldBase::Create(""str_size"", ""std::string::size_type"").Unwrap();; ```; ```; C++ exception with description ""Field str_size has unknown type std::string::size_type (unchecked RResult access!); At:; static ROOT::Experimental::RResult<std::unique_ptr<ROOT::Experimental::Detail::RFieldBase> > ROOT::Experimental::Detail::RFieldBase::Create(const string&, const string&) [/home/max/projects/rootdev/root/tree/ntuple/v7/src/RField.cxx:202]; ```; This has implications for user-defined classes, because `RFieldBase::Create` is used to initialize subfields:; ```cpp; struct CustomStruct {; unsigned long ul;; };; // ... ; auto class_field = RField<CustomStruct>(""custom_struct"");; ```; ```; C++ exception with description ""Field ul has unknown type unsigned long (unchecked RResult access!); At:; static ROOT::Experimental::RResult<std::unique_ptr<ROOT::Experimental::Detail::RFieldBase> > ROOT::Experimental::Detail::RFieldBase::Create(const string&, const string&) [/home/max/pr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7875:591,access,access,591,https://root.cern,https://github.com/root-project/root/issues/7875,1,['access'],['access']
Security,"### Explain what you would like to see improved; Cluster and page sizes are currently hardcoded in RNTuple as a `constexpr`. We should allow the user to tune these parameters., possibly via the `RNTupleWriteOptions` class. Allowing these parameters to be adjusted would allow backend-specific tuning. ### Optional: share how it could be improved; We plan to expose these parameters via the `RNTupleWriteOptions` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7853:358,expose,expose,358,https://root.cern,https://github.com/root-project/root/issues/7853,1,['expose'],['expose']
Security,"### Explain what you would like to see improved; I daily use QtCreator in my ROOT-based projects, and it would be great if there would be a config-flag to build ROOT with the `GENERATE_QHP` enabled in the doxygen file. https://github.com/root-project/root/blob/master/documentation/doxygen/Doxyfile#L1514. This way, one can consult the Doxygen documentation directly within QtCreator, no need to use a web browser, which is also great if you don't have internet connection.; See e.g. https://bugreports.qt.io/secure/attachment/48119/Added_doxygen_doc_2.PNG. ### Optional: share how it could be improved; cmake config flag, or automatically detect if qhelpgenerator is found as done in llvm; https://github.com/root-project/root/search?q=qhelpgenerator. ### Setup; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.25/01 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on May 17 2021, 10:49:42 |; | From heads/master@v6-25-01-861-g5ea261143f |; | With |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781:509,secur,secure,509,https://root.cern,https://github.com/root-project/root/issues/8781,1,['secur'],['secure']
Security,"### Explain what you would like to see improved; Implement a (templated) class that proxies access to STL collections. A major difference w.r.t. `TVirtualCollectionProxy` is that template specializations will be provided to avoid going through `TClass` in case the type is known at compile-time. This is a requirement for #10326, and enabling RField support for other STL collections.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10739:92,access,access,92,https://root.cern,https://github.com/root-project/root/issues/10739,1,['access'],['access']
Security,"### Explain what you would like to see improved; Support the storage of user-defined classes that behave as collections of elements. Such classes provide access to the collection via a class that overrides member functions in the `TVirtualCollectionProxy` class. . The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In later stages, RNTuple might provide this functionality through an interface different from the legacy `TVirtualCollectionProxy`. . ### Additional context; This is required for ATLAS data model, more specifically the `DataVector<T>` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11523:154,access,access,154,https://root.cern,https://github.com/root-project/root/issues/11523,1,['access'],['access']
Security,"### Explain what you would like to see improved; Users should be allowed to customize the underlying object class of DAOS objects,; depending on their particular scenario. Unless the user specifies otherwise, we will; probably default to `OC_SX`. ### Optional: share how it could be improved; These kind of backend-specific parameters should be exposed via a subclass of; `RNTupleWriteOptions`, e.g. `RNTupleDaosWriteOptions`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8205:345,expose,exposed,345,https://root.cern,https://github.com/root-project/root/issues/8205,1,['expose'],['exposed']
Security,"### Feature description. As requested by the user on the forum (https://root-forum.cern.ch/t/rdataframe-feature-request-per-sample-histo-graph-fill-and-filter/), a FilterPerSample feature would improve and simplify physics analysis when a single RDataFrame with multiple samples is used. . There is an additional suggestion from the user concerning ""an option to expose the RSampleInfo object as a default RDataFrame column (in the same way as rdfentry_ and rdfslot_), maybe “rdfsample_” "". . ### Alternatives considered. The current workaround is by using a DefinePerSample in an additional column, where weights are set to 0 for all but the sample of interest. . ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13422:363,expose,expose,363,https://root.cern,https://github.com/root-project/root/issues/13422,1,['expose'],['expose']
Security,"### Feature description. It would be good to have a script to update the [PDG table in ROOT](https://github.com/root-project/root/blob/master/etc/pdg_table.txt) from various sources. As a first step, the recent [mcdata from the Particle Data Group](https://pdg.lbl.gov/2023/mcdata/mass_width_2023.txt) could be parsed. As a second step, corresponding [web/database APIs](https://pdg.lbl.gov/2023/html/computer_read.html) could be accessed. . _Originally suggested by @vkucera in https://github.com/root-project/root/issues/12968#issuecomment-1592966409_. ### Alternatives considered. _No response_. ### Additional context. This was conceived as a traineeship task by @Axel-Naumann for @DenizCiger.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13323:430,access,accessed,430,https://root.cern,https://github.com/root-project/root/issues/13323,1,['access'],['accessed']
Security,"### Feature description. While discussing https://github.com/root-project/root/issues/14064 , a question was raised whether ROOT could expose to users some facility for setting custom fonts at runtime, which would also make that feature request not necessary at the same time. Somehting akin to. ```python; ROOT.SetFont(""MyCustomFont.otf""); ```. Which would need to be respected across all the graphics output, i.e. the canvas, generated PNGs, PDFs etc. for that specific ROOT session. FYI @andrzejnovak @ttedeschi. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14065:135,expose,expose,135,https://root.cern,https://github.com/root-project/root/issues/14065,1,['expose'],['expose']
Security,"### Is your feature request related to a problem? Please describe. Hello, as described in [ROOT-7859](https://sft.its.cern.ch/jira/browse/ROOT-7859), ROOT does not handle UTF8 encoding for characters in the current ROOT version (6.22). ### Describe the solution you'd like; It would be really nice to have such support since as shown on the sreenshot [here](https://sft.its.cern.ch/jira/secure/attachment/18752/TBrowser.png), characters with diacritics (here is the ""é"" character) are not correctly displayed.; It already exists some workarounds for the graphics (see the forum post) but it does not work in the case of the TBrowser for example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6681:387,secur,secure,387,https://root.cern,https://github.com/root-project/root/issues/6681,1,['secur'],['secure']
Security,"### Is your feature request related to a problem? Please describe. RooFit compute libraries are loaded at runtime, picking the best instruction set available. Some of our users (LHCb, for instance), need to pin down the specific library to be loaded, to make sure their results are specifically the same as the ones they validated. We need to; - [ ] have a mechanism for this; - [ ] expose the mechanism, for instance through documentation / release notes; - [ ] ensure that LHCb gets that flag enabled. This *must* happen by v6.24 for this release to be usable by LHCb. ### Describe the solution you'd like. Environment variable: `export ROOT_ARCH=avx2` etc. ### Describe alternatives you've considered. Preventing all LCG builds from using optimal libraries seems like overkill, so this should not be a cmake flag. ### Additional context. Calling in @pikacic to share additional constraints / comments / ideas!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7361:321,validat,validated,321,https://root.cern,https://github.com/root-project/root/issues/7361,2,"['expose', 'validat']","['expose', 'validated']"
Security,"### Is your feature request related to a problem? Please describe.; 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private.; 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy.; 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like; The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered; Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11603:1451,checksum,checksum,1451,https://root.cern,https://github.com/root-project/root/issues/11603,1,['checksum'],['checksum']
Security,"### Is your feature request related to a problem? Please describe.; <!--; A clear and concise description of what the problem is. E.g ""I always have to [...] when I want to [...]""; -->. Rather often for minimisation in `RooFit`, using `RooAbsPDf::fitTo`, for complicated functions a maximal number of calls is reached. Since there is no direct war to access this parameter of `RooMinimiser` from `RooAbsPDf::fitTo`,; for such cases I need to switch from `RooAbsPdf::fitTo` to a manual creation of `RooMinimiser` object, ; configure it and use it to minimize (manually created) NLL. . ### Describe the solution you'd like; <!--; A clear and concise description of what you want to happen.; -->. It will be very good to have a dedicated option(`RooCmdArg`) to `RooAbsPdf::fitTo` function that allows to redefine the default number of calls, such that one can use it together with other options, e.g. . ```; dataset = ...; pdf = ...; result = pdf.FitTo ( dataset , ROOT.RooFit.Save() , ROOT.RooFit.MaxCalls( 10000 ) , ... ); ```; ; ### Describe alternatives you've considered; <!--; Can you think of alternative solutions or features?; -->. The standard way that I use , is in case `RooAbsPdf::fitTo` reaches maximal number of calls, switch ; to manual creation and configuration of `RooMinimiser`, manual creation of NLL and edssentially bypass very nice and convinient `RooAbsPdf::fitTo` interface. . ### Additional context; <!--; Add any other context or screenshots about the feature requested here.; -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11875:351,access,access,351,https://root.cern,https://github.com/root-project/root/issues/11875,1,['access'],['access']
Security,"### Is your feature request related to a problem? Please describe.; Compiled libraries of a ROOT macro often end up in the same folder, taking some extra space, and I remove then later by hand to avoid polluting too much source code directories. It makes also files in a folder with many scripts, harder to found, as two of every three is 'dummy' (.so, .d). ### Describe the solution you'd like; It would be nice to have an option or flag 't' in [TSystem::CompileMacro](https://root.cern/doc/master/classTSystem.html#ac557d8f24d067a9b89d2b8fb261d7e18) that automatically:; - Outputs the compiled macro to the default temp directory using [std::temp_directory_path](https://en.cppreference.com/w/cpp/filesystem/temp_directory_path); - It gives this file a hash-generated filename that is path-specific, to avoid that two macros called the same way overwrite each other.; ; The easiest way for this would be to remove all slashes from the full filename and transforms it to underscores. For example: ; `root -l my/full/path/to/folder/my_macro.C+t`; should give:; `/tmp/my_full_path_to_folder_my_macro.C_so`. Or alternatively, if a new flag is not wanted, that this could be specified via the rootrc. Also, if /tmp/ is not wanted, it could maybe be instead a user-config directory (https://github.com/root-project/root/issues/10148). ### Describe alternatives you've considered; Using; `gSystem->SetBuildDir(""/tmp/"");`; in my `rootlogon.C`.; But this does not solve the overwrite problem. ### Additional context; https://root.cern/doc/master/classTSystem.html#ae8790897e77f60ff37876b944f9f0091",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10147:755,hash,hash-generated,755,https://root.cern,https://github.com/root-project/root/issues/10147,1,['hash'],['hash-generated']
Security,"### Is your feature request related to a problem? Please describe.; I have a dataset with ""truth"" and ""reco"" values, though not every event has both set of values. I define new variables respectively, for example; ```cxx; truth = df.Filter(has_truth, ...).; Define(""truth_computation"", expensive_computation_truth, ...);; reco = df.Filter(has_reco, ...).; Define(""reco_computation"", expensive_computation_reco, ...);; ```; I use both these dataframes to plot respective histograms. But then I'd also like to plot a 2D histogram that compares the values of `truth_computation` and `reco_computation` when both exist. ### Describe the solution you'd like; Ideally, one could then write something like; ```cxx; both = ROOT::RDF::Intersection(truth, reco);; both.Histo2D(..., {""truth_computation"", ""reco_computation""});; ```; Here, `both` consists of events that pass both filters, and has access to all definitions from both branches. ### Describe alternatives you've considered; I can calculate both quantities in the beginning; ```cxx; pre = df.Filter(has_truth || has_reco, ...).; Define(""truth_computation"", expensive_computation_truth, ...).; Define(""reco_computation"", expensive_computation_reco, ...);; truth = pre.Filter(has_truth, ...);; reco = pre.Filter(has_reco, ...);; both = reco.Filter(has_truth, ...);; ```; but this will; 1. call the filters `has_truth` and `has_reco` extra times, which may be expensive; 2. try to calculate reco quantities for truth events and vice versa, though this is probably not too bad if `expensive_computation_truth` can no-op on reco events and vice versa, but that's not always possible",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10620:886,access,access,886,https://root.cern,https://github.com/root-project/root/issues/10620,1,['access'],['access']
Security,"### Is your feature request related to a problem? Please describe.; I want to create a frame for a _RooFormulaVar_. Unfortunately, it doesn't have a method _frame()_, so I wanted to use a _RooPlot_ constructor to create the frame, and later use the existing _plotOn()_ method of _RooFormulaVar_. However, it seems that [RooPlot](https://root.cern.ch/doc/master/classRooPlot.html) allows setting the number of bins only for _RooAbsRealLValue_, which is inconsistent. No method to set the number of bins is available. The underlying access to _nbins_ is private. ### Describe the solution you'd like; Allow to set the number of bins in all constructors. Maybe there should be a separate method for that, but it may be dangerous if someone tries to change the number of bins in the middle of processing. ### Describe alternatives you've considered; I already decided to use a new _RooRealVar_ instead of _RooFormulaVar_, but I think that a plot should allow to set the number of bins. UPD: no, there are no arguments to change the number of bins in _plotOn_. It seems it can be set only for the Plot.; _It looks like I can set the number of bins during _plotOn_ of _RooFormulaVar_. This is great. However, I think that in this case the number of bins in the constructor should be removed, to reduce code duplication. At least it should be made consistent in all constructors (see no reason for the otherwise, but I don't understand RooFit well yet)._. P.S. There is also a typo in the _RooPlot_ class description, ""settting"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7782:531,access,access,531,https://root.cern,https://github.com/root-project/root/issues/7782,1,['access'],['access']
Security,"### Is your feature request related to a problem? Please describe.; Not a problem but a usage of XRootD feature that is not used by TFile::Open. ### Describe the solution you'd like; It would be useful that .meta4 files in `TFile::Open(""whatever_name.meta4"")`; to be passed for processing to TNetXNGFile (XRootD). ### Describe alternatives you've considered; There are no alternatives, TFile::Open (TNetXNGFile::Open) does not know to pass; to XrdCl the meta file for processing. ### Additional context; XRootD (XrdCl) know to use a meta file (`.meta4`) which is a virtual redirector. This allows not only fallback through a list a replicas to the same file but (at least for xrdcp) concurrent access (with `-y | --sources <n> `). There would be 2 problems to be solved:; 1. Add a signature to TNetXNGFile to allow to process a call like `TNetXNGFile::Open(""whatever_name.meta4"")`; 2. Tell TFile to redirect an access to a `.meta4` file to TNetXNGFile. For reference, just in case the file type is identified by content (but from what i seen in TFile::GetType this is not the case) a meta4 file is an xml with the signature like:; ```; <?xml version=""1.0"" encoding=""UTF-8""?>; <metalink xmlns=""urn:ietf:params:xml:ns:metalink"">. ... </metalink>; ```. I tried something on my own but i got entangled on my lack of knowledge of TFile mechanics, so i though to ask expert help here, maybe the solution is fast and simple (in expert eyes).; Adding here @simonmichal in case there are questions on XrdCl feature.; Thanks a lot!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11653:694,access,access,694,https://root.cern,https://github.com/root-project/root/issues/11653,2,['access'],['access']
Security,"### Is your feature request related to a problem? Please describe.; When TMVA training is run with k-fold cross validation, the variable importances (both method unspecific and method specific) are not printed out by TMVA. ### Describe the solution you'd like; It would be nice if TMVA could print out the variable importances for each fold, as evaluated on the training set for that fold. ### Additional context; I see this issue with ROOT 6.22.06 on lxplus, run by invoking . ```source /cvmfs/sft.cern.ch/lcg/app/releases/ROOT/6.22.06/x86_64-centos7-gcc48-opt/bin/thisroot.sh```. I have tried training both with and without ```FoldFileOutput=True``` in the CrossValidation constructor, and don't see the variable importances in either.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7092:112,validat,validation,112,https://root.cern,https://github.com/root-project/root/issues/7092,1,['validat'],['validation']
Security,### This Pull request:; * Fix axis labels ; * CaloTower selection in context of REveDataCollection when collection filter is applied; * Fix client's duplicate error messages from server; * Minor correction in Summary view layout; * Add expression validator for new column expression in table; * Review log messages; * Introduce HttpPublic option which disable usage of RFileDialog; * Updates REnderCore with fixes in font renderin. From verion 1.5 to 1.6.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16829:247,validat,validator,247,https://root.cern,https://github.com/root-project/root/pull/16829,1,['validat'],['validator']
Security,' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 12: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:166; 13: Null pointer value stored to 'i' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:167; 14: Control jumps to 'case kIsEnum:' at line 171 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:169; 15: Control jumps to 'case kFloat_t:' at line 179 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:172; 16: Access to field 'flt' results in a dereference of a null pointer (loaded from variable 'i') in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:179; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:180:41: warning: Access to field 'flt' results in a dereference of a null pointer (loaded from variable 'i') [clang-analyzer-core.NullDereference]; 1: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is non-null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 3: '?' condition is true in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 6: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_sr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:57845,Access,Access,57845,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security,"' in /usr/lib/gcc/x86_64-linux-gnu/9/include/stdarg.h:48; 13: Initialized va_list in /opt/root_src/core/base/src/TString.cxx:2422; 14: expanded from macro 'R__VA_COPY' in /opt/root_src/core/base/inc/Varargs.h:48; 15: expanded from macro '__va_copy' in /usr/lib/gcc/x86_64-linux-gnu/9/include/stdarg.h:54; 16: Ended va_list in /opt/root_src/core/base/src/TString.cxx:2425; 17: expanded from macro 'va_end' in /usr/lib/gcc/x86_64-linux-gnu/9/include/stdarg.h:48; 18: Returning from 'Format' in /opt/root_src/core/base/src/TString.cxx:2463; 19: va_end() is called on an uninitialized va_list in /opt/root_src/core/base/src/TString.cxx:2467; 20: expanded from macro 'va_end' in /usr/lib/gcc/x86_64-linux-gnu/9/include/stdarg.h:48; /opt/root_src/core/base/src/TString.cxx:2515:11: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/base/src/TString.cxx:2515; /opt/root_src/core/base/src/TSystem.cxx:1020:4: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Calling 'TString::IsNull' in /opt/root_src/core/base/src/TSystem.cxx:1008; 2: Assuming the condition is false in /opt/root_src/core/base/inc/TString.h:407; 3: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TString.h:407; 4: Returning from 'TString::IsNull' in /opt/root_src/core/base/src/TSystem.cxx:1008; 5: Left side of '||' is false in /opt/root_src/core/base/src/TSystem.cxx:1008; 6: Assuming the condition is false in /opt/root_src/core/base/src/TSystem.cxx:1008; 7: Taking false branch in /opt/roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7412:161795,secur,security,161795,https://root.cern,https://github.com/root-project/root/issues/7412,1,['secur'],['security']
Security,'&&' is true in /opt/root_src/net/http/civetweb/civetweb.c:18072; 17: Assuming the condition is true in /opt/root_src/net/http/civetweb/civetweb.c:18072; 18: Taking true branch in /opt/root_src/net/http/civetweb/civetweb.c:18072; 19: Calling 'accept_new_connection' in /opt/root_src/net/http/civetweb/civetweb.c:18073; 20: Assuming the condition is false in /opt/root_src/net/http/civetweb/civetweb.c:17937; 21: Taking false branch in /opt/root_src/net/http/civetweb/civetweb.c:17937; 22: 1st function call argument is an uninitialized value in /opt/root_src/net/http/civetweb/civetweb.c:17939; /opt/root_src/net/http/civetweb/civetweb.c:18152:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:18152; /opt/root_src/net/http/civetweb/civetweb.c:18334:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:18334; /opt/root_src/net/http/civetweb/civetweb.c:18899:3: warning: Call to function 'strcat' is i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:73079,secur,security,73079,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,'sprintf_s' in case of C11 in /opt/root_src/build/rmkdepend/cppsetup.c:150; /opt/root_src/build/rmkdepend/cppsetup.c:180:4: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/build/rmkdepend/cppsetup.c:180; /opt/root_src/build/rmkdepend/include.c:158:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/build/rmkdepend/include.c:158; /opt/root_src/build/rmkdepend/include.c:289:10: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/build/rmkdepend/include.c:289; /opt/root_src/build/rmkdepend/include.c:292:10: warn,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7410:1787,secur,security,1787,https://root.cern,https://github.com/root-project/root/issues/7410,1,['secur'],['security']
Security,'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/unix/src/TUnixSystem.cxx:4246; /opt/root_src/core/unix/src/TUnixSystem.cxx:4458:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/unix/src/TUnixSystem.cxx:4458; /opt/root_src/core/zip/src/Bits.c:255:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/zip/src/Bits.c:255; /opt/root_src/core/zip/src/Bits.c:358:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 st,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7427:4730,secur,security,4730,https://root.cern,https://github.com/root-project/root/issues/7427,1,['secur'],['security']
Security,"(const auto& element : test_map_){; std::cout << element.first[0] << "" "" << element.first[1] << "" "" << element.second << std::endl;; }; }; private:; std::map<std::array<std::string, 2>, std::string> test_map_{};; ClassDef(TestClass, 1);; };; ClassImp(TestClass); ; void test(){; auto* test_obj = new TestClass;; test_obj->Print();; ; auto* file = TFile::Open(""test.root"", ""recreate"");; test_obj->Write(""obj"");; file->Close();; ; delete file;; delete test_obj;; ; file = TFile::Open(""test.root"", ""read"");; test_obj = file->Get<TestClass>(""obj"");; test_obj->Print();; ; file->Close();; delete file;; }; ; int main(int argc, char* argv[]) {; test();; return 0;; }. ### Running the example. With a compiled code everything works as expected:. root -l; root [0] .L test.cpp+; root [1] test(). gives correct output:. aaaa bbbbbb cccc; aaaa bbbbbb cccc. But if I try to read again the same file:. root -l test.root; root [0] gSystem->Load(""test_cpp""); root [1] obj->Print(); Error in <TBufferFile::ReadVersion>: Could not find the StreamerInfo with a checksum of 0x6b3ba626 for the class ""string"" in test.root.; Error in <TBufferFile::CheckByteCount>: object of class string read too many bytes: 72 instead of 24; Warning in <TBufferFile::CheckByteCount>: string::Streamer() not in sync with data on file test.root, fix Streamer(); aaaabbbbbb@ cccc�i�� cccc. With an older version of ROOT (6.18), everything works as expected. ### Some additional information. I tried to compare StreamerInfo for 2 ROOT versions and they are different (last item):. **root 6.18**. root [2] _file0->ShowStreamerInfo(); OBJ: TList TList Doubly linked list : 0; ; StreamerInfo for class: TestClass, version=1, checksum=0x84f55819; TObject BASE offset= 0 type=66 Basic ROOT object; map<array<string,2>,string> test_map_ offset= 0 type=300 (nodelete) ,stl=4, ctype=61,; ; StreamerInfo for class: pair<array<string,2>,string>, version=1, checksum=0x64321048; string first [2] offset= 0 type=320 ,stl=365, ctype=365,; string second ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8268:1549,checksum,checksum,1549,https://root.cern,https://github.com/root-project/root/issues/8268,1,['checksum'],['checksum']
Security,") src/core/base/src/TApplication.cxx:1480:11; #21 0x7ffff771e385 in TApplication::ProcessLine(char const*, bool, int*) src/core/base/src/TApplication.cxx:1453:14; #22 0x7ffff7f8157a in TRint::ProcessLineNr(char const*, char const*, int*) src/core/rint/src/TRint.cxx:766:11; #23 0x7ffff7f802f0 in TRint::Run(bool) src/core/rint/src/TRint.cxx:424:22; #24 0x4ff96d in main src/main/src/rmain.cxx:30:12; #25 0x7ffff6e040b2 in __libc_start_main /build/glibc-YbNSs7/glibc-2.31/csu/../csu/libc-start.c:308:16; #26 0x41f35d in _start (asan/bin/root.exe+0x41f35d). Address 0x7ffff3afd82a is located in stack of thread T0 at offset 42 in frame; #0 0x7fffe99b3d8f in TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) src/core/metacling/src/TCling.cxx:2456. This frame has 21 object(s):; [32, 56) 'sLine' (line 2462) <== Memory access at offset 42 is inside this variable; [96, 104) 'R__guard2471' (line 2471); [128, 136) 'R__guard2488' (line 2488); [160, 176) 'interpreterFlagsRAII' (line 2491); [192, 240) 'result' (line 2511); [272, 276) 'compRes' (line 2512); [288, 312) 'mod_line' (line 2517); [352, 376) 'aclicMode' (line 2518); [416, 440) 'arguments' (line 2519); [480, 504) 'io' (line 2520); [544, 568) 'fname' (line 2521); [608, 632) 'ref.tmp' (line 2547); [672, 696) 'ref.tmp145' (line 2547); [736, 768) 'code' (line 2555); [800, 832) 'codeline' (line 2556); [864, 1384) 'in' (line 2559); [1520, 1552) 'ref.tmp176' (line 2562); [1584, 1600) 'agg.tmp'; [1616, 1624) 'ref.tmp198' (line 2568); [1648, 1664) 'agg.tmp207'; [1680, 1696) 'autoParseRaii' (line 2588); HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork; (longjmp and C++ exceptions *are* supported); SUMMARY: AddressSanitizer: stack-use-after-return src/interpreter/cling/lib/MetaProcessor/MetaLexer.cpp:58:11 in cling::MetaLexer::Lex(cling::Token&); Shadow bytes around the buggy address:; 0x10007e757ab0: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5; 0x10007e757ac0: f",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8041:4670,access,access,4670,https://root.cern,https://github.com/root-project/root/pull/8041,1,['access'],['access']
Security,"). So it is also possible to do (this time picking a real example from ROOT):; ```python; @pythonization(""ROOT::VecOps::RVec<"", is_prefix=True); def pythonizor_RVec(klass, name):; ...; ```; The `is_prefix` argument (`False` by default) tells that I want to match anything that starts with `ROOT::VecOps::RVec<`, e.g. `ROOT::VecOps::RVec<float>`. The same thing can be done with an iterable too:; ```python; @pythonization([ ""ROOT::VecOps::RVec<"", ""std::vector<"" ], is_prefix=True); def pythonizor_RVec_stdvec(klass, name):; ...; ```. Alternatively, I could have allowed regular expressions. I discarded that because of two reasons:; - They are more costly that simple string comparison.; - They complicate the registration of pythonizors per scope. In this new `@pythonization` decorator, the scope of the class is parsed (e.g. `NS1::NS2` for `NS1::NS2::C`) and the pythonizor is _registered for that scope_. This allows for more efficient lookup of the pythonizors to apply, because when a class is accessed for the first time, only the pythonizors registered for its scope will be attempted. This is nice for user classes, because if a user class belongs to `UserNamespace`, when the user script first accesses the class only the pythonizors for classes in `UserNamespace` will be tried, and not every single registered pythonizor (in particular, not all the pythonizors ROOT registers for its classes in the global namespace). So I prefer to have a clean static prefix that unambiguously tells me what the target scope is than something like `NS1::(.+)::C`. And if the user wants to do an additional complex matching with regular expressions, they can still do so in their pythonizor code via the `name` parameter. I'd like to hear the opinion of @pikacic and @daritter about this since we've discussed about this decorator in the past (no need to review the whole PR, giving your opinion on the programming examples is already more than enough!). EDIT: I have received some feedback from @eguiraud",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9128:2665,access,accessed,2665,https://root.cern,https://github.com/root-project/root/pull/9128,1,['access'],['accessed']
Security,"* Implement scene subscription in order to add and remove views dynamically on client; * Add toolbar in a view to directly access control to expand, swap, and destroy; * Change 'View'manu in the menubar to 'Subscribe' menu to create views on the client that are not yet subscribed; * Fix possible deadlock on client disconnect while the client is updating",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12383:123,access,access,123,https://root.cern,https://github.com/root-project/root/pull/12383,1,['access'],['access']
Security,"* Refactor the original HistFactory code such that pieces can be reused in the HS3 JSON IO implementation; * Fix problems with ""reverse engineering"" the name of the `ShapeSys` systematics from the ParamHistFunc name; * The `testHistFactory` unit test now validates full JSON roundtripping closure of workspaces with `ShapeSys`, both with Gaussian and Poisson constraints. More details in the commit descriptions",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13572:255,validat,validates,255,https://root.cern,https://github.com/root-project/root/pull/13572,1,['validat'],['validates']
Security,* Rename function access a channel from EveLog() to REveLog(); * Make logger stored messages thred local,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8191:18,access,access,18,https://root.cern,https://github.com/root-project/root/pull/8191,1,['access'],['access']
Security,"* fix invalid memory access in RooFuncWrapper by getting observables and parameters of the original function, and not the one that is compiled for a normalization set, which is temporary. What matters are the names of the parameters and observables, and they are the same anyway. * new `CodeSquashContext::buildCall()` function to avoid code duplication. * add support for `RooExponential`, including unit test. Followup to #12529.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12554:21,access,access,21,https://root.cern,https://github.com/root-project/root/pull/12554,1,['access'],['access']
Security,"* remove wrong multiplication of type size in `CastPersistentToShared`. * restructure `InitializeTensor` to only provide read-only accessors, enforcing invariance of the right combination between type, shape and data. * avoid **memory leak** of persistified data when reading back from file. * reset `fSize` member in `CastSharedToPersistent` to avoid wrong size info when persistifying the same model twice (otherwise, the multiplication with the element size in bytes would happen twice, resulting in overruns when copying the transient data). Extends on #15162.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15163:131,access,accessors,131,https://root.cern,https://github.com/root-project/root/pull/15163,1,['access'],['accessors']
Security,"**First two commits**:. Sanity checks for a non-jitted Vary asked the nominal Define'd; columns static type information that a jitted Define did not have. With this patch RJittedDefine should also have that type; information in most if not all cases. **Last commit**:. Fix potential invalid memory access when using Vary. Users can vary a single column or multiple columns simultaneously.; In the latter case, RVariation::fLastResults contains, for each; processing slot, an RVec of RVecs of results where the outer; dimension runs over the different columns and the inner one over; the varied values of each column. Before this commit, RVariation was initializing fLastResults to; the wrong size in the case of multiple columns varied simultaneously,; which ended up causing invalid memory accesses during the event loop; in some cases. This patch fixes the problem and adds a regression test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10699:298,access,access,298,https://root.cern,https://github.com/root-project/root/pull/10699,2,['access'],"['access', 'accesses']"
Security,"**For reviewers**:; The most important commit is the first, and specifically the files; `RooAbsCategory.h, RooCategory.h`; The former is the base class of all categories, the latter the user-facing implementation. Here's what happened:; RooFit categories were using the class RooCatType (: public TObject); instead of an integer to represent category states.; This class contained an integer and a char[256] to store a category index; and a (possibly truncated) state name. This prevented fast batch access,; and increased the overhead for data storage and data loading. From now on, categories are represented as integers.; Every state can be denoted by index or name, but instead of storing; *both packed into an object* in each row of the dataset, only the index is stored, and the; mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several; parts had to be touched to convert everything to using integers. This feature; has been cooking since March, and the interface for category classes was; discussed in the PPP, but nevertheless, have a double look at the above-mentioned; headers. In more detail:; - Replace RooCatType by an integer.; - Replace names saved in each row of dataset with RooCatType by a map in; RooAbsCategory that maps state names to numbers. This saves 64 bytes; + the size of TObject for each event, and makes loading strings in each; event unnecessary.; - Provide legacy iterator for iterating through states instances of; RooCatType, which will be created on the fly.; - Make RooVectorDataStore store integers instead of RooCatType instances.; - With this, also reduce the amount of unnecessary members in RooVectorDataStore.; - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:; - Provide new interfaces for categories to work without RooCatType.; - Add bracket operator and constructor arguments to define multiple; category states at on",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5502:500,access,access,500,https://root.cern,https://github.com/root-project/root/pull/5502,1,['access'],['access']
Security,"*Ported over from JIRA (https://its.cern.ch/jira/browse/ROOT-7704), where there was already lots of discussion. See also the previous attempt in #5541*. ## Original ticket. Is it possibile to use lambda function created in c++ into python?; ```python; ROOT.gROOT.ProcessLine(""auto l = []{cout << 100 << endl;}""); ROOT.l; ```; I get:; ```txt; /home/turra/root/lib/ROOT.py:436: RuntimeWarning: creating converter for unknown type ""(lambda)""; attr = _root.LookupCppEntity( name, PyConfig.ExposeCppMacros ); ```; I see on the contrary that it is possibile to use std::function; ```python; ROOT.gROOT.ProcessLine(""std::function<void()> f = []{cout << 100 << endl;}""); ROOT.f(); ```; the problem is that each lambda function is a different type. Is it possible to wrap them in a std::function automatically?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16168:485,Expose,ExposeCppMacros,485,https://root.cern,https://github.com/root-project/root/issues/16168,1,['Expose'],['ExposeCppMacros']
Security,"+-9'; -- Performing Test found_stdstringview; -- Performing Test found_stdstringview - Failed; -- Performing Test found_stdexpstringview; -- Performing Test found_stdexpstringview - Success; -- Performing Test found_stod_stringview; -- Performing Test found_stod_stringview - Failed; -- Performing Test found_stdapply; -- Performing Test found_stdapply - Failed; -- Performing Test found_stdinvoke; -- Performing Test found_stdinvoke - Failed; -- Performing Test found_stdindexsequence; -- Performing Test found_stdindexsequence - Success; -- 530/857 C++ tutorials have been activated.; -- 119/166 python tutorials have been activated.; -- ROOT Configuration . System Linux-5.11.0-051100-generic; Processor 4 core Intel(R) Core(TM) i7-6700HQ CPU @ 2.60GHz (x86_64); Build type RelWithDebInfo; Install path /usr/local; Compiler GNU 9.3.0; Compiler flags:; C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -g -DNDEBUG; C++ -std=c++14 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -g -DNDEBUG; Linker flags:; Executable -rdynamic; Module ; Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_vdt builtin_xxhash builtin_zstd ccache clad dataframe exceptions gdml http imt mlp pyroot roofit webgui root7 runtime_cxxmodules shared ssl tmva spectrum uring vdt x11; -- Configuring incomplete, errors occurred!; See also ""/home/max/projects/rootdev/root/new-build/CMakeFiles/CMakeOutput.log"".; See also ""/home/max/projects/rootdev/root/new-build/CMakeFiles/CMakeError.log"".; ```; <!--; A clear and concise description of what the wrong behavior is.; -->. ### Setup; * ROOT master; * Ubuntu 18.04; * gcc 9.3; * CMake 3.10.2; <!--; 1. ROOT master; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary downl",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7654:4883,hash,hash-style,4883,https://root.cern,https://github.com/root-project/root/issues/7654,1,['hash'],['hash-style']
Security,", bufsize=1024, motherDir=<optimized out>); at /u/rlalik/hades/software/root-v5/io/io/src/TKey.cxx:253; #25 0x00007ffff14842f5 in TFile::CreateKey (this=<optimized out>, mother=0x4305530, obj=0x4307c00, name=0x4307c19 ""T"", bufsize=1024); at /u/rlalik/hades/software/root-v5/io/io/src/TFile.cxx:960; --Type <RET> for more, q to quit, c to continue without paging--; #26 0x00007ffff147d464 in TDirectoryFile::WriteTObject (this=0x4305530, obj=0x4307c00, name=<optimized out>, option=<optimized out>, bufsize=0); at /u/rlalik/hades/software/root-v5/io/io/src/TDirectoryFile.cxx:1839; #27 0x00007fffefc092a2 in TTree::AutoSave (this=0x4307c00, option=<optimized out>) at /u/rlalik/hades/software/root-v5/tree/tree/src/TTree.cxx:1249; #28 0x00007fffefc144fe in TTree::Fill (this=0x4307c00) at /u/rlalik/hades/software/root-v5/tree/tree/src/TTree.cxx:4262; #29 0x00007ffff37befd7 in Hades::eventLoop (this=0xee5c60, nEvents=nEvents@entry=1000000, firstEvent=firstEvent@entry=0, timeQuota=6e+21, timeQuota@entry=1e+20); at eventhandling/hades.cc:956; #30 0x0000000000406056 in analysisDST (inFile=..., outdir=..., nEvents=nEvents@entry=1000000, startEvt=startEvt@entry=0) at analysisDST.cc:512; #31 0x00000000004036ac in main (argc=<optimized out>, argv=0x7fffffffd178) at analysisDST.cc:547; (gdb); ```. ### To Reproduce; Custom code requires whole framework, hard to regenerate. ### Setup; 1. root@v5-34-00-patches (sorry that I still need to use root-5); 2. Operating system; ```; $ lsb_release -a; LSB Version: core-2.0-amd64:core-2.0-noarch:core-3.0-amd64:core-3.0-noarch:core-3.1-amd64:core-3.1-noarch:core-3.2-amd64:core-3.2-noarch:core-4.0-amd64:core-4.0-noarch:core-4.1-amd64:core-4.1-noarch:security-4.0-amd64:security-4.0-noarch:security-4.1-amd64:security-4.1-noarch; Distributor ID: Debian; Description: Debian GNU/Linux 8.11 (jessie); Release: 8.11; Codename: jessie; ```; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; From git as mentioned above.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9564:7203,secur,security-,7203,https://root.cern,https://github.com/root-project/root/issues/9564,4,['secur'],['security-']
Security,", but works only for polymorphic classes, while TClass::DynamicCast and exception-based cast also work for non-polymorphic ones.; > If you want TDirectory to work for all kinds of classes you should consider not dynamic_cast algorithm [1], but exception handler matching one [2].; > Unfortunately, [2] says:; >> Since the RTTI related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data).; > ; > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3].; > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6].; > ; > So, if we want this exception hander matching algorithm, there are a couple of options:; > 1) Stick to libsupc++ with its ""public"" __do_catch() member function; > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardised list of type_info-derived types [8]; > 3) Take a closer look at noop1() and noop2() virtual methods above [6]. I suspect they were added to make libcxxabi type_info's vtable compatible with one of type_info from libsupc++, because libsupc++'s type_info also has a couple of virtual methods before the method which does catching check (see above [3]). The only difference is that __do_catch() has additional third argument whilst libcxxabi's can_catch() has only two. I think it won't cause problems if one calls two-argument method with three arguments, but doing the opposite might be troublesome. So, finally, if I'm right, we may try to call the method",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/463:1901,access,access,1901,https://root.cern,https://github.com/root-project/root/pull/463,1,['access'],['access']
Security,"- Add a couple of missing symbols into the export list; - Fix several test failing on Windows, mostly due to files staying open (creates file access issues on Windows); - Filter-out several unsupported tests (will add them back once the underlying issues are fixed)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4805:142,access,access,142,https://root.cern,https://github.com/root-project/root/pull/4805,1,['access'],['access']
Security,"- Add build option `asan` to build with address sanitizer.; Only works with clang so far.; - Add `lsan` build option to enable leak checking.; - Add suppression file for leak sanitizer, suppressing fallout from; llvm and clang memory management.; - Add ASAN_OPTIONS and LSAN_OPTIONS environment variables for; executables.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5066:48,sanitiz,sanitizer,48,https://root.cern,https://github.com/root-project/root/pull/5066,2,['sanitiz'],['sanitizer']
Security,"- Add build option `asan` to build with address sanitizer.; Only works with clang so far.; - Add suppression file for leak sanitizer, suppressing fallout from; llvm and clang memory management.; - Set up compiler flags for statically linking address sanitizer; into all ROOT exectuables.; - A micro library for configuring asan was added, and statically linked; into all ROOT executables.; Address sanitizer (at least in clang) allows to define; __asan_default_config and __lsan_default_suppressions to set good; defaults.; - A shared version of the setup library is available for all cases where; the address sanitizer run time is LD_PRELOADed into non-instrumented; executables.; - LD_PRELOAD with asan runtimes has been set up for all tests that use; python as executable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5237:48,sanitiz,sanitizer,48,https://root.cern,https://github.com/root-project/root/pull/5237,5,['sanitiz'],['sanitizer']
Security,"- Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:; - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed); - picking, highlight and tooltips; - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4617:869,Validat,Validate,869,https://root.cern,https://github.com/root-project/root/pull/4617,1,['Validat'],['Validate']
Security,- Modify the examples: no need to return the TCanvas.; - Make an index to ease access to the various sections.; - Resize and reformat the pictures.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11809:79,access,access,79,https://root.cern,https://github.com/root-project/root/pull/11809,1,['access'],['access']
Security,- Two important things: Dramatically speed up hash-assisted finds in `RooArgSet`; - Reduce `dynamic_cast` in RooAbsArg::setProxyNormSet. Here are some timings on a random machine with a dummy ATLAS Higgs->gamma gamma workspace:; | | Build | Fit |; | ------------------------------ | ----- | ---- |; | HGam old | 3:33 | 3:30 |; | HGam new | 0:40 | 2:12 |,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9411:46,hash,hash-assisted,46,https://root.cern,https://github.com/root-project/root/pull/9411,1,['hash'],['hash-assisted']
Security,"- [ ] Checked for duplicates. ### Describe the bug. Compilation of Root v6-26-06 from github release fails. The SHA256 hash is wrong and has been corrected after this release on; https://github.com/root-project/root/commit/ce4ca3e1537be6776b93ef7bf8cd39d942c7de27. ### Expected behavior. Compilation of Root v6-26-06 from github release succeeds. ### To Reproduce. Steps to reproduce the behavior:; 1. git clone http://root.cern.ch/git/root.git; 2. rootvers=""6-26-06""; git checkout v$rootvers; 3. mkdir ../root-build; cd ../root-build; 4. cmake -DCMAKE_INSTALL_PREFIX=$rootinstall -Dbuiltin_xrootd=ON -Droofit=ON -Dpythia8=ON -Dmysql=OFF ../root-sources. ### Setup. 1. ROOT version v6-26-06; 2. Operating system Linux Fedora 36; 3. git clone http://root.cern.ch/git/root.git",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11160:119,hash,hash,119,https://root.cern,https://github.com/root-project/root/issues/11160,1,['hash'],['hash']
Security,"- [ ] Checked for duplicates. ### Describe the bug. When updating the version of the RooAbsArg class with 068465e (part of https://github.com/root-project/root/pull/8764), an unexpected warning appears in the testProxiesAndCategories unit test:. ```; Warning in <TStreamerInfo::BuildCheck>: ; The StreamerInfo of class RooRealVar read from file categories_v624.root; has the same version (=7) as the active class but a different checksum.; You should update the version to ClassDef(RooRealVar,8).; Do not try to write objects with the current class definition,; the files will not be readable. Warning in <TStreamerInfo::CompareContent>: The following data member of; the on-file layout version 7 of class 'RooRealVar' differs from ; the in-memory layout version 7:; RooAbsBinning _binning; //; vs; unique_ptr<RooAbsBinning,default_delete<RooAbsBinning> > _binning; //; ```. The warning is uexpected because:; * it comes from the RooRealVar class that was not changed in 068465e; * it only appears now after seemingly unrelated changes in the RooAbsArg base class; * the memory layout and checksums of the RooRealVar classes didn't change between 6.24 (version of the reference file) and ROOT master. Here is the streamer info of RooRealVar in master:; ```; root [7] TClass::GetClass(""RooRealVar"")->GetStreamerInfo()->ls(). StreamerInfo for class: RooRealVar, version=7, checksum=0xfd173f72; RooAbsRealLValue BASE offset= 0 type= 0 Abstract modifiable real-valued object; double _error offset=720 type= 8 Symmetric error associated with current value; double _asymErrLo offset=728 type= 8 Low side of asymmetric error associated with current value; double _asymErrHi offset=736 type= 8 High side of asymmetric error associated with current value; RooAbsBinning* _binning offset=744 type=64 ; i= 0, RooAbsRealLValue type= 0, offset= 0, len=1, method=0; i= 1, _error type= 28, offset=720, len=3, method=0 [optimized]; i= 2, _binning type= 64, offset=744, len=1, method=0; ```; Here is the streamer info ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8791:429,checksum,checksum,429,https://root.cern,https://github.com/root-project/root/issues/8791,1,['checksum'],['checksum']
Security,"- [X] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->. A reproducer:. ```python; import ROOT; print(ROOT.gSystem.GetIncludePath()); ROOT.vector('int')(); print(ROOT.gSystem.GetIncludePath()); ```. prints . ```; -I$ROOTSYS/include -I""/home/eguiraud/ROOT/install_dbg_includepaths/etc/"" -I""/home/eguiraud/ROOT/install_dbg_includepaths/etc//cling"" -I""/home/eguiraud/ROOT/install_dbg_includepaths/include/"" -I""/usr/include/python2.7""; -I$ROOTSYS/include -I""/home/eguiraud/ROOT/install_dbg_includepaths/etc/"" -I""/home/eguiraud/ROOT/install_dbg_includepaths/etc//cling"" -I""/home/eguiraud/ROOT/install_dbg_includepaths/include/"" -I""/usr/include/python2.7"" -I""/home/eguiraud/ROOT/build_dbg_includepaths/include""; ```. Note that the second line contains ` -I""/home/eguiraud/ROOT/build_dbg_includepaths/include""`, which wasn't there before a `ROOT.vector` was instantiated. That's problematic because the user might not have permissions to access the build directory (while it can access the install directory) leading to cling errors. This is with ROOT master@028fcca0fa , compiling ROOT with `cmake -DCMAKE_BUILD_TYPE=Debug -Dccache=ON -Ddev=ON -Droofit=OFF -Dtmva=OFF -Dtesting=ON -Droottest=ON ../root`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7108:1332,access,access,1332,https://root.cern,https://github.com/root-project/root/issues/7108,2,['access'],['access']
Security,"- [x ] Checked for duplicates. ### Describe the bug. ROOT 6.28.00 does not work correctly when $PWD is not accessible by the user. If I do:. ```bash; mkdir -p foo; cd foo; chmod 000 .; root; ```. it fails with:. ```bash; input_line_2:1:10: fatal error: cannot open file './cling/Interpreter/RuntimeUniverse.h': Permission denied; #include ""cling/Interpreter/RuntimeUniverse.h""; ^; Replaced symbol atexit cannot be found in JIT!; Replaced symbol at_quick_exit cannot be found in JIT!; input_line_4:2:10: fatal error: cannot open file './TError.h': Permission denied; #include ""TError.h""; ^; input_line_5:1:10: fatal error: cannot open file './cling/Interpreter/DynamicLookupRuntimeUniverse.h': Permission denied; #include ""cling/Interpreter/DynamicLookupRuntimeUniverse.h""; ```. the same snippet works fine with 6.26.10. Notice things work fine with just the x bit set (i.e. chmod 100 . still works). ### Expected behavior. The standard root prompt without any error. ### To Reproduce. See above. ```bash; mkdir -p foo; cd foo; chmod 000 .; root; ```. ### Setup. ROOT 6.28.00, both el7 and ubuntu. ### Additional context. While this can look like a corner case, it reflects the way ALICE runs its online reconstruction jobs, so it's rather critical for us. I am in parallel trying to understand if the unaccessible cwd can be avoided, but this might have non trivial implications (and its for sure beyond my responsibilities).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12409:107,access,accessible,107,https://root.cern,https://github.com/root-project/root/issues/12409,1,['access'],['accessible']
Security,"- [x] Checked for duplicates. ### Describe the bug. ROOT overrides CMake's `find_package` in `cmake/modules/SearchInstalledSoftware.cmake`, which is not uncommon, but relies on undocumented behavior of CMake. See e.g.: https://crascit.com/2018/09/14/do-not-redefine-cmake-commands/. This however breaks other tools, that also rely on this behavior, resulting in an infinite recursion. My concrete example is vcpkg, a popular package manager (not only for Windows), that pulls itself into a CMake project via a toolchain file to inject dependencies. Unfortunately, vcpkg needs to hook `find_package` itself to point it to the installed dependencies. ### Expected behavior. ROOT can be configured with vcpkg and other tools sensitive to overriden `find_package`. This requires ROOT to not override `find_package`. ### To Reproduce. Clone ROOT, create `build_win` folder, run:; ```; PS C:\dev\root\build_win> cmake -DCMAKE_TOOLCHAIN_FILE=D:\dev\vcpkg\scripts\buildsystems\vcpkg.cmake ..; -- Building for: Visual Studio 16 2019; -- Selecting Windows SDK version 10.0.19041.0 to target Windows 10.0.19042.; -- The C compiler identification is MSVC 19.29.30037.0; -- The CXX compiler identification is MSVC 19.29.30037.0; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30037/bin/Hostx64/x64/cl.exe - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30037/bin/Hostx64/x64/cl.exe - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Git: C:/Program Files/Git/cmd/git.exe (found version ""2.30.0.windows.2""); -- Detected ROOT_VERSION 6.25.01; -- Looking for Python; -- Could NOT find Python3 (mi",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8633:528,inject,inject,528,https://root.cern,https://github.com/root-project/root/issues/8633,1,['inject'],['inject']
Security,"- [x] Checked for duplicates. ### Describe the bug; Hi, may I discuss possible solutions of the incorrect work of the 'TPgSQLStatement::SetBinary' function.; In our experiment, we've used 'TPgSQLStatement::SetLargeObject' with PostgreSQL 8, but now we've moved to PostgreSQL 12 and discover that since PostgreSQL 9 the developers limited access to pg_largeobject, which leads to some problems.; So now we are using TPgSQLStatement::SetBinary' instead and i've found some bugs.; The original 'SetBinary' function includes the following main lines:; ```; unsigned char* escape_ptr = PQescapeBytea((const unsigned char*)mem, sz, &mxsz);; unsigned char* binary_ptr = PQunescapeBytea((const unsigned char*)escape_ptr, &mxsz);; ```; 1. 'PQunescapeBytea' conversion is not exactly the inverse of 'PQescapeBytea': 'PQescapeBytea' doubles quotes, but 'PQunescapeBytea' doesn't change quotes (doesn't remove added quotes).; So double quotes should be reduced to single ones after the conversion. Otherwise, a bytea field stored in the database has two quotes instead of original single ones.; 2. The solution works for PostgreSQL 8 (except 1. cases), because it escapes special characters with two backslashes, but since PostgreSQL 9.3 the special characters are escaped with one backslash. It means that PQunescapeBytea returns the special characters to original symbols refused by database encoding (UTF8 by default).; e.g. for CREATE TABLE test ( d bytea NOT NULL );; ```; TSQLStatement* stmt = my_db->Statement(""insert into test(d) values ($1)"");; int d = 8332;; stmt->NextIteration();; stmt->SetBinary(0, &d, sizeof(int));; stmt->Process();; ...; stmt = my_db->Statement(""select d from test"");; stmt->Process();; stmt->StoreResult();; while (stmt->NextResultRow()) {; void* mem = 0; Long_t size_mem = 0;; stmt->GetBinary(0, mem, size_mem);; int* val = new int;; memcpy(val, mem, size_mem);; cout<<""Binary size: ""<<size_mem<<"". Int value: ""<<*val<<endl;; }; ```; PostgreSQL 8 works well:. > 8c2000 // before",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7127:338,access,access,338,https://root.cern,https://github.com/root-project/root/issues/7127,1,['access'],['access']
Security,"- [x] Checked for duplicates. ### Describe the bug; Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior; Interpreter recovers. . ### To Reproduce; #### Prepare a file; ```; $ root -l; root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");; root [1] TTree *foo = new TTree(""t"",""t"");; root [2] foo->Write(); root [3] file->Close(); root [4] .q; ```; Open the file and read the tree in conjunction with a syntax error:; ```; $ root -l foo.root ; root [0] ; Attaching file foo.root as _file0...; (TFile *) 0x55f9f7a3e860; root [1] t->Print(=); ROOT_prompt_1:1:10: error: expected expression; t->Print(=); ^; ROOT_prompt_1:1:11: error: expected expression; t->Print(=); ^; root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed.; ```; ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:; ```; $ root -l foo.root ; root [0] ; Attaching file foo.root as _file0...; (TFile *) 0x55f9f7a3e860; root [1] t->Print(); .... correct output ...; root [2] t->Print(=); ROOT_prompt_2:1:10: error: expected expression; t->Print(=); ^; ROOT_prompt_2:1:11: error: expected expression; t->Print(=); ^; root [3]; ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup; 1. ROOT version: 6.26/08; 2. Operating system: Gentoo Linux; 3. How you obtained ROOT: `emerge root` (i.e. via package manager).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11651:194,access,access,194,https://root.cern,https://github.com/root-project/root/issues/11651,2,['access'],"['access', 'accessed']"
Security,"- [x] Checked for duplicates. ### Describe the bug; TClassEdit reads behind the end of a static string to find the type of an STL container.; This breaks address sanitizer builds, because asan immediately stops at the invalid read when rootcling runs. ### Expected behavior; It shouldn't read after the end of the string. ### To Reproduce; Apply this patch:; ```; --- a/core/foundation/src/TClassEdit.cxx; +++ b/core/foundation/src/TClassEdit.cxx; @@ -13,6 +13,7 @@; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ; +#include <array>; #include <cstdio>; #include <cstdlib>; #include <cassert>; @@ -557,7 +558,9 @@ ROOT::ESTLType TClassEdit::STLKind(std::string_view type); ; int TClassEdit::STLArgs(int kind); {; - static const char stln[] =// min number of container arguments; + constexpr int nKind = 14;; + assert(kind < nKind);; + static constexpr std::array<char, nKind> stln = // min number of container arguments; // vector, list, deque, map, multimap, set, multiset, bitset,; { 1, 1, 1, 1, 3, 3, 2, 2, 1,; // forward_list, unordered_set, unordered_multiset, unordered_map, unordered_multimap; ```. Then build in debug mode. The assertion will fail when RVec shows up in this function, since it is not an STL container. ### Setup; master. Sorry, I didn't check which other versions are affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7903:162,sanitiz,sanitizer,162,https://root.cern,https://github.com/root-project/root/issues/7903,1,['sanitiz'],['sanitizer']
Security,- [x] Checked for duplicates. ### Describe the bug; The size validation is missing in https://github.com/root-project/root/blob/master/core/zstd/src/ZipZSTD.cxx line 47.; This leads to invalid stream in case of sizes between 0x1000000 and 0xffffffff as only the 3 last bytes of the length are put in the encoded data. ### Expected behavior; The size should be checked as done in https://github.com/root-project/root/blob/master/core/lzma/src/ZipLZMA.c line 40 to 42. ### To Reproduce; Just try to deflate something of size > 0xffffff. ### Setup. ### Additional context,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9334:61,validat,validation,61,https://root.cern,https://github.com/root-project/root/issues/9334,1,['validat'],['validation']
Security,"- [x] Checked for duplicates. ### Describe the bug; We encounter a crash during dictionary creation via rootcling when building a specific package against the [ATLAS offline software -- Athena](https://gitlab.cern.ch/atlas/athena/).; The package can be accessed in this public [gitlab repository](https://gitlab.cern.ch/tdado/publiccustomeventsaver). Essentially, the package contains classes which derive from base classes within the Athena software repository, and we need to create dictionary for this package. ### Expected behavior; Build should succeed with dictionary creation. ### To Reproduce; We've been unable trigger this with a simple minimal example. I am attaching instead the log from the build, which contains the crash. [build_log_err.txt](https://github.com/root-project/root/files/6626012/build_log_err.txt). The following classes in the package are leading to the crash:; https://gitlab.cern.ch/tdado/publiccustomeventsaver/-/blob/master/HowtoExtendAnalysisTop/CustomEventSaver.h; https://gitlab.cern.ch/atlasphys-top/reco/howtoextendanalysistop/-/blob/master/HowtoExtendAnalysisTop/DynamicKeysEventSaver.h; Both of them derive from base class in athena:; https://gitlab.cern.ch/atlas/athena/-/blob/master/PhysicsAnalysis/TopPhys/xAOD/TopAnalysis/TopAnalysis/EventSaverFlatNtuple.h. ### Setup; <!--; 1. ROOT 6.24; 2. CentOS7; 3. CERN LCG builds, gcc8.; -->. [build_log_err.txt](https://github.com/root-project/root/files/6626012/build_log_err.txt)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8387:253,access,accessed,253,https://root.cern,https://github.com/root-project/root/issues/8387,1,['access'],['accessed']
Security,"- [x] Checked for duplicates. ### Describe the bug; When using AddressSanitizer compiler flag, i.e. -fsanitize=address and when RooMinimizer is called multiple times (in a loop) to minimize a result of createNLL(), the sanitizer throws an error of type AddressSanitizer: alloc-dealloc-mismatch (malloc vs operator delete). ### Expected behavior; This error should not appear as it points to wrong memory handling. ### To Reproduce; A minimum example is provided in the following gitlab repository: https://gitlab.cern.ch/tdado/roominimizerasanexample. 1. Clone the repository; 2. run ""make""; 3. run the code with ./example . ### Setup; 1. Tested with ROOT 6.22.02 and 6.22.06; 2. Ubuntu (22.02) and CENTOS7 - lxplus (22.06); 3. ROOT installed from LCG (lxplus) or/and using the precombined binary (ubuntu). ### Additional context; The error does not appear if the minimizer is called only once.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8946:219,sanitiz,sanitizer,219,https://root.cern,https://github.com/root-project/root/issues/8946,1,['sanitiz'],['sanitizer']
Security,"- [x] Checked for duplicates. ### Describe the bug; When using ROOT::RFile in my projects, I get some compiler warnings:. ```; In file included from /opt/root_bld/include/ROOT/RDirectory.hxx:20,; from /opt/root_bld/include/ROOT/RFile.hxx:19,; from zdt-daq/gui/MainWindow.cpp:49:; /opt/root_bld/include/ROOT/RLogger.hxx: In member function ‘void ROOT::Experimental::RLogDiagCount::Increment(ROOT::Experimental::ELogLevel)’:; /opt/root_bld/include/ROOT/RLogger.hxx:72:14: warning: enumeration value ‘kUnset’ not handled in switch [-Wswitch-enum]; switch (severity) {; ^; /opt/root_bld/include/ROOT/RLogger.hxx:72:14: warning: enumeration value ‘kInfo’ not handled in switch [-Wswitch-enum]; /opt/root_bld/include/ROOT/RLogger.hxx:72:14: warning: enumeration value ‘kDebug’ not handled in switch [-Wswitch-enum]; /opt/root_bld/include/ROOT/RLogger.hxx: At global scope:; /opt/root_bld/include/ROOT/RLogger.hxx:136:7: warning: base class ‘class ROOT::Experimental::RLogChannel’ has accessible non-virtual destructor [-Wnon-virtual-dtor]; class RLogManager : public RLogChannel, public RLogHandler {; ^~~~~~~~~~~; ```. ### Expected behavior; No warnings are found. ### Setup; 1. ROOT master; 2. Ubuntu 19; 3. Self-built",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8458:978,access,accessible,978,https://root.cern,https://github.com/root-project/root/issues/8458,1,['access'],['accessible']
Security,"- [x] Checked for duplicates. ### Describe the bug; ```; [ 1675s] [100%] Generating tutorials/hsimple.root; [ 1675s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/tutorials && LD_LIBRARY_PATH=/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/bin/root.exe -l -q -b -n -x hsimple.C -e return; [ 1675s] ; [ 1675s] Processing hsimple.C...; [ 1675s] root.exe: /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include/llvm/IR/User.h:216: void llvm::User::setNumHungOffUseOperands(unsigned int): Assertion `HasHungOffUses && ""Must have hung off uses to use this method""' failed.; ```. The `HasHungOffUses` member is initialized in the overloaded `clang::User::operator new`, which may trigger undefined behavior. See e.g.:. https://github.com/llvm/llvm-project/issues/47560; https://stackoverflow.com/questions/34892732/error-when-call-createphi-in-llvm. ### Expected behavior; Builtin libLLVM works correctly. Though this is an LLVM upstream issue, either force-disabling LTO, or adding a CMake option to pass this down to the LLVM build (similar to `LLVM_BUILD_TYPE`) might be an option. ### To Reproduce; CXXFLAGS=... -O2 -flto=auto; cmake -B _builddir -S .. && make. ### Setup; 1. ROOT version: 6.26.06; 2. openSUSE Tumbleweed; 3. build from source",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11135:609,HasH,HasHungOffUses,609,https://root.cern,https://github.com/root-project/root/issues/11135,2,['HasH'],['HasHungOffUses']
Security,"- [x] Checked for duplicates. `TCling::UpdateListOfLoadedSharedLibraries()` iterates through the linked list of dynamic libraries maintained by glibc and saves a pointer into the middle of the list:. https://github.com/root-project/root/blob/49c45b3291c71ffc7f603ae4267f112fdaf77ac4/core/metacling/src/TCling.cxx#L3285-L3290. This is a linked list that can be modified by the activity of other threads, so access to it needs to be protected by a glibc internal `dl_load_write_lock`. glibc provides an interface for this purpose, `dl_iterate_phdr(3)`:. https://linux.die.net/man/3/dl_iterate_phdr. which should be used instead of iterating through the list without the appropriate locking. This bug is not trivial to reproduce, but is believed to be responsible for crashes observed in CMS relval tests https://github.com/cms-sw/cmssw/issues/30359",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6797:406,access,access,406,https://root.cern,https://github.com/root-project/root/issues/6797,1,['access'],['access']
Security,"- [x] Checked for duplicates. ```; [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h: In member function 'llvm::Error cling::IncrementalJIT::RemovableObjectLinkingLayer::removeObject(llvm::orc::VModuleKey)':; [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:118:49: error: 'std::map<long unsigned int, std::unique_ptr<llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject> > llvm::orc::LegacyRTDyldObjectLinkingLayer::LinkedObjects' is private within this context; [ 82s] = static_cast<const AccessSymbolTable*>(LinkedObjects[K].get());; [ 82s] ^~~~~~~~~~~~~; [ 82s] In file included from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:22:0,; [ 82s] from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:12:; [ 82s] /usr/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:475:55: note: declared private here; [ 82s] std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;; [ 82s] ^~~~~~~~~~~~~; [ 82s] make[2]: *** [interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/build.make:125: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/BackendPasses.cpp.o] Error 1; ```; https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/cling/lib/Interpreter/IncrementalJIT.h#L111-L112. Patched version in ROOT:; https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L473-L476. Upstream (LLVM 9.x):; https://github.com/llvm/llvm-project/blob/c1a0a213378a458fbea1a5c77b315c7dce08fd05/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L465; ```; private:; ExecutionSession &ES;. ResourcesGetter GetResources;; NotifyLoadedFtor NotifyLoaded;; NotifyFinalizedFtor NotifyFinalized;; NotifyFreedFtor Not",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11146:597,Access,AccessSymbolTable,597,https://root.cern,https://github.com/root-project/root/issues/11146,1,['Access'],['AccessSymbolTable']
Security,"- [x] Checked for duplicates; ### Describe the bug; If I try to build a TTreeIndex using a specific element of a (pointer to) vector stored in the tree (like `BuildIndex(""values[5]"")`) the expression is always evalued as 0. This happens both with `BuildIndex` and with the `TTreeIndex` constructor.; ### Expected behavior; The expression used in the creation of the index should access correctly the given element of the vector (as it does when using the same expression in the `TTree::Scan` function); ### To Reproduce; I have prepared a small macro that creates a tree with a minimal structure and show how the indexing fails: https://cernbox.cern.ch/s/JXlFpygmNVVrbjP; ### Setup; Tested with both root 6.26/08 and 5.34/25",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11883:379,access,access,379,https://root.cern,https://github.com/root-project/root/issues/11883,1,['access'],['access']
Security,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug. This issue report follows my post in the ROOT forums https://root-forum.cern.ch/t/gdml-multiple-files-error-with-define/48581. Please refer to the forum post for additional details. In summary, when using the GDML modules feature as described on the manual (or so I think), the `<define/>` section of the child file is not being accessed correctly when the volume is a tessellated solid. This does not happen with a simple volume such as a box. On top of that I have managed to load the problematic GDML into Geant4 without problems, so that lead me to believe it is a ROOT bug. ### Expected behavior. Geometry should load without throwing an exception. ### To Reproduce. I load the GDML the following way:. ```; TGeoManager::Import(""mother.gdml"");; ```. `mother.gdml`:; ```; <?xml version=""1.0"" encoding=""UTF-8""?>; <gdml xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation=""https://service-spi.web.cern.ch/service-spi/app/releases/GDML/schema/gdml.xsd"">; <define />; <solids>; <box name=""world_solid"" x=""100"" y=""100"" z=""100"" />; </solids>; <structure>; <volume name=""world"">; <physvol>; <file name=""child.gdml"" />; </physvol>; <materialref ref=""world_material"" />; <solidref ref=""world_solid"" />; </volume>; </structure>; <setup name=""Default"" version=""1.0"">; <world ref=""world"" />; </setup>; </gdml>; ```. `child.gdml`:; ```; <?xml version=""1.0"" encoding=""UTF-8""?>; <gdml xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""; xsi:noNamespaceSchemaLocation=""https://service-spi.web.cern.ch/service-spi/app/releases/GDML/schema/gdml.xsd"">; <define>; <position name=""cube_v0"" unit=""mm"" ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9744:712,access,accessed,712,https://root.cern,https://github.com/root-project/root/issues/9744,1,['access'],['accessed']
Security,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug. When trying to read and write a ROOT file via S3-->Davix, the read is working just fine but when opening a file with either CREATE or RECREATE flag I obtain:; ```; root [0] TFile *_file0 = TFile::Open(""s3s://minio-herd.cloud.cnaf.infn.it/dciangot/W0003.root"", ""CREATE""); Info in <parseConfig>: Setting S3 SecretKey and AccessKey. Access Key : dciangot ; Error in <TDavixFile::DavixReadBuffer>: can not read data with davix: Result HTTP 404 : File not found , while readding after 3 attempts (18); Error in <TDavixFile::Init>: s3s://minio-herd.cloud.cnaf.infn.it/dciangot/W0003.root failed to read the file type data.; (TFile *) nullptr; ```; Leaving behind only a file with size 0. ### Expected behavior; I'm actually not sure if this should be expected, but I did expect the file to be created correctly. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; - MinIO s3 object storage. - `~/.rootrc` file:; ```; Davix.Debug: 2; Davix.GSI.CACheck: y; Davix.GSI.CAdir: /etc/ssl/certs; Davix.S3.Alternate: y; ```; - and then interactively:; ```; $> S3_ACCESS_KEY=dciangot S3_SECRET_KEY=xxxx root -b; ------------------------------------------------------------------; | Welcome to ROOT 6.24/06 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Sep 03 2021, 23:37:00 |; | From tag , 1 September 2021 |; | With |; | Try '.h",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9584:702,Access,AccessKey,702,https://root.cern,https://github.com/root-project/root/issues/9584,2,['Access'],"['Access', 'AccessKey']"
Security,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug. While hunting for some other problem using address sanitizer our unit tests ran into a heap-buffer-overflow in `TSpline2`:. ```; Warning in <TH1::TH1>: nbins is <=0 - set to nbins = 1me left: 0 sec) ; Warning in <TH1::TH1>: nbins is <=0 - set to nbins = 1; =================================================================; ==903254==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6020001549e0 at pc 0x7f530c576a66 bp 0x7ffc17738f20 sp 0x7ffc17738f18; READ of size 8 at 0x6020001549e0 thread T0; #0 0x7f530c576a65 in TMVA::TSpline2::Eval(double) const root/tmva/tmva/src/TSpline2.cxx:84; #1 0x7f530c3dd685 in TMVA::PDF::FillSplineToHist() root/tmva/tmva/src/PDF.cxx:539; #2 0x7f530c3de1e8 in TMVA::PDF::BuildSplinePDF() root/tmva/tmva/src/PDF.cxx:364; #3 0x7f530c3dfc62 in TMVA::PDF::BuildPDF(TH1 const*) root/tmva/tmva/src/PDF.cxx:299; #4 0x7f530be8247c in TMVA::MethodBase::CreateMVAPdfs() root/tmva/tmva/src/MethodBase.cxx:2220; #5 0x7f530beaaa67 in TMVA::MethodBase::TrainMethod() root/tmva/tmva/src/MethodBase.cxx:691; #6 0x7f530bd67bb7 in TMVA::Factory::TrainAllMethods() root/tmva/tmva/src/Factory.cxx:1173; #7 0x7f5311416107 in Belle2::MVA::TMVATeacher::trainFactory(TMVA::Factory&, TMVA::DataLoader&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const belle2/mva/methods/src/TMVA.cc:164; #8 0x7f5311418389 in Belle2::MVA::TMVATeacherClassification::train(Belle2::MVA::Dataset&) const belle2/mva/methods/src/TMVA.cc:303; #9 0x90859d in (anonymous namespace)::TMVATest_TMVAClassificationInterface_Test::TestBody() belle2/mva/methods/tests/test_TMVA.cc:153;",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8021:434,sanitiz,sanitizer,434,https://root.cern,https://github.com/root-project/root/issues/8021,1,['sanitiz'],['sanitizer']
Security,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->. First reported in the forum [here](https://root-forum.cern.ch/t/cannot-access-roomcstudy-genpardataset/46724), `keepGenData` is not sufficient to save generated parameters, despite the claims of the [documentation](https://root.cern.ch/doc/v624/classRooMCStudy.html#aa8654b8fcb5983d834c02489a35c9981). One must *also* specify an *internal* constraint. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. `genParDataSet` should contain the values of the parameters used in dataset generation if `keepGenData=True` in `RooMCStudy::generate` (or `::run` or `::generateAndFit`). ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. `mcstudy.genParDataSet()` is empty despite setting `keepGenData=True`:; ```python; import ROOT as r. ws = r.RooWorkspace(""workspace""); x = ws.factory(""x[-10, 10]""); pdf1 = ws.factory(""Gaussian::pdf1(x, m[-1, 1], s[5, 10])""); pdf2 = ws.factory(""Gaussian::pdf2(x, m, s)""); pdf = ws.factory(""SUM::pdf(N1[0, 100] * pdf1, N2[0, 100] * pdf2)""). mcstudy = r.RooMCStudy(pdf, r.RooArgSet(x)); mcstudy.generate(1, 1000, True). gen_ds = mcstudy.genParDataSet(); print(""yes"" if gen_ds else ""no""); ```. This is still the case if an external constraint is used:; ```python; import ROOT as r. ws = r.RooWorkspace(""workspace""); x = ws.factory(""x[-10, 10]",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9490:529,access,access-roomcstudy-genpardataset,529,https://root.cern,https://github.com/root-project/root/issues/9490,1,['access'],['access-roomcstudy-genpardataset']
Security,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->. I currently cannot build the master branch due to the fact that the hardcoded SHA256 checksum in /builtins/xrootd/CMakeLists.txt is not the same checksum as the one obtained when downloading the file. There is a mismatch. There is a check that makes the build fail in this case. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. The checksum in /builtins/xrootd/CMakeLists.txt is the same as the one obtained from the actually downloaded file. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; ```; git clone https://github.com/root-project/root.git; mkdir build; cd build; cmake ../root/ -Droofit_multiprocess=ON -Dminuit2=ON -Dtesting=ON -DCMAKE_IGNORE_PATH=""/home/zef/miniconda3/bin;/home/zef/miniconda3/include;/home/zef/miniconda3/lib"" -Dccache=ON -DPYTHON_EXECUTABLE=""/usr/bin/python3"" -Dbuiltin_fftw3=On; ```. Note that the checksum obtained by `sha256sum xrootd-5.4.2.tar.gz` is: 2b394270c55cb3d14f3c44b692311db99d2d25278882b513d4d564b68a58ed4a. The checksum hardcoded in the CMAKE file is: 84e8a9a2bcad116df479f94e985c287dd99fbac0613d4fbb61f4ccc0cef81fa3. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->. ROOT version: master branch as of now; Opera",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10503:543,checksum,checksum,543,https://root.cern,https://github.com/root-project/root/issues/10503,3,['checksum'],['checksum']
Security,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; When I try to access `ROOT.TPyDispatcher` from PyROOT (for example, using tutorials/pyroot/gui_ex.py), the following error occurs:. ```; input_line_37:1:10: fatal error: 'ROOT/TPyDispatcher.h' file not found; #include ""ROOT/TPyDispatcher.h""; ^~~~~~~~~~~~~~~~~~~~~~; Traceback (most recent call last):; File ""/usr/share/doc/root/tutorials/pyroot/gui_ex.py"", line 35, in <module>; m = ROOT.TPyDispatcher( MyDraw ); File ""/usr/lib/python3.8/site-packages/ROOT/_facade.py"", line 163, in _fallback_getattr; raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)); AttributeError: Failed to get attribute TPyDispatcher from ROOT; ```. I also cannot find `TPyDispatcher.h` on my system, which PyROOT tries to [include here](https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_facade.py#L292). ### Expected behavior. ROOT.TPyDispatcher is known to be broken in 6.22.00, but [it is supposed to be fixed for 6.22.02](https://github.com/root-project/root/pull/6065). ### To Reproduce. Run `python tutorials/pyroot/gui_ex.py`. ### Setup. 1. ROOT version: 6.22.02; 2. Operating system: Linux x86_64 (Arch Linux and Ubuntu 18.04); 3. Python version: Python3.8; 4. I tested this both for root from the Arch Linux repositories and from conda-forge, so I assume it is not the packagers fault.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6579:397,access,access,397,https://root.cern,https://github.com/root-project/root/issues/6579,1,['access'],['access']
Security,"- [x] add ARCHITECTURE.md; - [x] use `fCapacity == -1` to indicate memory-adoption mode; - [x] switch `assert`s to `throw`s; - [x] expose the small buffer size as a template parameter (defaulted to `sizeof(T)*8 > 1024 ? 0 : 8` or similar, see also https://lists.llvm.org/pipermail/llvm-dev/2020-November/146613.html and the way they currently do it in LLVM: https://llvm.org/doxygen/SmallVector_8h_source.html#l01101); - [x] re-check before/after benchmark runtimes (first measurements at https://eguiraud.web.cern.ch/eguiraud/decks/20201112_rvec_redesign_ppp ); - [x] unit test for exceptions thrown during construction or resizing (and add note about lack of exception safety in docs); - [x] confirm that crediting of LLVM is ok (currently only in `math/vecops/ARCHITECTURE.md`)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502:131,expose,expose,131,https://root.cern,https://github.com/root-project/root/pull/7502,1,['expose'],['expose']
Security,"- move important functions (constructors,destructors,accessors) to header; to avoid overhead in creating and accessing these small objects; - optimize access to TLorentzVector by avoiding a double switch statement; (switch on direction in TLorentzVector followed by same switch in TVector3)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/166:53,access,accessors,53,https://root.cern,https://github.com/root-project/root/pull/166,3,['access'],"['access', 'accessing', 'accessors']"
Security,"- move important functions (constructors,destructors,accessors) to header; to avoid overhead in creating and accessing these small objects; - optimize access to TLorentzVector by avoiding a double switch statement; (switch on direction in TLorentzVector followed by same switch in TVector3). This merge request is result of profiling work in the AliRoot framework where simple accesses to the mentioned objects are considerable (on the 2% level).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/165:53,access,accessors,53,https://root.cern,https://github.com/root-project/root/pull/165,4,['access'],"['access', 'accesses', 'accessing', 'accessors']"
Security,"-I""/<<PKGBUILDDIR>>/core/base/inc"" -I""/<<PKGBUILDDIR>>/core/clib/inc"" -I""/<<PKGBUILDDIR>>/core/meta/inc"" -I""/<<PKGBUILDDIR>>/core/foundation/inc"" -I""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/ginclude"" -I""/<<PKGBUILDDIR>>/interpreter/cling/include"" -isystem ""/<<PKGBUILDDIR>>/interpreter/llvm/src/tools/clang/include"" -isystem ""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/interpreter/llvm/src/tools/clang/include"" -isystem /usr/lib/llvm-13/include -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c '/<<PKGBUILDDIR>>/core/dictgen/src/rootcling_impl.cxx'; <<snip>>; [6107/8663] : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUt",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12152:1591,secur,security,1591,https://root.cern,https://github.com/root-project/root/issues/12152,1,['secur'],['security']
Security,-POD static (TString) [clazy-non-pod-global-static]; /opt/root_src/gui/gui/src/TGFontDialog.cxx:631:7: warning: Value stored to 'n1' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'n1' is never read in /opt/root_src/gui/gui/src/TGFontDialog.cxx:631; /opt/root_src/gui/gui/src/TGFontDialog.cxx:884:4: warning: Value stored to 'n1' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'n1' is never read in /opt/root_src/gui/gui/src/TGFontDialog.cxx:884; /opt/root_src/gui/gui/src/TGInputDialog.cxx:82:4: warning: Value stored to 'height' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'height' is never read in /opt/root_src/gui/gui/src/TGInputDialog.cxx:82; /opt/root_src/gui/gui/src/TGInputDialog.cxx:154:22: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGInputDialog.cxx:154; /opt/root_src/gui/gui/src/TGInputDialog.cxx:180:16: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGInputDialog.cxx:180; /opt/root_src/gui/gui/src/TGLayout.cxx:286:16: warning: Value stored to 'y' is never read [clang-analyzer-deadcode.DeadStore,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:39539,secur,security,39539,https://root.cern,https://github.com/root-project/root/issues/7533,1,['secur'],['security']
Security,"-reflex was deprecated because the flag was parsed but nothing was done after. Rootcling works in two modes. The first mode is when it is called directly. The second mode is when it was called from genreflex. Genreflex is essentially calling rootcling with the appropriate flag translation and it sets the isGenReflex variable to true. The argument translation mechanism of genreflex has a nice feature which can print the underlying rootcling invocation. This is helpful if we want to move away from reflex to rootcling. This might be reasonable to get access to the finer grained arguments and options rootcling provides. However, we should still call rootcling and set the isGenReflex to true as the variable alters the content of the dictionaries. In cmssw C++ modules IB we use rootcling instead of genreflex to have better control on the module generation provided by the rootcling option set. This patch implements a flag which can turn the rootcling invocation completely to genreflex. Using rootcling -reflex should fix the DataFormats/Provenance dictionary generation for cmssw. cc: @oshadura, @smuzaffar, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4547:554,access,access,554,https://root.cern,https://github.com/root-project/root/pull/4547,1,['access'],['access']
Security,"-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/setting-up-code-scanning-for-a-repository#setting-up-code-scanning-manually) to your repository — take a look! We tested it before opening this pull request, so all should be working :heavy_check_mark:. In fact, you might already have seen some alerts appear on this pull request!. Where needed and if possible, we’ve adjusted the configuration to the needs of your particular repository. But of course, you should feel free to tweak it further! Check [this page](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#editing-a-code-scanning-workflow) for detailed documentation. Questions? Check out the FAQ below!. ### FAQ; <details>; <summary>Click here to expand the FAQ section</summary>. #### How often will the code scanning analysis run?; By default, code scanning will trigger a scan with the CodeQL engine on the following events:; * On every pull request — to flag up potential security problems for you to investigate before merging a PR.; * On every push to your default branch and other protected branches — this keeps the analysis results on your repository’s *Security* tab up to date.; * Once a week at a fixed time — to make sure you benefit from the latest updated security analysis even when no code was committed or PRs were opened. #### What will this cost?; Nothing! The CodeQL engine will run inside GitHub Actions, making use of your [unlimited free compute minutes for public repositories](https://docs.github.com/en/actions/learn-github-actions/usage-limits-billing-and-administration#about-billing-for-github-actions). #### What types of problems does CodeQL find?; The CodeQL engine that powers GitHub code scanning is the exact same engine that powers LGTM.com. The exact set of rules has been tweaked slightly, but you should see almost exactly the same types of alerts as you were used to o",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11808:2029,secur,security,2029,https://root.cern,https://github.com/root-project/root/pull/11808,1,['secur'],['security']
Security,. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/tree/tree/src/TLeaf.cxx:270; /opt/root_src/tree/tree/src/TLeaf.cxx:272:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/tree/tree/src/TLeaf.cxx:272; /opt/root_src/tree/tree/src/TLeafObject.cxx:94:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/tree/tree/src/TLeafObject.cxx:94; /opt/root_src/tree/tree/src/TTree.cxx:2084:30: warning: Dereference of null pointer (loaded from variable 'apointer') [clang-analyzer-core.NullDereference]; 1: Assuming 'ptrClass' is non-null in /opt/root_src/tree/tree/src/TTree.cxx:1586; 2: Taking false branch in /opt/root_src/tree/tree/src/TTree.cxx:1586; 3: Assuming 'addr' is null in /opt/root_src/tree/tree/src/TTree.cxx:1592; 4: Left side of '&&' is false in /opt/root_src/tree/tree/src/TTree.cxx:1592; 5: 'actualClass' is non-null in /opt/root_src/tree/tree/src/TTree.cxx:1605; 6: Left side of '&&' is true in /opt/root_src/tree/tree/src/TTree.cxx:1605; 7: Assuming the condition is false in /opt/root_src/tree/tree/src/TTree.cxx:1605; 8: Left,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7429:70789,secur,security,70789,https://root.cern,https://github.com/root-project/root/issues/7429,1,['secur'],['security']
Security,...; Error in <TList::Clear>: A list is accessing an object (0x558b19a500b0) already deleted (list name = TList); Error in <TList::Clear>: A list is accessing an object (0x558b19b74080) already deleted (list name = TList); Error in <TList::Clear>: A list is accessing an object (0x558b19b76bf0) already deleted (list name = TList); Error in <TList::Clear>: A list is accessing an object (0x558b19b80a80) already deleted (list name = TList); Error in <TList::Clear>: A list is accessing an object (0x558b19b80df0) already deleted (list name = TList); Error in <TList::Clear>: A list is accessing an object (0x558b19b81320) already deleted (list name = TList); Error in <TList::Clear>: A list is accessing an object (0x558b19b817c0) already deleted (list name = TList); Error in <TList::Clear>: A list is accessing an object (0x558b19b81b90) already deleted (list name = TList); Error in <TList::Clear>: A list is accessing an object (0x558b19b82030) already deleted (list name = TList); Error in <TList::Clear>: A list is accessing an object (0x558b19b82260) already deleted (list name = TList); Error in <TList::Clear>: A list is accessing an object (0x558b19bacc50) already deleted (list name = TList); Error in <TList::Clear>: A list is accessing an object (0x558b19bb6580) already deleted (list name = TList); Error in <TList::Clear>: A list is accessing an object (0x558b19bb6f70) already deleted (list name = TList); Error in <TList::Clear>: A list is accessing an object (0x558b19bb73d0) already deleted (list name = TList); Error in <TList::Clear>: A list is accessing an object (0x558b19bbad50) already deleted (list name = TList); Error in <TList::Clear>: A list is accessing an object (0x558b19bc5b80) already deleted (list name = TList); Error in <TList::Clear>: A list is accessing an object (0x558b19bc5eb0) already deleted (list name = TList); Error in <TList::Clear>: A list is accessing an object (0x558b19bc8710) already deleted (list name = TList); (TFile *) 0x558b199f9480; ```. ##,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14793:966,access,accessing,966,https://root.cern,https://github.com/root-project/root/issues/14793,18,['access'],['accessing']
Security,"...since it not used anywhere in Cppyy's code. It used to be used; in TPyClassGenerator.cxx, but the code in that file was completely; commented out. This will prevent a conflict with a class of the same name that; exists in TPython, as reported by the address sanitizer. Thanks to @hageboeck for the heads up!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6160:261,sanitiz,sanitizer,261,https://root.cern,https://github.com/root-project/root/pull/6160,1,['sanitiz'],['sanitizer']
Security,".1.root""; [desilva@lxplus7107 rootTest]$ root -b './read_file.C'; ------------------------------------------------------------------; | Welcome to ROOT 6.24/00 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Apr 14 2021, 14:33:50 |; | From tags/v6-24-00@v6-24-00 |; | With g++ (GCC) 8.3.0 |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. root [0] ; Processing ./read_file.C...; davs://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root; Error in <DavixOpen>: can not open file ""davs://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root"" with davix: Result HTTP 401 : Authentification Error after 3 attempts (14); [desilva@lxplus7107 rootTest]$ echo $?; 1; [desilva@lxplus7107 rootTest]$ ; ```. note that xrootd access works for LCG_100 even though webdav fails above; eg:; ```; [desilva@lxplus7107 rootTest]$ which root; /cvmfs/sft.cern.ch/lcg/views/LCG_100/x86_64-centos7-gcc8-opt/bin/root; [desilva@lxplus7107 rootTest]$ export ALRB_TESTING_FILENAME=""root://xrootd.lcg.triumf.ca:1094//atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root""; [desilva@lxplus7107 rootTest]$ root -b './read_file.C'; ------------------------------------------------------------------; | Welcome to ROOT 6.24/00 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Apr 14 2021, 14:33:50 |; | From tags/v6-24-00@v6-24-00 |; | With g++ (GCC) 8.3.0 |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. root [0] ; Processing ./read_file.C...; root://xrootd.lcg.triumf.ca:1094//atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root; [desilva@lxplus7107 rootTest]$ echo $?; 0; [desilva@lxplus7107 rootTest]$ ; ```. Th",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092:2839,access,access,2839,https://root.cern,https://github.com/root-project/root/issues/8092,1,['access'],['access']
Security,.c:1344; 48: Null pointer passed to 2nd parameter expecting 'nonnull' in /opt/root_src/builtins/lz4/lz4frame.c:1349; /opt/root_src/builtins/lz4/lz4frame.c:1357:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1357; /opt/root_src/builtins/lz4/lz4frame.c:1358:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1358; /opt/root_src/builtins/lz4/lz4frame.c:1358:9: warning: Null pointer passed to 2nd parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: 'dstStart' initialized here in /opt/root_src/builtins/lz4/lz4frame.c:1393; 2: Assuming 'dstStart' is null in /opt/root_src/builtins/lz4/lz4frame.c:1394; 3: '?' condition is false in /opt/root_src/builtins/lz4/lz4frame.c:1394; 4: 'dstPtr' initialized to a null pointer value in /opt/root_src/builtins/lz4/lz4frame.c:1395; 5: 'dstBuffer' is equal to NULL in /opt/root_src/builtins/lz4/lz4frame.c:1403; 6: Taking true branch in /opt/root_s,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:48287,secur,security,48287,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,.c:754:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:754; /opt/root_src/builtins/lz4/lz4hc.c:893:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:893; /opt/root_src/builtins/lz4/lz4hc.c:1015:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:1015; 3: expanded from macro 'MEM_INIT' in /opt/ro,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:63247,secur,security,63247,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,".cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->. I currently cannot build the master branch due to the fact that the hardcoded SHA256 checksum in /builtins/xrootd/CMakeLists.txt is not the same checksum as the one obtained when downloading the file. There is a mismatch. There is a check that makes the build fail in this case. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. The checksum in /builtins/xrootd/CMakeLists.txt is the same as the one obtained from the actually downloaded file. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; ```; git clone https://github.com/root-project/root.git; mkdir build; cd build; cmake ../root/ -Droofit_multiprocess=ON -Dminuit2=ON -Dtesting=ON -DCMAKE_IGNORE_PATH=""/home/zef/miniconda3/bin;/home/zef/miniconda3/include;/home/zef/miniconda3/lib"" -Dccache=ON -DPYTHON_EXECUTABLE=""/usr/bin/python3"" -Dbuiltin_fftw3=On; ```. Note that the checksum obtained by `sha256sum xrootd-5.4.2.tar.gz` is: 2b394270c55cb3d14f3c44b692311db99d2d25278882b513d4d564b68a58ed4a. The checksum hardcoded in the CMAKE file is: 84e8a9a2bcad116df479f94e985c287dd99fbac0613d4fbb61f4ccc0cef81fa3. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->. ROOT version: master branch as of now; Operating system: Pop!OS; Obtained root through git clone of master branch. ### Additional context; <!--; Add any other context about the problem here.; -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10503:1571,checksum,checksum,1571,https://root.cern,https://github.com/root-project/root/issues/10503,2,['checksum'],['checksum']
Security,.cxx:2115; 24: Assuming 'colon' is equal to null in /opt/root_src/io/xml/src/TXMLEngine.cxx:2124; 25: Left side of '&&' is false in /opt/root_src/io/xml/src/TXMLEngine.cxx:2124; 26: Taking false branch in /opt/root_src/io/xml/src/TXMLEngine.cxx:2130; 27: Assuming the condition is true in /opt/root_src/io/xml/src/TXMLEngine.cxx:2134; 28: Taking true branch in /opt/root_src/io/xml/src/TXMLEngine.cxx:2134; 29: Potential leak of memory pointed to by 'node' in /opt/root_src/io/xml/src/TXMLEngine.cxx:2135; /opt/root_src/io/xml/src/TXMLFile.cxx:203:7: warning: Value stored to 'recreate' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'recreate' is never read in /opt/root_src/io/xml/src/TXMLFile.cxx:203; /opt/root_src/io/xml/src/TXMLPlayer.cxx:394:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/io/xml/src/TXMLPlayer.cxx:394; /opt/root_src/io/xml/src/TXMLPlayer.cxx:404:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/io/xml/src/TXMLPlayer.cxx:404; /opt/root_src/io/io/src/TBufferFile.cxx; /opt/root_src/io/io/src/TBufferJSON.cxx; /opt/root_src/io/io/src/TEmulatedCollectionProxy.cxx; /,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:133570,secur,security,133570,https://root.cern,https://github.com/root-project/root/issues/7431,1,['secur'],['security']
Security,.cxx:986:13: warning: Value stored to 'foundParam' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'foundParam' is never read in /opt/root_src/tmva/tmva/src/MethodSVM.cxx:986; /opt/root_src/tmva/tmva/src/MethodSVM.cxx:990:13: warning: Value stored to 'foundParam' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'foundParam' is never read in /opt/root_src/tmva/tmva/src/MethodSVM.cxx:990; /opt/root_src/tmva/tmva/src/MethodSVM.cxx:994:13: warning: Value stored to 'foundParam' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'foundParam' is never read in /opt/root_src/tmva/tmva/src/MethodSVM.cxx:994; /opt/root_src/tmva/tmva/src/MethodSVM.cxx:998:13: warning: Value stored to 'foundParam' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'foundParam' is never read in /opt/root_src/tmva/tmva/src/MethodSVM.cxx:998; /opt/root_src/tmva/tmva/src/PDEFoam.cxx:370:16: warning: Array access (via field 'fCells') results in a null pointer dereference [clang-analyzer-core.NullDereference]; 1: Assuming field 'fPseRan' is not equal to null in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:297; 2: Taking false branch in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:297; 3: Assuming field 'fDistr' is not equal to null in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:298; 4: Taking false branch in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:298; 5: Assuming field 'fDim' is not equal to 0 in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:299; 6: Taking false branch in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:299; 7: Field 'fRvec' is not equal to null in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:306; 8: Taking false branch in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:306; 9: Assuming field 'fDim' is <= 0 in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:308; 10: Taking false branch in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:308; 11: Assuming field 'fInhiDiv' is not equal to null in /opt/root_src/tmva/tmva/src/PDEFoam.cxx:314; 12: Taking false br,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:94340,access,access,94340,https://root.cern,https://github.com/root-project/root/issues/7526,1,['access'],['access']
Security,".format(treeName)); print(""cutString = {}"".format(cutString)) . infile = RT.TFile.Open(infileName); dataframe = RT.RDataFrame(treeName, infile). histmodel = RT.RDF.TH1DModel(histName, histName, binning[0], binning[1], binning[2]). hist = dataframe.Filter(cutString).Histo1D(histmodel, distName) ; print(""-----""); print(""hist.GetEntries() = {}"".format(hist.GetEntries())); print(""hist.GetSumOfWeights()= {}"".format(hist.GetSumOfWeights())); print(""-----""); ```; I attached the test file on the ROOT forum (which only contains 3 entries on purpose); Please read the following strange observations that we made about it which to us do not make sense ; https://root-forum.cern.ch/t/rdataframe-and-createpoxy-ttreereadervalue-error-for-selection-on-string-branch-in-filter-method/43488. But I get the error; ```; Error in <TTreeReaderValueBase::CreateProxy()>: The branch sample contains data of type string. It cannot be accessed by a TTreeReaderValue<string>; ```; With bigger files I get many times this error and the number of entries and integral of the histogram hist is 0 while it should not be . Since for the current file doing a scan of the tree I have:; ```; root -l Zee_Sh221-0.root ; root [0] ; Attaching file Zee_Sh221-0.root as _file0...; (TFile *) 0x4418460; root [1] Nominal->Scan(""sample:MET""); ************************************; * Row * sample * MET *; ************************************; * 0 * Zl * 158.14303 *; * 1 * Zbl * 180.14964 *; * 2 * Zbl * 253.89321 *; ************************************; ```; This error only occurs when the selection in Filter function includes a branch of type string.; If I have a selection only on double, float and so on without string branch everything is fine. Would you know how to solve that ?; I also tried using python3 but same error occurs.; And using the corresponding TTree command works so it does not comes from the root file:; ```; root -l Zee_Sh221-0.root; root [0] ; Attaching file Zee_Sh221-0.root as _file0...; root [1] TTree *tre",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7169:1826,access,accessed,1826,https://root.cern,https://github.com/root-project/root/issues/7169,1,['access'],['accessed']
Security,/TSystem.cxx:1008; 8: Assuming 'gGlobalMutex' is null in /opt/root_src/core/base/src/TSystem.cxx:1011; 9: expanded from macro 'R__LOCKGUARD2' in /opt/root_src/core/base/inc/TVirtualMutex.h:94; 10: Left side of '&&' is false in /opt/root_src/core/base/src/TSystem.cxx:1011; 11: expanded from macro 'R__LOCKGUARD2' in /opt/root_src/core/base/inc/TVirtualMutex.h:94; 12: 'buf' initialized to a null pointer value in /opt/root_src/core/base/src/TSystem.cxx:1014; 13: Assuming the condition is false in /opt/root_src/core/base/src/TSystem.cxx:1015; 14: Taking false branch in /opt/root_src/core/base/src/TSystem.cxx:1015; 15: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/core/base/src/TSystem.cxx:1020; /opt/root_src/core/base/src/TSystem.cxx:1243:13: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/base/src/TSystem.cxx:1243; /opt/root_src/core/base/src/TSystem.cxx:2874:65: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Assuming 'opt' is null in /opt/root_src/core/base/src/TSystem.cxx:2849; 2: Taking false branch in /opt/root_src/core/base/src/TSystem.cxx:2849; 3: Assuming 'mode' is not equal to kDefault in /opt/root_src/core/base/src/TSystem.cxx:2865; 4: Taking false branch in /opt/root_src/core/base/src/TSystem.cxx:2865; 5: 'verbose' is false in /opt/root_src/core/base/src/TSystem.cxx:2873; 6: '?' condition is false in /opt/root_src/core/base/src/TSystem.cxx:2873; 7: Assuming the condition is false in /opt/root_src/core/base/src/TSystem.cxx:2874; 8: ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7412:163814,secur,security,163814,https://root.cern,https://github.com/root-project/root/issues/7412,1,['secur'],['security']
Security,"/builddir/build/BUILD/root-6.08.04/net/globusauth/src/GlobusAuth.cxx:143:26: warning: format '%x' expects argument of type 'unsigned int', but argument 3 has type 'gss_cred_id_t {aka gss_cred_id_desc_struct*}' [-Wformat=]; /builddir/build/BUILD/root-6.08.04/net/globusauth/src/GlobusAuth.cxx:196:40: warning: format '%d' expects argument of type 'int', but argument 4 has type 'size_t {aka long unsigned int}' [-Wformat=]; /builddir/build/BUILD/root-6.08.04/net/globusauth/src/GlobusAuth.cxx:243:47: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t {aka long unsigned int}' [-Wformat=]; /builddir/build/BUILD/root-6.08.04/net/globusauth/src/GlobusAuth.cxx:265:79: warning: format '%p' expects argument of type 'void*', but argument 3 has type 'OM_uint32 {aka unsigned int}' [-Wformat=]; /builddir/build/BUILD/root-6.08.04/net/globusauth/src/GlobusAuth.cxx:421:29: warning: format '%x' expects argument of type 'unsigned int', but argument 3 has type 'gss_cred_id_t {aka gss_cred_id_desc_struct*}' [-Wformat=]; /builddir/build/BUILD/root-6.08.04/net/globusauth/src/GlobusAuth.cxx:498:35: warning: format '%x' expects argument of type 'unsigned int', but argument 3 has type 'gss_cred_id_t {aka gss_cred_id_desc_struct*}' [-Wformat=]; /builddir/build/BUILD/root-6.08.04/net/globusauth/src/GlobusAuth.cxx:666:53: warning: format '%s' expects a matching 'char*' argument [-Wformat=]; /builddir/build/BUILD/root-6.08.04/net/globusauth/src/GlobusAuth.cxx:733:72: warning: format '%d' expects argument of type 'int', but argument 4 has type 'size_t {aka long unsigned int}' [-Wformat=]; /builddir/build/BUILD/root-6.08.04/net/globusauth/src/GlobusAuth.cxx:1013:47: error: format not a string literal and no format arguments [-Werror=format-security]",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/376:1769,secur,security,1769,https://root.cern,https://github.com/root-project/root/pull/376,1,['secur'],['security']
Security,/cont/src/TBtree.cxx:1363; 5: Assuming 'p' is equal to null in /opt/root_src/core/cont/src/TBtree.cxx:546; 6: Taking true branch in /opt/root_src/core/cont/src/TBtree.cxx:546; 7: 't' is equal to null in /opt/root_src/core/cont/src/TBtree.cxx:547; 8: expanded from macro 'R__CHECK' in /opt/root_src/core/foundation/inc/TError.h:124; 9: Taking true branch in /opt/root_src/core/cont/src/TBtree.cxx:547; 10: expanded from macro 'R__CHECK' in /opt/root_src/core/foundation/inc/TError.h:124; 11: Loop condition is false. Exiting loop in /opt/root_src/core/cont/src/TBtree.cxx:547; 12: expanded from macro 'R__CHECK' in /opt/root_src/core/foundation/inc/TError.h:123; 13: Null pointer value stored to field 'fTree' in /opt/root_src/core/cont/src/TBtree.cxx:548; 14: Returning from constructor for 'TBtNode' in /opt/root_src/core/cont/src/TBtree.cxx:1363; 15: Calling 'TBtLeafNode::MaxIndex' in /opt/root_src/core/cont/src/TBtree.cxx:1365; 16: Access to field 'fLeafMaxIndex' results in a dereference of a null pointer (loaded from field 'fTree') in /opt/root_src/core/cont/inc/TBtree.h:314; /opt/root_src/core/cont/src/TArrayC.cxx:114:13: warning: Null pointer passed to 2nd parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Null pointer value stored to field 'fArray' in /opt/root_src/core/cont/src/TArrayC.cxx:36; 2: Assuming 'n' is > 0 in /opt/root_src/core/cont/src/TArrayC.cxx:37; 3: Taking true branch in /opt/root_src/core/cont/src/TArrayC.cxx:37; 4: Calling 'TArrayC::Set' in /opt/root_src/core/cont/src/TArrayC.cxx:37; 5: 'n' is >= 0 in /opt/root_src/core/cont/src/TArrayC.cxx:107; 6: Taking false branch in /opt/root_src/core/cont/src/TArrayC.cxx:107; 7: 'n' is not equal to field 'fN' in /opt/root_src/core/cont/src/TArrayC.cxx:108; 8: Taking true branch in /opt/root_src/core/cont/src/TArrayC.cxx:108; 9: 'temp' initialized to a null pointer value in /opt/root_src/core/cont/src/TArrayC.cxx:109; 10: 'n' is not equal to 0 in /opt/root_src/core/cont/src/TArrayC.cxx:110;,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7424:3291,Access,Access,3291,https://root.cern,https://github.com/root-project/root/issues/7424,1,['Access'],['Access']
Security,/io/io/src/TGenCollectionStreamer.cxx:378; 24: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TGenCollectionStreamer.cxx:398; 25: expanded from macro 'DOLOOP' in /opt/root_src/io/io/src/TGenCollectionStreamer.cxx:378; 26: 'i' initialized to a null pointer value in /opt/root_src/io/io/src/TGenCollectionStreamer.cxx:398; 27: expanded from macro 'DOLOOP' in /opt/root_src/io/io/src/TGenCollectionStreamer.cxx:378; 28: Called C++ object pointer is null in /opt/root_src/io/io/src/TGenCollectionStreamer.cxx:398; 29: expanded from macro 'DOLOOP' in /opt/root_src/io/io/src/TGenCollectionStreamer.cxx:378; /opt/root_src/io/io/src/TKey.cxx:82:1: warning: non-POD static (TString) [clazy-non-pod-global-static]; /opt/root_src/io/io/src/TMakeProject.cxx:39:7: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/io/io/src/TMakeProject.cxx:39; /opt/root_src/io/io/src/TMapFile.cxx:293:7: warning: Value stored to 'recreate' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'recreate' is never read in /opt/root_src/io/io/src/TMapFile.cxx:293; /opt/root_src/io/io/src/TMapFile.cxx:623:20: warning: Access to field 'fNext' results in a dereference of a null pointer (loaded from field 'fLast') [clang-analyzer-core.NullDereference]; 1: Assuming field 'fWritable' is true in /opt/root_src/io/io/src/TMapFile.cxx:599; 2: Left side of '||' is false in /opt/root_src/io/io/src/TMapFile.cxx:599; 3: Assuming field 'fMmallocDesc' is non-null in /opt/root_src/io/io/src/TMapFile.cxx:599; 4: Taking false branch in /opt/root_src/io/io/s,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:91862,secur,security,91862,https://root.cern,https://github.com/root-project/root/issues/7431,1,['secur'],['security']
Security,/lz4.c:1677; 9: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/builtins/lz4/lz4.c:1678; /opt/root_src/builtins/lz4/lz4.c:1833:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1833; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1837:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1837; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1838:39: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-secu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:16627,secur,security,16627,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,/lz4.c:1876:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1876; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1894:21: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1894; /opt/root_src/builtins/lz4/lz4.c:1900:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support leng,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:20768,secur,security,20768,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,/lz4.c:1965:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1965; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:2038:17: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2038; /opt/root_src/builtins/lz4/lz4.c:2083:21: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C1,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:26148,secur,security,26148,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,/lz4/lz4.c:1228:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1228; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1449:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1449; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4.c:1458:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to functio,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:12195,secur,security,12195,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,/lz4/lz4frame.c:357; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:388:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:388; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:397:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:397; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:444:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-ana,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:33583,secur,security,33583,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,/lz4/lz4frame.c:388; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:397:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:397; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:444:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:444; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:507:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-ana,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:34384,secur,security,34384,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,/lz4/lz4frame.c:397; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:444:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:444; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:507:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:507; /opt/root_src/builtins/lz4/lz4frame.c:609:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to functi,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:35185,secur,security,35185,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,/lz4hc.c:1015:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:1015; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4hc.c:1169:9: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:1169; /opt/root_src/builtins/lz4/lz4hc.c:1169:9: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Assuming the condition is false in /opt/root_src/builtins/lz4/lz4hc.c:1164; 2: Taking false branch in /opt/root_src/builtins/lz4/lz4hc.c:1164; 3: Assuming 'dictSize' is >= 4 in /opt/root_src/builtins/lz4/lz4hc.c:1165; 4: Taking false branch in /opt/root_src/builtins/lz4/lz4hc.c:1165; 5: Assuming 'dictSize' is <= 'prefixSize' in /opt/root_src/builtins/lz4/lz4hc.c:1166; 6: Taking false branch in /opt/root_src/builtins/lz4/lz4hc.c:1166; 7,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:64556,secur,security,64556,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,"/opt/root_src/core/clib/src/Demangle.c:1818; 71: Returning the value 1, which participates in a condition later in /opt/root_src/core/clib/src/Demangle.c:1836; 72: Returning from 'get_count' in /opt/root_src/core/clib/src/Demangle.c:1904; 73: Left side of '||' is false in /opt/root_src/core/clib/src/Demangle.c:1904; 74: Assuming 'n' is < field 'ntypes' in /opt/root_src/core/clib/src/Demangle.c:1904; 75: Taking false branch in /opt/root_src/core/clib/src/Demangle.c:1904; 76: Array access (via field 'typevec') results in a null pointer dereference in /opt/root_src/core/clib/src/Demangle.c:1910; /opt/root_src/core/clib/src/Demangle.c:2264:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2264; /opt/root_src/core/clib/src/Demangle.c:2683:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2683; /opt/root_src/core/clib/src/Demangle.c:2697:7: warning: Call to function 'memcpy' is insecure as it does n",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:20106,secur,security,20106,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,/opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 12: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:166; 13: Null pointer value stored to 'i' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:167; 14: Control jumps to 'case kIsEnum:' at line 171 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:169; 15: Control jumps to 'case kLong_t:' at line 177 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:172; 16: Access to field 's_long' results in a dereference of a null pointer (loaded from variable 'i') in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:177; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:178:35: warning: Access to field 's_longlong' results in a dereference of a null pointer (loaded from variable 'i') [clang-analyzer-core.NullDereference]; 1: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is non-null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 3: '?' condition is true in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 6: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:54450,Access,Access,54450,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security,/opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 12: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:166; 13: Null pointer value stored to 'i' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:167; 14: Control jumps to 'case kIsEnum:' at line 171 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:169; 15: Control jumps to 'case kShort_t:' at line 175 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:172; 16: Access to field 's_short' results in a dereference of a null pointer (loaded from variable 'i') in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:175; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:176:35: warning: Access to field 's_int' results in a dereference of a null pointer (loaded from variable 'i') [clang-analyzer-core.NullDereference]; 1: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is non-null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 3: '?' condition is true in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 6: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_s,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:51063,Access,Access,51063,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security,/opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 12: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:166; 13: Null pointer value stored to 'i' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:167; 14: Control jumps to 'case kIsEnum:' at line 171 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:169; 15: Control jumps to 'case kUChar_t:' at line 182 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:172; 16: Access to field 'u_char' results in a dereference of a null pointer (loaded from variable 'i') in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:182; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:183:35: warning: Access to field 'u_short' results in a dereference of a null pointer (loaded from variable 'i') [clang-analyzer-core.NullDereference]; 1: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is non-null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 3: '?' condition is true in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 6: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:62924,Access,Access,62924,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security,"/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so; #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so; #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so; #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so; #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so; #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so; #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so; #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so; #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so; #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so; #25 0x00007f174bd71127 in cling::Interpreter::EvaluateI",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12673:4602,Access,AccessSpecifier,4602,https://root.cern,https://github.com/root-project/root/issues/12673,2,['Access'],['AccessSpecifier']
Security,/root_src/builtins/lz4/lz4frame.c:844; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:852:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:852; /opt/root_src/builtins/lz4/lz4frame.c:859:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:859; /opt/root_src/builtins/lz4/lz4frame.c:918:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C1,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:38907,secur,security,38907,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 12: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:166; 13: Null pointer value stored to 'i' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:167; 14: Control jumps to 'case kIsEnum:' at line 171 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:169; 15: Control jumps to 'case kULong64_t:' at line 186 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:172; 16: Access to field 'u_longlong' results in a dereference of a null pointer (loaded from variable 'i') in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:186; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:187:41: warning: Access to field 'dbl' results in a dereference of a null pointer (loaded from variable 'i') [clang-analyzer-core.NullDereference]; 1: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is non-null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 3: '?' condition is true in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 6: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_sr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:69718,Access,Access,69718,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security,/root_src/net/http/civetweb/civetweb.c:6829; /opt/root_src/net/http/civetweb/civetweb.c:6884:9: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6884; 3: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; /opt/root_src/net/http/civetweb/civetweb.c:6914:8: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:6914; 3: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; /opt/root_src/net/http/civetweb/civetweb.c:6937:7: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary c,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:29386,secur,security,29386,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,/rootx/src/rootx.cxx:328; 7: Assuming the condition is false in /opt/root_src/rootx/src/rootx.cxx:358; 8: Taking false branch in /opt/root_src/rootx/src/rootx.cxx:358; 9: 'batch' is false in /opt/root_src/rootx/src/rootx.cxx:362; 10: Taking false branch in /opt/root_src/rootx/src/rootx.cxx:362; 11: 'about' is false in /opt/root_src/rootx/src/rootx.cxx:364; 12: Taking false branch in /opt/root_src/rootx/src/rootx.cxx:364; 13: 'batch' is false in /opt/root_src/rootx/src/rootx.cxx:369; 14: Taking true branch in /opt/root_src/rootx/src/rootx.cxx:369; 15: 'about' is false in /opt/root_src/rootx/src/rootx.cxx:370; 16: Taking false branch in /opt/root_src/rootx/src/rootx.cxx:370; 17: Assuming 'gNoLogo' is true in /opt/root_src/rootx/src/rootx.cxx:374; 18: Taking false branch in /opt/root_src/rootx/src/rootx.cxx:374; 19: Assuming the condition is false in /opt/root_src/rootx/src/rootx.cxx:420; 20: Taking false branch in /opt/root_src/rootx/src/rootx.cxx:420; 21: Assuming 'gChildpid' is <= 0 in /opt/root_src/rootx/src/rootx.cxx:423; 22: Taking false branch in /opt/root_src/rootx/src/rootx.cxx:423; 23: Memory is allocated in /opt/root_src/rootx/src/rootx.cxx:443; 24: Loop condition is false. Execution continues on line 457 in /opt/root_src/rootx/src/rootx.cxx:455; 25: Potential leak of memory pointed to by 'argvv' in /opt/root_src/rootx/src/rootx.cxx:468; /opt/root_src/rootx/src/rootxx.cxx:783:10: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/rootx/src/rootxx.cxx:783; /opt/root_src/rootx/src/rootx.cxx; /opt/root_src/rootx/src/rootxx.cxx; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7527:7772,secur,security,7772,https://root.cern,https://github.com/root-project/root/issues/7527,1,['secur'],['security']
Security,/sessionviewer/src/TSessionViewer.cxx:2628; 10: Left side of '&&' is false in /opt/root_src/gui/sessionviewer/src/TSessionViewer.cxx:2628; 11: Assuming 'total' is >= 0 in /opt/root_src/gui/sessionviewer/src/TSessionViewer.cxx:2640; 12: Taking false branch in /opt/root_src/gui/sessionviewer/src/TSessionViewer.cxx:2640; 13: Assuming 'processed' is not equal to field 'fPrevProcessed' in /opt/root_src/gui/sessionviewer/src/TSessionViewer.cxx:2646; 14: Taking false branch in /opt/root_src/gui/sessionviewer/src/TSessionViewer.cxx:2646; 15: Assuming 'total' is equal to field 'fEntries' in /opt/root_src/gui/sessionviewer/src/TSessionViewer.cxx:2651; 16: Taking false branch in /opt/root_src/gui/sessionviewer/src/TSessionViewer.cxx:2651; 17: Assuming the condition is false in /opt/root_src/gui/sessionviewer/src/TSessionViewer.cxx:2667; 18: Taking false branch in /opt/root_src/gui/sessionviewer/src/TSessionViewer.cxx:2667; 19: Access to field 'fStatus' results in a dereference of a null pointer (loaded from field 'fActQuery') in /opt/root_src/gui/sessionviewer/src/TSessionViewer.cxx:2673; /opt/root_src/gui/sessionviewer/src/TSessionViewer.cxx:3788:13: warning: Value stored to 's' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 's' is never read in /opt/root_src/gui/sessionviewer/src/TSessionViewer.cxx:3788; /opt/root_src/gui/sessionviewer/src/TSessionViewer.cxx:3841:13: warning: Value stored to 's' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 's' is never read in /opt/root_src/gui/sessionviewer/src/TSessionViewer.cxx:3841; /opt/root_src/gui/webgui6/src/TWebCanvas.cxx:337:10: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Assuming the condition is false in /opt/root_src/gui/webgui6/src/TWebCanvas.cxx:280; 2: Left side of '&&' is true in /opt/root_src/gui/webgui6/src/TWebCanvas.cxx:284; 3: Assuming 'version' is <= 0 in /opt/root_src/gui/webgui6/src/TWebCanvas.cxx:284; 4: '?' condition is false i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:98785,Access,Access,98785,https://root.cern,https://github.com/root-project/root/issues/7533,1,['Access'],['Access']
Security,"/src/lib/libclingInterpreter.a interpreter/llvm/src/lib/libclingUtils.a interpreter/llvm/src/lib/libclangCodeGen.a interpreter/llvm/src/lib/libclangRewriteFrontend.a interpreter/llvm/src/lib/libclangFrontend.a interpreter/llvm/src/lib/libclangDriver.a interpreter/llvm/src/lib/libclangParse.a interpreter/llvm/src/lib/libclangRewrite.a interpreter/llvm/src/lib/libclangSerialization.a interpreter/llvm/src/lib/libclangSema.a interpreter/llvm/src/lib/libclangAnalysis.a interpreter/llvm/src/lib/libclangASTMatchers.a interpreter/llvm/src/lib/libclangEdit.a -ldl interpreter/llvm/src/lib/libclangAST.a interpreter/llvm/src/lib/libclangLex.a interpreter/llvm/src/lib/libclangBasic.a /usr/lib/llvm-13/lib/libLLVM-13.so.1 && :; FAILED: lib/libCling.so.6.27.99 ; : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -Wl,-z,relro -Wl,-z,now -Wl,--no-undefined -Wl,--hash-style=""both"" -shared -Wl,-soname,libCling.so.6.27 -o lib/libCling.so.6.27.99 core/clingutils/CMakeFiles/ClingUtils.dir/src/RStl.cxx.o core/clingutils/CMakeFiles/ClingUtils.dir/src/TClingUtils.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/BaseSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/ClassSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/DictSelectionReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/LinkdefReader.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/Scanner.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/SelectionRules.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/TModuleGenerator.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/VariableSelectionRule.cxx.o core/dictgen/CMakeFiles/Dictgen.dir/src/XMLReader.cxx.o core/metacling/src/CMakeFiles/MetaCling.dir/rootclingTCli",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12152:5604,secur,security,5604,https://root.cern,https://github.com/root-project/root/issues/12152,2,"['hash', 'secur']","['hash-style', 'security']"
Security,/tmva/src/MethodCuts.cxx:438; 3: Left side of '||' is true in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:438; 4: Assuming field 'fTestSignalEff' is > 0 in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:446; 5: Taking true branch in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:446; 6: Assuming 'ibin' is >= 0 in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:449; 7: Taking false branch in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:449; 8: Assuming 'ibin' is < field 'fNbins' in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:450; 9: Taking false branch in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:450; 10: Assuming the condition is true in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:453; 11: Loop condition is true. Entering loop body in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:453; 12: Array access (via field 'fCutMin') results in a null pointer dereference in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:454; /opt/root_src/tmva/tmva/src/MethodCuts.cxx:455:45: warning: Array access (via field 'fCutMax') results in a null pointer dereference [clang-analyzer-core.NullDereference]; 1: Value assigned to field 'fCutMax' in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:435; 2: Assuming field 'fCutMin' is not equal to NULL in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:438; 3: Left side of '||' is false in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:438; 4: Assuming field 'fCutMax' is equal to NULL in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:438; 5: Left side of '||' is true in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:438; 6: Assuming field 'fTestSignalEff' is > 0 in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:446; 7: Taking true branch in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:446; 8: Assuming 'ibin' is >= 0 in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:449; 9: Taking false branch in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:449; 10: Assuming 'ibin' is < field 'fNbins' in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:450; 11: Taking false branch in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:4,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:76371,access,access,76371,https://root.cern,https://github.com/root-project/root/issues/7526,1,['access'],['access']
Security,/tmva/src/MethodCuts.cxx:438; 5: Left side of '||' is true in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:438; 6: Assuming field 'fTestSignalEff' is > 0 in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:446; 7: Taking true branch in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:446; 8: Assuming 'ibin' is >= 0 in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:449; 9: Taking false branch in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:449; 10: Assuming 'ibin' is < field 'fNbins' in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:450; 11: Taking false branch in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:450; 12: Assuming the condition is true in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:453; 13: Loop condition is true. Entering loop body in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:453; 14: Assuming the condition is true in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:454; 15: Left side of '&&' is true in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:454; 16: Array access (via field 'fCutMax') results in a null pointer dereference in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:455; /opt/root_src/tmva/tmva/src/MethodCuts.cxx:687:25: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Assuming field 'fEffMethod' is not equal to kUsePDFs in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:580; 2: Taking false branch in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:580; 3: Assuming field 'fBinaryTreeS' is equal to null in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:583; 4: Taking false branch in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:583; 5: Assuming field 'fBinaryTreeB' is equal to null in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:584; 6: Taking false branch in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:584; 7: Assuming the condition is false in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:595; 8: Loop condition is false. Execution continues on line 620 in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:595; 9: Assuming 'ibin' is > field 'fNbins' in /opt/root_src/tmva/tmva/s,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:77767,access,access,77767,https://root.cern,https://github.com/root-project/root/issues/7526,1,['access'],['access']
Security,05; 38: Assuming the condition is false in /opt/root_src/builtins/lz4/lz4frame.c:1311; 39: Taking false branch in /opt/root_src/builtins/lz4/lz4frame.c:1311; 40: 'withinTmp' is 0 in /opt/root_src/builtins/lz4/lz4frame.c:1322; 41: Left side of '&&' is false in /opt/root_src/builtins/lz4/lz4frame.c:1322; 42: 'withinTmp' is 0 in /opt/root_src/builtins/lz4/lz4frame.c:1329; 43: Taking false branch in /opt/root_src/builtins/lz4/lz4frame.c:1329; 44: Assuming field 'dict' is not equal to field 'tmpOutBuffer' in /opt/root_src/builtins/lz4/lz4frame.c:1343; 45: Taking false branch in /opt/root_src/builtins/lz4/lz4frame.c:1343; 46: Assuming 'preserveSize' is <= field 'dictSize' in /opt/root_src/builtins/lz4/lz4frame.c:1356; 47: Taking false branch in /opt/root_src/builtins/lz4/lz4frame.c:1356; 48: Null pointer passed to 2nd parameter expecting 'nonnull' in /opt/root_src/builtins/lz4/lz4frame.c:1358; /opt/root_src/builtins/lz4/lz4frame.c:1404:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1404; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:1434:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:52826,secur,security,52826,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,"07fffefb06b14 in TCling::Load(char const*, bool) (); from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sun/ROOT/v6-24-00-patches/x86_64-centos7-gcc8-opt/lib/libCling.so; #16 0x00007ffff55908e6 in TSystem::Load(char const*, char const*, bool) (); from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sun/ROOT/v6-24-00-patches/x86_64-centos7-gcc8-opt/lib/libCore.so; #17 0x00007ffff551c9e3 in TROOT::LoadClass(char const*, char const*, bool) (); from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sun/ROOT/v6-24-00-patches/x86_64-centos7-gcc8-opt/lib/libCore.so; #18 0x00007fffefb05a65 in TCling::ShallowAutoLoadImpl(char const*) (); from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sun/ROOT/v6-24-00-patches/x86_64-centos7-gcc8-opt/lib/libCling.so; #19 0x00007fffefb1acd2 in TCling::DeepAutoLoadImpl(char const*, std::unordered_set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, bool) (); from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sun/ROOT/v6-24-00-patches/x86_64-centos7-gcc8-opt/lib/libCling.so; #20 0x00007fffefb1b377 in TCling::AutoLoad(char const*, bool) (); from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sun/ROOT/v6-24-00-patches/x86_64-centos7-gcc8-opt/lib/libCling.so; #21 0x00007ffff560ee86 in TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) (); from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sun/ROOT/v6-24-00-patches/x86_64-centos7-gcc8-opt/lib/libCore.so; #22 0x00007ffff563608a in TProtoClass::FillTClass(TClass*) (); from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sun/ROOT/v6-24-00-patches/x86_64-centos7-gcc8-opt/lib/libCore.so; #23 0x00007ffff56188e5 in TClass::Init(char const*, short, std::type_i",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7657:4605,hash,hash,4605,https://root.cern,https://github.com/root-project/root/issues/7657,1,['hash'],['hash']
Security,0: warning: Value stored to 'index2' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'index2' is never read in /opt/root_src/graf3d/x3d/src/x3d.c:761; /opt/root_src/graf3d/x3d/src/x3d.c:3166:8: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/graf3d/x3d/src/x3d.c:3166; /opt/root_src/graf3d/x3d/src/x3d.c:3170:8: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/graf3d/x3d/src/x3d.c:3170; /opt/root_src/graf3d/x3d/src/x3d.c:3174:8: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/graf3d/x3d/src/x3d.c:3174; /opt/root_src/graf3d/x3d/src/x3d.c:3175:8: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Repla,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7531:59663,secur,security,59663,https://root.cern,https://github.com/root-project/root/issues/7531,1,['secur'],['security']
Security,"0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L645) only in the `.cxx` source (e.g. `get()`, the other overload of `get()`, and `addCouplings()`). If they are unused in the remaining file and not part of the public interface, why not remove them?; - [x] There is an [unreachable code branch here](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L1905). The `setup()` function is called in the class constructor when `_diagrams` is still empty. So the `diagrams.size() > 0` check will never be true and the if-block can be removed, no?; - [x] The [`_nonInterferig`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/inc/RooLagrangianMorphFunc.h#L266) data member is used in a few member functions, but it is never filled so always an empty vector. How meaningful is that? Can `_nonInterfering` be removed? ; - [x] It's annoying to have all these explicit usage of `this`, just to access a class member that is already marked as a class member with the underscore prefix convention. Please replace all occurences of `this->_` in the source file with just `_`.; - [x] [`makeCrosssectionContainer()`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2128) returns a `TPair*` that is owned by the caller. Please return `std::unique_ptr<TPair>` is this case, or even better return a `std::pair` instead (avoid using old ROOT container classes that were written before the standard library was introduced).; - [x] Similarly, [`createTH1`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2621) returns an owning raw pointer too, while it should return a `std::unique_ptr<TH1>` in this case. Can this interface still be changed without disrupting users too much? **No, this can break usercode, so this suggestio",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9845:1301,access,access,1301,https://root.cern,https://github.com/root-project/root/issues/9845,1,['access'],['access']
Security,1 in /opt/root_src/builtins/lz4/lz4.c:1228; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1449:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1449; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4.c:1458:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1458; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4.c:1621:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:12791,secur,security,12791,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,1 in /opt/root_src/builtins/lz4/lz4hc.c:96; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4hc.c:97:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:97; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4hc.c:754:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4hc.c:754; /opt/root_src/builtins/lz4/lz4hc.c:893:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:62301,secur,security,62301,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,1) Do not put the non-copiable ds in a header. It's very cumbersome; at runtime to expose it to the interpreter. The code is now in a string. 2) Make the test a death test. The static assert causes a non-recoverable; failure which should be handled by this kind of test and not with a try/catch; block.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1134:83,expose,expose,83,https://root.cern,https://github.com/root-project/root/pull/1134,1,['expose'],['expose']
Security,"1. Avoid referencing RooFuncWrapper inside code generation context; 2. Take out RooFit code generation context outside of Detail namespace; 3. Get rid of the `Experimental::RooFuncWrapper` class and make the code generation and AD with Clad accessible with the `RooFit::Evaluator`. The goal is to have one entry point for the user to do any kind of evaluation of RooFit computation graphs. Point number 3 still has to be done, which is why this is a draft PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16772:241,access,accessible,241,https://root.cern,https://github.com/root-project/root/pull/16772,1,['access'],['accessible']
Security,1. Do not expose special parameters to URL string - now in default HTML file special attributes can be inserted together with `JSROOT.ConnectWebWindow` call; 2. Correctly handle `#` in WebWindow URL. Such symbol used for routing inside webpage and will be often used with openui5; 3. Unify handling of URL options with RWebDisplayArgs. For now only `key` and `batch_mode` parameters are exposed to web window URL; 4. Update/extend doxygen docu; 5. Fix error in v7 CanvasPainter - v616 already fixed,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3561:10,expose,expose,10,https://root.cern,https://github.com/root-project/root/pull/3561,2,['expose'],"['expose', 'exposed']"
Security,"1. Do not use `gSystem->AccessPath` from CEF handler, may block because of mutex usage; 2. Remove debug output from THttpServer and TWebCanvas; 3. Properly handle `local` connection in auth check",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15521:24,Access,AccessPath,24,https://root.cern,https://github.com/root-project/root/pull/15521,1,['Access'],['AccessPath']
Security,"1. Equip TCanvas::Streamer to provide data members information for TBufferJSON/TBufferXML/TBufferSQL2 classes; 2. Fix problem with streamer infos reading from TXMLFile; 3. Fix error in TBufferXML/TBufferJSON/TBufferSQL2 when equipted streamers are used; Reported also here: http://root.cern.ch/phpBB3/viewtopic.php?f=3&t=18802; Error was introduced by modifications in I/O between 5-34/19 and 5-34/20; 4. Implement TBufferJSON::CheckObject(), enable correct storage of colors palete in JSON with TCanvas; 5. Provide missing documentation for some methods in TBufferXML/TBufferSQL2/TBufferJSON; 6. Modification in THttpServer class - one could now access any objects memeber; 7. Significant redesign of JSROOT - now everything can be redrawn and resize",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/37:647,access,access,647,https://root.cern,https://github.com/root-project/root/pull/37,1,['access'],['access']
Security,1. Fix - handle reordering of fragments in multipart reply https://github.com/root-project/jsroot/issues/319; 2. Fix - properly show non-zero entries https://github.com/root-project/jsroot/issues/320; 3. Fix - display empty hist bin if fSumw2 not zero; 4. Fix - let use batch_mode script injection in interactive session,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16792:288,inject,injection,288,https://root.cern,https://github.com/root-project/root/pull/16792,1,['inject'],['injection']
Security,1. Let access histogram from TF1 on the client; 2. Histogram used as axes attributes storage; 3. Always convert TF1 into histogram on client; 4. Fix several problems in function calculation; 5. Resolve unzooming of Y scale on drawing with fMinimum/fMaximum configured; 6. Support custom axis labels on lego plots,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13138:7,access,access,7,https://root.cern,https://github.com/root-project/root/pull/13138,1,['access'],['access']
Security,"1. Loopback is always on for web widgets, only unix socket configured by `rootssh` can be enabled; 2. Also disable usage of FastCGI with web widgets (never tested with webgui, may be used by REve); 3. Shrink warning messages for `TWebCanvas` and `RBrowser`, do not mention `--web=server:port` which is not secure for previous releases and will not work with recent fixes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14119:306,secur,secure,306,https://root.cern,https://github.com/root-project/root/pull/14119,1,['secur'],['secure']
Security,"1. Move all JS/CSS files to `js/mva/` folder which can be accessed via `/static/mva/` URL from Jupyter Notebook. This allows to use JsMVA code directly from ROOT without need to rely on `https://root.cern/js/jsmva/latest` ; 2. Remove minified scripts - no real gain in performance, only extra step in deployment; 3. Adjust `JsMVA.js` code to JSROOT v7. Use bundle provided in `build/jsroot.js`. ; 4. Adjust `OutputTransformer.py` to work with python3, probably other scripts should be improved as well; 5. Adjust `NetworkDesigner.js` to use d3 v6, load d3 from external source. Still to do: ; 1. Fix more problems with `python3` - see attached image from my notebook; ![python3_error](https://user-images.githubusercontent.com/4936580/225002768-225789c5-6638-43eb-8bbc-9f3397a8fd17.png); 2. Fix `NeuralNetwork.js` to be usable with latest d3.js. I need working example for it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12484:58,access,accessed,58,https://root.cern,https://github.com/root-project/root/pull/12484,1,['access'],['accessed']
Security,"1. Support `TBox`, `TLatex`, `TLine`, `TMarker` drawing on ""frame"", support drawing on swapped axes; 2. Improve performance of TH3/RH3 drawing by using THREE.InstancedMesh; 3. Implement batch mode with '&batch' URL parameter to create SVG/PNG images with default GUI; 4. Adjust node.js implementation to produce identical output with normal browser; 5. Create necessary infrastructure for testing with 'puppeteer'; 6. Support inject of ES6 modules via '&inject=path.mjs'; 7. Using importmap for 'jsroot' in all major HTML files and in demos; 8. Implement `settings.CutAxisLabels` flag to remove labels which may exceed graphical range; 9. Let save canvas as JSON file from context menu, object as JSON from inspector; 10. Upgrade three.js r162 -> r168, use r162 only in node.js because of ""gl"" module; 11. Create unified svg2pdf/jspdf ES6 module, works both in browsers and node.js; 12. Internals - upgrade to eslint 9; 13. Fix - correctly handle in I/O empty std::map; 14. Fix - reading of small (<1KB) ROOT files; 15. Fix - race condition in zstd initialization [#318](https://github.com/root-project/jsroot/issues/318); 16. Fix - deployment with zstd [#317](https://github.com/root-project/jsroot/issues/317); 17. Remove unused md5.mjs",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16416:426,inject,inject,426,https://root.cern,https://github.com/root-project/root/pull/16416,2,['inject'],['inject']
Security,"1. Support unix sockets in `THttpServer`, fix civetweb warning; 2. Let configure unix socket for webgui widgets; 3. Introduce `rootssh.sh` script which use such ferature. In `rootssh.sh` special tunnel is created which forward requests from local http port to remote unix socket.; In remote session root will automatically use socket which specified as `ROOT_WEBGUI_SOCKET` environment variable.; This socket file by default get `0700` mode - means only user can accuse it. . This solves most of security issues with using of ROOT webgui on public nodes!. `rootssh.sh` also creates listener which get informed when new window is started on remote session; and automatically popup web browser using `xdg-open $url` command. Typical session should look like:; ```; [localhost] rootssh.sh user@remotehost; [remotehost] root --web=server -e ""new Browser""; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11810:496,secur,security,496,https://root.cern,https://github.com/root-project/root/pull/11810,1,['secur'],['security']
Security,"1. This automatically provides setter/getter methods and simplifies; access to fields. Now `RLine` inherit from `RAttrLine` and API changes are:; before: `line->AttrLine().SetWidth(10)`; now: `line->SetLineWidth(10)`; One still can do: `line1->AttrLine() = line2->AttrLine()` while RAttrLine class still provides method like; `RAttrLine& AttrLine() { return *this; }` . 2. Same done for RAttrFill, RAttrText, RAttrMarker and with used classes.; 3. Adjust tutorials and JSROOT code.; 4. Change RLegend class - split RLegend::REntry on two subclasses",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8274:69,access,access,69,https://root.cern,https://github.com/root-project/root/pull/8274,1,['access'],['access']
Security,"1. Use hash value to detect any change in list of colors or with gStyle. If detected, modified version send to client.; 2. Interactive changes of draw options or histogram status bits send directly to server; 3. Small adjust of CEF build, tested with latest code; 4. Syntax adjusting of hist tutorials; 5. JSROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11775:7,hash,hash,7,https://root.cern,https://github.com/root-project/root/pull/11775,1,['hash'],['hash']
Security,1. Using latest libpng; 2. Redefine Hash in image plugin,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12797:36,Hash,Hash,36,https://root.cern,https://github.com/root-project/root/pull/12797,1,['Hash'],['Hash']
Security,11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2147; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4frame.c:357:10: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:357; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:388:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_sr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:32369,secur,security,32369,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,11 in /opt/root_src/builtins/lz4/lz4.c:1449; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4.c:1458:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1458; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4.c:1621:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1621; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1678:9: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-sec,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:13577,secur,security,13577,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,11 in /opt/root_src/builtins/lz4/lz4.c:484; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4.c:208; /opt/root_src/builtins/lz4/lz4.c:487:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:487; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:488:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:488; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:489:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:5710,secur,security,5710,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,11/src/Rotated.cxx:1205; /opt/root_src/graf2d/x11/src/TGX11.cxx:2280:4: warning: Maybe you meant to call TVirtualX::SetLineColor() instead [clazy-skipped-base-method]; /opt/root_src/graf2d/x11/src/TGX11.cxx:2385:4: warning: Maybe you meant to call TVirtualX::SetMarkerColor() instead [clazy-skipped-base-method]; /opt/root_src/graf2d/x11/src/TGX11.cxx:3119:4: warning: Maybe you meant to call TVirtualX::SetTextAlign() instead [clazy-skipped-base-method]; /opt/root_src/graf2d/x11/src/TGX11.cxx:3129:4: warning: Maybe you meant to call TVirtualX::SetTextColor() instead [clazy-skipped-base-method]; /opt/root_src/graf2d/x11/src/gifencode.c:246:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/graf2d/x11/src/gifencode.c:246; /opt/root_src/graf2d/x11ttf/src/TGX11TTF.cxx:150:1: warning: non-POD static (TTFX11Init) [clazy-non-pod-global-static]; /opt/root_src/graf2d/asimage/src/TASImage.cxx; /opt/root_src/graf2d/gpad/src/TButton.cxx; /opt/root_src/graf2d/gpad/src/TCanvas.cxx; /opt/root_src/graf2d/gpad/src/TCreatePrimitives.cxx; /opt/root_src/graf2d/gpad/src/TGroupButton.cxx; /opt/root_src/graf2d/gpad/src/TPad.cxx; /opt/root_src/graf2d/gpadv7/src/RColor.cxx; /opt/root_src/graf2d/graf/src/TCandle.cxx; /opt/root_src/graf2d/graf/src/TCurlyLine.cxx; /opt/root_src/graf2d/graf/src/TGaxis.cxx; /opt/root_src/graf2d/graf/src/TLegend.cxx; /opt/root_src/graf2d/graf/src/TPaveStats.cxx; /opt/root_src/graf2d/graf/src/TPaveText.cxx; /opt/root_src/graf2d/graf/src/TPie.cxx; /opt/root,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7432:96648,secur,security,96648,https://root.cern,https://github.com/root-project/root/issues/7432,1,['secur'],['security']
Security,"11b4edb19b45dd98eda76de0""><code>55dda29</code></a> fix: treat nocase:true as always having magic</li>; <li><a href=""https://github.com/isaacs/minimatch/commit/5e1fb8dd2bb78c0ae22101b9229fac4c76ef039e""><code>5e1fb8d</code></a> 3.1.0</li>; <li><a href=""https://github.com/isaacs/minimatch/commit/f8145c54f34075069f4a23cb214d871da4cd4006""><code>f8145c5</code></a> Add 'allowWindowsEscape' option</li>; <li><a href=""https://github.com/isaacs/minimatch/commit/570e8b1aef6c9e823a824aa0b9be10db43857cd7""><code>570e8b1</code></a> add publishConfig for v3 publishes</li>; <li><a href=""https://github.com/isaacs/minimatch/commit/5b7cd3372be253759fb4d865eb3f38f189a5fcdf""><code>5b7cd33</code></a> 3.0.6</li>; <li><a href=""https://github.com/isaacs/minimatch/commit/20b4b562830680867feb75f9c635aca08e5c86ff""><code>20b4b56</code></a> [fix] revert all breaking syntax changes</li>; <li><a href=""https://github.com/isaacs/minimatch/commit/2ff038852ec03e85e60e0eb333005c680ac8a543""><code>2ff0388</code></a> document, expose, and test 'partial:true' option</li>; <li>Additional commits viewable in <a href=""https://github.com/isaacs/minimatch/compare/v3.0.4...v3.1.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=minimatch&package-manager=npm_and_yarn&previous-version=3.0.4&new-version=3.1.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR,",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11864:1612,expose,expose,1612,https://root.cern,https://github.com/root-project/root/pull/11864,1,['expose'],['expose']
Security,121; 35: Assuming 'gRotatedDebug' is 0 in /opt/root_src/graf2d/x11/src/Rotated.cxx:1160; 36: expanded from macro 'DEBUG_PRINT4' in /opt/root_src/graf2d/x11/src/Rotated.cxx:99; 37: Taking false branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:1160; 38: expanded from macro 'DEBUG_PRINT4' in /opt/root_src/graf2d/x11/src/Rotated.cxx:99; 39: Assuming the condition is false in /opt/root_src/graf2d/x11/src/Rotated.cxx:1164; 40: Taking false branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:1164; 41: Assuming 'i1' is non-null in /opt/root_src/graf2d/x11/src/Rotated.cxx:1171; 42: Left side of '&&' is true in /opt/root_src/graf2d/x11/src/Rotated.cxx:1171; 43: Loop condition is false. Execution continues on line 1198 in /opt/root_src/graf2d/x11/src/Rotated.cxx:1171; 44: 'gFirstTextItem' is not equal to null in /opt/root_src/graf2d/x11/src/Rotated.cxx:1198; 45: Taking false branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:1198; 46: Access to field 'fNext' results in a dereference of a null pointer (loaded from variable 'last') in /opt/root_src/graf2d/x11/src/Rotated.cxx:1205; /opt/root_src/graf2d/x11/src/TGX11.cxx:2280:4: warning: Maybe you meant to call TVirtualX::SetLineColor() instead [clazy-skipped-base-method]; /opt/root_src/graf2d/x11/src/TGX11.cxx:2385:4: warning: Maybe you meant to call TVirtualX::SetMarkerColor() instead [clazy-skipped-base-method]; /opt/root_src/graf2d/x11/src/TGX11.cxx:3119:4: warning: Maybe you meant to call TVirtualX::SetTextAlign() instead [clazy-skipped-base-method]; /opt/root_src/graf2d/x11/src/TGX11.cxx:3129:4: warning: Maybe you meant to call TVirtualX::SetTextColor() instead [clazy-skipped-base-method]; /opt/root_src/graf2d/x11/src/gifencode.c:246:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrU,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7432:95500,Access,Access,95500,https://root.cern,https://github.com/root-project/root/issues/7432,1,['Access'],['Access']
Security,13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:859; /opt/root_src/builtins/lz4/lz4frame.c:918:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:918; /opt/root_src/builtins/lz4/lz4frame.c:1122:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1122; 3: expanded from macro 'MEM_INI,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:39670,secur,security,39670,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,18868; /opt/root_src/net/http/civetweb/civetweb.c:18914:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; 2: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/net/http/civetweb/civetweb.c:18914; 3: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; /opt/root_src/net/http/civetweb/civetweb.c:18969:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:18969; /opt/root_src/net/http/civetweb/civetweb.c:18984:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: expanded from macro 'strcat0' in /opt/root_src/net/http/civetweb/civetweb.c:18868; 2: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:75771,secur,security,75771,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,"2 overloaded methods succeeded.; ~~~; 1110/1272 Test #1115: tutorial-fit-combinedFit-py .........................................***Failed 1.71 sec; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/tutorials/fit/combinedFit.py"", line 98, in <module>; fitter.Config().ParSettings(4).Fix(); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; cppyy.gbl.std.out_of_range: none of the 2 overloaded methods succeeded. Full details:; const ROOT::Fit::ParameterSettings& ROOT::Fit::FitConfig::ParSettings(unsigned int i) =>; out_of_range: vector::_M_range_check: __n (which is 0) >= this->size() (which is 0); ROOT::Fit::ParameterSettings& ROOT::Fit::FitConfig::ParSettings(unsigned int i) =>; out_of_range: vector::_M_range_check: __n (which is 0) >= this->size() (which is 0); CMake Error at /builddir/build/BUILD/root-6.28.00/redhat-linux-build/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### tutorial-math-exampleFunction-py. ReferenceError: attempt to access a null-pointer; ~~~; 1132/1272 Test #1132: tutorial-math-exampleFunction-py ....................................***Failed Error regular expression found in output. Regex=[Error in] 2.11 sec; Error in <ROOT::Math::Fitter::SetFCN>: FCN function has zero parameters ; Use Functor1D for wrapping one-dimensional function and compute integral of f(x) = x^2-1; integral-1D value = 5.999999999999999; Use Functor for wrapping a multi-dimensional function, the Rosenbrock Function r(x,y) and find its minimum; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/tutorials/math/exampleFunction.py"", line 57, in <module>; fitter.Result().Print(ROOT.std.cout); ReferenceError: attempt to access a null-pointer; CMake Error at /builddir/build/BUILD/root-6.28.00/redhat-linux-build/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### tutorial-tmva-TMVA_CNN_Classification-py. There are probably 6 thread, not 25769803776. (Zero-extended from 32 to 64 bits in the wrong direction.). $ printf '%016x\n",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12429:6811,access,access,6811,https://root.cern,https://github.com/root-project/root/issues/12429,1,['access'],['access']
Security,"3/src/JSONFactories_RooFitCore.cxx:448:25: error: ‘const class RooExpPoly’ has no member named ‘x’; did you mean ‘RooRealProxy RooExpPoly::_x’? (not accessible from this context); 448 | elem[""x""] << pdf->x().GetName();; | ^; In file included from /opt/root/src/roofit/hs3/src/JSONFactories_RooFitCore.cxx:20:; /opt/root/install/include/RooExpPoly.h:37:17: note: declared protected here; 37 | RooRealProxy _x;; | ^~; /opt/root/src/roofit/hs3/src/JSONFactories_RooFitCore.cxx:453:32: error: ‘const class RooExpPoly’ has no member named ‘lowestOrder’; did you mean ‘int RooExpPoly::_lowestOrder’? (not accessible from this context); 453 | for (int i = 0; i < pdf->lowestOrder(); ++i) {; | ^~~~~~~~~~~; /opt/root/install/include/RooExpPoly.h:39:8: note: declared protected here; 39 | int _lowestOrder;; | ^~~~~~~~~~~~; /opt/root/src/roofit/hs3/src/JSONFactories_RooFitCore.cxx:456:36: error: ‘const class RooExpPoly’ has no member named ‘coefList’; did you mean ‘RooListProxy RooExpPoly::_coefList’? (not accessible from this context); 456 | for (const auto &coef : pdf->coefList()) {; | ^~~~~~~~; /opt/root/install/include/RooExpPoly.h:38:17: note: declared protected here; 38 | RooListProxy _coefList;; | ^~~~~~~~~; make[2]: *** [roofit/hs3/CMakeFiles/RooFitHS3.dir/build.make:132: roofit/hs3/CMakeFiles/RooFitHS3.dir/src/JSONFactories_RooFitCore.cxx.o] Error 1; ```. Tried to change method names to those with underscores, got another error about a protected field:. ```; /opt/root/src/roofit/hs3/src/JSONFactories_RooFitCore.cxx: In member function ‘virtual bool {anonymous}::RooExpPolyStreamer::exportObject(RooJSONFactoryWSTool*, const RooAbsArg*, RooFit::Detail::JSONNode&) const’:; /opt/root/src/roofit/hs3/src/JSONFactories_RooFitCore.cxx:448:25: error: ‘RooRealProxy RooExpPoly::_x’ is protected within this context; 448 | elem[""x""] << pdf->_x().GetName();; | ^~; In file included from /opt/root/src/roofit/hs3/src/JSONFactories_RooFitCore.cxx:20:; /opt/root/install/include/RooExpPoly.h:37:17:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13101:1360,access,accessible,1360,https://root.cern,https://github.com/root-project/root/issues/13101,1,['access'],['accessible']
Security,32; 30: Loop condition is false. Execution continues on line 737 in /opt/root_src/build/rmkdepend/main.c:732; 31: 'found' is 0 in /opt/root_src/build/rmkdepend/main.c:737; 32: Taking true branch in /opt/root_src/build/rmkdepend/main.c:737; 33: Assuming 'verbose' is 0 in /opt/root_src/build/rmkdepend/main.c:738; 34: Taking false branch in /opt/root_src/build/rmkdepend/main.c:738; 35: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/build/rmkdepend/main.c:749; /opt/root_src/build/rmkdepend/mainroot.cxx:52:1: warning: non-POD static (basic_string) [clazy-non-pod-global-static]; /opt/root_src/build/rmkdepend/mainroot.cxx:53:1: warning: non-POD static (basic_string) [clazy-non-pod-global-static]; /opt/root_src/build/rmkdepend/mainroot.cxx:116:7: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 in /opt/root_src/build/rmkdepend/mainroot.cxx:116; /opt/root_src/build/rmkdepend/parse.c:392:17: warning: Access to field 's_name' results in a dereference of a null pointer (loaded from variable 'stab') [clang-analyzer-core.NullDereference]; 1: Loop condition is true. Entering loop body in /opt/root_src/build/rmkdepend/parse.c:542; 2: Control jumps to 'case 17:' at line 602 in /opt/root_src/build/rmkdepend/parse.c:543; 3: Assuming 'recursion' is 0 in /opt/root_src/build/rmkdepend/parse.c:605; 4: Taking true branch in /opt/root_src/build/rmkdepend/parse.c:605; 5: 'recursion' is 0 in /opt/root_src/build/rmkdepend/parse.c:609; 6: Taking false branch in /opt/root_src/build/rmkdepend/parse.c:609; 7: Calling 'define' in /opt/root_src/build/rmkdepe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7410:39409,secur,security,39409,https://root.cern,https://github.com/root-project/root/issues/7410,1,['secur'],['security']
Security,365; 3: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; /opt/root_src/net/http/civetweb/civetweb.c:3502:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3502; /opt/root_src/net/http/civetweb/civetweb.c:3633:23: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; 3: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3633; 4: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 5: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; /opt/root_src/net/http/civetweb/civetweb.c:3878:5: warning: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions th,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:24399,secur,security,24399,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,388:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:388; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:397:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:397; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:444:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:33772,secur,security,33772,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,397:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:397; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:444:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:444; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:507:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security chec,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:34573,secur,security,34573,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,39:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/mcalloc.c:39; /opt/root_src/core/clib/src/mmalloc.c:74:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/mmalloc.c:74; /opt/root_src/core/clib/src/mmalloc.c:115:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/mmalloc.c:115; /opt/root_src/core/clib/src/mmalloc.c:116:7: warning: Call to function 'memcpy' is insecure as it does not provid,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:25906,secur,security,25906,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,3: Assuming 'i' is < 'nMethods' in /opt/root_src/tmva/tmva/src/MethodCompositeBase.cxx:164; 4: Loop condition is true. Entering loop body in /opt/root_src/tmva/tmva/src/MethodCompositeBase.cxx:164; 5: Assuming the condition is false in /opt/root_src/tmva/tmva/src/MethodCompositeBase.cxx:175; 6: Taking false branch in /opt/root_src/tmva/tmva/src/MethodCompositeBase.cxx:175; 7: 'i' is equal to 0 in /opt/root_src/tmva/tmva/src/MethodCompositeBase.cxx:189; 8: Taking true branch in /opt/root_src/tmva/tmva/src/MethodCompositeBase.cxx:189; 9: 'meth' initialized here in /opt/root_src/tmva/tmva/src/MethodCompositeBase.cxx:197; 10: Assuming 'meth' is equal to null in /opt/root_src/tmva/tmva/src/MethodCompositeBase.cxx:199; 11: Taking true branch in /opt/root_src/tmva/tmva/src/MethodCompositeBase.cxx:199; 12: Called C++ object pointer is null in /opt/root_src/tmva/tmva/src/MethodCompositeBase.cxx:204; /opt/root_src/tmva/tmva/src/MethodCuts.cxx:454:45: warning: Array access (via field 'fCutMin') results in a null pointer dereference [clang-analyzer-core.NullDereference]; 1: Value assigned to field 'fCutMin' in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:435; 2: Assuming field 'fCutMin' is equal to NULL in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:438; 3: Left side of '||' is true in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:438; 4: Assuming field 'fTestSignalEff' is > 0 in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:446; 5: Taking true branch in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:446; 6: Assuming 'ibin' is >= 0 in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:449; 7: Taking false branch in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:449; 8: Assuming 'ibin' is < field 'fNbins' in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:450; 9: Taking false branch in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:450; 10: Assuming the condition is true in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:453; 11: Loop condition is true. Entering loop body in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:75141,access,access,75141,https://root.cern,https://github.com/root-project/root/issues/7526,1,['access'],['access']
Security,3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:852; /opt/root_src/builtins/lz4/lz4frame.c:859:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:859; /opt/root_src/builtins/lz4/lz4frame.c:918:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:918; /opt/root_src/builtins/lz4/lz4frame.c:1122:5: warning: Call to function 'memset' is insecure as it does not prov,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:39027,secur,security,39027,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/zip/src/ZInflate.c:439; /opt/root_src/core/zip/src/ZInflate.c:700:11: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/zip/src/ZInflate.c:700; /opt/root_src/core/zip/src/ZInflate.c:707:27: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]; 1: Calling 'R__Inflate_block' in /opt/root_src/core/zip/src/ZInflate.c:1075; 2: Loop condition is true. Entering loop body in /opt/root_src/core/zip/src/ZInflate.c:1019; 3: expanded from macro 'NEEDBITS' in /opt/root_src/core/zip/src/ZInflate.c:348; 4: Assuming the condition is false in /opt/root_src/core/zip/src/ZInflate.c:1019; 5: expanded from macro 'NEEDBITS' in /opt/root_src/core/zip/src/ZInflate.c:348; 6: Taking false branch in /opt/root_src/core/zip/src/ZInflate.c:1019; 7: expanded from macro 'NEEDBITS' in /opt/root_src/core/zip/src/ZInflate.c:348; 8: Loop condition is false. Execution continues on line,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7427:8452,secur,security,8452,https://root.cern,https://github.com/root-project/root/issues/7427,1,['secur'],['security']
Security,4/lz4.c:1621:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1621; 3: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; /opt/root_src/builtins/lz4/lz4.c:1678:9: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:1678; /opt/root_src/builtins/lz4/lz4.c:1678:9: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Assuming the condition is false in /opt/root_src/builtins/lz4/lz4.c:1673; 2: Taking false branch in /opt/root_src/builtins/lz4/lz4.c:1673; 3: Assuming 'dictSize' is <= field 'dictSize' in /opt/root_src/builtins/lz4/lz4.c:1674; 4: Taking false branch in /opt/root_src/builtins/lz4/lz4.c:1674; 5: Assuming 'safeBuffer' is equal to NULL in /opt/root_src/builtins/lz4/lz4.c:1676; 6: Taking true branch in /opt/root_src/builtins/lz4/lz4.c:1676; 7: ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:14557,secur,security,14557,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,4/lz4frame.c:1311; 40: 'withinTmp' is 0 in /opt/root_src/builtins/lz4/lz4frame.c:1322; 41: Left side of '&&' is false in /opt/root_src/builtins/lz4/lz4frame.c:1322; 42: 'withinTmp' is 0 in /opt/root_src/builtins/lz4/lz4frame.c:1329; 43: Taking false branch in /opt/root_src/builtins/lz4/lz4frame.c:1329; 44: Assuming field 'dict' is not equal to field 'tmpOutBuffer' in /opt/root_src/builtins/lz4/lz4frame.c:1343; 45: Taking false branch in /opt/root_src/builtins/lz4/lz4frame.c:1343; 46: Assuming 'preserveSize' is <= field 'dictSize' in /opt/root_src/builtins/lz4/lz4frame.c:1356; 47: Taking false branch in /opt/root_src/builtins/lz4/lz4frame.c:1356; 48: Null pointer passed to 2nd parameter expecting 'nonnull' in /opt/root_src/builtins/lz4/lz4frame.c:1358; /opt/root_src/builtins/lz4/lz4frame.c:1404:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1404; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:1434:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security c,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:53015,secur,security,53015,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,444:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:444; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:507:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:507; /opt/root_src/builtins/lz4/lz4frame.c:609:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that suppor,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:35374,secur,security,35374,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,44:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:844; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:852:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:852; /opt/root_src/builtins/lz4/lz4frame.c:859:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:38263,secur,security,38263,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,4:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/mmalloc.c:74; /opt/root_src/core/clib/src/mmalloc.c:115:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/mmalloc.c:115; /opt/root_src/core/clib/src/mmalloc.c:116:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/mmalloc.c:116; /opt/root_src/core/clib/src/mrealloc.c:77:16: warning: Call to function 'memcpy' is insecure as it does not prov,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:26548,secur,security,26548,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,57:10: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:357; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:388:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:388; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:397:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:32971,secur,security,32971,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,"5: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 16: Returning from 'TObject::TestBit' in /opt/root_src/core/base/inc/TObject.h:149; 17: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:149; 18: Returning from 'TObject::IsZombie' in /opt/root_src/tree/tree/src/TFriendElement.cxx:185; 19: Taking false branch in /opt/root_src/tree/tree/src/TFriendElement.cxx:185; 20: Assuming the condition is false in /opt/root_src/tree/tree/src/TFriendElement.cxx:187; 21: Taking false branch in /opt/root_src/tree/tree/src/TFriendElement.cxx:187; 22: Called C++ object pointer is null in /opt/root_src/tree/tree/src/TFriendElement.cxx:192; /opt/root_src/tree/tree/src/TLeaf.cxx:237:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/tree/tree/src/TLeaf.cxx:237; /opt/root_src/tree/tree/src/TLeaf.cxx:270:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/tree/tree/src/TLeaf.cxx:270; /opt/root_src/tree/tree/src/TLeaf.cxx:272:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffe",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7429:69095,secur,security,69095,https://root.cern,https://github.com/root-project/root/issues/7429,1,['secur'],['security']
Security,6.22 PyROOT seg faults when accessing array members,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6468:28,access,accessing,28,https://root.cern,https://github.com/root-project/root/issues/6468,1,['access'],['accessing']
Security,609:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:609; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:754:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:754; /opt/root_src/builtins/lz4/lz4frame.c:844:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that suppor,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:36818,secur,security,36818,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,6: 2nd function call argument is an uninitialized value in /opt/root_src/net/auth/src/rsalib.cxx:394; /opt/root_src/net/http/civetweb/civetweb.c:1635:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:1635; /opt/root_src/net/http/civetweb/civetweb.c:3243:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3243; /opt/root_src/net/http/civetweb/civetweb.c:3365:11: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'vsnprintf_impl' in /opt/root_src/net/http/civetweb/civetweb.c:781; 2: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace wi,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:22232,secur,security,22232,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,6: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 12: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:166; 13: Null pointer value stored to 'i' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:167; 14: Control jumps to 'case kIsEnum:' at line 171 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:169; 15: Control jumps to 'case kInt_t:' at line 176 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:172; 16: Access to field 's_int' results in a dereference of a null pointer (loaded from variable 'i') in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:176; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:177:35: warning: Access to field 's_long' results in a dereference of a null pointer (loaded from variable 'i') [clang-analyzer-core.NullDereference]; 1: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is non-null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 3: '?' condition is true in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 6: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/roo,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:52544,Access,Access,52544,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security,6: Taking false branch in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:652; 27: Assuming the condition is false in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:656; 28: Taking false branch in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:656; 29: Assuming the condition is false in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:640; 30: Loop condition is false. Execution continues on line 668 in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:640; 31: 'fitter' initialized to a null pointer value in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:668; 32: Control jumps to the 'default' case at line 683 in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:670; 33: Assuming field 'fInteractive' is null in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:687; 34: Taking false branch in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:687; 35: Called C++ object pointer is null in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:689; /opt/root_src/tmva/tmva/src/MethodCuts.cxx:818:4: warning: Variable 'eff' with floating point type 'Double_t' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]; 1: Variable 'eff' with floating point type 'Double_t' should not be used as a loop counter in /opt/root_src/tmva/tmva/src/MethodCuts.cxx:818; /opt/root_src/tmva/tmva/src/MethodDL.cxx:1348:52: warning: Division by zero [clang-analyzer-core.DivideZero]; 1: Assuming the condition is false in /opt/root_src/tmva/tmva/src/MethodDL.cxx:1174; 2: Assuming 'batchDepth' is equal to 'batchSize' in /opt/root_src/tmva/tmva/src/MethodDL.cxx:1219; 3: Left side of '&&' is false in /opt/root_src/tmva/tmva/src/MethodDL.cxx:1219; 4: Assuming 'batchDepth' is not equal to 1 in /opt/root_src/tmva/tmva/src/MethodDL.cxx:1223; 5: Left side of '&&' is false in /opt/root_src/tmva/tmva/src/MethodDL.cxx:1223; 6: 'batchDepth' is equal to 'batchSize' in /opt/root_src/tmva/tmva/src/MethodDL.cxx:1232; 7: Taking true branch in /opt/root_src/tmva/tmva/src/MethodDL.cxx:1232; 8: Assuming the condition is false in /opt/root_src/tmva/tmva/sr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:84720,secur,security,84720,https://root.cern,https://github.com/root-project/root/issues/7526,1,['secur'],['security']
Security,"6dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read""; which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but; an identical record was already read) *and* some data is stored in the file, the new; `StreamerInfo` record written was missing all the classes in the original record that; were not used during the update. To resolve this we record not only the fact that the record has been read and process; but also its content (via a collectin of uid of the `TStreamerInfo` objects).; Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has; been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle; for a couple of files.# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes # . Fix #12783. Since ""66dfb08bd7 - [IO] Do not process the streamerinfo record of a file if we read the si already read""; which was extended in scope by ""7cf9d5dc8c - fix hashing of streamer info,"". if a file is opened in update mode and the reading of its `StreamerInfo` record is skip (but; an identical record was already read) *and* some data is stored in the file, the new; `StreamerInfo` record written was missing all the classes in the original record that; were not used during the update. To resolve this we record not only the fact that the record has been read and process; but also its content (via a collectin of uid of the `TStreamerInfo` objects).; Upon skipping the `StreamerInfo` record, we now mark of its `TStreamerInfo` objects has; been used by the file (and thus upon writing the record is complete). This behavior was seen #12783 due an awkward 'create, fill, close, update immediately' cycle; for a couple of files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13842:1251,hash,hashing,1251,https://root.cern,https://github.com/root-project/root/pull/13842,1,['hash'],['hashing']
Security,"7 0.0003111300 3.31E-04; 6 -0.45 0.9489635592 0.9493568763 0.0003933171 4.14E-04; 7 -0.35 0.9582539443 0.9586769214 0.0004229771 4.41E-04; 8 -0.25 0.9684763536 0.9688599643 0.0003836107 3.96E-04; 9 -0.15 0.9799490728 0.9802212720 0.0002721992 2.78E-04; 10 -0.05 0.9929118716 0.9930125518 0.0001006802 1.01E-04; 11 0.05 1.0075044778 1.0073993699 -0.0001051079 -1.04E-04; 12 0.15 1.0237554038 1.0234460012 -0.0003094025 -3.02E-04; 13 0.25 1.0415811263 1.0411077858 -0.0004733405 -4.54E-04; 14 0.35 1.0607956204 1.0602318105 -0.0005638099 -5.31E-04; 15 0.45 1.0811302458 1.0805675762 -0.0005626696 -5.20E-04; 16 0.55 1.1022639865 1.1017900409 -0.0004739457 -4.30E-04; 17 0.65 1.1238640449 1.1235378523 -0.0003261926 -2.90E-04; 18 0.75 1.1456367871 1.1454695261 -0.0001672610 -1.46E-04; 19 0.85 1.1673890440 1.1673397731 -0.0000492709 -4.22E-05; 20 0.95 1.1890997634 1.1890973372 -0.0000024261 -2.04E-06; 21 1.00 1.2000000000 1.2000000000 0.0000000000 0.00E+00; ```. In case this is useful later, here is how I produced this validation; table. Print `FlexibleInterpVar` values for differnt parameters both with and; without this PR using the following code:. ```C++; using namespace RooFit;; using RooStats::HistFactory::FlexibleInterpVar;. RooRealVar param{""param"", ""param"", -1, 1};; param.setBins(20);. double nominal = 1.;; std::vector<double> low{0.90};; std::vector<double> high{1.20};. std::vector<std::unique_ptr<RooAbsReal>> interps;. for (int code = 0; code < 5; ++code) {; std::vector<int> codes{code};; interps.emplace_back(std::make_unique<FlexibleInterpVar>(""interp"", ""interp"", param, nominal, low, high, codes));; }. cout.precision(12);. param.setVal(-1);; std::cout << param.getVal() << "","" << interps[4]->getVal() << std::endl;; for (int i = 0; i < param.numBins(); ++i) {; param.setBin(i);; std::cout << param.getVal() << "","" << interps[4]->getVal() << std::endl;; }; param.setVal(1);; std::cout << param.getVal() << "","" << interps[4]->getVal() << std::endl;; ```. Then I concatenated the",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13067:3097,validat,validation,3097,https://root.cern,https://github.com/root-project/root/pull/13067,1,['validat'],['validation']
Security,781; 5: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; /opt/root_src/net/http/civetweb/civetweb.c:7374:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7374; /opt/root_src/net/http/civetweb/civetweb.c:7477:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:7477; /opt/root_src/net/http/civetweb/civetweb.c:7535:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:33162,secur,security,33162,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2752; /opt/root_src/core/clib/src/attach.c:146:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/attach.c:146; /opt/root_src/core/clib/src/attach.c:147:3: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/core/clib/src/attach.c:147; /opt/root_src/core/clib/src/attach.c:186:7: warning: Call to function 'memcpy' is insecure as it does not provi,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:23338,secur,security,23338,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/mmalloc.c:116; /opt/root_src/core/clib/src/mrealloc.c:77:16: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/mrealloc.c:77; /opt/root_src/core/clib/src/mrealloc.c:120:16: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/core/clib/src/mrealloc.c:120; /opt/root_src/core/clib/src/mrealloc.c:142:13: warning: Call to function 'memcpy' is insecure as it does ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:27835,secur,security,27835,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,80; 40: expanded from macro 'NEEDBITS' in /opt/root_src/core/zip/src/ZInflate.c:348; 41: Assuming the condition is false in /opt/root_src/core/zip/src/ZInflate.c:681; 42: Taking false branch in /opt/root_src/core/zip/src/ZInflate.c:681; 43: Assuming 'k' is >= 'e' in /opt/root_src/core/zip/src/ZInflate.c:690; 44: expanded from macro 'NEEDBITS' in /opt/root_src/core/zip/src/ZInflate.c:348; 45: Loop condition is false. Execution continues on line 691 in /opt/root_src/core/zip/src/ZInflate.c:690; 46: expanded from macro 'NEEDBITS' in /opt/root_src/core/zip/src/ZInflate.c:348; 47: Assuming the condition is false in /opt/root_src/core/zip/src/ZInflate.c:696; 48: '?' condition is false in /opt/root_src/core/zip/src/ZInflate.c:696; 49: Assuming the condition is false in /opt/root_src/core/zip/src/ZInflate.c:696; 50: '?' condition is false in /opt/root_src/core/zip/src/ZInflate.c:696; 51: Taking false branch in /opt/root_src/core/zip/src/ZInflate.c:698; 52: Assigned value is garbage or undefined in /opt/root_src/core/zip/src/ZInflate.c:707; /opt/root_src/core/zip/src/ZInflate.c:1117:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/zip/src/ZInflate.c:1117; /opt/root_src/core/rint/src/TTabCom.cxx; /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp; /opt/root_src/core/unix/src/TUnixSystem.cxx; /opt/root_src/core/zip/src/Bits.c; /opt/root_src/core/zip/src/RZip.cxx; /opt/root_src/core/zip/src/ZDeflate.c; /opt/root_src/core/zip/src/ZInflate.c; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7427:13179,secur,security,13179,https://root.cern,https://github.com/root-project/root/issues/7427,3,['secur'],['security']
Security,82; 54: Called C++ object pointer is null in /opt/root_src/gui/gui/src/TGFileBrowser.cxx:276; /opt/root_src/gui/gui/src/TGFileBrowser.cxx:445:4: warning: Value stored to 'type' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'type' is never read in /opt/root_src/gui/gui/src/TGFileBrowser.cxx:445; /opt/root_src/gui/gui/src/TGFileBrowser.cxx:446:4: warning: Value stored to 'is_link' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'is_link' is never read in /opt/root_src/gui/gui/src/TGFileBrowser.cxx:446; /opt/root_src/gui/gui/src/TGFileBrowser.cxx:741:10: warning: Value stored to 'item' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'item' is never read in /opt/root_src/gui/gui/src/TGFileBrowser.cxx:741; /opt/root_src/gui/gui/src/TGFileDialog.cxx:63:1: warning: non-POD static (TGFileInfo) [clazy-non-pod-global-static]; /opt/root_src/gui/gui/src/TGFont.cxx:849:11: warning: Access to field 'fY' results in a dereference of a null pointer (loaded from variable 'chunk') [clang-analyzer-core.NullDereference]; 1: Assuming 'numChars' is >= 0 in /opt/root_src/gui/gui/src/TGFont.cxx:681; 2: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:681; 3: Loop condition is true. Entering loop body in /opt/root_src/gui/gui/src/TGFont.cxx:706; 4: 'start' is >= 'special' in /opt/root_src/gui/gui/src/TGFont.cxx:707; 5: Taking true branch in /opt/root_src/gui/gui/src/TGFont.cxx:707; 6: Loop condition is false. Execution continues on line 727 in /opt/root_src/gui/gui/src/TGFont.cxx:710; 7: 'start' is >= 'special' in /opt/root_src/gui/gui/src/TGFont.cxx:728; 8: Taking false branch in /opt/root_src/gui/gui/src/TGFont.cxx:728; 9: 'start' is equal to 'special' in /opt/root_src/gui/gui/src/TGFont.cxx:741; 10: Left side of '&&' is true in /opt/root_src/gui/gui/src/TGFont.cxx:741; 11: Assuming 'special' is < 'end' in /opt/root_src/gui/gui/src/TGFont.cxx:741; 12: Taking true branch in /opt/root_src/gui/gui/src/TGFont.cxx:,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:18696,Access,Access,18696,https://root.cern,https://github.com/root-project/root/issues/7533,1,['Access'],['Access']
Security,"863; 64: Calling 'get_count' in /opt/root_src/core/clib/src/Demangle.c:1904; 65: Assuming the condition is false in /opt/root_src/core/clib/src/Demangle.c:1810; 66: Taking false branch in /opt/root_src/core/clib/src/Demangle.c:1810; 67: Assuming the condition is false in /opt/root_src/core/clib/src/Demangle.c:1818; 68: expanded from macro 'isdigit' in /usr/include/ctype.h:192; 69: expanded from macro '__isctype' in /usr/include/ctype.h:89; 70: Taking false branch in /opt/root_src/core/clib/src/Demangle.c:1818; 71: Returning the value 1, which participates in a condition later in /opt/root_src/core/clib/src/Demangle.c:1836; 72: Returning from 'get_count' in /opt/root_src/core/clib/src/Demangle.c:1904; 73: Left side of '||' is false in /opt/root_src/core/clib/src/Demangle.c:1904; 74: Assuming 'n' is < field 'ntypes' in /opt/root_src/core/clib/src/Demangle.c:1904; 75: Taking false branch in /opt/root_src/core/clib/src/Demangle.c:1904; 76: Array access (via field 'typevec') results in a null pointer dereference in /opt/root_src/core/clib/src/Demangle.c:1910; /opt/root_src/core/clib/src/Demangle.c:2264:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2264; /opt/root_src/core/clib/src/Demangle.c:2683:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:19565,access,access,19565,https://root.cern,https://github.com/root-project/root/issues/7422,1,['access'],['access']
Security,86:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/attach.c:186; /opt/root_src/core/clib/src/mcalloc.c:39:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/mcalloc.c:39; /opt/root_src/core/clib/src/mmalloc.c:74:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/mmalloc.c:74; /opt/root_src/core/clib/src/mmalloc.c:115:7: warning: Call to function 'memset' is insecure as it does not provide ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:25265,secur,security,25265,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,8: Left side of '&&' is false in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:94; 9: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:96; 10: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:102; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:102; 12: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:104; 13: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:104; 14: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:105; 15: Null pointer value stored to 'helper' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:106; 16: Control jumps to 'case kIsEnum:' at line 110 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:108; 17: Control jumps to 'case kDouble32_t:' at line 127 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:111; 18: Access to field 'dbl' results in a dereference of a null pointer (loaded from variable 'helper') in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:128; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:139:13: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:243; 3: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:243; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:246; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:246; 6: Calling 'TEmulatedMapProxy::ReadMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:247; 7: Assuming the condition is false in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:94; 8: Left side of '&&' is false in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:94; 9: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:96; 10: 'idx' is < 'nElements' in /opt/r,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:39199,Access,Access,39199,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security,952:10: warning: Value stored to 'rg1' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'rg1' is never read in /opt/root_src/math/mathcore/src/TMath.cxx:952; /opt/root_src/math/mathcore/src/TMath.cxx:961:10: warning: Value stored to 'rg2' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'rg2' is never read in /opt/root_src/math/mathcore/src/TMath.cxx:961; /opt/root_src/math/mathcore/src/TMath.cxx:975:10: warning: Value stored to 'rg3' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'rg3' is never read in /opt/root_src/math/mathcore/src/TMath.cxx:975; /opt/root_src/math/mathcore/src/TMath.cxx:1782:13: warning: Value stored to 'v' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'v' during its initialization is never read in /opt/root_src/math/mathcore/src/TMath.cxx:1782; /opt/root_src/math/mathcore/src/TMath.cxx:2091:4: warning: Variable 'i' with floating point type 'Double_t' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]; 1: Variable 'i' with floating point type 'Double_t' should not be used as a loop counter in /opt/root_src/math/mathcore/src/TMath.cxx:2091; /opt/root_src/math/mathcore/src/triangle.c:4961:10: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]; 1: Assuming field 'verbose' is <= 2 in /opt/root_src/math/mathcore/src/triangle.c:8862; 2: Taking false branch in /opt/root_src/math/mathcore/src/triangle.c:8862; 3: Assuming the condition is true in /opt/root_src/math/mathcore/src/triangle.c:8872; 4: Loop condition is true. Entering loop body in /opt/root_src/math/mathcore/src/triangle.c:8872; 5: Assuming the condition is false in /opt/root_src/math/mathcore/src/triangle.c:8876; 6: Taking false branch in /opt/root_src/math/mathcore/src/triangle.c:8876; 7: Assuming the condition is true in /opt/root_src/math/mathcore/src/triangle.c:8872; 8: Loop condition is true. Entering ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7458:29399,secur,security,29399,https://root.cern,https://github.com/root-project/root/issues/7458,1,['secur'],['security']
Security,"9e6; 91f3ae56. ### Expected behavior. Passing test on s390x. ### To Reproduce. 1. Build root for s390x; 2. Run unit tests. ### Setup. 1. ROOT version: 6.28.00; 2. Operating system: Fedora for s390x, RHEL+EPEL for s390x; 3. How you obtained ROOT: Compilation from source. ### Additional context. Thefailing test:; ~~~; 295/1272 Test #250: gtest-roofit-roofitcore-test-testRooProdPdf .........................***Failed 1.02 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 8 tests from 2 test suites.; [----------] Global test environment set-up.; [----------] 2 tests from RooProdPdf; [ RUN ] RooProdPdf.TestGetPartIntList; /builddir/build/BUILD/root-6.28.00/roofit/roofitcore/test/testRooProdPdf.cxx:146: Failure; Expected equality of these values:; hashRooProduct(prod); Which is: 3649468902; 2448666198; [ FAILED ] RooProdPdf.TestGetPartIntList (229 ms); [ RUN ] RooProdPdf.TestDepsAreCond; Warning in <RooNaNPacker>: Fast recovery from undefined function values only implemented for little-endian machines. If necessary, request an extension of functionality on https://root.cern; [ OK ] RooProdPdf.TestDepsAreCond (644 ms); [ DISABLED ] RooProdPdf.DISABLED_ChangeServerNormSetForProdPdfInAddPdf; [----------] 2 tests from RooProdPdf (873 ms total); [----------] 6 tests from RooProdPdf/TestProdPdf; [ RUN ] RooProdPdf/TestProdPdf.CachingOpt/opt0off; [ OK ] RooProdPdf/TestProdPdf.CachingOpt/opt0off (17 ms); [ RUN ] RooProdPdf/TestProdPdf.CachingOpt/opt0cpu; [ OK ] RooProdPdf/TestProdPdf.CachingOpt/opt0cpu (9 ms); [ RUN ] RooProdPdf/TestProdPdf.CachingOpt/opt1off; [ OK ] RooProdPdf/TestProdPdf.CachingOpt/opt1off (13 ms); [ RUN ] RooProdPdf/TestProdPdf.CachingOpt/opt1cpu; [ OK ] RooProdPdf/TestProdPdf.CachingOpt/opt1cpu (9 ms); [ RUN ] RooProdPdf/TestPr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12430:1343,hash,hashRooProduct,1343,https://root.cern,https://github.com/root-project/root/issues/12430,1,['hash'],['hashRooProduct']
Security,"9f</code></a></li>; <li>[Tests] add <code>aud</code> in <code>posttest</code> <a href=""https://github.com/minimistjs/minimist/commit/228ae938f3cd9db9dfd8bd7458b076a7b2aef280""><code>228ae93</code></a></li>; <li>[meta] add <code>safe-publish-latest</code> <a href=""https://github.com/minimistjs/minimist/commit/01fc23f5104f85c75059972e01dd33796ab529ff""><code>01fc23f</code></a></li>; <li>[meta] update repo URLs <a href=""https://github.com/minimistjs/minimist/commit/6b164c7d68e0b6bf32f894699effdfb7c63041dd""><code>6b164c7</code></a></li>; </ul>; <h2><a href=""https://github.com/minimistjs/minimist/compare/v1.2.5...v1.2.6"">v1.2.6</a> - 2022-03-21</h2>; <h3>Commits</h3>; <ul>; <li>test from prototype pollution PR <a href=""https://github.com/minimistjs/minimist/commit/bc8ecee43875261f4f17eb20b1243d3ed15e70eb""><code>bc8ecee</code></a></li>; <li>isConstructorOrProto adapted from PR <a href=""https://github.com/minimistjs/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d""><code>c2b9819</code></a></li>; <li>security notice for additional prototype pollution issue <a href=""https://github.com/minimistjs/minimist/commit/ef88b9325f77b5ee643ccfc97e2ebda577e4c4e2""><code>ef88b93</code></a></li>; </ul>; <h2><a href=""https://github.com/minimistjs/minimist/compare/v1.2.4...v1.2.5"">v1.2.5</a> - 2020-03-12</h2>; <h2><a href=""https://github.com/minimistjs/minimist/compare/v1.2.3...v1.2.4"">v1.2.4</a> - 2020-03-11</h2>; <h3>Commits</h3>; <ul>; <li>security notice <a href=""https://github.com/minimistjs/minimist/commit/4cf1354839cb972e38496d35e12f806eea92c11f""><code>4cf1354</code></a></li>; <li>additional test for constructor prototype pollution <a href=""https://github.com/minimistjs/minimist/commit/1043d212c3caaf871966e710f52cfdf02f9eea4b""><code>1043d21</code></a></li>; </ul>; <h2><a href=""https://github.com/minimistjs/minimist/compare/v1.2.2...v1.2.3"">v1.2.3</a> - 2020-03-10</h2>; <h3>Commits</h3>; <ul>; <li>more failing proto pollution tests <a href=""https://github.com/minimistjs/minimist/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11865:3181,secur,security,3181,https://root.cern,https://github.com/root-project/root/pull/11865,1,['secur'],['security']
Security,"9fb8e713 in _PyEval_EvalFrameDefault () from /lib64/libpython3.8.so.1.0; #9 0x00007fd99fb8cd54 in _PyEval_EvalCodeWithName () from /lib64/libpython3.8.so.1.0; #10 0x00007fd99fc07e79 in PyEval_EvalCodeEx () from /lib64/libpython3.8.so.1.0; #11 0x00007fd99fc07e3b in PyEval_EvalCode () from /lib64/libpython3.8.so.1.0 ; #12 0x00007fd99fc29068 in run_eval_code_obj () from /lib64/libpython3.8.so.1.0; #13 0x00007fd99fc28783 in run_mod () from /lib64/libpython3.8.so.1.0; #14 0x00007fd99fb149ce in PyRun_FileExFlags () from /lib64/libpython3.8.so.1.0; #15 0x00007fd99fb14186 in PyRun_SimpleFileExFlags () from /lib64/libpython3.8.so.1.0; #16 0x00007fd99fb0b351 in Py_RunMain.cold () from /lib64/libpython3.8.so.1.0; #17 0x00007fd99fbfb969 in Py_BytesMain () from /lib64/libpython3.8.so.1.0; #18 0x00007fd99fde1042 in __libc_start_main () from /lib64/libc.so.6; #19 0x0000564fd09cf07e in _start (); ===========================================================; ```; This not only segfaults, but it reprints values from the first entry before doing that instead of the second entry, suggesting the array access results in some sort of memory corruption. . Running valgrind (with ROOT suppressions) suggests that cppyy is reading some unallocated memory:; ```$ valgrind --suppressions=/usr/share/root/valgrind-root.supp python breaks.py ; ==774799== Memcheck, a memory error detector; ==774799== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==774799== Using Valgrind-3.16.0 and LibVEX; rerun with -h for copyright info; ==774799== Command: python breaks.py; ==774799== ; 0; 0.9989327176093981; -0.43476438941434026; 0.7817962561955079; 0; 0.9989327176093981; ==774799== Invalid read of size 8; ==774799== at 0x13851E15: ??? (in /usr/lib64/root/libcppyy3_8.so.6.22.02); ==774799== by 0x4B9AD26: _PyObject_GenericGetAttrWithDict (in /usr/lib64/libpython3.8.so.1.0); ==774799== by 0x4B8E712: _PyEval_EvalFrameDefault (in /usr/lib64/libpython3.8.so.1.0); ==774799== by 0x4B8CD53: _PyEval_Eval",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6468:4264,access,access,4264,https://root.cern,https://github.com/root-project/root/issues/6468,1,['access'],['access']
Security,: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/build/rmkdepend/include.c:289; /opt/root_src/build/rmkdepend/include.c:292:10: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/build/rmkdepend/include.c:292; /opt/root_src/build/rmkdepend/include.c:294:10: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/build/rmkdepend/include.c:294; /opt/root_src/build/rmkdepend/include.c:318:10: warning: Call to function 'sprintf' is insecure as i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7410:3157,secur,security,3157,https://root.cern,https://github.com/root-project/root/issues/7410,1,['secur'],['security']
Security,: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/build/rmkdepend/include.c:292; /opt/root_src/build/rmkdepend/include.c:294:10: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/build/rmkdepend/include.c:294; /opt/root_src/build/rmkdepend/include.c:318:10: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/build/rmkdepend/include.c:318; /opt/root_src/build/rmkdepend/main,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7410:3809,secur,security,3809,https://root.cern,https://github.com/root-project/root/issues/7410,1,['secur'],['security']
Security,: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 12: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:166; 13: Null pointer value stored to 'i' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:167; 14: Control jumps to 'case kIsEnum:' at line 171 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:169; 15: Control jumps to 'case kChar_t:' at line 174 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:172; 16: Access to field 's_char' results in a dereference of a null pointer (loaded from variable 'i') in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:174; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:175:35: warning: Access to field 's_short' results in a dereference of a null pointer (loaded from variable 'i') [clang-analyzer-core.NullDereference]; 1: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is non-null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 3: '?' condition is true in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 6: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/ro,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:49153,Access,Access,49153,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security,: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 12: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:166; 13: Null pointer value stored to 'i' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:167; 14: Control jumps to 'case kIsEnum:' at line 171 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:169; 15: Control jumps to 'case kFloat_t:' at line 179 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:172; 16: Access to field 'flt' results in a dereference of a null pointer (loaded from variable 'i') in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:179; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:180:41: warning: Access to field 'flt' results in a dereference of a null pointer (loaded from variable 'i') [clang-analyzer-core.NullDereference]; 1: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is non-null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 3: '?' condition is true in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 6: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_sr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:57636,Access,Access,57636,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security,: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 12: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:166; 13: Null pointer value stored to 'i' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:167; 14: Control jumps to 'case kIsEnum:' at line 171 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:169; 15: Control jumps to 'case kLong_t:' at line 177 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:172; 16: Access to field 's_long' results in a dereference of a null pointer (loaded from variable 'i') in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:177; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:178:35: warning: Access to field 's_longlong' results in a dereference of a null pointer (loaded from variable 'i') [clang-analyzer-core.NullDereference]; 1: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is non-null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 3: '?' condition is true in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 6: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:54238,Access,Access,54238,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security,: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 10: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:165; 12: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:166; 13: Null pointer value stored to 'i' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:167; 14: Control jumps to 'case kIsEnum:' at line 171 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:169; 15: Control jumps to 'case kUInt_t:' at line 184 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:172; 16: Access to field 'u_int' results in a dereference of a null pointer (loaded from variable 'i') in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:184; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:185:35: warning: Access to field 'u_long' results in a dereference of a null pointer (loaded from variable 'i') [clang-analyzer-core.NullDereference]; 1: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is non-null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 3: '?' condition is true in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:251; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:253; 6: Calling 'TEmulatedMapProxy::WriteMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:254; 7: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:159; 8: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:163; 9: Loop condition is true. Entering loop body in /opt/roo,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:66105,Access,Access,66105,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Access'],['Access']
Security,: Calling 'copy' in /opt/root_src/build/rmkdepend/main.c:659; 19: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/build/rmkdepend/main.c:567; /opt/root_src/build/rmkdepend/main.c:569:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/build/rmkdepend/main.c:569; /opt/root_src/build/rmkdepend/main.c:716:7: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/build/rmkdepend/main.c:716; /opt/root_src/build/rmkdepend/main.c:749:7: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: 'makefile' initialized to a null pointer value in /opt/root_src/build/rmkdepend/main.c:161; 2: Loop condition is false. Execution continues on line 176 in /opt/root_src/build/rmkdepend/main.c:172; 3: Assuming 'argc' is not equal to 2 in /opt/root_src/build/rmkdepend/main.c:176; 4: Left side of '&&' is false in /opt/root_src/build/rmkdepend/main.c:176; 5: Loop condition is false. Execution continues on,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7410:35633,secur,security,35633,https://root.cern,https://github.com/root-project/root/issues/7410,1,['secur'],['security']
Security,: expanded from macro 'IGNORE_UNUSED_RESULT' in /opt/root_src/net/http/civetweb/civetweb.c:226; /opt/root_src/net/http/civetweb/civetweb.c:3878:5: warning: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3878; /opt/root_src/net/http/civetweb/civetweb.c:3937:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/net/http/civetweb/civetweb.c:3937; /opt/root_src/net/http/civetweb/civetweb.c:5799:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:26097,secur,security,26097,https://root.cern,https://github.com/root-project/root/issues/7528,1,['secur'],['security']
Security,: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1166; /opt/root_src/builtins/lz4/lz4frame.c:1336:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1336; /opt/root_src/builtins/lz4/lz4frame.c:1346:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1346; /opt/root_src/builtins/lz4/lz4frame.c:1349:9: warning: Call to function 'memcpy' is insecure as it does not ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:41763,secur,security,41763,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1346; /opt/root_src/builtins/lz4/lz4frame.c:1349:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1349; /opt/root_src/builtins/lz4/lz4frame.c:1349:9: warning: Null pointer passed to 2nd parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: 'dstStart' initialized here in /opt/root_src/builtins/lz4/lz4frame.c:1393; 2: Assuming 'dstStart' is null in /opt/root_src/builtins/lz4/lz4frame.c:1394; 3: '?' condition is false in /opt/root_src/builtins/lz4/lz4frame.c:1394; 4: 'dstPtr' initialized to a null pointer value in /opt/root_src/builtins/lz4/lz4frame.c:1395; 5: 'dstBuffer' is equal to NULL in /opt/root_src/builtins/lz4/lz4frame.c:1403; 6: Taking true branch in /opt/root_src/builtins/lz4/lz4frame.c:1403; 7: Assuming 'decompressOptionsPtr' is not equal to NULL in /opt/root_src/builtins/lz4/lz4frame.c:1405; 8: Taking false branch i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:43054,secur,security,43054,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1357; /opt/root_src/builtins/lz4/lz4frame.c:1358:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1358; /opt/root_src/builtins/lz4/lz4frame.c:1358:9: warning: Null pointer passed to 2nd parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: 'dstStart' initialized here in /opt/root_src/builtins/lz4/lz4frame.c:1393; 2: Assuming 'dstStart' is null in /opt/root_src/builtins/lz4/lz4frame.c:1394; 3: '?' condition is false in /opt/root_src/builtins/lz4/lz4frame.c:1394; 4: 'dstPtr' initialized to a null pointer value in /opt/root_src/builtins/lz4/lz4frame.c:1395; 5: 'dstBuffer' is equal to NULL in /opt/root_src/builtins/lz4/lz4frame.c:1403; 6: Taking true branch in /opt/root_src/builtins/lz4/lz4frame.c:1403; 7: Assuming 'decompressOptionsPtr' is not equal to NULL in /opt/root_src/builtins/lz4/lz4frame.c:1405; 8: Taking false branch i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:48407,secur,security,48407,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/core/clib/src/attach.c:147; /opt/root_src/core/clib/src/attach.c:186:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/attach.c:186; /opt/root_src/core/clib/src/mcalloc.c:39:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/mcalloc.c:39; /opt/root_src/core/clib/src/mmalloc.c:74:3: warning: Call to function 'memset' is insecure as it does not provide s,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:24624,secur,security,24624,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,":. You might have heard that we’ve integrated LGTM’s underlying CodeQL analysis engine natively into GitHub. The result is [**GitHub code scanning**](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)!. With LGTM fully integrated into code scanning, we are focused on improving CodeQL within the native GitHub code scanning experience. In order to take advantage of current and future improvements to our analysis capabilities, we suggest you enable code scanning on your repository. Please take a look at our [blog post for more information](https://github.blog/2022-08-15-the-next-step-for-lgtm-com-github-code-scanning/). This pull request enables code scanning by adding an auto-generated [`codeql.yml` workflow file for GitHub Actions](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/setting-up-code-scanning-for-a-repository#setting-up-code-scanning-manually) to your repository — take a look! We tested it before opening this pull request, so all should be working :heavy_check_mark:. In fact, you might already have seen some alerts appear on this pull request!. Where needed and if possible, we’ve adjusted the configuration to the needs of your particular repository. But of course, you should feel free to tweak it further! Check [this page](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#editing-a-code-scanning-workflow) for detailed documentation. Questions? Check out the FAQ below!. ### FAQ; <details>; <summary>Click here to expand the FAQ section</summary>. #### How often will the code scanning analysis run?; By default, code scanning will trigger a scan with the CodeQL engine on the following events:; * On every pull request — to flag up potential security problems for you to investigate before merging a PR.; * On ever",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11808:962,secur,security,962,https://root.cern,https://github.com/root-project/root/pull/11808,1,['secur'],['security']
Security,:1171; 44: 'gFirstTextItem' is not equal to null in /opt/root_src/graf2d/x11/src/Rotated.cxx:1198; 45: Taking false branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:1198; 46: Access to field 'fNext' results in a dereference of a null pointer (loaded from variable 'last') in /opt/root_src/graf2d/x11/src/Rotated.cxx:1205; /opt/root_src/graf2d/x11/src/TGX11.cxx:2280:4: warning: Maybe you meant to call TVirtualX::SetLineColor() instead [clazy-skipped-base-method]; /opt/root_src/graf2d/x11/src/TGX11.cxx:2385:4: warning: Maybe you meant to call TVirtualX::SetMarkerColor() instead [clazy-skipped-base-method]; /opt/root_src/graf2d/x11/src/TGX11.cxx:3119:4: warning: Maybe you meant to call TVirtualX::SetTextAlign() instead [clazy-skipped-base-method]; /opt/root_src/graf2d/x11/src/TGX11.cxx:3129:4: warning: Maybe you meant to call TVirtualX::SetTextColor() instead [clazy-skipped-base-method]; /opt/root_src/graf2d/x11/src/gifencode.c:246:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/graf2d/x11/src/gifencode.c:246; /opt/root_src/graf2d/x11ttf/src/TGX11TTF.cxx:150:1: warning: non-POD static (TTFX11Init) [clazy-non-pod-global-static]; /opt/root_src/graf2d/asimage/src/TASImage.cxx; /opt/root_src/graf2d/gpad/src/TButton.cxx; /opt/root_src/graf2d/gpad/src/TCanvas.cxx; /opt/root_src/graf2d/gpad/src/TCreatePrimitives.cxx; /opt/root_src/graf2d/gpad/src/TGroupButton.cxx; /opt/root_src/graf2d/gpad/src/TPad.cxx; /opt/root_src/graf2d/gpadv7/src/RColor.cxx; /opt/root_src/g,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7432:96339,secur,security,96339,https://root.cern,https://github.com/root-project/root/issues/7432,1,['secur'],['security']
Security,":12: warning: Although the value stored to 'gnorm' is used in the enclosing expression, the value is never actually read from 'gnorm' [clang-analyzer-deadcode.DeadStores]; 1: Although the value stored to 'gnorm' is used in the enclosing expression, the value is never actually read from 'gnorm' in /opt/root_src/core/base/src/TColor.cxx:1611; /opt/root_src/core/base/src/TColor.cxx:1611:20: warning: Although the value stored to 'bnorm' is used in the enclosing expression, the value is never actually read from 'bnorm' [clang-analyzer-deadcode.DeadStores]; 1: Although the value stored to 'bnorm' is used in the enclosing expression, the value is never actually read from 'bnorm' in /opt/root_src/core/base/src/TColor.cxx:1611; /opt/root_src/core/base/src/TDatime.cxx:141:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/base/src/TDatime.cxx:141; /opt/root_src/core/base/src/TDirectory.cxx:1071:20: warning: Value stored to 'newdir' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'newdir' is never read in /opt/root_src/core/base/src/TDirectory.cxx:1071; /opt/root_src/core/base/src/TDirectory.cxx:1246:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that s",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7412:105414,secur,security,105414,https://root.cern,https://github.com/root-project/root/issues/7412,1,['secur'],['security']
Security,:17: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2038; /opt/root_src/builtins/lz4/lz4.c:2083:21: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2083; /opt/root_src/builtins/lz4/lz4.c:2089:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'LZ4_memcpy' in /opt/root_src/builtins/lz4/lz4.c:320; 2: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4.c:2089; 3: expanded from macro 'LZ4_memcpy' in /opt/r,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:26909,secur,security,26909,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,":1818; 68: expanded from macro 'isdigit' in /usr/include/ctype.h:192; 69: expanded from macro '__isctype' in /usr/include/ctype.h:89; 70: Taking false branch in /opt/root_src/core/clib/src/Demangle.c:1818; 71: Returning the value 1, which participates in a condition later in /opt/root_src/core/clib/src/Demangle.c:1836; 72: Returning from 'get_count' in /opt/root_src/core/clib/src/Demangle.c:1904; 73: Left side of '||' is false in /opt/root_src/core/clib/src/Demangle.c:1904; 74: Assuming 'n' is < field 'ntypes' in /opt/root_src/core/clib/src/Demangle.c:1904; 75: Taking false branch in /opt/root_src/core/clib/src/Demangle.c:1904; 76: Array access (via field 'typevec') results in a null pointer dereference in /opt/root_src/core/clib/src/Demangle.c:1910; /opt/root_src/core/clib/src/Demangle.c:2264:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/Demangle.c:2264; /opt/root_src/core/clib/src/Demangle.c:2683:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case o",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:19986,secur,security,19986,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/attach.c:146; /opt/root_src/core/clib/src/attach.c:147:3: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 in /opt/root_src/core/clib/src/attach.c:147; /opt/root_src/core/clib/src/attach.c:186:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/attach.c:186; /opt/root_src/core/clib/src/mcalloc.c:39:7: warning: Call to function 'memset' is insecure as it does not provide ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:23982,secur,security,23982,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,":402; 10: Returning pointer (loaded from 'method'), which participates in a condition later in /opt/root_src/tmva/tmva/src/Reader.cxx:424; 11: Returning pointer (loaded from 'method') in /opt/root_src/tmva/tmva/src/Reader.cxx:424; 12: Returning from 'Reader::BookMVA' in /opt/root_src/tmva/tmva/src/Reader.cxx:378; 13: 'method' initialized here in /opt/root_src/tmva/tmva/src/Reader.cxx:378; 14: 'method' is non-null in /opt/root_src/tmva/tmva/src/Reader.cxx:380; 15: Left side of '&&' is true in /opt/root_src/tmva/tmva/src/Reader.cxx:380; 16: Assuming the condition is true in /opt/root_src/tmva/tmva/src/Reader.cxx:380; 17: Taking true branch in /opt/root_src/tmva/tmva/src/Reader.cxx:380; 18: 'methCat' initialized to a null pointer value in /opt/root_src/tmva/tmva/src/Reader.cxx:381; 19: 'methCat' is null in /opt/root_src/tmva/tmva/src/Reader.cxx:382; 20: Taking true branch in /opt/root_src/tmva/tmva/src/Reader.cxx:382; 21: Access to field 'fDataSetManager' results in a dereference of a null pointer (loaded from variable 'methCat') in /opt/root_src/tmva/tmva/src/Reader.cxx:384; /opt/root_src/tmva/tmva/src/Reader.cxx:406:32: warning: Access to field 'fDataSetManager' results in a dereference of a null pointer (loaded from variable 'methCat') [clang-analyzer-core.NullDereference]; 1: Assuming the condition is false in /opt/root_src/tmva/tmva/src/Reader.cxx:371; 2: Taking false branch in /opt/root_src/tmva/tmva/src/Reader.cxx:371; 3: Calling 'Reader::BookMVA' in /opt/root_src/tmva/tmva/src/Reader.cxx:378; 4: 'im' initialized here in /opt/root_src/tmva/tmva/src/Reader.cxx:395; 5: 'method' initialized here in /opt/root_src/tmva/tmva/src/Reader.cxx:398; 6: Assuming 'method' is not equal to null in /opt/root_src/tmva/tmva/src/Reader.cxx:400; 7: Taking false branch in /opt/root_src/tmva/tmva/src/Reader.cxx:400; 8: Assuming the condition is true in /opt/root_src/tmva/tmva/src/Reader.cxx:402; 9: Taking true branch in /opt/root_src/tmva/tmva/src/Reader.cxx:402; 10: 'methCat' initial",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:111749,Access,Access,111749,https://root.cern,https://github.com/root-project/root/issues/7526,1,['Access'],['Access']
Security,:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/zip/src/ZDeflate.c:254; /opt/root_src/core/zip/src/ZDeflate.c:519:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/zip/src/ZDeflate.c:519; /opt/root_src/core/zip/src/ZInflate.c:439:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/zip/src/ZInflate.c:439; /opt/root_src/core/zip/src/ZInflate.c:700:11: warning: Call to function 'memcpy' is insecure as it does not prov,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7427:7165,secur,security,7165,https://root.cern,https://github.com/root-project/root/issues/7427,1,['secur'],['security']
Security,:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1122; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:1166:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1166; /opt/root_src/builtins/lz4/lz4frame.c:1336:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:40998,secur,security,40998,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; 2: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1404; 3: expanded from macro 'MEM_INIT' in /opt/root_src/builtins/lz4/lz4frame.c:83; /opt/root_src/builtins/lz4/lz4frame.c:1434:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/builtins/lz4/lz4frame.c:1434; /opt/root_src/builtins/lz4/lz4frame.c:1490:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7411:53819,secur,security,53819,https://root.cern,https://github.com/root-project/root/issues/7411,1,['secur'],['security']
Security,:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/clib/src/mmalloc.c:115; /opt/root_src/core/clib/src/mmalloc.c:116:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/mmalloc.c:116; /opt/root_src/core/clib/src/mrealloc.c:77:16: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/clib/src/mrealloc.c:77; /opt/root_src/core/clib/src/mrealloc.c:120:16: warning: Call to function 'memmove' is insecure as it does not p,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422:27191,secur,security,27191,https://root.cern,https://github.com/root-project/root/issues/7422,1,['secur'],['security']
Security,:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/zip/src/ZDeflate.c:519; /opt/root_src/core/zip/src/ZInflate.c:439:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 in /opt/root_src/core/zip/src/ZInflate.c:439; /opt/root_src/core/zip/src/ZInflate.c:700:11: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]; 1: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 in /opt/root_src/core/zip/src/ZInflate.c:700; /opt/root_src/core/zip/src/ZInflate.c:707:27: warning: Assigned value is garbage or undefined [clang-analyzer-c,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7427:7808,secur,security,7808,https://root.cern,https://github.com/root-project/root/issues/7427,1,['secur'],['security']
Security,"::ActOnStartOfFunctionDef(clang::Scope*, clang::Declarator&, llvm::MutableArrayRef<clang::TemplateParameterList*>, clang::Sema::SkipBodyInfo*) () from /cvmfs/cms-ib.cern.ch/week1/slc7_amd64_gcc900/cms/cmssw-patch/CMSSW_11_3_ROOT6_X_2021-01-24-2300/external/slc7_amd64_gcc900/lib/libCling.so; #14 0x00002b8fcf5e98cb in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /cvmfs/cms-ib.cern.ch/week1/slc7_amd64_gcc900/cms/cmssw-patch/CMSSW_11_3_ROOT6_X_2021-01-24-2300/external/slc7_amd64_gcc900/lib/libCling.so; #15 0x00002b8fcf566f2e in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, unsigned int, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /cvmfs/cms-ib.cern.ch/week1/slc7_amd64_gcc900/cms/cmssw-patch/CMSSW_11_3_ROOT6_X_2021-01-24-2300/external/slc7_amd64_gcc900/lib/libCling.so; #16 0x00002b8fcf5e5fa1 in clang::Parser::ParseDeclOrFunctionDefInternal(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec&, clang::AccessSpecifier) () from /cvmfs/cms-ib.cern.ch/week1/slc7_amd64_gcc900/cms/cmssw-patch/CMSSW_11_3_ROOT6_X_2021-01-24-2300/external/slc7_amd64_gcc900/lib/libCling.so; #17 0x00002b8fcf5ec950 in clang::Parser::ParseExternalDeclaration(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /cvmfs/cms-ib.cern.ch/week1/slc7_amd64_gcc900/cms/cmssw-patch/CMSSW_11_3_ROOT6_X_2021-01-24-2300/external/slc7_amd64_gcc900/lib/libCling.so; #18 0x00002b8fcf57b004 in clang::Parser::ParseLinkage(clang::ParsingDeclSpec&, unsigned int) () from /cvmfs/cms-ib.cern.ch/week1/slc7_amd64_gcc900/cms/cmssw-patch/CMSSW_11_3_ROOT6_X_2021-01-24-2300/external/slc7_amd64_gcc900/lib/libCling.so; #19 0x00002b8fcf5e611e in clang::Parser::ParseDeclOrFunctionDefInternal(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec&, clang::AccessSpecifier) () from /cvmfs/cms-ib.cern.ch/week1/slc7_amd64_gcc900/cms/cmssw-patch/CMSSW_11_3_ROOT6_X_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7093:7231,Access,AccessSpecifier,7231,https://root.cern,https://github.com/root-project/root/issues/7093,1,['Access'],['AccessSpecifier']
Security,":Hessian; from GeneralHessianCalc<T>::IsAvailable(fFunc); from WrappedMultiTF1Templ<T>::HasParameterHessian(); from BasicFCNL::HasHessian; from ROOT::Fit::Fitter::DoInitMinimizer; ```. Note: The tutorials seems unrelated to Clad. ### Reproducer. disabled and run `ctest -R tutorial-fit-exampleFit3D`. With clad disabled, we get:; ```; Command: ""/Applications/CMake.app/Contents/bin/cmake"" ""-DCMD=/Users/pcanal/root_working/builds/master-pr/bin/root.exe^-b^-l^-q^/Users/pcanal/root_working/code/master/tutorials/fit/exampleFit3D.C"" ""-DSYS=/Users/pcanal/root_working/bu; ilds/master-pr"" ""-DENV=PATH=/Users/pcanal/root_working/builds/master-pr/bin::/Library/Frameworks/Python.framework/Versions/3.9/bin:/Library/Frameworks/Python.framework/Versions/3.9/bin:/Library/Frameworks/Python.framework/Versions/3; .8/bin:/Users/pcanal/bin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstra; p/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/opt/podman/bin#DYLD_LIBRARY_PATH=/Users/pcanal/root_working/builds/master-pr/lib:#ROOTSYS=/Users/pcanal/root_working; /builds/master-pr#PYTHONPATH=/Users/pcanal/root_working/builds/master-pr/lib:"" ""-P"" ""/Users/pcanal/root_working/builds/master-pr/RootTestDriver.cmake""; Directory: /Users/pcanal/root_working/builds/master-pr/runtutorials; ""tutorial-fit-exampleFit3D"" start time: Mar 28 16:08 CDT; Output:; ----------------------------------------------------------. Processing /Users/pcanal/root_working/code/master/tutorials/fit/exampleFit3D.C...; In file included from input_line_38:1:; /opt/build/root_builds/master-pr/include/Math/CladDerivator.h:25:10: fatal error: 'plugins/include/clad/Differentiator/Differentiator.h' file not found; #include <plugins/include/clad/Differentiator/Differentiator.h>; ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15091:1784,secur,security,1784,https://root.cern,https://github.com/root-project/root/issues/15091,1,['secur'],['security']
Security,"; +++ b/tree/treeplayer/src/TTreeProcessorMT.cxx; @@ -492,7 +492,8 @@ void TTreeProcessorMT::Process(std::function<void(TTreeReader &)> func); const auto &clusters = clustersAndEntries.first[0];; const auto &entries = clustersAndEntries.second[0];; auto processCluster = [&](const EntryRange &c) {; - auto r = fTreeView->GetTreeReader(c.first, c.second, treeNames, fileNames, fFriendInfo, fEntryList, {entries});; + gDirectory = nullptr; // TDirectory::TContext ctxt(nullptr);; + auto r = fTreeView->GetTreeReader(c.first, c.second, treeNames, fileNames, fFriendInfo, fEntryList, {entries});; func(*r);; };; fPool.Foreach(processCluster, clusters);; ```; Some might require some redesign:; ```; // Avoid spin lock inside GetThisSlotNumber just to get a thread local value ... but is this value; // really the same for the life of the thread ... and if so why is the next bottleneck then in: ROOT::Internal::RSlotStack::ReturnSlot; diff --git a/core/thread/inc/ROOT/TThreadedObject.hxx b/core/thread/inc/ROOT/TThreadedObject.hxx; index b3d73228e3..cff216e67f 100644; --- a/core/thread/inc/ROOT/TThreadedObject.hxx; +++ b/core/thread/inc/ROOT/TThreadedObject.hxx; @@ -279,7 +279,8 @@ namespace ROOT {; /// ~~~; std::shared_ptr<T> Get(); {; - return GetAtSlot(GetThisSlotNumber());; + static thread_local unsigned thisSlotNumber = GetThisSlotNumber();; + return GetAtSlot(thisSlotNumber);; }; ; /// Access the wrapped object and allow to call its methods.; ```; The next bottleneck after that might be:; ```; #5 0x00007ffff01a8c69 in std::unique_lock<std::mutex>::unique_lock (this=0x7ffedfffd910, __m=...) at /usr/include/c++/11/bits/unique_lock.h:69; #6 0x00007ffff01ca1e9 in TClingClassInfo::GetBaseOffset (this=0x555558a126a0, base=0x555555c8b500, address=0x0, isDerivedObject=true) at /home/pcanal/root_working/code/root/core/metacling/src/TClingClassInfo.cxx:616; ```. Note: that those in themselves are not sufficient to improve performance (which could also be bottlenecked by the posix system).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12761:4103,Access,Access,4103,https://root.cern,https://github.com/root-project/root/issues/12761,1,['Access'],['Access']
Security,; 17: Value assigned to 'h1' in /opt/root_src/tmva/tmva/src/PDEFoamDiscriminant.cxx:199; 18: Assuming 'h1' is null in /opt/root_src/tmva/tmva/src/PDEFoamDiscriminant.cxx:201; 19: Taking true branch in /opt/root_src/tmva/tmva/src/PDEFoamDiscriminant.cxx:201; 20: Assuming 'cell_value' is not equal to kValue in /opt/root_src/tmva/tmva/src/PDEFoamDiscriminant.cxx:202; 21: Taking false branch in /opt/root_src/tmva/tmva/src/PDEFoamDiscriminant.cxx:202; 22: Called C++ object pointer is null in /opt/root_src/tmva/tmva/src/PDEFoamDiscriminant.cxx:208; /opt/root_src/tmva/tmva/src/PDEFoamKernelGauss.cxx:86:36: warning: Access to field 'fLastCe' results in a dereference of a null pointer (loaded from variable 'foam') [clang-analyzer-core.NullDereference]; 1: Assuming 'foam' is equal to NULL in /opt/root_src/tmva/tmva/src/PDEFoamKernelGauss.cxx:81; 2: Taking true branch in /opt/root_src/tmva/tmva/src/PDEFoamKernelGauss.cxx:81; 3: Access to field 'fLastCe' results in a dereference of a null pointer (loaded from variable 'foam') in /opt/root_src/tmva/tmva/src/PDEFoamKernelGauss.cxx:86; /opt/root_src/tmva/tmva/src/PDEFoamKernelLinN.cxx:112:31: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Assuming 'foam' is equal to NULL in /opt/root_src/tmva/tmva/src/PDEFoamKernelLinN.cxx:79; 2: Taking true branch in /opt/root_src/tmva/tmva/src/PDEFoamKernelLinN.cxx:79; 3: Passing null pointer value via 1st parameter 'foam' in /opt/root_src/tmva/tmva/src/PDEFoamKernelLinN.cxx:82; 4: Calling 'PDEFoamKernelLinN::WeightLinNeighbors' in /opt/root_src/tmva/tmva/src/PDEFoamKernelLinN.cxx:82; 5: Called C++ object pointer is null in /opt/root_src/tmva/tmva/src/PDEFoamKernelLinN.cxx:112; /opt/root_src/tmva/tmva/src/PDEFoamKernelTrivial.cxx:80:30: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Assuming 'foam' is equal to NULL in /opt/root_src/tmva/tmva/src/PDEFoamKernelTrivial.cxx:77; 2: Taking true branch in /opt/root_src/tmva/tmva/,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:108223,Access,Access,108223,https://root.cern,https://github.com/root-project/root/issues/7526,1,['Access'],['Access']
Security,; 21: Calling 'TDirectory::Delete' in /opt/root_src/core/base/src/TDirectory.cxx:1184; 22: Assuming 'gDebug' is not equal to 0 in /opt/root_src/core/base/src/TDirectory.cxx:662; 23: Taking true branch in /opt/root_src/core/base/src/TDirectory.cxx:662; 24: Assuming 'namecycle' is null in /opt/root_src/core/base/src/TDirectory.cxx:664; 25: '?' condition is false in /opt/root_src/core/base/src/TDirectory.cxx:664; 26: Passing null pointer value via 1st parameter 'buffer' in /opt/root_src/core/base/src/TDirectory.cxx:669; 27: Calling 'TDirectory::DecodeNameCycle' in /opt/root_src/core/base/src/TDirectory.cxx:669; 28: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/core/base/src/TDirectory.cxx:1260; /opt/root_src/core/base/src/TFolder.cxx:331:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/core/base/src/TFolder.cxx:331; /opt/root_src/core/base/src/TPRegexp.cxx:416:10: warning: Value stored to 'nrMatch' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'nrMatch' is never read in /opt/root_src/core/base/src/TPRegexp.cxx:416; /opt/root_src/core/base/src/TQConnection.cxx:115:16: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that sup,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7412:109329,secur,security,109329,https://root.cern,https://github.com/root-project/root/issues/7412,1,['secur'],['security']
Security,; 7: Assuming field 'fSplitter' is equal to null in /opt/root_src/gui/gui/src/TGSplitFrame.cxx:455; 8: Left side of '||' is false in /opt/root_src/gui/gui/src/TGSplitFrame.cxx:455; 9: Assuming field 'fFirst' is equal to null in /opt/root_src/gui/gui/src/TGSplitFrame.cxx:455; 10: Left side of '||' is false in /opt/root_src/gui/gui/src/TGSplitFrame.cxx:455; 11: Assuming field 'fSecond' is equal to null in /opt/root_src/gui/gui/src/TGSplitFrame.cxx:455; 12: Left side of '||' is false in /opt/root_src/gui/gui/src/TGSplitFrame.cxx:455; 13: Field 'fFrame' is equal to null in /opt/root_src/gui/gui/src/TGSplitFrame.cxx:455; 14: Taking false branch in /opt/root_src/gui/gui/src/TGSplitFrame.cxx:455; 15: 'w' is <= 0 in /opt/root_src/gui/gui/src/TGSplitFrame.cxx:457; 16: '?' condition is false in /opt/root_src/gui/gui/src/TGSplitFrame.cxx:457; 17: Calling default constructor for 'TGSplitFrame' in /opt/root_src/gui/gui/src/TGSplitFrame.cxx:461; 18: Access to field 'fSplitTool' results in a dereference of a null pointer in /opt/root_src/gui/gui/src/TGSplitFrame.cxx:260; /opt/root_src/gui/gui/src/TGTable.cxx:1387:10: warning: Value stored to 'ncolumns' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'ncolumns' is never read in /opt/root_src/gui/gui/src/TGTable.cxx:1387; /opt/root_src/gui/gui/src/TGTable.cxx:1399:10: warning: Value stored to 'nrows' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'nrows' is never read in /opt/root_src/gui/gui/src/TGTable.cxx:1399; /opt/root_src/gui/gui/src/TGTable.cxx:1508:4: warning: Value stored to 'pos' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'pos' is never read in /opt/root_src/gui/gui/src/TGTable.cxx:1508; /opt/root_src/gui/gui/src/TGText.cxx:171:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:52367,Access,Access,52367,https://root.cern,https://github.com/root-project/root/issues/7533,1,['Access'],['Access']
Security,"; <!--; A clear and concise description of what the wrong behavior is.; -->. Building master (+ fix for #12151) with `builtin_llvm=OFF` results in this build error:. ```; [5940/8663] /usr/lib/ccache/c++ -I""/<<PKGBUILDDIR>>/core/dictgen/res"" -I""/<<PKGBUILDDIR>>/core/dictgen/src"" -I""/<<PKGBUILDDIR>>/core/foundation/res"" -I""/<<PKGBUILDDIR>>/core/clingutils/res"" -I""/<<PKGBUILDDIR>>/core/base/inc"" -I""/<<PKGBUILDDIR>>/core/clib/inc"" -I""/<<PKGBUILDDIR>>/core/meta/inc"" -I""/<<PKGBUILDDIR>>/core/foundation/inc"" -I""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/ginclude"" -I""/<<PKGBUILDDIR>>/interpreter/cling/include"" -isystem ""/<<PKGBUILDDIR>>/interpreter/llvm/src/tools/clang/include"" -isystem ""/<<PKGBUILDDIR>>/obj-x86_64-linux-gnu/interpreter/llvm/src/tools/clang/include"" -isystem /usr/lib/llvm-13/include -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fPIC -fvisibility-inlines-hidden -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -std=c++17 -fno-rtti -MD -MT core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -MF core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o.d -o core/dictgen/CMakeFiles/Dictgen.dir/src/rootcling_impl.cxx.o -c '/<<PKGBUILDDIR>>/core/dictgen/src/rootcling_impl.cxx'; <<snip>>; [6107/8663] : && /usr/lib/ccache/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fdiagnostics-color=always -std=",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12152:1272,secur,security,1272,https://root.cern,https://github.com/root-project/root/issues/12152,1,['secur'],['security']
Security,"<>(char const*, int) (TQObject.h:137). This conflicts with a previous write of size 4 by thread #3; Locks held: 1, at address 0x167C9B50; at 0x52005E4: TOrdCollection::AddAt(TObject*, int) (TOrdCollection.cxx:70); by 0x5200785: TOrdCollection::AddLast(TObject*) (TOrdCollection.cxx:102); by 0x5201C2D: TSeqCollection::Add(TObject*) (TSeqCollection.h:38); by 0x519E68B: TSystem::AddTimer(TTimer*) (TSystem.cxx:476); by 0x52CDC32: TUnixSystem::AddTimer(TTimer*) (TUnixSystem.cxx:2974); by 0x64AC1E3: TThreadTimer::TThreadTimer(long) (TThread.cxx:1200); by 0x64AB943: TThread::XARequest(char const*, int, void**, int*) (TThread.cxx:1037); by 0x64AB448: TThread::Printf(char const*, ...) (TThread.cxx:950); ```. 1); ```; TThread::XARequest(char const*, int, void**, int*) (TThread.cxx:1058); TThreadTimer::Notify() (TThread.cxx:1208); ```; ![image](https://user-images.githubusercontent.com/10653970/121098991-0584b500-c7c5-11eb-8a4a-2c07f74d1486.png). --> TThread::fgXact is accessed unprotected, it could have been changed at the same time by XARequest:. ![image](https://user-images.githubusercontent.com/10653970/121099097-3664ea00-c7c5-11eb-86e7-41daed97a959.png). 2); ```; TApplication::IsRunning() const (TApplication.h:148); TThread::XARequest(char const*, int, void**, int*) (TThread.cxx:1029); This conflicts with a previous write of size 1 by thread #1; TApplication::Run(bool) (TApplication.cxx:1622); ```; ![image](https://user-images.githubusercontent.com/10653970/121100197-4f6e9a80-c7c7-11eb-883b-0f7aec2059d2.png); ![image](https://user-images.githubusercontent.com/10653970/121100214-58f80280-c7c7-11eb-80b8-cdbc68dd1efe.png). 3); ```; Possible data race during read of size 4 at 0x7F25098 by thread #3; Locks held: 1, at address 0x167C9B50; TCollection::GetSize() const (TCollection.h:182); TOrdCollectionIter::Next() (TOrdCollection.cxx:506); TIter::Next() (TCollection.h:249); TIter::operator()() (TCollection.h:248); TCollection::FindObject(TObject const*) const (TCollection.cxx:34",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8365:2037,access,accessed,2037,https://root.cern,https://github.com/root-project/root/issues/8365,1,['access'],['accessed']
Security,"<G__G__ANALYSIS_215_0_109(G__value*, char const*, G__param*, int)>, result7=result7; entry=0x7ffcac8c2c90, funcname=funcname; entry=0x249df80 """", libp=libp; entry=0x7ffcac8c2cd0, hash=hash; entry=0) at /home/gnp78160/alice/sw/SOURCES/ROOT/v5-34-30-alice10/v5-34-30-alice10/cint/cint/src/Api.cxx:393; #10 0x00007fba3322b094 in G__execute_call (result7=result7; entry=0x7ffcac8c2c90, libp=libp; entry=0x7ffcac8c2cd0, ifunc=ifunc; entry=0x249df80, ifn=ifn; entry=0) at /home/gnp78160/alice/sw/SOURCES/ROOT/v5-34-30-alice10/v5-34-30-alice10/cint/cint/src/newlink.cxx:2408; #11 0x00007fba3322b38b in G__call_cppfunc (result7=result7; entry=0x7ffcac8c2c90, libp=libp; entry=0x7ffcac8c2cd0, ifunc=ifunc; entry=0x249df80, ifn=ifn; entry=0) at /home/gnp78160/alice/sw/SOURCES/ROOT/v5-34-30-alice10/v5-34-30-alice10/cint/cint/src/newlink.cxx:2612; #12 0x00007fba33212c9f in G__interpret_func (result7=result7; entry=0x7ffcac8c2c90, funcname=0xfa4210 ""InitAnalysis"", libp=libp; entry=0x7ffcac8c2cd0, hash=1240, p_ifunc=0x249df80, funcmatch=funcmatch; entry=1, memfunc_flag=<optimized out>) at /home/gnp78160/alice/sw/SOURCES/ROOT/v5-34-30-alice10/v5-34-30-alice10/cint/cint/src/ifunc.cxx:5791; #13 0x00007fba33204f55 in G__getfunction (item=item; entry=0xe73375 ""InitAnalysis()"", known3=known3; entry=0x7ffcac8ce1a4, memfunc_flag=<optimized out>, memfunc_flag; entry=1) at /home/gnp78160/alice/sw/SOURCES/ROOT/v5-34-30-alice10/v5-34-30-alice10/cint/cint/src/func.cxx:2660; #14 0x00007fba332cc07c in G__getstructmem (store_var_type=store_var_type; entry=112, varname=..., membername=membername; entry=0xe73375 ""InitAnalysis()"", memnamesize=memnamesize; entry=2147483647, tagname=tagname; entry=0xfa35e0 ""mgr"", known2=0x7ffcac8ce1a4, varglobal=0x7fba33a89180 <G__global>, objptr=2) at /home/gnp78160/alice/sw/SOURCES/ROOT/v5-34-30-alice10/v5-34-30-alice10/cint/cint/src/var.cxx:6821; #15 0x00007fba332c51b5 in G__getvariable (item=item; entry=0xe73370 ""mgr->InitAnalysis()"", known=known; entry=0x7ffcac8ce1a4, varg",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6977:3123,hash,hash,3123,https://root.cern,https://github.com/root-project/root/issues/6977,1,['hash'],['hash']
Security,"<https://bugs.gentoo.org/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>. For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from bin/root.exe...; (gdb) break f; Function ""f"" not defined.; Make breakpoint pending on future shared library load? (y or [n]) y; Breakpoint 1 (f) pending.; (gdb) run; Starting program: /srv/root/build/bin/root.exe ; warning: File ""/srv/root/build/lib/libCore.so-gdb.py"" auto-loading has been declined by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; 	add-auto-load-safe-path /srv/root/build/lib/libCore.so-gdb.py; line to your configuration file ""/home/amadio/.config/gdb/gdbinit"".; To completely disable this security protection add; 	set auto-load safe-path /; line to your configuration file ""/home/amadio/.config/gdb/gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; 	info ""(gdb)Auto-loading safe path""; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/usr/lib64/libthread_db.so.1"".; [Detaching after vfork from child process 798483]; [Detaching after vfork from child process 800084]; [Detaching after vfork from child process 800087]; ------------------------------------------------------------------; | Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Dec 13 2022, 14:33:20 |; | From heads/cling-profile-debug@v6-25-02-3189-gf5fced388b |; | With c++ (Gentoo 12.2.1_p20221203 p3) 12.2.1 20221203 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. [Detaching after vfork from child process 800350]; root [0] double f(double x) { return x*x; }; root [1] double y = ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11882:1836,secur,security,1836,https://root.cern,https://github.com/root-project/root/pull/11882,1,['secur'],['security']
Security,"=0x7ffdb628f800, callable=0x7faf298dbaf0); at /data/hdd-4tb/projects/ATLASG-1602/externals/build/AnalysisBaseExternals/src/Python/Include/cpython/abstract.h:127; #37 method_vectorcall (method=<optimized out>, args=<optimized out>, nargsf=<optimized out>, kwnames=0x0); at /data/hdd-4tb/projects/ATLASG-1602/externals/build/AnalysisBaseExternals/src/Python/Objects/classobject.c:89; #38 0x00007faf4b42df36 in _PyObject_Vectorcall (kwnames=0x0, nargsf=1, args=0x7ffdb628f890, callable=0x7faf4b960e80); at /data/hdd-4tb/projects/ATLASG-1602/externals/build/AnalysisBaseExternals/src/Python/Include/cpython/abstract.h:127; #39 _PyObject_FastCall (nargs=1, args=0x7ffdb628f890, func=0x7faf4b960e80); at /data/hdd-4tb/projects/ATLASG-1602/externals/build/AnalysisBaseExternals/src/Python/Include/cpython/abstract.h:147; ...; ```. Unfortunately all I could decipher from this is that things go south while accessing the `DataVector<xAOD::TauJet_v3>` type in Python. That access itself happens in a fairly complicated way itself, in this helper code:. https://gitlab.cern.ch/atlas/athena/-/blob/master/Control/xAODRootAccess/python/GenerateDVIterators.py. As before, I found that by explicitly accessing types ""in the right order"", I can work around the issue. (See: https://gitlab.cern.ch/atlas/athena/-/merge_requests/44843) But I'd really like to understand what the underlying issue actually is. Note that this problem only shows up in a debug build. In an optimised build the test in question runs just fine. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. The code should not encounter an assertion inside LLVM/Cling. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. Unfortunately this would be pretty involved to desc",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8578:10922,access,access,10922,https://root.cern,https://github.com/root-project/root/issues/8578,1,['access'],['access']
Security,"> Does the Python translation need to be updated?. Yes, if you have the time.; - It also accesses the global RNGs from an MT context.; - The printing is also done in a loop, and could theoretically go into a function. _Originally posted by @hageboeck in https://github.com/root-project/root/issues/9352#issuecomment-982680071_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9360:89,access,accesses,89,https://root.cern,https://github.com/root-project/root/issues/9360,1,['access'],['accesses']
Security,">Rebuilding TStreamerInfo for class: o2::tpc::CalDet<o2::tpc::PadFlags>, version: 1; [1965517:tpc-tracker]: Creating StreamerInfo for class: o2::tpc::CalDet<o2::tpc::PadFlags>, version: 2; [1965517:tpc-tracker]:; [1965517:tpc-tracker]: StreamerInfo for class: o2::tpc::CalDet<o2::tpc::PadFlags>, version=2, checksum=0x93700773; [1965517:tpc-tracker]: string mName offset= 0 type=300 ,stl=365, ctype=365, name of the object; [1965517:tpc-tracker]: vector<o2::tpc::CalArray<o2::tpc::PadFlags> > mData offset= 32 type=300 ,stl=1, ctype=61, internal CalArrays; [1965517:tpc-tracker]: o2::tpc::PadSubset mPadSubset offset= 56 type= 3 Pad subset granularity; [1965517:tpc-tracker]: i= 0, mName type=300, offset= 0, len=1, method=0; [1965517:tpc-tracker]: i= 1, mData type=300, offset= 32, len=1, method=0; [1965517:tpc-tracker]: i= 2, mPadSubset type= 3, offset= 56, len=1, method=0; [1965517:tpc-tracker]:; [1965517:tpc-tracker]: StreamerInfo for class: o2::tpc::CalDet<o2::tpc::PadFlags>, version=1, checksum=0x93700773; [1965517:tpc-tracker]: string mName offset= 0 type=300 ,stl=365, ctype=365, name of the object; [1965517:tpc-tracker]: vector<o2::tpc::CalArray<o2::tpc::PadFlags> > mData offset= 32 type=300 ,stl=1, ctype=61, internal CalArrays; [1965517:tpc-tracker]: o2::tpc::PadSubset mPadSubset offset= 56 type= 3 Pad subset granularity; [1965517:tpc-tracker]: i= 0, mName type=300, offset= 0, len=1, method=0; [1965517:tpc-tracker]: i= 1, mData type=300, offset= 32, len=1, method=0; [1965517:tpc-tracker]: i= 2, mPadSubset type= 3, offset= 56, len=1, method=0; [1965517:tpc-tracker]:; [1965517:tpc-tracker]: ====>Rebuilding TStreamerInfo for class: o2::tpc::CalArray<o2::tpc::PadFlags>, version: 1; [1965517:tpc-tracker]:; [1965517:tpc-tracker]: StreamerInfo for class: o2::tpc::CalArray<o2::tpc::PadFlags>, version=1, checksum=0xb03d18c2; [1965517:tpc-tracker]: string mName offset= 0 type=300 ,stl=365, ctype=365,; [1965517:tpc-tracker]: vector<o2::tpc::PadFlags> mData offset= 32 type=300 ,st",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16312:1808,checksum,checksum,1808,https://root.cern,https://github.com/root-project/root/issues/16312,1,['checksum'],['checksum']
Security,"A new `RooStringView` is introduced as a copy-free drop-in replacement for `const char*` in public RooFit interfaces, which also accepts a `std::string`. So far, this new `RooStringView` is used in the RooWorkspace accessors, and also in the dataset classes as it's a superior solution over using `std::string` view, which is not guaranteed to be null-terminated and needs specific preprocessor macros for the C++ case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9747:215,access,accessors,215,https://root.cern,https://github.com/root-project/root/pull/9747,1,['access'],['accessors']
Security,"A number of changes, split into multiple commits:; * `RProjectedFields` moves to `Internal` and `GetFieldZero()` is not `const` (plus one fix to take references instead of pointers to `RNTupleModel`). The projected fields of a `RNTupleModel` can be accessed via `Internal::GetProjectedFieldsFromModel()`.; * A new `Internal::GetFieldZeroFromModel()` is used to get the `RFieldZero` also from a frozen model.; * `RNTupleModel::GetFieldZero()` is split into `GetConstFieldZero()`, which can always be called, and `GetMutableFieldZero()`, which is only allowed for unfrozen models.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16714:249,access,accessed,249,https://root.cern,https://github.com/root-project/root/pull/16714,1,['access'],['accessed']
Security,"A recent refactoring in RDF introduced an incompatibility with gcc; 7.5.0: clang and that gcc version disagree on the address of the; std::map argument passed to InitColumnReaders.; RCustomColumn<...>::InitSlot, the _jitted_ caller, sees the correct; address, but InitColumnReaders<...>, the _compiled_ callee, sees a; different address. For reasons known only to gcc 7.5.0, ~~moving the first function; argument to the last position~~ reducing the number of function; arguments (by aggregating some of them in a helper struct) resolves; the ABI incompatibility.; Valgrind could see an access to invalid memory before, and it does; not anymore. This should fix [this crash](https://lcgapp-services.cern.ch/root-jenkins/view/conda/job/conda-nightlies/94/testReport/junit/projectroot.root/dataframe/roottest_root_dataframe_test_snapshot/) in the conda nightly builds and [these test failures](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2614/) in ROOT's nightlies on ubuntu 18.04.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6231:586,access,access,586,https://root.cern,https://github.com/root-project/root/pull/6231,1,['access'],['access']
Security,"A set of, hopefully, non-controversial changes to some roofit classes to allow certain data members to be accessed publicly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12030:106,access,accessed,106,https://root.cern,https://github.com/root-project/root/pull/12030,1,['access'],['accessed']
