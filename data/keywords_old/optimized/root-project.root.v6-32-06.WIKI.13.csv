quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Availability,"e name and member name. The member can be a decimal; number which allows to access the n-th member. Int_t OpenArchive(); Open archive and read end-header and directory. Returns -1 in case; of error, 0 otherwise. Long64_t FindEndHeader(); Find the end header of the ZIP archive. Returns 0 in case of error. Int_t ReadEndHeader(Long64_t pos); Read the end header of the ZIP archive including the archive comment; at the current file position. Check that it really was a single-disk; archive with all the entries as expected. Most importantly, figure; out where the central directory begins. Returns -1 in case of error,; 0 otherwise. Long64_t ReadZip64EndLocator(Long64_t pos); Read Zip64 end of central directory locator. Returns -1 in case of error,; -2 in case end locator magic is not found (i.e. not a zip64 file) and; offset of Zip64 end of central directory record in case of success. Int_t ReadZip64EndRecord(Long64_t pos); Read Zip64 end of central directory record. Returns -1 in case of error; and 0 in case of success. Int_t ReadDirectory(); Read the directory of the ZIP archive. Returns -1 in case of error,; 0 otherwise. Int_t ReadMemberHeader(TZIPMember* member); Read the member header of the ZIP archive. Sets the position where; the data starts in the member object. Returns -1 in case of error,; 0 otherwise. Int_t DecodeZip64ExtendedExtraField(TZIPMember* m, Bool_t global = kTRUE); Decode the Zip64 extended extra field. If global is true, decode the; extra field coming from the central directory, if false decode the; extra field coming from the local file header. Returns -1 in case of; error, -2 in case Zip64 extra block was not found and 0 in case of; success. Int_t SetCurrentMember(); Find the desired member in the member array and make it the; current member. Returns -1 in case member is not found, 0 otherwise. UInt_t Get(const void* buffer, Int_t bytes); Read a ""bytes"" long little-endian integer value from ""buffer"". ULong64_t Get64(const void* buffer, Int_t bytes); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TZIPFile.html:12571,error,error,12571,root/html530/TZIPFile.html,https://root.cern,https://root.cern/root/html530/TZIPFile.html,9,['error'],['error']
Availability,"e name of this curve. void printTitle(ostream& os) const; Print the title of this curve. void printClassName(ostream& os) const; Print the class name of this curve. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print the details of this curve. Double_t chiSquare(const RooHist& hist, int nFitParam) const; Calculate the chi^2/NDOF of this curve with respect to the histogram; 'hist' accounting nFitParam floating parameters in case the curve; was the result of a fit. Double_t average(Double_t lo, Double_t hi) const; Return average curve value in [xFirst,xLast] by integrating curve between points; and dividing by xLast-xFirst. Int_t findPoint(Double_t value, Double_t tolerance = 1.0E-10) const; Find the nearest point to xvalue. Return -1 if distance; exceeds tolerance. Double_t interpolate(Double_t x, Double_t tolerance = 1.0E-10) const; Return linearly interpolated value of curve at xvalue. If distance; to nearest point is less than tolerance, return nearest point value; instead. RooCurve* makeErrorBand(const vector<RooCurve*>& variations, Double_t Z = 1) const; Construct filled RooCurve represented error band that captures alpha% of the variations; of the curves passed through argument variations, where the percentage alpha corresponds to; the central interval fraction of a significance Z. RooCurve* makeErrorBand(const vector<RooCurve*>& plusVar, const vector<RooCurve*>& minusVar, const TMatrixD& V, Double_t Z = 1) const; Construct filled RooCurve represented error band represent the error added in quadrature defined by the curves arguments; plusVar and minusVar corresponding to one-sigma variations of each parameter. The resulting error band, combined used the correlation matrix C; is multiplied with the significance parameter Z to construct the equivalent of a Z sigma error band (in Gaussian approximation). void calcBandInterval(const vector<RooCurve*>& plusVar, const vector<RooCurve*>& minusVar, Int_t i, const T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCurve.html:23720,toler,tolerance,23720,root/html602/RooCurve.html,https://root.cern,https://root.cern/root/html602/RooCurve.html,4,['toler'],['tolerance']
Availability,"e name.Definition TTreeReaderValue.cxx:693; TBranchElementA Branch for the case of an object.Definition TBranchElement.h:39; TBranchA TTree is a list of TBranches.Definition TBranch.h:93; TDictionaryThis class defines an abstract interface that must be implemented by all classes that contain diction...Definition TDictionary.h:168; TLeafA TLeaf describes individual elements of a TBranch See TBranch structure in TTree.Definition TLeaf.h:57; TStringBasic string class.Definition TString.h:139; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:174; TTreeReaderValue::operator->T * operator->()Return a pointer to the value of the current entry.Definition TTreeReaderValue.h:201; TTreeReaderValue::TTreeReaderValueTTreeReaderValue()=delete; TTreeReaderValue::GetT * Get()Return a pointer to the value of the current entry.Definition TTreeReaderValue.h:189; TTreeReaderValue::TTreeReaderValueTTreeReaderValue(TTreeReader &tr, const char *branchname)Definition TTreeReaderValue.h:180; TTreeReaderValue::operator*T & operator*()Return a reference to the value of the current entry.Definition TTreeReaderValue.h:206; TTreeReaderValue::NonConstT_ttypename std::remove_const< T >::type NonConstT_tDefinition TTreeReaderValue.h:178; TTreeReaderValue::GetDerivedTypeNameconst char * GetDerivedTypeName() const overrideGet the template argument as a string.Definition TTreeReaderValue.h:211; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; bool; int; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. treetreeplayerincTTreeReaderValue.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:05 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeReaderValue_8h_source.html:20263,robust,robust,20263,doc/master/TTreeReaderValue_8h_source.html,https://root.cern,https://root.cern/doc/master/TTreeReaderValue_8h_source.html,1,['robust'],['robust']
Availability,"e needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. RooListProxy_coefList; RooRealProxy_x. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooBernstein(). RooBernstein(const char* name, const char* title, RooAbsReal& _x, const RooArgList& _coefList); Constructor. RooBernstein(const RooBernstein& other, const char* name = 0). Double_t evaluate() const. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; No analytical calculation available (yet) of integrals over subranges. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const. TObject* clone(const char* newname) const; { return new RooBernstein(*this, newname); }. virtual ~RooBernstein(); { }. » Last changed: Thu Sep 23 19:58:31 2010 » Last generated: 2010-09-23 19:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooBernstein.html:40584,avail,available,40584,root/html528/RooBernstein.html,https://root.cern,https://root.cern/root/html528/RooBernstein.html,1,['avail'],['available']
Availability,"e nodes. TObjString * Exec(Int_t action, const char* what, const char* how, const char* where); Execute 'action' (see EAdminExecType in 'XProofProtocol.h') at 'where'; (default master), with options 'how', on 'what'. The option specified by; 'how' are typically unix option for the relate commands. In addition to; the unix authorizations, the limitations are:. action = kRm limited to the sandbox (but basic dirs cannot be; removed) and on files owned by the user in the; allowed directories; action = kTail option '-f' is not supported and will be ignored. Int_t GetFile(const char* remote, const char* local, const char* opt = 0); Get file 'remote' into 'local' from the master.; If opt contains ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; If opt contains ""silent"" standard notificatons are not printed (errors and; warnings and prompts still are).; Return 0 on success, -1 on error. Int_t PutFile(const char* local, const char* remote, const char* opt = 0); Put file 'local'to 'remote' to the master; If opt is ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; Return 0 on success, -1 on error. void CpProgress(const char* pfx, Long64_t bytes, Long64_t size, TStopwatch* watch, Bool_t cr = kFALSE); Print file copy progress. Int_t Cp(const char* src, const char* dst = 0, const char* opts = 0); Copy files in/out of the sandbox. Either 'src' or 'dst' must be in the; sandbox.; Return 0 on success, -1 on error. Bool_t IsValid() const; { return fSocket; }. TProof * AttachSession(Int_t id, Bool_t gui = kFALSE); { return TProofMgr::AttachSession(id, gui); }. » Author: G. Ganis, Nov 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXProofMgr.html:16732,error,error,16732,root/html534/TXProofMgr.html,https://root.cern,https://root.cern/root/html534/TXProofMgr.html,4,['error'],['error']
Availability,"e normalization range.; 4422/// \param[in] ctx An object to manage auxiliary information for code-squashing.; 4423///; 4424/// \returns The representative code string of the integral for the given object.; 4425std::string RooAbsReal::buildCallToAnalyticIntegral(Int_t /* code */, const char * /* rangeName */,; 4426 RooFit::Detail::CodeSquashContext & /*ctx*/) const; 4427{; 4428 std::stringstream errorMsg;; 4429 errorMsg << ""An analytical integral function for class \"""" << ClassName() << ""\"" has not yet been implemented."";; 4430 coutE(Minimization) << errorMsg.str() << std::endl;; 4431 throw std::runtime_error(errorMsg.str().c_str());; 4432}; 4433 ; 4434double RooAbsReal::_DEBUG_getVal(const RooArgSet* normalisationSet) const {; 4435 ; 4436 const bool tmpFast = _fast;; 4437 const double tmp = _value;; 4438 ; 4439 double fullEval = 0.;; 4440 try {; 4441 fullEval = getValV(normalisationSet);; 4442 }; 4443 catch (CachingError& error) {; 4444 throw CachingError(std::move(error),; 4445 FormatPdfTree() << *this);; 4446 }; 4447 ; 4448 const double ret = (_fast && !_inhibitDirty) ? _value : fullEval;; 4449 ; 4450 if (std::isfinite(ret) && ( ret != 0. ? (ret - fullEval)/ret : ret - fullEval) > 1.E-9) {; 4451#ifndef NDEBUG; 4452 gSystem->StackTrace();; 4453#endif; 4454 FormatPdfTree formatter;; 4455 formatter << ""--> (Scalar computation wrong here:)\n""; 4456 << GetName() << "" "" << this << "" _fast="" << tmpFast; 4457 << ""\n\tcached _value="" << std::setprecision(16) << tmp; 4458 << ""\n\treturning ="" << ret; 4459 << ""\n\trecomputed ="" << fullEval; 4460 << ""\n\tnew _value ="" << _value << ""] "";; 4461 formatter << ""\nServers:"";; 4462 for (const auto server : _serverList) {; 4463 formatter << ""\n "";; 4464 server->printStream(formatter.stream(), kName | kClassName | kArgs | kExtras | kAddress | kValue, kInline);; 4465 }; 4466 ; 4467 throw CachingError(formatter);; 4468 }; 4469 ; 4470 return ret;; 4471}; 4472 ; 4473 ; 4474bool RooAbsReal::redirectServersHook(const RooAbsCollection & newSe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:195786,error,error,195786,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,2,['error'],['error']
Availability,"e objects are; to be found, the top level directory (""/"") is the default.; Directories can be specified using wildcards, e.g. ""*"" or ""/*""; means to look in all top level directories, ""/dir/*"" in all; directories under ""/dir"", and ""/*/*"" to look in all directories; two levels deep.; For backward compatibility the type can also be passed via 'name',; in which case 'type' is ignored. TDSet(const TChain& chain, Bool_t withfriends = kTRUE); Create a named TDSet object from existing TChain 'chain'.; If 'withfriends' is kTRUE add also friends.; This constructor substituted the static methods TChain::MakeTDSet; removing any residual dependence of 'tree' on 'proof'. ~TDSet(); Cleanup. Long64_t Process(const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0, TObject* enl = 0); Process TDSet on currently active PROOF session.; The last argument 'enl' specifies an entry- or event-list to be used as; event selection.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void AddInput(TObject* obj); Add objects that might be needed during the processing of; the selector (see Process()). void ClearInput(); Clear input object list. TObject * GetOutput(const char* name); Get specified object that has been produced during the processing; (see Process()). TList * GetOutputList(); Get list with all object created during processing (see Process()). void Print(Option_t* option = """") const; Print TDSet basic or full data. When option=""a"" print full data. void SetObjName(const char* objname); Set/change object name. void SetDirectory(const char* dir); Set/change directory. Bool_t Add(const char* file, const char* objname = 0, const char* dir = 0, Long64_t first = 0, Long64_t num = -1, const char* msd = 0); Add file to list of files to be analyzed. Optionally with the; objname and dir arguments the default, TDSet wide, objname and; dir can be overridden. Bool_t Add(TDSet* set); Add specified data set to the this set.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDSet.html:10590,error,error,10590,root/html528/TDSet.html,https://root.cern,https://root.cern/root/html528/TDSet.html,4,['error'],['error']
Availability,"e objects being merged. It provides access to the output directory pointer (fOutputDirectory); to whether or not this is the first time Merge is being called in the; serie (for example for TTree, the first time we also need to Clone; the object on which Merge is called), and provides for a User Data; object to be passed along to each of the calls to Merge.; The fUserData object is owned by the TFileMergeInfo and will be; deleted when the TFileMerger moves on to the next set of objects. Function Members (Methods); public:. TFileMergeInfo(TDirectory* outputfile); virtual~TFileMergeInfo(); static TClass*Class(); virtual TClass*IsA() const; voidReset(); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. TFileMergeInfo(); TFileMergeInfo(const TFileMergeInfo&); TFileMergeInfo&operator=(const TFileMergeInfo&). Data Members; public:. Bool_tfIsFirstTrue if this is the first call to Merge for this series of object.; TStringfOptionsAdditional text based option being passed down to customize the merge.; TDirectory*fOutputDirectoryTarget directory where the merged object will be written.; TObject*fUserDataPlace holder to pass extra information. This object will be deleted at the end of each series of objects. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFileMergeInfo(). TFileMergeInfo(const TFileMergeInfo& ). TFileMergeInfo& operator=(const TFileMergeInfo& ). TFileMergeInfo(TDirectory* outputfile); {}. virtual ~TFileMergeInfo(); { delete fUserData; }. void Reset(); { fIsFirst = kTRUE; delete fUserData; fUserData = 0; }. » Author: Philippe Canal May, 2011 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFileMergeInfo.html:1415,down,down,1415,root/html534/TFileMergeInfo.html,https://root.cern,https://root.cern/root/html534/TFileMergeInfo.html,2,['down'],['down']
Availability,"e observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char* name, const char* title, RooAbsPdf& extPdf, RooDataSet& data, RooRealVar& yvar, Bool_t integrate = kFALSE). RooXYChi2Var constructor with an extended p.d.f. and X-Y values dataset; The value of the function that defines the chi^2 in this form is takes as; the p.d.f. times the expected number of events. An X-Y dataset is a weighted dataset with one or more observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const RooXYChi2Var& other, const char* name = 0); Copy constructor. void initialize(); Common constructor initialization. void initIntegrator(); Initialize bin content integrator. ~RooXYChi2Var(); Destructor. Double_t xErrorContribution(Double_t ydata) const; Calculate contribution to internal error due to error on 'x' coordinates; at point i. Double_t fy() const; Return function value requested bu present configuration. If integration is required, the function value integrated; over the bin volume divided by the bin volume is returned,; otherwise the value at the bin center is returned.; The bin volume is defined by the error on the 'X' coordinates. If an extended p.d.f. is used a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooXYChi2Var.html:39955,error,errors,39955,root/html528/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html528/RooXYChi2Var.html,20,['error'],"['error', 'errors']"
Availability,"e observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char* name, const char* title, RooAbsReal& func, RooDataSet& data, RooRealVar& yvar, Bool_t integrate = kFALSE). RooXYChi2Var constructor with function and X-Y values dataset. An X-Y dataset is a weighted dataset with one or more observables X where given yvar is interpreted; as the Y value. The Y variable must have a non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char* name, const char* title, RooAbsPdf& extPdf, RooDataSet& data, Bool_t integrate = kFALSE). RooXYChi2Var constructor with an extended p.d.f. and X-Y values dataset; The value of the function that defines the chi^2 in this form is takes as; the p.d.f. times the expected number of events. An X-Y dataset is a weighted dataset with one or more observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error defined at ea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooXYChi2Var.html:37860,error,error,37860,root/html528/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html528/RooXYChi2Var.html,10,['error'],['error']
Availability,"e observations, which may consists of positional measurements at intervals along the particle trajectory.; The exact functional relationship between the measured quantities (e.g., the space-points) and the dependent quantity (e.g., the momentum) is in general not known, but one possible way of solving the problem, is to find an expression which reliably approximates the dependence of the momentum on the observations.; This explicit function of the observations can be obtained by a least squares fitting procedure applied to a representative sample of the data, for which the dependent quantity (e.g., momentum) and the independent observations are known. The function can then be used to compute the quantity of interest for new observations of the independent variables.; This class TMultiDimFit implements such a procedure in ROOT. It is largely based on the CERNLIB MUDIFI package 2. Though the basic concepts are still sound, and therefore kept, a few implementation details have changed, and this class can take advantage of MINUIT 4 to improve the errors of the fitting, thanks to the class TMinuit.; In 5 and 6 H. Wind demonstrates the utility of this procedure in the context of tracking, magnetic field parameterisation, and so on. The outline of the method used in this class is based on Winds discussion, and I refer these two excellents text for more information.; And example of usage is given in multidimfit.C. The Method; Let \( D \) by the dependent quantity of interest, which depends smoothly on the observable quantities \( x_1, \ldots, x_N \) which we'll denote by \(\mathbf{x}\). Given a training sample of \( M\) tuples of the form, (TMultiDimFit::AddRow). \[; \left(\mathbf{x}_j, D_j, E_j\right)\quad,; \]. where \(\mathbf{x}_j = (x_{1,j},\ldots,x_{N,j})\) are \( N\) independent variables, \( D_j\) is the known, quantity dependent at \(\mathbf{x}_j\) and \( E_j\) is the square error in \( D_j\), the class will try to find the parameterization ; \[; D_p(\mathbf{x}) = \s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:1863,error,errors,1863,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,1,['error'],['errors']
Availability,"e of TGraphErrors an effective chi2 is used (see below TGraphErrors fit); To specify a User defined fitting function, specify option ""U"" and; call the following functions:; TVirtualFitter::Fitter(mygraph)->SetFCN(MyFittingFunction); where MyFittingFunction is of type:; extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f,; Double_t *u, Int_t flag);. TGraphErrors fit:. In case of a TGraphErrors object, when x errors are present, the error along x,; is projected along the y-direction by calculating the function at the points x-exlow and; x+exhigh. The chisquare is then computed as the sum of the quantity below at each point:. where x and y are the point coordinates, and f'(x) is the derivative of the; function f(x). In case the function lies below (above) the data point, ey is ey_low (ey_high). thanks to Andy Haas (haas@yahoo.com) for adding the case with TGraphAsymmErrors; University of Washington. The approach used to approximate the uncertainty in y because of the; errors in x is to make it equal the error in x times the slope of the line.; The improvement, compared to the first method (f(x+ exhigh) - f(x-exlow))/2; is of (error of x)**2 order. This approach is called ""effective variance method"".; This improvement has been made in version 4.00/08 by Anna Kreshuk.; The implementation is provided in the function FitUtil::EvaluateChi2Effective. NOTE:; 1) By using the ""effective variance"" method a simple linear regression; becomes a non-linear case, which takes several iterations; instead of 0 as in the linear case. 2) The effective variance technique assumes that there is no correlation; between the x and y coordinate. 3) The standard chi2 (least square) method without error in the coordinates (x) can; be forced by using option ""EX0"". 4) The linear fitter doesn't take into account the errors in x. When fitting a; TGraphErrors with a linear functions the errors in x willnot be considere.; If errors in x are important, go through minuit (use option ""F"" ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraph.html:25940,error,errors,25940,root/html528/TGraph.html,https://root.cern,https://root.cern/root/html528/TGraph.html,20,['error'],"['error', 'errors']"
Availability,"e of Y and its error for each bin in X. The displayed error is by default the; standard error on the mean (i.e. the standard deviation divided by the sqrt(n) ); Profile histograms are in many cases an; elegant replacement of two-dimensional histograms : the inter-relation of two; measured quantities X and Y can always be visualized by a two-dimensional; histogram or scatter-plot; its representation on the line-printer is not particularly; satisfactory, except for sparse data. If Y is an unknown (but single-valued); approximate function of X, this function is displayed by a profile histogram with; much better precision than by a scatter-plot. The following formulae show the cumulated contents (capital letters) and the values; displayed by the printing or plotting routines (small letters) of the elements for bin J. 2; H(J) = sum Y E(J) = sum Y; l(J) = sum l L(J) = sum l; h(J) = H(J)/L(J) mean of Y,; s(J) = sqrt(E(J)/L(J)- h(J)**2) standard deviation of Y (e.g. RMS); e(J) = s(J)/sqrt(L(J)) standard error on the mean. The displayed bin content for bin J of a TProfile is always h(J). The corresponding bin error is by default; e(J). In case the option ""s"" is used (in the constructor or by calling TProfile::BuildOptions); the displayed error is s(J). In the special case where s(J) is zero (eg, case of 1 entry only in one bin); the bin error e(J) is computed from the average of the s(J) for all bins if; the static function TProfile::Approximate has been called.; This simple/crude approximation was suggested in order to keep the bin; during a fit operation. But note that this approximation is not the default behaviour.; See also TProfile::BuildOptions for other error options and more detailed explanations. Example of a profile histogram with its graphics output; {; TCanvas *c1 = new TCanvas(""c1"",""Profile histogram example"",200,10,700,500);; hprof = new TProfile(""hprof"",""Profile of pz versus px"",100,-4,4,0,20);; Float_t px, py, pz;; for ( Int_t i=0; i<25000; i++) {; gRandom->R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProfile.html:1346,error,error,1346,root/html534/TProfile.html,https://root.cern,https://root.cern/root/html534/TProfile.html,6,['error'],['error']
Availability,"e of bin entries and profile is weighted, we need to set also the bin error; 1346 if (binEntries && fBinSumw2.fN ) {; 1347 R__ASSERT( h1->GetSumw2() );; 1348 h1->GetSumw2()->fArray[bin] = fBinSumw2.fArray[bin];; 1349 }; 1350 }; 1351 }; 1352 h1->SetEntries(fEntries);; 1353 return h1;; 1354}; 1355 ; 1356////////////////////////////////////////////////////////////////////////////////; 1357/// Project a 2-D histogram into a profile histogram along X.; 1358///; 1359/// The projection is made from the channels along the Y axis; 1360/// ranging from firstybin to lastybin included.; 1361/// The result is a 1D profile which contains the combination of all the considered bins along Y; 1362/// By default, bins 1 to ny are included; 1363/// When all bins are included, the number of entries in the projection; 1364/// is set to the number of entries of the 2-D histogram, otherwise; 1365/// the number of entries is incremented by 1 for all non empty cells.; 1366///; 1367/// The option can also be used to specify the projected profile error type.; 1368/// Values which can be used are 's', 'i', or 'g'. See TProfile::BuildOptions for details; 1369 ; 1370TProfile *TProfile2D::ProfileX(const char *name, Int_t firstybin, Int_t lastybin, Option_t *option) const; 1371{; 1372 return DoProfile(true, name, firstybin, lastybin, option);; 1373}; 1374 ; 1375////////////////////////////////////////////////////////////////////////////////; 1376/// Project a 2-D histogram into a profile histogram along X; 1377///; 1378/// The projection is made from the channels along the X axis; 1379/// ranging from firstybin to lastybin included.; 1380/// The result is a 1D profile which contains the combination of all the considered bins along X; 1381/// By default, bins 1 to ny are included; 1382/// When all bins are included, the number of entries in the projection; 1383/// is set to the number of entries of the 2-D histogram, otherwise; 1384/// the number of entries is incremented by 1 for all non empty cells",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile2D_8cxx_source.html:49352,error,error,49352,doc/master/TProfile2D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile2D_8cxx_source.html,1,['error'],['error']
Availability,"e of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsCollection.html:16734,error,error,16734,doc/v632/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/v632/classRooAbsCollection.html,4,['error'],['error']
Availability,"e of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCatType.html:3722,error,error,3722,doc/master/classRooCatType.html,https://root.cern,https://root.cern/doc/master/classRooCatType.html,1,['error'],['error']
Availability,e of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooAICRegistry_codeReg! Registry of component analytical integration codes; Double_t*_coefCache! Transiet cache with transformed values of coefficients; Int_t_coefErrCount! Coefficient error counter; TIterator*_coefIter! Iterator over coefficient list; RooListProxy_coefListList of coefficients; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; Bool_t_haveLastCoefFlag indicating if last PDFs coefficient was supplied in the ctor; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_n,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAddPdf.html:43461,error,errors,43461,root/html602/RooAddPdf.html,https://root.cern,https://root.cern/root/html602/RooAddPdf.html,4,['error'],['errors']
Availability,e of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooAICRegistry_codeReg! Registry of component analytical integration codes; Double_t*_coefCache! Transiet cache with transformed values of coefficients; Int_t_coefErrCount! Coefficient error counter; TIterator*_coefIter! Iterator over coefficient list; RooListProxy_coefListList of coefficients; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; Bool_t_haveLastCoefFlag indicating if last PDFs coefficient was supplied in the ctor; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static RooFormulaVar*RooResolutionModel::_identityIdentity basis function pointe; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; RooObjCacheManager_intCacheMgrManager of cache with integrals; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNS,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAddModel.html:44094,error,errors,44094,root/html602/RooAddModel.html,https://root.cern,https://root.cern/root/html602/RooAddModel.html,4,['error'],['errors']
Availability,"e of information about fit parameters printed in the histogram statistics box can be selected via the parameter mode. The parameter mode can be = pcev (default = 0111) p = 1; print Probability; c = 1; print Chisquare/Number of degrees of freedom; e = 1; print errors (if e=1, v must be 1); v = 1; print name/values of parameters; Example: gStyle->SetOptFit(1011);; print fit probability, parameter names/values and errors. When v = 1 is specified, only the non-fixed parameters are shown.; When v = 2 all parameters are shown. Note: gStyle->SetOptFit(1) means ""default value"", so it is equivalent to gStyle->SetOptFit(111). The error bars options. Option Description . ""E"" Default. Shows only the error bars, not a marker. . ""E1"" Small lines are drawn at the end of the error bars. . ""E2"" Error rectangles are drawn. . ""E3"" A filled area is drawn through the end points of the vertical error bars. . ""E4"" A smoothed filled area is drawn through the end points of the vertical error bars. . ""E0"" Draw error bars. Markers are drawn for bins with 0 contents. Combined with E1 or E2 it avoids error bars clipping . ""E5"" Like E3 but ignore the bins with 0 contents. . ""E6"" Like E4 but ignore the bins with 0 contents. . ""X0"" When used with one of the ""E"" option, it suppress the error bar along X as gStyle->SetErrorX(0) would do. . {; auto c1 = new TCanvas(""c1"",""c1"",600,400);; auto he = new TH1F(""he"",""Distribution drawn with error bars (option E1) "",100,-3,3);; for (int i=0; i<10000; i++) he->Fill(gRandom->Gaus(0,1));; gStyle->SetEndErrorSize(3);; gStyle->SetErrorX(1.);; he->SetMarkerStyle(20);; he->Draw(""E1"");; }; TStyle::SetEndErrorSizevoid SetEndErrorSize(Float_t np=2)Set the size (in pixels) of the small lines drawn at the end of the error bars (TH1 or TGraphErrors).Definition TStyle.cxx:1340; TStyle::SetErrorXvoid SetErrorX(Float_t errorx=0.5)Definition TStyle.h:340. The options ""E3"" and ""E4"" draw an error band through the end points of the vertical error bars. With ""E4"" the error band ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHistPainter.html:28128,error,error,28128,doc/master/classTHistPainter.html,https://root.cern,https://root.cern/doc/master/classTHistPainter.html,1,['error'],['error']
Availability,"e of pT values; // covered by the analysis.; const std::vector<double> x{5.50e3, 5.52e3, 12.54e3, 17.43e3, 22.40e3, 27.48e3, 30e3, 10000e3};; const std::vector<double> y{0.06628, 0.06395, 0.06396, 0.03372, 0.02441, 0.01403, 0, 0};; TGraph graph(x.size(), x.data(), y.data());; ; // Use the Vary method to add the systematic variations to the total MC scale factor (""weight"") of the analysis; // The input consists of the input column to be varied and the lambda function to compute the systematic variations.; // The new output columns contain the varied values of the input column.; auto df_with_variations_mc =; df_mc; .Vary(""weight"",; [&graph](double x, const RVecF &pt, const RVec<unsigned int> &type) {; const auto v = Mean(Map(pt[type == 11], [&graph](auto p) { return graph.Eval(p); }));; return RVec<double>{(1 + v) * x, (1 - v) * x};; },; {""weight"", ""goodlep_pt"", ""goodlep_type""}, {""up"", ""down""}); .Histo1D<float>(ROOT::RDF::TH1DModel(""Invariant Mass"", ""m4l"", 24, 80, 170), ""m4l"", ""weight"");; ; // Create the total MC scale factor histograms: ""nominal"", ""weight:up"" and ""weight:down"".; auto histos_mc = VariationsFor(df_with_variations_mc);; ; // Evaluate the total MC uncertainty based on the variations. Note, in this case the uncertainties are symmetric.; for (unsigned int i = 0; i < histos_mc[""nominal""].GetXaxis()->GetNbins(); i++) {; histos_mc[""nominal""].SetBinError(; i, (histos_mc[""weight:up""].GetBinContent(i) - histos_mc[""nominal""].GetBinContent(i)));; }; ; // Make the plot of the data, individual MC contributions and the total MC scale factor systematic variations.; gROOT->SetStyle(""ATLAS"");; ; // Create canvas with pad; auto c = new TCanvas(""c"", "" "", 600, 600);; auto pad = new TPad(""upper_pad"", """", 0, 0, 1, 1);; pad->SetTickx(0);; pad->SetTicky(0);; pad->Draw();; pad->cd();; ; // Draw stack with MC contributions; // Draw cloned histograms to preserve graphics when original objects goes out of scope; df_other->SetFillColor(kViolet - 9);; df_zz->SetFillColor(kAzure - 9);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html:9375,down,down,9375,doc/master/df106__HiggsToFourLeptons_8C.html,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html,1,['down'],['down']
Availability,"e of t parameter for 2D peaks, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTy;  logical value of t parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Int_t fNPeaks;  number of peaks present in fit, input parameter, it should be > 0 ;  ; Int_t fNumberIterations;  number of iterations in fitting procedure, input parameter, it should be > 0 ;  ; Double_t * fPositionCalcX;  [fNPeaks] array of calculated values of x positions of 2D peaks, output parameters ;  ; Double_t * fPositionCalcX1;  [fNPeaks] array of calculated x positions of 1D ridges, output parameters ;  ; Double_t * fPositionCalcY;  [fNPeaks] array of calculated values of y positions of 2D peaks, output parameters ;  ; Double_t * fPositionCalcY1;  [fNPeaks] array of calculated y positions of 1D ridges, output parameters ;  ; Double_t * fPositionErrX;  [fNPeaks] array of error values of x positions of 2D peaks, output parameters ;  ; Double_t * fPositionErrX1;  [fNPeaks] array of x positions errors of 1D ridges, output parameters ;  ; Double_t * fPositionErrY;  [fNPeaks] array of error values of y positions of 2D peaks, output parameters ;  ; Double_t * fPositionErrY1;  [fNPeaks] array of y positions errors of 1D ridges, output parameters ;  ; Double_t * fPositionInitX;  [fNPeaks] array of initial values of x positions of 2D peaks, input parameters ;  ; Double_t * fPositionInitX1;  [fNPeaks] array of initial x positions of 1D ridges, input parameters ;  ; Double_t * fPositionInitY;  [fNPeaks] array of initial values of y positions of 2D peaks, input parameters ;  ; Double_t * fPositionInitY1;  [fNPeaks] array of initial y positions of 1D ridges, input parameters ;  ; Int_t fPower;  possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function. ;  ; Double_t fRoCalc;  calculated value of correlation coefficient ;  ; Double_t fRoErr;  error value of correlation coefficient ;  ; Double_t fRoInit;  initial ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:29452,error,error,29452,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,4,['error'],"['error', 'errors']"
Availability,"e of the formula. ; [in]formulaFormula to be evaluated. Parameters/observables are identified by name or ordinal position in varList. ; [in]varListList of variables to be passed to the formula. ; [in]checkVariablesUnused parameter. . Definition at line 194 of file RooFormula.cxx. ◆ RooFormula() [2/2]. RooFormula::RooFormula ; (; const RooFormula & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 205 of file RooFormula.cxx. Member Function Documentation. ◆ actualDependents(). RooArgSet RooFormula::actualDependents ; (; ); const. inline . Return list of arguments which are used in the formula. ; Definition at line 39 of file RooFormula.h. ◆ changeDependents(). bool RooFormula::changeDependents ; (; const RooAbsCollection & ; newDeps, . bool ; mustReplaceAll, . bool ; nameChange . ). Change used variables to those with the same name in given list. ; Parameters. [in]newDepsNew dependents to replace the old ones. ; [in]mustReplaceAllWill yield an error if one dependent does not have a replacement. ; [in]nameChangePassed down to RooAbsArg::findNewServer(const RooAbsCollection&, bool) const. . Definition at line 344 of file RooFormula.cxx. ◆ Clone(). TObject * RooFormula::Clone ; (; const char * ; newname = nullptr); const. inlineoverridevirtual . Make a clone of an object using the Streamer facility. ; If the object derives from TNamed, this function is called by TNamed::Clone. TNamed::Clone uses the optional argument to set a new name to the newly created object.; If the object class has a DirectoryAutoAdd function, it will be called at the end of the function with the parameter gDirectory. This usually means that the object will be appended to the current ROOT directory. ; Reimplemented from TObject.; Definition at line 32 of file RooFormula.h. ◆ doEval(). void RooFormula::doEval ; (; RooFit::EvalContext & ; ctx); const. Definition at line 407 of file RooFormula.cxx. ◆ dump(). void RooFormula::dump ; (; ); const. DEBUG: Dump state inf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFormula.html:18674,error,error,18674,doc/master/classRooFormula.html,https://root.cern,https://root.cern/doc/master/classRooFormula.html,1,['error'],['error']
Availability,"e of the function, FVAL,; 812 which is usually a chisquare or log likelihood.; 813 if (iflag == 3) {; 814 will come here only after the fit is finished.; 815 Perform any final calculations, output fitted data, etc.; 816 }; 817*/; 818// See concrete examples in TH1::H1FitChisquare, H1FitLikelihood; 819 ; 820 if (fFCN) (*fFCN)(npar,grad,fval,par,flag);; 821 return 0;; 822}; 823 ; 824////////////////////////////////////////////////////////////////////////////////; 825/// fix a parameter; 826 ; 827Int_t TMinuit::FixParameter( Int_t parNo); 828{; 829 Int_t err;; 830 Double_t tmp[1];; 831 tmp[0] = parNo+1; //set internal Minuit numbering; 832 ; 833 mnexcm( ""FIX"", tmp, 1, err );; 834 ; 835 return err;; 836}; 837 ; 838////////////////////////////////////////////////////////////////////////////////; 839/// return parameter value and error; 840 ; 841Int_t TMinuit::GetParameter( Int_t parNo, Double_t &currentValue, Double_t &currentError ) const; 842{; 843 Int_t err;; 844 TString name; // ignored; 845 Double_t bnd1, bnd2; // ignored; 846 ; 847 mnpout( parNo, name, currentValue, currentError, bnd1, bnd2, err );; 848 ; 849 return err;; 850}; 851 ; 852////////////////////////////////////////////////////////////////////////////////; 853/// returns the number of currently fixed parameters; 854 ; 855Int_t TMinuit::GetNumFixedPars() const; 856{; 857 return fNpfix;; 858}; 859 ; 860////////////////////////////////////////////////////////////////////////////////; 861/// returns the number of currently free parameters; 862 ; 863Int_t TMinuit::GetNumFreePars() const; 864{; 865 return fNpar;; 866}; 867 ; 868////////////////////////////////////////////////////////////////////////////////; 869/// returns the total number of parameters that have been defined; 870/// as fixed or free. The constant parameters are not counted.; 871 ; 872Int_t TMinuit::GetNumPars() const; 873{; 874 return fNpar + fNpfix;; 875}; 876 ; 877//////////////////////////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:31445,error,error,31445,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['error'],['error']
Availability,"e of the period will be used as the extension (instead of 'h') and the left side will be used as the classname.; ""macrofilename"" and optionally ""cutfilename"" are expected to point to source file which will be included in by the generated skeletong. Method of the same name as the file(minus the extension and path) will be called by the generated skeleton's Process method as follow: [if (cutfilename())] htemp->Fill(macrofilename());; ""option"" can be used select some of the optional features during the code generation. The possible options are:; nohist : indicates that the generated ProcessFill should not fill the histogram. 'maxUnrolling' controls how deep in the class hierarchy does the system 'unroll' class that are not split. 'unrolling' a class will allow direct access to its data members a class (this emulates the behavior of TTreeFormula).; The main features of this skeleton are:. on-demand loading of branches; ability to use the 'branchname' as if it was a data member; protection against array out-of-bound; ability to use the branch data as object (when the user code is available). For example with Event.root, if Double_t somepx = fTracks.fPx[2];; double; is executed by one of the method of the skeleton, somepx will be updated with the current value of fPx of the 3rd track.; Both macrofilename and the optional cutfilename are expected to be the name of source files which contain at least a free standing function with the signature: x_t macrofilename(); // i.e function with the same name as the file; and y_t cutfilename(); // i.e function with the same name as the file; x_t and y_t needs to be types that can convert respectively to a double and a bool (because the skeleton uses: if (cutfilename()) htemp->Fill(macrofilename());; This 2 functions are run in a context such that the branch names are available as local variables of the correct (read-only) type.; Note that if you use the same 'variable' twice, it is more efficient to 'cache' the value. For example Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreePlayer.html:32697,avail,available,32697,doc/master/classTTreePlayer.html,https://root.cern,https://root.cern/doc/master/classTTreePlayer.html,1,['avail'],['available']
Availability,"e of the sum of squares of; 546/// weights is automatically triggered and the sum of the squares of weights is incremented; 547/// by w^2 in the bin corresponding to namex,y; 548///; 549/// The function returns the corresponding global bin number which has its content; 550/// incremented by w; 551 ; 552Int_t TH2::Fill(const char *namex, Double_t y, Double_t w); 553{; 554 Int_t binx, biny, bin;; 555 fEntries++;; 556 binx = fXaxis.FindBin(namex);; 557 biny = fYaxis.FindBin(y);; 558 if (binx <0 || biny <0) return -1;; 559 bin = biny*(fXaxis.GetNbins()+2) + binx;; 560 if (!fSumw2.fN && w != 1.0 && !TestBit(TH1::kIsNotW)) Sumw2(); // must be called before AddBinContent; 561 if (fSumw2.fN) fSumw2.fArray[bin] += w*w;; 562 AddBinContent(bin,w);; 563 if (binx == 0 || binx > fXaxis.GetNbins()) return -1;; 564 if (biny == 0 || biny > fYaxis.GetNbins()) {; 565 if (!GetStatOverflowsBehaviour()) return -1;; 566 }; 567 Double_t z= w; //(w > 0 ? w : -w);; 568 fTsumw += z;; 569 fTsumw2 += z*z;; 570 fTsumwy += z*y;; 571 fTsumwy2 += z*y*y;; 572 // skip statistics along x axis, for only one axis no need to use bit mask from GetAxisLabelStatus; 573 if (!fXaxis.CanExtend() || !fXaxis.IsAlphanumeric()) {; 574 Double_t x = fXaxis.GetBinCenter(binx);; 575 fTsumwx += z * x;; 576 fTsumwx2 += z * x * x;; 577 fTsumwxy += z * x * y;; 578 }; 579 return bin;; 580}; 581 ; 582 ; 583////////////////////////////////////////////////////////////////////////////////; 584/// Increment cell defined by x,namey by a weight w; 585///; 586/// - if x or/and y is less than the low-edge of the corresponding axis first bin,; 587/// the Underflow cell is incremented.; 588/// - if x or/and y is equal to or greater than the upper edge of corresponding axis last bin,; 589/// the Overflow cell is incremented.; 590///; 591/// - If the weight is not equal to 1, the storage of the sum of squares of; 592/// weights is automatically triggered and the sum of the squares of weights is incremented; 593/// by w^2 in the bin cor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2_8cxx_source.html:22441,mask,mask,22441,doc/master/TH2_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2_8cxx_source.html,1,['mask'],['mask']
Availability,"e of transparency usage with parallel coordinates can be found in parallelcoordtrans.C.; To ease the creation of a transparent color the static method GetColorTransparent(Int_t color, Float_t a) is provided. In the following example the trans_red color index point to a red color 30% opaque (70% transparent). The alpha value of the color index kRed is not modified.; Int_t trans_red = GetColorTransparent(kRed, 0.3);; TColor::GetColorTransparentstatic Int_t GetColorTransparent(Int_t color, Float_t a)Static function: Returns the transparent color number corresponding to n.Definition TColor.cxx:2174; This function is also used in the methods SetFillColorAlpha(), SetLineColorAlpha(), SetMarkerColorAlpha() and SetTextColorAlpha(). In the following example the fill color of the histogram histo is set to blue with an opacity of 35% (i.e. a transparency of 65%). (The color kBlue itself is internally stored as fully opaque.); histo->SetFillColorAlpha(kBlue, 0.35);; The transparency is available on all platforms when the flag OpenGL.CanvasPreferGL is set to 1 in $ROOTSYS/etc/system.rootrc, or on Mac with the Cocoa backend. On the file output it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript.; Alternatively, you can call at the top of your script gSytle->SetCanvasPreferGL();. Or if you prefer to activate GL for a single canvas c, then use c->SetSupportGL(true);.; The following macro gives an example of transparency usage:; ; void transparency(); {; auto c1 = new TCanvas(""c1"", ""c1"",224,330,700,527);; c1->Range(-0.125,-0.125,1.125,1.125);; ; auto tex = new TLatex(0.06303724,0.0194223,""This text is opaque and this line is transparent"");; tex->SetLineWidth(2);; tex->Draw();; ; auto arrow = new TArrow(0.5555158,0.07171314,0.8939828,0.6195219,0.05,""|>"");; arrow->SetLineWidth(4);; arrow->SetAngle(30);; arrow->Draw();; ; // Draw a transparent graph.; Double_t x[10] = {; 0.5232808, 0.8724928, 0.9280086, 0.7059456, 0.7399714,; 0.4659742, 0.8241404, 0.4838825, 0.79369",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTColor.html:21617,avail,available,21617,doc/master/classTColor.html,https://root.cern,https://root.cern/doc/master/classTColor.html,1,['avail'],['available']
Availability,"e old histogram to fill the extended histogram.; Takes into account errors (Sumw2) if any.; The algorithm works for 1-d, 2-D and 3-D histograms.; The axis must be extendable before invoking this function.; Ex: h->GetXaxis()->SetCanExtend(kTRUE);. void RecursiveRemove(TObject* obj); Recursively remove object from the list of functions. void Scale(Double_t c1 = 1, Option_t* option = """"); Multiply this histogram by a constant c1. this = c1*this. Note that both contents and errors(if any) are scaled.; This function uses the services of TH1::Add. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Scale. One can scale an histogram such that the bins integral is equal to; the normalization parameter via TH1::Scale(Double_t norm), where norm; is the desired normalization divided by the integral of the histogram. If option contains ""width"" the bin contents and errors are divided; by the bin width. Bool_t CanExtendAllAxes() const; returns true if all axes are extendable. UInt_t SetCanExtend(UInt_t extendBitMask); make the histogram axes extendable / not extendable according to the bit mask; returns the previous bit mask specifying which axes are extendable. void SetDefaultBufferSize(Int_t buffersize = 1000); static function to set the default buffer size for automatic histograms.; When an histogram is created with one of its axis lower limit greater; or equal to its upper limit, the function SetBuffer is automatically; called with the default buffer size. void SetDefaultSumw2(Bool_t sumw2 = kTRUE); static function.; When this static function is called with sumw2=kTRUE, all new; histograms will automatically activate the storage; of the sum of squares of errors, ie TH1::Sumw2 is automatically called. void SetTitle(const char* title); Change (i.e. set) the title. if title is in the form ""stringt;stringx;stringy;stringz""; the histogram tit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1.html:106539,error,errors,106539,root/html602/TH1.html,https://root.cern,https://root.cern/root/html602/TH1.html,4,['error'],['errors']
Availability,"e one of the ROOT file during verification.; NB: we do not change the name in here, because this would screw up lists; of these objects hashed on the name. Those lists need to be rebuild.; TFileCollection does that in RemoveDuplicates. TUrl * GetCurrentUrl() const; Return the current url. TUrl * NextUrl(); Iterator function, start iteration by calling ResetUrl().; The first call to NextUrl() will return the 1st element,; the seconde the 2nd element etc. Returns 0 in case no more urls. TUrl * FindByUrl(const char* url, Bool_t withDeflt = kFALSE); Find an element from a URL. Returns 0 if not found. Bool_t AddUrl(const char* url, Bool_t infront = kFALSE); Add a new URL. If 'infront' is TRUE the new url is pushed at the beginning; of the list; otherwise is pushed back.; Returns kTRUE if successful, kFALSE otherwise. Bool_t RemoveUrl(const char* url); Remove an URL. Returns kTRUE if successful, kFALSE otherwise. Bool_t RemoveUrlAt(Int_t i); Remove URL at given position. Returns kTRUE on success, kFALSE on error. Bool_t SetCurrentUrl(const char* url); Set 'url' as current URL, if in the list; Return kFALSE if not in the list. Bool_t SetCurrentUrl(TUrl* url); Set 'url' as current URL, if in the list; Return kFALSE if not in the list. Bool_t AddMetaData(TObject* meta); Add's a meta data object to the file info object. The object will be; adopted by the TFileInfo and should not be deleted by the user.; Typically objects of class TFileInfoMeta or derivatives should be added,; but any class is accepted.; Returns kTRUE if successful, kFALSE otherwise. Bool_t RemoveMetaData(const char* meta = 0); Remove the metadata obeject. If meta is 0 remove all meta data objects.; Returns kTRUE if successful, kFALSE otherwise. TFileInfoMeta * GetMetaData(const char* meta = 0) const; Get meta data object with specified name. If meta is 0; get first meta data object. Returns 0 in case no; suitable meta data object is found. Int_t Compare(const TObject* obj) const; Compare TFileInfo object by th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFileInfo.html:9248,error,error,9248,root/html534/TFileInfo.html,https://root.cern,https://root.cern/root/html534/TFileInfo.html,6,['error'],['error']
Availability,"e only way to produce an error matrix in external coordinates meaningful to the user. But when reporting the individual parabolic errors for limited parameters, Minuit can do a little better, so it does. In this case, Minuit actually transforms the ends of the internal ""error bar"" to external coordinates and reports the length of this transformed interval. Strictly speaking, it is now asymmetric, but since the origin of the asymmetry is only an artificial transformation it does not make much sense, so the transformed errors are symmetrized.; The result of all the above is that for parameters with limits, the error reported by Minuit is not exactly equal to the square root of the diagonal element of the error matrix. The difference is a measure of how much the limits deform the problem. If possible, it is suggested not to use limits on parameters, and the problem goes away. If for some reason limits are necessary, and you are sensitive to the difference between the two ways of calculating the errors, it is suggested to use Minos errors which take into account the non-linearities much more precisely. ; Definition at line 27 of file TMinuit.h. Public Types; enum  { kMAXWARN =100; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMinuit ();  Minuit normal constructor. ;  ;  TMinuit (Int_t maxpar);  Minuit normal constructor. ;  ;  ~TMinuit () override;  Minuit ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuit.html:14087,error,errors,14087,doc/master/classTMinuit.html,https://root.cern,https://root.cern/doc/master/classTMinuit.html,2,['error'],['errors']
Availability,"e options and directory; to be listed to ls. Returns 0 in case of success and -1 in case of; failure. Int_t PrintDirectory() const; Print path of remote working directory. Returns 0 in case of succes and; -1 in cse of failure. Int_t RenameFile(const char* file1, const char* file2) const; Rename a remote file. Anonymous users may not rename files.; Returns 0 in case of success and -1 in case of failure. Int_t DeleteFile(const char* file) const; Delete a remote file. Anonymous users may not delete files.; Returns 0 in case of success and -1 in case of failure. Int_t ChangePermission(const char* file, Int_t mode) const; Change permissions of a remote file. Anonymous users may not; chnage permissions. Returns 0 in case of success and -1 in case; of failure. Int_t Close(); Close ftp connection. Returns 0 in case of success and -1 in case of; failure. Bool_t OpenDirectory(const char* name, Bool_t print = kFALSE); Open a directory via rootd.; Returns kTRUE in case of success.; Returns kFALSE in case of error. void FreeDirectory(Bool_t print = kFALSE); Free a remotely open directory via rootd. const char * GetDirEntry(Bool_t print = kFALSE); Get directory entry via rootd.; Returns 0 in case no more entries or in case of error. Int_t GetPathInfo(const char* path, FileStat_t& buf, Bool_t print = kFALSE); Get info about a file. Info is returned in the form of a FileStat_t; structure (see TSystem.h).; The function returns 0 in case of success and 1 if the file could; not be stat'ed. Bool_t AccessPathName(const char* path, EAccessMode mode = kFileExists, Bool_t print = kFALSE); Returns kFALSE if one can access a file using the specified access mode.; Mode is the same as for the Unix access(2) function.; Attention, bizarre convention of return value!!. TFTP(); { }. TFTP(const TFTP& ). void operator=(const TFTP& ). void SetMode(Int_t mode); { fMode = mode; }. Int_t GetBlockSize() const; { return fBlockSize; }. void SetRestartAt(Long64_t at); { fRestartAt = at; }. Long64_t GetResta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFTP.html:11848,error,error,11848,root/html528/TFTP.html,https://root.cern,https://root.cern/root/html528/TFTP.html,10,['error'],['error']
Availability,"e or more object ( can be added to the list; 4090/// of functions (fFunctions) associated to each histogram.; 4091/// When TH1::Fit is invoked, the fitted function is added to the histogram list of functions (fFunctions).; 4092/// If the histogram is made persistent, the list of associated functions is also persistent.; 4093/// Given a histogram h, one can retrieve an associated function with:; 4094///; 4095/// ~~~ {.cpp}; 4096/// TF1 *myfunc = h->GetFunction(""myfunc"");; 4097/// ~~~; 4098/// or by quering directly the list obtained by calling `TH1::GetListOfFunctions`.; 4099///; 4100/// \anchor HFitStatus; 4101/// ### Fit status; 4102///; 4103/// The status of the fit is obtained converting the TFitResultPtr to an integer; 4104/// independently if the fit option ""S"" is used or not:; 4105///; 4106/// ~~~ {.cpp}; 4107/// TFitResultPtr r = h->Fit(myFunc,opt);; 4108/// Int_t fitStatus = r;; 4109/// ~~~; 4110///; 4111/// - `status = 0` : the fit has been performed successfully (i.e no error occurred).; 4112/// - `status < 0` : there is an error not connected with the minimization procedure, for example when a wrong function is used.; 4113/// - `status > 0` : return status from Minimizer, depends on used Minimizer. For example for TMinuit and Minuit2 we have:; 4114/// - `status = migradStatus + 10*minosStatus + 100*hesseStatus + 1000*improveStatus`.; 4115/// TMinuit returns 0 (for migrad, minos, hesse or improve) in case of success and 4 in case of error (see the documentation of TMinuit::mnexcm). For example, for an error; 4116/// only in Minos but not in Migrad a fitStatus of 40 will be returned.; 4117/// Minuit2 returns 0 in case of success and different values in migrad,minos or; 4118/// hesse depending on the error. See in this case the documentation of; 4119/// Minuit2Minimizer::Minimize for the migrad return status, Minuit2Minimizer::GetMinosError for the; 4120/// minos return status and Minuit2Minimizer::Hesse for the hesse return status.; 4121/// If other minimize",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:168296,error,error,168296,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['error'],['error']
Availability,"e outside the foam. void Train( void ); Train PDE-Foam depending on the set options. void TrainSeparatedClassification(); Creation of 2 separated foams: one for signal events, one for; backgound events. void TrainUnifiedClassification(); Create only one unified foam which contains discriminator; (N_sig)/(N_sig + N_bg). void TrainMonoTargetRegression(); Training mono target regression foam; - foam density = average Target(0); - dimension of foam = number of non-targets; - cell content = average target 0. void TrainMultiTargetRegression(); Training multi target regression foam; - foam density = Event density; - dimension of foam = number of non-targets + number of targets; - cell content = event density. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); Return Mva-Value. In case of 'fSigBgSeparated==false' return; the cell content (D = N_sig/(N_bg+N_sig)). In case of; 'fSigBgSeparated==false' return D =; Density_sig/(Density_sig+Density_bg). In both cases the error; of the discriminant is stored in 'err'. void SetXminXmax(TMVA::PDEFoam* ); Set Xmin, Xmax for every dimension in the given pdefoam object. void InitFoam(TMVA::PDEFoam* , TMVA::EFoamType ); Set foam options (incl. Xmin, Xmax) and initialize foam via; pdefoam->Init(). const std::vector<Float_t>& GetRegressionValues(); Return regression values for both multi and mono target regression. void PrintCoefficients( void ); {}. void AddWeightsXMLTo(void* parent) const; create XML output of PDEFoam method variables. void WriteFoamsToFile() const; Write pure foams to file. void ReadWeightsFromStream(istream& i); read options and internal parameters. void ReadWeightsFromXML(void* wghtnode); read PDEFoam variables from xml weight file. void ReadFoamsFromFile(); read pure foams from file. TMVA::EKernel UIntToKernel(UInt_t iker); convert UInt_t to EKernel (used for reading weight files). TMVA::ETargetSelection UIntToTargetSelection(UInt_t its); convert UInt_t to ETargetSelection (used for reading weight file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodPDEFoam.html:19396,error,error,19396,root/html528/TMVA__MethodPDEFoam.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodPDEFoam.html,1,['error'],['error']
Availability,"e pad to be represented label is the text you wish to associate with obj in the legend if label is null or empty, the title of the object will be used.; Options are:. L: draw line associated with TAttLine if obj inherits from TAttLine; P: draw polymarker associated with TAttMarker if obj inherits from TAttMarker; F: draw a box with fill associated wit TAttFill if obj inherits TAttFill; E: draw vertical error bar if option ""L"" is also specified . Definition at line 343 of file TLegend.cxx. ◆ AddEntry() [2/2]. TLegendEntry * TLegend::AddEntry ; (; const TObject * ; obj, . const char * ; label = """", . Option_t * ; option = ""lpf"" . ). Add a new entry to this legend. ; ""obj"" is the object to be represented. ""label"" is the text you wish to associate with obj in the legend. If ""label"" is null or empty, the title of the object will be used.; Options are:. L: draw line associated with TAttLine if obj inherits from TAttLine; P: draw polymarker associated with TAttMarker if obj inherits from TAttMarker; F: draw a box with fill associated wit TAttFill if obj inherits TAttFill; E: draw vertical error bar if option ""L"" is also specified . Definition at line 320 of file TLegend.cxx. ◆ Class(). static TClass * TLegend::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TLegend::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TLegend::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 82 of file TLegend.h. ◆ Clear(). void TLegend::Clear ; (; Option_t * ; option = """"). overridevirtual . Clear all entries in this legend, including the header. ; Reimplemented from TObject.; Definition at line 379 of file TLegend.cxx. ◆ Copy(). void TLegend::Copy ; (; TObject & ; obj); const. overridevirtual . Copy this legend into ""obj"". ; Reimplemented from TBox.; Definition at line 388 of file TLegend.cxx. ◆ DeclFileName(). static const char * TLegend::DeclFi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLegend.html:37069,error,error,37069,doc/master/classTLegend.html,https://root.cern,https://root.cern/doc/master/classTLegend.html,1,['error'],['error']
Availability,"e parameter value sync is done in one line with:; 49# ```C++; 50# f_sum->SetParameters(fnorm_exp_cb->GetParameters().data());; 51# ```; 52# However, TF1NormSum::GetParameters() returns an std::vector by value, which; 53# doesn't survive long enough in Python. That's why we have to explicitly; 54# assign it to a variable first and can't use a temporary.; 55 ; 56f_sum.SetParName(1, ""NBackground""); 57f_sum.SetParName(0, ""NSignal""); 58for i in range(2, f_sum.GetNpar()):; 59 f_sum.SetParName(i, fnorm_exp_cb.GetParName(i)); 60 ; 61# GENERATE HISTOGRAM TO FIT ..............................................................; 62w = ROOT.TStopwatch(); 63w.Start(); 64h_sum = ROOT.TH1D(""h_ExpCB"", ""Exponential Bkg + CrystalBall function"", nBins, -5.0, 5.0); 65h_sum.FillRandom(""fsum"", nEvents); 66print(""Time to generate {0} events: "".format(nEvents)); 67w.Print(); 68 ; 69# need to scale histogram with width since we are fitting a density; 70h_sum.Sumw2(); 71h_sum.Scale(1.0, ""width""); 72 ; 73# fit - use Minuit2 if available; 74ROOT.Math.MinimizerOptions.SetDefaultMinimizer(""Minuit2""); 75c1 = ROOT.TCanvas(""Fit"", ""Fit"", 800, 1000); 76# do a least-square fit of the spectrum; 77result = h_sum.Fit(""fsum"", ""SQ""); 78result.Print(); 79h_sum.Draw(); 80print(""Time to fit using ROOT TF1Normsum: ""); 81w.Print(); 82 ; 83# test if parameters are fine; 84for i, pref in enumerate([nsig, nbkg, signal_mean]):; 85 if not ROOT.TMath.AreEqualAbs(pref, f_sum.GetParameter(i), f_sum.GetParError(i) * 10.0):; 86 ROOT.Error(; 87 ""testFitNormSum"",; 88 ""Difference found in fitted {0} - difference is {1:.2f} sigma"".format(; 89 f_sum.GetParName(i), (f_sum.GetParameter(i) - pref) / f_sum.GetParError(i); 90 ),; 91 ); 92 ; 93ROOT.gStyle.SetOptStat(0); 94# add parameters; 95t1 = ROOT.TLatex(-2.5, 300000, ""NSignal = {0:g} #pm {1:g}"".format(f_sum.GetParameter(0), f_sum.GetParError(0))); 96t2 = ROOT.TLatex(-2.5, 270000, ""Nbackgr = {0:g} #pm {1:g}"".format(f_sum.GetParameter(1), f_sum.GetParError(1))); 97t1.Draw(); 98t2.Dr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fitNormSum_8py_source.html:2806,avail,available,2806,doc/master/fitNormSum_8py_source.html,https://root.cern,https://root.cern/doc/master/fitNormSum_8py_source.html,1,['avail'],['available']
Availability,"e passed to the SETUP.; The objects in the list must be streamable; the SETUP macro will be executed; like this: SETUP.C(loadopts).; Returns 0 in case of success and -1 in case of error. Int_t LoadPackageOnClient(const char* package, TList* loadopts = 0); Load specified package in the client. Executes the PROOF-INF/SETUP.C; script on the client. Returns 0 in case of success and -1 in case of error.; The code is equivalent to the one in TProofServ.cxx (TProof::kLoadPackage; case). Keep in sync in case of changes.; The argument 'loadopts' specify a list of objects to be passed to the SETUP.; The objects in the list must be streamable; the SETUP macro will be executed; like this: SETUP.C(loadopts).; Returns 0 in case of success and -1 in case of error. Int_t UnloadPackage(const char* package); Unload specified package.; Returns 0 in case of success and -1 in case of error. Int_t UnloadPackageOnClient(const char* package); Unload a specific package on the client.; Returns 0 in case of success and -1 in case of error.; The code is equivalent to the one in TProofServ.cxx (TProof::UnloadPackage; case). Keep in sync in case of changes. Int_t UnloadPackages(); Unload all packages.; Returns 0 in case of success and -1 in case of error. Int_t EnablePackage(const char* package, Bool_t notOnClient = kFALSE); Enable specified package. Executes the PROOF-INF/BUILD.sh; script if it exists followed by the PROOF-INF/SETUP.C script.; In case notOnClient = true, don't enable the package on the client.; The default is to enable packages also on the client.; Returns 0 in case of success and -1 in case of error.; Provided for backward compatibility. Int_t EnablePackage(const char* package, const char* loadopts, Bool_t notOnClient = kFALSE); Enable specified package. Executes the PROOF-INF/BUILD.sh; script if it exists followed by the PROOF-INF/SETUP.C script.; In case notOnClient = true, don't enable the package on the client.; The default is to enable packages also on the client.; It is i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:63761,error,error,63761,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,4,['error'],['error']
Availability,"e passed to the SETUP.; The objects in the list must be streamable; the SETUP macro will be executed; like this: SETUP.C(loadopts).; Returns 0 in case of success and -1 in case of error. Int_t LoadPackageOnClient(const char* package, TList* loadopts = 0); Load specified package in the client. Executes the PROOF-INF/SETUP.C; script on the client. Returns 0 in case of success and -1 in case of error.; The code is equivalent to the one in TProofServ.cxx (TProof::kLoadPackage; case). Keep in sync in case of changes.; The argument 'loadopts' specify a list of objects to be passed to the SETUP.; The objects in the list must be streamable; the SETUP macro will be executed; like this: SETUP.C(loadopts).; Returns 0 in case of success and -1 in case of error. Int_t UnloadPackage(const char* package); Unload specified package.; Returns 0 in case of success and -1 in case of error. Int_t UnloadPackageOnClient(const char* package); Unload a specific package on the client.; Returns 0 in case of success and -1 in case of error.; The code is equivalent to the one in TProofServ.cxx (TProof::UnloadPackage; case). Keep in sync in case of changes. Int_t UnloadPackages(); Unload all packages.; Returns 0 in case of success and -1 in case of error. Int_t EnablePackage(const char* package, Bool_t notOnClient = kFALSE, TList* workers = 0); Enable specified package. Executes the PROOF-INF/BUILD.sh; script if it exists followed by the PROOF-INF/SETUP.C script.; In case notOnClient = true, don't enable the package on the client.; The default is to enable packages also on the client.; If specified, enables packages only on the specified workers.; Returns 0 in case of success and -1 in case of error.; Provided for backward compatibility. Int_t EnablePackage(const char* package, const char* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); Enable specified package. Executes the PROOF-INF/BUILD.sh; script if it exists followed by the PROOF-INF/SETUP.C script.; In case notOnClient = true, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:73644,error,error,73644,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,6,['error'],['error']
Availability,"e plugin handlers in $ROOTSYS/etc/system.rootrc; for regular expressions that will be checked) and as last a local file will; be tried.; Before opening a file via TNetFile a check is made to see if the URL; specifies a local file. If that is the case the file will be opened; via a normal TFile. To force the opening of a local file via a; TNetFile use either TNetFile directly or specify as host ""localhost"".; The netopt argument is only used by TNetFile. For the meaning of the; options and other arguments see the constructors of the individual; file classes. In case of error returns 0. For TFile implementations supporting asynchronous file open, see; TFile::AsyncOpen(...), it is possible to request a timeout with the; option:; TIMEOUT=<secs> the timeout must be specified in seconds and; it will be internally checked with granularity of; one millisec. For remote files there is the option:; CACHEREAD opens an existing file for reading through the file cache.; The file will be downloaded to the cache and opened from there.; If the download fails, it will be opened remotely.; The file will be downloaded to the directory specified by; SetCacheFileDir(). TFileOpenHandle * AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); Static member function to submit an open request. The request will be; processed asynchronously. See TFile::Open(const char *, ...) for an; explanation of the arguments. A handler is returned which is to be passed; to TFile::Open(TFileOpenHandle *) to get the real TFile instance once; the file is open.; This call never blocks and it is provided to allow parallel submission; of file opening operations expected to take a long time.; TFile::Open(TFileOpenHandle *) may block if the file is not yet ready.; The sequence; TFile::Open(TFile::AsyncOpen(const char *, ...)); is equivalent to; TFile::Open(const char *, ...) .; To be effective, the underlying TFile implementation must be able to; support as",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFile.html:45960,down,downloaded,45960,root/html528/TFile.html,https://root.cern,https://root.cern/root/html528/TFile.html,10,['down'],['downloaded']
Availability,"e plugin manager see the TPluginManager class). The returned; type of TFile depends on the file name specified by 'url'.; If 'url' is a '|'-separated list of file URLs, the 'URLs' are tried; sequentially in the specified order until a successful open.; If the file starts with ""root:"", ""roots:"" or ""rootk:"" a TNetFile object; will be returned, with ""http:"" a TWebFile, with ""file:"" a local TFile,; etc. (see the list of TFile plugin handlers in $ROOTSYS/etc/system.rootrc; for regular expressions that will be checked) and as last a local file will; be tried.; Before opening a file via TNetFile a check is made to see if the URL; specifies a local file. If that is the case the file will be opened; via a normal TFile. To force the opening of a local file via a; TNetFile use either TNetFile directly or specify as host ""localhost"".; The netopt argument is only used by TNetFile. For the meaning of the; options and other arguments see the constructors of the individual; file classes. In case of error returns 0. For TFile implementations supporting asynchronous file open, see; TFile::AsyncOpen(...), it is possible to request a timeout with the; option:; TIMEOUT=<secs> the timeout must be specified in seconds and; it will be internally checked with granularity of; one millisec. For remote files there is the option:; CACHEREAD opens an existing file for reading through the file cache.; The file will be downloaded to the cache and opened from there.; If the download fails, it will be opened remotely.; The file will be downloaded to the directory specified by; SetCacheFileDir(). TFileOpenHandle * AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); Static member function to submit an open request. The request will be; processed asynchronously. See TFile::Open(const char *, ...) for an; explanation of the arguments. A handler is returned which is to be passed; to TFile::Open(TFileOpenHandle *) to get the real TFile instanc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFile.html:45547,error,error,45547,root/html528/TFile.html,https://root.cern,https://root.cern/root/html528/TFile.html,10,['error'],['error']
Availability,"e points,; copy points [0,oend).; Return newarray (passed or new instance if it was zero; and allocations are needed). void Sort(Bool_t (*)(const TGraph*, Int_t, Int_t) greater = &TGraph::CompareX, Bool_t ascending = kTRUE, Int_t low = 0, Int_t high = -1111); Sorts the points of this TGraph using in-place quicksort (see e.g. older glibc).; To compare two points the function parameter greaterfunc is used (see TGraph::CompareX for an; example of such a method, which is also the default comparison function for Sort). After; the sort, greaterfunc(this, i, j) will return kTRUE for all i>j if ascending == kTRUE, and; kFALSE otherwise. The last two parameters are used for the recursive quick sort, stating the range to be sorted. Examples:; // sort points along x axis; graph->Sort();; // sort points along their distance to origin; graph->Sort(&TGraph::CompareRadius);. Bool_t CompareErrors(const TGraph* gr, Int_t i, Int_t j) {; const TGraphErrors* ge=(const TGraphErrors*)gr;; return (ge->GetEY()[i]>ge->GetEY()[j]); }; // sort using the above comparison function, largest errors first; graph->Sort(&CompareErrors, kFALSE);. void Streamer(TBuffer& ); Stream an object of class TGraph. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. void SwapValues(Double_t* arr, Int_t pos1, Int_t pos2); Swap values. void UseCurrentStyle(); Set current style settings in this graph; This function is called when either TCanvas::UseCurrentStyle; or TROOT::ForceStyle have been invoked. Int_t Merge(TCollection* list); Adds all graphs from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph. void Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations); Find zero of a continuous function.; This function finds a real zero of the continuous real; function Y(X) in a given interval (A,B). See accompanying; notes f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraph.html:41115,error,errors,41115,root/html534/TGraph.html,https://root.cern,https://root.cern/root/html534/TGraph.html,2,['error'],['errors']
Availability,"e points,; copy points [0,oend).; Return newarray (passed or new instance if it was zero; and allocations are needed). void Sort(Bool_t (*)(const TGraph*, Int_t, Int_t) greater = &TGraph::CompareX, Bool_t ascending = kTRUE, Int_t low = 0, Int_t high = -1111); Sorts the points of this TGraph using in-place quicksort (see e.g. older glibc).; To compare two points the function parameter greaterfunc is used (see TGraph::CompareX for an; example of such a method, which is also the default comparison function for Sort). After; the sort, greaterfunc(this, i, j) will return kTRUE for all i>j if ascending == kTRUE, and; kFALSE otherwise. The last two parameters are used for the recursive quick sort, stating the range to be sorted. Examples:; // sort points along x axis; graph->Sort();; // sort points along their distance to origin; graph->Sort(&TGraph::CompareRadius);. Bool_t CompareErrors(const TGraph* gr, Int_t i, Int_t j) {; const TGraphErrors* ge=(const TGraphErrors*)gr;; return (ge->GetEY()[i]>ge->GetEY()[j]); }; // sort using the above comparison function, largest errors first; graph->Sort(&CompareErrors, kFALSE);. void Streamer(TBuffer& b); Stream an object of class TGraph. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. void SwapValues(Double_t* arr, Int_t pos1, Int_t pos2); Swap values. void UseCurrentStyle(); Set current style settings in this graph; This function is called when either TCanvas::UseCurrentStyle; or TROOT::ForceStyle have been invoked. Int_t Merge(TCollection* list); Adds all graphs from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations); Find zero of a continuous function.; This function finds a real zero of the continuous real; function Y(X) in a given interval (A,B). See accompanying; notes for details of the argument list and calling sequence. Double_t ** Allocate(Int_t newsize). TLi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraph.html:39385,error,errors,39385,root/html528/TGraph.html,https://root.cern,https://root.cern/root/html528/TGraph.html,4,['error'],['errors']
Availability,"e previous fit.; - Modifying the dimension or number of bins results in an error (in this case; rather instantiate a new TFractionFitter object). void SetMC(Int_t parm, TH1* MC); Change the histogram for template number <parm>. Notes:; - Parameter constraints and settings are retained from a possible previous fit.; - Modifying the dimension or number of bins results in an error (in this case; rather instantiate a new TFractionFitter object). void SetWeight(Int_t parm, TH1* weight); Set bin by bin weights for template number <parm> (the parameter numbering; follows that of the input template vector).; Weights can be ""unset"" by passing a null pointer.; Consistency of the weights histogram with the data histogram is checked at; this point, and an error in case of problems. ROOT::Fit::Fitter* GetFitter() const; Give direct access to the underlying fitter class. This can be; used e.g. to modify parameter values or step sizes. void CheckParNo(Int_t parm) const; Function for internal use, checking parameter validity; An invalid parameter results in an error. void SetRangeX(Int_t low, Int_t high); Set the X range of the histogram to be used in the fit.; Use ReleaseRangeX() to go back to fitting the full histogram.; The consistency check ensures that no empty fit range occurs (and also; recomputes the bin content integrals).; Arguments:; low: lower X bin number; high: upper X bin number. void ReleaseRangeX(); Release restrictions on the X range of the histogram to be used in the fit. void SetRangeY(Int_t low, Int_t high); Set the Y range of the histogram to be used in the fit (2D or 3D histograms only).; Use ReleaseRangeY() to go back to fitting the full histogram.; The consistency check ensures that no empty fit range occurs (and also; recomputes the bin content integrals).; Arguments:; low: lower Y bin number; high: upper Y bin number. void ReleaseRangeY(); Release restrictions on the Y range of the histogram to be used in the fit. void SetRangeZ(Int_t low, Int_t high); Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFractionFitter.html:15092,error,error,15092,root/html602/TFractionFitter.html,https://root.cern,https://root.cern/root/html602/TFractionFitter.html,4,['error'],['error']
Availability,"e printed unless the verbose flag is set. Bool_t setRealValue(const char* name, Double_t newVal = 0, Bool_t verbose = kFALSE); Set value of a RooAbsRealLValye stored in set with given name to newVal; No error messages are printed unless the verbose flag is set. const char* getCatLabel(const char* name, const char* defVal = """", Bool_t verbose = kFALSE) const; Get state name of a RooAbsCategory stored in set with given name. If none is found, value of defVal is returned.; No error messages are printed unless the verbose flag is set. Bool_t setCatLabel(const char* name, const char* newVal = """", Bool_t verbose = kFALSE); Set state name of a RooAbsCategoryLValue stored in set with given name to newVal.; No error messages are printed unless the verbose flag is set. Int_t getCatIndex(const char* name, Int_t defVal = 0, Bool_t verbose = kFALSE) const; Get index value of a RooAbsCategory stored in set with given name. If none is found, value of defVal is returned.; No error messages are printed unless the verbose flag is set. Bool_t setCatIndex(const char* name, Int_t newVal = 0, Bool_t verbose = kFALSE); Set index value of a RooAbsCategoryLValue stored in set with given name to newVal.; No error messages are printed unless the verbose flag is set. const char* getStringValue(const char* name, const char* defVal = """", Bool_t verbose = kFALSE) const; Get string value of a RooAbsString stored in set with given name. If none is found, value of defVal is returned.; No error messages are printed unless the verbose flag is set. Bool_t setStringValue(const char* name, const char* newVal = """", Bool_t verbose = kFALSE); Set string value of a RooStringVar stored in set with given name to newVal.; No error messages are printed unless the verbose flag is set. void writeToFile(const char* fileName) const; Write contents of the argset to specified file.; See writeToStream() for details. Bool_t readFromFile(const char* fileName, const char* flagReadAtt = 0, const char* section = 0, Bool_t ve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooArgSet.html:19643,error,error,19643,root/html526/RooArgSet.html,https://root.cern,https://root.cern/root/html526/RooArgSet.html,10,['error'],['error']
Availability,"e projection. NOTE 4: underflow/overflow are by default excluded from the projection; (Note that this is a different default behavior compared to the projection to an histogram); To include the underflow and/or overflow use option ""UF"" and/or ""OF"". void PutStats(Double_t* stats); Replace current statistics with the values in array stats. TH3 * RebinX(Int_t ngroup, const char* newname); Rebin only the X axis; see Rebin3D. TH3 * RebinY(Int_t ngroup, const char* newname); Rebin only the Y axis; see Rebin3D. TH3 * RebinZ(Int_t ngroup, const char* newname); Rebin only the Z axis; see Rebin3D. TH3 * Rebin3D(Int_t nxgroup, Int_t nygroup, Int_t nzgroup, const char* newname); -*-*-*Rebin this histogram grouping nxgroup/nygroup/nzgroup bins along the xaxis/yaxis/zaxis together*-*-*-*-. if newname is not blank a new temporary histogram hnew is created.; else the current histogram is modified (default); The parameter nxgroup/nygroup indicate how many bins along the xaxis/yaxis of this; have to me merged into one bin of hnew; If the original histogram has errors stored (via Sumw2), the resulting; histograms has new errors correctly calculated. examples: if hpxpy is an existing TH3 histogram with 40 x 40 x 40 bins; hpxpypz->Rebin3D(); // merges two bins along the xaxis and yaxis in one in hpxpypz; // Carefull: previous contents of hpxpy are lost; hpxpypz->RebinX(5); //merges five bins along the xaxis in one in hpxpypz; TH3 *hnew = hpxpypz->RebinY(5,""hnew""); // creates a new histogram hnew; // merging 5 bins of h1 along the yaxis in one bin. NOTE : If nxgroup/nygroup is not an exact divider of the number of bins,; along the xaxis/yaxis the top limit(s) of the rebinned histogram; is changed to the upper edge of the xbin=newxbins*nxgroup resp.; ybin=newybins*nygroup and the corresponding bins are added to; the overflow bin.; Statistics will be recomputed from the new bin contents. void Reset(Option_t* option = """"); Reset this histogram: contents, errors, etc; *-* ====================",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TH3.html:48604,error,errors,48604,root/html530/TH3.html,https://root.cern,https://root.cern/root/html530/TH3.html,6,['error'],['errors']
Availability,"e provided TF1 function.; 1154/// ""EX0"" | When fitting a TGraphErrors or TGraphAsymErrors do not consider errors in the X coordinates; 1155/// ""ROB"" | In case of linear fitting, compute the LTS regression coefficients (robust (resistant) regression), using the default fraction of good points ""ROB=0.x"" - compute the LTS regression coefficients, using 0.x as a fraction of good points; 1156///; 1157///; 1158/// This function is used for fitting also the derived TGraph classes such as TGraphErrors or TGraphAsymmErrors.; 1159/// See the note below on how the errors are used when fitting a TGraphErrors or TGraphAsymmErrors.; 1160///; 1161/// The fitting of the TGraph, i.e simple data points without any error associated, is performed using the; 1162/// un-weighted least-square (chi-square) method.; 1163///; 1164///; 1165///\anchor GFitErrors; 1166/// ### TGraphErrors fit:; 1167///; 1168/// In case of a TGraphErrors or TGraphAsymmErrors object, when `x` errors are present, the error along x,; 1169/// is projected along the y-direction by calculating the function at the points `x-ex_low` and; 1170/// `x+ex_high`, where `ex_low` and `ex_high` are the corresponding lower and upper error in x.; 1171/// The chi-square is then computed as the sum of the quantity below at each data point:; 1172///; 1173/// \f[; 1174/// \frac{(y-f(x))^{2}}{ey^{2}+(\frac{1}{2}(exl+exh)f'(x))^{2}}; 1175/// \f]; 1176///; 1177/// where `x` and `y` are the point coordinates, and `f'(x)` is the derivative of the; 1178/// function `f(x)`.; 1179///; 1180/// In case of asymmetric errors, if the function lies below (above) the data point, `ey` is `ey_low` (`ey_high`).; 1181///; 1182/// The approach used to approximate the uncertainty in y because of the; 1183/// errors in x is to make it equal the error in x times the slope of the line.; 1184/// This approach is called ""effective variance method"" and; 1185/// the implementation is provided in the function FitUtil::EvaluateChi2Effective; 1186///; 1187/// \anch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph_8cxx_source.html:41005,error,errors,41005,doc/master/TGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph_8cxx_source.html,3,['error'],"['error', 'errors']"
Availability,"e range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; Get high error on X[i]. Double_t GetErrorXlow(Int_t bin) const; Get low error on X[i]. Double_t GetErrorYhigh(Int_t bin) const; Get high error on Y[i]. Double_t GetErrorYlow(Int_t bin) const; Get low error on Y[i]. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld = 0, Double_t exhd = 0, Double_t eyld = 0, Double_t eyhd = 0); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld = 0, Double_t exhd = 0, Double_t eyld = 0, Double_t eyhd = 0); Set ex and ey values for point number i. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t ** Allocate(Int_t size). Double_t * GetEXlow() const; {return fEXlow;}. Double_t * GetEXhigh() const; {return fEXhigh;}. Double_t * GetEYlow() const; {return fEYlow;}. Double_t * GetEYhigh() const; {return fEYhigh;}. Double_t * GetEXlowd() const; {return fEXlowd;}. Double_t * GetEXhighd() const; {return fEXhighd;}. Double_t * GetEYlowd() const; {return fEYlowd;}. Double_t * G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphBentErrors.html:17791,error,errors,17791,root/html528/TGraphBentErrors.html,https://root.cern,https://root.cern/root/html528/TGraphBentErrors.html,4,['error'],['errors']
Availability,"e reference above that it has good coverage properties for most cases, and can be used where FeldmannCousins can't.; What are the advantages of TRolke over TLimit? TRolke is fully frequentist. TLimit treats nuisance parameters Bayesian. For a coverage study of a Bayesian method refer to physics/0408039 (Tegenfeldt & J.C). However, this note studies the coverage of Feldman&Cousins with Bayesian treatment of nuisance parameters. To make a long story short: using the Bayesian method you might introduce a small amount of over-coverage (though I haven't shown it for TLimit). On the other hand, coverage of course is a not so interesting when you consider yourself a Bayesian. . Definition at line 33 of file TRolke.h. Public Member Functions;  TRolke (Double_t CL=0.9, Option_t *option="""");  Constructor with optional Confidence Level argument. ;  ;  ~TRolke () override;  Destructor. ;  ; Double_t CalculateInterval (Int_t x, Int_t y, Int_t z, Double_t bm, Double_t em, Double_t e, Int_t mid, Double_t sde, Double_t sdb, Double_t tau, Double_t b, Int_t m);  Deprecated and error prone model selection interface. ;  ; bool GetBounding () const;  ; Double_t GetCL () const;  ; bool GetCriticalNumber (Int_t &ncrit, Int_t maxtry=-1);  get the value of x corresponding to rejection of the null hypothesis. ;  ; bool GetLimits (Double_t &low, Double_t &high);  Calculate and get the upper and lower limits for the pre-specified model. ;  ; bool GetLimitsML (Double_t &low, Double_t &high, Int_t &out_x);  get the upper and lower limits for the most likely outcome. ;  ; bool GetLimitsQuantile (Double_t &low, Double_t &high, Int_t &out_x, Double_t integral=0.5);  get the upper and lower limits for the outcome corresponding to a given quantile. ;  ; Double_t GetLowerLimit ();  Calculate and get lower limit for the pre-specified model. ;  ; bool GetSensitivity (Double_t &low, Double_t &high, Double_t pPrecision=0.00001);  get the upper and lower average limits based on the specified model. ;  ; Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRolke.html:6351,error,error,6351,doc/master/classTRolke.html,https://root.cern,https://root.cern/doc/master/classTRolke.html,1,['error'],['error']
Availability,"e registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooCategoryProxy _indexCat;  Index category. ;  ; Int_t _numPdf = 0;  Number of registered PDFs. ;  ; RooObjCacheManager _partIntMgr;  ! Component normalization manager ;  ; TList _pdfProxyList;  List of PDF proxies (named after applicable category state) ;  ; const TNamed * _plotCoefNormRange = nullptr;  ; RooSetProxy _plotCoefNormSet;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimultaneous.html:71978,error,errors,71978,doc/master/classRooSimultaneous.html,https://root.cern,https://root.cern/doc/master/classRooSimultaneous.html,1,['error'],['errors']
Availability,"e regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html:8023,error,error,8023,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,6,['error'],['error']
Availability,"e regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProtoClass.html:4564,error,error,4564,doc/master/classTProtoClass.html,https://root.cern,https://root.cern/doc/master/classTProtoClass.html,2,['error'],['error']
Availability,"e remote directory contains a .message; file and it is < 1024 characters then the contents is echoed back.; Returns 0 in case of success and -1 in case of failure. Int_t MakeDirectory(const char* dir, Bool_t print = kFALSE) const; Make a remote directory. Anonymous users may not create directories.; Returns 0 in case of success and -1 in case of failure. Int_t DeleteDirectory(const char* dir) const; Delete a remote directory. Anonymous users may not delete directories.; Returns 0 in case of success and -1 in case of failure. Int_t ListDirectory(Option_t* cmd = """") const; List remote directory. With cmd you specify the options and directory; to be listed to ls. Returns 0 in case of success and -1 in case of; failure. Int_t PrintDirectory() const; Print path of remote working directory. Returns 0 in case of succes and; -1 in cse of failure. Int_t RenameFile(const char* file1, const char* file2) const; Rename a remote file. Anonymous users may not rename files.; Returns 0 in case of success and -1 in case of failure. Int_t DeleteFile(const char* file) const; Delete a remote file. Anonymous users may not delete files.; Returns 0 in case of success and -1 in case of failure. Int_t ChangePermission(const char* file, Int_t mode) const; Change permissions of a remote file. Anonymous users may not; chnage permissions. Returns 0 in case of success and -1 in case; of failure. Int_t Close(); Close ftp connection. Returns 0 in case of success and -1 in case of; failure. Bool_t OpenDirectory(const char* name, Bool_t print = kFALSE); Open a directory via rootd.; Returns kTRUE in case of success.; Returns kFALSE in case of error. void FreeDirectory(Bool_t print = kFALSE); Free a remotely open directory via rootd. const char * GetDirEntry(Bool_t print = kFALSE); Get directory entry via rootd.; Returns 0 in case no more entries or in case of error. Int_t GetPathInfo(const char* path, FileStat_t& buf, Bool_t print = kFALSE); Get info about a file. Info is returned in the form of a File",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFTP.html:11234,failure,failure,11234,root/html528/TFTP.html,https://root.cern,https://root.cern/root/html528/TFTP.html,10,['failure'],['failure']
Availability,"e replacement of a using declaration. ; Definition at line 153 of file THn.h. ◆ Rebin() [1/2]. THn * THn::Rebin ; (; const Int_t * ; group); const. inline . Definition at line 173 of file THn.h. ◆ Rebin() [2/2]. THn * THn::Rebin ; (; Int_t ; group); const. inline . Definition at line 170 of file THn.h. ◆ Reset(). void THn::Reset ; (; Option_t * ; option = """"). overridevirtual . Reset the contents of a THn. ; Implements THnBase.; Definition at line 250 of file THn.cxx. ◆ SetBinContent() [1/2]. void THn::SetBinContent ; (; const Int_t * ; idx, . Double_t ; v . ). inline . Forwards to THnBase::SetBinContent(). ; Non-virtual, CINT-compatible replacement of a using declaration. ; Definition at line 97 of file THn.h. ◆ SetBinContent() [2/2]. void THn::SetBinContent ; (; Long64_t ; bin, . Double_t ; v . ). inlineoverridevirtual . Implements THnBase.; Definition at line 100 of file THn.h. ◆ SetBinError2(). void THn::SetBinError2 ; (; Long64_t ; bin, . Double_t ; e2 . ). inlineoverridevirtual . Implements THnBase.; Definition at line 103 of file THn.h. ◆ Streamer(). void THn::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in THnT< T >. ◆ StreamerNVirtual(). void THn::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 183 of file THn.h. ◆ Sumw2(). void THn::Sumw2 ; (; ). overridevirtual . Enable calculation of errors. ; Implements THnBase.; Definition at line 216 of file THn.cxx. Member Data Documentation. ◆ fCoordBuf. std::vector<Int_t> THn::fCoordBuf. mutableprotected . Definition at line 181 of file THn.h. ◆ fSumw2. TNDArrayT<Double_t> THn::fSumw2. protected . Definition at line 180 of file THn.h. Libraries for THn:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/THn.h; hist/hist/src/THn.cxx. THn. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:49 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHn.html:32658,error,errors,32658,doc/master/classTHn.html,https://root.cern,https://root.cern/doc/master/classTHn.html,1,['error'],['errors']
Availability,"e rest; 1224 requestedTesting = useForTesting;; 1225 }; 1226 ; 1227 else if (requestedTraining == 0){ // case B); 1228 useForTesting = TMath::Max(requestedTesting,availableTesting);; 1229 if (allAvailable < useForTesting) {; 1230 Log() << kFATAL << Form(""Dataset[%s] : "",dsi.GetName())<< ""More events requested for testing (""; 1231 << requestedTesting << "") than available (""; 1232 << allAvailable << "")!"" << Endl;; 1233 }; 1234 useForTraining= allAvailable - useForTesting; // the rest; 1235 requestedTraining = useForTraining;; 1236 }; 1237 ; 1238 else {; 1239 // Case A; 1240 // requestedTraining R and requestedTesting S >0; 1241 // free events: Nfree = u-Thet(R-r)-Thet(S-s); 1242 // nR = Max(R,r) + 0.5 * Nfree; 1243 // nS = Max(S,s) + 0.5 * Nfree; 1244 Int_t stillNeedForTraining = TMath::Max(requestedTraining-availableTraining,0);; 1245 Int_t stillNeedForTesting = TMath::Max(requestedTesting-availableTesting,0);; 1246 ; 1247 int NFree = availableUndefined - stillNeedForTraining - stillNeedForTesting;; 1248 if (NFree <0) NFree = 0;; 1249 useForTraining = TMath::Max(requestedTraining,availableTraining) + NFree/2;; 1250 useForTesting= allAvailable - useForTraining; // the rest; 1251 }; 1252 ; 1253 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""determined event sample size to select training sample from=""<<useForTraining<<Endl;; 1254 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""determined event sample size to select test sample from=""<<useForTesting<<Endl;; 1255 ; 1256 ; 1257 ; 1258 // associate undefined events; 1259 if( splitMode == ""ALTERNATE"" ){; 1260 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""split 'ALTERNATE'"" << Endl;; 1261 Int_t nTraining = availableTraining;; 1262 for( EventVector::iterator it = eventVectorUndefined.begin(), itEnd = eventVectorUndefined.end(); it != itEnd; ){; 1263 ++nTraining;; 1264 if( nTraining <= requestedTraining ){; 1265 eventVectorTraining.insert( eventVectorTraining.end(), (*it) );; 1266 ++it;; 126",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:54208,avail,availableTraining,54208,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,4,['avail'],"['availableTesting', 'availableTraining', 'availableUndefined']"
Availability,"e restore previous; behaviour. void SigAlarmInterruptsSyscalls(Bool_t set); When the argument is true the SIGALRM signal handler is set so that; interrupted syscalls will not be restarted by the kernel. This is; typically used in case one wants to put a timeout on an I/O operation.; By default interrupted syscalls will always be restarted (for all; signals). This can be controlled for each a-synchronous TTimer via; the method TTimer::SetInterruptSyscalls(). Int_t GetFPEMask(); Return the bitmap of conditions that trigger a floating point exception. Int_t SetFPEMask(Int_t mask = kDefaultMask); Set which conditions trigger a floating point exception.; Return the previous set of conditions. void DispatchOneEvent(Bool_t pendingOnly = kFALSE); Dispatch a single event. void Sleep(UInt_t milliSec); Sleep milliSec milliseconds. Int_t Select(TList* active, Long_t timeout); Select on file descriptors. The timeout to is in millisec. Returns; the number of ready descriptors, or 0 in case of timeout, or < 0 in; case of an error, with -2 being EINTR and -3 EBADF. In case of EINTR; the errno has been reset and the method can be called again. Returns; -4 in case the list did not contain any file handlers or file handlers; with file descriptor >= 0. Int_t Select(TFileHandler* fh, Long_t timeout); Select on the file descriptor related to file handler h.; The timeout to is in millisec. Returns the number of ready descriptors,; or 0 in case of timeout, or < 0 in case of an error, with -2 being EINTR; and -3 EBADF. In case of EINTR the errno has been reset and the method; can be called again. Returns -4 in case the file handler is 0 or does; not have a file descriptor >= 0. Bool_t CheckSignals(Bool_t sync); Check if some signals were raised and call their Notify() member. void CheckChilds(); Check if children have finished. Bool_t CheckDescriptors(); Check if there is activity on some file descriptors and call their; Notify() member. int MakeDirectory(const char* name); Make a Unix file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUnixSystem.html:23113,error,error,23113,root/html602/TUnixSystem.html,https://root.cern,https://root.cern/root/html602/TUnixSystem.html,4,['error'],['error']
Availability,"e restore previous; behaviour. void SigAlarmInterruptsSyscalls(Bool_t set); When the argument is true the SIGALRM signal handler is set so that; interrupted syscalls will not be restarted by the kernel. This is; typically used in case one wants to put a timeout on an I/O operation.; By default interrupted syscalls will always be restarted (for all; signals). This can be controlled for each a-synchronous TTimer via; the method TTimer::SetInterruptSyscalls(). Int_t GetFPEMask(); Return the bitmap of conditions that trigger a floating point exception. Int_t SetFPEMask(Int_t mask = kDefaultMask); Set which conditions trigger a floating point exception.; Return the previous set of conditions. void DispatchOneEvent(Bool_t pendingOnly = kFALSE); Dispatch a single event. void Sleep(UInt_t milliSec); Sleep milliSec milliseconds. Int_t Select(TList* active, Long_t timeout); Select on file descriptors. The timeout to is in millisec. Returns; the number of ready descriptors, or 0 in case of timeout, or < 0 in; case of an error, with -2 being EINTR and -3 EBADF. In case of EINTR; the errno has been reset and the method can be called again. Returns; -4 in case the list did not contain any file handlers or file handlers; with file descriptor >= 0. Int_t Select(TFileHandler* fh, Long_t timeout); Select on the file descriptor related to file handler h.; The timeout to is in millisec. Returns the number of ready descriptors,; or 0 in case of timeout, or < 0 in case of an error, with -2 being EINTR; and -3 EBADF. In case of EINTR the errno has been reset and the method; can be called again. Returns -4 in case the file handler is 0 or does; not have a file descriptor >= 0. void DispatchSignals(ESignals sig); Handle and dispatch signals. Bool_t CheckSignals(Bool_t sync); Check if some signals were raised and call their Notify() member. void CheckChilds(); Check if children have finished. Bool_t CheckDescriptors(); Check if there is activity on some file descriptors and call their; Notif",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnixSystem.html:22729,error,error,22729,root/html534/TUnixSystem.html,https://root.cern,https://root.cern/root/html534/TUnixSystem.html,2,['error'],['error']
Availability,"e restore previous; behaviour. void SigAlarmInterruptsSyscalls(Bool_t set); When the argument is true the SIGALRM signal handler is set so that; interrupted syscalls will not be restarted by the kernel. This is; typically used in case one wants to put a timeout on an I/O operation.; By default interrupted syscalls will always be restarted (for all; signals). This can be controlled for each a-synchronous TTimer via; the method TTimer::SetInterruptSyscalls(). Int_t GetFPEMask(); Return the bitmap of conditions that trigger a floating point exception. Int_t SetFPEMask(Int_t mask = kDefaultMask); Set which conditions trigger a floating point exception.; Return the previous set of conditions. void DispatchOneEvent(Bool_t pendingOnly = kFALSE); Dispatch a single event. void Sleep(UInt_t milliSec); Sleep milliSec milliseconds. Int_t Select(TList* active, Long_t timeout); Select on file descriptors. The timeout to is in millisec. Returns; the number of ready descriptors, or 0 in case of timeout, or < 0 in; case of an error, with -2 being EINTR and -3 EBADF. In case of EINTR; the errno has been reset and the method can be called again. Returns; -4 in case the list did not contain any file handlers or file handlers; with file descriptor >= 0. Int_t Select(TFileHandler* fh, Long_t timeout); Select on the file descriptor related to file handler h.; The timeout to is in millisec. Returns the number of ready descriptors,; or 0 in case of timeout, or < 0 in case of an error, with -2 being EINTR; and -3 EBADF. In case of EINTR the errno has been reset and the method; can be called again. Returns -4 in case the file handler is 0 or does; not have a file descriptor >= 0. void DispatchSignals(ESignals sig); Handle and dispatch signals. Bool_t CheckSignals(Bool_t sync); Check if some signals were raised and call their Notify() member. void CheckChilds(); Check if childs have finished. Bool_t CheckDescriptors(); Check if there is activity on some file descriptors and call their; Notify(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnixSystem.html:22391,error,error,22391,root/html528/TUnixSystem.html,https://root.cern,https://root.cern/root/html528/TUnixSystem.html,4,['error'],['error']
Availability,"e results using VariationsFor(). In between these steps, no other change to the analysis code is required: the presence of systematic variations for certain columns is automatically propagated through filters, defines and actions, and RDataFrame will take these dependencies into account when producing varied results. VariationsFor() is included in header ROOT/RDFHelpers.hxx. The compiled C++ programs must include this header explicitly, this is not required for ROOT macros.; An example usage of Vary() and VariationsFor() in C++:; auto nominal_hx =; df.Vary(""pt"", ""ROOT::RVecD{pt*0.9f, pt*1.1f}"", {""down"", ""up""}); .Filter(""pt > pt_cut""); .Define(""x"", someFunc, {""pt""}); .Histo1D<float>(""x"");; ; // request the generation of varied results from the nominal_hx; ROOT::RDF::Experimental::RResultMap<TH1D> hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; ; // the event loop runs here, upon first access to any of the results or varied results:; hx[""nominal""].Draw(); // same effect as nominal_hx->Draw(); hx[""pt:down""].Draw(""SAME"");; hx[""pt:up""].Draw(""SAME"");; ROOT::RDF::Experimental::RResultMapDefinition RResultMap.hxx:98; ROOT::RDF::Experimental::VariationsForRResultMap< T > VariationsFor(RResultPtr< T > resPtr)Produce all required systematic variations for the given result.Definition RDFHelpers.hxx:219; A list of variation ""tags"" is passed as the last argument to Vary(). The tags give names to the varied values that are returned as elements of an RVec of the appropriate C++ type. The number of variation tags must correspond to the number of elements of this RVec (2 in the example above: the first element will correspond to the tag ""down"", the second to the tag ""up""). The full variation name will be composed of the varied column name and the variation tags (e.g. ""pt:down"", ""pt:up"" in this example). Python usage looks similar.; Note how we use the ""pt"" column as usual in the Filter() and Define() calls and we simply use ""x"" as the value to fill the resulting histogram. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:53941,down,down,53941,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,2,['down'],['down']
Availability,"e retrieved also; from the fitted function. Associated functions. One or more object (typically a TF1*) can be added to the list; of functions (fFunctions) associated to each graph.; When TGraph::Fit is invoked, the fitted function is added to this list.; Given a graph gr, one can retrieve an associated function; with: TF1 *myfunc = gr->GetFunction(""myfunc"");. If the graph is made persistent, the list of; associated functions is also persistent. Given a pointer (see above); to an associated function myfunc, one can retrieve the function/fit; parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter. Fit Statistics. You can change the statistics box to display the fit parameters with; the TStyle::SetOptFit(mode) method. This mode has four digits.; mode = pcev (default = 0111); v = 1; print name/values of parameters; e = 1; print errors (if e=1, v must be 1); c = 1; print Chisquare/Number of degress of freedom; p = 1; print Probability. For example: gStyle->SetOptFit(1011);; prints the fit probability, parameter names/values, and errors.; You can change the position of the statistics box with these lines; (where g is a pointer to the TGraph):. Root > TPaveStats *st = (TPaveStats*)g->GetListOfFunctions()->FindObject(""stats""); Root > st->SetX1NDC(newx1); //new x start position; Root > st->SetX2NDC(newx2); //new x end position. void FitPanel(); -*-*-*-*-*Display a panel with all histogram fit options*-*-*-*-*-*. See class TFitPanel for example. Option_t * GetGraphDrawOption(const TGraph* gr) const; Return the draw option for the TGraph gr in this TMultiGraph; The return option is the one specified when calling TMultiGraph::Add(gr,option). void InitGaus(Double_t xmin, Double_t xmax); Compute Initial values of parameters for a gaussian. void InitExpo(Double_t xmin, Double_t xmax); Compute Initial values of parameters for an exp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiGraph.html:14608,error,errors,14608,root/html528/TMultiGraph.html,https://root.cern,https://root.cern/root/html528/TMultiGraph.html,4,['error'],['errors']
Availability,"e retrieved also; from the fitted function. Associated functions. One or more object (typically a TF1*) can be added to the list; of functions (fFunctions) associated to each graph.; When TGraph::Fit is invoked, the fitted function is added to this list.; Given a graph gr, one can retrieve an associated function; with: TF1 *myfunc = gr->GetFunction(""myfunc"");. If the graph is made persistent, the list of; associated functions is also persistent. Given a pointer (see above); to an associated function myfunc, one can retrieve the function/fit; parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter. Fit Statistics. You can change the statistics box to display the fit parameters with; the TStyle::SetOptFit(mode) method. This mode has four digits.; mode = pcev (default = 0111); v = 1; print name/values of parameters; e = 1; print errors (if e=1, v must be 1); c = 1; print Chisquare/Number of degress of freedom; p = 1; print Probability. For example: gStyle->SetOptFit(1011);; prints the fit probability, parameter names/values, and errors.; You can change the position of the statistics box with these lines; (where g is a pointer to the TGraph):. Root > TPaveStats *st = (TPaveStats*)g->GetListOfFunctions()->FindObject(""stats""); Root > st->SetX1NDC(newx1); //new x start position; Root > st->SetX2NDC(newx2); //new x end position. void FitPanel(); Display a panel with all histogram fit options.; See class TFitPanel for example. Option_t * GetGraphDrawOption(const TGraph* gr) const; Return the draw option for the TGraph gr in this TMultiGraph.; The return option is the one specified when calling TMultiGraph::Add(gr,option). void InitGaus(Double_t xmin, Double_t xmax); Compute Initial values of parameters for a gaussian. void InitExpo(Double_t xmin, Double_t xmax); Compute Initial values of parameters for an exponential. void Init",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMultiGraph.html:21050,error,errors,21050,root/html534/TMultiGraph.html,https://root.cern,https://root.cern/root/html534/TMultiGraph.html,6,['error'],['errors']
Availability,"e roughly ; \chi^2 with one degree of freedom if the n-th order correction is a good model for the data. ; Thus, one only moves to the n+1-th order correction of q is relatively large. The chance that ; one moves from the n-th to the n+1-th order correction when the n-th order correction ; (eg. a type 1 error) is sufficient is given by the Prob(\chi^2_1 > threshold). The constructor ; of this class allows you to directly set this tolerance (in terms of probability that the n+1-th; term is added unnecessarily). To do:; Add another method to the utility that will make the sampling distribution for -2 log lambda ; for various m vs. m+1 order corrections using a nominal model and perhaps having two ways of ; generating the toys (either via a histogram or via an independent model that is supposed to; reflect reality). That will allow one to make plots like Glen has at the end of his DRAFT; very easily. . Function Members (Methods); public:. virtual~BernsteinCorrection(); RooStats::BernsteinCorrectionBernsteinCorrection(double tolerance = 0.05); RooStats::BernsteinCorrectionBernsteinCorrection(const RooStats::BernsteinCorrection&); static TClass*Class(); voidCreateQSamplingDist(RooWorkspace* wks, const char* nominalName, const char* varName, const char* dataName, TH1F*, TH1F*, Int_t degree, Int_t nToys = 500); Int_tImportCorrectedPdf(RooWorkspace*, const char*, const char*, const char*); virtual TClass*IsA() const; RooStats::BernsteinCorrection&operator=(const RooStats::BernsteinCorrection&); voidSetMaxCorrection(Double_t maxCorr); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. Double_tfMaxCorrectionmaximum correction factor at any point; Double_tfToleranceprobability to add an unecessary term. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BernsteinCorrection(Double_t tolerance). Int_t ImportCorrectedPdf(RooWorkspace* , const char* , c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__BernsteinCorrection.html:2605,toler,tolerance,2605,root/html528/RooStats__BernsteinCorrection.html,https://root.cern,https://root.cern/root/html528/RooStats__BernsteinCorrection.html,4,['toler'],['tolerance']
Availability,"e roughly ; \chi^2 with one degree of freedom if the n-th order correction is a good model for the data. ; Thus, one only moves to the n+1-th order correction of q is relatively large. The chance that ; one moves from the n-th to the n+1-th order correction when the n-th order correction ; (eg. a type 1 error) is sufficient is given by the Prob(\chi^2_1 > threshold). The constructor ; of this class allows you to directly set this tolerance (in terms of probability that the n+1-th; term is added unnecessarily). To do:; Add another method to the utility that will make the sampling distribution for -2 log lambda ; for various m vs. m+1 order corrections using a nominal model and perhaps having two ways of ; generating the toys (either via a histogram or via an independent model that is supposed to; reflect reality). That will allow one to make plots like Glen has at the end of his DRAFT; very easily. . Function Members (Methods); public:. virtual~BernsteinCorrection(); RooStats::BernsteinCorrectionBernsteinCorrection(double tolerance = 0.05); RooStats::BernsteinCorrectionBernsteinCorrection(const RooStats::BernsteinCorrection&); static TClass*Class(); voidCreateQSamplingDist(RooWorkspace* wks, const char* nominalName, const char* varName, const char* dataName, TH1F*, TH1F*, Int_t degree, Int_t nToys = 500); Int_tImportCorrectedPdf(RooWorkspace*, const char*, const char*, const char*); virtual TClass*IsA() const; RooStats::BernsteinCorrection&operator=(const RooStats::BernsteinCorrection&); voidSetMaxCorrection(Double_t maxCorr); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. Double_tfMaxCorrectionmaximum correction factor at any point; Double_tfToleranceprobability to add an unecessary term. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BernsteinCorrection(Double_t tolerance). Int_t ImportCorrectedPdf(RooWorkspace* , c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__BernsteinCorrection.html:2615,toler,tolerance,2615,root/html526/RooStats__BernsteinCorrection.html,https://root.cern,https://root.cern/root/html526/RooStats__BernsteinCorrection.html,1,['toler'],['tolerance']
Availability,"e roughly ; \chi^2 with one degree of freedom if the n-th order correction is a good model for the data. ; Thus, one only moves to the n+1-th order correction of q is relatively large. The chance that ; one moves from the n-th to the n+1-th order correction when the n-th order correction ; (eg. a type 1 error) is sufficient is given by the Prob(\chi^2_1 > threshold). The constructor ; of this class allows you to directly set this tolerance (in terms of probability that the n+1-th; term is added unnecessarily). To do:; Add another method to the utility that will make the sampling distribution for -2 log lambda ; for various m vs. m+1 order corrections using a nominal model and perhaps having two ways of ; generating the toys (either via a histogram or via an independent model that is supposed to; reflect reality). That will allow one to make plots like Glen has at the end of his DRAFT; very easily. . Function Members (Methods); public:. virtual~BernsteinCorrection(); RooStats::BernsteinCorrectionBernsteinCorrection(double tolerance = 0.05); RooStats::BernsteinCorrectionBernsteinCorrection(const RooStats::BernsteinCorrection&); static TClass*Class(); voidCreateQSamplingDist(RooWorkspace* wks, const char* nominalName, const char* varName, const char* dataName, TH1F*, TH1F*, Int_t degree, Int_t nToys = 500); Int_tImportCorrectedPdf(RooWorkspace*, const char*, const char*, const char*); virtual TClass*IsA() const; RooStats::BernsteinCorrection&operator=(const RooStats::BernsteinCorrection&); voidSetMaxCorrection(Double_t maxCorr); voidSetMaxDegree(Int_t maxDegree); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; private:. Double_tfMaxCorrectionmaximum correction factor at any point (default is 100); Int_tfMaxDegreemaximum polynomial degree correction (default is 10); Double_tfToleranceprobability to add an unnecessary term. Class Charts. Inheritance; Inherited Members; I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__BernsteinCorrection.html:2615,toler,tolerance,2615,root/html534/RooStats__BernsteinCorrection.html,https://root.cern,https://root.cern/root/html534/RooStats__BernsteinCorrection.html,2,['toler'],['tolerance']
Availability,"e roughly ; \chi^2 with one degree of freedom if the n-th order correction is a good model for the data. ; Thus, one only moves to the n+1-th order correction of q is relatively large. The chance that ; one moves from the n-th to the n+1-th order correction when the n-th order correction ; (eg. a type 1 error) is sufficient is given by the Prob(\chi^2_1 > threshold). The constructor ; of this class allows you to directly set this tolerance (in terms of probability that the n+1-th; term is added unnecessarily). To do:; Add another method to the utility that will make the sampling distribution for -2 log lambda ; for various m vs. m+1 order corrections using a nominal model and perhaps having two ways of ; generating the toys (either via a histogram or via an independent model that is supposed to; reflect reality). That will allow one to make plots like Glen has at the end of his DRAFT; very easily. . Function Members (Methods); public:. virtual~BernsteinCorrection(); RooStats::BernsteinCorrectionBernsteinCorrection(double tolerance = 0.050000000000000003); RooStats::BernsteinCorrectionBernsteinCorrection(const RooStats::BernsteinCorrection&); static TClass*Class(); voidCreateQSamplingDist(RooWorkspace* wks, const char* nominalName, const char* varName, const char* dataName, TH1F*, TH1F*, Int_t degree, Int_t nToys = 500); Int_tImportCorrectedPdf(RooWorkspace*, const char*, const char*, const char*); virtual TClass*IsA() const; RooStats::BernsteinCorrection&operator=(const RooStats::BernsteinCorrection&); voidSetMaxCorrection(Double_t maxCorr); voidSetMaxDegree(Int_t maxDegree); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; private:. Double_tfMaxCorrectionmaximum correction factor at any point (default is 100); Int_tfMaxDegreemaximum polynomial degree correction (default is 10); Double_tfToleranceprobability to add an unnecessary term. Class Charts. Inheri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__BernsteinCorrection.html:2615,toler,tolerance,2615,root/html602/RooStats__BernsteinCorrection.html,https://root.cern,https://root.cern/root/html602/RooStats__BernsteinCorrection.html,4,['toler'],['tolerance']
Availability,"e scaling beyond fFixR; Float_tTEveProjection::fPastFixZFacrelative scaling factor beyond fFixZ as 10^x; Float_tTEveProjection::fPastFixZScalerelative scaling beyond fFixZ; TEveProjection::vPreScale_tTEveProjection::fPreScales[3]scaling before the distortion; Float_tTEveProjection::fScaleRscale factor to keep projected radius at fFixR fixed; Float_tTEveProjection::fScaleZscale factor to keep projected z-coordinate at fFixZ fixed; TEveProjection::EPType_eTEveProjection::fTypetype; Bool_tTEveProjection::fUsePreScaleuse pre-scaling. private:. TEveVectorfProjectedCenterprojected center of distortion. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveRhoZProjection(); Constructor. void ProjectPoint(Float_t& x, Float_t& y, Float_t& z, Float_t d, TEveProjection::EPProc_e proc = kPP_Full); Project point. void SetCenter(TEveVector& v); Set center of distortion (virtual method). void SetDirectionalVector(Int_t screenAxis, TEveVector& vec); Get direction in the unprojected space for axis index in the; projected space.; This is virtual method from base-class TEveProjection. Bool_t AcceptSegment(TEveVector& v1, TEveVector& v2, Float_t tolerance) const; Check if segment of two projected points is valid. Move slightly one of the points if by shifting it by no more than; tolearance the segment can become acceptable. Int_t SubSpaceId(const TEveVector& v) const; Return sub-space id for the point.; 0 - upper half-space; 1 - lowwer half-space. Bool_t IsOnSubSpaceBoundrary(const TEveVector& v) const; Checks if point is on sub-space boundrary. Bool_t Is2D() const. Bool_t Is3D() const. Float_t* GetProjectedCenter(). Bool_t HasSeveralSubSpaces() const; { return kFALSE; }. TEveRhoZProjection(). virtual ~TEveRhoZProjection(); {}. » Last changed: root/eve:$Id$ » Last generated: 2015-06-02 15:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEveRhoZProjection.html:6598,toler,tolerance,6598,root/html604/TEveRhoZProjection.html,https://root.cern,https://root.cern/root/html604/TEveRhoZProjection.html,2,['toler'],['tolerance']
Availability,"e scaling beyond fFixR; Float_tTEveProjection::fPastFixZFacrelative scaling factor beyond fFixZ as 10^x; Float_tTEveProjection::fPastFixZScalerelative scaling beyond fFixZ; TEveProjection::vPreScale_tTEveProjection::fPreScales[3]scaling before the distortion; Float_tTEveProjection::fScaleRscale factor to keep projected radius at fFixR fixed; Float_tTEveProjection::fScaleZscale factor to keep projected z-coordinate at fFixZ fixed; TEveProjection::EPType_eTEveProjection::fTypetype; Bool_tTEveProjection::fUsePreScaleuse pre-scaling. private:. TEveVectorfProjectedCenterprojected center of distortion. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveRhoZProjection(); Constructor. void ProjectPoint(Float_t& x, Float_t& y, Float_t& z, Float_t d, TEveProjection::EPProc_e proc = kPP_Full); Project point. void SetCenter(TEveVector& v); Set center of distortion (virtual method). void SetDirectionalVector(Int_t screenAxis, TEveVector& vec); Get direction in the unprojected space for axis index in the; projected space.; This is virtual method from base-class TEveProjection. Bool_t AcceptSegment(TEveVector& v1, TEveVector& v2, Float_t tolerance) const; Check if segment of two projected points is valid. Move slightly one of the points if by shifting it by no more than; tolearance the segment can become acceptable. Int_t SubSpaceId(const TEveVector& v) const; Return sub-space id for the point.; 0 - upper half-space; 1 - lowwer half-space. Bool_t IsOnSubSpaceBoundrary(const TEveVector& v) const; Checks if point is on sub-space boundrary. Bool_t Is2D() const. Bool_t Is3D() const. Float_t* GetProjectedCenter(). Bool_t HasSeveralSubSpaces() const; { return kFALSE; }. TEveRhoZProjection(). virtual ~TEveRhoZProjection(); {}. » Last changed: root/eve:$Id$ » Last generated: 2015-06-30 14:46; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveRhoZProjection.html:6598,toler,tolerance,6598,root/html602/TEveRhoZProjection.html,https://root.cern,https://root.cern/root/html602/TEveRhoZProjection.html,2,['toler'],['tolerance']
Availability,"e searched. void * GetInterfaceMethodWithPrototype(TClass* cl, const char* method, const char* proto); Return pointer to CINT interface function for a method of a class with; a certain prototype, i.e. ""char*,int,float"". If the class is 0 the global; function list will be searched. const char * GetInterpreterTypeName(const char* name, Bool_t full = kFALSE); The 'name' is known to the interpreter, this function returns; the internal version of this name (usually just resolving typedefs); This is used in particular to synchronize between the name used; by rootcint and by the run-time enviroment (TClass); Return 0 if the name is not known. void Execute(const char* function, const char* params, int* error = 0); Execute a global function with arguments params. void Execute(TObject* obj, TClass* cl, const char* method, const char* params, int* error = 0); Execute a method from class cl with arguments params. void Execute(TObject* obj, TClass* cl, TMethod* method, TObjArray* params, int* error = 0); Execute a method from class cl with the arguments in array params; (params[0] ... params[n] = array of TObjString parameters). Long_t ExecuteMacro(const char* filename, TInterpreter::EErrorCode* error = 0); Execute a CINT macro. const char * GetTopLevelMacroName() const; Return the file name of the current un-included interpreted file.; See the documentation for GetCurrentMacroName(). const char * GetCurrentMacroName() const; Return the file name of the currently interpreted file,; included or not. Example to illustrate the difference between; GetCurrentMacroName() and GetTopLevelMacroName():. ; inclfile.h. #include <iostream>; void inclfunc() {; std::cout << ""In inclfile.h"" << std::endl;; std::cout << "" TCint::GetCurrentMacroName() returns "" <<; TCint::GetCurrentMacroName() << std::endl;; std::cout << "" TCint::GetTopLevelMacroName() returns "" <<; TCint::GetTopLevelMacroName() << std::endl;; }. mymacro.C. #include <iostream>; #include ""inclfile.h""; void mymacro() {; std::cout <<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TCint.html:26039,error,error,26039,root/html528/TCint.html,https://root.cern,https://root.cern/root/html528/TCint.html,4,['error'],['error']
Availability,"e sent (always sizeof(Int_t)) and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented from TSocket.; Definition at line 70 of file TServerSocket.h. ◆ Send() [4/4]. Int_t TServerSocket::Send ; (; Int_t ; status, . Int_t ; kind . ). inlineoverridevirtual . Send a status and a single message opcode. ; Use kind (opcode) to set the TMessage ""what"" field. Returns the number of bytes that were sent (always 2*sizeof(Int_t)) and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented from TSocket.; Definition at line 72 of file TServerSocket.h. ◆ SendObject(). Int_t TServerSocket::SendObject ; (; const TObject * ; obj, . Int_t ; kind = kMESS_OBJECT . ). inlineoverridevirtual . Send an object. ; Returns the number of bytes sent and -1 in case of error. In case the ""kind"" has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending synchronous. ; Reimplemented from TSocket.; Definition at line 76 of file TServerSocket.h. ◆ SendRaw(). Int_t TServerSocket::SendRaw ; (; const void * ; buffer, . Int_t ; length, . ESendRecvOptions ; opt = kDefault . ). inlineoverridevirtual . Send a raw buffer of specified length. ; Using option kOob one can send OOB data. Returns the number of bytes sent or -1 in case of error. Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Reimplemented from TSocket.; Definition at line 78 of file TServerSocket.h. ◆ SetAcceptOptions(). void TServerSocket::SetAcceptOptions ; (; UChar_t ; mod). static . Set default options for Accept according to modifier 'mod'. ; Use: kSrvAuth require client authentication kSrvNoAuth do not require client authentication ; Def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTServerSocket.html:29944,error,error,29944,doc/master/classTServerSocket.html,https://root.cern,https://root.cern/doc/master/classTServerSocket.html,1,['error'],['error']
Availability,"e shown in class A with a blue line; crossing-out the corresponding member function.; The following picture is the class inheritance tree of class TPaveLabel:. /*; ; */. TObject * DrawClone(Option_t* option = """") const; Draw a clone of this object in the current pad. void Dump() const; Dump contents of object on stdout.; Using the information in the object dictionary (class TClass); each data member is interpreted.; If a data member is a pointer, the pointer value is printed. The following output is the Dump of a TArrow object:; fAngle 0 Arrow opening angle (degrees); fArrowSize 0.2 Arrow Size; fOption.*fData; fX1 0.1 X of 1st point; fY1 0.15 Y of 1st point; fX2 0.67 X of 2nd point; fY2 0.83 Y of 2nd point; fUniqueID 0 object unique identifier; fBits 50331648 bit field status word; fLineColor 1 line color; fLineStyle 1 line style; fLineWidth 1 line width; fFillColor 19 fill area color; fFillStyle 1001 fill area style. void Execute(const char* method, const char* params, Int_t* error = 0); Execute method on this object with the given parameter string, e.g.; ""3.14,1,\""text\"""". void Execute(TMethod* method, TObjArray* params, Int_t* error = 0); Execute method on this object with parameters stored in the TObjArray.; The TObjArray should contain an argv vector like:. argv[0] ... argv[n] = the list of TObjString parameters. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to an event at (px,py). This method; must be overridden if an object can react to graphics events. TObject * FindObject(const char* name) const; Must be redefined in derived classes.; This function is typycally used with TCollections, but can also be used; to find an object by name inside this object. TObject * FindObject(const TObject* obj) const; Must be redefined in derived classes.; This function is typycally used with TCollections, but can also be used; to find an object inside this object. Option_t * GetDrawOption() const; Get option used by the graphics system to dr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TObject.html:8518,error,error,8518,root/html528/TObject.html,https://root.cern,https://root.cern/root/html528/TObject.html,10,['error'],['error']
Availability,"e size of the box is proportional to the absolute value of the cell contents. The cells with negative contents are drawn with an X on top of the boxes. With option BOX1 a button is drawn for each cell with surface proportional to contents’ absolute value. A sunken button is drawn for negative values, a raised one for positive values.; 3.8.2.4 The ERRor Bars Options. ""E"" Default. Draw only error bars, without markers; ""E0"" Draw also bins with 0 contents (turn off the symbols clipping).; ""E1"" Draw small lines at the end of error bars; ""E2"" Draw error rectangles; ""E3"" Draw a fill area through the end points of vertical error bars; ""E4"" Draw a smoothed filled area through the end points of error bars. The “E1” bars’ option. Note that for all options, the line and fill attributes of the histogram are used for the errors or errors contours. Use gStyle->SetErrorX(dx) to control the size of the error along x. The parameter dx is a percentage of bin width for errors along X. Set dx=0 to suppress the error along X. Use gStyle->SetEndErrorSize(np) to control the size of the lines at the end of the error bars (when option 1 is used). By default np=1 (np represents the number of pixels).; 3.8.2.5 The Color Option; For each cell (i,j) a box is drawn with a color proportional to the cell content. The color table used is defined in the current style (gStyle ). The color palette in TStyle can be modified with TStyle::SetPalette . Different draw options. 3.8.2.6 The TEXT Option; For each cell (i,j) the cell content is printed. The text attributes are:. Text font = current font set by TStyle; Text size= 0.02 * pad-height * marker-size; Text color= marker color. The TEXT option. 3.8.2.7 The CONTour Options; The following contour options are supported:. ""CONT"": Draw a contour plot (same as CONT0); ""CONT0"": Draw a contour plot using surface colors to distinguish contours; ""CONT1"": Draw a contour plot using line styles to distinguish contours; ""CONT2"": Draw a contour plot using the same l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:91799,error,error,91799,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['error'],['error']
Availability,"e sizes (physical) of the transform in each dimension. ~TFFTReal(); clean-up. void Init(Option_t* flags, Int_t sign, const Int_t* kind); Creates the fftw-plan. NOTE: input and output arrays are overwritten during initialisation,; so don't set any points, before running this function!!!!!. 1st parameter:; Possible flag_options:; ""ES"" (from ""estimate"") - no time in preparing the transform, but probably sub-optimal; performance; ""M"" (from ""measure"") - some time spend in finding the optimal way to do the transform; ""P"" (from ""patient"") - more time spend in finding the optimal way to do the transform; ""EX"" (from ""exhaustive"") - the most optimal way is found; This option should be chosen depending on how many transforms of the same size and; type are going to be done. Planning is only done once, for the first transform of this; size and type.; 2nd parameter is dummy and doesn't need to be specified; 3rd parameter- transform kind for each dimension; 4 different kinds of sine and cosine transforms are available; DCT-I - kind=0; DCT-II - kind=1; DCT-III - kind=2; DCT-IV - kind=3; DST-I - kind=4; DST-II - kind=5; DSTIII - kind=6; DSTIV - kind=7. void Transform(); Computes the transform, specified in Init() function. Option_t * GetType() const; Returns the type of the transform. void GetPoints(Double_t* data, Bool_t fromInput = kFALSE) const; Copies the output (or input) points into the provided array, that should; be big enough. Double_t GetPointReal(Int_t ipoint, Bool_t fromInput = kFALSE) const; For 1d tranforms. Returns point #ipoint. Double_t GetPointReal(const Int_t* ipoint, Bool_t fromInput = kFALSE) const; For multidim.transforms. Returns point #ipoint. void GetPointComplex(Int_t ipoint, Double_t& re, Double_t& im, Bool_t fromInput = kFALSE) const; Only for input of HC2R and output of R2HC. void GetPointComplex(const Int_t* ipoint, Double_t& re, Double_t& im, Bool_t fromInput = kFALSE) const; Only for input of HC2R and output of R2HC and for 1d. Double_t* GetPointsReal(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFFTReal.html:10364,avail,available,10364,root/html528/TFFTReal.html,https://root.cern,https://root.cern/root/html528/TFFTReal.html,10,['avail'],['available']
Availability,"e some hierarchy, one has to create several other volumes and the matrices to position them. Once this is done, use the volume editor interface to:. add/remove daughters, change shape, edit position of daughters; change visualization settings; divide the volume (only if there are no daughters yet). Close the geometry from the “General” category. 19 Python Interface. Python is a popular, open-source, dynamic programming language with an interactive interpreter. Its interoperability with other programming languages, both for extending Python as well as embedding it, is excellent and many existing third-party applications and libraries have therefore so-called “Python bindings.” PyROOT provides Python bindings for ROOT: it enables cross-calls from ROOT/Cling into Python and vice versa, the intermingling of the two interpreters, and the transport of user-level objects from one interpreter to the other. PyROOT enables access from ROOT to any application or library that itself has Python bindings, and it makes all ROOT functionality directly available from the python interpreter.; 19.1 PyROOT Overview; The Python scripting language is widely used for scientific programming, including high performance and distributed parallel code (see http://www.scipy.org). It is the second most popular scripting language (after Perl) and enjoys a wide-spread use as a “glue language”: practically every library and application these days comes with Python bindings (and if not, they can be easily written or generated).; PyROOT, a Python extension module, provides the bindings for the ROOT class library in a generic way using the Cling dictionary. This way, it allows the use of any ROOT classes from the Python interpreter, and thus the “glue-ing” of ROOT libraries with any non-ROOT library or applications that provide Python bindings. Further, PyROOT can be loaded into the Cling interpreter to allow (as of now still rudimentary) access to Python classes. The best way to understand the benefit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1041866,avail,available,1041866,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['avail'],['available']
Availability,"e specified drawable. id - specifies which screen the pixmap is created on; bitmap - the data in bitmap format; width, height - define the dimensions of the pixmap; forecolor - the foreground pixel values to use; backcolor - the background pixel values to use; depth - the depth of the pixmap. Pixmap_t CreateBitmap(Drawable_t id, const char* bitmap, UInt_t width, UInt_t height); Creates a bitmap (i.e. pixmap with depth 1) from the bitmap data. id - specifies which screen the pixmap is created on; bitmap - the data in bitmap format; width, height - define the dimensions of the pixmap. void DeletePixmap(Pixmap_t pmap); Explicitely deletes the pixmap resource ""pmap"". Bool_t CreatePictureFromFile(Drawable_t id, const char* filename, Pixmap_t& pict, Pixmap_t& pict_mask, PictureAttributes_t& attr); Creates a picture pict from data in file ""filename"". The picture; attributes ""attr"" are used for input and output. Returns kTRUE in; case of success, kFALSE otherwise. If the mask ""pict_mask"" does not; exist it is set to kNone. Bool_t CreatePictureFromData(Drawable_t id, char** data, Pixmap_t& pict, Pixmap_t& pict_mask, PictureAttributes_t& attr); Creates a picture pict from data in bitmap format. The picture; attributes ""attr"" are used for input and output. Returns kTRUE in; case of success, kFALSE otherwise. If the mask ""pict_mask"" does not; exist it is set to kNone. Bool_t ReadPictureDataFromFile(const char* filename, char*** ret_data); Reads picture data from file ""filename"" and store it in ""ret_data"".; Returns kTRUE in case of success, kFALSE otherwise. void DeletePictureData(void* data); Delete picture data created by the function ReadPictureDataFromFile. void SetDashes(GContext_t gc, Int_t offset, const char* dash_list, Int_t n); Sets the dash-offset and dash-list attributes for dashed line styles; in the specified GC. There must be at least one element in the; specified dash_list. The initial and alternating elements (second,; fourth, and so on) of the dash_list are the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualX.html:43417,mask,mask,43417,root/html528/TVirtualX.html,https://root.cern,https://root.cern/root/html528/TVirtualX.html,10,['mask'],['mask']
Availability,"e specified file. ; If the fInputData is empty the specified file is sent over. If there is no specified file, a file named ""inputdata.root"" is created locally with the content of fInputData and sent over to the master. If both fInputData and the specified file are not empty, a copy of the file is made locally and augmented with the content of fInputData. ; Reimplemented in TProofLite.; Definition at line 9612 of file TProof.cxx. ◆ SendLogToWindow(). void TProof::SendLogToWindow ; (; Bool_t ; mode). inline . Definition at line 1017 of file TProof.h. ◆ SendObject(). Int_t TProof::SendObject ; (; const TObject * ; obj, . ESlaves ; list = kActive . ). private . Send object to master or slave servers. ; Returns number of slaves object was sent to, -1 in case of error. ; Definition at line 7054 of file TProof.cxx. ◆ SendPrint(). Int_t TProof::SendPrint ; (; Option_t * ; option = """"). private . Send print command to master server. ; Returns number of slaves message was sent to. Returns -1 in case of error. ; Definition at line 7068 of file TProof.cxx. ◆ SetActive(). void TProof::SetActive ; (; Bool_t ; = kTRUE). inline . Definition at line 988 of file TProof.h. ◆ SetAlias(). void TProof::SetAlias ; (; const char * ; alias = """"). virtual . Set an alias for this session. ; If reconnection is supported, the alias will be communicated to the remote coordinator so that it can be recovered when reconnecting ; Definition at line 10583 of file TProof.cxx. ◆ SetDataPoolUrl(). void TProof::SetDataPoolUrl ; (; const char * ; url). inline . Definition at line 1044 of file TProof.h. ◆ SetDataSetTreeName(). Int_t TProof::SetDataSetTreeName ; (; const char * ; dataset, . const char * ; treename . ). virtual . Set/Change the name of the default tree. ; The tree name may contain subdir specification in the form ""subdir/name"". Returns 0 on success, -1 otherwise. ; Reimplemented in TProofLite.; Definition at line 10766 of file TProof.cxx. ◆ SetDrawFeedbackOption(). void TProof::SetDrawFeedba",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:141311,error,error,141311,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['error'],['error']
Availability,"e specified in the Fill argument. The method used is to double the bin size until the new value fits in the range, merging bins two by two. This automatic binning options is extensively used by the TTree::Draw function when histogramming Tree variables with an unknown range. This automatic binning option is supported for 1-D, 2-D and 3-D histograms.; During filling, some statistics parameters are incremented to compute the mean value and Root Mean Square with the maximum precision.; In case of histograms of type TH1C, TH1S, TH2C, TH2S, TH3C, TH3S a check is made that the bin contents do not exceed the maximum positive capacity (127 or 32767). Histograms of all types may have positive or/and negative bin contents. Associated errors; By default, for each bin, the sum of weights is computed at fill time. One can also call TH1::Sumw2 to force the storage and computation of the sum of the square of weights per bin. If Sumw2 has been called, the error per bin is computed as the sqrt(sum of squares of weights), otherwise the error is set equal to the sqrt(bin content). To return the error for a given bin number, do: Double_t error = h->GetBinError(bin);. Associated functions; One or more object (typically a TF1*) can be added to the list of functions (fFunctions) associated to each histogram. When TH1::Fit is invoked, the fitted function is added to this list. Given a histogram h, one can retrieve an associated function with: TF1 *myfunc = h->GetFunction(""myfunc"");; TF11-Dim function classDefinition TF1.h:233. Operations on histograms; Many types of operations are supported on histograms or between histograms. Addition of a histogram to the current histogram.; Additions of two histograms with coefficients and storage into the current histogram.; Multiplications and Divisions are supported in the same way as additions.; The Add, Divide and Multiply functions also exist to add, divide or multiply a histogram by a function. If a histogram has associated error bars (TH1::Sumw2 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:13288,error,error,13288,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,2,['error'],['error']
Availability,"e specified list (either; all slaves or only the active slaves). Returns the number of slaves; the message was successfully sent to. Returns -1 in case of error. Int_t Broadcast(const char* mess, Int_t kind, TList* slaves); Broadcast a character string buffer to all slaves in the specified; list. Use kind to set the TMessage what field. Returns the number of; slaves the message was sent to. Returns -1 in case of error. Int_t Broadcast(const char* mess, Int_t kind = kMESS_STRING, TProof::ESlaves list = kActive); Broadcast a character string buffer to all slaves in the specified; list (either all slaves or only the active slaves). Use kind to; set the TMessage what field. Returns the number of slaves the message; was sent to. Returns -1 in case of error. Int_t BroadcastObject(const TObject* obj, Int_t kind, TList* slaves); Broadcast an object to all slaves in the specified list. Use kind to; set the TMEssage what field. Returns the number of slaves the message; was sent to. Returns -1 in case of error. Int_t BroadcastObject(const TObject* obj, Int_t kind = kMESS_OBJECT, TProof::ESlaves list = kActive); Broadcast an object to all slaves in the specified list. Use kind to; set the TMEssage what field. Returns the number of slaves the message; was sent to. Returns -1 in case of error. Int_t BroadcastRaw(const void* buffer, Int_t length, TList* slaves); Broadcast a raw buffer of specified length to all slaves in the; specified list. Returns the number of slaves the buffer was sent to.; Returns -1 in case of error. Int_t BroadcastRaw(const void* buffer, Int_t length, TProof::ESlaves list = kActive); Broadcast a raw buffer of specified length to all slaves in the; specified list. Returns the number of slaves the buffer was sent to.; Returns -1 in case of error. Int_t BroadcastFile(const char* file, Int_t opt, const char* rfile, TList* wrks); Broadcast file to all workers in the specified list. Returns the number of workers; the buffer was sent to.; Returns -1 in case of erro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:40224,error,error,40224,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,10,['error'],['error']
Availability,"e specified output stream. ;  ; void printValue (std::ostream &os) const override;  Print value of the dataset, i.e. the sum of weights contained in the dataset. ;  ; void SetName (const char *name) override;  Change the name of this dataset into the given name. ;  ; void SetNameTitle (const char *name, const char *title) override;  Change the title of this dataset into the given name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class RooDataSet. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; double sumEntries () const override;  Return effective number of entries in dataset, i.e., sum all weights. ;  ; double sumEntries (const char *cutSpec, const char *cutRange=nullptr) const override;  Return the sum of weights in all entries matching cutSpec (if specified) and in named range cutRange (if specified) ;  ; double weight () const override;  Return event weight of current event. ;  ; void weightError (double &lo, double &hi, ErrorType etype=SumW2) const override;  Return the asymmetric errors on the current weight. ;  ; double weightError (ErrorType etype=SumW2) const override;  ; double weightSquared () const override;  Return squared event weight of the current event. ;  ; RooRealVar * weightVar () const;  Returns a pointer to the weight variable (if set). ;  ; bool write (const char *filename) const;  Write the contents of this dataset to an ASCII file with the specified name. ;  ; bool write (std::ostream &ofs) const;  Write the contents of this dataset to the stream. ;  ;  Public Member Functions inherited from RooAbsData;  RooAbsData ();  Default constructor. ;  ;  RooAbsData (const RooAbsData &other, const char *newname=nullptr);  Copy constructor. ;  ;  RooAbsData (RooStringView name, RooStringView title, const RooArgSet &vars, RooAbsDataStore *store=nullptr);  Constructor from a set of variables. ;  ;  ~RooAbsData () override;  Destructor. ;  ; void addOwnedComponent (const char *idxlabel, RooAbsData &data);  ; void at",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataSet.html:8585,error,errors,8585,doc/master/classRooDataSet.html,https://root.cern,https://root.cern/doc/master/classRooDataSet.html,1,['error'],['errors']
Availability,"e step)=0set a new free variable; ROOT::Math::Minimizer::FixVariablevirtual bool FixVariable(unsigned int ivar)fix an existing variableDefinition Minimizer.cxx:87; ROOT::Math::Minimizer::SetFixedVariablevirtual bool SetFixedVariable(unsigned int ivar, const std::string &name, double val)set a new fixed variable (override if minimizer supports them )Definition Minimizer.cxx:44; ROOT::Math::Minimizer::GetMinosErrorvirtual bool GetMinosError(unsigned int ivar, double &errLow, double &errUp, int option=0)minos error for variable i, return false if Minos failed or not supported and the lower and upper err...Definition Minimizer.cxx:172; ROOT::Math::Minimizer::SetVariableLowerLimitvirtual bool SetVariableLowerLimit(unsigned int ivar, double lower)set the lower-limit of an already existing variableDefinition Minimizer.cxx:70; ROOT::Math::Minimizer::IsFixedVariablevirtual bool IsFixedVariable(unsigned int ivar) constquery if an existing variable is fixed (i.e.Definition Minimizer.cxx:102; ROOT::Math::Minimizer::ReleaseVariablevirtual bool ReleaseVariable(unsigned int ivar)release an existing variableDefinition Minimizer.cxx:94; ROOT::Math::Minimizer::Hessevirtual bool Hesse()perform a full calculation of the Hessian matrix for error calculationDefinition Minimizer.cxx:185; ROOT::Math::Minimizer::Contourvirtual bool Contour(unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj)find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The c...Definition Minimizer.cxx:211; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; MathNamespace for new Math classes and functions.; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathmathcoresrcMinimizer.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Minimizer_8cxx_source.html:13650,error,error,13650,doc/master/Minimizer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Minimizer_8cxx_source.html,1,['error'],['error']
Availability,"e strategy; 344 void SetStrategy(int strategyLevel) { fOptions.SetStrategy(strategyLevel); }; 345 ; 346 /// set scale for calculating the errors; 347 void SetErrorDef(double up) { fOptions.SetErrorDef(up); }; 348 ; 349 /// flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit); 350 void SetValidError(bool on) { fValidError = on; }; 351 ; 352 /// set all options in one go; 353 void SetOptions(const MinimizerOptions & opt) {; 354 fOptions = opt;; 355 }; 356 ; 357 /// set only the extra options; 358 void SetExtraOptions(const IOptions & extraOptions) { fOptions.SetExtraOptions(extraOptions); }; 359 ; 360 /// reset the default options (defined in MinimizerOptions); 361 void SetDefaultOptions() {; 362 fOptions.ResetToDefaultOptions();; 363 }; 364 ; 365protected:; 366 ; 367 // keep protected to be accessible by the derived classes; 368 ; 369 bool fValidError = false; ///< flag to control if errors have been validated (Hesse has been run in case of Minuit); 370 MinimizerOptions fOptions; ///< minimizer options; 371 int fStatus = -1; ///< status of minimizer; 372};; 373 ; 374 } // end namespace Math; 375 ; 376} // end namespace ROOT; 377 ; 378 ; 379#endif /* ROOT_Math_Minimizer */; IFunction.h; MinimizerOptions.h; RSpan.hxx; onOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void onDefinition TGWin32VirtualXProxy.cxx:106; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; namechar name[80]Definition TGX11.cxx:110; xminfloat xminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; ROOT::Fit::ParameterSettingsClass, describing value, limits and step size of the parameters Provides functionality also to set/re...Definition ParameterSettings.h:33; ROOT::Math::IB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Minimizer_8h_source.html:16354,error,errors,16354,doc/master/Minimizer_8h_source.html,https://root.cern,https://root.cern/doc/master/Minimizer_8h_source.html,1,['error'],['errors']
Availability,"e stride2 the stride in dimension space.; For 1-dim points : stride1=1, stride2=1; for multi-dim points arranged as (x0,x1,...,xN,y0,....yN) stride1=1 stride2=n; for multi-dim points arraged as (x0,y0,..,x1,y1,...,xN,yN,..) stride1=ndim, stride2=1. the confidence interval are returned in the array ci; cl is the desired confidedence interval value; norm is a flag to control if the intervals need to be normalized to the chi2/ndf value; By default the intervals are corrected using the chi2/ndf value of the fit if a chi2 fit is performed. void GetConfidenceIntervals(const ROOT::Fit::BinData& data, double* ci, double cl = 0.95, bool norm = true) const. evaluate confidence interval for the point specified in the passed data sets; the confidence interval are returned in the array ci; cl is the desired confidence interval value. int Index(const string& name) const; get index for parameter name (return -1 if not found). void NormalizeErrors(); normalize errors using chi2/ndf for chi2 fits. bool NormalizedErrors() const; flag to chek if errors are normalized. { return fNormalized; }. void Print(ostream& os, bool covmat = false) const; print the result and optionaly covariance matrix and correlations. void PrintCovMatrix(ostream& os) const; print error matrix and correlations. bool IsParameterBound(unsigned int ipar) const; query if a parameter is bound. bool IsParameterFixed(unsigned int ipar) const; query if a parameter is fixed. std::string GetParameterName(unsigned int ipar) const; get name of parameter (deprecated). void SetModelFunction(ROOT::Fit::FitResult::IModelFunction* func); { fFitFunc = func; }. » Author: L. Moneta Wed Aug 30 11:05:34 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: FitResult.h 39474 2011-05-30 07:48:13Z moneta $ » Last generated: 2011-07-04 15:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Fit__FitResult.html:10695,error,errors,10695,root/html530/ROOT__Fit__FitResult.html,https://root.cern,https://root.cern/root/html530/ROOT__Fit__FitResult.html,2,['error'],"['error', 'errors']"
Availability,"e stride2 the stride in dimension space.; For 1-dim points : stride1=1, stride2=1; for multi-dim points arranged as (x0,x1,...,xN,y0,....yN) stride1=1 stride2=n; for multi-dim points arraged as (x0,y0,..,x1,y1,...,xN,yN,..) stride1=ndim, stride2=1. the confidence interval are returned in the array ci; cl is the desired confidedence interval value; norm is a flag to control if the intervals need to be normalized to the chi2/ndf value; By default the intervals are corrected using the chi2/ndf value of the fit if a chi2 fit is performed. void GetConfidenceIntervals(const ROOT::Fit::BinData& data, double* ci, double cl = 0.95, bool norm = true) const. evaluate confidence interval for the point specified in the passed data sets; the confidence interval are returned in the array ci; cl is the desired confidence interval value. int Index(const string& name) const; get index for parameter name (return -1 if not found). void NormalizeErrors(); normalize errors using chi2/ndf for chi2 fits. bool NormalizedErrors() const; flag to chek if errors are normalized. { return fNormalized; }. void Print(ostream& os, bool covmat = false) const; print the result and optionaly covariance matrix and correlations. void PrintCovMatrix(ostream& os) const; print error matrix and correlations. bool IsParameterBound(unsigned int ipar) const; query if a parameter is bound. bool IsParameterFixed(unsigned int ipar) const; query if a parameter is fixed. std::string GetParameterName(unsigned int ipar) const; get name of parameter (deprecated). void SetModelFunction(ROOT::Fit::FitResult::IModelFunction* func); { fFitFunc = func; }. » Author: L. Moneta Wed Aug 30 11:05:34 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: FitResult.h 39474 2011-05-30 07:48:13Z moneta $ » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Fit__FitResult.html:10695,error,errors,10695,root/html532/ROOT__Fit__FitResult.html,https://root.cern,https://root.cern/root/html532/ROOT__Fit__FitResult.html,4,['error'],"['error', 'errors']"
Availability,e structure to store sum of squares of weights per bin. ; This is needed to compute the correct statistical quantities of a profile filled with weights; This function is automatically called when the histogram is created if the static function TH1::SetDefaultSumw2 has been called before. If flag is false the structure is deleted ; Reimplemented from TH1.; Definition at line 1825 of file TProfile.cxx. Friends And Related Symbol Documentation. ◆ TH1Merger. friend class TH1Merger. friend . Definition at line 36 of file TProfile.h. ◆ TProfileHelper. friend class TProfileHelper. friend . Definition at line 35 of file TProfile.h. Member Data Documentation. ◆ fBinEntries. TArrayD TProfile::fBinEntries. protected . number of entries per bin ; Definition at line 39 of file TProfile.h. ◆ fBinSumw2. TArrayD TProfile::fBinSumw2. protected . Array of sum of squares of weights per bin. ; Definition at line 46 of file TProfile.h. ◆ fErrorMode. EErrorType TProfile::fErrorMode. protected . Option to compute errors. ; Definition at line 40 of file TProfile.h. ◆ fgApproximate. Bool_t TProfile::fgApproximate = kFALSE. staticprotected . bin error approximation option ; Definition at line 48 of file TProfile.h. ◆ fScaling. Bool_t TProfile::fScaling. protected . ! True when TProfile::Scale is called ; Definition at line 43 of file TProfile.h. ◆ fTsumwy. Double_t TProfile::fTsumwy. protected . Total Sum of weight*Y. ; Definition at line 44 of file TProfile.h. ◆ fTsumwy2. Double_t TProfile::fTsumwy2. protected . Total Sum of weight*Y*Y. ; Definition at line 45 of file TProfile.h. ◆ fYmax. Double_t TProfile::fYmax. protected . Upper limit in Y (if set) ; Definition at line 42 of file TProfile.h. ◆ fYmin. Double_t TProfile::fYmin. protected . Lower limit in Y (if set) ; Definition at line 41 of file TProfile.h. Libraries for TProfile:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TProfile.h; hist/hist/src/TProfile.cxx. TProfile. ROOT master,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile.html:90590,error,errors,90590,doc/master/classTProfile.html,https://root.cern,https://root.cern/doc/master/classTProfile.html,1,['error'],['errors']
Availability,"e that generates numEntries entries.; 1637/// \param[in] numEntries The number of entries to generate.; 1638///; 1639/// An empty-source dataframe constructed with a number of entries will; 1640/// generate those entries on the fly when some action is triggered,; 1641/// and it will do so for all the previously-defined columns.; 1642/// \see ROOT::RDF::RInterface for the documentation of the methods available.; 1643RDataFrame::RDataFrame(ULong64_t numEntries); 1644 : RInterface(std::make_shared<RDFDetail::RLoopManager>(numEntries)); 1645 ; 1646{; 1647}; 1648 ; 1649//////////////////////////////////////////////////////////////////////////; 1650/// \brief Build dataframe associated to data source.; 1651/// \param[in] ds The data source object.; 1652/// \param[in] defaultColumns Collection of default column names to fall back to when none is specified.; 1653///; 1654/// A dataframe associated to a data source will query it to access column values.; 1655/// \see ROOT::RDF::RInterface for the documentation of the methods available.; 1656RDataFrame::RDataFrame(std::unique_ptr<ROOT::RDF::RDataSource> ds, const ColumnNames_t &defaultColumns); 1657 : RInterface(std::make_shared<RDFDetail::RLoopManager>(std::move(ds), defaultColumns)); 1658{; 1659}; 1660 ; 1661//////////////////////////////////////////////////////////////////////////; 1662/// \brief Build dataframe from an RDatasetSpec object.; 1663/// \param[in] spec The dataset specification object.; 1664///; 1665/// A dataset specification includes trees and file names,; 1666/// as well as an optional friend list and/or entry range.; 1667///; 1668/// ### Example usage from Python:; 1669/// ~~~{.py}; 1670/// spec = (; 1671/// ROOT.RDF.Experimental.RDatasetSpec(); 1672/// .AddSample((""data"", ""tree"", ""file.root"")); 1673/// .WithGlobalFriends(""friendTree"", ""friend.root"", ""alias""); 1674/// .WithGlobalRange((100, 200)); 1675/// ); 1676/// df = ROOT.RDataFrame(spec); 1677/// ~~~; 1678///; 1679/// See also ROOT::RDataFrame::FromSp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:92824,avail,available,92824,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['avail'],['available']
Availability,"e that generates numEntries entries.; 1814/// \param[in] numEntries The number of entries to generate.; 1815///; 1816/// An empty-source dataframe constructed with a number of entries will; 1817/// generate those entries on the fly when some action is triggered,; 1818/// and it will do so for all the previously-defined columns.; 1819/// \see ROOT::RDF::RInterface for the documentation of the methods available.; 1820RDataFrame::RDataFrame(ULong64_t numEntries); 1821 : RInterface(std::make_shared<RDFDetail::RLoopManager>(numEntries)); 1822 ; 1823{; 1824}; 1825 ; 1826//////////////////////////////////////////////////////////////////////////; 1827/// \brief Build dataframe associated to data source.; 1828/// \param[in] ds The data source object.; 1829/// \param[in] defaultColumns Collection of default column names to fall back to when none is specified.; 1830///; 1831/// A dataframe associated to a data source will query it to access column values.; 1832/// \see ROOT::RDF::RInterface for the documentation of the methods available.; 1833RDataFrame::RDataFrame(std::unique_ptr<ROOT::RDF::RDataSource> ds, const ColumnNames_t &defaultColumns); 1834 : RInterface(std::make_shared<RDFDetail::RLoopManager>(std::move(ds), defaultColumns)); 1835{; 1836}; 1837 ; 1838//////////////////////////////////////////////////////////////////////////; 1839/// \brief Build dataframe from an RDatasetSpec object.; 1840/// \param[in] spec The dataset specification object.; 1841///; 1842/// A dataset specification includes trees and file names,; 1843/// as well as an optional friend list and/or entry range.; 1844///; 1845/// ### Example usage from Python:; 1846/// ~~~{.py}; 1847/// spec = (; 1848/// ROOT.RDF.Experimental.RDatasetSpec(); 1849/// .AddSample((""data"", ""tree"", ""file.root"")); 1850/// .WithGlobalFriends(""friendTree"", ""friend.root"", ""alias""); 1851/// .WithGlobalRange((100, 200)); 1852/// ); 1853/// df = ROOT.RDataFrame(spec); 1854/// ~~~; 1855///; 1856/// See also ROOT::RDataFrame::FromSp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:100663,avail,available,100663,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['avail'],['available']
Availability,"e that in case of only dense layer the input layout could be omitted but it is required when defining more; # complex architectures; ; # - **layer layout** string defining the layer architecture. The syntax is; # - layer type (e.g. DENSE, CONV, RNN); # - layer parameters (e.g. number of units); # - activation function (e.g TANH, RELU,...); ; # *the different layers are separated by the ``"",""`` *; ; #### 2. Define Training Strategy; ; # We define here the training strategy parameters for the DNN. The parameters are separated by the ``"",""`` separator.; # One can then concatenate different training strategy with different parameters. The training strategy are separated by; # the ``""|""`` separator.; ; # - Optimizer; # - Learning rate; # - Momentum (valid for SGD and RMSPROP); # - Regularization and Weight Decay; # - Dropout; # - Max number of epochs; # - Convergence steps. if the test error will not decrease after that value the training will stop; # - Batch size (This value must be the same specified in the input layout); # - Test Repetitions (the interval when the test error will be computed); ; ; #### 3. Define general DNN options; ; # We define the general DNN options concatenating in the final string the previously defined layout and training strategy.; # Note we use the ``"":""`` separator to separate the different higher level options, as in the other TMVA methods.; # In addition to input layout, batch layout and training strategy we add now:; ; # - Type of Loss function (e.g. CROSSENTROPY); # - Weight Initizalization (e.g XAVIER, XAVIERUNIFORM, NORMAL ); # - Variable Transformation; # - Type of Architecture (e.g. CPU, GPU, Standard); ; # We can then book the DL method using the built option string; if useDL:; useDLGPU = ROOT.gSystem.GetFromPipe(""root-config --has-tmva-gpu"") == ""yes""; ; # Define DNN layout; # Define Training strategies; # one can catenate several training strategies; training1 = ROOT.TString(; ""LearningRate=1e-3,Momentum=0.9,""; ""ConvergenceSteps=10,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:64319,error,error,64319,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,2,['error'],['error']
Availability,"e that indpar = {0,1,2,....,fNpar-1}. void SetMaximum(Double_t maximum = -1111); Set the maximum value along Y for this function; In case the function is already drawn, set also the maximum in the; helper histogram. void SetMinimum(Double_t minimum = -1111); Set the minimum value along Y for this function; In case the function is already drawn, set also the minimum in the; helper histogram. void SetNDF(Int_t ndf); Set the number of degrees of freedom; ndf should be the number of points used in a fit - the number of free parameters. void SetNpx(Int_t npx = 100); Set the number of points used to draw the function. The default number of points along x is 100 for 1-d functions and 30 for 2-d/3-d functions; You can increase this value to get a better resolution when drawing; pictures with sharp peaks or to get a better result when using TF1::GetRandom; the minimum number of points is 4, the maximum is 10000000 for 1-d and 10000 for 2-d/3-d functions. void SetParError(Int_t ipar, Double_t error); Set error for parameter number ipar. void SetParErrors(const Double_t* errors); Set errors for all active parameters; when calling this function, the array errors must have at least fNpar values. void SetParLimits(Int_t ipar, Double_t parmin, Double_t parmax); Set limits for parameter ipar. The specified limits will be used in a fit operation; when the option ""B"" is specified (Bounds).; To fix a parameter, use TF1::FixParameter. void SetRange(Double_t xmin, Double_t xmax); Initialize the upper and lower bounds to draw the function. The function range is also used in an histogram fit operation; when the option ""R"" is specified. void SetSavedPoint(Int_t point, Double_t value); Restore value of function saved at point. void SetTitle(const char* title = """"); Set function title; if title has the form ""fffffff;xxxx;yyyy"", it is assumed that; the function title is ""fffffff"" and ""xxxx"" and ""yyyy"" are the; titles for the X and Y axis respectively. void Streamer(TBuffer& ); Stream a class o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TF1.html:61959,error,error,61959,root/html534/TF1.html,https://root.cern,https://root.cern/root/html534/TF1.html,8,['error'],['error']
Availability,"e that indpar = {0,1,2,....,fNpar-1}. void SetMaximum(Double_t maximum = -1111); Set the maximum value along Y for this function; In case the function is already drawn, set also the maximum in the; helper histogram. void SetMinimum(Double_t minimum = -1111); Set the minimum value along Y for this function; In case the function is already drawn, set also the minimum in the; helper histogram. void SetNDF(Int_t ndf); Set the number of degrees of freedom; ndf should be the number of points used in a fit - the number of free parameters. void SetNpx(Int_t npx = 100); Set the number of points used to draw the function. The default number of points along x is 100 for 1-d functions and 30 for 2-d/3-d functions; You can increase this value to get a better resolution when drawing; pictures with sharp peaks or to get a better result when using TF1::GetRandom; the minimum number of points is 4, the maximum is 10000000 for 1-d and 10000 for 2-d/3-d functions. void SetParError(Int_t ipar, Double_t error); Set error for parameter number ipar. void SetParErrors(const Double_t* errors); Set errors for all active parameters; when calling this function, the array errors must have at least fNpar values. void SetParLimits(Int_t ipar, Double_t parmin, Double_t parmax); Set limits for parameter ipar. The specified limits will be used in a fit operation; when the option ""B"" is specified (Bounds).; To fix a parameter, use TF1::FixParameter. void SetRange(Double_t xmin, Double_t xmax); Initialize the upper and lower bounds to draw the function. The function range is also used in an histogram fit operation; when the option ""R"" is specified. void SetSavedPoint(Int_t point, Double_t value); Restore value of function saved at point. void SetTitle(const char* title = """"); Set function title; if title has the form ""fffffff;xxxx;yyyy"", it is assumed that; the function title is ""fffffff"" and ""xxxx"" and ""yyyy"" are the; titles for the X and Y axis respectively. void Streamer(TBuffer& b); Stream a class ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TF1.html:61515,error,error,61515,root/html530/TF1.html,https://root.cern,https://root.cern/root/html530/TF1.html,6,['error'],['error']
Availability,"e that pointer), although we get a new buffer in case; it's not found in the cache.; There is a lot of code duplication but it was necesary to assure; the expected behavior when there is no cache. Int_t ReadBasketBytes(Long64_t pos, TFile* file); Read basket buffers in memory and cleanup. Read first bytes of a logical record starting at position pos; return record length (first 4 bytes of record). void Reset(); Reset the basket to the starting state. i.e. as it was after calling; the constructor (and potentially attaching a TBuffer.); Reduce memory used by fEntryOffset and the TBuffer if needed .. void SetReadMode(); Set read mode of basket. void SetWriteMode(); Set write mode of basket. void Streamer(TBuffer& b); Stream a class object. void Update(Int_t newlast, Int_t skipped); Update basket header and EntryOffset table. Int_t WriteBuffer(); Write buffer of this basket on the current file. The function returns the number of bytes committed to the memory.; If a write error occurs, the number of bytes returned is -1.; If no data are written, the number of bytes returned is 0. TBasket(const TBasket& ). TBasket& operator=(const TBasket& ). TBranch * GetBranch() const; {return fBranch;}. Int_t GetBufferSize() const; {return fBufferSize;}. Int_t * GetDisplacement() const; {return fDisplacement;}. Int_t * GetEntryOffset() const; {return fEntryOffset;}. Int_t GetNevBuf() const; {return fNevBuf;}. Int_t GetNevBufSize() const; {return fNevBufSize;}. Int_t GetLast() const; {return fLast;}. void PrepareBasket(Long64_t ); {}. void SetBranch(TBranch* branch); { fBranch = branch; }. void SetNevBufSize(Int_t n); { fNevBufSize=n; }. void Update(Int_t newlast); { Update(newlast,newlast); }. » Author: Rene Brun 19/01/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TBasket.h 39642 2011-06-09 17:18:42Z pcanal $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the document",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TBasket.html:12261,error,error,12261,root/html532/TBasket.html,https://root.cern,https://root.cern/root/html532/TBasket.html,2,['error'],['error']
Availability,"e that pointer), although we get a new buffer in case; it's not found in the cache.; There is a lot of code duplication but it was necesary to assure; the expected behavior when there is no cache. Int_t ReadBasketBytes(Long64_t pos, TFile* file); Read basket buffers in memory and cleanup. Read first bytes of a logical record starting at position pos; return record length (first 4 bytes of record). void Reset(); Reset the basket to the starting state. i.e. as it was after calling; the constructor (and potentially attaching a TBuffer.); Reduce memory used by fEntryOffset and the TBuffer if needed .. void SetReadMode(); Set read mode of basket. void SetWriteMode(); Set write mode of basket. void Streamer(TBuffer& b); Stream a class object. void Update(Int_t newlast, Int_t skipped); Update basket header and EntryOffset table. Int_t WriteBuffer(); Write buffer of this basket on the current file. The function returns the number of bytes committed to the memory.; If a write error occurs, the number of bytes returned is -1.; If no data are written, the number of bytes returned is 0. TBasket(const TBasket& ). TBasket& operator=(const TBasket& ). TBranch * GetBranch() const; {return fBranch;}. Int_t GetBufferSize() const; {return fBufferSize;}. Int_t * GetDisplacement() const; {return fDisplacement;}. Int_t * GetEntryOffset() const; {return fEntryOffset;}. Int_t GetNevBuf() const; {return fNevBuf;}. Int_t GetNevBufSize() const; {return fNevBufSize;}. Int_t GetLast() const; {return fLast;}. void PrepareBasket(Long64_t ); {}. void SetBranch(TBranch* branch); { fBranch = branch; }. void SetNevBufSize(Int_t n); { fNevBufSize=n; }. void Update(Int_t newlast); { Update(newlast,newlast); }. » Author: Rene Brun 19/01/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TBasket.h 39643 2011-06-09 17:32:22Z pcanal $ » Last generated: 2011-07-04 15:25; This page has been automatically generated. For comments or suggestions regarding the document",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TBasket.html:12254,error,error,12254,root/html530/TBasket.html,https://root.cern,https://root.cern/root/html530/TBasket.html,1,['error'],['error']
Availability,"e that the function returns KTRUE in case cl is the class itself. void * DynamicCast(const TClass* base, void* obj, Bool_t up = kTRUE); Cast obj of this class type up to baseclass cl if up is true.; Cast obj of this class type down from baseclass cl if up is false.; If this class is not a baseclass of cl return 0, else the pointer; to the cl part of this (up) or to this (down). const void * DynamicCast(const TClass* base, const void* obj, Bool_t up = kTRUE); Cast obj of this class type up to baseclass cl if up is true.; Cast obj of this class type down from baseclass cl if up is false.; If this class is not a baseclass of cl return 0, else the pointer; to the cl part of this (up) or to this (down). void * New(TClass::ENewType defConstructor = kClassNew, Bool_t quiet = kFALSE) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). If quiet is true, do no issue a message via Error on case; of problems, just return 0. The constructor actually called here can be customized by; using the rootcint pragma:; #pragma link C++ ioctortype UserClass;; For example, with this pragma and a class named MyClass,; this method will called the first of the following 3; constructors which exists and is public:; MyClass(UserClass*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted. When more than one pragma ioctortype is used, the first seen as priority; For example with:; #pragma link C++ ioctortype UserClass1;; #pragma link C++ ioctortype UserClass2;; We look in the following order:; MyClass(UserClass1*);; MyClass(UserClass2*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted. void * New(void* arena, TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TClass.html:48939,Error,Error,48939,root/html602/TClass.html,https://root.cern,https://root.cern/root/html602/TClass.html,2,['Error'],['Error']
Availability,"e the 'mutable' keyword; 2136 return fMother;; 2137 }; 2138 if (!parent->fParent) {; 2139 // This is the top node; 2140 const_cast<TBranch*>(this)->fMother = parent; // We can not yet use the 'mutable' keyword; 2141 return fMother;; 2142 }; 2143 parent = parent->fParent;; 2144 }; 2145 }; 2146 ; 2147 const TObjArray* array = fTree->GetListOfBranches();; 2148 Int_t n = array->GetEntriesFast();; 2149 for (Int_t i = 0; i < n; ++i) {; 2150 TBranch* branch = (TBranch*) array->UncheckedAt(i);; 2151 TBranch* parent = branch->GetSubBranch(this);; 2152 if (parent) {; 2153 const_cast<TBranch*>(this)->fMother = branch; // We can not yet use the 'mutable' keyword; 2154 return branch;; 2155 }; 2156 }; 2157 return nullptr;; 2158}; 2159 ; 2160////////////////////////////////////////////////////////////////////////////////; 2161/// Find the parent branch of child.; 2162/// Return 0 if child is not in this branch hierarchy.; 2163 ; 2164TBranch* TBranch::GetSubBranch(const TBranch* child) const; 2165{; 2166 // Handle error condition, if the parameter is us, we cannot find the parent.; 2167 if (this == child) {; 2168 // Note: We cast away any const-ness of ""this"".; 2169 return (TBranch*) this;; 2170 }; 2171 ; 2172 if (child->fParent) {; 2173 return child->fParent;; 2174 }; 2175 ; 2176 Int_t len = fBranches.GetEntriesFast();; 2177 for (Int_t i = 0; i < len; ++i) {; 2178 TBranch* branch = (TBranch*) fBranches.UncheckedAt(i);; 2179 if (!branch) {; 2180 continue;; 2181 }; 2182 if (branch == child) {; 2183 // We are the direct parent of child.; 2184 // Note: We cast away any const-ness of ""this"".; 2185 const_cast<TBranch*>(child)->fParent = (TBranch*)this; // We can not yet use the 'mutable' keyword; 2186 return (TBranch*) this;; 2187 }; 2188 // FIXME: This is a tail-recursion!; 2189 TBranch* parent = branch->GetSubBranch(child);; 2190 if (parent) {; 2191 return parent;; 2192 }; 2193 }; 2194 // We failed to find the parent.; 2195 return nullptr;; 2196}; 2197 ; 2198//////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranch_8cxx_source.html:78450,error,error,78450,doc/master/TBranch_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranch_8cxx_source.html,1,['error'],['error']
Availability,"e the child-side immediately. */; 5759 set_close_on_exec(fdin[1], conn, NULL); /* stdin write */; 5760 set_close_on_exec(fdout[0], conn, NULL); /* stdout read */; 5761 set_close_on_exec(fderr[0], conn, NULL); /* stderr read */; 5762 } else {; 5763 /* Child */; 5764 if (chdir(dir) != 0) {; 5765 mg_cry_internal(; 5766 conn, ""%s: chdir(%s): %s"", __func__, dir, strerror(ERRNO));; 5767 } else if (dup2(fdin[0], 0) == -1) {; 5768 mg_cry_internal(conn,; 5769 ""%s: dup2(%d, 0): %s"",; 5770 __func__,; 5771 fdin[0],; 5772 strerror(ERRNO));; 5773 } else if (dup2(fdout[1], 1) == -1) {; 5774 mg_cry_internal(conn,; 5775 ""%s: dup2(%d, 1): %s"",; 5776 __func__,; 5777 fdout[1],; 5778 strerror(ERRNO));; 5779 } else if (dup2(fderr[1], 2) == -1) {; 5780 mg_cry_internal(conn,; 5781 ""%s: dup2(%d, 2): %s"",; 5782 __func__,; 5783 fderr[1],; 5784 strerror(ERRNO));; 5785 } else {; 5786 struct sigaction sa;; 5787 ; 5788 /* Keep stderr and stdout in two different pipes.; 5789 * Stdout will be sent back to the client,; 5790 * stderr should go into a server error log. */; 5791 (void)close(fdin[0]);; 5792 (void)close(fdout[1]);; 5793 (void)close(fderr[1]);; 5794 ; 5795 /* Close write end fdin and read end fdout and fderr */; 5796 (void)close(fdin[1]);; 5797 (void)close(fdout[0]);; 5798 (void)close(fderr[0]);; 5799 ; 5800 /* After exec, all signal handlers are restored to their default; 5801 * values, with one exception of SIGCHLD. According to; 5802 * POSIX.1-2001 and Linux's implementation, SIGCHLD's handler; 5803 * will leave unchanged after exec if it was set to be ignored.; 5804 * Restore it to default action. */; 5805 memset(&sa, 0, sizeof(sa));; 5806 sa.sa_handler = SIG_DFL;; 5807 sigaction(SIGCHLD, &sa, NULL);; 5808 ; 5809 interp = conn->dom_ctx->config[CGI_INTERPRETER + cgi_config_idx];; 5810 if (interp == NULL) {; 5811 /* no interpreter configured, call the programm directly */; 5812 (void)execle(prog, prog, NULL, envp);; 5813 mg_cry_internal(conn,; 5814 ""%s: execle(%s): %s"",; 5815 __func__,;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:170057,error,error,170057,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"e the child-side immediately. */; 5760 set_close_on_exec(fdin[1], conn, NULL); /* stdin write */; 5761 set_close_on_exec(fdout[0], conn, NULL); /* stdout read */; 5762 set_close_on_exec(fderr[0], conn, NULL); /* stderr read */; 5763 } else {; 5764 /* Child */; 5765 if (chdir(dir) != 0) {; 5766 mg_cry_internal(; 5767 conn, ""%s: chdir(%s): %s"", __func__, dir, strerror(ERRNO));; 5768 } else if (dup2(fdin[0], 0) == -1) {; 5769 mg_cry_internal(conn,; 5770 ""%s: dup2(%d, 0): %s"",; 5771 __func__,; 5772 fdin[0],; 5773 strerror(ERRNO));; 5774 } else if (dup2(fdout[1], 1) == -1) {; 5775 mg_cry_internal(conn,; 5776 ""%s: dup2(%d, 1): %s"",; 5777 __func__,; 5778 fdout[1],; 5779 strerror(ERRNO));; 5780 } else if (dup2(fderr[1], 2) == -1) {; 5781 mg_cry_internal(conn,; 5782 ""%s: dup2(%d, 2): %s"",; 5783 __func__,; 5784 fderr[1],; 5785 strerror(ERRNO));; 5786 } else {; 5787 struct sigaction sa;; 5788 ; 5789 /* Keep stderr and stdout in two different pipes.; 5790 * Stdout will be sent back to the client,; 5791 * stderr should go into a server error log. */; 5792 (void)close(fdin[0]);; 5793 (void)close(fdout[1]);; 5794 (void)close(fderr[1]);; 5795 ; 5796 /* Close write end fdin and read end fdout and fderr */; 5797 (void)close(fdin[1]);; 5798 (void)close(fdout[0]);; 5799 (void)close(fderr[0]);; 5800 ; 5801 /* After exec, all signal handlers are restored to their default; 5802 * values, with one exception of SIGCHLD. According to; 5803 * POSIX.1-2001 and Linux's implementation, SIGCHLD's handler; 5804 * will leave unchanged after exec if it was set to be ignored.; 5805 * Restore it to default action. */; 5806 memset(&sa, 0, sizeof(sa));; 5807 sa.sa_handler = SIG_DFL;; 5808 sigaction(SIGCHLD, &sa, NULL);; 5809 ; 5810 interp = conn->dom_ctx->config[CGI_INTERPRETER + cgi_config_idx];; 5811 if (interp == NULL) {; 5812 /* no interpreter configured, call the programm directly */; 5813 (void)execle(prog, prog, NULL, envp);; 5814 mg_cry_internal(conn,; 5815 ""%s: execle(%s): %s"",; 5816 __func__,;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:170089,error,error,170089,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,e the configuration ; : 16 | 27524.2 26104.3 0.0196926 0.00175551 44600.3 0; : 17 Minimum Test error found - save the configuration ; : 17 | 27271.4 25860.7 0.0197778 0.00177907 44447.7 0; : 18 Minimum Test error found - save the configuration ; : 18 | 27023.6 25622.6 0.0197311 0.00176281 44522.9 0; : 19 Minimum Test error found - save the configuration ; : 19 | 26780.6 25388.8 0.0197339 0.00176163 44513.1 0; : 20 Minimum Test error found - save the configuration ; : 20 | 26542.7 25157.4 0.0198818 0.0018763 44431 0; : 21 Minimum Test error found - save the configuration ; : 21 | 26311 24925.1 0.0199584 0.00175652 43951.6 0; : 22 Minimum Test error found - save the configuration ; : 22 | 26076.9 24700.5 0.0197873 0.00176359 44385.9 0; : 23 Minimum Test error found - save the configuration ; : 23 | 25845.4 24483.8 0.0196702 0.00176161 44671.3 0; : 24 Minimum Test error found - save the configuration ; : 24 | 25624.1 24264.1 0.0196853 0.00176075 44631.5 0; : 25 Minimum Test error found - save the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found - save the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:13868,error,error,13868,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e the configuration ; : 17 | 27271.4 25860.7 0.0197778 0.00177907 44447.7 0; : 18 Minimum Test error found - save the configuration ; : 18 | 27023.6 25622.6 0.0197311 0.00176281 44522.9 0; : 19 Minimum Test error found - save the configuration ; : 19 | 26780.6 25388.8 0.0197339 0.00176163 44513.1 0; : 20 Minimum Test error found - save the configuration ; : 20 | 26542.7 25157.4 0.0198818 0.0018763 44431 0; : 21 Minimum Test error found - save the configuration ; : 21 | 26311 24925.1 0.0199584 0.00175652 43951.6 0; : 22 Minimum Test error found - save the configuration ; : 22 | 26076.9 24700.5 0.0197873 0.00176359 44385.9 0; : 23 Minimum Test error found - save the configuration ; : 23 | 25845.4 24483.8 0.0196702 0.00176161 44671.3 0; : 24 Minimum Test error found - save the configuration ; : 24 | 25624.1 24264.1 0.0196853 0.00176075 44631.5 0; : 25 Minimum Test error found - save the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found - save the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:13980,error,error,13980,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e the configuration ; : 18 | 27023.6 25622.6 0.0197311 0.00176281 44522.9 0; : 19 Minimum Test error found - save the configuration ; : 19 | 26780.6 25388.8 0.0197339 0.00176163 44513.1 0; : 20 Minimum Test error found - save the configuration ; : 20 | 26542.7 25157.4 0.0198818 0.0018763 44431 0; : 21 Minimum Test error found - save the configuration ; : 21 | 26311 24925.1 0.0199584 0.00175652 43951.6 0; : 22 Minimum Test error found - save the configuration ; : 22 | 26076.9 24700.5 0.0197873 0.00176359 44385.9 0; : 23 Minimum Test error found - save the configuration ; : 23 | 25845.4 24483.8 0.0196702 0.00176161 44671.3 0; : 24 Minimum Test error found - save the configuration ; : 24 | 25624.1 24264.1 0.0196853 0.00176075 44631.5 0; : 25 Minimum Test error found - save the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found - save the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:14092,error,error,14092,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e the configuration ; : 19 | 26780.6 25388.8 0.0197339 0.00176163 44513.1 0; : 20 Minimum Test error found - save the configuration ; : 20 | 26542.7 25157.4 0.0198818 0.0018763 44431 0; : 21 Minimum Test error found - save the configuration ; : 21 | 26311 24925.1 0.0199584 0.00175652 43951.6 0; : 22 Minimum Test error found - save the configuration ; : 22 | 26076.9 24700.5 0.0197873 0.00176359 44385.9 0; : 23 Minimum Test error found - save the configuration ; : 23 | 25845.4 24483.8 0.0196702 0.00176161 44671.3 0; : 24 Minimum Test error found - save the configuration ; : 24 | 25624.1 24264.1 0.0196853 0.00176075 44631.5 0; : 25 Minimum Test error found - save the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found - save the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found - save the configuration ; : 36 | 23123.9 21840 0.0197735 0.00177073 44437.6 0; : 37 Minimum Test error found - ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:14204,error,error,14204,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e the configuration ; : 20 | 26542.7 25157.4 0.0198818 0.0018763 44431 0; : 21 Minimum Test error found - save the configuration ; : 21 | 26311 24925.1 0.0199584 0.00175652 43951.6 0; : 22 Minimum Test error found - save the configuration ; : 22 | 26076.9 24700.5 0.0197873 0.00176359 44385.9 0; : 23 Minimum Test error found - save the configuration ; : 23 | 25845.4 24483.8 0.0196702 0.00176161 44671.3 0; : 24 Minimum Test error found - save the configuration ; : 24 | 25624.1 24264.1 0.0196853 0.00176075 44631.5 0; : 25 Minimum Test error found - save the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found - save the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found - save the configuration ; : 36 | 23123.9 21840 0.0197735 0.00177073 44437.6 0; : 37 Minimum Test error found - save the configuration ; : 37 | 22932.1 21651.2 0.0197273 0.00177446 44561.1 0; : 38 Minimum Test error found - ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:14316,error,error,14316,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found - save the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found - save the configuration ; : 36 | 23123.9 21840 0.0197735 0.00177073 44437.6 0; : 37 Minimum Test error found - save the configuration ; : 37 | 22932.1 21651.2 0.0197273 0.00177446 44561.1 0; : 38 Minimum Test error found - save the configuration ; : 38 | 22740.7 21464.4 0.0197166 0.00177193 44581.5 0; : 39 Minimum Test error found - save the configuration ; : 39 | 22549.1 21282.9 0.0197213 0.00177445 44576 0; : 40 Minimum Test error found - save the configuration ; : 40 | 22363.6 21100 0.0197729 0.00177445 44448.2 0; : 41 Minimum Test error found - save the configuration ; : 41 | 22176.6 20921.1 0.0197131 0.00176514 44573.2 0; : 42 Minimum Test error found - save the configuration ; : 42 | 21994.9 20740.9 0.0197264 0.00176834 44548.1 0; : 43 Minimum Test error found -,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:14871,error,error,14871,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found - save the configuration ; : 36 | 23123.9 21840 0.0197735 0.00177073 44437.6 0; : 37 Minimum Test error found - save the configuration ; : 37 | 22932.1 21651.2 0.0197273 0.00177446 44561.1 0; : 38 Minimum Test error found - save the configuration ; : 38 | 22740.7 21464.4 0.0197166 0.00177193 44581.5 0; : 39 Minimum Test error found - save the configuration ; : 39 | 22549.1 21282.9 0.0197213 0.00177445 44576 0; : 40 Minimum Test error found - save the configuration ; : 40 | 22363.6 21100 0.0197729 0.00177445 44448.2 0; : 41 Minimum Test error found - save the configuration ; : 41 | 22176.6 20921.1 0.0197131 0.00176514 44573.2 0; : 42 Minimum Test error found - save the configuration ; : 42 | 21994.9 20740.9 0.0197264 0.00176834 44548.1 0; : 43 Minimum Test error found - save the configuration ; : 43 | 21811.7 20564.6 0.0197476 0.00176764 44494 0; : 44 Minimum Test error found - s,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:14983,error,error,14983,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found - save the configuration ; : 36 | 23123.9 21840 0.0197735 0.00177073 44437.6 0; : 37 Minimum Test error found - save the configuration ; : 37 | 22932.1 21651.2 0.0197273 0.00177446 44561.1 0; : 38 Minimum Test error found - save the configuration ; : 38 | 22740.7 21464.4 0.0197166 0.00177193 44581.5 0; : 39 Minimum Test error found - save the configuration ; : 39 | 22549.1 21282.9 0.0197213 0.00177445 44576 0; : 40 Minimum Test error found - save the configuration ; : 40 | 22363.6 21100 0.0197729 0.00177445 44448.2 0; : 41 Minimum Test error found - save the configuration ; : 41 | 22176.6 20921.1 0.0197131 0.00176514 44573.2 0; : 42 Minimum Test error found - save the configuration ; : 42 | 21994.9 20740.9 0.0197264 0.00176834 44548.1 0; : 43 Minimum Test error found - save the configuration ; : 43 | 21811.7 20564.6 0.0197476 0.00176764 44494 0; : 44 Minimum Test error found - save the configuration ; : 44 | 21631.5 20390.5 0.0198172 0.00177793 44347.7 0; : 45 Minimum Test error found - s,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:15095,error,error,15095,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e the configuration ; : 3 | 0.477495 0.458718 0.0776312 0.00665553 45085.9 0; : 4 Minimum Test error found - save the configuration ; : 4 | 0.438338 0.418147 0.0780597 0.00669006 44837 0; : 5 Minimum Test error found - save the configuration ; : 5 | 0.407569 0.391703 0.0786075 0.00678976 44557.2 0; : 6 Minimum Test error found - save the configuration ; : 6 | 0.387736 0.373696 0.0792581 0.00678916 44156.9 0; : 7 Minimum Test error found - save the configuration ; : 7 | 0.373399 0.360485 0.0791536 0.00677002 44208.9 0; : 8 Minimum Test error found - save the configuration ; : 8 | 0.362792 0.352336 0.0796639 0.00682572 43933 0; : 9 Minimum Test error found - save the configuration ; : 9 | 0.353594 0.340526 0.0805399 0.00700876 43519 0; : 10 Minimum Test error found - save the configuration ; : 10 | 0.345712 0.336826 0.080966 0.0069933 43259.2 0; : 11 Minimum Test error found - save the configuration ; : 11 | 0.338399 0.329567 0.0802544 0.00691181 43630.9 0; : 12 Minimum Test error found - save the configuration ; : 12 | 0.333122 0.322325 0.0804981 0.00689735 43477.8 0; : 13 Minimum Test error found - save the configuration ; : 13 | 0.326577 0.317097 0.0800716 0.00688531 43724 0; : 14 Minimum Test error found - save the configuration ; : 14 | 0.320979 0.311994 0.080369 0.00694962 43585.2 0; : 15 Minimum Test error found - save the configuration ; : 15 | 0.316442 0.305918 0.0803736 0.00690045 43553.3 0; : 16 Minimum Test error found - save the configuration ; : 16 | 0.311672 0.301667 0.0807629 0.00695777 43357.4 0; : 17 Minimum Test error found - save the configuration ; : 17 | 0.306787 0.297289 0.0804752 0.00690149 43493.8 0; : 18 Minimum Test error found - save the configuration ; : 18 | 0.303107 0.295781 0.0805443 0.00693772 43474.3 0; : 19 Minimum Test error found - save the configuration ; : 19 | 0.300241 0.290359 0.0805629 0.00693546 43462 0; : 20 | 0.29682 0.292587 0.0806285 0.00686869 43384.1 1; : ; : Elapsed time for training with 4000 events: 1.62 sec ; : Datas,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:16043,error,error,16043,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['error'],['error']
Availability,e the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found - save the configuration ; : 36 | 23123.9 21840 0.0197735 0.00177073 44437.6 0; : 37 Minimum Test error found - save the configuration ; : 37 | 22932.1 21651.2 0.0197273 0.00177446 44561.1 0; : 38 Minimum Test error found - save the configuration ; : 38 | 22740.7 21464.4 0.0197166 0.00177193 44581.5 0; : 39 Minimum Test error found - save the configuration ; : 39 | 22549.1 21282.9 0.0197213 0.00177445 44576 0; : 40 Minimum Test error found - save the configuration ; : 40 | 22363.6 21100 0.0197729 0.00177445 44448.2 0; : 41 Minimum Test error found - save the configuration ; : 41 | 22176.6 20921.1 0.0197131 0.00176514 44573.2 0; : 42 Minimum Test error found - save the configuration ; : 42 | 21994.9 20740.9 0.0197264 0.00176834 44548.1 0; : 43 Minimum Test error found - save the configuration ; : 43 | 21811.7 20564.6 0.0197476 0.00176764 44494 0; : 44 Minimum Test error found - save the configuration ; : 44 | 21631.5 20390.5 0.0198172 0.00177793 44347.7 0; : 45 Minimum Test error found - save the configuration ; : 45 | 21453.9 20217 0.0197313 0.00176795 44535.1 0; : 46 Minimum Test error found - save the configuration ; : 46 | 21277.2 20045.6 0.0197489 0.00176953 44495.5 0; : 47 Minimum Test error found - save the configuration ; : 47 | 21102.5 19876.1 0.0197499 0.00176859 44490.7 0; : 48 Minimum Test error found - s,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:15429,error,error,15429,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e the configuration ; : 390 | 1148.13 652.893 0.0205991 0.00194136 42877.5 0; : 391 Minimum Test error found - save the configuration ; : 391 | 1136.83 645.4 0.0202307 0.00186692 43564 0; : 392 Minimum Test error found - save the configuration ; : 392 | 1125.56 638.711 0.0206275 0.00184646 42596.2 0; : 393 Minimum Test error found - save the configuration ; : 393 | 1115.4 631.055 0.0202254 0.00180782 43436.7 0; : 394 Minimum Test error found - save the configuration ; : 394 | 1104.59 624.317 0.02027 0.00182884 43381.3 0; : 395 Minimum Test error found - save the configuration ; : 395 | 1094.1 617.12 0.0203693 0.00181577 43118.4 0; : 396 Minimum Test error found - save the configuration ; : 396 | 1083.6 610.558 0.0201067 0.00181126 43726.6 0; : 397 Minimum Test error found - save the configuration ; : 397 | 1073.44 603.068 0.020123 0.00181306 43692 0; : 398 Minimum Test error found - save the configuration ; : 398 | 1062.93 596.682 0.020266 0.00184767 43435 0; : 399 Minimum Test error found - save the configuration ; : 399 | 1052.39 590.107 0.0201237 0.00182381 43716.1 0; : 400 Minimum Test error found - save the configuration ; : 400 | 1042.76 583.068 0.0201639 0.00182862 43631.8 0; : 401 Minimum Test error found - save the configuration ; : 401 | 1032.4 576.548 0.0201234 0.00181928 43705.9 0; : 402 Minimum Test error found - save the configuration ; : 402 | 1022.23 570.272 0.0201306 0.00182147 43694 0; : 403 Minimum Test error found - save the configuration ; : 403 | 1012.74 563.823 0.0201066 0.00181196 43728.6 0; : 404 Minimum Test error found - save the configuration ; : 404 | 1002.66 558.031 0.0201068 0.0018122 43728.9 0; : 405 Minimum Test error found - save the configuration ; : 405 | 993.455 551.67 0.020178 0.00184829 43644.9 0; : 406 Minimum Test error found - save the configuration ; : 406 | 983.719 545.531 0.0202059 0.00184968 43581.9 0; : 407 Minimum Test error found - save the configuration ; : 407 | 974.381 539.309 0.0201407 0.00182369 43675.3 0; : 408 M,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:56069,error,error,56069,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e the configuration ; : 44 | 21631.5 20390.5 0.0198172 0.00177793 44347.7 0; : 45 Minimum Test error found - save the configuration ; : 45 | 21453.9 20217 0.0197313 0.00176795 44535.1 0; : 46 Minimum Test error found - save the configuration ; : 46 | 21277.2 20045.6 0.0197489 0.00176953 44495.5 0; : 47 Minimum Test error found - save the configuration ; : 47 | 21102.5 19876.1 0.0197499 0.00176859 44490.7 0; : 48 Minimum Test error found - save the configuration ; : 48 | 20931.2 19705.9 0.0197403 0.00176149 44496.7 0; : 49 Minimum Test error found - save the configuration ; : 49 | 20758.9 19539.2 0.0199993 0.00178715 43926.8 0; : 50 Minimum Test error found - save the configuration ; : 50 | 20589.8 19373.7 0.0199739 0.00177216 43951.9 0; : 51 Minimum Test error found - save the configuration ; : 51 | 20419.5 19213.6 0.0197688 0.0017747 44459 0; : 52 Minimum Test error found - save the configuration ; : 52 | 20255.7 19051.4 0.0197679 0.00177721 44467.5 0; : 53 Minimum Test error found - save the configuration ; : 53 | 20090.6 18891.7 0.0197461 0.00177488 44515.6 0; : 54 Minimum Test error found - save the configuration ; : 54 | 19926.4 18735.4 0.0197628 0.00177559 44476 0; : 55 Minimum Test error found - save the configuration ; : 55 | 19766 18579 0.0197479 0.00177128 44502.3 0; : 56 Minimum Test error found - save the configuration ; : 56 | 19606.6 18423 0.0198259 0.00178958 44354.9 0; : 57 Minimum Test error found - save the configuration ; : 57 | 19448.2 18266.7 0.0197832 0.00177932 44434.9 0; : 58 Minimum Test error found - save the configuration ; : 58 | 19286.3 18101.7 0.0200637 0.00195508 44177.8 0; : 59 Minimum Test error found - save the configuration ; : 59 | 19133.8 17932.7 0.0198394 0.00178813 44318.1 0; : 60 Minimum Test error found - save the configuration ; : 60 | 18976.4 17813.4 0.0198417 0.00178241 44298.6 0; : 61 Minimum Test error found - save the configuration ; : 61 | 18829.3 17664.6 0.0197742 0.00177192 44438.7 0; : 62 Minimum Test error found - s,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:16986,error,error,16986,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e the configuration ; : 45 | 21453.9 20217 0.0197313 0.00176795 44535.1 0; : 46 Minimum Test error found - save the configuration ; : 46 | 21277.2 20045.6 0.0197489 0.00176953 44495.5 0; : 47 Minimum Test error found - save the configuration ; : 47 | 21102.5 19876.1 0.0197499 0.00176859 44490.7 0; : 48 Minimum Test error found - save the configuration ; : 48 | 20931.2 19705.9 0.0197403 0.00176149 44496.7 0; : 49 Minimum Test error found - save the configuration ; : 49 | 20758.9 19539.2 0.0199993 0.00178715 43926.8 0; : 50 Minimum Test error found - save the configuration ; : 50 | 20589.8 19373.7 0.0199739 0.00177216 43951.9 0; : 51 Minimum Test error found - save the configuration ; : 51 | 20419.5 19213.6 0.0197688 0.0017747 44459 0; : 52 Minimum Test error found - save the configuration ; : 52 | 20255.7 19051.4 0.0197679 0.00177721 44467.5 0; : 53 Minimum Test error found - save the configuration ; : 53 | 20090.6 18891.7 0.0197461 0.00177488 44515.6 0; : 54 Minimum Test error found - save the configuration ; : 54 | 19926.4 18735.4 0.0197628 0.00177559 44476 0; : 55 Minimum Test error found - save the configuration ; : 55 | 19766 18579 0.0197479 0.00177128 44502.3 0; : 56 Minimum Test error found - save the configuration ; : 56 | 19606.6 18423 0.0198259 0.00178958 44354.9 0; : 57 Minimum Test error found - save the configuration ; : 57 | 19448.2 18266.7 0.0197832 0.00177932 44434.9 0; : 58 Minimum Test error found - save the configuration ; : 58 | 19286.3 18101.7 0.0200637 0.00195508 44177.8 0; : 59 Minimum Test error found - save the configuration ; : 59 | 19133.8 17932.7 0.0198394 0.00178813 44318.1 0; : 60 Minimum Test error found - save the configuration ; : 60 | 18976.4 17813.4 0.0198417 0.00178241 44298.6 0; : 61 Minimum Test error found - save the configuration ; : 61 | 18829.3 17664.6 0.0197742 0.00177192 44438.7 0; : 62 Minimum Test error found - save the configuration ; : 62 | 18675.1 17508.4 0.0197937 0.00177252 44392.2 0; : 63 Minimum Test error found - s,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:17098,error,error,17098,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e the configuration ; : 77 | 16444.4 15323.6 0.0199118 0.00178921 44143.8 0; : 78 Minimum Test error found - save the configuration ; : 78 | 16305.9 15188.8 0.0201885 0.00179593 43495.8 0; : 79 Minimum Test error found - save the configuration ; : 79 | 16166.6 15057.4 0.0199259 0.00179169 44115.6 0; : 80 Minimum Test error found - save the configuration ; : 80 | 16031 14926.5 0.0199332 0.00179406 44103.6 0; : 81 Minimum Test error found - save the configuration ; : 81 | 15897.7 14793.4 0.0199416 0.00179024 44073.9 0; : 82 Minimum Test error found - save the configuration ; : 82 | 15763.4 14662.5 0.0199481 0.00178931 44055.8 0; : 83 Minimum Test error found - save the configuration ; : 83 | 15630.7 14533.2 0.019931 0.00179081 44101 0; : 84 Minimum Test error found - save the configuration ; : 84 | 15500.1 14404.7 0.0199524 0.00179281 44053.8 0; : 85 Minimum Test error found - save the configuration ; : 85 | 15368.8 14279.5 0.0199675 0.00179204 44015.4 0; : 86 Minimum Test error found - save the configuration ; : 86 | 15239.7 14153.7 0.0199843 0.00181623 44033.3 0; : 87 Minimum Test error found - save the configuration ; : 87 | 15114.3 14026.9 0.0199836 0.00180455 44006.8 0; : 88 Minimum Test error found - save the configuration ; : 88 | 14984.6 13906.4 0.01996 0.00179383 44038 0; : 89 Minimum Test error found - save the configuration ; : 89 | 14861.1 13782.6 0.0200963 0.00185792 43863.5 0; : 90 Minimum Test error found - save the configuration ; : 90 | 14737.4 13659.4 0.0204557 0.00186757 43038.2 0; : 91 Minimum Test error found - save the configuration ; : 91 | 14612.9 13539.6 0.0208154 0.00188863 42268.3 0; : 92 Minimum Test error found - save the configuration ; : 92 | 14490.4 13421.6 0.0202522 0.00182164 43406.2 0; : 93 Minimum Test error found - save the configuration ; : 93 | 14371 13301.8 0.0200599 0.00180046 43813.1 0; : 94 Minimum Test error found - save the configuration ; : 94 | 14248.9 13186.1 0.0201736 0.00184165 43639.6 0; : 95 Minimum Test error found -,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:20657,error,error,20657,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e the configuration ; : 78 | 16305.9 15188.8 0.0201885 0.00179593 43495.8 0; : 79 Minimum Test error found - save the configuration ; : 79 | 16166.6 15057.4 0.0199259 0.00179169 44115.6 0; : 80 Minimum Test error found - save the configuration ; : 80 | 16031 14926.5 0.0199332 0.00179406 44103.6 0; : 81 Minimum Test error found - save the configuration ; : 81 | 15897.7 14793.4 0.0199416 0.00179024 44073.9 0; : 82 Minimum Test error found - save the configuration ; : 82 | 15763.4 14662.5 0.0199481 0.00178931 44055.8 0; : 83 Minimum Test error found - save the configuration ; : 83 | 15630.7 14533.2 0.019931 0.00179081 44101 0; : 84 Minimum Test error found - save the configuration ; : 84 | 15500.1 14404.7 0.0199524 0.00179281 44053.8 0; : 85 Minimum Test error found - save the configuration ; : 85 | 15368.8 14279.5 0.0199675 0.00179204 44015.4 0; : 86 Minimum Test error found - save the configuration ; : 86 | 15239.7 14153.7 0.0199843 0.00181623 44033.3 0; : 87 Minimum Test error found - save the configuration ; : 87 | 15114.3 14026.9 0.0199836 0.00180455 44006.8 0; : 88 Minimum Test error found - save the configuration ; : 88 | 14984.6 13906.4 0.01996 0.00179383 44038 0; : 89 Minimum Test error found - save the configuration ; : 89 | 14861.1 13782.6 0.0200963 0.00185792 43863.5 0; : 90 Minimum Test error found - save the configuration ; : 90 | 14737.4 13659.4 0.0204557 0.00186757 43038.2 0; : 91 Minimum Test error found - save the configuration ; : 91 | 14612.9 13539.6 0.0208154 0.00188863 42268.3 0; : 92 Minimum Test error found - save the configuration ; : 92 | 14490.4 13421.6 0.0202522 0.00182164 43406.2 0; : 93 Minimum Test error found - save the configuration ; : 93 | 14371 13301.8 0.0200599 0.00180046 43813.1 0; : 94 Minimum Test error found - save the configuration ; : 94 | 14248.9 13186.1 0.0201736 0.00184165 43639.6 0; : 95 Minimum Test error found - save the configuration ; : 95 | 14131.5 13069.6 0.020175 0.00181418 43571 0; : 96 Minimum Test error found - sa,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:20769,error,error,20769,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e the configuration ; : 79 | 16166.6 15057.4 0.0199259 0.00179169 44115.6 0; : 80 Minimum Test error found - save the configuration ; : 80 | 16031 14926.5 0.0199332 0.00179406 44103.6 0; : 81 Minimum Test error found - save the configuration ; : 81 | 15897.7 14793.4 0.0199416 0.00179024 44073.9 0; : 82 Minimum Test error found - save the configuration ; : 82 | 15763.4 14662.5 0.0199481 0.00178931 44055.8 0; : 83 Minimum Test error found - save the configuration ; : 83 | 15630.7 14533.2 0.019931 0.00179081 44101 0; : 84 Minimum Test error found - save the configuration ; : 84 | 15500.1 14404.7 0.0199524 0.00179281 44053.8 0; : 85 Minimum Test error found - save the configuration ; : 85 | 15368.8 14279.5 0.0199675 0.00179204 44015.4 0; : 86 Minimum Test error found - save the configuration ; : 86 | 15239.7 14153.7 0.0199843 0.00181623 44033.3 0; : 87 Minimum Test error found - save the configuration ; : 87 | 15114.3 14026.9 0.0199836 0.00180455 44006.8 0; : 88 Minimum Test error found - save the configuration ; : 88 | 14984.6 13906.4 0.01996 0.00179383 44038 0; : 89 Minimum Test error found - save the configuration ; : 89 | 14861.1 13782.6 0.0200963 0.00185792 43863.5 0; : 90 Minimum Test error found - save the configuration ; : 90 | 14737.4 13659.4 0.0204557 0.00186757 43038.2 0; : 91 Minimum Test error found - save the configuration ; : 91 | 14612.9 13539.6 0.0208154 0.00188863 42268.3 0; : 92 Minimum Test error found - save the configuration ; : 92 | 14490.4 13421.6 0.0202522 0.00182164 43406.2 0; : 93 Minimum Test error found - save the configuration ; : 93 | 14371 13301.8 0.0200599 0.00180046 43813.1 0; : 94 Minimum Test error found - save the configuration ; : 94 | 14248.9 13186.1 0.0201736 0.00184165 43639.6 0; : 95 Minimum Test error found - save the configuration ; : 95 | 14131.5 13069.6 0.020175 0.00181418 43571 0; : 96 Minimum Test error found - save the configuration ; : 96 | 14014.5 12952.5 0.0201885 0.00182372 43561.6 0; : 97 Minimum Test error found - sa,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:20881,error,error,20881,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e the configuration ; : 92 | 14490.4 13421.6 0.0202522 0.00182164 43406.2 0; : 93 Minimum Test error found - save the configuration ; : 93 | 14371 13301.8 0.0200599 0.00180046 43813.1 0; : 94 Minimum Test error found - save the configuration ; : 94 | 14248.9 13186.1 0.0201736 0.00184165 43639.6 0; : 95 Minimum Test error found - save the configuration ; : 95 | 14131.5 13069.6 0.020175 0.00181418 43571 0; : 96 Minimum Test error found - save the configuration ; : 96 | 14014.5 12952.5 0.0201885 0.00182372 43561.6 0; : 97 Minimum Test error found - save the configuration ; : 97 | 13896.7 12838.4 0.0200385 0.00180689 43879.7 0; : 98 Minimum Test error found - save the configuration ; : 98 | 13782 12723.6 0.020062 0.00182418 43864.8 0; : 99 Minimum Test error found - save the configuration ; : 99 | 13666.4 12611.1 0.0200618 0.00180714 43824.4 0; : 100 Minimum Test error found - save the configuration ; : 100 | 13550.9 12502.3 0.0200464 0.00180511 43856.6 0; : 101 Minimum Test error found - save the configuration ; : 101 | 13439.7 12392 0.0201571 0.00185957 43721.7 0; : 102 Minimum Test error found - save the configuration ; : 102 | 13328.8 12281.3 0.0202143 0.00181888 43489.1 0; : 103 Minimum Test error found - save the configuration ; : 103 | 13217 12173.3 0.0200026 0.0018059 43964.1 0; : 104 Minimum Test error found - save the configuration ; : 104 | 13107.7 12065.4 0.0200115 0.00180466 43939.6 0; : 105 Minimum Test error found - save the configuration ; : 105 | 12997.9 11959.7 0.0201517 0.00183944 43686.6 0; : 106 Minimum Test error found - save the configuration ; : 106 | 12890.1 11854.8 0.0204012 0.00181637 43045.8 0; : 107 Minimum Test error found - save the configuration ; : 107 | 12783.3 11750.6 0.0200273 0.00179591 43880.4 0; : 108 Minimum Test error found - save the configuration ; : 108 | 12679.4 11643.6 0.0200105 0.00179336 43914.7 0; : 109 Minimum Test error found - save the configuration ; : 109 | 12570.9 11543.2 0.0200071 0.00179343 43923.1 0; : 110 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:22328,error,error,22328,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e the configuration ; : 93 | 14371 13301.8 0.0200599 0.00180046 43813.1 0; : 94 Minimum Test error found - save the configuration ; : 94 | 14248.9 13186.1 0.0201736 0.00184165 43639.6 0; : 95 Minimum Test error found - save the configuration ; : 95 | 14131.5 13069.6 0.020175 0.00181418 43571 0; : 96 Minimum Test error found - save the configuration ; : 96 | 14014.5 12952.5 0.0201885 0.00182372 43561.6 0; : 97 Minimum Test error found - save the configuration ; : 97 | 13896.7 12838.4 0.0200385 0.00180689 43879.7 0; : 98 Minimum Test error found - save the configuration ; : 98 | 13782 12723.6 0.020062 0.00182418 43864.8 0; : 99 Minimum Test error found - save the configuration ; : 99 | 13666.4 12611.1 0.0200618 0.00180714 43824.4 0; : 100 Minimum Test error found - save the configuration ; : 100 | 13550.9 12502.3 0.0200464 0.00180511 43856.6 0; : 101 Minimum Test error found - save the configuration ; : 101 | 13439.7 12392 0.0201571 0.00185957 43721.7 0; : 102 Minimum Test error found - save the configuration ; : 102 | 13328.8 12281.3 0.0202143 0.00181888 43489.1 0; : 103 Minimum Test error found - save the configuration ; : 103 | 13217 12173.3 0.0200026 0.0018059 43964.1 0; : 104 Minimum Test error found - save the configuration ; : 104 | 13107.7 12065.4 0.0200115 0.00180466 43939.6 0; : 105 Minimum Test error found - save the configuration ; : 105 | 12997.9 11959.7 0.0201517 0.00183944 43686.6 0; : 106 Minimum Test error found - save the configuration ; : 106 | 12890.1 11854.8 0.0204012 0.00181637 43045.8 0; : 107 Minimum Test error found - save the configuration ; : 107 | 12783.3 11750.6 0.0200273 0.00179591 43880.4 0; : 108 Minimum Test error found - save the configuration ; : 108 | 12679.4 11643.6 0.0200105 0.00179336 43914.7 0; : 109 Minimum Test error found - save the configuration ; : 109 | 12570.9 11543.2 0.0200071 0.00179343 43923.1 0; : 110 Minimum Test error found - save the configuration ; : 110 | 12468 11440.7 0.0200047 0.00179413 43930.5 0; : 111 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:22440,error,error,22440,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,"e the current node. Updates the cache accordingly.; Determine the overlapping state of current node. void CdUp(); Go one level up in geometry. Updates cache accordingly.; Determine the overlapping state of current node. void CdDown(Int_t index); Make a daughter of current node current. Can be called only with a valid; daughter index (no check). Updates cache accordingly. void CdNext(); Do a cd to the node found next by FindNextBoundary. Bool_t cd(const char* path = """"); Browse the tree of nodes starting from fTopNode according to pathname.; Changes the path accordingly. Bool_t CheckPath(const char* path) const; Check if a geometry path is valid without changing the state of the current navigator. void ConvertReflections(); Convert all reflections in geometry to normal rotations + reflected shapes. void CountLevels(); Count maximum number of nodes per volume, maximum depth and maximum; number of xtru vertices. Int_t CountNodes(const TGeoVolume* vol = 0, Int_t nlevels = 10000, Int_t option = 0); Count the total number of nodes starting from a volume, nlevels down. void DefaultAngles(); Set default angles for a given view. void DrawCurrentPoint(Int_t color = 2); Draw current point in the same view. void AnimateTracks(Double_t tmin = 0, Double_t tmax = 4.9999999999999998E-8, Int_t nframes = 200, Option_t* option = ""/*""); Draw animation of tracks. void DrawTracks(Option_t* option = """"); Draw tracks over the geometry, according to option. By default, only; primaries are drawn. See TGeoTrack::Draw() for additional options. void DrawPath(const char* path, Option_t* option = """"); Draw current path. void RandomPoints(const TGeoVolume* vol, Int_t npoints = 10000, Option_t* option = """"); Draw random points in the bounding box of a volume. void Test(Int_t npoints = 1000000, Option_t* option = """"); Check time of finding ""Where am I"" for n points. void TestOverlaps(const char* path = """"); Geometry overlap checker based on sampling. void GetBranchNames(Int_t* names) const; Fill vol",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoManager.html:48178,down,down,48178,root/html602/TGeoManager.html,https://root.cern,https://root.cern/root/html602/TGeoManager.html,4,['down'],['down']
Availability,"e the current node. Updates the cache accordingly.; Determine the overlapping state of current node. void CdUp(); Go one level up in geometry. Updates cache accordingly.; Determine the overlapping state of current node. void CdDown(Int_t index); Make a daughter of current node current. Can be called only with a valid; daughter index (no check). Updates cache accordingly. void CdNext(); Do a cd to the node found next by FindNextBoundary. Bool_t cd(const char* path = """"); Browse the tree of nodes starting from fTopNode according to pathname.; Changes the path accordingly. Bool_t CheckPath(const char* path) const; Check if a geometry path is valid without changing the state of the current navigator. void ConvertReflections(); Convert all reflections in geometry to normal rotations + reflected shapes. void CountLevels(); Count maximum number of nodes per volume, maximum depth and maximum; number of xtru vertices. Int_t CountNodes(const TGeoVolume* vol = 0, Int_t nlevels = 10000, Int_t option = 0); Count the total number of nodes starting from a volume, nlevels down. void DefaultAngles(); Set default angles for a given view. void DrawCurrentPoint(Int_t color = 2); Draw current point in the same view. void AnimateTracks(Double_t tmin = 0, Double_t tmax = 5E-8, Int_t nframes = 200, Option_t* option = ""/*""); Draw animation of tracks. void DrawTracks(Option_t* option = """"); Draw tracks over the geometry, according to option. By default, only; primaries are drawn. See TGeoTrack::Draw() for additional options. void DrawPath(const char* path, Option_t* option = """"); Draw current path. void RandomPoints(const TGeoVolume* vol, Int_t npoints = 10000, Option_t* option = """"); Draw random points in the bounding box of a volume. void Test(Int_t npoints = 1000000, Option_t* option = """"); Check time of finding ""Where am I"" for n points. void TestOverlaps(const char* path = """"); Geometry overlap checker based on sampling. void GetBranchNames(Int_t* names) const; Fill volume names of curr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoManager.html:47701,down,down,47701,root/html534/TGeoManager.html,https://root.cern,https://root.cern/root/html534/TGeoManager.html,2,['down'],['down']
Availability,"e the function/fit parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter; Associated functions; One or more object ( can be added to the list of functions (fFunctions) associated to each histogram. When TH1::Fit is invoked, the fitted function is added to the histogram list of functions (fFunctions). If the histogram is made persistent, the list of associated functions is also persistent. Given a histogram h, one can retrieve an associated function with:; TF1 *myfunc = h->GetFunction(""myfunc"");; or by quering directly the list obtained by calling TH1::GetListOfFunctions. Fit status; The status of the fit is obtained converting the TFitResultPtr to an integer independently if the fit option ""S"" is used or not:; TFitResultPtr r = h->Fit(myFunc,opt);; Int_t fitStatus = r;. status = 0 : the fit has been performed successfully (i.e no error occurred).; status < 0 : there is an error not connected with the minimization procedure, for example when a wrong function is used.; status > 0 : return status from Minimizer, depends on used Minimizer. For example for TMinuit and Minuit2 we have:; status = migradStatus + 10*minosStatus + 100*hesseStatus + 1000*improveStatus. TMinuit returns 0 (for migrad, minos, hesse or improve) in case of success and 4 in case of error (see the documentation of TMinuit::mnexcm). For example, for an error only in Minos but not in Migrad a fitStatus of 40 will be returned. Minuit2 returns 0 in case of success and different values in migrad,minos or hesse depending on the error. See in this case the documentation of Minuit2Minimizer::Minimize for the migrad return status, Minuit2Minimizer::GetMinosError for the minos return status and Minuit2Minimizer::Hesse for the hesse return status. If other minimizers are used see their specific documentation for the status code returned. For example in the case ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:136757,error,error,136757,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['error'],['error']
Availability,"e the next paragraph for the list of pre-defined functions.; *option: The second parameter is the fitting option. Here is the list of fitting options:. “W” Set all weights to 1 for non empty bins; ignore error bars; “WW” Set all weights to 1 including empty bins; ignore error bars; “I” Use integral of function in bin instead of value at bin center; “L” Use log likelihood method (default is chi-square method). To be used when the histogram represents counts; “WL” Weighted log likelihood method. To be used when the histogram has been filled with weights different than 1.; “P” Use Pearson chi-square method, using expected errors instead of the observed one given by TH1::GetBinError (default case). The expected error is instead estimated from the square-root of the bin function value.; “Q” Quiet mode (minimum printing); “V” Verbose mode (default is between Q and V); “S” The result of the fit is returned in the TFitResultPtr.; “E” Perform better errors estimation using the Minos technique; “M” Improve fit results, by using the IMPROVE algorithm of TMinuit.; “R” Use the range specified in the function range; “N” Do not store the graphics function, do not draw; “0” Do not plot the result of the fit. By default the fitted function is drawn unless the option “N” above is specified.; “+” Add this new fitted function to the list of fitted functions (by default, the previous function is deleted and only the last one is kept); “B”Use this option when you want to fix one or more parameters and the fitting function is a predefined one, like polN, expo, landau, gaus. Note that in case of pre-defined functions some default initial values and limits are set.; “C”In case of linear fitting, don’t calculate the chisquare (saves time).; “F”If fitting a linear function (e.g. polN), switch to use the default minimizer (e.g. Minuit). By default, polN functions are fitted by the linear fitter. *goption:The third parameter is the graphics option that is the same as in the TH1::Draw (see the ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:165248,error,errors,165248,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['error'],['errors']
Availability,"e the result depends on the chosen option.; 533///; 534/// If the denominator becomes 0 or pass > total, the corresponding bin is; 535/// skipped.; 536///; 537/// ### 2) calculating ratios of two Poisson means (option 'pois'):; 538///; 539/// The two histograms are interpreted as independent Poisson processes and the ratio; 540/// \f[; 541/// \tau = \frac{n_{1}}{n_{2}} = \frac{\varepsilon}{1 - \varepsilon}; 542/// \f]; 543/// with \f$\varepsilon = \frac{n_{1}}{n_{1} + n_{2}}\f$.; 544/// The histogram 'pass' is interpreted as \f$n_{1}\f$ and the total histogram; 545/// is used for \f$n_{2}\f$.; 546///; 547/// The (asymmetric) uncertainties of the Poisson ratio are linked to the uncertainties; 548/// of efficiency by a parameter transformation:; 549/// \f[; 550/// \Delta \tau_{low/up} = \frac{1}{(1 - \varepsilon)^{2}} \Delta \varepsilon_{low/up}; 551/// \f]; 552///; 553/// The x errors span each histogram bin (lowedge ... lowedge+width); 554/// The y errors depend on the chosen statistic methode which can be determined; 555/// by the options given below. For a detailed description of the used statistic; 556/// calculations please have a look at the corresponding functions!; 557///; 558/// Options:; 559/// - v : verbose mode: prints information about the number of used bins; 560/// and calculated efficiencies with their errors; 561/// - cl=x : determine the used confidence level (0<x<1) (default is 0.683); 562/// - cp : Clopper-Pearson interval (see TEfficiency::ClopperPearson); 563/// - w : Wilson interval (see TEfficiency::Wilson); 564/// - n : normal approximation propagation (see TEfficiency::Normal); 565/// - ac : Agresti-Coull interval (see TEfficiency::AgrestiCoull); 566/// - fc : Feldman-Cousins interval (see TEfficiency::FeldmanCousinsInterval); 567/// - midp : Lancaster mid-P interval (see TEfficiency::MidPInterval); 568/// - b(a,b): bayesian interval using a prior probability ~Beta(a,b); a,b > 0; 569/// (see TEfficiency::Bayesian); 570/// - mode : use mode of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html:19675,error,errors,19675,doc/master/TGraphAsymmErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html,1,['error'],['errors']
Availability,"e this if you want to know how much accuracy you can get from the available Monte Carlo statistics.; 1011 *; 1012 * **Example**: Simulation with 1000 events, the average weight is 0.1.; 1013 * The errors are as big as if one fitted to 1000 events.; 1014 * <tr><td> false <td> The errors reflect the errors of a dataset, which is as big as the sum of weights.; 1015 * Use this if you want to know what statistical errors you would get if you had a dataset with as many; 1016 * events as the (weighted) Monte Carlo simulation represents.; 1017 *; 1018 * **Example** (Data as above):; 1019 * The errors are as big as if one fitted to 100 events.; 1020 * </table>; 1021 * \note If the `SumW2Error` correction is enabled, the covariance matrix quality stored in the RooFitResult; 1022 * object will be the minimum of the original covariance matrix quality and the quality of the covariance; 1023 * matrix calculated with the squared weights.; 1024 * <tr><td> `AsymptoticError()` <td> Use the asymptotically correct approach to estimate errors in the presence of weights.; 1025 * This is slower but more accurate than `SumW2Error`. See also https://arxiv.org/abs/1911.01303).; 1026 This option even correctly implements the case of extended likelihood fits; 1027 (see this [writeup on extended weighted fits](https://root.cern/files/extended_weighted_fits.pdf) that complements the paper linked before).; 1028 * <tr><td> `PrefitDataFraction(double fraction)`; 1029 * <td> Runs a prefit on a small dataset of size fraction*(actual data size). This can speed up fits; 1030 * by finding good starting values for the parameters for the actual fit.; 1031 * \warning Prefitting may give bad results when used in binned analysis.; 1032 *; 1033 * <tr><th><th> Options to control informational output; 1034 * <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit).; 1035 * <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:49030,error,errors,49030,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['error'],['errors']
Availability,"e this object is deleted.; TObject*TSelector::fObjectcurrent object if processing object (vs. TTree); TStringTSelector::fOptionoption given to TTree::Process; TSelectorList*TSelector::fOutputlist of objects created during processing; Long64_tTSelector::fStatusselector status. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSelectorCint(); Default constructor for a Selector. ~TSelectorCint(); destructor for a Selector. void SetFuncProto(CallFunc_t* cf, ClassInfo_t* cl, const char* fname, const char* argtype, Bool_t required = kTRUE); Set the function prototype. void Build(TSelector* iselector, ClassInfo_t* cl, Bool_t isowner = kTRUE); Initialize the CallFunc objects when selector is interpreted. int Version() const; Invoke the Version function via the interpreter. void Init(TTree* ); Invoke the Init function via the interpreter. void Begin(TTree* tree); Invoke the Begin function via the interpreter. void SlaveBegin(TTree* ); Invoke the SlaveBegin function via the interpreter if available. Bool_t Notify(); Invoke the Notify function via the interpreter. Bool_t ProcessCut(Long64_t entry); Invoke the ProcessCut function via the interpreter. void ProcessFill(Long64_t entry); Invoke the ProcessFill function via the interpreter. Bool_t Process(Long64_t entry); Invoke the ProcessCut function via the interpreter. void SetOption(const char* option); Set the selector option. void SetObject(TObject* obj); Set the current object. void SetInputList(TList* input); Set the selector list of input objects. TList * GetOutputList() const; Return the list of output object. void SlaveTerminate(); Invoke the SlaveTerminate function via the interpreter if available. void Terminate(); Invoke the Terminate function via the interpreter. TSelector::EAbort GetAbort() const; Invoke the GetAbort function via the interpreter. Long64_t GetStatus() const; Invoke the GetStatus function via the interpreter. TClass * GetInterpretedClass() const; Retrieve the T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSelectorCint.html:7962,avail,available,7962,root/html528/TSelectorCint.html,https://root.cern,https://root.cern/root/html528/TSelectorCint.html,1,['avail'],['available']
Availability,"e this object is deleted.; TObject*TSelector::fObjectcurrent object if processing object (vs. TTree); TStringTSelector::fOptionoption given to TTree::Process; TSelectorList*TSelector::fOutputlist of objects created during processing; Long64_tTSelector::fStatusselector status. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSelectorCint(); Default constructor for a Selector. ~TSelectorCint(); destructor for a Selector. void SetFuncProto(CallFunc_t* cf, ClassInfo_t* cl, const char* fname, const char* argtype, Bool_t required = kTRUE); Set the function prototype. void Build(TSelector* iselector, ClassInfo_t* cl, Bool_t isowner = kTRUE); Initialize the CallFunc objects when selector is interpreted. int Version() const; Invoke the Version function via the interpreter. void Init(TTree* ); Invoke the Init function via the interpreter. void Begin(TTree* tree); Invoke the Begin function via the interpreter. void SlaveBegin(TTree* ); Invoke the SlaveBegin function via the interpreter if available. Bool_t Notify(); Invoke the Notify function via the interpreter. Bool_t ProcessCut(Long64_t entry); Invoke the ProcessCut function via the interpreter. void ProcessFill(Long64_t entry); Invoke the ProcessFill function via the interpreter. Bool_t Process(Long64_t entry); Invoke the ProcessCut function via the interpreter. void SetOption(const char* option); Set the selector option. void SetObject(TObject* obj); Set the current object. void SetInputList(TList* input); Set the selector list of input objects. TList * GetOutputList() const; Return the list of output object. void SlaveTerminate(); Invoke the SlaveTerminate function via the interpreter if available. void Terminate(); Invoke the Terminate function via the interpreter. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Invoke the GetAbort function via the interpreter. TSelector::EAbort GetAbort() const; Invoke the GetAbort function via the interpreter. void ResetAb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSelectorCint.html:8099,avail,available,8099,root/html530/TSelectorCint.html,https://root.cern,https://root.cern/root/html530/TSelectorCint.html,3,['avail'],['available']
Availability,"e tiff support in image processing. bonjour; ON; Bonjour support, requires libdns_sd and/or Avahi. builtin_afterimage; ON; Built included libAfterImage, or use system libAfterImage. builtin_fftw3; OFF; Built the FFTW3 library internally (downloading tarfile from the Web) (ROOT 6 only). builtin_ftgl; ON; Built included libFTGL, or use system libftgl. builtin_freetype; OFF; Built included libfreetype, or use system libfreetype. builtin_glew; ON; Built included libGLEW, or use system libGLEW. builtin_pcre; OFF; Built included libpcre, or use system libpcre. builtin_zlib; OFF; Built included libz, or use system libz. builtin_lzma; OFF; Built included liblzma, or use system liblzma. builtin_davix; OFF; Built the Davix library internally (downloading tarfile from the Web). builtin_gsl; OFF; Built the GSL library internally (downloading tarfile from the Web). builtin_cfitsio; OFF; Built the FITSIO library internally (downloading tarfile from the Web). builtin_xrootd; OFF; Built the XROOTD internally (downloading tarfile from the Web). builtin_llvm; ON; Built the LLVM internally. builtin_tbb; OFF; Built the TBB internally. cxx11; ON; Build using C++11 compatible mode, requires gcc > 4.7.x or clang. cxx14; OFF; Build using C++14 compatible mode, requires gcc > 4.9.x or clang. cxx17; OFF; Build using C++17 compatible mode, requires gcc > 7.1.x or clang. libcxx; OFF; Build using libc++, requires cxx11 option (MacOS X only, for the time being). castor; ON; CASTOR support, requires libshift from CASTOR >= 1.5.2. ccache; OFF; Enable ccache usage for speeding up builds. chirp; ON; Chirp support (Condor remote I/O), requires libchirp_client. cling; ON; Enable new CLING C++ interpreter. cocoa; *; Use native Cocoa/Quartz graphics backend (MacOS X only). davix; *; DavIx library for HTTP/WEBDAV access. dcache; ON; dCache support, requires libdcap from DESY. exceptions; ON; Turn on compiler exception handling capability. explicit link; *; Explicitly link with all dependent libraries. fai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/building-root.html:8302,down,downloading,8302,d/building-root.html,https://root.cern,https://root.cern/d/building-root.html,1,['down'],['downloading']
Availability,"e timeout = -1.0;; 12451 int enable_ping_pong = 0;; 12452 int ping_count = 0;; 12453 ; 12454 if (conn->dom_ctx->config[ENABLE_WEBSOCKET_PING_PONG]) {; 12455 enable_ping_pong =; 12456 !mg_strcasecmp(conn->dom_ctx->config[ENABLE_WEBSOCKET_PING_PONG],; 12457 ""yes"");; 12458 }; 12459 ; 12460 if (conn->dom_ctx->config[WEBSOCKET_TIMEOUT]) {; 12461 timeout = atoi(conn->dom_ctx->config[WEBSOCKET_TIMEOUT]) / 1000.0;; 12462 }; 12463 if ((timeout <= 0.0) && (conn->dom_ctx->config[REQUEST_TIMEOUT])) {; 12464 timeout = atoi(conn->dom_ctx->config[REQUEST_TIMEOUT]) / 1000.0;; 12465 }; 12466 if (timeout <= 0.0) {; 12467 timeout = atof(config_options[REQUEST_TIMEOUT].default_value) / 1000.0;; 12468 }; 12469 ; 12470 /* Enter data processing loop */; 12471 DEBUG_TRACE(""Websocket connection %s:%u start data processing loop"",; 12472 conn->request_info.remote_addr,; 12473 conn->request_info.remote_port);; 12474 conn->in_websocket_handling = 1;; 12475 mg_set_thread_name(""wsock"");; 12476 ; 12477 /* Loop continuously, reading messages from the socket, invoking the; 12478 * callback, and waiting repeatedly until an error occurs. */; 12479 while (STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag); 12480 && (!conn->must_close)) {; 12481 header_len = 0;; 12482 DEBUG_ASSERT(conn->data_len >= conn->request_len);; 12483 if ((body_len = (size_t)(conn->data_len - conn->request_len)) >= 2) {; 12484 len = buf[1] & 127;; 12485 mask_len = (buf[1] & 128) ? 4 : 0;; 12486 if ((len < 126) && (body_len >= mask_len)) {; 12487 /* inline 7-bit length field */; 12488 data_len = len;; 12489 header_len = 2 + mask_len;; 12490 } else if ((len == 126) && (body_len >= (4 + mask_len))) {; 12491 /* 16-bit length field */; 12492 header_len = 4 + mask_len;; 12493 data_len = ((((size_t)buf[2]) << 8) + buf[3]);; 12494 } else if (body_len >= (10 + mask_len)) {; 12495 /* 64-bit length field */; 12496 uint32_t l1, l2;; 12497 memcpy(&l1, &buf[2], 4); /* Use memcpy for alignment */; 12498 memcpy(&l2, &buf[6], 4);; 12499 header_len = 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:362070,error,error,362070,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"e timeout = -1.0;; 12452 int enable_ping_pong = 0;; 12453 int ping_count = 0;; 12454 ; 12455 if (conn->dom_ctx->config[ENABLE_WEBSOCKET_PING_PONG]) {; 12456 enable_ping_pong =; 12457 !mg_strcasecmp(conn->dom_ctx->config[ENABLE_WEBSOCKET_PING_PONG],; 12458 ""yes"");; 12459 }; 12460 ; 12461 if (conn->dom_ctx->config[WEBSOCKET_TIMEOUT]) {; 12462 timeout = atoi(conn->dom_ctx->config[WEBSOCKET_TIMEOUT]) / 1000.0;; 12463 }; 12464 if ((timeout <= 0.0) && (conn->dom_ctx->config[REQUEST_TIMEOUT])) {; 12465 timeout = atoi(conn->dom_ctx->config[REQUEST_TIMEOUT]) / 1000.0;; 12466 }; 12467 if (timeout <= 0.0) {; 12468 timeout = atof(config_options[REQUEST_TIMEOUT].default_value) / 1000.0;; 12469 }; 12470 ; 12471 /* Enter data processing loop */; 12472 DEBUG_TRACE(""Websocket connection %s:%u start data processing loop"",; 12473 conn->request_info.remote_addr,; 12474 conn->request_info.remote_port);; 12475 conn->in_websocket_handling = 1;; 12476 mg_set_thread_name(""wsock"");; 12477 ; 12478 /* Loop continuously, reading messages from the socket, invoking the; 12479 * callback, and waiting repeatedly until an error occurs. */; 12480 while (STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag); 12481 && (!conn->must_close)) {; 12482 header_len = 0;; 12483 DEBUG_ASSERT(conn->data_len >= conn->request_len);; 12484 if ((body_len = (size_t)(conn->data_len - conn->request_len)) >= 2) {; 12485 len = buf[1] & 127;; 12486 mask_len = (buf[1] & 128) ? 4 : 0;; 12487 if ((len < 126) && (body_len >= mask_len)) {; 12488 /* inline 7-bit length field */; 12489 data_len = len;; 12490 header_len = 2 + mask_len;; 12491 } else if ((len == 126) && (body_len >= (4 + mask_len))) {; 12492 /* 16-bit length field */; 12493 header_len = 4 + mask_len;; 12494 data_len = ((((size_t)buf[2]) << 8) + buf[3]);; 12495 } else if (body_len >= (10 + mask_len)) {; 12496 /* 64-bit length field */; 12497 uint32_t l1, l2;; 12498 memcpy(&l1, &buf[2], 4); /* Use memcpy for alignment */; 12499 memcpy(&l2, &buf[6], 4);; 12500 header_len = 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:362103,error,error,362103,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,"e title of axis0 to string0,; of axis1 to string1, of axis2 to string2, etc, just like it is done; for TH1/TH2/TH3.; To insert the character "";"" in one of the titles, one should use ""#;""; or ""#semicolon"". THnSparse* Rebin(const Int_t* group) const; Combine the content of ""group"" neighboring bins for each dimension; into a new bin and return the resulting THnSparse.; For group={2,1,1} and a 3 dimensional histogram, pairs of x-bins; will be grouped. void Reset(Option_t* option = """"); Clear the histogram. Double_t ComputeIntegral(); Calculate the integral of the histogram. void PrintBin(Long64_t idx, Option_t* options) const; Print bin with linex index ""idx"".; For valid options see PrintBin(Long64_t idx, Int_t* bin, Option_t* options). Bool_t PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; Print one bin. If ""idx"" is != -1 use that to determine the bin,; otherwise (if ""idx"" == -1) use the coordinate in ""bin"".; If ""options"" contains:; '0': only print bins with an error or content != 0; Return whether the bin was printed (depends on options). void PrintEntries(Long64_t from = 0, Long64_t howmany = -1, Option_t* options = 0) const; Print ""howmany"" entries starting at ""from"". If ""howmany"" is -1, print all.; If ""options"" contains:; 'x': print in the order of axis bins, i.e. (0,0,...,0), (0,0,...,1),...; '0': only print bins with content != 0. void Print(Option_t* option = """") const; Print a THnSparse. If ""option"" contains:; 'a': print axis details; 'm': print memory usage; 's': print statistics; 'c': print its content, too (this can generate a LOT of output!); Other options are forwarded to PrintEntries(). THnSparseArrayChunk& operator=(const THnSparse& ). Int_t GetEntries() const; { return fCoordinatesSize / fSingleCoordinateSize; }. Int_t GetChunkSize() const; { return fChunkSize; }. THnSparseArrayChunk* GetChunk(Int_t idx) const. TArray* GenerateArray() const. Long64_t Fill(Long64_t bin, Double_t w); Increment the bin content of ""bin"" by ""w"",; return the bi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THnSparse.html:25359,error,error,25359,root/html528/THnSparse.html,https://root.cern,https://root.cern/root/html528/THnSparse.html,2,['error'],['error']
Availability,"e title of axis0 to string0,; of axis1 to string1, of axis2 to string2, etc, just like it is done; for TH1/TH2/TH3.; To insert the character "";"" in one of the titles, one should use ""#;""; or ""#semicolon"". THnSparse* Rebin(const Int_t* group) const; Combine the content of ""group"" neighboring bins for each dimension; into a new bin and return the resulting THnSparse.; For group={2,1,1} and a 3 dimensional histogram, pairs of x-bins; will be grouped. void Reset(Option_t* option = """"); Clear the histogram. Double_t ComputeIntegral(); Calculate the integral of the histogram. void PrintBin(Long64_t idx, Option_t* options) const; Print bin with linex index ""idx"".; For valid options see PrintBin(Long64_t idx, Int_t* bin, Option_t* options). Bool_t PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; Print one bin. If ""idx"" is != -1 use that to determine the bin,; otherwise (if ""idx"" == -1) use the coordinate in ""bin"".; If ""options"" contains:; '0': only print bins with an error or content != 0; Return whether the bin was printed (depends on options). void PrintEntries(Long64_t from = 0, Long64_t howmany = -1, Option_t* options = 0) const; Print ""howmany"" entries starting at ""from"". If ""howmany"" is -1, print all.; If ""options"" contains:; 'x': print in the order of axis bins, i.e. (0,0,...,0), (0,0,...,1),...; '0': only print bins with content != 0. void Print(Option_t* option = """") const; Print a THnSparse. If ""option"" contains:; 'a': print axis details; 'm': print memory usage; 's': print statistics; 'c': print its content, too (this can generate a LOT of output!); Other options are forwarded to PrintEntries(). void Browse(TBrowser* b); Browse a THnSparse: create an entry (ROOT::THnSparseBrowsable) for each; dimension. THnSparse& operator=(const THnSparse& ). Int_t GetChunkSize() const; { return fChunkSize; }. THnSparseArrayChunk* GetChunk(Int_t idx) const. TArray* GenerateArray() const. Long64_t Fill(Long64_t bin, Double_t w); Increment the bin content of ""bin"" by",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/THnSparse.html:25463,error,error,25463,root/html532/THnSparse.html,https://root.cern,https://root.cern/root/html532/THnSparse.html,2,['error'],['error']
Availability,"e to CINT function. int TypeInfo_RefType(TypeInfo_t* ) const; Interface to CINT function. int TypeInfo_Size(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_TrueName(TypeInfo_t* tinfo) const; Interface to CINT function. void TypedefInfo_Delete(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t * TypedefInfo_Factory() const; Interface to CINT function. TypedefInfo_t * TypedefInfo_FactoryCopy(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t TypedefInfo_Init(TypedefInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypedefInfo_IsValid(TypedefInfo_t* tinfo) const; Interface to CINT function. Long_t TypedefInfo_Property(TypedefInfo_t* tinfo) const; Interface to CINT function. int TypedefInfo_Size(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_TrueName(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_Name(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_Title(TypedefInfo_t* tinfo) const; Interface to CINT function. TCint(); { }. TCint(const TCint& ). TCint & operator=(const TCint& ). void Execute(TMethod *, TObjArray *, int * /*error*/ = 0); { }. Int_t GetExitCode() const; { return fExitCode; }. TEnv * GetMapfile() const; { return fMapfile; }. Int_t GetMore() const; { return fMore; }. char * GetPrompt(); { return fPrompt; }. TObjArray * GetRootMapFiles() const; { return fRootmapFiles; }. Bool_t IsProcessLineLocked() const; { return fLockProcessLine; }. void SetProcessLineLock(Bool_t lock = kTRUE); { fLockProcessLine = lock; }. » Author: Fons Rademakers 01/03/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TCint.h 30549 2009-10-04 01:40:54Z rdm $ » Last generated: 2009-12-07 15:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCint.html:43495,error,error,43495,root/html526/TCint.html,https://root.cern,https://root.cern/root/html526/TCint.html,1,['error'],['error']
Availability,"e to be booked by the user and the getter functions fill the histogram bins. TUnfoldDensity simply returns a new, already filled histogram.; If you use this software, please consider the following citation; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201]; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Brief recipy to use TUnfoldSys: . a matrix (truth,reconstructed) is given as a two-dimensional histogram as argument to the constructor of TUnfold . a vector of measurements is given as one-dimensional histogram using the SetInput() method . repeated calls to SubtractBackground() to specify background sources . repeated calls to AddSysError() to specify systematic uncertainties . The unfolding is performed . either once with a fixed parameter tau, method DoUnfold(tau) . or multiple times in a scan to determine the best chouce of tau, method ScanLCurve() . Unfolding results are retrieved using various GetXXX() methods . Description of (systematic) uncertainties available in TUnfoldSys. There are covariance matrix contributions and there are systematic shifts. Systematic shifts correspond to the variation of a (buicance) parameter, for example a background normalisation or a one-sigma variation of a correlated systematic error. . Set by Access covariance matrix Access vector of shifts Description . (a)TUnfoldSys constructor GetEmatrixSysUncorr()n.a. uncorrelated errors on the input matrix histA, taken as the errors provided with the histogram. These are typically statistical errors from finite Monte Carlo samples. . (b)AddSysError()GetEmatrixSysSource() GetDeltaSysSource() correlated shifts of the input matrix histA. These shifts are taken as one-sigma effects when switchig on a given error soure. Several such error sources may be defined . (c)SetTauError()GetEmatrixSysTau() GetDeltaSysTau() A systematic error on the regularisation parameter tau . (d)SubtractBackground() GetEmatrixSysBackgroundUncorr()n.a. uncorrelated errors on backg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:2560,avail,available,2560,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,1,['avail'],['available']
Availability,"e to force an external value. ;  ; Double_t GetBranch () const;  Returns the formula value. ;  ; Double_t GetDeDw () const;  Computes the derivative of the error wrt the neuron weight. ;  ; Double_t GetDEDw () const;  ; Double_t GetDerivative () const;  computes the derivative for the appropriate function at the working point ;  ; Double_t GetError () const;  Computes the error for output neurons. ;  ; TNeuron * GetInLayer (Int_t n) const;  ; Double_t GetInput () const;  Returns neuron input. ;  ; const Double_t * GetNormalisation () const;  ; TSynapse * GetPost (Int_t n) const;  ; TSynapse * GetPre (Int_t n) const;  ; Double_t GetTarget () const;  Computes the normalized target pattern for output neurons. ;  ; ENeuronType GetType () const;  Returns the neuron type. ;  ; Double_t GetValue () const;  Computes the output using the appropriate function and all the weighted inputs, or uses the branch as input. ;  ; Double_t GetWeight () const;  ; TClass * IsA () const override;  ; void SetDEDw (Double_t in);  Sets the derivative of the total error wrt the neuron weight. ;  ; void SetNewEvent () const;  Inform the neuron that inputs of the network have changed, so that the buffered values have to be recomputed. ;  ; void SetNormalisation (Double_t mean, Double_t RMS);  Sets the normalization variables. ;  ; void SetWeight (Double_t w);  Sets the neuron weight to w. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; TTreeFormula * UseBranch (TTree *, const char *);  Sets a formula that can be used to make the neuron an input. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings ("""").",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNeuron.html:3284,error,error,3284,doc/master/classTNeuron.html,https://root.cern,https://root.cern/doc/master/classTNeuron.html,1,['error'],['error']
Availability,"e to make sure that the slot exists, to check that the contained object is initialized and that the returned pointer will not outlive the TThreadedObject that returned it, which maintains ownership of the actual object. ; Definition at line 260 of file TThreadedObject.hxx. ◆ GetAtSlotUnchecked(). template<class T > . std::shared_ptr< T > ROOT::TThreadedObject< T >::GetAtSlotUnchecked ; (; unsigned ; i); const. inline . Access a particular slot which corresponds to a single thread. ; This is in general faster than the GetAtSlot method but it is responsibility of the caller to make sure that the slot exists and to check that the contained object is initialized (and not a nullptr). ; Definition at line 249 of file TThreadedObject.hxx. ◆ GetNSlots(). template<class T > . unsigned ROOT::TThreadedObject< T >::GetNSlots ; (; ); const. inline . Return the number of currently available slot. ; The method is safe to call concurrently to other TThreadedObject methods. Note that slots could be available but contain no data (i.e. a nullptr) if they have not been used yet. ; Definition at line 191 of file TThreadedObject.hxx. ◆ GetThisSlotNumber(). template<class T > . unsigned ROOT::TThreadedObject< T >::GetThisSlotNumber ; (; ). inlineprivate . Get the slot number for this threadID, make a slot if needed. ; Definition at line 338 of file TThreadedObject.hxx. ◆ Merge(). template<class T > . std::shared_ptr< T > ROOT::TThreadedObject< T >::Merge ; (; TThreadedObjectUtils::MergeFunctionType< T > ; mergeFunction = TThreadedObjectUtils::MergeTObjects<T>). inline . Merge all the thread private objects. ; Can be called once: it does not create any new object but destroys the present bookkeping collapsing all objects into the one at slot 0. ; Definition at line 294 of file TThreadedObject.hxx. ◆ operator->(). template<class T > . T * ROOT::TThreadedObject< T >::operator-> ; (; ). inline . Access the wrapped object and allow to call its methods. ; Definition at line 286 of file TThreaded",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html:7393,avail,available,7393,doc/v632/classROOT_1_1TThreadedObject.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html,2,['avail'],['available']
Availability,"e to master.Definition TGeoNavigator.cxx:2700; TGeoNavigator::SetCurrentPointvoid SetCurrentPoint(const Double_t *point)Definition TGeoNavigator.h:172; TGeoNavigator::fCurrentMatrixTGeoHMatrix * fCurrentMatrixbackup stateDefinition TGeoNavigator.h:81; TGeoNavigator::fOverlapClustersInt_t * fOverlapClusterscurrent recursive position in fOverlapClustersDefinition TGeoNavigator.h:60; TGeoNavigator::GetCldirconst Double_t * GetCldir() constDefinition TGeoNavigator.h:165; TGeoNavigator::fTopNodeTGeoNode * fTopNodecurrent nodeDefinition TGeoNavigator.h:76; TGeoNavigator::LocalToMasterVectvoid LocalToMasterVect(const Double_t *local, Double_t *master) constDefinition TGeoNavigator.h:236; TGeoNavigator::IsSafeStepBool_t IsSafeStep(Double_t proposed, Double_t &newsafety) constIn case a previous safety value was computed, check if the safety region is still safe for the curren...Definition TGeoNavigator.cxx:2609; TGeoNavigator::SearchNodeTGeoNode * SearchNode(Bool_t downwards=kFALSE, const TGeoNode *skipnode=nullptr)Returns the deepest node containing fPoint, which must be set a priori.Definition TGeoNavigator.cxx:1924; TGeoNavigator::fLastSafetyDouble_t fLastSafetysafety radius from current pointDefinition TGeoNavigator.h:45; TGeoNavigator::~TGeoNavigator~TGeoNavigator() overrideDestructor.Definition TGeoNavigator.cxx:169; TGeoNavigator::TGeoNavigatorTGeoNavigator()global mode is caching enabled for parallel world safety callsDefinition TGeoNavigator.cxx:57; TGeoNavigator::SetCurrentDirectionvoid SetCurrentDirection(const Double_t *dir)Definition TGeoNavigator.h:185; TGeoNavigator::BuildCachevoid BuildCache(Bool_t dummy=kFALSE, Bool_t nodeid=kFALSE)Builds the cache for physical nodes and global matrices.Definition TGeoNavigator.cxx:182; TGeoNavigator::fNextDaughterIndexInt_t fNextDaughterIndexnumber of overlapping nodes on current branchDefinition TGeoNavigator.h:57; TGeoNavigator::PopPathBool_t PopPath(Int_t index)Definition TGeoNavigator.h:255; TGeoNavigator::fIsNullStepBo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoNavigator_8h_source.html:31177,down,downwards,31177,doc/master/TGeoNavigator_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoNavigator_8h_source.html,1,['down'],['downwards']
Availability,"e to one (greater than 0.99). This indicates both an exceptionally difficult problem, and one which has been badly parameterised so that individual errors are not very meaningful because they are so highly correlated.; Parameter at limit. This condition, signalled by a MINUIT warning message, may make both the function minimum and parameter errors unreliable. See the discussion above `‘Getting the right parameter errors with limits’'. The best way to be absolutely sure of the errors, is to use independent'' calculations and compare them, or compare the calculated errors with a picture of the function. Theoretically, the covariance matrix for aphysical'' function must be positive-definite at the minimum, although it may not be so for all points far away from the minimum, even for a well-determined physical problem. Therefore, if MIGRAD reports that it has found a non-positive-definite covariance matrix, this may be a sign of one or more of the following:; A non-physical region:; On its way to the minimum, MIGRAD may have traversed a region which has unphysical behaviour, which is of course not a serious problem as long as it recovers and leaves such a region.; An underdetermined problem:; If the matrix is not positive-definite even at the minimum, this may mean that the solution is not well-defined, for example that there are more unknowns than there are data points, or that the parameterisation of the fit contains a linear dependence. If this is the case, then MINUIT (or any other program) cannot solve your problem uniquely, and the error matrix will necessarily be largely meaningless, so the user must remove the under-determinedness by reformulating the parameterisation. MINUIT cannot do this itself.; Numerical inaccuracies:; It is possible that the apparent lack of positive-definiteness is in fact only due to excessive roundoff errors in numerical calculations in the user function or not enough precision. This is unlikely in general, but becomes more likely if the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuit.html:10145,recover,recovers,10145,doc/master/classTMinuit.html,https://root.cern,https://root.cern/doc/master/classTMinuit.html,1,['recover'],['recovers']
Availability,"e tolerance=1e-10) const;  Find the nearest point to xvalue. ;  ; double getFitRangeBinW () const override;  Get the bin width associated with this plotable object. ;  ; double getFitRangeNEvt () const override;  Return the number of events associated with the plotable object, it is always 1 for curves. ;  ; double getFitRangeNEvt (double xlo, double xhi) const override;  Return the number of events associated with the plotable object, in the given range. ;  ; double interpolate (double x, double tolerance=1e-10) const;  Return linearly interpolated value of curve at xvalue. ;  ; TClass * IsA () const override;  ; bool isIdentical (const RooCurve &other, double tol=1e-6, bool verbose=true) const;  Return true if curve is identical to other curve allowing for given absolute tolerance on each point compared point. ;  ; RooCurve * makeErrorBand (const std::vector< RooCurve * > &plusVar, const std::vector< RooCurve * > &minusVar, const TMatrixD &V, double Z=1) const;  Construct filled RooCurve represented error band represent the error added in quadrature defined by the curves arguments plusVar and minusVar corresponding to one-sigma variations of each parameter. ;  ; RooCurve * makeErrorBand (const std::vector< RooCurve * > &variations, double Z=1) const;  Construct filled RooCurve represented error band that captures alpha% of the variations of the curves passed through argument variations, where the percentage alpha corresponds to the central interval fraction of a significance Z. ;  ; void Print (Option_t *options=nullptr) const override;  This method must be overridden when a class wants to print itself. ;  ; void printClassName (std::ostream &os) const override;  Print the class name of this curve. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print the details of this curve. ;  ; void printName (std::ostream &os) const override;  Print name of object. ;  ; void printTitle (std::ostream &os) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCurve.html:5295,error,error,5295,doc/master/classRooCurve.html,https://root.cern,https://root.cern/doc/master/classRooCurve.html,2,['error'],['error']
Availability,"e transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamTarget(); Default constructor for streamer, user should not use it. PDEFoamTarget(const TString& , UInt_t ); User constructor. Parameters:. - Name - name of PDEFoam object. - target - target number to range-search for. PDEFoamTarget(const TMVA::PDEFoamTarget& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). void FillFoamCells(const TMVA::Event* ev, Float_t wt); This function fills an event into the discriminant PDEFoam. The; weight 'wt' is filled into cell element 0 if the event is of; class 'fTarget', and filled into cell element 1 otherwise. void Finalize(); Calculate average cell target in every cell and save them to the; cell. Cell element 0 will contain the average target and cell; element 1 will contain the error on the target. Bool_t CellValueIsUndefined(TMVA::PDEFoamCell* cell); Returns true, if the target error equals -1, as set in; Finalize() in case of no events in the cell. Float_t GetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase* ); This function finds the cell, which corresponds to the given; untransformed event vector 'xvec' and return its value, which is; given by the parameter 'cv'. If cv == kValue, it is checked wether the cell value is; undefined. If this is the case, then the mean of the neighbor's; target values is returned, using GetAverageNeighborsValue(). Float_t GetAverageNeighborsValue(vector<Float_t>& , TMVA::ECellValue ); This function returns the average value 'cv' of only nearest; neighbor cells. It is used in cases, where empty cells shall; not be evaluated. Parameters:; - txvec - event vector, transformed into foam coordinates [0, 1]; - cv - cell value, see definition of ECellValue. virtual ~PDEFoamTarget(); {}. » Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt » Copyright (c) 2008, 2010: *; » Last changed: root",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoamTarget.html:12590,error,error,12590,root/html530/TMVA__PDEFoamTarget.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoamTarget.html,3,['error'],['error']
Availability,"e transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamTarget(); Default constructor for streamer, user should not use it. PDEFoamTarget(const TString& , UInt_t ); User constructor. Parameters:. - name - name of PDEFoam object. - target - target number to range-search for. PDEFoamTarget(const TMVA::PDEFoamTarget& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). void FillFoamCells(const TMVA::Event* ev, Float_t wt); This function fills an event into the discriminant PDEFoam. The; weight 'wt' is filled into cell element 0 if the event is of; class 'fTarget', and filled into cell element 1 otherwise. void Finalize(); Calculate average cell target in every cell and save them to the; cell. Cell element 0 will contain the average target and cell; element 1 will contain the error on the target. Bool_t CellValueIsUndefined(TMVA::PDEFoamCell* cell); Returns true, if the target error equals -1, as set in; Finalize() in case of no events in the cell. Float_t GetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase* ); This function finds the cell, which corresponds to the given; untransformed event vector 'xvec' and return its value, which is; given by the parameter 'cv'. If cv == kValue, it is checked wether the cell value is; undefined. If this is the case, then the mean of the neighbor's; target values is returned, using GetAverageNeighborsValue(). Float_t GetAverageNeighborsValue(vector<Float_t>& , TMVA::ECellValue ); This function returns the average value 'cv' of only nearest; neighbor cells. It is used in cases, where empty cells shall; not be evaluated. Parameters:; - txvec - event vector, transformed into foam coordinates [0, 1]; - cv - cell value, see definition of ECellValue. virtual ~PDEFoamTarget(); {}. » Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt » Copyright (c) 2008, 2010: *; » Last changed: root",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__PDEFoamTarget.html:12606,error,error,12606,root/html534/TMVA__PDEFoamTarget.html,https://root.cern,https://root.cern/root/html534/TMVA__PDEFoamTarget.html,6,['error'],['error']
Availability,"e unix domain service. int AcceptConnection(int sock); Accept a connection. void CloseConnection(int sock, Bool_t force = kFALSE); Close socket connection. int RecvRaw(int sock, void* buffer, int length, int flag); Receive exactly length bytes into buffer. Use opt to receive out-of-band; data or to have a peek at what is in the buffer (see TSocket). int SendRaw(int sock, const void* buffer, int length, int flag); Send exactly length bytes from buffer. Use opt to send out-of-band; data (see TSocket). int RecvBuf(int sock, void* buffer, int length); Receive a buffer headed by a length indicator. int SendBuf(int sock, const void* buffer, int length); Send a buffer headed by a length indicator. int SetSockOpt(int sock, int kind, int val); Set socket option. int GetSockOpt(int sock, int kind, int* val); Get socket option. int GetSysInfo(SysInfo_t* info) const; Returns static system info, like OS type, CPU type, number of CPUs; RAM size, etc into the SysInfo_t structure. Returns -1 in case of error,; 0 otherwise. int GetCpuInfo(CpuInfo_t* info, Int_t sampleTime = 1000) const; Returns cpu load average and load info into the CpuInfo_t structure.; Returns -1 in case of error, 0 otherwise. Use sampleTime to set the; interval over which the CPU load will be measured, in ms (default 1000). int GetMemInfo(MemInfo_t* info) const; Returns ram and swap memory usage info into the MemInfo_t structure.; Returns -1 in case of error, 0 otherwise. int GetProcInfo(ProcInfo_t* info) const; Returns cpu and memory used by this process into the ProcInfo_t structure.; Returns -1 in case of error, 0 otherwise. int CompileMacro(const char* filename, Option_t* opt = """", const char* library_name = """", const char* build_dir = """", UInt_t dirmode = 0); This method compiles and loads a shared library containing; the code from the file ""filename"". The possible options are:; k : keep the shared library after the session end.; f : force recompilation.; g : compile with debug symbol; O : optimized the code",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSystem.html:36741,error,error,36741,root/html528/TSystem.html,https://root.cern,https://root.cern/root/html528/TSystem.html,1,['error'],['error']
Availability,"e unix domain service. int AcceptConnection(int sock); Accept a connection. void CloseConnection(int sock, Bool_t force = kFALSE); Close socket connection. int RecvRaw(int sock, void* buffer, int length, int flag); Receive exactly length bytes into buffer. Use opt to receive out-of-band; data or to have a peek at what is in the buffer (see TSocket). int SendRaw(int sock, const void* buffer, int length, int flag); Send exactly length bytes from buffer. Use opt to send out-of-band; data (see TSocket). int RecvBuf(int sock, void* buffer, int length); Receive a buffer headed by a length indicator. int SendBuf(int sock, const void* buffer, int length); Send a buffer headed by a length indicator. int SetSockOpt(int sock, int kind, int val); Set socket option. int GetSockOpt(int sock, int kind, int* val); Get socket option. int GetSysInfo(SysInfo_t* info) const; Returns static system info, like OS type, CPU type, number of CPUs; RAM size, etc into the SysInfo_t structure. Returns -1 in case of error,; 0 otherwise. int GetCpuInfo(CpuInfo_t* info, Int_t sampleTime = 1000) const; Returns cpu load average and load info into the CpuInfo_t structure.; Returns -1 in case of error, 0 otherwise. Use sampleTime to set the; interval over which the CPU load will be measured, in ms (default 1000). int GetMemInfo(MemInfo_t* info) const; Returns ram and swap memory usage info into the MemInfo_t structure.; Returns -1 in case of error, 0 otherwise. int GetProcInfo(ProcInfo_t* info) const; Returns cpu and memory used by this process into the ProcInfo_t structure.; Returns -1 in case of error, 0 otherwise. int CompileMacro(const char* filename, Option_t* opt = """", const char* library_name = """", const char* build_dir = """", UInt_t dirmode = 0); This method compiles and loads a shared library containing; the code from the file ""filename"". The return value is true (1) in case of success and false (0); in case of error. The possible options are:; k : keep the shared library after the session end.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSystem.html:36810,error,error,36810,root/html530/TSystem.html,https://root.cern,https://root.cern/root/html530/TSystem.html,9,['error'],['error']
Availability,"e used in the fit (3D histograms only).; Use ReleaseRangeY() to go back to fitting the full histogram.; The consistency check ensures that no empty fit range occurs (and also; recomputes the bin content integrals).; Arguments:; low: lower Y bin number; high: upper Y bin number. void ReleaseRangeZ(); Release restrictions on the Z range of the histogram to be used in the fit. void Constrain(Int_t parm, Double_t low, Double_t high); Constrain the values of parameter number <parm> (the parameter numbering; follows that of the input template vector).; Use UnConstrain() to remove this constraint. void UnConstrain(Int_t parm); Remove the constraints on the possible values of parameter <parm>. void CheckConsistency(); Function used internally to check the consistency between the; various histograms. Checks are performed on nonexistent or empty; histograms, the precise histogram class, and the number of bins.; In addition, integrals over the ""allowed"" bin ranges are computed.; Any inconsistency results in a error. Int_t Fit(); Perform the fit with the default UP value.; The value returned is the minimisation status. void ErrorAnalysis(Double_t UP); Set UP to the given value (see class TMinuit), and perform a MINOS minimisation. void GetResult(Int_t parm, Double_t& value, Double_t& error) const; Obtain the fit result for parameter <parm> (the parameter numbering; follows that of the input template vector). TH1* GetPlot(); Return the ""template prediction"" corresponding to the fit result (this is not; the same as the weighted sum of template distributions, as template statistical; uncertainties are taken into account).; Note that the name of this histogram will simply be the same as that of the; ""data"" histogram, prefixed with the string ""Fraction fit to hist: "". void GetRanges(Int_t& minX, Int_t& maxX, Int_t& minY, Int_t& maxY, Int_t& minZ, Int_t& maxZ) const; Used internally to obtain the bin ranges according to the dimensionality of; the histogram and the limits set by hand. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFractionFitter.html:15717,error,error,15717,root/html528/TFractionFitter.html,https://root.cern,https://root.cern/root/html528/TFractionFitter.html,1,['error'],['error']
Availability,"e value with data from the field. ; The memory location pointed to by to needs to be of the fitting type. The fast path is conditioned by the field qualifying as simple, i.e. maps as-is to a single column and has no read callback. ; Definition at line 362 of file RFieldBase.hxx. ◆ Read() [2/2]. void ROOT::Experimental::RFieldBase::Read ; (; RClusterIndex ; clusterIndex, . void * ; to . ). inlineprotected . Populate a single value with data from the field. ; The memory location pointed to by to needs to be of the fitting type. The fast path is conditioned by the field qualifying as simple, i.e. maps as-is to a single column and has no read callback. ; Definition at line 378 of file RFieldBase.hxx. ◆ ReadBulk(). std::size_t ROOT::Experimental::RFieldBase::ReadBulk ; (; const RBulkSpec & ; bulkSpec). protected . Returns the number of newly available values, that is the number of bools in bulkSpec.fMaskAvail that flipped from false to true. ; As a special return value, kAllSet can be used if all values are read independent from the masks. ; Definition at line 1086 of file RField.cxx. ◆ ReadBulkImpl(). std::size_t ROOT::Experimental::RFieldBase::ReadBulkImpl ; (; const RBulkSpec & ; bulkSpec). protectedvirtual . General implementation of bulk read. ; Loop over the required range and read values that are required and not already present. Derived classes may implement more optimized versions of this method. See ReadBulk() for the return value. ; Reimplemented in ROOT::Experimental::RField< RNTupleCardinality< SizeT > >, and ROOT::Experimental::RRVecField.; Definition at line 941 of file RField.cxx. ◆ ReadGlobalImpl(). void ROOT::Experimental::RFieldBase::ReadGlobalImpl ; (; NTupleSize_t ; globalIndex, . void * ; to . ). protectedvirtual . Reimplemented in ROOT::Experimental::RClassField, ROOT::Experimental::RStreamerField, ROOT::Experimental::REnumField, ROOT::Experimental::RField< RNTupleCardinality< SizeT > >, ROOT::Experimental::RField< TObject >, ROOT::Experimental::RP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:48248,mask,masks,48248,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,1,['mask'],['masks']
Availability,"e variation of a (buicance) parameter, for example a background normalisation or a one-sigma variation of a correlated systematic error. . Set by Access covariance matrix Access vector of shifts Description . (a)TUnfoldSys constructor GetEmatrixSysUncorr()n.a. uncorrelated errors on the input matrix histA, taken as the errors provided with the histogram. These are typically statistical errors from finite Monte Carlo samples. . (b)AddSysError()GetEmatrixSysSource() GetDeltaSysSource() correlated shifts of the input matrix histA. These shifts are taken as one-sigma effects when switchig on a given error soure. Several such error sources may be defined . (c)SetTauError()GetEmatrixSysTau() GetDeltaSysTau() A systematic error on the regularisation parameter tau . (d)SubtractBackground() GetEmatrixSysBackgroundUncorr()n.a. uncorrelated errors on background sources, originating from the errors provided with the background histograms . (e)SubtractBackground GetEmatrixSysBackgroundScale()GetDeltaSysBackgroundScale() scale errors on background sources . (i)SetInput() GetEmatrixInput()n.a.statistical uncertainty of the input (the measurement) . (i)+(d)+(e)see aboveGetEmatrix()n.a. Partial sun of uncertainties: all sources which are propagated to the covariance before unfolding . (i)+(a)+(b)+(c)+(d)+(e)see aboveGetEmatrixTotal() n.a.All known error sources summed up . Note: (a), (b), (c) are propagated to the result AFTER unfolding, whereas the background errors (d) and (e) are added to the data errors BEFORE unfolding. For this reason the errors of type (d) and (e) are INCLUDED in the standard error matrix and other methods provided by the base class TUnfold, whereas errors of type (a), (b), (c) are NOT INCLUDED in the methods provided by the base class TUnfold. ; Definition at line 59 of file TUnfoldSys.h. Public Types; enum  ESysErrMode { kSysErrModeMatrix =0; , kSysErrModeShift =1; , kSysErrModeRelative =2; };  type of matrix specified with AddSysError() More...;  ;  Public",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:3723,error,errors,3723,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,1,['error'],['errors']
Availability,"e were waiting, so we need to do the checks again.; 2997 ; 2998 cl = (TClass*)gROOT->GetListOfClasses()->FindObject(name);; 2999 if (cl) {; 3000 if (cl->IsLoaded() || cl->TestBit(kUnloading)) return cl;; 3001 ; 3002 // We could speed-up some of the search by adding (the equivalent of); 3003 //; 3004 // if (cl->GetState() == kInterpreter) return cl; 3005 //; 3006 // In this case, if a ROOT dictionary was available when the TClass; 3007 // was first requested it would have been used and if a ROOT dictionary is; 3008 // loaded later on TClassTable::Add will take care of updating the TClass.; 3009 // So as far as ROOT dictionary are concerned, if the current TClass is; 3010 // in interpreted state, we are sure there is nothing to load.; 3011 //; 3012 // However (see TROOT::LoadClass), the TClass can also be loaded/provided; 3013 // by a user provided TClassGenerator. We have no way of knowing whether; 3014 // those do (or even can) behave the same way as the ROOT dictionary and; 3015 // have the 'dictionary is now available for use' step informs the existing; 3016 // TClass that their dictionary is now available.; 3017 ; 3018 //we may pass here in case of a dummy class created by TVirtualStreamerInfo; 3019 load = kTRUE;; 3020 }; 3021 ; 3022 if (TClassEdit::IsArtificial(name)) {; 3023 // If there is a @ symbol (followed by a version number) then this is a synthetic class name created; 3024 // from an already normalized name for the purpose of supporting schema evolution.; 3025 // There is no dictionary or interpreter information about this kind of class, the only; 3026 // (undesirable) side-effect of doing the search would be a waste of CPU time and potential; 3027 // auto-loading or auto-parsing based on the scope of the name.; 3028 return cl;; 3029 }; 3030 ; 3031 // To avoid spurious auto parsing, let's check if the name as-is is; 3032 // known in the TClassTable.; 3033 DictFuncPtr_t dict = TClassTable::GetDictNorm(name);; 3034 if (dict) {; 3035 // The name is normalize",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:113489,avail,available,113489,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,2,['avail'],['available']
Availability,"e were waiting, so we need to do the checks again.; 3064 ; 3065 cl = (TClass*)gROOT->GetListOfClasses()->FindObject(name);; 3066 if (cl) {; 3067 if (cl->IsLoaded() || cl->TestBit(kUnloading)) return cl;; 3068 ; 3069 // We could speed-up some of the search by adding (the equivalent of); 3070 //; 3071 // if (cl->GetState() == kInterpreter) return cl; 3072 //; 3073 // In this case, if a ROOT dictionary was available when the TClass; 3074 // was first requested it would have been used and if a ROOT dictionary is; 3075 // loaded later on TClassTable::Add will take care of updating the TClass.; 3076 // So as far as ROOT dictionary are concerned, if the current TClass is; 3077 // in interpreted state, we are sure there is nothing to load.; 3078 //; 3079 // However (see TROOT::LoadClass), the TClass can also be loaded/provided; 3080 // by a user provided TClassGenerator. We have no way of knowing whether; 3081 // those do (or even can) behave the same way as the ROOT dictionary and; 3082 // have the 'dictionary is now available for use' step informs the existing; 3083 // TClass that their dictionary is now available.; 3084 ; 3085 //we may pass here in case of a dummy class created by TVirtualStreamerInfo; 3086 load = kTRUE;; 3087 }; 3088 ; 3089 if (TClassEdit::IsArtificial(name)) {; 3090 // If there is a @ symbol (followed by a version number) then this is a synthetic class name created; 3091 // from an already normalized name for the purpose of supporting schema evolution.; 3092 // There is no dictionary or interpreter information about this kind of class, the only; 3093 // (undesirable) side-effect of doing the search would be a waste of CPU time and potential; 3094 // auto-loading or auto-parsing based on the scope of the name.; 3095 return cl;; 3096 }; 3097 ; 3098 // To avoid spurious auto parsing, let's check if the name as-is is; 3099 // known in the TClassTable.; 3100 DictFuncPtr_t dict = TClassTable::GetDictNorm(name);; 3101 if (dict) {; 3102 // The name is normalize",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:116240,avail,available,116240,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,2,['avail'],['available']
Availability,"e while stride2 the stride in dimension space.; For 1-dim points : stride1=1, stride2=1; for multi-dim points arranged as (x0,x1,...,xN,y0,....yN) stride1=1 stride2=n; for multi-dim points arraged as (x0,y0,..,x1,y1,...,xN,yN,..) stride1=ndim, stride2=1. the confidence interval are returned in the array ci; cl is the desired confidedence interval value; norm is a flag to control if the intervals need to be normalized to the chi2/ndf value; By default the intervals are corrected using the chi2/ndf value of the fit if a chi2 fit is performed. void GetConfidenceIntervals(const ROOT::Fit::BinData& data, double* ci, double cl = 0.95, bool norm = true) const. evaluate confidence interval for the point specified in the passed data sets; the confidence interval are returned in the array ci; cl is the desired confidence interval value. int Index(const string& name) const; get index for parameter name (return -1 if not found). void NormalizeErrors(); normalize errors using chi2/ndf for chi2 fits. bool NormalizedErrors(); flag to chek if errors are normalized. { return fNormalized; }. void Print(ostream& os, bool covmat = false) const; print the result and optionaly covariance matrix and correlations. void PrintCovMatrix(ostream& os) const; print error matrix and correlations. bool IsParameterBound(unsigned int ipar) const; query if a parameter is bound. bool IsParameterFixed(unsigned int ipar) const; query if a parameter is fixed. std::string GetParameterName(unsigned int ipar) const; get name of parameter (deprecated). void SetModelFunction(ROOT::Fit::FitResult::IModelFunction* func); { fFitFunc = func; }. » Author: L. Moneta Wed Aug 30 11:05:34 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: FitResult.h 37438 2010-12-09 14:14:30Z moneta $ » Last generated: 2010-12-09 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Fit__FitResult.html:10369,error,errors,10369,root/html528/ROOT__Fit__FitResult.html,https://root.cern,https://root.cern/root/html528/ROOT__Fit__FitResult.html,2,['error'],"['error', 'errors']"
Availability,"e width; 208- The two digits number `ff` represent the filled area width.; 209- The sign of ""ffll"" allows to flip the filled area from one side of the line to the other.; 210 ; 211The current fill area attributes are used to draw the hatched zone.; 212 ; 213Begin_Macro(source); 214../../../tutorials/graphs/exclusiongraph.C; 215End_Macro; 216 ; 217\anchor GrP3; 218### Graphs with error bars; 219Three classes are available to handle graphs with error bars:; 220`TGraphErrors`, `TGraphAsymmErrors` and `TGraphBentErrors`.; 221The following drawing options are specific to graphs with error bars:; 222 ; 223| Option | Description |; 224|----------|-------------------------------------------------------------------|; 225| ""Z"" | Do not draw small horizontal and vertical lines the end of the error bars. Without ""Z"", the default is to draw these. |; 226| "">"" | An arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. |; 227| \""\|>\"" | A filled arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. |; 228| ""X"" | Do not draw error bars. By default, graph classes that have errors are drawn with the errors (TGraph itself has no errors, and so this option has no effect.) |; 229| \""\|\|\"" | Draw only the small vertical/horizontal lines at the ends of the error bars, without drawing the bars themselves. This option is interesting to superimpose statistical-only errors on top of a graph with statistical+systematic errors. |; 230| ""[]"" | Does the same as option \""\|\|\"" except that it draws additional marks at the ends of the small vertical/horizontal lines. It makes plots less ambiguous in case several graphs are drawn on the same picture. |; 231| ""0"" | By default, when a data point is outside the visible range along the Y axis, the error bars are not drawn. This option forces error bars' drawing for the data points outside the visible range along the Y axis (see example below). |; 232| ""2"" | Er",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:8320,error,error,8320,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['error'],['error']
Availability,"e window wid. ; Parameters. [in]wid: Window identifier. ; [in]x: x new window position ; [in]y: y new window position . Reimplemented from TVirtualX.; Definition at line 1080 of file TGX11.cxx. ◆ MoveWindow() [2/2]. void TGX11::MoveWindow ; (; Window_t ; id, . Int_t ; x, . Int_t ; y . ). overridevirtual . Move a window. ; Reimplemented from TVirtualX.; Definition at line 297 of file GX11Gui.cxx. ◆ NextEvent(). void TGX11::NextEvent ; (; Event_t & ; event). overridevirtual . Copies first pending event from event queue to Event_t structure and removes event from queue. ; Not all of the event fields are valid for each event type, except fType and fWindow. ; Reimplemented from TVirtualX.; Definition at line 1411 of file GX11Gui.cxx. ◆ OpenDisplay() [1/2]. Int_t TGX11::OpenDisplay ; (; const char * ; dpyName). overridevirtual . Open connection to display server (if such a thing exist on the current platform). ; On X11 this method returns on success the X display socket descriptor (> 0), 0 in case of batch mode and < 0 in case of failure (cannot connect to display dpyName). It also initializes the TGX11 class via Init(). Called from TGClient ctor. ; Reimplemented from TVirtualX.; Definition at line 809 of file GX11Gui.cxx. ◆ OpenDisplay() [2/2]. Int_t TGX11::OpenDisplay ; (; void * ; display). Open the display. Return -1 if the opening fails, 0 when ok. ; Definition at line 1091 of file TGX11.cxx. ◆ OpenPixmap(). Int_t TGX11::OpenPixmap ; (; UInt_t ; w, . UInt_t ; h . ). overridevirtual . Open a new pixmap. ; Parameters. [in]w,h: Width and height of the pixmap. . Reimplemented from TVirtualX.; Definition at line 1243 of file TGX11.cxx. ◆ ParseColor(). Bool_t TGX11::ParseColor ; (; Colormap_t ; cmap, . const char * ; cname, . ColorStruct_t & ; color . ). overridevirtual . Parse string cname containing color name, like ""green"" or ""#00FF00"". ; It returns a filled in ColorStruct_t. Returns kFALSE in case parsing failed, kTRUE in case of success. On success, the ColorStruct_t f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGX11.html:95046,failure,failure,95046,doc/master/classTGX11.html,https://root.cern,https://root.cern/doc/master/classTGX11.html,1,['failure'],['failure']
Availability,"e with a define. The end point of a branch is always an action. Running on a range of entries; It is sometimes necessary to limit the processing of the dataset to a range of entries. For this reason, the RDataFrame offers the concept of ranges as a node of the RDataFrame chain of transformations; this means that filters, columns and actions can be concatenated to and intermixed with Range()s. If a range is specified after a filter, the range will act exclusively on the entries passing the filter – it will not even count the other entries! The same goes for a Range() hanging from another Range(). Here are some commented examples: RDataFrame d(""myTree"", ""file.root"");; // Here we store a dataframe that loops over only the first 30 entries in a variable; auto d30 = d.Range(30);; // This is how you pick all entries from 15 onwards; auto d15on = d.Range(15, 0);; // We can specify a stride too, in this case we pick an event every 3; auto d15each3 = d.Range(0, 15, 3);; Note that ranges are not available when multi-threading is enabled. More information on ranges is available here. Executing multiple actions in the same event loop; As a final example let us apply two different cuts on branch ""MET"" and fill two different histograms with the ""pt_v"" of the filtered events. By now, you should be able to easily understand what is happening: RDataFrame d(""treeName"", ""file.root"");; auto h1 = d.Filter(""MET > 10"").Histo1D(""pt_v"");; auto h2 = d.Histo1D(""pt_v"");; h1->Draw(); // event loop is run once here; h2->Draw(""SAME""); // no need to run the event loop again; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; h1TH1F * h1Definition legend1.C:5; RDataFrame executes all above actions by running the event-loop only once. The trick is that actions are not executed at the moment they are called, but they are lazy, i.e. delayed until the moment one of their results is accessed through the smart pointer. At that time, the event loop is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:24373,avail,available,24373,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,2,['avail'],['available']
Availability,"e"");; 1157 return -1;; 1158 }; 1159 ; 1160 TFile *f = GetCurrentFile();; 1161 if (!f) {; 1162 Error(""DropBranchFromCache"", ""No file is available. Branch was not dropped from the cache"");; 1163 return -1;; 1164 }; 1165 TTreeCache *tc = GetReadCache(f,true);; 1166 if (!tc) {; 1167 Error(""DropBranchFromCache"", ""No cache is available, branch not dropped"");; 1168 return -1;; 1169 }; 1170 return tc->DropBranch(bname,subbranches);; 1171}; 1172 ; 1173////////////////////////////////////////////////////////////////////////////////; 1174/// Remove the branch b from the Tree cache.; 1175/// if subbranches is true all the branches of the subbranches are; 1176/// also removed from the cache.; 1177///; 1178/// Returns:; 1179/// - 0 branch dropped or not in cache; 1180/// - -1 on error; 1181 ; 1182Int_t TTree::DropBranchFromCache(TBranch *b, bool subbranches); 1183{; 1184 if (!GetTree()) {; 1185 if (LoadTree(0)<0) {; 1186 Error(""DropBranchFromCache"",""Could not load a tree"");; 1187 return -1;; 1188 }; 1189 }; 1190 if (GetTree()) {; 1191 if (GetTree() != this) {; 1192 Int_t res = GetTree()->DropBranchFromCache(b, subbranches);; 1193 if (res<0) {; 1194 Error(""DropBranchFromCache"", ""Error dropping branch"");; 1195 }; 1196 return res;; 1197 }; 1198 } else {; 1199 Error(""DropBranchFromCache"", ""No tree is available. Branch was not dropped from the cache"");; 1200 return -1;; 1201 }; 1202 ; 1203 TFile *f = GetCurrentFile();; 1204 if (!f) {; 1205 Error(""DropBranchFromCache"", ""No file is available. Branch was not dropped from the cache"");; 1206 return -1;; 1207 }; 1208 TTreeCache *tc = GetReadCache(f,true);; 1209 if (!tc) {; 1210 Error(""DropBranchFromCache"", ""No cache is available, branch not dropped"");; 1211 return -1;; 1212 }; 1213 return tc->DropBranch(b,subbranches);; 1214}; 1215 ; 1216////////////////////////////////////////////////////////////////////////////////; 1217/// Add a cloned tree to our list of trees to be notified whenever we change; 1218/// our branch addresses or when we are",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:41888,error,error,41888,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,2,"['avail', 'error']","['available', 'error']"
Availability,"e& errhigh) const; static unsigned intGetPointSize(ROOT::Fit::BinData::ErrorType err, unsigned int dim); boolHasBinEdges() const; boolHaveAsymErrors() const; boolHaveCoordErrors() const; voidInitialize(unsigned int maxpoints, unsigned int dim = 1, ROOT::Fit::BinData::ErrorType err = kValueError); doubleInvError(unsigned int ipoint) const; ROOT::Fit::BinData&LogTransform(); static unsigned intROOT::Fit::FitData::MaxSize(); unsigned intNDim() const; unsigned intNPoints() const; ROOT::Fit::BinData&operator=(const ROOT::Fit::BinData&); const ROOT::Fit::DataOptions&ROOT::Fit::FitData::Opt() const; ROOT::Fit::DataOptions&ROOT::Fit::FitData::Opt(); unsigned intPointSize() const; const ROOT::Fit::DataRange&ROOT::Fit::FitData::Range() const; doubleRefVolume() const; voidResize(unsigned int npoints); voidSetRefVolume(double value); unsigned intSize() const; doubleValue(unsigned int ipoint) const. protected:. voidSetNPoints(unsigned int n). Data Members; public:. enum ErrorType { kNoError; kValueError; kCoordError; kAsymError; };. private:. vector<double>fBinEdgevector containing the bin upper edge (coordinate will contain low edge) ; ROOT::Fit::DataVector*fDataVectorpointer to the copied in data vector; ROOT::Fit::DataWrapper*fDataWrapperpointer to the external data wrapper structure; unsigned intfDimcoordinate dimension; unsigned intfNPointsnumber of contained points in the data set (can be different than size of vector); unsigned intfPointSizetotal point size including value and errors (= fDim + 2 for error in only Y ) ; doublefRefVolumereference bin volume - used to normalize the bins in case of variable bins data. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; unsigned int GetPointSize(ROOT::Fit::BinData::ErrorType err, unsigned int dim). ErrorType GetErrorType() const. explicit BinData(unsigned int maxpoints = 0, unsigned int dim = 1, ROOT::Fit::BinData::ErrorType err = kValueError). constructor from dimension of point and max n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Fit__BinData.html:4955,Error,ErrorType,4955,root/html532/ROOT__Fit__BinData.html,https://root.cern,https://root.cern/root/html532/ROOT__Fit__BinData.html,1,['Error'],['ErrorType']
Availability,"e& instance(); Return reference to singleton instance. void saveState(); Save current state of message service. void restoreState(); Restore last saved state of message service. Bool_t isActive(const RooAbsArg* self, RooFit::MsgTopic facility, RooFit::MsgLevel level); Check if logging is active for given object/topic/RooFit::MsgLevel combination. Bool_t isActive(const TObject* self, RooFit::MsgTopic facility, RooFit::MsgLevel level); Check if logging is active for given object/topic/RooFit::MsgLevel combination. Int_t activeStream(const RooAbsArg* self, RooFit::MsgTopic facility, RooFit::MsgLevel level); Find appropriate logging stream for message from given object with given topic and message level. Int_t activeStream(const TObject* self, RooFit::MsgTopic facility, RooFit::MsgLevel level); Find appropriate logging stream for message from given object with given topic and message level. ostream& log(const RooAbsArg* self, RooFit::MsgLevel level, RooFit::MsgTopic facility, Bool_t forceSkipPrefix = kFALSE); Log error message associated with RooAbsArg object self at given level and topic. If skipPrefix; is true the standard RooMsgService prefix is not added. ostream& log(const TObject* self, RooFit::MsgLevel level, RooFit::MsgTopic facility, Bool_t forceSkipPrefix = kFALSE); Log error message associated with TObject object self at given level and topic. If skipPrefix; is true the standard RooMsgService prefix is not added. void Print(Option_t* options = 0) const; Print configuration of message service. If ""v"" option is given also; inactive streams are listed. StreamConfig& getStream(Int_t id); { return _streams[id] ; }. Int_t numStreams() const; { return _streams.size() ; }. void reset(); { cleanup() ; }. void setGlobalKillBelow(RooFit::MsgLevel level); { _globMinLevel = level ; }. RooFit::MsgLevel globalKillBelow() const; { return _globMinLevel ; }. void showPid(Bool_t flag); { _showPid = flag ; }. Bool_t silentMode() const; Print level support for RooFit-related messa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMsgService.html:11163,error,error,11163,root/html528/RooMsgService.html,https://root.cern,https://root.cern/root/html528/RooMsgService.html,10,['error'],['error']
Availability,"e&, …); The VariableMetricMinimizer provides several overloaded methods minimize with return value FunctionMinimum. Together with the user \(\mbox{FCN}\) (either an implementation of FCNBase or FCNGradientBase) the user has to give as input the parameters with starting values in one of the defined formats (std::vector\(<\)double\(>\), MnUserParameters or MnUserParameterState).; 5.7 MnMinimize and CombinedMinimizer; [api:minimize]; Causes minimization of the function by the method of \(\mbox{MIGRAD}\), as does the MnMigrad class, but switches to the \(\mbox{SIMPLEX}\) method if \(\mbox{MIGRAD}\) fails to converge. Constructor arguments, methods arguments and names of methods are the same as for MnMigrad or MnSimplex and VariableMetricMinimizer or SimplexMinimizer.; 5.8 MnMinos; [api:minos] Causes a \(\mbox{MINOS}\) error analysis to be performed on the parameter whose number is specified. \(\mbox{MINOS}\) errors may be expensive to calculate, but are very reliable since they take account of non-linearities in the problem as well as parameter correlations, and are in general asymmetric. The optional argument \(\mbox{maxcalls}\) specifies the (approximate) maximum number of function calls per parameter requested, after which the calculation will be stopped for that parameter.; 5.8.1 MnMinos(const FCNBase&, const FunctionMinimum&); Construct an MnMinos object from the user’s \(\mbox{FCN}\) and a valid FunctionMinimum. Additional constructors for user specific MnStrategy settings are provided.; 5.8.2 operator(); MnMinos::operator()(unsigned int n, unsigned int maxcalls) causes a \(\mbox{MINOS}\) error analysis for external parameter \(\mbox{n}\). The return value is a std::pair\(<\)double,double\(>\) with the lower and upper bounds of parameter \(\mbox{n}\).; 5.8.3 minos(unsigned int n, unsigned int maxcalls); MnMinos::minos(unsigned int n, unsigned int maxcalls) causes a \(\mbox{MINOS}\) error analysis for external parameter \(\mbox{n}\) and returns a MinosError with the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:50296,error,errors,50296,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,8,"['error', 'reliab']","['errors', 'reliable']"
Availability,"e() const; virtual voidClear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Int_tCompile(const char* expression = """"); virtual voidCopy(TObject& f1) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; Double_tEval(Double_t x) const; Double_tEval(Double_t x, Double_t y) const; Double_tEval(Double_t x, Double_t y, Double_t z) const; Double_tEval(Double_t x, Double_t y, Double_t z, Double_t t) const; Double_tEvalPar(const Double_t* x, const Double_t* params = 0) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringGetExpFormula(Option_t* option = """") const; virtual const char*TObject::GetIconName() const; const TObject*GetLinearPart(Int_t i) const; virtual const char*TNamed::GetName() const; Int_tGetNdim() const; Int_tGetNpar() const; Int_tGetNumber() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tGetParameter(const char* name) const; Double_tGetParameter(Int_t param) const; Double_t*GetParame",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TFormula.html:1723,error,error,1723,root/html604/TFormula.html,https://root.cern,https://root.cern/root/html604/TFormula.html,2,['error'],['error']
Availability,"e() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual RooAbsDataStore*clone(const RooArgSet& vars, const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tdefaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Int_tfill(); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const RooArgSet*get() const; virtual const RooArgSet*get(Int_t index) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); Bool_thasFilledCache()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsDataStore.html:2379,error,error,2379,root/html526/RooAbsDataStore.html,https://root.cern,https://root.cern/root/html526/RooAbsDataStore.html,3,['error'],['error']
Availability,"e());; ; // Dataset d is now a dataset with one observable (x) with 1000 entries and a sum of weights of ~430K; wdata.Print();; ; // U n b i n n e d M L f i t t o w e i g h t e d d a t a; // ---------------------------------------------------------------; ; // Construction quadratic polynomial pdf for fitting; RooRealVar a0(""a0"", ""a0"", 1);; RooRealVar a1(""a1"", ""a1"", 0, -1, 1);; RooRealVar a2(""a2"", ""a2"", 1, 0, 10);; RooPolynomial p2(""p2"", ""p2"", x, RooArgList(a0, a1, a2), 0);; ; // Fit quadratic polynomial to weighted data; ; // NOTE: A plain Maximum likelihood fit to weighted data does in general; // NOT result in correct error estimates, unless individual; // event weights represent Poisson statistics themselves.; //; // Fit with 'wrong' errors; std::unique_ptr<RooFitResult> r_ml_wgt{p2.fitTo(wdata, Save(), PrintLevel(-1))};; ; // A first order correction to estimated parameter errors in an; // (unbinned) ML fit can be obtained by calculating the; // covariance matrix as; //; // V' = V C-1 V; //; // where V is the covariance matrix calculated from a fit; // to -logL = - sum [ w_i log f(x_i) ] and C is the covariance; // matrix calculated from -logL' = -sum [ w_i^2 log f(x_i) ]; // (i.e. the weights are applied squared); //; // A fit in this mode can be performed as follows:; ; std::unique_ptr<RooFitResult> r_ml_wgt_corr{p2.fitTo(wdata, Save(), SumW2Error(true), PrintLevel(-1))};; ; // P l o t w e i g h e d d a t a a n d f i t r e s u l t; // ---------------------------------------------------------------; ; // Construct plot frame; RooPlot *frame = x.frame(Title(""Unbinned ML fit, binned chi^2 fit to weighted data""));; ; // Plot data using sum-of-weights-squared error rather than Poisson errors; wdata.plotOn(frame, DataError(RooAbsData::SumW2));; ; // Overlay result of 2nd order polynomial fit to weighted data; p2.plotOn(frame);; ; // ML Fit of pdf to equivalent unweighted dataset; // ------------------------------------------------------------------------------------",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf403__weightedevts_8C.html:2612,error,errors,2612,doc/master/rf403__weightedevts_8C.html,https://root.cern,https://root.cern/doc/master/rf403__weightedevts_8C.html,1,['error'],['errors']
Availability,"e(). static const char * RooVoigtian::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 54 of file RooVoigtian.h. ◆ doEval(). void RooVoigtian::doEval ; (; RooFit::EvalContext & ; ctx); const. overrideprotectedvirtual . Compute multiple values of Voigtian distribution. ; Reimplemented from RooAbsReal.; Definition at line 115 of file RooVoigtian.cxx. ◆ evaluate(). double RooVoigtian::evaluate ; (; ); const. overrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 81 of file RooVoigtian.cxx. ◆ IsA(). TClass * RooVoigtian::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 54 of file RooVoigtian.h. ◆ selectDefaultAlgorithm(). void RooVoigtian::selectDefaultAlgorithm ; (; ). inline . Disable the fast evaluation of the complex error function using look-up tables (default is the ""slow"" CERNlib algorithm). ; Definition at line 38 of file RooVoigtian.h. ◆ selectFastAlgorithm(). void RooVoigtian::selectFastAlgorithm ; (; ). inline . Enable the fast evaluation of the complex error function using look-up tables (default is the ""slow"" CERNlib algorithm). ; Definition at line 34 of file RooVoigtian.h. ◆ Streamer(). void RooVoigtian::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooVoigtian::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 54 of file RooVoigtian.h. Member Data Documentation. ◆ _doFast. bool RooVoigtian::_doFast = false. private . Definition at line 53 of file RooVoigtian.h. ◆ mean. RooRealProxy RooVoigtian::mean. protected . Definition at line 43 of file RooVoigtian.h. ◆ sigma. RooRealProxy RooVoigtian::sigma. protected . Definition at line 45 of file RooVoigtian.h. ◆ width. Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooVoigtian.html:77337,error,error,77337,doc/master/classRooVoigtian.html,https://root.cern,https://root.cern/doc/master/classRooVoigtian.html,1,['error'],['error']
Availability,"e(); Close and cleanup dCache file. Bool_t ReadBuffer(char* buf, Int_t len); Read specified byte range from remote file via dCache daemon.; Returns kTRUE in case of error. Bool_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read specified byte range from remote file via dCache daemon.; Returns kTRUE in case of error. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); Read the nbuf blocks described in arrays pos and len,; where pos[i] is the seek position of block i of length len[i].; Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer.; This function is overloaded by TNetFile, TWebFile, etc.; Returns kTRUE in case of failure. Bool_t WriteBuffer(const char* buf, Int_t len); Write specified byte range to remote file via dCache daemon.; Returns kTRUE in case of error. Bool_t Stage(const char* path, UInt_t secs, const char* location = 0); Stage() returns kTRUE on success and kFALSE on failure. Bool_t CheckFile(const char* path, const char* location = 0); CheckFile() returns kTRUE on success and kFALSE on failure. In; case the file exists but is not cached, CheckFile() returns; kFALSE and errno is set to EAGAIN. void SetOpenTimeout(UInt_t secs); Set file open timeout. void SetOnError(TDCacheFile::OnErrorAction = kOnErrorDefault); Set on error handler. void SetReplyHostName(const char* host_name); Set reply host name. const char * GetDcapVersion(); Return dCache version string. Int_t SysOpen(const char* pathname, Int_t flags, UInt_t mode); Interface to system open. All arguments like in POSIX open. Int_t SysClose(Int_t fd); Interface to system close. All arguments like in POSIX close. Int_t SysRead(Int_t fd, void* buf, Int_t len); Interface to system read. All arguments like in POSIX read. Int_t SysWrite(Int_t fd, const void* buf, Int_t len); Interface to system write. All arguments like in POSIX write. Long64_t SysSeek(Int_t fd, Long64_t offset, Int_t whence); Interface to system seek. All arguments like in POSIX lseek. Int_t SysSync(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDCacheFile.html:24027,failure,failure,24027,root/html528/TDCacheFile.html,https://root.cern,https://root.cern/root/html528/TDCacheFile.html,4,['failure'],['failure']
Availability,"e(); virtual intIterations() const; virtual const char*Name() const; ROOT::Math::IRootFinderMethod&operator=(const ROOT::Math::IRootFinderMethod&); virtual doubleRoot() const; virtual boolSetFunction(const ROOT::Math::IGradFunction&, double); virtual boolSetFunction(const ROOT::Math::IGenFunction&, double, double); virtual boolSolve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intStatus() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IRootFinderMethod(); Default Destructor. . {}. IRootFinderMethod(); Default Constructor. . {}. bool SetFunction(const ROOT::Math::IGradFunction& , double ); Common functionality; Sets the function for algorithms using derivatives. . bool SetFunction(const ROOT::Math::IGenFunction& , double , double ); Sets the function for the rest of the algorithms.; The parameters set the interval where the root has to be calculated. . double Root() const; Returns the previously calculated root. . int Status() const; Returns the status of the previous estimate . bool Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); Methods to be Implemented in the derived classes; Stimates the root for the function.; \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position.; \@param absTol desired relative error in the minimum position. const char* Name() const; Return name of root finder algorithm . int Iterate(); This method is implemented only by the GSLRootFinder; and GSLRootFinderDeriv classes and will return an error if it's not one of them. . int Iterations() const; Return number of iterations used to find the root; Must be implemented by derived classes. { return -1; }. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__IRootFinderMethod.html:2082,error,error,2082,root/html602/ROOT__Math__IRootFinderMethod.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__IRootFinderMethod.html,6,['error'],['error']
Availability,"e(); virtual intIterations() const; virtual const char*Name() const; ROOT::Math::IRootFinderMethod&operator=(const ROOT::Math::IRootFinderMethod&); virtual doubleRoot() const; virtual boolSetFunction(const ROOT::Math::IGradFunction&, double); virtual boolSetFunction(const ROOT::Math::IGenFunction&, double, double); virtual boolSolve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intStatus() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IRootFinderMethod(); Default Destructor. . {}. IRootFinderMethod(); Default Constructor. . {}. bool SetFunction(const ROOT::Math::IGradFunction& , double ); Common functionality; Sets the function for algorithms using derivatives. . bool SetFunction(const ROOT::Math::IGenFunction& , double , double ); Sets the function for the rest of the algorithms.; The parameters set the interval where the root has to be calculated. . double Root() const; Returns the previously calculated root. . int Status() const; Returns the status of the previous estimate . bool Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); Methods to be Implemented in the derived classes; Stimates the root for the function.; \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position.; \@param absTol desired relative error in the minimum position. const char* Name() const; Return name of root finder algorithm . int Iterate(); This method is implemented only by the GSLRootFinder; and GSLRootFinderDeriv classes and will return an error if it's not one of them. . int Iterations() const; Return number of iterations used to find the root; Must be implemented by derived classes. { return -1; }. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__IRootFinderMethod.html:2082,error,error,2082,root/html604/ROOT__Math__IRootFinderMethod.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__IRootFinderMethod.html,6,['error'],['error']
Availability,"e(); virtual intIterations() const; virtual const char*Name() const; ROOT::Math::IRootFinderMethod&operator=(const ROOT::Math::IRootFinderMethod&); virtual doubleRoot() const; virtual boolSetFunction(const ROOT::Math::IGradFunction&, double); virtual boolSetFunction(const ROOT::Math::IGenFunction&, double, double); virtual boolSolve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); virtual intStatus() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IRootFinderMethod(); Default Destructor. . {}. bool SetFunction(const ROOT::Math::IGradFunction& , double ); Common functionality; Sets the function for algorithms using derivatives. . bool SetFunction(const ROOT::Math::IGenFunction& , double , double ); Sets the function for the rest of the algorithms.; The parameters set the interval where the root has to be calculated. . double Root() const; Returns the previously calculated root. . int Status() const; Returns the status of the previous estimate . bool Solve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); Methods to be Implemented in the derived classes; Stimates the root for the function.; \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position.; \@param absTol desired relative error in the minimum position. const char* Name() const; Return name of root finder algorithm . int Iterate(); This method is implemented only by the GSLRootFinder; and GSLRootFinderDeriv classes and will return an error if it's not one of them. . int Iterations() const; Return number of iterations used to find the root; Must be implemented by derived classes. { return -1; }. » Last changed: root/mathcore:$Id: IRootFinderMethod.h 32583 2010-03-12 09:57:42Z moneta $ » Last generated: 2010-09-23 19:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IRootFinderMethod.html:1888,error,error,1888,root/html528/ROOT__Math__IRootFinderMethod.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IRootFinderMethod.html,3,['error'],['error']
Availability,"e(); virtual intIterations() const; virtual const char*Name() const; ROOT::Math::IRootFinderMethod&operator=(const ROOT::Math::IRootFinderMethod&); virtual doubleRoot() const; virtual boolSetFunction(const ROOT::Math::IGradFunction&, double); virtual boolSetFunction(const ROOT::Math::IGenFunction&, double, double); virtual boolSolve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); virtual intStatus() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IRootFinderMethod(); Default Destructor. . {}. bool SetFunction(const ROOT::Math::IGradFunction& , double ); Common functionality; Sets the function for algorithms using derivatives. . bool SetFunction(const ROOT::Math::IGenFunction& , double , double ); Sets the function for the rest of the algorithms.; The parameters set the interval where the root has to be calculated. . double Root() const; Returns the previously calculated root. . int Status() const; Returns the status of the previous estimate . bool Solve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); Methods to be Implemented in the derived classes; Stimates the root for the function.; \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position.; \@param absTol desired relative error in the minimum position. const char* Name() const; Return name of root finder algorithm . int Iterate(); This method is implemented only by the GSLRootFinder; and GSLRootFinderDeriv classes and will return an error if it's not one of them. . int Iterations() const; Return number of iterations used to find the root; Must be implemented by derived classes. { return -1; }. » Last changed: root/mathcore:$Id: IRootFinderMethod.h 32583 2010-03-12 09:57:42Z moneta $ » Last generated: 2011-07-04 15:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__IRootFinderMethod.html:1890,error,error,1890,root/html530/ROOT__Math__IRootFinderMethod.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__IRootFinderMethod.html,3,['error'],['error']
Availability,"e(); virtual intIterations() const; virtual const char*Name() const; ROOT::Math::IRootFinderMethod&operator=(const ROOT::Math::IRootFinderMethod&); virtual doubleRoot() const; virtual boolSetFunction(const ROOT::Math::IGradFunction&, double); virtual boolSetFunction(const ROOT::Math::IGenFunction&, double, double); virtual boolSolve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); virtual intStatus() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IRootFinderMethod(); Default Destructor. . {}. bool SetFunction(const ROOT::Math::IGradFunction& , double ); Common functionality; Sets the function for algorithms using derivatives. . bool SetFunction(const ROOT::Math::IGenFunction& , double , double ); Sets the function for the rest of the algorithms.; The parameters set the interval where the root has to be calculated. . double Root() const; Returns the previously calculated root. . int Status() const; Returns the status of the previous estimate . bool Solve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); Methods to be Implemented in the derived classes; Stimates the root for the function.; \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position.; \@param absTol desired relative error in the minimum position. const char* Name() const; Return name of root finder algorithm . int Iterate(); This method is implemented only by the GSLRootFinder; and GSLRootFinderDeriv classes and will return an error if it's not one of them. . int Iterations() const; Return number of iterations used to find the root; Must be implemented by derived classes. { return -1; }. » Last changed: root/mathcore:$Id: IRootFinderMethod.h 32583 2010-03-12 09:57:42Z moneta $ » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__IRootFinderMethod.html:1890,error,error,1890,root/html532/ROOT__Math__IRootFinderMethod.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__IRootFinderMethod.html,6,['error'],['error']
Availability,"e(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooDouble.html:1501,error,error,1501,root/html526/RooDouble.html,https://root.cern,https://root.cern/root/html526/RooDouble.html,11,['error'],['error']
Availability,"e(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(const char* classes = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual Int_tFindClass(const char* classname); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetClasses() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*GetSourceDir() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TClassTree.html:5755,error,error,5755,root/html526/TClassTree.html,https://root.cern,https://root.cern/root/html526/TClassTree.html,11,['error'],['error']
Availability,"e(); voidTObject::AbstractMethod(const char* method) const; voidAdjustWeight(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCalculateDelta(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidDecayLearningRate(Double_t rate); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetDEDw(); Double_tGetDelta(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Double_tGetLearningRate(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetWeight(); Double_tGetWeightedDelta(); Double_tGetWeightedValue(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__TSynapse.html:1406,error,error,1406,root/html528/TMVA__TSynapse.html,https://root.cern,https://root.cern/root/html528/TMVA__TSynapse.html,10,['error'],['error']
Availability,"e(Bool_t attach = kFALSE); static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); voidCtrlC(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDisableTimeout(); voidDisconnectSession(Int_t id, Option_t* opt = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidEnableTimeout(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tFlush(); UInt_tTSocket::GetBytesRecv() const; UInt_tTSocket::GetBytesSent() const; virtual Int_tGetClientID() const; virtual Int_tGetClientIDSize() const; static Int_tTSocket::GetClientProtocol(); Int_tTSocket::GetCompressionAlgorithm() const; Int_tTSocket::GetCompressionLevel() const; Int_tTSocket::GetCompressionSettings() const; virtual Int_tTSocket::GetDescriptor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tTSocket::GetErrorCode() const; virtual const char*TObject::GetIconName() const; TInetAddressTSocket::GetInetAddress() co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TXSocket.html:2078,error,error,2078,root/html530/TXSocket.html,https://root.cern,https://root.cern/root/html530/TXSocket.html,9,['error'],['error']
Availability,"e(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); Double_tDistToSegZ(Double_t* point, Double_t* dir, Int_t& iz, Double_t c1, Double_t s1, Double_t c2, Double_t s2, Double_t cfio, Double_t sfio, Double_t cdfi) const; virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); Double_t&Dphi(); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetAxisName(Int_t iaxis) const; virtual Double_tGetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; virtual voidGetBoundingCylinder(Double_t* param) const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tGetByteCount() const; Double_tGetDphi() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTGeoBBox::GetDX() const; virtual D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoPcon.html:3009,Error,Error,3009,root/html532/TGeoPcon.html,https://root.cern,https://root.cern/root/html532/TGeoPcon.html,1,['Error'],['Error']
Availability,"e(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate.; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Int_t Merge(TCollection* list); Adds all graphs with errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t ex, Double_t ey); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t ex, Double_t ey); Set ex and ey values for point number i. void Streamer(TBuffer& ); Stream an obje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraphErrors.html:19604,error,error,19604,root/html602/TGraphErrors.html,https://root.cern,https://root.cern/root/html602/TGraphErrors.html,4,['error'],['error']
Availability,"e(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate.; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t ex, Double_t ey); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t ex, Double_t ey); Set ex and ey values for point number i. void Streamer(TBuffer& ); Stream an object of class TGraphErrors. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t ** Allocate(Int_t size). Double_t * GetEX() const; {return fEX;}. Double_t * GetEY",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraphErrors.html:19115,error,error,19115,root/html534/TGraphErrors.html,https://root.cern,https://root.cern/root/html534/TGraphErrors.html,2,['error'],['error']
Availability,"e(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidTEveElement::DumpSourceObject() constMENU ; virtual voidTEveElement::ElementChanged(Bool_t update_scenes = kTRUE, Bool_t redraw = kFALSE); voidTEveElement::EnableListElements(Bool_t rnr_self = kTRUE, Bool_t rnr_children = kTRUE)MENU ; TEveElement::List_iTEveElement::EndChildren(); TEveElement::List_ciTEveElement::EndChildren() const; TEveElement::List_iTEveElement::EndParents(); TEveElement::List_ciTEveElement::EndParents() const; TEveProjectable::ProjList_iTEveProjectable::EndProjecteds(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTEveElement::ExpandIntoListTree(TGListTree* ltree, TGListTreeItem* parent); voidTEveElement::ExportSourceObjectToCINT(char* var_name) constMENU ; virtual voidTEveElement::ExportToCINT(char* var_name)MENU ; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual voidTEveElement::FillImpliedSelectedSet(TEveElement::Set_t& impSelSet); TEveElement*TEveElement::FindChild(const TString& name, const TClass* cls = 0); TEveElement*TEveElement::FindChild(TPRegexp& regexp, const TClass* cls = 0); Int_tTEveElement::FindChildren(TEveElement::List_t& matches, const TString& name, const TClass* cls = 0); Int_tTEveElement::FindChildren(TEveElement::List_t& matches, TPRegexp& regexp, const TClass* cls = 0); virtual TEveElement::sLTI_iTEveElement::FindItem(TGLis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveTrackList.html:4844,error,error,4844,root/html528/TEveTrackList.html,https://root.cern,https://root.cern/root/html528/TEveTrackList.html,20,['error'],['error']
Availability,"e(Int_t v); virtual voidTDirectory::Copy(TObject&) const; static TDirectory*&TDirectory::CurrentDirectory(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle, const size_t namesize = 0); static Int_tDecreaseDirLevel(); virtual voidTDirectory::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTDirectory::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static voidTDirectory::EncodeNameCycle(char* buffer, const char* name, Short_t cycle); voidEndOfProcessCleanups(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TKey*TDirectory::FindKey(const char*) const; virtual TKey*TDirectory::FindKeyAny(const char*) const; virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; virtual TObject*FindObjectAny(const char* name) const; virtual TObject*FindObjectAnyFile(const char* name) const; const char*FindObjectClassName(const char* name) const; const char*FindObjectPathName(const TObject* obj) const; TObject*FindSpecialObject(const char* name, void*& where); TClass*FindSTLClass(const char* name, Bool_t load, Bool_t silent = kFALSE) const; voidForceStyle(Bool_t force = kTRUE); Bool_tFromPopUp() const; virtual TObject*TDirectory::Get(const char* namecycle); TApplication*GetApplication() const; virtual Int_tTDirectory::GetBufferSize() const; Int_tGetBuiltDa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TROOT.html:3959,error,error,3959,root/html602/TROOT.html,https://root.cern,https://root.cern/root/html602/TROOT.html,4,['error'],['error']
Availability,"e(MethodArgInfo_t *marginfo) const finalDefinition TCling.cxx:9304; TCling::HasPCMForLibraryBool_t HasPCMForLibrary(const char *libname) const finalReturn true if ROOT has cxxmodules pcm for a given library name.Definition TCling.cxx:3147; TCling::TypedefInfo_Initvoid TypedefInfo_Init(TypedefInfo_t *tinfo, const char *name) const finalDefinition TCling.cxx:9472; TCling::DataMemberInfo_Titleconst char * DataMemberInfo_Title(DataMemberInfo_t *dminfo) const finalDefinition TCling.cxx:8706; TCling::CallFunc_ExecIntLongptr_t CallFunc_ExecInt(CallFunc_t *func, void *address) const finalDefinition TCling.cxx:7885; TCling::ClearStackvoid ClearStack() finalDelete existing temporary values.Definition TCling.cxx:3085; TCling::SetAlloclockfuncvoid SetAlloclockfunc(void(*)()) const final[Place holder for Mutex Lock] Provide the interpreter with a way to acquire a lock used to protect cr...Definition TCling.cxx:7536; TCling::SetErrorMessagesBool_t SetErrorMessages(Bool_t enable=kTRUE) finalIf error messages are disabled, the interpreter should suppress its failures and warning messages fro...Definition TCling.cxx:7356; TCling::CallFunc_FactoryMethodMethodInfo_t * CallFunc_FactoryMethod(CallFunc_t *func) const finalDefinition TCling.cxx:7924; TCling::IsUnsignedIntegerTypebool IsUnsignedIntegerType(const void *QualTypePtr) constDefinition TCling.cxx:9563; TCling::TypedefInfo_FactoryCopyTypedefInfo_t * TypedefInfo_FactoryCopy(TypedefInfo_t *tinfo) const finalDefinition TCling.cxx:9465; TCling::GetFunctionOverloadsvoid GetFunctionOverloads(ClassInfo_t *cl, const char *funcname, std::vector< DeclId_t > &res) const finalInsert overloads of name in cl to res.Definition TCling.cxx:5048; TCling::UnRegisterTClassUpdatevoid UnRegisterTClassUpdate(const TClass *oldcl) finalIf the dictionary is loaded, we can remove the class from the list (otherwise the class might be load...Definition TCling.cxx:2393; TCling::MethodArgInfo_TypeNormalizedNamestd::string MethodArgInfo_TypeNormalizedName(Metho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:434539,error,error,434539,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,4,"['error', 'failure']","['error', 'failures']"
Availability,"e(Option_t* option = """")MENU ; virtual voidTPaveText::DeleteText()MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTPave::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual TBox*TBox::DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPaveText::DrawFile(const char* filename, Option_t* option = """"); virtual voidTPave::DrawPave(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize = 4, Option_t* option = ""br""); virtual voidTObject::Dump() constMENU ; virtual voidTPaveText::EditText()MENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPave::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTPave::GetBorderSize() const; Double_tTPave::GetCornerRadius() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; const char*TPaveText::GetLabel() const; virtual TText*TPaveText::GetLine(Int_t number) const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual TText*TPaveText::GetLineWith(const char* text) const; virtual TList*TPaveText::GetListOfLines() const; Float_tTPaveText::GetMargin() const; virtual Option_t*TPave::GetName() const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPavesText.html:2420,error,error,2420,root/html528/TPavesText.html,https://root.cern,https://root.cern/root/html528/TPavesText.html,4,['error'],['error']
Availability,"e(Option_t* option = """")MENU ; virtual voidTPaveText::DeleteText()MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTPave::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual TBox*TBox::DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPaveText::DrawFile(const char* filename, Option_t* option = """"); virtual voidTPave::DrawPave(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize = 4, Option_t* option = ""br""); virtual voidTObject::Dump() constMENU ; virtual voidTPaveText::EditText()MENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPave::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Rectangle_tTBox::GetBBox(); virtual TPointTBox::GetBBoxCenter(); Int_tTPave::GetBorderSize() const; Double_tTPave::GetCornerRadius() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; const char*TPaveText::GetLabel() const; virtual TText*TPaveText::GetLine(Int_t number) const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual TText*TPaveText::GetLineWith(const char* text) const; virtual TList*TPaveText::GetListOfLines() const; Floa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPavesText.html:2420,error,error,2420,root/html534/TPavesText.html,https://root.cern,https://root.cern/root/html534/TPavesText.html,6,['error'],['error']
Availability,"e(TBrowser* b); Int_tCharBbox(Int_t index, Int_t* x, Int_t* y, Int_t* w, Int_t* h) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Int_tDistanceToText(Int_t x, Int_t y) const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidDrawText(Drawable_t dst, GContext_t gc, Int_t x, Int_t y, Int_t firstChar, Int_t lastChar) const; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTextLayout.html:1767,error,error,1767,root/html528/TGTextLayout.html,https://root.cern,https://root.cern/root/html528/TGTextLayout.html,10,['error'],['error']
Availability,"e(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """")MENU ; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* = ""d""); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEval(const Double_t* x, const Double_t* coeff = 0) const; virtual Double_tEvalError(const Double_t* x, const Double_t* coeff = 0) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFindParameterization(Option_t* option = """")MENU ; virtual voidFit(Option_t* option = """")MENU ; Double_tGetChi2() const; const TVectorD*GetCoefficients() const; const TMatrixD*GetCorrelationMatrix() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetError() const; Int_t*GetFunctionCodes() const; const TMatrixD*GetFunctions() const; virtual TList*GetHistograms() const; virtual const char*TObject::GetIconName() const; Double_tGetMaxAngle() const; Int_tGetMaxFunctions() const; Int_t*GetMaxPowers() const; Double_tGetMaxQuantity() const; Int_tGetMaxStudy() const; Int_tGetMaxTerms() const; const TVectorD*GetMaxVa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiDimFit.html:14830,error,error,14830,root/html528/TMultiDimFit.html,https://root.cern,https://root.cern/root/html528/TMultiDimFit.html,4,['error'],['error']
Availability,"e(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """")MENU ; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* = ""d""); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEval(const Double_t* x, const Double_t* coeff = 0) const; virtual Double_tEvalError(const Double_t* x, const Double_t* coeff = 0) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFindParameterization(Option_t* option = """")MENU ; virtual voidFit(Option_t* option = """")MENU ; Double_tGetChi2() const; const TVectorD*GetCoefficients() const; const TVectorD*GetCoefficientsRMS() const; const TMatrixD*GetCorrelationMatrix() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetError() const; Int_t*GetFunctionCodes() const; const TMatrixD*GetFunctions() const; virtual TList*GetHistograms() const; virtual const char*TObject::GetIconName() const; Double_tGetMaxAngle() const; Int_tGetMaxFunctions() const; Int_t*GetMaxPowers() const; Double_tGetMaxQuantity() const; Int_tGetMaxStudy() const; Int_tG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMultiDimFit.html:15044,error,error,15044,root/html534/TMultiDimFit.html,https://root.cern,https://root.cern/root/html534/TMultiDimFit.html,6,['error'],['error']
Availability,"e(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Int_tContains(Long64_t, TTree*); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTEntryList::DirectoryAutoAdd(TDirectory*); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual Bool_tEnter(Long64_t, TTree*); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TEntryList*GetCurrentList() const; virtual TDirectory*TEntryList::GetDirectory() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tGetEntries(); virtual Long64_tGetEntriesFast() const; virtual Long64_tTEntryList::GetEntriesToProcess() const; virtual Long64_tGetEntry(Int_t index); virtual Long64_tGetEntryAndTree(Int_t index, Int_t& treenum); virtual TEntryList*GetEntryList(const char*, const char*, Option_t*); virtual const char*GetFileName() const; virtual const char*TObject::GetIconName() const; virtual TList*TEntryList::GetLists() const; virtual Long64_tGetN() const; virtual const char*TNamed::GetName(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEntryListFromFile.html:2553,error,error,2553,root/html528/TEntryListFromFile.html,https://root.cern,https://root.cern/root/html528/TEntryListFromFile.html,10,['error'],['error']
Availability,"e(TBrowser* b); voidTMVA::PDEFoam::CheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*TMVA::PDEFoam::Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = NULL); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoam::FillBinarySearchTree(const TMVA::Event* ev); virtual voidFillFoamCells(const TMVA::Event* ev, Float_t wt); virtual voidFinalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Float_tGetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase*); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringTMVA::PDEFoam::GetFoamName() const; virtual const char*TObject::GetIconName() const; UInt_tTMVA::PDEFoam::GetMaxDepth() const; UInt_tTMVA::PDEFoam::GetNActiveCells() const; virtual const char*TObject::GetName() const; UInt_tTMVA::PDEFoam::GetNCells() const; UInt_tTMVA::PDEFoam::GetNInActiveCe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoamTarget.html:1995,error,error,1995,root/html530/TMVA__PDEFoamTarget.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoamTarget.html,5,['error'],['error']
Availability,"e(TBrowser* b); voidTMVA::PDEFoam::CheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*TMVA::PDEFoam::Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = NULL); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoam::FillBinarySearchTree(const TMVA::Event* ev); virtual voidFillFoamCells(const TMVA::Event* ev, Float_t wt); virtual voidFinalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual vector<Float_t>TMVA::PDEFoam::GetCellValue(const map<Int_t,Float_t>& xvec, TMVA::ECellValue cv); virtual Float_tTMVA::PDEFoam::GetCellValue(const TMVA::PDEFoamCell* cell, TMVA::ECellValue cv); virtual Float_tTMVA::PDEFoam::GetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase*); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringTMVA::PDEFoam::GetFoamName() const; virtual const char*TObject::GetIconName()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoamDiscriminant.html:2056,error,error,2056,root/html530/TMVA__PDEFoamDiscriminant.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoamDiscriminant.html,5,['error'],['error']
Availability,"e(TBrowser* b); voidTMVA::PDEFoam::CheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*TMVA::PDEFoam::Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = NULL); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoam::FillBinarySearchTree(const TMVA::Event* ev); virtual voidFillFoamCells(const TMVA::Event* ev, Float_t wt); virtual voidTMVA::PDEFoam::Finalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual vector<Float_t>TMVA::PDEFoam::GetCellValue(const map<Int_t,Float_t>& xvec, TMVA::ECellValue cv); virtual Float_tTMVA::PDEFoam::GetCellValue(const TMVA::PDEFoamCell* cell, TMVA::ECellValue cv); virtual Float_tTMVA::PDEFoam::GetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase*); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringTMVA::PDEFoam::GetFoamName() const; virtual const char*TObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoamEvent.html:1954,error,error,1954,root/html530/TMVA__PDEFoamEvent.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoamEvent.html,5,['error'],['error']
Availability,"e(TBrowser* b); voidTMVA::PDEFoam::CheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*TMVA::PDEFoam::Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = NULL); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoam::FillBinarySearchTree(const TMVA::Event* ev); virtual voidTMVA::PDEFoamDiscriminant::FillFoamCells(const TMVA::Event* ev, Float_t wt); virtual voidTMVA::PDEFoamDiscriminant::Finalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual vector<Float_t>TMVA::PDEFoam::GetCellValue(const map<Int_t,Float_t>& xvec, TMVA::ECellValue cv); virtual Float_tTMVA::PDEFoam::GetCellValue(const TMVA::PDEFoamCell* cell, TMVA::ECellValue cv); virtual Float_tTMVA::PDEFoam::GetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase*); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringTMVA::PDEFoam::GetFoamN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoamDecisionTree.html:2248,error,error,2248,root/html530/TMVA__PDEFoamDecisionTree.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoamDecisionTree.html,5,['error'],['error']
Availability,"e(TBrowser* b); voidTMVA::PDEFoam::CheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*TMVA::PDEFoam::Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = NULL); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoam::FillBinarySearchTree(const TMVA::Event* ev); virtual voidTMVA::PDEFoamEvent::FillFoamCells(const TMVA::Event* ev, Float_t wt); virtual voidTMVA::PDEFoam::Finalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual vector<Float_t>GetCellValue(const map<Int_t,Float_t>&, TMVA::ECellValue); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringTMVA::PDEFoam::GetFoamName() const; virtual const char*TObject::GetIconName() const; UInt_tTMVA::PDEFoam::GetMaxDepth() const; UInt_tTMVA::PDEFoam::GetNActiveCells() const; virtual const char*TObject::GetName() const; UInt_tTMVA::PDEFoam::GetNCells() const; UInt_tTMVA::PDEFoam::Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoamMultiTarget.html:2488,error,error,2488,root/html530/TMVA__PDEFoamMultiTarget.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoamMultiTarget.html,5,['error'],['error']
Availability,"e(TH1* sig, TH1* bkg, TH1* any = 0); Double_tGetEffSForEffBof(Double_t effBref, Double_t& effSerr); TH1*GetMvaBpdf(); TH1*GetMvaSpdf(); TH1*GetPurity(Int_t nStot, Int_t nBtot); TH1D*GetROC(); Double_tGetROCIntegral(); Double_tGetSignalReferenceCut(); TH1*GetSignificance(Int_t nStot, Int_t nBtot); TMVA::ROCCalc&operator=(const TMVA::ROCCalc&); TMVA::ROCCalcROCCalc(const TMVA::ROCCalc&); TMVA::ROCCalcROCCalc(TH1* mvaS, TH1* mvaB, TString nameSuffix = """"). private:. Double_tGetEffForRoot(Double_t theCut); TMVA::MsgLogger&Log() const; Double_tRoot(Double_t). Data Members; private:. Double_tfAbsTolabsolute tolerance deviation; Int_tfCutOrientation+1 if larger mva value means more signal like, -1 otherwise; TMVA::MsgLogger*fLogger! message logger; Int_tfMaxItermaximum number of iterations; UInt_tfNbins; Double_tfNevtSnumber of signal events (used in error calculation); TH1*fPurity; Double_tfSignalCutMVA cut value for last demanded background rejection or signal efficiency; TH1*fSignificance; TSpline*fSplB; TSpline*fSplS; TSpline*fSpleffBvsS; TSpline*fSplmvaCumBspline of cumulated mva distributions; TSpline*fSplmvaCumS; TStringfSuffix; Bool_tfUseSplines; Float_tfXmaxmin and max of the mva distribution ; Float_tfXmin; TH1*fmvaBthe input mva distributions; TH1*fmvaBcumul; TH1*fmvaBpdfthe normalized (and rebinned) input mva distributions; TH1*fmvaS; TH1*fmvaScumul; TH1*fmvaSpdf; Int_tfnBtot; Int_tfnStot. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ROCCalc(TH1* mvaS, TH1* mvaB, TString nameSuffix = """"). void ApplySignalAndBackgroundStyle(TH1* sig, TH1* bkg, TH1* any = 0); Int_t c_Canvas = TColor::GetColor( ""#f0f0f0"" );; Int_t c_FrameFill = TColor::GetColor( ""#fffffd"" );; Int_t c_TitleBox = TColor::GetColor( ""#5D6B7D"" );; Int_t c_TitleBorder = TColor::GetColor( ""#7D8B9D"" );; Int_t c_TitleText = TColor::GetColor( ""#FFFFFF"" );. ~ROCCalc(); destructor. TH1D* GetROC(); get the ROC curve. Double_t GetROCIntegral(); code to compute the ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__ROCCalc.html:966,toler,tolerance,966,root/html534/TMVA__ROCCalc.html,https://root.cern,https://root.cern/root/html534/TMVA__ROCCalc.html,4,"['error', 'toler']","['error', 'tolerance']"
Availability,"e(_xmlNode* node, TXMLNode* parent = 0, TXMLNode* previous = 0); virtual~TXMLNode(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TList*GetAttributes(); TXMLNode*GetChildren(); const char*GetContent() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; const char*GetNamespaceHref() const; const char*GetNamespacePrefix() const; TXMLNode*GetNextNode(); const char*GetNodeName() const; TXMLNode::EXMLElementTypeGetNodeType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TXMLNode*GetParent() const; TXMLNode*GetPreviousNode() con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXMLNode.html:1635,error,error,1635,root/html528/TXMLNode.html,https://root.cern,https://root.cern/root/html528/TXMLNode.html,6,['error'],['error']
Availability,"e(const FCNGradientBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>& par, const std::vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1); need to re-implement all function in ModularFuncitionMinimizer otherwise they will be hided. FunctionMinimum Minimize(const FCNGradientBase&fcn, const std::vector<double>&par, const std::vector<double>&err, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const MnUserParameters& par, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const MnUserParameters& par, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const MnUserParameters& par, const MnUserCovariance& cov, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const MnUserParameters& par, const MnUserCovariance& cov, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const MnFcn& mfcn, const GradientCalculator& gc, const MinimumSeed& seed, const MnStrategy& stra, unsigned int maxfcn, double toler). » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html:5956,toler,toler,5956,root/html602/ROOT__Minuit2__FumiliMinimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html,10,['toler'],['toler']
Availability,"e(const FCNGradientBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>& par, const std::vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1); need to re-implement all function in ModularFuncitionMinimizer otherwise they will be hided. FunctionMinimum Minimize(const FCNGradientBase&fcn, const std::vector<double>&par, const std::vector<double>&err, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const MnUserParameters& par, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const MnUserParameters& par, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const MnUserParameters& par, const MnUserCovariance& cov, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const MnUserParameters& par, const MnUserCovariance& cov, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const MnFcn& mfcn, const GradientCalculator& gc, const MinimumSeed& seed, const MnStrategy& stra, unsigned int maxfcn, double toler). » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Minuit2__FumiliMinimizer.html:5321,toler,toler,5321,root/html534/ROOT__Minuit2__FumiliMinimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Minuit2__FumiliMinimizer.html,10,['toler'],['toler']
Availability,"e(const FCNGradientBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>& par, const std::vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1); need to re-implement all function in ModularFuncitionMinimizer otherwise they will be hided. FunctionMinimum Minimize(const FCNGradientBase&fcn, const std::vector<double>&par, const std::vector<double>&err, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const MnUserParameters& par, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const MnUserParameters& par, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const MnUserParameters& par, const MnUserCovariance& cov, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const MnUserParameters& par, const MnUserCovariance& cov, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const MnFcn& mfcn, const GradientCalculator& gc, const MinimumSeed& seed, const MnStrategy& stra, unsigned int maxfcn, double toler). » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Minuit2__FumiliMinimizer.html:5956,toler,toler,5956,root/html604/ROOT__Minuit2__FumiliMinimizer.html,https://root.cern,https://root.cern/root/html604/ROOT__Minuit2__FumiliMinimizer.html,10,['toler'],['toler']
Availability,"e(const RooAbsRealLValue &var, double xmin, double xmax, Int_t nBins)Create a new frame for a given variable in x.Definition RooPlot.cxx:225; RooPlot::GetYaxisTAxis * GetYaxis() constDefinition RooPlot.cxx:1264; RooPlot::Drawvoid Draw(Option_t *options=nullptr) overrideDraw this plot and all of the elements it contains.Definition RooPlot.cxx:637; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TCanvasThe Canvas class.Definition TCanvas.h:23; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf703_effpdfprodDefinition rf703_effpdfprod.py:1; ; [#1] INFO:NumericIntegration -- RooRealIntegral::init(modelEff_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:Fitting -- RooAbsPdf::fitTo(modelEff_over_modelEff_Int[t]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_modelEff_over_modelEff_Int[t]_modelEffData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:NumericIntegration -- RooRealIntegral::init(modelEff_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:NumericIntegration -- RooRealIntegral::init(modelEff_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf703_effpdfprod.C. tutorialsroofitrf703_effpdfprod.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf703__effpdfprod_8C.html:5020,error,error,5020,doc/master/rf703__effpdfprod_8C.html,https://root.cern,https://root.cern/doc/master/rf703__effpdfprod_8C.html,1,['error'],['error']
Availability,"e(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTList::Delete(Option_t* option = """"); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TList::FindObject(const char* name) const; virtual TObject*TList::FindObject(const TObject* obj) const; virtual TObject*TList::First() const; virtual TObjLink*TList::FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TList::GetObjectRef(const TObject* obj) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TParallelCoordSelect.html:2780,error,error,2780,root/html602/TParallelCoordSelect.html,https://root.cern,https://root.cern/root/html602/TParallelCoordSelect.html,4,['error'],['error']
Availability,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnT_char_.html:3321,error,error,3321,root/html534/THnT_char_.html,https://root.cern,https://root.cern/root/html534/THnT_char_.html,55,"['Error', 'error']","['Error', 'error']"
Availability,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char*[] name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char*[] name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Lo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnT_char_.html:2090,error,error,2090,root/html602/THnT_char_.html,https://root.cern,https://root.cern/root/html602/THnT_char_.html,110,"['Error', 'error']","['Error', 'error']"
Availability,"e(const char* queryref, const char* path = 0); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTProof::SendDataSetStatus(const char* msg, UInt_t n, UInt_t tot, Bool_t st); Bool_tTProof::SendingLogToWindow() const; voidTProof::SendLogToWindow(Bool_t mode); virtual voidSetActive(); virtual voidSetActive(Bool_t active); virtual voidTProof::SetAlias(const char* alias = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTProof::SetDataPoolUrl(const char* url); virtual Int_tTProof::SetDataSetTreeName(const char* dataset, const char* treename); voidTProof::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTProof::SetInputDataFile(const char* datafile); voidTProof::SetLogLevel(Int_t level, UInt_t mask = TProofDebug::kAll); voidTProof::SetManager(TProofMgr* mgr); voidTProof::SetMaxDrawQueries(Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); Int_tTProof::SetParallel(Int_t nodes = 9999, Bool_t random = kFALSE); voidTProof::SetParameter(const char* par, const char* value); voidTProof::SetParameter(const char* par, Int_t value); voidTProof::SetParameter(const char* par, Long_t value); voidTProof::SetParameter(const char* par, Long64_t value); voidTProof::SetParameter(const char* par, Double_t value); voidTProof::SetPrintProgress(PrintProgress_t pp); voidTProof::SetProgressDialog(Bool_t on = kTRUE); voidTProof::SetQueryMode(TProof::EQueryMode mode); voidTProof::SetRealTimeLog(Bool_t on = kTRUE); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTProof::ShowCache(Bool_t all = kFALSE); voidT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofCondor.html:15453,mask,mask,15453,root/html528/TProofCondor.html,https://root.cern,https://root.cern/root/html528/TProofCondor.html,1,['mask'],['mask']
Availability,"e(const char* typenam); virtual~TDataType(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); const char*AsString(void* buf) const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*GetFullTypeName() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; Int_tGetType() const; static EDataTypeGetType(const type_info& typeinfo); const char*GetTypeName() const; static const char*GetTypeName(EDataType type); virtual UInt_tTObject::GetUniqueID",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDataType.html:1620,error,error,1620,root/html528/TDataType.html,https://root.cern,https://root.cern/root/html528/TDataType.html,2,['error'],['error']
Availability,"e(const std::vector<std::string> &columnNames); 315{; 316 auto newColNames = columnNames;; 317 for (auto &col : newColNames) {; 318 const auto dotPos = col.find('.');; 319 if (dotPos != std::string::npos && dotPos != col.size() - 1 && dotPos != 0u) {; 320 auto oldName = col;; 321 std::replace(col.begin(), col.end(), '.', '_');; 322 if (std::find(columnNames.begin(), columnNames.end(), col) != columnNames.end()); 323 throw std::runtime_error(""Column "" + oldName + "" would be written as "" + col +; 324 "" but this column already exists. Please use Alias to select a new name for "" +; 325 oldName);; 326 Info(""Snapshot"", ""Column %s will be saved as %s"", oldName.c_str(), col.c_str());; 327 }; 328 }; 329 ; 330 return newColNames;; 331}; 332 ; 333void InterpreterDeclare(const std::string &code); 334{; 335 R__LOG_DEBUG(10, RDFLogChannel()) << ""Declaring the following code to cling:\n\n"" << code << '\n';; 336 ; 337 if (!gInterpreter->Declare(code.c_str())) {; 338 const auto msg =; 339 ""\nRDataFrame: An error occurred during just-in-time compilation. The lines above might indicate the cause of ""; 340 ""the crash\n All RDF objects that have not run an event loop yet should be considered in an invalid state.\n"";; 341 throw std::runtime_error(msg);; 342 }; 343}; 344 ; 345Long64_t InterpreterCalc(const std::string &code, const std::string &context); 346{; 347 R__LOG_DEBUG(10, RDFLogChannel()) << ""Jitting and executing the following code:\n\n"" << code << '\n';; 348 ; 349 TInterpreter::EErrorCode errorCode(TInterpreter::kNoError); // storage for cling errors; 350 ; 351 auto callCalc = [&errorCode, &context](const std::string &codeSlice) {; 352 gInterpreter->Calc(codeSlice.c_str(), &errorCode);; 353 if (errorCode != TInterpreter::EErrorCode::kNoError) {; 354 std::string msg = ""\nAn error occurred during just-in-time compilation"";; 355 if (!context.empty()); 356 msg += "" in "" + context;; 357 msg +=; 358 "". The lines above might indicate the cause of the crash\nAll RDF objects that have no",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDFUtils_8cxx_source.html:13365,error,error,13365,doc/master/RDFUtils_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDFUtils_8cxx_source.html,1,['error'],['error']
Availability,"e(file.c_str(), amode, arguments, aclicio);; 657 mode = amode.Data(); args = arguments.Data();; 658 io = aclicio.Data(); fname = f.Data();; 659}; 660 ; 661//______________________________________________________________________________; 662//; 663//; 664//; 665 ; 666#ifdef R__WIN32; 667extern ""C"" {; 668 char *__unDName(char *demangled, const char *mangled, int out_len,; 669 void * (* pAlloc )(size_t), void (* pFree )(void *),; 670 unsigned short int flags);; 671}; 672#endif; 673 ; 674////////////////////////////////////////////////////////////////////////////////; 675/// Find a template decl within N nested namespaces, 0<=N<inf; 676/// Assumes 1 and only 1 template present and 1 and only 1 entity contained; 677/// by the namespace. Example: `ns1::ns2::..::%nsN::%myTemplate`; 678/// Returns nullptr in case of error; 679 ; 680static clang::ClassTemplateDecl* FindTemplateInNamespace(clang::Decl* decl); 681{; 682 using namespace clang;; 683 if (NamespaceDecl* nsd = llvm::dyn_cast<NamespaceDecl>(decl)){; 684 return FindTemplateInNamespace(*nsd->decls_begin());; 685 }; 686 ; 687 if (ClassTemplateDecl* ctd = llvm::dyn_cast<ClassTemplateDecl>(decl)){; 688 return ctd;; 689 }; 690 ; 691 return nullptr; // something went wrong.; 692}; 693 ; 694//______________________________________________________________________________; 695//; 696//; 697//; 698 ; 699int TCling_GenerateDictionary(const std::vector<std::string> &classes,; 700 const std::vector<std::string> &headers,; 701 const std::vector<std::string> &fwdDecls,; 702 const std::vector<std::string> &unknown); 703{; 704 //This function automatically creates the ""LinkDef.h"" file for templated; 705 //classes then executes CompileMacro on it.; 706 //The name of the file depends on the class name, and it's not generated again; 707 //if the file exist.; 708 if (classes.empty()) {; 709 return 0;; 710 }; 711 // Use the name of the first class as the main name.; 712 const std::string& className = classes[0];; 713 //(0) prepare file na",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:24145,error,error,24145,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['error'],['error']
Availability,"e(unsigned int ivar, double value); virtual boolROOT::Math::Minimizer::SetVariableUpperLimit(unsigned int ivar, double upper); virtual boolROOT::Math::Minimizer::SetVariableValue(unsigned int ivar, double value); virtual boolROOT::Math::Minimizer::SetVariableValues(const double* x); virtual voidShowMembers(TMemberInspector&); intROOT::Math::Minimizer::Status() const; intROOT::Math::Minimizer::Strategy() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); doubleROOT::Math::Minimizer::Tolerance() const; virtual intROOT::Math::Minimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::Minimizer::VariableName(unsigned int ivar) const; virtual const double*X() const. private:. TLinearMinimizer(const TLinearMinimizer&); TLinearMinimizer&operator=(const TLinearMinimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer ; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. vector<double>fCovar; unsigned intfDim; vector<double>fErrors; TLinearFitter*fFitter; doublefMinVal; unsigned intfNFree; const ROOT::Math::IGradientFunctionMultiDim*fObjFunc; vector<double>fParams; boolfRobust. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLinearMinimizer(int type = 0); Default constructor implementation.; type is not used - needed for consistency with other minimizer plug-ins. TLinearMinimizer(const char* type); constructor passing a type of algorithm, (supported now robust via LTS regression). ~TLinearMinimizer(); Destructor implementation. TLinearMinimizer(const TLinearMinimizer& ); Implementation of copy constructor. void SetFunction(const ROOT::Math::IMultiGenFunction & ); Set function to be minimized. Flag an error since only support Gradient objective functions. void SetFunction(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TLinearMinimizer.html:5652,error,errors,5652,root/html534/TLinearMinimizer.html,https://root.cern,https://root.cern/root/html534/TLinearMinimizer.html,2,['error'],['errors']
Availability,"e) const; Int_tBinarySearch(Bool_t value) const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tCountKey(const void* key, Int_t firstIndx = 0, Bool_t bSearch = kTRUE, Int_t* firstRow = 0) const; virtual Int_tCountKeys() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual Int_tFindFirstKey(const void* key) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetColumnName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetFirstRow() const; virtual const char*TObject::GetIconName() const; Int_tGetIndex(UInt_t sortedIndex) const; virtual const void*GetKeyAddress(Int_t indx); virtual Int_tGetLastFound() const; virtual const char*TNamed::GetName() const; virtual Int_tGetNRows() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOptio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTableSorter.html:4800,error,error,4800,root/html528/TTableSorter.html,https://root.cern,https://root.cern/root/html528/TTableSorter.html,10,['error'],['error']
Availability,"e) const; virtual voidRooAbsReal::setTreeBranchStatus(TTree& t, Bool_t active); virtual voidsetVal(Double_t value, const char*); virtual voidsetValFast(Double_t value); voidRooAbsArg::setValueDirty(const RooAbsArg* source) const; virtual voidRooAbsReal::syncCache(const RooArgSet* set = 0); Double_tRooAbsReal::traceEval(const RooArgSet* set) const; virtual Bool_tRooAbsReal::traceEvalHook(Double_t) const; voidRooAbsArg::unRegisterProxy(RooArgProxy& proxy); voidRooAbsArg::unRegisterProxy(RooSetProxy& proxy); voidRooAbsArg::unRegisterProxy(RooListProxy& proxy). Data Members; public:. enum RooAbsReal::ScaleType { Raw; Relative; NumEvent; RelativeExpected; };; enum RooAbsReal::ErrorLoggingMode { PrintErrors; CollectErrors; CountErrors; Ignore; };; enum RooAbsArg::ConstOpCode { Activate; DeActivate; ConfigChange; ValueChange; };; enum RooAbsArg::CacheMode { Always; NotAdvised; Never; };; enum RooAbsArg::OperMode { Auto; AClean; ADirty; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. public:. static map<RooAbsArg*,TRefArray*>RooAbsArg::_ioEvoListtemporary holding list for proxies needed in schema evolution ; static stack<RooAbsArg*>RooAbsArg::_ioReadStackreading stack ; static const UInt_tRooAbsArg::fnv1a32start; static const ULong64_tRooAbsArg::fnv1a64start. protected:. set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsRealLValue.html:34946,Error,ErrorLoggingMode,34946,root/html534/RooAbsRealLValue.html,https://root.cern,https://root.cern/root/html534/RooAbsRealLValue.html,1,['Error'],['ErrorLoggingMode']
Availability,"e) const; voidRooAbsTestStatistic::setSimCount(Int_t simCount); virtual voidRooAbsReal::setTreeBranchStatus(TTree& t, Bool_t active); voidRooAbsArg::setValueDirty(const RooAbsArg* source) const; virtual voidRooAbsReal::syncCache(const RooArgSet* set = 0); Double_tRooAbsReal::traceEval(const RooArgSet* set) const; virtual Bool_tRooAbsReal::traceEvalHook(Double_t) const; voidRooAbsArg::unRegisterProxy(RooArgProxy& proxy); voidRooAbsArg::unRegisterProxy(RooSetProxy& proxy); voidRooAbsArg::unRegisterProxy(RooListProxy& proxy). Data Members; public:. enum RooAbsTestStatistic::GOFOpMode { SimMaster; MPMaster; Slave; };; enum RooAbsReal::ScaleType { Raw; Relative; NumEvent; RelativeExpected; };; enum RooAbsReal::ErrorLoggingMode { PrintErrors; CollectErrors; CountErrors; Ignore; };; enum RooAbsArg::ConstOpCode { Activate; DeActivate; ConfigChange; ValueChange; };; enum RooAbsArg::CacheMode { Always; NotAdvised; Never; };; enum RooAbsArg::OperMode { Auto; AClean; ADirty; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. public:. static map<RooAbsArg*,TRefArray*>RooAbsArg::_ioEvoListtemporary holding list for proxies needed in schema evolution ; static stack<RooAbsArg*>RooAbsArg::_ioReadStackreading stack ; static const UInt_tRooAbsArg::fnv1a32start; static const ULong64_tRooAbsArg::fnv1a64start. protected:. stringRooAbsTestStatistic::_addCoefRangeNameName of reference to be used for RooAddPdf components; RooRealSumPdf*_binnedPdf!; vector<Double_t>_binw!; set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNLLVar.html:34749,Error,ErrorLoggingMode,34749,root/html534/RooNLLVar.html,https://root.cern,https://root.cern/root/html534/RooNLLVar.html,1,['Error'],['ErrorLoggingMode']
Availability,"e) const; voidRooAbsTestStatistic::setSimCount(Int_t simCount); virtual voidRooAbsReal::setTreeBranchStatus(TTree& t, Bool_t active); voidRooAbsArg::setValueDirty(const RooAbsArg* source) const; virtual voidRooAbsReal::syncCache(const RooArgSet* set = 0); Double_tRooAbsReal::traceEval(const RooArgSet* set) const; virtual Bool_tRooAbsReal::traceEvalHook(Double_t) const; voidRooAbsArg::unRegisterProxy(RooArgProxy& proxy); voidRooAbsArg::unRegisterProxy(RooSetProxy& proxy); voidRooAbsArg::unRegisterProxy(RooListProxy& proxy). Data Members; public:. enum RooAbsTestStatistic::GOFOpMode { SimMaster; MPMaster; Slave; };; enum RooAbsReal::ScaleType { Raw; Relative; NumEvent; RelativeExpected; };; enum RooAbsReal::ErrorLoggingMode { PrintErrors; CollectErrors; CountErrors; Ignore; };; enum RooAbsArg::ConstOpCode { Activate; DeActivate; ConfigChange; ValueChange; };; enum RooAbsArg::CacheMode { Always; NotAdvised; Never; };; enum RooAbsArg::OperMode { Auto; AClean; ADirty; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. public:. static map<RooAbsArg*,TRefArray*>RooAbsArg::_ioEvoListtemporary holding list for proxies needed in schema evolution ; static stack<RooAbsArg*>RooAbsArg::_ioReadStackreading stack ; static const UInt_tRooAbsArg::fnv1a32start; static const ULong64_tRooAbsArg::fnv1a64start. protected:. stringRooAbsTestStatistic::_addCoefRangeNameName of reference to be used for RooAddPdf components; set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsOptTestStatistic.html:33805,Error,ErrorLoggingMode,33805,root/html534/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html534/RooAbsOptTestStatistic.html,2,['Error'],['ErrorLoggingMode']
Availability,"e) constTAttLine; TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; CreateInterpolator(Bool_t oldInterp)TGraph2Dprivate; DeclFileName()TGraph2DErrorsinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DirectoryAutoAdd(TDirectory *)TGraph2Dvirtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTGraph2Dvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option=""P0"") overrideTGraph2Dvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTGraph2Dprivate; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTGraph2Dvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fDelaunayTGraph2Dprotected; fDirectoryTGraph2Dprotected; fEXTGraph2DErrorsprotected; fEYTGraph2DErrorsprotected; fEZTGraph2DErrorsprotected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fFunctionsTGraph2Dprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fHistogramTGraph2Dprotected; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) const overrideTGraph2Dvirtual; FindObject(const TObject *obj) const overrideTGraph2Dvirtual; Fit(const char *formula, Option_t *option="""", Option_t *goption="""")TGraph2Dvirtual; Fit(TF2 *f2, Option_t *option="""", Option_t *goption="""")TGraph2Dvirtual; FitPanel()TGraph2Dvirtual; fLineColorTAttLineprotected; fLineStyleTAttLineprotected; fLineWidthTAttLineprotected; fMarginTGraph2Dprotected; f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2DErrors-members.html:2070,error,error,2070,doc/master/classTGraph2DErrors-members.html,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors-members.html,2,['error'],['error']
Availability,"e)) == -1) {; 19729 mg_cry_ctx_internal(ctx, ""Invalid option: %s"", name);; 19730 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19731 mg_snprintf(NULL,; 19732 NULL, /* No truncation check for error buffers */; 19733 error->text,; 19734 error->text_buffer_size,; 19735 ""Invalid configuration option: %s"",; 19736 name);; 19737 }; 19738 free_context(ctx);; 19739 pthread_setspecific(sTlsKey, NULL);; 19740 return NULL;; 19741 } else if ((value = *options++) == NULL) {; 19742 mg_cry_ctx_internal(ctx, ""%s: option value cannot be NULL"", name);; 19743 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19744 mg_snprintf(NULL,; 19745 NULL, /* No truncation check for error buffers */; 19746 error->text,; 19747 error->text_buffer_size,; 19748 ""Invalid configuration option value: %s"",; 19749 name);; 19750 }; 19751 free_context(ctx);; 19752 pthread_setspecific(sTlsKey, NULL);; 19753 return NULL;; 19754 }; 19755 if (ctx->dd.config[idx] != NULL) {; 19756 /* A duplicate configuration option is not an error - the last; 19757 * option value will be used. */; 19758 mg_cry_ctx_internal(ctx, ""warning: %s: duplicate option"", name);; 19759 mg_free(ctx->dd.config[idx]);; 19760 }; 19761 ctx->dd.config[idx] = mg_strdup_ctx(value, ctx);; 19762 DEBUG_TRACE(""[%s] -> [%s]"", name, value);; 19763 }; 19764 ; 19765 /* Set default value if needed */; 19766 for (i = 0; config_options[i].name != NULL; i++) {; 19767 default_value = config_options[i].default_value;; 19768 if ((ctx->dd.config[i] == NULL) && (default_value != NULL)) {; 19769 ctx->dd.config[i] = mg_strdup_ctx(default_value, ctx);; 19770 }; 19771 }; 19772 ; 19773 /* Request size option */; 19774 itmp = atoi(ctx->dd.config[MAX_REQUEST_SIZE]);; 19775 if (itmp < 1024) {; 19776 mg_cry_ctx_internal(ctx,; 19777 ""%s too small"",; 19778 config_options[MAX_REQUEST_SIZE].name);; 19779 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19780 mg_snprintf(NULL,; 19781 NULL, /* No truncation check for error buffers */; 19782 error->text,;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:589610,error,error,589610,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"e)) == -1) {; 19730 mg_cry_ctx_internal(ctx, ""Invalid option: %s"", name);; 19731 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19732 mg_snprintf(NULL,; 19733 NULL, /* No truncation check for error buffers */; 19734 error->text,; 19735 error->text_buffer_size,; 19736 ""Invalid configuration option: %s"",; 19737 name);; 19738 }; 19739 free_context(ctx);; 19740 pthread_setspecific(sTlsKey, NULL);; 19741 return NULL;; 19742 } else if ((value = *options++) == NULL) {; 19743 mg_cry_ctx_internal(ctx, ""%s: option value cannot be NULL"", name);; 19744 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19745 mg_snprintf(NULL,; 19746 NULL, /* No truncation check for error buffers */; 19747 error->text,; 19748 error->text_buffer_size,; 19749 ""Invalid configuration option value: %s"",; 19750 name);; 19751 }; 19752 free_context(ctx);; 19753 pthread_setspecific(sTlsKey, NULL);; 19754 return NULL;; 19755 }; 19756 if (ctx->dd.config[idx] != NULL) {; 19757 /* A duplicate configuration option is not an error - the last; 19758 * option value will be used. */; 19759 mg_cry_ctx_internal(ctx, ""warning: %s: duplicate option"", name);; 19760 mg_free(ctx->dd.config[idx]);; 19761 }; 19762 ctx->dd.config[idx] = mg_strdup_ctx(value, ctx);; 19763 DEBUG_TRACE(""[%s] -> [%s]"", name, value);; 19764 }; 19765 ; 19766 /* Set default value if needed */; 19767 for (i = 0; config_options[i].name != NULL; i++) {; 19768 default_value = config_options[i].default_value;; 19769 if ((ctx->dd.config[i] == NULL) && (default_value != NULL)) {; 19770 ctx->dd.config[i] = mg_strdup_ctx(default_value, ctx);; 19771 }; 19772 }; 19773 ; 19774 /* Request size option */; 19775 itmp = atoi(ctx->dd.config[MAX_REQUEST_SIZE]);; 19776 if (itmp < 1024) {; 19777 mg_cry_ctx_internal(ctx,; 19778 ""%s too small"",; 19779 config_options[MAX_REQUEST_SIZE].name);; 19780 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19781 mg_snprintf(NULL,; 19782 NULL, /* No truncation check for error buffers */; 19783 error->text,;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:589643,error,error,589643,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,"e); set regulatisation on a 1-dimensional curve; start: first bin; step: distance between neighbouring bins; nbin: total number of bins; regmode: regularisation mode; return value:; number of errors (i.e. conditions which have been skipped); modifies data member fLsquared. Int_t RegularizeBins2D(int start_bin, int step1, int nbin1, int step2, int nbin2, TUnfold::ERegMode regmode); set regularisation on a 2-dimensional grid of bins; start: first bin; step1: distance between bins in 1st direction; nbin1: number of bins in 1st direction; step2: distance between bins in 2nd direction; nbin2: number of bins in 2nd direction; return value:; number of errors (i.e. conditions which have been skipped); modifies data member fLsquared. Double_t DoUnfold(Double_t tau, const TH1* hist_y, Double_t scaleBias = 0.0); Do unfolding of an input histogram; tau_reg: regularisation parameter; input: input distribution with errors; scaleBias: scale factor applied to the bias; Data members required:; fA, fX0, fLsquared; Data members modified:; those documented in SetInput(); and those documented in DoUnfold(Double_t); Return value:; maximum global correlation coefficient; NOTE!!! return value >=1.0 means error, and the result is junk. Overflow bins of the input distribution are ignored!. Int_t SetInput(const TH1* hist_y, Double_t scaleBias = 0.0, Double_t oneOverZeroError = 0.0); Define the input data for subsequent calls to DoUnfold(Double_t); input: input distribution with errors; scaleBias: scale factor applied to the bias; oneOverZeroError: for bins with zero error, this number defines 1/error.; Return value: number of bins with bad error; +10000*number of unconstrained output bins; Note: return values>=10000 are fatal errors,; for the given input, the unfolding can not be done!; Data members modified:; fY, fVyy, fVyyinv, fBiasScale, fNdf; Data members cleared; see ClearResults. Double_t DoUnfold(Double_t tau); Unfold with given value of regularisation parameter tau; tau: new tau parame",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfold.html:27112,error,errors,27112,root/html528/TUnfold.html,https://root.cern,https://root.cern/root/html528/TUnfold.html,4,['error'],['errors']
Availability,"e); virtual TKey*TFile::CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static TDirectory*&TDirectory::CurrentDirectory(); static TFile*&TFile::CurrentFile(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); virtual voidTFile::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTFile::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTFile::DrawMap(const char* keys = ""*"", Option_t* option = """")MENU ; virtual voidTObject::Dump() constMENU ; static voidTDirectory::EncodeNameCycle(char* buffer, const char* name, Short_t cycle); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTFile::FillBuffer(char*& buffer); virtual TKey*TDirectoryFile::FindKey(const char* keyname) const; virtual TKey*TDirectoryFile::FindKeyAny(const char* keyname) const; virtual TObject*TDirectory::FindObject(const char* name) const; virtual TObject*TDirectory::FindObject(const TObject* obj) const; virtual TObject*TDirectoryFile::FindObjectAny(const char* name) const; virtual TObject*TDirectoryFile::FindObjectAnyFile(const char* name) const; virtual voidFlush(); virtual TObject*TDirectoryFile::Get(const char* namecycle); TArchiveFile*TFile::GetArchive() const; Long64_tTFile::GetArchiveOffset() const; static TFile::EAsyncOpenStatusTFile::GetAsyncOpenStatus(const char* name); static TFile::EAsyncOpenStatusTFile::GetAsyncOpenStatus(TFileOpenHandle* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TNetFile.html:4989,error,error,4989,root/html532/TNetFile.html,https://root.cern,https://root.cern/root/html532/TNetFile.html,2,['error'],['error']
Availability,"e); virtual TKey*TFile::CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static TDirectory*&TDirectory::CurrentDirectory(); static TFile*&TFile::CurrentFile(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); virtual voidTFile::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTFile::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTFile::DrawMap(const char* keys = ""*"", Option_t* option = """")MENU ; virtual voidTObject::Dump() constMENU ; static voidTDirectory::EncodeNameCycle(char* buffer, const char* name, Short_t cycle); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTFile::FillBuffer(char*& buffer); virtual TKey*TDirectoryFile::FindKey(const char* keyname) const; virtual TKey*TDirectoryFile::FindKeyAny(const char* keyname) const; virtual TObject*TDirectory::FindObject(const char* name) const; virtual TObject*TDirectory::FindObject(const TObject* obj) const; virtual TObject*TDirectoryFile::FindObjectAny(const char* name) const; virtual TObject*TDirectoryFile::FindObjectAnyFile(const char* name) const; virtual voidFlush(); virtual TObject*TDirectoryFile::Get(const char* namecycle); TArchiveFile*TFile::GetArchive() const; Long64_tTFile::GetArchiveOffset() const; virtual TFile::EAsyncOpenStatusGetAsyncOpenStatus(); Int_tTFile::GetBestBuffer() const; virtual Int_tTDirectoryFile::GetBufferSize() const; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TXNetFile.html:4207,error,error,4207,root/html532/TXNetFile.html,https://root.cern,https://root.cern/root/html532/TXNetFile.html,2,['error'],['error']
Availability,"e); virtual TKey*TFile::CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static TDirectory*&TDirectory::CurrentDirectory(); static TFile*&TFile::CurrentFile(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); virtual voidTFile::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTFile::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTFile::DrawMap(const char* keys = ""*"", Option_t* option = """")MENU ; virtual voidTObject::Dump() constMENU ; static voidTDirectory::EncodeNameCycle(char* buffer, const char* name, Short_t cycle); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTFile::FillBuffer(char*& buffer); virtual TKey*TDirectoryFile::FindKey(const char* keyname) const; virtual TKey*TDirectoryFile::FindKeyAny(const char* keyname) const; virtual TObject*TDirectory::FindObject(const char* name) const; virtual TObject*TDirectory::FindObject(const TObject* obj) const; virtual TObject*TDirectoryFile::FindObjectAny(const char* name) const; virtual TObject*TDirectoryFile::FindObjectAnyFile(const char* name) const; virtual voidTFile::Flush(); virtual TObject*TDirectoryFile::Get(const char* namecycle); TArchiveFile*TFile::GetArchive() const; Long64_tTFile::GetArchiveOffset() const; static TFile::EAsyncOpenStatusTFile::GetAsyncOpenStatus(const char* name); static TFile::EAsyncOpenStatusTFile::GetAsyncOpenStatus(TFileOpenH",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TDCacheFile.html:3346,error,error,3346,root/html532/TDCacheFile.html,https://root.cern,https://root.cern/root/html532/TDCacheFile.html,10,['error'],['error']
Availability,"e); virtual TKey*TFile::CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static TDirectory*&TDirectory::CurrentDirectory(); static TFile*&TFile::CurrentFile(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); virtual voidTFile::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTFile::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTFile::DrawMap(const char* keys = ""*"", Option_t* option = """")MENU ; virtual voidTObject::Dump() constMENU ; static voidTDirectory::EncodeNameCycle(char* buffer, const char* name, Short_t cycle); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTFile::FillBuffer(char*& buffer); virtual TKey*TDirectoryFile::FindKey(const char* keyname) const; virtual TKey*TDirectoryFile::FindKeyAny(const char* keyname) const; virtual TObject*TDirectory::FindObject(const char* name) const; virtual TObject*TDirectory::FindObject(const TObject* obj) const; virtual TObject*TDirectoryFile::FindObjectAny(const char* name) const; virtual TObject*TDirectoryFile::FindObjectAnyFile(const char* name) const; virtual voidTFile::Flush(); virtual TObject*TDirectoryFile::Get(const char* namecycle); TStringGetAccessId() const; TStringGetAccessKey() const; TArchiveFile*TFile::GetArchive() const; Long64_tTFile::GetArchiveOffset() const; static TFile::EAsyncOpenStatusTFile::GetAsyncOpenStatus(const char* name); static TF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TAS3File.html:3422,error,error,3422,root/html532/TAS3File.html,https://root.cern,https://root.cern/root/html532/TAS3File.html,4,['error'],['error']
Availability,"e); virtual TKey*TFile::CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static TDirectory*&TDirectory::CurrentDirectory(); static TFile*&TFile::CurrentFile(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); virtual voidTFile::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTFile::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTFile::DrawMap(const char* keys = ""*"", Option_t* option = """")MENU ; virtual voidTObject::Dump() constMENU ; static voidTDirectory::EncodeNameCycle(char* buffer, const char* name, Short_t cycle); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTFile::FillBuffer(char*& buffer); virtual TKey*TDirectoryFile::FindKey(const char* keyname) const; virtual TKey*TDirectoryFile::FindKeyAny(const char* keyname) const; virtual TObject*TDirectory::FindObject(const char* name) const; virtual TObject*TDirectory::FindObject(const TObject* obj) const; virtual TObject*TDirectoryFile::FindObjectAny(const char* name) const; virtual TObject*TDirectoryFile::FindObjectAnyFile(const char* name) const; virtual voidTNetFile::Flush(); virtual TObject*TDirectoryFile::Get(const char* namecycle); TArchiveFile*TFile::GetArchive() const; Long64_tTFile::GetArchiveOffset() const; static TFile::EAsyncOpenStatusTFile::GetAsyncOpenStatus(const char* name); static TFile::EAsyncOpenStatusTFile::GetAsyncOpenStatus(TFileOp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TCastorFile.html:4272,error,error,4272,root/html532/TCastorFile.html,https://root.cern,https://root.cern/root/html532/TCastorFile.html,2,['error'],['error']
Availability,"e); virtual voidTObject::AppendPad(Option_t* option = """"); virtual Double_tAtAsDouble(ULong64_t linidx) const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tGetBin(const Int_t* idx) const; Long64_tGetCellSize(Int_t dim) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; Long64_tGetNbins() const; Int_tGetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TNDArray.html:2076,error,error,2076,root/html534/TNDArray.html,https://root.cern,https://root.cern/root/html534/TNDArray.html,6,['error'],['error']
Availability,"e);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooArgList _basisList;  ! List of created basis functions ;  ; RooAICRegistry _codeReg;  ! Registry of analytical integration codes ;  ; RooObjCacheManager _coefNormMgr;  ! Coefficient normalization manager ;  ; RooListProxy _convSet;  Set of (resModel (x) basisFunc) convolution objects. ;  ; RooRealProxy _convVar;  Convolution variable. ;  ; bool _isCopy;  ; RooRealProxy _model;  Original model. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsAnaConvPdf.html:72840,error,errors,72840,doc/master/classRooAbsAnaConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsAnaConvPdf.html,1,['error'],['errors']
Availability,"e);; 11912 }; 11913 ; 11914 } else {; 11915 mg_cry_internal(conn, ""Bad SSI #include: [%s]"", tag);; 11916 return;; 11917 }; 11918 ; 11919 if (truncated) {; 11920 mg_cry_internal(conn, ""SSI #include path length overflow: [%s]"", tag);; 11921 return;; 11922 }; 11923 ; 11924 if (!mg_fopen(conn, path, MG_FOPEN_MODE_READ, &file)) {; 11925 mg_cry_internal(conn,; 11926 ""Cannot open SSI #include: [%s]: fopen(%s): %s"",; 11927 tag,; 11928 path,; 11929 strerror(ERRNO));; 11930 } else {; 11931 fclose_on_exec(&file.access, conn);; 11932 if (match_prefix_strlen(conn->dom_ctx->config[SSI_EXTENSIONS], path); 11933 > 0) {; 11934 send_ssi_file(conn, path, &file, include_level + 1);; 11935 } else {; 11936 send_file_data(conn, &file, 0, INT64_MAX);; 11937 }; 11938 (void)mg_fclose(&file.access); /* Ignore errors for readonly files */; 11939 }; 11940}; 11941 ; 11942 ; 11943#if !defined(NO_POPEN); 11944static void; 11945do_ssi_exec(struct mg_connection *conn, char *tag); 11946{; 11947 char cmd[1024] = """";; 11948 struct mg_file file = STRUCT_FILE_INITIALIZER;; 11949 ; 11950 if (sscanf(tag, "" \""%1023[^\""]\"""", cmd) != 1) {; 11951 mg_cry_internal(conn, ""Bad SSI #exec: [%s]"", tag);; 11952 } else {; 11953 cmd[1023] = 0;; 11954 if ((file.access.fp = popen(cmd, ""r"")) == NULL) {; 11955 mg_cry_internal(conn,; 11956 ""Cannot SSI #exec: [%s]: %s"",; 11957 cmd,; 11958 strerror(ERRNO));; 11959 } else {; 11960 send_file_data(conn, &file, 0, INT64_MAX);; 11961 pclose(file.access.fp);; 11962 }; 11963 }; 11964}; 11965#endif /* !NO_POPEN */; 11966 ; 11967 ; 11968static int; 11969mg_fgetc(struct mg_file *filep); 11970{; 11971 if (filep == NULL) {; 11972 return EOF;; 11973 }; 11974 ; 11975 if (filep->access.fp != NULL) {; 11976 return fgetc(filep->access.fp);; 11977 } else {; 11978 return EOF;; 11979 }; 11980}; 11981 ; 11982 ; 11983static void; 11984send_ssi_file(struct mg_connection *conn,; 11985 const char *path,; 11986 struct mg_file *filep,; 11987 int include_level); 11988{; 11989 char buf[MG_BUF_LEN];; 11990 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:345821,error,errors,345821,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['errors']
Availability,"e);; 11913 }; 11914 ; 11915 } else {; 11916 mg_cry_internal(conn, ""Bad SSI #include: [%s]"", tag);; 11917 return;; 11918 }; 11919 ; 11920 if (truncated) {; 11921 mg_cry_internal(conn, ""SSI #include path length overflow: [%s]"", tag);; 11922 return;; 11923 }; 11924 ; 11925 if (!mg_fopen(conn, path, MG_FOPEN_MODE_READ, &file)) {; 11926 mg_cry_internal(conn,; 11927 ""Cannot open SSI #include: [%s]: fopen(%s): %s"",; 11928 tag,; 11929 path,; 11930 strerror(ERRNO));; 11931 } else {; 11932 fclose_on_exec(&file.access, conn);; 11933 if (match_prefix_strlen(conn->dom_ctx->config[SSI_EXTENSIONS], path); 11934 > 0) {; 11935 send_ssi_file(conn, path, &file, include_level + 1);; 11936 } else {; 11937 send_file_data(conn, &file, 0, INT64_MAX);; 11938 }; 11939 (void)mg_fclose(&file.access); /* Ignore errors for readonly files */; 11940 }; 11941}; 11942 ; 11943 ; 11944#if !defined(NO_POPEN); 11945static void; 11946do_ssi_exec(struct mg_connection *conn, char *tag); 11947{; 11948 char cmd[1024] = """";; 11949 struct mg_file file = STRUCT_FILE_INITIALIZER;; 11950 ; 11951 if (sscanf(tag, "" \""%1023[^\""]\"""", cmd) != 1) {; 11952 mg_cry_internal(conn, ""Bad SSI #exec: [%s]"", tag);; 11953 } else {; 11954 cmd[1023] = 0;; 11955 if ((file.access.fp = popen(cmd, ""r"")) == NULL) {; 11956 mg_cry_internal(conn,; 11957 ""Cannot SSI #exec: [%s]: %s"",; 11958 cmd,; 11959 strerror(ERRNO));; 11960 } else {; 11961 send_file_data(conn, &file, 0, INT64_MAX);; 11962 pclose(file.access.fp);; 11963 }; 11964 }; 11965}; 11966#endif /* !NO_POPEN */; 11967 ; 11968 ; 11969static int; 11970mg_fgetc(struct mg_file *filep); 11971{; 11972 if (filep == NULL) {; 11973 return EOF;; 11974 }; 11975 ; 11976 if (filep->access.fp != NULL) {; 11977 return fgetc(filep->access.fp);; 11978 } else {; 11979 return EOF;; 11980 }; 11981}; 11982 ; 11983 ; 11984static void; 11985send_ssi_file(struct mg_connection *conn,; 11986 const char *path,; 11987 struct mg_file *filep,; 11988 int include_level); 11989{; 11990 char buf[MG_BUF_LEN];; 11991 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:345854,error,errors,345854,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['errors']
Availability,"e* ltree, TGListTreeItem* parent); virtual voidTEveElement::DestroyMainTrans(); virtual voidTEveElement::DestroyOrWarn(); voidTEveElement::DisableListElements(Bool_t rnr_self = kFALSE, Bool_t rnr_children = kFALSE)MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidTEveElement::DumpSourceObject() constMENU ; virtual voidElementChanged(Bool_t update_scenes = kTRUE, Bool_t redraw = kFALSE); voidTEveElement::EnableListElements(Bool_t rnr_self = kTRUE, Bool_t rnr_children = kTRUE)MENU ; TEveElement::List_iTEveElement::EndChildren(); TEveElement::List_ciTEveElement::EndChildren() const; TEveElement::List_iTEveElement::EndParents(); TEveElement::List_ciTEveElement::EndParents() const; TEveProjectable::ProjList_iTEveProjectable::EndProjecteds(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTEveElement::ExpandIntoListTree(TGListTree* ltree, TGListTreeItem* parent); voidTEveElement::ExportSourceObjectToCINT(char* var_name) constMENU ; virtual voidTEveElement::ExportToCINT(char* var_name)MENU ; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual voidTEveElement::FillImpliedSelectedSet(TEveElement::Set_t& impSelSet); voidFillPointSet(TEvePointSet* ps) const; TEveElement*TEveElement::FindChild(const TString& name, const TClass* cls = 0); TEveElement*TEveElement::FindChild(TPRegexp& regexp, const TClass* cls = 0); Int_tTEveElement::FindChildren(TEveElement::List_t& matches, const TString& name, const TCla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveTrackPropagator.html:5361,Error,Error,5361,root/html532/TEveTrackPropagator.html,https://root.cern,https://root.cern/root/html532/TEveTrackPropagator.html,4,['Error'],['Error']
Availability,"e* n); TMVA::MsgLogger&Log() const; voidOptimize(TMVA::DecisionTree* dt, Double_t weights). Data Members; protected:. Double_tTMVA::IPruneTool::B; Double_tTMVA::IPruneTool::S; Double_tTMVA::IPruneTool::fPruneStrength. private:. TMVA::MsgLogger*fLogger! output stream to save logging information; Int_tfOptimalK! the optimal index of the prune sequence; vector<TMVA::DecisionTreeNode*>fPruneSequence! map of weakest links (i.e., branches to prune) -> pruning index; vector<Double_t>fPruneStrengthList! map of alpha -> pruning index; vector<Double_t>fQualityIndexList! map of R(T) -> pruning index; TMVA::SeparationBase*fQualityIndexTool! the quality index used to calculate R(t), R(T) = sum[t in ~T]{ R(t) }. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; CostComplexityPruneTool( SeparationBase* qualityIndex ); the constructor for the cost complexity prunig. ~CostComplexityPruneTool(); the destructor for the cost complexity prunig. CalculatePruningInfo(TMVA::DecisionTree* dt, const TMVA::IPruneTool::EventSample* testEvents = __null, Bool_t isAutomatic = kFALSE). void InitTreePruningMetaData(TMVA::DecisionTreeNode* n); initialise ""meta data"" for the pruning, like the ""costcomplexity"", the; critical alpha, the minimal alpha down the tree, etc... for each node!!. void Optimize(TMVA::DecisionTree* dt, Double_t weights); after the critical alpha values (at which the corresponding nodes would; be pruned away) had been established in the ""InitMetaData"" we need now:; automatic pruning:; find the value of ""alpha"" for which the test sample gives minimal error,; on the tree with all nodes pruned that have alpha_critital < alpha,; fixed parameter pruning. CostComplexityPruneTool( SeparationBase* qualityIndex = NULL ). » Last changed: Tue Sep 8 17:45:53 2015 » Last generated: 2015-09-08 17:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__CostComplexityPruneTool.html:2502,down,down,2502,root/html604/TMVA__CostComplexityPruneTool.html,https://root.cern,https://root.cern/root/html604/TMVA__CostComplexityPruneTool.html,4,"['down', 'error']","['down', 'error']"
Availability,"e*) which shall be merged. ; Definition at line 39 of file TFileMerger.h. ◆ fHistoOneGo. Bool_t TFileMerger::fHistoOneGo. protected . Merger histos in one go (default is kTRUE) ; Definition at line 53 of file TFileMerger.h. ◆ fIOFeatures. TIOFeatures* TFileMerger::fIOFeatures {nullptr}. protected . IO features to use in the output file. ; Definition at line 48 of file TFileMerger.h. ◆ fLocal. Bool_t TFileMerger::fLocal. protected . Makes local copies of merging files if True (default is kTRUE) ; Definition at line 52 of file TFileMerger.h. ◆ fMaxOpenedFiles. Int_t TFileMerger::fMaxOpenedFiles. protected . Maximum number of files opened at the same time by the TFileMerger. ; Definition at line 51 of file TFileMerger.h. ◆ fMergeList. TList TFileMerger::fMergeList. protected . list of TObjString containing the name of the files need to be merged ; Definition at line 55 of file TFileMerger.h. ◆ fMergeOptions. TString TFileMerger::fMergeOptions. protected . Options (in string format) to be passed down to the Merge functions. ; Definition at line 47 of file TFileMerger.h. ◆ fMsgPrefix. TString TFileMerger::fMsgPrefix {""TFileMerger""}. protected . Prefix to be used when printing informational message (default TFileMerger) ; Definition at line 49 of file TFileMerger.h. ◆ fNoTrees. Bool_t TFileMerger::fNoTrees {kFALSE}. protected . True if Trees should not be merged (default is kFALSE) ; Definition at line 43 of file TFileMerger.h. ◆ fObjectNames. TString TFileMerger::fObjectNames. protected . List of object names to be either merged exclusively or skipped. ; Definition at line 54 of file TFileMerger.h. ◆ fOutputFile. TFile* TFileMerger::fOutputFile {nullptr}. protected . The outputfile for merging. ; Definition at line 40 of file TFileMerger.h. ◆ fOutputFilename. TString TFileMerger::fOutputFilename. protected . The name of the outputfile for merging. ; Definition at line 41 of file TFileMerger.h. ◆ fPrintLevel. Int_t TFileMerger::fPrintLevel {0}. protected . How much informa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileMerger.html:29250,down,down,29250,doc/master/classTFileMerger.html,https://root.cern,https://root.cern/doc/master/classTFileMerger.html,1,['down'],['down']
Availability,"e*AddFree(TList* lfree, Long64_t first, Long64_t last); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFree*GetBestFree(TList* lfree, Int_t nbytes); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tGetFirst() const; virtual const char*TObject::GetIconName() const; Long64_tGetLast() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFree.html:2093,error,error,2093,root/html528/TFree.html,https://root.cern,https://root.cern/root/html528/TFree.html,10,['error'],['error']
Availability,"e, Double_t size, const Char_t* text); voidTObject::MakeZombie(); TLatex&operator=(const TLatex&); TLatexFormSizeReadfs(); voidSavefs(TLatexFormSize* fs). Data Members; public:. enum { kTextNDC; };; enum TText::[unnamed] { kTextNDC; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. const Char_t*fError!error code; Double_tfFactorPos!Relative position of subscripts and superscripts; Double_tfFactorSize!Relative size of subscripts and superscripts; Bool_tfItalic!Currently inside #it operator; Int_tfLimitFactorSizelower bound for subscripts/superscripts size; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TStringTNamed::fNameobject identifier; Double_tfOriginSizeFont size of the starting font; Int_tfPos!Current position in array fTabSize;; Bool_tfShow!is true during the second pass (Painting); Int_tfTabMax!Maximum allocation for array fTabSize;; FormSize_t*fTabSize!array of values for the different zones; Short_tTAttText::fTextAlignText alignment; Float_tTAttText::fTextAngleText angle; Color_tTAttText::fTextColorText color index; Font_tTAttText::fTextFontText font number; Float_tTAttText::fTextSizeText size; TStringTNamed::fTitleobject title; Double_tTText::fXX position of text (left,center,etc..); Double_tTText::fYY position of text (left,center,etc..). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLatex(); Default constructor. TLatex(Double_t x, Double_t y, const char* text); Normal constructor. ~TLatex(); Destructor. TLatex(const TLatex& text); Copy constructor. TLatex& operator=(const TLatex& ); assignment operator. void Copy(TObject& text) const; Copy this TLatex object to another TLatex. TLatexFormSize Anal1(TextSpec_t spec, const Char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLatex.html:28005,error,error,28005,root/html528/TLatex.html,https://root.cern,https://root.cern/root/html528/TLatex.html,4,['error'],['error']
Availability,"e, Double_t* step) const; virtual Double_tDistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual voidDistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; static Double_tTGeoShape::DistToPhiMin(const Double_t* point, const Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); Double_tTGeoArb8::DistToPlane(const Double_t* point, const Double_t* dir, Int_t ipl, Bool_t in) const; virtual TGeoVolume*TGeoTrap::Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tTGeoTrap::GetAlpha1() const; Double_tTGeoTrap::GetAlpha2() const; virtual const char*TGeoBBox::GetAxisName(Int_t iaxis) const; virtual Double_tTGeoArb8::GetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; Double_tTGeoTrap::GetBl1() const; Double_tTGeoTrap::GetBl2() const; virtual voidTGeoArb8::GetBoundingCylinder(Double_t* param) const; virtual const TBuffer3D&TGeoBBox::GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoGtra.html:4499,Error,Error,4499,root/html534/TGeoGtra.html,https://root.cern,https://root.cern/root/html534/TGeoGtra.html,3,['Error'],['Error']
Availability,"e, Drawable_t, id, GContext_t, gc, Int_t, x, Int_t, y, UInt_t, w, UInt_t, h, 1) VOID_METHOD_ARG7(VirtualX;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t VOID_METHOD_ARG6 (VirtualX, DrawString, Drawable_t, id, GContext_t, gc, Int_t, x, Int_t, y, const char *, s, Int_t, len, 1) VOID_METHOD_ARG6(VirtualX;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t VOID_METHOD_ARG6 (VirtualX, GrabPointer, Window_t, id, UInt_t, evmask, Window_t, confine, Cursor_t, cursor, Bool_t, grab, Bool_t, owner_events, 1) VOID_METHOD_ARG6(VirtualX;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t VOID_METHOD_ARG7 (VirtualX, DrawCellArray, Int_t, x1, Int_t, y1, Int_t, x2, Int_t, y2, Int_t, nx, Int_t, ny, Int_t *, ic, 1) VOID_METHOD_ARG7(VirtualX;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t VOID_METHOD_ARG8 (VirtualX, QueryPointer, Window_t, id, Window_t &, rootw, Window_t &, childw, Int_t &, root_x, Int_t &, root_y, Int_t &, win_x, Int_t &, win_y, UInt_t &, mask, 1) VOID_METHOD_ARG0(VirtualX;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t VOID_METHOD_ARG9 (VirtualX, PutImage, Drawable_t, id, GContext_t, gc, Drawable_t, img, Int_t, dx, Int_t, dy, Int_t, x, Int_t, y, UInt_t, w, UInt_t, h, 1) VOID_METHOD_ARG9(VirtualX;  .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGWin32VirtualXProxy_8cxx.html:39420,mask,mask,39420,doc/master/TGWin32VirtualXProxy_8cxx.html,https://root.cern,https://root.cern/doc/master/TGWin32VirtualXProxy_8cxx.html,2,['mask'],['mask']
Availability,"e, Int_t bufsize); static TDirectory*&TDirectory::CurrentDirectory(); static TFile*&TFile::CurrentFile(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); static TStringTXMLSetup::DefaultXmlSetup(); virtual voidTFile::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTFile::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawMap(const char* = ""*"", Option_t* = """"); virtual voidTObject::Dump() constMENU ; static voidTDirectory::EncodeNameCycle(char* buffer, const char* name, Short_t cycle); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBuffer(char*&); virtual TKey*TDirectoryFile::FindKey(const char* keyname) const; virtual TKey*TDirectoryFile::FindKeyAny(const char* keyname) const; virtual TObject*TDirectory::FindObject(const char* name) const; virtual TObject*TDirectory::FindObject(const TObject* obj) const; virtual TObject*TDirectoryFile::FindObjectAny(const char* name) const; virtual TObject*TDirectoryFile::FindObjectAnyFile(const char* name) const; virtual voidFlush(); virtual TObject*TDirectoryFile::Get(const char* namecycle); TArchiveFile*TFile::GetArchive() const; Long64_tTFile::GetArchiveOffset() const; static TFile::EAsyncOpenStatusTFile::GetAsyncOpenStatus(const char* name); static TFile::EAsyncOpenStatusTFile::GetAsyncOpenStatus(TFileOpenHandle* handle); Int_tTFile::GetBestBuffer() const; virtual Int_tTDirectoryFile::GetBufferSize() const; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TXMLFile.html:5465,error,error,5465,root/html532/TXMLFile.html,https://root.cern,https://root.cern/root/html532/TXMLFile.html,2,['error'],['error']
Availability,"e, Int_t setNum, const TObject* obj = 0, Bool_t isArray = kFALSE); voiddefineRequiredArgs(const char* argName1, const char* argName2 = 0, const char* argName3 = 0, const char* argName4 = 0, const char* argName5 = 0, const char* argName6 = 0, const char* argName7 = 0, const char* argName8 = 0); Bool_tdefineSet(const char* name, const char* argName, Int_t setNum, const RooArgSet* set = 0); Bool_tdefineString(const char* name, const char* argName, Int_t stringNum, const char* defValue = """", Bool_t appendMode = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; RooLinkedListfilterCmdList(RooLinkedList& cmdInList, const char* cmdNameList, Bool_t removeFromInList = kTRUE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tgetDouble(const char* name, Double_t defaultValue = 0); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Int_tgetInt(const char* name, Int_t defaultValue = 0); virtual const char*TObject::GetName() const; TObject*getObject(const char* name, TObject* obj = 0); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; const RooLinkedList&getObjectList(const char* name); static Bool_tTObject::GetObjectStat(); virtual Option_t*TOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCmdConfig.html:4299,error,error,4299,root/html526/RooCmdConfig.html,https://root.cern,https://root.cern/root/html526/RooCmdConfig.html,11,['error'],['error']
Availability,"e, Int_t& err, Int_t offset = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTFormula::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Int_tTFormula::Compile(const char* expression = """"); virtual voidTFormula::Copy(TObject& formula) const; virtual char*TFormula::DefinedString(Int_t code); virtual Double_tTFormula::DefinedValue(Int_t code); virtual Int_tDefinedVariable(TString& variable, Int_t& action); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tTFormula::Eval(Double_t x, Double_t y = 0, Double_t z = 0, Double_t t = 0) const; virtual TClass*EvalClass() const; virtual Double_tEvalInstance(Int_t i = 0, const char** stringStack = 0); virtual Long64_tEvalInstance64(Int_t i = 0, const char** stringStack = 0); virtual LongDouble_tEvalInstanceLD(Int_t i = 0, const char** stringStack = 0); virtual void*EvalObject(Int_t i = 0); virtual Double_tTFormula::EvalPar(const Double_t* x, const Double_t* params = 0); virtual Double_tTFormula::EvalParOld(const Double_t* x, const Double_t* params = 0); virtual const char*EvalStringInstance(Int_t i = 0); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeFormula.html:2895,Error,Error,2895,root/html534/TTreeFormula.html,https://root.cern,https://root.cern/root/html534/TTreeFormula.html,1,['Error'],['Error']
Availability,"e, Int_t& err, Int_t offset = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTFormula::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Int_tTFormula::Compile(const char* expression = """"); virtual voidTFormula::Copy(TObject& formula) const; virtual char*TFormula::DefinedString(Int_t code); virtual Double_tTFormula::DefinedValue(Int_t code); virtual Int_tDefinedVariable(TString& variable, Int_t& action); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tTFormula::Eval(Double_t x, Double_t y = 0, Double_t z = 0, Double_t t = 0) const; virtual TClass*EvalClass() const; virtual Double_tEvalInstance(Int_t i = 0, const char** stringStack = 0); virtual void*EvalObject(Int_t i = 0); virtual Double_tTFormula::EvalPar(const Double_t* x, const Double_t* params = 0); virtual Double_tTFormula::EvalParOld(const Double_t* x, const Double_t* params = 0); virtual const char*EvalStringInstance(Int_t i = 0); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTreeFormula.html:2895,Error,Error,2895,root/html532/TTreeFormula.html,https://root.cern,https://root.cern/root/html532/TTreeFormula.html,1,['Error'],['Error']
Availability,"e, Int_t& err, Int_t offset = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTFormula::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Int_tTFormula::Compile(const char* expression = """"); virtual voidTFormula::Copy(TObject& formula) const; virtual char*TFormula::DefinedString(Int_t code); virtual Double_tTFormula::DefinedValue(Int_t code); virtual Int_tDefinedVariable(TString& variable, Int_t& action); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tTFormula::Eval(Double_t x, Double_t y = 0, Double_t z = 0, Double_t t = 0) const; virtual TClass*EvalClass() const; virtual Double_tEvalInstance(Int_t i = 0, const char*[] stringStack = 0); virtual Long64_tEvalInstance64(Int_t i = 0, const char*[] stringStack = 0); doubleEvalInstance<double>(Int_t i = 0, const char*[] stringStack = 0); long doubleEvalInstance<long double>(Int_t i = 0, const char*[] stringStack = 0); Long64_tEvalInstance<long long>(Int_t i = 0, const char*[] stringStack = 0); virtual LongDouble_tEvalInstanceLD(Int_t i = 0, const char*[] stringStack = 0); virtual void*EvalObject(Int_t i = 0); virtual Double_tTFormula::EvalPar(const Double_t* x, const Double_t* params = 0); virtual Double_tTFormula::EvalParOld(const Double_t* x, const Double_t* params = 0); virtual const char*EvalStringInstance(Int_t i = 0); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeFormula.html:2837,Error,Error,2837,root/html602/TTreeFormula.html,https://root.cern,https://root.cern/root/html602/TTreeFormula.html,1,['Error'],['Error']
Availability,"e, absTol, relTol, ncall);; SetFunction(f, dim);; }; destructor. IntegratorMultiDim(const ROOT::Math::IntegratorMultiDim& ); disable copy constructur and assignment operator. {}. IntegratorMultiDim & operator=(const ROOT::Math::IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. double Result() const; return result of last integration. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const; return integration error. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const; return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. void SetRelTolerance(double relTol); return number of function evaluations in calculating the integral; unsigned int NEval() const { return fNEval; }; set the relative tolerance. { if (fIntegrator) fIntegrator->SetRelTolerance(relTol); }. void SetAbsTolerance(double absTol); set absolute tolerance. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTol); }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. { if (fIntegrator) fIntegrator->SetOptions(opt); }. VirtualIntegratorMultiDim * GetIntegrator(); return a pointer to integrator object. { return fIntegrator; }. std::string Name() const; return name of integrator. { return (fIntegrator) ? Options().Integrator() : std::string(""""); }. IntegrationMultiDim::Type GetType(const char* name); static function to get the enumeration from a string. std::string GetName(ROOT::Math::IntegrationMultiDim::Type ); static function to get a string from the enumeration. VirtualIntegratorMultiDim * CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IntegratorMultiDim.html:5526,toler,tolerance,5526,root/html528/ROOT__Math__IntegratorMultiDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IntegratorMultiDim.html,10,['toler'],['tolerance']
Availability,"e, and hence, it cannot be used as a PDF. In this case, RooFit passes an error to the minimiser, which might try to recover.; ; import ROOT; ; ; # Create a fit model:; # The polynomial is notoriously unstable, because it can quickly go negative.; # Since PDFs need to be positive, one often ends up with an unstable fit model.; x = ROOT.RooRealVar(""x"", ""x"", -15, 15); a1 = ROOT.RooRealVar(""a1"", ""a1"", -0.5, -10.0, 20.0); a2 = ROOT.RooRealVar(""a2"", ""a2"", 0.2, -10.0, 20.0); a3 = ROOT.RooRealVar(""a3"", ""a3"", 0.01); pdf = ROOT.RooPolynomial(""pol3"", ""c + a1 * x + a2 * x*x + 0.01 * x*x*x"", x, [a1, a2, a3]); ; # Create toy data with all-positive coefficients:; data = pdf.generate(x, 10000); ; # For plotting.; # We create pointers to the plotted objects. We want these objects to leak out of the function,; # so we can still see them after it returns.; c = ROOT.TCanvas(); frame = x.frame(); data.plotOn(frame, Name=""data""); ; # Plotting a PDF with disallowed parameters doesn't work. We would get a lot of error messages.; # Therefore, we disable plotting messages in RooFit's message streams:; ROOT.RooMsgService.instance().getStream(0).removeTopic(ROOT.RooFit.Plotting); ROOT.RooMsgService.instance().getStream(1).removeTopic(ROOT.RooFit.Plotting); ; ; # RooFit before ROOT 6.24; # --------------------------------; # Before 6.24, RooFit wasn't able to recover from invalid parameters. The minimiser just errs around; # the starting values of the parameters without finding any improvement.; ; # Set up the parameters such that the PDF would come out negative. The PDF is now undefined.; a1.setVal(10.0); a2.setVal(-1.0); ; # Perform a fit:; fitWithoutRecovery = pdf.fitTo(; data,; Save=True,; RecoverFromUndefinedRegions=0.0, # This is how RooFit behaved prior to ROOT 6.24; PrintEvalErrors=-1, # We are expecting a lot of evaluation errors. -1 switches off printing.; PrintLevel=-1,; ); ; pdf.plotOn(frame, LineColor=""r"", Name=""noRecovery""); ; ; # RooFit since ROOT 6.24; # ------------------------",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8py.html:1702,error,error,1702,doc/master/rf612__recoverFromInvalidParameters_8py.html,https://root.cern,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8py.html,1,['error'],['error']
Availability,"e, bool createOnTheFly=false) override;  Retrieve binning of this linear transformation. ;  ; std::list< std::string > getBinningNames () const override;  Get a list of all binning names. ;  ; bool hasBinning (const char *name) const override;  Returns true if binning with given name exists.If a given binning exists on the input variable, it will also exists on this linear transformation. ;  ; TClass * IsA () const override;  ; bool isJacobianOK (const RooArgSet &depList) const override;  Returns true if Jacobian term associated with current expression tree is indeed constant. ;  ; double jacobian () const override;  Return value of Jacobian associated with the transformation. ;  ; virtual RooAbsArg & operator= (double newValue);  Assignment operator from a double. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream. ;  ; void setVal (double value) override;  Assign given value to linear transformation: sets input variable to (value-offset)/slope If slope is zerom an error message is printed and no assignment is made. ;  ; virtual void setVal (double value)=0;  Set the current value of the object. Needs to be overridden by implementations. ;  ; virtual void setVal (double value, const char *);  Set the current value of the object. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream. ;  ;  Public Member Functions inherited from RooAbsRealLValue;  RooAbsRealLValue ();  ;  RooAbsRealLValue (const char *name, const char *title, const char *unit="""");  Constructor. ;  ;  RooAbsRealLValue (const RooAbsRealLValue &other, const char *name=nullptr);  Copy constructor. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel) const;  Create an empty 1D-histogram with appropriate scale and labels for this",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLinearVar.html:2987,error,error,2987,doc/master/classRooLinearVar.html,https://root.cern,https://root.cern/doc/master/classRooLinearVar.html,1,['error'],['error']
Availability,"e, column, fColRegister);; 676 // For now disable this functionality in case of an empty data source and; 677 // the column name was not defined previously.; 678 if (ROOT::Internal::RDF::GetDataSourceLabel(*this) == ""EmptyDS""); 679 RDFInternal::CheckForDefinition(where, column, fColRegister, fLoopManager->GetBranchNames(),; 680 fDataSource ? fDataSource->GetColumnNames() : ColumnNames_t{});; 681 const auto validColumnNames = ColumnNames_t{column.data()};; 682 CheckAndFillDSColumns(validColumnNames, TTraits::TypeList<T>{});; 683 ; 684 // Declare return type to the interpreter, for future use by jitted actions; 685 auto retTypeName = RDFInternal::TypeID2TypeName(typeid(T));; 686 if (retTypeName.empty()) {; 687 // The type is not known to the interpreter.; 688 // We must not error out here, but if/when this column is used in jitted code; 689 const auto demangledType = RDFInternal::DemangleTypeIdName(typeid(T));; 690 retTypeName = ""CLING_UNKNOWN_TYPE_"" + demangledType;; 691 }; 692 ; 693 auto newColumn = std::make_shared<ROOT::Internal::RDF::RDefaultValueFor<T>>(; 694 column, retTypeName, defaultValue, validColumnNames, fColRegister, *fLoopManager);; 695 ; 696 RDFInternal::RColumnRegister newCols(fColRegister);; 697 newCols.AddDefine(std::move(newColumn));; 698 ; 699 RInterface<Proxied> newInterface(fProxiedPtr, *fLoopManager, std::move(newCols));; 700 ; 701 return newInterface;; 702 }; 703 ; 704 // clang-format off; 705 ////////////////////////////////////////////////////////////////////////////; 706 /// \brief Define a new column that is updated when the input sample changes.; 707 /// \param[in] name The name of the defined column.; 708 /// \param[in] expression A C++ callable that computes the new value of the defined column.; 709 /// \return the first node of the computation graph for which the new quantity is defined.; 710 ///; 711 /// The signature of the callable passed as second argument should be `T(unsigned int slot, const ROOT::RDF::RSampleInfo &id)`; 712 /// w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:36245,error,error,36245,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['error'],['error']
Availability,"e, compRes, &result);; 2603 }; 2604 fCurExecutingMacros.pop_back();; 2605 }; 2606 } // .L / .X / .x; 2607 else {; 2608 if (0!=strncmp(sLine.Data(), "".autodict "",10) && sLine != "".autodict"") {; 2609 // explicitly ignore .autodict without having to support it; 2610 // in cling.; 2611 ; 2612 // Turn off autoparsing if this is an include directive; 2613 bool isInclusionDirective = sLine.Contains(""\n#include"") || sLine.BeginsWith(""#include"");; 2614 if (isInclusionDirective) {; 2615 SuspendAutoParsing autoParseRaii(this);; 2616 indent = HandleInterpreterException(GetMetaProcessorImpl(), sLine, compRes, &result);; 2617 } else {; 2618 indent = HandleInterpreterException(GetMetaProcessorImpl(), sLine, compRes, &result);; 2619 }; 2620 }; 2621 }; 2622 if (result.isValid()); 2623 RegisterTemporary(result);; 2624 if (indent) {; 2625 if (error); 2626 *error = kProcessing;; 2627 return 0;; 2628 }; 2629 if (error) {; 2630 switch (compRes) {; 2631 case cling::Interpreter::kSuccess: *error = kNoError; break;; 2632 case cling::Interpreter::kFailure: *error = kRecoverable; break;; 2633 case cling::Interpreter::kMoreInputExpected: *error = kProcessing; break;; 2634 }; 2635 }; 2636 if (compRes == cling::Interpreter::kSuccess; 2637 && result.isValid(); 2638 && !result.isVoid()); 2639 {; 2640 return result.castAs<Longptr_t>();; 2641 }; 2642 return 0;; 2643}; 2644 ; 2645////////////////////////////////////////////////////////////////////////////////; 2646/// No-op; see TRint instead.; 2647 ; 2648void TCling::PrintIntro(); 2649{; 2650}; 2651 ; 2652////////////////////////////////////////////////////////////////////////////////; 2653/// \brief Add a directory to the list of directories in which the; 2654/// interpreter looks for include files.; 2655/// \param[in] path The path to the directory.; 2656/// \note Only one path item can be specified at a time, i.e. ""path1:path2"" is; 2657/// \b NOT supported.; 2658/// \warning Only the path to the directory should be specified, without; 2659/// prep",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:101539,error,error,101539,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,6,['error'],['error']
Availability,"e, const char* cmd = """", Int_t tab = 1, Int_t sub = -1); virtual~TBrowserPlugin(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBrowserPlugin.html:1464,error,error,1464,root/html526/TBrowserPlugin.html,https://root.cern,https://root.cern/root/html526/TBrowserPlugin.html,7,['error'],['error']
Availability,"e, const char* material, Float_t dx1, Float_t dx2, Float_t dy1, Float_t dy2, Float_t dz); virtual~TTRD2(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTBRIK::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const TBuffer3D&TBRIK::GetBuffer3D(Int_t reqSections) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Float_tTBRIK::GetDx() const; Float_tGetDx2() const; Float_tTBRIK::GetDy() const; Float_tGetDy2() const; Float_tTBRIK::GetDz() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineCo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTRD2.html:1830,Error,Error,1830,root/html532/TTRD2.html,https://root.cern,https://root.cern/root/html532/TTRD2.html,2,['Error'],['Error']
Availability,"e, const char* opt = ""std:"", const char* type = ""mbs"", Bool_t verbose = kFALSE, Int_t dofit = 0, Int_t n0 = -1, Int_t n1 = -1); Draw the CPU speedup plot.; opt = 'typewhat', e.g. 'std:max:'; type = 'std:' draw standard plot; 'stdx:' draw standard plot, 1 worker per node; 'norm:' draw normalized plot; 'normx:' draw normalized plot, 1 worker per node; what = 'max:' draw max rate; 'avg:' draw average rate; 'all:' draw max and average rate on same plot (default); type = 'mbs' MB/s scaling plots (default); 'evts' Event/s scaling plots; dofit = 0 no fit; 1 fit with default 3 parameter saturated I/O formula; 2 fit with 4 parameter saturated I/O formula (varying Rcpu); n0 = for dofit == 2, number of real cores; n1 = for dofit == 2, number of total cores (real + hyperthreaded). void DrawEfficiency(const char* outfile, const char* opt = """", Bool_t verbose = kFALSE); Draw the efficiency plot.; opt = 'cpu' or 'data' (default the first found). Int_t ReleaseCache(const char* dset); Release memory cache for dataset 'dset'; Return 0 on success, -1 on error. Int_t RemoveDataSet(const char* dset); Physically remove the dataset 'dset', i.e. remove the dataset and the files; it describes; Return 0 on success, -1 on error. Int_t MakeDataSet(const char* dset = 0, Long64_t nevt = -1, const char* fnroot = ""event"", Bool_t regenerate = kFALSE); Create the largest dataset for the run.; Defaults for; dataset name, filename root; are; ""BenchDataSet"", ""event""; respectively.; These can be changed via dset and fnroot, respectively.; The string 'fnroot' defines the location of the files, interpreted as an URL.; Examples:; fnroot files; 'event' <datadir>/event_<ord>_<#>.root; '/mss/event' /mss/event_<ord>_<#>.root; 'root://srv//mss/event?remote=1'; root://srv//mss/event_<ord>_<#>?remote=1.root; Default selector is TSelEventGen. Use SetDataGenSel and SetDataGenPar to change it; and to pass the list of PARs defining the alternative selector.; The argument 'nevt' controls the number of events per file (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofBench.html:12760,error,error,12760,root/html534/TProofBench.html,https://root.cern,https://root.cern/root/html534/TProofBench.html,6,['error'],['error']
Availability,"e, const char* serverValueString = 0); Interface to insert remote error logging messages received by RooRealMPFE into current error loggin stream. void logEvalError(const char* message, const char* serverValueString = 0) const; Log evaluation error message. Evaluation errors may be routed through a different; protocol than generic RooFit warning message (which go straight through RooMsgService); because evaluation errors can occur in very large numbers in the use of likelihood; evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); messages reported through this function are not printed but all stored in a list,; along with server values at the time of reporting. Error messages logged in this; way can be printed in a structured way, eliminating duplicates and with the ability; to truncate the list by printEvalErrors. This is the standard mode of error logging; during MINUIT operations. If enableEvalErrorLogging() is false, all errors; reported through this method are passed for immediate printing through RooMsgService.; A string with server names and values is constructed automatically for error logging; purposes, unless a custom string with similar information is passed as argument. void clearEvalErrorLog(); Clear the stack of evaluation error messages. void printEvalErrors(ostream& os = std::cout, Int_t maxPerNode = 10000000); Print all outstanding logged evaluation error on the given ostream. If maxPerNode; is zero, only the number of errors for each source (object with unique name) is listed.; If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown; per source of errors. A truncation message is shown if there were more errors logged; than shown. Int_t numEvalErrors(); Return the number of logged evaluation errors since the last clearing. void fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); Fix the interpretation of the coefficient of any RooAddPdf component",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:62286,error,errors,62286,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,10,['error'],['errors']
Availability,"e, const char* signal, void* receiver = 0, const char* slot = 0); virtual voidTQObject::Disconnected(const char*); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTGFrame::DrawBorder(); virtual voidTGFrame::DrawClass() const; virtual TObject*TGFrame::DrawClone(Option_t* = """") const; virtual voidTGFrame::DrawCopy(Handle_t, Int_t, Int_t); virtual voidTGFrame::Dump() const; voidTQObject::Emit(const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFormat(const char* format = ""%.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGProgressBar.html:4301,error,error,4301,root/html602/TGProgressBar.html,https://root.cern,https://root.cern/root/html602/TGProgressBar.html,10,"['Error', 'error']","['Error', 'error']"
Availability,"e, const char* slot_name = 0); virtual voidls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; static voidNeedGraphicsLibs(); Bool_tNoLogoOpt() const; Bool_tNoLogOpt() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; virtual voidOpen(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Long_tProcessFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); virtual Long_tProcessLine(const char* line, Bool_t sync = kFALSE, Int_t* error = 0); Bool_tQuitOpt() const; virtual voidRaise(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRemoveIdleTimer(); voidTObject::ResetBit(UInt_t f); Bool_tReturnFromRun() const; virtual voidReturnPressed(char* text)SIGNAL ; virtual voidRun(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEchoMode(Bool_t mode); virtual voidSetIdleTimer(UInt_t idleTimeInSec, const char* command); static voidTObject::SetObjectStat(Bool_t stat); voidSetReturnFromRun(Bool_t ret)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TApplication.html:7487,error,error,7487,root/html526/TApplication.html,https://root.cern,https://root.cern/root/html526/TApplication.html,2,['error'],['error']
Availability,"e, const char* title, RooAbsPdf& _pdf, const RooArgSet& cacheObs); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Bool_tRooAbsCachedPdf::selfNormalized() const; TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); voidRooAbsPdf::setGeneratorConfig(); voidRooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); static voidRooAbsReal::setHideOffset(Bool_t flag); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidRooAbsCachedPdf::setInterpolationOrder(Int_t order); voidRooAbsArg::setLocalNoDirtyInhibit(Bool_t flag) const; virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); voidRooAbsPdf::setNormRange(const char* rangeName); voidRooAbsPdf::setNormRangeOverride(const char* rangeName); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCachedPdf.html:29217,Error,ErrorLoggingMode,29217,root/html602/RooCachedPdf.html,https://root.cern,https://root.cern/root/html602/RooCachedPdf.html,2,['Error'],['ErrorLoggingMode']
Availability,"e, const char* title, double(*)(unsigned int,double,unsigned int) _func, RooAbsReal& _x, RooAbsReal& _y, RooAbsReal& _z); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); static voidRooAbsReal::setHideOffset(Bool_t flag); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidRooAbsArg::setLocalNoDirtyInhibit(Bool_t flag) const; virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction3Binding_double_unsigned_int_double_unsigned_int_.html:24974,Error,ErrorLoggingMode,24974,root/html602/RooCFunction3Binding_double_unsigned_int_double_unsigned_int_.html,https://root.cern,https://root.cern/root/html602/RooCFunction3Binding_double_unsigned_int_double_unsigned_int_.html,2,['Error'],['ErrorLoggingMode']
Availability,"e, const char* title, double(*)(unsigned int,unsigned int,double) _func, RooAbsReal& _x, RooAbsReal& _y, RooAbsReal& _z); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); static voidRooAbsReal::setHideOffset(Bool_t flag); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidRooAbsArg::setLocalNoDirtyInhibit(Bool_t flag) const; virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction3Binding_double_unsigned_int_unsigned_int_double_.html:24974,Error,ErrorLoggingMode,24974,root/html602/RooCFunction3Binding_double_unsigned_int_unsigned_int_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction3Binding_double_unsigned_int_unsigned_int_double_.html,2,['Error'],['ErrorLoggingMode']
Availability,"e, const char* typeName = 0, Int_t arrsize1 = -1, Int_t arrsize2 = -1); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; static TStringConvertToJSON(const TObject* obj, Int_t compact = 0); static TStringConvertToJSON(const void* obj, const TClass* cl, Int_t compact = 0); static TStringConvertToJSON(const void* obj, TDataMember* member, Int_t compact = 0); virtual voidTObject::Copy(TObject& object) const; virtual voidDecrementLevel(TVirtualStreamerInfo*); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTBuffer::DetachBuffer(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); voidTBuffer::Expand(Int_t newsize, Bool_t copy = kTRUE); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidForceWriteInfo(TVirtualStreamerInfo*, Bool_t); virtual voidForceWriteInfoClones(TClonesArray*); virtual Int_tGetBufferDisplacement() const; Int_tTBuffer::GetBufferVersion() const; static TClass*TBuffer::GetClass(const type_info& typeinfo); static TClass*TBuffer::GetClass(const char* className); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); static const char*GetFloatFormat(); virtual const char*TObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBufferJSON.html:3042,Error,Error,3042,root/html602/TBufferJSON.html,https://root.cern,https://root.cern/root/html602/TBufferJSON.html,2,['Error'],['Error']
Availability,"e, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 142 of file Integrator.h. ◆ IntegratorOneDim() [3/4]. template<class Function > . ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; Function & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Template Constructor of one dimensional Integrator passing a generic function object. ; Parameters. fintegration function (any C++ callable object implementing operator()(double x) ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 165 of file Integrator.h. ◆ ~IntegratorOneDim(). virtual ROOT::Math::IntegratorOneDim::~IntegratorOneDim ; (; ). inlinevirtual . destructor (will delete contained pointers) ; Definition at line 173 of file Integrator.h. ◆ IntegratorOneDim() [4/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IntegratorOneDim & ; ). inlineprivate . Definition at line 181 of file Integrator.h. Member Function Documentation. ◆ CreateIntegrator(). VirtualIntegratorOneDim * ROOT::Math::IntegratorOneDim::CreateIntegrator ; (; IntegrationOneDim::Type ; type, . double ; absTol, . double ; relTol, . unsigned int ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:10207,toler,tolerance,10207,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,1,['toler'],['tolerance']
Availability,"e, see [api:hesse]) (normally) produce an error matrix. This matrix is twice the inverse of the matrix of second derivatives of the \(\mbox{FCN}\), transformed if necessary into external coordinate space2, and multiplied by FCNBase::up(). Therefore, errors based on the M error matrix take account of all the parameter correlations, but not the non-linearities. That is, from the error matrix alone, two-standard-deviation errors are always exactly twice as big as one-standard-deviation errors.; When the error matrix has been calculated (for example by the successful execution of \(\mbox{MIGRAD}\) (MnMigrad::operator(), see [api:migradop]) or HESSE (MnHesse::operator())) then the parameter errors printed by M are the square roots of the diagonal elements of this matrix. The covariance or the correlations can be printed and shown via std::cout as the ostream operator operator\(<<\) is overloaded. The eigenvalues of the error matrix can be calculated using MnEigen, which should all be positive if the matrix is positive-definite (see below on \(\mbox{MIGRAD}\) and positive-definiteness).; The effect of correlations on the individual parameter errors can be seen as follows. When parameter \(\mbox{n}\) is fixed (e.g. via the method MnMigrad::fix(n)), M inverts the error matrix, removes the row and column corresponding to parameter \(\mbox{n}\), and re-inverts the result. The effect on the errors of the other parameters will in general be to make them smaller, since the component due to the uncertainty in parameter \(\mbox{n}\) has now been removed. (In the limit that a given parameter is uncorrelated with parameter \(\mbox{n}\), its error will not change when parameter \(\mbox{n}\) is fixed.) However the procedure is not reversible, since M forgets the original error matrix, so if parameter \(\mbox{n}\) is then released (e.g. via the method MnMigrad::release(n)), the error matrix is considered as unknown and has to be recalculated with appropriate commands.; 2.5.3 \(\mbox{MIN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:21822,error,error,21822,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,4,['error'],['error']
Availability,"e,""struct "",7)==0) name += 7;; 2981 ; 2982 if (!gROOT->GetListOfClasses()) return nullptr;; 2983 ; 2984 // FindObject will take the read lock before actually getting the; 2985 // TClass pointer so we will need not get a partially initialized; 2986 // object.; 2987 TClass *cl = (TClass*)gROOT->GetListOfClasses()->FindObject(name);; 2988 ; 2989 // Early return to release the lock without having to execute the; 2990 // long-ish normalization.; 2991 if (cl && (cl->IsLoaded() || cl->TestBit(kUnloading))) return cl;; 2992 ; 2993 R__WRITE_LOCKGUARD(ROOT::gCoreMutex);; 2994 ; 2995 // Now that we got the write lock, another thread may have constructed the; 2996 // TClass while we were waiting, so we need to do the checks again.; 2997 ; 2998 cl = (TClass*)gROOT->GetListOfClasses()->FindObject(name);; 2999 if (cl) {; 3000 if (cl->IsLoaded() || cl->TestBit(kUnloading)) return cl;; 3001 ; 3002 // We could speed-up some of the search by adding (the equivalent of); 3003 //; 3004 // if (cl->GetState() == kInterpreter) return cl; 3005 //; 3006 // In this case, if a ROOT dictionary was available when the TClass; 3007 // was first requested it would have been used and if a ROOT dictionary is; 3008 // loaded later on TClassTable::Add will take care of updating the TClass.; 3009 // So as far as ROOT dictionary are concerned, if the current TClass is; 3010 // in interpreted state, we are sure there is nothing to load.; 3011 //; 3012 // However (see TROOT::LoadClass), the TClass can also be loaded/provided; 3013 // by a user provided TClassGenerator. We have no way of knowing whether; 3014 // those do (or even can) behave the same way as the ROOT dictionary and; 3015 // have the 'dictionary is now available for use' step informs the existing; 3016 // TClass that their dictionary is now available.; 3017 ; 3018 //we may pass here in case of a dummy class created by TVirtualStreamerInfo; 3019 load = kTRUE;; 3020 }; 3021 ; 3022 if (TClassEdit::IsArtificial(name)) {; 3023 // If there is a @ sy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:112870,avail,available,112870,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['avail'],['available']
Availability,"e,""struct "",7)==0) name += 7;; 3048 ; 3049 if (!gROOT->GetListOfClasses()) return nullptr;; 3050 ; 3051 // FindObject will take the read lock before actually getting the; 3052 // TClass pointer so we will need not get a partially initialized; 3053 // object.; 3054 TClass *cl = (TClass*)gROOT->GetListOfClasses()->FindObject(name);; 3055 ; 3056 // Early return to release the lock without having to execute the; 3057 // long-ish normalization.; 3058 if (cl && (cl->IsLoaded() || cl->TestBit(kUnloading))) return cl;; 3059 ; 3060 R__WRITE_LOCKGUARD(ROOT::gCoreMutex);; 3061 ; 3062 // Now that we got the write lock, another thread may have constructed the; 3063 // TClass while we were waiting, so we need to do the checks again.; 3064 ; 3065 cl = (TClass*)gROOT->GetListOfClasses()->FindObject(name);; 3066 if (cl) {; 3067 if (cl->IsLoaded() || cl->TestBit(kUnloading)) return cl;; 3068 ; 3069 // We could speed-up some of the search by adding (the equivalent of); 3070 //; 3071 // if (cl->GetState() == kInterpreter) return cl; 3072 //; 3073 // In this case, if a ROOT dictionary was available when the TClass; 3074 // was first requested it would have been used and if a ROOT dictionary is; 3075 // loaded later on TClassTable::Add will take care of updating the TClass.; 3076 // So as far as ROOT dictionary are concerned, if the current TClass is; 3077 // in interpreted state, we are sure there is nothing to load.; 3078 //; 3079 // However (see TROOT::LoadClass), the TClass can also be loaded/provided; 3080 // by a user provided TClassGenerator. We have no way of knowing whether; 3081 // those do (or even can) behave the same way as the ROOT dictionary and; 3082 // have the 'dictionary is now available for use' step informs the existing; 3083 // TClass that their dictionary is now available.; 3084 ; 3085 //we may pass here in case of a dummy class created by TVirtualStreamerInfo; 3086 load = kTRUE;; 3087 }; 3088 ; 3089 if (TClassEdit::IsArtificial(name)) {; 3090 // If there is a @ sy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:115621,avail,available,115621,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['avail'],['available']
Availability,"e,double,double) _func, RooAbsReal& _x, RooAbsReal& _y, RooAbsReal& _z); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Bool_tRooAbsPdf::selfNormalized() const; TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); voidRooAbsPdf::setGeneratorConfig(); voidRooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); static voidRooAbsReal::setHideOffset(Bool_t flag); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidRooAbsArg::setLocalNoDirtyInhibit(Bool_t flag) const; virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); voidRooAbsPdf::setNormRange(const char* rangeName); voidRooAbsPdf::setNormRangeOverride(const char* rangeName); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction3PdfBinding_double_double_double_double_.html:29636,Error,ErrorLoggingMode,29636,root/html602/RooCFunction3PdfBinding_double_double_double_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction3PdfBinding_double_double_double_double_.html,2,['Error'],['ErrorLoggingMode']
Availability,"e->GetName());; 700 // old_vol->InspectShape();; 701 // make a copy of the node; 702 new_node = node->MakeCopyNode();; 703 if (!new_node) {; 704 Fatal(""CheckShapes"", ""Cannot make copy node for %s"", node->GetName());; 705 return;; 706 }; 707 TGeoShape *new_shape = shape->GetMakeRuntimeShape(fShape, node->GetMatrix());; 708 if (!new_shape) {; 709 Error(""CheckShapes"", ""cannot resolve runtime shape for volume %s/%s\n"", GetName(), old_vol->GetName());; 710 continue;; 711 }; 712 TGeoVolume *new_volume = old_vol->MakeCopyVolume(new_shape);; 713 // printf("" new volume %s shape params :\n"", new_volume->GetName());; 714 // new_volume->InspectShape();; 715 new_node->SetVolume(new_volume);; 716 // decouple the old node and put the new one instead; 717 fNodes->AddAt(new_node, i);; 718 // new_volume->CheckShapes();; 719 }; 720 }; 721}; 722 ; 723////////////////////////////////////////////////////////////////////////////////; 724/// Count total number of subnodes starting from this volume, nlevels down; 725/// - option = 0 (default) - count only once per volume; 726/// - option = 1 - count every time; 727/// - option = 2 - count volumes on visible branches; 728/// - option = 3 - return maximum level counted already with option = 0; 729 ; 730Int_t TGeoVolume::CountNodes(Int_t nlevels, Int_t option); 731{; 732 static Int_t maxlevel = 0;; 733 static Int_t nlev = 0;; 734 ; 735 if (option < 0 || option > 3); 736 option = 0;; 737 Int_t visopt = 0;; 738 Int_t nd = GetNdaughters();; 739 Bool_t last = (!nlevels || !nd) ? kTRUE : kFALSE;; 740 switch (option) {; 741 case 0:; 742 if (fNtotal); 743 return fNtotal;; 744 case 1: fNtotal = 1; break;; 745 case 2:; 746 visopt = fGeoManager->GetVisOption();; 747 if (!IsVisDaughters()); 748 last = kTRUE;; 749 switch (visopt) {; 750 case TVirtualGeoPainter::kGeoVisDefault: fNtotal = (IsVisible()) ? 1 : 0; break;; 751 case TVirtualGeoPainter::kGeoVisLeaves: fNtotal = (IsVisible() && last) ? 1 : 0;; 752 }; 753 if (!IsVisibleDaughters()); 754 return fNtot",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8cxx_source.html:30756,down,down,30756,doc/master/TGeoVolume_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8cxx_source.html,1,['down'],['down']
Availability,"e->SetOptFit(1011);; 675 ; 676print fit probability, parameter names/values and errors.; 677 ; 6781. When `v = 1` is specified, only the non-fixed parameters are shown.; 6792. When `v = 2` all parameters are shown.; 680 ; 681Note: `gStyle->SetOptFit(1)` means ""default value"", so it is equivalent; 682to `gStyle->SetOptFit(111)`; 683 ; 684 ; 685\anchor HP09; 686### The error bars options; 687 ; 688 ; 689| Option | Description |; 690|----------|-------------------------------------------------------------------|; 691| ""E"" | Default. Shows only the error bars, not a marker.|; 692| ""E1"" | Small lines are drawn at the end of the error bars.|; 693| ""E2"" | Error rectangles are drawn.|; 694| ""E3"" | A filled area is drawn through the end points of the vertical error bars.|; 695| ""E4"" | A smoothed filled area is drawn through the end points of the vertical error bars.|; 696| ""E0"" | Draw error bars. Markers are drawn for bins with 0 contents. Combined with E1 or E2 it avoids error bars clipping|; 697| ""E5"" | Like E3 but ignore the bins with 0 contents.|; 698| ""E6"" | Like E4 but ignore the bins with 0 contents.|; 699| ""X0"" | When used with one of the ""E"" option, it suppress the error bar along X as `gStyle->SetErrorX(0)` would do.|; 700 ; 701Begin_Macro(source); 702{; 703 auto c1 = new TCanvas(""c1"",""c1"",600,400);; 704 auto he = new TH1F(""he"",""Distribution drawn with error bars (option E1) "",100,-3,3);; 705 for (int i=0; i<10000; i++) he->Fill(gRandom->Gaus(0,1));; 706 gStyle->SetEndErrorSize(3);; 707 gStyle->SetErrorX(1.);; 708 he->SetMarkerStyle(20);; 709 he->Draw(""E1"");; 710}; 711End_Macro; 712 ; 713The options ""E3"" and ""E4"" draw an error band through the end points of the; 714vertical error bars. With ""E4"" the error band is smoothed. Because of the; 715smoothing algorithm used some artefacts may appear at the end of the band; 716like in the following example. In such cases ""E3"" should be used instead; 717of ""E4"".; 718 ; 719Begin_Macro(source); 720{; 721 auto ce4 = new TCanvas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:30803,error,error,30803,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['error'],['error']
Availability,"e->SetOptStat(1101); displays the name of histogram, mean value and RMS.; Notes:. never call SetOptStat(000111); but SetOptStat(111), 000111 will be taken as an octal number !!; SetOptStat(1) is s shortcut allowing to set the most common case, and is taken as SetOptStat(1111) (for backward compatibility with older versions. If you want to print only the name of the histogram call SetOptStat(1000000001).; that in case of 2-D histograms, when selecting just underflow (10000) or overflow (100000), the stats box will show all combinations of underflow/overflows and not just one single number! . Definition at line 1640 of file TStyle.cxx. ◆ SetOptStat() [2/2]. void TStyle::SetOptStat ; (; Option_t * ; stat). The parameter mode can be any combination of kKsSiourRmMen. . k : kurtosis printed; K : kurtosis and kurtosis error printed; s : skewness printed; S : skewness and skewness error printed; i : integral of bins printed; I : integral of bins with option ""width"" printed; o : number of overflows printed; u : number of underflows printed; r : rms printed; R : rms and rms error printed; m : mean value printed; M : mean value mean error values printed; e : number of entries printed; n : name of histogram is printed. Example: gStyle->SetOptStat(""ne""); print only name of histogram and number of entries. gStyle->SetOptStat(""n"") print only the name of the histogram; gStyle->SetOptStat(""nemr"") is the default . Definition at line 1676 of file TStyle.cxx. ◆ SetOptTitle(). void TStyle::SetOptTitle ; (; Int_t ; tit = 1). inline . Definition at line 334 of file TStyle.h. ◆ SetOrthoCamera(). void TStyle::SetOrthoCamera ; (; Bool_t ; on = kTRUE). inline . Definition at line 427 of file TStyle.h. ◆ SetPadBorderMode(). void TStyle::SetPadBorderMode ; (; Int_t ; mode = 1). inline . Definition at line 357 of file TStyle.h. ◆ SetPadBorderSize(). void TStyle::SetPadBorderSize ; (; Width_t ; size = 1). inline . Definition at line 356 of file TStyle.h. ◆ SetPadBottomMargin(). void TStyle::SetPa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStyle.html:84268,error,error,84268,doc/master/classTStyle.html,https://root.cern,https://root.cern/doc/master/classTStyle.html,4,['error'],['error']
Availability,"e-definite even at the minimum, this may mean that the solution is not well defined, for example that there are more unknowns than there are data points, or that the parameterization of the fit contains a linear dependence. If this is the case, then Minuit (or any other program) cannot solve your problem uniquely. The error matrix will necessarily be largely meaningless, so the user must remove the under determinedness by reformulating the parameterization. Minuit cannot do this itself.; 5.9.4.3 Numerical Inaccuracies; It is possible that the apparent lack of positive-definiteness is due to excessive round off errors in numerical calculations (in the user function), or not enough precision. This is unlikely in general, but becomes more likely if the number of free parameters is very large, or if the parameters are badly scaled (not all of the same order of magnitude), and correlations are large. In any case, whether the non-positive-definiteness is real or only numerical is largely irrelevant, since in both cases the error matrix will be unreliable and the minimum suspicious.; 5.9.4.4 An Ill-posed Problem; For questions of parameter dependence, see the discussion above on positive-definiteness. Possible other mathematical problems are the following:. Excessive numerical round off - be especially careful of exponential and factorial functions which get big very quickly and lose accuracy.; Starting too far from the solution - the function may have unphysical local minima, especially at infinity in some variables. 5.10 Minuit2 Package; Minuit2 is a new object-oriented implementation, written in C++, of the popular MINUIT minimization package. Compared with the TMinuit class, which is a direct conversion from FORTRAN to C++, Minuit2 is a complete redesign and re-implementation of the package. This new version provides all the functionality present in the old FORTRAN version, with almost equivalent numerical accuracy and computational performances. Furthermore, it contai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:224676,error,error,224676,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['error'],['error']
Availability,"e. ; Definition at line 2084 of file TGNumberEntry.cxx. ◆ SetText(). virtual void TGNumberEntry::SetText ; (; const char * ; text, . Bool_t ; emit = kTRUE . ). inlinevirtual . Definition at line 192 of file TGNumberEntry.h. ◆ SetTime(). virtual void TGNumberEntry::SetTime ; (; Int_t ; hour, . Int_t ; min, . Int_t ; sec, . Bool_t ; emit = kTRUE . ). inlinevirtual . Definition at line 183 of file TGNumberEntry.h. ◆ Streamer(). void TGNumberEntry::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGCompositeFrame. ◆ StreamerNVirtual(). void TGNumberEntry::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 273 of file TGNumberEntry.h. ◆ ValueChanged(). void TGNumberEntry::ValueChanged ; (; Long_t ; val). virtual . Emit ValueChanged(Long_t) signal. ; This signal is emitted when fButtonToNum is false. The val has the following meaning: val % 100 is the step size val % 10000 / 100 != 0 indicates log step val / 10000 != 0 indicates button down ; Definition at line 2165 of file TGNumberEntry.cxx. ◆ ValueSet(). void TGNumberEntry::ValueSet ; (; Long_t ; val). virtual . Emit ValueSet(Long_t) signal. ; This signal is emitted when the number entry value is changed. The val has the following meaning: val % 100 is the step size val % 10000 / 100 != 0 indicates log step val / 10000 != 0 indicates button down ; Definition at line 2177 of file TGNumberEntry.cxx. Member Data Documentation. ◆ fButtonDown. TGButton* TGNumberEntry::fButtonDown. protected . Button for decreasing value. ; Definition at line 165 of file TGNumberEntry.h. ◆ fButtonToNum. Bool_t TGNumberEntry::fButtonToNum. protected . Send button messages to parent rather than number entry field. ; Definition at line 166 of file TGNumberEntry.h. ◆ fButtonUp. TGButton* TGNumberEntry::fButtonUp. protected . Button for increasing value. ; Definition at line 164 of file TGNumberEntry.h. ◆ fNumAttr. EAttribute TGNumberEntry::fNumAttr.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGNumberEntry.html:47225,down,down,47225,doc/master/classTGNumberEntry.html,https://root.cern,https://root.cern/doc/master/classTGNumberEntry.html,1,['down'],['down']
Availability,"e. Because TH1 derives from TNamed, the key identifier on the file is the histogram name: TFile f(""histos.root"", ""new"");; TH1F h1(""hgaus"", ""histo from a gaussian"", 100, -3, 3);; h1.FillRandom(""gaus"", 10000);; h1->Write();; f#define f(i)Definition RSha256.hxx:104; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; To read this histogram in another Root session, do: TFile f(""histos.root"");; TH1F *h = (TH1F*)f.Get(""hgaus"");; One can save all histograms in memory to the file by: file->Write();. Miscellaneous operations; TH1::KolmogorovTest(): statistical test of compatibility in shape; between two histograms; TH1::Smooth() smooths the bin contents of a 1-d histogram; TH1::Integral() returns the integral of bin contents in a given bin range; TH1::GetMean(int axis) returns the mean value along axis; TH1::GetStdDev(int axis) returns the sigma distribution along axis; TH1::GetEntries() returns the number of entries; TH1::Reset() resets the bin contents and errors of a histogram; d#define d(i)Definition RSha256.hxx:102; a#define a(i)Definition RSha256.hxx:99; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::Smoothvirtual void Smooth(Int_t ntimes=1, Option_t *option="""")Smooth bin contents of this histogram.Definition TH1.cxx:6879; TH1::GetStdDevvirtual Double_t GetStdDev(Int_t axis=1) constReturns the Standard Deviation (Sigma).Definition TH1.cxx:7607; TH1::GetMeanvirtual Double_t GetMean(Int_t axis=1) constFor axis = 1,2 or 3 returns the mean value of the histogram along X,Y or Z axis.Definition TH",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:20767,error,errors,20767,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['error'],['errors']
Availability,"e. Branch was not added to the cache"");; 1074 return -1;; 1075 }; 1076 ; 1077 TFile *f = GetCurrentFile();; 1078 if (!f) {; 1079 Error(""AddBranchToCache"", ""No file is available. Branch was not added to the cache"");; 1080 return -1;; 1081 }; 1082 TTreeCache *tc = GetReadCache(f,true);; 1083 if (!tc) {; 1084 Error(""AddBranchToCache"", ""No cache is available, branch not added"");; 1085 return -1;; 1086 }; 1087 return tc->AddBranch(bname,subbranches);; 1088}; 1089 ; 1090////////////////////////////////////////////////////////////////////////////////; 1091/// Add branch b to the Tree cache.; 1092/// if subbranches is true all the branches of the subbranches are; 1093/// also put to the cache.; 1094///; 1095/// Returns:; 1096/// - 0 branch added or already included; 1097/// - -1 on error; 1098 ; 1099Int_t TTree::AddBranchToCache(TBranch *b, bool subbranches); 1100{; 1101 if (!GetTree()) {; 1102 if (LoadTree(0)<0) {; 1103 Error(""AddBranchToCache"",""Could not load a tree"");; 1104 return -1;; 1105 }; 1106 }; 1107 if (GetTree()) {; 1108 if (GetTree() != this) {; 1109 Int_t res = GetTree()->AddBranchToCache(b, subbranches);; 1110 if (res<0) {; 1111 Error(""AddBranchToCache"", ""Error adding branch"");; 1112 }; 1113 return res;; 1114 }; 1115 } else {; 1116 Error(""AddBranchToCache"", ""No tree is available. Branch was not added to the cache"");; 1117 return -1;; 1118 }; 1119 ; 1120 TFile *f = GetCurrentFile();; 1121 if (!f) {; 1122 Error(""AddBranchToCache"", ""No file is available. Branch was not added to the cache"");; 1123 return -1;; 1124 }; 1125 TTreeCache *tc = GetReadCache(f,true);; 1126 if (!tc) {; 1127 Error(""AddBranchToCache"", ""No cache is available, branch not added"");; 1128 return -1;; 1129 }; 1130 return tc->AddBranch(b,subbranches);; 1131}; 1132 ; 1133////////////////////////////////////////////////////////////////////////////////; 1134/// Remove the branch with name 'bname' from the Tree cache.; 1135/// If bname=""*"" all branches are removed from the cache.; 1136/// if subbranch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:39246,error,error,39246,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,2,"['avail', 'error']","['available', 'error']"
Availability,"e. For example, if there is only one free parameter, \(\mbox{SCAN}\) allows the user to verify approximately the function curvature. Similarly, if there are only two free parameters, use \(\mbox{CONTOURS}\). To verify a full error matrix, compare the results of \(\mbox{MIGRAD}\) with those (calculated afterward) by \(\mbox{HESSE}\), which uses a different method. And of course the most reliable and most expensive technique, which must be used if asymmetric errors are required, is \(\mbox{MINOS}\).; 6.6 Convergence in \(\mbox{MIGRAD}\), and positive–definiteness; \(\mbox{MIGRAD}\) uses its current estimate of the covariance matrix of the function to determine the current search direction, since this is the optimal strategy for quadratic functions and “physical” functions should be quadratic in the neighbourhood of the minimum at least. The search directions determined by \(\mbox{MIGRAD}\) are guaranteed to be downhill only if the covariance matrix is positive–definite, so in case this is not true, it makes a positive–definite approximation by adding an appropriate constant along the diagonal as determined by the eigenvalues of the matrix. Theoretically, the covariance matrix for a “physical” function must be positive–definite at the minimum, although it may not be so for all points far away from the minimum, even for a well–determined physical problem. Therefore, if \(\mbox{MIGRAD}\) reports that it has found a non-positive–definite covariance matrix, this may be a sign of one or more of the following:. A non–physical region. On its way to the minimum, \(\mbox{MIGRAD}\) may have traversed a region which has unphysical behaviour, which is of course not a serious problem as long as it recovers and leaves such a region.; An underdetermined problem. If the matrix is not positive–definite even at the minimum, this may mean that the solution is not well–defined, for example that there are more unknowns than there are data points, or that the parametrization of the fit conta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:76429,down,downhill,76429,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,4,['down'],['downhill']
Availability,"e. From: Martin Kestel (mka@mppmu.mpg.de); Date: Fri Jul 19 2002 - 13:18:48 MEST. Next message: Ed Oltman: ""[ROOT] Performance question: Updating a colz histogram""; Previous message: Arkadiusz Bubak: ""[ROOT] TThread and TMapFile together""; In reply to: Rene Brun: ""Re: [ROOT] error calc. in TProfile"". Messages sorted by:; [ date ]; [ thread ]; [ subject ]; [ author ]. Hi Rene,. RB>I agree with your theory. In the practical case of TProfile; RB>with low statistics in one bin and very small weights, do you have a; RB>better algorithm to propose? I mean an algorithm really working,; RB>and for example, not subject to rounding problems?; RB>Let me know. I will be happy to include it. I thought a little bit about this problem and arrived at the following; conclusion / suggestion:. Is it possible to use a user-supplied error calculation function? In addition; of course to the other options (error-of-the-mean and spread option). It is always the user's own responsibility to calculate their errors; correctly, as well as judging the outcome of a fit they make. What should be; the job of ROOT (IMHO), is to provide the tools to fit data points; even if; the fit is bad and the chi^2 is large, this is telling something. A user cannot expect ROOT to take care for any ill-posed fit, it is necessary; to give a bad result in that case. There is more to fitting distributions than; just to run a program: when fits do not work well, the users may be advised to; think about the model they are fitting and not to complain to ROOT developers; about their (physics or) statistics problem. just another $0.02 from me -- I am curious for other opinions. Best Regards,. Martin. Next message: Ed Oltman: ""[ROOT] Performance question: Updating a colz histogram""; Previous message: Arkadiusz Bubak: ""[ROOT] TThread and TMapFile together""; In reply to: Rene Brun: ""Re: [ROOT] error calc. in TProfile"". Messages sorted by:; [ date ]; [ thread ]; [ subject ]; [ author ]. This archive was generated by hyperma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/roottalk/roottalk02/2916.html:1078,error,errors,1078,root/roottalk/roottalk02/2916.html,https://root.cern,https://root.cern/root/roottalk/roottalk02/2916.html,2,['error'],['errors']
Availability,"e. However, you may want; : to fix this value if you already know it; : and want to reduce on training time.; : ␛[1mGDTauPrec ␛[0m: precision of estimated tau; : Increase this precision to find a more; : optimum cut-off parameter.; : ␛[1mGDNStep ␛[0m: number of steps in path search; : If the number of steps is too small, then; : the program will give a warning message.; : ; : III. WARNING MESSAGES; : ; : ␛[1mRisk(i+1)>=Risk(i) in path␛[0m; : ␛[1mChaotic behaviour of risk evolution.␛[0m; : The error rate was still decreasing at the end; : By construction the Risk should always decrease.; : However, if the training sample is too small or; : the model is overtrained, such warnings can; : occur.; : The warnings can safely be ignored if only a; : few (<3) occur. If more warnings are generated,; : the fitting fails.; : A remedy may be to increase the value; : ␛[1mGDValidEveFrac␛[0m to 1.0 (or a larger value).; : In addition, if ␛[1mGDPathEveFrac␛[0m is too high; : the same warnings may occur since the events; : used for error estimation are also used for; : path estimation.; : Another possibility is to modify the model - ; : See above on tuning the rule ensemble.; : ; : ␛[1mThe error rate was still decreasing at the end of the path␛[0m; : Too few steps in path! Increase ␛[1mGDNSteps␛[0m.; : ; : ␛[1mReached minimum early in the search␛[0m; : Minimum was found early in the fitting. This; : may indicate that the used step size ␛[1mGDStep␛[0m.; : was too large. Reduce it and rerun.; : If the results still are not OK, modify the; : model either by modifying the rule ensemble; : or add/remove linear terms; : ; : <Suppress this message by specifying ""!H"" in the booking option>; : ␛[1m================================================================␛[0m; : ; RuleFit : -------------------RULE ENSEMBLE SUMMARY------------------------; : Tree training method : AdaBoost; : Number of events per tree : 2000; : Number of trees : 20; : Number of generated rules : 196; : Idem, after cleanu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:56576,error,error,56576,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['error'],['error']
Availability,"e. IMPORTANT remark. The 2 axis x and y may have different number; of bins and different limits, BUT the largest bin width must be; a multiple of the smallest bin width and the upper limit must also; be a multiple of the bin width. void Multiply(TF1* h1, Double_t c1 = 1); Performs the operation: this = this*c1*f1. void Multiply(const TH1* h1); Multiply this profile2D by h1*-; *-* =============================. this = this*h1. void Multiply(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """"); -*-*-*Replace contents of this profile2D by multiplication of h1 by h2; *-* ================================================================. this = (c1*h1)*(c2*h2). TH2D * ProjectionXY(const char* name = ""_pxy"", Option_t* option = ""e"") const; Project this profile2D into a 2-D histogram along X,Y*-*-; *-* =====================================================. The projection is always of the type TH2D. if option ""E"" is specified the errors of the projected histogram are computed and set; to be equal to the errors of the profile.; Option ""E"" is defined as the default one in the header file.; if option """" is specified the histogram errors are simply the sqrt of its content; if option ""B"" is specified, the content of bin of the returned histogram; will be equal to the GetBinEntries(bin) of the profile,; if option ""C=E"" the bin contents of the projection are set to the; bin errors of the profile; if option ""W"" is specified the bin content of the projected histogram is set to the; product of the bin content of the profile and the entries.; With this option the returned histogram will be equivalent to the one obtained by; filling directly a TH2D using the 3-rd value as a weight.; This option makes sense only for profile filled with all weights =1.; When the profile is weighted (filled with weights different than 1) the; bin error of the projected histogram (obtained using this option ""W"") cannot be; correctly computed from the information stored in the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProfile2D.html:39915,error,errors,39915,root/html528/TProfile2D.html,https://root.cern,https://root.cern/root/html528/TProfile2D.html,8,['error'],['errors']
Availability,"e. Long64_t GetEntryNumber(Long64_t entry) const; -- Return entry number corresponding to entry. if no TEntryList set returns entry; else returns entry #entry from this entry list and; also computes the global entry number (loads all tree headers). Int_t GetEntryWithIndex(Int_t major, Int_t minor = 0); -- Return entry corresponding to major and minor number. The function returns the total number of bytes read.; If the Tree has friend trees, the corresponding entry with; the index values (major,minor) is read. Note that the master Tree; and its friend may have different entry serial numbers corresponding; to (major,minor). TFile* GetFile() const; -- Return a pointer to the current file.; If no file is connected, the first file is automatically loaded. TLeaf* GetLeaf(const char* name); -- Return a pointer to the leaf name in the current tree. TObjArray* GetListOfBranches(); -- Return a pointer to the list of branches of the current tree. Warning: May set current tree!. Returns 1 on success and 0 on failure. TObjArray* GetListOfLeaves(); -- Return a pointer to the list of leaves of the current tree. Warning: May set the current tree!. Double_t GetMaximum(const char* columname); -- Return maximum of column with name columname. Double_t GetMinimum(const char* columname); -- Return minimum of column with name columname. Int_t GetNbranches(); -- Return the number of branches of the current tree. Warning: May set the current tree!. Long64_t GetReadEntry() const; -- See TTree::GetReadEntry(). Double_t GetWeight() const; -- Return the chain weight. By default the weight is the weight of the current tree.; However, if the weight has been set in TChain::SetWeight(); with the option ""global"", then that weight will be returned. Warning: May set the current tree!. Int_t LoadBaskets(Long64_t maxmemory); -- Dummy function.; It could be implemented and load all baskets of all trees in the chain.; For the time being use TChain::Merge and TTree::LoadBasket; on the resulting tree. Long64",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TChain.html:35971,failure,failure,35971,root/html526/TChain.html,https://root.cern,https://root.cern/root/html526/TChain.html,1,['failure'],['failure']
Availability,"e. RooCompositeDataStore(const RooCompositeDataStore& other, const char* newname = 0); Convert map by label to map by index for more efficient internal use. RooCompositeDataStore(const RooCompositeDataStore& other, const RooArgSet& vars, const char* newname = 0); Update index category pointer, if it is contained in input argument vars. ~RooCompositeDataStore(); Destructor. Bool_t valid() const; Return true if currently loaded coordinate is considered valid within; the current range definitions of all observables. Int_t fill(); Forward fill request to appropriate subset. Double_t sumEntries() const; Forward fill request to appropriate subset. const RooArgSet* get(Int_t index) const; Load the n-th data point (n='idx') in memory; and return a pointer to the internal RooArgSet; holding its coordinates. Double_t weight() const. Double_t weight(Int_t index) const. Double_t weightError(RooAbsData::ErrorType etype = RooAbsData::Poisson) const. void weightError(Double_t& lo, Double_t& hi, RooAbsData::ErrorType etype = RooAbsData::Poisson) const. Bool_t isWeighted() const. void loadValues(const RooAbsDataStore* tds, const RooFormulaVar* select = 0, const char* rangeName = 0, Int_t nStart = 0, Int_t nStop = 2000000000). Bool_t changeObservableName(const char* from, const char* to); Change name of internal observable named 'from' into 'to'. RooAbsArg* addColumn(RooAbsArg& var, Bool_t adjustRange = kTRUE); WVE ownership issue here!! Caller (a RooAbsData) should take ownership of all; arguments, but only does for the first one here... RooArgSet* addColumns(const RooArgList& varList); WVE ownership issue here!! Caller (a RooAbsData) should take ownership of all; arguments, but only does for the first one here... RooAbsDataStore* merge(const RooArgSet& allvars, list<RooAbsDataStore*> dstoreList). void append(RooAbsDataStore& other). Int_t numEntries() const. void reset(). void cacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0). void setArgStatus(const Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooCompositeDataStore.html:11069,Error,ErrorType,11069,root/html532/RooCompositeDataStore.html,https://root.cern,https://root.cern/root/html532/RooCompositeDataStore.html,1,['Error'],['ErrorType']
Availability,"e. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsTestStatistic. class RooAbsTestStatistic: public RooAbsReal. RooAbsTestStatistic is the abstract base class for all test; statistics. Test statistics that evaluate the PDF at each data; point should inherit from the RooAbsOptTestStatistic class which; implements several generic optimizations that can be done for such; quantities.; This test statistic base class organizes calculation of test; statistic values for RooSimultaneous PDF as a combination of test; statistic values for the PDF components of the simultaneous PDF and; organizes multi-processor parallel calculation of test statistic; values. For the latter, the test statistic value is calculated in; partitions in parallel executing processes and a posteriori; combined in the main thread.; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsTestStatistic(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsTestStatistic.html:1159,avail,available,1159,root/html528/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html528/RooAbsTestStatistic.html,9,['avail'],['available']
Availability,"e. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsTestStatistic. class RooAbsTestStatistic: public RooAbsReal. RooAbsTestStatistic is the abstract base class for all test; statistics. Test statistics that evaluate the PDF at each data; point should inherit from the RooAbsOptTestStatistic class which; implements several generic optimizations that can be done for such; quantities.; This test statistic base class organizes calculation of test; statistic values for RooSimultaneous PDF as a combination of test; statistic values for the PDF components of the simultaneous PDF and; organizes multi-processor parallel calculation of test statistic; values. For the latter, the test statistic value is calculated in; partitions in parallel executing processes and a posteriori; combined in the main thread.; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsTestStatistic(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsTestStatistic.html:1159,avail,available,1159,root/html526/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html526/RooAbsTestStatistic.html,1,['avail'],['available']
Availability,"e. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooMsgService. class RooMsgService: public TObject. The RooMsgService class is a singleton class that organizes informational, debugging, ; warning and errors messages generated by the RooFit core code. ; ; Each message generated by the core; has a message level (DEBUG,INFO,PROGRESS,WARNING,ERROR or FATAL), an originating object,; and a 'topic'. Currently implemented topics are ""Generation"",""Plotting"",; ""Integration"", ""Minimization"" and ""Workspace"" and ""ChangeTracking"".; ; The RooMsgService class allows to filter and redirect messages into 'streams' ; according to message level, topic, (base) class of originating object, name of originating; object and based on attribute labels attached to individual objects. ; ; The current default configuration creates streams for all messages at WARNING level; or higher (e.g. ERROR and FATAL) and for all INFO message on topics Generation,Plotting,; Integration and Minimization and redirects them to stdout. Users can create additional streams ; for logging of e.g. DEBUG messages on particular topics or objects and or redirect streams to; C++ streams or files.; ; The singleton instance is accessible through RooMsgService::instance() ;; . Function Members (Methods); public:. virtual~RooMsgService(); voidTObject::AbstractMethod(const char* method) const; Int_taddStream(RooFit::MsgLevel level, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg()); static Bool_tanyDebug(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTObject::Clear(Option_t* = """"); voidclearErrorCount(); virtual TObject*TObject::Clone(const ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMsgService.html:1080,ERROR,ERROR,1080,root/html532/RooMsgService.html,https://root.cern,https://root.cern/root/html532/RooMsgService.html,4,['ERROR'],['ERROR']
Availability,"e. The; size of the cluster in this range is given by the value of fAutoFlush. For example printing the beginning and end of each the ranges can be done by:. Printf(""%-16s %-16s %-16s %5s"",; ""Cluster Range #"", ""Entry Start"", ""Last Entry"", ""Size"");; Int_t index= 0;; Long64_t clusterRangeStart = 0;; if (fNClusterRange) {; for( ; index < fNClusterRange; ++index) {; Printf(""%-16d %-16lld %-16lld %5lld"",; index, clusterRangeStart, fClusterRangeEnd[index], fClusterSize[index]);; clusterRangeStart = fClusterRangeEnd[index] + 1;; }; }; Printf(""%-16d %-16lld %-16lld %5lld"",; index, prevEntry, fEntries - 1, fAutoFlush);. void SetAutoSave(Long64_t autos = 300000000); This function may be called at the start of a program to change; the default value for fAutoSave(300000000, ie 300 MBytes).; When filling the Tree the branch buffers as well as the Tree header; will be flushed to disk when more than fAutoSave bytes have been written to the file.; In case of a program crash, it will be possible to recover the data in the Tree; up to the last AutoSave point. void SetBasketSize(const char* bname, Int_t buffsize = 16000); Set a branch's basket size. bname is the name of a branch.; if bname=""*"", apply to all branches.; if bname=""xxx*"", apply to all branches with name starting with xxx; see TRegexp for wildcarding options; buffsize = branc basket size. Int_t SetBranchAddress(const char* bname, void** add, TBranch** ptr = 0); Change branch address, dealing with clone trees properly.; See TTree::CheckBranchAddressType for the semantic of the return value. Note: See the comments in TBranchElement::SetAddress() for the; meaning of the addr parameter. Int_t SetBranchAddress(const char* bname, void* add, TClass* realClass, EDataType datatype, Bool_t isptr); Verify the validity of the type of addr before calling SetBranchAddress.; See TTree::CheckBranchAddressType for the semantic of the return value. Note: See the comments in TBranchElement::SetAddress() for the; meaning of the addr parameter.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTree.html:122041,recover,recover,122041,root/html530/TTree.html,https://root.cern,https://root.cern/root/html530/TTree.html,1,['recover'],['recover']
Availability,"e. void WriteHeader(); Write file info like configurations, title, UUID and other. void WriteStreamerInfo(); Store all TVirtualStreamerInfo, used in file, in sql database. Bool_t WriteSpecialObject(Long64_t keyid, TObject* obj, const char* name, const char* title); write special kind of object like streamer infos or file itself; keys for that objects should exist in tables but not indicated in list of keys,; therefore users can not get them with TDirectoryFile::Get() method. TObject* ReadSpecialObject(Long64_t keyid, TObject* obj = 0); Read data of special kind of objects. TList* GetStreamerInfoList(); Read back streamer infos from database; List of streamer infos is always stored with key:id 0,; which is not shown in normal keys list. void SaveToDatabase(); save data which is not yet in Database; Typically this is streamerinfos structures or. Int_t StreamKeysForDirectory(TDirectory* dir, Bool_t doupdate, Long64_t specialkeyid = -1, TKeySQL** specialkey = 0); read keys for specified directory (when update == kFALSE); or update value for modified keys when update == kTRUE; Returns number of successfully read keys or -1 if error. void InitSqlDatabase(Bool_t create); initialize sql database and correspondent structures; identical to TFile::Init() function. Bool_t ReadConfigurations(); read table configurations as special table. void CreateBasicTables(); Creates initial tables in database; This is table with configurations and table with keys; Function called once when first object is stored to the file. void IncrementModifyCounter(); Update value of modify counter in config table; Modify counter used to indicate that something was changed in database.; It will be used when multiple instances of TSQLFile for the same data base; will be connected. TString MakeSelectQuery(TClass* cl); Produce SELECT statement which can be used to get all data; of class cl in one SELECT statement; This statement also can be used to create VIEW by command like; mysql> CREATE VIEW TH1I_view ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSQLFile.html:40046,error,error,40046,root/html534/TSQLFile.html,https://root.cern,https://root.cern/root/html534/TSQLFile.html,6,['error'],['error']
Availability,"e. {; TCanvas *c43 = new TCanvas(""c43"",""c43"",200,10,600,400);; c43->DrawFrame(0., -0.5, 6., 2);. double x[5] = {1, 2, 3, 4, 5};; double zero[5] = {0, 0, 0, 0, 0};. // data set (1) with stat and sys errors; double py1[5] = {1.2, 1.15, 1.19, 0.9, 1.4};; double ey_stat1[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys1[5] = {0.5, 0.71, 0.76, 0.5, 0.45};. // data set (2) with stat and sys errors; double y2[5] = {0.25, 0.18, 0.29, 0.2, 0.21};; double ey_stat2[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys2[5] = {0.63, 0.19, 0.7, 0.2, 0.7};. // Now draw data set (1). // We first have to draw it only with the stat errors; TGraphErrors *graph1 = new TGraphErrors(5, x, py1, zero, ey_stat1);; graph1->SetMarkerStyle(20);; graph1->Draw(""P"");. // Now we have to somehow depict the sys errors. TGraphErrors *graph1_sys = new TGraphErrors(5, x, py1, zero, ey_sys1);; graph1_sys->Draw(""[]"");. // Now draw data set (2). // We first have to draw it only with the stat errors; TGraphErrors *graph2 = new TGraphErrors(5, x, y2, zero, ey_stat2);; graph2->SetMarkerStyle(24);; graph2->Draw(""P"");. // Now we have to somehow depict the sys errors. TGraphErrors *graph2_sys = new TGraphErrors(5, x, y2, zero, ey_sys2);; graph2_sys->Draw(""[]"");; return c43;; }; TGraphAsymmErrors; A TGraphAsymmErrors is like a TGraphErrors but the errors; defined along X and Y are not symmetric: The left and right errors are; different along X and the bottom and up errors are different along Y. Picture; Source. {; TCanvas *c44 = new TCanvas(""c44"",""c44"",200,10,600,400);; double ax[] = {0, 1, 2, 3, 4};; double ay[] = {0, 2, 4, 1, 3};; double aexl[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double aexh[] = {0.5, 0.4, 0.3, 0.2, 0.1};; double aeyl[] = {1, 0.5, 1, 0.5, 1};; double aeyh[] = {0.5, 1, 0.5, 1, 0.5};; TGraphAsymmErrors* gae = new TGraphAsymmErrors(5, ax, ay, aexl, aexh, aeyl, aeyh);; gae->SetFillColor(2);; gae->SetFillStyle(3001);; gae->Draw(""a2"");; gae->Draw(""p"");; return c44;; }; TGraphBentErrors; A TGraphBentErrors is l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraphPainter.html:10275,error,errors,10275,root/html534/TGraphPainter.html,https://root.cern,https://root.cern/root/html534/TGraphPainter.html,6,['error'],['errors']
Availability,"e. ~TFileCacheRead(); Destructor. void Prefetch(Long64_t pos, Int_t len); Add block of length len at position pos in the list of blocks to; be prefetched. If pos <= 0 the current blocks (if any) are reset. void SecondPrefetch(Long64_t , Int_t ). void Print(Option_t* option = """") const; Print cache statistics, like; ******TreeCache statistics for file: cms2.root ******; Reading............................: 72761843 bytes in 7 transactions; Readahead..........................: 256000 bytes with overhead = 0 bytes; Average transaction................: 10394.549000 Kbytes; Number of blocks in current cache..: 210, total size: 6280352. if option = ""a"" the list of blocks in the cache is printed; NB: this function is automatically called by TTreeCache::Print. Int_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read buffer at position pos.; If pos is in the list of prefetched blocks read from fBuffer,; otherwise need to make a normal read from file. Returns -1 in case of; read error, 0 in case not in cache, 1 in case read from cache. Int_t ReadBufferExt(char* buf, Long64_t pos, Int_t len, Int_t& loc). Int_t ReadBufferExtPrefetch(char* buf, Long64_t pos, Int_t len, Int_t& loc); prefetch the first block. Int_t ReadBufferExtNormal(char* buf, Long64_t pos, Int_t len, Int_t& loc); Base function for ReadBuffer. Also gives out the position; of the block in the internal buffer. This helps TTreeCacheUnzip to avoid; doing twice the binary search. void SetFile(TFile* file); Set the file using this cache and reset the current blocks (if any). void Sort(); Sort buffers to be prefetched in increasing order of positions.; Merge consecutive blocks if necessary. void SecondSort(); Sort buffers to be prefetched in increasing order of positions.; Merge consecutive blocks if necessary.; Sort buffers to be prefetched in increasing order of positions.; Merge consecutive blocks if necessary. TFilePrefetch* GetPrefetchObj(). TFileCacheRead(const TFileCacheRead& ). TFileCacheRead& operator=(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TFileCacheRead.html:9343,error,error,9343,root/html530/TFileCacheRead.html,https://root.cern,https://root.cern/root/html530/TFileCacheRead.html,3,['error'],['error']
Availability,"e...;  ; class  TGLSelectionBuffer;  ; class  TGLSelectRecord;  Standard selection record including information about containing scene and details ob out selected object (TGLPhysicalShape*, TObject* or simply a void* for foreign scenes). More...;  ; class  TGLSelectRecordBase;  Base class for select records. More...;  ; class  TGLSphere;  Implements a native ROOT-GL sphere that can be rendered at different levels of detail. More...;  ; class  TGLStopwatch;  Stopwatch object for timing GL work. More...;  ; class  TGLSurfacePainter;  Implements painting of TH2 with ""SURF"" option. More...;  ; class  TGLText;  GL Text. More...;  ; class  TGLTF3Painter;  Plot-painter for TF3 functions. More...;  ; class  TGLTH3Composition;  ; class  TGLTH3CompositionPainter;  ; class  TGLTH3Slice;  A slice of a TH3. More...;  ; class  TGLTransManip;  Translation manipulator - attaches to physical shape and draws local axes widgets with arrow heads. More...;  ; class  TGLUtil;  Wrapper class for various misc static functions - error checking, draw helpers etc. More...;  ; class  TGLVector3;  3 component (x/y/z) vector class. More...;  ; class  TGLVertex3;  3 component (x/y/z) vertex class. More...;  ; class  TGLViewer;  Base GL viewer object - used by both standalone and embedded (in pad) GL. More...;  ; class  TGLViewerBase;  Base class for GL viewers. More...;  ; class  TGLViewerEditor;  GUI editor for TGLViewer. More...;  ; class  TGLVoxelPainter;  Paint TH3 histograms as ""voxels"" - colored boxes, transparent if transfer function was specified. More...;  ; class  TGLWidget;  GL window with context. More...;  ; class  TH2GL;  Rendering of TH2 and derived classes. More...;  ; class  TH3GL;  OpenGL renderer class for TH3. More...;  ; class  TPointSet3DGL;  Direct OpenGL renderer for TPointSet3D. More...;  ; class  TX11GLManager;  The TX11GLManager is X11 implementation of TGLManager. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:32 (GVA Time) using Doxygen 1.9",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__opengl.html:9802,error,error,9802,doc/master/group__opengl.html,https://root.cern,https://root.cern/doc/master/group__opengl.html,1,['error'],['error']
Availability,"e.; Definition at line 1081 of file RooAbsPdf.cxx. ◆ randomizeProtoOrder(). Int_t * RooAbsPdf::randomizeProtoOrder ; (; Int_t ; nProto, . Int_t ; nGen, . bool ; resample = false . ); const. protected . Return lookup table with randomized order for nProto prototype events. ; Definition at line 1485 of file RooAbsPdf.cxx. ◆ redirectServersHook(). bool RooAbsPdf::redirectServersHook ; (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll, . bool ; nameChange, . bool ; isRecursiveStep . ). overrideprotectedvirtual . The cache manager. ; Hook function intercepting redirectServer calls.; Discard current normalization object if any server is redirected ; Reimplemented from RooAbsArg.; Reimplemented in RooAddPdf, RooProdPdf, RooGenericPdf, RooResolutionModel, and RooProjectedPdf.; Definition at line 2768 of file RooAbsPdf.cxx. ◆ resetErrorCounters(). void RooAbsPdf::resetErrorCounters ; (; Int_t ; resetValue = 10). virtual . Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ; Reimplemented in RooAddModel, and RooAddPdf.; Definition at line 586 of file RooAbsPdf.cxx. ◆ selfNormalized(). virtual bool RooAbsPdf::selfNormalized ; (; ); const. inlinevirtual . Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ; Always returns false, unless a PDF overrides this function. ; Reimplemented in RooHistConstraint, RooIntegralMorph, RooMomentMorph, RooAbsCachedPdf, RooAddModel, RooAddPdf, RooBinSamplingPdf, RooExtendPdf, RooHistPdf, RooProdPdf, RooProjectedPdf, RooRealSumPdf, RooResolutionModel, RooSimultaneous, RooWrapperPdf, RooNormalizedPdf, RooFixedProdPdf, and PdfWrapper.; Definition at line 207 of file RooAbsPdf.h. ◆ setActiveNormSet(). void RooAbsPdf::setActiveNormSet ; (; RooArgSet const * ; normSet); const. inlineprivate . Setter for the _normSet member, which should never be set directly. ; Definition at line 284 of file RooAbsPdf.h. ◆ setGeneratorConfig(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:151718,error,error,151718,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,2,['error'],['error']
Availability,"e.; Definition at line 359 of file TTreeCacheUnzip.cxx. ◆ SetEntryRange(). void TTreeCacheUnzip::SetEntryRange ; (; Long64_t ; emin, . Long64_t ; emax . ). overridevirtual . Set the minimum and maximum entry number to be processed this information helps to optimize the number of baskets to read when prefetching the branch buffers. ; Reimplemented from TTreeCache.; Definition at line 375 of file TTreeCacheUnzip.cxx. ◆ SetParallelUnzip(). Int_t TTreeCacheUnzip::SetParallelUnzip ; (; TTreeCacheUnzip::EParUnzipMode ; option = TTreeCacheUnzip::kEnable). static . Static function that (de)activates multithreading unzipping. ; The possible options are:; kEnable Enable it, which causes an automatic detection and launches the additional thread if the number of cores in the machine is greater than one; kDisable Disable will not activate the additional thread.; kForce Force will start the additional thread even if there is only one core. the default will be taken as kEnable. Returns 0 if there was an error, 1 otherwise. ; Definition at line 436 of file TTreeCacheUnzip.cxx. ◆ SetUnzipBufferSize(). void TTreeCacheUnzip::SetUnzipBufferSize ; (; Long64_t ; bufferSize). Sets the size for the unzipping cache... by default it should be two times the size of the prefetching cache. ; Definition at line 839 of file TTreeCacheUnzip.cxx. ◆ SetUnzipGroupSize(). void TTreeCacheUnzip::SetUnzipGroupSize ; (; Int_t ; groupSize). inline . Definition at line 146 of file TTreeCacheUnzip.h. ◆ SetUnzipRelBufferSize(). void TTreeCacheUnzip::SetUnzipRelBufferSize ; (; Float_t ; relbufferSize). static . static function: Sets the unzip relative buffer size ; Definition at line 830 of file TTreeCacheUnzip.cxx. ◆ StopLearningPhase(). void TTreeCacheUnzip::StopLearningPhase ; (; ). overridevirtual . It's the same as TTreeCache::StopLearningPhase but we guarantee that we start the unzipping just after getting the buffers. ; Reimplemented from TTreeCache.; Definition at line 384 of file TTreeCacheUnzip.cxx. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCacheUnzip.html:36003,error,error,36003,doc/v632/classTTreeCacheUnzip.html,https://root.cern,https://root.cern/doc/v632/classTTreeCacheUnzip.html,1,['error'],['error']
Availability,"e.; Definition at line 360 of file TTreeCacheUnzip.cxx. ◆ SetEntryRange(). void TTreeCacheUnzip::SetEntryRange ; (; Long64_t ; emin, . Long64_t ; emax . ). overridevirtual . Set the minimum and maximum entry number to be processed this information helps to optimize the number of baskets to read when prefetching the branch buffers. ; Reimplemented from TTreeCache.; Definition at line 376 of file TTreeCacheUnzip.cxx. ◆ SetParallelUnzip(). Int_t TTreeCacheUnzip::SetParallelUnzip ; (; TTreeCacheUnzip::EParUnzipMode ; option = TTreeCacheUnzip::kEnable). static . Static function that (de)activates multithreading unzipping. ; The possible options are:; kEnable Enable it, which causes an automatic detection and launches the additional thread if the number of cores in the machine is greater than one; kDisable Disable will not activate the additional thread.; kForce Force will start the additional thread even if there is only one core. the default will be taken as kEnable. Returns 0 if there was an error, 1 otherwise. ; Definition at line 437 of file TTreeCacheUnzip.cxx. ◆ SetUnzipBufferSize(). void TTreeCacheUnzip::SetUnzipBufferSize ; (; Long64_t ; bufferSize). Sets the size for the unzipping cache... by default it should be two times the size of the prefetching cache. ; Definition at line 840 of file TTreeCacheUnzip.cxx. ◆ SetUnzipGroupSize(). void TTreeCacheUnzip::SetUnzipGroupSize ; (; Int_t ; groupSize). inline . Definition at line 146 of file TTreeCacheUnzip.h. ◆ SetUnzipRelBufferSize(). void TTreeCacheUnzip::SetUnzipRelBufferSize ; (; Float_t ; relbufferSize). static . static function: Sets the unzip relative buffer size ; Definition at line 831 of file TTreeCacheUnzip.cxx. ◆ StopLearningPhase(). void TTreeCacheUnzip::StopLearningPhase ; (; ). overridevirtual . It's the same as TTreeCache::StopLearningPhase but we guarantee that we start the unzipping just after getting the buffers. ; Reimplemented from TTreeCache.; Definition at line 385 of file TTreeCacheUnzip.cxx. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCacheUnzip.html:36077,error,error,36077,doc/master/classTTreeCacheUnzip.html,https://root.cern,https://root.cern/doc/master/classTTreeCacheUnzip.html,1,['error'],['error']
Availability,"e.Definition TAttFill.h:39; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; TMultiGraph::Addvirtual void Add(TGraph *graph, Option_t *chopt="""")Add a new graph to the list of graphs.Definition TMultiGraph.cxx:419; TMultiGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this multigraph with its current attributes.Definition TMultiGraph.cxx:508; . Graphs with error bars; Three classes are available to handle graphs with error bars: TGraphErrors, TGraphAsymmErrors and TGraphBentErrors. The following drawing options are specific to graphs with error bars:. Option Description . ""Z"" Do not draw small horizontal and vertical lines the end of the error bars. Without ""Z"", the default is to draw these. . "">"" An arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""|>"" A filled arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""X"" Do not draw error bars. By default, graph classes that have errors are drawn with the errors (TGraph itself has no errors, and so this option has no effect.) . ""||"" Draw only the small vertical/horizontal lines at the ends of the error bars, without drawing the bars themselves. This option is interesting to superimpose statistical-only errors on top of a graph with statistical+systematic errors. . ""[]"" Does the same as option ""||"" except that it draws additional marks at the ends of the small vertical/horizontal lines. It makes plots less ambiguous in case several graphs are drawn on the same picture. . ""0"" By default, when a data point is outside the visible range along the Y axis, the error bars are not drawn. This option forces error bars' drawing for the data points outside the visible range along the Y axis (see example below). . ""2"" Error rectangles are drawn. . ""3"" A filled area is drawn through the end points of the vertical error bars. . ""4"" A smoothed filled area is drawn through the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPainter.html:8563,error,error,8563,doc/master/classTGraphPainter.html,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html,1,['error'],['error']
Availability,"e.Print();; ; // Save all objects in this file; hfile.Write();; ; // Close the file. Note that this is automatically done when you leave; // the application upon file destruction.; hfile.Close();; ; return 0;; }; mainint main()Definition Prototype.cxx:12; Int_tint Int_tDefinition RtypesCore.h:45; UInt_tunsigned int UInt_tDefinition RtypesCore.h:46; TFile.h; TH1.h; TH2.h; TProfile.h; TRandom.h; TTree.h; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:621; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TProfileProfile Histogram.Definition TProfile.h:32; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; TMVA_SOFIE_GNN_Parser.treetreeDefinition TMVA_SOFIE_GNN_Parser.py:169. PyROOT; The TTree class has several additions for its use from Python, which are also available in its subclasses e.g. TChain and TNtuple.; First, TTree instances are iterable in Python. Therefore, assuming t is a TTree instance, we can do: for entry in t:; x = entry.branch_name; ...; At each iteration, a new entry of the tree will be read. In the code above, entry allows to access the branch values for the current entry. This can be done with the syntax entry.branch_name or, if the branch name is incompatible with Python naming rules, with e.g. ""getattr(entry, '1_branch_name')"".; Please note that iterating in Python can be slow, so only iterate over a tree as described above if performance is not an issue or when dealing with a small dataset. To read and process the entries of a tree in a much faster way, please use ROOT::RDataFrame.; Second, a couple of TTree methods have been modified to facilitate their use from Python: TTree::Branch and TTree::SetBranchAddress.; Regarding TTree::Branch, the following example shows how we can create diffe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:14864,avail,available,14864,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,1,['avail'],['available']
Availability,"e.Print();; ; // Save all objects in this file; hfile.Write();; ; // Close the file. Note that this is automatically done when you leave; // the application upon file destruction.; hfile.Close();; ; return 0;; }; mainint main()Definition Prototype.cxx:12; Int_tint Int_tDefinition RtypesCore.h:45; UInt_tunsigned int UInt_tDefinition RtypesCore.h:46; TFile.h; TH1.h; TH2.h; TProfile.h; TRandom.h; TTree.h; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TProfileProfile Histogram.Definition TProfile.h:32; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; TMVA_SOFIE_GNN_Parser.treetreeDefinition TMVA_SOFIE_GNN_Parser.py:169. PyROOT; The TTree class has several additions for its use from Python, which are also available in its subclasses e.g. TChain and TNtuple.; First, TTree instances are iterable in Python. Therefore, assuming t is a TTree instance, we can do: for entry in t:; x = entry.branch_name; ...; At each iteration, a new entry of the tree will be read. In the code above, entry allows to access the branch values for the current entry. This can be done with the syntax entry.branch_name or, if the branch name is incompatible with Python naming rules, with e.g. ""getattr(entry, '1_branch_name')"".; Please note that iterating in Python can be slow, so only iterate over a tree as described above if performance is not an issue or when dealing with a small dataset. To read and process the entries of a tree in a much faster way, please use ROOT::RDataFrame.; Second, a couple of TTree methods have been modified to facilitate their use from Python: TTree::Branch and TTree::SetBranchAddress.; Regarding TTree::Branch, the following example shows how we can create diffe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:14865,avail,available,14865,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,1,['avail'],['available']
Availability,"e.cxx. ◆ FindBNodeA(). template<typename Index , typename Value > . void TKDTree< Index, Value >::FindBNodeA ; (; Value * ; point, . Value * ; delta, . Int_t & ; inode . ). find the smallest node covering the full range - start ; Definition at line 1173 of file TKDTree.cxx. ◆ FindInRange(). template<typename Index , typename Value > . void TKDTree< Index, Value >::FindInRange ; (; Value * ; point, . Value ; range, . std::vector< Index > & ; res . ). Find all points in the sphere of a given radius ""range"" around the given point 1st argument - the point 2nd argument - radius of the shere 3rd argument - a vector, in which the results will be returned. ; Definition at line 749 of file TKDTree.cxx. ◆ FindNearestNeighbors(). template<typename Index , typename Value > . void TKDTree< Index, Value >::FindNearestNeighbors ; (; const Value * ; point, . Int_t ; k, . Index * ; ind, . Value * ; dist . ). Find kNN nearest neighbors to the point in the first argument Returns 1 on success, 0 on failure Arrays ind and dist are provided by the user and are assumed to be at least kNN elements long. ; Definition at line 543 of file TKDTree.cxx. ◆ FindNode(). template<typename Index , typename Value > . Index TKDTree< Index, Value >::FindNode ; (; const Value * ; point); const. returns the index of the terminal node to which point belongs (index in the fAxis, fValue, etc arrays) returns -1 in case of failure ; Definition at line 672 of file TKDTree.cxx. ◆ FindPoint(). template<typename Index , typename Value > . void TKDTree< Index, Value >::FindPoint ; (; Value * ; point, . Index & ; index, . Int_t & ; iter . ). find the index of point works only if we keep fData pointers ; Definition at line 703 of file TKDTree.cxx. ◆ GetBoundaries(). template<typename Index , typename Value > . Value * TKDTree< Index, Value >::GetBoundaries. Get the boundaries. ; Definition at line 1185 of file TKDTree.cxx. ◆ GetBoundariesExact(). template<typename Index , typename Value > . Value * TKDTree< Index, V",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKDTree.html:33737,failure,failure,33737,doc/master/classTKDTree.html,https://root.cern,https://root.cern/doc/master/classTKDTree.html,1,['failure'],['failure']
Availability,"e.cxx:1257; TGCompositeFrame::SetCleanupvoid SetCleanup(Int_t mode=kLocalCleanup) overrideTurn on automatic cleanup of child frames in dtor.Definition TGFrame.cxx:1072; TGFrame::Resizevoid Resize(UInt_t w=0, UInt_t h=0) overrideResize the frame.Definition TGFrame.cxx:605; TGFrame::MapWindowvoid MapWindow() overridemap windowDefinition TGFrame.h:204; TGLayoutHintsThis class describes layout hints used by the layout classes.Definition TGLayout.h:50; TGMainFrameDefines top level windows that interact with the system Window Manager.Definition TGFrame.h:397; TGMainFrame::SetWindowNamevoid SetWindowName(const char *name=nullptr) overrideSet window name. This is typically done via the window manager.Definition TGFrame.cxx:1788; TGSimpleTableInterfaceTGSimpleTableInterface is a very simple implementation of a TVirtualTableInterface.Definition TGSimpleTableInterface.h:18; TGTableCreate an array to hold a bunch of numbers.Definition TGTable.h:34; TGTable::Updatevirtual void Update()Update the range of the available data and refresh the current view.Definition TGTable.cxx:1529; double; int; unsigned int; It is also possible to visualise data from a tree. A simple macro showing the use of a TTreeTableInterface follows.; {; // Open a root file.; TFile *file = new TFile(""$ROOTSYS/tutorials/hsimple.root"");; // Load a tree from the file; TNtuple *ntuple = (TNtuple *)file->Get(""ntuple"");; ; // Create an interface; TTreeTableInterface *iface = new TTreeTableInterface(ntuple);; ; // Create a main frame to contain the table; TGMainFrame* mainframe = new TGMainFrame(0, 400, 200);; mainframe->SetCleanup(kDeepCleanup) ;; ; // Create the table; TGTable *table = new TGTable(mainframe, 999, iface, 10, 6);; ; // Add the table to the main frame; mainframe->AddFrame(table, new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));; ; // Set a selection; iface->SetSelection(""px > 0."");; // Add a column; iface->AddColumn(""(px+py)/(px-py)"", 0);; //update the table view; table->Update();; ; // Layout and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTable.html:4362,avail,available,4362,doc/master/classTGTable.html,https://root.cern,https://root.cern/doc/master/classTGTable.html,1,['avail'],['available']
Availability,"e.g. define a quantity that depends on which TTree in which TFile is being; 720 /// processed or to inject a callback into the event loop that is only called when the processing of a new sample; 721 /// starts rather than at every entry.; 722 ///; 723 /// The callable will be invoked once per input TTree or once per multi-thread task, whichever is more often.; 724 ///; 725 /// ### Example usage:; 726 /// ~~~{.cpp}; 727 /// ROOT::RDataFrame df{""mytree"", {""sample1.root"",""sample2.root""}};; 728 /// df.DefinePerSample(""weightbysample"",; 729 /// [](unsigned int slot, const ROOT::RDF::RSampleInfo &id); 730 /// { return id.Contains(""sample1"") ? 1.0f : 2.0f; });; 731 /// ~~~; 732 // clang-format on; 733 // TODO we could SFINAE on F's signature to provide friendlier compilation errors in case of signature mismatch; 734 template <typename F, typename RetType_t = typename TTraits::CallableTraits<F>::ret_type>; 735 RInterface<Proxied, DS_t> DefinePerSample(std::string_view name, F expression); 736 {; 737 RDFInternal::CheckValidCppVarName(name, ""DefinePerSample"");; 738 RDFInternal::CheckForRedefinition(""DefinePerSample"", name, fColRegister, fLoopManager->GetBranchNames(),; 739 fDataSource ? fDataSource->GetColumnNames() : ColumnNames_t{});; 740 ; 741 auto retTypeName = RDFInternal::TypeID2TypeName(typeid(RetType_t));; 742 if (retTypeName.empty()) {; 743 // The type is not known to the interpreter.; 744 // We must not error out here, but if/when this column is used in jitted code; 745 const auto demangledType = RDFInternal::DemangleTypeIdName(typeid(RetType_t));; 746 retTypeName = ""CLING_UNKNOWN_TYPE_"" + demangledType;; 747 }; 748 ; 749 auto newColumn =; 750 std::make_shared<RDFDetail::RDefinePerSample<F>>(name, retTypeName, std::move(expression), *fLoopManager);; 751 ; 752 RDFInternal::RColumnRegister newCols(fColRegister);; 753 newCols.AddDefine(std::move(newColumn));; 754 RInterface<Proxied> newInterface(fProxiedPtr, *fLoopManager, std::move(newCols));; 755 return newInterface;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:38771,error,errors,38771,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['error'],['errors']
Availability,"e.g. via the method MnMigrad::release(n)), the error matrix is considered as unknown and has to be recalculated with appropriate commands.; 2.5.3 \(\mbox{MINOS}\) errors; The M processor \(\mbox{MINOS}\) (MnMinos, see [api:minos]) was probably the first, and may still be the only, generally available program to calculate parameter errors taking into account both parameter correlations and non-linearities. The \(\mbox{MINOS}\) error intervals are in general asymmetric, and may be expensive to calculate, especially if there are a lot of free parameters and the problem is very non-linear.; \(\mbox{MINOS}\) can only operate after a good minimum has already been found, and the error matrix has been calculated, so the \(\mbox{MINOS}\) error analysis will normally follow a \(\mbox{MIGRAD}\) minimization. The \(\mbox{MINOS}\) error for a given parameter is defined as the change in the value of that parameter which causes \({\displaystyle F'}\) to increase by the amount FCNBase::up(), where \({\displaystyle F'}\) is the minimum of \(\mbox{FCN}\) with respect to all other free parameters, and FCNBase::up() is the return value of the error definition specified by the user (default = 1.).; The algorithm for finding the positive and negative \(\mbox{MINOS}\) errors for parameter \(\mbox{n}\) consists of varying parameter \(\mbox{n}\), each time minimizing \(\mbox{FCN}\) with respect to all the other \(\mbox{npar - 1}\) variable parameters, to find numerically the two values of parameter \(\mbox{n}\) for which the minimum of \(\mbox{FCN}\) takes on the values \(\displaystyle F_{\mathrm{min}} + \mbox{up}\), where \(\displaystyle F_{\mathrm{min}}\) is the minimum of \(\mbox{FCN}\) with respect to all \(\mbox{npar}\) parameters. In order to make the procedure as fast as possible, \(\mbox{MINOS}\) uses the error matrix to predict the values of all parameters at the various sub-minima which it will have to find in the course of the calculation, and in the limit that the problem is near",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html:19546,error,error,19546,root/htmldoc/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html,4,['error'],['error']
Availability,"e.h. ◆ FreePicture(). void TGPicturePool::FreePicture ; (; const TGPicture * ; pic). Remove picture from cache if nobody is using it anymore. ; Definition at line 277 of file TGPicture.cxx. ◆ GetPath(). const char * TGPicturePool::GetPath ; (; ); const. inline . Definition at line 104 of file TGPicture.h. ◆ GetPicture() [1/4]. const TGPicture * TGPicturePool::GetPicture ; (; const char * ; name). Get a picture from the picture pool. ; Picture must be freed using TGPicturePool::FreePicture(). If picture is not found 0 is returned. ; Definition at line 82 of file TGPicture.cxx. ◆ GetPicture() [2/4]. const TGPicture * TGPicturePool::GetPicture ; (; const char * ; name, . char ** ; xpm . ). Create picture from XPM data. ; Picture must be freed using TGPicturePool::FreePicture(). If picture creation failed 0 is returned. ; Definition at line 232 of file TGPicture.cxx. ◆ GetPicture() [3/4]. const TGPicture * TGPicturePool::GetPicture ; (; const char * ; name, . Pixmap_t ; pxmap, . Pixmap_t ; mask = 0 . ). Get picture with specified pixmap and mask from pool. ; Picture must be freed using TGPicturePool::FreePicture(). If picture is not found 0 is returned. ; Definition at line 202 of file TGPicture.cxx. ◆ GetPicture() [4/4]. const TGPicture * TGPicturePool::GetPicture ; (; const char * ; name, . UInt_t ; new_width, . UInt_t ; new_height . ). Get picture with specified size from pool (picture will be scaled if necessary). ; Picture must be freed using TGPicturePool::FreePicture(). If picture is not found 0 is returned. ; Definition at line 138 of file TGPicture.cxx. ◆ IsA(). TClass * TGPicturePool::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 113 of file TGPicture.h. ◆ operator=(). TGPicturePool & TGPicturePool::operator= ; (; const TGPicturePool & ; pp). protected . assignment operator ; Definition at line 67 of file TGPicture.cxx. ◆ Print(). void TGPicturePool::Print ; (; Option_t * ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGPicturePool.html:13144,mask,mask,13144,doc/master/classTGPicturePool.html,https://root.cern,https://root.cern/doc/master/classTGPicturePool.html,1,['mask'],['mask']
Availability,"e.h. ◆ GetCompressionFactor(). Float_t TFile::GetCompressionFactor ; (; ). Return the file compression factor. ; Add total number of compressed/uncompressed bytes for each key. Returns the ratio of the two. ; Definition at line 1202 of file TFile.cxx. ◆ GetCompressionLevel(). Int_t TFile::GetCompressionLevel ; (; ); const. inline . Definition at line 391 of file TFile.h. ◆ GetCompressionSettings(). Int_t TFile::GetCompressionSettings ; (; ); const. inline . Definition at line 397 of file TFile.h. ◆ GetEND(). virtual Long64_t TFile::GetEND ; (; ); const. inlinevirtual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 231 of file TFile.h. ◆ GetEndpointUrl() [1/2]. virtual const TUrl * TFile::GetEndpointUrl ; (; ); const. inlinevirtual . Reimplemented in TNetFile.; Definition at line 235 of file TFile.h. ◆ GetEndpointUrl() [2/2]. const TUrl * TFile::GetEndpointUrl ; (; const char * ; name). static . Get final URL for file being opened asynchronously. ; Returns 0 is the information is not yet available. ; Definition at line 4945 of file TFile.cxx. ◆ GetErrno(). Int_t TFile::GetErrno ; (; ); const. virtual . Method returning errno. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1246 of file TFile.cxx. ◆ GetFd(). Int_t TFile::GetFd ; (; ); const. inline . Definition at line 234 of file TFile.h. ◆ GetFileBytesRead(). Long64_t TFile::GetFileBytesRead ; (; ). static . Static function returning the total number of bytes read from all files. ; Definition at line 4574 of file TFile.cxx. ◆ GetFileBytesWritten(). Long64_t TFile::GetFileBytesWritten ; (; ). static . Static function returning the total number of bytes written to all files. ; Does not take into account what might still be in the write caches. ; Definition at line 4583 of file TFile.cxx. ◆ GetFileCounter(). Long64_t TFile::GetFileCounter ; (; ). static . Definition at line 4617 of file TFile.cxx. ◆ GetFileReadCalls(). Int_t TFile::GetFileReadCalls ; (; ). static . Static function returning",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:64907,avail,available,64907,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,2,['avail'],['available']
Availability,"e.h. ◆ Reserve(). void THnSparse::Reserve ; (; Long64_t ; nbins). overrideprotectedvirtual . Initialize storage for nbins. ; Reimplemented from THnBase.; Definition at line 689 of file THnSparse.cxx. ◆ Reset(). void THnSparse::Reset ; (; Option_t * ; option = """"). overridevirtual . Clear the histogram. ; Implements THnBase.; Definition at line 962 of file THnSparse.cxx. ◆ SetBinContent() [1/2]. void THnSparse::SetBinContent ; (; const Int_t * ; idx, . Double_t ; v . ). inline . Forwards to THnBase::SetBinContent(). ; Non-virtual, CINT-compatible replacement of a using declaration. ; Definition at line 105 of file THnSparse.h. ◆ SetBinContent() [2/2]. void THnSparse::SetBinContent ; (; Long64_t ; bin, . Double_t ; v . ). overridevirtual . Set content of bin with index ""bin"" to ""v"". ; Implements THnBase.; Definition at line 904 of file THnSparse.cxx. ◆ SetBinError2(). void THnSparse::SetBinError2 ; (; Long64_t ; bin, . Double_t ; e2 . ). overridevirtual . Set error of bin with index ""bin"" to ""e"", enable errors if needed. ; Implements THnBase.; Definition at line 914 of file THnSparse.cxx. ◆ SetFilledBins(). void THnSparse::SetFilledBins ; (; Long64_t ; nbins). inlineoverridevirtual . Reimplemented from THnBase.; Definition at line 94 of file THnSparse.h. ◆ Streamer(). void THnSparse::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from THnBase.; Reimplemented in THnSparseT< CONT >. ◆ StreamerNVirtual(). void THnSparse::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 169 of file THnSparse.h. ◆ Sumw2(). void THnSparse::Sumw2 ; (; ). overridevirtual . Enable calculation of errors. ; Implements THnBase.; Definition at line 948 of file THnSparse.cxx. Member Data Documentation. ◆ fBinContent. TObjArray THnSparse::fBinContent. private . Array of THnSparseArrayChunk. ; Definition at line 41 of file THnSparse.h. ◆ fBins. TExMap THnSparse::fBins. private . ! Filled bins ; Definition",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparse.html:39642,error,error,39642,doc/master/classTHnSparse.html,https://root.cern,https://root.cern/doc/master/classTHnSparse.html,2,['error'],"['error', 'errors']"
Availability,"e.h:45; Longptr_tlong Longptr_tDefinition RtypesCore.h:75; ULong_tunsigned long ULong_tDefinition RtypesCore.h:55; UInt_tunsigned int UInt_tDefinition RtypesCore.h:46; Float_tfloat Float_tDefinition RtypesCore.h:57; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; Option_tconst char Option_tDefinition RtypesCore.h:66; BIT#define BIT(n)Definition Rtypes.h:90; ClassImp#define ClassImp(name)Definition Rtypes.h:382; TBuffer.h; TClass.h; gDirectory#define gDirectoryDefinition TDirectory.h:384; TError.h; kErrorconstexpr Int_t kErrorDefinition TError.h:47; ErrorHandlervoid ErrorHandler(int level, const char *location, const char *fmt, std::va_list va)General error handler function. It calls the user set error handler.Definition TError.cxx:109; kFatalconstexpr Int_t kFatalDefinition TError.h:50; kWarningconstexpr Int_t kWarningDefinition TError.h:46; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; kInfoconstexpr Int_t kInfoDefinition TError.h:45; kSysErrorconstexpr Int_t kSysErrorDefinition TError.h:49; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; filenameOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char filenameDefinition TGWin32VirtualXProxy.cxx:232; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObject_8cxx_source.html:43926,error,error,43926,doc/master/TObject_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TObject_8cxx_source.html,1,['error'],['error']
Availability,"e/cctype/ */; 10379 while (isgraph((unsigned char)**ppw)) {; 10380 (*ppw)++;; 10381 }; 10382 ; 10383 /* Check end of word */; 10384 if (eol) {; 10385 /* must be a end of line */; 10386 if ((**ppw != '\r') && (**ppw != '\n')) {; 10387 return -1;; 10388 }; 10389 } else {; 10390 /* must be a end of a word, but not a line */; 10391 if (**ppw != ' ') {; 10392 return -1;; 10393 }; 10394 }; 10395 ; 10396 /* Terminate and forward to the next word */; 10397 do {; 10398 **ppw = 0;; 10399 (*ppw)++;; 10400 } while (isspace((unsigned char)**ppw));; 10401 ; 10402 /* Check after term */; 10403 if (!eol) {; 10404 /* if it's not the end of line, there must be a next word */; 10405 if (!isgraph((unsigned char)**ppw)) {; 10406 return -1;; 10407 }; 10408 }; 10409 ; 10410 /* ok */; 10411 return 1;; 10412}; 10413 ; 10414 ; 10415/* Parse HTTP headers from the given buffer, advance buf pointer; 10416 * to the point where parsing stopped.; 10417 * All parameters must be valid pointers (not NULL).; 10418 * Return <0 on error. */; 10419static int; 10420parse_http_headers(char **buf, struct mg_header hdr[MG_MAX_HEADERS]); 10421{; 10422 int i;; 10423 int num_headers = 0;; 10424 ; 10425 for (i = 0; i < (int)MG_MAX_HEADERS; i++) {; 10426 char *dp = *buf;; 10427 ; 10428 /* Skip all ASCII characters (>SPACE, <127), to find a ':' */; 10429 while ((*dp != ':') && (*dp >= 33) && (*dp <= 126)) {; 10430 dp++;; 10431 }; 10432 if (dp == *buf) {; 10433 /* End of headers reached. */; 10434 break;; 10435 }; 10436 ; 10437 /* Drop all spaces after header name before : */; 10438 while (*dp == ' ') {; 10439 *dp = 0;; 10440 dp++;; 10441 }; 10442 if (*dp != ':') {; 10443 /* This is not a valid field. */; 10444 return -1;; 10445 }; 10446 ; 10447 /* End of header key (*dp == ':') */; 10448 /* Truncate here and set the key name */; 10449 *dp = 0;; 10450 hdr[i].name = *buf;; 10451 ; 10452 /* Skip all spaces */; 10453 do {; 10454 dp++;; 10455 } while ((*dp == ' ') || (*dp == '\t'));; 10456 ; 10457 /* The rest of the lin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:299449,error,error,299449,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"e/cctype/ */; 10380 while (isgraph((unsigned char)**ppw)) {; 10381 (*ppw)++;; 10382 }; 10383 ; 10384 /* Check end of word */; 10385 if (eol) {; 10386 /* must be a end of line */; 10387 if ((**ppw != '\r') && (**ppw != '\n')) {; 10388 return -1;; 10389 }; 10390 } else {; 10391 /* must be a end of a word, but not a line */; 10392 if (**ppw != ' ') {; 10393 return -1;; 10394 }; 10395 }; 10396 ; 10397 /* Terminate and forward to the next word */; 10398 do {; 10399 **ppw = 0;; 10400 (*ppw)++;; 10401 } while (isspace((unsigned char)**ppw));; 10402 ; 10403 /* Check after term */; 10404 if (!eol) {; 10405 /* if it's not the end of line, there must be a next word */; 10406 if (!isgraph((unsigned char)**ppw)) {; 10407 return -1;; 10408 }; 10409 }; 10410 ; 10411 /* ok */; 10412 return 1;; 10413}; 10414 ; 10415 ; 10416/* Parse HTTP headers from the given buffer, advance buf pointer; 10417 * to the point where parsing stopped.; 10418 * All parameters must be valid pointers (not NULL).; 10419 * Return <0 on error. */; 10420static int; 10421parse_http_headers(char **buf, struct mg_header hdr[MG_MAX_HEADERS]); 10422{; 10423 int i;; 10424 int num_headers = 0;; 10425 ; 10426 for (i = 0; i < (int)MG_MAX_HEADERS; i++) {; 10427 char *dp = *buf;; 10428 ; 10429 /* Skip all ASCII characters (>SPACE, <127), to find a ':' */; 10430 while ((*dp != ':') && (*dp >= 33) && (*dp <= 126)) {; 10431 dp++;; 10432 }; 10433 if (dp == *buf) {; 10434 /* End of headers reached. */; 10435 break;; 10436 }; 10437 ; 10438 /* Drop all spaces after header name before : */; 10439 while (*dp == ' ') {; 10440 *dp = 0;; 10441 dp++;; 10442 }; 10443 if (*dp != ':') {; 10444 /* This is not a valid field. */; 10445 return -1;; 10446 }; 10447 ; 10448 /* End of header key (*dp == ':') */; 10449 /* Truncate here and set the key name */; 10450 *dp = 0;; 10451 hdr[i].name = *buf;; 10452 ; 10453 /* Skip all spaces */; 10454 do {; 10455 dp++;; 10456 } while ((*dp == ' ') || (*dp == '\t'));; 10457 ; 10458 /* The rest of the lin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:299482,error,error,299482,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,"e2D by a constant c1*-*-*-*-*-*-*-*-*; *-* ========================================. this = c1*this. This function uses the services of TProfile2D::Add. void SetBinEntries(Int_t bin, Double_t w); Set the number of entries in bin*-*-*-; *-* ================================. void SetBins(Int_t nbinsx, Double_t xmin, Double_t xmax, Int_t nbinsy, Double_t ymin, Double_t ymax); Redefine x and y axis parameters*-*-*-; *-* ===========================. void SetBins(Int_t nx, const Double_t* xBins, Int_t ny, const Double_t* yBins); *-*Redefine x and y axis parameters for variable bin sizes ; *-* ===========================. void SetBinsLength(Int_t n = -1); Set total number of bins including under/overflow; Reallocate bin contents array. void SetBuffer(Int_t buffersize, Option_t* option = """"); set the buffer size in units of 8 bytes (double). void SetErrorOption(Option_t* option = """"); -*-*Set option to compute profile2D errors; *-* =======================================; The computation of the bin errors is based on the parameter option:; option:; ' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (Z),; i.e. the standard error of the bin contents.; Note that if TProfile::Approximate() is called, an approximation is used when; the spread in Z is 0 and the number of bin entries is > 0. 's' The bin errors are the standard deviations of the Z bin values; Note that if TProfile::Approximate() is called, an approximation is used when; the spread in Z is 0 and the number of bin entries is > 0. 'i' Errors are as in default case (standard errors of the bin contents); The only difference is for the case when the spread in Z is zero.; In this case for N > 0 the error is 1./SQRT(12.*N). 'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; W is the sum in the bin of the weights of the profile.; This option is for combining measurements z +/- dz,; and the profile is filled with values y and weights z = 1/dz**2. See TProfile::BuildOptions",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProfile2D.html:46896,error,errors,46896,root/html534/TProfile2D.html,https://root.cern,https://root.cern/root/html534/TProfile2D.html,24,['error'],"['error', 'errors']"
Availability,"e4); virtual~TAttParticle(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; static Int_tConvertISAtoPDG(Int_t isaNumber); virtual voidTNamed::Copy(TObject& named) const; static voidDefinePDG(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TAttParticle.html:1581,Error,Error,1581,root/html532/TAttParticle.html,https://root.cern,https://root.cern/root/html532/TAttParticle.html,2,['Error'],['Error']
Availability,"e: ""ptAndEta"") as the default column name does not exist.; The above call will produce variations ""ptAndEta:down"" and ""ptAndEta:up"".; Combining multiple variations; Even if a result depends on multiple variations, only one variation is applied at a time, i.e. there will be no result produced by applying multiple systematic variations at the same time. For example, in the following example snippet, the RResultMap instance all_h will contain keys ""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1"", but no ""pt:up&&eta:0"" or similar:; auto df = _df.Vary(""pt"",; ""ROOT::RVecD{pt*0.9, pt*1.1}"",; {""down"", ""up""}); .Vary(""eta"",; [](float eta) { return RVecF{eta*0.9f, eta*1.1f}; },; {""eta""},; 2);; ; auto nom_h = df.Histo2D(histoModel, ""pt"", ""eta"");; auto all_hs = VariationsFor(nom_h);; all_hs.GetKeys(); // returns {""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1""}; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::VaryRInterface< RDFDetail::RLoopManager, DS_t > Vary(std::string_view colName, F &&expression, const ColumnNames_t &inputColumns, const std::vector< std::string > &variationTags, std::string_view variationName="""")Register systematic variations for a single existing column using custom variation tags.Definition RInterface.hxx:693; Note how we passed the integer 2 instead of a list of variation tags to the second Vary() invocation: this is a shorthand that automatically generates tags 0 to N-1 (in this case 0 and 1).; NoteCurrently, VariationsFor() and RResultMap are in the ROOT::RDF::Experimental namespace, to indicate that these interfaces might still evolve and improve based on user feedback. We expect that some aspects of the related programming model will be streamlined in future versions. Currently, the results of a Snapshot(), Report() or Display() call cannot be varied (i.e. it is not possible to call VariationsFor() on them. These limitations will be lifted in future releases.; See the Vary() method for more information and this tutorial for an example usage of Vary",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:56915,down,down,56915,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,1,['down'],['down']
Availability,"e: ""ptAndEta"") as the default column name does not exist.; The above call will produce variations ""ptAndEta:down"" and ""ptAndEta:up"".; Combining multiple variations; Even if a result depends on multiple variations, only one variation is applied at a time, i.e. there will be no result produced by applying multiple systematic variations at the same time. For example, in the following example snippet, the RResultMap instance all_h will contain keys ""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1"", but no ""pt:up&&eta:0"" or similar:; auto df = _df.Vary(""pt"",; ""ROOT::RVecD{pt*0.9, pt*1.1}"",; {""down"", ""up""}); .Vary(""eta"",; [](float eta) { return RVecF{eta*0.9f, eta*1.1f}; },; {""eta""},; 2);; ; auto nom_h = df.Histo2D(histoModel, ""pt"", ""eta"");; auto all_hs = VariationsFor(nom_h);; all_hs.GetKeys(); // returns {""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1""}; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::VaryRInterface< RDFDetail::RLoopManager, DS_t > Vary(std::string_view colName, F &&expression, const ColumnNames_t &inputColumns, const std::vector< std::string > &variationTags, std::string_view variationName="""")Register systematic variations for a single existing column using custom variation tags.Definition RInterface.hxx:862; Note how we passed the integer 2 instead of a list of variation tags to the second Vary() invocation: this is a shorthand that automatically generates tags 0 to N-1 (in this case 0 and 1).; NoteCurrently, VariationsFor() and RResultMap are in the ROOT::RDF::Experimental namespace, to indicate that these interfaces might still evolve and improve based on user feedback. We expect that some aspects of the related programming model will be streamlined in future versions. Currently, the results of a Snapshot(), Report() or Display() call cannot be varied (i.e. it is not possible to call VariationsFor() on them. These limitations will be lifted in future releases.; See the Vary() method for more information and this tutorial for an example usage of Vary",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDataFrame.html:58337,down,down,58337,doc/master/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html,1,['down'],['down']
Availability,e::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; voidTObject::MakeZombie(); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareOptions(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTMVA::FitterBase::fClassNameremove TMVA:: from TObject name; TMVA::IFitterTarget&TMVA::FitterBase::fFitterTargetpointer to target of fitting procedure; TMVA::MsgLogger*TMVA::FitterBase::fLoggermessage logger; TMVA::MinuitWrapper*fMinWrapholds a wrapper around TMinuit; Int_tTMVA::FitterBase::fNparsnumber of parameters; const vector<TMVA::Interval*>TMVA::FitterBase::fRangesallowed intervals. private:. Bool_tfBatchbatch mode; Int_tfErrorLevelminuit error level; Int_tfFitStrategyminuit strategy level; Int_tfMaxCalls(approximate) maximum number of function calls; Int_tfPrintLevelminuit printout level; Bool_tfPrintWarningsminuit warnings level; Double_tfTolerancetolerance to the function value at the minimum; Bool_tfUseImproveflag for 'IMPROVE' use; Bool_tfUseMinosflag for 'MINOS' use. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~MinuitFitter(); destructor. void DeclareOptions(); declare SA options. void Init(); minuit-specific settings. Double_t Run(vector<Double_t>& pars); performs the fit. Double_t EstimatorFunction(vector<Double_t>& pars); performs the fit by calliung Run(pars). » Author: Andreas Hoecker » Copyright (c) 2005: *; » Last changed: root/tmva $Id: MinuitFitter.h 39395 2011-05-26 10:05:54Z moneta $ » Last generated: 2011-07-04 15:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MinuitFitter.html:7237,error,error,7237,root/html530/TMVA__MinuitFitter.html,https://root.cern,https://root.cern/root/html530/TMVA__MinuitFitter.html,1,['error'],['error']
Availability,"e::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Bool_tfAutomaticuse user given prune strength or automatically determined one using a validation sample ; Double_tfDeltaPruneStrengthstep size in pruning, is adjusted according to experience of previous trees ; Double_tfErrorFractionntuple var: misclassification error fraction ; vector<TMVA::Event*,allocator<TMVA::Event*> >fEventSamplethe training events; UInt_tfMaxDepthmax depth; Int_tfNCutsgrid used in cut applied in node splitting; UInt_tfNNodesMaxmax # of nodes; Int_tfNodeMinEventsmin number of events in node ; Double_tfNodePurityLimitpurity limit for sig/bkg nodes; Bool_tfPruneBeforeBoostwhether to prune right after the training (before the boosting); TMVA::DecisionTree::EPruneMethodfPruneMethodmethod used for prunig ; TStringfPruneMethodSprune method option String; Double_tfPruneStrengtha parameter to set the ""amount"" of pruning..needs to be adjusted; Bool_tfRandomisedTreeschoose a random subset of possible cut variables at each node during training; TMVA::SeparationBase*fSepTypethe separation used in node splitting; TStringfSepTypeSthe separation (option string) used in node splitting; TMVA::DecisionTree*fTreethe decision tree; Int_tfUseNvarsthe number of variables used in the randomised tree splitting; Bool_tfUseYesNoLeafuse sig or bkg classification in leave nodes or sig/bkg; vector<Double_t>fVariableImportancethe relative importance of the different variables ; static const Int_tfgDebugLeve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodDT.html:19337,error,error,19337,root/html530/TMVA__MethodDT.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodDT.html,3,['error'],['error']
Availability,"e::fgDby; static const TGFont*TGCheckButton::fgDefaultFont; static const TGFont*TGTextButton::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*TGCheckButton::fgDefaultGC; static const TGGC*TGButton::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGButton::fgHibckgndGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static Window_tTGButton::fgReleaseBtnthe last released button; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGColorSelect(const TGWindow* p = 0, Pixel_t color = 0, Int_t id = -1); TGColorSelect constructor.; The TGColorSelect widget is like a checkbutton but instead of the check; mark there is color area with a little down arrow.; When clicked on the arrow the TGColorPopup pops up. ~TGColorSelect(); TGColorSelect destructor. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for TGColorSelect. Bool_t HandleButton(Event_t* event); Handle button events for TGColorSelect. void Enable(Bool_t on = kTRUE); Set state of widget as enabled. void Disable(); Set state of widget as disabled. void DoRedraw(); Redraw TGColorSelect widget. void DrawTriangle(GContext_t gc, Int_t x, Int_t y); Draw triangle (arrow) on which user can click to open TGColorPopup. void SetColor(Pixel_t color, Bool_t emit = kTRUE); Set color. void SetAlphaColor(ULong_t color, Bool_t emit = kTRUE); Set color. void SavePrimitive(ostream& out, Option_t* = """"); Save a color select widget as a C++ statement(s) on output stream out. TGColorFrame& operator=(const TGColorSelect& ). Pixel_t GetColor() const; { return fColor; }. TGColorSelect(const TGColorSelect& ). voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGColorSelect.html:24564,down,down,24564,root/html602/TGColorSelect.html,https://root.cern,https://root.cern/root/html602/TGColorSelect.html,4,['down'],['down']
Availability,e; 214 */; 215 void AddBinUpEdge( const double* xup );; 216 ; 217 /**; 218 return the value for the given fit point; 219 */; 220 double Value( unsigned int ipoint ) const; 221 {; 222 assert( ipoint < fMaxPoints );; 223 assert( fDataPtr );; 224 assert( fData.empty() || &fData.front() == fDataPtr );; 225 ; 226 return fDataPtr[ipoint];; 227 }; 228 ; 229 /**; 230 return a pointer to the value for the given fit point; 231 */; 232 const double *ValuePtr( unsigned int ipoint ) const; 233 {; 234 return &fDataPtr[ipoint];; 235 }; 236 ; 237 /**; 238 Return a pointer to the error (or the inverse error) on the value for a given point; 239 depending on the type of data.; 240 - If the data contains only value error (e.g. from histograms) returns a pointer to; 241 the inverse of the errors.; 242 - If the data contains errors in coordinates and value (e.g from TGraphErrors) returns a; 243 pointer to the corresponding value error (NOT the inverse).; 244 - If the data contains asymmetric errors return a pointer to the average error (NOT the inverse):; 245 0.5(eu + el).; 246 - If the data does not contain errors return a nullptr.; 247 */; 248 ; 249 const double * ErrorPtr(unsigned int ipoint) const{; 250 assert( ipoint < fMaxPoints );; 251 assert( kValueError == fErrorType || kCoordError == fErrorType ||; 252 kAsymError == fErrorType || kNoError == fErrorType );; 253 ; 254 if ( fErrorType == kNoError ); 255 return nullptr;; 256 return &fDataErrorPtr[ ipoint ];; 257 }; 258 ; 259 /// Return the error on the given point.; 260 /// Safer method returning in any case the error and not the inverse as in the; 261 /// function above.; 262 double Error( unsigned int ipoint ) const; 263 {; 264 assert( ipoint < fMaxPoints );; 265 assert( kValueError == fErrorType || kCoordError == fErrorType ||; 266 kAsymError == fErrorType || kNoError == fErrorType );; 267 ; 268 if ( fErrorType == kNoError ); 269 {; 270 assert( !fDataErrorPtr && !fDataErrorHighPtr && !fDataErrorLowPtr );; 271 assert( fDataError.e,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8h_source.html:8300,error,errors,8300,doc/master/BinData_8h_source.html,https://root.cern,https://root.cern/doc/master/BinData_8h_source.html,2,['error'],"['error', 'errors']"
Availability,"e; 819 ; 820if __name__ == ""__main__"":; 821 df = RDataFrame(""mytree"",""myfile.root"").Define(""x"",""someoperation""); 822 # The model can be passed either as a tuple with the arguments in the correct order; 823 df.Histo1D((""name"", ""title"", 10, 0, 10), ""x""); 824 # Or by creating the specific struct; 825 model = ROOT.RDF.TH1DModel(""name"", ""title"", 10, 0, 10); 826 df.Histo1D(model, ""x""); 827~~~; 828 ; 829Without this, two partial histograms resulting from two distributed tasks would have incompatible binning, thus leading; 830to errors when merging them. Failing to pass a histogram model will raise an error on the client side, before starting; 831the distributed execution.; 832 ; 833### Live visualization in distributed mode with dask; 834 ; 835The live visualization feature allows real-time data representation of plots generated during the execution ; 836of a distributed RDataFrame application. ; 837It enables visualizing intermediate results as they are computed across multiple nodes of a Dask cluster; 838by creating a canvas and continuously updating it as partial results become available. ; 839 ; 840The LiveVisualize() function can be imported from the Python package **ROOT.RDF.Experimental.Distributed**:; 841 ; 842~~~{.py}; 843import ROOT; 844 ; 845LiveVisualize = ROOT.RDF.Experimental.Distributed.LiveVisualize; 846~~~; 847 ; 848The function takes drawable objects (e.g. histograms) and optional callback functions as argument, it accepts 4 different input formats:; 849 ; 850- Passing a list or tuple of drawables: ; 851You can pass a list or tuple containing the plots you want to visualize. For example:; 852 ; 853~~~{.py}; 854LiveVisualize([h_gaus, h_exp, h_random]); 855~~~; 856 ; 857- Passing a list or tuple of drawables with a global callback function: ; 858You can also include a global callback function that will be applied to all plots. For example:; 859 ; 860~~~{.py}; 861def set_fill_color(hist):; 862 hist.SetFillColor(ROOT.kBlue); 863 ; 864LiveVisualize([h_gaus, h_e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:48132,avail,available,48132,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['avail'],['available']
Availability,"e; 859 ; 860if __name__ == ""__main__"":; 861 df = RDataFrame(""mytree"",""myfile.root"").Define(""x"",""someoperation""); 862 # The model can be passed either as a tuple with the arguments in the correct order; 863 df.Histo1D((""name"", ""title"", 10, 0, 10), ""x""); 864 # Or by creating the specific struct; 865 model = ROOT.RDF.TH1DModel(""name"", ""title"", 10, 0, 10); 866 df.Histo1D(model, ""x""); 867~~~; 868 ; 869Without this, two partial histograms resulting from two distributed tasks would have incompatible binning, thus leading; 870to errors when merging them. Failing to pass a histogram model will raise an error on the client side, before starting; 871the distributed execution.; 872 ; 873### Live visualization in distributed mode with dask; 874 ; 875The live visualization feature allows real-time data representation of plots generated during the execution ; 876of a distributed RDataFrame application. ; 877It enables visualizing intermediate results as they are computed across multiple nodes of a Dask cluster; 878by creating a canvas and continuously updating it as partial results become available. ; 879 ; 880The LiveVisualize() function can be imported from the Python package **ROOT.RDF.Experimental.Distributed**:; 881 ; 882~~~{.py}; 883import ROOT; 884 ; 885LiveVisualize = ROOT.RDF.Experimental.Distributed.LiveVisualize; 886~~~; 887 ; 888The function takes drawable objects (e.g. histograms) and optional callback functions as argument, it accepts 4 different input formats:; 889 ; 890- Passing a list or tuple of drawables: ; 891You can pass a list or tuple containing the plots you want to visualize. For example:; 892 ; 893~~~{.py}; 894LiveVisualize([h_gaus, h_exp, h_random]); 895~~~; 896 ; 897- Passing a list or tuple of drawables with a global callback function: ; 898You can also include a global callback function that will be applied to all plots. For example:; 899 ; 900~~~{.py}; 901def set_fill_color(hist):; 902 hist.SetFillColor(ROOT.kBlue); 903 ; 904LiveVisualize([h_gaus, h_e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:49772,avail,available,49772,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['avail'],['available']
Availability,"e; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::FitResult. class ROOT::Fit::FitResult. class containg the result of the fit and all the related information; (fitted parameter values, error, covariance matrix and minimizer result information); Contains a pointer also to the fitted (model) function, modified with the fit parameter values.; When the fit is valid, it is constructed from a Minimizer and a model function pointer. @ingroup FitMain. Function Members (Methods); public:. ~FitResult(); doubleChi2() const; doubleCorrelation(unsigned int i, unsigned int j) const; doubleCovMatrix(unsigned int i, unsigned int j) const; intCovMatrixStatus() const; doubleEdm() const; doubleError(unsigned int i) const; const vector<double>&Errors() const; ROOT::Fit::FitResultFitResult(); ROOT::Fit::FitResultFitResult(const ROOT::Fit::FitConfig& fconfig); ROOT::Fit::FitResultFitResult(const ROOT::Fit::FitResult&); ROOT::Fit::FitResultFitResult(ROOT::Math::Minimizer& min, const ROOT::Fit::FitConfig& fconfig, const ROOT::Fit::FitResult::IModelFunction* f, bool isValid, unsigned int sizeOfData = 0, bool binFit = true, const ROOT::Math::IMultiGenFunction* chi2func = 0, unsigned int ncalls = 0); const ROOT::Fit::FitResult::IModelFunction*FittedFunction() const; voidGetConfidenceIntervals(const ROOT::Fit::BinData& data, double* ci, double cl = 0.95, bool norm = true) const; voidGetConfidenceIntervals(unsigned int n, unsigned int stride1, unsigned int stride2, const double* x, double* ci, double cl = 0.95, bool norm = true) const; voidGetCorrelationMatrix(TMatrixTSym<double>& mat) const; voidGetCorrelationMatrix<TMatrixDSym>(TMatrixTSym<double>& mat) const; voidGetCovarianceMatrix(TMatrixTSym<double>& mat) const; voidGetCovarianceMatrix<TMatrixDSym>(TMatrixTSym<double>& mat) const; const double*GetErrors() const; stringGetParameterName(unsigned int ipar) const; const double*GetParams() const; doubleGlobalC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Fit__FitResult.html:930,Error,Errors,930,root/html532/ROOT__Fit__FitResult.html,https://root.cern,https://root.cern/root/html532/ROOT__Fit__FitResult.html,1,['Error'],['Errors']
Availability,"e; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*TGraph::fY[fNpoints] array of Y points. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooCurve(); Default constructor. RooCurve(const RooAbsReal& func, RooAbsRealLValue& x, Double_t xlo, Double_t xhi, Int_t xbins, Double_t scaleFactor = 1, const RooArgSet* normVars = 0, Double_t prec = 0.001, Double_t resolution = 0.001, Bool_t shiftToZero = kFALSE, RooCurve::WingMode wmode = Extended, Int_t nEvalError = -1, Int_t doEEVal = kFALSE, Double_t eeVal = 0, Bool_t showProgress = kFALSE); Create a 1-dim curve of the value of the specified real-valued expression; as a function of x. Use the optional precision parameter to control; how precisely the smooth curve is rasterized. Use the optional argument set; to specify how the expression should be normalized. Use the optional scale; factor to rescale the expression after normalization.; If shiftToZero is set, the entire curve is shift down to make the lowest; point in of the curve go through zero. RooCurve(const char* name, const char* title, const RooAbsFunc& func, Double_t xlo, Double_t xhi, UInt_t minPoints, Double_t prec = 0.001, Double_t resolution = 0.001, Bool_t shiftToZero = kFALSE, RooCurve::WingMode wmode = Extended, Int_t nEvalError = -1, Int_t doEEVal = kFALSE, Double_t eeVal = 0); Create a 1-dim curve of the value of the specified real-valued; expression as a function of x. Use the optional precision; parameter to control how precisely the smooth curve is; rasterized. If shiftToZero is set, the entire curve is shift; down to make the lowest point in of the curve go through zero. RooCurve(const char* name, const char* title, const RooCurve& c1, const RooCurve& c2, Double_t scale1 = 1., Double_t scale2 = 1.); Constructor of curve as sum of two other curves. Csum = scale1*c1 + scale2*c2. ~RooCurve(); Destructor. void initialize(); Perform initialization that is common to all curves. void shiftCurveToZero(Double_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCurve.html:19976,down,down,19976,root/html602/RooCurve.html,https://root.cern,https://root.cern/root/html602/RooCurve.html,4,['down'],['down']
Availability,"e; branches (TBranchElement). To get the old behaviour, you can:; - call BranchOld or; - call TTree::SetBranchStyle(0). Note that with the new style, classname does not need to derive from TObject.; It must derived from TObject if the branch style has been set to 0 (old). Note: See the comments in TBranchElement::SetAddress() for a more; detailed discussion of the meaning of the addobj parameter in; the case of new-style branches. Use splitlevel < 0 instead of splitlevel=0 when the class; has a custom Streamer. Note: if the split level is set to the default (99), TTree::Branch will; not issue a warning if the class can not be split. TBranch* BranchOld(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 1); Create a new TTree BranchObject. Build a TBranchObject for an object of class classname.; addobj is the address of a pointer to an object of class classname.; IMPORTANT: classname must derive from TObject.; The class dictionary must be available (ClassDef in class header). This option requires access to the library where the corresponding class; is defined. Accessing one single data member in the object implies; reading the full object.; See the next Branch constructor for a more efficient storage; in case the entry consists of arrays of identical objects. By default the branch buffers are stored in the same file as the Tree.; use TBranch::SetFile to specify a different file. IMPORTANT NOTE about branch names; In case two or more master branches contain subbranches with; identical names, one must add a ""."" (dot) character at the end; of the master branch name. This will force the name of the subbranch; to be master.subbranch instead of simply subbranch.; This situation happens when the top level object (say event); has two or more members referencing the same class.; For example, if a Tree has two branches B1 and B2 corresponding; to objects of the same class MyClass, one can do:; tree.Branch(""B1."",""MyClass"",&b1,8000,1)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:47632,avail,available,47632,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,10,['avail'],['available']
Availability,"e; code will abort. When used as lvalue in assignment operations, the element contained in; the list will not be changed, only the value of the existing element!. Bool_t checkForDup(const RooAbsArg& arg, Bool_t silent) const; Check if element with var's name is already in set. Double_t getRealValue(const char* name, Double_t defVal = 0, Bool_t verbose = kFALSE) const; Get value of a RooAbsReal stored in set with given name. If none is found, value of defVal is returned.; No error messages are printed unless the verbose flag is set. Bool_t setRealValue(const char* name, Double_t newVal = 0, Bool_t verbose = kFALSE); Set value of a RooAbsRealLValye stored in set with given name to newVal; No error messages are printed unless the verbose flag is set. const char* getCatLabel(const char* name, const char* defVal = """", Bool_t verbose = kFALSE) const; Get state name of a RooAbsCategory stored in set with given name. If none is found, value of defVal is returned.; No error messages are printed unless the verbose flag is set. Bool_t setCatLabel(const char* name, const char* newVal = """", Bool_t verbose = kFALSE); Set state name of a RooAbsCategoryLValue stored in set with given name to newVal.; No error messages are printed unless the verbose flag is set. Int_t getCatIndex(const char* name, Int_t defVal = 0, Bool_t verbose = kFALSE) const; Get index value of a RooAbsCategory stored in set with given name. If none is found, value of defVal is returned.; No error messages are printed unless the verbose flag is set. Bool_t setCatIndex(const char* name, Int_t newVal = 0, Bool_t verbose = kFALSE); Set index value of a RooAbsCategoryLValue stored in set with given name to newVal.; No error messages are printed unless the verbose flag is set. const char* getStringValue(const char* name, const char* defVal = """", Bool_t verbose = kFALSE) const; Get string value of a RooAbsString stored in set with given name. If none is found, value of defVal is returned.; No error messages are printed",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooArgSet.html:19147,error,error,19147,root/html526/RooArgSet.html,https://root.cern,https://root.cern/root/html526/RooArgSet.html,10,['error'],['error']
Availability,"e; derivative(RooRealVar &obs, Int_t order=1, double eps=0.001)RooAbsReal; derivative(RooRealVar &obs, const RooArgSet &normSet, Int_t order, double eps=0.001)RooAbsReal; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; doEval(RooFit::EvalContext &) constRooAbsRealvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; enableOffsetting(bool)RooAbsRealvirtual; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; ErrorLoggingMode enum nameRooAbsReal; EStatusBits enum nameTObject; evalErrorIter()RooAbsRealstatic; evalErrorLoggingMode()RooAbsRealstatic; evaluate() const =0RooAbsRealprotectedpure virtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; expectedEvents(const RooArgSet *nset) constRooAbsPdfvirtual; expectedEvents(const RooArgSet &nset) constRooAbsPdfinline; expensiveObjectCache() constRooAbsArg; extendedTerm(double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) constRooAbsPdf; extendedTerm(double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) constRooAbsPdf; extendedTerm(RooAbsData const &data, bool weightSquared, bool doOffset=false) constRooAbsPdf; extendMode() constRooAbsPdfinlinevirtual; ExtendMode enum nameRooAbsPdf; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FillBuffer(char *&buffer)TNamedvirtual; fillDataHist(RooDataHist *hist, const RooArgSet *nset, double scaleFactor, bool correctForBinVolume=false, bool showProgress=false) constRooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf-members.html:12867,error,error,12867,doc/master/classRooAbsPdf-members.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf-members.html,2,['error'],['error']
Availability,"e; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TGDMLWrite::StructLst*fAccPattlist of accepted patterns for division; UInt_tfActNameErrcount of name errors; XMLNodePointer_tfDefineNodemain <define> node...; TGDMLWrite::StructLst*fElementListlist of elements; TXMLEngine*fGdmlExml engine pointer; XMLDocPointer_tfGdmlFilepointer storing xml file; TGDMLWrite::StructLst*fIsotopeListlist of isotopes; XMLNodePointer_tfMaterialsNodemain <materials> node...; TGDMLWrite::NameLst*fNameListlist of names (pointer mapped); Int_tfPhysVolCntcount of physical volumes; TGDMLWrite::StructLst*fRejShapelist of rejected shapes; UInt_tfSolCntcount of name solids; XMLNodePointer_tfSolidsNodemain <solids> node...; XMLNodePointer_tfStructureNodemain <structure> node...; TStringfTopVolumeNamename of top volume; Int_tfVolCntcount of volumes; Bool_tfgG4Compatibilityinput option for Geant4 compatibility; static TGDMLWrite*fgGDMLWritepointer to gdml writer; Int_tfgNamingSpeedinput option for volume and solid naming; static const UInt_tfgkMaxNameErrmaximum number of errors for naming; static const UInt_tfgkProcBit14th bit is set when solid is processed; static const UInt_tfgkProcBitVol19th bit is set when volume is processed. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGDMLWrite(); Default constructor. ~TGDMLWrite(); Destructor. void SetNamingSpeed(TGDMLWrite::ENamingType naming); Set convetion of naming solids and volumes. void WriteGDMLfile(TGeoManager* geomanager, const char* filename = ""test.gdml"", TString option = """"); Wrapper of all exporting methods; Creates blank GDML file and fills it with gGeoManager structure converted; to GDML structure of xml nodes. XMLNodePointer_t ExtractMaterials(TList* materialsLst); Method exporting materials. TString ExtractSolid(TGeoShape* volShape); Method creating solid to xml file and returning its name. void ExtractVolumes(TGeoVolume* volume); Method extracting geometry structure recursively. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGDMLWrite.html:13257,error,errors,13257,root/html534/TGDMLWrite.html,https://root.cern,https://root.cern/root/html534/TGDMLWrite.html,2,['error'],['errors']
Availability,"e; map<std::string,RooAbsNumGenerator*>_map. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNumGenFactory(); Constructor. Register all known integrators by calling; their static registration functions. ~RooNumGenFactory(); Destructor. RooNumGenFactory(const RooNumGenFactory& other); Copy constructor. RooNumGenFactory& instance(); Static method returning reference to singleton instance of factory. void cleanup(); Cleanup routine called by atexit() handler installed by RooSentinel. Bool_t storeProtoSampler(RooAbsNumGenerator* proto, const RooArgSet& defConfig); Method accepting registration of a prototype numeric integrator along with a RooArgSet of its; default configuration options and an optional list of names of other numeric integrators; on which this integrator depends. Returns true if integrator was previously registered. const RooAbsNumGenerator* getProtoSampler(const char* name); Return prototype integrator with given (class) name. RooAbsNumGenerator* createSampler(RooAbsReal& func, const RooArgSet& genVars, const RooArgSet& condVars, const RooNumGenConfig& config, Bool_t verbose = kFALSE, RooAbsReal* maxFuncVal = 0); Construct a numeric integrator instance that operates on function 'func' and is configured; with 'config'. If ndimPreset is greater than zero that number is taken as the dimensionality; of the integration, otherwise it is queried from 'func'. This function iterators over list; of available prototype integrators and returns an clone attached to the given function of; the first class that matches the specifications of the requested integration considering; the number of dimensions, the nature of the limits (open ended vs closed) and the user; preference stated in 'config'. » Last changed: Thu Sep 23 20:00:24 2010 » Last generated: 2010-09-23 20:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNumGenFactory.html:7421,avail,available,7421,root/html528/RooNumGenFactory.html,https://root.cern,https://root.cern/root/html528/RooNumGenFactory.html,1,['avail'],['available']
Availability,"e; map<std::string,RooAbsNumGenerator*>_map. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNumGenFactory(); Constructor. Register all known integrators by calling; their static registration functions. ~RooNumGenFactory(); Destructor. RooNumGenFactory(const RooNumGenFactory& other); Copy constructor. RooNumGenFactory& instance(); Static method returning reference to singleton instance of factory. void cleanup(); Cleanup routine called by atexit() handler installed by RooSentinel. Bool_t storeProtoSampler(RooAbsNumGenerator* proto, const RooArgSet& defConfig); Method accepting registration of a prototype numeric integrator along with a RooArgSet of its; default configuration options and an optional list of names of other numeric integrators; on which this integrator depends. Returns true if integrator was previously registered. const RooAbsNumGenerator* getProtoSampler(const char* name); Return prototype integrator with given (class) name. RooAbsNumGenerator* createSampler(RooAbsReal& func, const RooArgSet& genVars, const RooArgSet& condVars, const RooNumGenConfig& config, Bool_t verbose = kFALSE, RooAbsReal* maxFuncVal = 0); Construct a numeric integrator instance that operates on function 'func' and is configured; with 'config'. If ndimPreset is greater than zero that number is taken as the dimensionality; of the integration, otherwise it is queried from 'func'. This function iterators over list; of available prototype integrators and returns an clone attached to the given function of; the first class that matches the specifications of the requested integration considering; the number of dimensions, the nature of the limits (open ended vs closed) and the user; preference stated in 'config'. » Last changed: Tue Mar 10 17:18:15 2015 » Last generated: 2015-03-10 17:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNumGenFactory.html:7509,avail,available,7509,root/html534/RooNumGenFactory.html,https://root.cern,https://root.cern/root/html534/RooNumGenFactory.html,2,['avail'],['available']
Availability,"e; opening time or in case libraries containing classes referenced; by the file have not yet been loaded.; if fgReadInfo is false, one can still read the StreamerInfo with; myfile.ReadStreamerInfo();. void ShowStreamerInfo(); Show the StreamerInfo of all classes written to this file. UShort_t WriteProcessID(TProcessID* pid); Check if the ProcessID pidd is already in the file,; if not, add it and return the index number in the local file list. void WriteStreamerInfo(); Write the list of TStreamerInfo as a single object in this file; The class Streamer description for all classes written to this file; is saved. See class TStreamerInfo. TFile * OpenFromCache(const char* name, Option_t* = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); Static member function allowing to open a file for reading through the file; cache. The file will be downloaded to the cache and opened from there.; If the download fails, it will be opened remotely.; The file will be downloaded to the directory specified by SetCacheFileDir(). TFile * Open(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); Static member function allowing the creation/opening of either a; TFile, TNetFile, TWebFile or any TFile derived class for which an; plugin library handler has been registered with the plugin manager; (for the plugin manager see the TPluginManager class). The returned; type of TFile depends on the file name specified by 'url'.; If 'url' is a '|'-separated list of file URLs, the 'URLs' are tried; sequentially in the specified order until a successful open.; If the file starts with ""root:"", ""roots:"" or ""rootk:"" a TNetFile object; will be returned, with ""http:"" a TWebFile, with ""file:"" a local TFile,; etc. (see the list of TFile plugin handlers in $ROOTSYS/etc/system.rootrc; for regular expressions that will be checked) and as last a local file will; be tried.; Before opening a file via TNetFile a check is made to see if the URL; spe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFile.html:44163,down,downloaded,44163,root/html528/TFile.html,https://root.cern,https://root.cern/root/html528/TFile.html,6,['down'],['downloaded']
Availability,"e; or submaster (meaningless for slave servers).; kCpBin (0x8) Retrieve from the cache the binaries associated; with the file; kCp (0x10) Retrieve the files from the cache. Int_t Echo(const TObject* obj); Sends an object to master and workers and expect them to send back a; message with the output of its TObject::Print(). Returns -1 on error, the; number of workers that received the objects on success. Int_t Echo(const char* str); Sends a string to master and workers and expect them to echo it back to; the client via a message. It is a special case of the generic Echo(); that works with TObjects. Returns -1 on error, the number of workers that; received the message on success. Int_t SendObject(const TObject* obj, TProof::ESlaves list = kActive); Send object to master or slave servers. Returns number of slaves object; was sent to, -1 in case of error. Int_t SendPrint(Option_t* option = """"); Send print command to master server. Returns number of slaves message; was sent to. Returns -1 in case of error. void SetLogLevel(Int_t level, UInt_t mask = TProofDebug::kAll); Set server logging level. void SetRealTimeLog(Bool_t on = kTRUE); Switch ON/OFF the real-time logging facility. When this option is; ON, log messages from processing are sent back as they come, instead of; being sent back at the end in one go. This may help debugging or monitoring; in some cases, but, depending on the amount of log, it may have significant; consequencies on the load over the network, so it must be used with care. Int_t SetParallelSilent(Int_t nodes, Bool_t random = kFALSE); Tell PROOF how many slaves to use in parallel. If random is TRUE a random; selection is done (if nodes is less than the available nodes).; Returns the number of parallel slaves. Returns -1 in case of error. Int_t SetParallel(Int_t nodes = -1, Bool_t random = kFALSE); Tell PROOF how many slaves to use in parallel. Returns the number of; parallel slaves. Returns -1 in case of error. Int_t GoMoreParallel(Int_t nWorkersToAdd)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:67007,error,error,67007,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,6,['error'],['error']
Availability,"e; out where the central directory begins. Returns -1 in case of error,; 0 otherwise. Long64_t ReadZip64EndLocator(Long64_t pos); Read Zip64 end of central directory locator. Returns -1 in case of error,; -2 in case end locator magic is not found (i.e. not a zip64 file) and; offset of Zip64 end of central directory record in case of success. Int_t ReadZip64EndRecord(Long64_t pos); Read Zip64 end of central directory record. Returns -1 in case of error; and 0 in case of success. Int_t ReadDirectory(); Read the directory of the ZIP archive. Returns -1 in case of error,; 0 otherwise. Int_t ReadMemberHeader(TZIPMember* member); Read the member header of the ZIP archive. Sets the position where; the data starts in the member object. Returns -1 in case of error,; 0 otherwise. Int_t DecodeZip64ExtendedExtraField(TZIPMember* m, Bool_t global = kTRUE); Decode the Zip64 extended extra field. If global is true, decode the; extra field coming from the central directory, if false decode the; extra field coming from the local file header. Returns -1 in case of; error, -2 in case Zip64 extra block was not found and 0 in case of; success. Int_t SetCurrentMember(); Find the desired member in the member array and make it the; current member. Returns -1 in case member is not found, 0 otherwise. UInt_t Get(const void* buffer, Int_t bytes); Read a ""bytes"" long little-endian integer value from ""buffer"". ULong64_t Get64(const void* buffer, Int_t bytes); Read a 8 byte long little-endian integer value from ""buffer"". void Print(Option_t* option = """") const; Pretty print ZIP archive members. TZIPFile(const TZIPFile& ). TZIPFile& operator=(const TZIPFile& ). virtual ~TZIPFile(); { }. » Author: Fons Rademakers 30/6/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TZIPFile.html:13204,error,error,13204,root/html534/TZIPFile.html,https://root.cern,https://root.cern/root/html534/TZIPFile.html,2,['error'],['error']
Availability,"e; out where the central directory begins. Returns -1 in case of error,; 0 otherwise. Long64_t ReadZip64EndLocator(Long64_t pos); Read Zip64 end of central directory locator. Returns -1 in case of error,; -2 in case end locator magic is not found (i.e. not a zip64 file) and; offset of Zip64 end of central directory record in case of success. Int_t ReadZip64EndRecord(Long64_t pos); Read Zip64 end of central directory record. Returns -1 in case of error; and 0 in case of success. Int_t ReadDirectory(); Read the directory of the ZIP archive. Returns -1 in case of error,; 0 otherwise. Int_t ReadMemberHeader(TZIPMember* member); Read the member header of the ZIP archive. Sets the position where; the data starts in the member object. Returns -1 in case of error,; 0 otherwise. Int_t DecodeZip64ExtendedExtraField(TZIPMember* m, Bool_t global = kTRUE); Decode the Zip64 extended extra field. If global is true, decode the; extra field coming from the central directory, if false decode the; extra field coming from the local file header. Returns -1 in case of; error, -2 in case Zip64 extra block was not found and 0 in case of; success. Int_t SetCurrentMember(); Find the desired member in the member array and make it the; current member. Returns -1 in case member is not found, 0 otherwise. UInt_t Get(const void* buffer, Int_t bytes); Read a ""bytes"" long little-endian integer value from ""buffer"". ULong64_t Get64(const void* buffer, Int_t bytes); Read a 8 byte long little-endian integer value from ""buffer"". void Print(Option_t* option = """") const; Pretty print ZIP archive members. TZIPFile(const TZIPFile& ). TZIPFile& operator=(const TZIPFile& ). virtual ~TZIPFile(); { }. » Author: Fons Rademakers 30/6/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-06-02 16:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TZIPFile.html:17300,error,error,17300,root/html604/TZIPFile.html,https://root.cern,https://root.cern/root/html604/TZIPFile.html,2,['error'],['error']
Availability,"e; out where the central directory begins. Returns -1 in case of error,; 0 otherwise. Long64_t ReadZip64EndLocator(Long64_t pos); Read Zip64 end of central directory locator. Returns -1 in case of error,; -2 in case end locator magic is not found (i.e. not a zip64 file) and; offset of Zip64 end of central directory record in case of success. Int_t ReadZip64EndRecord(Long64_t pos); Read Zip64 end of central directory record. Returns -1 in case of error; and 0 in case of success. Int_t ReadDirectory(); Read the directory of the ZIP archive. Returns -1 in case of error,; 0 otherwise. Int_t ReadMemberHeader(TZIPMember* member); Read the member header of the ZIP archive. Sets the position where; the data starts in the member object. Returns -1 in case of error,; 0 otherwise. Int_t DecodeZip64ExtendedExtraField(TZIPMember* m, Bool_t global = kTRUE); Decode the Zip64 extended extra field. If global is true, decode the; extra field coming from the central directory, if false decode the; extra field coming from the local file header. Returns -1 in case of; error, -2 in case Zip64 extra block was not found and 0 in case of; success. Int_t SetCurrentMember(); Find the desired member in the member array and make it the; current member. Returns -1 in case member is not found, 0 otherwise. UInt_t Get(const void* buffer, Int_t bytes); Read a ""bytes"" long little-endian integer value from ""buffer"". ULong64_t Get64(const void* buffer, Int_t bytes); Read a 8 byte long little-endian integer value from ""buffer"". void Print(Option_t* option = """") const; Pretty print ZIP archive members. TZIPFile(const TZIPFile& ). TZIPFile& operator=(const TZIPFile& ). virtual ~TZIPFile(); { }. » Author: Fons Rademakers 30/6/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-06-30 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TZIPFile.html:17300,error,error,17300,root/html602/TZIPFile.html,https://root.cern,https://root.cern/root/html602/TZIPFile.html,2,['error'],['error']
Availability,"e; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » ASIMAGE; » TASImage. class TASImage: public TImage. Image class; TASImage is the concrete interface to the image processing library; libAfterImage. It allows reading and writing of images in different formats, several image; manipulations (scaling, tiling, merging, etc.) and displaying in pads. The size; of the image on the screen does not depend on the original size of the image but; on the size of the pad. Therefore it is very easy to resize the image on the; screen by resizing the pad. Besides reading an image from a file an image can be defined by a two; dimensional array of values. A palette defines the color of each value. The image can be zoomed by defining a rectangle with the mouse. The color; palette can be modified with a GUI, just select StartPaletteEditor() from the; context menu. Several examples showing how to use this class are available in the; ROOT tutorials: $ROOTSYS/tutorials/image/; . Function Members (Methods); public:. TASImage(); TASImage(const TASImage& img); TASImage(UInt_t w, UInt_t h); TASImage(const char* file, TImage::EImageFileTypes type = kUnknown); TASImage(const char* name, const TArrayD& imageData, UInt_t width, TImagePalette* palette = 0); TASImage(const char* name, const TVectorD& imageData, UInt_t width, TImagePalette* palette = 0); TASImage(const char* name, const Double_t* imageData, UInt_t width, UInt_t height, TImagePalette* palette = 0); virtual~TASImage(); voidTObject::AbstractMethod(const char* method) const; static UInt_tAlphaBlend(UInt_t bot, UInt_t top); virtual voidAppend(const TImage* im, const char* option = ""+"", const char* color = ""#00000000""); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBeginPaint(Bool_t fast = kTRUE); virtual voidBevel(Int_t x = 0, Int_t y = 0, UInt_t width = 0, UInt_t height = 0, const char* hi = ""#ffdddddd"", const char* lo = ""#ff55555",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TASImage.html:1093,avail,available,1093,root/html534/TASImage.html,https://root.cern,https://root.cern/root/html534/TASImage.html,2,['avail'],['available']
Availability,"e; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » ASIMAGE; » TASImage. class TASImage: public TImage. Image class; TASImage is the concrete interface to the image processing library; libAfterImage. It allows reading and writing of images in different formats, several image; manipulations (scaling, tiling, merging, etc.) and displaying in pads. The size; of the image on the screen does not depend on the original size of the image but; on the size of the pad. Therefore it is very easy to resize the image on the; screen by resizing the pad. Besides reading an image from a file an image can be defined by a two; dimensional array of values. A palette defines the color of each value. The image can be zoomed by defining a rectangle with the mouse. The color; palette can be modified with a GUI, just select StartPaletteEditor() from the; context menu. Several examples showing how to use this class are available in the; ROOT tutorials: $ROOTSYS/tutorials/image/; . Function Members (Methods); public:. virtual~TASImage(); voidTObject::AbstractMethod(const char* method) const; static UInt_tAlphaBlend(UInt_t bot, UInt_t top); virtual voidAppend(const TImage* im, const char* option = ""+"", const char* color = ""#00000000""); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBeginPaint(Bool_t fast = kTRUE); virtual voidBevel(Int_t x = 0, Int_t y = 0, UInt_t width = 0, UInt_t height = 0, const char* hi = ""#ffdddddd"", const char* lo = ""#ff555555"", UShort_t thick = 1, Bool_t pressed = kFALSE); virtual voidBlur(Double_t hr = 3, Double_t vr = 3)MENU ; virtual voidBrowse(TBrowser*); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*Clone(const char* newname) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidCopyArea(TImage* dst, I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TASImage.html:1093,avail,available,1093,root/html602/TASImage.html,https://root.cern,https://root.cern/root/html602/TASImage.html,4,['avail'],['available']
Availability,"e; static TGX11TTF::EAlignkTCenter; static TGX11TTF::EAlignkTLeft; static TGX11TTF::EAlignkTRight. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGX11TTF(const TGX11& org); Create copy of TGX11 but now use TrueType fonts. void Activate(); Static method setting TGX11TTF as the acting gVirtualX. Bool_t Init(void* display); Initialize X11 system. Returns kFALSE in case of failure. void Align(void); Compute alignment variables. The alignment is done on the horizontal string; then the rotation is applied on the alignment variables.; SetRotation and LayoutGlyphs should have been called before. void DrawImage(FT_Bitmap* source, ULong_t fore, ULong_t back, RXImage* xim, Int_t bx, Int_t by); Draw FT_Bitmap bitmap to xim image at position bx,by using specified; foreground color. void DrawText(Int_t x, Int_t y, Float_t angle, Float_t mgn, const char* text, TVirtualX::ETextMode mode); Draw text using TrueType fonts. If TrueType fonts are not available the; text is drawn with TGX11::DrawText. void DrawText(Int_t x, Int_t y, Float_t angle, Float_t mgn, const wchar_t* text, TVirtualX::ETextMode mode); Draw text using TrueType fonts. If TrueType fonts are not available the; text is drawn with TGX11::DrawText. RXImage * GetBackground(Int_t x, Int_t y, UInt_t w, UInt_t h); Get the background of the current window in an XImage. Bool_t IsVisible(Int_t x, Int_t y, UInt_t w, UInt_t h); Test if there is really something to render. void RenderString(Int_t x, Int_t y, TVirtualX::ETextMode mode); Perform the string rendering in the pad.; LayoutGlyphs should have been called before. void SetTextFont(Font_t fontnumber); Set specified font. Int_t SetTextFont(char* fontname, TVirtualX::ETextSetMode mode); Set text font to specified name.; mode : loading flag; mode=0 : search if the font exist (kCheck); mode=1 : search the font and load it if it exists (kLoad); font : font name. Set text font to specified name. This function returns 0 if; the specified ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGX11TTF.html:27762,avail,available,27762,root/html602/TGX11TTF.html,https://root.cern,https://root.cern/root/html602/TGX11TTF.html,4,['avail'],['available']
Availability,"e; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TObjArrayfAxesaxes of the histogram; TObjArrayfBrowsables! browser-helpers for each axis; Double_tfEntriesnumber of entries, spread over chunks; Double_t*fIntegral! array with bin weight sums; enum(anonymous)fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tfNdimensionsnumber of dimensions; TStringTNamed::fTitleobject title; Double_tfTsumwtotal sum of weights; Double_tfTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDfTsumwxtotal sum of weight*X for each dimension; TArrayDfTsumwx2total sum of weight*X*X for each dimension; static THnBase::(anonymous)kInvalidInt; static THnBase::(anonymous)kNoInt; static THnBase::(anonymous)kValidInt. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THnBase(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); Construct a THnBase with ""dim"" dimensions,; ""nbins"" holds the number of bins for each dimension;; ""xmin"" and ""xmax"" the minimal and maximal value for each dimension.; The arrays ""xmin"" and ""xmax"" can be NULL; in that case SetBinEdges(); must be called for each dimension. ~THnBase(); Destruct a THnBase. THnBase* CloneEmpty(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; Create a new THnBase obj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnBase.html:10645,error,errors,10645,root/html602/THnBase.html,https://root.cern,https://root.cern/root/html602/THnBase.html,4,['error'],['errors']
Availability,"e;  This method is not implemented. ;  ; double Integral (double a, double b) override;  Returns Integral of function between a and b. ;  ; double IntegralCauchy (double a, double b, double c) override;  This method is not implemented. ;  ; double IntegralLow (double b) override;  Returns Integral of function on a lower semi-infinite interval. ;  ; double IntegralUp (double a) override;  Returns Integral of function on an upper semi-infinite interval. ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  Returns the result of the last Integral calculation. ;  ; void SetAbsTolerance (double eps) override;  This method is not implemented. ;  ; void SetFunction (const IGenFunction &) override;  Set integration function (flag control if function must be copied inside). ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options (should be re-implemented by derived classes -if more options than tolerance exist ;  ; void SetRelTolerance (double eps) override;  Set the desired relative Error. ;  ; int Status () const override;  return the status of the last integration - 0 in case of success ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  ; virtual int NEval () const;  return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ;  . Protected Attributes; double fEpsAbs;  Absolute error. ;  ; double fEpsRel;  Relative error. ;  ; const IGenFunction * fFunction;  Pointer to function used. ;  ; double fLastError;  Error from the last estimation. ;  ; double fLastRe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:2166,toler,tolerance,2166,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,1,['toler'],['tolerance']
Availability,"e;; 259 ; 260 if (fPrintLevel >= 1); 261 std::cout << ""GSLMultiRootFinder::Solve:"" << Name() << "" max iterations "" << maxIter << "" and tolerance "" << absTol << std::endl;; 262 ; 263 // find the roots by iterating; 264 fStatus = 0;; 265 int status = 0;; 266 int iter = 0;; 267 do {; 268 iter++;; 269 status = fSolver->Iterate();; 270 ; 271 if (fPrintLevel >= 2) {; 272 std::cout << ""GSLMultiRootFinder::Solve - iteration # "" << iter << "" status = "" << status << std::endl;; 273 PrintState();; 274 }; 275 // act in case of error; 276 if (status == GSL_EBADFUNC) {; 277 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""The iteration encountered a singular point due to a bad function value"");; 278 fStatus = status;; 279 break;; 280 }; 281 if (status == GSL_ENOPROG) {; 282 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""The iteration is not making any progress"");; 283 fStatus = status;; 284 break;; 285 }; 286 if (status != GSL_SUCCESS) {; 287 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""Unknown iteration error - exit"");; 288 fStatus = status;; 289 break;; 290 }; 291 ; 292 // test also residual; 293 status = fSolver->TestResidual(absTol);; 294 ; 295 ; 296 // should test also the Delta ??; 297 int status2 = fSolver->TestDelta(absTol, relTol);; 298 if (status2 == GSL_SUCCESS) {; 299 MATH_INFO_MSG(""GSLMultiRootFinder::Solve"",""The iteration converged"");; 300 }; 301 }; 302 while (status == GSL_CONTINUE && iter < maxIter);; 303 if (status == GSL_CONTINUE) {; 304 MATH_INFO_MSGVAL(""GSLMultiRootFinder::Solve"",""exceeded max iterations, reached tolerance is not sufficient"",absTol);; 305 }; 306 if (status == GSL_SUCCESS) {; 307 if (fPrintLevel>=1) { // print the result; 308 MATH_INFO_MSG(""GSLMultiRootFinder::Solve"",""The iteration converged"");; 309 std::cout << ""GSL Algorithm used is : "" << fSolver->Name() << std::endl;; 310 std::cout << ""Number of iterations = "" << iter<< std::endl;; 311 ; 312 PrintState();; 313 }; 314 }; 315 fIter = iter;; 316 fStatus = status;; 317 return (fStatus == GSL_SUCCESS);; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:10302,error,error,10302,doc/master/GSLMultiRootFinder_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html,1,['error'],['error']
Availability,"e< T; ROOT::InternalDefinition TErrorDefaultHandler.hxx:16; ROOT::Internal::GetSymInLibImtstatic Func_t GetSymInLibImt(const char *funcname)Definition TROOT.cxx:401; ROOT::Internal::gGetROOTstatic GetROOTFun_t gGetROOTDefinition TROOT.cxx:399; ROOT::Internal::gROOTLocalR__EXTERN TROOT * gROOTLocalDefinition TROOT.h:379; ROOT::Internal::DisableParBranchProcessingvoid DisableParBranchProcessing()Globally disables the IMT use case of parallel branch processing, deactivating the corresponding lock...Definition TROOT.cxx:434; ROOT::Internal::ErrorSystemMsgHandlerFunc_tstd::function< const char *()> ErrorSystemMsgHandlerFunc_tRetrieves the error string associated with the last system error.Definition TError.h:59; ROOT::Internal::IsImplicitMTEnabledImplstatic Bool_t & IsImplicitMTEnabledImpl()Keeps track of the status of ImplicitMT w/o resorting to the load of libImt.Definition TROOT.cxx:463; ROOT::Internal::MinimalErrorHandlervoid MinimalErrorHandler(int level, Bool_t abort, const char *location, const char *msg)A very simple error handler that is usually replaced by the TROOT default error handler.Definition TError.cxx:67; ROOT::Internal::GetROOTFun_tTROOT *(* GetROOTFun_t)()Definition TROOT.cxx:397; ROOT::Internal::SetErrorSystemMsgHandlerErrorSystemMsgHandlerFunc_t SetErrorSystemMsgHandler(ErrorSystemMsgHandlerFunc_t h)Returns the previous system error message handler.Definition TError.cxx:56; ROOT::Internal::EnableParBranchProcessingvoid EnableParBranchProcessing()Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in...Definition TROOT.cxx:420; ROOT::Internal::IsParBranchProcessingEnabledBool_t IsParBranchProcessingEnabled()Returns true if parallel branch processing is enabled.Definition TROOT.cxx:447; ROOT::Internal::GetROOT2TROOT * GetROOT2()Definition TROOT.cxx:387; ROOT::Internal::GetROOT1TROOT * GetROOT1()Definition TROOT.cxx:380; ROOT::Internal::ReleaseDefaultErrorHandlervoid ReleaseDefaultErrorHandler()Destructs r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TROOT_8cxx_source.html:171419,error,error,171419,doc/v632/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TROOT_8cxx_source.html,2,['error'],['error']
Availability,"e< T; ROOT::InternalDefinition TErrorDefaultHandler.hxx:16; ROOT::Internal::GetSymInLibImtstatic Func_t GetSymInLibImt(const char *funcname)Definition TROOT.cxx:401; ROOT::Internal::gGetROOTstatic GetROOTFun_t gGetROOTDefinition TROOT.cxx:399; ROOT::Internal::gROOTLocalR__EXTERN TROOT * gROOTLocalDefinition TROOT.h:379; ROOT::Internal::DisableParBranchProcessingvoid DisableParBranchProcessing()Globally disables the IMT use case of parallel branch processing, deactivating the corresponding lock...Definition TROOT.cxx:434; ROOT::Internal::ErrorSystemMsgHandlerFunc_tstd::function< const char *()> ErrorSystemMsgHandlerFunc_tRetrieves the error string associated with the last system error.Definition TError.h:60; ROOT::Internal::IsImplicitMTEnabledImplstatic Bool_t & IsImplicitMTEnabledImpl()Keeps track of the status of ImplicitMT w/o resorting to the load of libImt.Definition TROOT.cxx:463; ROOT::Internal::MinimalErrorHandlervoid MinimalErrorHandler(int level, Bool_t abort, const char *location, const char *msg)A very simple error handler that is usually replaced by the TROOT default error handler.Definition TError.cxx:67; ROOT::Internal::GetROOTFun_tTROOT *(* GetROOTFun_t)()Definition TROOT.cxx:397; ROOT::Internal::SetErrorSystemMsgHandlerErrorSystemMsgHandlerFunc_t SetErrorSystemMsgHandler(ErrorSystemMsgHandlerFunc_t h)Returns the previous system error message handler.Definition TError.cxx:56; ROOT::Internal::EnableParBranchProcessingvoid EnableParBranchProcessing()Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in...Definition TROOT.cxx:420; ROOT::Internal::IsParBranchProcessingEnabledBool_t IsParBranchProcessingEnabled()Returns true if parallel branch processing is enabled.Definition TROOT.cxx:447; ROOT::Internal::GetROOT2TROOT * GetROOT2()Definition TROOT.cxx:387; ROOT::Internal::GetROOT1TROOT * GetROOT1()Definition TROOT.cxx:380; ROOT::Internal::ReleaseDefaultErrorHandlervoid ReleaseDefaultErrorHandler()Destructs r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:171595,error,error,171595,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,2,['error'],['error']
Availability,"e<RLoopManager> Cache(std::initializer_list<std::string> columnList); 1547 {; 1548 ColumnNames_t selectedColumns(columnList);; 1549 return Cache(selectedColumns);; 1550 }; 1551 ; 1552 // clang-format off; 1553 ////////////////////////////////////////////////////////////////////////////; 1554 /// \brief Creates a node that filters entries based on range: [begin, end).; 1555 /// \param[in] begin Initial entry number considered for this range.; 1556 /// \param[in] end Final entry number (excluded) considered for this range. 0 means that the range goes until the end of the dataset.; 1557 /// \param[in] stride Process one entry of the [begin, end) range every `stride` entries. Must be strictly greater than 0.; 1558 /// \return the first node of the computation graph for which the event loop is limited to a certain range of entries.; 1559 ///; 1560 /// Note that in case of previous Ranges and Filters the selected range refers to the transformed dataset.; 1561 /// Ranges are only available if EnableImplicitMT has _not_ been called. Multi-thread ranges are not supported.; 1562 ///; 1563 /// ### Example usage:; 1564 /// ~~~{.cpp}; 1565 /// auto d_0_30 = d.Range(0, 30); // Pick the first 30 entries; 1566 /// auto d_15_end = d.Range(15, 0); // Pick all entries from 15 onwards; 1567 /// auto d_15_end_3 = d.Range(15, 0, 3); // Stride: from event 15, pick an event every 3; 1568 /// ~~~; 1569 // clang-format on; 1570 RInterface<RDFDetail::RRange<Proxied>, DS_t> Range(unsigned int begin, unsigned int end, unsigned int stride = 1); 1571 {; 1572 // check invariants; 1573 if (stride == 0 || (end != 0 && end < begin)); 1574 throw std::runtime_error(""Range: stride must be strictly greater than 0 and end must be greater than begin."");; 1575 CheckIMTDisabled(""Range"");; 1576 ; 1577 using Range_t = RDFDetail::RRange<Proxied>;; 1578 auto rangePtr = std::make_shared<Range_t>(begin, end, stride, fProxiedPtr);; 1579 RInterface<RDFDetail::RRange<Proxied>, DS_t> newInterface(std::move(rangePtr), *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:87493,avail,available,87493,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['avail'],['available']
Availability,"e=-1);  Create a parallel socket. ;  ;  TPSocket (const char *host, Int_t port, Int_t size, Int_t tcpwindowsize=-1);  Create a parallel socket. ;  ;  TPSocket (const char *host, Int_t port, Int_t size, TSocket *sock);  Create a parallel socket on a connection already opened via TSocket sock. ;  ;  TPSocket (TInetAddress address, const char *service, Int_t size, Int_t tcpwindowsize=-1);  Create a parallel socket. ;  ;  TPSocket (TInetAddress address, Int_t port, Int_t size, Int_t tcpwindowsize=-1);  Create a parallel socket. ;  ; virtual ~TPSocket ();  Cleanup the parallel socket. ;  ; void Close (Option_t *opt="""") override;  Close a parallel socket. ;  ; Int_t GetDescriptor () const override;  Return socket descriptor. ;  ; Int_t GetErrorCode () const;  Returns error code. ;  ; TInetAddress GetLocalInetAddress () override;  Return internet address of local host to which the socket is bound. ;  ; Int_t GetOption (ESockOptions opt, Int_t &val) override;  Get socket options. Returns -1 in case of error. ;  ; Int_t GetSize () const;  ; TClass * IsA () const override;  ; Bool_t IsValid () const override;  ; Int_t Recv (char *mess, Int_t max) override;  Receive a character string message of maximum max length. ;  ; Int_t Recv (char *mess, Int_t max, Int_t &kind) override;  Receive a character string message of maximum max length. ;  ; Int_t Recv (Int_t &status, Int_t &kind) override;  Receives a status and a message type. ;  ; Int_t Recv (TMessage *&mess) override;  Receive a TMessage object. ;  ; Int_t RecvRaw (void *buffer, Int_t length, ESendRecvOptions opt=kDefault) override;  Send a raw buffer of specified length. ;  ; Int_t Send (const char *mess, Int_t kind=kMESS_STRING) override;  Send a character string buffer. ;  ; Int_t Send (const TMessage &mess) override;  Send a TMessage object. ;  ; Int_t Send (Int_t kind) override;  Send a single message opcode. ;  ; Int_t Send (Int_t status, Int_t kind) override;  Send a status and a single message opcode. ;  ; Int_t SendR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPSocket.html:1466,error,error,1466,doc/master/classTPSocket.html,https://root.cern,https://root.cern/doc/master/classTPSocket.html,1,['error'],['error']
Availability,"e=1, const ROOT::Math::IMultiGenFunction *chi2func=nullptr, unsigned int ncalls=0)Fill the fit result from a Minimizer instance after fitting Run also Minos if requested from the conf...Definition FitResult.cxx:100; ROOT::Fit::FitResult::UpperErrordouble UpperError(unsigned int i) constupper Minos error. If Minos has not run for parameter i return the parabolic errorDefinition FitResult.cxx:339; ROOT::Fit::FitResult::fValdouble fValminimum function valueDefinition FitResult.h:350; ROOT::Fit::FitResult::fEdmdouble fEdmexpected distance from minimumDefinition FitResult.h:351; ROOT::Fit::FitResult::fErrorsstd::vector< double > fErrorserrorsDefinition FitResult.h:361; ROOT::Fit::FitResult::NormalizedErrorsbool NormalizedErrors() constflag to check if errors are normalizedDefinition FitResult.h:308; ROOT::Fit::FitResult::Errorsconst std::vector< double > & Errors() constparameter errors (return st::vector)Definition FitResult.h:162; ROOT::Fit::FitResult::GetErrorsconst double * GetErrors() constparameter errors (return const pointer)Definition FitResult.h:164; ROOT::Fit::FitResult::fMinimizerstd::shared_ptr< ROOT::Math::Minimizer > fMinimizer! minimizer object used for fittingDefinition FitResult.h:353; ROOT::Fit::FitResult::fValidbool fValidflag for indicating valid fitDefinition FitResult.h:343; ROOT::Fit::FitResult::IsParameterFixedbool IsParameterFixed(unsigned int ipar) constquery if a parameter is fixedDefinition FitResult.cxx:365; ROOT::Fit::FitResult::fNdfunsigned int fNdfnumber of degree of freedomDefinition FitResult.h:346; ROOT::Fit::FitResult::GetParamsconst double * GetParams() constparameter values (return const pointer)Definition FitResult.h:169; ROOT::Fit::FitResult::IModelFunctionROOT::Math::IParamMultiFunction IModelFunctionDefinition FitResult.h:51; ROOT::Fit::FitResult::Errordouble Error(unsigned int i) constparameter error by indexDefinition FitResult.h:179; ROOT::Fit::FitResult::CovMatrixdouble CovMatrix(unsigned int i, unsigned int j) constretrieve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/FitResult_8h_source.html:18682,error,errors,18682,doc/master/FitResult_8h_source.html,https://root.cern,https://root.cern/doc/master/FitResult_8h_source.html,1,['error'],['errors']
Availability,"e=false, TString indent="""") const override;  Print info about this histogram to the specified output stream. ;  ; void printName (std::ostream &os) const override;  Print name of RooHist. ;  ; void printTitle (std::ostream &os) const override;  Print title of RooHist. ;  ; void setRawEntries (double n);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGraphAsymmErrors;  TGraphAsymmErrors ();  TGraphAsymmErrors default constructor. ;  ;  TGraphAsymmErrors (const char *filename, const char *format=""%lg %lg %lg %lg %lg %lg"", Option_t *option="""");  TGraphAsymmErrors constructor reading input from filename filename is assumed to contain at least 2 columns of numbers. ;  ;  TGraphAsymmErrors (const TGraphAsymmErrors &gr);  TGraphAsymmErrors copy constructor. ;  ;  TGraphAsymmErrors (const TH1 *h);  TGraphAsymmErrors constructor importing its parameters from the TH1 object passed as argument the low and high errors are set to the bin error of the histogram. ;  ;  TGraphAsymmErrors (const TH1 *pass, const TH1 *total, Option_t *option="""");  Creates a TGraphAsymmErrors by dividing two input TH1 histograms: pass/total. ;  ;  TGraphAsymmErrors (const TVectorD &vx, const TVectorD &vy, const TVectorD &vexl, const TVectorD &vexh, const TVectorD &veyl, const TVectorD &veyh);  Constructor with six vectors of doubles in input A grapherrors is built with the X coordinates taken from vx and Y coord from vy and the errors from vectors vexl/h and veyl/h. ;  ;  TGraphAsymmErrors (const TVectorF &vx, const TVectorF &vy, const TVectorF &vexl, const TVectorF &vexh, const TVectorF &veyl, const TVectorF &veyh);  Constructor with six vectors of floats in input A grapherrors is built with the X coordinates taken from vx and Y coord from vy and the errors from vectors vexl/h and veyl/h. ;  ;  TGraphAsymmErrors (Int_t n);  TGraphAsymmErrors normal constructor. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHist.html:6036,error,errors,6036,doc/master/classRooHist.html,https://root.cern,https://root.cern/doc/master/classRooHist.html,2,['error'],"['error', 'errors']"
Availability,"e=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; MsgLogger & Log () const;  . Private Attributes; Double_t fAbsTol;  absolute tolerance deviation ;  ; MsgLogger * fLogger;  ! message logger ;  ; Int_t fMaxIter;  maximum number of iterations ;  ; MethodBase * fMethod;  ; Double_t fRootMax;  maximum root value ;  ; Double_t fRootMin;  minimum root value ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *locati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RootFinder.html:9300,toler,tolerance,9300,doc/master/classTMVA_1_1RootFinder.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RootFinder.html,1,['toler'],['tolerance']
Availability,"e> newVariation{new RVariation<std::decay_t<F>, IsSingleColumn>(; 569 std::move(variedColNames), variationName, std::forward<F>(f), std::move(tags), jittedVariation->GetTypeName(),; 570 *colRegister, *lm, inputColNames)};; 571 jittedVariation->SetVariation(std::move(newVariation));; 572 ; 573 doDeletes();; 574}; 575 ; 576/// Convenience function invoked by jitted code to build action nodes at runtime; 577template <typename ActionTag, typename... ColTypes, typename PrevNodeType, typename HelperArgType>; 578void CallBuildAction(std::shared_ptr<PrevNodeType> *prevNodeOnHeap, const char **colsPtr, std::size_t colsSize,; 579 const unsigned int nSlots, std::shared_ptr<HelperArgType> *helperArgOnHeap,; 580 std::weak_ptr<RJittedAction> *wkJittedActionOnHeap, RColumnRegister *colRegister) noexcept; 581{; 582 // a helper to delete objects allocated before jitting, so that the jitter can share data with lazily jitted code; 583 auto doDeletes = [&] {; 584 delete[] colsPtr;; 585 delete helperArgOnHeap;; 586 delete wkJittedActionOnHeap;; 587 // colRegister must be deleted before prevNodeOnHeap because their dtor needs the RLoopManager to be alive; 588 // and prevNodeOnHeap is what keeps it alive if the rest of the computation graph is already out of scope; 589 delete colRegister;; 590 delete prevNodeOnHeap;; 591 };; 592 ; 593 if (wkJittedActionOnHeap->expired()) {; 594 // The branch of the computation graph that needed this jitted variation went out of scope between the type; 595 // jitting was booked and the time jitting actually happened. Nothing to do other than cleaning up.; 596 doDeletes();; 597 return;; 598 }; 599 ; 600 const ColumnNames_t cols(colsPtr, colsPtr + colsSize);; 601 ; 602 auto jittedActionOnHeap = wkJittedActionOnHeap->lock();; 603 ; 604 // if we are here it means we are jitting, if we are jitting the loop manager must be alive; 605 auto &prevNodePtr = *prevNodeOnHeap;; 606 auto &loopManager = *prevNodePtr->GetLoopManagerUnchecked();; 607 using ColTypes_t = Type",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/InterfaceUtils_8hxx_source.html:26860,alive,alive,26860,doc/master/InterfaceUtils_8hxx_source.html,https://root.cern,https://root.cern/doc/master/InterfaceUtils_8hxx_source.html,2,['alive'],['alive']
Availability,"e>& min, vector<double>& max, double& content, double& error); static unsigned intROOT::Fit::FitData::MaxSize(); unsigned intNDim() const; unsigned intNPoints() const; ROOT::Fit::SparseData&operator=(const ROOT::Fit::SparseData&); const ROOT::Fit::DataOptions&ROOT::Fit::FitData::Opt() const; ROOT::Fit::DataOptions&ROOT::Fit::FitData::Opt(); voidPrintList() const; const ROOT::Fit::DataRange&ROOT::Fit::FitData::Range() const; ROOT::Fit::SparseDataSparseData(const ROOT::Fit::SparseData&); ROOT::Fit::SparseDataSparseData(vector<double>& min, vector<double>& max); ROOT::Fit::SparseDataSparseData(const unsigned int dim, double[] min, double[] max). Data Members; private:. ROOT::Fit::ProxyListBox*fList. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SparseData(vector<double>& min, vector<double>& max); Constructor with a vector. SparseData(const unsigned int dim, double[] min, double[] max); Constructor with a dimension and two arrays. ~SparseData(); Destructor. unsigned int NPoints() const; Returns the number of points stored. unsigned int NDim() const; Returns the dimension of the object (bins). void Add(vector<double>& min, vector<double>& max, const double content, const double error = 1.); Adds a new bin specified by the vectors. void PrintList() const; Debug method to print the list of bins stored. void GetBinData(ROOT::Fit::BinData& ) const; Transforms the data into a ROOT::Fit::BinData structure. void GetBinDataIntegral(ROOT::Fit::BinData& ) const; Same as before, but with integral format. void GetBinDataNoZeros(ROOT::Fit::BinData& ) const; Same as before, but including zero content bins. » Author: David Gonzalez Maline Wed Aug 28 15:23:43 2009 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Fit__SparseData.html:2305,error,error,2305,root/html602/ROOT__Fit__SparseData.html,https://root.cern,https://root.cern/root/html602/ROOT__Fit__SparseData.html,2,['error'],['error']
Availability,"e>& min, vector<double>& max, double& content, double& error); static unsigned intROOT::Fit::FitData::MaxSize(); unsigned intNDim() const; unsigned intNPoints() const; ROOT::Fit::SparseData&operator=(const ROOT::Fit::SparseData&); const ROOT::Fit::DataOptions&ROOT::Fit::FitData::Opt() const; ROOT::Fit::DataOptions&ROOT::Fit::FitData::Opt(); voidPrintList() const; const ROOT::Fit::DataRange&ROOT::Fit::FitData::Range() const; ROOT::Fit::SparseDataSparseData(const ROOT::Fit::SparseData&); ROOT::Fit::SparseDataSparseData(vector<double>& min, vector<double>& max); ROOT::Fit::SparseDataSparseData(const unsigned int dim, double[] min, double[] max). Data Members; private:. ROOT::Fit::ProxyListBox*fList. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SparseData(vector<double>& min, vector<double>& max); Constructor with a vector. SparseData(const unsigned int dim, double[] min, double[] max); Constructor with a dimension and two arrays. ~SparseData(); Destructor. unsigned int NPoints() const; Returns the number of points stored. unsigned int NDim() const; Returns the dimension of the object (bins). void Add(vector<double>& min, vector<double>& max, const double content, const double error = 1.); Adds a new bin specified by the vectors. void PrintList() const; Debug method to print the list of bins stored. void GetBinData(ROOT::Fit::BinData& ) const; Transforms the data into a ROOT::Fit::BinData structure. void GetBinDataIntegral(ROOT::Fit::BinData& ) const; Same as before, but with integral format. void GetBinDataNoZeros(ROOT::Fit::BinData& ) const; Same as before, but including zero content bins. » Author: David Gonzalez Maline Wed Aug 28 15:23:43 2009 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Fit__SparseData.html:2305,error,error,2305,root/html604/ROOT__Fit__SparseData.html,https://root.cern,https://root.cern/root/html604/ROOT__Fit__SparseData.html,2,['error'],['error']
Availability,"e>&); virtual~RooCFunction2Ref<double,int,double>(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); const char*argName(Int_t iarg); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; static RooCFunction2Map<double,int,double>&fmap(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Boo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCFunction2Ref_double_int_double_.html:2159,error,error,2159,root/html526/RooCFunction2Ref_double_int_double_.html,https://root.cern,https://root.cern/root/html526/RooCFunction2Ref_double_int_double_.html,6,['error'],['error']
Availability,"eAllSignalsBlocked ; (; ). static . Returns true if all signals are blocked. ; Definition at line 1049 of file TQObject.cxx. ◆ AreSignalsBlocked(). Bool_t TQObject::AreSignalsBlocked ; (; ); const. inline . Definition at line 91 of file TQObject.h. ◆ BlockAllSignals(). Bool_t TQObject::BlockAllSignals ; (; Bool_t ; b). static . Block or unblock all signals. Returns the previous block status. ; Definition at line 1057 of file TQObject.cxx. ◆ BlockSignals(). Bool_t TQObject::BlockSignals ; (; Bool_t ; b). inline . Definition at line 92 of file TQObject.h. ◆ ChangedBy(). virtual void TQObject::ChangedBy ; (; const char * ; method). inlinevirtual . Definition at line 199 of file TQObject.h. ◆ CheckConnectArgs(). Int_t TQObject::CheckConnectArgs ; (; TQObject * ; sender, . TClass * ; sender_class, . const char * ; signal, . TClass * ; receiver_class, . const char * ; slot . ). staticprotected . Checking of consistency of sender/receiver methods/arguments. ; Returns -1 on error, otherwise number or arguments of signal function. Static method. ; Definition at line 179 of file TQObject.cxx. ◆ Class(). static TClass * TQObject::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TQObject::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TQObject::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 229 of file TQObject.h. ◆ CollectClassSignalLists(). void TQObject::CollectClassSignalLists ; (; TList & ; list, . TClass * ; cls . ). Collect class signal lists from class cls and all its base-classes. ; The recursive traversal is not performed for classes not deriving from TQClass. ; Definition at line 451 of file TQObject.cxx. ◆ CompressName(). TString TQObject::CompressName ; (; const char * ; method_name). staticprotected . Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQObject.html:8413,error,error,8413,doc/master/classTQObject.html,https://root.cern,https://root.cern/doc/master/classTQObject.html,1,['error'],['error']
Availability,"eAllocate internal data structures for newsize points.Definition TGraphErrors.h:81; TGraphErrors::SwapPointsvoid SwapPoints(Int_t pos1, Int_t pos2) overrideSwap points.Definition TGraphErrors.cxx:856; TGraphErrors::ApplyXvirtual void ApplyX(TF1 *f)Apply function to all the data points .Definition TGraphErrors.cxx:426; TGraphErrors::GetErrorXhighDouble_t GetErrorXhigh(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:635; TGraphErrors::GetErrorYlowDouble_t GetErrorYlow(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:671; TGraphErrors::GetErrorYhighDouble_t GetErrorYhigh(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:659; TGraphErrors::operator=TGraphErrors & operator=(const TGraphErrors &gr)TGraphErrors assignment operator.Definition TGraphErrors.cxx:184; TGraphErrors::CopyPointsBool_t CopyPoints(Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy errors from fEX and fEY to arrays[0] and arrays[1] or to fEX and fEY if arrays == 0 and ibegin !...Definition TGraphErrors.cxx:532; TGraphErrors::MergeInt_t Merge(TCollection *list) overrideAdds all graphs with errors from the collection to this graph.Definition TGraphErrors.cxx:682; TGraphErrors::CopyAndReleasevoid CopyAndRelease(Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy and release.Definition TGraphErrors.cxx:510; TGraphErrors::TGraphErrorsTGraphErrors()TGraphErrors default constructor.Definition TGraphErrors.cxx:69; TGraphErrors::GetErrorXlowDouble_t GetErrorXlow(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:647; TGraphErrors::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *option="""") overrideSave primitive as a C++ statement(s) on output stream out.Definition TGraphErrors.cxx:722; TGraphErrors::Applyvoid Apply(TF1 *f) overrideApply function to all the data points .Definition TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphErrors_8h_source.html:9656,error,errors,9656,doc/master/TGraphErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphErrors_8h_source.html,1,['error'],['errors']
Availability,"eAsvoid SaveAs(const char *filename=""hist"", Option_t *option="""") const overrideSave the histogram as .csv, .tsv or .txt.Definition TH1.cxx:7181; TH1::SetTitleFontvirtual void SetTitleFont(Style_t font=62, Option_t *axis=""X"")Set the axis' title font.Definition Haxis.cxx:323; TH1::GetQuantilesvirtual Int_t GetQuantiles(Int_t n, Double_t *xp, const Double_t *p=nullptr)Compute Quantiles for this histogram Quantile x_p := Q(p) is defined as the value x_p such that the c...Definition TH1.cxx:4611; TH1::GetAxisColorvirtual Color_t GetAxisColor(Option_t *axis=""X"") constReturn the number of divisions for ""axis"".Definition Haxis.cxx:40; TH1::CloneTObject * Clone(const char *newname="""") const overrideMake a complete copy of the underlying object.Definition TH1.cxx:2752; TH1::GetStdDevErrorvirtual Double_t GetStdDevError(Int_t axis=1) constReturn error of standard deviation estimation for Normal distribution.Definition TH1.cxx:7655; TH1::Dividevirtual Bool_t Divide(TF1 *f1, Double_t c1=1)Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2),...Definition TH1.cxx:2840; TH1::GetMinimumvirtual Double_t GetMinimum(Double_t minval=-FLT_MAX) constReturn minimum value larger than minval of bins in the range, unless the value has been overridden by...Definition TH1.cxx:8635; TH1::LoggedInconsistencyint LoggedInconsistency(const char *name, const TH1 *h1, const TH1 *h2, bool useMerge=false) constDefinition TH1.cxx:883; TH1::CheckConsistentSubAxesstatic bool CheckConsistentSubAxes(const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0)Check that two sub axis are the same.Definition TH1.cxx:1640; TH1::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove object from the list of functions.Definition TH1.cxx:6576; TH1::fYaxisTAxis fYaxisY axis descriptor.Definition TH1.h:91; TH1::KolmogorovTestvirtual Double_t KolmogorovTest(const TH1 *h2, Option_t *option="""") constStatistical test of compati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8h_source.html:82284,error,errors,82284,doc/master/TH1_8h_source.html,https://root.cern,https://root.cern/doc/master/TH1_8h_source.html,1,['error'],['errors']
Availability,"eBinContent(). Double_t TH1::RetrieveBinContent ; (; Int_t ; bin); const. protectedvirtual . Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ; Reimplemented in TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH1K, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH2Poly, TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile, TProfile2D, and TProfile3D.; Definition at line 9439 of file TH1.cxx. ◆ SameLimitsAndNBins(). Bool_t TH1::SameLimitsAndNBins ; (; const TAxis & ; axis1, . const TAxis & ; axis2 . ). staticprotected . Same limits and bins. ; Definition at line 5898 of file TH1.cxx. ◆ SaveAs(). void TH1::SaveAs ; (; const char * ; filename = ""hist"", . Option_t * ; option = """" . ); const. overridevirtual . Save the histogram as .csv, .tsv or .txt. ; In case of any other extension, fall back to TObject::SaveAs, which saves as a .C macro (but with the file name extension specified by the user); The Under/Overflow bins are also exported (as first and last lines) The fist 2 columns are the lower and upper edges of the bins Column 3 contains the bin contents The last column contains the error in y. If errors are not present, the column is left empty; The result can be immediately imported into Excel, gnuplot, Python or whatever, without the needing to install pyroot, etc.; Parameters. filenamethe name of the file where to store the histogram ; optionsome tuning options. The file extension defines the delimiter used:; .csv : comma; .tsv : tab; .txt : space. If option = ""title"" a title line is generated. If the y-axis has a title, this title is displayed as column 3 name, otherwise, it shows ""BinContent"" ; Reimplemented from TObject.; Definition at line 7181 of file TH1.cxx. ◆ SavePrimitive(). void TH1::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TObject.; Reimplemented in TH1K, TH2Poly, TProfile, TProfile2D, and TProfile3D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:199553,error,error,199553,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['error'],['error']
Availability,"eByKeys ();  ; virtual void DetermineBySparseHist ();  ; virtual void DetermineInterval ();  ; virtual void DetermineShortestInterval ();  ; virtual void DetermineTailFractionInterval ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooRealVar ** fAxes = nullptr;  array of pointers to RooRealVars representing the axes of the histogram fAxes[0] represents x-axis, [1] y, [2] z, etc ;  ; MarkovChain * fChain = nullptr;  the markov chain ;  ; double fConfidenceLevel = 0.0;  Requested confidence level (eg. 0.95 for 95% CL) ;  ; RooRealVar * fCutoffVar = nullptr;  cutoff variable to use for integrating keys pdf ;  ; RooDataHist * fDataHist = nullptr;  the binned Markov Chain data ;  ; double fDelta = DEFAULT_DELTA;  topCutoff (a) considered == bottomCutoff (b) iff (std::abs(a - b) < std::abs(fDelta * (a + b)/2)); Theoretically, the Abs is not needed here, but floating-point arithmetic does not always work perfectly, and the Abs doesn't hurt ;  ; Int_t fDimension = 1;  number of variables ;  ; double fEpsilon = DEFAULT_EPSILON;  acceptable error for Keys interval determination ;  ; double fFull = 0.0;  Value of intergral of fProduct. ;  ; Heaviside * fHeaviside = nullptr;  the Heaviside function ;  ; TH1 * fHist = nullptr;  the binned Markov Chain data ;  ; double fHistConfLevel = 0.0;  the actual conf level determined by hist ;  ; double fHistCutoff = -1;  cutoff bin size to be in interval ;  ; enum IntervalType fIntervalType = kShortest;  ; bool fIsHistStrict = true;  whether the specified confidence level is a floor for the actual confidence level (strict), or a ceiling (not strict) for determination by histogram ;  ; double fKeysConfLevel = 0.0;  the actual conf level determined by keys ;  ; double fKeysCutoff = -1;  cutoff keys pdf value to be in interval ;  ; RooDataHist * fKeysD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1MCMCInterval.html:21919,error,error,21919,doc/master/classRooStats_1_1MCMCInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1MCMCInterval.html,1,['error'],['error']
Availability,"eByTheory(); does the normalization scale with luminosity. { return fNormalizeByTheory; }. std::string GetName(); get name of sample. { return fName; }. void SetName(const string& Name); set name of sample. { fName = Name; }. std::string GetInputFile(); get input ROOT file. { return fInputFile; }. void SetInputFile(const string& InputFile); set input ROOT file. { fInputFile = InputFile; }. std::string GetHistoName(); get histogram name. { return fHistoName; }. void SetHistoName(const string& HistoName); set histogram name. { fHistoName = HistoName; }. std::string GetHistoPath(); get histogram path. { return fHistoPath; }. void SetHistoPath(const string& HistoPath); set histogram path. { fHistoPath = HistoPath; }. std::string GetChannelName(); get name of associated channel. { return fChannelName; }. void SetChannelName(const string& ChannelName); set name of associated channel. { fChannelName = ChannelName; }. std::vector< RooStats::HistFactory::OverallSys >& GetOverallSysList(); { return fOverallSysList; }. std::vector< RooStats::HistFactory::NormFactor >& GetNormFactorList(); { return fNormFactorList; }. std::vector< RooStats::HistFactory::HistoSys >& GetHistoSysList(); { return fHistoSysList; }. std::vector< RooStats::HistFactory::HistoFactor >& GetHistoFactorList(); { return fHistoFactorList; }. std::vector< RooStats::HistFactory::ShapeSys >& GetShapeSysList(); { return fShapeSysList; }. std::vector< RooStats::HistFactory::ShapeFactor >& GetShapeFactorList(); { return fShapeFactorList; }. RooStats::HistFactory::StatError& GetStatError(); { return fStatError; }. void SetStatError(RooStats::HistFactory::StatError Error); { fStatError = Error; }. » Author: George Lewis, Kyle Cranmer » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-06-30 14:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HistFactory__Sample.html:7050,Error,Error,7050,root/html602/RooStats__HistFactory__Sample.html,https://root.cern,https://root.cern/root/html602/RooStats__HistFactory__Sample.html,2,['Error'],['Error']
Availability,"eByTheory(); does the normalization scale with luminosity. { return fNormalizeByTheory; }. std::string GetName(); get name of sample. { return fName; }. void SetName(const string& Name); set name of sample. { fName = Name; }. std::string GetInputFile(); get input ROOT file. { return fInputFile; }. void SetInputFile(const string& InputFile); set input ROOT file. { fInputFile = InputFile; }. std::string GetHistoName(); get histogram name. { return fHistoName; }. void SetHistoName(const string& HistoName); set histogram name. { fHistoName = HistoName; }. std::string GetHistoPath(); get histogram path. { return fHistoPath; }. void SetHistoPath(const string& HistoPath); set histogram path. { fHistoPath = HistoPath; }. std::string GetChannelName(); get name of associated channel. { return fChannelName; }. void SetChannelName(const string& ChannelName); set name of associated channel. { fChannelName = ChannelName; }. std::vector< RooStats::HistFactory::OverallSys >& GetOverallSysList(); { return fOverallSysList; }. std::vector< RooStats::HistFactory::NormFactor >& GetNormFactorList(); { return fNormFactorList; }. std::vector< RooStats::HistFactory::HistoSys >& GetHistoSysList(); { return fHistoSysList; }. std::vector< RooStats::HistFactory::HistoFactor >& GetHistoFactorList(); { return fHistoFactorList; }. std::vector< RooStats::HistFactory::ShapeSys >& GetShapeSysList(); { return fShapeSysList; }. std::vector< RooStats::HistFactory::ShapeFactor >& GetShapeFactorList(); { return fShapeFactorList; }. RooStats::HistFactory::StatError& GetStatError(); { return fStatError; }. void SetStatError(RooStats::HistFactory::StatError Error); { fStatError = Error; }. » Author: George Lewis, Kyle Cranmer » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__Sample.html:7268,Error,Error,7268,root/html534/RooStats__HistFactory__Sample.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__Sample.html,2,['Error'],['Error']
Availability,"eByTheory(); does the normalization scale with luminosity. { return fNormalizeByTheory; }. std::string GetName(); get name of sample. { return fName; }. void SetName(const string& Name); set name of sample. { fName = Name; }. std::string GetInputFile(); get input ROOT file. { return fInputFile; }. void SetInputFile(const string& InputFile); set input ROOT file. { fInputFile = InputFile; }. std::string GetHistoName(); get histogram name. { return fHistoName; }. void SetHistoName(const string& HistoName); set histogram name. { fHistoName = HistoName; }. std::string GetHistoPath(); get histogram path. { return fHistoPath; }. void SetHistoPath(const string& HistoPath); set histogram path. { fHistoPath = HistoPath; }. std::string GetChannelName(); get name of associated channel. { return fChannelName; }. void SetChannelName(const string& ChannelName); set name of associated channel. { fChannelName = ChannelName; }. std::vector< RooStats::HistFactory::OverallSys >& GetOverallSysList(); { return fOverallSysList; }. std::vector< RooStats::HistFactory::NormFactor >& GetNormFactorList(); { return fNormFactorList; }. std::vector< RooStats::HistFactory::HistoSys >& GetHistoSysList(); { return fHistoSysList; }. std::vector< RooStats::HistFactory::HistoFactor >& GetHistoFactorList(); { return fHistoFactorList; }. std::vector< RooStats::HistFactory::ShapeSys >& GetShapeSysList(); { return fShapeSysList; }. std::vector< RooStats::HistFactory::ShapeFactor >& GetShapeFactorList(); { return fShapeFactorList; }. RooStats::HistFactory::StatError& GetStatError(); { return fStatError; }. void SetStatError(RooStats::HistFactory::StatError Error); { fStatError = Error; }. » Author: George Lewis, Kyle Cranmer » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-09-08 17:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooStats__HistFactory__Sample.html:7050,Error,Error,7050,root/html604/RooStats__HistFactory__Sample.html,https://root.cern,https://root.cern/root/html604/RooStats__HistFactory__Sample.html,2,['Error'],['Error']
Availability,"eCacheUnzip::ReadBufferExt ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len, . Int_t & ; loc . ). overridevirtual . Reimplemented from TFileCacheRead.; Definition at line 961 of file TTreeCacheUnzip.cxx. ◆ ResetCache(). void TTreeCacheUnzip::ResetCache ; (; ). overridevirtual . This will delete the list of buffers that are in the unzipping cache and will reset certain values in the cache. ; This name is ambiguos because the method doesn't reset the whole cache, only the part related to the unzipping Note: This method is completely different from TTreeCache::ResetCache(), in that method we were cleaning the prefetching buffer while here we delete the information about the unzipped buffers ; Reimplemented from TTreeCache.; Definition at line 501 of file TTreeCacheUnzip.cxx. ◆ SetBufferSize(). Int_t TTreeCacheUnzip::SetBufferSize ; (; Int_t ; buffersize). overridevirtual . Change the underlying buffer size of the cache. ; Returns:; 0 if the buffer content is still available; 1 if some or all of the buffer content has been made unavailable; -1 on error . Reimplemented from TTreeCache.; Definition at line 359 of file TTreeCacheUnzip.cxx. ◆ SetEntryRange(). void TTreeCacheUnzip::SetEntryRange ; (; Long64_t ; emin, . Long64_t ; emax . ). overridevirtual . Set the minimum and maximum entry number to be processed this information helps to optimize the number of baskets to read when prefetching the branch buffers. ; Reimplemented from TTreeCache.; Definition at line 375 of file TTreeCacheUnzip.cxx. ◆ SetParallelUnzip(). Int_t TTreeCacheUnzip::SetParallelUnzip ; (; TTreeCacheUnzip::EParUnzipMode ; option = TTreeCacheUnzip::kEnable). static . Static function that (de)activates multithreading unzipping. ; The possible options are:; kEnable Enable it, which causes an automatic detection and launches the additional thread if the number of cores in the machine is greater than one; kDisable Disable will not activate the additional thread.; kForce Force will start the additional th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCacheUnzip.html:34880,avail,available,34880,doc/v632/classTTreeCacheUnzip.html,https://root.cern,https://root.cern/doc/v632/classTTreeCacheUnzip.html,2,"['avail', 'error']","['available', 'error']"
Availability,"eColor(2);; gr1->SetLineWidth(1504);; gr1->SetFillStyle(3005);; ; TGraph *gr2 = new TGraph(n,xvalues2,yvalues2);; gr2->SetLineColor(4);; gr2->SetLineWidth(-2002);; gr2->SetFillStyle(3004);; gr2->SetFillColor(9);; ; TGraph *gr3 = new TGraph(n,xvalues3,yvalues3);; gr3->SetLineColor(5);; gr3->SetLineWidth(-802);; gr3->SetFillStyle(3002);; gr3->SetFillColor(2);; ; mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);; mg->Draw(""AC"");; ; return c1;; }; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; TMultiGraph::Addvirtual void Add(TGraph *graph, Option_t *chopt="""")Add a new graph to the list of graphs.Definition TMultiGraph.cxx:419; TMultiGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this multigraph with its current attributes.Definition TMultiGraph.cxx:508; . Graphs with error bars; Three classes are available to handle graphs with error bars: TGraphErrors, TGraphAsymmErrors and TGraphBentErrors. The following drawing options are specific to graphs with error bars:. Option Description . ""Z"" Do not draw small horizontal and vertical lines the end of the error bars. Without ""Z"", the default is to draw these. . "">"" An arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""|>"" A filled arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""X"" Do not draw error bars. By default, graph classes that have errors are drawn with the errors (TGraph itself has no errors, and so this option has no effect.) . ""||"" Draw only the small vertical/horizontal lines at the ends of the error bars, without drawing the bars themselves. This option is interesting to superimpose statistical-only errors on top of a graph with statistical+systematic errors. . ""[]"" Does the same as option ""||"" except that it draws additional marks at the en",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPainter.html:7976,error,error,7976,doc/master/classTGraphPainter.html,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html,3,"['avail', 'error']","['available', 'error']"
Availability,"eCompiledDefault, Long64_t defBlockSize=0LL);  Usual Constructor. ;  ;  TMemFile (const char *name, std::unique_ptr< TBufferFile > buffer);  Constructor to create a read-only TMemFile using an std::unique_ptr<TBufferFile> ;  ;  TMemFile (const TMemFile &orig);  Copying the content of the TMemFile into another TMemFile. ;  ;  ~TMemFile () override;  Close and clean-up file. ;  ; virtual void CopyTo (TBuffer &tobuf) const;  Copy the binary representation of the TMemFile into the TBuffer tobuf. ;  ; virtual Long64_t CopyTo (void *to, Long64_t maxsize) const;  Copy the binary representation of the TMemFile into the memory area starting at 'to' and of length at most 'maxsize' returns the number of bytes actually copied. ;  ; Long64_t GetSize () const override;  Return the current size of the memory file. ;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print all objects in the file. ;  ; void ResetAfterMerge (TFileMergeInfo *) override;  Wipe all the data from the permanent buffer but keep, the in-memory object alive. ;  ; void ResetErrno () const override;  Simply calls TSystem::ResetErrno(). ;  ; void Streamer (TBuffer &) override;  Stream a TFile object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TFile;  TFile ();  File default Constructor. ;  ;  TFile (const char *fname, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Opens or creates a local ROOT file. ;  ;  ~TFile () override;  File destructor. ;  ; void Close (Option_t *option="""") override;  Close a file. ;  ; void Copy (TObject &) const override;  Copy this to obj. ;  ; virtual Bool_t Cp (const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy this file to the dst URL. ;  ; virtual TKey * CreateKey (TDirectory *mother, const TObject *obj, const char *name, Int_t bufsize);  Creates key for object and conver",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:2788,alive,alive,2788,doc/v632/classROOT_1_1TBufferMergerFile.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html,4,['alive'],['alive']
Availability,"eDefVal(TString(""FMax""));; 353 AddPreDefVal(TString(""FMin""));; 354 AddPreDefVal(TString(""FSmart""));; 355}; 356 ; 357////////////////////////////////////////////////////////////////////////////////; 358/// process user options.; 359///; 360/// sanity check, do not allow the input variables to be normalised, because this; 361/// only creates problems when interpreting the cuts; 362 ; 363void TMVA::MethodCuts::ProcessOptions(); 364{; 365 if (IsNormalised()) {; 366 Log() << kWARNING << ""Normalisation of the input variables for cut optimisation is not"" << Endl;; 367 Log() << kWARNING << ""supported because this provides intransparent cut values, and no"" << Endl;; 368 Log() << kWARNING << ""improvement in the performance of the algorithm."" << Endl;; 369 Log() << kWARNING << ""Please remove \""Normalise\"" option from booking option string"" << Endl;; 370 Log() << kWARNING << ""==> Will reset normalisation flag to \""False\"""" << Endl;; 371 SetNormalised( kFALSE );; 372 }; 373 ; 374 if (IgnoreEventsWithNegWeightsInTraining()) {; 375 Log() << kFATAL << ""Mechanism to ignore events with negative weights in training not yet available for method: ""; 376 << GetMethodTypeName(); 377 << "" --> Please remove \""IgnoreNegWeightsInTraining\"" option from booking string.""; 378 << Endl;; 379 }; 380 ; 381 if (fFitMethodS == ""MC"" ) fFitMethod = kUseMonteCarlo;; 382 else if (fFitMethodS == ""MCEvents"") fFitMethod = kUseMonteCarloEvents;; 383 else if (fFitMethodS == ""GA"" ) fFitMethod = kUseGeneticAlgorithm;; 384 else if (fFitMethodS == ""SA"" ) fFitMethod = kUseSimulatedAnnealing;; 385 else if (fFitMethodS == ""MINUIT"" ) {; 386 fFitMethod = kUseMinuit;; 387 Log() << kWARNING << ""poor performance of MINUIT in MethodCuts; preferred fit method: GA"" << Endl;; 388 }; 389 else if (fFitMethodS == ""EventScan"" ) fFitMethod = kUseEventScan;; 390 else Log() << kFATAL << ""unknown minimisation method: "" << fFitMethodS << Endl;; 391 ; 392 if (fEffMethodS == ""EFFSEL"" ) fEffMethod = kUseEventSelection; // highly recommen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:13566,avail,available,13566,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,1,['avail'],['available']
Availability,"eDefinition Rtypes.h:66; npOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t npDefinition TGWin32VirtualXProxy.cxx:222; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphMultiErrorsTGraph with asymmetric error bars and multiple y error dimensions.Definition TGraphMultiErrors.h:29; TGraphMultiErrors::GetAttLinevirtual TAttLine * GetAttLine(Int_t e)Get AttLine pointer for specified error dimension.Definition TGraphMultiErrors.cxx:1632; TGraphMultiErrors::AddYErrorvirtual void AddYError(Int_t np, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr)Add a new y error to the graph and fill it with the values from eyL and eyHDefinition TGraphMultiErrors.cxx:917; TGraphMultiErrors::GetAttFillvirtual TAttFill * GetAttFill(Int_t e)Get AttFill pointer for specified error dimension.Definition TGraphMultiErrors.cxx:1621; TGraphMultiErrors::SetLineColorvirtual void SetLineColor(Int_t e, Color_t lcolor)Set Line Color of error e (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2073; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/gmultierrors_8C.html:2442,error,error,2442,doc/master/gmultierrors_8C.html,https://root.cern,https://root.cern/doc/master/gmultierrors_8C.html,2,['error'],['error']
Availability,"eDefinition TGWin32VirtualXProxy.cxx:232; TObject.h; TSelectorList.h; TString.h; TListA doubly linked list.Definition TList.h:38; TObjectMother of all ROOT objects.Definition TObject.h:41; TSelectorListA TList derived class that makes sure that objects added to it are not linked to the currently open f...Definition TSelectorList.h:31; TSelectorA TSelector object is used by the TTree::Draw, TTree::Scan, TTree::Process to navigate in a TTree and...Definition TSelector.h:31; TSelector::SetObjectvirtual void SetObject(TObject *obj)Definition TSelector.h:65; TSelector::GetAbortvirtual EAbort GetAbort() constDefinition TSelector.h:73; TSelector::SetStatusvirtual void SetStatus(Long64_t status)Definition TSelector.h:67; TSelector::IsStandardDrawstatic bool IsStandardDraw(const char *selec)Find out if this is a standard selection used for Draw actions (either TSelectorDraw,...Definition TSelector.cxx:237; TSelector::TSelectorTSelector(const TSelector &); TSelector::operator=TSelector & operator=(const TSelector &); TSelector::fInputTList * fInputList of objects available during processing.Definition TSelector.h:41; TSelector::ProcessFillvirtual void ProcessFill(Long64_t)This method is called for all selected entries.Definition TSelector.cxx:330; TSelector::EAbortEAbortDefinition TSelector.h:34; TSelector::kAbortFile@ kAbortFileDefinition TSelector.h:34; TSelector::kAbortProcess@ kAbortProcessDefinition TSelector.h:34; TSelector::kContinue@ kContinueDefinition TSelector.h:34; TSelector::Initvirtual void Init(TTree *)Definition TSelector.h:53; TSelector::Versionvirtual int Version() constDefinition TSelector.h:52; TSelector::fOptionTString fOptionOption given to TTree::Process.Definition TSelector.h:39; TSelector::ProcessCutvirtual bool ProcessCut(Long64_t)This method is called before processing entry.Definition TSelector.cxx:313; TSelector::Processvirtual bool Process(Long64_t)The Process() function is called for each entry in the tree (or possibly keyed object in the case o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSelector_8h_source.html:5286,avail,available,5286,doc/master/TSelector_8h_source.html,https://root.cern,https://root.cern/doc/master/TSelector_8h_source.html,1,['avail'],['available']
Availability,"eDelete; };. protected:. Pixel_tTGFrame::fBackgroundframe background color; Int_tTGFrame::fBorderWidthframe border width; TGClient*TGObject::fClientConnection to display server; Int_tTGFrame::fDNDStateEDNDFlags; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; UInt_tTGFrame::fEventMaskcurrenty active event mask; TGFrameElement*TGFrame::fFEpointer to frame element; UInt_tTGFrame::fHeightframe height; Handle_tTGObject::fIdX11/Win32 Window identifier; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; const TGMdiMainFrame*fMainpointer to MDI main frame; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritan",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGMdiContainer.html:15009,mask,mask,15009,root/html528/TGMdiContainer.html,https://root.cern,https://root.cern/root/html528/TGMdiContainer.html,6,['mask'],['mask']
Availability,"eDirty(const RooAbsArg* source) const; voidRooAbsTestStatistic::setSimCount(Int_t simCount); virtual voidRooAbsReal::setTreeBranchStatus(TTree& t, Bool_t active); voidRooAbsArg::setValueDirty(const RooAbsArg* source) const; virtual voidRooAbsReal::syncCache(const RooArgSet* set = 0); Double_tRooAbsReal::traceEval(const RooArgSet* set) const; virtual Bool_tRooAbsReal::traceEvalHook(Double_t) const; voidRooAbsArg::unRegisterProxy(RooArgProxy& proxy); voidRooAbsArg::unRegisterProxy(RooSetProxy& proxy); voidRooAbsArg::unRegisterProxy(RooListProxy& proxy). Data Members; public:. enum RooAbsTestStatistic::GOFOpMode { SimMaster; MPMaster; Slave; };; enum RooAbsReal::ScaleType { Raw; Relative; NumEvent; RelativeExpected; };; enum RooAbsReal::ErrorLoggingMode { PrintErrors; CollectErrors; CountErrors; Ignore; };; enum RooAbsArg::ConstOpCode { Activate; DeActivate; ConfigChange; ValueChange; };; enum RooAbsArg::OperMode { Auto; AClean; ADirty; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. stringRooAbsTestStatistic::_addCoefRangeNameName of reference to be used for RooAddPdf components; set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooArgSetRooAbsOptTestStatistic::_cachedNodes! List of nodes t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNLLVar.html:32864,Error,ErrorLoggingMode,32864,root/html532/RooNLLVar.html,https://root.cern,https://root.cern/root/html532/RooNLLVar.html,1,['Error'],['ErrorLoggingMode']
Availability,"eElement::DisableListElements(Bool_t rnr_self = kFALSE, Bool_t rnr_children = kFALSE)MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidTEveElement::DumpSourceObject() constMENU ; virtual voidElementChanged(Bool_t update_scenes = kTRUE, Bool_t redraw = kFALSE); voidTEveElement::EnableListElements(Bool_t rnr_self = kTRUE, Bool_t rnr_children = kTRUE)MENU ; TEveElement::List_iTEveElement::EndChildren(); TEveElement::List_ciTEveElement::EndChildren() const; TEveElement::List_iTEveElement::EndParents(); TEveElement::List_ciTEveElement::EndParents() const; TEveProjectable::ProjList_iTEveProjectable::EndProjecteds(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTEveElement::ExpandIntoListTree(TGListTree* ltree, TGListTreeItem* parent); voidTEveElement::ExportSourceObjectToCINT(char* var_name) constMENU ; virtual voidTEveElement::ExportToCINT(char* var_name)MENU ; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual voidTEveElement::FillImpliedSelectedSet(TEveElement::Set_t& impSelSet); voidFillPointSet(TEvePointSet* ps) const; TEveElement*TEveElement::FindChild(const TString& name, const TClass* cls = 0); TEveElement*TEveElement::FindChild(TPRegexp& regexp, const TClass* cls = 0); Int_tTEveElement::FindChildren(TEveElement::List_t& matches, const TString& name, const TClass* cls = 0); Int_tTEveElement::FindChildren(TEveElement::List_t& matches, TPRegexp& regexp, const TClass* cls = 0); virtual TEve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveTrackPropagator.html:5490,error,error,5490,root/html528/TEveTrackPropagator.html,https://root.cern,https://root.cern/root/html528/TEveTrackPropagator.html,10,['error'],['error']
Availability,"eErr[fNPeaks] array of volumes errors of 2D peaks, output parameters; Int_tfXmaxlast fitted channel in x direction; Int_tfXminfirst fitted channel in x direction; Int_tfYmaxlast fitted channel in y direction; Int_tfYminfirst fitted channel in y direction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSpectrum2Fit(); default constructor. TSpectrum2Fit(Int_t numberPeaks); numberPeaks: number of fitted peaks (must be greater than zero); the constructor allocates arrays for all fitted parameters (peak positions, amplitudes etc) and sets the member; variables to their default values. One can change these variables by member functions (setters) of TSpectrumFit class. . Shape function of the fitted; peaks contains the two-dimensional symmetrical Gaussian two one-dimensional; symmetrical Gaussian ridges as well as nonsymmetrical terms and background. ~TSpectrum2Fit(); destructor. Double_t Erfc(Double_t x). AUXILIARY FUNCTION. This function calculates error function of x. Double_t Derfc(Double_t x). AUXILIARY FUNCTION. This function calculates derivative of error function of x. Double_t Ourpowl(Double_t a, Int_t pw); power function. void StiefelInversion(Double_t** a, Int_t size). AUXILIARY FUNCTION. This function calculates solution of the system of linear equations.; The matrix a should have a dimension size*(size+4); The calling function should fill in the matrix, the column size should; contain vector y (right side of the system of equations). The result is; placed into size+1 column of the matrix.; according to sigma of peaks.; Function parameters:; -a-matrix with dimension size*(size+4) //; -size-number of rows of the matrix. Double_t Shape2(Int_t numOfFittedPeaks, Double_t x, Double_t y, const Double_t* parameter, Double_t sigmax, Double_t sigmay, Double_t ro, Double_t a0, Double_t ax, Double_t ay, Double_t txy, Double_t sxy, Double_t tx, Double_t ty, Double_t sx, Double_t sy, Double_t bx, Double_t by). AUXILIARY FUNCTION.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Fit.html:22693,error,error,22693,root/html528/TSpectrum2Fit.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Fit.html,6,['error'],['error']
Availability,"eFeedback(const char* name); Int_tRemoveIncludePath(const char* incpath, Bool_t onClient = kFALSE); virtual Bool_tRequestStagingDataSet(const char* dataset); static voidReset(const char* url, Bool_t hard = kFALSE); voidTObject::ResetBit(UInt_t f); static voidResetEnvVars(); voidResetProgressDialog(const char* sel, Int_t sz, Long64_t fst, Long64_t ent)SIGNAL ; voidResetProgressDialogStatus(); Int_tRetrieve(Int_t query, const char* path = 0); Int_tRetrieve(const char* queryref, const char* path = 0); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; Int_tSavePerfTree(const char* pf = 0, const char* qref = 0); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSendDataSetStatus(const char* msg, UInt_t n, UInt_t tot, Bool_t st); Bool_tSendingLogToWindow() const; voidSendLogToWindow(Bool_t mode); voidSetActive(Bool_t = kTRUE); virtual voidSetAlias(const char* alias = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDataPoolUrl(const char* url); virtual Int_tSetDataSetTreeName(const char* dataset, const char* treename); voidSetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetInputDataFile(const char* datafile); voidSetLogLevel(Int_t level, UInt_t mask = TProofDebug::kAll); voidSetManager(TProofMgr* mgr); voidSetMaxDrawQueries(Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); Int_tSetParallel(Int_t nodes = -1, Bool_t random = kFALSE); voidSetParameter(const char* par, const char* value); voidSetParameter(const char* par, Int_t value); voidSetParameter(const char* par, Long_t value); voidSetParameter(const char* par, Long64_t value); voidSetParameter(const char* par, Double_t value); voidSetPerfTree(const char* pf = ""perftree.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:15746,mask,mask,15746,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,6,['mask'],['mask']
Availability,"eFitParams::fbkgave. protected . Average of F(bkg) ; Definition at line 248 of file RuleFitParams.h. ◆ fbkgrms. Double_t TMVA::RuleFitParams::fbkgrms. protected . Rms of F(bkg) ; Definition at line 249 of file RuleFitParams.h. ◆ fFstar. std::vector<Double_t> TMVA::RuleFitParams::fFstar. protected . vector of F*() - filled in CalcFStar() ; Definition at line 234 of file RuleFitParams.h. ◆ fFstarMedian. Double_t TMVA::RuleFitParams::fFstarMedian. protected . median value of F*() using ; Definition at line 235 of file RuleFitParams.h. ◆ fGDCoefLinTst. std::vector< std::vector<Double_t> > TMVA::RuleFitParams::fGDCoefLinTst. protected . linear coeffs - one per tau ; Definition at line 218 of file RuleFitParams.h. ◆ fGDCoefTst. std::vector< std::vector<Double_t> > TMVA::RuleFitParams::fGDCoefTst. protected . rule coeffs - one per tau ; Definition at line 217 of file RuleFitParams.h. ◆ fGDErrScale. Double_t TMVA::RuleFitParams::fGDErrScale. protected . stop scan at error = scale*errmin ; Definition at line 230 of file RuleFitParams.h. ◆ fGDErrTst. std::vector<Double_t> TMVA::RuleFitParams::fGDErrTst. protected . error rates per tau ; Definition at line 215 of file RuleFitParams.h. ◆ fGDErrTstOK. std::vector<Char_t> TMVA::RuleFitParams::fGDErrTstOK. protected . error rate is sufficiently low <— stores boolean ; Definition at line 216 of file RuleFitParams.h. ◆ fGDNPathSteps. Int_t TMVA::RuleFitParams::fGDNPathSteps. protected . number of path steps ; Definition at line 229 of file RuleFitParams.h. ◆ fGDNTau. UInt_t TMVA::RuleFitParams::fGDNTau. protected . number of tau-paths - calculated in SetGDTauPrec ; Definition at line 222 of file RuleFitParams.h. ◆ fGDNTauTstOK. UInt_t TMVA::RuleFitParams::fGDNTauTstOK. protected . number of tau in the test-phase that are ok ; Definition at line 221 of file RuleFitParams.h. ◆ fGDNtuple. TTree* TMVA::RuleFitParams::fGDNtuple. protected . Gradient path ntuple, contains params for each step along the path. ; Definition at line 237 of fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleFitParams.html:21257,error,error,21257,doc/master/classTMVA_1_1RuleFitParams.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleFitParams.html,1,['error'],['error']
Availability,"eFrame* main); TGHorizontalLayout(const TGHorizontalLayout&); ~TGHorizontalLayout(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TGDimensionGetDefaultSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGHorizontalLayout.html:2349,error,error,2349,root/html528/TGHorizontalLayout.html,https://root.cern,https://root.cern/root/html528/TGHorizontalLayout.html,6,['error'],['error']
Availability,"eFunction (std::ostream &fout, const TString &fncName, Int_t part, UInt_t trCounter, Int_t cls);  creates C++ code fragment of the identity transform for inclusion in standalone C++ class ;  ; Bool_t PrepareTransformation (const std::vector< Event * > &);  the identity does not need to be prepared, only calculate the normalization ;  ; virtual void ReadFromXML (void *trfnode);  reding the identity transformation from XML ;  ; void ReadTransformationFromStream (std::istream &, const TString &);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual const Event * Transform (const Event *const, Int_t cls) const;  identity transform returns same event ;  ; void WriteTransformationToStream (std::ostream &) const;  ;  Public Member Functions inherited from TMVA::VariableTransformBase;  VariableTransformBase (DataSetInfo &dsi, Types::EVariableTransform tf, const TString &trfName);  standard constructor ;  ; virtual ~VariableTransformBase (void);  ; virtual void CountVariableTypes (UInt_t &nvars, UInt_t &ntgts, UInt_t &nspcts) const;  count variables, targets and spectators ;  ; virtual Bool_t GetInput (const Event *event, std::vector< Float_t > &input, std::vector< Char_t > &mask, Bool_t backTransform=kFALSE) const;  select the values from the event ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; TString GetShortName () const;  ; virtual std::vector< TString > * GetTransformationStrings (Int_t cls) const;  TODO --> adapt to variable,target,spectator selection default transformation output --> only indicate that transformation occurred. ;  ; Types::EVariableTransform GetVariableTransform () const;  ; Bool_t IsCreated () const;  ; Bool_t IsEnabled () const;  ; Bool_t IsNormalised () const;  ; MsgLogger & Log () const;  ; virtual void PrintTransformation (std::ostream &);  ; virtual void SelectInput (const TString &inputVariables, Bool_t putIntoVariables=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableIdentityTransform.html:2157,mask,mask,2157,doc/master/classTMVA_1_1VariableIdentityTransform.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableIdentityTransform.html,1,['mask'],['mask']
Availability,"eHandler(TGWindow* w); TGIdleHandler(const TGIdleHandler&); virtual~TGIdleHandler(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tHandleEvent(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGIdleHandler.html:1440,error,error,1440,root/html528/TGIdleHandler.html,https://root.cern,https://root.cern/root/html528/TGIdleHandler.html,6,['error'],['error']
Availability,"eLevel = 0.94999999999999996, UInt_t npx = 100, Double_t xMin = 1., Double_t xMax = 0.); Returns the PDF upper estimate (upper confidence interval limit). TF1* GetLowerFunction(Double_t confidenceLevel = 0.94999999999999996, UInt_t npx = 100, Double_t xMin = 1., Double_t xMax = 0.); Returns the PDF lower estimate (lower confidence interval limit). TF1* GetApproximateBias(UInt_t npx = 100, Double_t xMin = 1., Double_t xMax = 0.); Returns the PDF estimate bias. void Fill(Double_t data); Fills data member with User input data event for the unbinned option. Double_t operator()(const Double_t* x, const Double_t* p = 0) const; The class's unary function: returns the kernel density estimate. Double_t operator()(Double_t x) const; The class's unary function: returns the kernel density estimate. Double_t GetMean() const; return the mean of the data. Double_t GetSigma() const; return the standard deviation of the data. Double_t GetRAMISE() const; Returns the Root Asymptotic Mean Integrated Squared Error according to Silverman's rule of thumb with assumed Gaussian density. void SetBinCentreData(Double_t xmin, Double_t xmax); Returns the bins' centres from the data for using with the binned option. void SetBinCountData(); Returns the bins' count from the data for using with the binned option. void Draw(const Option_t* option = """"); Draws either the KDE functions or its errors; Possible options:; """" (default) - draw just the kde; ""same"" draw on top of existing pad; ""Errors"" draw a TGraphErrors with the point and errors; ""confidenceinterval"" draw KDE + conf interval functions (default is 95%); ""confidenceinterval@0.90"" draw KDE + conf interval functions at 90%; Extra options can be passed in opt for drawing the TF1 or the TGraph. NOTE: The functions GetDrawnFunction(), GetDrawnUpperFunction(), GetDrawnLowerFunction(); and GetGraphWithErrors() return the corresponding drawn objects (which are maneged by the TKDE); They can be used to changes style, color, etc... void DrawErrors(TS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TKDE.html:15859,Error,Error,15859,root/html602/TKDE.html,https://root.cern,https://root.cern/root/html602/TKDE.html,1,['Error'],['Error']
Availability,"eMerge=false) const;  ; virtual void SavePrimitiveHelp (std::ostream &out, const char *hname, Option_t *option="""");  Helper function for the SavePrimitive functions from TH1 or classes derived from TH1, eg TProfile, TProfile2D. ;  ; virtual void UpdateBinContent (Int_t bin, Double_t content);  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TArray; Bool_t BoundsOk (const char *where, Int_t at) const;  ; Bool_t OutOfBoundsError (const char *where, Int_t i) const;  Generate an out-of-bounds error. Always returns false. ;  . Protected Attributes; Int_t fKCur;  ; Int_t fKOrd;  ; Int_t fNIn;  ; Int_t fReady;  ;  Protected Attributes inherited from TH1; Short_t fBarOffset;  (1000*offset) for bar charts or legos ;  ; Short_t fBarWidth;  (1000*width) for bar charts or legos ;  ; EBinErrorOpt fBinStatErrOpt;  Option for bin statistical errors. ;  ; Double_t * fBuffer;  [fBufferSize] entry buffer ;  ; Int_t fBufferSize;  fBuffer size ;  ; TArrayD fContour;  Array to display contour levels. ;  ; Int_t fDimension;  ! Histogram dimension (1, 2 or 3 dim) ;  ; TDirectory * fDirectory;  ! Pointer to directory holding this histogram ;  ; Double_t fEntries;  Number of entries. ;  ; TList * fFunctions;  ->Pointer to list of functions (fits and user) ;  ; Double_t * fIntegral;  ! Integral of bins used by GetRandom ;  ; Double_t fMaximum;  Maximum value for plotting. ;  ; Double_t fMinimum;  Minimum value for plotting. ;  ; Int_t fNcells;  Number of bins(1D), cells (2D) +U/Overflows. ;  ; Double_t fNormFactor;  Normalization factor. ;  ; TString fOption;  Histogram options. ;  ; TVirtualHistPainter * fPainter;  ! Pointer to histogram painter ;  ; EStatOverflows fStatOverflows;  P",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1K.html:45711,error,errors,45711,doc/master/classTH1K.html,https://root.cern,https://root.cern/doc/master/classTH1K.html,1,['error'],['errors']
Availability,"eName(). static const char * TMVA::MinuitWrapper::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 69 of file MinuitWrapper.h. ◆ Eval(). Int_t TMVA::MinuitWrapper::Eval ; (; Int_t ; , . Double_t * ; , . Double_t & ; f, . Double_t * ; par, . Int_t ;  . ). virtual . std::vector<Double_t> parameters( npar ); ; Reimplemented from TMinuit.; Definition at line 51 of file MinuitWrapper.cxx. ◆ ExecuteCommand(). Int_t TMVA::MinuitWrapper::ExecuteCommand ; (; const char * ; command, . Double_t * ; args, . Int_t ; nargs . ). Execute a fitter command; command : command string args : list of nargs command arguments. ; Definition at line 64 of file MinuitWrapper.cxx. ◆ GetErrors(). Int_t TMVA::MinuitWrapper::GetErrors ; (; Int_t ; ipar, . Double_t & ; eplus, . Double_t & ; eminus, . Double_t & ; eparab, . Double_t & ; globcc . ). return current errors for a parameter . ipar : parameter number; eplus : upper error; eminus : lower error; eparab : parabolic error; globcc : global correlation coefficient . Definition at line 105 of file MinuitWrapper.cxx. ◆ GetStats(). Int_t TMVA::MinuitWrapper::GetStats ; (; Double_t & ; amin, . Double_t & ; edm, . Double_t & ; errdef, . Int_t & ; nvpar, . Int_t & ; nparx . ). return global fit parameters . amin : chisquare; edm : estimated distance to minimum; errdef; nvpar : number of variable parameters; nparx : total number of parameters . Definition at line 90 of file MinuitWrapper.cxx. ◆ IsA(). virtual TClass * TMVA::MinuitWrapper::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 69 of file MinuitWrapper.h. ◆ SetFitterTarget(). void TMVA::MinuitWrapper::SetFitterTarget ; (; IFitterTarget & ; target). inline . Definition at line 54 of file MinuitWrapper.h. ◆ SetParameter(). Int_t TMVA::MinuitWrapper::SetParameter ; (; Int_t ; ipar, . const char * ; parname, . Double_t ; value, . Double_t ; verr, . Double_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MinuitWrapper.html:26415,error,error,26415,doc/master/classTMVA_1_1MinuitWrapper.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MinuitWrapper.html,3,['error'],['error']
Availability,"eName.empty()) {; 3126 // The type is not known to the interpreter.; 3127 // We must not error out here, but if/when this column is used in jitted code; 3128 const auto demangledType = RDFInternal::DemangleTypeIdName(typeid(RetType));; 3129 retTypeName = ""CLING_UNKNOWN_TYPE_"" + demangledType;; 3130 }; 3131 ; 3132 using NewCol_t = RDFDetail::RDefine<F, DefineType>;; 3133 auto newColumn = std::make_shared<NewCol_t>(name, retTypeName, std::forward<F>(expression), validColumnNames,; 3134 fColRegister, *fLoopManager);; 3135 ; 3136 RDFInternal::RColumnRegister newCols(fColRegister);; 3137 newCols.AddDefine(std::move(newColumn));; 3138 ; 3139 RInterface<Proxied> newInterface(fProxiedPtr, *fLoopManager, std::move(newCols));; 3140 ; 3141 return newInterface;; 3142 }; 3143 ; 3144 // This overload is chosen when the callable passed to Define or DefineSlot returns void.; 3145 // It simply fires a compile-time error. This is preferable to a static_assert in the main `Define` overload because; 3146 // this way compilation of `Define` has no way to continue after throwing the error.; 3147 template <typename F, typename DefineType, typename RetType = typename TTraits::CallableTraits<F>::ret_type,; 3148 bool IsFStringConv = std::is_convertible<F, std::string>::value,; 3149 bool IsRetTypeDefConstr = std::is_default_constructible<RetType>::value>; 3150 std::enable_if_t<!IsFStringConv && !IsRetTypeDefConstr, RInterface<Proxied, DS_t>>; 3151 DefineImpl(std::string_view, F, const ColumnNames_t &, const std::string &); 3152 {; 3153 static_assert(std::is_default_constructible<typename TTraits::CallableTraits<F>::ret_type>::value,; 3154 ""Error in `Define`: type returned by expression is not default-constructible"");; 3155 return *this; // never reached; 3156 }; 3157 ; 3158 template <typename... ColumnTypes>; 3159 RResultPtr<RInterface<RLoopManager>> SnapshotImpl(std::string_view fullTreeName, std::string_view filename,; 3160 const ColumnNames_t &columnList, const RSnapshotOptions &options); 3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:178922,error,error,178922,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['error'],['error']
Availability,"eParameter (Int_t parNo, const char *name, Double_t initVal, Double_t initErr, Double_t lowerLimit, Double_t upperLimit);  Define a parameter. ;  ; virtual void DeleteArrays ();  Delete internal Minuit arrays. ;  ; virtual Int_t Eval (Int_t npar, Double_t *grad, Double_t &fval, Double_t *par, Int_t flag);  Evaluate the minimisation function Input parameters: ;  ; virtual Int_t FixParameter (Int_t parNo);  fix a parameter ;  ; Int_t GetMaxIterations () const;  ; TMethodCall * GetMethodCall () const;  ; virtual Int_t GetNumFixedPars () const;  returns the number of currently fixed parameters ;  ; virtual Int_t GetNumFreePars () const;  returns the number of currently free parameters ;  ; virtual Int_t GetNumPars () const;  returns the total number of parameters that have been defined as fixed or free. ;  ; TObject * GetObjectFit () const;  ; virtual Int_t GetParameter (Int_t parNo, Double_t &currentValue, Double_t &currentError) const;  return parameter value and error ;  ; virtual TObject * GetPlot () const;  ; Int_t GetStatus () const;  ; TClass * IsA () const override;  ; virtual Int_t Migrad ();  invokes the MIGRAD minimizer ;  ; virtual void mnamin ();  Initialize AMIN. ;  ; virtual void mnbins (Double_t a1, Double_t a2, Int_t naa, Double_t &bl, Double_t &bh, Int_t &nb, Double_t &bwid);  Compute reasonable histogram intervals. ;  ; virtual void mncalf (Double_t *pvec, Double_t &ycalf);  Transform FCN to find further minima. ;  ; virtual void mncler ();  Resets the parameter list to UNDEFINED. ;  ; virtual void mncntr (Int_t ke1, Int_t ke2, Int_t &ierrf);  Print function contours in two variables, on line printer. ;  ; virtual void mncomd (const char *crdbin, Int_t &icondn);  Reads a command string and executes. ;  ; virtual void mncont (Int_t ke1, Int_t ke2, Int_t nptu, Double_t *xptu, Double_t *yptu, Int_t &ierrf);  Find points along a contour where FCN is minimum. ;  ; virtual void mncrck (TString crdbuf, Int_t maxcwd, TString &comand, Int_t &lnc, Int_t mxp, Dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuit.html:16553,error,error,16553,doc/master/classTMinuit.html,https://root.cern,https://root.cern/doc/master/classTMinuit.html,1,['error'],['error']
Availability,"eParameters() const. const std::vector<ROOT::Minuit2::MinuitParameter>& Parameters() const; access to parameters (row-wise). std::vector<double> Params() const; access to parameters and errors in column-wise representation. std::vector<double> Errors() const. bool Add(const string& , double , double ); Add free Parameter Name, Value, Error. bool Add(const string& , double , double , double , double ); Add limited Parameter Name, Value, Lower bound, Upper bound. bool Add(const string& , double ); Add const Parameter Name, vale. void Fix(unsigned int ); interaction via external number of Parameter. void Release(unsigned int ). void RemoveLimits(unsigned int ). void SetValue(unsigned int , double ). void SetError(unsigned int , double ). void SetLimits(unsigned int , double , double ). void SetUpperLimit(unsigned int , double ). void SetLowerLimit(unsigned int , double ). void SetName(unsigned int , const string& ). double Value(unsigned int ) const. double Error(unsigned int ) const. void Fix(const string& ); interaction via Name of Parameter. void Release(const string& ). void SetValue(const string& , double ). void SetError(const string& , double ). void SetLimits(const string& , double , double ). void SetUpperLimit(const string& , double ). void SetLowerLimit(const string& , double ). void RemoveLimits(const string& ). double Value(const string& ) const. double Error(const string& ) const. unsigned int Index(const string& ) const; convert Name into external number of Parameter. const std::string & GetName(unsigned int ) const; convert external number into Name of Parameter. const char* Name(unsigned int ) const; mantain interface with const char * for backward compatibility. void SetPrecision(double eps); {fTransformation.SetPrecision(eps);}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__MnUserParameters.html:3970,Error,Error,3970,root/html602/ROOT__Minuit2__MnUserParameters.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__MnUserParameters.html,1,['Error'],['Error']
Availability,"eParameters() const. const std::vector<ROOT::Minuit2::MinuitParameter>& Parameters() const; access to parameters (row-wise). std::vector<double> Params() const; access to parameters and errors in column-wise representation. std::vector<double> Errors() const. bool Add(const string& , double , double ); Add free Parameter Name, Value, Error. bool Add(const string& , double , double , double , double ); Add limited Parameter Name, Value, Lower bound, Upper bound. bool Add(const string& , double ); Add const Parameter Name, vale. void Fix(unsigned int ); interaction via external number of Parameter. void Release(unsigned int ). void RemoveLimits(unsigned int ). void SetValue(unsigned int , double ). void SetError(unsigned int , double ). void SetLimits(unsigned int , double , double ). void SetUpperLimit(unsigned int , double ). void SetLowerLimit(unsigned int , double ). void SetName(unsigned int , const string& ). double Value(unsigned int ) const. double Error(unsigned int ) const. void Fix(const string& ); interaction via Name of Parameter. void Release(const string& ). void SetValue(const string& , double ). void SetError(const string& , double ). void SetLimits(const string& , double , double ). void SetUpperLimit(const string& , double ). void SetLowerLimit(const string& , double ). void RemoveLimits(const string& ). double Value(const string& ) const. double Error(const string& ) const. unsigned int Index(const string& ) const; convert Name into external number of Parameter. const std::string & GetName(unsigned int ) const; convert external number into Name of Parameter. const char* Name(unsigned int ) const; mantain interface with const char * for backward compatibility. void SetPrecision(double eps); {fTransformation.SetPrecision(eps);}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Minuit2__MnUserParameters.html:3970,Error,Error,3970,root/html534/ROOT__Minuit2__MnUserParameters.html,https://root.cern,https://root.cern/root/html534/ROOT__Minuit2__MnUserParameters.html,1,['Error'],['Error']
Availability,"eParameters() const. const std::vector<ROOT::Minuit2::MinuitParameter>& Parameters() const; access to parameters (row-wise). std::vector<double> Params() const; access to parameters and errors in column-wise representation. std::vector<double> Errors() const. bool Add(const string& , double , double ); Add free Parameter Name, Value, Error. bool Add(const string& , double , double , double , double ); Add limited Parameter Name, Value, Lower bound, Upper bound. bool Add(const string& , double ); Add const Parameter Name, vale. void Fix(unsigned int ); interaction via external number of Parameter. void Release(unsigned int ). void RemoveLimits(unsigned int ). void SetValue(unsigned int , double ). void SetError(unsigned int , double ). void SetLimits(unsigned int , double , double ). void SetUpperLimit(unsigned int , double ). void SetLowerLimit(unsigned int , double ). void SetName(unsigned int , const string& ). double Value(unsigned int ) const. double Error(unsigned int ) const. void Fix(const string& ); interaction via Name of Parameter. void Release(const string& ). void SetValue(const string& , double ). void SetError(const string& , double ). void SetLimits(const string& , double , double ). void SetUpperLimit(const string& , double ). void SetLowerLimit(const string& , double ). void RemoveLimits(const string& ). double Value(const string& ) const. double Error(const string& ) const. unsigned int Index(const string& ) const; convert Name into external number of Parameter. const std::string & GetName(unsigned int ) const; convert external number into Name of Parameter. const char* Name(unsigned int ) const; mantain interface with const char * for backward compatibility. void SetPrecision(double eps); {fTransformation.SetPrecision(eps);}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Minuit2__MnUserParameters.html:3970,Error,Error,3970,root/html604/ROOT__Minuit2__MnUserParameters.html,https://root.cern,https://root.cern/root/html604/ROOT__Minuit2__MnUserParameters.html,1,['Error'],['Error']
Availability,"ePoly(Double_t x, Double_t y); ~TSplinePoly(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEval(Double_t) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; voidGetKnot(Double_t& x, Double_t& y) const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSplinePoly.html:1470,error,error,1470,root/html528/TSplinePoly.html,https://root.cern,https://root.cern/root/html528/TSplinePoly.html,6,['error'],['error']
Availability,"eProp); voidTObject::ResetBit(UInt_t f); virtual voidRooAbsPdf::resetErrorCounters(Int_t resetValue = 10); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Bool_tselfNormalized() const; TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); static voidRooAbsReal::setCacheCheck(Bool_t flag); voidsetCdfBoundaries(Bool_t flag); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); voidRooAbsPdf::setGeneratorConfig(); voidRooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidsetInterpolationOrder(Int_t order); virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); voidRooAbsPdf::setNormRange(const char* rangeName); voidRooAbsPdf::setNormRangeOverride(const char* rangeName); voidRooAbsPdf::setNormValueCaching(Int_t minNumIntDim, Int_t ipOrder = 2); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooHistPdf.html:28090,Error,ErrorLoggingMode,28090,root/html532/RooHistPdf.html,https://root.cern,https://root.cern/root/html532/RooHistPdf.html,1,['Error'],['ErrorLoggingMode']
Availability,"eROOT::Math::GaussIntegrator::fLastErrorError from the last stimation.; doubleROOT::Math::GaussIntegrator::fLastResultResult from the last stimation.; intfNumNumber of points used in the stimation of the integral.; boolROOT::Math::GaussIntegrator::fUsedOnceBool value to check if the function was at least called once.; double*fWWeights of the points used.; double*fXAbscisa of the points used.; static boolROOT::Math::GaussIntegrator::fgAbsValueAbsValue used for the calculation of the integral. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GaussLegendreIntegrator(int num = 10, double eps = 9.9999999999999998E-13); Basic contructor of GaussLegendreIntegrator.; \@param num Number of desired points to calculate the integration.; \@param eps Desired relative error. virtual ~GaussLegendreIntegrator(); Default Destructor . void SetNumberPoints(int num); Set the number of points used in the calculation of the; integral . void SetRelTolerance(double ); Set the desired relative Error. . void SetAbsTolerance(double ); This method is not implemented. . void GetWeightVectors(double* x, double* w) const; Returns the arrays x and w containing the abscissa and weight of; the Gauss-Legendre n-point quadrature formula. Gauss-Legendre: W(x)=1 -1<x<1; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}. int GetNumberPoints() const; { return fNum; }. int NEval() const. return number of function evaluations in calculating the integral; This is equivalent to the number of points. { return fNum; }. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. double DoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Integration surrugate method. Return integral of passed function in interval [a,b]; Reimplement method of GaussIntegrator using CalcGaussLegendreSamplingPoints. void CalcGaussLegendreSamplingPoints(). Type: unsafe but fast interface filling the arrays x and w (static method). Given the number of sampling points thi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GaussLegendreIntegrator.html:4185,Error,Error,4185,root/html602/ROOT__Math__GaussLegendreIntegrator.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GaussLegendreIntegrator.html,2,['Error'],['Error']
Availability,"eRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute Range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t i) const; Get high error on X. Double_t GetErrorXlow(Int_t i) const; Get low error on X. Double_t GetErrorYhigh(Int_t i) const; Get high error on Y. Double_t GetErrorYlow(Int_t i) const; Get low error on Y. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point number i. void SetPointEXlow(Int_t i, Double_t exl); Set EXlow for point i. void SetPointEXhigh(Int_t i, Double_t exh); Set EXhigh for point i. void SetPointEYlow(Int_t i, Double_t eyl); Set EYlow for point i. void SetPointEYhigh(Int_t i, Double_t eyh); Set EYhigh for point i. void Streamer(TBuffer& b); Stream an object of class TGraphAsymmErrors. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t** Allocate(Int_t size). Double_t * GetEXlow() const; {return fEXlow;}. Double_t * GetEXhigh() const; {return fEXhigh;}. Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphAsymmErrors.html:21757,error,error,21757,root/html528/TGraphAsymmErrors.html,https://root.cern,https://root.cern/root/html528/TGraphAsymmErrors.html,4,['error'],['error']
Availability,"eReader::Show(NTupleSize_t index, std::ostream &output); 209{; 210 auto reader = GetDisplayReader();; 211 const auto &entry = reader->GetModel().GetDefaultEntry();; 212 ; 213 reader->LoadEntry(index);; 214 output << ""{"";; 215 for (auto iValue = entry.begin(); iValue != entry.end();) {; 216 output << std::endl;; 217 RPrintValueVisitor visitor(*iValue, output, 1 /* level */);; 218 iValue->GetField().AcceptVisitor(visitor);; 219 ; 220 if (++iValue == entry.end()) {; 221 output << std::endl;; 222 break;; 223 } else {; 224 output << "","";; 225 }; 226 }; 227 output << ""}"" << std::endl;; 228}; 229 ; 230const ROOT::Experimental::RNTupleDescriptor &ROOT::Experimental::RNTupleReader::GetDescriptor(); 231{; 232 auto descriptorGuard = fSource->GetSharedDescriptorGuard();; 233 if (!fCachedDescriptor || fCachedDescriptor->GetGeneration() != descriptorGuard->GetGeneration()); 234 fCachedDescriptor = descriptorGuard->Clone();; 235 return *fCachedDescriptor;; 236}; 237 ; 238ROOT::Experimental::DescriptorId_t ROOT::Experimental::RNTupleReader::RetrieveFieldId(std::string_view fieldName) const; 239{; 240 auto fieldId = fSource->GetSharedDescriptorGuard()->FindFieldId(fieldName);; 241 if (fieldId == kInvalidDescriptorId) {; 242 throw RException(R__FAIL(""no field named '"" + std::string(fieldName) + ""' in RNTuple '"" +; 243 fSource->GetSharedDescriptorGuard()->GetName() + ""'""));; 244 }; 245 return fieldId;; 246}; R__FAIL#define R__FAIL(msg)Short-hand to return an RResult<T> in an error state; the RError is implicitly converted into RResult...Definition RError.hxx:290; RFieldVisitor.hxx; RField.hxx; RNTupleImtTaskScheduler.hxx; RNTupleModel.hxx; RNTupleReader.hxx; RNTuple.hxx; RPageSourceFriends.hxx; RPageStorageFile.hxx; R__ASSERT#define R__ASSERT(e)Checks condition e and reports a fatal error if it's false.Definition TError.h:125; indexOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RNTupleReader_8cxx_source.html:10236,error,error,10236,doc/master/RNTupleReader_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RNTupleReader_8cxx_source.html,1,['error'],['error']
Availability,"eRedirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t recurseInNewSet = kTRUE); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tRooAbsArg::redirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t isRecursionStep = kFALSE); voidRooAbsArg::registerCache(RooAbsCache& cache); voidRooAbsArg::removeServer(RooAbsArg& server, Bool_t force = kFALSE); voidRooAbsArg::replaceServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); voidTObject::ResetBit(UInt_t f); RooChi2Var(const RooChi2Var& other, const char* name = 0); RooChi2Var(const char* name, const char* title, RooAbsPdf& pdf, RooDataHist& data, Bool_t extended = kFALSE, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, RooFit::MPSplit interleave = RooFit::BulkPartition, Bool_t verbose = kTRUE, Bool_t splitCutRange = kTRUE, RooDataHist::ErrorType = RooDataHist::SumW2); RooChi2Var(const char* name, const char* title, RooAbsReal& func, RooDataHist& data, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none(), const RooCmdArg& arg9 = RooCmdArg::none()); RooChi2Var(const char* name, const char* title, RooAbsPdf& pdf, RooDataHist& data, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none(), const RooCmdArg& arg9 = RooCmdArg::none()); RooChi2Var(const char* name, const char* title, RooAbsReal& func, Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooChi2Var.html:24116,Error,ErrorType,24116,root/html602/RooChi2Var.html,https://root.cern,https://root.cern/root/html602/RooChi2Var.html,2,['Error'],['ErrorType']
Availability,"eRegionAcceptanceRegion(const RooStats::AcceptanceRegion&); RooStats::AcceptanceRegionAcceptanceRegion(Int_t lu, Double_t ll, Double_t ul); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Int_tGetLookupIndex(); Double_tGetLowerLimit(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetUpperLimit(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__AcceptanceRegion.html:1501,error,error,1501,root/html526/RooStats__AcceptanceRegion.html,https://root.cern,https://root.cern/root/html526/RooStats__AcceptanceRegion.html,11,['error'],['error']
Availability,"eReturns the combined error along Y at point i by computing the average of the lower and upper varianc...Definition TGraphAsymmErrors.cxx:1137; TGraphAsymmErrors::FillZerovoid FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) overrideSet zero values for point arrays in the range [begin, end]Definition TGraphAsymmErrors.cxx:1104; TGraphAsymmErrors::Dividevirtual void Divide(const TH1 *pass, const TH1 *total, Option_t *opt=""cp"")Fill this TGraphAsymmErrors by dividing two 1-dimensional histograms pass/total.Definition TGraphAsymmErrors.cxx:588; TGraphAsymmErrors::CtorAllocateBool_t CtorAllocate()Should be called from ctors after fNpoints has been set.Definition TGraphAsymmErrors.cxx:1061; TGraphAsymmErrors::Classstatic TClass * Class(); TGraphAsymmErrors::SetPointErrorvirtual void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh)Set ex and ey values for point pointed by the mouse.Definition TGraphAsymmErrors.cxx:1299; TGraphAsymmErrors::GetErrorXhighDouble_t GetErrorXhigh(Int_t i) const overrideGet high error on X.Definition TGraphAsymmErrors.cxx:1151; TGraphAsymmErrors::fEYhighDouble_t * fEYhigh[fNpoints] array of Y high errorsDefinition TGraphAsymmErrors.h:32; TGraphAsymmErrors::CopyPointsBool_t CopyPoints(Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy errors from fE*** to arrays[***] or to f*** Copy points.Definition TGraphAsymmErrors.cxx:1033; TGraphAsymmErrors::AddPointErrorvirtual void AddPointError(Double_t x, Double_t y, Double_t exl=0., Double_t exh=0., Double_t eyl=0., Double_t eyh=0.)Add a point with asymmetric errorbars to the graph.Definition TGraphAsymmErrors.cxx:451; TGraphAsymmErrors::ComputeRangevoid ComputeRange(Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const overrideCompute Range.Definition TGraphAsymmErrors.cxx:977; TGraphAsymmErrors::SetPointEXlowvirtual void SetPointEXlow(Int_t i, Double_t exl)Set EXlow for point i.Definition TGraphAsymmErrors.cxx:1348; TGraphAsymmErrors::St",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html:59906,error,error,59906,doc/master/TGraphAsymmErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html,1,['error'],['error']
Availability,"eServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); static voidRooAbsReal::setHideOffset(Bool_t flag); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidRooAbsArg::setLocalNoDirtyInhibit(Bool_t flag) const; virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsHiddenReal.html:24247,Error,ErrorLoggingMode,24247,root/html534/RooAbsHiddenReal.html,https://root.cern,https://root.cern/root/html534/RooAbsHiddenReal.html,51,['Error'],['ErrorLoggingMode']
Availability,"eServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); static voidRooAbsReal::setHideOffset(Bool_t flag); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidRooAbsArg::setLocalNoDirtyInhibit(Bool_t flag) const; voidsetMode(const Roo1DMomentMorphFunction::Setting& setting); virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Roo1DMomentMorphFunction.html:24140,Error,ErrorLoggingMode,24140,root/html534/Roo1DMomentMorphFunction.html,https://root.cern,https://root.cern/root/html534/Roo1DMomentMorphFunction.html,1,['Error'],['ErrorLoggingMode']
Availability,"eServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); static voidRooAbsReal::setHideOffset(Bool_t flag); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidRooAbsArg::setLocalNoDirtyInhibit(Bool_t flag) const; voidsetMode(const Roo2DMomentMorphFunction::Setting& setting); virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Roo2DMomentMorphFunction.html:24442,Error,ErrorLoggingMode,24442,root/html534/Roo2DMomentMorphFunction.html,https://root.cern,https://root.cern/root/html534/Roo2DMomentMorphFunction.html,1,['Error'],['ErrorLoggingMode']
Availability,"eSet zero values for point arrays in the range [begin, end]Definition TGraphAsymmErrors.cxx:1104; TGraphAsymmErrors::Dividevirtual void Divide(const TH1 *pass, const TH1 *total, Option_t *opt=""cp"")Fill this TGraphAsymmErrors by dividing two 1-dimensional histograms pass/total.Definition TGraphAsymmErrors.cxx:588; TGraphAsymmErrors::CtorAllocateBool_t CtorAllocate()Should be called from ctors after fNpoints has been set.Definition TGraphAsymmErrors.cxx:1061; TGraphAsymmErrors::SetPointErrorvirtual void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh)Set ex and ey values for point pointed by the mouse.Definition TGraphAsymmErrors.cxx:1299; TGraphAsymmErrors::GetErrorXhighDouble_t GetErrorXhigh(Int_t i) const overrideGet high error on X.Definition TGraphAsymmErrors.cxx:1151; TGraphAsymmErrors::fEYhighDouble_t * fEYhigh[fNpoints] array of Y high errorsDefinition TGraphAsymmErrors.h:32; TGraphAsymmErrors::CopyPointsBool_t CopyPoints(Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy errors from fE*** to arrays[***] or to f*** Copy points.Definition TGraphAsymmErrors.cxx:1033; TGraphAsymmErrors::AddPointErrorvirtual void AddPointError(Double_t x, Double_t y, Double_t exl=0., Double_t exh=0., Double_t eyl=0., Double_t eyh=0.)Add a point with asymmetric errorbars to the graph.Definition TGraphAsymmErrors.cxx:451; TGraphAsymmErrors::ComputeRangevoid ComputeRange(Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const overrideCompute Range.Definition TGraphAsymmErrors.cxx:977; TGraphAsymmErrors::SetPointEXlowvirtual void SetPointEXlow(Int_t i, Double_t exl)Set EXlow for point i.Definition TGraphAsymmErrors.cxx:1348; TGraphAsymmErrors::SetPointEYhighvirtual void SetPointEYhigh(Int_t i, Double_t eyh)Set EYhigh for point i.Definition TGraphAsymmErrors.cxx:1390; TGraphAsymmErrors::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *option="""") overrideSave primitive as a C++ statement(s) on output stream out.Definitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphAsymmErrors_8h_source.html:9078,error,errors,9078,doc/master/TGraphAsymmErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphAsymmErrors_8h_source.html,1,['error'],['errors']
Availability,"eSize will no longer reset the list of branches to be cached (either set or previously learnt) nor restart the learning phase. The learning phase is restarted when a new cache is created, e.g. after having removed a cache with SetCacheSize(0).; TSelectorDraw; The axis titles in case of a x:y:z plot with the option COLZ were not correct.; TParallelCoordVar; Change the format used to print the variables limit for ||-Coord to %g. It was %6.4f before.; Histogram Libraries; TFormula. New version of the TFormula class based on Cling. Formula expressions are now used to create functions which are passed to Cling to be Just In Time compiled. The expression is therefore compiled using Clang/LLVVM which will give execution time as compiled code and in addition correctness of the result obtained.; This class is not 100% backward compatible with the old TFormula class, which is still available in ROOT as =ROOT::v5::TFormula=. Some of the TFormula member funtions available in version 5, such as =Analyze= and =AnalyzeFunction= are not available in the new TFormula class. On the other hand formula expressions which were valid in version 5 are still valid in TFormula version 6; TFormula is not anymore a base class for TF1.; The new TFormula allows to defines the parameter names directly in the syntax. Example:. TFormula f(""f"",""f1"",""[constant]+[slope]*x"");. New pre-defined functions are provided, as: crystalball for the Crystal-Ball function, cheb0,1,...10 for the Chebyshev polynomials. TF1. Change of its inheritance structure. TF1 has not anymore TFormula as a base class, so this code. TF1 * f1 = new TF1(""f1"",""f1"",""sin(x)"",0,10);; TFormula * formula = (TFormula *) f1;; it is not valid anymore. The equivalent correct code is now; TF1 * f1 = new TF1(""f1"",""f1"",""sin(x)"",0,10);; TFormula * formula = f1->GetFormula();. Allow possibility to automatically normalize itself. If the function TF1::SetNormalized(true) is called, when evaluated, the function will return its value divided by its ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v604/release-notes.html:14888,avail,available,14888,doc/v604/release-notes.html,https://root.cern,https://root.cern/doc/v604/release-notes.html,2,['avail'],['available']
Availability,"eTCollectionvirtual; Compare(const TObject *obj) const overrideTCollectionvirtual; Contains(const char *name) constTCollectioninline; Contains(const TObject *obj) constTCollectioninline; Copy(TObject &object) constTObjectvirtual; DeclFileName()TSeqCollectioninlinestatic; Delete(Option_t *option="""") override=0TCollectionpure virtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""") overrideTCollectionvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() const overrideTCollectionvirtual; EDeprecatedStatusBits enum nameTObject; EmptyGarbageCollection()TCollectionstatic; end() constTCollectioninline; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTCollectionprotected; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fgCurrentCollectionTCollectionprivatestatic; fgDtorOnlyTObjectprivatestatic; fgEmptyingGarbageTCollectionprivatestatic; fgGarbageCollectionTCollectionprivatestatic; fgGarbageStackTCollectionprivatestatic; fgObjectStatTObjectprivatestatic; FindObject(const char *name) const overrideTCollectionvirtual; FindObject(const TObject *obj) const overrideTCollectionvirtual; First() const =0TSeqCollectionpure virtual; fNameTCollectionprotected; fSizeTCollectionprotected; fSortedTSeqCollectionprotected; fUniqueIDTObjectprivate; GarbageCollect(TObject *obj)TCollectionstatic; GetCollectionEntryName(TObject *entry) constTCollectionprotectedvirtual; GetCurrentCollection()TCollectionstatic; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetEntries() constTCollectioninlinevi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSeqCollection-members.html:2427,error,error,2427,doc/master/classTSeqCollection-members.html,https://root.cern,https://root.cern/doc/master/classTSeqCollection-members.html,2,['error'],['error']
Availability,"eTGraphvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoMerge(const TGraph *g)TGraphprotectedvirtual; Draw(Option_t *chopt="""") overrideTGraphvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawGraph(Int_t n, const Int_t *x, const Int_t *y, Option_t *option="""")TGraphvirtual; DrawGraph(Int_t n, const Float_t *x, const Float_t *y, Option_t *option="""")TGraphvirtual; DrawGraph(Int_t n, const Double_t *x=nullptr, const Double_t *y=nullptr, Option_t *option="""")TGraphvirtual; DrawPanel()TGraphvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTGraph; Eval(Double_t x, TSpline *spline=nullptr, Option_t *option="""") constTGraphvirtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTGraphvirtual; Expand(Int_t newsize)TGraphvirtual; Expand(Int_t newsize, Int_t step)TGraphvirtual; ExpandAndCopy(Int_t size, Int_t iend)TGraphprotected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fFTGraphQQprotected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fFunctionsTGraphprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fHistogramTGraphprotected; FillBuffer(char *&buffer)TNamedvirtual; FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE)TGraphprotectedvirtual; FindObject(const char *name) const overrideTGraphvirtual; FindObject(const TObject *obj) const overrideTGraphvirtual; Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Axis_t xmin=0, Axis_t xmax=0)TGraphvirtual; Fit(TF1 *f1, Option_t *option="""", Option_t *goption="""", Axis_t xmin=0, Axis_t xmax=0)TGraphvirtual; FitPanel()TGraphvirtual; fLi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphQQ-members.html:2946,error,error,2946,doc/master/classTGraphQQ-members.html,https://root.cern,https://root.cern/doc/master/classTGraphQQ-members.html,2,['error'],['error']
Availability,"eTGraphvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoMerge(const TGraph *g)TGraphprotectedvirtual; Draw(Option_t *chopt="""") overrideTGraphvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawGraph(Int_t n, const Int_t *x, const Int_t *y, Option_t *option="""")TGraphvirtual; DrawGraph(Int_t n, const Float_t *x, const Float_t *y, Option_t *option="""")TGraphvirtual; DrawGraph(Int_t n, const Double_t *x=nullptr, const Double_t *y=nullptr, Option_t *option="""")TGraphvirtual; DrawPanel()TGraphvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTGraph; Eval(Double_t x, TSpline *spline=nullptr, Option_t *option="""") constTGraphvirtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTGraphvirtual; Expand(Int_t newsize)TGraphvirtual; Expand(Int_t newsize, Int_t step)TGraphvirtual; ExpandAndCopy(Int_t size, Int_t iend)TGraphprotected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fFunctionsTGraphprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fHistogramTGraphprotected; FillBuffer(char *&buffer)TNamedvirtual; FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE)TGraphprotectedvirtual; FindObject(const char *name) const overrideTGraphvirtual; FindObject(const TObject *obj) const overrideTGraphvirtual; Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Axis_t xmin=0, Axis_t xmax=0)TGraphvirtual; Fit(TF1 *f1, Option_t *option="""", Option_t *goption="""", Axis_t xmin=0, Axis_t xmax=0)TGraphvirtual; FitPanel()TGraphvirtual; fLineColorTAttLineprotec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph-members.html:2934,error,error,2934,doc/master/classTGraph-members.html,https://root.cern,https://root.cern/doc/master/classTGraph-members.html,2,['error'],['error']
Availability,"eTraits.hxx>; 26 ; 27#include <TGenericClassInfo.h>; 28 ; 29#include <algorithm>; 30#include <array>; 31#include <cstddef>; 32#include <iostream>; 33#include <memory>; 34#include <string>; 35#include <type_traits>; 36#include <typeinfo>; 37#include <vector>; 38 ; 39class TClass;; 40class TEnum;; 41class TObject;; 42class TVirtualStreamerInfo;; 43 ; 44namespace ROOT {; 45 ; 46class TSchemaRule;; 47 ; 48namespace Experimental {; 49 ; 50class REntry;; 51 ; 52namespace Detail {; 53class RFieldVisitor;; 54} // namespace Detail; 55 ; 56/// The container field for an ntuple model, which itself has no physical representation.; 57/// Therefore, the zero field must not be connected to a page source or sink.; 58class RFieldZero final : public RFieldBase {; 59protected:; 60 std::unique_ptr<RFieldBase> CloneImpl(std::string_view newName) const final;; 61 void ConstructValue(void *) const final {}; 62 ; 63public:; 64 RFieldZero() : RFieldBase("""", """", ENTupleStructure::kRecord, false /* isSimple */) {}; 65 ; 66 using RFieldBase::Attach;; 67 size_t GetValueSize() const final { return 0; }; 68 size_t GetAlignment() const final { return 0; }; 69 ; 70 void AcceptVisitor(Detail::RFieldVisitor &visitor) const final;; 71};; 72 ; 73/// Used in RFieldBase::Check() to record field creation failures.; 74/// Also used when deserializing a field that contains unknown values that may come from; 75/// future RNTuple versions (e.g. an unknown Structure); 76class RInvalidField final : public RFieldBase {; 77 std::string fError;; 78 ; 79protected:; 80 std::unique_ptr<RFieldBase> CloneImpl(std::string_view newName) const final; 81 {; 82 return std::make_unique<RInvalidField>(newName, GetTypeName(), fError);; 83 }; 84 void ConstructValue(void *) const final {}; 85 ; 86public:; 87 RInvalidField(std::string_view name, std::string_view type, std::string_view error); 88 : RFieldBase(name, type, ENTupleStructure::kLeaf, false /* isSimple */), fError(error); 89 {; 90 }; 91 ; 92 const std::string &GetError()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RField_8hxx_source.html:2390,failure,failures,2390,doc/master/RField_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RField_8hxx_source.html,1,['failure'],['failures']
Availability,"eVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; Bool_tRooAbsTestStatistic::_verboseVerbose messaging if true; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; RooRealVar*_yvarY variable if so designated; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooXYChi2Var(); coverity[UNINIT_CTOR]. RooXYChi2Var(const char* name, const char* title, RooAbsReal& func, RooDataSet& data, Bool_t integrate = kFALSE). RooXYChi2Var constructor with function and X-Y values dataset. An X-Y dataset is a weighted dataset with one or more observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char* name, const char* title, RooAbsReal& func, RooDataSet& data, RooRealVar& yvar, Bool_t integrate = kFALSE). RooXYChi2Var constructor with function and X-Y values dataset. An X-Y dataset is a weighted dataset with one or more observables X where given yvar is interpreted; as the Y value. The Y variable must have a non-zero error defined at each point for the chi^2 calculati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooXYChi2Var.html:36956,error,error,36956,root/html528/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html528/RooXYChi2Var.html,12,['error'],['error']
Availability,"eVar) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTPave::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTPaveLabel::Draw(Option_t* option = """"); virtual TBox*TBox::DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual voidDrawClasses(const char* classes = ""this"")MENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPave::DrawPave(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize = 4, Option_t* option = ""br""); virtual voidTPaveLabel::DrawPaveLabel(Double_t x1, Double_t y1, Double_t x2, Double_t y2, const char* label, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPave::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTPave::GetBorderSize() const; TClassTree*GetClassTree() const; Double_tTPave::GetCornerRadius() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; const char*TPaveLabel::GetLabel() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Option_t*TPave::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPaveClass.html:2332,error,error,2332,root/html528/TPaveClass.html,https://root.cern,https://root.cern/root/html528/TPaveClass.html,4,['error'],['error']
Availability,"eVar) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTPave::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTPaveLabel::Draw(Option_t* option = """"); virtual TBox*TBox::DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual voidDrawClasses(const char* classes = ""this"")MENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPave::DrawPave(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize = 4, Option_t* option = ""br""); virtual voidTPaveLabel::DrawPaveLabel(Double_t x1, Double_t y1, Double_t x2, Double_t y2, const char* label, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPave::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Rectangle_tTBox::GetBBox(); virtual TPointTBox::GetBBoxCenter(); Int_tTPave::GetBorderSize() const; TClassTree*GetClassTree() const; Double_tTPave::GetCornerRadius() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; const char*TPaveLabel::GetLabel() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Option_t*TPave::GetName() const; virtual ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPaveClass.html:2332,error,error,2332,root/html534/TPaveClass.html,https://root.cern,https://root.cern/root/html534/TPaveClass.html,6,['error'],['error']
Availability,"eWrite(); TFileCacheWrite(TFile* file, Int_t buffersize); virtual~TFileCacheWrite(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Bool_tFlush(); virtual Int_tGetBytesInCache() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFileCacheWrite.html:1883,error,error,1883,root/html528/TFileCacheWrite.html,https://root.cern,https://root.cern/root/html528/TFileCacheWrite.html,6,['error'],['error']
Availability,"e] entry bufferDefinition TH1.h:108; TH1::GetEffectiveEntriesvirtual Double_t GetEffectiveEntries() constNumber of effective entries of the histogram.Definition TH1.cxx:4448; TH1::GetZaxisTAxis * GetZaxis()Definition TH1.h:326; TH1::Multiplyvirtual Bool_t Multiply(TF1 *f1, Double_t c1=1)Performs the operation:Definition TH1.cxx:6049; TH1::kXaxis@ kXaxisDefinition TH1.h:73; TH1::kAllAxes@ kAllAxesDefinition TH1.h:76; TH1::kZaxis@ kZaxisDefinition TH1.h:75; TH1::kYaxis@ kYaxisDefinition TH1.h:74; TH1::fNcellsInt_t fNcellsNumber of bins(1D), cells (2D) +U/Overflows.Definition TH1.h:89; TH1::Copyvoid Copy(TObject &hnew) const overrideCopy this histogram structure to newth1.Definition TH1.cxx:2671; TH1::fTsumwDouble_t fTsumwTotal Sum of weights.Definition TH1.h:96; TH1::fTsumw2Double_t fTsumw2Total Sum of squares of weights.Definition TH1.h:97; TH1::Classstatic TClass * Class(); TH1::DoIntegralvirtual Double_t DoIntegral(Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) constInternal function compute integral and optionally the error between the limits specified by the bin n...Definition TH1.cxx:7977; TH1::fTsumwx2Double_t fTsumwx2Total Sum of weight*X*X.Definition TH1.h:99; TH1::GetStdDevvirtual Double_t GetStdDev(Int_t axis=1) constReturns the Standard Deviation (Sigma).Definition TH1.cxx:7607; TH1::GetNbinsYvirtual Int_t GetNbinsY() constDefinition TH1.h:298; TH1::GetBinErrorvirtual Double_t GetBinError(Int_t bin) constReturn value of error associated to bin number bin.Definition TH1.cxx:9063; TH1::GetNbinsZvirtual Int_t GetNbinsZ() constDefinition TH1.h:299; TH1::GetDimensionvirtual Int_t GetDimension() constDefinition TH1.h:283; TH1::Streamervoid Streamer(TBuffer &) overrideStream a class object.Definition TH1.cxx:6933; TH1::kIsNotW@ kIsNotWHistogram is forced to be not weighted even when the histogram is filled with weighted.Definition TH1.h:172; TH1::CanExtendAllAxesvirtual Bool_t CanExtendAllAxes(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH3_8cxx_source.html:193156,error,error,193156,doc/master/TH3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH3_8cxx_source.html,1,['error'],['error']
Availability,"e_ifo);; 401 DEBUG_ASSERT(mach_status == KERN_SUCCESS);; 402 ; 403 /* appease ""unused variable"" warning for release builds */; 404 (void)mach_status;; 405 ; 406 clock_start_time = now;; 407 }; 408 ; 409 now = (uint64_t)((double)(now - clock_start_time); 410 * (double)timebase_ifo.numer; 411 / (double)timebase_ifo.denom);; 412 ; 413 t->tv_sec = now / 1000000000;; 414 t->tv_nsec = now % 1000000000;; 415 return 0;; 416 }; 417 return -1; /* EINVAL - Clock ID is unknown */; 418}; 419 ; 420/* if clock_gettime is declared, then __CLOCK_AVAILABILITY will be defined */; 421#if defined(__CLOCK_AVAILABILITY); 422/* If we compiled with Mac OSX 10.12 or later, then clock_gettime will be; 423 * declared but it may be NULL at runtime. So we need to check before using; 424 * it. */; 425static int; 426_civet_safe_clock_gettime(int clk_id, struct timespec *t); 427{; 428 if (clock_gettime) {; 429 return clock_gettime(clk_id, t);; 430 }; 431 return _civet_clock_gettime(clk_id, t);; 432}; 433#define clock_gettime _civet_safe_clock_gettime; 434#else; 435#define clock_gettime _civet_clock_gettime; 436#endif; 437 ; 438#endif; 439 ; 440 ; 441#if !defined(_WIN32); 442/* Unix might return different error codes indicating to try again.; 443 * For Linux EAGAIN==EWOULDBLOCK, maybe EAGAIN!=EWOULDBLOCK is history from; 444 * decades ago, but better check both and let the compile optimize it. */; 445#define ERROR_TRY_AGAIN(err) \; 446 (((err) == EAGAIN) || ((err) == EWOULDBLOCK) || ((err) == EINTR)); 447#endif; 448 ; 449#if defined(USE_ZLIB); 450#include ""zconf.h""; 451#include ""zlib.h""; 452#endif; 453 ; 454 ; 455/********************************************************************/; 456/* CivetWeb configuration defines */; 457/********************************************************************/; 458 ; 459/* Maximum number of threads that can be configured.; 460 * The number of threads actually created depends on the ""num_threads""; 461 * configuration parameter, but this is the upper limit. */; 462",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:15524,error,error,15524,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,2,['error'],['error']
Availability,"e_t * TGraph2DErrors::GetEY ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 46 of file TGraph2DErrors.h. ◆ GetEZ(). Double_t * TGraph2DErrors::GetEZ ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 47 of file TGraph2DErrors.h. ◆ GetXmaxE(). Double_t TGraph2DErrors::GetXmaxE ; (; ); const. overridevirtual . Returns the X maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 241 of file TGraph2DErrors.cxx. ◆ GetXminE(). Double_t TGraph2DErrors::GetXminE ; (; ); const. overridevirtual . Returns the X minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 252 of file TGraph2DErrors.cxx. ◆ GetYmaxE(). Double_t TGraph2DErrors::GetYmaxE ; (; ); const. overridevirtual . Returns the Y maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 263 of file TGraph2DErrors.cxx. ◆ GetYminE(). Double_t TGraph2DErrors::GetYminE ; (; ); const. overridevirtual . Returns the Y minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 274 of file TGraph2DErrors.cxx. ◆ GetZmaxE(). Double_t TGraph2DErrors::GetZmaxE ; (; ); const. overridevirtual . Returns the Z maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 285 of file TGraph2DErrors.cxx. ◆ GetZminE(). Double_t TGraph2DErrors::GetZminE ; (; ); const. overridevirtual . Returns the Z minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 296 of file TGraph2DErrors.cxx. ◆ IsA(). TClass * TGraph2DErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph2D.; Definition at line 61 of file TGraph2DErrors.h. ◆ operator=(). TGraph2DErrors & TGraph2DErrors::operator= ; (; const TGraph2DErrors & ; g). Assignment operator Copy everything except list of functions. ; Definition at line 167 of file TGraph2DErrors.cxx. ◆ Print(). void TGraph2DErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Pri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2DErrors.html:32167,error,errors,32167,doc/master/classTGraph2DErrors.html,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html,1,['error'],['errors']
Availability,"e_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Double_t *x, const Double_t *y, const Double_t *exL, const Double_t *exH, std::vector< TArrayD > eyL, std::vector< TArrayD > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, const Float_t *exH, std::vector< std::vector< Float_t > > eyL, std::vector< std::vector< Float_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, const Float_t *exH, std::vector< TArrayF > eyL, std::vector< TArrayF > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne=1);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  ~TGraphMultiErrors () override;  TGraphMultiErrors default destructor. ;  ; virtual void AddYError (Int_t np, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr);  Add a new y error to the graph and fill it with the values from eyL and eyH ;  ; void Apply (TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; virtual void BayesDivide (const TH1 *pass, const TH1 *total, Option_t *opt="""");  This function is only kept for backward compatibility. ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute Range. ;  ; virtual void DeleteYError (Int_t e);  Deletes the y error with the index e. ;  ; void Divide (const TH1 *pass, const TH1 *total, Option_t *opt=""cp"");  This function was adapted from the TGraphAsymmErrors class. ;  ; virtual TAttFill * GetAttFill (Int_t e);  Get AttFill pointer for specified error dimension. ;  ; virtual TAttLine *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors.html:9412,error,errors,9412,doc/master/classTGraphMultiErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html,1,['error'],['errors']
Availability,"e_t >::iterator ; end . ). private . formula interpretation ; Definition at line 499 of file MethodFDA.cxx. ◆ IsA(). virtual TClass * TMVA::MethodFDA::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::MethodBase.; Definition at line 154 of file MethodFDA.h. ◆ MakeClassSpecific(). void TMVA::MethodFDA::MakeClassSpecific ; (; std::ostream & ; fout, . const TString & ; className . ); const. protectedvirtual . write FDA-specific classifier response ; Reimplemented from TMVA::MethodBase.; Definition at line 674 of file MethodFDA.cxx. ◆ PrintResults(). void TMVA::MethodFDA::PrintResults ; (; const TString & ; fitter, . std::vector< Double_t > & ; pars, . const Double_t ; estimator . ); const. private . display fit parameters check maximum length of variable name ; Definition at line 421 of file MethodFDA.cxx. ◆ ProcessOptions(). void TMVA::MethodFDA::ProcessOptions ; (; ). privatevirtual . the option string is decoded, for available options see ""DeclareOptions"" ; Implements TMVA::MethodBase.; Definition at line 240 of file MethodFDA.cxx. ◆ ReadWeightsFromStream() [1/3]. virtual void TMVA::MethodBase::ReadWeightsFromStream ; (; std::istream & ; ). virtual . Implements TMVA::MethodBase. ◆ ReadWeightsFromStream() [2/3]. void TMVA::MethodFDA::ReadWeightsFromStream ; (; std::istream & ; i). virtual . read back the training results from a file (stream) ; Implements TMVA::MethodBase.; Definition at line 602 of file MethodFDA.cxx. ◆ ReadWeightsFromStream() [3/3]. virtual void TMVA::MethodBase::ReadWeightsFromStream ; (; TFile & ; ). inlinevirtual . Reimplemented from TMVA::MethodBase.; Definition at line 266 of file MethodBase.h. ◆ ReadWeightsFromXML(). void TMVA::MethodFDA::ReadWeightsFromXML ; (; void * ; wghtnode). virtual . read coefficients from xml weight file ; Implements TMVA::MethodBase.; Definition at line 635 of file MethodFDA.cxx. ◆ Streamer(). virtual void TMVA::MethodFDA::Streamer ; (; TBuffer & ; ). virtual . Reim",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodFDA.html:36588,avail,available,36588,doc/master/classTMVA_1_1MethodFDA.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodFDA.html,1,['avail'],['available']
Availability,"e_t E = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """")MENU ; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* = ""d""); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEval(const Double_t* x, const Double_t* coeff = 0) const; virtual Double_tEvalError(const Double_t* x, const Double_t* coeff = 0) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFindParameterization(Option_t* option = """")MENU ; virtual voidFit(Option_t* option = """")MENU ; Double_tGetChi2() const; const TVectorD*GetCoefficients() const; const TMatrixD*GetCorrelationMatrix() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetError() const; Int_t*GetFunctionCodes() const; const TMatrixD*GetFunctions() const; virtual TList*GetHistograms() const; virtual const char*TObject::GetIconName() const; Double_tGetMaxAngle() const; Int_tGetMaxFunctions() const; Int_t*GetMaxPowers() const; Double_tGetMaxQuantity(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiDimFit.html:14746,error,error,14746,root/html528/TMultiDimFit.html,https://root.cern,https://root.cern/root/html528/TMultiDimFit.html,4,['error'],['error']
Availability,"e_t E = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """")MENU ; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* = ""d""); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEval(const Double_t* x, const Double_t* coeff = 0) const; virtual Double_tEvalError(const Double_t* x, const Double_t* coeff = 0) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFindParameterization(Option_t* option = """")MENU ; virtual voidFit(Option_t* option = """")MENU ; Double_tGetChi2() const; const TVectorD*GetCoefficients() const; const TVectorD*GetCoefficientsRMS() const; const TMatrixD*GetCorrelationMatrix() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetError() const; Int_t*GetFunctionCodes() const; const TMatrixD*GetFunctions() const; virtual TList*GetHistograms() const; virtual const char*TObject::GetIconName() const; Double_tGetMaxAngle() const; Int_tGetMaxFunctions() const; Int_t*Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMultiDimFit.html:14960,error,error,14960,root/html534/TMultiDimFit.html,https://root.cern,https://root.cern/root/html534/TMultiDimFit.html,6,['error'],['error']
Availability,"e_t c1=1., Option_t *option=""y"") overrideMultiply the values and errors of a TGraphMultiErrors by a constant c1.Definition TGraphMultiErrors.cxx:1766; TGraphMultiErrors::SetLineColorAlphavirtual void SetLineColorAlpha(Int_t e, Color_t lcolor, Float_t lalpha)Set Line Color and Alpha of error e (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2084; TGraphMultiErrors::GetEXlowDouble_t * GetEXlow() const overrideDefinition TGraphMultiErrors.h:141; TGraphMultiErrors::CalcYErrorsSumvoid CalcYErrorsSum() constRecalculates the summed y error arrays.Definition TGraphMultiErrors.cxx:822; TGraphMultiErrors::~TGraphMultiErrors~TGraphMultiErrors() overrideTGraphMultiErrors default destructor.Definition TGraphMultiErrors.cxx:697; TGraphMultiErrors::SetAttLinevirtual void SetAttLine(Int_t e, TAttLine *tal)Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2029; TGraphMultiErrors::fEyHSumDouble_t * fEyHSum! Array of summed Y high errors for fittingDefinition TGraphMultiErrors.h:40; TGraphMultiErrors::GetEYlowDouble_t * GetEYlow() const overrideGet all low errors on y coordinates as an array summed according to fSumErrorsMode.Definition TGraphMultiErrors.cxx:1577; TGraphMultiErrors::DeleteYErrorvirtual void DeleteYError(Int_t e)Deletes the y error with the index e.Definition TGraphMultiErrors.cxx:1422; TGraphMultiErrors::Applyvoid Apply(TF1 *f) overrideApply a function to all data points .Definition TGraphMultiErrors.cxx:951; TGraphMultiErrors::SetEYhighvirtual void SetEYhigh(Int_t e, Int_t np, const Double_t *eyH)Set error e eyH values.Definition TGraphMultiErrors.cxx:1995; TGraphMultiErrors::GetNYErrorsInt_t GetNYErrors() constDefinition TGraphMultiErrors.h:166; TGraphMultiErrors::SwapPointsvoid SwapPoints(Int_t pos1, Int_t pos2) overrideSwap points.Definition TGraphMultiErrors.cxx:869; TGraphMultiErrors::SetAttFillvirtual void SetAttFill(Int_t e, TAttFill *taf)Set TAttFill parameters of error ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html:22410,error,errors,22410,doc/master/TGraphMultiErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html,1,['error'],['errors']
Availability,"e_t dc2 = 0); return an histogram containing the asymmetry of this histogram with h2,; where the asymmetry is defined as:. Asymmetry = (h1 - h2)/(h1 + h2) where h1 = this. works for 1D, 2D, etc. histograms; c2 is an optional argument that gives a relative weight between the two; histograms, and dc2 is the error on this weight. This is useful, for example,; when forming an asymmetry between two histograms from 2 different data sets that; need to be normalized to each other in some way. The function calculates; the errors asumming Poisson statistics on h1 and h2 (that is, dh = sqrt(h)). example: assuming 'h1' and 'h2' are already filled. h3 = h1->GetAsymmetry(h2). then 'h3' is created and filled with the asymmetry between 'h1' and 'h2';; h1 and h2 are left intact. Note that it is the user's responsibility to manage the created histogram. code proposed by Jason Seely (seely@mit.edu) and adapted by R.Brun. clone the histograms so top and bottom will have the; correct dimensions:; Sumw2 just makes sure the errors will be computed properly; when we form sums and ratios below. Int_t GetDefaultBufferSize(); static function; return the default buffer size for automatic histograms; the parameter fgBufferSize may be changed via SetDefaultBufferSize. Bool_t GetDefaultSumw2(); static function; return kTRUE if TH1::Sumw2 must be called when creating new histograms.; see TH1::SetDefaultSumw2. Double_t GetEntries() const; return the current number of entries. Double_t GetEffectiveEntries() const; number of effective entries of the histogram,; i.e. the number of unweighted entries a histogram would need to; have the same statistical power as this histogram with possibly; weighted entries (i.e. <= TH1::GetEntries()). char * GetObjectInfo(Int_t px, Int_t py) const; Redefines TObject::GetObjectInfo.; Displays the histogram info (bin number, contents, integral up to bin; corresponding to cursor position px,py. TVirtualHistPainter * GetPainter(Option_t* option = """"); return pointer to pai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:82988,error,errors,82988,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,4,['error'],['errors']
Availability,"e_t dc2 = 0); return an histogram containing the asymmetry of this histogram with h2,; where the asymmetry is defined as:. Asymmetry = (h1 - h2)/(h1 + h2) where h1 = this. works for 1D, 2D, etc. histograms; c2 is an optional argument that gives a relative weight between the two; histograms, and dc2 is the error on this weight. This is useful, for example,; when forming an asymmetry between two histograms from 2 different data sets that; need to be normalized to each other in some way. The function calculates; the errors asumming Poisson statistics on h1 and h2 (that is, dh = sqrt(h)). example: assuming 'h1' and 'h2' are already filled. h3 = h1->GetAsymmetry(h2). then 'h3' is created and filled with the asymmetry between 'h1' and 'h2';; h1 and h2 are left intact. Note that it is the user's responsibility to manage the created histogram. code proposed by Jason Seely (seely@mit.edu) and adapted by R.Brun. clone the histograms so top and bottom will have the; correct dimensions:; Sumw2 just makes sure the errors will be computed properly; when we form sums and ratios below. Int_t GetDefaultBufferSize(); static function; return the default buffer size for automatic histograms; the parameter fgBufferSize may be changed via SetDefaultBufferSize. Bool_t GetDefaultSumw2(); static function; return kTRUE if TH1::Sumw2 must be called when creating new histograms.; see TH1::SetDefaultSumw2. Double_t GetEntries() const; return the current number of entries. Double_t GetEffectiveEntries() const; number of effective entries of the histogram,; neff = (Sum of weights )^2 / (Sum of weight^2 ); In case of an unweighted histogram this number is equivalent to the; number of entries of the histogram.; For a weighted histogram, this number corresponds to the hypotetical number of unweighted entries; a histogram would need to have the same statistical power as this weighted histogram.; Note: The underflow/overflow are included if one has set the TH1::StatOverFlows flag; and if the statistics",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1.html:87992,error,errors,87992,root/html534/TH1.html,https://root.cern,https://root.cern/root/html534/TH1.html,2,['error'],['errors']
Availability,"e_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetHypeDimensions(Double_t rin, Double_t stin, Double_t rout, Double_t stout, Double_t dz); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidSetPoints(Float_t* points) const; voidTGeoShape::SetRuntime(Bool_t flag = kTRUE); virtual voidSetSegsAndPols(TBuffer3D& buff) const; voidTGeoShape::SetShapeBit(UInt_t f); voidTGeoShape::SetShapeBit(UInt_t f, Bool_t set); virtual voidTNamed::SetTitle(const char* title = """")MENU ; static voidTGeoShape::SetTransform(TGeoMatrix* matrix); voidTGeoTube::SetTubeDimensions(Double_t rmin, Double_t rmax, Double_t dz); virtual voidTObject::SetUniqueID(UInt_t uid); Int_tTGeoShape::ShapeDistancetoPrimitive(Int_t numpoints, Int_t px, Int_t py) const; virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidSizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTGeoShape::TestShapeBit(UInt_t f) const; Int_tTGeoShape::TestShapeBits(UInt_t f) const; static Double_tTGeoShape::Tolerance(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Double_tZHypeSq(Double_t r, Bool_t inner) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoHype.html:12554,Toler,Tolerance,12554,root/html534/TGeoHype.html,https://root.cern,https://root.cern/root/html534/TGeoHype.html,1,['Toler'],['Tolerance']
Availability,"e_t dz, Double_t sx, Double_t sy, Double_t sz, TGeoRotation* rot); TGeoGenTrans(const char* name, Double_t dx, Double_t dy, Double_t dz, Double_t sx, Double_t sy, Double_t sz, TGeoRotation* rot); virtual~TGeoGenTrans(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTGeoMatrix::GetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); voidTGeoMatrix::GetHomogenousMatrix(Double_t* hmat) const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; char*TGeoMatrix::GetPointerName()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoGenTrans.html:8167,Error,Error,8167,root/html532/TGeoGenTrans.html,https://root.cern,https://root.cern/root/html532/TGeoGenTrans.html,2,['Error'],['Error']
Availability,"e_t dz, Double_t sx, Double_t sy, Double_t sz, TGeoRotation* rot); virtual~TGeoGenTrans(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTGeoMatrix::GetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); voidTGeoMatrix::GetHomogenousMatrix(Double_t* hmat) const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; char*TGeoMatrix::GetPointerName() const; TGeoRotation*TGeoCombiTrans::GetRotation() const; virtual const Double_t*TGeoCombiTrans::GetRotationMatrix() const; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoGenTrans.html:8296,error,error,8296,root/html528/TGeoGenTrans.html,https://root.cern,https://root.cern/root/html528/TGeoGenTrans.html,6,['error'],['error']
Availability,"e_t e1 = 0, Double_t b2 = 0, Double_t e2 = 0); virtual~TSpline5(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Double_tDerivative(Double_t x) const; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTSpline::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTSpline::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEval(Double_t x) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTSpline::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tFindX(Double_t x) const; voidGetCoeff(Int_t i, Double_t& x, Double_t& y, Double_t& b, Double_t& c, Double_t& d, Double_t& e, Double_t& f); virtual Double_tTSpline::GetDelta() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; TH1F*TSpline::GetHistogram() const; virtual const char*TOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TSpline5.html:2295,Error,Error,2295,root/html532/TSpline5.html,https://root.cern,https://root.cern/root/html532/TSpline5.html,2,['Error'],['Error']
Availability,"e_t minimum = 0) override {SetMinRadial(minimum);}; 47 void SetMaxPolar(Double_t maximum = 6.28318530717958623); //*MENU*; 48 void SetMinPolar(Double_t minimum = 0); //*MENU*; 49 void SetOptionAxis(Bool_t opt) {fOptionAxis = opt;}; 50 void SetPolargram(TGraphPolargram *p) {fPolargram = p;}; 51 Double_t *GetXpol();; 52 Double_t *GetYpol();; 53 ; 54 ClassDefOverride(TGraphPolar,1); // Polar graph; 55};; 56 ; 57#endif; Double_tdouble Double_tDefinition RtypesCore.h:59; Option_tconst char Option_tDefinition RtypesCore.h:66; ClassDefOverride#define ClassDefOverride(name, id)Definition Rtypes.h:346; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TGraphErrors.h; TGraphPolargram.h; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TGraphPolarTo draw a polar graph.Definition TGraphPolar.h:23; TGraphPolar::SetMaximumvoid SetMaximum(Double_t maximum=1) overrideSet the maximum of the graph.Definition TGraphPolar.h:45; TGraphPolar::SetMinRadialvoid SetMinRadial(Double_t minimum=0)Set minimum radial in the center of the circle.Definition TGraphPolar.cxx:162; TGraphPolar::fOptionAxisBool_t fOptionAxisForce drawing of new coord system.Definition TGraphPolar.h:26; TGraphPolar::fXpolDouble_t * fXpol[fNpoints] points in polar coordinatesDefinition TGraphPolar.h:30; TGraphPolar::SetMaxPolarvoid SetMaxPolar(Double_t maximum=6.28318530717958623)Set maximum Polar.Definition TGraphPolar.cxx:137; TGraphPolar::GetYpolDouble_t * GetYpol()Return points in polar coordinates.Definition TGraphPolar.cxx:128; TGraphPolar::fPolargramTGraphPolargram * fPolargramThe polar coordinates system.Definition TGraphPolar.h:29; TGraphPolar::GetPolargramTGraphPolargram * GetPolargram()Defini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPolar_8h_source.html:2784,error,error,2784,doc/master/TGraphPolar_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphPolar_8h_source.html,1,['error'],['error']
Availability,"e_t nTrainingSamples, const Data_t &testData, size_t nTestSamples, Net_t &net, Scalar_t momentum, size_t nThreads) -> Scalar_t;  ; template<typename Data_t , typename Net_t > ; Scalar_t TrainMomentum (const Data_t &TrainingDataIn, size_t nTrainingSamples, const Data_t &TestDataIn, size_t nTestSamples, Net_t &net, Scalar_t momentum, size_t nThreads=1);  Same as Train(...) but uses the given momentum. ;  . Private Attributes; size_t fBatchSize;  Batch size to use for the training. ;  ; size_t fConvergenceCount;  Current number of training epochs without. ;  ; size_t fConvergenceSteps;  Number of training epochs without considerable. ;  ; Scalar_t fLearningRate;  Learning rate \(\alpha\). ;  ; Scalar_t fMinimumError;  The minimum loss achieved on the training set during the current training session. ;  ; size_t fStepCount;  Number of steps performed in the current training session. ;  ; Scalar_t fTestError;  Holds the most recently computed test loss. ;  ; size_t fTestInterval;  Interval for the computation of the test error. ;  ; Scalar_t fTrainingError;  Holds the most recently computed training loss. ;  . #include <TMVA/DNN/Minimizers.h>; Member Typedef Documentation. ◆ Matrix_t. template<typename Architecture_t > . using TMVA::DNN::TGradientDescent< Architecture_t >::Matrix_t = typename Architecture_t::Matrix_t. Definition at line 59 of file Minimizers.h. ◆ Scalar_t. template<typename Architecture_t > . using TMVA::DNN::TGradientDescent< Architecture_t >::Scalar_t = typename Architecture_t::Scalar_t. Definition at line 58 of file Minimizers.h. Constructor & Destructor Documentation. ◆ TGradientDescent() [1/2]. template<typename Architecture_t > . TMVA::DNN::TGradientDescent< Architecture_t >::TGradientDescent. Definition at line 175 of file Minimizers.h. ◆ TGradientDescent() [2/2]. template<typename Architecture_t > . TMVA::DNN::TGradientDescent< Architecture_t >::TGradientDescent ; (; Scalar_t ; learningRate, . size_t ; convergenceSteps, . size_t ; testInterval . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html:5018,error,error,5018,doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,1,['error'],['error']
Availability,"e_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidEnableTextInput(Bool_t on)TOGGLE GETTER ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGLBEntry*FindEntry(const char* s) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionGetDefa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGComboBox.html:4930,error,error,4930,root/html602/TGComboBox.html,https://root.cern,https://root.cern/root/html602/TGComboBox.html,4,['error'],['error']
Availability,"e_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTGContainer::End(Bool_t select = kFALSE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGContainer::FindFrame(Int_t x, Int_t y, Bool_t exclude = kTRUE); virtual TGFrame*TGContainer::FindFrameByName(const char* name); virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual void*TGContainer::FindItem(const TString& name, Bool_t direction = kTRUE, Bool_t caseSensitive = kTRUE, Bool_t subString = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGCanvas*TGContainer::GetCanvas() const; TGClient*TGObject::Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGFileContainer.html:5155,error,error,5155,root/html602/TGFileContainer.html,https://root.cern,https://root.cern/root/html602/TGFileContainer.html,12,['error'],['error']
Availability,"e_t rmin2, Double_t rmax2); virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tDistFromOutsideS(Double_t* point, Double_t* dir, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2); static voidDistToCone(Double_t* point, Double_t* dir, Double_t dz, Double_t r1, Double_t r2, Double_t& b, Double_t& delta); static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetAxisName(Int_t iaxis) const; virtual Double_tGetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; virtual voidGetBoundingCylinder(Double_t* param) const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tGetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTGeoBBox::GetDX() const; virtual Double_tTGeoBBox::GetDY() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoCone.html:3465,Error,Error,3465,root/html532/TGeoCone.html,https://root.cern,https://root.cern/root/html532/TGeoCone.html,1,['Error'],['Error']
Availability,"e_t s2[kNstat] = {0};; 994 if (!resetStats) {; 995 // need to initialize to zero s1 and s2 since; 996 // GetStats fills only used elements depending on dimension and type; 997 GetStats(s1);; 998 h1->GetStats(s2);; 999 }; 1000 ; 1001 SetMinimum();; 1002 SetMaximum();; 1003 ; 1004 // - Loop on bins (including underflows/overflows); 1005 Double_t factor = 1;; 1006 if (h1->GetNormFactor() != 0) factor = h1->GetNormFactor()/h1->GetSumOfWeights();; 1007 Double_t c1sq = c1 * c1;; 1008 Double_t factsq = factor * factor;; 1009 ; 1010 for (Int_t bin = 0; bin < fNcells; ++bin) {; 1011 //special case where histograms have the kIsAverage bit set; 1012 if (this->TestBit(kIsAverage) && h1->TestBit(kIsAverage)) {; 1013 Double_t y1 = h1->RetrieveBinContent(bin);; 1014 Double_t y2 = this->RetrieveBinContent(bin);; 1015 Double_t e1sq = h1->GetBinErrorSqUnchecked(bin);; 1016 Double_t e2sq = this->GetBinErrorSqUnchecked(bin);; 1017 Double_t w1 = 1., w2 = 1.;; 1018 ; 1019 // consider all special cases when bin errors are zero; 1020 // see http://root-forum.cern.ch/viewtopic.php?f=3&t=13299; 1021 if (e1sq) w1 = 1. / e1sq;; 1022 else if (h1->fSumw2.fN) {; 1023 w1 = 1.E200; // use an arbitrary huge value; 1024 if (y1 == 0) {; 1025 // use an estimated error from the global histogram scale; 1026 double sf = (s2[0] != 0) ? s2[1]/s2[0] : 1;; 1027 w1 = 1./(sf*sf);; 1028 }; 1029 }; 1030 if (e2sq) w2 = 1. / e2sq;; 1031 else if (fSumw2.fN) {; 1032 w2 = 1.E200; // use an arbitrary huge value; 1033 if (y2 == 0) {; 1034 // use an estimated error from the global histogram scale; 1035 double sf = (s1[0] != 0) ? s1[1]/s1[0] : 1;; 1036 w2 = 1./(sf*sf);; 1037 }; 1038 }; 1039 ; 1040 double y = (w1*y1 + w2*y2)/(w1 + w2);; 1041 UpdateBinContent(bin, y);; 1042 if (fSumw2.fN) {; 1043 double err2 = 1./(w1 + w2);; 1044 if (err2 < 1.E-200) err2 = 0; // to remove arbitrary value when e1=0 AND e2=0; 1045 fSumw2.fArray[bin] = err2;; 1046 }; 1047 } else { // normal case of addition between histograms; 1048 AddBinConten",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:40844,error,errors,40844,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['error'],['errors']
Availability,"e_t startx = 0, Double_t starty = 0, Double_t startz = 0); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidRefreshPhysicalNodes(Bool_t lock = kTRUE); voidRegisterMatrix(const TGeoMatrix* matrix); voidRemoveMaterial(Int_t index); voidRemoveNavigator(const TGeoNavigator* nav); Int_tReplaceVolume(TGeoVolume* vorig, TGeoVolume* vnew); voidTObject::ResetBit(UInt_t f); voidResetState(); voidResetUserData(); voidRestoreMasterVolume()MENU ; Double_tSafety(Bool_t inside = kFALSE); TGeoNode*SamplePoints(Int_t npoints, Double_t& dist, Double_t epsil = 1E-5, const char* g3path = """"); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; voidSaveAttributes(const char* filename = ""tgeoatt.C"")MENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TGeoNode*SearchNode(Bool_t downwards = kFALSE, const TGeoNode* skipnode = 0); voidSelectTrackingMedia(); TGeoPNEntry*SetAlignableEntry(const char* unique_name, const char* path, Int_t uid = -1); voidSetAllIndex(); voidSetAnimateTracks(Bool_t flag = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetBombFactors(Double_t bombx = 1.3, Double_t bomby = 1.3, Double_t bombz = 1.3, Double_t bombr = 1.3)MENU ; voidSetCheckedNode(TGeoNode* node); voidSetCheckingOverlaps(Bool_t flag = kTRUE); voidSetCldirChecked(Double_t* dir); voidSetClipping(Bool_t flag = kTRUE)MENU ; voidSetClippingShape(TGeoShape* clip); voidSetCurrentDirection(Double_t* dir); voidSetCurrentDirection(Double_t nx, Double_t ny, Double_t nz); Bool_tSetCurrentNavigator(Int_t index); voidSetCurrentPoint(Double_t* point); voidSetCurrentPoint(Double_t x, Double_t y, Double_t z); voidSetCurrentTrack(Int_t i); voidSetCurrentTrack(TVirtualGeoTrack* track); voidSetDrawExtraPaths(Bool_t flag = kTRUE); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetExplodedView(Int_t iopt =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoManager.html:27832,down,downwards,27832,root/html532/TGeoManager.html,https://root.cern,https://root.cern/root/html532/TGeoManager.html,2,['down'],['downwards']
Availability,"e_t tolerance = 1e-10) const; Find the nearest point to xvalue. Return -1 if distance; exceeds tolerance. Double_t interpolate(Double_t x, Double_t tolerance = 1e-10) const; Return linearly interpolated value of curve at xvalue. If distance; to nearest point is less than tolerance, return nearest point value; instead. RooCurve* makeErrorBand(const vector<RooCurve*>& variations, Double_t Z = 1) const; Construct filled RooCurve represented error band that captures alpha% of the variations; of the curves passed through argument variations, where the percentage alpha corresponds to; the central interval fraction of a significance Z. RooCurve* makeErrorBand(const vector<RooCurve*>& plusVar, const vector<RooCurve*>& minusVar, const TMatrixD& V, Double_t Z = 1) const; Construct filled RooCurve represented error band represent the error added in quadrature defined by the curves arguments; plusVar and minusVar corresponding to one-sigma variations of each parameter. The resulting error band, combined used the correlation matrix C; is multiplied with the significance parameter Z to construct the equivalent of a Z sigma error band (in Gaussian approximation). void calcBandInterval(const vector<RooCurve*>& plusVar, const vector<RooCurve*>& minusVar, Int_t i, const TMatrixD& V, Double_t Z, Double_t& lo, Double_t& hi) const; Retrieve variation points from curves. void calcBandInterval(const vector<RooCurve*>& variations, Int_t i, Double_t Z, Double_t& lo, Double_t& hi, Bool_t approxGauss) const. Bool_t isIdentical(const RooCurve& other, Double_t tol = 1e-6) const; Return true if curve is identical to other curve allowing for given; absolute tolerance on each point compared point. RooCurve(). void Print(Option_t* options = 0) const; Printing interface. » Last changed: Thu Sep 23 19:59:23 2010 » Last generated: 2010-09-23 19:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooCurve.html:22835,error,error,22835,root/html528/RooCurve.html,https://root.cern,https://root.cern/root/html528/RooCurve.html,3,"['error', 'toler']","['error', 'tolerance']"
Availability,"e_t tolerance = 1e-10) const; Find the nearest point to xvalue. Return -1 if distance; exceeds tolerance. Double_t interpolate(Double_t x, Double_t tolerance = 1e-10) const; Return linearly interpolated value of curve at xvalue. If distance; to nearest point is less than tolerance, return nearest point value; instead. RooCurve* makeErrorBand(const vector<RooCurve*>& variations, Double_t Z = 1) const; Construct filled RooCurve represented error band that captures alpha% of the variations; of the curves passed through argument variations, where the percentage alpha corresponds to; the central interval fraction of a significance Z. RooCurve* makeErrorBand(const vector<RooCurve*>& plusVar, const vector<RooCurve*>& minusVar, const TMatrixD& V, Double_t Z = 1) const; Construct filled RooCurve represented error band represent the error added in quadrature defined by the curves arguments; plusVar and minusVar corresponding to one-sigma variations of each parameter. The resulting error band, combined used the correlation matrix C; is multiplied with the significance parameter Z to construct the equivalent of a Z sigma error band (in Gaussian approximation). void calcBandInterval(const vector<RooCurve*>& plusVar, const vector<RooCurve*>& minusVar, Int_t i, const TMatrixD& V, Double_t Z, Double_t& lo, Double_t& hi) const; Retrieve variation points from curves. void calcBandInterval(const vector<RooCurve*>& variations, Int_t i, Double_t Z, Double_t& lo, Double_t& hi, Bool_t approxGauss) const. Bool_t isIdentical(const RooCurve& other, Double_t tol = 1e-6) const; Return true if curve is identical to other curve allowing for given; absolute tolerance on each point compared point. RooCurve(). void Print(Option_t* options = 0) const; Printing interface. » Last changed: Tue Mar 10 17:16:07 2015 » Last generated: 2015-03-10 17:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCurve.html:23310,error,error,23310,root/html534/RooCurve.html,https://root.cern,https://root.cern/root/html534/RooCurve.html,6,"['error', 'toler']","['error', 'tolerance']"
Availability,"e_t x) const {; 300 return ROOT::Math::exponential_cdf(x, fParams[0]);; 301 }; 302 ; 303 void GoFTest::LogSample() {; 304 transform(fSamples[0].begin(), fSamples[0].end(), fSamples[0].begin(),; 305 std::function<Double_t(Double_t)>(TMath::Log));; 306 }; 307 ; 308/* ; 309 Taken from (1); 310*/ ; 311 Double_t GoFTest::GetSigmaN(const std::vector<size_t> & ns, size_t N) {; 312 // compute moments of AD distribution (from Scholz-Stephen paper, paragraph 3); 313 ; 314 Double_t sigmaN = 0.0, h = 0.0, H = 0.0, g = 0.0, a, b, c, d, k = ns.size();; 315 ; 316 for (size_t i = 0; i < ns.size(); ++i) {; 317 H += 1.0 / double( ns[i] );; 318 }; 319 ; 320 // use approximate formulas for large N; 321 // cache Sum( 1 / i); 322 if (N < 2000) { ; 323 std::vector<double> invI(N); ; 324 for (size_t i = 1; i <= N - 1; ++i) {; 325 invI[i] = 1.0 / i; ; 326 h += invI[i]; ; 327 }; 328 for (size_t i = 1; i <= N - 2; ++i) {; 329 double tmp = invI[N-i];; 330 for (size_t j = i + 1; j <= N - 1; ++j) {; 331 g += tmp * invI[j];; 332 }; 333 }; 334 }; 335 else {; 336 // for N larger than 2000 error difference in g is ~ 5 10^-3 while in h is at the level of 10^-5; 337 const double emc = 0.5772156649015328606065120900824024; // Euler-Mascheroni constant; 338 h = std::log(double(N-1) ) + emc;; 339 g = (M_PI)*(M_PI)/6.0;; 340 }; 341 double k2 = std::pow(k,2);; 342 a = (4 * g - 6) * k + (10 - 6 * g) * H - 4 * g + 6;; 343 b = (2 * g - 4) * k2 + 8 * h * k + (2 * g - 14 * h - 4) * H - 8 * h + 4 * g - 6;; 344 c = (6 * h + 2 * g - 2) * k2 + (4 * h - 4 *g + 6) * k + (2 * h - 6) * H + 4 * h;; 345 d = (2 * h + 6) * k2 - 4 * h * k;; 346 sigmaN += a * std::pow(double(N),3) + b * std::pow(double(N),2) + c * N + d;; 347 sigmaN /= ( double(N - 1) * double(N - 2) * double(N - 3) );; 348 sigmaN = TMath::Sqrt(sigmaN);; 349 return sigmaN;; 350 }; 351 ; 352 ; 353 Double_t GoFTest::PValueADKSamples(size_t nsamples, Double_t tx) {; 354 ; 355 /*; 356 Computation of p-values according to ; 357 ""K-Sample Anderson-Darling Tests"" b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GoFTest_8cxx_source.html:11203,error,error,11203,doc/master/GoFTest_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html,1,['error'],['error']
Availability,"e_t x0, Double_t y0); virtual~TVector2(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Double_tDeltaPhi(const TVector2& v) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVector2.html:1398,error,error,1398,root/html528/TVector2.html,https://root.cern,https://root.cern/root/html528/TVector2.html,6,['error'],['error']
Availability,"e_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTree::Draw(Option_t* opt); virtual Long64_tTTree::Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual Long64_tTTree::Draw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTTree::DropBaskets(); virtual Int_tTTree::DropBranchFromCache(const char* bname, Bool_t subbranches = kFALSE); virtual Int_tTTree::DropBranchFromCache(TBranch* branch, Bool_t subbranches = kFALSE); virtual voidTTree::DropBuffers(Int_t nbytes); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Int_tFill(); virtual voidTNamed::FillBuffer(char*& buffer); virtual TBranch*TTree::FindBranch(const char* name); virtual TLeaf*TTree::FindLeaf(const char* name); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTTree::Fit(const char* funcname, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual Int_tTTree::FlushBaskets() const; virtual const char*TTree::GetAlias(const char* aliasName) const; virtual Long64_tTTree::GetAutoFlush() const; virtual Long64_tTTree::GetAutoSave() const; virtual TBranch*TTree::GetBranch(const char* name); virtual TBranchRef*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeSQL.html:4262,error,error,4262,root/html604/TTreeSQL.html,https://root.cern,https://root.cern/root/html604/TTreeSQL.html,2,['error'],['error']
Availability,"e_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTree::Draw(Option_t* opt); virtual Long64_tTTree::Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual Long64_tTTree::Draw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTTree::DropBaskets(); virtual Int_tTTree::DropBranchFromCache(const char* bname, Bool_t subbranches = kFALSE); virtual Int_tTTree::DropBranchFromCache(TBranch* branch, Bool_t subbranches = kFALSE); virtual voidTTree::DropBuffers(Int_t nbytes); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Int_tFill(const Double_t* x); virtual Int_tFill(Double_t x0, Double_t x1, Double_t x2 = 0, Double_t x3 = 0, Double_t x4 = 0, Double_t x5 = 0, Double_t x6 = 0, Double_t x7 = 0, Double_t x8 = 0, Double_t x9 = 0, Double_t x10 = 0, Double_t x11 = 0, Double_t x12 = 0, Double_t x13 = 0, Double_t x14 = 0); virtual voidTNamed::FillBuffer(char*& buffer); virtual TBranch*TTree::FindBranch(const char* name); virtual TLeaf*TTree::FindLeaf(const char* name); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTTree::Fit(const char* funcname, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Long64_t nentries = 1000000000, Long64_t f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TNtupleD.html:4842,error,error,4842,root/html604/TNtupleD.html,https://root.cern,https://root.cern/root/html604/TNtupleD.html,2,['error'],['error']
Availability,"e_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTree::Draw(Option_t* opt); virtual Long64_tTTree::Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual Long64_tTTree::Draw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTTree::DropBaskets(); virtual Int_tTTree::DropBranchFromCache(const char* bname, Bool_t subbranches = kFALSE); virtual Int_tTTree::DropBranchFromCache(TBranch* branch, Bool_t subbranches = kFALSE); virtual voidTTree::DropBuffers(Int_t nbytes); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Int_tFill(const Float_t* x); Int_tFill(Int_t x0); Int_tFill(Double_t x0); virtual Int_tFill(Float_t x0, Float_t x1 = 0, Float_t x2 = 0, Float_t x3 = 0, Float_t x4 = 0, Float_t x5 = 0, Float_t x6 = 0, Float_t x7 = 0, Float_t x8 = 0, Float_t x9 = 0, Float_t x10 = 0, Float_t x11 = 0, Float_t x12 = 0, Float_t x13 = 0, Float_t x14 = 0); virtual voidTNamed::FillBuffer(char*& buffer); virtual TBranch*TTree::FindBranch(const char* name); virtual TLeaf*TTree::FindLeaf(const char* name); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTTree::Fit(const char* funcname, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Long64_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TNtuple.html:4826,error,error,4826,root/html604/TNtuple.html,https://root.cern,https://root.cern/root/html604/TNtuple.html,2,['error'],['error']
Availability,"e_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTree::Draw(Option_t* opt); virtual Long64_tTTree::Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual Long64_tTTree::Draw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTTree::DropBaskets(); virtual Int_tTTree::DropBranchFromCache(const char* bname, Bool_t subbranches = kFALSE); virtual Int_tTTree::DropBranchFromCache(TBranch* branch, Bool_t subbranches = kFALSE); virtual voidTTree::DropBuffers(Int_t nbytes); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Int_tTTree::Fill(); virtual voidTNamed::FillBuffer(char*& buffer); virtual TBranch*TTree::FindBranch(const char* name); virtual TLeaf*TTree::FindLeaf(const char* name); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTTree::Fit(const char* funcname, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual Int_tTTree::FlushBaskets() const; virtual const char*TTree::GetAlias(const char* aliasName) const; virtual Long64_tTTree::GetAutoFlush() const; virtual Long64_tTTree::GetAutoSave() const; virtual TBranch*TTree::GetBranch(const char* name); virtual TBra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/THbookTree.html:5524,error,error,5524,root/html604/THbookTree.html,https://root.cern,https://root.cern/root/html604/THbookTree.html,2,['error'],['error']
Availability,"e_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidDrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawFrame(Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light); voidDrawHatch(Float_t dy, Float_t angle, Int_t n, Float_t* x, Float_t* y); voidDrawHatch(Float_t dy, Float_t angle, Int_t n, Double_t* x, Double_t* y); voidDrawPolyLine(Int_t n, TPoints* xy); voidDrawPolyLineNDC(Int_t n, TPoints* uv); virtual voidDrawPolyMarker(Int_t n, Float_t* x, Float_t* y); virtual voidDrawPolyMarker(Int_t n, Double_t* x, Double_t* y); virtual voidDrawPS(Int_t n, Float_t* xw, Float_t* yw); virtual voidDrawPS(Int_t n, Double_t* xw, Double_t* yw); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFontEmbed(); boolFontEmbedType1(const char* filename); boolFontEmbedType2(const char* filename); boolFontEmbedType42(const char* filename); voidFontEncode(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPostScript.html:9162,Error,Error,9162,root/html534/TPostScript.html,https://root.cern,https://root.cern/root/html534/TPostScript.html,3,['Error'],['Error']
Availability,"e_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidDrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawFrame(Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light); voidDrawHatch(Float_t dy, Float_t angle, Int_t n, Float_t* x, Float_t* y); voidDrawHatch(Float_t dy, Float_t angle, Int_t n, Double_t* x, Double_t* y); voidDrawPolyLine(Int_t n, TPoints* xy); voidDrawPolyLineNDC(Int_t n, TPoints* uv); virtual voidDrawPolyMarker(Int_t n, Float_t* x, Float_t* y); virtual voidDrawPolyMarker(Int_t n, Double_t* x, Double_t* y); virtual voidDrawPS(Int_t n, Float_t* xw, Float_t* yw); virtual voidDrawPS(Int_t n, Double_t* xw, Double_t* yw); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFontEncode(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TPDF.html:3349,Error,Error,3349,root/html532/TPDF.html,https://root.cern,https://root.cern/root/html532/TPDF.html,5,['Error'],['Error']
Availability,"e_t* point, const Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz, Double_t c1, Double_t s1, Double_t c2, Double_t s2, Double_t cm, Double_t sm, Double_t cdfi); static Double_tTGeoShape::DistToPhiMin(const Double_t* point, const Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); static voidTGeoTube::DistToTube(Double_t rsq, Double_t nsq, Double_t rdotn, Double_t radius, Double_t& b, Double_t& delta); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*TGeoTube::GetAxisName(Int_t iaxis) const; virtual Double_tGetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; virtual voidGetBoundingCylinder(Double_t* param) const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tGetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTGeoBBox::GetDX() const; virtual Double_tTGeoBBox::GetDY() const; virtual Double_tTGeoTube::GetDz() const; virtual Double_tTGeoBBox::GetDZ() const; virtual Double_tTGeoBBox::GetF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoTubeSeg.html:4882,error,error,4882,root/html534/TGeoTubeSeg.html,https://root.cern,https://root.cern/root/html534/TGeoTubeSeg.html,6,['error'],['error']
Availability,"e_t* point, const Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz, Double_t c1, Double_t s1, Double_t c2, Double_t s2, Double_t cm, Double_t sm, Double_t cdfi); static Double_tTGeoShape::DistToPhiMin(const Double_t* point, const Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); static voidTGeoTube::DistToTube(Double_t rsq, Double_t nsq, Double_t rdotn, Double_t radius, Double_t& b, Double_t& delta); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*TGeoTube::GetAxisName(Int_t iaxis) const; virtual Double_tGetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; virtual voidTGeoTubeSeg::GetBoundingCylinder(Double_t* param) const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tGetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTGeoBBox::GetDX() const; virtual Double_tTGeoBBox::GetDY() const; virtual Double_tTGeoTube::GetDz() const; virtual Double_tTGeoBBox::GetDZ() const; virtual Double_tT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoCtub.html:4978,error,error,4978,root/html534/TGeoCtub.html,https://root.cern,https://root.cern/root/html534/TGeoCtub.html,6,['error'],['error']
Availability,"e_t* pt, Double_t* dir, Double_t t) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetAxisName(Int_t iaxis) const; virtual Double_tGetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; virtual voidGetBoundingCylinder(Double_t* param) const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tGetByteCount() const; Double_tGetDphi() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTGeoBBox::GetDX() const; virtual D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoTorus.html:2969,Error,Error,2969,root/html532/TGeoTorus.html,https://root.cern,https://root.cern/root/html532/TGeoTorus.html,1,['Error'],['Error']
Availability,"e_t* x, const Double_t* y, const Double_t* exl = 0, const Double_t* exh = 0, const Double_t* eyl = 0, const Double_t* eyh = 0, const Double_t* exld = 0, const Double_t* exhd = 0, const Double_t* eyld = 0, const Double_t* eyhd = 0); TGraphBentErrors normal constructor. if exl,h or eyl,h are null, the corresponding arrays are preset to zero. ~TGraphBentErrors(); TGraphBentErrors default destructor. void Apply(TF1* f); apply a function to all data points; y = f(x,y). Errors are calculated as eyh = f(x,y+eyh)-f(x,y) and; eyl = f(x,y)-f(x,y-eyl). Special treatment has to be applied for the functions where the; role of ""up"" and ""down"" is reversed.; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; Get high error on X[i]. Double_t GetErrorXlow(Int_t bin) const; Get low error on X[i]. Double_t GetErrorYhigh(Int_t bin) const; Get high error on Y[i]. Double_t GetErrorYlow(Int_t bin) const; Get low error on Y[i]. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostrea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraphBentErrors.html:17430,error,errors,17430,root/html534/TGraphBentErrors.html,https://root.cern,https://root.cern/root/html534/TGraphBentErrors.html,6,['error'],['errors']
Availability,"e_t* x, const Double_t* y, const Double_t* exl = 0, const Double_t* exh = 0, const Double_t* eyl = 0, const Double_t* eyh = 0, const Double_t* exld = 0, const Double_t* exhd = 0, const Double_t* eyld = 0, const Double_t* eyhd = 0); TGraphBentErrors normal constructor. if exl,h or eyl,h are null, the corresponding arrays are preset to zero. ~TGraphBentErrors(); TGraphBentErrors default destructor. void Apply(TF1* f); apply a function to all data points; y = f(x,y). Errors are calculated as eyh = f(x,y+eyh)-f(x,y) and; eyl = f(x,y)-f(x,y-eyl). Special treatment has to be applied for the functions where the; role of ""up"" and ""down"" is reversed.; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; Get high error on X[i]. Double_t GetErrorXlow(Int_t bin) const; Get low error on X[i]. Double_t GetErrorYhigh(Int_t bin) const; Get high error on Y[i]. Double_t GetErrorYlow(Int_t bin) const; Get low error on Y[i]. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphBentErrors.html:16962,error,errors,16962,root/html528/TGraphBentErrors.html,https://root.cern,https://root.cern/root/html528/TGraphBentErrors.html,4,['error'],['errors']
Availability,"e_t, TList**); virtual Int_tAddWorkers(TList* workers); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tGetActiveWorkers(); Long64_tGetBytesRead() const; TList*GetConfigParams(Bool_t steal = kFALSE); Double_tGetCumProcTime() const; virtual Float_tGetCurrentRate(Bool_t& all); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tGetEntriesProcessed() const; virtual Int_tGetEstEntriesProcessed(Float_t, Long64_t& ent, Long64_t& bytes, Long64_t& calls); TList*GetFailedPackets(); virtual const char*TObject::GetIconName() const; Float_tGetInitTime() const; virtual const char*TObject::GetName() const; virtual TDSetElement*GetNextPacket(TSlave* sl, TMessage* r); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Opt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualPacketizer.html:2292,error,error,2292,root/html534/TVirtualPacketizer.html,https://root.cern,https://root.cern/root/html534/TVirtualPacketizer.html,2,['error'],['error']
Availability,"e_t, TList**); virtual Int_tAddWorkers(TList* workers); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tGetActiveWorkers(); Long64_tTVirtualPacketizer::GetBytesRead() const; TList*TVirtualPacketizer::GetConfigParams(Bool_t steal = kFALSE); Double_tTVirtualPacketizer::GetCumProcTime() const; virtual Float_tGetCurrentRate(Bool_t& all); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tGetEntriesProcessed(TSlave* sl) const; virtual Int_tTVirtualPacketizer::GetEstEntriesProcessed(Float_t, Long64_t& ent, Long64_t& bytes, Long64_t& calls); TList*TVirtualPacketizer::GetFailedPackets(); virtual const char*TObject::GetIconName() const; Float_tTVirtualPacketizer::GetInitTime() const; virtual const char*TObject::GetName() const; virtual TDSetElement*GetNextPacket(TSlave* s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPacketizer.html:2072,error,error,2072,root/html534/TPacketizer.html,https://root.cern,https://root.cern/root/html534/TPacketizer.html,2,['error'],['error']
Availability,"e_tDefinition RtypesCore.h:61; kNPOSconstexpr Ssiz_t kNPOSDefinition RtypesCore.h:117; Long64_tlong long Long64_tDefinition RtypesCore.h:69; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; Option_tconst char Option_tDefinition RtypesCore.h:66; ClassImp#define ClassImp(name)Definition Rtypes.h:382; TBasket.h; PrintElementsstatic void PrintElements(const TStreamerInfo *info, const TStreamerInfoActions::TIDs &ids)Print branch parameters.Definition TBranchElement.cxx:3816; R__CleanNamestatic void R__CleanName(std::string &name)Remove trailing dimensions and make sure there is a trailing dot.Definition TBranchElement.cxx:1771; TBranchElement.h; TBranchObject.h; TBranchRef.h; TBranchSTL.h; TBrowser.h; TBufferFile.h; TClassEdit.h; TClass.h; TClonesArray.h; TDataMember.h; TDataType.h; EDataTypeEDataTypeDefinition TDataType.h:28; kOther_t@ kOther_tDefinition TDataType.h:32; kIsAbstract@ kIsAbstractDefinition TDictionary.h:71; TError.h; R__ASSERT#define R__ASSERT(e)Checks condition e and reports a fatal error if it's false.Definition TError.h:125; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; TFile.h; TFolder.h; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; cursorOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t cursorDefinition TGWin32VirtualXProxy.cxx:160; offsetOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:245483,error,error,245483,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['error'],['error']
Availability,"e_tTFormula::Eval(Double_t x, Double_t y = 0, Double_t z = 0, Double_t t = 0) const; virtual TClass*EvalClass() const; virtual Double_tEvalInstance(Int_t i = 0, const char*[] stringStack = 0); virtual Long64_tEvalInstance64(Int_t i = 0, const char*[] stringStack = 0); doubleEvalInstance<double>(Int_t i = 0, const char*[] stringStack = 0); long doubleEvalInstance<long double>(Int_t i = 0, const char*[] stringStack = 0); Long64_tEvalInstance<long long>(Int_t i = 0, const char*[] stringStack = 0); virtual LongDouble_tEvalInstanceLD(Int_t i = 0, const char*[] stringStack = 0); virtual void*EvalObject(Int_t i = 0); virtual Double_tTFormula::EvalPar(const Double_t* x, const Double_t* params = 0); virtual Double_tTFormula::EvalParOld(const Double_t* x, const Double_t* params = 0); virtual const char*EvalStringInstance(Int_t i = 0); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TStringTFormula::GetExpFormula(Option_t* option = """") const; virtual const char*TObject::GetIconName() const; virtual TLeaf*GetLeaf(Int_t n) const; TFormLeafInfo*GetLeafInfo(Int_t code) const; virtual const TObject*TFormula::GetLinearPart(Int_t i); TTreeFormulaManager*GetManager() const; static voidTFormula::GetMaxima(Int_t& maxop, Int_t& maxpar, Int_t& maxconst); TMethodCall*GetMethodCall(Int_t code) const; virtual Int_tGetMultiplicity() const; virtual const char*TNamed::GetName() const; virtual Int_tGetNcodes() const; virtual Int_tGetNdata(); virtual Int_tTFormula::GetNdim() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeFormula.html:3900,error,error,3900,root/html602/TTreeFormula.html,https://root.cern,https://root.cern/root/html602/TTreeFormula.html,2,['error'],['error']
Availability,"e_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024 * 16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024 * 16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char*[] name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual TArray*GenerateArray() const; TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx) const; virtual Long64_tTHnSparse::GetBin(const Double_t* x) const; virtual Long64_tTHnSparse::GetBin(const char*[] name) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx, Bool_t allocate = kTRUE); virtual L",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnSparseT_TArrayC_.html:2245,error,error,2245,root/html602/THnSparseT_TArrayC_.html,https://root.cern,https://root.cern/root/html602/THnSparseT_TArrayC_.html,60,"['Error', 'error']","['Error', 'error']"
Availability,"e_tVavilov(Double_t x, Double_t kappa, Double_t beta2); Double_tVavilovI(Double_t x, Double_t kappa, Double_t beta2); Double_tVoigt(Double_t x, Double_t sigma, Double_t lg, Int_t r = 4). Class Charts; Function documentation; Long_t Hypot(Long_t x, Long_t y). Double_t Hypot(Double_t x, Double_t y). Double_t ASinH(Double_t ). Double_t ACosH(Double_t ). Double_t ATanH(Double_t ). Double_t Log2(Double_t x). Double_t DiLog(Double_t x); The DiLogarithm function; Code translated by R.Brun from CERNLIB DILOG function C332. Double_t Erf(Double_t x); Computation of the error function erf(x).; Erf(x) = (2/sqrt(pi)) Integral(exp(-t^2))dt between 0 and x. Double_t Erfc(Double_t x); Compute the complementary error function erfc(x).; Erfc(x) = (2/sqrt(pi)) Integral(exp(-t^2))dt between x and infinity. Double_t ErfInverse(Double_t x); returns the inverse error function; x must be <-1<x<1. Double_t ErfcInverse(Double_t x); returns the inverse of the complementary error function; x must be 0<x<2; implement using the quantile of the normal distribution; instead of ErfInverse for better numerical precision for large x. Double_t Factorial(Int_t i); Compute factorial(n). Double_t Freq(Double_t x); Computation of the normal frequency function freq(x).; Freq(x) = (1/sqrt(2pi)) Integral(exp(-t^2/2))dt between -infinity and x. Translated from CERNLIB C300 by Rene Brun. Double_t Gamma(Double_t z); Computation of gamma(z) for all z. C.Lanczos, SIAM Journal of Numerical Analysis B1 (1964), 86. Double_t Gamma(Double_t a, Double_t x); Computation of the normalized lower incomplete gamma function P(a,x) as defined in the; Handbook of Mathematical Functions by Abramowitz and Stegun, formula 6.5.1 on page 260 .; Its normalization is such that TMath::Gamma(a,+infinity) = 1 . --- Nve 14-nov-1998 UU-SAP Utrecht. Double_t BreitWigner(Double_t x, Double_t mean = 0, Double_t gamma = 1); Calculate a Breit Wigner function with mean and gamma. Double_t Gaus(Double_t x, Double_t mean = 0, Double_t sigma = 1, B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMath.html:12937,error,error,12937,root/html534/TMath.html,https://root.cern,https://root.cern/root/html534/TMath.html,6,['error'],['error']
Availability,"e_t[fMaxSize];; 356 fEYhigh = new Double_t[fMaxSize];; 357 fEXlowd = new Double_t[fMaxSize];; 358 fEYlowd = new Double_t[fMaxSize];; 359 fEXhighd = new Double_t[fMaxSize];; 360 fEYhighd = new Double_t[fMaxSize];; 361 return kTRUE;; 362}; 363 ; 364////////////////////////////////////////////////////////////////////////////////; 365/// Protected function to perform the merge operation of a graph with asymmetric errors.; 366 ; 367Bool_t TGraphBentErrors::DoMerge(const TGraph *g); 368{; 369 if (g->GetN() == 0) return kFALSE;; 370 ; 371 Double_t *exl = g->GetEXlow();; 372 Double_t *exh = g->GetEXhigh();; 373 Double_t *eyl = g->GetEYlow();; 374 Double_t *eyh = g->GetEYhigh();; 375 ; 376 Double_t *exld = g->GetEXlowd();; 377 Double_t *exhd = g->GetEXhighd();; 378 Double_t *eyld = g->GetEYlowd();; 379 Double_t *eyhd = g->GetEYhighd();; 380 ; 381 if (!exl || !exh || !eyl || !eyh ||; 382 !exld || !exhd || !eyld || !eyhd) {; 383 if (g->IsA() != TGraph::Class() ); 384 Warning(""DoMerge"", ""Merging a %s is not compatible with a TGraphBentErrors - errors will be ignored"", g->IsA()->GetName());; 385 return TGraph::DoMerge(g);; 386 }; 387 for (Int_t i = 0 ; i < g->GetN(); i++) {; 388 Int_t ipoint = GetN();; 389 Double_t x = g->GetX()[i];; 390 Double_t y = g->GetY()[i];; 391 SetPoint(ipoint, x, y);; 392 SetPointError(ipoint, exl[i], exh[i], eyl[i], eyh[i],; 393 exld[i], exhd[i], eyld[i], eyhd[i]);; 394 }; 395 ; 396 return kTRUE;; 397 ; 398}; 399////////////////////////////////////////////////////////////////////////////////; 400/// It returns the error along X at point `i`.; 401 ; 402Double_t TGraphBentErrors::GetErrorX(Int_t i) const; 403{; 404 if (i < 0 || i >= fNpoints) return -1;; 405 if (!fEXlow && !fEXhigh) return -1;; 406 Double_t elow = 0, ehigh = 0;; 407 if (fEXlow) elow = fEXlow[i];; 408 if (fEXhigh) ehigh = fEXhigh[i];; 409 return TMath::Sqrt(0.5*(elow*elow + ehigh*ehigh));; 410}; 411 ; 412 ; 413////////////////////////////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphBentErrors_8cxx_source.html:12792,error,errors,12792,doc/master/TGraphBentErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphBentErrors_8cxx_source.html,2,['error'],"['error', 'errors']"
Availability,"e_t ; content . ). protectedvirtual . Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ; Reimplemented in TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH2Poly, TH3C, TH3S, TH3I, TH3L, TH3F, and TH3D.; Definition at line 9449 of file TH1.cxx. ◆ UseCurrentStyle(). void TH1::UseCurrentStyle ; (; ). overridevirtual . Copy current attributes from/to current style. ; Reimplemented from TObject.; Definition at line 7469 of file TH1.cxx. Friends And Related Symbol Documentation. ◆ TH1Merger. friend class TH1Merger. friend . Definition at line 86 of file TH1.h. Member Data Documentation. ◆ fBarOffset. Short_t TH1::fBarOffset. protected . (1000*offset) for bar charts or legos ; Definition at line 93 of file TH1.h. ◆ fBarWidth. Short_t TH1::fBarWidth. protected . (1000*width) for bar charts or legos ; Definition at line 94 of file TH1.h. ◆ fBinStatErrOpt. EBinErrorOpt TH1::fBinStatErrOpt. protected . Option for bin statistical errors. ; Definition at line 113 of file TH1.h. ◆ fBuffer. Double_t* TH1::fBuffer. protected . [fBufferSize] entry buffer ; Definition at line 108 of file TH1.h. ◆ fBufferSize. Int_t TH1::fBufferSize. protected . fBuffer size ; Definition at line 107 of file TH1.h. ◆ fContour. TArrayD TH1::fContour. protected . Array to display contour levels. ; Definition at line 103 of file TH1.h. ◆ fDimension. Int_t TH1::fDimension. protected . ! Histogram dimension (1, 2 or 3 dim) ; Definition at line 110 of file TH1.h. ◆ fDirectory. TDirectory* TH1::fDirectory. protected . ! Pointer to directory holding this histogram ; Definition at line 109 of file TH1.h. ◆ fEntries. Double_t TH1::fEntries. protected . Number of entries. ; Definition at line 95 of file TH1.h. ◆ fFunctions. TList* TH1::fFunctions. protected . ->Pointer to list of functions (fits and user) ; Definition at line 106 of file TH1.h. ◆ fgAddDirectory. Bool_t TH1::fgAddDirectory = kTRUE. staticprotected . ! Flag to add histogr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:224576,error,errors,224576,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['error'],['errors']
Availability,"e_t ; z . ). overridevirtual . Set x, y and z values for point number i. ; Reimplemented from TGraph2D.; Definition at line 537 of file TGraph2DAsymmErrors.cxx. ◆ SetPointError(). void TGraph2DAsymmErrors::SetPointError ; (; Int_t ; i, . Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh, . Double_t ; ezl, . Double_t ; ezh . ). virtual . Set ex, ey and ez values for point number i. ; Definition at line 591 of file TGraph2DAsymmErrors.cxx. ◆ Streamer(). void TGraph2DAsymmErrors::Streamer ; (; TBuffer & ; b). overridevirtual . Stream an object of class TGraph2DAsymmErrors. ; Reimplemented from TGraph2D.; Definition at line 610 of file TGraph2DAsymmErrors.cxx. ◆ StreamerNVirtual(). void TGraph2DAsymmErrors::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 80 of file TGraph2DAsymmErrors.h. Member Data Documentation. ◆ fEXhigh. Double_t* TGraph2DAsymmErrors::fEXhigh {nullptr}. protected . [fNpoints] array of X high errors ; Definition at line 33 of file TGraph2DAsymmErrors.h. ◆ fEXlow. Double_t* TGraph2DAsymmErrors::fEXlow {nullptr}. protected . [fNpoints] array of X low errors ; Definition at line 32 of file TGraph2DAsymmErrors.h. ◆ fEYhigh. Double_t* TGraph2DAsymmErrors::fEYhigh {nullptr}. protected . [fNpoints] array of Y high errors ; Definition at line 35 of file TGraph2DAsymmErrors.h. ◆ fEYlow. Double_t* TGraph2DAsymmErrors::fEYlow {nullptr}. protected . [fNpoints] array of Y low errors ; Definition at line 34 of file TGraph2DAsymmErrors.h. ◆ fEZhigh. Double_t* TGraph2DAsymmErrors::fEZhigh {nullptr}. protected . [fNpoints] array of Z high errors ; Definition at line 37 of file TGraph2DAsymmErrors.h. ◆ fEZlow. Double_t* TGraph2DAsymmErrors::fEZlow {nullptr}. protected . [fNpoints] array of Z low errors ; Definition at line 36 of file TGraph2DAsymmErrors.h. Libraries for TGraph2DAsymmErrors:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TGraph2DAsymmErrors",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2DAsymmErrors.html:38967,error,errors,38967,doc/master/classTGraph2DAsymmErrors.html,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html,1,['error'],['errors']
Availability,"e_v(const Double_t*, const Double_t*, Double_t*, Int_t, Double_t*) const; virtual Double_tDistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual voidDistFromOutside_v(const Double_t*, const Double_t*, Double_t*, Int_t, Double_t*) const; static Double_tDistToPhiMin(const Double_t* point, const Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidDraw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tEpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetAxisName(Int_t iaxis) const; virtual Double_tGetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; virtual voidGetBoundingCylinder(Double_t* param) const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tGetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetFittingBox(const TGeoBBox* parambox, TGeoMatrix* mat, Double_t& dx, Double_t& dy, Double_t& dz) const; virtual const char*TObject::GetIconName() const; Int_tGetId() const; virtual TGeoShape*GetMakeRu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoShape.html:9101,error,error,9101,root/html534/TGeoShape.html,https://root.cern,https://root.cern/root/html534/TGeoShape.html,6,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classDummyObject.html:7320,error,error,7320,doc/master/classDummyObject.html,https://root.cern,https://root.cern/doc/master/classDummyObject.html,3,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Additional Inherited Members;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectSta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocMethodWrapper.html:8100,error,error,8100,doc/master/classTDocMethodWrapper.html,https://root.cern,https://root.cern/doc/master/classTDocMethodWrapper.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; Arrays used to store the packed inputs; TObjArray fSignal;  Packed input signal. ;  ; TObjArray fBackground;  Packed input background. ;  ; TObjArray fCandidates;  Packed input candidates (data) ;  ; TObjArray fErrorOnSignal;  Packed error sources for signal. ;  ; TObjArray fErrorOnBackground;  Packed error source",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLimitDataSource.html:8611,error,error,8611,doc/master/classTLimitDataSource.html,https://root.cern,https://root.cern/doc/master/classTLimitDataSource.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; Bool_t fBreakLine;  ; TGLongPosition fEndPos;  ; TGText * fText;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDelTextCom.html:7699,error,error,7699,doc/master/classTDelTextCom.html,https://root.cern,https://root.cern/doc/master/classTDelTextCom.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; PyObject * fCallable;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 ));",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPyDispatcher.html:11043,error,error,11043,doc/master/classTPyDispatcher.html,https://root.cern,https://root.cern/doc/master/classTPyDispatcher.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; TClass * fClass {nullptr};  pointer to the foreign object ;  ; void * fObj {nullptr};  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInspectorObject.html:7579,error,error,7579,doc/master/classTInspectorObject.html,https://root.cern,https://root.cern/doc/master/classTInspectorObject.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; TClonesArray * fHitsA;  ; TClonesArray * fHitsB;  ; TClonesArray * fJets;  ; Int_t fNhitA;  ; Int_t fNhitB;  ; Int_t fNjet;  ; Int_t fNtrack;  ; TClonesArray * fTracks;  ; TVector3 fVertex;  . Static Private Attributes; static TClonesArray * fgHitsA = nullptr;  ; static TClonesArray * fgHitsB = nullptr;  ; static ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classJetEvent.html:8064,error,error,8064,doc/master/classJetEvent.html,https://root.cern,https://root.cern/doc/master/classJetEvent.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; TDSetElement * fElement;  ; Bool_t fIsDone;  ; Long64_t fNextEntry;  ; TFileNode * fNode;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPacketizerAdaptive_1_1TFileStat.html:7617,error,error,7617,doc/master/classTPacketizerAdaptive_1_1TFileStat.html,https://root.cern,https://root.cern/doc/master/classTPacketizerAdaptive_1_1TFileStat.html,2,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; TIter * fIter;  ; TString fName;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPacketizerFile_1_1TIterObj.html:7395,error,error,7395,doc/master/classTPacketizerFile_1_1TIterObj.html,https://root.cern,https://root.cern/doc/master/classTPacketizerFile_1_1TIterObj.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; TObject * fActFileNext;  ; TList * fActFiles;  ; Long64_t fEvents;  ; Int_t fExtSlaveCnt;  ; TList * fFiles;  ; TSortedList * fFilesToProcess;  ; Int_t fMySlaveCnt;  ; TString fNodeName;  ; Long64_t fProcessed;  ; Int_t fRunSlaveCnt;  ; Int_t fStrategy;  ; TObject * fUnAllocFileNext;  . Additional Inherited Member",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPacketizerAdaptive_1_1TFileNode.html:8243,error,error,8243,doc/master/classTPacketizerAdaptive_1_1TFileNode.html,https://root.cern,https://root.cern/doc/master/classTPacketizerAdaptive_1_1TFileNode.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; TObject * fActFileNext;  ; TList * fActFiles;  ; TList * fFiles;  ; Int_t fMySlaveCnt;  ; TString fNodeName;  ; Int_t fSlaveCnt;  ; TObject * fUnAllocFileNext;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x040000",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPacketizer_1_1TFileNode.html:7737,error,error,7737,doc/master/classTPacketizer_1_1TFileNode.html,https://root.cern,https://root.cern/doc/master/classTPacketizer_1_1TFileNode.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; TString fAction;  associated action ;  ; TString fIcon;  associated icon (32x32) ;  ; TString fPattern;  filename pattern ;  ; TRegexp * fReg;  pattern regular expression ;  ; TString fSIcon;  associated small icon (16x16) ;  ; TString fType;  mime type ;  . Friends; class TGMimeTypes;  . Additional Inherited Memb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMime.html:7449,error,error,7449,doc/master/classTGMime.html,https://root.cern,https://root.cern/doc/master/classTGMime.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; char fChar;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDelCharCom.html:7487,error,error,7487,doc/master/classTDelCharCom.html,https://root.cern,https://root.cern/doc/master/classTDelCharCom.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Attributes; TAttImage * fAttImage;  ; TImagePalette ** fPalette;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 ))",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASPaletteEditor_1_1PaintPalette.html:7389,error,error,7389,doc/master/classTASPaletteEditor_1_1PaintPalette.html,https://root.cern,https://root.cern/doc/master/classTASPaletteEditor_1_1PaintPalette.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Attributes; TGTextEdit * fEdit;  ; TGLongPosition fPos;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOver",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEditCommand.html:7406,error,error,7406,doc/master/classTGTextEditCommand.html,https://root.cern,https://root.cern/doc/master/classTGTextEditCommand.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Attributes; TMatrixDSparse fA;  ; TMatrixDSparse fC;  ; TMatrixDSparse fQ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpDataSparse.html:10281,error,error,10281,doc/master/classTQpDataSparse.html,https://root.cern,https://root.cern/doc/master/classTQpDataSparse.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Attributes; TMatrixD fA;  ; TMatrixD fC;  ; TMatrixDSym fQ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpDataDens.html:10152,error,error,10152,doc/master/classTQpDataDens.html,https://root.cern,https://root.cern/doc/master/classTQpDataDens.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Attributes; TSlave * fSlave;  ; TProofProgressStatus * fStatus;  ; TString fWrkFQDN;  . Friends; class TPacketizer;  ; class TPacketizerAdaptive;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualPacketizer_1_1TVirtualSlaveStat.html:7660,error,error,7660,doc/master/classTVirtualPacketizer_1_1TVirtualSlaveStat.html,https://root.cern,https://root.cern/doc/master/classTVirtualPacketizer_1_1TVirtualSlaveStat.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Attributes; TString fName;  ! name of the table column ;  ; Bool_t fNumeric {kFALSE};  ! for numeric quotes (double quotes) are not required ;  ; TString fType;  ! type of the table column ;  ; TString fValue;  ! value of the table column ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLColumnData.html:7785,error,error,7785,doc/master/classTSQLColumnData.html,https://root.cern,https://root.cern/doc/master/classTSQLColumnData.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Attributes; TTVLVEntry * fItem;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 ));",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGItemContext.html:7727,error,error,7727,doc/master/classTGItemContext.html,https://root.cern,https://root.cern/doc/master/classTGItemContext.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Attributes; TVectorD fCloIndex;  ; TVectorD fCupIndex;  ; TVectorD fDd;  ; TVectorD fDq;  ; TQpProbBase * fFactory;  ; Int_t fMclo;  ; Int_t fMcup;  ; Int_t fMy;  ; Int_t fMz;  ; TVectorD fNomegaInv;  ; Int_t fNx;  ; Int_t fNxlo;  ; Int_t fNxup;  ; TVectorD fRhs;  ; TVectorD fXloIndex;  ; TVectorD fXupIndex;  . Additional I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpLinSolverBase.html:8962,error,error,8962,doc/master/classTQpLinSolverBase.html,https://root.cern,https://root.cern/doc/master/classTQpLinSolverBase.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Member Functions; Double_t Norm3Column (Int_t col);  Norm 3-vector in column col. ;  ; Double_t Orto3Column (Int_t col, Int_t ref);  Orto-norm 3-vector in column col with respect to column ref. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html:13546,error,error,13546,doc/master/classROOT_1_1Experimental_1_1REveTrans.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Member Functions; TString DefineSQLName (const char *fullname);  produce suitable name for column, taking into account length limitation ;  ; Bool_t HasSQLName (const char *sqlname);  checks if columns list already has that sql name ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLTableData.html:8027,error,error,8027,doc/master/classTSQLTableData.html,https://root.cern,https://root.cern/doc/master/classTSQLTableData.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Member Functions; void AddToSscp (TMatrixD &sscp, TVectorD &vec);  update the sscp matrix with vector vec ;  ; void Classic ();  called when h=n. ;  ; void ClearSscp (TMatrixD &sscp);  clear the sscp matrix, used for covariance and mean calculation ;  ; void Correl ();  transforms covariance matrix into correlation matrix ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRobustEstimator.html:13993,error,error,13993,doc/master/classTRobustEstimator.html,https://root.cern,https://root.cern/doc/master/classTRobustEstimator.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; Bool_t fAccObjects {kFALSE};  indicate that object writing started, should be closed in postprocess ;  ; Bool_t fBase64 {kFALSE};  if true, accumulate whole objects in values ;  ; Version_t fClVersion {0};  custom structure for stl container reading ;  ; TStreamerElement * fElem {nullptr};  ; std::unique_ptr< TArra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTJSONStackObj.html:8195,error,error,8195,doc/master/classTJSONStackObj.html,https://root.cern,https://root.cern/doc/master/classTJSONStackObj.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; Double_t fEvtRate;  ; Double_t fMBRate;  ; Double_t fProcTime;  ; Double_t fXx;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPerfAnalysis_1_1TWrkEntry.html:7423,error,error,7423,doc/master/classTProofPerfAnalysis_1_1TWrkEntry.html,https://root.cern,https://root.cern/doc/master/classTProofPerfAnalysis_1_1TWrkEntry.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; Float_t fX;  ; Float_t fY;  ; Float_t fZ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classHit.html:7328,error,error,7328,doc/master/classHit.html,https://root.cern,https://root.cern/doc/master/classHit.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; Html_16_t fCount;  ; int fElId;  ; Html_u8_t fFlags;  ; int fOffs;  ; TGHtmlElement * fPNext;  ; TGHtmlElement * fPPrev;  ; SHtmlStyle_t fStyle;  ; Html_u8_t fType;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtmlElement.html:7655,error,error,7655,doc/master/classTGHtmlElement.html,https://root.cern,https://root.cern/doc/master/classTGHtmlElement.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; Html_32_t fH;  ; TGHtml * fHtml;  ; TImage * fImage;  ; TGHtmlImageMarkup * fPList;  ; TGHtmlImage * fPNext;  ; TTimer * fTimer;  ; Html_32_t fW;  ; char * fZHeight;  ; char * fZUrl;  ; char * fZWidth;  . Private Member Functions;  TGHtmlImage (const TGHtmlImage &)=delete;  ; TGHtmlImage & operator= (const TGHtmlIm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtmlImage.html:7472,error,error,7472,doc/master/classTGHtmlImage.html,https://root.cern,https://root.cern/doc/master/classTGHtmlImage.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; Int_t fCode;  ; TFormLeafInfoMultiVarDim * fMultiDim;  ; Int_t fOper;  ; Int_t fSize;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDimensionInfo.html:7568,error,error,7568,doc/master/classTDimensionInfo.html,https://root.cern,https://root.cern/doc/master/classTDimensionInfo.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; Int_t fMy;  ; Int_t fMz;  ; Int_t fNx;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpProbBase.html:8396,error,error,8396,doc/master/classTQpProbBase.html,https://root.cern,https://root.cern/doc/master/classTQpProbBase.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; T * _payload;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWrite",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structRooHelpers_1_1WrapIntoTObject.html:7557,error,error,7557,doc/master/structRooHelpers_1_1WrapIntoTObject.html,https://root.cern,https://root.cern/doc/master/structRooHelpers_1_1WrapIntoTObject.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TClass * fClass;  ! This is the class of the data pointed to ;  ; TString fClassName;  ; TFormLeafInfo * fCounter;  ; TStreamerElement * fElement;  ! Descriptor of the data pointed to. ;  ; TString fElementName;  ; TFormLeafInfo * fNext;  follow this to grab the inside information ;  ; Longptr_t fOffset;  ! Offset ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFormLeafInfo.html:13411,error,error,13411,doc/master/classTFormLeafInfo.html,https://root.cern,https://root.cern/doc/master/classTFormLeafInfo.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TGCompositeFrame * fContainer;  ; TGTabElement * fElement;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGedTabInfo.html:7371,error,error,7371,doc/master/classTGedTabInfo.html,https://root.cern,https://root.cern/doc/master/classTGedTabInfo.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TGCompositeFrame * fFrame;  ; TString fName;  . Private Member Functions;  TGedSubFrame (const TGedSubFrame &)=delete;  ; TGedSubFrame & operator= (const TGedSubFrame &)=delete;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGedFrame_1_1TGedSubFrame.html:7414,error,error,7414,doc/master/classTGedFrame_1_1TGedSubFrame.html,https://root.cern,https://root.cern/doc/master/classTGedFrame_1_1TGedSubFrame.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TGListTreeItem * fItem;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 ))",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootBrowserHistoryCursor.html:7395,error,error,7395,doc/master/classTRootBrowserHistoryCursor.html,https://root.cern,https://root.cern/doc/master/classTRootBrowserHistoryCursor.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TGWin32CallBack fCallBack;  ; void * fParam;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32CallBackObject.html:7428,error,error,7428,doc/master/classTGWin32CallBackObject.html,https://root.cern,https://root.cern/doc/master/classTGWin32CallBackObject.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TObjArray * fCmds;  ; TClass * fCurrentObjClass;  ; Long64_t fCurrentObjId;  ; TSQLFile * fFile;  ; Long64_t fFirstObjId;  ; Long64_t fKeyId;  ; Int_t fLastLongStrId;  ; Long64_t fLastObjId;  ; TObjArray fLongStrValues;  ; TMap fPool;  ; TSQLStatement * fRegStmt;  ; TObjArray fRegValues;  . Additional Inherited Mem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSqlRegistry.html:7858,error,error,7858,doc/master/classTSqlRegistry.html,https://root.cern,https://root.cern/doc/master/classTSqlRegistry.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TObjArray fBlobCmds;  ; TSQLStatement * fBlobStmt;  ; TSQLFile * fFile;  ; TSQLClassInfo * fInfo;  ; TObjArray fNormCmds;  ; TSQLStatement * fNormStmt;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSqlCmdsBuffer.html:7467,error,error,7467,doc/master/classTSqlCmdsBuffer.html,https://root.cern,https://root.cern/doc/master/classTSqlCmdsBuffer.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TRefArray fHits;  ; Int_t fNhit;  ; Float_t fPx;  ; Float_t fPy;  ; Float_t fPz;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTrack.html:7390,error,error,7390,doc/master/classTrack.html,https://root.cern,https://root.cern/doc/master/classTrack.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TSqlCmdsBuffer * fCmdBuf;  ; TSQLFile * fFile;  ; TSQLClassInfo * fInfo;  ; Int_t fMaxStrSize;  ; Long64_t fObjId;  ; Int_t fRawId;  ; TString fValueMask;  ; const char * fValueQuote;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x0200000",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSqlRawBuffer.html:7556,error,error,7556,doc/master/classTSqlRawBuffer.html,https://root.cern,https://root.cern/doc/master/classTSqlRawBuffer.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TString fBranchName;  Branch corresponding to the reader. ;  ; TString fDataType;  Data type of reader. ;  ; TString fName;  Reader name. ;  ; ReaderType fType;  Type of the reader: Value or Array. ;  . Additional Inherited Members;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html:8182,error,error,8182,doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TVectorD fBa;  ; TVectorD fCloBound;  ; TVectorD fCloIndex;  ; TVectorD fCupBound;  ; TVectorD fCupIndex;  ; TVectorD fG;  ; Int_t fMy;  ; Int_t fMz;  ; Int_t fNx;  ; TVectorD fXloBound;  ; TVectorD fXloIndex;  ; TVectorD fXupBound;  ; TVectorD fXupIndex;  . Static Protected Member Functions; static void RandomlyCh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpDataBase.html:9394,error,error,9394,doc/master/classTQpDataBase.html,https://root.cern,https://root.cern/doc/master/classTQpDataBase.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TVectorD fGamma;  ; TVectorD fLambda;  ; Int_t fNComplementaryVariables;  ; TVectorD fPhi;  ; TVectorD fPi;  ; TVectorD fS;  ; TVectorD fT;  ; TVectorD fU;  ; TVectorD fV;  ; TVectorD fW;  ; TVectorD fX;  ; TVectorD fY;  ; TVectorD fZ;  . Static Protected Member Functions; static Double_t FindBlocking (TVectorD &w,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpVar.html:10792,error,error,10792,doc/master/classTQpVar.html,https://root.cern,https://root.cern/doc/master/classTQpVar.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TVectorD fRA;  ; TVectorD fRC;  ; TVectorD fRgamma;  ; TVectorD fRlambda;  ; TVectorD fRphi;  ; TVectorD fRpi;  ; TVectorD fRQ;  ; TVectorD fRt;  ; TVectorD fRu;  ; TVectorD fRv;  ; TVectorD fRw;  ; TVectorD fRz;  . Static Protected Member Functions; static void GondzioProjection (TVectorD &v, Double_t rmin, Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpResidual.html:9338,error,error,9338,doc/master/classTQpResidual.html,https://root.cern,https://root.cern/doc/master/classTQpResidual.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; UInt_t fKeyCode;  ; TGWindow * fWindow;  . Private Member Functions;  TGMapKey (const TGMapKey &);  ; TGMapKey & operator= (const TGMapKey &);  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsisten",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMainFrame_1_1TGMapKey.html:7402,error,error,7402,doc/master/classTGMainFrame_1_1TGMapKey.html,https://root.cern,https://root.cern/doc/master/classTGMainFrame_1_1TGMapKey.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; char * fZAuthority;  ; char * fZFragment;  ; char * fZPath;  ; char * fZQuery;  ; char * fZScheme;  . Private Member Functions;  TGHtmlUri (const TGHtmlUri &)=delete;  ; TGHtmlUri & operator= (const TGHtmlUri &)=delete;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtmlUri.html:7934,error,error,7934,doc/master/classTGHtmlUri.html,https://root.cern,https://root.cern/doc/master/classTGHtmlUri.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; char fChar;  . Private Attributes; TGLongPosition fEndPos;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInsTextCom.html:7548,error,error,7548,doc/master/classTInsTextCom.html,https://root.cern,https://root.cern/doc/master/classTInsTextCom.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; const TGPicture * fLarge;  ; TString fName;  ; const TGPicture * fSmall;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTIconBoxThumb.html:7410,error,error,7410,doc/master/classTIconBoxThumb.html,https://root.cern,https://root.cern/doc/master/classTIconBoxThumb.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; int fBottom;  ; int fHeadRoom;  ; TGHtml * fHtml;  ; int fLeft;  ; SHtmlMargin_t * fLeftMargin;  ; int fMaxX;  ; int fMaxY;  ; int fPageWidth;  ; TGHtmlElement * fPEnd;  ; TGHtmlElement * fPStart;  ; int fRight;  ; SHtmlMargin_t * fRightMargin;  ; int fTop;  . Protected Member Functions; void ClearMarginStack (SHtm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtmlLayoutContext.html:7670,error,error,7670,doc/master/classTGHtmlLayoutContext.html,https://root.cern,https://root.cern/doc/master/classTGHtmlLayoutContext.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static RooNumGenFactory & instance ();  Static method returning reference to singleton instance of factory. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumGenFactory.html:8644,error,error,8644,doc/master/classRooNumGenFactory.html,https://root.cern,https://root.cern/doc/master/classRooNumGenFactory.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTObject.html:8564,error,error,8564,doc/v632/classTObject.html,https://root.cern,https://root.cern/doc/v632/classTObject.html,2,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static void AddStrBrackets (TString &s, const char *quote);  adds quotes around string value and replaces some special symbols ;  ; static TString DefineElementColumnName (TStreamerElement *elem, TSQLFile *f, Int_t indx=0);  returns name of the column in class table for that element ;  ; static Int_t D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLStructure.html:13076,error,error,13076,doc/master/classTSQLStructure.html,https://root.cern,https://root.cern/doc/master/classTSQLStructure.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static void Cleanup (TGCompositeFrame *frame);  Static method to cleanup hierarchically all daughters of a composite frame. ;  ; static TGeoTabManager * GetMakeTabManager (TGedEditor *ged);  Static method to return the tab manager currently appended to the pad or create one if not existing. ;  ; static",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTabManager.html:8928,error,error,8928,doc/master/classTGeoTabManager.html,https://root.cern,https://root.cern/doc/master/classTGeoTabManager.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static void DisableTObjectStreamersForVSDStruct ();  Disable TObject streamers for those VSD structs that inherit from TObject directly. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html:8117,error,error,8117,doc/master/classROOT_1_1Experimental_1_1REveVSD.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static void StartGDMLWriting (TGeoManager *geomanager, const char *filename, TString option);  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDMLWrite.html:15485,error,error,15485,doc/master/classTGDMLWrite.html,https://root.cern,https://root.cern/doc/master/classTGDMLWrite.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TRefCnt;  TRefCnt (EReferenceFlag);  Leave fRefs alone. ;  ;  TRefCnt (Int_t initRef=0);  ; virtual ~TRefCnt ();  ; void AddReference ();  ; UInt_t References () const;  ; UInt_t RemoveReference ();  ; void SetRefCount (UInt_t r);  . Protected Attributes; ClassInfo_t * fClass;  ; Int_t fExecuti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQSlot.html:8894,error,error,8894,doc/master/classTQSlot.html,https://root.cern,https://root.cern/doc/master/classTQSlot.html,1,['error'],['error']
Availability,"ead objects from disk, cache the name/object pair for a given LookupCtx. ; Definition at line 7714 of file TCling.cxx. ◆ GetPrompt(). char * TCling::GetPrompt ; (; ). inlinefinalvirtual . Implements TInterpreter.; Definition at line 217 of file TCling.h. ◆ GetRootMapFiles(). TObjArray * TCling::GetRootMapFiles ; (; ); const. inlinefinalvirtual . Implements TInterpreter.; Definition at line 223 of file TCling.h. ◆ GetSecurityError(). int TCling::GetSecurityError ; (; ); const. finalvirtual . Interface to cling function. ; Reimplemented from TInterpreter.; Definition at line 7487 of file TCling.cxx. ◆ GetSharedLibDeps(). const char * TCling::GetSharedLibDeps ; (; const char * ; lib, . bool ; useDyld = false . ). finalvirtual . Get the list a libraries on which the specified lib depends. ; The returned string contains as first element the lib itself. Returns 0 in case the lib does not exist or does not have any dependencies. If useDyld is true, we iterate through all available libraries and try to construct the dependency chain by resolving each symbol. ; Implements TInterpreter.; Definition at line 7289 of file TCling.cxx. ◆ GetSharedLibs(). const char * TCling::GetSharedLibs ; (; ). finalvirtual . Return the list of shared libraries loaded into the process. ; Implements TInterpreter.; Definition at line 6989 of file TCling.cxx. ◆ GetSTLIncludePath(). const char * TCling::GetSTLIncludePath ; (; ); const. finalvirtual . Return the directory containing CINT's stl cintdlls. ; Reimplemented from TInterpreter.; Definition at line 7401 of file TCling.cxx. ◆ GetTopLevelMacroName(). const char * TCling::GetTopLevelMacroName ; (; ); const. finalvirtual . Return the file name of the current un-included interpreted file. ; See the documentation for GetCurrentMacroName(). ; Reimplemented from TInterpreter.; Definition at line 5416 of file TCling.cxx. ◆ GetUsingNamespaces(). std::vector< std::string > TCling::GetUsingNamespaces ; (; ClassInfo_t * ; cl); const. finalvirtual . Get th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:105279,avail,available,105279,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,1,['avail'],['available']
Availability,"ead objects have been initialize. ; If false, the process is (from ROOT's point of view) single threaded. ; Definition at line 309 of file TThread.cxx. ◆ Join() [1/2]. Long_t TThread::Join ; (; Long_t ; id, . void ** ; ret = nullptr . ). static . Static method to join a thread by id. ; Definition at line 534 of file TThread.cxx. ◆ Join() [2/2]. Long_t TThread::Join ; (; void ** ; ret = nullptr). Join this thread. ; Definition at line 510 of file TThread.cxx. ◆ Kill() [1/3]. Int_t TThread::Kill ; (; ). Kill this thread. ; Returns 0 on success, otherwise an error number will be returned. ; Definition at line 590 of file TThread.cxx. ◆ Kill() [2/3]. Int_t TThread::Kill ; (; const char * ; name). static . Static method to kill thread by name. ; Returns 0 on success, otherwise an error number will be returned. ; Definition at line 622 of file TThread.cxx. ◆ Kill() [3/3]. Int_t TThread::Kill ; (; Long_t ; id). static . Static method to kill the thread by id. ; Returns 0 on success, otherwise an error number will be returned. ; Definition at line 606 of file TThread.cxx. ◆ Lock(). Int_t TThread::Lock ; (; ). static . Static method to lock the main thread mutex. ; Definition at line 772 of file TThread.cxx. ◆ operator=(). TThread & TThread::operator= ; (; const TThread & ; ). privatedelete . ◆ Printf(). void TThread::Printf ; (; const char * ; fmt, .  ; ... . ). static . Static method providing a thread safe printf. Appends a newline. ; Definition at line 916 of file TThread.cxx. ◆ Ps(). void TThread::Ps ; (; ). static . Static method listing the existing threads. ; Definition at line 843 of file TThread.cxx. ◆ ps(). static void TThread::ps ; (; ). inlinestatic . Definition at line 132 of file TThread.h. ◆ Run(). Int_t TThread::Run ; (; void * ; arg = nullptr, . const int ; affinity = -1 . ). Start the thread. ; This starts the static method TThread::Function() which calls the user function specified in the TThread ctor with the arg argument. If affinity is specified (>=0),",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTThread.html:26659,error,error,26659,doc/master/classTThread.html,https://root.cern,https://root.cern/doc/master/classTThread.html,1,['error'],['error']
Availability,"ead. Long_t Join(Long_t id, void** ret = 0); Static method to join a thread by id. Long_t SelfId(); Static method returning the id for the current thread. Int_t Run(void* arg = 0); Start the thread. This starts the static method TThread::Function(); which calls the user function specified in the TThread ctor with; the arg argument. Returns 0 on success, otherwise an error number will; be returned. Int_t Kill(); Kill this thread. Returns 0 on success, otherwise an error number will; be returned. Int_t Kill(Long_t id); Static method to kill the thread by id. Returns 0 on success, otherwise; an error number will be returned. Int_t Kill(const char* name); Static method to kill thread by name. Returns 0 on success, otherwise; an error number will be returned. Int_t SetCancelOff(); Static method to turn off thread cancellation. Returns 0 on success,; otherwise an error number will be returned. Int_t SetCancelOn(); Static method to turn on thread cancellation. Returns 0 on success,; otherwise an error number will be returned. Int_t SetCancelAsynchronous(); Static method to set the cancellation response type of the calling thread; to asynchronous, i.e. cancel as soon as the cancellation request; is received. Int_t SetCancelDeferred(); Static method to set the cancellation response type of the calling thread; to deferred, i.e. cancel only at next cancellation point.; Returns 0 on success, otherwise an error number will be returned. Int_t CancelPoint(); Static method to set a cancellation point. Returns 0 on success, otherwise; an error number will be returned. Int_t CleanUpPush(void* free, void* arg = 0); Static method which pushes thread cleanup method on stack.; Returns 0 in case of success and -1 in case of error. Int_t CleanUpPop(Int_t exe = 0); Static method which pops thread cleanup method off stack.; Returns 0 in case of success and -1 in case of error. Int_t CleanUp(); Static method to cleanup the calling thread. void AfterCancel(TThread* th); Static method which is c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TThread.html:12154,error,error,12154,root/html530/TThread.html,https://root.cern,https://root.cern/root/html530/TThread.html,9,['error'],['error']
Availability,"eadWeightsFromStream() [3/3]. virtual void TMVA::MethodBase::ReadWeightsFromStream ; (; TFile & ; ). inlinevirtual . Reimplemented from TMVA::MethodBase.; Definition at line 266 of file MethodBase.h. ◆ ReadWeightsFromXML(). void TMVA::MethodTMlpANN::ReadWeightsFromXML ; (; void * ; wghtnode). virtual . rebuild temporary textfile from xml weightfile and load this file into MLP ; Implements TMVA::MethodBase.; Definition at line 379 of file MethodTMlpANN.cxx. ◆ SetHiddenLayer(). void TMVA::MethodTMlpANN::SetHiddenLayer ; (; TString ; hiddenlayer = """"). inline . Definition at line 81 of file MethodTMlpANN.h. ◆ Streamer(). virtual void TMVA::MethodTMlpANN::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::MethodBase. ◆ StreamerNVirtual(). void TMVA::MethodTMlpANN::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 121 of file MethodTMlpANN.h. ◆ Train(). void TMVA::MethodTMlpANN::Train ; (; void ; ). virtual . performs TMlpANN training available learning methods: . TMultiLayerPerceptron::kStochastic; TMultiLayerPerceptron::kBatch; TMultiLayerPerceptron::kSteepestDescent; TMultiLayerPerceptron::kRibierePolak; TMultiLayerPerceptron::kFletcherReeves; TMultiLayerPerceptron::kBFGS. TMultiLayerPerceptron wants test and training tree at once so merge the training and testing trees from the MVA factory first: ; Implements TMVA::MethodBase.; Definition at line 260 of file MethodTMlpANN.cxx. Member Data Documentation. ◆ fHiddenLayer. TString TMVA::MethodTMlpANN::fHiddenLayer. private . string containing the hidden layer structure ; Definition at line 111 of file MethodTMlpANN.h. ◆ fLayerSpec. TString TMVA::MethodTMlpANN::fLayerSpec. private . Layer specification option. ; Definition at line 106 of file MethodTMlpANN.h. ◆ fLearningMethod. TString TMVA::MethodTMlpANN::fLearningMethod. private . the learning method (given via option string) ; Definition at line 116 of file MethodTMlpANN.h. ◆ fLocalTrainingTree. TTree* TMVA::Method",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodTMlpANN.html:35425,avail,available,35425,doc/master/classTMVA_1_1MethodTMlpANN.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodTMlpANN.html,1,['avail'],['available']
Availability,"eader . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IGradientFunctionOneDim. class ROOT::Math::IGradientFunctionOneDim: public ROOT::Math::IBaseFunctionOneDim, public ROOT::Math::IGradientOneDim. Documentation for the abstract class IBaseFunctionMultiDim.; Interface (abstract class) for generic functions objects of multi-dimension; Provides a method to evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientFunctionOneDim(); virtual ROOT::Math::IBaseFunctionOneDim*ROOT::Math::IBaseFunctionOneDim::Clone() const; doubleROOT::Math::IGradientOneDim::Derivative(double x) const; doubleROOT::Math::IGradientOneDim::Derivative(const double* x) const; virtual voidFdF(double x, double& f, double& df) const; voidROOT::Math::IGradientOneDim::Gradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(); ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); ROOT::Math::IGradientFunctionOneDimIGradientFunctionOneDim(); ROOT::Math::IGradientFunctionOneDimIGradientFunctionOneDim(const ROOT::Math::IGradientFunctionOneDim&); ROOT::Math::IGradientOneDimROOT::Math::IGradientOneDim::IGradientOneDim(); ROOT::Math::IGradientOneDimROOT::Math::IGradientOneDim::IGradientOneDim(const ROOT::Math::IGradientOneDim&); doubleRO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__IGradientFunctionOneDim.html:1146,avail,available,1146,root/html602/ROOT__Math__IGradientFunctionOneDim.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__IGradientFunctionOneDim.html,4,['avail'],['available']
Availability,"eader . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::RichardsonDerivator. class ROOT::Math::RichardsonDerivator. User class for calculating the derivatives of a function. It can calculate first (method Derivative1),; second (method Derivative2) and third (method Derivative3) of a function. It uses the Richardson extrapolation method for function derivation in a given interval.; The method use 2 derivative estimates (one computed with step h and one computed with step h/2); to compute a third, more accurate estimation. It is equivalent to the; <a href = http://en.wikipedia.org/wiki/Five-point_stencil>5-point method</a>,; which can be obtained with a Taylor expansion.; A step size should be given, depending on x and f(x).; An optimal step size value minimizes the truncation error of the expansion and the rounding; error in evaluating x+h and f(x+h). A too small h will yield a too large rounding error while a too large; h will give a large truncation error in the derivative approximation.; A good discussion can be found in discussed in; <a href=http://www.nrbook.com/a/bookcpdf/c5-7.pdf>Chapter 5.7</a> of Numerical Recipes in C.; By default a value of 0.001 is uses, acceptable in many cases. This class is implemented using code previosuly in TF1::Derivate{,2,3}(). Now TF1 uses this class. @ingroup Deriv. Function Members (Methods); public:. ~RichardsonDerivator(); doubleDerivative1(double x); doubleDerivative1(const ROOT::Math::IGenFunction& f, double x, double h); doubleDerivative2(double x); doubleDerivative2(const ROOT::Math::IGenFunction& f, double x, double h); doubleDerivative3(double x); doubleDerivative3(const ROOT::Math::IGenFunction& f, double x, double h); doubleError() const; doubleoperator()(double x); ROOT::Math::RichardsonDerivator&operator=(const ROOT::Math::RichardsonDerivator& rhs); ROOT::Math::RichardsonDerivatorRichardsonDerivator(double h = 0.001); ROOT::Math::RichardsonDerivatorR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__RichardsonDerivator.html:1109,error,error,1109,root/html526/ROOT__Math__RichardsonDerivator.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__RichardsonDerivator.html,22,['error'],['error']
Availability,"eader file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GEOM; » GEOM; » TGeoCompositeShape. class TGeoCompositeShape: public TGeoBBox. TGeoCompositeShape - class handling Boolean composition of shapes. Composite shapes are Boolean combination of two or more shape; components. The supported boolean operations are union (+), intersection (*); and subtraction. Composite shapes derive from the base TGeoShape class,; therefore providing all shape features : computation of bounding box, finding; if a given point is inside or outside the combination, as well as computing the; distance to entering/exiting. It can be directly used for creating volumes or; used in the definition of other composite shapes.; Composite shapes are provided in order to complement and extend the set of; basic shape primitives. They have a binary tree internal structure, therefore; all shape-related geometry queries are signals propagated from top level down; to the final leaves, while the provided answers are assembled and interpreted; back at top. This CSG hierarchy is effective for small number of components,; while performance drops dramatically for large structures. Building a complete; geometry in this style is virtually possible but highly not recommended. Structure of composite shapes. A composite shape can always be regarded as the result of a Boolean operation; between only two shape components. All information identifying these two; components as well as their positions with respect to the frame of the composite; is represented by an object called Boolean node. A composite shape just have; a pointer to such a Boolean node. Since the shape components may also be; composites, they will also contain binary Boolean nodes branching other two; shapes in the hierarcy. Any such branch ends-up when the final leaves are no; longer composite shapes, but basic primitives. /*. */. Suppose that A, B, C and D represent bas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoCompositeShape.html:1115,down,down,1115,root/html528/TGeoCompositeShape.html,https://root.cern,https://root.cern/root/html528/TGeoCompositeShape.html,10,['down'],['down']
Availability,"eadids = (pthread_t *)mg_calloc_ctx(ctx->cfg_worker_threads,; 20082 sizeof(pthread_t),; 20083 ctx);; 20084 ; 20085 if (ctx->worker_threadids == NULL) {; 20086 const char *err_msg = ""Not enough memory for worker thread ID array"";; 20087 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20088 ; 20089 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20090 mg_snprintf(NULL,; 20091 NULL, /* No truncation check for error buffers */; 20092 error->text,; 20093 error->text_buffer_size,; 20094 ""%s"",; 20095 err_msg);; 20096 }; 20097 free_context(ctx);; 20098 pthread_setspecific(sTlsKey, NULL);; 20099 return NULL;; 20100 }; 20101 ctx->worker_connections =; 20102 (struct mg_connection *)mg_calloc_ctx(ctx->cfg_worker_threads,; 20103 sizeof(struct mg_connection),; 20104 ctx);; 20105 if (ctx->worker_connections == NULL) {; 20106 const char *err_msg =; 20107 ""Not enough memory for worker thread connection array"";; 20108 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20109 ; 20110 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20111 mg_snprintf(NULL,; 20112 NULL, /* No truncation check for error buffers */; 20113 error->text,; 20114 error->text_buffer_size,; 20115 ""%s"",; 20116 err_msg);; 20117 }; 20118 free_context(ctx);; 20119 pthread_setspecific(sTlsKey, NULL);; 20120 return NULL;; 20121 }; 20122 ; 20123#if defined(ALTERNATIVE_QUEUE); 20124 ctx->client_wait_events =; 20125 (void **)mg_calloc_ctx(ctx->cfg_worker_threads,; 20126 sizeof(ctx->client_wait_events[0]),; 20127 ctx);; 20128 if (ctx->client_wait_events == NULL) {; 20129 const char *err_msg = ""Not enough memory for worker event array"";; 20130 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20131 mg_free(ctx->worker_threadids);; 20132 ; 20133 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20134 mg_snprintf(NULL,; 20135 NULL, /* No truncation check for error buffers */; 20136 error->text,; 20137 error->text_buffer_size,; 20138 ""%s"",; 20139 err_msg);; 20140 }; 20141 free_context(ctx);; 20142 pthread_setspecific(sTlsKey,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:601052,error,error,601052,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"eadids = (pthread_t *)mg_calloc_ctx(ctx->cfg_worker_threads,; 20083 sizeof(pthread_t),; 20084 ctx);; 20085 ; 20086 if (ctx->worker_threadids == NULL) {; 20087 const char *err_msg = ""Not enough memory for worker thread ID array"";; 20088 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20089 ; 20090 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20091 mg_snprintf(NULL,; 20092 NULL, /* No truncation check for error buffers */; 20093 error->text,; 20094 error->text_buffer_size,; 20095 ""%s"",; 20096 err_msg);; 20097 }; 20098 free_context(ctx);; 20099 pthread_setspecific(sTlsKey, NULL);; 20100 return NULL;; 20101 }; 20102 ctx->worker_connections =; 20103 (struct mg_connection *)mg_calloc_ctx(ctx->cfg_worker_threads,; 20104 sizeof(struct mg_connection),; 20105 ctx);; 20106 if (ctx->worker_connections == NULL) {; 20107 const char *err_msg =; 20108 ""Not enough memory for worker thread connection array"";; 20109 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20110 ; 20111 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20112 mg_snprintf(NULL,; 20113 NULL, /* No truncation check for error buffers */; 20114 error->text,; 20115 error->text_buffer_size,; 20116 ""%s"",; 20117 err_msg);; 20118 }; 20119 free_context(ctx);; 20120 pthread_setspecific(sTlsKey, NULL);; 20121 return NULL;; 20122 }; 20123 ; 20124#if defined(ALTERNATIVE_QUEUE); 20125 ctx->client_wait_events =; 20126 (void **)mg_calloc_ctx(ctx->cfg_worker_threads,; 20127 sizeof(ctx->client_wait_events[0]),; 20128 ctx);; 20129 if (ctx->client_wait_events == NULL) {; 20130 const char *err_msg = ""Not enough memory for worker event array"";; 20131 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20132 mg_free(ctx->worker_threadids);; 20133 ; 20134 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20135 mg_snprintf(NULL,; 20136 NULL, /* No truncation check for error buffers */; 20137 error->text,; 20138 error->text_buffer_size,; 20139 ""%s"",; 20140 err_msg);; 20141 }; 20142 free_context(ctx);; 20143 pthread_setspecific(sTlsKey,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:601085,error,error,601085,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,"eadless: command to start Firefox in headless mode, like ""fork:--headless --private-window --no-remote $profile $url""; WebGui.FirefoxInteractive: command to start Firefox in interactive mode, like ""$prog --private-window \'$url\' &""; WebGui.FirefoxProfile: name of Firefox profile to use; WebGui.FirefoxProfilePath: file path to Firefox profile; WebGui.FirefoxRandomProfile: usage of random Firefox profile -1 never, 0 - only for headless mode (dflt), 1 - always; WebGui.LaunchTmout: time required to start process in seconds (default 30 s); WebGui.OperationTmout: time required to perform WebWindow operation like execute command or update drawings; WebGui.RecordData: if specified enables data recording for each web window 0 - off, 1 - on; WebGui.JsonComp: compression factor for JSON conversion, if not specified - each widget uses own default values; WebGui.ForceHttp: 0 - off (default), 1 - always create real http server to run web window; WebGui.Console: -1 - output only console.error(), 0 - add console.warn(), 1 - add console.log() output; WebGui.ConnCredits: 10 - number of packets which can be send by server or client without acknowledge from receiving side; WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/1.128.0/; WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified; WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3; THttpServer-related parameters documented in CreateServer method ; Definition at line 778 of file RWebWindowsManager.cxx. ◆ Terminate(). void RWebWindowsManager::Terminate ; (; ). Terminate http server and ROOT application. ; Definition at line 937 of file RWebWindowsManager.cxx. ◆ Unregister(). void RWebWindowsManager::Unregister ; (; RWebWindow & ; win). private . Release all references to specified window Called from RWebWindow destructor. ; Definition at line 674 of file RWebWindowsManager.cxx. ◆ WaitFor(). int RWebWindowsManager::WaitFor ; (; RWebW",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:20046,error,error,20046,doc/master/classROOT_1_1RWebWindowsManager.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html,1,['error'],['error']
Availability,"eadless: command to start Firefox in headless mode, like ""fork:--headless --private-window --no-remote $profile $url""; WebGui.FirefoxInteractive: command to start Firefox in interactive mode, like ""$prog --private-window \'$url\' &""; WebGui.FirefoxProfile: name of Firefox profile to use; WebGui.FirefoxProfilePath: file path to Firefox profile; WebGui.FirefoxRandomProfile: usage of random Firefox profile -1 never, 0 - only for headless mode (dflt), 1 - always; WebGui.LaunchTmout: time required to start process in seconds (default 30 s); WebGui.OperationTmout: time required to perform WebWindow operation like execute command or update drawings; WebGui.RecordData: if specified enables data recording for each web window 0 - off, 1 - on; WebGui.JsonComp: compression factor for JSON conversion, if not specified - each widget uses own default values; WebGui.ForceHttp: 0 - off (default), 1 - always create real http server to run web window; WebGui.Console: -1 - output only console.error(), 0 - add console.warn(), 1 - add console.log() output; WebGui.ConnCredits: 10 - number of packets which can be send by server or client without acknowledge from receiving side; WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/; WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified; WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3; THttpServer-related parameters documented in CreateServer method ; Definition at line 692 of file RWebWindowsManager.cxx. ◆ Terminate(). void RWebWindowsManager::Terminate ; (; ). Terminate http server and ROOT application. ; Definition at line 851 of file RWebWindowsManager.cxx. ◆ Unregister(). void RWebWindowsManager::Unregister ; (; RWebWindow & ; win). private . Release all references to specified window Called from RWebWindow destructor. ; Definition at line 591 of file RWebWindowsManager.cxx. ◆ WaitFor(). int RWebWindowsManager::WaitFor ; (; RWebWindow & ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:17607,error,error,17607,doc/v632/classROOT_1_1RWebWindowsManager.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html,1,['error'],['error']
Availability,"eafLen = 1;; 7798 }; 7799 ; 7800 leafData = tok;; 7801 } else {; 7802 // append token to laf data:; 7803 leafData += "" "";; 7804 leafData += tok;; 7805 }; 7806 --remainingLeafLen;; 7807 if (remainingLeafLen) {; 7808 // need more columns for this branch:; 7809 continue;; 7810 }; 7811 ++iBranch;; 7812 ; 7813 // initialize stringstream with token; 7814 sToken.clear();; 7815 sToken.seekp(0, std::ios_base::beg);; 7816 sToken.str(leafData.Data());; 7817 sToken.seekg(0, std::ios_base::beg);; 7818 leaf->ReadValue(sToken, 0 /* 0 = ""all"" */);; 7819 if (gDebug > 3) {; 7820 Info(""ReadStream"", ""%5lld:%3d:%d%d%d%d:%d%d%d%d:%s"",; 7821 nlines, iBranch,; 7822 (int)sToken.good(), (int)sToken.fail(),; 7823 (int)sToken.bad(), (int)sToken.eof(),; 7824 (int)in.good(), (int)in.fail(),; 7825 (int)in.bad(), (int)in.eof(),; 7826 sToken.str().c_str());; 7827 }; 7828 ; 7829 // Error handling; 7830 if (sToken.bad()) {; 7831 // How could that happen for a stringstream?; 7832 Warning(""ReadStream"",; 7833 ""Buffer error while reading data for branch %s on line %lld"",; 7834 branch->GetName(), nlines);; 7835 } else if (!sToken.eof()) {; 7836 if (sToken.fail()) {; 7837 Warning(""ReadStream"",; 7838 ""Couldn't read formatted data in \""%s\"" for branch %s on line %lld; ignoring line"",; 7839 tok.Data(), branch->GetName(), nlines);; 7840 goodLine = false;; 7841 } else {; 7842 std::string remainder;; 7843 std::getline(sToken, remainder, newline);; 7844 if (!remainder.empty()) {; 7845 Warning(""ReadStream"",; 7846 ""Ignoring trailing \""%s\"" while reading data for branch %s on line %lld"",; 7847 remainder.c_str(), branch->GetName(), nlines);; 7848 }; 7849 }; 7850 }; 7851 } // tokenizer loop; 7852 ; 7853 if (iBranch < nbranches) {; 7854 Warning(""ReadStream"",; 7855 ""Read too few columns (%d < %d) in line %lld; ignoring line"",; 7856 iBranch, nbranches, nlines);; 7857 goodLine = false;; 7858 } else if (pos != kNPOS) {; 7859 sLine = sLine.Strip(TString::kTrailing);; 7860 if (pos < sLine.Length()) {; 7861 Warning(""ReadStream",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:306502,error,error,306502,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['error'],['error']
Availability,"eal = 0, Double_t X = 0, Double_t Y = 0, Double_t Z = 0); virtual~TQuaternion(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TQuaternionConjugate() const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); TQuaternion&DivideLeft(const TVector3& vector); TQuaternion&DivideLeft(const TQuaternion& quaternion); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tGetQAngle() const; voidGetRXYZ(Double_t* carray) const; voidGetRXYZ(Float_t* carray) const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TQuaternion.html:5697,Error,Error,5697,root/html532/TQuaternion.html,https://root.cern,https://root.cern/root/html532/TQuaternion.html,2,['Error'],['Error']
Availability,"eal dimension of CERF-LUT. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooComplex FastComplexErrFunc(const RooComplex& z). Double_t FastComplexErrFuncRe(const RooComplex& z). Double_t FastComplexErrFuncIm(const RooComplex& z). void cacheCERF(Bool_t flag = kTRUE). RooComplex ComplexErrFunc(Double_t re, Double_t im = 0); Return CERNlib complex error function for Z(re,im). RooComplex ComplexErrFunc(const RooComplex& z); Return CERNlib complex error function. This code is translated from the fortran version in the CERN mathlib.; (see ftp://asisftp.cern.ch/cernlib/share/pro/src/mathlib/gen/c/cwerf64.F). void initFastCERF(Int_t reBins = 800, Double_t reMin = -4.0, Double_t reMax = 4.0, Int_t imBins = 1000, Double_t imMin = -4.0, Double_t imMax = 6.0); Allocate and initialize lookup table for interpolated complex error function; for given grid parameters. void cleanup(). RooComplex ITPComplexErrFunc(const RooComplex& z, Int_t nOrder); Return complex error function interpolated from lookup tabel created; by initFastCERF(). Interpolation is performed in Im and Re plane; to specified order. Double_t ITPComplexErrFuncRe(const RooComplex& z, Int_t nOrder); Return real component of complex error function interpolated from; lookup table created by initFastCERF(). Interpolation is performed in; Im and Re plane to specified order. This functions is noticably faster; than ITPComplexErrrFunc().re() because only the real lookup table; is interpolated. Double_t ITPComplexErrFuncIm(const RooComplex& z, Int_t nOrder); Return real component of complex error function interpolated from; lookup table created by initFastCERF(). Interpolation is performed in; Im and Re plane to specified order. This functions is noticably faster; than ITPComplexErrrFunc().im() because only the imaginary lookup table; is interpolated. Double_t interpolate(Double_t* yArr, Int_t nOrder, Double_t x); Interpolate array 'ya' with 'n' elements for 'x' (between 0 and 'n'-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMath.html:3517,error,error,3517,root/html526/RooMath.html,https://root.cern,https://root.cern/root/html526/RooMath.html,5,['error'],['error']
Availability,"eal& function); virtual~RooMinuit(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; RooPlot*contour(RooRealVar& var1, RooRealVar& var2, Double_t n1 = 1, Double_t n2 = 2, Double_t n3 = 0, Double_t n4 = 0, Double_t n5 = 0, Double_t n6 = 0); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; Int_tevalCounter() const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; RooFitResult*fit(const char* options); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMinuit.html:2218,Error,Error,2218,root/html532/RooMinuit.html,https://root.cern,https://root.cern/root/html532/RooMinuit.html,2,['Error'],['Error']
Availability,"eal& orig, const char* targetRangeName) const; RooAbsReal*specializeRatio(RooFormulaVar& input, const char* targetRangeName) const; virtual voidRooAbsReal::syncCache(const RooArgSet* set = 0); virtual Bool_tRooAbsPdf::syncNormalization(const RooArgSet* dset, Bool_t adjustProxies = kTRUE) const; Double_tRooAbsReal::traceEval(const RooArgSet* set) const; voidRooAbsArg::unRegisterProxy(RooArgProxy& proxy); voidRooAbsArg::unRegisterProxy(RooSetProxy& proxy); voidRooAbsArg::unRegisterProxy(RooListProxy& proxy); voiduseDefaultGen(Bool_t flag = kTRUE). Data Members; public:. enum RooAbsPdf::ExtendMode { CanNotBeExtended; CanBeExtended; MustBeExtended; };; enum RooAbsReal::ScaleType { Raw; Relative; NumEvent; RelativeExpected; };; enum RooAbsReal::ErrorLoggingMode { PrintErrors; CollectErrors; CountErrors; Ignore; };; enum RooAbsArg::ConstOpCode { Activate; DeActivate; ConfigChange; ValueChange; };; enum RooAbsArg::OperMode { Auto; AClean; ADirty; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManager_cacheMgrThe cache manager; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooProdPdf.html:40121,Error,ErrorLoggingMode,40121,root/html532/RooProdPdf.html,https://root.cern,https://root.cern/root/html532/RooProdPdf.html,1,['Error'],['ErrorLoggingMode']
Availability,"eal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction4Ref<double,double,double,double,int>funcFunction pointer reference; RooRealProxywArgument reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCFunction4Ref<VO,VI1,VI2,VI3,VI4> Streamer(TBuffer& ); Custom streamer for function pointer reference object. When writing,; the function pointer is substituted by its registerd name. When function; is unregistered name 'UNKNOWN' is written and a warning is issues. When; reading back, the embedded name is converted back to a function pointer; using the mapping service. When name UNKNOWN is encountered a warning is; issues and a dummy null function is substituted. When the registered function; name can not be mapped to a function pointer an ERROR is issued and a pointer; to the dummy null function is substituted. TObject* clone(const char* newname) const; { return new RooCFunction4Binding(*this,newname); }. void printArgs(ostream& os) const; Print object arguments and name/address of function pointer. Double_t evaluate() const; Return value of embedded function using value of referenced variable x. » Last changed: Tue Sep 8 17:03:07 2015 » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCFunction4PdfBinding_double_double_double_double_int_.html:44272,ERROR,ERROR,44272,root/html534/RooCFunction4PdfBinding_double_double_double_double_int_.html,https://root.cern,https://root.cern/root/html534/RooCFunction4PdfBinding_double_double_double_double_int_.html,1,['ERROR'],['ERROR']
Availability,"eal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction4Ref<double,double,double,double,bool>funcFunction pointer reference; RooRealProxywArgument reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCFunction4Ref<VO,VI1,VI2,VI3,VI4> Streamer(TBuffer& ); Custom streamer for function pointer reference object. When writing,; the function pointer is substituted by its registerd name. When function; is unregistered name 'UNKNOWN' is written and a warning is issues. When; reading back, the embedded name is converted back to a function pointer; using the mapping service. When name UNKNOWN is encountered a warning is; issues and a dummy null function is substituted. When the registered function; name can not be mapped to a function pointer an ERROR is issued and a pointer; to the dummy null function is substituted. TObject* clone(const char* newname) const; { return new RooCFunction4Binding(*this,newname); }. void printArgs(ostream& os) const; Print object arguments and name/address of function pointer. Double_t evaluate() const; Return value of embedded function using value of referenced variable x. » Last changed: Tue Sep 8 17:42:09 2015 » Last generated: 2015-09-08 17:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooCFunction4PdfBinding_double_double_double_double_bool_.html:46451,ERROR,ERROR,46451,root/html604/RooCFunction4PdfBinding_double_double_double_double_bool_.html,https://root.cern,https://root.cern/root/html604/RooCFunction4PdfBinding_double_double_double_double_bool_.html,1,['ERROR'],['ERROR']
Availability,"eal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction4Ref<double,double,double,double,int>funcFunction pointer reference; RooRealProxywArgument reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCFunction4Ref<VO,VI1,VI2,VI3,VI4> Streamer(TBuffer& ); Custom streamer for function pointer reference object. When writing,; the function pointer is substituted by its registerd name. When function; is unregistered name 'UNKNOWN' is written and a warning is issues. When; reading back, the embedded name is converted back to a function pointer; using the mapping service. When name UNKNOWN is encountered a warning is; issues and a dummy null function is substituted. When the registered function; name can not be mapped to a function pointer an ERROR is issued and a pointer; to the dummy null function is substituted. TObject* clone(const char* newname) const; { return new RooCFunction4Binding(*this,newname); }. void printArgs(ostream& os) const; Print object arguments and name/address of function pointer. Double_t evaluate() const; Return value of embedded function using value of referenced variable x. » Last changed: Tue Jun 30 14:31:52 2015 » Last generated: 2015-06-30 14:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction4PdfBinding_double_double_double_double_int_.html:46439,ERROR,ERROR,46439,root/html602/RooCFunction4PdfBinding_double_double_double_double_int_.html,https://root.cern,https://root.cern/root/html602/RooCFunction4PdfBinding_double_double_double_double_int_.html,1,['ERROR'],['ERROR']
Availability,"eam https://github.com/root-project/root; Make sure you are on the master branch locally and pull the latest changes from upstream:; git checkout master; git pull upstream master; Go back to your local branch and rebase the last changes from master:; git checkout histogram-race-condition-fix; git rebase master; Push your new updated local branch to your GitHub repository (origin):; git push --force; Summary. The entire workflow is summarized in the image above. First, we cloned root-project/root, and cloned it to our local machine. Then after making the commit, we pushed the change to origin. Optionally, we can pull down the last changes from upstream and rebase our branch onto the current master and force-push this to origin. After this, we create a pull request on GitHub from origin. It is important to note that it is not necessary to fork and clone for each contribution.; Merging a pull request locally; If the pull request does not have any conflicts with the master branch, it is possible to apply the changes locally by downloading a patch and piping it to git am with; wget -qO- https://github.com/root-project/root/pull/<PR#>.patch | git am; If you have conflicts, the preferred method is to rebase your branch onto master:; git remote update && git checkout master && git pull && git rebase master <your branch>; When a conflict exists with a commit, git will interrupt the rebase and let you resolve them by editing your files. Once the conflict is resolved, use; git add <conflicting files> && git rebase --continue; to continue the rebasing process. After all conflicts have been resolved, you can check that your changes are really what you want with git log -p master..<your branch> then push the result (without using --force).; Resources. Git How Tos; Git Tips and Tricks; GitHub and Git Foundations (YouTube). Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/creating-pull-request.html:4998,down,downloading,4998,d/creating-pull-request.html,https://root.cern,https://root.cern/d/creating-pull-request.html,1,['down'],['downloading']
Availability,"eam, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:47802,error,error,47802,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,2,['error'],['error']
Availability,"eamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSocket;  TSocket (const char *host, const char *service, Int_t tcpwindowsize=-1);  Create a socket. ;  ;  TSocket (const char *host, Int_t port, Int_t tcpwindowsize=-1);  Create a socket; see CreateAuthSocket for the form of url. ;  ;  TSocket (const char *sockpath);  Create a socket in the Unix domain on 'sockpath'. ;  ;  TSocket (const TSocket &s);  TSocket copy ctor. ;  ;  TSocket (Int_t descriptor);  Create a socket. ;  ;  TSocket (Int_t descriptor, const char *sockpath);  Create a socket. ;  ;  TSocket (TInetAddress address, const char *service, Int_t tcpwindowsize=-1);  Create a socket. ;  ;  TSocket (TInetAddress address, Int_t port, Int_t tcpwindowsize=-1);  Create a socket. ;  ; virtual ~TSocket ();  ; UInt_t GetBytesRecv () const;  ; UInt_t GetBytesSent () const;  ; Int_t GetCompressionAlgorithm () const;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; Int_t GetErrorCode () const;  Returns error code. ;  ; TInetAddress GetInetAddress () const;  ; TTimeStamp GetLastUsage ();  ; virtual Int_t GetLocalPort ();  Return the local port # to which the socket is bound. ;  ; Int_t GetPort () const;  ; Int_t GetRemoteProtocol () const;  ; TSecContext * GetSecContext () const;  ; const char * GetService () const;  ; Int_t GetServType () const;  ; Int_t GetTcpWindowSize () const;  ; const char * GetUrl () const;  ; TClass * IsA () const override;  ; virtual Bool_t IsAuthenticated () const;  ; virtual Int_t Reconnect ();  ; virtual Int_t Select (Int_t interest=kRead, Long_t timeout=-1);  Waits for this socket to change status. ;  ; virtual Int_t SendObject (const TObject *obj, Int_t kind=kMESS_OBJECT);  Send an object. ;  ; void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPSocket.html:3796,error,error,3796,doc/master/classTPSocket.html,https://root.cern,https://root.cern/doc/master/classTPSocket.html,1,['error'],['error']
Availability,"eamerInfo::GenerateHeaderFile ; (; const char * ; dirname, . const TList * ; subClasses = nullptr, . const TList * ; extrainfos = nullptr . ). pure virtual . Implemented in TStreamerInfo. ◆ GenerateInfoForPair() [1/2]. virtual TVirtualStreamerInfo * TVirtualStreamerInfo::GenerateInfoForPair ; (; const std::string & ; firstname, . const std::string & ; secondname, . bool ; silent, . size_t ; hint_pair_offset, . size_t ; hint_pair_size . ). pure virtual . Implemented in TStreamerInfo. ◆ GenerateInfoForPair() [2/2]. virtual TVirtualStreamerInfo * TVirtualStreamerInfo::GenerateInfoForPair ; (; const std::string & ; pairclassname, . bool ; silent, . size_t ; hint_pair_offset, . size_t ; hint_pair_size . ). pure virtual . Generate the TClass and TStreamerInfo for the requested pair. ; This creates a TVirtualStreamerInfo for the pair and trigger the BuildCheck/Old to provokes the creation of the corresponding TClass. This relies on the dictionary for std::pair<const int, int> to already exist (or the interpreter information being available) as it is used as a template. NoteThe returned object is owned by the caller. ; Implemented in TStreamerInfo. ◆ GenExplicitClassStreamer(). virtual TClassStreamer * TVirtualStreamerInfo::GenExplicitClassStreamer ; (; const ::ROOT::Detail::TCollectionProxyInfo & ; info, . TClass * ; cl . ). pure virtual . Implemented in TStreamerInfo. ◆ GenExplicitProxy(). virtual TVirtualCollectionProxy * TVirtualStreamerInfo::GenExplicitProxy ; (; const ::ROOT::Detail::TCollectionProxyInfo & ; info, . TClass * ; cl . ). pure virtual . Implemented in TStreamerInfo. ◆ GetActualClass(). virtual TClass * TVirtualStreamerInfo::GetActualClass ; (; const void * ; obj); const. pure virtual . Implemented in TStreamerInfo. ◆ GetCheckSum(). virtual UInt_t TVirtualStreamerInfo::GetCheckSum ; (; ); const. pure virtual . Implemented in TStreamerInfo. ◆ GetClass(). virtual TClass * TVirtualStreamerInfo::GetClass ; (; ); const. pure virtual . Implemented in TStreamerInf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualStreamerInfo.html:25914,avail,available,25914,doc/master/classTVirtualStreamerInfo.html,https://root.cern,https://root.cern/doc/master/classTVirtualStreamerInfo.html,1,['avail'],['available']
Availability,"eamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystemDirectory.html:6159,error,error,6159,doc/master/classTSystemDirectory.html,https://root.cern,https://root.cern/doc/master/classTSystemDirectory.html,2,['error'],['error']
Availability,"ean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; RooCategoryProxyRooSimultaneous::_indexCatIndex category; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__HistFactorySimultaneous.html:41778,error,errors,41778,root/html534/RooStats__HistFactory__HistFactorySimultaneous.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__HistFactorySimultaneous.html,2,['error'],['errors']
Availability,"ean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; TMatrixDSym_cov; TMatrixDSym_covI; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; Double_t_det; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; map<int,GenData>_genCache!; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooListProxy_mu; TVectorD_muVec! Do not persist; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMultiVarGaussian.html:39272,error,errors,39272,root/html532/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html532/RooMultiVarGaussian.html,2,['error'],['errors']
Availability,"ean); Double_t PoissonD(Double_t mean); Poisson random numbers. Int_t Binomial(Int_t ntot,Double_t prob ); Binomial Random numbers. Circle(Double_t &x,Double_t &y,Double_t r); Generate a random 2D point (x,y) in; a circle of radius r. Sphere(Double_t &x,Double_t &y,; Double_t &z,Double_t r); Generate a random 3D point (x,y,z) in; a sphere of radius r. Rannor(Double_t &a,Double_t &b); Generate a pair of Gaussian random; numbers with mu=0 and sigma=1. 13.4.8 UNURAN; An interface to a new package, UNU.RAN, (Universal Non Uniform Random number generator for generating non-uniform pseudo-random numbers) was introduced in ROOT v5.16.; UNU.RAN is an ANSI C library licensed under GPL. It contains universal (also called automatic or black-box) algorithms that can generate random numbers from large classes of continuous (in one or multi-dimensions), discrete distributions, empirical distributions (like histograms) and also from practically all standard distributions. An extensive online documentation is available at the UNU.RAN Web Site http://statmath.wu-wien.ac.at/unuran/; The ROOT class TUnuran is used to interface the UNURAN package. It can be used as following:. With the UNU.RAN native, string API for pre-defined distributions (see UNU.RAN documentation for the allowed string values at http://statistik.wu-wien.ac.at/unuran/doc/unuran.html ):. TUnuran unr;; // initialize unuran to generate normal random numbers using; // a ""arou"" method; unr.Init(""normal()"",""method=arou"");; ...; // sample distributions N times (generate N random numbers); for (int i = 0; i<N; ++i); double x = unr.Sample();. For continuous 1D distribution object via the class TUnuranContDist that can be created for example from a TF1 function providing the pdf (probability density function) . The user can optionally provide additional information via TUnuranContDist::SetDomain(min,max) like the domain() for generating numbers in a restricted region. // 1D case: create a distribution from two TF1 object; // ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:672064,avail,available,672064,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['avail'],['available']
Availability,"ean; static RooAbsArg::OperModeRooAbsArg::ADirty; static RooAbsArg::ConstOpCodeRooAbsArg::Activate; static RooAbsArg::CacheModeRooAbsArg::Always; static RooAbsArg::OperModeRooAbsArg::Auto; static RooAbsPdf::ExtendModeRooAbsPdf::CanBeExtended; static RooAbsPdf::ExtendModeRooAbsPdf::CanNotBeExtended; static RooAbsReal::ErrorLoggingModeRooAbsReal::CollectErrors; static RooAbsArg::ConstOpCodeRooAbsArg::ConfigChange; static RooAbsReal::ErrorLoggingModeRooAbsReal::CountErrors; static RooAbsArg::ConstOpCodeRooAbsArg::DeActivate; static RooAbsReal::ErrorLoggingModeRooAbsReal::Ignore; static RooMomentMorph::SettingLinear; static RooAbsPdf::ExtendModeRooAbsPdf::MustBeExtended; static RooAbsArg::CacheModeRooAbsArg::Never; static RooMomentMorph::SettingNonLinear; static RooMomentMorph::SettingNonLinearLinFractions; static RooMomentMorph::SettingNonLinearPosFractions; static RooAbsArg::CacheModeRooAbsArg::NotAdvised; static RooAbsReal::ScaleTypeRooAbsReal::NumEvent; static RooAbsReal::ErrorLoggingModeRooAbsReal::PrintErrors; static RooAbsReal::ScaleTypeRooAbsReal::Raw; static RooAbsReal::ScaleTypeRooAbsReal::Relative; static RooAbsReal::ScaleTypeRooAbsReal::RelativeExpected; static RooMomentMorph::SettingSineLinear; static RooAbsArg::ConstOpCodeRooAbsArg::ValueChange; static map<RooAbsArg*,TRefArray*>RooAbsArg::_ioEvoListtemporary holding list for proxies needed in schema evolution; static stack<RooAbsArg*>RooAbsArg::_ioReadStackreading stack; static const UInt_tRooAbsArg::fnv1a32start; static const ULong64_tRooAbsArg::fnv1a64start; static RooPrintable::ContentsOptionRooPrintable::kAddress; static RooPrintable::ContentsOptionRooPrintable::kArgs; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static RooPrintable::ContentsOptionRooPrintable::kClassName; static RooPrintable::ContentsOptionRooPrintable::kCollectionHeader; static RooPrintable::ContentsOptionRooPrintable::kExtras; static TOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMomentMorph.html:39046,Error,ErrorLoggingModeRooAbsReal,39046,root/html602/RooMomentMorph.html,https://root.cern,https://root.cern/root/html602/RooMomentMorph.html,2,['Error'],['ErrorLoggingModeRooAbsReal']
Availability,"eaning than when calling; gStyle->SetOptStat(mode) (see above).; One can delete the statistics box for a histogram TH1* h with:. h->SetStats(0). and activate it again with:. h->SetStats(1). Fit Statistics; The type of information about fit parameters printed in the histogram statistics; box can be selected via the parameter mode. The parameter mode can be; = pcev (default = 0111). p = 1; print Probability; c = 1; print Chisquare/Number of degrees of freedom; e = 1; print errors (if e=1, v must be 1); v = 1; print name/values of parameters. Example:. gStyle->SetOptFit(1011);. print fit probability, parameter names/values and errors. When ""v"" = 1 is specified, only the non-fixed parameters are; shown.; When ""v"" = 2 all parameters are shown. Note: gStyle->SetOptFit(1) means ""default value"", so it is equivalent; to gStyle->SetOptFit(111); The error bars options. ""E""; Default. Shows only the error bars, not a marker. ""E1""; Small lines are drawn at the end of the error bars. ""E2""; Error rectangles are drawn. ""E3""; A filled area is drawn through the end points of the vertical error bars. ""E4""; A smoothed filled area is drawn through the end points of the vertical error; bars. ""E0""; Draw also bins with null contents. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",600,400);; TH1F *he = new TH1F(""he"",""Distribution drawn with error bars (option E1) "",100,-3,3);; Int_t i;; for (i=0;i<10000;i++) he->Fill(gRandom->Gaus(0,1));; gStyle->SetEndErrorSize(3);; gStyle->SetErrorX(1.);; he->SetMarkerStyle(20);; he->Draw(""E1"");; return c1;; }; The options ""E3"" and ""E4"" draw an error band through the end points of the; vertical error bars. With ""E4"" the error band is smoothed. Because of the; smoothing algorithm used some artefacts may appear at the end of the band; like in the following example. In such cases ""E3"" should be used instead; of ""E4"". Picture; Source. {; TCanvas *ce4 = new TCanvas(""ce4"",""ce4"",600,400);; ce4->Divide(2,1);; TH1F *he4 = new TH1F(""he4"",""Distribution drawn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/THistPainter.html:19094,Error,Error,19094,root/html532/THistPainter.html,https://root.cern,https://root.cern/root/html532/THistPainter.html,1,['Error'],['Error']
Availability,"eans wait forever).; If defined (>= 0) endtype is the message that stops this collection. Int_t Collect(TMonitor* mon, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect responses from the slave servers. Returns the number of messages; received. Can be 0 if there are no active slaves.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection.; Collect also stops its execution from time to time to check for new; workers in Dynamic Startup mode. Int_t PollForNewWorkers(); Asks the PROOF Serv for new workers in Dynamic Startup mode and activates; them. Returns the number of new workers found, or <0 on errors. void CleanGDirectory(TList* ol); Remove links to objects in list 'ol' from gDirectory. Int_t CollectInputFrom(TSocket* s, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect and analyze available input from socket s.; Returns 0 on success, -1 if any failure occurs. Int_t HandleInputMessage(TSlave* wrk, TMessage* m, Bool_t deactonfail = kFALSE); Analyze the received message.; Returns 0 on success (1 if this the last message from this socket), -1 if; any failure occurs. void HandleSubmerger(TMessage* mess, TSlave* sl); Process a message of type kPROOF_SUBMERGER. void RedirectWorker(TSocket* s, TSlave* sl, Int_t output_size); Redirect output of worker sl to some merger. Int_t FindNextFreeMerger(); Return a merger, which is both active and still accepts some workers to be; assigned to it. It works on the 'round-robin' basis. void AskForOutput(TSlave* sl); Master asks for output from worker sl. void UpdateDialog(); Final update of the progress dialog. void ActivateAsyncInput(); Activate the a-sync input handler. void DeActivateAsyncInput(); De-activate a-sync input handler. Int_t GetActiveMergersCount(); Get the active mergers count. Bool_t CreateMerger(TSlave* sl, Int_t port); Create a new merger. void MarkBad(TSlave* wrk, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:47417,failure,failure,47417,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,6,['failure'],['failure']
Availability,"eanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TMonitor*fAllMonitormonitor activity on all valid slave sockets; TList*fAvailablePackageslist of available packages; TList*fBadSlavesdead slaves (subset of all slaves); Long64_tfBytesReadynumber of bytes staged; Int_tfCollectTimeoutTimeout for (some) collect actions; TStringfConfDirdirectory containing cluster config information; TStringfConfFilefile containing config information; TStringfDataPoolUrldefault data pool entry point URL; Bool_tfDataReadytrue if data is ready to be analyzed; Bool_tfDynamicStartupare the workers started dynamically?; TList*fEnabledPackageslist of enabled packages; TStringfImagemaster's image name; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TProofMgr*fManagermanager to which this session belongs (if any); Bool_tfMasterServtrue if we are a master server; TStringTNamed::fNameobject identifier; Int_tfProtocolremote PROOF server protocol version number; TProof::EQueryModefQueryModedefault query mode; TList*fRunningDSetsTemporary datasets used for async running; TProofMgr::EServTypefServTypetype of server: proofd, XrdProofd; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TList*fSlaveslist of all slave servers as in config file; TStringTNamed::fTitleobject title; Long64_tfTotalBytesnumber of bytes to be analyzed; TUrlfUrlUrl of the master; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TSemaphore*fgSemaphoresemaphore to control no of parallel startup threads. private:. TMonitor*fActiveMonitormonitor activity on all active slave sockets; TList*fActiveSlaveslist of active slaves (subset of all slaves); TMonitor*fAllUniqueMonitormonitor activity on all unique slave sockets, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:26172,avail,available,26172,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,4,['avail'],['available']
Availability,"eap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidKeyPressed(TGListTreeItem* entry, UInt_t keysym, UInt_t mask)SIGNAL ; virtual voidLineDown(Bool_t select = kFALSE); virtual voidTGContainer::LineLeft(Bool_t select = kFALSE); virtual voidTGContainer::LineRight(Bool_t select = kFALSE); virtual voidLineUp(Bool_t select = kFALSE); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidMouseOver(TGListTreeItem* entry)SIGNAL ; virtual voidMouseOver(TGListTreeItem* entry, UInt_t mask)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; virtual Int_tTGContainer::NumItems() const; virtual Int_tTGContainer::NumSelected() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidOpenItem(TGListTreeItem* item); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidPageDown(Bool_t select = kFALSE); virtual voidPageUp(Bool_t select = kFAL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGListTree.html:14474,mask,mask,14474,root/html602/TGListTree.html,https://root.cern,https://root.cern/root/html602/TGListTree.html,4,['mask'],['mask']
Availability,"ear equation A*x=b. The same factorizations are used as in the matrix inversion. However, only 1 forward/back-substitution has to be used instead of msize as in the inversion of (msize x msize) matrix. As a consequence the same differences are observed but less amplified. CLHEP shows the same numerical issues as in step the matrix inversion. Since ROOT3.10 has no dedicated equation solver, the solution is calculated through x=A-1*b. This will be slower and numerically not as stable.; \((A^{T}*A)^{-1}*A^{T}\) timing results for calculation of the pseudo inverse of matrix a. The sequence of operations measures the impact of several calls to constructors and destructors in the C++ packages versus a C library like GSL. Speed comparison between the different matrix packages. 15 Adding a Class; 15.1 The Role of TObject; The light-weight TObject class provides the default behavior and protocol for the objects in the ROOT system. Specifically, it is the primary interface to classes providing object I/O, error handling, inspection, introspection, and drawing. The interface to this service is via abstract classes.; 15.1.1 Introspection, Reflection and Run Time Type Identification; Introspection, which is also referred to as reflection, or run time type identification (RTTI) is the ability of a class to reflect upon itself or to ""look inside itself. ROOT implements reflection with the TClass class. It provides all the information about a class, a full description of data members and methods, including the comment field and the method parameter types. A class with the ClassDef macro has the ability to obtain a TClass with the IsA method.; TClass *cl = obj->IsA();; It returns a TClass. In addition, an object can directly get the class name and the base classes by:; const char* name = obj->ClassName();; If the class is a descendent of TObject, you can check if an object inherits from a specific class, you can use the InheritsFrom method. This method returns kTrue if the object inh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:804743,error,error,804743,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['error'],['error']
Availability,"ear fitter (linear parts divided; by ""++"" sign), for example ""x++sin(x)"" for fitting ""[0]*x+[1]*sin(x)"". This function finds a pointer to the TF1 object with name fname; and calls TH1::Fit(TF1 *f1,...). TFitResultPtr Fit(TF1* f1, Option_t* option = """", Option_t* goption = """", Double_t xmin = 0, Double_t xmax = 0); Fit histogram with function f1. Fit this histogram with function f1. The list of fit options is given in parameter option.; option = ""W"" Set all weights to 1 for non empty bins; ignore error bars; = ""WW"" Set all weights to 1 including empty bins; ignore error bars; = ""I"" Use integral of function in bin, normalized by the bin volume,; instead of value at bin center; = ""L"" Use Loglikelihood method (default is chisquare method); = ""WL"" Use Loglikelihood method and bin contents are not integer,; i.e. histogram is weighted (must have Sumw2() set); = ""U"" Use a User specified fitting algorithm (via SetFCN); = ""Q"" Quiet mode (minimum printing); = ""V"" Verbose mode (default is between Q and V); = ""E"" Perform better Errors estimation using Minos technique; = ""B"" User defined parameter settings are used for predefined functions; like ""gaus"", ""expo"", ""poln"", ""landau"".; Use this option when you want to fix one or more parameters for these functions.; = ""M"" More. Improve fit results.; It uses the IMPROVE command of TMinuit (see TMinuit::mnimpr).; This algorithm attempts to improve the found local minimum by searching for a; better one.; = ""R"" Use the Range specified in the function range; = ""N"" Do not store the graphics function, do not draw; = ""0"" Do not plot the result of the fit. By default the fitted function; is drawn unless the option""N"" above is specified.; = ""+"" Add this new fitted function to the list of fitted functions; (by default, any previous function is deleted); = ""C"" In case of linear fitting, don't calculate the chisquare; (saves time); = ""F"" If fitting a polN, switch to minuit fitter; = ""S"" The result of the fit is returned in the TFitResultPtr; (see b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TH1.html:73844,Error,Errors,73844,root/html532/TH1.html,https://root.cern,https://root.cern/root/html532/TH1.html,3,['Error'],['Errors']
Availability,"ear for output neurons or a sigmoid for hidden layers. This is; useful because of two theorems:. A linear combination of sigmoids can approximate any; continuous function.; Trained with output = 1 for the signal and 0 for the; background, the approximated function of inputs X is the probability; of signal, knowing X. Learning; methods. The aim of all learning methods is to minimize the total error on; a set of weighted examples. The error is defined as the sum in; quadrature, devided by two, of the error on each individual output; neuron.; In all methods implemented, one needs to compute; the first derivative of that error with respect to the weights.; Exploiting the well-known properties of the derivative, especialy the; derivative of compound functions, one can write:. for a neuton: product of the local derivative with the; weighted sum on the outputs of the derivatives.; for a synapse: product of the input with the local derivative; of the output neuron. This computation is called back-propagation of the errors. A; loop over all examples is called an epoch.; Six learning methods are implemented.; Stochastic minimization: This; is the most trivial learning method. This is the Robbins-Monro; stochastic approximation applied to multilayer perceptrons. The; weights are updated after each example according to the formula:; $w_{ij}(t+1) = w_{ij}(t) + \Delta w_{ij}(t)$. with. $\Delta w_{ij}(t) = - \eta(\d e_p / \d w_{ij} +; \delta) + \epsilon \Deltaw_{ij}(t-1)$; The parameters for this method are Eta, EtaDecay, Delta and; Epsilon.; Steepest descent with fixed step size; (batch learning): It is the same as the stochastic; minimization, but the weights are updated after considering all the; examples, with the total derivative dEdw. The parameters for this; method are Eta, EtaDecay, Delta and Epsilon.; Steepest descent algorithm: Weights; are set to the minimum along the line defined by the gradient. The; only parameter for this method is Tau. Lower tau = higher precision =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiLayerPerceptron.html:4216,error,errors,4216,root/html528/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html528/TMultiLayerPerceptron.html,10,['error'],['errors']
Availability,"ear(). Bool_t TFormula::IsLinear ; (; ); const. inline . Definition at line 273 of file TFormula.h. ◆ IsOperator(). Bool_t TFormula::IsOperator ; (; const char ; c). staticprotected . Definition at line 286 of file TFormula.cxx. ◆ IsScientificNotation(). Bool_t TFormula::IsScientificNotation ; (; const TString & ; formula, . int ; ipos . ). staticprotected . Definition at line 318 of file TFormula.cxx. ◆ IsValid(). Bool_t TFormula::IsValid ; (; ); const. inline . Definition at line 271 of file TFormula.h. ◆ IsVectorized(). Bool_t TFormula::IsVectorized ; (; ); const. inline . Definition at line 272 of file TFormula.h. ◆ operator=(). TFormula & TFormula::operator= ; (; const TFormula & ; rhs). = operator. ; Definition at line 597 of file TFormula.cxx. ◆ PrepareEvalMethod(). bool TFormula::PrepareEvalMethod ; (; ). private . Sets TMethodCall to function inside Cling environment. ; TFormula uses it to execute function. After call, TFormula should be ready to evaluate formula. Returns false on failure. ; Definition at line 861 of file TFormula.cxx. ◆ PrepareFormula(). Bool_t TFormula::PrepareFormula ; (; TString & ; formula). protected . prepare the formula to be executed normally is called with fFormula ; Definition at line 1793 of file TFormula.cxx. ◆ PreProcessFormula(). void TFormula::PreProcessFormula ; (; TString & ; formula). protected . Preprocessing of formula Replace all ** by ^, and removes spaces. ; Handle also parametrized functions like polN,gaus,expo,landau and exponentiation. Similar functionality should be added here. ; Definition at line 1771 of file TFormula.cxx. ◆ Print(). void TFormula::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print the formula and its attributes. ; Reimplemented from TObject.; Definition at line 3611 of file TFormula.cxx. ◆ ProcessFormula(). void TFormula::ProcessFormula ; (; TString & ; formula). protected . Iterates through functors in fFuncs and performs the appropriate action. ; If functor has 0 arguments ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFormula.html:45415,failure,failure,45415,doc/master/classTFormula.html,https://root.cern,https://root.cern/doc/master/classTFormula.html,1,['failure'],['failure']
Availability,"ear(Option_t*); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Bool_tCompareContent(TClass* cl, TVirtualStreamerInfo* info, Bool_t warn, Bool_t complete, TFile* file); virtual voidCompile(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDeleteArray(void* p, Bool_t dtorOnly = kFALSE); virtual voidDestructor(void* p, Bool_t dtorOnly = kFALSE); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static TVirtualStreamerInfo*Factory(); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidForceWriteInfo(TFile* file, Bool_t force = kFALSE); virtual TClassStreamer*GenEmulatedClassStreamer(const char* class_name, Bool_t silent); virtual TVirtualCollectionProxy*GenEmulatedProxy(const char* class_name, Bool_t silent); virtual Int_tGenerateHeaderFile(const char* dirname, const TList* subClasses = 0, const TList* extrainfos = 0); virtual TClassStreamer*GenExplicitClassStreamer(const ROOT::TCollectionProxyInfo& info, TClass* cl); virtual TVirtualCollectionProxy*GenExplicitProxy(const ROOT::TCollectionProxyInfo& info, TClass* cl); virtual TClass*GetActualClass(const void* obj) const; virtual UInt_tGetCheckSum() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualStreamerInfo.html:2158,error,error,2158,root/html534/TVirtualStreamerInfo.html,https://root.cern,https://root.cern/root/html534/TVirtualStreamerInfo.html,6,['error'],['error']
Availability,"earCombination, RooLinearVar, RooMoment, RooMultiVarGaussian, RooNLLVar, RooNumCdf, RooNumConvolution, RooNumConvPdf, RooNumRunningInt, RooPolyFunc, RooPolyVar, RooProdPdf, RooProduct, RooProfileLL, RooProjectedPdf, RooPullVar, RooRangeBoolean, RooRatio, RooRealIntegral, RooRealMPFE, RooRealSumFunc, RooRealSumPdf, RooRealVar, RooRecursiveFraction, RooResolutionModel, RooSecondMoment, RooSimultaneous, RooTruthModel, RooWrapperPdf, RooXYChi2Var, RooLegendre, RooNonCentralChiSquare, and RooSpHarmonic. ◆ StreamerNVirtual(). void RooAbsReal::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 558 of file RooAbsReal.h. ◆ syncCache(). void RooAbsReal::syncCache ; (; const RooArgSet * ; set = nullptr). inlineoverrideprotectedvirtual . Implements RooAbsArg.; Reimplemented in RooErrorVar.; Definition at line 463 of file RooAbsReal.h. ◆ traceEval(). double RooAbsReal::traceEval ; (; const RooArgSet * ; set); const. protected . Calculate current value of object, with error tracing wrapper. ; Definition at line 317 of file RooAbsReal.cxx. ◆ writeToStream(). void RooAbsReal::writeToStream ; (; std::ostream & ; os, . bool ; compact . ); const. overridevirtual . Write object contents to stream (dummy for now) ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, RooConstVar, RooErrorVar, RooFormulaVar, RooGenericPdf, RooLinearVar, and RooRealVar.; Definition at line 434 of file RooAbsReal.cxx. Friends And Related Symbol Documentation. ◆ AddCacheElem. friend class AddCacheElem. friend . Definition at line 414 of file RooAbsReal.h. ◆ BatchInterfaceAccessor. friend class BatchInterfaceAccessor. friend . Definition at line 406 of file RooAbsReal.h. ◆ RooAddHelpers. friend class RooAddHelpers. friend . Definition at line 411 of file RooAbsReal.h. ◆ RooAddModel. friend class RooAddModel. friend . Definition at line 413 of file RooAbsReal.h. ◆ RooAddPdf. friend class RooAddPdf. friend . Definition at line 412 of file RooAbsReal.h. ◆ RooFit::Eva",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:152986,error,error,152986,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['error'],['error']
Availability,"earch(TObject* obj, Int_t upto = kMaxInt); virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObjArray::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; virtual voidTObjArray::Compress(); Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObjArray::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObjArray::Expand(Int_t newSize); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObjArray::FindObject(const char* name) const; virtual TObject*TObjArray::FindObject(const TObject* obj) const; virtual TObject*TObjArray::First() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); TGeoNavigator*GetCurrentNavigator() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTObjArray::GetEntries() const; Int_tTObjArray::GetEntriesFast() const; virtual const char*TObject::GetIconName() const; virtual Int_tTObjArray::GetLast() const; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoNavigatorArray.html:2812,Error,Error,2812,root/html602/TGeoNavigatorArray.html,https://root.cern,https://root.cern/root/html602/TGeoNavigatorArray.html,2,['Error'],['Error']
Availability,"earch(TObject* obj, Int_t upto = kMaxInt); virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObjArray::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; virtual voidTObjArray::Compress(); Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObjArray::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObjArray::Expand(Int_t newSize); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObjArray::FindObject(const char* name) const; virtual TObject*TObjArray::FindObject(const TObject* obj) const; virtual TObject*TObjArray::First() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTObjArray::GetEntries() const; Int_tTObjArray::GetEntriesFast() const; virtual const char*TObject::GetIconName() const; virtual Int_tTObjArray::GetLast() const; virtual const char*TCollection::GetName() const; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooRefArray.html:2325,Error,Error,2325,root/html534/RooRefArray.html,https://root.cern,https://root.cern/root/html534/RooRefArray.html,6,['Error'],['Error']
Availability,"earch. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TMultiDimFit. class TMultiDimFit: public TNamed. /*; >; ; Multidimensional Fits in ROOT. Overview; . A common problem encountered in different fields of applied science is; to find an expression for one physical quantity in terms of several; others, which are directly measurable.; ; An example in high energy physics is the evaluation of the momentum of; a charged particle from the observation of its trajectory in a magnetic; field. The problem is to relate the momentum of the particle to the; observations, which may consists of of positional measurements at; intervals along the particle trajectory.; ; The exact functional relationship between the measured quantities; (e.g., the space-points) and the dependent quantity (e.g., the; momentum) is in general not known, but one possible way of solving the; problem, is to find an expression which reliably approximates the; dependence of the momentum on the observations.; ; This explicit function of the observations can be obtained by a; least squares fitting procedure applied to a representive; sample of the data, for which the dependent quantity (e.g., momentum); and the independent observations are known. The function can then be; used to compute the quantity of interest for new observations of the; independent variables.; ; This class TMultiDimFit implements such a procedure in; ROOT. It is largely based on the CERNLIB MUDIFI package; [2]. Though the basic concepts are still sound, and; therefore kept, a few implementation details have changed, and this; class can take advantage of MINUIT [4] to improve the errors; of the fitting, thanks to the class TMinuit.; ; In [5] and [6] H. Wind demonstrates the utility; of this procedure in the context of tracking, magnetic field; parameterisation, and so on. The outline of the method used in this; class is based",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMultiDimFit.html:1099,reliab,reliably,1099,root/html534/TMultiDimFit.html,https://root.cern,https://root.cern/root/html534/TMultiDimFit.html,6,['reliab'],['reliably']
Availability,"earching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLNLSMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GSLNLSMinimizer class for Non Linear Least Square fitting It Uses the Levemberg-Marquardt algorithm from GSL Non Linear Least Square fitting. ; Definition at line 59 of file GSLNLSMinimizer.h. Public Member Functions;  GSLNLSMinimizer (int type=0);  Default constructor. ;  ;  ~GSLNLSMinimizer () override;  Destructor (no operations) ;  ; double CovMatrix (unsigned int, unsigned int) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return covariance matrix status ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; bool ProvidesError () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:925,error,errors,925,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,2,['error'],['errors']
Availability,"earching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooNumConvPdf Class ReferenceRooFit » RooFit Core. ; Numeric 1-dimensional convolution operator PDF. ; This class can convolve any PDF with any other PDF using a straightforward numeric calculation of the convolution integral This class should be used as last resort as numeric convolution calculated this way is computationally intensive and prone to stability fitting problems. The preferred way to compute numeric convolutions is RooFFTConvPdf, which calculates convolutions using Fourier Transforms (requires external free FFTW3 package) RooNumConvPdf implements reasonable defaults that should convolve most functions reasonably well, but results strongly depend on the shape of your input PDFS so always check your result. The default integration engine for the numeric convolution is the adaptive Gauss-Kronrod method, which empirically seems the most robust for this task. You can override the convolution integration settings via the RooNumIntConfig object reference returned by the convIntConfig() member function By default the numeric convolution is integrated from -infinity to +infinity through a x -> 1/x coordinate transformation of the tails. For convolution with a very small bandwidth it may be advantageous (for both CPU consumption and stability) if the integration domain is limited to a finite range. The function setConvolutionWindow(mean,width,scale) allows to set a sliding window around the x value to be calculated taking a RooAbsReal expression for an offset and a width to be taken around the x value. These input expression can be RooFormulaVars or other function objects although the 3d 'scale' argument 'scale' multiplies the width RooAbsReal expression given in the 2nd argument, allowing for an appropriate window definition for most cases without need for a RooFormula",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumConvPdf.html:1150,robust,robust,1150,doc/master/classRooNumConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooNumConvPdf.html,1,['robust'],['robust']
Availability,"earching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRanLuxS2 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Second generation of Ranlux generator for Single precision with luxury level of 2 (It throws away 397 value for every 12 used) see here ; Definition at line 384 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRanLuxS2 ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html:1230,avail,available,1230,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html,2,"['avail', 'error']","['available', 'error']"
Availability,"eases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 0. Setting up ROOT. Downloading; If you don't have ROOT yet, download it! We have binaries but you can also build it yourself.; Environment Variables; ROOT expects ROOTSYS, PATH and LD_LIBRARY_PATH to be set correctly. If which root does not show anything then use the script that does all of that:; source wherever/root/is/bin/thisroot.sh. Starting ROOT; Now you can start ROOT using root or root -l to suppress the logo. See root --help for more options. . ‹ ROOT 6 Analysis Workshop; up; 1. Extracting an object from a TFile ›. Navigate through this book; 0. Setting up ROOT; 1. Extracting an object from a TFile; 2. Running code in ROOT; 4. Histogramming; 3. Examining a TTree's data; 5. Fitting; 6. Multivariate Analysis; 7. Using the TTreeReader; 8. Efficiency Calculation; 9. Fitting By Coding; 10. Go Parallel!; TutorialSelector.C; 11. Done!. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/0-setting-root.html:1941,down,download,1941,d/0-setting-root.html,https://root.cern,https://root.cern/d/0-setting-root.html,1,['down'],['download']
Availability,"east one coefficient. ;  ; double bernsteinIntegral (double xlo, double xhi, double xmin, double xmax, double *coefs, int nCoefs);  ; double bifurGauss (double x, double mean, double sigmaL, double sigmaR);  ; double bifurGaussIntegral (double xMin, double xMax, double mean, double sigmaL, double sigmaR);  ; double binomial (int n, int k);  Calculates the binomial coefficient n over k. ;  ; double cbShape (double m, double m0, double sigma, double alpha, double n);  ; double cbShapeIntegral (double mMin, double mMax, double m0, double sigma, double alpha, double n);  ; double chebychev (double *coeffs, unsigned int nCoeffs, double x_in, double xMin, double xMax);  ; double chebychevIntegral (double const *coeffs, unsigned int nCoeffs, double xMin, double xMax, double xMinFull, double xMaxFull);  ; double constraintSum (double const *comp, unsigned int compSize);  ; double efficiency (double effFuncVal, int catIndex, int sigCatIndex);  ; double effProd (double eff, double pdf);  ; double exponentialIntegral (double xMin, double xMax, double constant);  ; double fast_fma (double x, double y, double z) noexcept;  use fast FMA if available, fall back to normal arithmetic if not ;  ; double flexibleInterp (unsigned int code, double const *params, unsigned int n, double const *low, double const *high, double boundary, double nominal, int doCutoff);  ; double flexibleInterpSingle (unsigned int code, double low, double high, double boundary, double nominal, double paramVal, double res);  ; double gaussian (double x, double mean, double sigma);  Function to evaluate an un-normalized RooGaussian. ;  ; double gaussianIntegral (double xMin, double xMax, double mean, double sigma);  Function to calculate the integral of an un-normalized RooGaussian over x. ;  ; unsigned int getUniformBinning (double low, double high, double val, unsigned int numBins);  ; double interpolate1d (double low, double high, double val, unsigned int numBins, double const *vals);  ; double landau (double ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html:1515,avail,available,1515,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,1,['avail'],['available']
Availability,"eate a new object G that represents the normalized projection:. Integral [ F[x,y,p] , { y } ]; G[x,p] = ---------------------------------; Integral [ F[x,y,p] , { x,y } ]. where F[x,y,p] is the function we represent, ""x"" are the; specified dependentVars, ""y"" are the specified projectedVars, and; ""p"" are our remaining variables (""parameters""). Return a; pointer to the newly created object, or else zero in case of an; error. The caller is responsible for deleting the contents of; cloneSet (which includes the returned projection object). TH1 * fillHistogram(TH1* hist, const RooArgList& plotVars, Double_t scaleFactor = 1, const RooArgSet* projectedVars = 0, Bool_t scaling = kTRUE, const RooArgSet* condObs = 0, Bool_t setError = kTRUE) const; Fill the ROOT histogram 'hist' with values sampled from this; function at the bin centers. Our value is calculated by first; integrating out any variables in projectedVars and then scaling; the result by scaleFactor. Returns a pointer to the input; histogram, or zero in case of an error. The input histogram can; be any TH1 subclass, and therefore of arbitrary; dimension. Variables are matched with the (x,y,...) dimensions of; the input histogram according to the order in which they appear; in the input plotVars list. If scaleForDensity is true the; histogram is filled with a the functions density rather than; the functions value (i.e. the value at the bin center is multiplied; with bin volume). RooDataHist* fillDataHist(RooDataHist* hist, const RooArgSet* nset, Double_t scaleFactor, Bool_t correctForBinVolume = kFALSE, Bool_t showProgress = kFALSE) const; Fill a RooDataHist with values sampled from this function at the; bin centers. If extendedMode is true, the p.d.f. values is multiplied; by the number of expected events in each bin. An optional scaling by a given scaleFactor can be performed.; Returns a pointer to the input RooDataHist, or zero; in case of an error. If correctForBinSize is true the RooDataHist; is filled with the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:39445,error,error,39445,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,10,['error'],['error']
Availability,"eate directories. Returns 0 in case of success and -1 in case of failure. ; Definition at line 667 of file TFTP.cxx. ◆ mkdir(). void TFTP::mkdir ; (; const char * ; dir); const. inline . Definition at line 114 of file TFTP.h. ◆ mv(). void TFTP::mv ; (; const char * ; file1, . const char * ; file2 . ); const. inline . Definition at line 118 of file TFTP.h. ◆ OpenDirectory(). Bool_t TFTP::OpenDirectory ; (; const char * ; dir, . Bool_t ; print = kFALSE . ). Open a directory via rootd. ; Returns kTRUE in case of success. Returns kFALSE in case of error. ; Definition at line 914 of file TFTP.cxx. ◆ operator=(). void TFTP::operator= ; (; const TFTP & ; ). privatedelete . ◆ Print(). void TFTP::Print ; (; Option_t * ; opt = """"); const. overridevirtual . Print some info about the FTP connection. ; Reimplemented from TObject.; Definition at line 157 of file TFTP.cxx. ◆ PrintDirectory(). Int_t TFTP::PrintDirectory ; (; ); const. Print path of remote working directory. ; Returns 0 in case of succes and -1 in cse of failure. ; Definition at line 764 of file TFTP.cxx. ◆ PrintError(). void TFTP::PrintError ; (; const char * ; where, . Int_t ; err . ); const. private . Print error string depending on error code. ; Definition at line 182 of file TFTP.cxx. ◆ put(). void TFTP::put ; (; const char * ; file, . const char * ; remoteName = nullptr . ). inline . Definition at line 111 of file TFTP.h. ◆ PutFile(). Long64_t TFTP::PutFile ; (; const char * ; file, . const char * ; remoteName = nullptr . ). Transfer file to remote host. ; Returns number of bytes sent or < 0 in case of error. Error -1 connection is still open, error -2 connection has been closed. In case of failure fRestartAt is set to the number of bytes correclty transfered. Calling PutFile() immediately afterwards will restart at fRestartAt. If this is not desired call SetRestartAt(0) before calling PutFile(). If rootd reports that the file is locked, and you are sure this is not the case (e.g. due to a crash), you can forc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFTP.html:21480,failure,failure,21480,doc/master/classTFTP.html,https://root.cern,https://root.cern/doc/master/classTFTP.html,1,['failure'],['failure']
Availability,"eates a subset of the files that have the kStaged & !kCorrupted bit set. ; Definition at line 256 of file TFileCollection.cxx. ◆ GetTotalEntries(). Long64_t TFileCollection::GetTotalEntries ; (; const char * ; tree); const. Returns the number of entries for the specified tree (retrieved from meta data). ; If tree is not specified, use the default tree name. Returns -1 in case the specified tree is not found. ; Definition at line 622 of file TFileCollection.cxx. ◆ GetTotalSize(). Long64_t TFileCollection::GetTotalSize ; (; ); const. inline . Definition at line 85 of file TFileCollection.h. ◆ IsA(). TClass * TFileCollection::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 108 of file TFileCollection.h. ◆ Merge(). Long64_t TFileCollection::Merge ; (; TCollection * ; li). Merge all TFileCollection objects in li into this TFileCollection object. ; Updates counters at the end. Returns the number of merged collections or -1 in case of error. ; Definition at line 280 of file TFileCollection.cxx. ◆ operator=(). TFileCollection & TFileCollection::operator= ; (; const TFileCollection & ; ). privatedelete . ◆ Print(). void TFileCollection::Print ; (; Option_t * ; option = """"); const. overridevirtual . Prints the contents of the TFileCollection. ; If option contains:. 'M' print global meta information; 'F' print all the files in the collection in compact form (current url, default tree name|class|entries, md5); 'L' together with 'F', print all the files in the collection in long form (uuid, md5, all URLs, all meta objects; on many lines); ""filter:[SsCc]"" invokes PrintDetailed() which prints out dataset content in a formatted fashion by filtering on files which are (S)taged or not (s), (C)orrupted or not (c) . Reimplemented from TObject.; Definition at line 404 of file TFileCollection.cxx. ◆ PrintDetailed(). void TFileCollection::PrintDetailed ; (; TString & ; showOnly); const. private . Print det",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileCollection.html:22231,error,error,22231,doc/master/classTFileCollection.html,https://root.cern,https://root.cern/doc/master/classTFileCollection.html,1,['error'],['error']
Availability,"eation date, 3 - file modification date; utc - select timeZone to ‘UTC’; datex - X position of date; datey - Y position of date; optfile - plot file name on the canvas, 1 - file name, 2 - full file URL, 3 - object item name; opttitle - disable/enable drawing of object title in the canvas; nomenu - disable context menu; notouch - disable touch events handling; progress - switch progress display mode between ‘off’, ‘on’ and ‘modal’. For instance:. https://root.cern/js/latest/?file=../files/hsimple.root&item=hpx;1; https://root.cern/js/latest/?file=../files/hsimple.root&nobrowser&item=hpxpy;1&opt=colz; https://root.cern/js/latest/?file=../files/hsimple.root&noselect&layout=grid2x2&item=hprof;1. Following layouts are supported:. simple - available space used for single object (default); flex - creates as many frames as necessary, each can be individually moved/enlarged; tabs - tabs for each object drawing; gridNxM - fixed-size grid with NxM frames; vertN - N frames sorted in vertical direction (like gridi1xN); horizN - N frames sorted in horizontal direction (like gridiNx1); vert121 - 3 frames sorted in vertical direction, second frame divided on two sub-frames; horiz32_12 - 2 horizontal frames with 3 and 2 subframes, and 1/3 and 2/3 as relative size. When specifying files, items or opts parameters, array of strings could be provided like files=['file1.root','file2.root']. One could skip quotes when specifying elements names items=[file1.root/hpx,file2.root/hpy] or opts=['',colz].; As item name, URL to existing image can be provided like item=img:http://server/image.png. Such image will be just inserted in the existing layout. One could specify option ""scale"" to automatically scale image to available space.; Many examples of URL string usage can be found on JSROOT API examples page.; One can very easy integrate JSROOT graphic into arbitrary HTML pages using a iframe tag:; <iframe width=""700"" height=""400""; src=""https://root.cern/js/latest/?nobrowser&file=https://root.cern",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html:4362,avail,available,4362,root/htmldoc/guides/JSROOT/JSROOT.html,https://root.cern,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html,2,['avail'],['available']
Availability,"eave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCanvas.html:35445,error,error,35445,doc/v632/classTCanvas.html,https://root.cern,https://root.cern/doc/v632/classTCanvas.html,4,['error'],['error']
Availability,"eb(const TCivetweb&); virtual~TCivetweb(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tCreate(const char* args); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THttpServer*THttpEngine::GetServer() const; virtual const char*TNamed::GetTitle() const; const char*GetTopName() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCivetweb.html:2210,error,error,2210,root/html534/TCivetweb.html,https://root.cern,https://root.cern/root/html534/TCivetweb.html,2,['error'],['error']
Availability,"ebSystem::GetPathInfo ; (; const char * ; path, . FileStat_t & ; buf . ). overridevirtual . Get info about a file. ; Info is returned in the form of a FileStat_t structure (see TSystem.h). The function returns 0 in case of success and 1 if the file could not be stat'ed. ; Reimplemented from TSystem.; Definition at line 1522 of file TWebFile.cxx. ◆ IsA(). TClass * TWebSystem::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TSystem.; Definition at line 118 of file TWebFile.h. ◆ MakeDirectory(). Int_t TWebSystem::MakeDirectory ; (; const char * ; name). overridevirtual . Make a directory via httpd. Not supported. ; Reimplemented from TSystem.; Definition at line 1469 of file TWebFile.cxx. ◆ OpenDirectory(). void * TWebSystem::OpenDirectory ; (; const char * ; name). overridevirtual . Open a directory via httpd. ; Returns an opaque pointer to a dir structure. Returns 0 in case of error. ; Reimplemented from TSystem.; Definition at line 1478 of file TWebFile.cxx. ◆ Streamer(). void TWebSystem::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TSystem. ◆ StreamerNVirtual(). void TWebSystem::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 118 of file TWebFile.h. ◆ Unlink(). Int_t TWebSystem::Unlink ; (; const char * ; path). overridevirtual . Unlink, i.e. ; remove, a file or directory. Returns 0 when successful, -1 in case of failure. Not supported for httpd. ; Reimplemented from TSystem.; Definition at line 1565 of file TWebFile.cxx. Member Data Documentation. ◆ fDirp. void* TWebSystem::fDirp. private . Definition at line 102 of file TWebFile.h. Libraries for TWebSystem:. [legend]; The documentation for this class was generated from the following files:; net/net/inc/TWebFile.h; net/net/src/TWebFile.cxx. TWebSystem. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:47 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebSystem.html:36902,failure,failure,36902,doc/master/classTWebSystem.html,https://root.cern,https://root.cern/doc/master/classTWebSystem.html,1,['failure'],['failure']
Availability,"ebin2D. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void Scale(Double_t c1 = 1, Option_t* option = """"); *-*-*-*-*Multiply this profile2D by a constant c1*-*-*-*-*-*-*-*-*; *-* ========================================. this = c1*this. This function uses the services of TProfile2D::Add. void SetBinEntries(Int_t bin, Double_t w); Set the number of entries in bin*-*-*-; *-* ================================. void SetBins(Int_t nbinsx, Double_t xmin, Double_t xmax, Int_t nbinsy, Double_t ymin, Double_t ymax); Redefine x and y axis parameters*-*-*-; *-* ===========================. void SetBins(Int_t nx, const Double_t* xBins, Int_t ny, const Double_t* yBins); *-*Redefine x and y axis parameters for variable bin sizes ; *-* ===========================. void SetBuffer(Int_t buffersize, Option_t* option = """"); set the buffer size in units of 8 bytes (double). void SetErrorOption(Option_t* option = """"); -*-*Set option to compute profile2D errors; *-* =======================================. The computation of errors is based on the parameter option:; option:; ' ' (Default) Errors are Spread/SQRT(N) for Spread.ne.0. ,; "" "" SQRT(Z)/SQRT(N) for Spread.eq.0,N.gt.0 ,; "" "" 0. for N.eq.0; 's' Errors are Spread for Spread.ne.0. ,; "" "" SQRT(Z) for Spread.eq.0,N.gt.0 ,; "" "" 0. for N.eq.0; 'i' Errors are Spread/SQRT(N) for Spread.ne.0. ,; "" "" 1./SQRT(12.*N) for Spread.eq.0,N.gt.0 ,; "" "" 0. for N.eq.0; See TProfile2D::BuildOptions for explanation of all options. void Streamer(TBuffer& b); Stream an object of class TProfile2D. void Sumw2(); Create structure to store sum of squares of weights per bin *-*-*-*-*-*-*-*; This is needed to compute the correct statistical quantities; of a profile filled with weights. This function is automatically called when the histogram is created; if the static function TH1::SetDefaultSumw2 has been called before. Int_t BufferFill(Double_t , Double_t ); {return -2;}. Int_t BufferFill(Doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProfile2D.html:44825,error,errors,44825,root/html532/TProfile2D.html,https://root.cern,https://root.cern/root/html532/TProfile2D.html,2,['error'],['errors']
Availability,"ebinX(Int_t ngroup = 2, const char* newname = """"); Rebin only the X axis; see Rebin2D. TProfile2D * RebinY(Int_t ngroup = 2, const char* newname = """"); Rebin only the Y axis; see Rebin2D. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void Scale(Double_t c1 = 1, Option_t* option = """"); *-*-*-*-*Multiply this profile2D by a constant c1*-*-*-*-*-*-*-*-*; *-* ========================================. this = c1*this. This function uses the services of TProfile2D::Add. void SetBinEntries(Int_t bin, Double_t w); Set the number of entries in bin*-*-*-; *-* ================================. void SetBins(Int_t nbinsx, Double_t xmin, Double_t xmax, Int_t nbinsy, Double_t ymin, Double_t ymax); Redefine x axis parameters*-*-*-; *-* ===========================. void SetBuffer(Int_t buffersize, Option_t* option = """"); set the buffer size in units of 8 bytes (double). void SetErrorOption(Option_t* option = """"); -*-*Set option to compute profile2D errors; *-* =======================================. The computation of errors is based on the parameter option:; option:; ' ' (Default) Errors are Spread/SQRT(N) for Spread.ne.0. ,; "" "" SQRT(Z)/SQRT(N) for Spread.eq.0,N.gt.0 ,; "" "" 0. for N.eq.0; 's' Errors are Spread for Spread.ne.0. ,; "" "" SQRT(Z) for Spread.eq.0,N.gt.0 ,; "" "" 0. for N.eq.0; 'i' Errors are Spread/SQRT(N) for Spread.ne.0. ,; "" "" 1./SQRT(12.*N) for Spread.eq.0,N.gt.0 ,; "" "" 0. for N.eq.0; See TProfile2D::BuildOptions for explanation of all options. void Streamer(TBuffer& b); Stream an object of class TProfile2D. void Sumw2(); Create structure to store sum of squares of weights per bin *-*-*-*-*-*-*-*; This is needed to compute the correct statistical quantities; of a profile filled with weights. This function is automatically called when the histogram is created; if the static function TH1::SetDefaultSumw2 has been called before. Int_t BufferFill(Double_t , Double_t ); {return -2;}. Int_t BufferFill(Doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProfile2D.html:44111,error,errors,44111,root/html528/TProfile2D.html,https://root.cern,https://root.cern/root/html528/TProfile2D.html,2,['error'],['errors']
Availability,"ebug, const char* script); static Int_tTApplication::ParseRemoteLine(const char* ln, TString& hostdir, TString& user, Int_t& dbg, TString& script); voidTApplication::SetSignalHandler(TSignalHandler* sh). private:. TRint(const TRint&); voidExecLogon(); TRint&operator=(const TRint&); virtual Long_tProcessRemote(const char* line, Int_t* error = 0). Data Members; public:. enum TApplication::EStatusBits { kProcessRemotely; kDefaultApplication; };; enum TApplication::EExitOnException { kDontExit; kExit; kAbort; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TApplication*TApplication::fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications. private:. TStringfDefaultPromptdefault prompt: ""root [%d] ""; TFileHandler*fInputHandlerterminal input handler; Bool_tfInterruptif true macro execution will be stopped; Int_tfNcmdcommand history number; charfPrompt[64]interpreter prompt. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TRint(const char* appClassName, int* argc, char** argv, void* options = 0, int numOptions = 0, Bool_t noLogo = kFALSE); Create an application environment. The TRint environment provides an; interface to the WM manager functionality and eventloop via inheritance; of TApplication and in addition provides interactive access to; the CINT C++ interpreter via the command line. ~TRint(); Destructor. void ExecLogon(); Execute logon macro's. There are thr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRint.html:11999,avail,available,11999,root/html528/TRint.html,https://root.cern,https://root.cern/root/html528/TRint.html,6,['avail'],['available']
Availability,"ec instances can be performed: for example, they can be added, subtracted, multiplied. RVec<double> v1 {1.,2.,3.,4.};; RVec<float> v2 {5.f,6.f,7.f,8.f};; auto v3 = v1+v2;; auto v4 = 3 * v1;; ROOT::VecOps::RVecA ""std::vector""-like collection of values implementing handy operation to analyse them.Definition RVec.hxx:1529; v2@ v2Definition rootcling_impl.cxx:3690; v4@ v4Definition rootcling_impl.cxx:3692; v3@ v3Definition rootcling_impl.cxx:3691; v1@ v1Definition rootcling_impl.cxx:3689; The supported operators are; +, -, *, /; +=, -=, *=, /=; <, >, ==, !=, <=, >=, &&, ||; ~, !; &, |, ^; &=, |=, ^=; <<=, >>=. The most common mathematical functions are supported. It is possible to invoke them passing RVecs as arguments.; abs, fdim, fmod, remainder; floor, ceil, trunc, round, lround, llround; exp, exp2, expm1; log, log10, log2, log1p; pow; sqrt, cbrt; sin, cos, tan, asin, acos, atan, atan2, hypot; sinh, cosh, tanh, asinh, acosh; erf, erfc; lgamma, tgamma. If the VDT library is available, the following functions can be invoked. Internally the calculations are vectorized:; fast_expf, fast_logf, fast_sinf, fast_cosf, fast_tanf, fast_asinf, fast_acosf, fast_atanf; fast_exp, fast_log, fast_sin, fast_cos, fast_tan, fast_asin, fast_acos, fast_atan. Owning and adopting memory; RVec has contiguous memory associated to it. It can own it or simply adopt it. In the latter case, it can be constructed with the address of the memory associated to it and its length. For example: std::vector<int> myStlVec {1,2,3};; RVec<int> myRVec(myStlVec.data(), myStlVec.size());; In this case, the memory associated to myStlVec and myRVec is the same, myRVec simply ""adopted it"". If any method which implies a re-allocation is called, e.g. emplace_back or resize, the adopted memory is released and new one is allocated. The previous content is copied in the new memory and preserved. Sorting and manipulation of indices. Sorting; RVec complies to the STL interfaces when it comes to iterations. As a result, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:4335,avail,available,4335,doc/v632/classROOT_1_1VecOps_1_1RVec.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html,1,['avail'],['available']
Availability,"ec instances can be performed: for example, they can be added, subtracted, multiplied. RVec<double> v1 {1.,2.,3.,4.};; RVec<float> v2 {5.f,6.f,7.f,8.f};; auto v3 = v1+v2;; auto v4 = 3 * v1;; ROOT::VecOps::RVecA ""std::vector""-like collection of values implementing handy operation to analyse them.Definition RVec.hxx:1529; v2@ v2Definition rootcling_impl.cxx:3702; v4@ v4Definition rootcling_impl.cxx:3704; v3@ v3Definition rootcling_impl.cxx:3703; v1@ v1Definition rootcling_impl.cxx:3701; The supported operators are; +, -, *, /; +=, -=, *=, /=; <, >, ==, !=, <=, >=, &&, ||; ~, !; &, |, ^; &=, |=, ^=; <<=, >>=. The most common mathematical functions are supported. It is possible to invoke them passing RVecs as arguments.; abs, fdim, fmod, remainder; floor, ceil, trunc, round, lround, llround; exp, exp2, expm1; log, log10, log2, log1p; pow; sqrt, cbrt; sin, cos, tan, asin, acos, atan, atan2, hypot; sinh, cosh, tanh, asinh, acosh; erf, erfc; lgamma, tgamma. If the VDT library is available, the following functions can be invoked. Internally the calculations are vectorized:; fast_expf, fast_logf, fast_sinf, fast_cosf, fast_tanf, fast_asinf, fast_acosf, fast_atanf; fast_exp, fast_log, fast_sin, fast_cos, fast_tan, fast_asin, fast_acos, fast_atan. Owning and adopting memory; RVec has contiguous memory associated to it. It can own it or simply adopt it. In the latter case, it can be constructed with the address of the memory associated to it and its length. For example: std::vector<int> myStlVec {1,2,3};; RVec<int> myRVec(myStlVec.data(), myStlVec.size());; In this case, the memory associated to myStlVec and myRVec is the same, myRVec simply ""adopted it"". If any method which implies a re-allocation is called, e.g. emplace_back or resize, the adopted memory is released and new one is allocated. The previous content is copied in the new memory and preserved. Sorting and manipulation of indices. Sorting; RVec complies to the STL interfaces when it comes to iterations. As a result, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVec.html:4336,avail,available,4336,doc/master/classROOT_1_1VecOps_1_1RVec.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVec.html,1,['avail'],['available']
Availability,"ecContextCleanup(Int_t port, Int_t proto, Int_t type); virtual~TSecContextCleanup(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetPort() const; Int_tGetProtocol() const; virtual const char*TObject::GetTitle() const; Int_tGetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSecContextCleanup.html:1484,error,error,1484,root/html528/TSecContextCleanup.html,https://root.cern,https://root.cern/root/html528/TSecContextCleanup.html,6,['error'],['error']
Availability,"ecalculated.; Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; if not already set.; The resulting errors are calculated assuming uncorrelated histograms.; See the other TH1::Divide that gives the possibility to optionally; compute binomial errors. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Scale. The function return kFALSE if the divide operation failed. Bool_t Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """"); -*-*-*Replace contents of this histogram by the division of h1 by h2*-*-*. this = c1*h1/(c2*h2). if errors are defined (see TH1::Sumw2), errors are also recalculated; Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; if not already set.; The resulting errors are calculated assuming uncorrelated histograms.; However, if option =""B"" is specified, Binomial errors are computed.; In this case c1 and c2 do not make real sense and they are ignored. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Divide. Please note also that in the binomial case errors are calculated using standard; binomial statistics, which means when b1 = b2, the error is zero.; If you prefer to have efficiency errors not going to zero when the efficiency is 1, you must; use the function TGraphAsymmErrors::BayesDivide, which will return an asymmetric and non-zero lower; error for the case b1=b2. The function return kFALSE if the divide operation failed. void Draw(Option_t* option = """"); Draw this histogram with options. Histograms are drawn via the THistPainter class. Each histogram has; a pointer to its own painter (to be usable in a multithreaded program).; The same histogram can be drawn with different options in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1.html:63843,error,errors,63843,root/html534/TH1.html,https://root.cern,https://root.cern/root/html534/TH1.html,2,['error'],['errors']
Availability,"ecause at a limit the derivative seen by the minimized \(\frac{\partial F}{\partial Pint}\) is zero no matter what the real derivative \(\frac{\partial F}{\partial Pext}\) is.; \[; \left(\frac{\partial F}{\partial Pint}\right) =; \left(\frac{\partial F}{\partial Pext}\right); \left(\frac{\partial Pext}{\partial Pint}\right) =; \left(\frac{\partial F}{\partial Pext}\right) = 0; \]; 5.9.3.2 Getting the Right Parameter Errors with Limits; In the best case, where the minimum is far from any limits, Minuit will correctly transform the error matrix, and the parameter errors it reports should be accurate and very close to those you would have got without limits. In other cases (which should be more common, since otherwise you would not need limits), the very meaning of parameter errors becomes problematic. Mathematically, since the limit is an absolute constraint on the parameter, a parameter at its limit has no error, at least in one direction. The error matrix, which can assign only symmetric errors, then becomes essentially meaningless.; 5.9.3.3 Interpretation of Parameter Errors; There are two kinds of problems that can arise: the reliability of Minuit’s error estimates, and their statistical interpretation, assuming they are accurate.; 5.9.3.4 Statistical Interpretation; For discussion of basic concepts, such as the meaning of the elements of the error matrix, or setting of exact confidence levels see the articles:. F.James. Determining the statistical Significance of experimental Results. Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981; W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet. Statistical Methods in Experimental Physics. North-Holland, 1971. 5.9.4 Reliability of Minuit Error Estimates; Minuit always carries around its own current estimates of the parameter errors, which it will print out on request, no matter how accurate they are at any given point in the execution. For example, at initialization, these estimates are just the starting step ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:220395,error,error,220395,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,4,['error'],"['error', 'errors']"
Availability,"ecause it will try to prefetch the next block as soon as we start reading from the current block. ; Definition at line 1986 of file TTreeCache.cxx. ◆ ResetCache(). void TTreeCache::ResetCache ; (; ). virtual . This will simply clear the cache. ; Reimplemented in TTreeCacheUnzip.; Definition at line 2040 of file TTreeCache.cxx. ◆ ResetMissCache(). void TTreeCache::ResetMissCache ; (; ). Reset all the miss cache training. ; The contents of the miss cache will be emptied as well as the list of branches used. ; Definition at line 697 of file TTreeCache.cxx. ◆ SetAutoCreated(). void TTreeCache::SetAutoCreated ; (; bool ; val). inline . Definition at line 164 of file TTreeCache.h. ◆ SetBufferSize(). Int_t TTreeCache::SetBufferSize ; (; Long64_t ; buffersize). overridevirtual . Change the underlying buffer size of the cache. ; If the change of size means some cache content is lost, or if the buffer is now larger, setup for a cache refill the next time there is a read Buffersize might be clamped, see TFileCacheRead::SetBufferSize Returns:; 0 if the buffer content is still available; 1 if some or all of the buffer content has been made unavailable; -1 on error . Reimplemented from TFileCacheRead.; Reimplemented in TTreeCacheUnzip.; Definition at line 2073 of file TTreeCache.cxx. ◆ SetEntryRange(). void TTreeCache::SetEntryRange ; (; Long64_t ; emin, . Long64_t ; emax . ). virtual . Set the minimum and maximum entry number to be processed this information helps to optimize the number of baskets to read when prefetching the branch buffers. ; Reimplemented in TTreeCacheUnzip.; Definition at line 2106 of file TTreeCache.cxx. ◆ SetFile(). void TTreeCache::SetFile ; (; TFile * ; file, . TFile::ECacheAction ; action = TFile::kDisconnect . ). overridevirtual . Change the file that is being cached. ; Reimplemented from TFileCacheRead.; Definition at line 2128 of file TTreeCache.cxx. ◆ SetLearnEntries(). void TTreeCache::SetLearnEntries ; (; Int_t ; n = 10). static . Static function t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:48538,avail,available,48538,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,2,"['avail', 'error']","['available', 'error']"
Availability,"eceiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Attributes; Pixel_t fBgndColor;  background color ;  ; Pixel_t fHighColor;  highlight color ;  ; const TGPicture * fPic;  picture in scrollbar element ;  ; const TGPicture * fPicD;  picture for disabled state of scrollbar element ;  ; const TGPicture * fPicN;  picture for normal state of scrollbar element ;  ; Int_t fState;  state of scrollbar element (button up or down) ;  ; Int_t fStyle;  modern or classic style ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGScrollBarElement.html:21979,down,down,21979,doc/master/classTGScrollBarElement.html,https://root.cern,https://root.cern/doc/master/classTGScrollBarElement.html,1,['down'],['down']
Availability,"eces to insert the Box defined by bmin and; 148 // bmax. It will do so from the highest dimension until it gets; 149 // to 1 and create the corresponding boxes to divide the; 150 // original space.; 151 void DivideBox( const vector<double>& min, const vector<double>& max,; 152 const vector<double>& bmin, const vector<double>& bmax,; 153 const unsigned int size, const unsigned int n,; 154 list<Box>& l, const double val, const double error); 155 {; 156 vector<double> boxmin(min);; 157 vector<double> boxmax(max);; 158 ; 159 boxmin[n] = min[n];; 160 boxmax[n] = bmin[n];; 161 if ( for_each(boxmin.begin(), boxmin.end(), AreaComparer(boxmax.begin())).IsThereArea() ); 162 l.push_back(Box(boxmin, boxmax));; 163 ; 164 boxmin[n] = bmin[n];; 165 boxmax[n] = bmax[n];; 166 if ( n == 0 ); 167 {; 168 if ( for_each(boxmin.begin(), boxmin.end(), AreaComparer(boxmax.begin())).IsThereArea() ); 169 l.push_back(Box(boxmin, boxmax, val, error));; 170 }; 171 else; 172 DivideBox(boxmin, boxmax, bmin, bmax, size, n-1, l, val, error);; 173 ; 174 boxmin[n] = bmax[n];; 175 boxmax[n] = max[n];; 176 if ( for_each(boxmin.begin(), boxmin.end(), AreaComparer(boxmax.begin())).IsThereArea() ); 177 l.push_back(Box(boxmin, boxmax));; 178 }; 179 ; 180 class ProxyListBox; 181 {; 182 public:; 183 void PushBack(Box& box) { fProxy.push_back(box); }; 184 list<Box>::iterator Begin() { return fProxy.begin(); }; 185 list<Box>::iterator End() { return fProxy.end(); }; 186 void Remove(list<Box>::iterator it) { fProxy.erase(it); }; 187 list<Box>& GetList() { return fProxy; }; 188 private:; 189 list<Box> fProxy;; 190 };; 191 ; 192 ; 193 SparseData::SparseData(vector<double>& min, vector<double>& max); 194 {; 195 // Creates a SparseData covering the range defined by min; 196 // and max. For this it will create an empty Box for that; 197 // range.; 198 Box originalBox(min, max);; 199 fList = std::make_unique<ProxyListBox>();; 200 fList->PushBack(originalBox);; 201 }; 202 ; 203 SparseData::SparseData(const unsigned int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/SparseData_8cxx_source.html:5358,error,error,5358,doc/master/SparseData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/SparseData_8cxx_source.html,2,['error'],['error']
Availability,"echnology specific and is overwritten by derived; classes. void Init(TSocket* s, Int_t stype); Init a PROOF slave object using the connection opened via s. Used to; avoid double opening when an attempt via TXSlave found a remote proofd. ~TSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Compare(const TObject* obj) const; Used to sort slaves by performance index. void Print(Option_t* option = """") const; Printf info about slave. void SetInputHandler(TFileHandler* ih); Adopt and register input handler for this slave. Handler will be deleted; by the slave. Int_t OldAuthSetup(Bool_t master, TString wconf); Setup authentication related stuff for old versions.; Provided for backward compatibility. TSlave * Create(const char* url, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t nwk = 1); Static method returning the appropriate TSlave object for the remote; server. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 in case of error. void Interrupt(Int_t type); Send interrupt OOB byte to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator. Only meaningful when there is one,; i.e. in XPD framework. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. void SetTXSlaveHook(TSlave_t xslavehook); Set hook to TXSlave ctor. TSlave(const TSlave& s); { }. void operator=(const TSlave& ); { }. void FlushSocket(); { }. Int_t SendGroupPriority(const char* , Int_t ); { return 0; }. void SetSocket(TSocket* s); { fSocket = s; }. void SetStatus(Int_t st); { fStatus = st; }. Bool_t IsSortable() const; { ret",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSlave.html:10661,Ping,Ping,10661,root/html602/TSlave.html,https://root.cern,https://root.cern/root/html602/TSlave.html,4,['Ping'],['Ping']
Availability,"ecially in case of low bin statistics, because they could return a biased result. Likelihood Fits; When using option ""L"" a likelihood fit is used instead of the default chi-square fit. The likelihood is built assuming a Poisson probability density function for each bin. The negative log-likelihood to be minimized is. \[; NLL = - \sum_{i}{ \log {\mathrm P} ( y(i) | f(x(i) | p ) ) }; \]. where P(y|f) is the Poisson distribution of observing a count y(i) in the bin when the expected count is f(x(i)|p). The exact likelihood used is the Poisson likelihood described in this paper: S. Baker and R. D. Cousins, “Clarification of the use of chi-square and likelihood functions in fits to histograms,” Nucl. Instrum. Meth. 221 (1984) 437. \[; NLL = \sum_{i}{( f(x(i) | p ) + y(i)\log(y(i)/ f(x(i) | p )) - y(i)) }; \]. By using this formulation, 2*NLL can be interpreted as the chi-square resulting from the fit.; This method should be always used when the bin content represents counts (i.e. errors are sqrt(N) ). The likelihood method has the advantage of treating correctly bins with low statistics. In case of high statistics/bin the distribution of the bin content becomes a normal distribution and the likelihood and the chi2 fit give the same result.; The likelihood method, although a bit slower, it is therefore the recommended method, when the histogram represent counts (Poisson statistics), where the chi-square methods may give incorrect results, especially in case of low statistics. In case of a weighted histogram, it is possible to perform also a likelihood fit by using the option ""WL"". Note a weighted histogram is a histogram which has been filled with weights and it has the information on the sum of the weight square for each bin ( TH1::Sumw2() has been called). The bin error for a weighted histogram is the square root of the sum of the weight square. Fit Result; The function returns a TFitResultPtr which can hold a pointer to a TFitResult object. By default the TFitResultPtr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:133174,error,errors,133174,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['error'],['errors']
Availability,"ecified accuracy, the value of the integral.; Method: For any interval [a,b] we define g8(a,b) and g16(a,b) to be the 8-point and 16-point Gaussian quadrature approximations to ; \[; I = \int^{b}_{a} f(x)dx; \]. and define ; \[; r(a,b) = \frac{\left|g_{16}(a,b)-g_{8}(a,b)\right|}{1+\left|g_{16}(a,b)\right|}; \]. Then, ; \[; G = \sum_{i=1}^{k}g_{16}(x_{i-1},x_{i}); \]. where, starting with \(x_{0} = A\) and finishing with \(x_{k} = B\), the subdivision points \(x_{i}(i=1,2,...)\) are given by ; \[; x_{i} = x_{i-1} + \lambda(B-x_{i-1}); \]. \(\lambda\) is equal to the first member of the sequence 1,1/2,1/4,... for which \(r(x_{i-1}, x_{i}) < EPS\). If, at any stage in the process of subdivision, the ratio ; \[; q = \left|\frac{x_{i}-x_{i-1}}{B-A}\right|; \]. is so small that 1+0.005q is indistinguishable from 1 to machine accuracy, an error exit occurs with the function value set equal to zero.; Accuracy: The user provides absolute and relative error bounds (epsrel and epsabs) and the algorithm will stop when the estimated error is less than the epsabs OR is less than |I| * epsrel. Unless there is severe cancellation of positive and negative values of f(x) over the interval [A,B], the relative error may be considered as specifying a bound on the relative error of I in the case |I|>1, and a bound on the absolute error in the case |I|<1. More precisely, if k is the number of sub-intervals contributing to the approximation (see Method), and if ; \[; I_{abs} = \int^{B}_{A} \left|f(x)\right|dx; \]. then the relation ; \[; \frac{\left|G-I\right|}{I_{abs}+k} < EPS; \]. will nearly always be true, provided the routine terminates without printing an error message. For functions f having no singularities in the closed interval [A,B] the accuracy will usually be much higher than this.; Error handling: The requested accuracy cannot be obtained (see Method). The function value is set equal to zero.; Note 1: Values of the function f(x) at the interval end-points A and B are not requ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:7404,error,error,7404,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,2,['error'],['error']
Availability,"ecified dataset. ; A valid dataset manager and dataset staging requests repository must be present on the endpoint. PROOF-Lite version of the equivalent function from TProofServ. ; Reimplemented from TProof.; Definition at line 2223 of file TProofLite.cxx. ◆ GetTreeHeader(). TTree * TProofLite::GetTreeHeader ; (; TDSet * ; tdset). overridevirtual . Creates a tree header (a tree with nonexisting files) object for the DataSet. ; Reimplemented from TProof.; Definition at line 2397 of file TProofLite.cxx. ◆ Init(). Int_t TProofLite::Init ; (; const char * ; masterurl, . const char * ; conffile, . const char * ; confdir, . Int_t ; loglevel, . const char * ; alias = 0 . ). protected . Start the PROOF environment. ; Starting PROOF involves either connecting to a master server, which in turn will start a set of slave servers, or directly starting as master server (if master = """"). For a description of the arguments see the TProof ctor. Returns the number of started master or slave servers, returns 0 in case of error, in which case fValid remains false. ; Definition at line 154 of file TProofLite.cxx. ◆ InitDataSetManager(). Int_t TProofLite::InitDataSetManager ; (; ). private . Initialize the dataset manager from directives or from defaults Return 0 on success, -1 on failure. ; Definition at line 1412 of file TProofLite.cxx. ◆ IsA(). TClass * TProofLite::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TProof.; Definition at line 170 of file TProofLite.h. ◆ Load(). Int_t TProofLite::Load ; (; const char * ; macro, . Bool_t ; notOnClient = kFALSE, . Bool_t ; uniqueOnly = kTRUE, . TList * ; wrks = 0 . ). overridevirtual . Copy the specified macro in the cache directory. ; The macro file is uploaded if new or updated. If existing, the corresponding header basename(macro).h or .hh, is also uploaded. For the other arguments see TProof::Load(). Returns 0 in case of success and -1 in case of error. ; Reimplemented from TProof.;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:54117,error,error,54117,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['error'],['error']
Availability,"eck is not needed anymore, so classname is ignored). If; not it will load library ""libname"". If the library name does; not start with ""lib"", ""lib"" will be prepended and a search will; be made in the DynamicPath (see .rootrc). If not found a search; will be made on libname (without ""lib"" prepended) and if not found; a direct try of libname will be made (in case it contained an; absolute path).; If check is true it will only check if libname exists and is; readable.; Returns 0 on successful loading, -1 in case libname does not; exist or in case of error and -2 in case of version mismatch. Bool_t IsRootFile(const char* filename) const; Return true if the file is local and is (likely) to be a ROOT file. void ls(Option_t* option = """") const; To list all objects of the application.; Loop on all objects created in the ROOT linked lists.; Objects may be files and windows or any other object directly; attached to the ROOT linked list. Int_t LoadMacro(const char* filename, Int_t* error = 0, Bool_t check = kFALSE); Load a macro in the interpreter's memory. Equivalent to the command line; command "".L filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]].; The possible error codes are defined by TInterpreter::EErrorCode.; If check is true it will only check if filename exists and is; readable.; Returns 0 on successful loading and -1 in case filename does not; exist or in case of error. Long_t Macro(const char* filename, Int_t* error = 0, Bool_t padUpdate = kTRUE); Execute a macro in the interpreter. Equivalent to the command line; command "".x filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]][(args)].; The possible error codes are defined by TInterpreter::EErrorCode.; If padUpdate is true (default) update the current pad.; Returns the macro return value. void Message(Int_t id, const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TROOT.html:31750,error,error,31750,root/html602/TROOT.html,https://root.cern,https://root.cern/root/html602/TROOT.html,4,['error'],['error']
Availability,"eckRemote(). void TGCommandPlugin::CheckRemote ; (; const char * ; ). Check if actual ROOT session is a remote one or a local one. ; Definition at line 137 of file TGCommandPlugin.cxx. ◆ Class(). static TClass * TGCommandPlugin::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGCommandPlugin::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGCommandPlugin::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 56 of file TGCommandPlugin.h. ◆ DeclFileName(). static const char * TGCommandPlugin::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 56 of file TGCommandPlugin.h. ◆ GetHistAdd(). Bool_t TGCommandPlugin::GetHistAdd ; (; ). inline . Definition at line 50 of file TGCommandPlugin.h. ◆ HandleArrows(). void TGCommandPlugin::HandleArrows ; (; Int_t ; keysym). Handle the 'up' and 'down' arrow key events. ; Definition at line 164 of file TGCommandPlugin.cxx. ◆ HandleCommand(). void TGCommandPlugin::HandleCommand ; (; ). Handle command line from the ""command"" combo box. ; Definition at line 193 of file TGCommandPlugin.cxx. ◆ HandleTab(). void TGCommandPlugin::HandleTab ; (; ). Handle the 'TAB' key events. ; Definition at line 229 of file TGCommandPlugin.cxx. ◆ HandleTextChanged(). void TGCommandPlugin::HandleTextChanged ; (; const char * ; text). Handle the text changed events. ; Definition at line 264 of file TGCommandPlugin.cxx. ◆ HandleTimer(). Bool_t TGCommandPlugin::HandleTimer ; (; TTimer * ; t). overridevirtual . Handle timer event. ; Reimplemented from TObject.; Definition at line 272 of file TGCommandPlugin.cxx. ◆ IsA(). TClass * TGCommandPlugin::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 56 of file TGCommandPlugin.h. ◆ SetHistAdd(). void TGCommandPlugin::SetHistAdd ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCommandPlugin.html:37875,down,down,37875,doc/master/classTGCommandPlugin.html,https://root.cern,https://root.cern/doc/master/classTGCommandPlugin.html,1,['down'],['down']
Availability,"eckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsiste",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTButton.html:28917,error,error,28917,doc/master/classTButton.html,https://root.cern,https://root.cern/doc/master/classTButton.html,4,['error'],['error']
Availability,"ecl & ; recordDecl . ). Definition at line 1395 of file TClingUtils.cxx. ◆ GetQualifiedName() [10/10]. void ROOT::TMetaUtils::GetQualifiedName ; (; std::string & ; qual_name, . const clang::Type & ; type, . const clang::NamedDecl & ; forcontext . ). Definition at line 1337 of file TClingUtils.cxx. ◆ GetRealPath(). std::string ROOT::TMetaUtils::GetRealPath ; (; const std::string & ; path). Returnsthe resolved normalized absolute path possibly resolving symlinks. ; Definition at line 72 of file TClingUtils.cxx. ◆ GetTrivialIntegralReturnValue(). std::pair< bool, int > ROOT::TMetaUtils::GetTrivialIntegralReturnValue ; (; const clang::FunctionDecl * ; funcCV, . const cling::Interpreter & ; interp . ). If the function contains 'just': return SomeValue; this routine will extract this value and return it. ; The first element is set to true we have the body of the function and it is indeed a trivial function with just a return of a value. The second element contains the value (or -1 is case of failure) ; Definition at line 2559 of file TClingUtils.cxx. ◆ GetTypeForIO(). clang::QualType ROOT::TMetaUtils::GetTypeForIO ; (; const clang::QualType & ; templateInstanceType, . const cling::Interpreter & ; interpreter, . const TNormalizedCtxt & ; normCtxt, . TClassEdit::EModType ; mode = TClassEdit::kNone . ). Definition at line 4108 of file TClingUtils.cxx. ◆ GetUnderlyingRecordDecl(). clang::RecordDecl * ROOT::TMetaUtils::GetUnderlyingRecordDecl ; (; clang::QualType ; type). Definition at line 2788 of file TClingUtils.cxx. ◆ GetUnderlyingType(). const clang::Type * ROOT::TMetaUtils::GetUnderlyingType ; (; clang::QualType ; type). Return the base/underlying type of a chain of array or pointers type. ; Does not yet support the array and pointer part being intermixed. ; Definition at line 4334 of file TClingUtils.cxx. ◆ GetWarningsAreErrors(). bool & ROOT::TMetaUtils::GetWarningsAreErrors ; (; ). inline . Definition at line 764 of file TClingUtils.h. ◆ HasClassDefMacro(). bool ROOT:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:37647,failure,failure,37647,doc/v632/namespaceROOT_1_1TMetaUtils.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html,1,['failure'],['failure']
Availability,"ecl & ; recordDecl . ). Definition at line 1435 of file TClingUtils.cxx. ◆ GetQualifiedName() [10/10]. void ROOT::TMetaUtils::GetQualifiedName ; (; std::string & ; qual_name, . const clang::Type & ; type, . const clang::NamedDecl & ; forcontext . ). Definition at line 1377 of file TClingUtils.cxx. ◆ GetRealPath(). std::string ROOT::TMetaUtils::GetRealPath ; (; const std::string & ; path). Returnsthe resolved normalized absolute path possibly resolving symlinks. ; Definition at line 72 of file TClingUtils.cxx. ◆ GetTrivialIntegralReturnValue(). std::pair< bool, int > ROOT::TMetaUtils::GetTrivialIntegralReturnValue ; (; const clang::FunctionDecl * ; funcCV, . const cling::Interpreter & ; interp . ). If the function contains 'just': return SomeValue; this routine will extract this value and return it. ; The first element is set to true we have the body of the function and it is indeed a trivial function with just a return of a value. The second element contains the value (or -1 is case of failure) ; Definition at line 2599 of file TClingUtils.cxx. ◆ GetTypeForIO(). clang::QualType ROOT::TMetaUtils::GetTypeForIO ; (; const clang::QualType & ; templateInstanceType, . const cling::Interpreter & ; interpreter, . const TNormalizedCtxt & ; normCtxt, . TClassEdit::EModType ; mode = TClassEdit::kNone . ). Definition at line 4154 of file TClingUtils.cxx. ◆ GetUnderlyingRecordDecl(). clang::RecordDecl * ROOT::TMetaUtils::GetUnderlyingRecordDecl ; (; clang::QualType ; type). Definition at line 2828 of file TClingUtils.cxx. ◆ GetUnderlyingType(). const clang::Type * ROOT::TMetaUtils::GetUnderlyingType ; (; clang::QualType ; type). Return the base/underlying type of a chain of array or pointers type. ; Does not yet support the array and pointer part being intermixed. ; Definition at line 4380 of file TClingUtils.cxx. ◆ GetWarningsAreErrors(). bool & ROOT::TMetaUtils::GetWarningsAreErrors ; (; ). inline . Definition at line 787 of file TClingUtils.h. ◆ HasClassDefMacro(). bool ROOT:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:37639,failure,failure,37639,doc/master/namespaceROOT_1_1TMetaUtils.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html,1,['failure'],['failure']
Availability,"ecl);; 5718 specDecl->setHasExternalLexicalStorage();; 5719 ; 5720 // No need to recurse. On the contrary, recursing is actively harmful:; 5721 // NOTE: must not recurse to prevent this visitor from triggering loading from; 5722 // the external AST source (i.e. autoloading). This would be triggered right here,; 5723 // before autoloading is even set up, as rootmap file parsing happens before that.; 5724 // Even if autoloading is off and has no effect, triggering loading from external; 5725 // AST source resets the flag setHasExternalLexicalStorage(), hiding this specialization; 5726 // from subsequent autoloads!; 5727 return false;; 5728 }; 5729 private:; 5730 std::unordered_set<const NamespaceDecl*>& fNSSet;; 5731 };; 5732}; 5733 ; 5734////////////////////////////////////////////////////////////////////////////////; 5735/// Load map between class and library. If rootmapfile is specified a; 5736/// specific rootmap file can be added (typically used by ACLiC).; 5737/// In case of error -1 is returned, 0 otherwise.; 5738/// The interpreter uses this information to automatically load the shared; 5739/// library for a class (autoload mechanism), see the AutoLoad() methods below.; 5740 ; 5741Int_t TCling::LoadLibraryMap(const char* rootmapfile); 5742{; 5743 if (rootmapfile && *rootmapfile && !requiresRootMap(rootmapfile)); 5744 return 0;; 5745 ; 5746 R__LOCKGUARD(gInterpreterMutex);; 5747 ; 5748 // open the [system].rootmap files; 5749 if (!fMapfile) {; 5750 fMapfile = new TEnv();; 5751 fMapfile->IgnoreDuplicates(kTRUE);; 5752 fRootmapFiles = new TObjArray;; 5753 fRootmapFiles->SetOwner();; 5754 InitRootmapFile("".rootmap"");; 5755 }; 5756 ; 5757 // Prepare a list of all forward declarations for cling; 5758 // For some experiments it is easily as big as 500k characters. To be on the; 5759 // safe side, we go for 1M.; 5760 TUniqueString uniqueString(1048576);; 5761 ; 5762 // Load all rootmap files in the dynamic load path ((DY)LD_LIBRARY_PATH, etc.).; 5763 // A rootmap file ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:223606,error,error,223606,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['error'],['error']
Availability,"eclaration ; Definition at line 48 of file TNetFileStager.h. ◆ GetPrefix(). void TNetFileStager::GetPrefix ; (; const char * ; url, . TString & ; pfx . ). staticprivate . Isolate prefix in url. ; Definition at line 71 of file TNetFileStager.cxx. ◆ IsA(). TClass * TNetFileStager::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TFileStager.; Definition at line 48 of file TNetFileStager.h. ◆ IsStaged(). Bool_t TNetFileStager::IsStaged ; (; const char * ; path). overridevirtual . Check if the file defined by 'path' is ready to be used. ; Reimplemented from TFileStager.; Definition at line 50 of file TNetFileStager.cxx. ◆ IsValid(). Bool_t TNetFileStager::IsValid ; (; ); const. inlineoverridevirtual . Reimplemented from TFileStager.; Definition at line 44 of file TNetFileStager.h. ◆ Locate(). Int_t TNetFileStager::Locate ; (; const char * ; path, . TString & ; endpath . ). overridevirtual . Get actual end-point url for a path Returns 0 in case of success and 1 if any error occured. ; Reimplemented from TFileStager.; Definition at line 101 of file TNetFileStager.cxx. ◆ Matches(). Bool_t TNetFileStager::Matches ; (; const char * ; s). overridevirtual . Returns kTRUE if stager 's' is compatible with current stager. ; Avoids multiple instantiations of the potentially the same TNetSystem. ; Reimplemented from TFileStager.; Definition at line 125 of file TNetFileStager.cxx. ◆ Print(). void TNetFileStager::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print basic info about this stager. ; Reimplemented from TNamed.; Definition at line 92 of file TNetFileStager.cxx. ◆ Streamer(). void TNetFileStager::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TFileStager. ◆ StreamerNVirtual(). void TNetFileStager::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 48 of file TNetFileStager.h. Member Data Documentation. ◆ ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNetFileStager.html:14882,error,error,14882,doc/master/classTNetFileStager.html,https://root.cern,https://root.cern/doc/master/classTNetFileStager.html,1,['error'],['error']
Availability,"ecomes more likely if the number of free parameters is very large, or if; 258 ; 259the parameters are badly scaled (not all of the same order of magnitude),; 260and correlations are also large. In any case, whether the; 261non-positive-definiteness is real or only numerical is largely irrelevant,; 262since in both cases the error matrix will be unreliable and the minimum; 263suspicious.; 264 ; 265##### An ill-posed problem:; 266 ; 267For questions of parameter dependence, see the discussion above on; 268positive-definiteness.; 269 ; 270Possible other mathematical problems are the following:; 271 ; 272##### Excessive numerical roundoff:; 273 ; 274Be especially careful of exponential and factorial functions which get big; 275very quickly and lose accuracy.; 276 ; 277##### Starting too far from the solution:; 278 ; 279The function may have unphysical local minima, especially at infinity in; 280some variables.; 281 ; 282##### Minuit parameter errors in the presence of limits; 283This concerns the way Minuit reports the symmetric (or parabolic) errors; 284on parameters. It does not apply to the errors reported from Minos, which; 285are in general asymmetric.; 286 ; 287The symmetric errors reported by Minuit are always calculated from; 288the covariance matrix, assuming that this matrix has been calculated,; 289usually as the result of a Migrad minimization or a direct; 290calculation by Hesse which inverts the second derivative matrix.; 291 ; 292When there are no limits on the parameter in question, the error reported; 293by Minuit should therefore be exactly equal to the square root of the; 294corresponding diagonal element of the error matrix reported by Minuit.; 295 ; 296However, when there are limits on the parameter, there is a transformation; 297between the internal parameter values seen by Minuit (which are unbounded); 298and the external parameter values seen by the user in FCN (which remain; 299inside the desired limits). Therefore the internal error matrix kept",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:13496,error,errors,13496,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,2,['error'],['errors']
Availability,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDiamond.html:11368,error,error,11368,doc/master/classTDiamond.html,https://root.cern,https://root.cern/doc/master/classTDiamond.html,5,['error'],['error']
Availability,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFolder.html:9916,error,error,9916,doc/master/classTFolder.html,https://root.cern,https://root.cern/doc/master/classTFolder.html,2,['error'],['error']
Availability,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranch.html:13082,error,error,13082,doc/master/classTBranch.html,https://root.cern,https://root.cern/doc/master/classTBranch.html,12,['error'],['error']
Availability,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBMixDecay.html:53908,error,error,53908,doc/master/classRooBMixDecay.html,https://root.cern,https://root.cern/doc/master/classRooBMixDecay.html,572,['error'],['error']
Availability,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:10616,error,error,10616,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,2,['error'],['error']
Availability,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; Bool_t HasInco",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLEventHandler.html:7736,error,error,7736,doc/master/classTGLEventHandler.html,https://root.cern,https://root.cern/doc/master/classTGLEventHandler.html,1,['error'],['error']
Availability,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:54178,error,error,54178,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,1,['error'],['error']
Availability,"ect * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Retur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGaxis.html:45647,error,error,45647,doc/master/classTGaxis.html,https://root.cern,https://root.cern/doc/master/classTGaxis.html,1,['error'],['error']
Availability,"ect * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTime",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASPaletteEditor_1_1LimitLine.html:5744,error,error,5744,doc/master/classTASPaletteEditor_1_1LimitLine.html,https://root.cern,https://root.cern/doc/master/classTASPaletteEditor_1_1LimitLine.html,2,['error'],['error']
Availability,"ect ; Reimplemented from TObject.; Definition at line 164 of file TQpSolverBase.h. ◆ operator=(). TQpSolverBase & TQpSolverBase::operator= ; (; const TQpSolverBase & ; source). Assignment operator. ; Definition at line 330 of file TQpSolverBase.cxx. ◆ SetArTol(). void TQpSolverBase::SetArTol ; (; Double_t ; ar). inline . Definition at line 158 of file TQpSolverBase.h. ◆ SetMuTol(). void TQpSolverBase::SetMuTol ; (; Double_t ; m). inline . Definition at line 155 of file TQpSolverBase.h. ◆ Solve(). virtual Int_t TQpSolverBase::Solve ; (; TQpDataBase * ; prob, . TQpVar * ; iterate, . TQpResidual * ; resids . ). pure virtual . Implemented in TGondzioSolver, and TMehrotraSolver. ◆ Start(). void TQpSolverBase::Start ; (; TQpProbBase * ; formulation, . TQpVar * ; iterate, . TQpDataBase * ; prob, . TQpResidual * ; resid, . TQpVar * ; step . ). virtual . Implements a default starting-point heuristic. ; While interior-point theory places fairly loose restrictions on the choice of starting point, the choice of heuristic can significantly affect the robustness and efficiency of the algorithm. ; Definition at line 118 of file TQpSolverBase.cxx. ◆ SteveStart(). void TQpSolverBase::SteveStart ; (; TQpProbBase * ; formulation, . TQpVar * ; iterate, . TQpDataBase * ; prob, . TQpResidual * ; resid, . TQpVar * ; step . ). virtual . Starting point algorithm according to Stephen Wright. ; Definition at line 154 of file TQpSolverBase.cxx. ◆ Streamer(). void TQpSolverBase::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TQpSolverBase::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 164 of file TQpSolverBase.h. Member Data Documentation. ◆ fArtol. Double_t TQpSolverBase::fArtol. protected . Definition at line 81 of file TQpSolverBase.h. ◆ fDnorm. Double_t TQpSolverBase::fDnorm. protected . Definition at line 78 of file TQpSolverBase.h. ◆ fGamma_a. Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpSolverBase.html:17815,robust,robustness,17815,doc/master/classTQpSolverBase.html,https://root.cern,https://root.cern/doc/master/classTQpSolverBase.html,1,['robust'],['robustness']
Availability,"ect contains the full dictionary; of a class. It has list to baseclasses, datamembers and methods. void ForceReload(TClass* oldcl); we found at least one equivalent.; let's force a reload. void Init(const char* name, Version_t cversion, const type_info* info, TVirtualIsAProxy* isa, ShowMembersFunc_t showmember, const char* dfil, const char* ifil, Int_t dl, Int_t il, Bool_t silent); Initialize a TClass object. This object contains the full dictionary; of a class. It has list to baseclasses, datamembers and methods. TClass(const TClass& tc); copy constructor. TClass& operator=(const TClass& ); assignement operator. ~TClass(); TClass dtor. Deletes all list that might have been created. Int_t ReadRules(); Read the class.rules files from the default location:.; $ROOTSYS/etc/class.rules (or ROOTETCDIR/class.rules). Int_t ReadRules(const char* filename); Read a class.rules file which contains one rule per line with comment; starting with a #; Returns the number of rules loaded.; Returns -1 in case of error. Bool_t AddRule(const char* rule); Add a schema evolution customization rule.; The syntax of the rule can be either the short form:; [type=Read] classname membername [attributes=... ] [version=[...] ] [checksum=[...] ] [oldtype=...] [code={...}]; or the long form; [type=Read] sourceClass=classname [targetclass=newClassname] [ source=""type membername; [type2 membername2]"" ]; [target=""membername3;membername4""] [attributes=... ] [version=...] [checksum=...] [code={...}|functionname]. For example to set HepMC::GenVertex::m_event to _not_ owned the object it is pointing to:; HepMC::GenVertex m_event attributes=NotOwner. Semantic of the tags:; type : the type of the rule, valid values: Read, ReadRaw, Write, WriteRaw, the default is 'Read'.; sourceClass : the name of the class as it is on the rule file; targetClass : the name of the class as it is in the current code ; defaults to the value of sourceClass; source : the types and names of the data members from the class on file ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TClass.html:19154,error,error,19154,root/html528/TClass.html,https://root.cern,https://root.cern/root/html528/TClass.html,6,['error'],['error']
Availability,"ect is deleted.; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; Long64_tTSelector::fStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelectorCint. Function documentation; TSelectorCint(); Default constructor for a Selector. ~TSelectorCint(); destructor for a Selector. void SetFuncProto(CallFunc_t* cf, ClassInfo_t* cl, const char* fname, const char* argtype, Bool_t required = kTRUE); Set the function prototype. void Build(TSelector* iselector, ClassInfo_t* cl, Bool_t isowner = kTRUE); Initialize the CallFunc objects when selector is interpreted. int Version() const; Invoke the Version function via the interpreter. void Init(TTree* ); Invoke the Init function via the interpreter. void Begin(TTree* tree); Invoke the Begin function via the interpreter. void SlaveBegin(TTree* ); Invoke the SlaveBegin function via the interpreter if available. Bool_t Notify(); Invoke the Notify function via the interpreter. Bool_t ProcessCut(Long64_t entry); Invoke the ProcessCut function via the interpreter. void ProcessFill(Long64_t entry); Invoke the ProcessFill function via the interpreter. Bool_t Process(Long64_t entry); Invoke the ProcessCut function via the interpreter. void SetOption(const char* option); Set the selector option. void SetObject(TObject* obj); Set the current object. void SetInputList(TList* input); Set the selector list of input objects. TList * GetOutputList() const; Return the list of output object. void SlaveTerminate(); Invoke the SlaveTerminate function via the interpreter if available. void Terminate(); Invoke the Terminate function via the interpreter. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Invoke the GetAbort function via the interpreter. TSelector::EAbort GetAbort() const; Invoke the GetAbort function via the interpreter. void ResetAb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSelectorCint.html:8772,avail,available,8772,root/html602/TSelectorCint.html,https://root.cern,https://root.cern/root/html602/TSelectorCint.html,4,['avail'],['available']
Availability,"ect stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void Create (const char *url, TSocket *sock=nullptr);  Create a TNetSystem object. ;  ; void InitRemoteEntity (const char *url);  Parse and save coordinates of the remote entity (user, host, port, ...) ;  ;  Protected Member Functions inherited from TSystem; virtual void DoBeep (Int_t=-1, Int_t=-1) const;  ; virtual const char * ExpandFileName (const char *fname);  Expand a pathname getting rid of special shell characters like ~. ;  ; virtual Bool_t ExpandFileName (TString &fname);  Expand a pathname getting rid of special shell characters like ~. ;  ; TSystem * FindHelper (const char *path, void *dirptr=nullptr);  Create helper TSystem to handle file and directory operations that might be special for remote file access. ;  ; TString & GetLastErrorString ();  Return the thread local storage for the custom last error message. ;  ; const TString & GetLastErrorString () const;  Return the thread local storage for the custom last error message. ;  ; virtual const char * GetLinkedLibraries ();  Get list of shared libraries loaded at the start of the executable. ;  ; virtual void SigAlarmInterruptsSyscalls (Bool_t);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Bool_t fIsLocal;  ; TString fLocalPrefix;  ;  Protected Attributes inherited from TSystem; EAclicMode fAclicMode {kDefault};  ; Int_t fAclicProperties {0};  ; Int_t fBeepDuration {0};  ; Int_t fBeepFreq {0};  ; TString fBuildArch;  ; TString fBuildCompiler;  ; TString fBuildCompilerVersion;  ; TString fBuildCompilerVersionStr;  ; TString fBuildDir;  ; TString fBuildNode;  ; TSeqCollection * fCompiled {nullptr};  ; B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNetSystem.html:30570,error,error,30570,doc/master/classTNetSystem.html,https://root.cern,https://root.cern/doc/master/classTNetSystem.html,1,['error'],['error']
Availability,"ect to a Dask cluster by creating your own connection object which internally operates with one of the cluster schedulers supported by Dask (more information in the Dask distributed docs):; import ROOT; from dask.distributed import Client; ; # Point RDataFrame calls to the Dask specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame; ; # In a Python script the Dask client needs to be initalized in a context; # Jupyter notebooks / Python session don't need this; if __name__ == ""__main__"":; # With an already setup cluster that exposes a Dask scheduler endpoint; client = Client(""dask_scheduler.domain.com:8786""); ; # The Dask RDataFrame constructor accepts the Dask Client object as an optional argument; df = RDataFrame(""mytree"",""myfile.root"", daskclient=client); # Proceed as usual; df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); If an instance of distributed.Client is not provided to the RDataFrame object, it will be created for you and it will run the computations in the local machine using all cores available. Choosing the number of distributed tasks; A distributed RDataFrame has internal logic to define in how many chunks the input dataset will be split before sending tasks to the distributed backend. Each task reads and processes one of said chunks. The logic is backend-dependent, but generically tries to infer how many cores are available in the cluster through the connection object. The number of tasks will be equal to the inferred number of cores. There are cases where the connection object of the chosen backend doesn't have information about the actual resources of the cluster. An example of this is when using Dask to connect to a batch system. The client object created at the beginning of the application does not automatically know how many cores will be available during distributed execution, since the jobs are submitted to the batch system after the creation of the connection. In such cases, the logic is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:38408,avail,available,38408,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,2,['avail'],['available']
Availability,"ect using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPoints3DABC.html:4230,error,error,4230,doc/master/classTPoints3DABC.html,https://root.cern,https://root.cern/doc/master/classTPoints3DABC.html,1,['error'],['error']
Availability,"ect using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classJet.html:6931,error,error,6931,doc/master/classJet.html,https://root.cern,https://root.cern/doc/master/classJet.html,4,['error'],['error']
Availability,"ect using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLEmbeddedViewer.html:14777,error,error,14777,doc/master/classTGLEmbeddedViewer.html,https://root.cern,https://root.cern/doc/master/classTGLEmbeddedViewer.html,2,['error'],['error']
Availability,"ect using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLHistPainter.html:9934,error,error,9934,doc/master/classTGLHistPainter.html,https://root.cern,https://root.cern/doc/master/classTGLHistPainter.html,3,['error'],['error']
Availability,"ect using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTime",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLScenePad.html:5534,error,error,5534,doc/master/classTGLScenePad.html,https://root.cern,https://root.cern/doc/master/classTGLScenePad.html,4,['error'],['error']
Availability,"ect& object) const; basic_ios<char,char_traits<char> >&basic_ios<char,char_traits<char> >::copyfmt(const basic_ios<char,char_traits<char> >& __rhs); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static voidEnableOutput(); static TMVA::MsgLogger&Endmsg(TMVA::MsgLogger& logger); boolbasic_ios<char,char_traits<char> >::eof() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; ios_base::iostatebasic_ios<char,char_traits<char> >::exceptions() const; voidbasic_ios<char,char_traits<char> >::exceptions(ios_base::iostate __except); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); boolbasic_ios<char,char_traits<char> >::fail() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; basic_ios<char,char_traits<char> >::char_typebasic_ios<char,char_traits<char> >::fill() const; basic_ios<char,char_traits<char> >::char_typebasic_ios<char,char_traits<char> >::fill(basic_ios<char,char_traits<char> >::char_type __ch); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; ios_base::fmtflagsios_base::flags() const; ios_base::fmtflagsios_base::flags(ios_base::fmtflags __fmtfl); basic_ostream<char,char_traits<char> >::__ostream_type&basic_ostream<char,char_traits<char> >::flush(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); stringGetFormattedSource() const; virtual const char*TObject::GetIconName() const; localeios_base::getloc() const; static UInt_tGetMaxSourceS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MsgLogger.html:2230,error,error,2230,root/html602/TMVA__MsgLogger.html,https://root.cern,https://root.cern/root/html602/TMVA__MsgLogger.html,4,['error'],['error']
Availability,"ect* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """") const; virtual TH1*TH1::DrawNormalized(Option_t* option = """", Double_t norm = 1) const; virtual voidTH1::DrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTH1::Eval(TF1* f1, Option_t* option = """"); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTH1::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TH1*TH1::FFT(TH1* h_output, Option_t* option); virtual Int_tTH1::Fill(Double_t x); virtual Int_tTH1::Fill(Double_t x, Double_t w); virtual Int_tTH1::Fill(const char* name, Double_t w); virtual voidTNamed::FillBuffer(char*& buffer); virtual voidTH1::FillN(Int_t ntimes, const Double_t* x, const Double_t* w, Int_t stride = 1); virtual voidTH1::FillN(Int_t, const Double_t*, const Double_t*, const Double_t*, Int_t); virtual voidTH1::FillRandom(const char* fname, Int_t ntimes = 5000); virtual voidTH1::FillRandom(TH1* h, Int_t ntimes = 5000); virtual Int_tTH1::FindBin(Double_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1C.html:3105,Error,Error,3105,root/html534/TH1C.html,https://root.cern,https://root.cern/root/html534/TH1C.html,5,['Error'],['Error']
Availability,"ect* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """") const; virtual TH1*TH1::DrawNormalized(Option_t* option = """", Double_t norm = 1) const; virtual voidTH1::DrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTH1::Eval(TF1* f1, Option_t* option = """"); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTH1::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TH1*TH1::FFT(TH1* h_output, Option_t* option); virtual Int_tTH2::Fill(Double_t x, Double_t y); virtual Int_tTH2::Fill(Double_t x, Double_t y, Double_t w); virtual Int_tTH2::Fill(Double_t x, const char* namey, Double_t w); virtual Int_tTH2::Fill(const char* namex, Double_t y, Double_t w); virtual Int_tTH2::Fill(const char* namex, const char* namey, Double_t w); virtual voidTNamed::FillBuffer(char*& buffer); virtual voidTH2::FillN(Int_t, const Double_t*, const Double_t*, Int_t); virtual voidTH2::FillN(Int_t ntimes, const Double_t* x, const Double_t* y, const Double_t* w, I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH2C.html:3447,Error,Error,3447,root/html534/TH2C.html,https://root.cern,https://root.cern/root/html534/TH2C.html,5,['Error'],['Error']
Availability,"ect* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """") const; virtual TH1*TH1::DrawNormalized(Option_t* option = """", Double_t norm = 1) const; virtual voidTH1::DrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTH1::Eval(TF1* f1, Option_t* option = """"); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTH1::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TH1*TH1::FFT(TH1* h_output, Option_t* option); virtual Int_tTH3::Fill(Double_t x, Double_t y, Double_t z); virtual Int_tTH3::Fill(Double_t x, Double_t y, Double_t z, Double_t w); virtual Int_tTH3::Fill(const char* namex, const char* namey, const char* namez, Double_t w); virtual Int_tTH3::Fill(const char* namex, Double_t y, const char* namez, Double_t w); virtual Int_tTH3::Fill(const char* namex, const char* namey, Double_t z, Double_t w); virtual Int_tTH3::Fill(Double_t x, const char* namey, const char* namez, Double_t w); virtual Int_tTH3::Fill(Double_t x, const char* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH3C.html:3317,Error,Error,3317,root/html534/TH3C.html,https://root.cern,https://root.cern/root/html534/TH3C.html,5,['Error'],['Error']
Availability,"ect*Clone(const char* newname = """") const; virtual Int_tCommand(const char* command); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual TObject*Contour(Int_t npoints = 10, Int_t pa1 = 0, Int_t pa2 = 1); virtual voidTNamed::Copy(TObject& named) const; virtual Int_tDefineParameter(Int_t parNo, const char* name, Double_t initVal, Double_t initErr, Double_t lowerLimit, Double_t upperLimit); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDeleteArrays(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Int_tEval(Int_t npar, Double_t* grad, Double_t& fval, Double_t* par, Int_t flag); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tFixParameter(Int_t parNo); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Int_tGetMaxIterations() const; TMethodCall*GetMethodCall() const; virtual const char*TNamed::GetName() const; virtual Int_tGetNumFixedPars() const; virtual Int_tGetNumFreePars() const; virtual Int_tGetNumPars() const; TObject*GetObjectFit() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tGetParamete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMinuit.html:15651,error,error,15651,root/html528/TMinuit.html,https://root.cern,https://root.cern/root/html528/TMinuit.html,10,['error'],['error']
Availability,"ect*TList::Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTHashList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTHashList::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*THashList::FindObject(const char* name) const; virtual TObject*THashList::FindObject(const TObject* obj) const; virtual TObject*TList::First() const; virtual TObjLink*TList::FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; TList*THashList::GetListForObject(const char* name) const; TList*THashList::GetListForObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSelectorList.html:2616,Error,Error,2616,root/html602/TSelectorList.html,https://root.cern,https://root.cern/root/html602/TSelectorList.html,2,['Error'],['Error']
Availability,"ect*TNamed::Clone(const char* newname = """") const; virtual TObject*CloneObject(const TObject* obj, Bool_t autoadd = kTRUE); virtual voidClose(Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject&) const; static voidDecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); virtual voidDelete(const char* namecycle = """"); virtual voidDeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static voidEncodeNameCycle(char* buffer, const char* name, Short_t cycle); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TKey*FindKey(const char*) const; virtual TKey*FindKeyAny(const char*) const; virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; virtual TObject*FindObjectAny(const char* name) const; virtual TObject*FindObjectAnyFile(const char*) const; virtual TObject*Get(const char* namecycle); virtual Int_tGetBufferSize() const; virtual TDirectory*GetDirectory(const char* namecycle, Bool_t printError = false, const char* funcname = ""GetDirectory""); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TFile*GetFile() const; virtual const char*TObject::GetIconName() const; virtual TKey*GetKey(const char*, Short_t = 9999) const; virtual TList*GetList() const; virtual TList*GetListOfKeys() const; virtual TO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDirectory.html:2104,error,error,2104,root/html528/TDirectory.html,https://root.cern,https://root.cern/root/html528/TDirectory.html,2,['error'],['error']
Availability,"ect*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPave::ConvertNDCtoPad(); virtual voidCopy(TObject& obj) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDeleteEntry()MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTPave::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual TBox*TBox::DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPave::DrawPave(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize = 4, Option_t* option = ""br""); virtual voidTObject::Dump() constMENU ; virtual voidEditEntryAttFill(); virtual voidEditEntryAttLine(); virtual voidEditEntryAttMarker(); virtual voidEditEntryAttText(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPave::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTPave::GetBorderSize() const; Float_tGetColumnSeparation() const; Double_tTPave::GetCornerRadius() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TLegendEntry*GetEntry() const; Float_tGetEntrySeparation() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*GetHeader() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TLegend.html:5632,Error,Error,5632,root/html532/TLegend.html,https://root.cern,https://root.cern/root/html532/TLegend.html,1,['Error'],['Error']
Availability,"ect*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPave::ConvertNDCtoPad(); virtual voidCopy(TObject& obj) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDeleteEntry()MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTPave::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual TBox*TBox::DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPave::DrawPave(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize = 4, Option_t* option = ""br""); virtual voidTObject::Dump() constMENU ; virtual voidEditEntryAttFill(); virtual voidEditEntryAttLine(); virtual voidEditEntryAttMarker(); virtual voidEditEntryAttText(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPave::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Rectangle_tTBox::GetBBox(); virtual TPointTBox::GetBBoxCenter(); Int_tTPave::GetBorderSize() const; Float_tGetColumnSeparation() const; Double_tTPave::GetCornerRadius() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TLegendEntry*GetEntry() const; Float_tGetEntrySeparation() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*GetHeader() const; virtual const char*TObject::GetIconName() cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TLegend.html:6074,Error,Error,6074,root/html534/TLegend.html,https://root.cern,https://root.cern/root/html534/TLegend.html,3,['Error'],['Error']
Availability,"ect*TObjectSet::AddObject(TObject* obj, Bool_t makeOwner = kTRUE); virtual voidTObject::AppendPad(Option_t* option = """"); TDataSet*TDataSet::At(Int_t idx) const; virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TDataSet::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObjectSet::Delete(Option_t* opt = """"); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTObjectSet::DoOwner(Bool_t done = kTRUE); virtual voidDraw(Option_t* depth = ""3"")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TDataSet*TDataSet::Find(const char* path) const; virtual TDataSet*TDataSet::FindByName(const char* name, const char* path = """", Option_t* opt = """") const; virtual TDataSet*TDataSet::FindByPath(const char* path) const; virtual TDataSet*TDataSet::FindByTitle(const char* title, const char* path = """", Option_t* opt = """") const; virtual TObject*TDataSet::FindObject(const char* name) const; virtual TObject*TDataSet::FindObject(const TObject* o) const; virtual TDataSet*TDataSet::First() const; virtual TSeqCollection*TDataSet::GetCollection() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetGlobalRange(const TVolumeView* rootNode, Float_t* min, Float",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVolumeView.html:2976,error,error,2976,root/html528/TVolumeView.html,https://root.cern,https://root.cern/root/html528/TVolumeView.html,10,['error'],['error']
Availability,"ect, TMethod* method); virtual voidAction(TObject* object, TToggle* toggle); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual const char*CreateArgumentTitle(TMethodArg* argument); virtual const char*CreateDialogTitle(TObject* object, TFunction* method); virtual const char*CreatePopupTitle(TObject* object); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; voidExecute(const char* params); voidExecute(TObjArray* params); virtual voidExecute(const char* method, const char* params, Int_t* error = 0); virtual voidExecute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecute(TObject* object, TFunction* method, const char* params); virtual voidExecute(TObject* object, TFunction* method, TObjArray* params); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TBrowser*GetBrowser(); virtual TObject*GetCalledObject(); virtual TContextMenuImp*GetContextMenuImp(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TContextMenu.html:2176,Error,Error,2176,root/html532/TContextMenu.html,https://root.cern,https://root.cern/root/html532/TContextMenu.html,4,['Error'],['Error']
Availability,"ect. ; The user must delete the TMessage object. Returns length of message in bytes (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read) or -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). In those case mess == 0. ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 818 of file TSocket.cxx. ◆ RecvProcessIDs(). Bool_t TSocket::RecvProcessIDs ; (; TMessage * ; mess). protected . Receive a message containing process ids. ; In case the message contains process ids they are imported, the message will be deleted and the method returns kTRUE. ; Definition at line 975 of file TSocket.cxx. ◆ RecvRaw(). Int_t TSocket::RecvRaw ; (; void * ; buffer, . Int_t ; length, . ESendRecvOptions ; opt = kDefault . ). virtual . Receive a raw buffer of specified length bytes. ; Using option kPeek one can peek at incoming data. Returns number of received bytes. Returns -1 in case of error. In case of opt == kOob: -2 means EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock) -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 898 of file TSocket.cxx. ◆ RecvStreamerInfos(). Bool_t TSocket::RecvStreamerInfos ; (; TMessage * ; mess). protected . Receive a message containing streamer infos. ; In case the message contains streamer infos they are imported, the message will be deleted and the method returns kTRUE. ; Definition at line 928 of file TSocket.cxx. ◆ Select(). Int_t TSocket::Select ; (; Int_t ; interest = kRead, . Long_t ; timeout = -1 . ). virtual . Waits for this socket to change status. ; If interest=kRead, the socket will be watched to see if characters become available for reading; if interest=kWrite the socket will be watched to see if a write will not block. The argument 'timeout' specifies a maximum time to wait in mi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSocket.html:33577,error,error,33577,doc/master/classTSocket.html,https://root.cern,https://root.cern/doc/master/classTSocket.html,1,['error'],['error']
Availability,"ect.cxx:213; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::SavePrimitivevirtual void SavePrimitive(std::ostream &out, Option_t *option="""")Save a primitive as a C++ statement(s) on output stream ""out"".Definition TObject.cxx:757; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::SetUniqueIDvirtual void SetUniqueID(UInt_t uid)Set the unique object id.Definition TObject.cxx:797; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TSeqCollectionSequenceable collection abstract base class.Definition TSeqCollection.h:28; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::StripTSubString Strip(EStripType s=kTrailing, char c=' ') constReturn a substring of self stripped at beginning and/or end.Definition TString.cxx:1163; TString::Dataconst char * Data() constDefinition TString.h:376; TString::CapacitySsiz_t Capacity() constDefinition TString.h:364; TString::IsNullBool_t IsNull() constDefinition TString.h:414; TString::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8cxx_source.html:160632,error,error,160632,doc/master/TGeoVolume_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8cxx_source.html,1,['error'],['error']
Availability,"ect::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tTGedFrame::fAvoidSignalflag for executing slots; Pixel_tTGFrame::fBackgroundframe background color; Int_tTGFrame::fBorderWidthframe border width; TGClient*TGObject::fClientConnection to display server; Int_tTGFrame::fDNDStateEDNDFlags; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; UInt_tTGFrame::fEventMaskcurrenty active event mask; TList*TGedFrame::fExtraTabsaddtional tabs in ged editor; TGFrameElement*TGFrame::fFEpointer to frame element; TGedEditor*TGedFrame::fGedEditormanager of this frame; UInt_tTGFrame::fHeightframe height; Handle_tTGObject::fIdX11/Win32 Window identifier; Bool_tTGedFrame::fInitinit flag for setting signals/slots; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TList*TGCompositeFrame::fListcontainer of frame elements; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TEveGridStepper*fMModel object.; Bool_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; TClass*TGedFrame::fModelClassclass corresponding to instantiated GedFrame; Int_tTGCompositeFrame::fMustCleanupcleanup mode (see EFrameCleanup); TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveGridStepperEditor.html:18213,mask,mask,18213,root/html602/TEveGridStepperEditor.html,https://root.cern,https://root.cern/root/html602/TEveGridStepperEditor.html,4,['mask'],['mask']
Availability,"ect::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Atom_tfAcceptedActionaccepted and local actions; Cursor_tfDNDNoDropCursorno drop cursor type; TGDragWindow*fDragWindrag window; Atom_t*fDraggerTypeslists of DND types; Bool_tfDraggingkTRUE while dragging; Bool_tfDropAcceptedkTRUE if drop accepted; TTimer*fDropTimeoutdrop timeout; Atom_tfDropTypedrop type; UInt_tfGrabEventMaskpointer grab event mask; Int_tfHotxhot point coordinates; Int_tfHotyhot point coordinates; Atom_tfLocalActionaccepted and local actions; TGFrame*fLocalSourcelocal source and target; TGFrame*fLocalTargetlocal source and target; TGFrame*fMainpointer on TGMainFrame; Pixmap_tfMaskpixmap used for the drag window; Pixmap_tfPicpixmap used for the drag window; Bool_tfProxyOurskTRUE if root proxy is ours; Window_tfSourcesource and target windows; Bool_tfStatusPendingkTRUE if status is pending; Window_tfTargetsource and target windows; Bool_tfTargetIsDNDAwarekTRUE if target is DND aware; Atom_t*fTypelistlists of DND types; Bool_tfUseVersionkTRUE if DND version is used; Atom_tfVersionnot really an Atom, but a long; static Atom_tfgDNDActionAsk; static Atom_tfgDNDActionCopy; static Atom_tfgDNDActionDescrip; static Atom_tfgDNDActionLink; static Atom_tfgDNDActionList; static Atom_tfgDNDActionMove; static Atom_tfgDNDActionPrivate; static Atom_tfgDNDAware; static Atom_tfgDNDDrop; static Atom_tfgDNDEnter; static Atom_tfgDNDFinished; static Atom_tfgDNDLeave; static Atom_tfgDNDPosition; static Atom_tfgDNDProxy; static Atom_tfgDNDSelection; static Atom_tfgDNDStatus; static Atom_tfgDNDTypeList; static Atom_tfgDNDVersion; static Bool_tfgInit; static Atom_tfgXAWMState; static Atom_tfgXCDNDData. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGDNDManager(TGFrame* toplevel, Atom_t* typelist); TGDNDManager constructor. ~TGDNDManager(); TGDND",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGDNDManager.html:8037,mask,mask,8037,root/html602/TGDNDManager.html,https://root.cern,https://root.cern/root/html602/TGDNDManager.html,4,['mask'],['mask']
Availability,"ect::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TRefCnt::EReferenceFlagTRefCnt::kStaticInit; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. PictureAttributes_tfAttributespicture attributes; Pixmap_tfMaskpicture mask pixmap; TStringfNamename of picture; Pixmap_tfPicpicture pixmap; UInt_tTRefCnt::fRefs(1 less than) number of references; Bool_tfScaledkTRUE if picture is scaled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0); ctor. Important: both pixmaps pxmap and mask must be unique (not shared). void Draw(Handle_t id, GContext_t gc, Int_t x, Int_t y) const; Draw a picture. ~TGPicture(); Delete picture object. const char * HashName(const char* name, Int_t width, Int_t height); Static function returning a unique name used to look up a picture.; The unique name has the form ""name__widthxheight"". void Print(Option_t* option = """") const; Print picture info. TGPicture(const char* name, Bool_t scaled = kFALSE). TGPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0). void Draw(Option_t* = """"); override default of TObject. { MayNotUse(""Draw(Option_t*)""); }. const char * GetName() const; { return fName; }. UInt_t GetWidth() const; { return fAttributes.fWidth; }. UInt_t GetHeight() const; { return fAttributes.fHeight; }. Pixmap_t GetPicture() const; { return fPic; }. Pixmap_t GetMask() const; { return fMask; }. Bool_t IsScaled() const; { return fScaled; }. ULong_t Hash() const; { return fName.Hash(); }. TGSelectedPicture& operator=(const TGPicture& ). » Author: Fons Rademakers 01/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGPicture.html:7253,mask,mask,7253,root/html604/TGPicture.html,https://root.cern,https://root.cern/root/html604/TGPicture.html,2,['mask'],['mask']
Availability,"ect::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TRefCnt::EReferenceFlagTRefCnt::kStaticInit; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. PictureAttributes_tfAttributespicture attributes; Pixmap_tfMaskpicture mask pixmap; TStringfNamename of picture; Pixmap_tfPicpicture pixmap; UInt_tTRefCnt::fRefs(1 less than) number of references; Bool_tfScaledkTRUE if picture is scaled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0); ctor. Important: both pixmaps pxmap and mask must be unique (not shared). void Draw(Handle_t id, GContext_t gc, Int_t x, Int_t y) const; Draw a picture. ~TGPicture(); Delete picture object. const char * HashName(const char* name, Int_t width, Int_t height); Static function returning a unique name used to look up a picture.; The unique name has the form ""name__widthxheight"". void Print(Option_t* option = """") const; Print picture info. TGPicture(const char* name, Bool_t scaled = kFALSE). TGPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0). void Draw(Option_t* = """"); override default of TObject. { MayNotUse(""Draw(Option_t*)""); }. const char * GetName() const; { return fName; }. UInt_t GetWidth() const; { return fAttributes.fWidth; }. UInt_t GetHeight() const; { return fAttributes.fHeight; }. Pixmap_t GetPicture() const; { return fPic; }. Pixmap_t GetMask() const; { return fMask; }. Bool_t IsScaled() const; { return fScaled; }. ULong_t Hash() const; { return fName.Hash(); }. TGSelectedPicture& operator=(const TGPicture& ). » Author: Fons Rademakers 01/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-30 14:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGPicture.html:7253,mask,mask,7253,root/html602/TGPicture.html,https://root.cern,https://root.cern/root/html602/TGPicture.html,2,['mask'],['mask']
Availability,ect::(anonymous)TObject::kZombie. protected:. TMatrixDSparse*TUnfold::fAInput: matrix; TMatrixD*TUnfoldSys::fAoutsideInput: underflow/overflow bins; TMap*TUnfoldSys::fBgrErrScaleInInput: background sources correlated error; TMap*TUnfoldSys::fBgrErrUncorrInSqInput: uncorr error squared from bgr sources; TMap*TUnfoldSys::fBgrInInput: size of background sources; Double_tTUnfold::fBiasScaleInput: scale factor for the bias; const TUnfoldBinning*fConstInputBinsbinning scheme for the input; const TUnfoldBinning*fConstOutputBinsbinning scheme for the output; TUnfold::EConstraintTUnfold::fConstraintInput: type of constraint to use; TMatrixD*TUnfoldSys::fDAinColRelSqInput: normalized column err.sq. (inp.matr.); TMatrixDSparse*TUnfoldSys::fDAinRelSqInput: normalized errors from input matrix; TMap*TUnfoldSys::fDeltaCorrAxResult: syst.shift from fSysIn on fAx; TMap*TUnfoldSys::fDeltaCorrXResult: syst.shift from fSysIn on fX; TMatrixDSparse*TUnfoldSys::fDeltaSysTauResult: systematic shift from tau; Double_tTUnfoldSys::fDtauInput: error on tau; TMatrixDSparse*TUnfoldSys::fEmatUncorrAxResult: syst.error from fDA2 on fAx; TMatrixDSparse*TUnfoldSys::fEmatUncorrXResult: syst.error from fDA2 on fX; TArrayITUnfold::fHistToXInput: histogram bins -> matrix indices; TMatrixDSparse*TUnfold::fLInput: regularisation conditions; TUnfoldBinning*fOwnedInputBinsinput binning scheme if owner; TUnfoldBinning*fOwnedOutputBinsoutput binning scheme if owner; TUnfold::ERegModeTUnfold::fRegModeInput: type of regularisation; TUnfoldBinning*fRegularisationConditionsbinning scheme for the regularisation conditions; TArrayDTUnfold::fSumOverYInput: sum of all columns; TMap*TUnfoldSys::fSysInInput: correlated errors; Double_tTUnfold::fTauSquaredInput: regularisation parameter; TMatrixDSparse*TUnfold::fVyyInput: covariance matrix for y; TMatrixDSparse*TUnfoldSys::fVyyDataInput: error on fY prior to bgr subtraction; TMatrixD*TUnfold::fX0Input: x0; TArrayITUnfold::fXToHistInput: matrix indices -> histogram bins;,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUnfoldDensity.html:22491,error,error,22491,root/html602/TUnfoldDensity.html,https://root.cern,https://root.cern/root/html602/TUnfoldDensity.html,4,['error'],['error']
Availability,"ect::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); Double_tBranchingRatio() const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; TGeoElementRN*Daughter() const; UInt_tDecay() const; static voidDecayName(UInt_t decay, TString& name); virtual voidDecayShift(Int_t& dA, Int_t& dZ, Int_t& dI) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tDeltaIso() const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Int_tGetIndex() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoDecayChannel.html:1766,Error,Error,1766,root/html532/TGeoDecayChannel.html,https://root.cern,https://root.cern/root/html532/TGeoDecayChannel.html,4,['Error'],['Error']
Availability,"ect::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); TList*Browse(); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetClassName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tGetFileStat(FileStat_t* sbuf); virtual const char*TObject::GetIconName() const; const char*GetKeyClassName() const; const char*GetKeyObjectName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRemoteObject.html:1892,error,error,1892,root/html528/TRemoteObject.html,https://root.cern,https://root.cern/root/html528/TRemoteObject.html,10,['error'],['error']
Availability,"ect::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(const Option_t* options = 0); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TObject*GetPlottedObject() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__LikelihoodIntervalPlot.html:1580,Error,Error,1580,root/html602/RooStats__LikelihoodIntervalPlot.html,https://root.cern,https://root.cern/root/html602/RooStats__LikelihoodIntervalPlot.html,2,['Error'],['Error']
Availability,"ect::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidROOT::v5::TFormula::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Int_tROOT::v5::TFormula::Compile(const char* expression = """"); virtual voidROOT::v5::TFormula::Copy(TObject& formula) const; virtual char*ROOT::v5::TFormula::DefinedString(Int_t code); virtual Double_tROOT::v5::TFormula::DefinedValue(Int_t code); virtual Int_tDefinedVariable(TString& variable, Int_t& action); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tROOT::v5::TFormula::Eval(Double_t x, Double_t y = 0, Double_t z = 0, Double_t t = 0) const; virtual TClass*EvalClass() const; virtual Double_tEvalInstance(Int_t i = 0, const char*[] stringStack = 0); virtual Long64_tEvalInstance64(Int_t i = 0, const char*[] stringStack = 0); doubleEvalInstance<double>(Int_t i = 0, const char*[] stringStack = 0); long doubleEvalInstance<long double>(Int_t i = 0, const char*[] stringStack = 0); Long64_tEvalInstance<long long>(Int_t i = 0, const char*[] stringStack = 0); virtual LongDouble_tEvalInstanceLD(Int_t i = 0, const char*[] stringStack = 0); virtual void*EvalObject(Int_t i = 0); virtual Double_tROOT::v5::TFormula::EvalPar(const Double_t* x, const Double_t* params = 0); virtual Double_tROOT::v5::TFormula::EvalParOld(const Double_t* x, const Double_t* params = 0); virtual const char*EvalStringInstance(Int_t i = 0); virtual voidTObject::Execute(const char* method, const char* params, I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeFormula.html:2917,Error,Error,2917,root/html604/TTreeFormula.html,https://root.cern,https://root.cern/root/html604/TTreeFormula.html,1,['Error'],['Error']
Availability,"ect::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; static Int_tConvertISAtoPDG(Int_t isaNumber); virtual voidTNamed::Copy(TObject& named) const; static voidDefinePDG(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Double_tGetCharge() const; virtual Double_tGetDecayWidth() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tGetEnergyCut() const; virtual Double_tGetEnergyLimit() const; virtual Double_tGetGranularity() const; virtual const char*TObject::GetIconName() const; virtual Double_tGetMass() const; virtual Int_tGetMCNumber() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; static TAttParticle*GetParticle(const char* name); static TAttParticle*GetParticle(Int_t mcnu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAttParticle.html:1794,error,error,1794,root/html526/TAttParticle.html,https://root.cern,https://root.cern/root/html526/TAttParticle.html,11,['error'],['error']
Availability,"ect::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; RooAbsNumGenerator*createSampler(RooAbsReal& func, const RooArgSet& genVars, const RooArgSet& condVars, const RooNumGenConfig& config, Bool_t verbose = kFALSE, RooAbsReal* maxFuncVal = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const RooAbsNumGenerator*getProtoSampler(const char* name); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumGenFactory.html:1972,error,error,1972,root/html526/RooNumGenFactory.html,https://root.cern,https://root.cern/root/html526/RooNumGenFactory.html,11,['error'],['error']
Availability,"ect::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidClearInput(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; TDSetElement*Current() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* opt); virtual Long64_tDraw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0)MENU ; virtual Long64_tDraw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; Bool_tElementsValid(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); Int_tExportFileList(const char* filepath, Option_t* opt = """"); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetDirectory() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); static Long64_tGetEntries(Bool_t isTree, const char* filename, const char* path, TString& objname); TObject*GetEntryList() const; virtual const char*TObject::GetIconName() const; TList*GetListOfElements() const; virtual const char*TNamed::GetName() const; Int_tGetNumOfFiles(); virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TDSet.html:2897,Error,Error,2897,root/html532/TDSet.html,https://root.cern,https://root.cern/root/html532/TDSet.html,4,['Error'],['Error']
Availability,"ect::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tTSlave::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TSlave::GetArchCompiler() const; Long64_tTSlave::GetBytesRead() const; Float_tTSlave::GetCpuTime() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*TSlave::GetGroup() const; virtual const char*TObject::GetIconName() const; const char*TSlave::GetImage() const; TFileHandler*TSlave::GetInputHandler() const; const char*TSlave::GetMsd() const; virtual const char*TSlave::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*TSlave::GetOrdinal() const; Int_tTSlave::GetParallel() const; Int_tTSlave::GetPerfIdx() const; Int_tTSlave::GetPort(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSlaveLite.html:1693,error,error,1693,root/html528/TSlaveLite.html,https://root.cern,https://root.cern/root/html528/TSlaveLite.html,20,['error'],['error']
Availability,"ect::ClassName() const; virtual voidClear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual doubleTMatrixTBase<double>::ColNorm() const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDeterminant() const; virtual voidDeterminant(Double_t& d1, Double_t& d2) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTMatrixTBase<double>::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual doubleTMatrixTBase<double>::E2Norm() const; const TMatrixT<double>EigenVectors(TVectorT<double>& eigenValues) const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTMatrixTBase<double>::ExtractRow(Int_t row, Int_t col, double* v, Int_t n = -1) const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const Int_t*GetColIndexArray() const; virtual Int_t*GetColIndexArray(); Int_tTMatrixTBase<double>::GetColLwb() const; Int_tTMatrixTBase<double>::GetColUpb() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual voidTMatrixTBase<double>::GetMatrix2Array(double* data, Option_t* option = """") const; virtual const double*GetMatrixArray() const; virtual double*GetMatrixArray(); virtual const char*TObject::GetName() const; Int_tTMatrixTBase<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMatrixTSym_double_.html:2905,error,error,2905,root/html528/TMatrixTSym_double_.html,https://root.cern,https://root.cern/root/html528/TMatrixTSym_double_.html,20,['error'],['error']
Availability,"ect::ClassName() const; virtual voidROOT::v5::TFormula::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Int_tROOT::v5::TFormula::Compile(const char* expression = """"); virtual voidROOT::v5::TFormula::Copy(TObject& formula) const; virtual char*ROOT::v5::TFormula::DefinedString(Int_t code); virtual Double_tROOT::v5::TFormula::DefinedValue(Int_t code); virtual Int_tROOT::v5::TFormula::DefinedVariable(TString& variable, Int_t& action); virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tROOT::v5::TFormula::Eval(Double_t x, Double_t y = 0, Double_t z = 0, Double_t t = 0) const; virtual Double_tROOT::v5::TFormula::EvalPar(const Double_t* x, const Double_t* params = 0); virtual Double_tROOT::v5::TFormula::EvalParOld(const Double_t* x, const Double_t* params = 0); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TStringROOT::v5::TFormula::GetExpFormula(Option_t* option = """") const; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__v5__TF1Data.html:1816,Error,Error,1816,root/html604/ROOT__v5__TF1Data.html,https://root.cern,https://root.cern/root/html604/ROOT__v5__TF1Data.html,1,['Error'],['Error']
Availability,"ect::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPolyLine::Copy(TObject& polyline) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTPolyLine::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPolyLine::DrawPolyLine(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetAmplitude() const; Bool_tGetCurly() const; static Double_tGetDefaultAmplitude(); static Bool_tGetDefaultIsCurly(); static Double_tGetDefaultWaveLength(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetEndX() const; Double_tGetEndY() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Int_tTPolyLine::GetLastPoint() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; Int_tTPolyLine::GetN() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCurlyLine.html:2127,error,error,2127,root/html526/TCurlyLine.html,https://root.cern,https://root.cern/root/html526/TCurlyLine.html,5,['error'],['error']
Availability,"ect::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPolyLine::Copy(TObject& polyline) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTPolyLine::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPolyLine::DrawPolyLine(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetAmplitude() const; virtual Rectangle_tGetBBox(); virtual TPointGetBBoxCenter(); Bool_tGetCurly() const; static Double_tGetDefaultAmplitude(); static Bool_tGetDefaultIsCurly(); static Double_tGetDefaultWaveLength(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetEndX() const; Double_tGetEndY() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Int_tTPolyLine::GetLastPoint() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; Int_tTPolyLine::GetN() const; virtual cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCurlyLine.html:2146,error,error,2146,root/html534/TCurlyLine.html,https://root.cern,https://root.cern/root/html534/TCurlyLine.html,6,['error'],['error']
Availability,"ect::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPolyLine::Copy(TObject& polyline) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTPolyLine::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPolyLine::DrawPolyLine(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tTCurlyLine::GetAmplitude() const; Bool_tTCurlyLine::GetCurly() const; static Double_tGetDefaultAmplitude(); static Bool_tGetDefaultIsCurly(); static Double_tGetDefaultWaveLength(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTCurlyLine::GetEndX() const; Double_tTCurlyLine::GetEndY() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Int_tTPolyLine::GetLastPoint() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; Int_tTPolyLine::GetN() const; virtual const char*TObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCurlyArc.html:2138,error,error,2138,root/html526/TCurlyArc.html,https://root.cern,https://root.cern/root/html526/TCurlyArc.html,5,['error'],['error']
Availability,"ect::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPolyLine::Copy(TObject& polyline) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTPolyLine::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPolyLine::DrawPolyLine(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tTCurlyLine::GetAmplitude() const; virtual Rectangle_tGetBBox(); virtual TPointGetBBoxCenter(); Bool_tTCurlyLine::GetCurly() const; static Double_tGetDefaultAmplitude(); static Bool_tGetDefaultIsCurly(); static Double_tGetDefaultWaveLength(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTCurlyLine::GetEndX() const; Double_tTCurlyLine::GetEndY() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Int_tTPolyLine::GetLastPoint() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCurlyArc.html:2138,error,error,2138,root/html534/TCurlyArc.html,https://root.cern,https://root.cern/root/html534/TCurlyArc.html,6,['error'],['error']
Availability,"ect::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; Int_tGetBoostNum(); const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodBoost.html:2291,Error,Error,2291,root/html602/TMVA__MethodBoost.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodBoost.html,2,['Error'],['Error']
Availability,"ect::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodKNN.html:2001,Error,Error,2001,root/html602/TMVA__MethodKNN.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodKNN.html,8,['Error'],['Error']
Availability,"ect::Delete(Option_t* option = """")MENU ; virtual voidDirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tDivide(const TH1* h1); virtual Bool_tDivide(TF1* f1, Double_t c1 = 1); virtual Bool_tDivide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """") const; virtual TH1*DrawNormalized(Option_t* option = """", Double_t norm = 1) const; virtual voidDrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidEval(TF1* f1, Option_t* option = """"); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TH1*FFT(TH1* h_output, Option_t* option); virtual Int_tFill(Double_t x); virtual Int_tFill(Double_t x, Double_t w); virtual Int_tFill(const char* name, Double_t w); virtual voidTNamed::FillBuffer(char*& buffer); virtual voidFillN(Int_t ntimes, const Double_t* x, const Double_t* w, Int_t stride = 1); virtual voidFillN(Int_t, const Double_t*, const Double_t*, const Double_t*, Int_t); virtual voidFillRandom(const char* fname, Int_t ntimes = 5000); virtual voidFillRandom(TH1* h, Int_t ntimes = 5000); virtual Int_tFindBin(Double_t x, Double_t y = 0, Double_t z = 0); virtual Int_tFindFirstBinAbove(Double_t threshold = 0, Int_t axis = 1) const; virtual Int_tFindFixBin(Double_t x, Double_t y = 0, Double_t z = 0) const; virtual Int_tFindLastBinAbove(Double_t thresh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1.html:19529,error,error,19529,root/html534/TH1.html,https://root.cern,https://root.cern/root/html534/TH1.html,2,['error'],['error']
Availability,"ect::Destroyed()SIGNAL ; voidTProof::Detach(Option_t* opt = """"); voidTProof::DisableGoAsyn(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObject::Disconnect(TQObject* sender, const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObject::Disconnect(const char* class_name, const char* signal, void* receiver = 0, const char* slot = 0); virtual voidTQObject::Disconnected(const char*); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Int_tTProof::DownloadPackage(const char* par, const char* dstdir = 0); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual Long64_tDrawSelect(TDSet* dset, const char* varexp, const char* selection = """", Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); virtual voidTObject::Dump() constMENU ; virtual Int_tTProof::Echo(const TObject* obj); virtual Int_tTProof::Echo(const char* str); voidTQObject::Emit(const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofLite.html:4674,Echo,Echo,4674,root/html534/TProofLite.html,https://root.cern,https://root.cern/root/html534/TProofLite.html,1,['Echo'],['Echo']
Availability,"ect::Destroyed()SIGNAL ; voidTProof::Detach(Option_t* opt = """"); voidTProof::DisableGoAsyn(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObject::Disconnect(TQObject* sender, const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObject::Disconnect(const char* class_name, const char* signal, void* receiver = 0, const char* slot = 0); virtual voidTQObject::Disconnected(const char*); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Int_tTProof::DownloadPackage(const char* par, const char* dstdir = 0); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual Long64_tDrawSelect(TDSet* dset, const char* varexp, const char* selection = """", Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); virtual voidTObject::Dump() constMENU ; virtual Int_tTProof::Echo(const TObject* obj); virtual Int_tTProof::Echo(const char* str); voidTQObject::Emit(const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofLite.html:4498,Echo,Echo,4498,root/html602/TProofLite.html,https://root.cern,https://root.cern/root/html602/TProofLite.html,2,['Echo'],['Echo']
Availability,"ect::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTCanvas::EnterLeave(TPad* prevSelPad, TObject* prevSelObj); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTPad::EventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPad::ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTCanvas::FeedbackMode(Bool_t set); virtual TObject*TPad::FindObject(const char* name) const; virtual TObject*TPad::FindObject(const TObject* obj) const; voidTCanvas::Flush(); voidTCanvas::ForceUpdate(); virtual Double_tTPad::GetAbsHNDC() const; virtual Double_tTPad::GetAbsWNDC() const; virtual Double_tTPad::GetAbsXlowNDC() const; virtual Double_tTPad::GetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tTPad::GetAspectRatio() const; Float_tTAttPad::GetAstat() const; Bool_tTCanvas::GetAutoExec() const; TButton*GetBackward() const; virtual Rectangle_tTPad::GetBBox(); virtual TPointTPad::GetBBoxCenter(); virtual Short_tTPad::GetBorderMode() const; virtual Short_tTPad::GetBorderSize() const; Float_tTAttPad::GetBottomMargin() const; virtual TCanvas*TPad::GetCanvas() const; virtual Int_tTCanvas::GetCanvasI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TInspectCanvas.html:6259,error,error,6259,root/html534/TInspectCanvas.html,https://root.cern,https://root.cern/root/html534/TInspectCanvas.html,2,['error'],['error']
Availability,"ect::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTCanvas::EnterLeave(TPad* prevSelPad, TObject* prevSelObj); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTPad::EventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPad::ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTCanvas::FeedbackMode(Bool_t set); virtual TObject*TPad::FindObject(const char* name) const; virtual TObject*TPad::FindObject(const TObject* obj) const; voidTCanvas::Flush(); voidTCanvas::ForceUpdate(); virtual Double_tTPad::GetAbsHNDC() const; virtual Double_tTPad::GetAbsWNDC() const; virtual Double_tTPad::GetAbsXlowNDC() const; virtual Double_tTPad::GetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tTPad::GetAspectRatio() const; Float_tTAttPad::GetAstat() const; Bool_tTCanvas::GetAutoExec() const; TButton*GetBackward() const; virtual Short_tTPad::GetBorderMode() const; virtual Short_tTPad::GetBorderSize() const; Float_tTAttPad::GetBottomMargin() const; virtual TCanvas*TPad::GetCanvas() const; virtual Int_tTCanvas::GetCanvasID() const; virtual TCanvasImp*TCanvas::GetCanvasImp() const; TVirtualPadP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TInspectCanvas.html:6117,error,error,6117,root/html528/TInspectCanvas.html,https://root.cern,https://root.cern/root/html528/TInspectCanvas.html,4,['error'],['error']
Availability,"ect::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTCanvas::EnterLeave(TPad* prevSelPad, TObject* prevSelObj); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTPad::EventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPad::ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTCanvas::FeedbackMode(Bool_t set); virtual TObject*TPad::FindObject(const char* name) const; virtual TObject*TPad::FindObject(const TObject* obj) const; voidTCanvas::Flush(); voidTCanvas::ForceUpdate(); virtual Double_tTPad::GetAbsHNDC() const; virtual Double_tTPad::GetAbsWNDC() const; virtual Double_tTPad::GetAbsXlowNDC() const; virtual Double_tTPad::GetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tTPad::GetAspectRatio() const; Float_tTAttPad::GetAstat() const; Bool_tTCanvas::GetAutoExec() const; virtual Rectangle_tTPad::GetBBox(); virtual TPointTPad::GetBBoxCenter(); virtual Short_tTPad::GetBorderMode() const; virtual Short_tTPad::GetBorderSize() const; Float_tTAttPad::GetBottomMargin() const; virtual TCanvas*TPad::GetCanvas() const; virtual Int_tTCanvas::GetCanvasID() const; virtual TCanvasImp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDialogCanvas.html:6757,error,error,6757,root/html534/TDialogCanvas.html,https://root.cern,https://root.cern/root/html534/TDialogCanvas.html,2,['error'],['error']
Availability,"ect::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTCanvas::EnterLeave(TPad* prevSelPad, TObject* prevSelObj); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTPad::EventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPad::ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTCanvas::FeedbackMode(Bool_t set); virtual TObject*TPad::FindObject(const char* name) const; virtual TObject*TPad::FindObject(const TObject* obj) const; voidTCanvas::Flush(); voidTCanvas::ForceUpdate(); virtual Double_tTPad::GetAbsHNDC() const; virtual Double_tTPad::GetAbsWNDC() const; virtual Double_tTPad::GetAbsXlowNDC() const; virtual Double_tTPad::GetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tTPad::GetAspectRatio() const; Float_tTAttPad::GetAstat() const; Bool_tTCanvas::GetAutoExec() const; virtual Short_tTPad::GetBorderMode() const; virtual Short_tTPad::GetBorderSize() const; Float_tTAttPad::GetBottomMargin() const; virtual TCanvas*TPad::GetCanvas() const; virtual Int_tTCanvas::GetCanvasID() const; virtual TCanvasImp*TCanvas::GetCanvasImp() const; TVirtualPadPainter*TCanvas::GetCanvasPain",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDialogCanvas.html:6645,error,error,6645,root/html528/TDialogCanvas.html,https://root.cern,https://root.cern/root/html528/TDialogCanvas.html,4,['error'],['error']
Availability,"ect::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); voidEnableTimer(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TSessionDescription*GetActDesc() const; virtual Pixel_tTGFrame::GetBackground() const; const TGPicture*GetBasePict() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGPopupMenu*GetCascadeMenu() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; TGHProgressBar*GetConnectProg() const; TContextMenu*GetContextMenu() const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSessionViewer.html:4500,error,error,4500,root/html602/TSessionViewer.html,https://root.cern,https://root.cern/root/html602/TSessionViewer.html,4,['error'],['error']
Availability,"ect::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidEncodeText(TGString* str, const char* z); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; TGHtmlElement*FindEndNest(TGHtmlElement* sp, int en, TGHtmlElement* lp); virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual intFormAction(TGHtmlForm*, int); virtual intFormCreate(TGHtmlForm*, const char*, const char*); virtual Pixel_tTGFrame::GetBackground() const; const char*GetBaseUri() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGViewFrame*TGView::GetCanvas() const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGHtml.html:4678,error,error,4678,root/html528/TGHtml.html,https://root.cern,https://root.cern/root/html528/TGHtml.html,6,['error'],['error']
Availability,"ect::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); voidEnable(Bool_t on = kTRUE)TOGGLE GETTER ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; Int_tTGTextButton::GetBottomMargin() const; TGClient*TGObject::GetClient() const; Pixel_tGetColor() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); static FontStruct_tTGCheckButton::GetDefaultFontStruct(); static Pixel_tTGFrame::GetDefaultFrameBackground(); static const TGGC&TGCheckButton::GetDefaultGC(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionGetDefaultSize() const; virtual UInt_tTGFrame::GetD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGColorSelect.html:4967,error,error,4967,root/html602/TGColorSelect.html,https://root.cern,https://root.cern/root/html602/TGColorSelect.html,4,['error'],['error']
Availability,"ect::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidEnd(Bool_t mark = kFALSE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; ETextJustificationGetAlignment() const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGTextBuffer*GetBuffer() const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); Int_tGetCursorPosition() const; static FontStruct_tGetDefaultFontStruct(); static Pixel_tTGFrame::GetDefaultFrameBack",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGTextEntry.html:8503,Error,Error,8503,root/html532/TGTextEntry.html,https://root.cern,https://root.cern/root/html532/TGTextEntry.html,2,['Error'],['Error']
Availability,"ect::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidEraseStatusBar(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual TGFrame*ExecuteAction(); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; TGMdiFrame*FindEditableMdiFrame(const TGWindow* win); virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGuiBldAction*TGuiBuilder::GetAction() const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static ULong_tGetBgnd(); static TGGC*GetBgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRootGuiBuilder.html:7108,Error,Error,7108,root/html602/TRootGuiBuilder.html,https://root.cern,https://root.cern/root/html602/TRootGuiBuilder.html,2,['Error'],['Error']
Availability,"ect::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidEnableTimeout(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; static voidErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; static voidFilterLocalroot(TString& path, const char* url = ""root://dum/""); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFlushLogFile(); TObject*Get(const char* namecycle); Int_tGetActSessions() const; virtual TApplicationImp*TApplication::GetApplicationImp(); static TList*TApplication::GetApplications(); TApplication*TApplication::GetAppRemote() const; TProofLockPath*GetCacheLock(); const char*GetConfDir() const; const char*GetConfFile() const; Float_tGetCpuTime() const; const char*GetDataDir() const; const char*GetDataDirOpts() const; static TMap*GetDataSetNodeMap(TFileCollection* fc, TString& emsg); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Float_tGetE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofServ.html:4407,error,error,4407,root/html602/TProofServ.html,https://root.cern,https://root.cern/root/html602/TProofServ.html,4,['error'],['error']
Availability,"ect::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TObjArrayfBackgroundpacked input background; TObjArrayfCandidatespacked input candidates (data); TObjArrayfDummyIdsarray of dummy object (used for bookeeping); TObjArrayfDummyTAarray of dummy object (used for bookeeping); TObjArrayfErrorOnBackgroundpacked error sources for background; TObjArrayfErrorOnSignalpacked error sources for signal; TObjArrayfIdspacked IDs for the different error sources; TObjArrayfSignalpacked input signal. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLimitDataSource(); Default constructor. TLimitDataSource(TH1* s, TH1* b, TH1* d); Another constructor, directly adds one channel; with signal, background and data given as input. TLimitDataSource(TH1* s, TH1* b, TH1* d, TVectorD* es, TVectorD* eb, TObjArray* names); Another constructor, directly adds one channel; with signal, background and data given as input. void AddChannel(TH1* , TH1* , TH1* ); Adds a channel with signal, background and data given as input. void AddChannel(TH1* , TH1* , TH1* , TVectorD* , TVectorD* , TObjArray* ); Adds a channel with signal, background and data given as input.; In addition, error sources are defined.; TH1 are here used for convenience: each bi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TLimitDataSource.html:6447,error,error,6447,root/html602/TLimitDataSource.html,https://root.cern,https://root.cern/root/html602/TLimitDataSource.html,12,['error'],['error']
Availability,"ect::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidRooAbsOptTestStatistic::seal(const char* notice = """"); const char*RooAbsOptTestStatistic::sealNotice() const; TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); virtual Bool_tRooAbsTestStatistic::setData(RooAbsData& data, Bool_t cloneData = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); static voidRooAbsReal::setHideOffset(Bool_t flag); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidRooAbsArg::setLocalNoDirtyInhibit(Bool_t flag) const; virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooChi2Var.html:26469,Error,ErrorLoggingMode,26469,root/html534/RooChi2Var.html,https://root.cern,https://root.cern/root/html534/RooChi2Var.html,12,['Error'],['ErrorLoggingMode']
Availability,"ect::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidTGeoBBox::SetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetFromFaceSet(TGLFaceSet* fs); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGeoBBox::SetPoints(Double_t* points) const; virtual voidTGeoBBox::SetPoints(Float_t* points) const; voidTGeoShape::SetRuntime(Bool_t flag = kTRUE); virtual voidTGeoBBox::SetSegsAndPols(TBuffer3D& buffer) const; voidTGeoShape::SetShapeBit(UInt_t f); voidTGeoShape::SetShapeBit(UInt_t f, Bool_t set); virtual voidTNamed::SetTitle(const char* title = """")MENU ; static voidTGeoShape::SetTransform(TGeoMatrix* matrix); virtual voidTObject::SetUniqueID(UInt_t uid); Int_tTGeoShape::ShapeDistancetoPrimitive(Int_t numpoints, Int_t px, Int_t py) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidTGeoBBox::Sizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTGeoShape::TestShapeBit(UInt_t f) const; Int_tTGeoShape::TestShapeBits(UInt_t f) const; TEveGeoPolyShape(); static Double_tTGeoShape::Tolerance(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveGeoPolyShape.html:10885,Toler,Tolerance,10885,root/html602/TEveGeoPolyShape.html,https://root.cern,https://root.cern/root/html602/TEveGeoPolyShape.html,2,['Toler'],['Tolerance']
Availability,"ect::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); voidTMacro::SaveSource(FILE* fp). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TList*TMacro::fLinescollection of lines; TStringTNamed::fNameobject identifier; TStringTMacro::fParamsdefault string of macro parameters; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveMacro(); Default constructor. TEveMacro(const TEveMacro& ); Copy constructor. TEveMacro(const char* name); Constructor with file name. Long_t Exec(const char* params = ""0"", Int_t* error = 0); Execute the macro. void ResetRoot(); Call gROOT->Reset() via interpreter. virtual ~TEveMacro(); {}. » Last changed: root/eve:$Id$ » Last generated: 2015-06-02 15:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEveMacro.html:6896,error,error,6896,root/html604/TEveMacro.html,https://root.cern,https://root.cern/root/html604/TEveMacro.html,2,['error'],['error']
Availability,"ect::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); voidTMacro::SaveSource(FILE* fp). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TList*TMacro::fLinescollection of lines; TStringTNamed::fNameobject identifier; TStringTMacro::fParamsdefault string of macro parameters; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveMacro(); Default constructor. TEveMacro(const TEveMacro& ); Copy constructor. TEveMacro(const char* name); Constructor with file name. Long_t Exec(const char* params = ""0"", Int_t* error = 0); Execute the macro. void ResetRoot(); Call gROOT->Reset() via interpreter. virtual ~TEveMacro(); {}. » Last changed: root/eve:$Id$ » Last generated: 2015-06-30 14:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveMacro.html:6896,error,error,6896,root/html602/TEveMacro.html,https://root.cern,https://root.cern/root/html602/TEveMacro.html,2,['error'],['error']
Availability,"ect::fgAllSignalsBlockedflag used for suppression of all signals; static TSemaphore*TProof::fgSemaphoresemaphore to control no of parallel startup threads; static TProof::ESlavesTProof::kActive; static TProof::ESlavesTProof::kAll; static TProof::ESlavesTProof::kAllUnique; static TProof::ESlavesTProof::kUnique. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofSuperMaster(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Start super master PROOF session. Bool_t StartSlaves(Bool_t ); Start up PROOF submasters. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process a data set (TDSet) using the specified selector (.C) file.; Entry- or event-lists should be set in the data set object using; TDSet::SetEntryList.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void ValidateDSet(TDSet* dset); Validate a TDSet. TVirtualProofPlayer * MakePlayer(const char* player = 0, TSocket* s = 0); Construct a TProofPlayer object. The player string specifies which; player should be created: remote, slave, sm (supermaster) or base.; Default is sm. Socket is needed in case a slave player is created. TProofSuperMaster(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); { }. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); { return TProof::Process(fc, sel, o, nent, fst); }. Long64_t Process(const char* dsname, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0, TObject* enl = 0); { return TProof::Process(dsname, sel, o, nent, fst, enl); }. Long64_t Process(const char* sel, Long64_t nent, Option_t* o = """"); Proc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofSuperMaster.html:28250,error,error,28250,root/html602/TProofSuperMaster.html,https://root.cern,https://root.cern/root/html602/TProofSuperMaster.html,4,['error'],['error']
Availability,"ect::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TGraph::(anonymous)TGraph::kNotEditable; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TGraphErrors::fEX[fNpoints] array of X errors; Double_t*TGraphErrors::fEY[fNpoints] array of Y errors; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TList*TGraph::fFunctionsPointer to list of functions (fits and user); TH1F*TGraph::fHistogramPointer to histogram used for drawing axis; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph::fMaxSize!Current dimension of arrays fX and fY; Double_tTGraph::fMaximumMaximum value for plotting along y; Double_tTGraph::fMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tTGraph::fNpointsNumber of points <= fMaxSize; TGraphPolargram*fPolargramThe polar coordinates system; TStringTNamed::fTitleobject title; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*fXpol[fNpoints] points in polar coordinates; Double_t*TGraph::fY[fNpoints] array of Y points; Double_t*fYpol[fNpoints] points in polar coordinates. private:. Bool_tfOptionAxisForce drawing of new coord system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphPolar(); TGraphPolar default constructor. TGraphPolar(Int_t n, const Double_t* theta = 0, const Double_t* r = 0, const Double_t* etheta = 0, const Double_t* er = 0); TGraphPolar constructor. n : number of points.; theta : angular values.; r : radial values.; e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraphPolar.html:14716,error,errors,14716,root/html602/TGraphPolar.html,https://root.cern,https://root.cern/root/html602/TGraphPolar.html,8,['error'],['errors']
Availability,"ect; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,double,double,double>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCFunction3Ref<VO,VI1,VI2,VI3> Streamer(TBuffer& ); Custom streamer for function pointer reference object. When writing,; the function pointer is substituted by its registerd name. When function; is unregistered name 'UNKNOWN' is written and a warning is issues. When; reading back, the embedded name is converted back to a function pointer; using the mapping service. When name UNKNOWN is encountered a warning is; issues and a dummy null function is substituted. When the registered function; name can not be mapped to a function pointer an ERROR is issued and a pointer; to the dummy null function is substituted. TObject* clone(const char* newname) const; { return new RooCFunction3Binding(*this,newname); }. void printArgs(ostream& os) const; Print object arguments and name/address of function pointer. Double_t evaluate() const; Return value of embedded function using value of referenced variable x. » Last changed: Tue Jun 2 13:07:40 2015 » Last generated: 2015-06-02 13:07; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction3Binding_double_double_double_double_.html:38623,ERROR,ERROR,38623,root/html602/RooCFunction3Binding_double_double_double_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction3Binding_double_double_double_double_.html,1,['ERROR'],['ERROR']
Availability,"ect; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,double,double,double>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCFunction3Ref<VO,VI1,VI2,VI3> Streamer(TBuffer& ); Custom streamer for function pointer reference object. When writing,; the function pointer is substituted by its registerd name. When function; is unregistered name 'UNKNOWN' is written and a warning is issues. When; reading back, the embedded name is converted back to a function pointer; using the mapping service. When name UNKNOWN is encountered a warning is; issues and a dummy null function is substituted. When the registered function; name can not be mapped to a function pointer an ERROR is issued and a pointer; to the dummy null function is substituted. TObject* clone(const char* newname) const; { return new RooCFunction3Binding(*this,newname); }. void printArgs(ostream& os) const; Print object arguments and name/address of function pointer. Double_t evaluate() const; Return value of embedded function using value of referenced variable x. » Last changed: Tue Jun 2 15:28:53 2015 » Last generated: 2015-06-02 15:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooCFunction3Binding_double_double_double_double_.html:38623,ERROR,ERROR,38623,root/html604/RooCFunction3Binding_double_double_double_double_.html,https://root.cern,https://root.cern/root/html604/RooCFunction3Binding_double_double_double_double_.html,1,['ERROR'],['ERROR']
Availability,"ect; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Protected Attributes; Window_t fInput;  Input Window. ;  ; Pixmap_t fMask;  Pixmaps used as Window shape. ;  ; UInt_t fPh;  Hot point coordinates (x and y) ;  ; Pixmap_t fPic;  ; UInt_t fPw;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Static Protected Attributes; static Cursor_t fgDefaultCursor = kNone;  ;  Static Protected Attributes inherited from TGFrame; static const TGGC * fgBckgndGC = nullptr;  ; static const TGGC * fgBlackGC = nullptr;  ; static Pixel_t fgBlackPixel = 0;  ; static Window_t fg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDragWindow.html:23337,mask,mask,23337,doc/master/classTGDragWindow.html,https://root.cern,https://root.cern/doc/master/classTGDragWindow.html,1,['mask'],['mask']
Availability,"ectHandling -- RooWorkspace::import(w) importing RooRealVar::mean; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::sigma1; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::sig1frac; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooGaussian::sig2; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::sigma2; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#0] ERROR:Minimization -- RooMinimizer::calculateHessErrors() Error when calculating Hessian; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; ; RooWorkspace(w) w contents; ; variables; ---------; (a0,a1,bkgfrac,mean,sig1frac,sigma1,sigma2,x); ; p.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf510__wsnamedsets_8C.html:10732,error,error,10732,doc/master/rf510__wsnamedsets_8C.html,https://root.cern,https://root.cern/doc/master/rf510__wsnamedsets_8C.html,4,['error'],['error']
Availability,"ectRefSpy(TObject*& obj, Bool_t fixMustCleanupBit = kTRUE); virtual~TObjectRefSpy(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; TObject*GetObject() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TObjectRefSpy.html:1666,error,error,1666,root/html528/TObjectRefSpy.html,https://root.cern,https://root.cern/root/html528/TObjectRefSpy.html,6,['error'],['error']
Availability,ected . Frame that contains the Frame Fill widgets. ; Definition at line 56 of file TH2Editor.h. ◆ f6. TGCompositeFrame* TH2Editor::f6. protected . Frame that contains the 2D CheckBox DrawOptions. ; Definition at line 52 of file TH2Editor.h. ◆ f9. TGCompositeFrame* TH2Editor::f9. protected . Frame that contains the 3D CheckBox DrawOptions. ; Definition at line 53 of file TH2Editor.h. ◆ fAddArr. TGCheckButton* TH2Editor::fAddArr. protected . CheckBox connected to Arr-Option. ; Definition at line 60 of file TH2Editor.h. ◆ fAddBB. TGCheckButton* TH2Editor::fAddBB. protected . Draw back box (or not) ; Definition at line 65 of file TH2Editor.h. ◆ fAddBox. TGCheckButton* TH2Editor::fAddBox. protected . CheckBox connected to Box-Option. ; Definition at line 61 of file TH2Editor.h. ◆ fAddCol. TGCheckButton* TH2Editor::fAddCol. protected . CheckBox connected to Col-Option. ; Definition at line 63 of file TH2Editor.h. ◆ fAddError. TGCheckButton* TH2Editor::fAddError. protected . CheckBox connected to error bars. ; Definition at line 57 of file TH2Editor.h. ◆ fAddFB. TGCheckButton* TH2Editor::fAddFB. protected . Draw front box (or not) ; Definition at line 64 of file TH2Editor.h. ◆ fAddPalette. TGCheckButton* TH2Editor::fAddPalette. protected . CheckBox connected to Z option (2D) ; Definition at line 58 of file TH2Editor.h. ◆ fAddPalette1. TGCheckButton* TH2Editor::fAddPalette1. protected . CheckBox connected to Z option (3D) ; Definition at line 59 of file TH2Editor.h. ◆ fAddScat. TGCheckButton* TH2Editor::fAddScat. protected . CheckBox connected to Scat-Option. ; Definition at line 62 of file TH2Editor.h. ◆ fAddText. TGCheckButton* TH2Editor::fAddText. protected . Draw bin contents as text. ; Definition at line 66 of file TH2Editor.h. ◆ fApply. TGTextButton* TH2Editor::fApply. protected . Apply-Button to accept the rebinned histogram. ; Definition at line 76 of file TH2Editor.h. ◆ fBarOffset. TGNumberEntry* TH2Editor::fBarOffset. protected . Set bar offset of histogram. ; De,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2Editor.html:59337,error,error,59337,doc/master/classTH2Editor.html,https://root.cern,https://root.cern/doc/master/classTH2Editor.html,1,['error'],['error']
Availability,"ected basis function; set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static RooFormulaVar*_identityIdentity basis function pointe; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooResolutionModel.html:40514,error,errors,40514,root/html532/RooResolutionModel.html,https://root.cern,https://root.cern/root/html532/RooResolutionModel.html,2,['error'],['errors']
Availability,"ected number of events. An X-Y dataset is a weighted dataset with one or more observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const RooXYChi2Var& other, const char* name = 0); Copy constructor. void initialize(); Common constructor initialization. void initIntegrator(); Initialize bin content integrator. ~RooXYChi2Var(); Destructor. Double_t xErrorContribution(Double_t ydata) const; Calculate contribution to internal error due to error on 'x' coordinates; at point i. Double_t fy() const; Return function value requested bu present configuration. If integration is required, the function value integrated; over the bin volume divided by the bin volume is returned,; otherwise the value at the bin center is returned.; The bin volume is defined by the error on the 'X' coordinates. If an extended p.d.f. is used as function, its value is; also multiplied by the expected number of events here. Double_t evaluatePartition(Int_t firstEvent, Int_t lastEvent, Int_t stepSize) const; Calculate chi^2 in partition from firstEvent to lastEvent using given stepSize. RooArgSet requiredExtraObservables() const; Inform base class that observable yvar cannot be optimized away from the dataset. TObject* clone(const char* newname) const; { return new RooXYChi2Var(*this,newname); }. RooAbsTestStatistic* create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& adata, const RooArgSet& , const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooXYChi2Var.html:40344,error,error,40344,root/html526/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html526/RooXYChi2Var.html,22,['error'],['error']
Availability,"ected:. Pixel_tTGFrame::fBackgroundframe background color; Int_tTGFrame::fBorderWidthframe border width; TGClient*TGObject::fClientConnection to display server; Int_tTGFrame::fDNDStateEDNDFlags; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; UInt_tTGFrame::fEventMaskcurrenty active event mask; TGFrameElement*TGFrame::fFEpointer to frame element; UInt_tTGFrame::fHeightframe height; Handle_tTGObject::fIdX11/Win32 Window identifier; TImage*fImageimage; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; TStringfPathdirectory of image; const TGPicture*fPicicon picture; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGIcon.html:15302,mask,mask,15302,root/html528/TGIcon.html,https://root.cern,https://root.cern/root/html528/TGIcon.html,6,['mask'],['mask']
Availability,"ected:. TApplication*TApplication::fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications; static TStringTProofServ::fgLastMsgMessage about status before exception. private:. TXSocketHandler*fInputHandler; TXProofServInterruptHandler*fInterruptHandler; TStringfSockPath; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TXProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleUrgentData(); Handle high priority data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. TProofServ::EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); Get list of workers to be used from now on.; The list must be provided by the caller. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the input socket. void DisableTimeout(); Disable read timeout on the underlying socket. void EnableTimeout(); Enable read timeout on the underlying socket. void Terminate(Int_t status); Terminate the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXProofServ.html:17065,error,error,17065,root/html528/TXProofServ.html,https://root.cern,https://root.cern/root/html528/TXProofServ.html,4,['error'],['error']
Availability,"ected:. const ROOT::Math::IGenFunction*fFunctionpointer to function; boolfFunctionCopiedflag to control if function is copied in the class; doublefLastErrorerror estimate of last derivative calculation; doublefStepSizestep size used for derivative calculation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RichardsonDerivator(); Destructor: Removes function if needed. . RichardsonDerivator(double h = 0.001); Default Constructor.; Give optionally the step size for derivation. By default is 0.001, which is fine for x ~ 1; Increase if x is in averga larger or decrease if x is smaller. RichardsonDerivator(const ROOT::Math::IGenFunction& f, double h = 0.001, bool copyFunc = false); Construct from function and step size. RichardsonDerivator(const ROOT::Math::RichardsonDerivator& rhs). Copy constructor. RichardsonDerivator & operator=(const ROOT::Math::RichardsonDerivator& rhs). Assignment operator. double Error() const; Returns the estimate of the absolute Error of the last derivative calculation. . { return fLastError; }. double Derivative1(double x). Returns the first derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast majority; of functions. Give a smaller value if your function has many changes; of the second derivative in the function range. Getting the error via TF1::DerivativeError:; (total error = roundoff error + interpolation error); the estimate of the roundoff error is taken as follows:. where k is the double precision, ai are coefficients used in; central ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__RichardsonDerivator.html:3382,Error,Error,3382,root/html532/ROOT__Math__RichardsonDerivator.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__RichardsonDerivator.html,8,['Error'],['Error']
Availability,"ection has been closed. In case of failure fRestartAt is set to the number of bytes correclty transfered. Calling PutFile() immediately afterwards will restart at fRestartAt. If this is not desired call SetRestartAt(0) before calling PutFile(). If rootd reports that the file is locked, and you are sure this is not the case (e.g. due to a crash), you can force unlock it by prepending the remoteName with a '-'. ; Definition at line 233 of file TFTP.cxx. ◆ pwd(). void TFTP::pwd ; (; ); const. inline . Definition at line 117 of file TFTP.h. ◆ Recv(). Int_t TFTP::Recv ; (; Int_t & ; status, . EMessageTypes & ; kind . ); const. private . Return status from rootd server and message kind. ; Returns -1 in case of error otherwise 8 (sizeof 2 words, status and kind). ; Definition at line 191 of file TFTP.cxx. ◆ RenameFile(). Int_t TFTP::RenameFile ; (; const char * ; file1, . const char * ; file2 . ); const. Rename a remote file. ; Anonymous users may not rename files. Returns 0 in case of success and -1 in case of failure. ; Definition at line 790 of file TFTP.cxx. ◆ rm(). void TFTP::rm ; (; const char * ; file); const. inline . Definition at line 119 of file TFTP.h. ◆ rmdir(). void TFTP::rmdir ; (; const char * ; dir); const. inline . Definition at line 115 of file TFTP.h. ◆ SetBlockSize(). void TFTP::SetBlockSize ; (; Int_t ; blockSize). Make sure the block size is a power of two, with a minimum of 32768. ; Definition at line 207 of file TFTP.cxx. ◆ SetMode(). void TFTP::SetMode ; (; Int_t ; mode). inlineprivate . Definition at line 62 of file TFTP.h. ◆ SetRestartAt(). void TFTP::SetRestartAt ; (; Long64_t ; at). inline . Definition at line 81 of file TFTP.h. ◆ Streamer(). void TFTP::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TFTP::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 125 of file TFTP.h. Member Data Documentation. ◆ fBloc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFTP.html:23120,failure,failure,23120,doc/master/classTFTP.html,https://root.cern,https://root.cern/doc/master/classTFTP.html,1,['failure'],['failure']
Availability,"ection(). void TGX11::ConvertSelection ; (; Window_t ; win, . Atom_t & ; sel, . Atom_t & ; target, . Atom_t & ; prop, . Time_t & ; stamp . ). overridevirtual . Requests that the specified selection be converted to the specified target type. ; Reimplemented from TVirtualX.; Definition at line 2732 of file GX11Gui.cxx. ◆ CopyArea(). void TGX11::CopyArea ; (; Drawable_t ; src, . Drawable_t ; dest, . GContext_t ; gc, . Int_t ; src_x, . Int_t ; src_y, . UInt_t ; width, . UInt_t ; height, . Int_t ; dest_x, . Int_t ; dest_y . ). overridevirtual . Copy a drawable (i.e. ; pixmap) to another drawable (pixmap, window). The graphics context gc will be used and the source will be copied from src_x,src_y,src_x+width,src_y+height to dest_x,dest_y. ; Reimplemented from TVirtualX.; Definition at line 1685 of file GX11Gui.cxx. ◆ CopyGC(). void TGX11::CopyGC ; (; GContext_t ; org, . GContext_t ; dest, . Mask_t ; mask . ). overridevirtual . Copies graphics context from org to dest. ; Only the values specified in mask are copied. If mask = 0 then copy all fields. Both org and dest must exist. ; Reimplemented from TVirtualX.; Definition at line 1012 of file GX11Gui.cxx. ◆ CopyPixmap(). void TGX11::CopyPixmap ; (; Int_t ; wid, . Int_t ; xpos, . Int_t ; ypos . ). overridevirtual . Copy the pixmap wid at the position xpos, ypos in the current window. ; Reimplemented from TVirtualX.; Definition at line 496 of file TGX11.cxx. ◆ CopyWindowtoPixmap(). void TGX11::CopyWindowtoPixmap ; (; Drawable * ; pix, . Int_t ; xpos, . Int_t ; ypos . ). private . Copy area of current window in the pixmap pix. ; Definition at line 508 of file TGX11.cxx. ◆ CreateBitmap(). Pixmap_t TGX11::CreateBitmap ; (; Drawable_t ; id, . const char * ; bitmap, . UInt_t ; width, . UInt_t ; height . ). overridevirtual . Create a bitmap (i.e. pixmap with depth 1) from the bitmap data. ; Reimplemented from TVirtualX.; Definition at line 1082 of file GX11Gui.cxx. ◆ CreateCursor(). Cursor_t TGX11::CreateCursor ; (; ECursor ; curs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGX11.html:61270,mask,mask,61270,doc/master/classTGX11.html,https://root.cern,https://root.cern/doc/master/classTGX11.html,1,['mask'],['mask']
Availability,"ection* types); virtual voidTObject::AppendPad(Option_t* option = """"); const char*AsString(void* buf) const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; static TDataType*GetDataType(EDataType type); static TDictionary*TDictionary::GetDictionary(const char* name); static TDictionary*TDictionary::GetDictionary(const type_info& typeinfo); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*GetFullTypeName() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; Int_tGetType() const; static EDataTypeGetType(const type_info& typeinfo); const char*G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TDataType.html:1748,error,error,1748,root/html532/TDataType.html,https://root.cern,https://root.cern/root/html532/TDataType.html,2,['error'],['error']
Availability,"ectionXY(const char *name=""_pxy"", Option_t *option=""e"") constProject this profile2D into a 2-D histogram along X,Y.Definition TProfile2D.cxx:1287; TProfile2D::MultiplyBool_t Multiply(TF1 *h1, Double_t c1=1) overridePerforms the operation: this = this*c1*f1.Definition TProfile2D.cxx:1235; TProfile2D::LabelsDeflatevoid LabelsDeflate(Option_t *axis=""X"") overrideReduce the number of bins for this axis to the number of bins having a label.Definition TProfile2D.cxx:980; TProfile2D::GetBinErrorDouble_t GetBinError(Int_t bin) const overrideReturn bin error of a Profile2D histogram.Definition TProfile2D.cxx:881; TProfile2D::GetBinContentDouble_t GetBinContent(Int_t binx, Int_t biny, Int_t) const overrideDefinition TProfile2D.h:115; TProfile2D::Approximatestatic void Approximate(Bool_t approx=kTRUE)Static function, set the fgApproximate flag.Definition TProfile2D.cxx:277; TProfile2D::GetBinSumw2virtual const TArrayD * GetBinSumw2() constDefinition TProfile2D.h:122; TProfile2D::fErrorModeEErrorType fErrorModeOption to compute errors.Definition TProfile2D.h:35; TProfile2D::fZminDouble_t fZminLower limit in Z (if set)Definition TProfile2D.h:36; TProfile2D::RebinXTProfile2D * RebinX(Int_t ngroup=2, const char *newname="""") overrideRebin only the X axis.Definition TProfile2D.cxx:1837; TProfile2D::FillInt_t Fill(const char *namex, const char *namey, Double_t z) overrideIncrement cell defined by namex,namey by a weight w.Definition TProfile2D.h:112; TProfile2D::GetW2Double_t * GetW2()Definition TProfile2D.h:66; TProfile2D::BufferFillInt_t BufferFill(Double_t, Double_t, Double_t) overrideaccumulate arguments in buffer.Definition TProfile2D.h:45; TProfile2D::GetBinErrorDouble_t GetBinError(Int_t binx, Int_t biny) const overrideDefinition TProfile2D.h:117; TProfile2D::SetBinsvoid SetBins(Int_t, const Double_t *) overrideRedefine x axis parameters with variable bin sizes.Definition TProfile2D.h:69; TProfile2D::FillInt_t Fill(const char *namex, Double_t y, Double_t z) overrideIncrement cel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile2D_8h_source.html:12917,error,errors,12917,doc/master/TProfile2D_8h_source.html,https://root.cern,https://root.cern/doc/master/TProfile2D_8h_source.html,1,['error'],['errors']
Availability,"ections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications; static Long64_tTProofServ::fgLastEntryLast entry before exception; static TStringTProofServ::fgLastMsgMessage about status before exception. private:. TXSocketHandler*fInputHandler; TXProofServInterruptHandler*fInterruptHandler; TStringfSockPath; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance Chart:. TObject. TQObject. ←; TApplication. ←; TProofServ. TXHandler. ←; TXProofServ. Function documentation; TXProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TXProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleUrgentData(); Handle high priority data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. TProofServ::EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); Get list of workers to be used from now on.; The list must be provided by the caller. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the input socket. void DisableTimeout(); Disable read timeout on the underlying socket. void EnableTimeout(); Enable read timeout on the underlying socket. void Terminate(Int_t status); Terminate the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXProofServ.html:18718,error,error,18718,root/html602/TXProofServ.html,https://root.cern,https://root.cern/root/html602/TXProofServ.html,4,['error'],['error']
Availability,"ective is given in the printout of the errors, then at least M believes the errors are accurate, although there is always a small chance that M has been fooled. Some visible signs that M may have been fooled are:. Warning messages produced during the minimization or error analysis.; Failure to find new minimum.; Value of \(\mbox{EDM}\) too big. For a “normal” minimization, after \(\mbox{MIGRAD}\), the value of \(\mbox{EDM}\) is usually more than three orders of magnitude smaller than \(\mbox{up}\), unless a looser tolerance has been specified.; Correlation coefficients exactly equal to zero, unless some parameters are known to be uncorrelated with the others.; Correlation coefficients very close to one (greater than 0.99).; This indicates both an exceptionally difficult problem, and one which has been badly parametrized so that individual errors are not very meaningful because they are so highly correlated.; Parameter at limit. This condition, signalled by a M warning message, may make both the function minimum and parameter errors unreliable. See section [answer:right-errors], Getting the right parameter errors with limits. The best way to be absolutely sure of the errors, is to use “independent” calculations and compare them, or compare the calculated errors with a picture of the function if possible. For example, if there is only one free parameter, \(\mbox{SCAN}\) allows the user to verify approximately the function curvature. Similarly, if there are only two free parameters, use \(\mbox{CONTOURS}\). To verify a full error matrix, compare the results of \(\mbox{MIGRAD}\) with those (calculated afterward) by \(\mbox{HESSE}\), which uses a different method. And of course the most reliable and most expensive technique, which must be used if asymmetric errors are required, is \(\mbox{MINOS}\).; 6.6 Convergence in \(\mbox{MIGRAD}\), and positive–definiteness; \(\mbox{MIGRAD}\) uses its current estimate of the covariance matrix of the function to determine the current",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:75226,error,errors,75226,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,4,['error'],['errors']
Availability,"ector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in representative histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Double_tfBoostFactorntuple var: boost weight; TH1F*fBoostFactorHistweights applied in boosting; TStringfBoostTypestring specifying the boost type; vector<Double_t>fBoostWeightsthe weights applied in the individual boosts; vector<IMethod*>fCommitteethe collection of members; TH2F*fErrFractHisterror fraction vs member number; Double_tfErrorFractionntuple var: misclassification error fraction ; Int_tfITreentuple var: ith member; TStringfMemberOptionthe options for that method; TMVA::Types::EMVAfMemberTypethe MVA method to be boosted; TTree*fMonitorNtuplemonitoring ntuple; UInt_tfNMembersnumber of members requested; Int_tfNnodesntuple var: nNodes; Bool_tfUseMemberDecisionuse binary information from IsSignal; Bool_tfUseWeightedMembersin the committee weighted from AdaBoost; vector<Double_t>fVariableImportancethe relative importance of the different variables . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodCommittee(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& dsi, const TString& theOption, TDirectory* theTargetDir = 0); constructor. MethodCommittee(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = 0); constructor for calculating Committee-MVA using previously generatad decision trees; the result of the previous training (the decision trees) are read in via the; weightfile. Make sure the ""theVariables"" cor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodCommittee.html:16690,error,error,16690,root/html528/TMVA__MethodCommittee.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodCommittee.html,1,['error'],['error']
Availability,"ector& insp) const; static Bool_tTVirtualStreamerInfo::CanDelete(); static Bool_tTVirtualStreamerInfo::CanOptimize(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t*); virtual TObject*Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Bool_tCompareContent(TClass* cl, TVirtualStreamerInfo* info, Bool_t warn, Bool_t complete, TFile* file); virtual voidCompile(); voidComputeSize(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDeleteArray(void* p, Bool_t dtorOnly = kFALSE); virtual voidDestructor(void* p, Bool_t dtorOnly = kFALSE); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static TVirtualStreamerInfo*TVirtualStreamerInfo::Factory(); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidForceWriteInfo(TFile* file, Bool_t force = kFALSE); virtual TClassStreamer*GenEmulatedClassStreamer(const char* class_name, Bool_t silent); virtual TVirtualCollectionProxy*GenEmulatedProxy(const char* class_name, Bool_t silent); virtual Int_tGenerateHeaderFile(const char* dirname, const TList* subClasses = 0, const TList* extrainfos = 0); virtual TClassStreamer*GenExplicitClassStreamer(con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TStreamerInfo.html:2449,Error,Error,2449,root/html534/TStreamerInfo.html,https://root.cern,https://root.cern/root/html534/TStreamerInfo.html,1,['Error'],['Error']
Availability,"ector::TParentBuf*fParentcurrent inspection ""path"". Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMemberInspector(); Construct a member inspector. ~TMemberInspector(); Destruct a member inspector. const char* GetParent() const; Get the parent string. Ssiz_t GetParentLen() const; Get the length of the parent string. void AddToParent(const char* name); Append ""name"" to the parent string. void RemoveFromParent(Ssiz_t startingAt); Remove trailing characters starting at ""startingAt"". void Inspect(TClass* cl, const char* parent, const char* name, const void* addr); Obsolete signature. void GenericShowMembers(const char* topClassName, const void* obj, Bool_t transientMember); Call ShowMember() on obj.; This could be faster if we implemented this either as a templated; function or by rootcint-generated code using the typeid (i.e. the; difference is a lookup in a TList instead of in a map).; To avoid a spurrious error message in case the data member is; transient and does not have a dictionary we check first. void InspectMember(const TObject& obj, const char* name, Bool_t isTransient); Routine driving the visiting of the class information/data members. void InspectMember(const char* topclassname, const void* pobj, const char* name, Bool_t transient); Routine driving the visiting of the class information/data members. void InspectMember(TClass* cl, const void* pobj, const char* name, Bool_t isTransient); Routine driving the visiting of the class information/data members. kUnset, // No Inspect(). TMemberInspector(const TMemberInspector& ). TMemberInspector & operator=(const TMemberInspector& ). EObjectPointerState GetObjectValidity() const; { return fObjectPointerState; }. void SetObjectValidity(TMemberInspector::EObjectPointerState val); { fObjectPointerState = val; }. obj. IsA(). » Author: Fons Rademakers 15/07/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMemberInspector.html:3029,error,error,3029,root/html602/TMemberInspector.html,https://root.cern,https://root.cern/root/html602/TMemberInspector.html,4,['error'],['error']
Availability,"ector< double > > fBinEdgeDefinition BinData.h:631; ROOT::Fit::BinData::GetAsymErrorvoid GetAsymError(unsigned int ipoint, double &lowError, double &highError) constDefinition BinData.h:307; ROOT::Fit::BinData::fRefVolumedouble fRefVolumereference bin volume - used to normalize the bins in case of variable bins dataDefinition BinData.h:604; ROOT::Fit::BinData::GetBinUpEdgeCoordinatesvoid GetBinUpEdgeCoordinates(unsigned int ipoint, double *x) constThread save version of function retrieving the bin up-edge in case of multidimensions.Definition BinData.h:532; ROOT::Fit::BinData::fDataErrorPtrconst double * fDataErrorPtrDefinition BinData.h:623; ROOT::Fit::BinData::fSumError2double fSumError2total sum square of the errorsDefinition BinData.h:606; ROOT::Fit::BinData::fpTmpBinEdgeVectordouble * fpTmpBinEdgeVectornot threadsafe stuff!Definition BinData.h:634; ROOT::Fit::BinData::fDataErrorstd::vector< double > fDataErrorDefinition BinData.h:620; ROOT::Fit::BinData::Errordouble Error(unsigned int ipoint) constReturn the error on the given point.Definition BinData.h:262; ROOT::Fit::BinData::HaveAsymErrorsbool HaveAsymErrors() constflag to control if data provides asymmetric errors on the valueDefinition BinData.h:146; ROOT::Fit::BinData::SumOfError2double SumOfError2() constcompute the total sum of the error square (sum of weight square in case of a weighted data set)Definition BinData.h:577; ROOT::Fit::BinData::ErrorTypeErrorTypeDefinition BinData.h:56; ROOT::Fit::BinData::kNoError@ kNoErrorDefinition BinData.h:56; ROOT::Fit::BinData::kCoordError@ kCoordErrorDefinition BinData.h:56; ROOT::Fit::BinData::kAsymError@ kAsymErrorDefinition BinData.h:56; ROOT::Fit::BinData::kValueError@ kValueErrorDefinition BinData.h:56; ROOT::Fit::BinData::GetPointconst double * GetPoint(unsigned int ipoint, double &value, double &invError) constretrieve in a single call a pointer to the coordinate data, value and inverse error for the given fit...Definition BinData.h:439; ROOT::Fit::DataRangec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8h_source.html:29662,error,error,29662,doc/master/BinData_8h_source.html,https://root.cern,https://root.cern/doc/master/BinData_8h_source.html,1,['error'],['error']
Availability,"ectorToEventList(TEventList* evl, const char* sel); ~TEveSelectorToEventList(); virtual voidTSelector::Abort(const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTSelectorDraw::Begin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Int_tTSelectorDraw::GetAction() const; virtual Bool_tTSelectorDraw::GetCleanElist() const; virtual Int_tTSelectorDraw::GetDimension() const; virtual Long64_tTSelectorDraw::GetDrawFlag() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; Int_tTSelectorDraw::GetMultiplicity() const; virtual const char*TOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveSelectorToEventList.html:1486,Error,Error,1486,root/html532/TEveSelectorToEventList.html,https://root.cern,https://root.cern/root/html532/TEveSelectorToEventList.html,1,['Error'],['Error']
Availability,"ectorToEventList(TEventList* evl, const char* sel); ~TEveSelectorToEventList(); virtual voidTSelector::Abort(const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTSelectorDraw::Begin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Int_tTSelectorDraw::GetAction() const; virtual Bool_tTSelectorDraw::GetCleanElist() const; virtual Int_tTSelectorDraw::GetDimension() const; virtual Long64_tTSelectorDraw::GetDrawFlag() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; Int_tTSelectorDraw::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveSelectorToEventList.html:1486,Error,Error,1486,root/html534/TEveSelectorToEventList.html,https://root.cern,https://root.cern/root/html534/TEveSelectorToEventList.html,1,['Error'],['Error']
Availability,"ector\(<\)double\(>\)&, unsigned int); Constructor for the minimal required interface: \(\mbox{FCN}\) and starting values for parameters and uncertainties. Optional the strategy level in MnStrategy can be specified.; 5.11.2 MnSimplex(const FCNBase&, const MnUserParameters&,; unsigned int); Constructor for high level parameters interface. Optional the strategy level in MnStrategy can be specified.; 5.11.3 MnSimplex(const FCNBase&, const MnUserParameterState&,; const MnStrategy&); Constructor from a full state (parameters + covariance) as starting input plus the desired strategy.; 5.11.4 operator(); MnSimplex::operator()(unsigned int maxfcn, double tolerance) causes minimization of the \(\mbox{FCN}\) and returns the result in form of a FunctionMinimum. Minimization terminates either when the function has been called (approximately) \(\mbox{maxfcn}\) times, or when the estimated vertical distance to minimum (\(\mbox{EDM}\)) is less than \(\mbox{tolerance*up}\). The default value of \(\mbox{tolerance}\) is \(\mbox{0.1}\). (see [howto:errordef]).; 5.11.5 Parameter interaction; MnSimplex retains the result after each minimization (MnUserParameterStae, see [api:state]) and forwards the interface for parameter interaction.; 5.11.6 SimplexMinimizer(); The SimplexMinimizer() is instantiated using default constructor.; 5.11.7 minimize(const FCNBase&, …); The SimplexMinimizer provides several overloaded methods minimize with return value FunctionMinimum. Together with the user \(\mbox{FCN}\) (either an implementation of FCNBase or FCNGradientBase) the user has to give as input the parameters with starting values in one of the defined formats (std::vector\(<\)double\(>\), MnUserParameters or MnUserParameterState).; 5.12 MnStrategy; [api:strategy] Sets the strategy to be used in calculating first and second derivatives and in certain minimization methods. In general, low values of \(\mbox{level}\) mean fewer function calls and high values mean more reliable minimization. Currentl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:55327,toler,tolerance,55327,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['toler'],['tolerance']
Availability,"ectory(const char* dir) const; Int_tChangePermission(const char* file, Int_t mode) const; voidchmod(const char* file, Int_t mode) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; Int_tClose(); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tDeleteDirectory(const char* dir) const; Int_tDeleteFile(const char* file) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFreeDirectory(Bool_t print = kFALSE); voidget(const char* file, const char* localName = 0); Int_tGetBlockSize() const; const char*GetDirEntry(Bool_t print = kFALSE); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tGetFile(const char* file, const char* localName = 0); virtual const char*TObject::GetIconName() const; Int_tGetMode() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetPathInfo(const char* path, FileStat_t& buf, Bool_t p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFTP.html:1969,error,error,1969,root/html528/TFTP.html,https://root.cern,https://root.cern/root/html528/TFTP.html,10,['error'],['error']
Availability,"ectory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the numb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction1Binding.html:45423,error,error,45423,doc/master/classRooCFunction1Binding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction1Binding.html,42,['error'],['error']
Availability,"ectory::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TObject*TDirectoryFile::CloneObject(const TObject* obj, Bool_t autoadd = kTRUE); virtual voidTDirectoryFile::Close(Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTDirectoryFile::Copy(TObject&) const; static TDirectory*&TDirectory::CurrentDirectory(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); virtual voidTDirectoryFile::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTDirectory::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static voidTDirectory::EncodeNameCycle(char* buffer, const char* name, Short_t cycle); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTDirectoryFile::FillBuffer(char*& buffer); virtual TKey*TDirectoryFile::FindKey(const char* keyname) const; virtual TKey*TDirectoryFile::FindKeyAny(const char* keyname) const; virtual TObject*TDirectory::FindObject(const char* name) const; virtual TObject*TDirectory::FindObject(const TObject* obj) const; virtual TObject*TDirectoryFile::FindObjectAny(const char* name) const; virtual TObject*TDirectoryFile::FindObjectAnyFile(const char* name) const; virtual TObject*TDirectoryFile::Get(const char* namecycle); virtual Int_tTDirectoryFile::GetBufferSize() const; const TDatime&TDirectoryFile::GetCreationDate() const; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooWorkspace__WSDir.html:3019,Error,Error,3019,root/html532/RooWorkspace__WSDir.html,https://root.cern,https://root.cern/root/html532/RooWorkspace__WSDir.html,1,['Error'],['Error']
Availability,"ectory::Copy(TObject&) const; static TDirectory*&TDirectory::CurrentDirectory(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle, const size_t namesize = 0); static Int_tDecreaseDirLevel(); virtual voidTDirectory::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTDirectory::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static voidTDirectory::EncodeNameCycle(char* buffer, const char* name, Short_t cycle); voidEndOfProcessCleanups(bool altInterpreter = kFALSE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TKey*TDirectory::FindKey(const char*) const; virtual TKey*TDirectory::FindKeyAny(const char*) const; virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; virtual TObject*FindObjectAny(const char* name) const; virtual TObject*FindObjectAnyFile(const char* name) const; const char*FindObjectClassName(const char* name) const; const char*FindObjectPathName(const TObject* obj) const; TObject*FindSpecialObject(const char* name, void*& where); TClass*FindSTLClass(const char* name, Bool_t load, Bool_t silent = kFALSE) const; voidForceStyle(Bool_t force = kTRUE); Bool_tFromPopUp() const; virtual TObject*TDirectory::Get(const char* namecycle); TApplication*GetApplication() const; virtual Int_tTDirectory::GetBufferSize() const; Int_tGetBuiltDa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TROOT.html:3963,error,error,3963,root/html534/TROOT.html,https://root.cern,https://root.cern/root/html534/TROOT.html,2,['error'],['error']
Availability,"ectoryAutoAdd(). void TChain::DirectoryAutoAdd ; (; TDirectory * ; ). overridevirtual . Override the TTree::DirectoryAutoAdd behavior: we never auto add. ; Reimplemented from TTree.; Definition at line 778 of file TChain.cxx. ◆ Draw() [1/3]. Long64_t TChain::Draw ; (; const char * ; varexp, . const char * ; selection, . Option_t * ; option = """", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). overridevirtual . Process all entries in this chain and draw histogram corresponding to expression varexp. ; Returns -1 in case of error or number of selected events in case of success. ; Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 813 of file TChain.cxx. ◆ Draw() [2/3]. Long64_t TChain::Draw ; (; const char * ; varexp, . const TCut & ; selection, . Option_t * ; option = """", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). overridevirtual . Draw expression varexp for selected entries. ; Returns -1 in case of error or number of selected events in case of success.; This function accepts TCut objects as arguments. Useful to use the string operator +, example: ntuple.Draw(""x"",cut1+cut2+cut3);. Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 793 of file TChain.cxx. ◆ Draw() [3/3]. void TChain::Draw ; (; Option_t * ; option). inlineoverridevirtual . Default Draw method for all objects. ; Reimplemented from TObject.; Reimplemented in TProofChain.; Definition at line 90 of file TChain.h. ◆ Fill(). Int_t TChain::Fill ; (; ). inlineoverridevirtual . Fill all branches. ; This function loops on all the branches of this tree. For each branch, it copies to the branch buffer (basket) the current values of the leaves data types. If a leaf is a simple data type, a simple conversion to a machine independent format has to be done.; This machine independent version of the data is copied into a basket (each branch has its own basket). When a basket is full (32k worth of data by default), it is th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTChain.html:68835,error,error,68835,doc/v632/classTChain.html,https://root.cern,https://root.cern/doc/v632/classTChain.html,1,['error'],['error']
Availability,"ectoryAutoAdd(). void TChain::DirectoryAutoAdd ; (; TDirectory * ; ). overridevirtual . Override the TTree::DirectoryAutoAdd behavior: we never auto add. ; Reimplemented from TTree.; Definition at line 804 of file TChain.cxx. ◆ Draw() [1/3]. Long64_t TChain::Draw ; (; const char * ; varexp, . const char * ; selection, . Option_t * ; option = """", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). overridevirtual . Process all entries in this chain and draw histogram corresponding to expression varexp. ; Returns -1 in case of error or number of selected events in case of success. ; Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 839 of file TChain.cxx. ◆ Draw() [2/3]. Long64_t TChain::Draw ; (; const char * ; varexp, . const TCut & ; selection, . Option_t * ; option = """", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). overridevirtual . Draw expression varexp for selected entries. ; Returns -1 in case of error or number of selected events in case of success.; This function accepts TCut objects as arguments. Useful to use the string operator +, example: ntuple.Draw(""x"",cut1+cut2+cut3);. Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 819 of file TChain.cxx. ◆ Draw() [3/3]. void TChain::Draw ; (; Option_t * ; option). inlineoverridevirtual . Default Draw method for all objects. ; Reimplemented from TObject.; Reimplemented in TProofChain.; Definition at line 90 of file TChain.h. ◆ Fill(). Int_t TChain::Fill ; (; ). inlineoverridevirtual . Fill all branches. ; This function loops on all the branches of this tree. For each branch, it copies to the branch buffer (basket) the current values of the leaves data types. If a leaf is a simple data type, a simple conversion to a machine independent format has to be done.; This machine independent version of the data is copied into a basket (each branch has its own basket). When a basket is full (32k worth of data by default), it is th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTChain.html:69244,error,error,69244,doc/master/classTChain.html,https://root.cern,https://root.cern/doc/master/classTChain.html,1,['error'],['error']
Availability,"ects by the customizer. RooCustomizer(const RooAbsArg& pdf, const char* name); Sterile Constructor. Customizers created by this constructor; offer only the replace() method. The supplied 'name' is used as; suffix for any cloned branch nodes. void initialize(); Initialize the customizer. ~RooCustomizer(); Destructor. void splitArgs(const RooArgSet& argSet, const RooAbsCategory& splitCat); Split all arguments in 'set' into individualized clones for each; defined state of 'splitCat'. The 'splitCats' category must be; subset of or equal to the master category supplied in the; customizer constructor. Splitting is only available on customizers created with a master index category. void splitArg(const RooAbsArg& arg, const RooAbsCategory& splitCat); Split all argument 'arg' into individualized clones for each; defined state of 'splitCat'. The 'splitCats' category must be; subset of or equal to the master category supplied in the; customizer constructor. Splitting is only available on customizers created with a master index category. void replaceArg(const RooAbsArg& orig, const RooAbsArg& subst); Replace any occurence of arg 'orig' with arg 'subst'. RooAbsArg* build(Bool_t verbose = kFALSE); Build a clone of the prototype executing all registered 'replace' rules; If verbose is set a message is printed for each leaf or branch node; modification. The returned head node owns all cloned branch nodes; that were created in the cloning proces. RooAbsArg* build(const char* masterCatState, Bool_t verbose = kFALSE); Build a clone of the prototype executing all registered 'replace'; rules and 'split' rules for the masterCat state named; 'masterCatState'. If verbose is set a message is printed for; each leaf or branch node modification. The returned composite arg; is owned by the customizer. This function cannot be called on; customizer build with the sterile constructor. RooAbsArg* doBuild(const char* masterCatState, Bool_t verbose); Back-end implementation of the p.d.f building functi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCustomizer.html:13182,avail,available,13182,root/html526/RooCustomizer.html,https://root.cern,https://root.cern/root/html526/RooCustomizer.html,11,['avail'],['available']
Availability,"ecture_t > Class Template Reference. ; template<typename Architecture_t>; class TMVA::DNN::TDLGradientDescent< Architecture_t >; Definition at line 65 of file DLMinimizers.h. Public Types; using DeepNet_t = TDeepNet< Architecture_t >;  ; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TDLGradientDescent ();  ;  TDLGradientDescent (Scalar_t learningRate, size_t convergenceSteps, size_t testInterval);  ; size_t GetConvergenceCount () const;  Getters. ;  ; size_t GetConvergenceSteps () const;  ; Scalar_t GetTestError () const;  ; size_t GetTestInterval () const;  ; Scalar_t GetTrainingError () const;  ; bool HasConverged ();  Increases the minimization step counter by the test error evaluation period and uses the current internal value of the test error to determine if the minimization has converged. ;  ; bool HasConverged (Scalar_t testError);  Increases the minimization step counter by the test error evaluation period and uses the provided test error value to determine if the minimization has converged. ;  ; void Reset ();  Reset minimizer object to default state. ;  ; void SetBatchSize (Scalar_t rate);  ; void SetConvergenceSteps (size_t steps);  Setters. ;  ; void SetLearningRate (Scalar_t rate);  ; void SetTestInterval (size_t interval);  ; void Step (DeepNet_t &deepNet, std::vector< Matrix_t > &input, const Matrix_t &output, const Matrix_t &weights);  Perform a single optimization step on a given batch. ;  ; void Step (DeepNet_t &master, std::vector< DeepNet_t > &nets, std::vector< TTensorBatch< Architecture_t > > &batches);  Perform multiple optimization steps simultaneously. ;  ; Scalar_t StepLoss (DeepNet_t &deepNet, std::vector< Matrix_t > &input, const Matrix_t &output, const Matrix_t &weights);  Same as Step(...) but also evaluate the loss on the given training data. ;  ; void StepMomentum (DeepNet_t &master, std::vector< DeepNet_t > &nets, std::vector< TTensorBatch< Arch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html:1305,error,error,1305,doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,2,['error'],['error']
Availability,ecture_t >::fConvergenceCount. private . Current number of training epochs without. ; considerable decrease in the test error. ; Definition at line 66 of file Minimizers.h. ◆ fConvergenceSteps. template<typename Architecture_t > . size_t TMVA::DNN::TGradientDescent< Architecture_t >::fConvergenceSteps. private . Number of training epochs without considerable. ; decrease in the test error for convergence. ; Definition at line 64 of file Minimizers.h. ◆ fLearningRate. template<typename Architecture_t > . Scalar_t TMVA::DNN::TGradientDescent< Architecture_t >::fLearningRate. private . Learning rate \(\alpha\). ; Definition at line 71 of file Minimizers.h. ◆ fMinimumError. template<typename Architecture_t > . Scalar_t TMVA::DNN::TGradientDescent< Architecture_t >::fMinimumError. private . The minimum loss achieved on the training set during the current training session. ; Definition at line 72 of file Minimizers.h. ◆ fStepCount. template<typename Architecture_t > . size_t TMVA::DNN::TGradientDescent< Architecture_t >::fStepCount. private . Number of steps performed in the current training session. ; Definition at line 63 of file Minimizers.h. ◆ fTestError. template<typename Architecture_t > . Scalar_t TMVA::DNN::TGradientDescent< Architecture_t >::fTestError. private . Holds the most recently computed test loss. ; Definition at line 70 of file Minimizers.h. ◆ fTestInterval. template<typename Architecture_t > . size_t TMVA::DNN::TGradientDescent< Architecture_t >::fTestInterval. private . Interval for the computation of the test error. ; Definition at line 68 of file Minimizers.h. ◆ fTrainingError. template<typename Architecture_t > . Scalar_t TMVA::DNN::TGradientDescent< Architecture_t >::fTrainingError. private . Holds the most recently computed training loss. ; Definition at line 69 of file Minimizers.h. tmva/tmva/inc/TMVA/DNN/Minimizers.h. TMVADNNTGradientDescent. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:46 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html:16462,error,error,16462,doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,1,['error'],['error']
Availability,"ecursively replace all servers with the new servers in newSet. ;  ; virtual bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep);  Function that is called at the end of redirectServers(). ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool shapeProp=false, std::size_t refCount=1);  Register another RooAbsArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; Optimisation interface; These functions allow RooFit to optimise a computation graph, to keep track of cached values, and to invalidate caches. . virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant para",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:20433,mask,mask,20433,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['mask'],['mask']
Availability,"ecursively replace all servers with the new servers in newSet. ;  ; virtual bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep);  Function that is called at the end of redirectServers(). ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool shapeProp=false, std::size_t refCount=1);  Register another RooAbsArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCategory.html:26705,mask,mask,26705,doc/master/classRooCategory.html,https://root.cern,https://root.cern/doc/master/classRooCategory.html,9,['mask'],['mask']
Availability,"ed (or added via AssignData() function),; the fitting formula can be reset without re-adding all the points.; --Example:; TLinearFitter *lf=new TLinearFitter(""1++x++x*x"");; lf->AssignData(n, 1, x, y, e);; lf->Eval(); //looking at the parameter significance, you see,; // that maybe the fit will improve, if you take out; // the constant term; lf->SetFormula(""x++x*x"");; lf->Eval();. 2.3.2 If the input data is not stored, the fitter will have to be; cleared and the data will have to be added again to try a; different formula. 3.Accessing the fit results; 3.1 There are methods in the fitter to access all relevant information:; --GetParameters, GetCovarianceMatrix, etc; --the t-values of parameters and their significance can be reached by; GetParTValue() and GetParSignificance() methods; 3.2 If fitting with a pre-defined TF123, the fit results are also; written into this function. 4.Robust fitting - Least Trimmed Squares regression (LTS); Outliers are atypical(by definition), infrequant observations; data points; which do not appear to follow the characteristic distribution of the rest; of the data. These may reflect genuine properties of the underlying; phenomenon(variable), or be due to measurement errors or anomalies which; shouldn't be modelled. (StatSoft electronic textbook). Even a single gross outlier can greatly influence the results of least-; squares fitting procedure, and in this case use of robust(resistant) methods; is recommended. The method implemented here is based on the article and algorithm:; ""Computing LTS Regression for Large Data Sets"" by; P.J.Rousseeuw and Katrien Van Driessen; The idea of the method is to find the fitting coefficients for a subset; of h observations (out of n) with the smallest sum of squared residuals.; The size of the subset h should lie between (npoints + nparameters +1)/2; and n, and represents the minimal number of good points in the dataset.; The default value is set to (npoints + nparameters +1)/2, but of course; if you are ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TLinearFitter.html:5468,Robust,Robust,5468,root/html532/TLinearFitter.html,https://root.cern,https://root.cern/root/html532/TLinearFitter.html,4,['Robust'],['Robust']
Availability,"ed . Definition at line 161 of file IntegratorOptions.cxx. ◆ ExtraOptions(). IOptions * ROOT::Math::BaseIntegratorOptions::ExtraOptions ; (; ); const. inline . return extra options ; Definition at line 71 of file IntegratorOptions.h. ◆ Integrator(). virtual std::string ROOT::Math::BaseIntegratorOptions::Integrator ; (; ); const. pure virtual . name of 1D integrator ; Implemented in ROOT::Math::IntegratorOneDimOptions, and ROOT::Math::IntegratorMultiDimOptions. ◆ operator=(). BaseIntegratorOptions & ROOT::Math::BaseIntegratorOptions::operator= ; (; const BaseIntegratorOptions & ; opt). assignment operators ; Definition at line 137 of file IntegratorOptions.cxx. ◆ RelTolerance(). double ROOT::Math::BaseIntegratorOptions::RelTolerance ; (; ); const. inline . absolute tolerance ; Definition at line 64 of file IntegratorOptions.h. ◆ SetAbsTolerance(). void ROOT::Math::BaseIntegratorOptions::SetAbsTolerance ; (; double ; tol). inline . non-static methods for setting options ; set the abs tolerance ; Definition at line 77 of file IntegratorOptions.h. ◆ SetExtraOptions(). void ROOT::Math::BaseIntegratorOptions::SetExtraOptions ; (; const IOptions & ; opt). set extra options (in this case pointer is cloned) ; Definition at line 167 of file IntegratorOptions.cxx. ◆ SetRelTolerance(). void ROOT::Math::BaseIntegratorOptions::SetRelTolerance ; (; double ; tol). inline . set the relative tolerance ; Definition at line 80 of file IntegratorOptions.h. ◆ SetWKSize(). void ROOT::Math::BaseIntegratorOptions::SetWKSize ; (; unsigned int ; size). inline . set workspace size ; Definition at line 83 of file IntegratorOptions.h. ◆ WKSize(). unsigned int ROOT::Math::BaseIntegratorOptions::WKSize ; (; ); const. inline . size of the workspace ; Definition at line 67 of file IntegratorOptions.h. Member Data Documentation. ◆ fAbsTolerance. double ROOT::Math::BaseIntegratorOptions::fAbsTolerance. protected . absolute tolerance ; Definition at line 97 of file IntegratorOptions.h. ◆ fExtraOptions.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html:4238,toler,tolerance,4238,doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html,1,['toler'],['tolerance']
Availability,"ed . This function calculates derivative of peaks shape function (see manual) according to relative amplitude txy. ; Function parameters:; numOfFittedPeaks-number of fitted peaks; x,y-position of channel; parameter-array of peaks parameters (amplitudes and positions); sigmax-sigmax of peaks; sigmay-sigmay of peaks; bx, by-slopes . Definition at line 1234 of file TSpectrum2Fit.cxx. ◆ Derty(). Double_t TSpectrum2Fit::Derty ; (; Int_t ; numOfFittedPeaks, . Double_t ; x, . const Double_t * ; parameter, . Double_t ; sigmax, . Double_t ; bx . ). protected . This function calculates derivative of peaks shape function (see manual) according to relative amplitude ty. ; Function parameters:; numOfFittedPeaks-number of fitted peaks; x-position of channel; parameter-array of peaks parameters (amplitudes and positions); sigmax-sigma of 1D ridge; bx-slope . Definition at line 1333 of file TSpectrum2Fit.cxx. ◆ Erfc(). Double_t TSpectrum2Fit::Erfc ; (; Double_t ; x). protected . This function calculates error function of x. ; Definition at line 300 of file TSpectrum2Fit.cxx. ◆ FitAwmi(). void TSpectrum2Fit::FitAwmi ; (; Double_t ** ; source). This function fits the source spectrum. ; The calling program should fill in input parameters of the TSpectrum2Fit class. The fitted parameters are written into TSpectrum2Fit class output parameters and fitted data are written into source spectrum.; Function parameters:; source-pointer to the matrix of source spectrum. Fitting; Goal: to estimate simultaneously peak shape parameters in spectra with large number of peaks. peaks can be fitted separately, each peak (or multiplets) in a region or together all peaks in a spectrum. To fit separately each peak one needs to determine the fitted region. However it can happen that the regions of neighbouring peaks are overlapping. Then the results of fitting are very poor. On the other hand, when fitting together all peaks found in a spectrum, one needs to have a method that is stable (converges) and fas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:50160,error,error,50160,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,1,['error'],['error']
Availability,"ed . initial value of s parameter for 2D peaks (relative amplitude of step), for details see html manual and references ; Definition at line 65 of file TSpectrum2Fit.h. ◆ fSyCalc. Double_t TSpectrum2Fit::fSyCalc. protected . calculated value of s parameter for 1D ridges in y direction ; Definition at line 78 of file TSpectrum2Fit.h. ◆ fSyErr. Double_t TSpectrum2Fit::fSyErr. protected . error value of s parameter for 1D ridges in y direction ; Definition at line 79 of file TSpectrum2Fit.h. ◆ fSyInit. Double_t TSpectrum2Fit::fSyInit. protected . initial value of s parameter for 1D ridges in y direction (relative amplitude of step), for details see html manual and references ; Definition at line 77 of file TSpectrum2Fit.h. ◆ fTxCalc. Double_t TSpectrum2Fit::fTxCalc. protected . calculated value of t parameter for 1D ridges in x direction ; Definition at line 69 of file TSpectrum2Fit.h. ◆ fTxErr. Double_t TSpectrum2Fit::fTxErr. protected . error value of t parameter for 1D ridges in x direction ; Definition at line 70 of file TSpectrum2Fit.h. ◆ fTxInit. Double_t TSpectrum2Fit::fTxInit. protected . initial value of t parameter for 1D ridges in x direction (relative amplitude of tail), for details see html manual and references ; Definition at line 68 of file TSpectrum2Fit.h. ◆ fTxyCalc. Double_t TSpectrum2Fit::fTxyCalc. protected . calculated value of t parameter for 2D peaks ; Definition at line 63 of file TSpectrum2Fit.h. ◆ fTxyErr. Double_t TSpectrum2Fit::fTxyErr. protected . error value of t parameter for 2D peaks ; Definition at line 64 of file TSpectrum2Fit.h. ◆ fTxyInit. Double_t TSpectrum2Fit::fTxyInit. protected . initial value of t parameter for 2D peaks (relative amplitude of tail), for details see html manual and references ; Definition at line 62 of file TSpectrum2Fit.h. ◆ fTyCalc. Double_t TSpectrum2Fit::fTyCalc. protected . calculated value of t parameter for 1D ridges in y direction ; Definition at line 72 of file TSpectrum2Fit.h. ◆ fTyErr. Double_t TSpect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:93917,error,error,93917,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,1,['error'],['error']
Availability,"ed ; (; ); const. Get list of enabled packages Returns a pointer to a TList object, transferring ownership to the caller. ; Definition at line 644 of file TPackMgr.cxx. ◆ GetLock(). TLockPath * TPackMgr::GetLock ; (; ). inline . Definition at line 65 of file TPackMgr.h. ◆ GetMD5(). TMD5 * TPackMgr::GetMD5 ; (; const char * ; pack). Get MD5 checksum of the PAR file corresponding to given package Returns a pointer to a TMD5 object, transferring ownership to the caller. ; Definition at line 692 of file TPackMgr.cxx. ◆ GetName(). const char * TPackMgr::GetName ; (; ); const. inlineoverridevirtual . Returns name of object. ; This default method returns the class name. Classes that give objects a name should override this method. ; Reimplemented from TNamed.; Definition at line 61 of file TPackMgr.h. ◆ GetPackDir(). Int_t TPackMgr::GetPackDir ; (; const char * ; pack, . TString & ; pdir . ). Method to get the path of the dir for package 'pack'. ; Return -1 in case of error (not found), 0 otherwise ; Definition at line 487 of file TPackMgr.cxx. ◆ GetPackMgr(). TPackMgr * TPackMgr::GetPackMgr ; (; const char * ; pack, . TPackMgr * ; packmgr = nullptr . ). static . Get the package manager having 'pack'; priority is given to packmgr, if defined. ; Returns packmgr or nullptr ; Definition at line 912 of file TPackMgr.cxx. ◆ GetParPath(). Int_t TPackMgr::GetParPath ; (; const char * ; pack, . TString & ; path . ). Method to get the path of the PAR file for package 'pack'. ; Return -1 in case of error (not found), 0 otherwise ; Definition at line 521 of file TPackMgr.cxx. ◆ GetTitle(). const char * TPackMgr::GetTitle ; (; ); const. inlineoverridevirtual . Returns title of object. ; This default method returns the class title (i.e. description). Classes that give objects a title should override this method. ; Reimplemented from TNamed.; Definition at line 63 of file TPackMgr.h. ◆ Has(). Bool_t TPackMgr::Has ; (; const char * ; pack). Method to check if this package manager has pack",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPackMgr.html:18934,error,error,18934,doc/master/classTPackMgr.html,https://root.cern,https://root.cern/doc/master/classTPackMgr.html,1,['error'],['error']
Availability,"ed Description; Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit. ; The error is estimated also using the correlations values obtained from the fit; run the macro doing:; .x ErrorIntegral.C; After having computed the integral and its error using the integral and the integral error using the generic functions TF1::Integral and TF1::IntegralError, we compute the integrals and its error analytically using the fact that the fitting function is \( f(x) = p[1]* sin(p[0]*x) \).; Therefore we have:; integral in [0,1] : ic = p[1]* (1-std::cos(p[0]) )/p[0]; derivative of integral with respect to p0: c0c = p[1] * (std::cos(p[0]) + p[0]*std::sin(p[0]) -1.)/p[0]/p[0]; derivative of integral with respect to p1: c1c = (1-std::cos(p[0]) )/p[0]. and then we can compute the integral error using error propagation and the covariance matrix for the parameters p obtained from the fit.; integral error : sic = std::sqrt( c0c*c0c * covMatrix(0,0) + c1c*c1c * covMatrix(1,1) + 2.* c0c*c1c * covMatrix(0,1)); Note that, if possible, one should fit directly the function integral, which are the number of events of the different components (e.g. signal and background). In this way one obtains a better and more correct estimate of the integrals uncertainties, since they are obtained directly from the fit without using the approximation of error propagation. This is possible in ROOT. when using the TF1NormSum class, see the tutorial fitNormSum.C. ; ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 49.5952; NDf = 48; Edm = 1.61787e-06; NCalls = 58; p0 = 3.13205 +/- 0.0312726 ; p1 = 29.7625 +/- 1.00876 ; Covariance matrix from the fit ; 2x2 matrix is as follows; ; | 0 | 1 |; -------------------------------; 0 | 0.000978 0.009147 ; 1 | 0.009147 1.018 ; ; Integral = 19.0047 +/- 0.616472; ; #include ""TF1.h""; #include ""TH1D.h""; #include ""TFitResult.h""; #include ""TMath.h""; #include <cassert>; #inclu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ErrorIntegral_8C.html:1163,error,error,1163,doc/master/ErrorIntegral_8C.html,https://root.cern,https://root.cern/doc/master/ErrorIntegral_8C.html,1,['error'],['error']
Availability,"ed Every valid server socket is added to the TROOT sockets list which will make sure that any open sockets are properly closed on program termination. ; Definition at line 76 of file TServerSocket.cxx. ◆ ~TServerSocket(). TServerSocket::~TServerSocket ; (; ). virtual . Destructor: cleanup authentication stuff (if any) and close. ; Definition at line 162 of file TServerSocket.cxx. Member Function Documentation. ◆ Accept(). TSocket * TServerSocket::Accept ; (; UChar_t ; opt = 0). virtual . Accept a connection on a server socket. ; Returns a full-duplex communication TSocket object. If no pending connections are present on the queue and nonblocking mode has not been enabled with SetOption(kNoBlock,1) the call blocks until a connection is present. The returned socket must be deleted by the user. The socket is also added to the TROOT sockets list which will make sure that any open sockets are properly closed on program termination. In case of error 0 is returned and in case non-blocking I/O is enabled and no connections are available -1 is returned.; The opt can be used to require client authentication; valid options are; kSrvAuth = require client authentication kSrvNoAuth = force no client authentication; Example: use Opt = kSrvAuth to require client authentication.; Default options are taken from fgAcceptOpt and are initially equivalent to kSrvNoAuth; they can be changed with the static method TServerSocket::SetAcceptOptions(Opt). The active defaults can be visualized using the static method TServerSocket::ShowAcceptOptions(). ; Reimplemented in TPServerSocket.; Definition at line 204 of file TServerSocket.cxx. ◆ Authenticate(). Bool_t TServerSocket::Authenticate ; (; TSocket * ; sock). private . Check authentication request from the client on new open connection. ; Definition at line 300 of file TServerSocket.cxx. ◆ Class(). static TClass * TServerSocket::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TServerSocket::Cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTServerSocket.html:22503,error,error,22503,doc/master/classTServerSocket.html,https://root.cern,https://root.cern/doc/master/classTServerSocket.html,2,"['avail', 'error']","['available', 'error']"
Availability,"ed It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to call this method to let RWebWindowsManager correctly recognize such situation. ; Definition at line 117 of file RWebWindowsManager.cxx. ◆ ClearServerLocations(). void RWebWindowsManager::ClearServerLocations ; (; ). static . Clear all server locations Does not change configuration of already running HTTP server. ; Definition at line 239 of file RWebWindowsManager.cxx. ◆ CreateServer(). bool RWebWindowsManager::CreateServer ; (; bool ; with_http = false). private . Creates http server, if required - with real http engine (civetweb) One could configure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ; WebGui.HttpPort: 8088; or specify range of http ports, which can be used: WebGui.HttpPortMin: 8800; WebGui.HttpPortMax: 9800; By default range [8800..9800] is used; One also can bind HTTP server socket to loopback address, In that case only connection from localhost will be available: WebGui.HttpLoopback: yes; Or one could specify hostname which should be used for binding of server socket WebGui.HttpBind: hostname | ipaddress; To use secured protocol, following parameter should be specified WebGui.UseHttps: yes; WebGui.ServerCert: sertificate_filename.pem; Alternatively, one can specify unix socket to handle requests: WebGui.UnixSocket: /path/to/unix/socket; WebGui.UnixSocketMode: 0700; Typically one used unix sockets together with server mode like root --web=server:/tmp/root.socket and then redirect it via ssh tunnel (e.g. using rootssh) to client node; All incoming requests processed in THttpServer in timer handler with 10 ms timeout. One may decrease value to improve latency or increase value to minimize CPU load WebGui.HttpTimer: 10; To processing incoming http requests and websockets, THttpServer allocate 10 threads One have to increase this number if more simultaneous connections are expected: Web",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:9332,avail,available,9332,doc/master/classROOT_1_1RWebWindowsManager.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html,1,['avail'],['available']
Availability,"ed TDSetElements in *listOfMissingFiles if the latter is defined (the list must be created outside). ; Definition at line 1605 of file TDSet.cxx. ◆ Next(). TDSetElement * TDSet::Next ; (; Long64_t ; totalEntries = -1). virtual . Returns next TDSetElement. ; Reimplemented in TDSetProxy.; Definition at line 413 of file TDSet.cxx. ◆ operator=(). void TDSet::operator= ; (; const TDSet & ; ). private . ◆ Print(). void TDSet::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print TDSet basic or full data. When option=""a"" print full data. ; Reimplemented from TObject.; Definition at line 1008 of file TDSet.cxx. ◆ Process() [1/2]. Long64_t TDSet::Process ; (; const char * ; selector, . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; first = 0, . TObject * ; enl = 0 . ). virtual . Process TDSet on currently active PROOF session. ; The last argument 'enl' specifies an entry- or event-list to be used as event selection. The return value is -1 in case of error and TSelector::GetStatus() in in case of success. ; Definition at line 944 of file TDSet.cxx. ◆ Process() [2/2]. Long64_t TDSet::Process ; (; TSelector * ; selector, . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; first = 0, . TObject * ; enl = 0 . ). virtual . Process TDSet on currently active PROOF session. ; The last argument 'enl' specifies an entry- or event-list to be used as event selection. The return value is -1 in case of error and TSelector::GetStatus() in in case of success. ; Definition at line 919 of file TDSet.cxx. ◆ Remove(). Int_t TDSet::Remove ; (; TDSetElement * ; elem, . Bool_t ; deleteElem = kTRUE . ). Remove TDSetElement 'elem' from the list. ; Return 0 on success, -1 if the element is not in the list ; Definition at line 1576 of file TDSet.cxx. ◆ Reset(). void TDSet::Reset ; (; ). virtual . Reset or initialize access to the elements. ; Reimplemented in TDSetProxy.; Definition at line 1369 of file TDSet.cxx. ◆ SetDirectory(). void TDSet::SetDirect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDSet.html:26876,error,error,26876,doc/master/classTDSet.html,https://root.cern,https://root.cern/doc/master/classTDSet.html,1,['error'],['error']
Availability,"ed as the default one in the header file.; if option """" is specified the histogram errors are simply the sqrt of its content; if option ""B"" is specified, the content of bin of the returned histogram; will be equal to the GetBinEntries(bin) of the profile,; if option ""C=E"" the bin contents of the projection are set to the; bin errors of the profile; if option ""W"" is specified the bin content of the projected histogram is set to the; product of the bin content of the profile and the entries.; With this option the returned histogram will be equivalent to the one obtained by; filling directly a TH2D using the 3-rd value as a weight.; This option makes sense only for profile filled with all weights =1.; When the profile is weighted (filled with weights different than 1) the; bin error of the projected histogram (obtained using this option ""W"") cannot be; correctly computed from the information stored in the profile. In that case the; obtained histogram contains as bin error square the weighted sum of the square of the; profiled observable (TProfile2D::fSumw2[bin] ). TProfile * ProfileX(const char* name = ""_pfx"", Int_t firstybin = 0, Int_t lastybin = -1, Option_t* option = """") const; *-*-*-*-*Project a 2-D histogram into a profile histogram along X*-*-*-*-*-*; *-* ========================================================. The projection is made from the channels along the Y axis; ranging from firstybin to lastybin included.; The result is a 1D profile which contains the combination of all the considered bins along Y; By default, bins 1 to ny are included; When all bins are included, the number of entries in the projection; is set to the number of entries of the 2-D histogram, otherwise; the number of entries is incremented by 1 for all non empty cells. The option can also be used to specify the projected profile error type.; Values which can be used are 's', 'i', or 'g'. See TProfile::BuildOptions for details. TProfile * ProfileY(const char* name = ""_pfy"", Int_t firstxbin =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProfile2D.html:41391,error,error,41391,root/html534/TProfile2D.html,https://root.cern,https://root.cern/root/html534/TProfile2D.html,6,['error'],['error']
Availability,"ed as the default one in the header file.; if option """" is specified the histogram errors are simply the sqrt of its content; if option ""B"" is specified, the content of bin of the returned histogram; will be equal to the GetBinEntries(bin) of the profile,; if option ""C=E"" the bin contents of the projection are set to the; bin errors of the profile; if option ""W"" is specified the bin content of the projected histogram is set to the; product of the bin content of the profile and the entries.; With this option the returned histogram will be equivalent to the one obtained by; filling directly a TH2D using the 3-rd value as a weight.; This option makes sense only for profile filled with all weights =1.; When the profile is weighted (filled with weights different than 1) the; bin error of the projected histogram (obtained using this option ""W"") cannot be; correctly computed from the information stored in the profile. In that case the; obtained histogram contains as bin error square the weighted sum of the square of the; profiled observable (TProfile2D::fSumw2[bin] ). TProfile2D * Project3DProfile(Option_t* option = ""xy"") const; *-*-*-*-*Project a 3-D profile into a 2D-profile histogram depending; on the option parameter; option may contain a combination of the characters x,y,z; option = ""xy"" return the x versus y projection into a TProfile2D histogram; option = ""yx"" return the y versus x projection into a TProfile2D histogram; option = ""xz"" return the x versus z projection into a TProfile2D histogram; option = ""zx"" return the z versus x projection into a TProfile2D histogram; option = ""yz"" return the y versus z projection into a TProfile2D histogram; option = ""zy"" return the z versus y projection into a TProfile2D histogram; NB: the notation ""a vs b"" means ""a"" vertical and ""b"" horizontalalong X*-*-*-*-*-*. The resulting profile contains the combination of all the considered bins along X; By default, all bins are included considering also underflow/overflows. The option can",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProfile3D.html:40872,error,error,40872,root/html534/TProfile3D.html,https://root.cern,https://root.cern/root/html534/TProfile3D.html,6,['error'],['error']
Availability,"ed at any time. The new imported style in; the ROOT session will become the selected one. Import a style (from a canvas):; You can do that selecting the Style menu/Import from.../Canvas or; the corresponding Tool bar button. A new style will be created in the; ROOT session and will become the selected one. This style is a clone; of the gStyle with modified values as they are set in the currently; selected canvas. You can import a style from any canvas and apply it; later on some objects. Export a style (in a C++ macro file):; To store a style longer than for the current ROOT session you can; save it in a C++ macro file. This can be done via the menu or the; tool bar button. There is a naming convention for the style macros:; the name must be 'Style_*.C', where * can be replaced by anything; you want. Delete a style:; The selected style can be deleted from the list when you use the; Style menu/Delete or the corresponding tool bar button. The selected; style is removed from the list of all available styles for the; current ROOT session. WARRNING: it will be lost if you didn't saved; it in a C++ macro file before its deletion. Also, you cannot delete; the selected style if it is set to gStyle. A message 'Can not delete; gStyle' will be displayed on the CINT prompt. /*. */. Editor's buttons:; Open / close the style editor:; The button 'Edit >>' opens the style editor and its label changes to; 'Close <<'. For all details of what can be changed and how please see; the provided Help. Reset a style (to a previously saved state):; When the editor is opened, the 'Reset' button allows you to reset; the values of the selected style for editing. Doing that you cancel; all changes made since the last time you saved that style in a macro.; If the selected style is one of the five ROOT styles (Plain, Bold,; Video, Pub or Default), it will be recreated. Update the preview:; The button 'Update Preview' is available when a preview is shown and; the run time option is not selected. Thi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TStyleManager.html:3273,avail,available,3273,root/html528/TStyleManager.html,https://root.cern,https://root.cern/root/html528/TStyleManager.html,10,['avail'],['available']
Availability,"ed but there is reason to believe that they may not be; accurate. If no mitigating adjective is given, then at least MINUIT believes the; errors are accurate, although there is always a small chance that MINUIT; has been fooled. Some visible signs that MINUIT may have been fooled are:. Warning messages produced during the minimization or error analysis.; Failure to find new minimum.; Value of EDM too big (estimated Distance to Minimum).; Correlation coefficients exactly equal to zero, unless some parameters; are known to be uncorrelated with the others.; Correlation coefficients very close to one (greater than 0.99). This; indicates both an exceptionally difficult problem, and one which has been; badly parameterized so that individual errors are not very meaningful; because they are so highly correlated.; Parameter at limit. This condition, signalled by a MINUIT warning; message, may make both the function minimum and parameter errors; unreliable. See the discussion above ``Getting the right parameter errors; with limits''. The best way to be absolutely sure of the errors, is to use; ``independent'' calculations and compare them, or compare the calculated; errors with a picture of the function. Theoretically, the covariance; matrix for a ``physical'' function must be positive-definite at the; minimum, although it may not be so for all points far away from the; minimum, even for a well-determined physical problem. Therefore, if MIGRAD; reports that it has found a non-positive-definite covariance matrix, this; may be a sign of one or more of the following:. A non-physical region:. On its way to the minimum, MIGRAD may have traversed a region which has; unphysical behaviour, which is of course not a serious problem as long as; it recovers and leaves such a region. An underdetermined problem:. If the matrix is not positive-definite even at the minimum, this may mean; that the solution is not well-defined, for example that there are more; unknowns than there are data poi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMinuit.html:9406,error,errors,9406,root/html528/TMinuit.html,https://root.cern,https://root.cern/root/html528/TMinuit.html,10,['error'],['errors']
Availability,"ed by TInterpreter::EErrorCode. If padUpdate is true (default) update the current pad. Returns the macro return value. ; Definition at line 2316 of file TROOT.cxx. ◆ MakeDefCanvas(). TCanvas * TROOT::MakeDefCanvas ; (; ); const. Return a default canvas. ; Definition at line 1554 of file TROOT.cxx. ◆ Message(). void TROOT::Message ; (; Int_t ; id, . const TObject * ; obj . ). Process message id called by obj. ; Definition at line 2350 of file TROOT.cxx. ◆ MustClean(). Bool_t TROOT::MustClean ; (; ); const. inline . Definition at line 296 of file TROOT.h. ◆ operator new() [1/2]. void * TROOT::operator new ; (; size_t ; l). inlineprotected . Definition at line 178 of file TROOT.h. ◆ operator new() [2/2]. void * TROOT::operator new ; (; size_t ; l, . void * ; ptr . ). inlineprotected . Definition at line 179 of file TROOT.h. ◆ operator=(). TROOT & TROOT::operator= ; (; const TROOT & ; ). privatedelete . ◆ ProcessLine(). Longptr_t TROOT::ProcessLine ; (; const char * ; line, . Int_t * ; error = nullptr . ). Process interpreter command via TApplication::ProcessLine(). ; On Win32 the line will be processed asynchronously by sending it to the CINT interpreter thread. For explicit synchronous processing use ProcessLineSync(). On non-Win32 platforms there is no difference between ProcessLine() and ProcessLineSync(). The possible error codes are defined by TInterpreter::EErrorCode. In particular, error will equal to TInterpreter::kProcessing until the CINT interpreted thread has finished executing the line. Returns the result of the command, cast to a Longptr_t. ; Definition at line 2370 of file TROOT.cxx. ◆ ProcessLineFast(). Longptr_t TROOT::ProcessLineFast ; (; const char * ; line, . Int_t * ; error = nullptr . ). Process interpreter command directly via CINT interpreter. ; Only executable statements are allowed (no variable declarations), In all other cases use TROOT::ProcessLine(). The possible error codes are defined by TInterpreter::EErrorCode. ; Definition at line 2407",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTROOT.html:69716,error,error,69716,doc/v632/classTROOT.html,https://root.cern,https://root.cern/doc/v632/classTROOT.html,2,['error'],['error']
Availability,"ed by a constant \(\beta\), then the errors will be decreased by a factor \(\sqrt{\beta}\). Additive constants do not change the parameter errors, but may imply a different goodness-of-fit confidence level.; Assuming that the user knows what the normalization of his \(\mbox{FCN}\) means, and also that he is interested in parameter errors, the user can change the error definition which allows him to define what he means by one “error”, in terms of the change in the \(\mbox{FCN}\) value which should be caused by changing one parameter by one “error”. If the \(\mbox{FCN}\) is the usual chisquare function (defined below) and if the user wants the usual one-standard-deviation errors, then the error definition (return value of the FCNBase::up() method, see [howto:errordef]) should be \(1.0\). If the \(\mbox{FCN}\) is a negative-log-likelihood function, then the one-standard-deviation value for FCNBase::up() to return is \(0.5\). If the \(\mbox{FCN}\) is a chisquare, but the user wants two-standard-deviation errors, then FCNBase::up() should return \(= 4.0\), etc.; Note that in the usual case where M is being used to perform a fit to some experimental data, the parameter errors will be proportional to the uncertainty in the data, and therefore meaningful parameter errors cannot be obtained unless the measurement errors of the data are known. In the common case of a least-squares fit, \(\mbox{FCN}\) is usually defined as a chisquare:; \[\chi^2 (\alpha) = \sum_{i=1}^{n} (\frac{f(x_i,\alpha) - m_i)^2}{\sigma_i^2}\]; where \(\alpha\) is the vector of free parameters being fitted, and the \(\sigma_i\) are the uncertainties in the individual measurements \(m_i\). If these uncertainties are not known, and are simply left out of the calculation, then the fit may still have meaning, but not the quantitative values of the resulting parameter errors. (Only the relative errors of different parameters with respect to each other may be meaningful.); If the \(\sigma_i\) are all overestim",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:19676,error,errors,19676,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['error'],['errors']
Availability,"ed by url. XrdClientAdmin * Connect(const char* url); Init a connection to the server.; Returns a pointer to the appropriate instance of XrdClientAdmin or 0; in case of failure. void InitXrdClient(); One-time initialization of some communication variables for xrootd protocol. void* OpenDirectory(const char* dir); Open a directory. Returns a non-zero pointer (with no special; purpose) in case of success, 0 in case of error. void FreeDirectory(void* dirp); Free(Close) the directory referenced by dirp. Int_t MakeDirectory(const char* dir); Create a directory. Return 0 on success, -1 otherwise. const char* GetDirEntry(void* dirp); Get directory entry for directory referenced by dirp.; Returns 0 in case there are no more entries. Int_t GetPathInfo(const char* path, FileStat_t& buf); Get info about a file. Info is returned in the form of a FileStat_t; structure (see TSystem.h).; The function returns 0 in case of success and 1 if the file could; not be stat'ed.; NOTICE: Not all information is available with an xrootd server. Bool_t ConsistentWith(const char* path, void* dirptr); Check consistency of this helper with the one required; by 'path' or 'dirptr'. Bool_t AccessPathName(const char* path, EAccessMode mode); Returns FALSE if one can access a file using the specified access mode.; NB: for the time being mode is ignored for XROOTD (just checks existence; of the file or directory).; Mode is the same as for the Unix access(2) function.; Attention, bizarre convention of return value!!. int Unlink(const char* path); Unlink 'path' on the remote server system.; Returns 0 on success, -1 otherwise. Bool_t IsOnline(const char* path); Check if the file defined by 'path' is ready to be used. Bool_t Prepare(const char* path, UChar_t opt = 8, UChar_t prio = 0); Issue a prepare request for file defined by 'path'. Int_t Prepare(TCollection* paths, UChar_t opt = 8, UChar_t prio = 0, TString* buf = 0); Issue a prepare request for a list of files defined by 'paths', which must; be of one",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXNetSystem.html:21367,avail,available,21367,root/html528/TXNetSystem.html,https://root.cern,https://root.cern/root/html528/TXNetSystem.html,10,['avail'],['available']
Availability,"ed collections. Next figure shows the inheritance hierarchy for the primary collection classes. All primary collection classes derive from the abstract base class TCollection. The inheritance hierarchy of the primary collection classes. 16.1.4 Ordered Collections (Sequences); Sequences are collections that are externally ordered because they maintain internal elements according to the order in which they were added. The following sequences are available:. TList; THashList; TOrdCollection; TObjArray; TClonesArray. The TOrdCollection, TObjArray as well as the TClonesArray can be sorted using their Sort() member function (for this, the stored objects must provide a comparison function by overriding TObject::Compare() and also must enable sorting by overriding TObject::IsSortable() to return true). Ordered collections all derive from the abstract base class TSeqCollection. Sorted collections are ordered by an internal (automatic) sorting mechanism. The following sorted collections are available (the stored items must be sortable):. TSortedList; TBtree. Unordered collections don’t maintain the order in which the elements were added, i.e. when you iterate over an unordered collection, you are not likely to retrieve elements in the same order they were added to the collection. The following unordered collections are available:. THashTable; TMap. 16.2 Iterators: Processing a Collection; The concept of processing all the members of a collection is generic, i.e. independent of any specific representation of a collection. To process each object in a collection one needs some type of cursor that is initialized and then steps over each member of the collection in turn. Collection objects could provide this service but there is a snag: as there is only one collection object per collection there would only be one cursor. Instead, to permit the use of as many cursors as required, they are made separate classes called iterator. For each collection class there is an associated iterato",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:843535,avail,available,843535,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['avail'],['available']
Availability,"ed colormap. ;  ; Bool_t PointInRegion (Int_t x, Int_t y, Region_t reg) override;  Returns kTRUE if the point [x, y] is contained in the region reg. ;  ; Region_t PolygonRegion (Point_t *points, Int_t np, Bool_t winding) override;  Returns a region for the polygon defined by the points array. ;  ; void PutImage (Drawable_t id, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Combines an image with a rectangle of the specified drawable. ;  ; void PutPixel (Drawable_t id, Int_t x, Int_t y, ULong_t pixel) override;  Overwrites the pixel in the image with the specified pixel value. ;  ; void QueryColor (Colormap_t cmap, ColorStruct_t &color) override;  Returns the current RGB value for the pixel in the ""color"" structure. ;  ; void QueryPointer (Int_t &ix, Int_t &iy) override;  Returns the pointer position. ;  ; void QueryPointer (Window_t id, Window_t &rootw, Window_t &childw, Int_t &root_x, Int_t &root_y, Int_t &win_x, Int_t &win_y, UInt_t &mask) override;  Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ;  ; void RaiseWindow (Window_t id) override;  Raises the specified window to the top of the stack so that no sibling window obscures it. ;  ; void ReadGIF (Int_t x0, Int_t y0, const char *file);  ; Bool_t ReadPictureDataFromFile (const char *filename, char ***ret_data) override;  Reads picture data from file ""filename"" and store it in ""ret_data"". ;  ; void RemoveWindow (ULongptr_t qwid) override;  Removes the created by Qt window ""qwid"". ;  ; void ReparentWindow (Window_t id, Window_t pid, Int_t x, Int_t y) override;  If the specified window is mapped, ReparentWindow automatically performs an UnmapWindow request on it, removes it from its current position in the hierarchy, and inserts it as the child of the specified parent. ;  ; Int_t RequestLocator (Int_t mode, Int_t ctyp, Int_t &x, Int_t &y) override;  Requests Locator position. ;  ; Int_t Request",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32VirtualXProxy.html:19278,mask,mask,19278,doc/master/classTGWin32VirtualXProxy.html,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html,1,['mask'],['mask']
Availability,"ed for binary Classifications where y = {+1,-1} for (sig,bkg) ; Definition at line 302 of file RuleFitParams.cxx. ◆ MakeGDPath(). void TMVA::RuleFitParams::MakeGDPath ; (; ). The following finds the gradient directed path in parameter space. ; More work is needed... FT, 24/9/2006; The algorithm is currently as follows (if not otherwise stated, the sample used below is [fPathIdx1,fPathIdx2]):. Set offset to -average(y(true)) and all coefs=0 => average of F(x)==0; FindGDTau() : start scanning using several paths defined by different tau choose the tau yielding the best path; start the scanning the chosen path; check error rate at a given frequency data used for check: [fPerfIdx1,fPerfIdx2]; stop when either of the following conditions are fullfilled:; loop index==fGDNPathSteps; error > fGDErrScale*errmin; only in DEBUG mode: risk is not monotonously decreasing. The algorithm will warn if:; the error rate was still decreasing when loop finished -> increase fGDNPathSteps!; minimum was found at an early stage -> decrease fGDPathStep; DEBUG: risk > previous risk -> entered chaotic region (regularization is too small) . Definition at line 538 of file RuleFitParams.cxx. ◆ MakeGradientVector(). void TMVA::RuleFitParams::MakeGradientVector ; (; ). protected . make gradient vector ; Definition at line 1375 of file RuleFitParams.cxx. ◆ MakeTstGradientVector(). void TMVA::RuleFitParams::MakeTstGradientVector ; (; ). protected . make test gradient vector for all tau same algorithm as MakeGradientVector() ; Definition at line 1259 of file RuleFitParams.cxx. ◆ Optimism(). Double_t TMVA::RuleFitParams::Optimism ; (; ). protected . implementation of eq. ; 7.17 in Hastie,Tibshirani & Friedman book this is the covariance between the estimated response yhat and the true value y. NOT REALLY SURE IF THIS IS CORRECT! — THIS IS NOT USED — ; Definition at line 925 of file RuleFitParams.cxx. ◆ Penalty(). Double_t TMVA::RuleFitParams::Penalty ; (; ); const. This is the ""lasso"" penalty To be use",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleFitParams.html:15268,error,error,15268,doc/master/classTMVA_1_1RuleFitParams.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleFitParams.html,1,['error'],['error']
Availability,"ed for read events. ;  ; TFdSet * fWriteready {nullptr};  Files with reads waiting. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TUnixSystem.h>. Inheritance diagram for TUnixSystem:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TUnixSystem(). TUnixSystem::TUnixSystem ; (; ). Definition at line 575 of file TUnixSystem.cxx. ◆ ~TUnixSystem(). TUnixSystem::~TUnixSystem ; (; ). virtual . Reset to original state. ; Definition at line 581 of file TUnixSystem.cxx. Member Function Documentation. ◆ Abort(). void TUnixSystem::Abort ; (; int ; code = 0). overridevirtual . Abort the application. ; Reimplemented from TSystem.; Definition at line 2202 of file TUnixSystem.cxx. ◆ AcceptConnection(). int TUnixSystem::AcceptConnection ; (; int ; sock). overridevirtual . Accept a connection. ; In case of an error return -1. In case non-blocking I/O is enabled and no connections are available return -2. ; Reimplemented from TSystem.; Definition at line 3276 of file TUnixSystem.cxx. ◆ AccessPathName(). Bool_t TUnixSystem::AccessPathName ; (; const char * ; path, . EAccessMode ; mode = kFileExists . ). overridevirtual . Returns FALSE if one can access a file using the specified access mode. ; Mode is the same as for the Unix access(2) function. Attention, bizarre convention of return value!! ; Reimplemented from TSystem.; Definition at line 1579 of file TUnixSystem.cxx. ◆ AddDynamicPath(). void TUnixSystem::AddDynamicPath ; (; const char * ; lib). overridevirtual . Add a new directory to the dynamic path. ; Reimplemented from TSystem.; Definition at line 4725 of file TUnixSystem.cxx. ◆ AddFileHandler(). void TUnixSystem::AddFileHandler ; (; TFileHandler * ; h). overridevirtual . Add a file handler to the list of system file handlers. ; Only adds the handler if it is not already in the list of file handlers. ; Reimplemented from TSystem.; Definiti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnixSystem.html:38485,avail,available,38485,doc/master/classTUnixSystem.html,https://root.cern,https://root.cern/doc/master/classTUnixSystem.html,1,['avail'],['available']
Availability,"ed from TH1, eg TProfile, TProfile2D. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TArray; Bool_t BoundsOk (const char *where, Int_t at) const;  ; Bool_t OutOfBoundsError (const char *where, Int_t i) const;  Generate an out-of-bounds error. Always returns false. ;  . Protected Attributes; TArrayD fBinEntries;  number of entries per bin ;  ; TArrayD fBinSumw2;  Array of sum of squares of weights per bin. ;  ; EErrorType fErrorMode;  Option to compute errors. ;  ; Bool_t fScaling;  ! True when TProfile::Scale is called ;  ; Double_t fTsumwy;  Total Sum of weight*Y. ;  ; Double_t fTsumwy2;  Total Sum of weight*Y*Y. ;  ; Double_t fYmax;  Upper limit in Y (if set) ;  ; Double_t fYmin;  Lower limit in Y (if set) ;  ;  Protected Attributes inherited from TH1; Short_t fBarOffset;  (1000*offset) for bar charts or legos ;  ; Short_t fBarWidth;  (1000*width) for bar charts or legos ;  ; EBinErrorOpt fBinStatErrOpt;  Option for bin statistical errors. ;  ; Double_t * fBuffer;  [fBufferSize] entry buffer ;  ; Int_t fBufferSize;  fBuffer size ;  ; TArrayD fContour;  Array to display contour levels. ;  ; Int_t fDimension;  ! Histogram dimension (1, 2 or 3 dim) ;  ; TDirectory * fDirectory;  ! Pointer to directory holding this histogram ;  ; Double_t fEntries;  Number of entries. ;  ; TList * fFunctions;  ->Pointer to list of functions (fits and user) ;  ; Double_t * fIntegral;  ! Integral of bins used by GetRandom ;  ; Double_t fMaximum;  Maximum value for plotting. ;  ; Double_t fMinimum;  Minimum value for plotting. ;  ; Int_t fNcells;  Number of bins(1D), cells (2D) +U/Overflows. ;  ; Double_t fNormFactor;  Normalization factor. ;  ; TString fOption;  Histogram options. ;  ; TVirtualHistPainter * fPainter;  ! Pointer to histogram painter ;  ; EStatOverflows fStatOverf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile.html:51160,error,errors,51160,doc/master/classTProfile.html,https://root.cern,https://root.cern/doc/master/classTProfile.html,1,['error'],['errors']
Availability,"ed from TH1.; Definition at line 330 of file TH1.cxx. ◆ Integral() [4/4]. Double_t TH3::Integral ; (; Option_t * ; option = """"); const. overridevirtual . Return integral of bin contents. ; Only bins in the bins range are considered. By default the integral is computed as the sum of bin contents in the range. if option ""width"" is specified, the integral is the sum of the bin contents multiplied by the bin width in x, y and in z. ; Reimplemented from TH1.; Definition at line 1390 of file TH3.cxx. ◆ IntegralAndError() [1/2]. Double_t TH1::IntegralAndError ; (; Int_t ; binx1, . Int_t ; binx2, . Double_t & ; error, . Option_t * ; option = """" . ); const. privatevirtual . Return integral of bin contents in range [binx1,binx2] and its error. ; By default the integral is computed as the sum of bin contents in the range. if option ""width"" is specified, the integral is the sum of the bin contents multiplied by the bin width in x. the error is computed using error propagation from the bin errors assuming that all the bins are uncorrelated ; Reimplemented from TH1.; Definition at line 332 of file TH1.cxx. ◆ IntegralAndError() [2/2]. Double_t TH3::IntegralAndError ; (; Int_t ; binx1, . Int_t ; binx2, . Int_t ; biny1, . Int_t ; biny2, . Int_t ; binz1, . Int_t ; binz2, . Double_t & ; error, . Option_t * ; option = """" . ); const. virtual . Return integral of bin contents in range [binx1,binx2],[biny1,biny2],[binz1,binz2] for a 3-D histogram. ; Calculates also the integral error using error propagation from the bin errors assuming that all the bins are uncorrelated. By default the integral is computed as the sum of bin contents in the range. if option ""width"" is specified, the integral is the sum of the bin contents multiplied by the bin width in x, y and in z. ; Definition at line 1421 of file TH3.cxx. ◆ Interpolate() [1/3]. Double_t TH3::Interpolate ; (; Double_t ; x); const. overrideprotectedvirtual . Not yet implemented. ; Reimplemented from TH1.; Definition at line 1431 of file ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3.html:86756,error,error,86756,doc/master/classTH3.html,https://root.cern,https://root.cern/doc/master/classTH3.html,3,['error'],"['error', 'errors']"
Availability,"ed from TH3;  ~TH3 () override;  Destructor. ;  ; void FillRandom (const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr) override;  Fill histogram following distribution in function fname. ;  ; void FillRandom (TH1 *h, Int_t ntimes=5000, TRandom *rng=nullptr) override;  Fill histogram following distribution in histogram h. ;  ; virtual void FitSlicesZ (TF1 *f1=nullptr, Int_t binminx=1, Int_t binmaxx=0, Int_t binminy=1, Int_t binmaxy=0, Int_t cut=0, Option_t *option=""QNR"");  Project slices along Z in case of a 3-D histogram, then fit each slice with function f1 and make a 2-d histogram for each fit parameter Only cells in the bin range [binminx,binmaxx] and [binminy,binmaxy] are considered. ;  ; Int_t GetBin (Int_t binx, Int_t biny, Int_t binz) const override;  See comments in TH1::GetBin. ;  ; virtual Double_t GetBinErrorLow (Int_t bin) const;  Return lower error associated to bin number bin. ;  ; virtual Double_t GetBinErrorLow (Int_t binx, Int_t biny, Int_t binz);  ; virtual Double_t GetBinErrorUp (Int_t bin) const;  Return upper error associated to bin number bin. ;  ; virtual Double_t GetBinErrorUp (Int_t binx, Int_t biny, Int_t binz);  ; virtual Double_t GetBinWithContent3 (Double_t c, Int_t &binx, Int_t &biny, Int_t &binz, Int_t firstx=0, Int_t lastx=0, Int_t firsty=0, Int_t lasty=0, Int_t firstz=0, Int_t lastz=0, Double_t maxdiff=0) const;  Compute first cell (binx,biny,binz) in the range [firstx,lastx](firsty,lasty][firstz,lastz] for which diff = abs(cell_content-c) <= maxdiff In case several cells in the specified range with diff=0 are found the first cell found is returned in binx,biny,binz. ;  ; virtual Double_t GetCorrelationFactor (Int_t axis1=1, Int_t axis2=2) const;  Return correlation factor between axis1 and axis2. ;  ; virtual Double_t GetCovariance (Int_t axis1=1, Int_t axis2=2) const;  Return covariance between axis1 and axis2. ;  ; virtual void GetRandom3 (Double_t &x, Double_t &y, Double_t &, TRandom *rng=nullptr);  Return 3 random number",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile3D.html:11390,error,error,11390,doc/master/classTProfile3D.html,https://root.cern,https://root.cern/doc/master/classTProfile3D.html,1,['error'],['error']
Availability,"ed from TNamed; TString fName;  ; TString fTitle;  . #include <TPackMgr.h>. Inheritance diagram for TPackMgr:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ECheckVersionOpt. enum TPackMgr::ECheckVersionOpt. EnumeratorkDontCheck ; kCheckROOT ; kCheckGIT . Definition at line 39 of file TPackMgr.h. Constructor & Destructor Documentation. ◆ TPackMgr() [1/2]. TPackMgr::TPackMgr ; (; const TPackMgr & ; ). private . ◆ TPackMgr() [2/2]. TPackMgr::TPackMgr ; (; const char * ; dir, . const char * ; key = ""L0"" . ). Create a PROOF package manager. ; Definition at line 49 of file TPackMgr.cxx. ◆ ~TPackMgr(). TPackMgr::~TPackMgr ; (; ). override . Destroy a TPackMgr instance. ; Definition at line 64 of file TPackMgr.cxx. Member Function Documentation. ◆ Build(). Int_t TPackMgr::Build ; (; const char * ; pack, . Int_t ; opt = TPackMgr::kCheckROOT . ). Method to build a package. ; Return -1 on error, 0 otherwise ; Definition at line 87 of file TPackMgr.cxx. ◆ Class(). static TClass * TPackMgr::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TPackMgr::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TPackMgr::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 106 of file TPackMgr.h. ◆ Clean(). Int_t TPackMgr::Clean ; (; const char * ; pack). Clean dir for package 'pack' Return -1 in case of error, 0 otherwise. ; Definition at line 576 of file TPackMgr.cxx. ◆ DeclFileName(). static const char * TPackMgr::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 106 of file TPackMgr.h. ◆ FindParPath(). Int_t TPackMgr::FindParPath ; (; TPackMgr * ; packmgr, . const char * ; pack, . TString & ; par . ). static . Get the full path to PAR, looking also in the global dirs. ; Returns -1 if not found, 0 if ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPackMgr.html:15919,error,error,15919,doc/master/classTPackMgr.html,https://root.cern,https://root.cern/doc/master/classTPackMgr.html,1,['error'],['error']
Availability,"ed from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGraphMultiErrors ();  TGraphMultiErrors default constructor. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title);  TGraphMultiErrors default constructor with name and title. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, const Double_t *x, const Double_t *y, const Double_t *exL=nullptr, const Double_t *exH=nullptr, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and a single y-error. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, const Float_t *x, const Float_t *y, const Float_t *exL=nullptr, const Float_t *exH=nullptr, const Float_t *eyL=nullptr, const Float_t *eyH=nullptr, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and a single y-error. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, Int_t ne, const Double_t *x, const Double_t *y, const Double_t *exL, const Double_t *exH, std::vector< std::vector< Double_t > > eyL, std::vector< std::vector< Double_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ;  ;  TGraphMultiErrors (const Char_t *name, const Char_t *title, Int_t np, Int_t ne, const Double_t *x, const Double_t *y, const Double_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors.html:4075,error,error,4075,doc/master/classTGraphMultiErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html,1,['error'],['error']
Availability,"ed from TSelector. ;  ; static bool IsStandardDraw (const char *selec);  Find out if this is a standard selection used for Draw actions (either TSelectorDraw, TProofDraw or deriving from them). ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; TTree * fChain;  . Protected Member Functions; Long64_t GenerateFiles (const char *filename, Long64_t sizenevents);  Generate files for IO-bound run Input parameters filename: The name of the file to be generated sizenevents: Either the number of events to generate when filetype==kPBFileBenchmark or the size of the file to generate when filetype==kPBFileCleanup Returns Either Number of entries in the file when filetype==kPBFileBenchmark or bytes written when filetype==kPBFileCleanup return 0 in case error. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Attributes; TString fBaseDir;  ; TList * fFilesGenerated;  ; TMacro * fGenerateFun;  ; Long64_t fNEvents;  ; Int_t fNTracks;  ; Int_t fNTracksMax;  ; Int_t fRegenerate;  ; TObject * fTotalGen;  . Additional Inherited Members;  Public Types inherited from TSelector; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelEventGen.html:11997,error,error,11997,doc/master/classTSelEventGen.html,https://root.cern,https://root.cern/doc/master/classTSelEventGen.html,1,['error'],['error']
Availability,"ed from TSocket.; Definition at line 189 of file TSSLSocket.cxx. ◆ RecvRaw(). Int_t TSSLSocket::RecvRaw ; (; void * ; buffer, . Int_t ; length, . ESendRecvOptions ; opt = kDefault . ). overridevirtual . Receive a raw buffer of specified length bytes. ; Reimplemented from TSocket.; Definition at line 198 of file TSSLSocket.cxx. ◆ Send() [1/4]. Int_t TSSLSocket::Send ; (; const char * ; str, . Int_t ; kind = kMESS_STRING . ). inlineoverridevirtual . Send a character string buffer. ; Use kind to set the TMessage ""what"" field. Returns the number of bytes in the string str that were sent and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented from TSocket.; Definition at line 73 of file TSSLSocket.h. ◆ Send() [2/4]. Int_t TSSLSocket::Send ; (; const TMessage & ; mess). overridevirtual . Send a TMessage object. ; Returns the number of bytes in the TMessage that were sent and -1 in case of error. In case the TMessage::What has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). support for streaming TStreamerInfo added by Rene Brun May 2008 support for streaming TProcessID added by Rene Brun June 2008 ; Reimplemented from TSocket.; Definition at line 254 of file TSSLSocket.cxx. ◆ Send() [3/4]. Int_t TSSLSocket::Send ; (; Int_t ; kind). inlineoverridevirtual . Send a single message opcode. ; Use kind (opcode) to set the TMessage ""what"" field. Returns the number of bytes that were sent (always sizeof(Int_t)) and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented from TSocket.; Definition at line",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSSLSocket.html:24120,error,error,24120,doc/master/classTSSLSocket.html,https://root.cern,https://root.cern/doc/master/classTSSLSocket.html,1,['error'],['error']
Availability,"ed from TVirtualX.; Definition at line 287 of file GX11Gui.cxx. ◆ MakeOpaqueColors(). void TGX11::MakeOpaqueColors ; (; Int_t ; percent, . ULong_t * ; orgcolors, . Int_t ; ncolors . ). private . Get RGB values for orgcolors, add percent neutral to the RGB and allocate fNewColors. ; Definition at line 2974 of file TGX11.cxx. ◆ MapColorStruct(). void TGX11::MapColorStruct ; (; ColorStruct_t * ; color, . RXColor & ; xcolor . ). private . Map a ColorStruct_t to a XColor structure. ; Definition at line 1315 of file GX11Gui.cxx. ◆ MapCursor(). void TGX11::MapCursor ; (; ECursor ; cursor, . Int_t & ; xcursor . ). private . ◆ MapEvent(). void TGX11::MapEvent ; (; Event_t & ; ev, . void * ; xevi, . Bool_t ; tox = kTRUE . ). private . Map Event_t structure to XEvent structure. ; If tox is false map the other way. ; Definition at line 1483 of file GX11Gui.cxx. ◆ MapEventMask(). void TGX11::MapEventMask ; (; UInt_t & ; emask, . UInt_t & ; xemask, . Bool_t ; tox = kTRUE . ). private . Map event mask to or from X. ; Definition at line 402 of file GX11Gui.cxx. ◆ MapGCValues(). void TGX11::MapGCValues ; (; GCValues_t & ; gval, . ULong_t & ; xmask, . RXGCValues & ; xgval, . Bool_t ; tox = kTRUE . ). private . Map a GCValues_t to a XCGValues structure if tox is true. ; Map the other way in case tox is false. ; Definition at line 556 of file GX11Gui.cxx. ◆ MapKeySym(). void TGX11::MapKeySym ; (; UInt_t & ; keysym, . UInt_t & ; xkeysym, . Bool_t ; tox = kTRUE . ). private . Map to and from X key symbols. ; Keysym are the values returned by XLookUpString. ; Definition at line 2303 of file GX11Gui.cxx. ◆ MapModifierState(). void TGX11::MapModifierState ; (; UInt_t & ; state, . UInt_t & ; xstate, . Bool_t ; tox = kTRUE . ). private . Map modifier key state to or from X. ; Definition at line 1422 of file GX11Gui.cxx. ◆ MapPictureAttributes(). void TGX11::MapPictureAttributes ; (; PictureAttributes_t & ; attr, . RXpmAttributes & ; xpmattr, . Bool_t ; toxpm = kTRUE . ). private . Map a Pictur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGX11.html:91634,mask,mask,91634,doc/master/classTGX11.html,https://root.cern,https://root.cern/doc/master/classTGX11.html,1,['mask'],['mask']
Availability,"ed from inverting the cumulative posterior distribution. . The interface allows one to construct the class by passing the data set, probability density function for the model, the prior; functions and then the parameter of interest to scan. The nuisance parameters can also be passed to be marginalized when ; computing the posterior. Alternatively, the class can be constructed by passing the data and the ModelConfig containing; all the needed information (model pdf, prior pdf, parameter of interest, nuisance parameters, etc..). After configuring the calculator, one only needs to ask GetInterval(), which; will return an SimpleInterval object. By default the extrem of the integral are obtained by inverting directly the; cumulative posterior distribution. By using the method SetScanOfPosterior(nbins) the interval is then obtained by ; scanning the posterior function in the given number of points. The firts method is in general faster but it requires an; integration one extra dimension ( in the poi in addition to the nuisance parameters), therefore in some case it can be; less robust. . The class can also return the posterior function (method GetPosteriorFunction) or if needed the normalized; posterior function (the posterior pdf) (method GetPosteriorPdf). A posterior plot is also obtained using ; the GetPosteriorPlot method. The class allows to use different integration methods for integrating in the nuisances and in the poi. All the numerical ; integration methods of ROOT can be used via the method SetIntegrationType (see more in the documentation of; this method). Function Members (Methods); public:. virtual~BayesianCalculator(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); RooStats::BayesianCalculatorBayesianCalculator(); RooStats::BayesianCalculatorBayesianCalculator(const RooStats::BayesianCalculator&); RooStats::BayesianCalculatorBayesianCalculator(RooAbsData& data, RooStats::ModelConfig& model); RooS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__BayesianCalculator.html:1910,robust,robust,1910,root/html530/RooStats__BayesianCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__BayesianCalculator.html,9,['robust'],['robust']
Availability,"ed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; ;  CMinimumStateMinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder) ;  CMinosErrorClass holding the result of Minos (lower and upper values) for a specific parameter ;  CMinuit2MinimizerMinuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm ;  CMinuitParameterClass for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; ;  CMnApplicationApplication interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization ;  CMnContoursAPI class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors; ;  CMnCovarianceSqueezeClass to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index ;  ►CMnCross;  CCrossFcnLimit;  CCrossNewMin;  CCrossParLimit;  CMnEigenAPI class for calculating the eigenvalues of symmetric matrix ;  CMnFcnWrapper class to FCNBase interface used internally by Minuit ;  CMnFumiliMinimizeAPI class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnFunctionCrossMnFunctionCross ;  CMnGlobalCorrelationCoeffClass for global correlation coefficient ;  CMnHesseAPI class for calculating the numerical covariance matrix (== 2x Inverse Hessian == 2x Inverse 2nd derivative); can be used by the user or Minuit itself ;  CMnLineSearchImplements a 1-dimensional minimization along a given direction (i.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:59263,error,errors,59263,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,8,['error'],['errors']
Availability,"ed in CalcFStar() ; Definition at line 234 of file RuleFitParams.h. ◆ fFstarMedian. Double_t TMVA::RuleFitParams::fFstarMedian. protected . median value of F*() using ; Definition at line 235 of file RuleFitParams.h. ◆ fGDCoefLinTst. std::vector< std::vector<Double_t> > TMVA::RuleFitParams::fGDCoefLinTst. protected . linear coeffs - one per tau ; Definition at line 218 of file RuleFitParams.h. ◆ fGDCoefTst. std::vector< std::vector<Double_t> > TMVA::RuleFitParams::fGDCoefTst. protected . rule coeffs - one per tau ; Definition at line 217 of file RuleFitParams.h. ◆ fGDErrScale. Double_t TMVA::RuleFitParams::fGDErrScale. protected . stop scan at error = scale*errmin ; Definition at line 230 of file RuleFitParams.h. ◆ fGDErrTst. std::vector<Double_t> TMVA::RuleFitParams::fGDErrTst. protected . error rates per tau ; Definition at line 215 of file RuleFitParams.h. ◆ fGDErrTstOK. std::vector<Char_t> TMVA::RuleFitParams::fGDErrTstOK. protected . error rate is sufficiently low <— stores boolean ; Definition at line 216 of file RuleFitParams.h. ◆ fGDNPathSteps. Int_t TMVA::RuleFitParams::fGDNPathSteps. protected . number of path steps ; Definition at line 229 of file RuleFitParams.h. ◆ fGDNTau. UInt_t TMVA::RuleFitParams::fGDNTau. protected . number of tau-paths - calculated in SetGDTauPrec ; Definition at line 222 of file RuleFitParams.h. ◆ fGDNTauTstOK. UInt_t TMVA::RuleFitParams::fGDNTauTstOK. protected . number of tau in the test-phase that are ok ; Definition at line 221 of file RuleFitParams.h. ◆ fGDNtuple. TTree* TMVA::RuleFitParams::fGDNtuple. protected . Gradient path ntuple, contains params for each step along the path. ; Definition at line 237 of file RuleFitParams.h. ◆ fGDOfsTst. std::vector<Double_t> TMVA::RuleFitParams::fGDOfsTst. protected . offset per tau ; Definition at line 219 of file RuleFitParams.h. ◆ fGDPathStep. Double_t TMVA::RuleFitParams::fGDPathStep. protected . step size along path (delta nu in eq 22, ref 1) ; Definition at line 228 of file RuleFit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleFitParams.html:21558,error,error,21558,doc/master/classTMVA_1_1RuleFitParams.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleFitParams.html,1,['error'],['error']
Availability,ed in error calculation) ; Definition at line 62 of file ROCCalc.h. ◆ fnStot. Int_t TMVA::ROCCalc::fnStot. private . Definition at line 68 of file ROCCalc.h. ◆ fPurity. TH1* TMVA::ROCCalc::fPurity. private . Definition at line 70 of file ROCCalc.h. ◆ fSignalCut. Double_t TMVA::ROCCalc::fSignalCut. private . MVA cut value for last demanded background rejection or signal efficiency. ; Definition at line 75 of file ROCCalc.h. ◆ fSignificance. TH1* TMVA::ROCCalc::fSignificance. private . Definition at line 69 of file ROCCalc.h. ◆ fSplB. TSpline * TMVA::ROCCalc::fSplB. private . Definition at line 64 of file ROCCalc.h. ◆ fSpleffBvsS. TSpline* TMVA::ROCCalc::fSpleffBvsS. private . Definition at line 66 of file ROCCalc.h. ◆ fSplmvaCumB. TSpline * TMVA::ROCCalc::fSplmvaCumB. private . spline of cumulated mva distributions ; Definition at line 65 of file ROCCalc.h. ◆ fSplmvaCumS. TSpline* TMVA::ROCCalc::fSplmvaCumS. private . Definition at line 65 of file ROCCalc.h. ◆ fSplS. TSpline* TMVA::ROCCalc::fSplS. private . Definition at line 64 of file ROCCalc.h. ◆ fStatus. Bool_t TMVA::ROCCalc::fStatus. private . false if is found some error in mvaS or mvaB ; Definition at line 54 of file ROCCalc.h. ◆ fUseSplines. Bool_t TMVA::ROCCalc::fUseSplines. private . Definition at line 57 of file ROCCalc.h. ◆ fXmax. Float_t TMVA::ROCCalc::fXmax. private . min and max of the mva distribution ; Definition at line 61 of file ROCCalc.h. ◆ fXmin. Float_t TMVA::ROCCalc::fXmin. private . Definition at line 61 of file ROCCalc.h. ◆ inveffBvsS. TH1D* TMVA::ROCCalc::inveffBvsS. private . Definition at line 73 of file ROCCalc.h. ◆ rejBvsS. TH1D* TMVA::ROCCalc::rejBvsS. private . Definition at line 72 of file ROCCalc.h. Libraries for TMVA::ROCCalc:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/ROCCalc.h; tmva/tmva/src/ROCCalc.cxx. TMVAROCCalc. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:42 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ROCCalc.html:7617,error,error,7617,doc/master/classTMVA_1_1ROCCalc.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ROCCalc.html,1,['error'],['error']
Availability,"ed in recent unfolding ; empty bins of the response matrix or bins which can not be unfolded due to rank deficits are not counted ; Definition at line 3242 of file TUnfold.cxx. ◆ GetNr(). Int_t TUnfold::GetNr ; (; void ; ); const. get number of regularisation conditions ; Ths returns the number of regularisation conditions, useful for booking a histogram for a subsequent call of GetL(). ; Definition at line 3176 of file TUnfold.cxx. ◆ GetNx(). Int_t TUnfold::GetNx ; (; void ; ); const. inlineprotected . returns internal number of output (truth) matrix rows ; Definition at line 230 of file TUnfold.h. ◆ GetNy(). Int_t TUnfold::GetNy ; (; void ; ); const. inlineprotected . returns the number of measurement bins ; Definition at line 238 of file TUnfold.h. ◆ GetOutput(). void TUnfold::GetOutput ; (; TH1 * ; output, . const Int_t * ; binMap = nullptr . ); const. get output distribution, possibly cumulated over several bins ; Parameters. [out]outputexisting output histogram. content and errors will be updated. ; [in]binMap(default=nullptr) array for mapping truth bins to histogram bins. If nonzero, the array binMap must have dimension n+2, where n corresponds to the number of bins on the truth axis of the response matrix (the histogram specified with the TUnfold constructor). The indexes of binMap correspond to the truth bins (including underflow and overflow) of the response matrix. The element binMap[i] specifies the histogram number in output where the corresponding truth bin will be stored. It is possible to specify the same output bin number for multiple indexes, in which case these bins are added. Set binMap[i]=-1 to ignore an unfolded truth bin. The uncertainties are calculated from the corresponding parts of the covariance matrix, properly taking care of added truth bins. ; If the pointer binMap is zero, the bins are mapped one-to-one. Truth bin zero (underflow) is stored in the output underflow, truth bin 1 is stored in bin number 1, etc. ; Definition at line 3289",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfold.html:40681,error,errors,40681,doc/master/classTUnfold.html,https://root.cern,https://root.cern/doc/master/classTUnfold.html,1,['error'],['errors']
Availability,"ed in the current directory or in 'path/' if it is specified.; The class generated will be named 'fileprefix'. ""macrofilename"" and optionally ""cutfilename"" are expected to point; to source files which will be included by the generated skeleton.; Method of the same name as the file(minus the extension and path); will be called by the generated skeleton's Process method as follow:; [if (cutfilename())] htemp->Fill(macrofilename());. ""option"" can be used select some of the optional features during; the code generation. The possible options are:; nohist : indicates that the generated ProcessFill should not; fill the histogram. 'maxUnrolling' controls how deep in the class hierarchy does the; system 'unroll' classes that are not split. Unrolling a class; allows direct access to its data members (this emulates the behavior; of TTreeFormula). The main features of this skeleton are:. * on-demand loading of branches; * ability to use the 'branchname' as if it was a data member; * protection against array out-of-bounds errors; * ability to use the branch data as an object (when the user code is available). For example with Event.root, if; Double_t somePx = fTracks.fPx[2];; is executed by one of the method of the skeleton,; somePx will updated with the current value of fPx of the 3rd track. Both macrofilename and the optional cutfilename are expected to be; the name of source files which contain at least a free standing; function with the signature:; x_t macrofilename(); // i.e function with the same name as the file; and; y_t cutfilename(); // i.e function with the same name as the file. x_t and y_t needs to be types that can convert respectively to a double; and a bool (because the skeleton uses:; if (cutfilename()) htemp->Fill(macrofilename());. These two functions are run in a context such that the branch names are; available as local variables of the correct (read-only) type. Note that if you use the same 'variable' twice, it is more efficient; to 'cache' the value. For ex",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTree.html:109341,error,errors,109341,root/html534/TTree.html,https://root.cern,https://root.cern/root/html534/TTree.html,12,"['avail', 'error']","['available', 'errors']"
Availability,"ed in through using declarations) of a class. ;  ; TVirtualStreamerInfo * DetermineCurrentStreamerInfo ();  Determine and set pointer to current TVirtualStreamerInfo. ;  ; TMethod * FindClassOrBaseMethodWithId (DeclId_t faddr);  Find a method with decl id in this class or its bases. ;  ; Int_t GetBaseClassOffsetRecurse (const TClass *toBase);  Return data member offset to the base class ""cl"". ;  ; TMethod * GetClassMethod (Longptr_t faddr);  Look for a method in this class that has the interface function address faddr. ;  ; TListOfFunctions * GetMethodList ();  Return (create an empty one if needed) the list of functions. ;  ; TVirtualStreamerInfo * GetStreamerInfoImpl (Int_t version, Bool_t silent) const;  ; void Init (const char *name, Version_t cversion, const std::type_info *info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il, ClassInfo_t *classInfo, Bool_t silent);  Initialize a TClass object. ;  ; bool IsClassStructOrUnion () const;  ; void LoadClassInfo () const;  Try to load the ClassInfo if available. ;  ; void MoveAddressInRepository (const char *where, void *oldadd, void *newadd, const TClass *what) const;  ; TClass & operator= (const TClass &)=delete;  ; void RegisterAddressInRepository (const char *where, void *location, const TClass *what) const;  ; void SetClassSize (Int_t sizof);  ; void SetClassVersion (Version_t version);  Private function. ;  ; void SetRuntimeProperties ();  Internal routine to set calculate the class properties that can only be known at run-time, for example whether the Hash member function and the destructor are consistent. ;  ; void SetStreamerImpl ();  Internal routine to set fStreamerImpl based on the value of fStreamerType. ;  ; void UnregisterAddressInRepository (const char *where, void *location, const TClass *what) const;  . Static Private Member Functions; static void ConvStreamerInstrumented (const TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class);  Case of instrumented",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:40632,avail,available,40632,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,2,['avail'],['available']
Availability,"ed inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointer). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__IntegratorOneDim.html:6711,Error,Error,6711,root/html532/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__IntegratorOneDim.html,6,['Error'],['Error']
Availability,"ed inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointers). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__IntegratorOneDim.html:6681,Error,Error,6681,root/html604/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorOneDim.html,2,['Error'],['Error']
Availability,"ed int NFreeParameters() const; get total number of free parameters. { return fNFree; }. int Status() const; minimizer status code. { return fStatus; }. int CovMatrixStatus() const; covariance matrix status code; using Minuit convention : =0 not calculated, =1 approximated, =2 made pos def , =3 accurate. { return fCovStatus; }. const IModelFunction * FittedFunction() const; fitting quantities ; Return pointer to model (fit) function with fitted parameter values.; Pointer is managed internally. I must not be deleted. const BinData * FittedBinData() const; return BinData used in the fit (return a nullptr in case a different fit is done; or the data are not available; Pointer is managed internally, it must not be deleted. double Chi2() const; Chi2 fit value; in case of likelihood must be computed ?. { return fChi2; }. unsigned int Ndf() const; Number of degree of freedom. { return fNdf; }. double Prob() const; p value of the fit (chi2 probability). const std::vector<double> & Errors() const; parameter errors (return st::vector). { return fErrors; }. const double * GetErrors() const; parameter errors (return const pointer). { return (fErrors.empty()) ? 0 : &fErrors.front(); }. const std::vector<double> & Parameters() const; parameter values (return std::vector). { return fParams; }. const double * GetParams() const; parameter values (return const pointer). { return &fParams.front(); }. double Value(unsigned int i) const; parameter value by index. { return fParams[i]; }. double Parameter(unsigned int i) const; parameter value by index. { return fParams[i]; }. double Error(unsigned int i) const; parameter error by index; (NOTE: this due to conflict with TObject::Error cannot used in derived class which; inherits from TObject. Use instead ParError (or Errors()[i] ). double ParError(unsigned int i) const; parameter error by index. std::string ParName(unsigned int i) const; name of the parameter. void SetMinosError(unsigned int i, double elow, double eup); set the Minos erro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Fit__FitResult.html:8278,error,errors,8278,root/html604/ROOT__Fit__FitResult.html,https://root.cern,https://root.cern/root/html604/ROOT__Fit__FitResult.html,3,"['Error', 'error']","['Errors', 'errors']"
Availability,"ed int ipar = 0; ipar < npar; ++ipar) {; 161 const ParameterSettings & par = fconfig.ParSettings(ipar);; 162 if (par.IsFixed() ) fFixedParams[ipar] = true;; 163 else nfree++;; 164 if (par.IsBound() ) {; 165 double lower = (par.HasLowerLimit()) ? par.LowerLimit() : - std::numeric_limits<double>::infinity() ;; 166 double upper = (par.HasUpperLimit()) ? par.UpperLimit() : std::numeric_limits<double>::infinity() ;; 167 fBoundParams[ipar] = fParamBounds.size();; 168 fParamBounds.push_back(std::make_pair(lower,upper));; 169 }; 170 }; 171 // check if nfree (from FitConfig) and fNFree (from minimizer) are consistent; 172 if (nfree != fNFree ) {; 173 MATH_ERROR_MSG(""FitResult"",""FitConfiguration and Minimizer result are not consistent"");; 174 std::cout << ""Number of free parameters from FitConfig = "" << nfree << std::endl;; 175 std::cout << ""Number of free parameters from Minimizer = "" << fNFree << std::endl;; 176 }; 177 ; 178 // if flag is binned compute a chi2 when a chi2 function is given; 179 if (fitType == 1) {; 180 if (chi2func == nullptr); 181 fChi2 = fVal;; 182 else {; 183 // compute chi2 equivalent for likelihood fits; 184 // NB: empty bins are considered; 185 fChi2 = (*chi2func)(&fParams[0]);; 186 }; 187 }; 188 else if (fitType == 3) {; 189 // case of binned likelihood fits (use Baker-Cousins chi2); 190 fChi2 = 2 * fVal;; 191 }; 192 ; 193 // fill error matrix; 194 // if minimizer provides error provides also error matrix; 195 // clear in case of re-filling an existing result; 196 if (!fCovMatrix.empty()) fCovMatrix.clear();; 197 if (!fGlobalCC.empty()) fGlobalCC.clear();; 198 ; 199 if (min->Errors() != nullptr) {; 200 ; 201 fErrors = std::vector<double>(min->Errors(), min->Errors() + npar ) ;; 202 ; 203 if (fCovStatus != 0) {; 204 unsigned int r = npar * ( npar + 1 )/2;; 205 fCovMatrix.reserve(r);; 206 for (unsigned int i = 0; i < npar; ++i); 207 for (unsigned int j = 0; j <= i; ++j); 208 fCovMatrix.push_back(min->CovMatrix(i,j) );; 209 }; 210 // minos errors are se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/FitResult_8cxx_source.html:6704,error,error,6704,doc/master/FitResult_8cxx_source.html,https://root.cern,https://root.cern/doc/master/FitResult_8cxx_source.html,3,['error'],['error']
Availability,"ed int j) const;  return correlation coefficient between variable i and j. ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:6468,error,error,6468,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,3,['error'],"['error', 'errors']"
Availability,"ed int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); set relative tolerance. void SetAbsTolerance(double absTol); set absolute tolerance. void SetSize(unsigned int size); set workspace size. { fSize = size; }. void SetMinPts(unsigned int n); set min points. { fMinPts = n; }. void SetMaxPts(unsigned int n); set max points. { fMaxPts = n; }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. » Author: M. Slawinska 08/2007 » Copyright (c) 2007 , LCG ROOT MathLib Team *; » Last changed: root/mathcore:$Id: AdaptiveIntegratorMultiDim.h 36768 2010-11-19 10:34:53Z moneta $ » Last generated: 2010-11-19 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__AdaptiveIntegratorMultiDim.html:5022,toler,tolerance,5022,root/html528/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__AdaptiveIntegratorMultiDim.html,2,['toler'],['tolerance']
Availability,"ed int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); set relative tolerance. void SetAbsTolerance(double absTol); set absolute tolerance. void SetSize(unsigned int size); set workspace size. { fSize = size; }. void SetMinPts(unsigned int n); set min points. { fMinPts = n; }. void SetMaxPts(unsigned int n); set max points. { fMaxPts = n; }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. » Author: M. Slawinska 08/2007 » Copyright (c) 2007 , LCG ROOT MathLib Team *; » Last changed: root/mathcore:$Id: AdaptiveIntegratorMultiDim.h 36768 2010-11-19 10:34:53Z moneta $ » Last generated: 2011-07-04 15:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__AdaptiveIntegratorMultiDim.html:5024,toler,tolerance,5024,root/html530/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__AdaptiveIntegratorMultiDim.html,2,['toler'],['tolerance']
Availability,"ed int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); set relative tolerance. void SetAbsTolerance(double absTol); set absolute tolerance. void SetSize(unsigned int size); set workspace size. { fSize = size; }. void SetMinPts(unsigned int n); set min points. { fMinPts = n; }. void SetMaxPts(unsigned int n); set max points. { fMaxPts = n; }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. » Author: M. Slawinska 08/2007 » Copyright (c) 2007 , LCG ROOT MathLib Team *; » Last changed: root/mathcore:$Id: AdaptiveIntegratorMultiDim.h 36768 2010-11-19 10:34:53Z moneta $ » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__AdaptiveIntegratorMultiDim.html:5024,toler,tolerance,5024,root/html532/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__AdaptiveIntegratorMultiDim.html,4,['toler'],['tolerance']
Availability,"ed list of directories.; Return value is pointing to wfile for compatibility with; Which(const char*,const char*,EAccessMode) version. Int_t GetUid(const char* user = 0); Returns the user's id. If user = 0, returns current user's id. Int_t GetEffectiveUid(); Returns the effective user id. The effective id corresponds to the; set id bit on the file being executed. Int_t GetGid(const char* group = 0); Returns the group's id. If group = 0, returns current user's group. Int_t GetEffectiveGid(); Returns the effective group id. The effective group id corresponds; to the set id bit on the file being executed. UserGroup_t * GetUserInfo(Int_t uid); Returns all user info in the UserGroup_t structure. The returned; structure must be deleted by the user. In case of error 0 is returned. UserGroup_t * GetUserInfo(const char* user = 0); Returns all user info in the UserGroup_t structure. If user = 0, returns; current user's id info. The returned structure must be deleted by the; user. In case of error 0 is returned. UserGroup_t * GetGroupInfo(Int_t gid); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; The returned structure must be deleted by the user. In case of; error 0 is returned. UserGroup_t * GetGroupInfo(const char* group = 0); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; If group = 0, returns current user's group. The returned structure; must be deleted by the user. In case of error 0 is returned. void Setenv(const char* name, const char* value); Set environment variable. The string passed will be owned by; the environment and can not be reused till a ""name"" is set; again. The solution below will lose the space for the string; in that case, but if this functions is not called thousands; of times that should not be a problem. const char * Getenv(const char* name); Get environment vari",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnixSystem.html:28857,error,error,28857,root/html528/TUnixSystem.html,https://root.cern,https://root.cern/root/html528/TUnixSystem.html,4,['error'],['error']
Availability,"ed list of directories.; Return value is pointing to wfile for compatibility with; Which(const char*,const char*,EAccessMode) version. Int_t GetUid(const char* user = 0); Returns the user's id. If user = 0, returns current user's id. Int_t GetEffectiveUid(); Returns the effective user id. The effective id corresponds to the; set id bit on the file being executed. Int_t GetGid(const char* group = 0); Returns the group's id. If group = 0, returns current user's group. Int_t GetEffectiveGid(); Returns the effective group id. The effective group id corresponds; to the set id bit on the file being executed. UserGroup_t * GetUserInfo(Int_t uid); Returns all user info in the UserGroup_t structure. The returned; structure must be deleted by the user. In case of error 0 is returned. UserGroup_t * GetUserInfo(const char* user = 0); Returns all user info in the UserGroup_t structure. If user = 0, returns; current user's id info. The returned structure must be deleted by the; user. In case of error 0 is returned. UserGroup_t * GetGroupInfo(Int_t gid); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; The returned structure must be deleted by the user. In case of; error 0 is returned. UserGroup_t * GetGroupInfo(const char* group = 0); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; If group = 0, returns current user's group. The returned structure; must be deleted by the user. In case of error 0 is returned. void Setenv(const char* name, const char* value); Set environment variable. const char * Getenv(const char* name); Get environment variable. void Unsetenv(const char* name); Unset environment variable. int Exec(const char* shellcmd); Execute a command. FILE * OpenPipe(const char* shellcmd, const char* mode); Open a pipe. int ClosePipe(FILE* pipe); Close the pipe. int GetPid(); Get process i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnixSystem.html:29197,error,error,29197,root/html534/TUnixSystem.html,https://root.cern,https://root.cern/root/html534/TUnixSystem.html,6,['error'],['error']
Availability,"ed objects.Definition TObjArray.cxx:356; TObjArray::AtTObject * At(Int_t idx) const overrideDefinition TObjArray.h:164; TObjArray::Addvoid Add(TObject *obj) overrideDefinition TObjArray.h:68; TObjStringCollectable string class.Definition TObjString.h:28; TObjString::StringTString & String()Definition TObjString.h:48; TObject::GetNamevirtual const char * GetName() constReturns name of object.Definition TObject.cxx:444; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::RecursiveRemovevirtual void RecursiveRemove(TObject *obj)Recursively remove this object from a list.Definition TObject.cxx:665; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::Printvirtual void Print(Option_t *option="""") constThis method must be overridden when a class wants to print itself.Definition TObject.cxx:642; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TObject::kInvalidObject@ kInvalidObjectif object ctor succeeded but object should not be usedDefinition TObject.h:72; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TPRegexpDefinition TPRegexp.h:36; TPluginHandlerDefinition TPluginManager.h:103; TQObject::Emitvoid Emit(const char *signal, const T &arg)Activate signal with single parameter.Definition TQObject.h:164; TROOT::GetMacroPathstatic const char * GetMacroPath()Get macro search path. Static utility function.Definition TROOT.cxx:2762; TROOT::ShutDownstatic void S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:100419,error,error,100419,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,1,['error'],['error']
Availability,"ed on free functions with gsl_function type signature. virtual ~Chebyshev(); destructor. Chebyshev(size_t n). construct a Chebyshev series or order n; The series must be initialized from a function. Chebyshev(const ROOT::Math::Chebyshev& ); usually copying is non trivial, so we make this unaccessible. double operator()(double x) const. Evaluate the series at a given point x. std::pair<double, double> EvalErr(double x) const. Evaluate the series at a given point x estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. double operator()(double x, size_t n) const. Evaluate the series at a given point, to (at most) the given order n. std::pair<double, double> EvalErr(double x, size_t n) const. evaluate the series at a given point x to the given order n,; estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. Chebyshev * Deriv(). Compute the derivative of the series and return a pointer to a new Chebyshev series with the; derivatives coefficients. The returned pointer must be managed by the user. TO DO: implement copying to return by value. Chebyshev * Integral(). Compute the integral of the series and return a pointer to a new Chebyshev series with the; integral coefficients. The lower limit of the integration is the left range value a.; The returned pointer must be managed by the user. TO DO: implement copying to return by value. void Initialize(ROOT::Math::GSLFuncPointer f, void* params, double a, double b). Initialize series passing function and range. » Last changed: root/mathmore:$Id: Chebyshev.h 21503 2007-12-19 17:34:54Z moneta $ » Last generated: 2010-09-23 19:55; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__Chebyshev.html:3020,error,error,3020,root/html528/ROOT__Math__Chebyshev.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__Chebyshev.html,1,['error'],['error']
Availability,"ed one (e.g gaus, expo,..), otherwise in case of pre-defined functions, some default initial values and limits will be used. . ""C"" In case of linear fitting, do no calculate the chisquare (saves CPU time). . ""G"" Uses the gradient implemented in TF1::GradientPar for the minimization. This allows to use Automatic Differentiation when it is supported by the provided TF1 function. . ""WIDTH"" Scales the histogran bin content by the bin width (useful for variable bins histograms) . ""SERIAL"" Runs in serial mode. By defult if ROOT is built with MT support and MT is enables, the fit is perfomed in multi-thread - ""E"" Perform better Errors estimation using Minos technique . ""MULTITHREAD"" Forces usage of multi-thread execution whenever possible . The default fitting of an histogram (when no option is given) is perfomed as following:; a chi-square fit (see below Chi-square Fits) computed using the bin histogram errors and excluding bins with zero errors (empty bins);; the full range of the histogram is used;; the default Minimizer with its default configuration is used (see below Minimizer Configuration) except for linear function;; for linear functions (polN, chenbyshev or formula expressions combined using operator ++) a linear minimization is used.; only the status of the fit is returned;; the fit is performed in Multithread whenever is enabled in ROOT;; only the last fitted function is saved in the histogram;; the histogram is drawn after fitting overalyed with the resulting fitting function. Minimizer Configuration; The Fit is perfomed using the default Minimizer, defined in the ROOT::Math::MinimizerOptions class. It is possible to change the default minimizer and its configuration parameters by calling these static functions before fitting (before calling TH1::Fit):; ROOT::Math::MinimizerOptions::SetDefaultMinimizer(minimizerName, minimizerAgorithm) for changing the minmizer and/or the corresponding algorithm. For example ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:129208,error,errors,129208,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,2,['error'],['errors']
Availability,"ed only to variable parameters ; Reimplemented in TMinuitMinimizer, ROOT::Minuit2::Minuit2Minimizer, and ROOT::Math::RMinimizer.; Definition at line 135 of file Minimizer.cxx. ◆ GetHessianMatrix(). bool ROOT::Math::Minimizer::GetHessianMatrix ; (; double * ; hMat); const. virtual . Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ; The array will be filled as h[i *ndim + j] ; Reimplemented in TMinuitMinimizer, and ROOT::Minuit2::Minuit2Minimizer.; Definition at line 148 of file Minimizer.cxx. ◆ GetMinosError(). bool ROOT::Math::Minimizer::GetMinosError ; (; unsigned int ; ivar, . double & ; errLow, . double & ; errUp, . int ; option = 0 . ). virtual . minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ; Reimplemented in TMinuitMinimizer, and ROOT::Minuit2::Minuit2Minimizer.; Definition at line 172 of file Minimizer.cxx. ◆ GetVariableSettings(). bool ROOT::Math::Minimizer::GetVariableSettings ; (; unsigned int ; ivar, . ROOT::Fit::ParameterSettings & ; pars . ); const. virtual . get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ; Reimplemented in ROOT::Math::BasicMinimizer, ROOT::Minuit2::Minuit2Minimizer, and TMinuitMinimizer.; Definition at line 109 of file Minimizer.cxx. ◆ GlobalCC(). double ROOT::Math::Minimizer::GlobalCC ; (; unsigned int ; ivar); const. virtual . return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ; Minimizer must overload method if implemented ; Reimplemented in ROOT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html:19041,error,error,19041,doc/master/classROOT_1_1Math_1_1Minimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html,3,['error'],"['error', 'errors']"
Availability,"ed parameter; values, their (asymmetric errors) etc. The default MINUIT error level; for HESSE and MINOS error analysis is taken from the defaultErrorLevel(); value of the input function. ~RooMinimizer(); Destructor. void setStrategy(Int_t strat); Change MINUIT strategy to istrat. Accepted codes; are 0,1,2 and represent MINUIT strategies for dealing; most efficiently with fast FCNs (0), expensive FCNs (2); and 'intermediate' FCNs (1). void setErrorLevel(Double_t level); Set the level for MINUIT error analysis to the given; value. This function overrides the default value; that is taken in the RooMinimizer constructor from; the defaultErrorLevel() method of the input function. void setEps(Double_t eps); Change MINUIT epsilon. void setMinimizerType(const char* type); Choose the minimzer algorithm. RooFitResult* fit(const char* options); Parse traditional RooAbsPdf::fitTo driver options. m - Run Migrad only; h - Run Hesse to estimate errors; v - Verbose mode; l - Log parameters after each Minuit steps to file; t - Activate profile timer; r - Save fit result; 0 - Run Migrad with strategy 0. Int_t minimize(const char* type, const char* alg = 0). Int_t migrad(); Execute MIGRAD. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t hesse(); Execute HESSE. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t minos(); Execute MINOS. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t minos(const RooArgSet& minosParamList); Execute MINOS for given list of parameters. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMinimizer.html:9144,error,errors,9144,root/html526/RooMinimizer.html,https://root.cern,https://root.cern/root/html526/RooMinimizer.html,5,['error'],['errors']
Availability,"ed properly by the compiled code.; We recommend you always write scripts with the needed include statements. In most cases, the script will still run with the interpreter. However, a few header files are not handled very well by Cling.; These types of headers can be included in interpreted and compiled mode:. The subset of standard C/C++ headers defined in $ROOTSYS/Cling/include.; Headers of classes defined in a previously loaded library (including ROOT own). The defined class must have a name known to ROOT (i.e. a class with a ClassDef). Hiding header files from rootcling that are necessary for the compiler but optional for the interpreter can lead to a subtle but fatal error. For example:; #ifndef __CLING__; #include ""TTree.h""; #else; class TTree;; #endif. class subTree : public TTree {; };; In this case, rootcling does not have enough information about the TTree class to produce the correct dictionary file. If you try this, rootcling and compiling will be error free, however, instantiating a subTree object from the Cling command line will cause a fatal error. In general, it is recommended to let rootcling see as many header files as possible.; 7.5 Classes Defined By Scripts; Lets create a small class TMyClass and a derived class TChild. The virtual method TMyClass::Print()is overridden in TChild. Save this in file called script4.C.; #include <iostream.h>. class TMyClass {; private:; float fX; //x position in centimeters; float fY; //y position in centimeters; public:; TMyClass() { fX = fY = -1; }; virtual void Print() const;; void SetX(float x) { fX = x; }; void SetY(float y) { fY = y; }; };; void TMyClass::Print() const // parent print method; {; cout << ""fX = "" << fX << "", fY = "" << fY << endl;; }; class TChild : public TMyClass {; public:; void Print() const;; };; void TChild::Print() const // child print metod; {; cout << ""This is TChild::Print()"" << endl;; TMyClass::Print();; }; To execute script4.C do:; root[] .L script4.C; root[] TMyClass *a = new TChild; r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:278891,error,error,278891,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,4,['error'],['error']
Availability,"ed simultaneously; Use d3.time.scale to display time scales; Implemented drag and drop to superimpose histograms or graphs; Allow selection of drawing option via context menu; Better support of touch devices; Provide simple layout, making it default; Allow to open ROOT files in online session (via url parameter); One could monitor simultaneously objects from server and root files; Implement ‘autocol’ draw option - when superimposing histograms, their line colors will be automatically assigned; Implement ‘nostat’ draw option - disabled stat drawing; Using ‘same’ identifier in item name, one can easily draw or superimpose similar items from different files. Could be used in URL like: ...&files=[file1.root,file2.root]&items=[file1.root/hpx, file2.root/_same_] ...&files=[file1.root,file2.root]&item=file1.root/hpx+file2.root/_same_ Main limitation - file names should have similar length.; When ‘autozoom’ specified in draw options, histogram zoomed into non-empty content. Same command available via context menu.; Item of ‘Text’ kind can be created. It is displayed as lain text in the browser. If property ‘mathjax’ specified, MathJax.js library will be loaded and used for rendering. See tutorials/http/httpcontrol.C macro for example.; When using foreignObject, provide workaround for absolute positioning problem in Chrome/Safari, see http://bit.ly/1wjqCQ9; Support usage of minimized versions of .js and .css files. Minimized scripts used by default on web servers.; Implement JSROOT.extend instead of jQuery.extend, reduce usage of jquery.js in core JSROOT classes; Implement main graphics without jquery at all, such mode used in nobrowser mode.; Provide optional latex drawing with MathJax SVG. TMathText always drawn with MathJax, other classes require mathjax option in URL; Improve drawing of different text classes, correctly handle their alignment and scaling, special handling for IE. TTree Libraries; TTree Behavior change.; Merging.; Added fast cloning support to TTree::Merge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v604/release-notes.html:10742,avail,available,10742,doc/v604/release-notes.html,https://root.cern,https://root.cern/doc/v604/release-notes.html,1,['avail'],['available']
Availability,"ed string is checked after Enter key was pressed. An; error message shows up if the string is not accepted. The current; prototype is limited and users have no freedom to enter file/user; function names in this field. ""Set Parameters"" button opens a dialog for parameters settings. ""Fit Settings"" provides user interface elements related to the; fitter. Currently there are two method choices: Chi-square and; Binned Likelihood. ""Linear Fit"" check button sets the use of Linear fitter is it is; selected. Otherwise the option 'F' is applied if polN is selected.; ""Robust"" number entry sets the robust value when fitting graphs.; ""No Chi-square"" check button sets ON/OFF option 'C' - do not; calculate Chi-square (for Linear fitter). Fit options:; ""Integral"" check button switch ON/OFF option 'I' - use integral; of function instead of value in bin center.; ""Best Errors"" sets ON/OFF option 'E' - better errors estimation; using Minos technique.; ""All weights = 1"" sets ON/OFF option 'W' - all weights set to 1,; excluding empty bins and ignoring error bars.; ""Empty bins, weights=1"" sets ON/OFF option 'WW' - all weights; equal to 1, including empty bins, error bars ignored.; ""Use range"" sets ON/OFF option 'R' - fit only data within the; specified function range with the slider.; ""Improve fit results"" sets ON/OFF option 'M' - after minimum is; found, search for a new one.; ""Add to list"" sets On/Off option '+'- add function to the list; without deleting the previous. Draw options:; ""SAME"" sets On/Off function drawing on the same pad.; ""No drawing"" sets On/Off option '0'- do not draw function graphics.; ""Do not store/draw"" sets On/Off option 'N'- do not store the; function, do not draw it. Sliders settings are used if option 'R' - use range is active.; Users can change min/max values by pressing the left mouse button; near to the left/right slider edges. It is possible o change both; values simultaneously by pressing the left mouse button near to its; center and moving it to a new desir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFitEditor.html:2412,error,error,2412,root/html528/TFitEditor.html,https://root.cern,https://root.cern/root/html528/TFitEditor.html,10,['error'],['error']
Availability,"ed to _any_ kind of plot (components, asymmetries, efficiencies; // etc..); model.plotOn(frame, VisualizeError(*r, 1), FillColor(kOrange), Components(""bkg""));; model.plotOn(frame, VisualizeError(*r, 1, false), DrawOption(""L""), LineWidth(2), LineColor(kRed), Components(""bkg""),; LineStyle(kDashed));; ; // Overlay central value; model.plotOn(frame);; model.plotOn(frame, Components(""bkg""), LineStyle(kDashed));; d->plotOn(frame);; frame->SetMinimum(0);; ; // V i s u a l i z e p a r t i a l f i t e r r o r; // ------------------------------------------------------; ; // Make plot frame; RooPlot *frame2 = x.frame(Bins(40), Title(""Visualization of 2-sigma partial error from (m,m2)""));; ; // Visualize partial error. For partial error visualization the covariance matrix is first reduced as follows; // ___ -1; // Vred = V22 = V11 - V12 * V22 * V21; //; // Where V11,V12,V21,V22 represent a block decomposition of the covariance matrix into observables that; // are propagated (labeled by index '1') and that are not propagated (labeled by index '2'), and V22bar; // is the Shur complement of V22, calculated as shown above; //; // (Note that Vred is _not_ a simple sub-matrix of V); ; // Propagate partial error due to shape parameters (m,m2) using linear and sampling method; model.plotOn(frame2, VisualizeError(*r, RooArgSet(m, m2), 2), FillColor(kCyan));; model.plotOn(frame2, Components(""bkg""), VisualizeError(*r, RooArgSet(m, m2), 2), FillColor(kCyan));; ; model.plotOn(frame2);; model.plotOn(frame2, Components(""bkg""), LineStyle(kDashed));; frame2->SetMinimum(0);; ; // Make plot frame; RooPlot *frame3 = x.frame(Bins(40), Title(""Visualization of 2-sigma partial error from (s,s2)""));; ; // Propagate partial error due to yield parameter using linear and sampling method; model.plotOn(frame3, VisualizeError(*r, RooArgSet(s, s2), 2), FillColor(kGreen));; model.plotOn(frame3, Components(""bkg""), VisualizeError(*r, RooArgSet(s, s2), 2), FillColor(kGreen));; ; model.plotOn(frame3);; model.plotO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf610__visualerror_8C.html:4089,error,error,4089,doc/master/rf610__visualerror_8C.html,https://root.cern,https://root.cern/doc/master/rf610__visualerror_8C.html,2,['error'],['error']
Availability,"ed to be refreshed); boolfSumLargerValuesp-value for velues of testStat >= testStat_data (or testStat <= testStat_data); vector<double>fTestStat_bvector of results for B-only toy-MC; doublefTestStat_dataresults (test statistics) evaluated for data; vector<double>fTestStat_sbvector of results for S+B toy-MC. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HybridResult( const char *name); HybridResult default constructor (with name ). HybridResult(const char* name, vector<double>& testStat_sb_vals, vector<double>& testStat_b_vals, bool sumLargerValues = true); HybridResult constructor (with name, title and vectors of S+B and B values). ~HybridResult(); HybridResult destructor. void SetDataTestStatistics(double testStat_data_val); set the value of the test statistics on data. double NullPValue() const; return 1-CL_b : the B p-value. double AlternatePValue() const; return CL_s+b : the S+B p-value. Double_t CLbError() const; Returns an estimate of the error on CLb assuming a binomial error on; CLb:. Double_t CLsplusbError() const; Returns an estimate of the error on CLsplusb assuming a binomial; error on CLsplusb:. Double_t CLsError() const; Returns an estimate of the error on CLs through combination of the; errors on CLb and CLsplusb:. void Add(RooStats::HybridResult* other); add additional toy-MC experiments to the current results; use the data test statistics of the added object if none is already present (otherwise, ignore the new one). HybridPlot* GetPlot(const char* name, const char* title, int n_bins); prepare a plot showing a result and return a pointer to a HybridPlot object; the needed arguments are: an object name, a title and the number of bins in the plot. void PrintMore(const char* options); Print out some information about the results. explicit HybridResult(const char *name = 0); Default constructor. std::vector<double> GetTestStat_sb(); Get test statistics values for the sb model. {return fTestStat_sb;}. std::vect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HybridResult.html:8668,error,error,8668,root/html526/RooStats__HybridResult.html,https://root.cern,https://root.cern/root/html526/RooStats__HybridResult.html,2,['error'],['error']
Availability,"ed to notify condition which waiting when operation will complete. ; Condition notified only if not-postponed state is set ; Definition at line 452 of file THttpCallArg.cxx. ◆ NumHeader(). Int_t THttpCallArg::NumHeader ; (; ); const. inline . returns number of fields in header ; Definition at line 202 of file THttpCallArg.h. ◆ NumRequestHeader(). Int_t THttpCallArg::NumRequestHeader ; (; ); const. inline . returns number of fields in request header ; Definition at line 119 of file THttpCallArg.h. ◆ ReplaceAllinContent(). void THttpCallArg::ReplaceAllinContent ; (; const std::string & ; from, . const std::string & ; to, . bool ; once = false . ). Replace all occurrences of string in content. ; Parameters. fromthat to replace ; tonew content ; onceset to true to stop after first occurrence is replaced Normally used only internally . Definition at line 278 of file THttpCallArg.cxx. ◆ Set404(). void THttpCallArg::Set404 ; (; ). inline . mark reply as 404 error - page/request not exists or refused ; Definition at line 163 of file THttpCallArg.h. ◆ SetBinary(). void THttpCallArg::SetBinary ; (; ). Set content type as ""application/x-binary"". ; Definition at line 206 of file THttpCallArg.cxx. ◆ SetBinaryContent(). void THttpCallArg::SetBinaryContent ; (; std::string && ; bin). Set content type as ""application/x-binary"" and also assigns content. ; Parameters. binwill be in undefined state after method call . Definition at line 216 of file THttpCallArg.cxx. ◆ SetContent() [1/2]. void THttpCallArg::SetContent ; (; const char * ; cont). Set content as text. ; Content will be copied by THttpCallArg ; Definition at line 129 of file THttpCallArg.cxx. ◆ SetContent() [2/2]. void THttpCallArg::SetContent ; (; std::string && ; cont). Set text or binary content directly After method call argument cont will be in undefined state. ; Definition at line 141 of file THttpCallArg.cxx. ◆ SetContentType(). void THttpCallArg::SetContentType ; (; const char * ; typ). inline . set content type li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHttpCallArg.html:26514,error,error,26514,doc/master/classTHttpCallArg.html,https://root.cern,https://root.cern/doc/master/classTHttpCallArg.html,1,['error'],['error']
Availability,"ed to use several tabs to organize properly your class-editor. Each editor tab is a resource shared among all the class-editors. Tabs must be created from the constructor of your editor-class by using the method:; TGVerticalFrame* TGedFrame::CreateEditorTabSubFrame(const Text_t *name),; It returns a pointer to a new tab container frame ready for use in your class. If you need to hide/show this frame depending on the object’s status, you should store it in a data member. See for examples: TH1Editor, TH2Editor.; 25.9.2.3 Base-Class Editors Control; Full control over base-class editors can be achieved by re-implementing virtual method void TGedFrame::ActivateBaseClassEditors(TClass *cl). It is called during each compound editor rebuild and the default implementation simply offers all base-classes to the publishing mechanism.; To prevent inclusion of a base-class into the compound editor, call:; void TGedEditor::ExcludeClassEditor(TClass* class, Bool_t recurse); Pointer to the compound GED-editor is available in TGedFrame‘s data-member:; TGedEditor *fGedEditor; Ordering of base-class editor frames follows the order of the classes in the class hierarchy. This order can be changed by modifying the value of TGedFrame’s data member Int_t fPriority. The default value is 50; smaller values move the frame towards to the top. This priority should be set in the editor constructor.; 25.10 Drag and Drop; Drag and Drop support is introduced for Linux (via Xdnd - the drag and drop protocol for X window system) and for Windows (via Clipboard). Users can selects something in ROOT with a mouse press, drags it (moves the mouse while keeping the mouse button pressed) and releases the mouse button someplace else. When the button is released the selected data is “dropped” at that location. This way, a histogram from an opened ROOT file in the browser can be dragged to any TCanvas. A script file from the browser can be dropped to a TGTextView or TGTextEdit widget in TGTextEditor.; On Linux,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1226210,avail,available,1226210,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['avail'],['available']
Availability,"ed unless the verbose flag is set. Int_t getCatIndex(const char* name, Int_t defVal = 0, Bool_t verbose = kFALSE) const; Get index value of a RooAbsCategory stored in set with given name. If none is found, value of defVal is returned.; No error messages are printed unless the verbose flag is set. Bool_t setCatIndex(const char* name, Int_t newVal = 0, Bool_t verbose = kFALSE); Set index value of a RooAbsCategoryLValue stored in set with given name to newVal.; No error messages are printed unless the verbose flag is set. const char* getStringValue(const char* name, const char* defVal = """", Bool_t verbose = kFALSE) const; Get string value of a RooAbsString stored in set with given name. If none is found, value of defVal is returned.; No error messages are printed unless the verbose flag is set. Bool_t setStringValue(const char* name, const char* newVal = """", Bool_t verbose = kFALSE); Set string value of a RooStringVar stored in set with given name to newVal.; No error messages are printed unless the verbose flag is set. void writeToFile(const char* fileName) const; Write contents of the argset to specified file.; See writeToStream() for details. Bool_t readFromFile(const char* fileName, const char* flagReadAtt = 0, const char* section = 0, Bool_t verbose = kFALSE); Read contents of the argset from specified file.; See readFromStream() for details. void writeToStream(ostream& os, Bool_t compact, const char* section = 0) const; Write the contents of the argset in ASCII form to given stream. A line is written for each element contained in the form; <argName> = <argValue>. The <argValue> part of each element is written by the arguments'; writeToStream() function. Bool_t readFromStream(istream& is, Bool_t compact, const char* flagReadAtt, const char* section, Bool_t verbose = kFALSE); Read the contents of the argset in ASCII form from given stream. The stream is read to end-of-file and each line is assumed to be; of the form. <argName> = <argValue>. Lines starting with argNa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooArgSet.html:20378,error,error,20378,root/html526/RooArgSet.html,https://root.cern,https://root.cern/root/html526/RooArgSet.html,10,['error'],['error']
Availability,"ed unless the verbose flag is set. const char* getCatLabel(const char* name, const char* defVal = """", Bool_t verbose = kFALSE) const; Get state name of a RooAbsCategory stored in set with given name. If none is found, value of defVal is returned.; No error messages are printed unless the verbose flag is set. Bool_t setCatLabel(const char* name, const char* newVal = """", Bool_t verbose = kFALSE); Set state name of a RooAbsCategoryLValue stored in set with given name to newVal.; No error messages are printed unless the verbose flag is set. Int_t getCatIndex(const char* name, Int_t defVal = 0, Bool_t verbose = kFALSE) const; Get index value of a RooAbsCategory stored in set with given name. If none is found, value of defVal is returned.; No error messages are printed unless the verbose flag is set. Bool_t setCatIndex(const char* name, Int_t newVal = 0, Bool_t verbose = kFALSE); Set index value of a RooAbsCategoryLValue stored in set with given name to newVal.; No error messages are printed unless the verbose flag is set. const char* getStringValue(const char* name, const char* defVal = """", Bool_t verbose = kFALSE) const; Get string value of a RooAbsString stored in set with given name. If none is found, value of defVal is returned.; No error messages are printed unless the verbose flag is set. Bool_t setStringValue(const char* name, const char* newVal = """", Bool_t verbose = kFALSE); Set string value of a RooStringVar stored in set with given name to newVal.; No error messages are printed unless the verbose flag is set. void writeToFile(const char* fileName) const; Write contents of the argset to specified file.; See writeToStream() for details. Bool_t readFromFile(const char* fileName, const char* flagReadAtt = 0, const char* section = 0, Bool_t verbose = kFALSE); Read contents of the argset from specified file.; See readFromStream() for details. void writeToStream(ostream& os, Bool_t compact, const char* section = 0) const; Write the contents of the argset in ASCII form",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooArgSet.html:19870,error,error,19870,root/html526/RooArgSet.html,https://root.cern,https://root.cern/root/html526/RooArgSet.html,10,['error'],['error']
Availability,"ed using Eq. (2) where the covariance matrix is taken from Minuit. Histograms of  are filled by weighting the events with . . Error bars per bin are given by Eq. (6). . The ; reproduce the true distributions of the species in the control variable , within the above defined statistical uncertainties. Illustrations. To illustrate the technique, one considers an example derived from the analysis where . have been first used (charmless B decays). One is dealing with a data; sample in which two species are present: the first is termed signal and; the second background. A maximum Likelihood fit is performed to obtain; the two yields and . The fit relies on two discriminating variables collectively denoted  which are chosen within three possible variables denoted , and .; The variable which is not incorporated in  is used as the control variable . The six distributions of the three variables are assumed to be the ones depicted in Fig. 1. Figure 1:; Distributions of the three discriminating variables available to perform the Likelihood fit: ; , , .; Among the three variables, two are used to perform the fit while one is; kept out of the fit to serve the purpose of a control variable. The; three distributions on the top (resp. bottom) of the figure correspond; to the signal (resp. background). The unit of the vertical axis is; chosen such that it indicates the number of entries per bin, if one; slices the histograms in 25 bins. A data sample being built through a Monte Carlo simulation based on the distributions shown in Fig. 1, one obtains the three distributions of Fig. 2. Whereas the distribution of  clearly indicates the presence of the signal, the distribution of and are less obviously populated by signal. Figure 2:; Distributions of the three discriminating variables for signal plus; background. The three distributions are the ones obtained from a data; sample obtained through a Monte Carlo simulation based on the; distributions shown in Fig. 1. The data sample consist",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSPlot.html:5617,avail,available,5617,root/html528/TSPlot.html,https://root.cern,https://root.cern/root/html528/TSPlot.html,6,['avail'],['available']
Availability,"ed values; // of fitted y positions of 1D ridges, output parameters; double position_err_y1[MAX_NUMBER_OF_PEAKS2]; // y position errors of 1D ridges; bool fix_position_y1[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix; // appropriate y positions of 1D ridges (not fit).; // However they are present in the estimated functional; double amp_init[MAX_NUMBER_OF_PEAKS2]; // initial values of 2D peaks; // amplitudes, input parameters; double amp_calc[MAX_NUMBER_OF_PEAKS2]; // calculated values of; // fitted amplitudes of 2D peaks, output parameters; double amp_err[MAX_NUMBER_OF_PEAKS2]; // amplitude errors of 2D peaks; bool fix_amp[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows; // to fix appropriate amplitudes of 2D peaks (not fit).; // However they are present in the estimated functional; double amp_init_x1[MAX_NUMBER_OF_PEAKS2]; // initial values of 1D; // ridges amplitudes, input parameters; double amp_calc_x1[MAX_NUMBER_OF_PEAKS2]; // calculated values of; // fitted amplitudes of 1D ridges, output parameters; double amp_err_x1[MAX_NUMBER_OF_PEAKS2]; // amplitude errors of 1D ridges; bool fix_amp_x1[MAX_NUMBER_OF_PEAKS2]; // logical vector which alloes to fix; // appropriate amplitudes of 1D ridges (not fit).; // However they are present in the estimated functional; double amp_init_y1[MAX_NUMBER_OF_PEAKS2]; // initial values of 1D; // ridges amplitudes, input parameters; double amp_calc_y1[MAX_NUMBER_OF_PEAKS2]; // calculated values of; // fitted amplitudes of 1D ridges, output parameters; double amp_err_y1[MAX_NUMBER_OF_PEAKS2]; // amplitude errors of 1D ridges; bool fix_amp_y1[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix; // appropriate amplitudes of 1D ridges (not fit).; // However they are present in the estimated functional; double volume[MAX_NUMBER_OF_PEAKS1]; // calculated volumes of peaks; double volume_err[MAX_NUMBER_OF_PEAKS1]; // errors of peak volumes; double sigma_init_x; // sigma x parameter; double sigma_calc_x;; double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/spectrum/Spectrum.html:49413,error,errors,49413,root/html534/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/html534/guides/spectrum/Spectrum.html,2,['error'],['errors']
Availability,"ed with a stop request; TMutex*TProofPlayer::fStopTimerMtxTo protect the stop timer; Long64_tTProofPlayer::fTotalEventsnumber of events requested; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static THashList*TProofPlayer::fgDrawInputParsList of input parameters to be kept on drawing actions. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetMerging(Bool_t on = kTRUE); Switch on/off merge timer. ~TProofPlayerRemote(); Destructor. Int_t InitPacketizer(TDSet* dset, Long64_t nentries, Long64_t first, const char* defpackunit, const char* defpackdata); Init the packetizer; Return 0 on success (fPacketizer is correctly initialized), -1 on failure. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF.; This method is called on client and on the PROOF master.; The return value is -1 in case of an error and TSelector::GetStatus() in; in case of success. Long64_t Process(TDSet* set, TSelector* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF.; This method is called on client and on the PROOF master.; The return value is -1 in case of an error and TSelector::GetStatus() in; in case of success. Bool_t JoinProcess(TList* workers); Prepares the given list of new workers to join a progressing process.; Returns kTRUE on success, kFALSE otherwise. Bool_t MergeOutputFiles(); Merge output in files. void SetSelectorDataMembersFromOutputList(); Set the selector's data members:; find the mapping of data members to otuput list entries in the output list; and apply it. Long64_t Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE). Long64_t Finalize(TQueryResult* qr); Finalize the results of a query already processed. Bool_t SendSelector(const char* selector_file); Send the selector file(s) to master or worker nodes. void MergeOutput(Bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofPlayerRemote.html:18171,error,error,18171,root/html534/TProofPlayerRemote.html,https://root.cern,https://root.cern/root/html534/TProofPlayerRemote.html,4,['error'],['error']
Availability,"ed with the commands in the following; 164table:; 165 ; 166Begin_Macro; 167mathsymbols.C; 168End_Macro; 169 ; 170 ; 171\anchor L6; 172## Delimiters; 173TLatex provides 4 kinds of proportional delimiters:; 174 ; 175 #[]{....} or ""a la"" Latex #left[.....#right] : big square brackets; 176 #{}{....} or #left{.....#right} : big curly brackets; 177 #||{....} or #left|.....#right| : big absolute value symbols; 178 #(){....} or #left(.....#right) : big parentheses; 179 ; 180\anchor L7; 181## Greek Letters; 182The command to produce a lowercase Greek letter is obtained by adding a; 183`#` to the name of the letter. For an uppercase Greek letter, just; 184capitalize the first letter of the command name. Some letters have two; 185representations. The name of the second one (the ""variation"") starts with ""var"".; 186The following table gives the complete list:; 187 ; 188Begin_Macro; 189greekletters.C; 190End_Macro; 191 ; 192 ; 193\anchor L8; 194## Accents; 195Several kind of accents are available:; 196 ; 197Begin_Macro; 198{; 199 TCanvas *cl = new TCanvas(""cl"",""cl"",10,10,700,300);; 200 TLatex Tl; Tl.SetTextFont(43); Tl.SetTextSize(20);; 201 Tl.DrawText(.1, .10, ""#hat : ""); Tl.DrawLatex(.3, .10, "" #hat{a} "");; 202 Tl.DrawText(.1, .23, ""#check : ""); Tl.DrawLatex(.3, .23, "" #check{a} "");; 203 Tl.DrawText(.1, .36, ""#acute : ""); Tl.DrawLatex(.3, .36, "" #acute{a} "");; 204 Tl.DrawText(.1, .50, ""#grave : ""); Tl.DrawLatex(.3, .50, "" #grave{a} "");; 205 Tl.DrawText(.1, .63, ""#dot : ""); Tl.DrawLatex(.3, .63, "" #dot{a} "");; 206 Tl.DrawText(.1, .76, ""#ddot : ""); Tl.DrawLatex(.3, .76, "" #ddot{a} "");; 207 Tl.DrawText(.1, .90, ""#tilde : ""); Tl.DrawLatex(.3, .90, "" #tilde{a} "");; 208}; 209End_Macro; 210 ; 211 ; 212The special sign: `#slash` draws a slash on top of the text between brackets:; 213 ; 214Begin_Macro; 215{; 216 TCanvas *cl = new TCanvas(""cl"",""cl"",10,10,700,100);; 217 TLatex Tl; Tl.SetTextFont(43); Tl.SetTextSize(20);; 218 Tl.DrawText(.1, .5, ""#slash{E}_{T} :""); Tl.DrawLatex(.5, .5, ""#sl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TLatex_8cxx_source.html:6868,avail,available,6868,doc/master/TLatex_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TLatex_8cxx_source.html,1,['avail'],['available']
Availability,"ed with the solution .; TransSolve(TVectorD &b); Solve A^T x = b . x is supplied through the argument and replaced with the solution .; MultiSolve(TMatrixD &B); Solve A X = B . where X and are now matrices . X is supplied through the argument and replaced with the solution .; Invert(TMatrixD &inv); This is of course just a call to MultiSolve with as input argument the unit matrix . Note that for a matrix a(m,n) with m > n a pseudo-inverse is calculated . Tolerances and Scaling; The tolerance parameter (which is a member of this base class) plays a crucial role in all operations of the decomposition classes . It gives the user a powerful tool to monitor and steer the operations Its default value is sqrt(epsilon) where 1+epsilon = 1; If you do not want to be bothered by the following considerations, like in most other linear algebra packages, just set the tolerance with SetTol to an arbitrary small number .; The tolerance number is used by each decomposition method to decide whether the matrix is near singular, except of course SVD which can handle singular matrices . For each decomposition this will be checked in a different way; in LU the matrix is considered singular when, at some point in the decomposition, a diagonal element < fTol . Therefore, we had to set in the example above of the (10x10) Hilbert, which is near singular, the tolerance on 10e-12 . (The fact that we have to set the tolerance < sqrt(epsilon) is a clear indication that we are losing precision .); If the matrix is flagged as being singular, operations with the decomposition will fail and will return matrices/vectors that are invalid .; The observant reader will notice that by scaling the complete matrix by some small number the decomposition will detect a singular matrix . In this case the user will have to reduce the tolerance number by this factor . (For CPU time saving we decided not to make this an automatic procedure) .; Code for this could look as follows: const Double_t max_abs = Abs(a).Ma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompBase.html:3061,toler,tolerance,3061,doc/master/classTDecompBase.html,https://root.cern,https://root.cern/doc/master/classTDecompBase.html,1,['toler'],['tolerance']
Availability,"ed(NO_ALTERNATIVE_QUEUE) && !defined(ALTERNATIVE_QUEUE); 149/* Use a default implementation */; 150#define NO_ALTERNATIVE_QUEUE; 151#endif; 152 ; 153#if defined(NO_FILESYSTEMS) && !defined(NO_FILES); 154/* File system access:; 155 * NO_FILES = do not serve any files from the file system automatically.; 156 * However, with NO_FILES CivetWeb may still write log files, read access; 157 * control files, default error page files or use API functions like; 158 * mg_send_file in callbacks to send files from the server local; 159 * file system.; 160 * NO_FILES only disables the automatic mapping between URLs and local; 161 * file names.; 162 * NO_FILESYSTEM = do not access any file at all. Useful for embedded; 163 * devices without file system. Logging to files in not available; 164 * (use callbacks instead) and API functions like mg_send_file are not; 165 * available.; 166 * If NO_FILESYSTEM is set, NO_FILES must be set as well.; 167 */; 168#error ""Inconsistent build flags, NO_FILESYSTEMS requires NO_FILES""; 169#endif; 170 ; 171/* DTL -- including winsock2.h works better if lean and mean */; 172#if !defined(WIN32_LEAN_AND_MEAN); 173#define WIN32_LEAN_AND_MEAN; 174#endif; 175 ; 176#if defined(__SYMBIAN32__); 177/* According to https://en.wikipedia.org/wiki/Symbian#History,; 178 * Symbian is no longer maintained since 2014-01-01.; 179 * Support for Symbian has been removed from CivetWeb; 180 */; 181#error ""Symbian is no longer maintained. CivetWeb no longer supports Symbian.""; 182#endif /* __SYMBIAN32__ */; 183 ; 184#if defined(__ZEPHYR__); 185#include <time.h>; 186 ; 187#include <ctype.h>; 188#include <net/socket.h>; 189#include <posix/pthread.h>; 190#include <posix/time.h>; 191#include <stdio.h>; 192#include <stdlib.h>; 193#include <string.h>; 194#include <zephyr.h>; 195 ; 196#include <fcntl.h>; 197 ; 198#include <libc_extensions.h>; 199 ; 200/* Max worker threads is the max of pthreads minus the main application thread; 201 * and minus the main civetweb thread, thus -2; 20",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:7167,error,error,7167,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,2,['error'],['error']
Availability,"ed(R__FBSD); 3391 // fPrevLoadedDynLibInfo is unused on Linux.; 3392 (void) fPrevLoadedDynLibInfo;; 3393 ; 3394 std::vector<std::string> newLibs;; 3395 dl_iterate_phdr(callback_for_dl_iterate_phdr, &newLibs);; 3396 for (auto &&lib: newLibs); 3397 RegisterLoadedSharedLibrary(lib.c_str());; 3398#else; 3399 Error(""TCling::UpdateListOfLoadedSharedLibraries"",; 3400 ""Platform not supported!"");; 3401#endif; 3402}; 3403 ; 3404namespace {; 3405template <int N>; 3406static bool StartsWithStrLit(const char *haystack, const char (&needle)[N]) {; 3407 return !strncmp(haystack, needle, N - 1);; 3408}; 3409}; 3410 ; 3411////////////////////////////////////////////////////////////////////////////////; 3412/// Register a new shared library name with the interpreter; add it to; 3413/// fSharedLibs.; 3414 ; 3415void TCling::RegisterLoadedSharedLibrary(const char* filename); 3416{; 3417 // Ignore NULL filenames, aka ""the process"".; 3418 if (!filename) return;; 3419 ; 3420 // Tell the interpreter that this library is available; all libraries can be; 3421 // used to resolve symbols.; 3422 cling::DynamicLibraryManager* DLM = fInterpreter->getDynamicLibraryManager();; 3423 if (!DLM->isLibraryLoaded(filename)) {; 3424 DLM->loadLibrary(filename, true /*permanent*/, true /*resolved*/);; 3425 }; 3426 ; 3427#if defined(R__MACOSX); 3428 // Check that this is not a system library that does not exist on disk.; 3429 auto lenFilename = strlen(filename);; 3430 auto isInMacOSSystemDir = [](const char *fn) {; 3431 return StartsWithStrLit(fn, ""/usr/lib/"") || StartsWithStrLit(fn, ""/System/Library/"");; 3432 };; 3433 if (!strcmp(filename, ""cl_kernels"") // yepp, no directory; 3434 ; 3435 // These we should not link with (e.g. because they forward to .tbd):; 3436 || StartsWithStrLit(filename, ""/usr/lib/system/""); 3437 || StartsWithStrLit(filename, ""/usr/lib/libc++""); 3438 || StartsWithStrLit(filename, ""/System/Library/Frameworks/""); 3439 || StartsWithStrLit(filename, ""/System/Library/PrivateFrameworks/""); 344",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:132138,avail,available,132138,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['avail'],['available']
Availability,"ed) const; Int_tTTable::CopyRows(const TTable* srcTable, Long_t srcRow = 0, Long_t dstRow = 0, Long_t nRows = 0, Bool_t expand = kFALSE); virtual voidTTable::CopySet(TTable& array); virtual voidTTable::DeleteRows(Long_t indx, UInt_t nRows = 1); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTable::Draw(Option_t* opt); virtual TH1*TTable::Draw(TCut varexp, TCut selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0); virtual TH1*TTable::Draw(const char* varexp, const char* selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; TGenericTable::iteratorend(); TGenericTable::iteratorend() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TDataSet*TDataSet::Find(const char* path) const; virtual TDataSet*TDataSet::FindByName(const char* name, const char* path = """", Option_t* opt = """") const; virtual TDataSet*TDataSet::FindByPath(const char* path) const; virtual TDataSet*TDataSet::FindByTitle(const char* title, const char* path = """", Option_t* opt = """") const; virtual TObject*TDataSet::FindObject(const char* name) const; virtual TObject*TDataSet::FindObject(const TObject* o) const; virtual TDataSet*TDataSet::First() const; virtual voidTTable::Fit(const char* formula, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Int_t nentries = 1000000000, Int_t firstentry = 0)MENU ; void*TTable::GetArray",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGenericTable.html:4959,error,error,4959,root/html528/TGenericTable.html,https://root.cern,https://root.cern/root/html528/TGenericTable.html,10,['error'],['error']
Availability,"ed) const; TDrawFeedback*TProof::CreateDrawFeedback(); voidTProof::DataSetStatus(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; Int_tTProof::DeactivateWorker(const char* ord, Bool_t save = kTRUE); static voidTProof::DelEnvVar(const char* name); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTProof::DeleteDrawFeedback(TDrawFeedback* f); voidTProof::DeleteParameters(const char* wildcard); virtual voidTQObject::Destroyed()SIGNAL ; voidTProof::Detach(Option_t* opt = """"); voidTProof::DisableGoAsyn(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObject::Disconnect(TQObject* sender, const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObject::Disconnect(const char* class_name, const char* signal, void* receiver = 0, const char* slot = 0); virtual voidTQObject::Disconnected(const char*); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Int_tTProof::DownloadPackage(const char* par, const char* dstdir = 0); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual Long64_tDrawSelect(TDSet* dset, const char* varexp, const char* selection = """", Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); virtual voidTObject::Dump() constMENU ; virtual Int_tTProof::Echo(const TObject* obj); virtual Int_tTProof::Echo(const char* str); voidTQObject::Emit(const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofLite.html:4229,Down,DownloadPackage,4229,root/html534/TProofLite.html,https://root.cern,https://root.cern/root/html534/TProofLite.html,3,['Down'],['DownloadPackage']
Availability,"ed) const; TDrawFeedback*TProof::CreateDrawFeedback(); voidTProof::DataSetStatus(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; Int_tTProof::DeactivateWorker(const char* ord, Bool_t save = kTRUE); static voidTProof::DelEnvVar(const char* name); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTProof::DeleteDrawFeedback(TDrawFeedback* f); voidTProof::DeleteParameters(const char* wildcard); virtual voidTQObject::Destroyed()SIGNAL ; voidTProof::Detach(Option_t* opt = """"); voidTProof::DisableGoAsyn(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObject::Disconnect(TQObject* sender, const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObject::Disconnect(const char* class_name, const char* signal, void* receiver = 0, const char* slot = 0); virtual voidTQObject::Disconnected(const char*); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Int_tTProof::DownloadPackage(const char* par, const char* dstdir = 0); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual Long64_tTProof::DrawSelect(TDSet* dset, const char* varexp, const char* selection = """", Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Long64_tTProof::DrawSelect(const char* dsetname, const char* varexp, const char* selection = """", Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0, TObject* enl = 0); virtual voidTObject::Dump() constMENU ; virtual Int_tTProof::Echo(const TObject* obj); virtual Int_tTProof::Echo(const char* str); voidTQObject::Emit(const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofCondor.html:4262,Down,DownloadPackage,4262,root/html534/TProofCondor.html,https://root.cern,https://root.cern/root/html534/TProofCondor.html,6,['Down'],['DownloadPackage']
Availability,"ed) const; voidCopyCollectionProxy(const TVirtualCollectionProxy&); voidTDictionary::CreateAttributeMap(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDeleteArray(void* ary, Bool_t dtorOnly = kFALSE); voidDestructor(void* obj, Bool_t dtorOnly = kFALSE); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDump() const; voidDump(const void* obj, Bool_t noAddr = kFALSE) const; void*DynamicCast(const TClass* base, void* obj, Bool_t up = kTRUE); const void*DynamicCast(const TClass* base, const void* obj, Bool_t up = kTRUE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; char*EscapeChars(const char* text) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); TVirtualStreamerInfo*FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; TVirtualStreamerInfo*FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TVirtualStreamerInfo*FindStreamerInfo(UInt_t checksum) const; TVirtualStreamerInfo*FindStreamerInfoAbstractEmulated(UInt_t checksum) const; TClass*GetActualClass(const void* object) const; TDictAttributeMap*TDictionary::GetAttributeMap() const; TClass*GetBaseClass(const char* classname); TClass*GetBaseClass(const TClass* base); Int_tGetBaseClassOffset(const TClass* toBase, void* address = 0, bool isDerivedObject = true); TClass*GetBaseDataMember(const char* datamember); UInt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TClass.html:3148,error,error,3148,root/html602/TClass.html,https://root.cern,https://root.cern/root/html602/TClass.html,4,['error'],['error']
Availability,"ed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented from TSocket.; Definition at line 82 of file TServerSocket.h. ◆ Recv() [4/4]. Int_t TServerSocket::Recv ; (; TMessage *& ; mess). inlineoverridevirtual . Receive a TMessage object. ; The user must delete the TMessage object. Returns length of message in bytes (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read) or -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). In those case mess == 0. ; Reimplemented from TSocket.; Definition at line 80 of file TServerSocket.h. ◆ RecvRaw(). Int_t TServerSocket::RecvRaw ; (; void * ; buffer, . Int_t ; length, . ESendRecvOptions ; opt = kDefault . ). inlineoverridevirtual . Receive a raw buffer of specified length bytes. ; Using option kPeek one can peek at incoming data. Returns number of received bytes. Returns -1 in case of error. In case of opt == kOob: -2 means EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock) -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Reimplemented from TSocket.; Definition at line 88 of file TServerSocket.h. ◆ Send() [1/4]. Int_t TServerSocket::Send ; (; const char * ; str, . Int_t ; kind = kMESS_STRING . ). inlineoverridevirtual . Send a character string buffer. ; Use kind to set the TMessage ""what"" field. Returns the number of bytes in the string str that were sent and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented from TSocket.; Definition at line 74 of file TServerSocket.h. ◆ Send() [2/4]. Int_t TServerSocket::Send ; (; const TMessage & ; mess). inlineoverridevirtual . Send a TMessage object. ; Returns the number of bytes in the TMessage that were sent and -1 in case",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTServerSocket.html:27218,error,error,27218,doc/master/classTServerSocket.html,https://root.cern,https://root.cern/doc/master/classTServerSocket.html,1,['error'],['error']
Availability,"ed). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from THnBase; static THnBase * CreateHnAny (const char *name, const char *title, const TH1 *h1, Bool_t sparse, Int_t chunkSize=1024 *16);  Create a THn / THnSparse object from a histogram deriving from TH1. ;  ; static THnBase * CreateHnAny (const char *name, const char *title, const THnBase *hn, Bool_t sparse, Int_t chunkSize=1024 *16);  Create a THnSparse (if ""sparse"") or THn from ""hn"", possibly converting THn <-> THnSparse. ;  ;  Protected Attributes inherited from THnBase; TObjArray fAxes;  Axes of the histogram. ;  ; TObjArray fBrowsables;  ! Browser-helpers for each axis ;  ; Double_t fEntries;  Number of entries, spread over chunks. ;  ; std::vector< Double_t > fIntegral;  ! vector with bin weight sums ;  ; enum THnBase:: { ... }  fIntegralStatus;  ! status of integral ;  ; Int_t fNdimensions;  Number of dimensions. ;  ; Double_t fTsumw;  Total sum of weights. ;  ; Double_t fTsumw2;  Total sum of weights squared; -1 if no errors are calculated. ;  ; TArrayD fTsumwx;  Total sum of weight*X for each dimension. ;  ; TArrayD fTsumwx2;  Total sum of weight*X*X for each dimension. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <THnSparse.h>. Inheritance diagram for THnSparseT< CONT >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ THnSparseT() [1/2]. template<class CONT > . THnSparseT< CONT >::THnSparseT ; (; ). inline . Definition at line 209 of file THnSparse.h. ◆ THnSparseT() [2/2]. template<class CONT > . THnSparseT< CONT >::THnSparseT ; (; const char * ; name, . const char * ; title, . Int_t ; dim, . const Int_t * ; nbins, . const Double_t * ; xmin = nullptr, . const Double_t * ; xmax = nullptr, . Int_t ; chunksize = 1024 * 16 . ). inline . Definition at line 210 of file THnSparse.h. Member Function Documentation. ◆ Class(). template<class CONT ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparseT.html:25661,error,errors,25661,doc/master/classTHnSparseT.html,https://root.cern,https://root.cern/doc/master/classTHnSparseT.html,1,['error'],['errors']
Availability,"ed, DS_t > DefinePerSample(std::string_view name, F expression)Define a new column that is updated when the input sample changes.Definition RInterface.hxx:735; ROOT::RDF::RSampleInfoThis type represents a sample identifier, to be used in conjunction with RDataFrame features such as ...Definition RSampleInfo.hxx:35; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::VecOps::RVec< float >; TAttText::SetTextFontvirtual void SetTextFont(Font_t tfont=62)Set the text font.Definition TAttText.h:46; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::Addvirtual Bool_t Add(TF1 *h1, Double_t c1=1, Option_t *option="""")Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2),...Definition TH1.cxx:826; THStackThe Histogram stack class.Definition THStack.h:40; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TLatex::DrawLatexNDCTLatex * DrawLatexNDC(Double_t x, Double_t y, const char *text)Draw this TLatex with new coordinates in NDC.Definition TLatex.cxx:1957; TLegendThis class displays a legend box (TPaveText) containing several legend entries.Definition TLegend.h:23; TObject::SaveAsvirtual void SaveAs(const char *filename="""", Option_t *option="""") constSave this object in the file specified by filename.Definition TObject.cxx:692; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; ptTPaveText * ptDefinition entrylist_figure1.C:7; ROOT::VecOps::Mapauto Map(Args &&... args)Create new collection applying a callable to the elements of the input collection.Definition RVec.hxx:2150; ROOT::VecOps::FilterRVec< T > Filter(const RVec< T > &v, F &&f)Cre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html:15870,error,errors,15870,doc/master/df106__HiggsToFourLeptons_8C.html,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html,1,['error'],['errors']
Availability,"ed, any intermediate volume/node in the browser being subject; 146of direct access context menu operations (right mouse button click). All user; 147utilities of classes TGeoManager, TGeoVolume and TGeoNode can be called via the; 148context menu.; 149 ; 150\image html geom_browser.jpg; 151 ; 152### Drawing the geometry; 153 ; 154 Any logical volume can be drawn via TGeoVolume::Draw() member function.; 155This can be directly accessed from the context menu of the volume object; 156directly from the browser.; 157 There are several drawing options that can be set with; 158TGeoManager::SetVisOption(Int_t opt) method :; 159 ; 160#### opt=0; 161 only the content of the volume is drawn, N levels down (default N=3).; 162 This is the default behavior. The number of levels to be drawn can be changed; 163 via TGeoManager::SetVisLevel(Int_t level) method.; 164 ; 165\image html geom_frame0.jpg; 166 ; 167#### opt=1; 168 the final leaves (e.g. daughters with no containment) of the branch; 169 starting from volume are drawn down to the current number of levels.; 170 WARNING : This mode is memory consuming; 171 depending of the size of geometry, so drawing from top level within this mode; 172 should be handled with care for expensive geometries. In future there will be; 173 a limitation on the maximum number of nodes to be visualized.; 174 ; 175\image html geom_frame1.jpg; 176 ; 177#### opt=2; 178 only the clicked volume is visualized. This is automatically set by; 179 TGeoVolume::DrawOnly() method; 180 ; 181#### opt=3 - only a given path is visualized. This is automatically set by; 182 TGeoVolume::DrawPath(const char *path) method; 183 ; 184 The current view can be exploded in cartesian, cylindrical or spherical; 185coordinates :; 186 TGeoManager::SetExplodedView(Int_t opt). Options may be :; 187- 0 - default (no bombing); 188- 1 - cartesian coordinates. The bomb factor on each axis can be set with; 189 TGeoManager::SetBombX(Double_t bomb) and corresponding Y and Z.; 190- 2 - bomb in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:9695,down,down,9695,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,1,['down'],['down']
Availability,"ed, default color-set; static Bool_tTGLViewer::fgUseDefaultColorSetForNewViewers! name says it all. private:. Int_tfBorder; TGCompositeFrame*fFrame. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLEmbeddedViewer(const TGWindow* parent, TVirtualPad* pad = 0, Int_t border = 2); Constructor.; Argument 'border' specifies how many pixels to pad on each side of the; viewer. This area can be used for highlightning of the active viewer. TGLEmbeddedViewer(const TGWindow* parent, TVirtualPad* pad, TGedEditor* ged, Int_t border = 2); Constructor allowing to also specify an GED editor to use.; Argument 'border' specifies how many pixels to pad on each side of the; viewer. This area can be used for highlightning of the active viewer. ~TGLEmbeddedViewer(); Destroy standalone viewer object. void Init(const TGWindow* parent); Common initialization from all constructors. void CreateFrames(); Internal frames creation. void CreateGLWidget(); Create a GLwidget, it is an error if it is already created.; This is needed for frame-swapping on mac. void DestroyGLWidget(); Destroy the GLwidget, it is an error if it does not exist.; This is needed for frame-swapping on mac. TGLEmbeddedViewer(const TGLEmbeddedViewer& ). TGLEmbeddedViewer& operator=(const TGLEmbeddedViewer& ). const char * GetName() const; { return ""GLViewer""; }. TGCompositeFrame* GetFrame() const; { return fFrame; }. TGLOrthoCamera * GetOrthoXOYCamera(); { return &fOrthoXOYCamera; }. TGLOrthoCamera * GetOrthoXOZCamera(); { return &fOrthoXOZCamera; }. TGLOrthoCamera * GetOrthoZOYCamera(); { return &fOrthoZOYCamera; }. » Author: Bertrand Bellenot 23/01/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLEmbeddedViewer.h 31330 2009-11-19 17:34:19Z matevz $ » Last generated: 2010-11-16 10:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT suppo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLEmbeddedViewer.html:25178,error,error,25178,root/html528/TGLEmbeddedViewer.html,https://root.cern,https://root.cern/root/html528/TGLEmbeddedViewer.html,1,['error'],['error']
Availability,"ed, default color-set; static Bool_tTGLViewer::fgUseDefaultColorSetForNewViewers! name says it all. private:. Int_tfBorder; TGCompositeFrame*fFrame. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLEmbeddedViewer(const TGWindow* parent, TVirtualPad* pad = 0, Int_t border = 2); Constructor.; Argument 'border' specifies how many pixels to pad on each side of the; viewer. This area can be used for highlightning of the active viewer. TGLEmbeddedViewer(const TGWindow* parent, TVirtualPad* pad, TGedEditor* ged, Int_t border = 2); Constructor allowing to also specify an GED editor to use.; Argument 'border' specifies how many pixels to pad on each side of the; viewer. This area can be used for highlightning of the active viewer. ~TGLEmbeddedViewer(); Destroy standalone viewer object. void Init(const TGWindow* parent); Common initialization from all constructors. void CreateFrames(); Internal frames creation. void CreateGLWidget(); Create a GLwidget, it is an error if it is already created.; This is needed for frame-swapping on mac. void DestroyGLWidget(); Destroy the GLwidget, it is an error if it does not exist.; This is needed for frame-swapping on mac. TGLEmbeddedViewer(const TGLEmbeddedViewer& ). TGLEmbeddedViewer& operator=(const TGLEmbeddedViewer& ). const char * GetName() const; { return ""GLViewer""; }. TGCompositeFrame* GetFrame() const; { return fFrame; }. TGLOrthoCamera * GetOrthoXOYCamera(); { return &fOrthoXOYCamera; }. TGLOrthoCamera * GetOrthoXOZCamera(); { return &fOrthoXOZCamera; }. TGLOrthoCamera * GetOrthoZOYCamera(); { return &fOrthoZOYCamera; }. » Author: Bertrand Bellenot 23/01/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLEmbeddedViewer.h 31330 2009-11-19 17:34:19Z matevz $ » Last generated: 2011-07-04 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT suppo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLEmbeddedViewer.html:25238,error,error,25238,root/html530/TGLEmbeddedViewer.html,https://root.cern,https://root.cern/root/html530/TGLEmbeddedViewer.html,1,['error'],['error']
Availability,"ed, default color-set; static Bool_tTGLViewer::fgUseDefaultColorSetForNewViewers! name says it all. private:. Int_tfBorder; TGCompositeFrame*fFrame. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLEmbeddedViewer(const TGWindow* parent, TVirtualPad* pad = 0, Int_t border = 2); Constructor.; Argument 'border' specifies how many pixels to pad on each side of the; viewer. This area can be used for highlightning of the active viewer. TGLEmbeddedViewer(const TGWindow* parent, TVirtualPad* pad, TGedEditor* ged, Int_t border = 2); Constructor allowing to also specify an GED editor to use.; Argument 'border' specifies how many pixels to pad on each side of the; viewer. This area can be used for highlightning of the active viewer. ~TGLEmbeddedViewer(); Destroy standalone viewer object. void Init(const TGWindow* parent); Common initialization from all constructors. void CreateFrames(); Internal frames creation. void CreateGLWidget(); Create a GLwidget, it is an error if it is already created.; This is needed for frame-swapping on mac. void DestroyGLWidget(); Destroy the GLwidget, it is an error if it does not exist.; This is needed for frame-swapping on mac. TGLEmbeddedViewer(const TGLEmbeddedViewer& ). TGLEmbeddedViewer& operator=(const TGLEmbeddedViewer& ). const char * GetName() const; { return ""GLViewer""; }. TGCompositeFrame* GetFrame() const; { return fFrame; }. TGLOrthoCamera * GetOrthoXOYCamera(); { return &fOrthoXOYCamera; }. TGLOrthoCamera * GetOrthoXOZCamera(); { return &fOrthoXOZCamera; }. TGLOrthoCamera * GetOrthoZOYCamera(); { return &fOrthoZOYCamera; }. » Author: Bertrand Bellenot 23/01/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLEmbeddedViewer.h 31330 2009-11-19 17:34:19Z matevz $ » Last generated: 2011-11-03 20:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT suppo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLEmbeddedViewer.html:25238,error,error,25238,root/html532/TGLEmbeddedViewer.html,https://root.cern,https://root.cern/root/html532/TGLEmbeddedViewer.html,2,['error'],['error']
Availability,"ed, its friend; 675/// elements are also deleted.; 676///; 677/// The number of entries in the friend must be equal or greater to the number; 678/// of entries of the original chain. If the friend has fewer entries a warning; 679/// is given and the resulting histogram will have missing entries.; 680/// For additional information see TTree::AddFriend.; 681 ; 682TFriendElement* TChain::AddFriend(const char* chain, const char* dummy /* = """" */); 683{; 684 if (!fFriends) {; 685 fFriends = new TList();; 686 }; 687 TFriendElement* fe = new TFriendElement(this, chain, dummy);; 688 ; 689 R__ASSERT(fe); // There used to be a ""if (fe)"" test ... Keep this assert until we are sure that fe is never null; 690 ; 691 fFriends->Add(fe);; 692 ; 693 if (fProofChain); 694 // This updates the proxy chain when we will really use PROOF; 695 ResetBit(kProofUptodate);; 696 ; 697 // We need to invalidate the loading of the current tree because its list; 698 // of real friends is now obsolete. It is repairable only from LoadTree.; 699 InvalidateCurrentTree();; 700 ; 701 TTree* tree = fe->GetTree();; 702 if (!tree) {; 703 Warning(""AddFriend"", ""Unknown TChain %s"", chain);; 704 }; 705 return fe;; 706}; 707 ; 708////////////////////////////////////////////////////////////////////////////////; 709/// Add the whole chain or tree as a friend of this chain.; 710 ; 711TFriendElement* TChain::AddFriend(const char* chain, TFile* dummy); 712{; 713 if (!fFriends) fFriends = new TList();; 714 TFriendElement *fe = new TFriendElement(this,chain,dummy);; 715 ; 716 R__ASSERT(fe); // There used to be a ""if (fe)"" test ... Keep this assert until we are sure that fe is never null; 717 ; 718 fFriends->Add(fe);; 719 ; 720 if (fProofChain); 721 // This updates the proxy chain when we will really use PROOF; 722 ResetBit(kProofUptodate);; 723 ; 724 // We need to invalidate the loading of the current tree because its list; 725 // of real friend is now obsolete. It is repairable only from LoadTree; 726 InvalidateCurrentT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChain_8cxx_source.html:27219,repair,repairable,27219,doc/master/TChain_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TChain_8cxx_source.html,1,['repair'],['repairable']
Availability,"ed,; the errors are not drawn. The graph with errors in drawn like a normal graph. ""||""; Only the end vertical/horizonthal lines; of the error bars are drawn. This option is interesting to superimpose; systematic errors on top of a graph with statistical errors. ""[]""; Does the same as option ""||"" except that it draws additionnal tick marks at the; end of the vertical/horizonthal lines. This makes less ambiguous plots; in case several graphs are drawn on the same picture. ""0""; By default, when a data point is outside the visible range along the Y axis the error; bars are not drawn. Combined with other options, this option forces error bars'; drawing for the data points outside the visible range along the Y axis. ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. gStyle->SetErrorX(dx) controls the size of the error along x.; dx = 0 removes the error along x. gStyle->SetEndErrorSize(np) controls the size of the lines; at the end of the error bars (when option 1 is used).; By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are; defined along X and Y and are symmetric: The left and right errors are the same; along X and the bottom and up errors are the same along Y. Picture; Source. {; TCanvas *c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->Draw(""ap"");; return c4;; }; The option ""3"" allows to shows the error as band. Picture; Source. {; TCanvas *c41 = new TCanvas(""c41"",""c41"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraph",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGraphPainter.html:6420,error,error,6420,root/html530/TGraphPainter.html,https://root.cern,https://root.cern/root/html530/TGraphPainter.html,1,['error'],['error']
Availability,"ed. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#include ""TGraphQQ.h""; 13#include ""TAxis.h""; 14#include ""TF1.h""; 15#include ""TMath.h""; 16 ; 17ClassImp(TGraphQQ);; 18 ; 19/** \class TGraphQQ; 20\ingroup BasicGraphics; 21 ; 22This class allows to draw quantile-quantile plots; 23 ; 24Plots can be drawn for 2 datasets or for a dataset and a theoretical; 25distribution function; 26 ; 27## 2 datasets:; 28 Quantile-quantile plots are used to determine whether 2 samples come from; 29 the same distribution.; 30 A qq-plot draws the quantiles of one dataset against the quantile of the; 31 the other. The quantiles of the dataset with fewer entries are on Y axis,; 32 with more entries - on X axis.; 33 A straight line, going through 0.25 and 0.75 quantiles is also plotted; 34 for reference. It represents a robust linear fit, not sensitive to the; 35 extremes of the datasets.; 36 If the datasets come from the same distribution, points of the plot should; 37 fall approximately on the 45 degrees line. If they have the same; 38 distribution function, but location or scale different parameters,; 39 they should still fall on the straight line, but not the 45 degrees one.; 40 The greater their departure from the straight line, the more evidence there; 41 is, that the datasets come from different distributions.; 42 The advantage of qq-plot is that it not only shows that the underlying; 43 distributions are different, but, unlike the analytical methods, it also; 44 gives information on the nature of this difference: heavier tails,; 45 different location/scale, different shape, etc.; 46 ; 47 Some examples of qqplots of 2 datasets:; 48 ; 49\image html graf_graphqq1.png; 50 ; 51## 1 dataset:; 52 Quantile-quantile plots are used to determine if the dataset comes from the; 53 specified theoretical distribution, such as normal.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphQQ_8cxx_source.html:1383,robust,robust,1383,doc/master/TGraphQQ_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphQQ_8cxx_source.html,1,['robust'],['robust']
Availability,"ed. NOTE that if a TH1D named ""name"" exists in the current directory or pad and having; a compatible axis, the histogram is reset and filled again with the projected contents of the TH3.; In the case of axis incompatibility, an error is reported and a NULL pointer is returned. implemented using Project3D. TH1D * ProjectionZ(const char* name = ""_pz"", Int_t firstxbin = 0, Int_t lastxbin = -1, Int_t firstybin = 0, Int_t lastybin = -1, Option_t* option = """") const; Project a 3-D histogram into a 1-D histogram along Z*-*-; *-* ====================================================. The projection is always of the type TH1D.; The projection is made from the cells along the X axis; ranging from ixmin to ixmax and iymin to iymax included.; By default, bins 1 to nx and 1 to ny are included; By setting ixmin=1 and/or ixmax=NbinsX the underflow and/or overflow in X will be excluded; By setting iymin=1 and/or iymax=NbinsY the underflow and/or overflow in Y will be excluded. if option ""e"" is specified, the errors are computed.; if option ""d"" is specified, the projection is drawn in the current pad.; if option ""o"" original axis range of the target axes will be; kept, but only bins inside the selected range will be filled. NOTE that if a TH1D named ""name"" exists in the current directory or pad and having; a compatible axis, the histogram is reset and filled again with the projected contents of the TH3.; In the case of axis incompatibility, an error is reported and a NULL pointer is returned. implemented using Project3D. TH1D * DoProject1D(const char* name, const char* title, TAxis* projX, bool computeErrors, bool originalRange, bool useUF, bool useOF) const; internal methdod performing the projection to 1D histogram; called from TH3::Project3D. TH2D * DoProject2D(const char* name, const char* title, TAxis* projX, TAxis* projY, bool computeErrors, bool originalRange, bool useUF, bool useOF) const; internal method performing the projection to a 2D histogram; called from TH3::Project3D.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH3.html:41003,error,errors,41003,root/html528/TH3.html,https://root.cern,https://root.cern/root/html528/TH3.html,4,['error'],['errors']
Availability,"ed. Returns -1 in case of error, -2 in case of MSG_OOB and errno == EWOULDBLOCK, -3 in case of MSG_OOB and errno == EINVAL and -4 in case of kNoBlock and errno == EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Definition at line 4508 of file TUnixSystem.cxx. ◆ UnixResetSignal(). void TUnixSystem::UnixResetSignal ; (; ESignals ; sig). staticprotected . Restore old signal handler for specified signal. ; Definition at line 3821 of file TUnixSystem.cxx. ◆ UnixResetSignals(). void TUnixSystem::UnixResetSignals ; (; ). staticprotected . Restore old signal handlers. ; Definition at line 3836 of file TUnixSystem.cxx. ◆ UnixSelect(). int TUnixSystem::UnixSelect ; (; Int_t ; nfds, . TFdSet * ; readready, . TFdSet * ; writeready, . Long_t ; timeout . ). staticprotected . Wait for events on the file descriptors specified in the readready and writeready masks or for timeout (in milliseconds) to occur. ; Returns the number of ready descriptors, or 0 in case of timeout, or < 0 in case of an error, with -2 being EINTR and -3 EBADF. In case of EINTR the errno has been reset and the method can be called again. ; Definition at line 3901 of file TUnixSystem.cxx. ◆ UnixSend(). int TUnixSystem::UnixSend ; (; int ; sock, . const void * ; buffer, . int ; length, . int ; flag . ). staticprotected . Send exactly length bytes from buffer. ; Returns -1 in case of error, otherwise number of sent bytes. Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Definition at line 4558 of file TUnixSystem.cxx. ◆ UnixSetitimer(). int TUnixSystem::UnixSetitimer ; (; Long_t ; ms). staticprotected . Set interval timer to time-out in ms milliseconds. ; Definition at line 3875 of file TUnixSystem.cxx. ◆ UnixSigAlarmInterruptsSyscalls(). void TUnixSystem::UnixSigAlarmInterruptsSyscalls ; (; Bool_t ; set). staticprotected . When the argument is true the SIGALRM signal handler is set so that interrupted sys",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnixSystem.html:75060,error,error,75060,doc/master/classTUnixSystem.html,https://root.cern,https://root.cern/doc/master/classTUnixSystem.html,1,['error'],['error']
Availability,"ed.; 1199/// Going via the linear fitter for functions, linear in parameters, gives a; 1200/// considerable advantage in speed.; 1201/// When using the linear fitting it is also possible to perform a robust fitting with the; 1202/// Least Trimmed Square (LTS) regression algorithm, by using the fit option `ROB`.; 1203/// See the tutorial `fitLinearRobust.C`.; 1204///; 1205/// ### Notes on TGraph/TGraphErrors Fitting:; 1206///; 1207/// 1. By using the ""effective variance"" method a simple linear regression; 1208/// becomes a non-linear case, which takes several iterations; 1209/// instead of 0 as in the linear case.; 1210/// 2. The effective variance technique assumes that there is no correlation; 1211/// between the x and y coordinate.; 1212/// 3. The standard chi2 (least square) method without error in the coordinates (x) can; 1213/// be forced by using option ""EX0""; 1214/// 4. The linear fitter doesn't take into account the errors in x. When fitting a; 1215/// TGraphErrors with a linear functions the errors in x will not be considered.; 1216/// If errors in x are important, use option ""F"" for linear function fitting.; 1217/// 5. When fitting a TGraph (i.e. no errors associated with each point),; 1218/// a correction is applied to the errors on the parameters with the following; 1219/// formula:; 1220/// `parameter_error *= sqrt(chisquare/(ndf-1))`; 1221///; 1222/// ### General Fitting documentation; 1223///; 1224/// See in TH1::Fit for the documentation of; 1225/// - [Fit Result](\ref HFitRes); 1226/// - [Fit Status](\ref HFitStatus); 1227/// - [Fit Statistics Box](\ref HFitStatBox); 1228/// - [Fitting in a Range](\ref HFitRange); 1229/// - [Setting Initial Conditions](\ref HFitInitial); 1230 ; 1231TFitResultPtr TGraph::Fit(TF1 *f1, Option_t *option, Option_t *goption, Axis_t rxmin, Axis_t rxmax); 1232{; 1233 Foption_t fitOption;; 1234 ROOT::Fit::FitOptionsMake(ROOT::Fit::EFitObjectType::kGraph, option, fitOption);; 1235 // create range and minimizer options with def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph_8cxx_source.html:43656,error,errors,43656,doc/master/TGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph_8cxx_source.html,1,['error'],['errors']
Availability,"ed.; Code adapted by Rene Brun from original HBOOK routine HDIFF ; Reimplemented from TH1.; Definition at line 1470 of file TH2.cxx. ◆ operator=(). TH2 & TH2::operator= ; (; const TH2 & ; ). privatedelete . ◆ ProfileX(). TProfile * TH2::ProfileX ; (; const char * ; name = ""_pfx"", . Int_t ; firstybin = 1, . Int_t ; lastybin = -1, . Option_t * ; option = """" . ); const. Project a 2-D histogram into a profile histogram along X. ; The projection is made from the channels along the Y axis ranging from firstybin to lastybin included. By default, bins 1 to ny are included When all bins are included, the number of entries in the projection is set to the number of entries of the 2-D histogram, otherwise the number of entries is incremented by 1 for all non empty cells.; if option ""d"" is specified, the profile is drawn in the current pad.; if option ""o"" original axis range of the target axes will be kept, but only bins inside the selected range will be filled.; The option can also be used to specify the projected profile error type. Values which can be used are 's', 'i', or 'g'. See TProfile::BuildOptions for details; Using a TCutG object, it is possible to select a sub-range of a 2-D histogram. One must create a graphical cut (mouse or C++) and specify the name of the cut between [] in the option. For example, with a TCutG named ""cutg"", one can call: myhist->ProfileX("" "",firstybin,lastybin,""[cutg]""); To invert the cut, it is enough to put a ""-"" in front of its name: myhist->ProfileX("" "",firstybin,lastybin,""[-cutg]""); It is possible to apply several cuts ("","" means logical AND): myhist->ProfileX("" "",firstybin,lastybin,""[cutg1,cutg2]"");; NOTE that if a TProfile named ""name"" exists in the current directory or pad with a compatible axis the profile is reset and filled again with the projected contents of the TH2. In the case of axis incompatibility an error is reported and a NULL pointer is returned.; NOTE that the X axis attributes of the TH2 are copied to the X axis of the prof",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2.html:93358,error,error,93358,doc/master/classTH2.html,https://root.cern,https://root.cern/doc/master/classTH2.html,1,['error'],['error']
Availability,"ed.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. Int_t Collect(TMonitor* mon, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect responses from the slave servers. Returns the number of messages; received. Can be 0 if there are no active slaves.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. void CleanGDirectory(TList* ol); Remove links to objects in list 'ol' from gDirectory. Int_t CollectInputFrom(TSocket* s, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect and analyze available input from socket s.; Returns 0 on success, -1 if any failure occurs. Int_t HandleInputMessage(TSlave* wrk, TMessage* m, Bool_t deactonfail = kFALSE); Analyze the received message.; Returns 0 on success (1 if this the last message from this socket), -1 if; any failure occurs. void HandleSubmerger(TMessage* mess, TSlave* sl); Process a message of type kPROOF_SUBMERGER. void RedirectWorker(TSocket* s, TSlave* sl, Int_t output_size); Redirect output of worker sl to some merger. Int_t FindNextFreeMerger(); Return a merger, which is both active and still accepts some workers to be; assigned to it. It works on the 'round-robin' basis. void AskForOutput(TSlave* sl); Master asks for output from worker sl. void UpdateDialog(); Final update of the progress dialog. void ActivateAsyncInput(); Activate the a-sync input handler. void DeActivateAsyncInput(); De-activate a-sync input handler. Int_t GetActiveMergersCount(); Get the active mergers count. Bool_t CreateMerger(TSlave* sl, Int_t port); Create a new merger. void MarkBad(TSlave* wrk, const char* reason = 0); Add a bad slave server to the bad slave list and remove it from; the active list and from the two monitor objects. Assume that the work; done by this worker was",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:43499,failure,failure,43499,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,4,['failure'],['failure']
Availability,"ed:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integratio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__IntegratorMultiDim.html:2801,Error,Error,2801,root/html602/ROOT__Math__IntegratorMultiDim.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorMultiDim.html,4,['Error'],['Error']
Availability,"ed:. _xmlParserCtxt*fContextparse the xml file; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfParseCodeto keep track of the errorcodes; Bool_tfReplaceEntitiesreplace entities; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tfStopErrorstop when parse error occurs; Bool_tfValidateto validate the parse context; TStringfValidateErrorparse error; TStringfValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TXMLParser(); Cleanup. void SetValidate(Bool_t val = kTRUE); The parser will validate the xml file if val = true. void SetReplaceEntities(Bool_t val = kTRUE); The parser will replace/expand entities. void ReleaseUnderlying(); To release any existing document. void OnValidateError(const TString& message); This function is called when an error from the parser has occured.; Message is the parse error. void OnValidateWarning(const TString& message); This function is called when a warning from the parser has occured.; Message is the parse error. const char * GetParseCodeMessage(Int_t parseCode) const; Returns the parse code message. void InitializeContext(); Initialize parser parameters, such as, disactivate non-standards libxml1; features, on/off validation, clear error and warning messages. void StopParser(); Stops parsing. void SetParseCode(Int_t code); Set the parse code:; 0: Parse succesfull; -1: Attempt to parse a second file while a parse is in progress; -2: Parse context is not created; -3: An error occured while parsing file; -4: A fatal error occured while parsing file; -5: Document is not well-formed. void SetStopOnError(Bool_t stop = kTRUE); Set parser stops in case of error:; stop = true, stops on error; stop = false, continue parsing on error... TXMLParser& operator=(const TXMLParser& )",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXMLParser.html:10467,error,error,10467,root/html528/TXMLParser.html,https://root.cern,https://root.cern/root/html528/TXMLParser.html,4,['error'],['error']
Availability,"ed:. _xmlParserCtxt*fContextparse the xml file; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfParseCodeto keep track of the errorcodes; Bool_tfReplaceEntitiesreplace entities; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tfStopErrorstop when parse error occurs; Bool_tfValidateto validate the parse context; TStringfValidateErrorparse error; TStringfValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TXMLParser(); Cleanup. void SetValidate(Bool_t val = kTRUE); The parser will validate the xml file if val = true. void SetReplaceEntities(Bool_t val = kTRUE); The parser will replace/expand entities. void ReleaseUnderlying(); To release any existing document. void OnValidateError(const TString& message); This function is called when an error from the parser has occured.; Message is the parse error. void OnValidateWarning(const TString& message); This function is called when a warning from the parser has occured.; Message is the parse error. const char * GetParseCodeMessage(Int_t parseCode) const; Returns the parse code message. void InitializeContext(); Initialize parser parameters, such as, disactivate non-standards libxml1; features, on/off validation, clear error and warning messages. void StopParser(); Stops parsing. void SetParseCode(Int_t code); Set the parse code:; 0: Parse successful; -1: Attempt to parse a second file while a parse is in progress; -2: Parse context is not created; -3: An error occured while parsing file; -4: A fatal error occured while parsing file; -5: Document is not well-formed. void SetStopOnError(Bool_t stop = kTRUE); Set parser stops in case of error:; stop = true, stops on error; stop = false, continue parsing on error... TXMLParser& operator=(const TXMLParser& )",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXMLParser.html:10555,error,error,10555,root/html534/TXMLParser.html,https://root.cern,https://root.cern/root/html534/TXMLParser.html,2,['error'],['error']
Availability,"ed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual const char*CreateArgumentTitle(TMethodArg* argument); virtual const char*CreateDialogTitle(TObject* object, TFunction* method); virtual const char*CreatePopupTitle(TObject* object); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; voidExecute(const char* params); voidExecute(TObjArray* params); virtual voidExecute(const char* method, const char* params, Int_t* error = 0); virtual voidExecute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecute(TObject* object, TFunction* method, const char* params); virtual voidExecute(TObject* object, TFunction* method, TObjArray* params); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TBrowser*GetBrowser(); virtual TObject*GetCalledObject(); virtual TContextMenuImp*GetContextMenuImp(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TVirtualPad*GetSelectedCanvas(); virtual TClassMenuItem*GetSelectedMenuItem(); v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TContextMenu.html:2436,error,error,2436,root/html526/TContextMenu.html,https://root.cern,https://root.cern/root/html526/TContextMenu.html,11,['error'],['error']
Availability,"ed::Copy(TObject& named) const; TDrawFeedback*TProof::CreateDrawFeedback(); voidTProof::DataSetStatus(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; Int_tTProof::DeactivateWorker(const char* ord); static voidTProof::DelEnvVar(const char* name); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTProof::DeleteDrawFeedback(TDrawFeedback* f); voidTProof::DeleteParameters(const char* wildcard); virtual voidTQObject::Destroyed()SIGNAL ; voidTProof::Detach(Option_t* opt = """"); voidTProof::DisableGoAsyn(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObject::Disconnect(TQObject* sender, const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObject::Disconnect(const char* class_name, const char* signal, void* receiver = 0, const char* slot = 0); virtual voidTQObject::Disconnected(const char*); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Int_tTProof::DownloadPackage(const char* par, const char* dstdir = 0); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual Long64_tDrawSelect(TDSet* dset, const char* varexp, const char* selection = """", Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); virtual voidTObject::Dump() constMENU ; voidTQObject::Emit(const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, USh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofLite.html:4078,Down,DownloadPackage,4078,root/html532/TProofLite.html,https://root.cern,https://root.cern/root/html532/TProofLite.html,1,['Down'],['DownloadPackage']
Availability,"ed::Copy(TObject& named) const; TDrawFeedback*TProof::CreateDrawFeedback(); voidTProof::DataSetStatus(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; Int_tTProof::DeactivateWorker(const char* ord); static voidTProof::DelEnvVar(const char* name); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTProof::DeleteDrawFeedback(TDrawFeedback* f); voidTProof::DeleteParameters(const char* wildcard); virtual voidTQObject::Destroyed()SIGNAL ; voidTProof::Detach(Option_t* opt = """"); voidTProof::DisableGoAsyn(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObject::Disconnect(TQObject* sender, const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObject::Disconnect(const char* class_name, const char* signal, void* receiver = 0, const char* slot = 0); virtual voidTQObject::Disconnected(const char*); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Int_tTProof::DownloadPackage(const char* par, const char* dstdir = 0); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual Long64_tTProof::DrawSelect(TDSet* dset, const char* varexp, const char* selection = """", Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Long64_tTProof::DrawSelect(const char* dsetname, const char* varexp, const char* selection = """", Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0, TObject* enl = 0); virtual voidTObject::Dump() constMENU ; voidTQObject::Emit(const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofCondor.html:4103,Down,DownloadPackage,4103,root/html532/TProofCondor.html,https://root.cern,https://root.cern/root/html532/TProofCondor.html,2,['Down'],['DownloadPackage']
Availability,"ed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TScatterA TScatter is able to draw four variables scatter plot on a single plot.Definition TScatter.h:32; TScatter::GetXaxisTAxis * GetXaxis() constGet the scatter's x axis.Definition TScatter.cxx:191; TScatter::GetGraphTGraph * GetGraph() constGet the graph holding X and Y positions.Definition TScatter.h:58; TScatter::fMaxSizeInt_t fMaxSize!Current dimension of arrays fX and fYDefinition TScatter.h:35; TScatter::GetMaxMarkerSizeDouble_t GetMaxMarkerSize() constGet the largest marker size used to paint the markers.Definition TScatter.h:56; TScatter::GetYaxisTAxis * GetYaxis() constGet the scatter's y axis.Definition TScatter.cxx:201; TScatter::fMaxMarkerSizeDouble_t fMaxMarkerSizeLargest marker size used to paint the markers.Definition TScatter.h:41; TScatter::Printvoid Print(Option_t *chopt="""") const overridePrint graph and errors values.Definition TScatter.cxx:231; TScatter::Paintvoid Paint(Option_t *chopt="""") overridePaint this scatter plot with its current attributes.Definition TScatter.cxx:221; TScatter::ExecuteEventvoid ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideExecute action corresponding to one event.Definition TScatter.cxx:156; TScatter::fGraphTGraph * fGraphPointer to graph holding X and Y positions.Definition TScatter.h:38; TScatter::TScatterTScatter()TScatter default constructor.Definition TScatter.cxx:58; TScatter::GetHistogramTH2F * GetHistogram() constGet the graph histogram used for drawing axis.Definition TScatter.cxx:166; TScatter::fColorDouble_t * fColor[fNpoints] array of colorsDefinition TScatter.h:39; TScatter::GetZaxisTAxis * GetZaxis() constGet the scatter's z axis.Definition TScatter.cxx:211; TScatter::~TScatter~TScatter() overrideTScatter default destructor.Definition TScatter.cxx:114; TScatter::SetMarginvoid SetMargin(Double_t)Set the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TScatter_8cxx_source.html:14410,error,errors,14410,doc/master/TScatter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TScatter_8cxx_source.html,1,['error'],['errors']
Availability,"ed; 1378 ; 1379void TProfile3D::Sumw2(Bool_t flag); 1380{; 1381 TProfileHelper::Sumw2(this, flag);; 1382}; Bool_tbool Bool_tDefinition RtypesCore.h:63; Int_tint Int_tDefinition RtypesCore.h:45; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; Double_tdouble Double_tDefinition RtypesCore.h:59; Long64_tlong long Long64_tDefinition RtypesCore.h:69; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; Option_tconst char Option_tDefinition RtypesCore.h:66; ClassImp#define ClassImp(name)Definition Rtypes.h:382; TClass.h; TError.h; R__ASSERT#define R__ASSERT(e)Checks condition e and reports a fatal error if it's false.Definition TError.h:125; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; Warningvoid Warning(const char *location, const char *msgfmt,...)Use this function in warning situations.Definition TError.cxx:229; Fatalvoid Fatal(const char *location, const char *msgfmt,...)Use this function in case of a fatal error. It will abort the program.Definition TError.cxx:244; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; namechar name[80]Definition TGX11.cxx:110; THLimitsFinder.h; THashList.h; xminfloat xminDefinition THbookFile.cxx:95; yminfloat yminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; ymaxfloat ymaxDefinition THbookFile.cxx:95; TMath.h; TProfile2D.h; TProfile3D.h; TProfileHelper.h; kERRORSPREAD@ kERRORSPREADDefinition TProfile.h:28; kERRORSPREADG@ kERRORSPREADGDefinition TProfile.h:28; kERRORSPREADI@ kERRORSPREADIDefinition TProfile.h:28; TArrayDArray of doubles (64 bits per element).Definition TArrayD.h:27; TArrayD::fArrayDouble_t * fArrayDefinition TArrayD.h:30; TArrayD::Copyvoid Copy(TArrayD &array) constDefinition TArrayD.h:42; TArrayD::Setvoid Set(Int_t n) overrideSet size of this array to n doubles.Definition TArrayD.cxx:106; TArrayD::TArrayDTArrayD()Default TArrayD ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile3D_8cxx_source.html:53527,error,error,53527,doc/master/TProfile3D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile3D_8cxx_source.html,1,['error'],['error']
Availability,ed; 581 We cannot compute ourselves because sometimes errors are filled with 1; 582 instead of zero (as in ROOT::Fit::FillData ); 583 */; 584 bool IsWeighted() const {; 585 return fIsWeighted;; 586 }; 587 ; 588protected:; 589 void InitDataVector ();; 590 ; 591 void InitializeErrors();; 592 ; 593 void InitBinEdge();; 594 ; 595 void UnWrap( );; 596 ; 597 // compute sum of content and error squares; 598 void ComputeSums();; 599 ; 600private:; 601 ; 602 ErrorType fErrorType;; 603 bool fIsWeighted = false; ///< flag to indicate weighted data; 604 double fRefVolume; ///< reference bin volume - used to normalize the bins in case of variable bins data; 605 double fSumContent = 0; ///< total sum of the bin data content; 606 double fSumError2 = 0; ///< total sum square of the errors; 607 ; 608 /**; 609 * Stores the data values the same way as the coordinates.; 610 *; 611 */; 612 std::vector< double > fData;; 613 const double* fDataPtr;; 614 ; 615 std::vector< std::vector< double > > fCoordErrors;; 616 std::vector< const double* > fCoordErrorsPtr;; 617 // This vector contains the coordinate errors; 618 // in the same way as fCoords.; 619 ; 620 std::vector< double > fDataError;; 621 std::vector< double > fDataErrorHigh;; 622 std::vector< double > fDataErrorLow;; 623 const double* fDataErrorPtr;; 624 const double* fDataErrorHighPtr;; 625 const double* fDataErrorLowPtr;; 626 // This vector contains the data error.; 627 // Either only fDataError or fDataErrorHigh and fDataErrorLow are used.; 628 ; 629 double* fpTmpCoordErrorVector; ///< not threadsafe stuff!; 630 ; 631 std::vector< std::vector< double > > fBinEdge;; 632 // vector containing the bin upper edge (coordinate will contain low edge); 633 ; 634 double* fpTmpBinEdgeVector; ///< not threadsafe stuff!; 635};; 636 ; 637 ; 638 } // end namespace Fit; 639 ; 640} // end namespace ROOT; 641 ; 642 ; 643 ; 644#endif /* ROOT_Fit_BinData */; Error.h; FitData.h; e#define e(i)Definition RSha256.hxx:103; valueOption_t Option_t TPoint T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8h_source.html:21417,error,errors,21417,doc/master/BinData_8h_source.html,https://root.cern,https://root.cern/doc/master/BinData_8h_source.html,1,['error'],['errors']
Availability,"ed; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Pixel_tfBackgroundframe background color; Int_tfBorderWidthframe border width; TGClient*TGObject::fClientConnection to display server; Int_tfDNDStateEDNDFlags; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; UInt_tfEventMaskcurrenty active event mask; TGFrameElement*fFEpointer to frame element; UInt_tfHeightframe height; Handle_tTGObject::fIdX11/Win32 Window identifier; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; UInt_tfMaxHeightmaximal frame height; UInt_tfMaxWidthmaximal frame width; UInt_tfMinHeightminimal frame height; UInt_tfMinWidthminimal frame width; TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; UInt_tfOptionsframe options; const TGWindow*TGWindow::fParentParent window; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; UInt_tfWidthframe width; Int_tfXframe x position; Int_tfYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*fgBckgndGC; static const TGGC*fgBlackGC; static Pixel_tfgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tfgDbw; static Int_tfgDbx; static Int_tfgDby; static Pixel_tfgDefaultFrameBackground; static Pixel_tfgDefaultSelectedBackground; static const TGGC*fgHilightGC; static Bool_tfgInit; static UInt_tfgLastButton; static Time_tfgLastClick; static const TGGC*fgShadowGC; static UInt_tfgUserColor; static const TGGC*fgWhiteGC; static Pixel_tfgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGFrame(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = 0, Pixel_t back =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGFrame.html:15040,mask,mask,15040,root/html528/TGFrame.html,https://root.cern,https://root.cern/root/html528/TGFrame.html,6,['mask'],['mask']
Availability,"ed; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TMatrixDSparse*TUnfold::fAInput: matrix; TMatrixD*fAoutsideInput: underflow/overflow bins; TMap*fBgrErrCorrInInput: background sources correlated error; TMap*fBgrErrUncorrInInput: uncorrelated error from bgr sources; TMap*fBgrInInput: size of background sources; Double_tTUnfold::fBiasScaleInput: scale factor for the bias; TUnfold::EConstraintTUnfold::fConstraintInput: type of constraint to use; TMatrixD*fDAinColRelSqInput: normalized column err.sq. (inp.matr.); TMatrixDSparse*fDAinRelSqInput: normalized errors from input matrix; TMap*fDeltaCorrAxResult: syst.shift from fSysIn on fAx; TMap*fDeltaCorrXResult: syst.shift from fSysIn on fX; TMatrixDSparse*fDeltaSysTauResult: systematic shift from tau; Double_tfDtauInput: error on tau; TMatrixDSparse*fEmatUncorrAxResult: syst.error from fDA2 on fAx; TMatrixDSparse*fEmatUncorrXResult: syst.error from fDA2 on fX; TArrayITUnfold::fHistToXInput: histogram bins -> matrix indices; TMatrixDSparse*TUnfold::fLsquaredInput: regularisation conditions squared; TUnfold::ERegModeTUnfold::fRegModeInput: type of regularisation; TArrayDTUnfold::fSumOverYInput: sum of all columns; TMap*fSysInInput: correlated errors; Double_tTUnfold::fTauSquaredInput: regularisation parameter; TMatrixDSparse*TUnfold::fVyyInput: covariance matrix for y; TMatrixDSparse*fVyyDataInput: error on fY prior to bgr subtraction; TMatrixD*TUnfold::fX0Input: x0; TArrayITUnfold::fXToHistInput: matrix indices -> histogram bins; TMatrixD*TUnfold::fYInput: y; TMatrixD*fYDataInput: fY prior to bgr subtraction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TUnfoldSys(const TUnfoldSys& ); set all pointers to zero. TUnfoldSys(const TH2* hist_A, TUnfold::EHistMap histmap, TUnfold::ERegMode regmode = kRegModeSize, TUnfold::EConstraint constraint = kE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfoldSys.html:17346,error,error,17346,root/html528/TUnfoldSys.html,https://root.cern,https://root.cern/root/html528/TUnfoldSys.html,4,['error'],['error']
Availability,"ed; like this: SETUP.C(loadopts).; Returns 0 in case of success and -1 in case of error. Int_t UnloadPackage(const char* package); Unload specified package.; Returns 0 in case of success and -1 in case of error. Int_t UnloadPackageOnClient(const char* package); Unload a specific package on the client.; Returns 0 in case of success and -1 in case of error.; The code is equivalent to the one in TProofServ.cxx (TProof::UnloadPackage; case). Keep in sync in case of changes. Int_t UnloadPackages(); Unload all packages.; Returns 0 in case of success and -1 in case of error. Int_t EnablePackage(const char* package, Bool_t notOnClient = kFALSE, TList* workers = 0); Enable specified package. Executes the PROOF-INF/BUILD.sh; script if it exists followed by the PROOF-INF/SETUP.C script.; In case notOnClient = true, don't enable the package on the client.; The default is to enable packages also on the client.; If specified, enables packages only on the specified workers.; Returns 0 in case of success and -1 in case of error.; Provided for backward compatibility. Int_t EnablePackage(const char* package, const char* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); Enable specified package. Executes the PROOF-INF/BUILD.sh; script if it exists followed by the PROOF-INF/SETUP.C script.; In case notOnClient = true, don't enable the package on the client.; The default is to enable packages also on the client.; It is is possible to specify options for the loading step via 'loadopts';; the string will be passed passed as argument to SETUP.; Special option 'chkv=<o>' (or 'checkversion=<o>') can be used to control; plugin version checking during building: possible choices are:; off no check; failure may occur at loading; on check ROOT version [default]; svn check ROOT version and Git commit SHA1.; (Use ';', ' ' or '|' to separate 'chkv=<o>' from the rest.); If specified, enables packages only on the specified workers.; Returns 0 in case of success and -1 in case of error. Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProof.html:76471,error,error,76471,root/html602/TProof.html,https://root.cern,https://root.cern/root/html602/TProof.html,4,['error'],['error']
Availability,"ed; like this: SETUP.C(loadopts).; Returns 0 in case of success and -1 in case of error. Int_t UnloadPackage(const char* package); Unload specified package.; Returns 0 in case of success and -1 in case of error. Int_t UnloadPackageOnClient(const char* package); Unload a specific package on the client.; Returns 0 in case of success and -1 in case of error.; The code is equivalent to the one in TProofServ.cxx (TProof::UnloadPackage; case). Keep in sync in case of changes. Int_t UnloadPackages(); Unload all packages.; Returns 0 in case of success and -1 in case of error. Int_t EnablePackage(const char* package, Bool_t notOnClient = kFALSE, TList* workers = 0); Enable specified package. Executes the PROOF-INF/BUILD.sh; script if it exists followed by the PROOF-INF/SETUP.C script.; In case notOnClient = true, don't enable the package on the client.; The default is to enable packages also on the client.; If specified, enables packages only on the specified workers.; Returns 0 in case of success and -1 in case of error.; Provided for backward compatibility. Int_t EnablePackage(const char* package, const char* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); Enable specified package. Executes the PROOF-INF/BUILD.sh; script if it exists followed by the PROOF-INF/SETUP.C script.; In case notOnClient = true, don't enable the package on the client.; The default is to enable packages also on the client.; It is is possible to specify options for the loading step via 'loadopts';; the string will be passed passed as argument to SETUP.; Special option 'chkv=<o>' (or 'checkversion=<o>') can be used to control; plugin version checking during building: possible choices are:; off no check; failure may occur at loading; on check ROOT version [default]; svn check ROOT version and SVN revision number.; (Use ';', ' ' or '|' to separate 'chkv=<o>' from the rest.); If specified, enables packages only on the specified workers.; Returns 0 in case of success and -1 in case of error. In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:74315,error,error,74315,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,2,['error'],['error']
Availability,"ed; on this macro, depending the content of the variable TMacro.Browse.; TMacro.Browse can be set in the system.rootrc or .rootrc file like; TMacro.Browse : Action; or set via gEnv->SetValue, eg; gEnv->SetValue(""TMacro.Browse"",""Print"");; By default TMacro.Browse=""""; -if TMacro.Browse ="""" the macro is executed; -if TMacro.Browse =""Print"" the macro is printed in stdout; -if TMacro.Browse is of the form ""mymacro.C""; the macro void mymacro.C(TMacro *m) is called where m=this macro; An example of macro.C saving the macro into a file and viewing it; with emacs is shown below:; void mymacro(TMacro *m) {; m->SaveSource(""xx.log"");; gSystem->Exec(""emacs xx.log&"");; }. TMD5 * Checksum(); Returns checksum of the current content. The returned TMD5 object must; be deleted by the user. Returns 0 in case of error. Long_t Exec(const char* params = 0, Int_t* error = 0); Execute this macro with params, if params is 0, default parameters; (set via SetParams) are used.; error is set to an TInterpreter::EErrorCode by TApplication::ProcessLine().; Returns the result of the macro (return value or value of the last; expression), cast to a Long_t. TObjString * GetLineWith(const char* text) const; Search the first line containing text. void Paint(Option_t* option = """"); Execute this macro (called by TPad::Paint). void Print(Option_t* option = """") const; Print contents of this macro. Int_t ReadFile(const char* filename); Read lines in filename in this macro. void SaveSource(const char* filename); Save macro source in filename. void SavePrimitive(ostream& out, Option_t* option = """"); Save macro source on stream out. void SetParams(const char* params = 0); Set default parameters to execute this macro. TList * GetListOfLines() const; {return fLines;}. » Author: Rene Brun 16/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TMacro.h 20877 2007-11-19 11:17:07Z rdm $ » Last generated: 2010-09-23 20:18; This page has been automatically generated. For c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMacro.html:8600,error,error,8600,root/html528/TMacro.html,https://root.cern,https://root.cern/root/html528/TMacro.html,1,['error'],['error']
Availability,"ed; on this macro, depending the content of the variable TMacro.Browse.; TMacro.Browse can be set in the system.rootrc or .rootrc file like; TMacro.Browse : Action; or set via gEnv->SetValue, eg; gEnv->SetValue(""TMacro.Browse"",""Print"");; By default TMacro.Browse=""""; -if TMacro.Browse ="""" the macro is executed; -if TMacro.Browse =""Print"" the macro is printed in stdout; -if TMacro.Browse is of the form ""mymacro.C""; the macro void mymacro.C(TMacro *m) is called where m=this macro; An example of macro.C saving the macro into a file and viewing it; with emacs is shown below:; void mymacro(TMacro *m) {; m->SaveSource(""xx.log"");; gSystem->Exec(""emacs xx.log&"");; }. TMD5 * Checksum(); Returns checksum of the current content. The returned TMD5 object must; be deleted by the user. Returns 0 in case of error. Long_t Exec(const char* params = 0, Int_t* error = 0); Execute this macro with params, if params is 0, default parameters; (set via SetParams) are used.; error is set to an TInterpreter::EErrorCode by TApplication::ProcessLine().; Returns the result of the macro (return value or value of the last; expression), cast to a Long_t. TObjString * GetLineWith(const char* text) const; Search the first line containing text. void Paint(Option_t* option = """"); Execute this macro (called by TPad::Paint). void Print(Option_t* option = """") const; Print contents of this macro. Int_t ReadFile(const char* filename); Read lines in filename in this macro. void SaveSource(const char* filename); Save macro source in filename. void SavePrimitive(ostream& out, Option_t* option = """"); Save macro source on stream out. void SetParams(const char* params = 0); Set default parameters to execute this macro. TList * GetListOfLines() const; {return fLines;}. » Author: Rene Brun 16/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TMacro.h 20877 2007-11-19 11:17:07Z rdm $ » Last generated: 2011-07-04 15:34; This page has been automatically generated. For c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMacro.html:8700,error,error,8700,root/html530/TMacro.html,https://root.cern,https://root.cern/root/html530/TMacro.html,1,['error'],['error']
Availability,"ed; on this macro, depending the content of the variable TMacro.Browse.; TMacro.Browse can be set in the system.rootrc or .rootrc file like; TMacro.Browse : Action; or set via gEnv->SetValue, eg; gEnv->SetValue(""TMacro.Browse"",""Print"");; By default TMacro.Browse=""""; -if TMacro.Browse ="""" the macro is executed; -if TMacro.Browse =""Print"" the macro is printed in stdout; -if TMacro.Browse is of the form ""mymacro.C""; the macro void mymacro.C(TMacro *m) is called where m=this macro; An example of macro.C saving the macro into a file and viewing it; with emacs is shown below:; void mymacro(TMacro *m) {; m->SaveSource(""xx.log"");; gSystem->Exec(""emacs xx.log&"");; }. TMD5 * Checksum(); Returns checksum of the current content. The returned TMD5 object must; be deleted by the user. Returns 0 in case of error. Long_t Exec(const char* params = 0, Int_t* error = 0); Execute this macro with params, if params is 0, default parameters; (set via SetParams) are used.; error is set to an TInterpreter::EErrorCode by TApplication::ProcessLine().; Returns the result of the macro (return value or value of the last; expression), cast to a Long_t. TObjString * GetLineWith(const char* text) const; Search the first line containing text. void Paint(Option_t* option = """"); Execute this macro (called by TPad::Paint). void Print(Option_t* option = """") const; Print contents of this macro. Int_t ReadFile(const char* filename); Read lines in filename in this macro. void SaveSource(const char* filename); Save macro source in filename. void SavePrimitive(ostream& out, Option_t* option = """"); Save macro source on stream out. void SetParams(const char* params = 0); Set default parameters to execute this macro. TList * GetListOfLines() const; {return fLines;}. » Author: Rene Brun 16/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TMacro.h 20877 2007-11-19 11:17:07Z rdm $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMacro.html:8700,error,error,8700,root/html532/TMacro.html,https://root.cern,https://root.cern/root/html532/TMacro.html,2,['error'],['error']
Availability,"ed; on this macro, depending the content of the variable TMacro.Browse.; TMacro.Browse can be set in the system.rootrc or .rootrc file like; TMacro.Browse : Action; or set via gEnv->SetValue, eg; gEnv->SetValue(""TMacro.Browse"",""Print"");; By default TMacro.Browse=""""; -if TMacro.Browse ="""" the macro is executed; -if TMacro.Browse =""Print"" the macro is printed in stdout; -if TMacro.Browse is of the form ""mymacro.C""; the macro void mymacro.C(TMacro *m) is called where m=this macro; An example of macro.C saving the macro into a file and viewing it; with emacs is shown below:; void mymacro(TMacro *m) {; m->SaveSource(""xx.log"");; gSystem->Exec(""emacs xx.log&"");; }. TMD5 * Checksum(); Returns checksum of the current content. The returned TMD5 object must; be deleted by the user. Returns 0 in case of error. Long_t Exec(const char* params = 0, Int_t* error = 0); Execute this macro with params, if params is 0, default parameters; (set via SetParams) are used.; error is set to an TInterpreter::EErrorCode by TApplication::ProcessLine().; Returns the result of the macro (return value or value of the last; expression), cast to a Long_t. TObjString * GetLineWith(const char* text) const; Search the first line containing text. void Paint(Option_t* option = """"); Execute this macro (called by TPad::Paint). void Print(Option_t* option = """") const; Print contents of this macro. Int_t ReadFile(const char* filename); Read lines in filename in this macro. void SaveSource(const char* filename); Save macro source in filename. void SaveSource(FILE* fp); Save macro source in file pointer fp. void SavePrimitive(ostream& out, Option_t* option = """"); Save macro source on stream out. void SetParams(const char* params = 0); Set default parameters to execute this macro. TList * GetListOfLines() const; {return fLines;}. » Author: Rene Brun 16/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-03-14 16:44; This page has been automat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMacro.html:8806,error,error,8806,root/html534/TMacro.html,https://root.cern,https://root.cern/root/html534/TMacro.html,2,['error'],['error']
Availability,"ed; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Double_tfAdaptiveBandwidthFactorGeometric mean of the kernel density estimation from the data for adaptive iteration; TF1*fApproximateBiasOutput Kernel Density Estimation approximate bias; Bool_tfAsymLeft; Bool_tfAsymRight; vector<UInt_t>fBinCountNumber of events per bin for binned data option; TKDE::EBinningfBinning; vector<Double_t>fCanonicalBandwidths; vector<Double_t>fDataData events; vector<Double_t>fEventsOriginal data storage; TGraphErrors*fGraphGraph with the errors; TKDE::EIterationfIteration; TKDE::TKernel*fKernel; TKDE::KernelFunction_PtrfKernelFunction; vector<Double_t>fKernelSigmas2; TKDE::EKernelTypefKernelType; TF1*fLowerPDFOutput Kernel Density Estimation lower confidence interval PDF function; Double_tfMeanData mean; TKDE::EMirrorfMirror; Bool_tfMirrorLeft; Bool_tfMirrorRight; UInt_tfNBinsNumber of bins for binned data option; UInt_tfNEventsData's number of events; Bool_tfNewDataflag to control when new data are given; TF1*fPDFOutput Kernel Density Estimation PDF function; Double_tfRhoAdjustment factor for sigma; vector<Bool_t>fSettedOptionsUser input options flag; Double_tfSigmaData std deviation; Double_tfSigmaRobData std deviation (robust estimation); TF1*fUpperPDFOutput Kernel Density Estimation upper confidence interval PDF function; Bool_tfUseBins; UInt_tfUseBinsNEventsIf the algorithm is allowed to use binning this is the minimum number of events to do so; Bool_tfUseMinMaxFromDataflag top control if min and max must be used from data; Bool_tfUseMirroring; Double_tfWeightSizeCaches the weight size; Double_tfXMaxData maximum value; Double_tfXMinData minimum value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TKDE(UInt_t events = 0, const Double_t* data = 0, Double_t xMin = 0., Double_t xMax = 0., const Option",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TKDE.html:10582,error,errors,10582,root/html602/TKDE.html,https://root.cern,https://root.cern/root/html602/TKDE.html,4,"['error', 'robust']","['errors', 'robust']"
Availability,"ed; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; UInt_tTRandom::fSeedRandom number generator seed; UInt_tfSeed1Random number generator seed 1; UInt_tfSeed2Random number generator seed 2; TStringTNamed::fTitleobject title. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TRandom. ←; TRandom2. Function documentation; TRandom2(UInt_t seed = 1); default constructor*-*-*-*-; *-* ===================. ~TRandom2(); default destructor*-*-*-*-; *-* ==================. Double_t Rndm(Int_t i = 0); TausWorth generator from L'Ecuyer, uses as seed 3x32bits integers; Use a mask of 0xffffffffUL to make in work on 64 bit machines; Periodicity of about 10**26; Generate number in interval (0,1) : 0 and 1 are not included in the interval. void RndmArray(Int_t n, Float_t* array); Return an array of n random numbers uniformly distributed in ]0,1]. void RndmArray(Int_t n, Double_t* array); Return an array of n random numbers uniformly distributed in ]0,1]. void SetSeed(UInt_t seed = 0); Set the generator seed.; If the seed given is zero, generate automatically seed values which; are different every time by using TRandom3 and TUUID; If a seed is given generate the other two needed for the generator state using; a linear congruential generator; The only condition, stated at the end of the 1999 L'Ecuyer paper is that the seeds; must be greater than 1,7 and 15. TRandom2(UInt_t seed = 1). » Author: Rene Brun 04/03/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For com",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TRandom2.html:8064,mask,mask,8064,root/html604/TRandom2.html,https://root.cern,https://root.cern/root/html604/TRandom2.html,2,['mask'],['mask']
Availability,"ed; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; UInt_tTRandom::fSeedRandom number generator seed; UInt_tfSeed1Random number generator seed 1; UInt_tfSeed2Random number generator seed 2; TStringTNamed::fTitleobject title. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TRandom. ←; TRandom2. Function documentation; TRandom2(UInt_t seed = 1); default constructor*-*-*-*-; *-* ===================. ~TRandom2(); default destructor*-*-*-*-; *-* ==================. Double_t Rndm(Int_t i = 0); TausWorth generator from L'Ecuyer, uses as seed 3x32bits integers; Use a mask of 0xffffffffUL to make in work on 64 bit machines; Periodicity of about 10**26; Generate number in interval (0,1) : 0 and 1 are not included in the interval. void RndmArray(Int_t n, Float_t* array); Return an array of n random numbers uniformly distributed in ]0,1]. void RndmArray(Int_t n, Double_t* array); Return an array of n random numbers uniformly distributed in ]0,1]. void SetSeed(UInt_t seed = 0); Set the generator seed.; If the seed given is zero, generate automatically seed values which; are different every time by using TRandom3 and TUUID; If a seed is given generate the other two needed for the generator state using; a linear congruential generator; The only condition, stated at the end of the 1999 L'Ecuyer paper is that the seeds; must be greater than 1,7 and 15. TRandom2(UInt_t seed = 1). » Author: Rene Brun 04/03/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For com",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRandom2.html:8064,mask,mask,8064,root/html602/TRandom2.html,https://root.cern,https://root.cern/root/html602/TRandom2.html,2,['mask'],['mask']
Availability,"ed; };; enum TGWindow::EEditMode { kEditEnable; kEditDisable; kEditDisableEvents; kEditDisableGrab; kEditDisableLayout; kEditDisableResize; kEditDisableHeight; kEditDisableWidth; kEditDisableBtnEnable; kEditDisableKeyEnable; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Bool_tTGedFrame::fAvoidSignalflag for executing slots; Pixel_tTGFrame::fBackgroundframe background color; Int_tTGFrame::fBorderWidthframe border width; TGClient*TGObject::fClientConnection to display server; Int_tTGFrame::fDNDStateEDNDFlags; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; UInt_tTGFrame::fEventMaskcurrenty active event mask; TList*TGedFrame::fExtraTabsaddtional tabs in ged editor; TGFrameElement*TGFrame::fFEpointer to frame element; TGedEditor*TGedFrame::fGedEditormanager of this frame; UInt_tTGFrame::fHeightframe height; Handle_tTGObject::fIdX11/Win32 Window identifier; Bool_tTGedFrame::fInitinit flag for setting signals/slots; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TList*TGCompositeFrame::fListcontainer of frame elements; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TEveTrans*fMModel object.; Bool_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; TClass*TGedFrame::fModelClassclass corresponding to instantiated GedFrame; Int_tTGCompositeFrame::fMustCleanupcleanup mode (see EFrameCleanup); TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveTransEditor.html:17263,mask,mask,17263,root/html528/TEveTransEditor.html,https://root.cern,https://root.cern/root/html528/TEveTransEditor.html,6,['mask'],['mask']
Availability,"ed; };; enum TGWindow::EEditMode { kEditEnable; kEditDisable; kEditDisableEvents; kEditDisableGrab; kEditDisableLayout; kEditDisableResize; kEditDisableHeight; kEditDisableWidth; kEditDisableBtnEnable; kEditDisableKeyEnable; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Bool_tTGedFrame::fAvoidSignalflag for executing slots; Pixel_tTGFrame::fBackgroundframe background color; Int_tTGFrame::fBorderWidthframe border width; TGClient*TGObject::fClientConnection to display server; Int_tTGFrame::fDNDStateEDNDFlags; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; UInt_tTGFrame::fEventMaskcurrenty active event mask; TList*TGedFrame::fExtraTabsaddtional tabs in ged editor; TGFrameElement*TGFrame::fFEpointer to frame element; TGedEditor*TGedFrame::fGedEditormanager of this frame; UInt_tTGFrame::fHeightframe height; Handle_tTGObject::fIdX11/Win32 Window identifier; Bool_tTGedFrame::fInitinit flag for setting signals/slots; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TList*TGCompositeFrame::fListcontainer of frame elements; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TEveWindow*fMModel object.; Bool_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; TClass*TGedFrame::fModelClassclass corresponding to instantiated GedFrame; Int_tTGCompositeFrame::fMustCleanupcleanup mode (see EFrameCleanup); TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveWindowEditor.html:17276,mask,mask,17276,root/html528/TEveWindowEditor.html,https://root.cern,https://root.cern/root/html528/TEveWindowEditor.html,6,['mask'],['mask']
Availability,"edCtxt &normCtxt, std::ostream &dictStream)Definition rootcling_impl.cxx:1780; ExtractSelectedNamespacesvoid ExtractSelectedNamespaces(RScanner &scan, std::list< std::string > &nsList)Loop on selected classes and put them in a list.Definition rootcling_impl.cxx:2572; IncludeHeadersstatic bool IncludeHeaders(const std::vector< std::string > &headers, cling::Interpreter &interpreter)Includes all given headers in the interpreter.Definition rootcling_impl.cxx:2048; GetPointeeTypeIfPossibleclang::QualType GetPointeeTypeIfPossible(const clang::QualType &qt)Get the pointee type if possible.Definition rootcling_impl.cxx:3071; AnnotateDeclvoid AnnotateDecl(clang::CXXRecordDecl &CXXRD, const RScanner::DeclsSelRulesMap_t &declSelRulesMap, cling::Interpreter &interpreter, bool isGenreflex)Definition rootcling_impl.cxx:327; gOptVerboseLevelstatic llvm::cl::opt< VerboseLevel > gOptVerboseLevel(llvm::cl::desc(""Choose verbosity level:""), llvm::cl::values(clEnumVal(v, ""Show errors.""), clEnumVal(v0, ""Show only fatal errors.""), clEnumVal(v1, ""Show errors (the same as -v).""), clEnumVal(v2, ""Show warnings (default).""), clEnumVal(v3, ""Show notes.""), clEnumVal(v4, ""Show information."")), llvm::cl::init(v2), llvm::cl::cat(gRootclingOptions)); GenerateLinkdefvoid GenerateLinkdef(llvm::cl::list< std::string > &InputFiles, std::string &code_for_parser)Definition rootcling_impl.cxx:1847; gOptRootMapFileNamestatic llvm::cl::opt< std::string > gOptRootMapFileName(""rmf"", llvm::cl::desc(""Generate a rootmap file with the specified name.""), llvm::cl::cat(gRootclingOptions)); gOptInlineInputstatic llvm::cl::opt< bool > gOptInlineInput(""inlineInputHeader"", llvm::cl::desc(""Does not generate #include <header> but expands the header content.""), llvm::cl::cat(gRootclingOptions)); isPointerToPointerbool isPointerToPointer(const clang::FieldDecl &m)Definition rootcling_impl.cxx:1152; CreateNewRootMapFileint CreateNewRootMapFile(const std::string &rootmapFileName, const std::string &rootmapLibName, const std:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:296486,error,errors,296486,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,1,['error'],['errors']
Availability,"edEvents.end(), rndm);; 1086 }; 1087 }; 1088 }; 1089 ; 1090 // check for each class the number of training and testing events, the requested number and the available number; 1091 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""SPLITTING ========"" << Endl;; 1092 for( UInt_t cls = 0; cls < dsi.GetNClasses(); ++cls ){; 1093 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""---- class "" << cls << Endl;; 1094 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""check number of training/testing events, requested and available number of events and for class "" << cls << Endl;; 1095 ; 1096 // check if enough or too many events are already in the training/testing eventvectors of the class cls; 1097 EventVector& eventVectorTraining = tmpEventVector[ Types::kTraining ].at(cls);; 1098 EventVector& eventVectorTesting = tmpEventVector[ Types::kTesting ].at(cls);; 1099 EventVector& eventVectorUndefined = tmpEventVector[ Types::kMaxTreeType ].at(cls);; 1100 ; 1101 Int_t availableTraining = eventVectorTraining.size();; 1102 Int_t availableTesting = eventVectorTesting.size();; 1103 Int_t availableUndefined = eventVectorUndefined.size();; 1104 ; 1105 Float_t presel_scale;; 1106 if (fScaleWithPreselEff) {; 1107 presel_scale = eventCounts[cls].cutScaling();; 1108 if (presel_scale < 1); 1109 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << "" you have opted for scaling the number of requested training/testing events\n to be scaled by the preselection efficiency""<< Endl;; 1110 }else{; 1111 presel_scale = 1.; // this scaling was too confusing to most people, including me! Sorry... (Helge); 1112 if (eventCounts[cls].cutScaling() < 1); 1113 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << "" you have opted for interpreting the requested number of training/testing events\n to be the number of events AFTER your preselection cuts"" << Endl;; 1114 ; 1115 }; 1116 ; 1117 // If TrainTestSplit_<class> is set, set number of requested training events to split*nu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:47536,avail,availableTraining,47536,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['avail'],['availableTraining']
Availability,"edModel=Higgs_trained_model.h5:NumEpochs=20:BatchSize=100:""; ""GpuOptions=allow_growth=True""); // needed for RTX NVidia card and to avoid TF allocates all GPU memory; }; }; ; /**; ## Train Methods; ; Here we train all the previously booked methods.; ; */; ; factory.TrainAllMethods();; ; /**; ## Test all methods; ; Now we test and evaluate all methods using the test data set; */; ; factory.TestAllMethods();; ; factory.EvaluateAllMethods();; ; /// after we get the ROC curve and we display; ; auto c1 = factory.GetROCCurve(loader);; c1->Draw();; ; /// at the end we close the output file which contains the evaluation result of all methods and it can be used by TMVAGUI; /// to display additional plots; ; outputFile->Close();; ; ; }; Double_tdouble Double_tDefinition RtypesCore.h:59; Infovoid Info(const char *location, const char *msgfmt,...)Use this function for informational messages.Definition TError.cxx:218; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; Warningvoid Warning(const char *location, const char *msgfmt,...)Use this function in warning situations.Definition TError.cxx:229; gROOT#define gROOTDefinition TROOT.h:406; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TCutA specialized string object used for TTree selections.Definition TCut.h:25; TDirectoryFile::GetTObject * Get(const char *namecycle) overrideReturn pointer to object identified by namecycle.Definition TDirectoryFile.cxx:937; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TFile::SetCacheFileDirstatic Bool_t SetCacheFileDir(std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:69925,error,error,69925,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,1,['error'],['error']
Availability,"edOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; Double_tEstimatorFunction(vector<Double_t>& pars); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TMVA::IFitterTarget&TMVA::FitterBase::GetFitterTarget() const; virtual const char*TObject::GetIconName() const; virtual const char*TMVA::FitterBase::GetName() const; Int_tTMVA::FitterBase::GetNpars() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TString&TMVA::Configurable::GetOptions() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::Han",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MinuitFitter.html:1803,error,error,1803,root/html528/TMVA__MinuitFitter.html,https://root.cern,https://root.cern/root/html528/TMVA__MinuitFitter.html,6,['error'],['error']
Availability,"edPropertiesList(const RooSharedPropertiesList&); virtual~RooSharedPropertiesList(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSharedPropertiesList.html:1529,error,error,1529,root/html526/RooSharedPropertiesList.html,https://root.cern,https://root.cern/root/html526/RooSharedPropertiesList.html,7,['error'],['error']
Availability,"ed_ptr< T > acquire (Args &&...args);  ; std::shared_ptr< TObject > acquire (const std::shared_ptr< TObject > &arg, bool checkFactory=false, bool mustBeNew=false);  ; template<typename T , typename T2 , typename... Args> ; std::shared_ptr< T > acquire2 (Args &&...args);  ; template<typename T , typename... Args> ; std::shared_ptr< T > acquireNew (Args &&...args);  ; xRooNode & browse ();  ; std::shared_ptr< TObject > convertForAcquisition (xRooNode &acquirer, const char *opt="""") const;  ; xRooNode filter (const xRooNode &range) const;  ; std::shared_ptr< xRooNode > getBrowsable (const char *name) const;  ; const char * GetIconName () const override;  Returns mime type name of object. ;  ; TGListTree * GetListTree (TBrowser *b) const;  ; const char * GetNodeType () const;  ; template<typename T > ; std::shared_ptr< T > getObject (const std::string &name) const;  ; std::shared_ptr< TObject > getObject (const std::string &name, const std::string &type="""") const;  ; std::string GetPath () const;  ; TGListTreeItem * GetTreeItem (TBrowser *b) const;  ; xRooNode histo (const xRooNode &vars=""x"", const xRooNode &fr="""", bool content=true, bool errors=true) const;  ; bool IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ;  operator bool () const;  ; xRooNode shallowCopy (const std::string &name, std::shared_ptr< xRooNode > parent=nullptr);  ; void sterilize () const;  ; TObject * xget () const;  . Static Private Member Functions; static bool isNull (const std::shared_ptr< xRooNode > &x);  ; static void SetAuxFunction (const char *title, const std::function< double(double, double, double)> &func, bool symmetrize=false);  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1UL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:20647,error,errors,20647,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,1,['error'],['errors']
Availability,"eded whenever distribution parameters have been changed. ; Definition at line 108 of file TUnuran.cxx. ◆ Init() [4/5]. bool TUnuran::Init ; (; const TUnuranEmpDist & ; distr, . const std::string & ; method = ""empk"" . ). Initialize method for continuous empirical distribution. ; User must provide a distribution object (which is copied inside) and a string for a method. The distribution object can represent binned (only 1D) or unbinned (1D or multi-dim) data The method for the unbinned empirical distribution are based on the kernel smoothing, see UnuRan doc A re-initialization is needed whenever distribution parameters have been changed. ; Definition at line 122 of file TUnuran.cxx. ◆ Init() [5/5]. bool TUnuran::Init ; (; const TUnuranMultiContDist & ; distr, . const std::string & ; method = ""vnrou"" . ). Initialize method for continuous multi-dimensional distribution. ; User must provide a distribution object (which is copied inside) and a string for a method. For the list of available method for multivariate cont. distribution see the UnuRan doc A re-initialization is needed whenever distribution parameters have been changed.; The default method used for multi-dimensional distributions is ""vnrou"" Note that some of the multi-dimensional continuous distribution methods like ""hitro"" are based on Markov-CHain sampler and they are much faster for sampling but require more time to converge. Furthermore, since they are Markov-Chain methods their generated sample values are correlated and cannot be used as i.i.d., one can instead use the obtained sample distribution. (see also the ROOT issue: #10222 ). ; Definition at line 92 of file TUnuran.cxx. ◆ InitBinomial(). bool TUnuran::InitBinomial ; (; unsigned int ; ntot, . double ; prob, . const std::string & ; method = ""dstd"" . ). Initialize method for the Binomial distribution. ; Used to generate poisson numbers for a constant parameters (n,p) of the Binomial distribution. Use after the method TUnuran::SampleDiscr to generate t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnuran.html:9360,avail,available,9360,doc/master/classTUnuran.html,https://root.cern,https://root.cern/doc/master/classTUnuran.html,1,['avail'],['available']
Availability,"edelete . ◆ PageDown(). void TGListTree::PageDown ; (; Bool_t ; select = kFALSE). overridevirtual . Move content one page down. ; Reimplemented from TGContainer.; Definition at line 1222 of file TGListTree.cxx. ◆ PageUp(). void TGListTree::PageUp ; (; Bool_t ; select = kFALSE). overridevirtual . Move content one page up. ; Reimplemented from TGContainer.; Definition at line 1207 of file TGListTree.cxx. ◆ PDeleteChildren(). void TGListTree::PDeleteChildren ; (; TGListTreeItem * ; item). protected . Recursively delete all children of an item. ; Definition at line 1774 of file TGListTree.cxx. ◆ PDeleteItem(). void TGListTree::PDeleteItem ; (; TGListTreeItem * ; item). protected . Delete given item. ; Takes care of list-tree state members fSelected, fCurrent and fBelowMouse. ; Definition at line 1747 of file TGListTree.cxx. ◆ RecursiveDeleteItem(). Int_t TGListTree::RecursiveDeleteItem ; (; TGListTreeItem * ; item, . void * ; ptr . ). Delete item with fUserData == ptr. ; Search tree downwards starting at item. ; Definition at line 2054 of file TGListTree.cxx. ◆ RemoveReference(). void TGListTree::RemoveReference ; (; TGListTreeItem * ; item). protected . This function removes the specified item from the linked list. ; It does not do anything with the data contained in the item, though. ; Definition at line 1719 of file TGListTree.cxx. ◆ RenameItem(). void TGListTree::RenameItem ; (; TGListTreeItem * ; item, . const char * ; string . ). Rename item in list tree. ; Definition at line 2000 of file TGListTree.cxx. ◆ RenameSelected(). void TGListTree::RenameSelected ; (; const char * ; string). inline . Definition at line 395 of file TGListTree.h. ◆ Reparent(). Int_t TGListTree::Reparent ; (; TGListTreeItem * ; item, . TGListTreeItem * ; newparent . ). Make newparent the new parent of item. ; Definition at line 2099 of file TGListTree.cxx. ◆ ReparentChildren(). Int_t TGListTree::ReparentChildren ; (; TGListTreeItem * ; item, . TGListTreeItem * ; newparent . ). Make newparent",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGListTree.html:73091,down,downwards,73091,doc/master/classTGListTree.html,https://root.cern,https://root.cern/doc/master/classTGListTree.html,1,['down'],['downwards']
Availability,"edflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPrintDialog(const TGWindow* p = 0, const TGWindow* main = 0, UInt_t w = 1, UInt_t h = 1, char** printerName = 0, char** printProg = 0, Int_t* ret_code = 0, UInt_t options = kVerticalFrame); Create the printer dialog box. Returns kTRUE in ret_code when; printerName and printProg have been set and cancel was not pressed,; kFALSE otherwise. ~TGPrintDialog(); Clean up print dialog. void CloseWindow(); Close the dialog. On close the dialog will be deleted and cannot be; re-used. void GetPrinters(); Ask the system fo the list of available printers and populate the combo; box. If there is a default printer, select it in the list. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process print dialog widget messages. » Author: Fons Rademakers 10/7/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGTextEditDialogs.h 40451 2011-08-04 09:58:12Z bellenot $ » Last generated: 2011-11-03 20:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGPrintDialog.html:23361,avail,available,23361,root/html532/TGPrintDialog.html,https://root.cern,https://root.cern/root/html532/TGPrintDialog.html,2,['avail'],['available']
Availability,"edirectOutput(const char *name, const char *mode=""a"", RedirectHandle_t *h=nullptr)Redirect standard output (stdout, stderr) to the specified file.Definition TSystem.cxx:1715; TSystem::IgnoreInterruptvirtual void IgnoreInterrupt(Bool_t ignore=kTRUE)If ignore is true ignore the interrupt signal, else restore previous behaviour.Definition TSystem.cxx:602; TSystem::Symlinkvirtual int Symlink(const char *from, const char *to)Create a symbolic link from file1 to file2.Definition TSystem.cxx:1368; TSystem::ResetErrnostatic void ResetErrno()Static function resetting system error number.Definition TSystem.cxx:284; TSystem::ExpandPathNamevirtual Bool_t ExpandPathName(TString &path)Expand a pathname getting rid of special shell characters like ~.Definition TSystem.cxx:1274; TSystem::GetErrnostatic Int_t GetErrno()Static function returning system error number.Definition TSystem.cxx:276; TSystem::Chmodvirtual int Chmod(const char *file, UInt_t mode)Set the file permission bits. Returns -1 in case or error, 0 otherwise.Definition TSystem.cxx:1508; TSystem::FreeDirectoryvirtual void FreeDirectory(void *dirp)Free a directory.Definition TSystem.cxx:845; TSystem::OpenDirectoryvirtual void * OpenDirectory(const char *name)Open a directory. Returns 0 if directory does not exist.Definition TSystem.cxx:836; TSystem::GetPidvirtual int GetPid()Get process id.Definition TSystem.cxx:707; TSystem::CopyFilevirtual int CopyFile(const char *from, const char *to, Bool_t overwrite=kFALSE)Copy a file.Definition TSystem.cxx:1341; TSystem::GetIncludePathvirtual const char * GetIncludePath()Get the list of include path.Definition TSystem.cxx:3973; TSystem::ShowOutputvirtual void ShowOutput(RedirectHandle_t *h)Display the content associated with the redirection described by the opaque handle 'h'.Definition TSystem.cxx:1725; TSystem::IsPathLocalvirtual Bool_t IsPathLocal(const char *path)Returns TRUE if the url in 'path' points to the local file system.Definition TSystem.cxx:1305; TSystem::mkdirvirtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:247242,error,error,247242,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['error'],['error']
Availability,"edirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; RooRealProxy_true; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooPullVar(); Default constructor. RooPullVar(const char* name, const char* title, RooRealVar& measurement, RooAbsReal& truth); Construct RooAbsReal representing the pull of a RooRealVar 'meas' providing the; measured value and its error and a RooAbsReal 'truth' providing the true value. RooPullVar(const RooPullVar& other, const char* name = 0); Copy constructor. ~RooPullVar(); Destructor. Double_t evaluate() const; Calculate pull. Use asymmetric error if defined in measurement,; otherwise use symmetric error. If measurement has no error; return zero. TObject* clone(const char* newname) const; { return new RooPullVar(*this, newname); }. » Last changed: Thu Sep 23 20:00:36 2010 » Last generated: 2010-09-23 20:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooPullVar.html:33002,error,error,33002,root/html528/RooPullVar.html,https://root.cern,https://root.cern/root/html528/RooPullVar.html,4,['error'],['error']
Availability,"edirlog = kFALSE . ). List contents of package directory. ; If all is true show all package directories also on slaves. If everything is ok all package directories should be the same. If redir is kTRUE the result is redirected to the log file (option available for internal actions). ; Definition at line 7770 of file TProof.cxx. ◆ ShowParameters(). void TProof::ShowParameters ; (; const char * ; wildcard = ""PROOF_*""); const. Show the input list parameters specified by the wildcard. ; Default is the special PROOF control parameters (PROOF_*). ; Definition at line 9958 of file TProof.cxx. ◆ ShowQueries(). void TProof::ShowQueries ; (; Option_t * ; opt = """"). Ask the master for the list of queries. ; Options: ""A"" show information about all the queries known to the server, i.e. even those processed by other sessions ""L"" show only information about queries locally available i.e. already retrieved. If ""L"" is specified, ""A"" is ignored. ""F"" show all details available about queries ""H"" print help menu Default """" ; Definition at line 2165 of file TProof.cxx. ◆ ShowStagingStatusDataSet(). void TProof::ShowStagingStatusDataSet ; (; const char * ; dataset, . const char * ; optStr = ""filter:SsCc"" . ). virtual . Like GetStagingStatusDataSet, but displays results immediately. ; Definition at line 11116 of file TProof.cxx. ◆ SlaveStartupThread(). static void * TProof::SlaveStartupThread ; (; void * ; arg). staticprotected . ◆ StartSlaves(). Bool_t TProof::StartSlaves ; (; Bool_t ; attach = kFALSE). protectedvirtual . Start up PROOF slaves. ; Reimplemented in TProofCondor, and TProofSuperMaster.; Definition at line 1660 of file TProof.cxx. ◆ StartupMessage(). void TProof::StartupMessage ; (; const char * ; msg, . Bool_t ; status, . Int_t ; done, . Int_t ; total . ). Send startup message. ; Definition at line 9312 of file TProof.cxx. ◆ StopProcess(). void TProof::StopProcess ; (; Bool_t ; abort, . Int_t ; timeout = -1 . ). Send STOPPROCESS message to master and workers. ; Definition at",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:151798,avail,available,151798,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['avail'],['available']
Availability,"edm, Double_t& errdef, Int_t& nvpar, Int_t& nparx) const; return global fit parameters; amin : chisquare; edm : estimated distance to minimum; errdef; nvpar : number of variable parameters; nparx : total number of parameters. Double_t GetSumLog(Int_t i); return Sum(log(i) i=0,n; used by log likelihood fits. Bool_t IsFixed(Int_t ipar) const; return kTRUE if parameter ipar is fixed, kFALSE othersise). void PrintResults(Int_t level, Double_t amin) const; Print fit results. void ReleaseParameter(Int_t ipar); Release parameter ipar. void SetFCN(void* fcn); Specify the address of the fitting algorithm (from the interpreter). void SetFCN(void(*)(Int_t&,Double_t*,Double_t&,Double_t*,Int_t) fcn); Specify the address of the fitting algorithm. void SetFitMethod(const char* name); ret fit method (chisquare or loglikelihood). Int_t SetParameter(Int_t ipar, const char* parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh); set initial values for a parameter; ipar : parameter number; parname : parameter name; value : initial parameter value; verr : initial error for this parameter; vlow : lower value for the parameter; vhigh : upper value for the parameter. void FitChisquare(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Chisquare method; Default method (function evaluated at center of bin); for each point the cache contains the following info; -1D : bc,e, xc (bin content, error, x of center of bin); -2D : bc,e, xc,yc; -3D : bc,e, xc,yc,zc. void FitChisquareI(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Chisquare method; The ""I""ntegral method is used; for each point the cache contains the following info; -1D : bc,e, xc,xw (bin content, error, x of center of bin, x bin width of bin); -2D : bc,e, xc,xw,yc,yw; -3D : bc,e, xc,xw,yc,yw,zc,zw. void FitLikelihood(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFitter.html:15732,error,error,15732,root/html602/TFitter.html,https://root.cern,https://root.cern/root/html602/TFitter.html,4,['error'],['error']
Availability,"eds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TMutex*fAMtxTo protect async msg queue; list<TXSockBuf*>fAQuelist of asynchronous messages; TSemaphorefASemControl access to conn async msg queue; Bool_tfAWaitkTRUE if waiting at the async msg queue; TSemaphorefAsynProcControl actions while processing async messages; TXSockBuf*fBufCurcurrent read buffer; TStringfBufferContainer for exchanging information; Int_tfByteCurcurrent position in the first buffer; Int_tfByteLeftbytes left in the first buffer; XrdProofConn*fConninstance of the underlying connection module; Bool_tfDontTimeoutIf true wait forever for incoming messages; TXHandler*fHandlerHandler of asynchronous events (input, error); TStringfHostRemote host; Bool_tfIForwardWheter the interrupt should be propagated; intfILevHighest received interrupt; TMutex*fIMtxTo protect interrupt queue; Int_tfLogLevelLog level to be transmitted to servers; charfMode'e' (def) or 'i' (internal - proofsrv); Int_tfPid; Int_tfPortRemote port; Bool_tfRDInterruptTo interrupt waiting for messages; TObject*fReferenceGeneric object reference of this socket; intfSendOptOptions for sending messages; Short_tfSessionIDproofsrv: remote ID of connected session; TStringfUserUsername used for login; Int_tfXrdProofdVersion; static Bool_tfgInitDoneAvoid initializing more than once; static TStringfgLocLocation string; static TXSockPipefgPipePipe for input monitoring; static TMutexfgSMtxTo protect spare list; static list<TXSockBuf*>fgSQuelist of spare buffers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t PickUpReady(); Manage asynchronous message. TXSockBuf * PopUpSpare(Int_t sz). void PushBackSpare(). void PostMsg(Int_t type, const char* msg = 0); Post a message into the queue",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TXSocket.html:11691,error,error,11691,root/html530/TXSocket.html,https://root.cern,https://root.cern/root/html530/TXSocket.html,3,['error'],['error']
Availability,"educe the ; : number of input variables that have only little discrimination power. ; : ; : In the tests we have carried out so far, the MLP and ROOT networks; : (TMlpANN, interfaced via TMVA) performed equally well, with however; : a clear speed advantage for the MLP. The Clermont-Ferrand neural ; : net (CFMlpANN) exhibited worse classification performance in these; : tests, which is partly due to the slow convergence of its training; : (at least 10k training cycles are required to achieve approximately; : competitive results).; : ; : ␛[1mOvertraining: ␛[0monly the TMlpANN performs an explicit separation of the; : full training sample into independent training and validation samples.; : We have found that in most high-energy physics applications the ; : available degrees of freedom (training events) are sufficient to ; : constrain the weights of the relatively simple architectures required; : to achieve good performance. Hence no overtraining should occur, and ; : the use of validation samples would only reduce the available training; : information. However, if the performance on the training sample is ; : found to be significantly better than the one found with the inde-; : pendent test sample, caution is needed. The results for these samples ; : are printed to standard output at the end of each training job.; : ; : ␛[1m--- Performance tuning via configuration options:␛[0m; : ; : The hidden layer architecture for all ANNs is defined by the option; : ""HiddenLayers=N+1,N,..."", where here the first hidden layer has N+1; : neurons and the second N neurons (and so on), and where N is the number ; : of input variables. Excessive numbers of hidden layers should be avoided,; : in favour of more neurons in the first hidden layer.; : ; : The number of cycles should be above 500. As said, if the number of; : adjustable weights is small compared to the training sample size,; : using a large number of training samples should not lead to overtraining.; : ; : <Suppress this messa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:43369,avail,available,43369,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['avail'],['available']
Availability,"ee $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#include <iostream>; 13#include ""TROOT.h""; 14#include <ft2build.h>; 15#include FT_FREETYPE_H; 16#include FT_GLYPH_H; 17#include ""TTF.h""; 18#include ""TMathText.h""; 19#include ""TMath.h""; 20#include ""TVirtualPad.h""; 21#include ""TVirtualPS.h""; 22#include ""TVirtualX.h""; 23#include ""TText.h""; 24 ; 25#include ""../../../graf2d/mathtext/inc/mathtext.h""; 26#include ""../../../graf2d/mathtext/inc/mathrender.h""; 27 ; 28/** \class TMathText; 29\ingroup BasicGraphics; 30 ; 31To draw TeX Mathematical Formula; 32 ; 33TMathText's purpose is to write mathematical equations, exactly as TeX would; 34do it. The syntax is the same as the TeX's one.; 35 ; 36The following example demonstrate how to use TMathText:; 37 ; 38Begin_Macro(source); 39../../../tutorials/graphics/tmathtext.C; 40End_Macro; 41 ; 42The list of all available symbols is given in the following example:; 43 ; 44Begin_Macro; 45../../../tutorials/graphics/tmathtext2.C; 46End_Macro; 47 ; 48#### Limitation:; 49TMathText rendering is not implemented for the PDF output.; 50PostScript output should be used instead.; 51*/; 52 ; 53const Double_t kPI = TMath::Pi();; 54 ; 55class TMathTextRenderer : public TText, public TAttFill,; 56 public mathtext::math_text_renderer_t {; 57private:; 58 TMathText *_parent;; 59 float _font_size;; 60 float _x0;; 61 float _y0;; 62 float _angle_degree;; 63 float _pad_pixel_transform[6];; 64 float _pad_scale;; 65 float _pad_scale_x;; 66 float _pad_scale_y;; 67 float _pad_scale_x_relative;; 68 float _pad_scale_y_relative;; 69 float _current_font_size[mathtext::math_text_renderer_t::NFAMILY];; 70 inline size_t root_face_number(; 71 const unsigned int family, const bool serif = false) const; 72 {; 73 static const int precision = 2;; 74 ; 75 if (family >= mathtext::math_text_renderer_t::; 76 FAMILY_REGULAR &&; 77 family <= mathtext::ma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMathText_8cxx_source.html:1448,avail,available,1448,doc/master/TMathText_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMathText_8cxx_source.html,1,['avail'],['available']
Availability,"ee ; (; ). virtual . Read the FREE linked list. ; Every file has a linked list (fFree) of free segments. This linked list has been written on the file via WriteFree as a single data record. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1925 of file TFile.cxx. ◆ ReadProcessID(). TProcessID * TFile::ReadProcessID ; (; UShort_t ; pidf). virtual . The TProcessID with number pidf is read from this file. ; If the object is not already entered in the gROOT list, it is added. ; Definition at line 1951 of file TFile.cxx. ◆ ReadStreamerInfo(). void TFile::ReadStreamerInfo ; (; ). virtual . Read the list of StreamerInfo from this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this function is not called if the static member fgReadInfo is false. (see TFile::SetReadStreamerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is imp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:88772,recover,recover,88772,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,2,['recover'],['recover']
Availability,"ee TH1 documentation)Definition TH1.h:622; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:174; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; A more complete example including error handling and a few combinations of TTreeReaderValue and TTreeReaderArray would look like this:; #include <TFile.h>; #include <TH1.h>; #include <TTreeReader.h>; #include <TTreeReaderValue.h>; #include <TTreeReaderArray.h>; ; #include ""TriggerInfo.h""; #include ""Muon.h""; #include ""Tau.h""; ; #include <vector>; #include <iostream>; ; bool CheckValue(ROOT::Internal::TTreeReaderValueBase& value) {; if (value.GetSetupStatus() < 0) {; std::cerr << ""Error "" << value.GetSetupStatus(); << ""setting up reader for "" << value.GetBranchName() << '\n';; return false;; }; return true;; }; ; ; // Analyze the tree ""MyTree"" in the file passed into the function.; // Returns false in case of errors.; bool analyze(TFile* file) {; // Create a TTreeReader named ""MyTree"" from the given TDirectory.; // The TTreeReader gives access to the TTree to the TTreeReaderValue and; // TTreeReaderArray objects. It knows the current entry number and knows; // how to iterate through the TTree.; TTreeReader reader(""MyTree"", file);; ; // Read a single float value in each tree entries:; TTreeReaderValue<float> weight(reader, ""event.weight"");; ; // Read a TriggerInfo object from the tree entries:; TTreeReaderValue<TriggerInfo> triggerInfo(reader, ""triggerInfo"");; ; //Read a vector of Muon objects from the tree entries:; TTreeReaderValue<std::vector<Muon>> muons(reader, ""muons"");; ; //Read the pT for all jets in the tree entry:; TTreeReaderArray<double> jetPt(reader, ""jets.pT"");; ; // Read the taus in the tree entry:; TTreeReaderArray<Tau> taus(reader, ""taus"");; ; ; // Now iterate through the TTree entries and fill a histogram.; ; TH1F(""hist"", ""TTreeReader example histogram"", 10, 0., ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeReader.html:3606,error,errors,3606,doc/master/classTTreeReader.html,https://root.cern,https://root.cern/doc/master/classTTreeReader.html,1,['error'],['errors']
Availability,"ee branch with the method's discriminating variable ;  ; void AddSpectatorsXMLTo (void *parent) const;  write spectator info to XML ;  ; void AddTargetsXMLTo (void *parent) const;  write target info to XML ;  ; void AddVarsXMLTo (void *parent) const;  write variable info to XML ;  ; void CreateMVAPdfs ();  Create PDFs of the MVA output variables. ;  ; void DeclareBaseOptions ();  define the options (their key words) that can be set in the option string here the options valid for ALL MVA methods are declared. ;  ; ECutOrientation GetCutOrientation () const;  ; Bool_t GetLine (std::istream &fin, char *buf);  reads one line from the input stream checks for certain keywords and interprets the line if keywords are found ;  ; virtual Double_t GetValueForRoot (Double_t);  returns efficiency as function of cut ;  ; void InitBase ();  default initialization called by all constructors ;  ; void ProcessBaseOptions ();  the option string is decoded, for available options see ""DeclareOptions"" ;  ; void ReadClassesFromXML (void *clsnode);  read number of classes from XML ;  ; void ReadSpectatorsFromXML (void *specnode);  read spectator info from XML ;  ; void ReadStateFromXML (void *parent);  ; void ReadTargetsFromXML (void *tarnode);  read target info from XML ;  ; void ReadVariablesFromXML (void *varnode);  read variable info from XML ;  ; void ReadVarsFromStream (std::istream &istr);  Read the variables (name, min, max) for a given data transformation method from the stream. ;  ; void ResetThisBase ();  ; void WriteStateToStream (std::ostream &tf) const;  general method used in writing the header of the weight files where the used variables, variable transformation type etc. ;  ; void WriteStateToXML (void *parent) const;  general method used in writing the header of the weight files where the used variables, variable transformation type etc. ;  ; void WriteVarsToStream (std::ostream &tf, const TString &prefix="""") const;  write the list of variables (name, min, max) for a given",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBase.html:29712,avail,available,29712,doc/master/classTMVA_1_1MethodBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html,1,['avail'],['available']
Availability,"ee branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; TMatrixDSym*_corrMat; TMatrixDSym*_covMat; Double_t_d; RooDataSet&_data; vector<std::vector<Double_t> >_dataPts; vector<TVectorD>_dataPtsR; RooArgSet_dataVars; Bool_t_debug; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; TVectorD*_dx; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Bool_t_fixedShape; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooNDKeysPdf::BoxInfo_fullBoxInfo; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; vector<Int_t>_idx; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; Double_t_maxWeight; vector<Double_t>_mean; Double_t_minWeight; Bool_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNDKeysPdf.html:42393,error,errors,42393,root/html534/RooNDKeysPdf.html,https://root.cern,https://root.cern/root/html534/RooNDKeysPdf.html,2,['error'],['errors']
Availability,"ee convention for numbering bins in TH1::GetBin In case the bin number is greater than the number of bins and the timedisplay option is set or CanExtendAllAxes(), the number of bins is automatically doubled to accommodate the new bin. ;  ; virtual void SetBinContent (Int_t bin, Int_t, Double_t content);  ; virtual void SetBinContent (Int_t bin, Int_t, Int_t, Double_t content);  ; virtual void SetBinError (Int_t bin, Double_t error);  Set the bin Error Note that this resets the bin eror option to be of Normal Type and for the non-empty bin the bin error is set by default to the square root of their content. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Int_t binz, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinErrorOption (EBinErrorOpt type);  ; virtual UInt_t SetCanExtend (UInt_t extendBitMask);  Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ;  ; virtual void SetCellContent (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetCellError (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetColors (Color_t linecolor=-1, Color_t markercolor=-1, Color_t fillcolor=-1);  Shortcut to set the three histogram colors with a single call. ;  ; virtual void SetContent (const Double_t *content);  Replace bin contents by the contents of array content. ;  ; virtual void SetContour (Int_t nlevels, const Double_t *levels=nullptr);  Set the number and values of contour levels. ;  ; virtual void SetContourLevel (Int_t level, Double_t value);  Set value for one contour level. ;  ; virtual void SetDirectory (TDirectory *dir);  By default, when a histogram is created, it is added to the list of histogram objects in the current directory in memory. ;  ; virtual void SetEntries (Double_t n);  ; virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile.html:26553,mask,mask,26553,doc/master/classTProfile.html,https://root.cern,https://root.cern/doc/master/classTProfile.html,2,['mask'],['mask']
Availability,"ee& t, Bool_t active); virtual voidsetVal(Double_t value, const char* rangeName); virtual voidsetValFast(Double_t value); voidRooAbsArg::setValueDirty(const RooAbsArg* source) const; RooRealVarSharedProperties*sharedProp() const; virtual voidRooAbsReal::syncCache(const RooArgSet* set = 0); Double_tRooAbsReal::traceEval(const RooArgSet* set) const; virtual Bool_tRooAbsReal::traceEvalHook(Double_t) const; voidRooAbsArg::unRegisterProxy(RooArgProxy& proxy); voidRooAbsArg::unRegisterProxy(RooSetProxy& proxy); voidRooAbsArg::unRegisterProxy(RooListProxy& proxy). Data Members; public:. enum RooAbsReal::ScaleType { Raw; Relative; NumEvent; RelativeExpected; };; enum RooAbsReal::ErrorLoggingMode { PrintErrors; CollectErrors; CountErrors; Ignore; };; enum RooAbsArg::ConstOpCode { Activate; DeActivate; ConfigChange; ValueChange; };; enum RooAbsArg::CacheMode { Always; NotAdvised; Never; };; enum RooAbsArg::OperMode { Auto; AClean; ADirty; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. public:. static map<RooAbsArg*,TRefArray*>RooAbsArg::_ioEvoListtemporary holding list for proxies needed in schema evolution ; static stack<RooAbsArg*>RooAbsArg::_ioReadStackreading stack ; static const UInt_tRooAbsArg::fnv1a32start; static const ULong64_tRooAbsArg::fnv1a64start. protected:. RooLinkedList_altNonSharedBinningNon-shareable alternative binnings; Double_t_asymErrHiHigh side of asymmetric error associated with current value; Double_t_asymErrLoLow side of asymmetric error associated with current value; RooAbsBinning*_binning; set<std::string>RooAbsArg::_boolAttribBool",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooRealVar.html:36832,Error,ErrorLoggingMode,36832,root/html534/RooRealVar.html,https://root.cern,https://root.cern/root/html534/RooRealVar.html,1,['Error'],['ErrorLoggingMode']
Availability,"ee() const; return Tree in the cache. void Print(Option_t* option = """") const; Print cache statistics, like; ******TreeCache statistics for file: cms2.root ******; Number of branches in the cache ...: 1093; Cache Efficiency ..................: 0.997372; Cache Efficiency Rel...............: 1.000000; Learn entries......................: 100; Reading............................: 72761843 bytes in 7 transactions; Readahead..........................: 256000 bytes with overhead = 0 bytes; Average transaction................: 10394.549000 Kbytes; Number of blocks in current cache..: 210, total size: 6280352. if option = ""a"" the list of blocks in the cache is printed; see also class TTreePerfStats. Int_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read buffer at position pos.; If pos is in the list of prefetched blocks read from fBuffer.; Otherwise try to fill the cache from the list of selected branches,; and recheck if pos is now in the list.; Returns; -1 in case of read failure,; 0 in case not in cache,; 1 in case read from cache.; This function overloads TFileCacheRead::ReadBuffer. void ResetCache(); This will simply clear the cache. void SetEntryRange(Long64_t emin, Long64_t emax); Set the minimum and maximum entry number to be processed; this information helps to optimize the number of baskets to read; when prefetching the branch buffers. void SetLearnEntries(Int_t n = 10); Static function to set the number of entries to be used in learning mode; The default value for n is 10. n must be >= 1. void StartLearningPhase(); The name should be enough to explain the method.; The only additional comments is that the cache is cleaned before; the new learning phase. void StopLearningPhase(); This is the counterpart of StartLearningPhase() and can be used to stop; the learning phase. It's useful when the user knows exactly what branches; he is going to use.; For the moment it's just a call to FillBuffer() since that method; will create the buffer lists from the specified bra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeCache.html:19829,failure,failure,19829,root/html528/TTreeCache.html,https://root.cern,https://root.cern/root/html528/TTreeCache.html,1,['failure'],['failure']
Availability,"ee) of free segments. This linked list has been written on the file via WriteFree as a single data record. ; Reimplemented from TFile.; Definition at line 85 of file TXMLFile.h. ◆ ReadFromFile(). Bool_t TXMLFile::ReadFromFile ; (; ). protected . read document from file Now full content of document reads into the memory Then document decomposed to separate keys and streamer info structures All irrelevant data will be cleaned ; Definition at line 559 of file TXMLFile.cxx. ◆ ReadKeysList(). Int_t TXMLFile::ReadKeysList ; (; TDirectory * ; dir, . XMLNodePointer_t ; topnode . ). protected . Read list of keys for directory. ; Definition at line 630 of file TXMLFile.cxx. ◆ ReadStreamerElement(). void TXMLFile::ReadStreamerElement ; (; XMLNodePointer_t ; node, . TStreamerInfo * ; info . ). protected . read and reconstruct single TStreamerElement from xml node ; Definition at line 825 of file TXMLFile.cxx. ◆ Recover(). Int_t TXMLFile::Recover ; (; ). inlinefinalvirtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLFile.html:66509,recover,recover,66509,doc/master/classTXMLFile.html,https://root.cern,https://root.cern/doc/master/classTXMLFile.html,1,['recover'],['recover']
Availability,"ee, blocks.; Id is file system type (machine dependend, see statfs()); Bsize is block size of file system; Blocks is total number of blocks in file system; Bfree is number of free blocks in file system; The function returns 0 in case of success and 1 if the file system could; not be stat'ed. int Link(const char* from, const char* to); Create a link from file1 to file2. Returns 0 when successful,; -1 in case of failure. int Symlink(const char* from, const char* to); Create a symlink from file1 to file2. Returns 0 when succesfull,; -1 in case of failure. int Unlink(const char* name); Unlink, i.e. remove, a file or directory. Returns 0 when succesfull,; -1 in case of failure. Bool_t ExpandPathName(TString& patbuf); Expand a pathname getting rid of special shell characters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. Returns kFALSE in case of success; or kTRUE in case of error. Bool_t ExpandPathName(TString& patbuf); Expand a pathname getting rid of special shell characters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. Returns kFALSE in case of success; or kTRUE in case of error. int Chmod(const char* file, UInt_t mode); Set the file permission bits. Returns -1 in case or error, 0 otherwise. int Umask(Int_t mask); Set the process file creation mode mask. int Utime(const char* file, Long_t modtime, Long_t actime); Set a files modification and access times. If actime = 0 it will be; set to the modtime. Returns 0 on success and -1 in case of error. const char * FindFile(const char* search, TString& file, EAccessMode mode = kFileExists); Find location of file ""wfil"" in a search path.; The search path is specified as a : separated list of directories.; Return value is pointing to wfile for c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnixSystem.html:26950,error,error,26950,root/html528/TUnixSystem.html,https://root.cern,https://root.cern/root/html528/TUnixSystem.html,4,['error'],['error']
Availability,"ee, blocks.; Id is file system type (machine dependend, see statfs()); Bsize is block size of file system; Blocks is total number of blocks in file system; Bfree is number of free blocks in file system; The function returns 0 in case of success and 1 if the file system could; not be stat'ed. int Link(const char* from, const char* to); Create a link from file1 to file2. Returns 0 when successful,; -1 in case of failure. int Symlink(const char* from, const char* to); Create a symlink from file1 to file2. Returns 0 when successful,; -1 in case of failure. int Unlink(const char* name); Unlink, i.e. remove, a file or directory. Returns 0 when successful,; -1 in case of failure. Bool_t ExpandPathName(TString& patbuf); Expand a pathname getting rid of special shell characters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. Returns kFALSE in case of success; or kTRUE in case of error. Bool_t ExpandPathName(TString& patbuf); Expand a pathname getting rid of special shell characters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. Returns kFALSE in case of success; or kTRUE in case of error. int Chmod(const char* file, UInt_t mode); Set the file permission bits. Returns -1 in case or error, 0 otherwise. int Umask(Int_t mask); Set the process file creation mode mask. int Utime(const char* file, Long_t modtime, Long_t actime); Set a files modification and access times. If actime = 0 it will be; set to the modtime. Returns 0 on success and -1 in case of error. const char * FindFile(const char* search, TString& file, EAccessMode mode = kFileExists); Find location of file ""wfil"" in a search path.; The search path is specified as a : separated list of directories.; Return value is pointing to wfile for c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnixSystem.html:27290,error,error,27290,root/html534/TUnixSystem.html,https://root.cern,https://root.cern/root/html534/TUnixSystem.html,6,['error'],['error']
Availability,"eeCacheUnzip::EParUnzipModefgParallelIndicate if we want to activate the parallelism; static Double_tfgRelBuffSizeThis is the percentage of the TTreeCacheUnzip that will be used. private:. char*fCompBuffer; Int_tfCompBufferSize. Class Charts. Inheritance Chart:. TObject. ←; TFileCacheRead. ←; TTreeCache. ←; TTreeCacheUnzip. Function documentation; TTreeCacheUnzip(); Default Constructor. TTreeCacheUnzip(TTree* tree, Int_t buffersize = 0); Constructor. void Init(); Initialization procedure common to all the constructors. ~TTreeCacheUnzip(); destructor. (in general called by the TFile destructor; destructor. (in general called by the TFile destructor). Int_t AddBranch(TBranch* b, Bool_t subbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket; Returns 0 branch added or already included; -1 on error. Int_t AddBranch(const char* branch, Bool_t subbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket; Returns 0 branch added or already included; -1 on error. Bool_t FillBuffer(). Int_t SetBufferSize(Int_t buffersize); Change the underlying buffer size of the cache.; Returns 0 if the buffer content is still available; 1 if some or all of the buffer content has been made unavailable; -1 on error. void SetEntryRange(Long64_t emin, Long64_t emax); Set the minimum and maximum entry number to be processed; this information helps to optimize the number of baskets to read; when prefetching the branch buffers. void StopLearningPhase(); It's the same as TTreeCache::StopLearningPhase but we guarantee that; we start the unzipping just after getting the buffers. void UpdateBranches(TTree* tree); update pointer to current Tree and recompute pointers to the branches in the cache. Bool_t IsParallelUnzip(); Static function that tells wether the multithreading unzipping; is activated. Bool_t IsActiveThread(); This indicates if the thread is a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeCacheUnzip.html:17612,error,error,17612,root/html604/TTreeCacheUnzip.html,https://root.cern,https://root.cern/root/html604/TTreeCacheUnzip.html,2,['error'],['error']
Availability,"eeFormula::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TTreeFormula::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TTreeFormula::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 216 of file TTreeFormula.h. ◆ Convert(). void TTreeFormula::Convert ; (; UInt_t ; fromVersion). overrideprotectedvirtual . Reimplemented from ROOT::v5::TFormula.; Definition at line 5666 of file TTreeFormula.cxx. ◆ DeclFileName(). static const char * TTreeFormula::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 216 of file TTreeFormula.h. ◆ DefineAlternate(). Int_t TTreeFormula::DefineAlternate ; (; const char * ; expression). protected . This method check for treat the case where expression contains $Atl and load up both fAliases and fExpr. ; We return:; -1 in case of failure; 0 in case we did not find $Alt; the action number in case of success. . Definition at line 657 of file TTreeFormula.cxx. ◆ DefineDimensions(). void TTreeFormula::DefineDimensions ; (; Int_t ; code, . Int_t ; size, . TFormLeafInfoMultiVarDim * ; info, . Int_t & ; virt_dim . ). protected . This method is used internally to decode the dimensions of the variables. ; Definition at line 356 of file TTreeFormula.cxx. ◆ DefinedVariable(). Int_t TTreeFormula::DefinedVariable ; (; TString & ; name, . Int_t & ; action . ). overridevirtual . Check if name is in the list of Tree/Branch leaves. ; This member function redefines the function in ROOT::v5::TFormula If a leaf has a name corresponding to the argument name, then returns a new code.; A TTreeFormula may contain more than one variable. For each variable referenced, the pointers to the corresponding branch and leaf is stored in the object arrays fBranches and fLeaves.; name can be :; Leaf_Name (simple variable or data member of a ClonesArray); Branch_Name.Lea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeFormula.html:34799,failure,failure,34799,doc/master/classTTreeFormula.html,https://root.cern,https://root.cern/doc/master/classTTreeFormula.html,1,['failure'],['failure']
Availability,"eeReader~TTreeReader() overrideTell all value readers that the tree reader does not exist anymore.Definition TTreeReader.cxx:251; TTreeReader::fNotifyTNotifyLink< TTreeReader > fNotifyTTree and TChain will notify this object upon LoadTree, leading to a call to TTreeReader::Notify().Definition TTreeReader.h:323; TTreeReader::fProxiesSetbool fProxiesSetTrue if the proxies have been set, false otherwise.Definition TTreeReader.h:337; TTreeReader::IsChainbool IsChain() constDefinition TTreeReader.h:203; TTreeReader::AddProxyvoid AddProxy(std::unique_ptr< ROOT::Internal::TNamedBranchProxy > p)Definition TTreeReader.h:281; TTreeReader::EEntryStatusEEntryStatusDefinition TTreeReader.h:152; TTreeReader::kEntryNotFound@ kEntryNotFoundthe tree entry number does not existDefinition TTreeReader.h:156; TTreeReader::kIndexedFriendNoMatch@ kIndexedFriendNoMatchA friend with TTreeIndex doesn't have an entry for this index.Definition TTreeReader.h:162; TTreeReader::kEntryUnknownError@ kEntryUnknownErrorLoadTree return less than -6, likely a 'newer' error code.Definition TTreeReader.h:164; TTreeReader::kEntryDictionaryError@ kEntryDictionaryErrorproblem reading dictionary info from treeDefinition TTreeReader.h:159; TTreeReader::kEntryChainSetupError@ kEntryChainSetupErrorproblem in accessing a chain element, e.g. file without the treeDefinition TTreeReader.h:157; TTreeReader::kMissingBranchWhenSwitchingTree@ kMissingBranchWhenSwitchingTreeA branch was not found when switching to the next TTree in the chain.Definition TTreeReader.h:163; TTreeReader::kEntryNotLoaded@ kEntryNotLoadedno entry has been loaded yetDefinition TTreeReader.h:154; TTreeReader::kEntryBeyondEnd@ kEntryBeyondEndlast entry loop has reached its endDefinition TTreeReader.h:160; TTreeReader::kEntryChainFileError@ kEntryChainFileErrorproblem in opening a chain's fileDefinition TTreeReader.h:158; TTreeReader::kEntryNoTree@ kEntryNoTreethe tree does not existDefinition TTreeReader.h:155; TTreeReader::kEntryBadReader@ kEnt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeReader_8h_source.html:21307,error,error,21307,doc/master/TTreeReader_8h_source.html,https://root.cern,https://root.cern/doc/master/TTreeReader_8h_source.html,1,['error'],['error']
Availability,"eeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; Bool_tRooAbsTestStatistic::_verboseVerbose messaging if true; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; RooRealVar*_yvarY variable if so designated; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooXYChi2Var(); coverity[UNINIT_CTOR]. RooXYChi2Var(const char* name, const char* title, RooAbsReal& func, RooDataSet& data, Bool_t integrate = kFALSE). RooXYChi2Var constructor with function and X-Y values dataset. An X-Y dataset is a weighted dataset with one or more observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char* name, const char* title, RooAbsReal& func, RooDataSet& data, RooRealVar& yvar, Bool_t integrate = kFALSE). RooXYChi2Var constructor with function and X-Y values dataset. An X-Y dataset is a weighted dataset with one or more observables X where given yvar is interpreted; as the Y value. The Y variable must have a non-zero error defined at each point for the chi^2 calculati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooXYChi2Var.html:44593,error,error,44593,root/html602/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html602/RooXYChi2Var.html,8,['error'],['error']
Availability,"eed generators (starting values); the seed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; ;  CMinimumStateMinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder) ;  CMinosErrorClass holding the result of Minos (lower and upper values) for a specific parameter ;  CMinuit2MinimizerMinuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm ;  CMinuitParameterClass for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; ;  CMnApplicationApplication interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization ;  CMnContoursAPI class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors; ;  CMnCovarianceSqueezeClass to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index ;  ►CMnCross;  CCrossFcnLimit;  CCrossNewMin;  CCrossParLimit;  CMnEigenAPI class for calculating the eigenvalues of symmetric matrix ;  CMnFcnWrapper class to FCNBase interface used internally by Minuit ;  CMnFumiliMinimizeAPI class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnFunctionCrossMnFunctionCross ;  CMnGlobalCorrelationCoeffClass for global correlation coefficient ;  CMnHesseAPI class for calculating the numerical covariance matrix (== 2x Inverse Hessian == 2x Inverse 2nd derivative); can be used by the user or Minuit itself ;  CMnLineSearchImplements a 1-dimensional",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/annotated.html:54577,Error,Error,54577,root/html606/annotated.html,https://root.cern,https://root.cern/root/html606/annotated.html,1,['Error'],['Error']
Availability,"eeded to cross the next boundary with respect to the; position given by FindNextBoundary. If radius is not mentioned the full bounding; box will be sampled. void CheckBoundaryReference(Int_t icheck = -1); Check the boundary errors reference file created by CheckBoundaryErrors method.; The shape for which the crossing failed is drawn with the starting point in red; and the extrapolated point to boundary (+/- failing push/pull) in yellow. void CheckGeometryFull(Bool_t checkoverlaps = kTRUE, Bool_t checkcrossings = kTRUE, Int_t nrays = 10000, const Double_t* vertex = NULL); Geometry checking method (see: TGeoManager::CheckGeometry()). void CheckGeometry(Int_t nrays, Double_t startx, Double_t starty, Double_t startz) const; Geometry checking method (see TGeoChecker). void CheckOverlaps(const TGeoVolume* vol, Double_t ovlp = 0.1, Option_t* option = """") const; Check overlaps for the top volume of the geometry, within a limit OVLP. void CheckPoint(Double_t x = 0, Double_t y = 0, Double_t z = 0, Option_t* option = """"); check current point in the geometry. void CheckShape(TGeoShape* shape, Int_t testNo, Int_t nsamples, Option_t* option); Test for shape navigation methods. Summary for test numbers:; 1: DistFromInside/Outside. Sample points inside the shape. Generate; directions randomly in cos(theta). Compute DistFromInside and move the; point with bigger distance. Compute DistFromOutside back from new point.; Plot d-(d1+d2). void ClearVisibleVolumes(); Clear the list of visible volumes; reset the kVisOnScreen bit for volumes previously in the list. void DefineColors() const; Define 100 colors with increasing light intensities for each basic color (1-7); Register these colors at indexes starting with 1000. Int_t GetColor(Int_t base, Float_t light) const; Get index of a base color with given light intensity (0,1). TGeoVolume * GetDrawnVolume() const; Get currently drawn volume. Int_t DistanceToPrimitiveVol(TGeoVolume* vol, Int_t px, Int_t py); compute the closest distance of ap",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoPainter.html:14163,CheckPoint,CheckPoint,14163,root/html532/TGeoPainter.html,https://root.cern,https://root.cern/root/html532/TGeoPainter.html,2,['CheckPoint'],['CheckPoint']
Availability,"eeded. ;  ; void SetFilledBins (Long64_t nbins) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Sumw2 () override;  Enable calculation of errors. ;  ;  Public Member Functions inherited from THnBase;  ~THnBase () override;  Destruct a THnBase. ;  ; void Add (const TH1 *hist, Double_t c=1.);  Fill the THnBase with the bins of hist that have content or error != 0. ;  ; void Add (const THnBase *h, Double_t c=1.);  Add contents of h scaled by c to this histogram: this = this + c * h Note that if h has Sumw2 set, Sumw2 is automatically called for this if not already set. ;  ; void AddBinContent (const Int_t *x, Double_t v=1.);  ; void Browse (TBrowser *b) override;  Browse a THnSparse: create an entry (ROOT::THnSparseBrowsable) for each dimension. ;  ; void CalculateErrors (Bool_t calc=kTRUE);  Calculate errors (or not if ""calc"" == kFALSE) ;  ; Double_t ComputeIntegral ();  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; void Divide (const THnBase *h);  Divide this histogram by h this = this/(h) Note that if h has Sumw2 set, Sumw2 is automatically called for this if not already set. ;  ; void Divide (const THnBase *h1, const THnBase *h2, Double_t c1=1., Double_t c2=1., Option_t *option="""");  Replace contents of this histogram by multiplication of h1 by h2 this = (c1*h1)/(c2*h2) Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set. ;  ; Long64_t Fill (const char *name[], Double_t w=1.);  ; Long64_t Fill (const Double_t *x, Double_t w=1.);  ; template<typename... MoreTypes> ; Long64_t Fill (Double_t firstval, MoreTypes... morevals);  Fill with the provided variadic arguments. ;  ; TFitResultPtr Fit (TF1 *f1, Option_t *option="""", Option_t *goption="""");  Fit a THnSparse with function f. ;  ; TAxis * GetAxis (Int_t dim) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparse.html:8824,error,errors,8824,doc/master/classTHnSparse.html,https://root.cern,https://root.cern/doc/master/classTHnSparse.html,1,['error'],['errors']
Availability,"een canceled. Int_t Exit(void* ret = 0); Static method which terminates the execution of the calling thread. Int_t Sleep(ULong_t secs, ULong_t nanos = 0); Static method to sleep the calling thread. Int_t GetTime(ULong_t* absSec, ULong_t* absNanoSec); Static method to get the current time. Returns; the number of seconds. Int_t Lock(); Static method to lock the main thread mutex. Int_t TryLock(); Static method to try to lock the main thread mutex. Int_t UnLock(); Static method to unlock the main thread mutex. void * Function(void* ptr); Static method which is called by the system thread function and; which in turn calls the actual user function. void Ps(); Static method listing the existing threads. void ** Tsd(void* dflt, Int_t k); Static method returning a pointer to thread specific data container; of the calling thread. void Printf(const char *va_(fmt), ...); Static method providing a thread safe printf. Appends a newline. void ErrorHandler(int level, const char* location, const char* fmt, va_list ap) const; Thread specific error handler function.; It calls the user set error handler in the main thread. void DoError(Int_t level, const char* location, const char* fmt, va_list va) const; Interface to ErrorHandler. User has to specify the class name as; part of the location, just like for the global Info(), Warning() and; Error() functions. Int_t XARequest(const char* xact, Int_t nb, void** ar, Int_t* iret); Static method used to allow commands to be executed by the main thread. void XAction(); Static method called via the thread timer to execute in the main; thread certain commands. This to avoid sophisticated locking and; possible deadlocking. void SetComment(const char* txt = 0). TThread& operator=(const TThread& ). void Delete(Option_t* option = """"); { TObject::Delete(option); }. EPriority GetPriority() const; { return fPriority; }. EState GetState() const; { return fState; }. Long_t GetId() const; { return fId; }. void ps(); { Ps(); }. » Author: Fons Rademakers 02",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TThread.html:13020,error,error,13020,root/html528/TThread.html,https://root.cern,https://root.cern/root/html528/TThread.html,2,['error'],['error']
Availability,"eeston for Sig & Bkg separately""); sumData.plotOn(frame); model1.plotOn(frame, LineColor=""b"", VisualizeError=result1); # Plot data again to show it on top of error bands:; sumData.plotOn(frame); model1.plotOn(frame, LineColor=""b""); p_ph_sig1_set = {p_ph_sig1}; p_ph_bkg1_set = {p_ph_bkg1}; model1.plotOn(frame, Components=p_ph_sig1_set, LineColor=""kAzure""); model1.plotOn(frame, Components=p_ph_bkg1_set, LineColor=""r""); model1.paramOn(frame, Parameters={Asig1, Abkg1}); ; sigData.plotOn(frame, MarkerColor=""b""); frame.Draw(); ; pt.Clear(); pt_text2 = [; ""With gamma parameters, the"",; ""signal & background templates"",; ""can adapt to the data."",; ""Note how the blue signal"",; ""template changes its shape."",; ""This leads to higher errors"",; ""of the scale parameters A."",; ]; ; for text in pt_text2:; pt.AddText(text); ; pt.DrawClone(); ; can.cd(3); frame = x.frame(Title=""Barlow Beeston light for (Sig+Bkg)""); sumData.plotOn(frame); model2.plotOn(frame, LineColor=""b"", VisualizeError=result2); # Plot data again to show it on top of model0 error bands:; sumData.plotOn(frame); model2.plotOn(frame, LineColor=""b""); p_ph_sig2_set = {p_ph_sig2}; p_ph_bkg2_set = {p_ph_bkg2}; model2.plotOn(frame, Components=p_ph_sig2_set, LineColor=""kAzure""); model2.plotOn(frame, Components=p_ph_bkg2_set, LineColor=""r""); model2.paramOn(frame, Parameters={Asig2, Abkg2}); ; sigData.plotOn(frame, MarkerColor=""b""); frame.Draw(); ; pt.Clear(); pt_text3 = [; ""When signal and background"",; ""template share one gamma para-"",; ""meter per bin, they adapt less."",; ""The errors of the A parameters"",; ""also shrink slightly."",; ]; for text in pt_text3:; pt.AddText(text); pt.DrawClone(); ; ; print(""Asig [normal ] = {} +/- {}"".format(Asig0.getVal(), Asig0.getError())); print(""Asig [BB ] = {} +/- {}"".format(Asig1.getVal(), Asig1.getError())); print(""Asig [BBlight] = {} +/- {}"".format(Asig2.getVal(), Asig2.getError())); ; can.SaveAs(""rf709_BarlowBeeston.png""); formatOption_t Option_t TPoint TPoint const char GetTextMagnitude ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf709__BarlowBeeston_8py.html:6446,error,error,6446,doc/master/rf709__BarlowBeeston_8py.html,https://root.cern,https://root.cern/doc/master/rf709__BarlowBeeston_8py.html,1,['error'],['error']
Availability,"ef ATTMARKER2); 38 - [Marker line width](\ref ATTMARKER21); 39 - [Marker size](\ref M3); 40 ; 41\anchor ATTMARKER1; 42## Marker color; 43The marker color is a color index (integer) pointing in the ROOT color; 44table.; 45The marker color of any class inheriting from `TAttMarker` can; 46be changed using the method `SetMarkerColor` and retrieved using the; 47method `GetMarkerColor`.; 48The following table shows the first 50 default colors.; 49 ; 50Begin_Macro; 51{; 52 TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; 53 c->DrawColorTable();; 54 return c;; 55}; 56End_Macro; 57 ; 58### Color transparency; 59 ; 60`SetMarkerColorAlpha()`, allows to set a transparent color.; 61In the following example the marker color of the histogram `histo`; 62is set to blue with an opacity of 35% (i.e. a transparency of 65%).; 63(The color `kBlue` itself is internally stored as fully opaque.); 64 ; 65~~~ {.cpp}; 66histo->SetMarkerColorAlpha(kBlue, 0.35);; 67~~~; 68 ; 69The transparency is available on all platforms when the flag `OpenGL.CanvasPreferGL` is set to `1`; 70in `$ROOTSYS/etc/system.rootrc`, or on Mac with the Cocoa backend. On the file output; 71it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript.; 72 ; 73Alternatively, you can call at the top of your script `gSytle->SetCanvasPreferGL();`.; 74Or if you prefer to activate GL for a single canvas `c`, then use `c->SetSupportGL(true);`.; 75 ; 76\anchor ATTMARKER2; 77## Marker style; 78 ; 79The Marker style defines the markers' shape.; 80The marker style of any class inheriting from `TAttMarker` can; 81be changed using the method `SetMarkerStyle` and retrieved using the; 82method `GetMarkerStyle`.; 83 ; 84The following list gives the currently supported markers (screen; 85and PostScript) style. Each marker style is identified by an integer number; 86(first column) corresponding to a marker shape (second column) and can be also; 87accessed via a global name (third column).; 88 ; 89~~~ {.cpp}; 90 Mark",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAttMarker_8cxx_source.html:2237,avail,available,2237,doc/master/TAttMarker_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TAttMarker_8cxx_source.html,1,['avail'],['available']
Availability,"ef); Int_tBroadcastObject(const TObject* obj, Int_t kind = kMESS_OBJECT); Int_tBroadcastRaw(const void* buffer, Int_t length); Bool_tCheckFile(const char* file, Long_t modtime); Int_tCollect(Long_t timeout = -1); Int_tCollectInput(); voidRecvLogFile(Int_t size). Data Members; public:. enum ESendFileOpt { kAscii; kBinary; kForce; };; enum EStatusBits { kCollecting; };; enum TApplication::EStatusBits { kProcessRemotely; kDefaultApplication; };; enum TApplication::EExitOnException { kDontExit; kExit; kAbort; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TApplication*TApplication::fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications. private:. THashList*fFileListList of files already uploaded; TSignalHandler*fIntHandlerinterrupt signal handler (ctrl-c); Bool_tfInterruptflag interrupt state; TStringfLogFilePathFull remote path to log file; TMonitor*fMonitormonitor for the input socket; TStringfNameUnique name identifying this instance; Int_tfProtocolserver protocol version number; TObject*fReceivedObjectlast received object; TSeqCollection*fRootFileslist of (remote) root files; TSocket*fSocketsocket connection to server; TUrlfUrlserver's url; TRemoteObject*fWorkingDirworking (remote) directory; static Int_tfgPortAttemptsnumber of attempts to find a port; static Int_tfgPortLowerlower bound for ports; static Int_tfgPortUpperupper bound for ports. Class Charts. Inheritance; Inherited Members; Includes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TApplicationRemote.html:12752,avail,available,12752,root/html528/TApplicationRemote.html,https://root.cern,https://root.cern/root/html528/TApplicationRemote.html,6,['avail'],['available']
Availability,efCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAICRegistry_codeReg! Registry of analytical integration codes; RooObjCacheManager_coefNormMgrCoefficient normalization manager; RooArgSet*_convNormSet! Subset of last normalization that applies to convolutions; RooListProxy_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*_convSetIter! Iterator over _convNormSet; RooRealProxy_convVarConvolution variable; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; Bool_t_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooRealProxy_modelOriginal model; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsAnaConvPdf.html:42716,error,errors,42716,root/html534/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsAnaConvPdf.html,2,['error'],['errors']
Availability,"efCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. RooListProxy_coefList; RooRealProxy_x. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooBernstein(). RooBernstein(const char* name, const char* title, RooAbsReal& _x, const RooArgList& _coefList); Constructor. RooBernstein(const RooBernstein& other, const char* name = 0). Double_t evaluate() const. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; No analytical calculation available (yet) of integrals over subranges. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const. TObject* clone(const char* newname) const; { return new RooBernstein(*this, newname); }. virtual ~RooBernstein(); { }. » Last changed: Tue Jun 2 15:27:59 2015 » Last generated: 2015-06-02 15:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooBernstein.html:45562,avail,available,45562,root/html604/RooBernstein.html,https://root.cern,https://root.cern/root/html604/RooBernstein.html,2,['avail'],['available']
Availability,"efPath, const std::string &moduleName); 3948{; 3949 clang::CompilerInstance *CI = interpreter.getCI();; 3950 clang::HeaderSearch &headerSearch = CI->getPreprocessor().getHeaderSearchInfo();; 3951 headerSearch.loadTopLevelSystemModules();; 3952 ; 3953 // Actually lookup the module on the computed module name.; 3954 clang::Module *module = headerSearch.lookupModule(llvm::StringRef(moduleName));; 3955 ; 3956 // Inform the user and abort if we can't find a module with a given name.; 3957 if (!module) {; 3958 ROOT::TMetaUtils::Error(""CheckModuleValid"", ""Couldn't find module with name '%s' in modulemap!\n"",; 3959 moduleName.c_str());; 3960 return false;; 3961 }; 3962 ; 3963 // Check if the loaded module covers all headers that were specified; 3964 // by the user on the command line. This is an integrity check to; 3965 // ensure that our used module map is not containing extraneous headers.; 3966 std::vector<std::array<std::string, 2>> missingHdrMod;; 3967 if (!ModuleContainsHeaders(modGen, headerSearch, module, missingHdrMod)) {; 3968 // FIXME: Upgrade this to an error once modules are stable.; 3969 std::stringstream msgStream;; 3970 msgStream << ""after creating module \"""" << module->Name << ""\"" "";; 3971 if (!module->PresumedModuleMapFile.empty()); 3972 msgStream << ""using modulemap \"""" << module->PresumedModuleMapFile << ""\"" "";; 3973 msgStream << ""the following headers are not part of that module:\n"";; 3974 for (auto &H : missingHdrMod) {; 3975 msgStream << "" "" << H[0];; 3976 if (!H[1].empty()); 3977 msgStream << "" (already part of module \"""" << H[1] << ""\"")"";; 3978 msgStream << ""\n"";; 3979 }; 3980 std::string warningMessage = msgStream.str();; 3981 ; 3982 bool maybeUmbrella = modGen.GetHeaders().size() == 1;; 3983 // We may have an umbrella and forgot to add the flag. Downgrade the; 3984 // warning into an information message.; 3985 // FIXME: We should open the umbrella, extract the set of header files; 3986 // and check if they exist in the modulemap.; 3987 // FIXME: W",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:160654,error,error,160654,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,1,['error'],['error']
Availability,"efault . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . Definition at line 4105 of file RooAbsReal.cxx. ◆ chi2FitTo() [2/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataHist & ; data, . const RooLinkedList & ; cmdList . ). virtual . Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ; List of possible commands in the cmdList:. Type of CmdArg Effect on \( \chi^2 \) . DataError() Choose between:; RooAbsData::Expected: Expected Poisson error ( \( \sqrt{n_\text{expected}} \) from the PDF).; RooAbsData::SumW2: The observed error from the square root of the sum of weights, i.e., symmetric errors calculated with the standard deviation of a Poisson distribution.; RooAbsData::Poisson: Asymmetric errors from the central 68 % interval around a Poisson distribution with mean \( n_\text{observed} \). If for a given bin \( ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:70826,error,error,70826,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,1,['error'],['error']
Availability,"efault . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . Definition at line 4181 of file RooAbsReal.cxx. ◆ chi2FitTo() [2/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataHist & ; data, . const RooLinkedList & ; cmdList . ). virtual . Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ; List of possible commands in the cmdList:. Type of CmdArg Effect on \( \chi^2 \) . DataError() Choose between:; RooAbsData::Expected: Expected Poisson error ( \( \sqrt{n_\text{expected}} \) from the PDF).; RooAbsData::SumW2: The observed error from the square root of the sum of weights, i.e., symmetric errors calculated with the standard deviation of a Poisson distribution.; RooAbsData::Poisson: Asymmetric errors from the central 68 % interval around a Poisson distribution with mean \( n_\text{observed} \). If for a given bin \( ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:72094,error,error,72094,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['error'],['error']
Availability,"efault . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4236 of file RooAbsReal.cxx. ◆ chi2FitTo() [4/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataSet & ; xydata, . const RooLinkedList & ; cmdList . ). virtual . Perform a 2-D \( \chi^2 \) fit using a series of x and y values stored in the dataset xydata. ; The y values can either be the event weights, or can be another column designated by the YVar() argument. The y value must have errors defined for the \( \chi^2 \) to be well defined. Options to control construction of the chi-square . YVar(RooRealVar& yvar) Designate given column in dataset as Y value . Integrate(bool flag) Integrate function over range specified by X errors",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:75151,error,error,75151,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,1,['error'],['error']
Availability,"efault . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4254 of file RooAbsReal.cxx. ◆ Class(). static TClass * RooAbsReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsReal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 548 of file RooAbsReal.h. ◆ clearEvalErrorLog(). void RooAbsReal::clearEvalErrorLog ; (; ). static . Clear the stack of evaluation error messages. ; Definition at line 3542 of file RooAbsReal.cxx. ◆ copyCache(). void RooAbsReal::copyCache ; (; const RooAbsArg * ; source",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:77312,error,error,77312,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,1,['error'],['error']
Availability,"efault . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4312 of file RooAbsReal.cxx. ◆ chi2FitTo() [4/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataSet & ; xydata, . const RooLinkedList & ; cmdList . ). virtual . Perform a 2-D \( \chi^2 \) fit using a series of x and y values stored in the dataset xydata. ; The y values can either be the event weights, or can be another column designated by the YVar() argument. The y value must have errors defined for the \( \chi^2 \) to be well defined. Options to control construction of the chi-square . YVar(RooRealVar& yvar) Designate given column in dataset as Y value . Integrate(bool flag) Integrate function over range specified by X errors",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:76419,error,error,76419,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['error'],['error']
Availability,"efault . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4330 of file RooAbsReal.cxx. ◆ Class(). static TClass * RooAbsReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsReal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 558 of file RooAbsReal.h. ◆ clearEvalErrorLog(). void RooAbsReal::clearEvalErrorLog ; (; ). static . Clear the stack of evaluation error messages. ; Definition at line 3622 of file RooAbsReal.cxx. ◆ copyCache(). void RooAbsReal::copyCache ; (; const RooAbsArg * ; source",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:78580,error,error,78580,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['error'],['error']
Availability,"efault Constructor. ; Definition at line 313 of file TTreeCache.cxx. ◆ TTreeCache() [3/3]. TTreeCache::TTreeCache ; (; TTree * ; tree, . Int_t ; buffersize = 0 . ). Constructor. ; Definition at line 320 of file TTreeCache.cxx. ◆ ~TTreeCache(). TTreeCache::~TTreeCache ; (; ). override . Destructor. (in general called by the TFile destructor) ; Definition at line 332 of file TTreeCache.cxx. Member Function Documentation. ◆ AddBranch() [1/2]. Int_t TTreeCache::AddBranch ; (; const char * ; bname, . bool ; subbranches = false . ). overridevirtual . Add a branch to the list of branches to be stored in the cache this is to be used by user (thats why we pass the name of the branch). ; It works in exactly the same way as TTree::SetBranchStatus so you probably want to look over there for details about the use of bname with regular expressions. The branches are taken with respect to the Owner of this TTreeCache (i.e. the original Tree) NB: if bname=""*"" all branches are put in the cache and the learning phase stopped Returns:; 0 branch added or already included; -1 on error . Reimplemented from TFileCacheRead.; Reimplemented in TTreeCacheUnzip.; Definition at line 446 of file TTreeCache.cxx. ◆ AddBranch() [2/2]. Int_t TTreeCache::AddBranch ; (; TBranch * ; b, . bool ; subbranches = false . ). overridevirtual . Add a branch to the list of branches to be stored in the cache this function is called by the user via TTree::AddBranchToCache. ; The branch is added even if we are outside of the training phase. Returns:; 0 branch added or already included; -1 on error . Reimplemented from TFileCacheRead.; Reimplemented in TTreeCacheUnzip.; Definition at line 376 of file TTreeCache.cxx. ◆ CalculateMissCache(). bool TTreeCache::CalculateMissCache ; (; ). private . Calculate the appropriate miss cache to fetch; helper function for FillMissCache. . ◆ CalculateMissEntries(). TBranch * TTreeCache::CalculateMissEntries ; (; Long64_t ; pos, . int ; len, . bool ; all . ). private . Given an file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCache.html:35217,error,error,35217,doc/v632/classTTreeCache.html,https://root.cern,https://root.cern/doc/v632/classTTreeCache.html,2,['error'],['error']
Availability,"efault NULL,; missfiles int(11) default NULL,; PRIMARY KEY (id),; KEY ix_querytag (querytag) );. The information is posted with a bulk insert. Returns 0 on success, -1 on failure. Int_t SendFileInfo(TDSet* , TList* , const char* , const char* ); Post information about the requested files. The information is taken; from the TDSet object 'dset' and integrated with the missing files; information in the list 'missing'. The string 'qid' is the unique; ID of the query; 'begin' the starting time. The record is formatted for the table 'proofqueryfiles'. There are two versions of this record, with or without the starting time.; The starting time could be looked up from the summary record, if available. The default version 1 corresponds to the table created with the following command:. CREATE TABLE proofqueryfiles (; id int(11) NOT NULL auto_increment,; lfn varchar(255) NOT NULL,; path varchar(2048) NOT NULL,; querytag varchar(64) NOT NULL,; querybegin datetime default NULL,; status enum('Ok','Failed') NOT NULL default 'Ok',; PRIMARY KEY (id),; KEY ix_querytag (querytag) );. Version 0 corresponds to the table created with the following command:; (no 'querybegin'). CREATE TABLE proofqueryfiles (; id int(11) NOT NULL auto_increment,; lfn varchar(255) NOT NULL,; path varchar(2048) NOT NULL,; querytag varchar(64) NOT NULL,; status enum('Ok','Failed') NOT NULL default 'Ok',; PRIMARY KEY (id),; KEY ix_querytag (querytag) );. The information is posted with a bulk insert. Returns 0 on success, -1 on failure. TProofMonSenderSQL(const char* serv, const char* user, const char* pass, const char* table = ""proof.proofquerylog"", const char* dstab = 0, const char* filestab = 0). » Author: G.Ganis July 2011 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-06-30 15:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofMonSenderSQL.html:11887,failure,failure,11887,root/html602/TProofMonSenderSQL.html,https://root.cern,https://root.cern/root/html602/TProofMonSenderSQL.html,2,['failure'],['failure']
Availability,"efault NULL,; missfiles int(11) default NULL,; PRIMARY KEY (id),; KEY ix_querytag (querytag) );. The information is posted with a bulk insert. Returns 0 on success, -1 on failure. Int_t SendFileInfo(TDSet* , TList* , const char* , const char* ); Post information about the requested files. The information is taken; from the TDSet object 'dset' and integrated with the missing files; information in the list 'missing'. The string 'qid' is the unique; ID of the query; 'begin' the starting time. The record is formatted for the table 'proofqueryfiles'. There are two versions of this record, with or without the starting time.; The starting time could be looked up from the summary record, if available. The default version 1 corresponds to the table created with the following command:. CREATE TABLE proofqueryfiles (; id int(11) NOT NULL auto_increment,; lfn varchar(255) NOT NULL,; path varchar(2048) NOT NULL,; querytag varchar(64) NOT NULL,; querybegin datetime default NULL,; status enum('Ok','Failed') NOT NULL default 'Ok',; PRIMARY KEY (id),; KEY ix_querytag (querytag) );. Version 0 corresponds to the table created with the following command:; (no 'querybegin'). CREATE TABLE proofqueryfiles (; id int(11) NOT NULL auto_increment,; lfn varchar(255) NOT NULL,; path varchar(2048) NOT NULL,; querytag varchar(64) NOT NULL,; status enum('Ok','Failed') NOT NULL default 'Ok',; PRIMARY KEY (id),; KEY ix_querytag (querytag) );. The information is posted with a bulk insert. Returns 0 on success, -1 on failure. TProofMonSenderSQL(const char* serv, const char* user, const char* pass, const char* table = ""proof.proofquerylog"", const char* dstab = 0, const char* filestab = 0). » Author: G.Ganis July 2011 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-09-08 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProofMonSenderSQL.html:11887,failure,failure,11887,root/html604/TProofMonSenderSQL.html,https://root.cern,https://root.cern/root/html604/TProofMonSenderSQL.html,2,['failure'],['failure']
Availability,"efault color-set; static Bool_tTGLViewer::fgUseDefaultColorSetForNewViewers! name says it all. private:. Int_tfBorder; TGCompositeFrame*fFrame. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLEmbeddedViewer(const TGWindow* parent, TVirtualPad* pad = 0, Int_t border = 2); Constructor.; Argument 'border' specifies how many pixels to pad on each side of the; viewer. This area can be used for highlightning of the active viewer. TGLEmbeddedViewer(const TGWindow* parent, TVirtualPad* pad, TGedEditor* ged, Int_t border = 2); Constructor allowing to also specify an GED editor to use.; Argument 'border' specifies how many pixels to pad on each side of the; viewer. This area can be used for highlightning of the active viewer. ~TGLEmbeddedViewer(); Destroy standalone viewer object. void Init(const TGWindow* parent); Common initialization from all constructors. void CreateFrames(); Internal frames creation. void CreateGLWidget(); Create a GLwidget, it is an error if it is already created.; This is needed for frame-swapping on mac. void DestroyGLWidget(); Destroy the GLwidget, it is an error if it does not exist.; This is needed for frame-swapping on mac. TGLEmbeddedViewer(const TGLEmbeddedViewer& ). TGLEmbeddedViewer& operator=(const TGLEmbeddedViewer& ). const char * GetName() const; { return ""GLViewer""; }. TGCompositeFrame* GetFrame() const; { return fFrame; }. TGLOrthoCamera * GetOrthoXOYCamera(); { return &fOrthoXOYCamera; }. TGLOrthoCamera * GetOrthoXOZCamera(); { return &fOrthoXOZCamera; }. TGLOrthoCamera * GetOrthoZOYCamera(); { return &fOrthoZOYCamera; }. » Author: Bertrand Bellenot 23/01/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLEmbeddedViewer.h 31330 2009-11-19 17:34:19Z matevz $ » Last generated: 2010-11-16 10:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLEmbeddedViewer.html:25308,error,error,25308,root/html528/TGLEmbeddedViewer.html,https://root.cern,https://root.cern/root/html528/TGLEmbeddedViewer.html,1,['error'],['error']
Availability,"efault color-set; static Bool_tTGLViewer::fgUseDefaultColorSetForNewViewers! name says it all. private:. Int_tfBorder; TGCompositeFrame*fFrame. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLEmbeddedViewer(const TGWindow* parent, TVirtualPad* pad = 0, Int_t border = 2); Constructor.; Argument 'border' specifies how many pixels to pad on each side of the; viewer. This area can be used for highlightning of the active viewer. TGLEmbeddedViewer(const TGWindow* parent, TVirtualPad* pad, TGedEditor* ged, Int_t border = 2); Constructor allowing to also specify an GED editor to use.; Argument 'border' specifies how many pixels to pad on each side of the; viewer. This area can be used for highlightning of the active viewer. ~TGLEmbeddedViewer(); Destroy standalone viewer object. void Init(const TGWindow* parent); Common initialization from all constructors. void CreateFrames(); Internal frames creation. void CreateGLWidget(); Create a GLwidget, it is an error if it is already created.; This is needed for frame-swapping on mac. void DestroyGLWidget(); Destroy the GLwidget, it is an error if it does not exist.; This is needed for frame-swapping on mac. TGLEmbeddedViewer(const TGLEmbeddedViewer& ). TGLEmbeddedViewer& operator=(const TGLEmbeddedViewer& ). const char * GetName() const; { return ""GLViewer""; }. TGCompositeFrame* GetFrame() const; { return fFrame; }. TGLOrthoCamera * GetOrthoXOYCamera(); { return &fOrthoXOYCamera; }. TGLOrthoCamera * GetOrthoXOZCamera(); { return &fOrthoXOZCamera; }. TGLOrthoCamera * GetOrthoZOYCamera(); { return &fOrthoZOYCamera; }. » Author: Bertrand Bellenot 23/01/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLEmbeddedViewer.h 31330 2009-11-19 17:34:19Z matevz $ » Last generated: 2011-07-04 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLEmbeddedViewer.html:25368,error,error,25368,root/html530/TGLEmbeddedViewer.html,https://root.cern,https://root.cern/root/html530/TGLEmbeddedViewer.html,1,['error'],['error']
Availability,"efault color-set; static Bool_tTGLViewer::fgUseDefaultColorSetForNewViewers! name says it all. private:. Int_tfBorder; TGCompositeFrame*fFrame. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLEmbeddedViewer(const TGWindow* parent, TVirtualPad* pad = 0, Int_t border = 2); Constructor.; Argument 'border' specifies how many pixels to pad on each side of the; viewer. This area can be used for highlightning of the active viewer. TGLEmbeddedViewer(const TGWindow* parent, TVirtualPad* pad, TGedEditor* ged, Int_t border = 2); Constructor allowing to also specify an GED editor to use.; Argument 'border' specifies how many pixels to pad on each side of the; viewer. This area can be used for highlightning of the active viewer. ~TGLEmbeddedViewer(); Destroy standalone viewer object. void Init(const TGWindow* parent); Common initialization from all constructors. void CreateFrames(); Internal frames creation. void CreateGLWidget(); Create a GLwidget, it is an error if it is already created.; This is needed for frame-swapping on mac. void DestroyGLWidget(); Destroy the GLwidget, it is an error if it does not exist.; This is needed for frame-swapping on mac. TGLEmbeddedViewer(const TGLEmbeddedViewer& ). TGLEmbeddedViewer& operator=(const TGLEmbeddedViewer& ). const char * GetName() const; { return ""GLViewer""; }. TGCompositeFrame* GetFrame() const; { return fFrame; }. TGLOrthoCamera * GetOrthoXOYCamera(); { return &fOrthoXOYCamera; }. TGLOrthoCamera * GetOrthoXOZCamera(); { return &fOrthoXOZCamera; }. TGLOrthoCamera * GetOrthoZOYCamera(); { return &fOrthoZOYCamera; }. » Author: Bertrand Bellenot 23/01/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLEmbeddedViewer.h 31330 2009-11-19 17:34:19Z matevz $ » Last generated: 2011-11-03 20:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLEmbeddedViewer.html:25368,error,error,25368,root/html532/TGLEmbeddedViewer.html,https://root.cern,https://root.cern/root/html532/TGLEmbeddedViewer.html,2,['error'],['error']
Availability,"efault. Let system think we could allocate color.; Parameters. [in]cmapthe colormap ; [in]colorspecifies and returns the values actually used in the cmap . Reimplemented from TVirtualX. ◆ Bell(). void TGWin32VirtualXProxy::Bell ; (; Int_t ; percent). overridevirtual . Sets the sound bell. Percent is loudness from -100% to 100%. ; Reimplemented from TVirtualX. ◆ ChangeActivePointerGrab(). void TGWin32VirtualXProxy::ChangeActivePointerGrab ; (; Window_t ; , . UInt_t ; , . Cursor_t ;  . ). overridevirtual . Changes the specified dynamic parameters if the pointer is actively grabbed by the client and if the specified time is no earlier than the last-pointer-grab time and no later than the current X server time. ; Reimplemented from TVirtualX. ◆ ChangeGC(). void TGWin32VirtualXProxy::ChangeGC ; (; GContext_t ; gc, . GCValues_t * ; gval . ). overridevirtual . Changes the components specified by the mask in gval for the specified GC. ; Parameters. [in]gcspecifies the GC to be changed ; [in]gvalspecifies the mask and the values to be set. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ ChangeProperties(). void TGWin32VirtualXProxy::ChangeProperties ; (; Window_t ; id, . Atom_t ; property, . Atom_t ; type, . Int_t ; format, . UChar_t * ; data, . Int_t ; len . ). overridevirtual . Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ; Reimplemented from TVirtualX. ◆ ChangeProperty(). void TGWin32VirtualXProxy::ChangeProperty ; (; Window_t ; id, . Atom_t ; property, . Atom_t ; type, . UChar_t * ; data, . Int_t ; len . ). overridevirtual . Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ; Parameters. [in]idthe window whose property you want to change ; [in]propertyspecifies the property name ; [in]typethe type of the property; the X server does not interpret the type but simply passes it back to an application that migh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32VirtualXProxy.html:54150,mask,mask,54150,doc/master/classTGWin32VirtualXProxy.html,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html,1,['mask'],['mask']
Availability,"efault. Optionally the user can select a different way of dynamically allocating memory in the class StackAllacator for M , in which case (and after an entire recompilation of the whole library) the thread safety is lost.; 3.7 Floating-point precision; [install:epsmac]; M is entirely based on double precision. The actual floating point precision of double precision (32–bit or 64–bit) is platform dependent and can even vary on the same platform, depending on whether a floating point number is read from memory a CPU register.; The argument of the user’s implementation of FCNBase::operator() is therefore a std:vector\(<\)double\(>\). M expects that the calculations inside \(\mbox{FCN}\) will be performed approximately to the same accuracy.; The accuracy M expects is called machine precision (MnMachinePrecision, see [api:epsmac]) and can be printed on demand using std::cout. If the user fools M by making internal \(\mbox{FCN}\) computations in single precision, M will interpret roundoff noise as significant and will usually either fail to find a minimum, or give incorrect values for the parameter errors.; It is therefore recommended to make sure that all computations in \(\mbox{FCN}\), as well as all methods and functions called by \(\mbox{FCN}\), are done in double precision. If for some reason the computations cannot be done to a precision comparable with that expected by M , the user must inform M of this situation with setting a different machine precision via the MnMachinePrecision::setPrecision(double) method.; With reduced precision, the user may find that certain features sensitive to first and second differences (\(\mbox{HESSE}\), \(\mbox{MINOS}\), \(\mbox{CONTOURS}\)) do not work properly, in which case the calculations must be performed in higher precision.; 4 How to use M; [howto:howto]; 4.1 The \(\mbox{FCN}\) Function; [howto:fcn]; The user must always implement a derived class of FCNBase (the “\(\mbox{FCN}\)”) which calculates the function value to be mini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html:28661,error,errors,28661,root/htmldoc/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html,2,['error'],['errors']
Availability,"efault; kSortBasketsByBranch; kSortBasketsByOffset; kSortBasketsByEntry; };; enum EClonerOptions { kNone; kNoWarnings; kIgnoreMissingTopLevel; };. private:. UInt_t*fBasketBranchNum[fMaxBaskets] Index of the branch(es) of the basket.; Long64_t*fBasketEntry[fMaxBaskets] list of basket start entries.; UInt_t*fBasketIndex[fMaxBaskets] ordered list of basket indices to be written.; UInt_t*fBasketNum[fMaxBaskets] index of the basket within the branch.; Long64_t*fBasketSeek[fMaxBaskets] list of basket position to be read.; UInt_tfCloneMethodIndicates which cloning method was selected.; TObjArrayfFromBranches; TTree*fFromTree; Bool_tfIsValid; UInt_tfMaxBaskets; Option_t*fMethod; Bool_tfNeedConversionTrue if the fast merge is not possible but a slow merge might possible.; UInt_tfOptions; UShort_tfPidOffsetOffset to be added to the copied key/basket.; TObjArrayfToBranches; Long64_tfToStartEntriesNumber of entries in the target tree before any addition.; TTree*fToTree; TStringfWarningMsgText of the error message lead to an 'invalid' state. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void ImportClusterRanges(). TTreeCloner(TTree* from, TTree* to, Option_t* method, UInt_t options = kNone). virtual ~TTreeCloner(). void CloseOutWriteBaskets(). UInt_t CollectBranches(TBranch* from, TBranch* to). UInt_t CollectBranches(TObjArray* from, TObjArray* to). UInt_t CollectBranches(). void CollectBaskets(). void CopyMemoryBaskets(). void CopyStreamerInfos(). void CopyProcessIds(). const char * GetWarning() const; { return fWarningMsg; }. Bool_t Exec(). Bool_t IsValid(); { return fIsValid; }. Bool_t NeedConversion(); { return fNeedConversion; }. void SortBaskets(). void WriteBaskets(). » Author: Philippe Canal 07/11/2005 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TTreeCloner.h 39059 2011-04-30 20:28:06Z pcanal $ » Last generated: 2011-07-04 15:38; This page has been automatically generated. For co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTreeCloner.html:2101,error,error,2101,root/html530/TTreeCloner.html,https://root.cern,https://root.cern/root/html530/TTreeCloner.html,1,['error'],['error']
Availability,"efault; kSortBasketsByBranch; kSortBasketsByOffset; kSortBasketsByEntry; };; enum EClonerOptions { kNone; kNoWarnings; kIgnoreMissingTopLevel; };. private:. UInt_t*fBasketBranchNum[fMaxBaskets] Index of the branch(es) of the basket.; Long64_t*fBasketEntry[fMaxBaskets] list of basket start entries.; UInt_t*fBasketIndex[fMaxBaskets] ordered list of basket indices to be written.; UInt_t*fBasketNum[fMaxBaskets] index of the basket within the branch.; Long64_t*fBasketSeek[fMaxBaskets] list of basket position to be read.; UInt_tfCloneMethodIndicates which cloning method was selected.; TObjArrayfFromBranches; TTree*fFromTree; Bool_tfIsValid; UInt_tfMaxBaskets; Option_t*fMethod; Bool_tfNeedConversionTrue if the fast merge is not possible but a slow merge might possible.; UInt_tfOptions; UShort_tfPidOffsetOffset to be added to the copied key/basket.; TObjArrayfToBranches; Long64_tfToStartEntriesNumber of entries in the target tree before any addition.; TTree*fToTree; TStringfWarningMsgText of the error message lead to an 'invalid' state. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void ImportClusterRanges(). TTreeCloner(TTree* from, TTree* to, Option_t* method, UInt_t options = kNone). virtual ~TTreeCloner(). void CloseOutWriteBaskets(). UInt_t CollectBranches(TBranch* from, TBranch* to). UInt_t CollectBranches(TObjArray* from, TObjArray* to). UInt_t CollectBranches(). void CollectBaskets(). void CopyMemoryBaskets(). void CopyStreamerInfos(). void CopyProcessIds(). const char * GetWarning() const; { return fWarningMsg; }. Bool_t Exec(). Bool_t IsValid(); { return fIsValid; }. Bool_t NeedConversion(); { return fNeedConversion; }. void SortBaskets(). void WriteBaskets(). » Author: Philippe Canal 07/11/2005 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TTreeCloner.h 39059 2011-04-30 20:28:06Z pcanal $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTreeCloner.html:2101,error,error,2101,root/html532/TTreeCloner.html,https://root.cern,https://root.cern/root/html532/TTreeCloner.html,2,['error'],['error']
Availability,"efault; kSortBasketsByBranch; kSortBasketsByOffset; kSortBasketsByEntry; };; enum EClonerOptions { kNone; kNoWarnings; kIgnoreMissingTopLevel; };. private:. UInt_t*fBasketBranchNum[fMaxBaskets] Index of the branch(es) of the basket.; Long64_t*fBasketEntry[fMaxBaskets] list of basket start entries.; UInt_t*fBasketIndex[fMaxBaskets] ordered list of basket indices to be written.; UInt_t*fBasketNum[fMaxBaskets] index of the basket within the branch.; Long64_t*fBasketSeek[fMaxBaskets] list of basket position to be read.; UInt_tfCloneMethodIndicates which cloning method was selected.; TObjArrayfFromBranches; TTree*fFromTree; Bool_tfIsValid; UInt_tfMaxBaskets; Option_t*fMethod; Bool_tfNeedConversionTrue if the fast merge is not possible but a slow merge might possible.; UInt_tfOptions; UShort_tfPidOffsetOffset to be added to the copied key/basket.; TObjArrayfToBranches; Long64_tfToStartEntriesNumber of entries in the target tree before any addition.; TTree*fToTree; TStringfWarningMsgText of the error message lead to an 'invalid' state. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void ImportClusterRanges(). TTreeCloner(const TTreeCloner& ). TTreeCloner & operator=(const TTreeCloner& ). TTreeCloner(TTree* from, TTree* to, Option_t* method, UInt_t options = kNone). virtual ~TTreeCloner(). void CloseOutWriteBaskets(). UInt_t CollectBranches(TBranch* from, TBranch* to). UInt_t CollectBranches(TObjArray* from, TObjArray* to). UInt_t CollectBranches(). void CollectBaskets(). void CopyMemoryBaskets(). void CopyStreamerInfos(). void CopyProcessIds(). const char * GetWarning() const; { return fWarningMsg; }. Bool_t Exec(). Bool_t IsValid(); { return fIsValid; }. Bool_t NeedConversion(); { return fNeedConversion; }. void SortBaskets(). void WriteBaskets(). » Author: Philippe Canal 07/11/2005 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-09-08 17:05; This page has been a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeCloner.html:2196,error,error,2196,root/html534/TTreeCloner.html,https://root.cern,https://root.cern/root/html534/TTreeCloner.html,2,['error'],['error']
Availability,"efault=1); static TVirtualFitter*TVirtualFitter::fgFitterCurrent fitter (default TFitter); static Int_tTVirtualFitter::fgMaxiterMaximum number of iterations; static Int_tTVirtualFitter::fgMaxparMaximum number of fit parameters for current fitter; static Double_tTVirtualFitter::fgPrecisionmaximum precision. private:. TVectorDfAtbvector Atb; TVectorDfAtbTemp! temporary vector, used for num.stability; TVectorDfAtbTemp2!; TVectorDfAtbTemp3!; Double_tfChisquareChisquare of the fit; TMatrixDSymfDesignmatrix AtA; TMatrixDSymfDesignTemp! temporary matrix, used for num.stability; TMatrixDSymfDesignTemp2!; TMatrixDSymfDesignTemp3!; TVectorDfEthe errors if they are known; TBitsfFitsampleindices of points, used in the robust fit; Bool_t*fFixedParams[fNfixed] array of fixed/released params; char*fFormulathe formula; Int_tfFormulaSizelength of the formula; TObjArrayfFunctionsarray of basis functions; Int_tfHnumber of good points in robust fit; TFormula*fInputFunctionthe function being fit; Bool_tfIsSetHas the formula been set?; Int_tfNdimnumber of dimensions in the formula; Int_tfNfixednumber of fixed parameters; Int_tfNfunctionsnumber of basis functions; Int_tfNpointsnumber of points; TMatrixDSymfParCovarmatrix of parameters' covariances; TVectorDfParSignsignificance levels of parameters; TVectorDfParamsvector of parameters; Bool_tfRobusttrue when performing a robust fit; Int_tfSpecial=100+n if fitting a polynomial of deg.n; Bool_tfStoreDataIs the data stored?; TVectorDfTValuesT-Values of parameters; Double_tfVal[1000]! temporary; TMatrixDfXvalues of x; TVectorDfYthe values being fit; Double_tfY2sum of square of y, used for chisquare; Double_tfY2Temp! temporary variable used for num.stability. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLinearFitter(); default c-tor, input data is stored; If you don't want to store the input data,; run the function StoreData(kFALSE) after constructor. TLinearFitter(Int_t ndim); The parameter stands",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLinearFitter.html:18566,error,errors,18566,root/html528/TLinearFitter.html,https://root.cern,https://root.cern/root/html528/TLinearFitter.html,32,"['error', 'robust']","['errors', 'robust']"
Availability,"efault=1); static TVirtualFitter*TVirtualFitter::fgFitterCurrent fitter (default TFitter); static Int_tTVirtualFitter::fgMaxiterMaximum number of iterations; static Int_tTVirtualFitter::fgMaxparMaximum number of fit parameters for current fitter; static Double_tTVirtualFitter::fgPrecisionmaximum precision. private:. TVectorDfAtbvector Atb; TVectorDfAtbTemp! temporary vector, used for num.stability; TVectorDfAtbTemp2!; TVectorDfAtbTemp3!; Double_tfChisquareChisquare of the fit; TMatrixDSymfDesignmatrix AtA; TMatrixDSymfDesignTemp! temporary matrix, used for num.stability; TMatrixDSymfDesignTemp2!; TMatrixDSymfDesignTemp3!; TVectorDfEthe errors if they are known; TBitsfFitsampleindices of points, used in the robust fit; Bool_t*fFixedParams[fNfixed] array of fixed/released params; char*fFormulathe formula; Int_tfFormulaSizelength of the formula; TObjArrayfFunctionsarray of basis functions; Int_tfHnumber of good points in robust fit; TFormula*fInputFunctionthe function being fit; Bool_tfIsSetHas the formula been set?; Int_tfNdimnumber of dimensions in the formula; Int_tfNfixednumber of fixed parameters; Int_tfNfunctionsnumber of basis functions; Int_tfNpointsnumber of points; TMatrixDSymfParCovarmatrix of parameters' covariances; TVectorDfParSignsignificance levels of parameters; TVectorDfParamsvector of parameters; Bool_tfRobusttrue when performing a robust fit; Int_tfSpecial=100+n if fitting a polynomial of deg.n; Bool_tfStoreDataIs the data stored?; TVectorDfTValuesT-Values of parameters; Double_tfVal[1000]! temporary; TMatrixDfXvalues of x; TVectorDfYthe values being fit; Double_tfY2sum of square of y, used for chisquare; Double_tfY2Temp! temporary variable used for num.stability; static map<TString,TFormula*>fgFormulaMap! map of basis functions and formula. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLinearFitter(); default c-tor, input data is stored; If you don't want to store the input data,; run the function Store",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TLinearFitter.html:19203,error,errors,19203,root/html604/TLinearFitter.html,https://root.cern,https://root.cern/root/html604/TLinearFitter.html,8,"['error', 'robust']","['errors', 'robust']"
Availability,"efaultAbsTolerance(double tol); static voidSetDefaultIntegrator(const char* name); static voidSetDefaultNPoints(unsigned int n); static voidSetDefaultRelTolerance(double tol); static voidSetDefaultWKSize(unsigned int size); voidROOT::Math::BaseIntegratorOptions::SetExtraOptions(const ROOT::Math::IOptions& opt); voidSetIntegrator(const char* name); voidSetNPoints(unsigned int n); voidROOT::Math::BaseIntegratorOptions::SetRelTolerance(double tol); voidROOT::Math::BaseIntegratorOptions::SetWKSize(unsigned int size); unsigned intROOT::Math::BaseIntegratorOptions::WKSize() const. protected:. ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(); voidROOT::Math::BaseIntegratorOptions::ClearExtra(). Data Members; protected:. doubleROOT::Math::BaseIntegratorOptions::fAbsToleranceabsolute tolerance; ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::fExtraOptionsextra options; intROOT::Math::BaseIntegratorOptions::fIntegTypeIntegrator type (value converted from enum); unsigned intROOT::Math::BaseIntegratorOptions::fNCalls(max) funxtion calls; doubleROOT::Math::BaseIntegratorOptions::fRelTolerancerelative tolerance; unsigned intROOT::Math::BaseIntegratorOptions::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual po",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:2773,toler,tolerance,2773,root/html602/ROOT__Math__IntegratorOneDimOptions.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html,8,['toler'],['tolerance']
Availability,"eference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Attributes |; List of all members ; TFoamMaxwt Class Reference. ; Small auxiliary class for controlling MC weight. ; It provides certain measure of the ""maximum weight"" depending on small user-parameter ""epsilon"". It creates and uses 2 histograms of the TH1D class. User defines no. of bins nBin, nBin=1000 is recommended wmax defines weight range (1,wmax), it is adjusted ""manually"" ; Definition at line 12 of file TFoamMaxwt.h. Public Member Functions;  TFoamMaxwt ();  Constructor for streamer. ;  ;  TFoamMaxwt (Double_t, Int_t);  Principal user constructor. ;  ;  TFoamMaxwt (TFoamMaxwt &From);  Explicit COPY CONSTRUCTOR (unused, so far) ;  ;  ~TFoamMaxwt () override;  Destructor. ;  ; void Fill (Double_t);  Filling analyzed weight. ;  ; void GetMCeff (Double_t, Double_t &, Double_t &);  Calculates Efficiency= aveWt/wtLim for a given tolerance level epsilon<<1 using information stored in two histograms. ;  ; TClass * IsA () const override;  ; void Make (Double_t, Double_t &);  Calculates Efficiency= aveWt/wtLim for a given tolerance level epsilon<<1 To be called at the end of the MC run. ;  ; TFoamMaxwt & operator= (const TFoamMaxwt &);  substitution = ;  ; void Reset ();  Resetting weight analysis. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrows",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFoamMaxwt.html:1074,toler,tolerance,1074,doc/master/classTFoamMaxwt.html,https://root.cern,https://root.cern/doc/master/classTFoamMaxwt.html,1,['toler'],['tolerance']
Availability,"eferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooRealVar**fAxesarray of pointers to RooRealVars representing; RooStats::MarkovChain*fChainthe markov chain; Double_tfConfidenceLevelRequested confidence level (eg. 0.95 for 95% CL); RooRealVar*fCutoffVarcutoff variable to use for integrating keys pdf; RooDataHist*fDataHistthe binned Markov Chain data; Int_tfDimensionnumber of variables; Double_tfEpsilonacceptable error for Keys interval determination; Double_tfFullValue of intergral of fProduct; RooStats::Heavyside*fHeavysidethe Heavyside function; TH1*fHistthe binned Markov Chain data; Double_tfHistConfLevelthe actual conf level determined by hist; Double_tfHistCutoffcutoff bin size to be in interval; Double_tfIntervalSumsum of heights of bins in the interval; Bool_tfIsHistStrictwhether the specified confidence level is a floor; Double_tfKeysConfLevelthe actual conf level determined by keys; Double_tfKeysCutoffcutoff keys pdf value to be in interval; RooDataHist*fKeysDataHistdata hist representing product; RooNDKeysPdf*fKeysPdfthe kernel estimation pdf; TStringTNamed::fNameobject identifier; Int_tfNumBurnInStepsnumber of steps to discard as burn in, starting from the first; RooArgSetfParametersparameters of interest for this interval; RooProduct*fProductthe (keysPdf * heavyside) product; THnSparse*fSparseHistthe binned Markov Chain data; TStringTNamed::fTitleobject title; Bool_tfUseKeyswhether to use kernel estimation; Bool_tfUseSparseHistwhether to use sparse hist (vs. RooDataHist). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MCMCInterval(const char* name). MCMCInterval(const char* name, const RooArgSet& parameters, RooStats::MarkovChain& chain). ~MCMCInterval(); destructor. Bool_t IsInInterval(const RooArgSet& point) const. void SetConfidenceLevel(Double_t cl). void SetAxes(R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__MCMCInterval.html:10496,error,error,10496,root/html526/RooStats__MCMCInterval.html,https://root.cern,https://root.cern/root/html526/RooStats__MCMCInterval.html,1,['error'],['error']
Availability,"efined(NO_SSL); 20004 if (!init_ssl_ctx(ctx, NULL)) {; 20005 const char *err_msg = ""Error initializing SSL context"";; 20006 /* Fatal error - abort start. */; 20007 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20008 ; 20009 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20010 mg_snprintf(NULL,; 20011 NULL, /* No truncation check for error buffers */; 20012 error->text,; 20013 error->text_buffer_size,; 20014 ""%s"",; 20015 err_msg);; 20016 }; 20017 free_context(ctx);; 20018 pthread_setspecific(sTlsKey, NULL);; 20019 return NULL;; 20020 }; 20021#endif; 20022 ; 20023 if (!set_ports_option(ctx)) {; 20024 const char *err_msg = ""Failed to setup server ports"";; 20025 /* Fatal error - abort start. */; 20026 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20027 ; 20028 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20029 mg_snprintf(NULL,; 20030 NULL, /* No truncation check for error buffers */; 20031 error->text,; 20032 error->text_buffer_size,; 20033 ""%s"",; 20034 err_msg);; 20035 }; 20036 free_context(ctx);; 20037 pthread_setspecific(sTlsKey, NULL);; 20038 return NULL;; 20039 }; 20040 ; 20041 ; 20042#if !defined(_WIN32) && !defined(__ZEPHYR__); 20043 if (!set_uid_option(ctx)) {; 20044 const char *err_msg = ""Failed to run as configured user"";; 20045 /* Fatal error - abort start. */; 20046 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20047 ; 20048 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20049 mg_snprintf(NULL,; 20050 NULL, /* No truncation check for error buffers */; 20051 error->text,; 20052 error->text_buffer_size,; 20053 ""%s"",; 20054 err_msg);; 20055 }; 20056 free_context(ctx);; 20057 pthread_setspecific(sTlsKey, NULL);; 20058 return NULL;; 20059 }; 20060#endif; 20061 ; 20062 if (!set_acl_option(ctx)) {; 20063 const char *err_msg = ""Failed to setup access control list"";; 20064 /* Fatal error - abort start. */; 20065 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20066 ; 20067 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20068 mg_snprintf(NULL,;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:598482,error,error,598482,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,6,['error'],['error']
Availability,"efined(NO_SSL); 20005 if (!init_ssl_ctx(ctx, NULL)) {; 20006 const char *err_msg = ""Error initializing SSL context"";; 20007 /* Fatal error - abort start. */; 20008 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20009 ; 20010 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20011 mg_snprintf(NULL,; 20012 NULL, /* No truncation check for error buffers */; 20013 error->text,; 20014 error->text_buffer_size,; 20015 ""%s"",; 20016 err_msg);; 20017 }; 20018 free_context(ctx);; 20019 pthread_setspecific(sTlsKey, NULL);; 20020 return NULL;; 20021 }; 20022#endif; 20023 ; 20024 if (!set_ports_option(ctx)) {; 20025 const char *err_msg = ""Failed to setup server ports"";; 20026 /* Fatal error - abort start. */; 20027 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20028 ; 20029 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20030 mg_snprintf(NULL,; 20031 NULL, /* No truncation check for error buffers */; 20032 error->text,; 20033 error->text_buffer_size,; 20034 ""%s"",; 20035 err_msg);; 20036 }; 20037 free_context(ctx);; 20038 pthread_setspecific(sTlsKey, NULL);; 20039 return NULL;; 20040 }; 20041 ; 20042 ; 20043#if !defined(_WIN32) && !defined(__ZEPHYR__); 20044 if (!set_uid_option(ctx)) {; 20045 const char *err_msg = ""Failed to run as configured user"";; 20046 /* Fatal error - abort start. */; 20047 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20048 ; 20049 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20050 mg_snprintf(NULL,; 20051 NULL, /* No truncation check for error buffers */; 20052 error->text,; 20053 error->text_buffer_size,; 20054 ""%s"",; 20055 err_msg);; 20056 }; 20057 free_context(ctx);; 20058 pthread_setspecific(sTlsKey, NULL);; 20059 return NULL;; 20060 }; 20061#endif; 20062 ; 20063 if (!set_acl_option(ctx)) {; 20064 const char *err_msg = ""Failed to setup access control list"";; 20065 /* Fatal error - abort start. */; 20066 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20067 ; 20068 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20069 mg_snprintf(NULL,;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:598515,error,error,598515,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,6,['error'],['error']
Availability,"efinition FitResult.h:352; ROOT::Fit::FitResult::fFitFuncstd::shared_ptr< IModelFunction > fFitFunc! model function resulting from the fit.Definition FitResult.h:355; ROOT::Fit::FitResult::fFixedParamsstd::map< unsigned int, bool > fFixedParamslist of fixed parametersDefinition FitResult.h:357; ROOT::Fit::FitResult::fMinimTypestd::string fMinimTypestring indicating type of minimizerDefinition FitResult.h:365; ROOT::Fit::FitResult::Correlationdouble Correlation(unsigned int i, unsigned int j) constretrieve correlation elementsDefinition FitResult.h:225; ROOT::Fit::FitResult::Indexint Index(const std::string &name) constget index for parameter name (return -1 if not found)Definition FitResult.cxx:351; ROOT::Fit::FitResult::Probdouble Prob() constp value of the fit (chi2 probability)Definition FitResult.cxx:320; ROOT::Fit::FitResult::ParNamestd::string ParName(unsigned int i) constname of the parameterDefinition FitResult.cxx:382; ROOT::Fit::FitResult::NormalizeErrorsvoid NormalizeErrors()normalize errors using chi2/ndf for chi2 fitsDefinition FitResult.cxx:298; ROOT::Fit::FitResult::fNormalizedbool fNormalizedflag for indicating is errors are normalizedDefinition FitResult.h:344; ROOT::Fit::FitResult::IsParameterBoundbool IsParameterBound(unsigned int ipar) constquery if a parameter is boundDefinition FitResult.cxx:361; ROOT::Fit::FitResult::fParNamesstd::vector< std::string > fParNamesparameter names (only with FCN only fits, when fFitFunc=0)Definition FitResult.h:366; ROOT::Fit::FitResult::fMinosErrorsstd::map< unsigned int, std::pair< double, double > > fMinosErrorsmap contains the two Minos errorsDefinition FitResult.h:364; ROOT::Fit::FitResult::SetChi2AndNdfvoid SetChi2AndNdf(double chi2, unsigned int npoints)Set the chi2 and the ndf This function should be called when using an external FCN for fitting and on...Definition FitResult.cxx:311; ROOT::Fit::ParameterSettingsClass, describing value, limits and step size of the parameters Provides functionality also to s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/FitResult_8cxx_source.html:34826,error,errors,34826,doc/master/FitResult_8cxx_source.html,https://root.cern,https://root.cern/doc/master/FitResult_8cxx_source.html,1,['error'],['errors']
Availability,"efinition JSONIO.h:26; rf204a_extendedLikelihoodDefinition rf204a_extendedLikelihood.py:1; xmlio::Titleconst char * TitleDefinition TXMLSetup.cxx:68; RangeTa Range(0, 0, 1, 1); ; [#0] WARNING:InputArguments -- The parameter 'sigma1' with range [-inf, inf] of the RooGaussian 'sig1' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigma2' with range [-inf, inf] of the RooGaussian 'sig2' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'signalRange' created with bounds [4,6]; [#1] INFO:Minimization -- p.d.f. provides expected number of events, including extended term in likelihood.; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; ; RooFitResult: minimized FCN value: -3872.49, estimated distance to minimum: 4.30406e-05; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 HESSE=0 ; ; Floating Parameter FinalValue +/- Error ; -------------------- --------------------------; a0 4.2647e-01 +/- 7.59e-02; a1 1.7594e-01 +/- 1.10e-01; nbkg 5.1101e+02 +/- 3.60e+01; nsig 4.8899e+02 +/- 3.57e+01; sig1frac 8.6392e-01 +/- 1.08e-01; ; [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'left' created with bounds [0,4]; [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'right' created with bounds [6,10]; [#1] INFO:Minimization -- p.d.f. provides expected number of events, including extended term in likelihood.; [#1] INFO:Eval -- RooRealVar::setRange(x",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf204a__extendedLikelihood_8C.html:7415,error,error,7415,doc/master/rf204a__extendedLikelihood_8C.html,https://root.cern,https://root.cern/doc/master/rf204a__extendedLikelihood_8C.html,1,['error'],['error']
Availability,"efinition RooMCStudy.cxx:962; RooMCStudy::fitParDataSetconst RooDataSet & fitParDataSet()Return a RooDataSet containing the post-fit parameters of each toy cycle.Definition RooMCStudy.cxx:793; RooMCStudy::generateAndFitbool generateAndFit(Int_t nSamples, Int_t nEvtPerSample=0, bool keepGenData=false, const char *asciiFilePat=nullptr)Generate and fit 'nSamples' samples of 'nEvtPerSample' events.Definition RooMCStudy.cxx:503; RooMCStudy::plotParamRooPlot * plotParam(const RooRealVar &param, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={})Plot the distribution of the fitted value of the given parameter on a newly created frame.Definition RooMCStudy.cxx:928; RooMCStudy::plotErrorRooPlot * plotError(const RooRealVar &param, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={})Plot the distribution of the fit errors for the specified parameter on a newly created frame.Definition RooMCStudy.cxx:986; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::GetYaxisTAxis * GetYaxis() constDefinition RooPlot.cxx:1264; RooPlot::Drawvoid Draw(Option_t *options=nullptr) overrideDraw this plot and all of the elements it contains.Definition RooPlot.cxx:637; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::GetYaxisTAxis * GetYaxis()Definition TH1.h:325; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf801__mcstudy_8C.html:8795,error,errors,8795,doc/master/rf801__mcstudy_8C.html,https://root.cern,https://root.cern/doc/master/rf801__mcstudy_8C.html,1,['error'],['errors']
Availability,"efinition Rtypes.h:67; kOrange@ kOrangeDefinition Rtypes.h:67; kBlack@ kBlackDefinition Rtypes.h:65; kGreen@ kGreenDefinition Rtypes.h:66; kWhite@ kWhiteDefinition Rtypes.h:65; kCyan@ kCyanDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; kAzure@ kAzureDefinition Rtypes.h:67; kViolet@ kVioletDefinition Rtypes.h:67; kSpring@ kSpringDefinition Rtypes.h:67; Note the special role of color kWhite (color number 0). It is the default background color also. For instance in a PDF or PS files (as paper is usually white) it is simply not painted. To have a white color behaving like the other color the simplest is to define an other white color not attached to the color index 0:; Int_t ci = TColor::GetFreeColorIndex();; TColor *color = new TColor(ci, 1., 1., 1.);. Bright and dark colors; Dark and bright colors are used to add 3D effects to graphical objects like TWbox, TPave, TPaveText, TPaveLabel, etc. and in colored lego plots.; Two static functions are available that return the bright or dark color number corresponding to a given color index. If these variants don't already exist, they are created as needed: Int_t dark = TColor::GetColorDark(color_index);; Int_t bright = TColor::GetColorBright(color_index);; TColor::GetColorBrightstatic Int_t GetColorBright(Int_t color)Static function: Returns the bright color number corresponding to n If the TColor object does not exi...Definition TColor.cxx:2087; TColor::GetColorDarkstatic Int_t GetColorDark(Int_t color)Static function: Returns the dark color number corresponding to n If the TColor object does not exist...Definition TColor.cxx:2130. Accessible Color Schemes; Choosing an appropriate color scheme is essential for making results easy to understand and interpret. Factors like colorblindness and converting colors to grayscale for publications can impact accessibility. Furthermore, results should be aesthetically pleasing. The following three color schemes, recommended by M. Petroff in arXiv:2107.02270v2 and available ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTColor.html:5464,avail,available,5464,doc/master/classTColor.html,https://root.cern,https://root.cern/doc/master/classTColor.html,1,['avail'],['available']
Availability,"efinition RtypesCore.h:63; Int_tint Int_tDefinition RtypesCore.h:45; Longptr_tlong Longptr_tDefinition RtypesCore.h:82; UInt_tunsigned int UInt_tDefinition RtypesCore.h:46; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:101; kNPOSconstexpr Ssiz_t kNPOSDefinition RtypesCore.h:124; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:100; Option_tconst char Option_tDefinition RtypesCore.h:66; ClassImp#define ClassImp(name)Definition Rtypes.h:377; VoidFuncPtr_tvoid(* VoidFuncPtr_t)()Definition Rtypes.h:79; TApplication.h; TBrowser.h; TClassEdit.h; TClassGenerator.h; TClassTable.h; gClassTableR__EXTERN TClassTable * gClassTableDefinition TClassTable.h:97; TClass.h; CreateInterpreterTInterpreter * CreateInterpreter(void *interpLibHandle, const char *argv[])Definition TCling.cxx:608; TColor.h; TDataType.h; gDirectory#define gDirectoryDefinition TDirectory.h:384; TEnv.h; gEnvR__EXTERN TEnv * gEnvDefinition TEnv.h:170; DefaultErrorHandlervoid DefaultErrorHandler(Int_t level, Bool_t abort_bool, const char *location, const char *msg)The default error handler function.Definition TErrorDefaultHandler.cxx:102; TErrorDefaultHandler.hxx; TError.h; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; Warningvoid Warning(const char *location, const char *msgfmt,...)Use this function in warning situations.Definition TError.cxx:229; SetErrorHandlerErrorHandlerFunc_t SetErrorHandler(ErrorHandlerFunc_t newhandler)Set an errorhandler function. Returns the old handler.Definition TError.cxx:90; TFolder.h; TFunctionTemplate.h; TFunction.h; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; cursorOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t cursorDefinition TGWin32VirtualXProxy.cxx:160; filenameOption_t Option_t TPoint TPoint const char GetTextMagnitude Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TROOT_8cxx_source.html:123327,error,error,123327,doc/v632/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TROOT_8cxx_source.html,1,['error'],['error']
Availability,"efinition TAttFill.h:31; TGraphMultiErrors::GetErrorXhighDouble_t GetErrorXhigh(Int_t i) const overrideGet high error on x coordinate for point i.Definition TGraphMultiErrors.cxx:1492; TGraphMultiErrors::SetPointErrorvirtual void SetPointError(Double_t exL, Double_t exH, Double_t eyL1, Double_t eyH1, Double_t eyL2=0., Double_t eyH2=0., Double_t eyL3=0., Double_t eyH3=0.)Set ex and ey values for point pointed by the mouse.Definition TGraphMultiErrors.cxx:1793; TGraphMultiErrors::GetAttLinevirtual TAttLine * GetAttLine(Int_t e)Get AttLine pointer for specified error dimension.Definition TGraphMultiErrors.cxx:1632; TGraphMultiErrors::SetFillColorAlphavirtual void SetFillColorAlpha(Int_t e, Color_t fcolor, Float_t falpha)Set Fill Color and Alpha of error e (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2051; TGraphMultiErrors::GetLineColorvirtual Color_t GetLineColor() constReturn the line color.Definition TAttLine.h:33; TGraphMultiErrors::GetErrorYlowDouble_t GetErrorYlow(Int_t i) const overrideGet low error on y coordinate for point i.Definition TGraphMultiErrors.cxx:1504; TGraphMultiErrors::Dividevoid Divide(const TH1 *pass, const TH1 *total, Option_t *opt=""cp"")This function was adapted from the TGraphAsymmErrors class.Definition TGraphMultiErrors.cxx:1001; TGraphMultiErrors::fAttLinestd::vector< TAttLine > fAttLineThe AttLine attributes of the different errors.Definition TGraphMultiErrors.h:42; TGraphMultiErrors::AddYErrorvirtual void AddYError(Int_t np, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr)Add a new y error to the graph and fill it with the values from eyL and eyHDefinition TGraphMultiErrors.cxx:917; TGraphMultiErrors::GetErrorXlowDouble_t GetErrorXlow(Int_t i) const overrideGet low error on x coordinate for point i.Definition TGraphMultiErrors.cxx:1481; TGraphMultiErrors::TGraphMultiErrorsTGraphMultiErrors()TGraphMultiErrors default constructor.Definition TGraphMultiErrors.cxx:66; TGraphMultiErrors::SetEYvirtual void SetEY(Int_t e,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html:78370,error,error,78370,doc/master/TGraphMultiErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html,2,['error'],['error']
Availability,"efinition TBuffer.h:54; TBuffer::SetReadModevoid SetReadMode()Set buffer in read mode.Definition TBuffer.cxx:302; TBuffer::WriteClassBuffervirtual Int_t WriteClassBuffer(const TClass *cl, void *pointer)=0; TBuffer::fVersionInt_t fVersionDefinition TBuffer.h:49; TBuffer::LengthInt_t Length() constDefinition TBuffer.h:100; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; TClass::GetClassstatic TClass * GetClass(const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE)Static method returning pointer to TClass of the specified class name.Definition TClass.cxx:3035; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TProcessIDA TProcessID identifies a ROOT job in a unique way in time and space.Definition TProcessID.h:74; TProcessID::GetPIDstatic TProcessID * GetPID()static: returns pointer to current TProcessIDDefinition TProcessID.cxx:343; TStorage::ReAllocCharstatic char * ReAllocChar(char *vp, size_t size, size_t oldsize)Reallocate (i.e.Definition TStorage.cxx:228; TVirtualArrayWrapper around an object and giving indirect access to its content even if the object is not of a cla...Definition TVirtualArray.h:27; bool; double; int; unsigned int; nconst Int_t nDefinition legend1.C:16; ROOT::Internal::DefaultStreamervoid DefaultStreamer(TBuffer &R__b, const TClass *cl, void *objpointer)Default streamer implementation used by ClassDefInline to avoid requirement to include TBuffer....Definition TBuffer.cxx:30; lTLine lDefinition textangle.C:4. corebasesrcTBuffer.cxx. ROOT master - Reference G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBuffer_8cxx_source.html:21331,error,error,21331,doc/master/TBuffer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBuffer_8cxx_source.html,1,['error'],['error']
Availability,"efinition TCling.cxx:8215; TCling::MethodInfo_Nameconst char * MethodInfo_Name(MethodInfo_t *minfo) const finalDefinition TCling.cxx:9138; TCling::BaseClassInfo_FactoryBaseClassInfo_t * BaseClassInfo_Factory(ClassInfo_t *info) const finalDefinition TCling.cxx:8472; TCling::LoadTextBool_t LoadText(const char *text) const finalLoad the declarations from text into the interpreter.Definition TCling.cxx:7515; TCling::GetSharedLibDepsconst char * GetSharedLibDeps(const char *lib, bool tryDyld=false) finalGet the list a libraries on which the specified lib depends.Definition TCling.cxx:7289; TCling::MethodInfo_MethodCallReturnTypeEReturnType MethodInfo_MethodCallReturnType(MethodInfo_t *minfo) const finalDefinition TCling.cxx:9188; TCling::GetObjectAddressTObject * GetObjectAddress(const char *Name, void *&LookupCtx)If the interpreter encounters Name, check whether that is an object ROOT could retrieve.Definition TCling.cxx:7714; TCling::ProcessLineAsynchLongptr_t ProcessLineAsynch(const char *line, EErrorCode *error=nullptr)Let cling process a command line asynch.Definition TCling.cxx:3560; TCling::MethodInfo_IsValidbool MethodInfo_IsValid(MethodInfo_t *minfo) const finalDefinition TCling.cxx:9059; TCling::TClingTCling(); TCling::FuncTempInfo_FactoryFuncTempInfo_t * FuncTempInfo_Factory(DeclId_t declid) const finalConstruct a FuncTempInfo_t.Definition TCling.cxx:8815; TCling::TypeInfo_FactoryTypeInfo_t * TypeInfo_Factory() const finalDefinition TCling.cxx:9348; TCling::IsClassAutoLoadingEnabledbool IsClassAutoLoadingEnabled() constReturns if class AutoLoading is currently enabled.Definition TCling.cxx:7554; TCling::InvalidateGlobalvoid InvalidateGlobal(const clang::Decl *D)Invalidate cached TCling information for the given global declaration.Definition TCling.cxx:6876; TCling::Evaluateint Evaluate(const char *, TInterpreterValue &) finalGet the interpreter value corresponding to the statement.Definition TCling.cxx:7678; TCling::MakeInterpreterValuestd::unique_ptr< TInterpr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:422651,error,error,422651,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,2,['error'],['error']
Availability,"efinition TF1.cxx:3507; if parmin >= parmax, the parameter is fixed Note that you are not forced to fix the limits for all parameters. For example, if you fit a function with 6 parameters, you can do:; func->SetParameters(0, 3.1, 1.e-6, -8, 0, 100);; func->SetParLimits(3, -10, -4);; func->FixParameter(4, 0);; func->SetParLimits(5, 1, 1);; With this setup, parameters 0->2 can vary freely Parameter 3 has boundaries [-10,-4] with initial value -8 Parameter 4 is fixed to 0 Parameter 5 is fixed to 100. When the lower limit and upper limit are equal, the parameter is fixed. However to fix a parameter to 0, one must call the FixParameter function. Fit Statistics Box; The statistics box can display the result of the fit. You can change the statistics box to display the fit parameters with the TStyle::SetOptFit(mode) method. This mode has four digits. mode = pcev (default = 0111) v = 1; print name/values of parameters; e = 1; print errors (if e=1, v must be 1); c = 1; print Chisquare/Number of degrees of freedom; p = 1; print Probability; For example: gStyle->SetOptFit(1011); prints the fit probability, parameter names/values, and errors. You can change the position of the statistics box with these lines (where g is a pointer to the TGraph): TPaveStats *st = (TPaveStats*)g->GetListOfFunctions()->FindObject(""stats"");; st->SetX1NDC(newx1); //new x start position; st->SetX2NDC(newx2); //new x end position; . Additional Notes on Fitting; Fitting a histogram of dimension N with a function of dimension N-1; It is possible to fit a TH2 with a TF1 or a TH3 with a TF2. In this case the chi-square is computed from the squared error distance between the function values and the bin centers weighted by the bin content. For correct error scaling, the obtained parameter error are corrected as in the case when the option ""W"" is used.; User defined objective functions; By default when fitting a chi square function is used for fitting. When option ""L"" is used a Poisson likelihood function is u",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:140167,error,errors,140167,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,2,['error'],['errors']
Availability,"efinition TFumili.cxx:1809; TFumili::fNfcnInt_t fNfcnNumber of FCN calls;.Definition TFumili.h:15; TFumili::fLastFixedInt_t fLastFixedLast fixed parameter number.Definition TFumili.h:23; TFumili::BuildArraysvoid BuildArrays()Allocates memory for internal arrays.Definition TFumili.cxx:182; TFumili::fZDouble_t * fZ[fMaxParam2] Inverse fZ0 matrix - covariance matrixDefinition TFumili.h:37; TFumili::fLogLikeBool_t fLogLikeLogLikelihood flag.Definition TFumili.h:31; TFumili::fNED1Int_t fNED1Number of experimental vectors X=(x1,x2,...xK)Definition TFumili.h:16; TFumili::Clearvoid Clear(Option_t *opt="""") overrideResets all parameter names, values and errors to zero.Definition TFumili.cxx:242; TFumili::fGrDouble_t * fGr[fMaxParam] Gradients of objective functionDefinition TFumili.h:38; TFumili::fGTDouble_t fGTExpected function change in next iteration.Definition TFumili.h:61; TFumili::SetParameterInt_t SetParameter(Int_t ipar, const char *parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh) overrideSets for parameter number ipar initial parameter value, name parname, initial error verr and limits v...Definition TFumili.cxx:1641; TFumili::fCwordTString fCwordCommand string.Definition TFumili.h:63; TFumili::FitLikelihoodIvirtual void FitLikelihoodI(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag)Minimization function for H1s using a Likelihood method.Definition TFumili.cxx:1972; TFumili::fRPDouble_t fRPPrecision of fit ( machine zero on CDC 6000) quite old yeh?Definition TFumili.h:59; TFumili::fCmParDouble_t * fCmPar[fMaxParam] parameters of commandsDefinition TFumili.h:55; TFumili::fDFDouble_t * fDF[fMaxParam] First derivatives of theoretical functionDefinition TFumili.h:54; TFumili::GetSumLogDouble_t GetSumLog(Int_t) overrideReturn Sum(log(i) i=0,n used by log-likelihood fits.Definition TFumili.cxx:921; TFumili::fSumLogDouble_t * fSumLog[fNlog]Definition TFumili.h:40; TFumili::fAMXDouble_t * fAMX[fMaxParam] Maximum param valueDefinition TFu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFumili_8cxx_source.html:76282,error,error,76282,doc/master/TFumili_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFumili_8cxx_source.html,2,['error'],['error']
Availability,"efinition TGWin32VirtualXProxy.cxx:232; indexOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t indexDefinition TGWin32VirtualXProxy.cxx:168; modeOption_t Option_t TPoint TPoint const char modeDefinition TGWin32VirtualXProxy.cxx:68; namechar name[80]Definition TGX11.cxx:110; nentriesint nentriesDefinition THbookFile.cxx:91; TTree.h; TBranchA TTree is a list of TBranches.Definition TBranch.h:93; TContextMenuThis class provides an interface to context sensitive popup menus.Definition TContextMenu.h:44; TGButtonA button abstract base class.Definition TGButton.h:68; TGCanvasA frame containing two scrollbars (a horizontal and a vertical) and a viewport.Definition TGCanvas.h:192; TGCheckButtonSelects different options.Definition TGButton.h:264; TGClientWindow client.Definition TGClient.h:37; TGComboBoxA combobox (also known as a drop down listbox) allows the selection of one item out of a list of item...Definition TGComboBox.h:47; TGCompositeFrameThe base class for composite widgets (menu bars, list boxes, etc.).Definition TGFrame.h:287; TGDoubleVSliderDragging the slider will generate the event:Definition TGDoubleSlider.h:170; TGHProgressBarDefinition TGProgressBar.h:94; TGHorizontalFrameA composite frame that layout their children in horizontal way.Definition TGFrame.h:385; TGLabelThis class handles GUI labels.Definition TGLabel.h:24; TGLayoutHintsThis class describes layout hints used by the layout classes.Definition TGLayout.h:50; TGListTreeItemDefinition TGListTree.h:27; TGListTreeA list tree is a widget that can contain a number of items arranged in a tree structure.Definition TGListTree.h:195; TGListViewA list view is a widget that can contain a number of items arranged in a grid or list.Definition TGListView.h:115; TGMainFrameDefines top level windows that interact with the system Window Manager.Definition TGFrame.h:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeViewer_8h_source.html:11603,down,down,11603,doc/master/TTreeViewer_8h_source.html,https://root.cern,https://root.cern/doc/master/TTreeViewer_8h_source.html,1,['down'],['down']
Availability,"efinition TGraphErrors.h:69; TGraphErrors::GetErrorXDouble_t GetErrorX(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:612; TGraphErrors::fEYDouble_t * fEY[fNpoints] array of Y errorsDefinition TGraphErrors.h:30; TGraphErrors::~TGraphErrors~TGraphErrors() overrideTGraphErrors default destructor.Definition TGraphErrors.cxx:368; TGraphErrors::Scalevoid Scale(Double_t c1=1., Option_t *option=""y"") overrideMultiply the values and errors of a TGraphErrors by a constant c1.Definition TGraphErrors.cxx:752; TGraphErrors::CalculateScanfFieldsstatic Int_t CalculateScanfFields(const char *fmt)Calculate scan fields.Definition TGraphErrors.cxx:449; TGraphErrors::FillZerovoid FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) overrideSet zero values for point arrays in the range [begin, end].Definition TGraphErrors.cxx:598; TGraphErrors::AddPointErrorvirtual void AddPointError(Double_t x, Double_t y, Double_t ex=0., Double_t ey=0.)Add a point with errorbars to the graph.Definition TGraphErrors.cxx:377; TGraphErrors::fEXDouble_t * fEX[fNpoints] array of X errorsDefinition TGraphErrors.h:29; TGraphErrors::Printvoid Print(Option_t *chopt="""") const overridePrint graph and errors values.Definition TGraphErrors.cxx:711; TGraphErrors::SetPointErrorvirtual void SetPointError(Double_t ex, Double_t ey)Set ex and ey values for point pointed by the mouse.Definition TGraphErrors.cxx:769; TGraphErrors::DoMergeBool_t DoMerge(const TGraph *g) overrideProtected function to perform the merge operation of a graph with errors.Definition TGraphErrors.cxx:573; TGraphErrors::GetEYDouble_t * GetEY() const overrideDefinition TGraphErrors.h:70; TGraphErrors::AllocateDouble_t ** Allocate(Int_t size) overrideAllocate internal data structures for newsize points.Definition TGraphErrors.h:81; TGraphErrors::SwapPointsvoid SwapPoints(Int_t pos1, Int_t pos2) overrideSwap points.Definition TGraphErrors.cxx:856; TGraphErrors::ApplyXvirtual void ApplyX(TF1 *f)Apply fu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphErrors_8h_source.html:7896,error,errorbars,7896,doc/master/TGraphErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphErrors_8h_source.html,1,['error'],['errorbars']
Availability,"efinition TH1.cxx:8990; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::GetDrawOptionvirtual Option_t * GetDrawOption() constGet option used by the graphics system to draw this object.Definition TObject.cxx:428; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::AppendPadvirtual void AppendPad(Option_t *option="""")Append graphics object to current pad.Definition TObject.cxx:190; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::MakeZombievoid MakeZombie()Definition TObject.h:53; TObject::kCanDelete@ kCanDeleteif object in a list can be deletedDefinition TObject.h:62; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TRandom::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom.cxx:559; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::Dataconst char * Data() constDefinition TString.h:376; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; bool; double; int; unsigned int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF2_8cxx_source.html:54592,error,error,54592,doc/master/TF2_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF2_8cxx_source.html,1,['error'],['error']
Availability,"efinition TH2.cxx:2616; TH2::BufferEmptyInt_t BufferEmpty(Int_t action=0) overrideFill histogram with all entries in the buffer.Definition TH2.cxx:278; TH2::DoFitSlicesvirtual void DoFitSlices(bool onX, TF1 *f1, Int_t firstbin, Int_t lastbin, Int_t cut, Option_t *option, TObjArray *arr)Definition TH2.cxx:814; TH2::QuantilesXTH1D * QuantilesX(Double_t prob=0.5, const char *name=""_qx"") constCompute the X distribution of quantiles in the other variable Y name is the name of the returned hist...Definition TH2.cxx:2505; TH2::SetShowProjectionYvirtual void SetShowProjectionY(Int_t nbins=1)When the mouse is moved in a pad containing a 2-d view of this histogram a second canvas shows the pr...Definition TH2.cxx:2650; TH2::FillRandomvoid FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr) overrideFill histogram following distribution in function fname.Definition TH2.cxx:714; TH2::IsATClass * IsA() const overrideDefinition TH2.h:133; TH2::Resetvoid Reset(Option_t *option="""") overrideReset this histogram: contents, errors, etc.Definition TH2.cxx:2600; TH2::fScalefactorDouble_t fScalefactorScale factor.Definition TH2.h:33; TH2::DoProjectionvirtual TH1D * DoProjection(bool onX, const char *name, Int_t firstbin, Int_t lastbin, Option_t *option) constInternal (protected) method for performing projection on the X or Y axis called by ProjectionX or Pro...Definition TH2.cxx:2169; TH2::RebinXTH2 * RebinX(Int_t ngroup=2, const char *newname="""") overrideRebin only the X axis see Rebin2D.Definition TH2.cxx:1642; TH2::fTsumwy2Double_t fTsumwy2Total Sum of weight*Y*Y.Definition TH2.h:35; TH2::GetRandom2virtual void GetRandom2(Double_t &x, Double_t &y, TRandom *rng=nullptr)Return 2 random numbers along axis x and y distributed according to the cell-contents of this 2-D his...Definition TH2.cxx:1200; TH2::GetCovariancevirtual Double_t GetCovariance(Int_t axis1=1, Int_t axis2=2) constReturn covariance between axis1 and axis2.Definition TH2.cxx:1163; TH2::GetBinInt_t GetBin(I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2_8cxx_source.html:189452,error,errors,189452,doc/master/TH2_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2_8cxx_source.html,1,['error'],['errors']
Availability,"efinition TInterpreter.h:425; TInterpreter::ClassInfo_IsValidvirtual Bool_t ClassInfo_IsValid(ClassInfo_t *) constDefinition TInterpreter.h:421; TInterpreter::ClassInfo_Deletevirtual void ClassInfo_Delete(ClassInfo_t *) constDefinition TInterpreter.h:401; TInterpreter::ClassInfo_IsBasevirtual Bool_t ClassInfo_IsBase(ClassInfo_t *, const char *) constDefinition TInterpreter.h:416; TInterpreter::ClassInfo_FullNamevirtual const char * ClassInfo_FullName(ClassInfo_t *) constDefinition TInterpreter.h:433; TInterpreter::AutoLoadvirtual Int_t AutoLoad(const char *classname, Bool_t knowDictNotLoaded=kFALSE)=0; TInterpreter::ClassInfo_Factoryvirtual ClassInfo_t * ClassInfo_Factory(Bool_t=kTRUE) const =0; TIterDefinition TCollection.h:235; TListA doubly linked list.Definition TList.h:38; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TSelectorListA TList derived class that makes sure that objects added to it are not linked to the currently open f...Definition TSelectorList.h:31; TSelectorA TSelector object is used by the TTree::Draw, TTree::Scan, TTree::Process to navigate in a TTree and...Definition TSelector.h:31; TSelector::IsStandardDrawstatic bool IsStandardDraw(const char *selec)Find out if this is a standard selection used for Draw actions (either TSelectorDraw,...Definition TSelector.cxx:237; TSelector::fInputTList * fInputList of objects available during processing.Definition TSelector.h:41; TSelector::ProcessFillvirtual void ProcessFill(Long64_t)This method is called for all selected entries.Definition TSelector.cxx:330; TSelector::EAbortEAbortDefinition TSelector.h:34; TSelector::kAbortFile@ kAbortFileDefinition TSelector.h:34; TSelector::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSelector_8cxx_source.html:18711,error,error,18711,doc/master/TSelector_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSelector_8cxx_source.html,1,['error'],['error']
Availability,"efinition TMultiGraph.cxx:1107; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TObjLink::GetObjectTObject * GetObject() constDefinition TList.h:145; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::AppendPadvirtual void AppendPad(Option_t *option="""")Append graphics object to current pad.Definition TObject.cxx:190; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Paintvirtual void Paint(Option_t *option="""")This method must be overridden if a class wants to paint itself.Definition TObject.cxx:612; TObject::kInvalidObject@ kInvalidObjectif object ctor succeeded but object should not be usedDefinition TObject.h:72; TObject::kMustCleanup@ kMustCleanupif object destructor must call RecursiveRemove()Definition TObject.h:64; TPickerStackGuardDefinition TVirtualPad.h:297; TPluginHandlerDefinition TPluginManager.h:103; TPluginHandler::ExecPluginLongptr_t ExecPlugin(int nargs)Definition TPluginManager.h:231; TPluginHandler::LoadPluginInt_t LoadPlugin()Load the plugin library for this handler.Definition TPluginManager.cxx:293; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::Dataconst char * Data() constDefinition TString.h:376; TString::ReplaceAll",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMultiGraph_8cxx_source.html:67857,error,error,67857,doc/master/TMultiGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMultiGraph_8cxx_source.html,1,['error'],['error']
Availability,"efinition TObject.cxx:213; TObject::UseCurrentStylevirtual void UseCurrentStyle()Set current style settings in this object This function is called when either TCanvas::UseCurrentStyl...Definition TObject.cxx:807; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::Classstatic TClass * Class(); TObject::Deletevirtual void Delete(Option_t *option="""")Delete this object.Definition TObject.cxx:254; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::SetUniqueIDvirtual void SetUniqueID(UInt_t uid)Set the unique object id.Definition TObject.cxx:797; TObject::IsAvirtual TClass * IsA() constDefinition TObject.h:243; TObject::MakeZombievoid MakeZombie()Definition TObject.h:53; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TROOT::IndentLevelstatic void IndentLevel()Functions used by ls() to indent an object hierarchy.Definition TROOT.cxx:2895; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::Dataconst char * Data() constDefinition TString.h:376; TString::Resizevoid Resize(Ssiz_t n)Resize the string. Truncate or add blanks as necessary.Definition TString.cxx:1152; TString::BeginsWithBool_t BeginsWith(const char *s, ECaseCompare cmp=kExact) constDefinition TString.h:623; TString::IsNullBool_t IsNull() constDefinition TString.h:414; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TKey_8cxx_source.html:71375,error,error,71375,doc/master/TKey_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TKey_8cxx_source.html,1,['error'],['error']
Availability,"efinition TPaveStats.cxx:308; Where ""`mode`"" has the same meaning than when calling gStyle->SetOptStat(mode) (see above).; One can delete the statistics box for a histogram TH1* h with: h->SetStats(0); and activate it again with: h->SetStats(1). Fit Statistics; The type of information about fit parameters printed in the histogram statistics box can be selected via the parameter mode. The parameter mode can be = pcev (default = 0111) p = 1; print Probability; c = 1; print Chisquare/Number of degrees of freedom; e = 1; print errors (if e=1, v must be 1); v = 1; print name/values of parameters; c#define c(i)Definition RSha256.hxx:101; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; v@ vDefinition rootcling_impl.cxx:3699; Example: gStyle->SetOptFit(1011);; TStyle::SetOptFitvoid SetOptFit(Int_t fit=1)The type of information about fit parameters printed in the histogram statistics box can be selected ...Definition TStyle.cxx:1593; print fit probability, parameter names/values and errors. When ""v"" = 1 is specified, only the non-fixed parameters are shown.; When ""v"" = 2 all parameters are shown. Note: gStyle->SetOptFit(1) means ""default value"", so it is equivalent to gStyle->SetOptFit(111). Statistics box editing; The following example show how to remove and add a line in a statistics box.; ; TCanvas *statsEditing() {; // Create and plot a test histogram with stats; TCanvas *se = new TCanvas;; TH1F *h = new TH1F(""h"",""test"",100,-3,3);; h->FillRandom(""gaus"",3000);; gStyle->SetOptStat();; h->Draw();; se->Update();; ; // Retrieve the stat box; TPaveStats *ps = (TPaveStats*)se->GetPrimitive(""stats"");; ps->SetName(""mystats"");; TList *listOfLines = ps->GetListOfLines();; ; // Remove the RMS line; TText *tconst = ps->GetLineWith(""RMS"");; listOfLines->Remove(tconst);; ; // Add a new line in the stat box.; // Note that ""="" is a control character; TLatex *myt = new TLatex(0,0,""Test = 10"");; myt ->SetTextFont(42);; myt ->SetTextSize(0.04);; myt ->Se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPaveStats.html:6659,error,errors,6659,doc/master/classTPaveStats.html,https://root.cern,https://root.cern/doc/master/classTPaveStats.html,1,['error'],['errors']
Availability,"efinition TString.h:139; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TStyle::GetErrorXFloat_t GetErrorX() constDefinition TStyle.h:186; TVectorTTVectorT.Definition TVectorT.h:27; TVectorT::GetNrowsInt_t GetNrows() constDefinition TVectorT.h:73; TVectorT::GetLwbInt_t GetLwb() constDefinition TVectorT.h:71; bool; double; int; ROOT::Math::normal_quantile_cdouble normal_quantile_c(double z, double sigma)Inverse ( ) of the cumulative distribution function of the upper tail of the normal (Gaussian) distri...Definition QuantFuncMathCore.cxx:126; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; TMath::NintInt_t Nint(T x)Round to nearest integer. Rounds half integers to the nearest even integer.Definition TMath.h:693; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::FiniteInt_t Finite(Double_t x)Check if it is finite with a mask in order to be consistent in presence of fast math.Definition TMath.h:770; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; mTMarker mDefinition textangle.C:8; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345. histhistsrcTGraphMultiErrors.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html:94305,mask,mask,94305,doc/master/TGraphMultiErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html,1,['mask'],['mask']
Availability,"efinition TString.h:685; TString::AppendTString & Append(const char *cs)Definition TString.h:572; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TString::IndexSsiz_t Index(const char *pat, Ssiz_t i=0, ECaseCompare cmp=kExact) constDefinition TString.h:651; TSystemAbstract base class defining a generic interface to the underlying Operating System.Definition TSystem.h:266; TSystem::fListPathsTString fListPathsDefinition TSystem.h:310; TSystem::NotifyApplicationCreatedvirtual void NotifyApplicationCreated()Hook to tell TSystem that the TApplication object has been created.Definition TSystem.cxx:311; TSystem::GetBuildNodevirtual const char * GetBuildNode() constReturn the build node name.Definition TSystem.cxx:3907; TSystem::Umaskvirtual int Umask(Int_t mask)Set the process file creation mode mask.Definition TSystem.cxx:1517; TSystem::SendBufvirtual int SendBuf(int sock, const void *buffer, int length)Send a buffer headed by a length indicator.Definition TSystem.cxx:2427; TSystem::GetServiceByNamevirtual int GetServiceByName(const char *service)Get port # of internet service.Definition TSystem.cxx:2318; TSystem::IsFileInIncludePathvirtual Bool_t IsFileInIncludePath(const char *name, char **fullpath=nullptr)Return true if 'name' is a file that can be found in the ROOT include path or the current directory.Definition TSystem.cxx:966; TSystem::Unloadvirtual void Unload(const char *module)Unload a shared library.Definition TSystem.cxx:2052; TSystem::TempFileNamevirtual FILE * TempFileName(TString &base, const char *dir=nullptr, const char *suffix=nullptr)Create a secure temporary file by appending a unique 6 letter string to base.Definition TSystem.cxx:1499; TSystem::GetMakeSharedLibvirtual const char * GetMakeSharedLib() constReturn the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:168362,mask,mask,168362,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,2,['mask'],['mask']
Availability,"efinition TVirtualPad.h:308; RooGaussianPlain Gaussian p.d.f.Definition RooGaussian.h:24; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::framestatic RooPlot * frame(const RooAbsRealLValue &var, double xmin, double xmax, Int_t nBins)Create a new frame for a given variable in x.Definition RooPlot.cxx:225; RooPlot::GetYaxisTAxis * GetYaxis() constDefinition RooPlot.cxx:1264; RooPlot::Drawvoid Draw(Option_t *options=nullptr) overrideDraw this plot and all of the elements it contains.Definition RooPlot.cxx:637; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TCanvasThe Canvas class.Definition TCanvas.h:23; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf101_basicsDefinition rf101_basics.py:1; ; [#1] INFO:Fitting -- RooAbsPdf::fitTo(gauss_over_gauss_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_gauss_over_gauss_Int[x]_gaussData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; RooRealVar::mean = 1.01746 +/- 0.0300144 L(-10 - 10) ; RooRealVar::sigma = 2.9787 +/- 0.0219217 L(0.1 - 10) ; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf101_basics.C. tutorialsroofitrf101_basics.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf101__basics_8C.html:4178,error,error,4178,doc/master/rf101__basics_8C.html,https://root.cern,https://root.cern/doc/master/rf101__basics_8C.html,1,['error'],['error']
Availability,"efinition at line 109 of file TView3D.h. ◆ IsViewChanged(). Bool_t TView3D::IsViewChanged ; (; ); const. inlineoverridevirtual . Implements TView.; Definition at line 110 of file TView3D.h. ◆ MoveFocus(). void TView3D::MoveFocus ; (; Double_t * ; cov, . Double_t ; dx, . Double_t ; dy, . Double_t ; dz, . Int_t ; nsteps = 10, . Double_t ; dlong = 0, . Double_t ; dlat = 0, . Double_t ; dpsi = 0 . ). overridevirtual . Move focus to a different box position and extent in nsteps. ; Perform rotation with dlat,dlong,dpsi at each step. ; Implements TView.; Definition at line 1683 of file TView3D.cxx. ◆ MoveViewCommand(). void TView3D::MoveViewCommand ; (; Char_t ; option, . Int_t ; count = 1 . ). overridevirtual . 'a' increase scale factor (clip cube borders); 's' decrease scale factor (clip cube borders) . Implements TView.; Definition at line 1739 of file TView3D.cxx. ◆ MoveWindow(). void TView3D::MoveWindow ; (; Char_t ; option). overridevirtual . Move view window : . l,L - left; h,H - right; u,U - down; i,I - up . Implements TView.; Definition at line 1787 of file TView3D.cxx. ◆ NDCtoWC() [1/2]. void TView3D::NDCtoWC ; (; const Double_t * ; pn, . Double_t * ; pw . ). overridevirtual . Transfer point from normalized to world coordinates. ; Input:; PN(3) - point in world coordinate system; PW(3) - point in normalized coordinate system . Implements TView.; Definition at line 1085 of file TView3D.cxx. ◆ NDCtoWC() [2/2]. void TView3D::NDCtoWC ; (; const Float_t * ; pn, . Float_t * ; pw . ). overridevirtual . Transfer point from normalized to world coordinates. ; Input:; PN(3) - point in world coordinate system; PW(3) - point in normalized coordinate system . Implements TView.; Definition at line 1070 of file TView3D.cxx. ◆ NormalWCtoNDC() [1/2]. void TView3D::NormalWCtoNDC ; (; const Double_t * ; pw, . Double_t * ; pn . ). overridevirtual . Transfer vector of NORMAL from word to normalized coordinates. ; Input:; PW(3) - vector of NORMAL in word coordinate system; PN(3) - vect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTView3D.html:36253,down,down,36253,doc/master/classTView3D.html,https://root.cern,https://root.cern/doc/master/classTView3D.html,1,['down'],['down']
Availability,"efinition at line 144 of file CallContext.h. ◆ s_fnptr(). static std::regex CPyCppyy::s_fnptr ; (; ""\\‍(:*\\*&*\\‍)"" ; ). static . ◆ Scope_Check(). bool CPyCppyy::Scope_Check ; (; PyObject * ; pyobject). Definition at line 146 of file API.cxx. ◆ Scope_CheckExact(). bool CPyCppyy::Scope_CheckExact ; (; PyObject * ; pyobject). Definition at line 156 of file API.cxx. ◆ ScopeFlagCheck(). static bool CPyCppyy::ScopeFlagCheck ; (; CPPInstance * ; self, . CPPScope::EFlags ; flag . ). inlinestatic . Definition at line 740 of file CPPInstance.cxx. ◆ ScopeFlagSet(). static void CPyCppyy::ScopeFlagSet ; (; CPPInstance * ; self, . CPPScope::EFlags ; flag . ). inlinestatic . Definition at line 744 of file CPPInstance.cxx. ◆ SelectAndForward(). static PyObject * CPyCppyy::SelectAndForward ; (; TemplateProxy * ; pytmpl, . CPPOverload * ; pymeth, . CPyCppyy_PyArgs_t ; args, . size_t ; nargsf, . PyObject * ; kwds, . bool ; implicitOkay, . bool ; use_targs, . uint64_t ; sighash, . std::vector< Utility::PyError_t > & ; errors . ). inlinestatic . Definition at line 468 of file TemplateProxy.cxx. ◆ Sequence_Check(). bool CPyCppyy::Sequence_Check ; (; PyObject * ; pyobject). Definition at line 188 of file API.cxx. ◆ sync_templates(). static void CPyCppyy::sync_templates ; (; PyObject * ; pyclass, . const std::string & ; mtCppName, . const std::string & ; mtName . ). inlinestatic . Definition at line 137 of file ProxyWrappers.cxx. ◆ targs2str(). static std::string CPyCppyy::targs2str ; (; TemplateProxy * ; pytmpl). inlinestatic . Definition at line 444 of file TemplateProxy.cxx. ◆ TC2CppName(). static PyObject * CPyCppyy::TC2CppName ; (; PyObject * ; pytc, . const char * ; cpd, . bool ; allow_voidp . ). static . Definition at line 20 of file TemplateProxy.cxx. ◆ TemplateProxy_Check(). template<typename T > . bool CPyCppyy::TemplateProxy_Check ; (; T * ; object). inline . Definition at line 79 of file TemplateProxy.h. ◆ TemplateProxy_CheckExact(). template<typename T > . bool CPyCppyy::Temp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceCPyCppyy.html:55021,error,errors,55021,doc/master/namespaceCPyCppyy.html,https://root.cern,https://root.cern/doc/master/namespaceCPyCppyy.html,1,['error'],['errors']
Availability,"efinition at line 187 of file TNeuron.cxx. ◆ ForceValue(). void TMVA::TNeuron::ForceValue ; (; Double_t ; value). force the value, typically for input and bias neurons ; Definition at line 84 of file TNeuron.cxx. ◆ GetActivationValue(). Double_t TMVA::TNeuron::GetActivationValue ; (; ); const. inline . Definition at line 105 of file TNeuron.h. ◆ GetDEDw(). Double_t TMVA::TNeuron::GetDEDw ; (; ); const. inline . Definition at line 107 of file TNeuron.h. ◆ GetDelta(). Double_t TMVA::TNeuron::GetDelta ; (; ); const. inline . Definition at line 106 of file TNeuron.h. ◆ GetValue(). Double_t TMVA::TNeuron::GetValue ; (; ); const. inline . Definition at line 104 of file TNeuron.h. ◆ InitNeuron(). void TMVA::TNeuron::InitNeuron ; (; ). private . initialize the neuron, most variables still need to be set via setters ; Definition at line 67 of file TNeuron.cxx. ◆ InitSynapseDeltas(). void TMVA::TNeuron::InitSynapseDeltas ; (; ). initialize the error fields of all pre-neurons this method should only be called in batch mode ; Definition at line 283 of file TNeuron.cxx. ◆ IsA(). virtual TClass * TMVA::TNeuron::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 157 of file TNeuron.h. ◆ IsInputNeuron(). Bool_t TMVA::TNeuron::IsInputNeuron ; (; ); const. inline . Definition at line 116 of file TNeuron.h. ◆ IsOutputNeuron(). Bool_t TMVA::TNeuron::IsOutputNeuron ; (; ); const. inline . Definition at line 117 of file TNeuron.h. ◆ Log(). TMVA::MsgLogger & TMVA::TNeuron::Log ; (; ); const. private . Definition at line 343 of file TNeuron.cxx. ◆ NullifyLinks(). void TMVA::TNeuron::NullifyLinks ; (; TObjArray *& ; links). inlineprivate . Definition at line 139 of file TNeuron.h. ◆ NumLinks(). Int_t TMVA::TNeuron::NumLinks ; (; TObjArray * ; links); const. inlineprivate . Definition at line 135 of file TNeuron.h. ◆ NumPostLinks(). Int_t TMVA::TNeuron::NumPostLinks ; (; ); const. inline . Definition at line 109 of file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TNeuron.html:16149,error,error,16149,doc/master/classTMVA_1_1TNeuron.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TNeuron.html,1,['error'],['error']
Availability,"efinition at line 226 of file TTabCom.h. ◆ IsDirectory(). Bool_t TTabCom::IsDirectory ; (; const char ; fileName[]). static . [static utility function]///////////////////////////// ; calls TSystem::GetPathInfo() to see if ""fileName"" is a system directory. ; Definition at line 1029 of file TTabCom.cxx. ◆ MakeClassFromClassName(). TClass * TTabCom::MakeClassFromClassName ; (; const char ; className[]); const. private . [private] (does some specific error handling that makes the function unsuitable for general use.) returns a new'd TClass given the name of a class. ; user must delete. returns 0 in case of error. ; Definition at line 2206 of file TTabCom.cxx. ◆ MakeClassFromVarName(). TClass * TTabCom::MakeClassFromVarName ; (; const char ; varName[], . EContext_t & ; context, . int ; iter = 0 . ). private . [private] (does some specific error handling that makes the function unsuitable for general use.) returns a new'd TClass given the name of a variable. ; user must delete. returns 0 in case of error. if user has operator.() or operator->() backwards, will modify: context, *fpLoc and fBuf. context sensitive behavior. ; Definition at line 2255 of file TTabCom.cxx. ◆ NewListOfFilesInPath(). TSeqCollection * TTabCom::NewListOfFilesInPath ; (; const char ; path1[]). static . [static utility function]///////////////////////////// ; creates a list containing the full path name for each file in the (colon separated) string ""path1""; memory is allocated with ""new"", so whoever calls this function takes responsibility for deleting it. ; Definition at line 1049 of file TTabCom.cxx. ◆ NoMsg(). void TTabCom::NoMsg ; (; Int_t ; errorLevel). static . [static utility function]///////////////////////////// ; calling ""NoMsg( errorLevel )"", sets ""gErrorIgnoreLevel"" to ""errorLevel+1"" so that all errors with ""level < errorLevel"" will be ignored.; calling the function with a negative argument (e.g., ""NoMsg( -1 )"") resets gErrorIgnoreLevel to its previous value. ; Definition at line 1108 of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:15879,error,error,15879,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['error'],['error']
Availability,"efinition at line 236 of file TDirectory.h. ◆ IsWritable(). virtual Bool_t TDirectory::IsWritable ; (; ); const. inlinevirtual . Reimplemented in TDirectoryFile.; Definition at line 237 of file TDirectory.h. ◆ ls(). void TDirectory::ls ; (; Option_t * ; option = """"); const. overridevirtual . List Directory contents. ; Indentation is used to identify the directory tree Subdirectories are listed first, then objects in memory.; The option can has the following format: [<regexp>]; The <regexp> will be used to match the name of the objects. By default memory and disk objects are listed. ; Reimplemented from TObject.; Reimplemented in TROOT, TDirectoryFile, and TFile.; Definition at line 1143 of file TDirectory.cxx. ◆ mkdir(). TDirectory * TDirectory::mkdir ; (; const char * ; name, . const char * ; title = """", . Bool_t ; returnExistingDirectory = kFALSE . ). virtual . Create a sub-directory ""a"" or a hierarchy of sub-directories ""a/b/c/..."". ; Returns 0 in case of error or if a sub-directory (hierarchy) with the requested name already exists. returnExistingDirectory returns a pointer to an already existing sub-directory with the same name. Returns a pointer to the created sub-directory or to the top sub-directory of the hierarchy (in the above example, the returned TDirectory * always points to ""a""). In particular, the steps to create first a/b/c and then a/b/d without receiving errors are: TFile * file = new TFile(""afile"",""RECREATE"");; file->mkdir(""a"");; file->cd(""a"");; gDirectory->mkdir(""b/c"");; gDirectory->cd(""b"");; gDirectory->mkdir(""d"");; gDirectory#define gDirectoryDefinition TDirectory.h:384; TDirectoryFile::cdBool_t cd() overrideChange current directory to ""this"" directory.Definition TDirectoryFile.cxx:334; TDirectoryFile::mkdirTDirectory * mkdir(const char *name, const char *title="""", Bool_t returnExistingDirectory=kFALSE) overrideCreate a sub-directory ""a"" or a hierarchy of sub-directories ""a/b/c/..."".Definition TDirectoryFile.cxx:1249; TFileA ROOT file is an on-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTDirectory.html:42718,error,error,42718,doc/v632/classTDirectory.html,https://root.cern,https://root.cern/doc/v632/classTDirectory.html,2,['error'],['error']
Availability,"efinition at line 246 of file RooDataHist.h. ◆ _binbounds. std::vector<std::vector<double> > RooDataHist::_binbounds. mutableprotected . ! list of bin bounds per dimension ; Definition at line 260 of file RooDataHist.h. ◆ _binv. double* RooDataHist::_binv {nullptr}. protected . [_arrSize] Bin volume array ; Definition at line 253 of file RooDataHist.h. ◆ _cache_sum. double RooDataHist::_cache_sum {0.}. mutableprotected . ! Cache for sum of entries ; ; Definition at line 264 of file RooDataHist.h. ◆ _cache_sum_valid. Int_t RooDataHist::_cache_sum_valid {kInvalid}. mutableprotected . ! Is cache sum valid? Needs to be Int_t instead of CacheSumState_t for subclasses. ; Definition at line 263 of file RooDataHist.h. ◆ _curIndex. ULong64_t RooDataHist::_curIndex {std::numeric_limits<ULong64_t>::max()}. mutableprotected . Current index. ; Definition at line 255 of file RooDataHist.h. ◆ _errHi. double* RooDataHist::_errHi {nullptr}. mutableprotected . [_arrSize] High-side error on weight array ; Definition at line 251 of file RooDataHist.h. ◆ _errLo. double* RooDataHist::_errLo {nullptr}. mutableprotected . [_arrSize] Low-side error on weight array ; Definition at line 250 of file RooDataHist.h. ◆ _idxMult. std::vector<Int_t> RooDataHist::_idxMult. protected . Definition at line 247 of file RooDataHist.h. ◆ _interpolationBuffer. std::vector<double> RooDataHist::_interpolationBuffer. private . ! Buffer to contain values used for weight interpolation ; Definition at line 280 of file RooDataHist.h. ◆ _lvbins. std::vector<std::unique_ptr<const RooAbsBinning> > RooDataHist::_lvbins. protected . ! List of used binnings associated with lvalues ; Definition at line 259 of file RooDataHist.h. ◆ _lvvars. std::vector<RooAbsLValue*> RooDataHist::_lvvars. protected . ! List of observables casted as RooAbsLValue ; Definition at line 258 of file RooDataHist.h. ◆ _pbinvCache. std::unordered_map<int,std::vector<double> > RooDataHist::_pbinvCache. mutableprotected . ! Cache for arrays of parti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataHist.html:87486,error,error,87486,doc/master/classRooDataHist.html,https://root.cern,https://root.cern/doc/master/classRooDataHist.html,1,['error'],['error']
Availability,"efinition at line 2473 of file TAuthenticate.cxx. ◆ IsA(). TClass * TAuthenticate::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 207 of file TAuthenticate.h. ◆ MergeHostAuthList(). void TAuthenticate::MergeHostAuthList ; (; TList * ; std, . TList * ; nin, . Option_t * ; opt = """" . ). static . Tool for updating fgAuthInfo or fgProofAuthInfo 'nin' contains list of last input information through (re)reading of a rootauthrc-alike file. ; 'nin' info has priority. 'std' is cleaned from inactive members. 'nin' members used to update existing members in 'std' are removed from 'nin', do that they do not leak opt = ""P"" for proofauthinfo. ; Definition at line 3611 of file TAuthenticate.cxx. ◆ PromptPasswd(). char * TAuthenticate::PromptPasswd ; (; const char * ; prompt = ""Password: ""). static . Static method to prompt for the user's passwd to be used for authentication to rootd or proofd. ; Uses non-echoing command line to get passwd. Returns passwd (which must de deleted by caller) or 0. If non-interactive run (eg ProofServ) returns -1 ; Definition at line 1142 of file TAuthenticate.cxx. ◆ PromptUser(). char * TAuthenticate::PromptUser ; (; const char * ; remote). static . Static method to prompt for the user name to be used for authentication to rootd or proofd. ; User is asked to type user name. Returns user name (which must be deleted by caller) or 0. If non-interactive run (eg ProofServ) returns default user. ; Definition at line 1102 of file TAuthenticate.cxx. ◆ ProofAuthSetup() [1/2]. Int_t TAuthenticate::ProofAuthSetup ; (; ). private . Authentication related stuff setup in TProofServ. ; This is the place where the buffer send by the client / master is decoded. It contains also password information, if the case requires. Return 0 on success, -1 on failure. ; Definition at line 3699 of file TAuthenticate.cxx. ◆ ProofAuthSetup() [2/2]. Int_t TAuthenticate::ProofAuthSetup ; (; TSocket * ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAuthenticate.html:34087,echo,echoing,34087,doc/master/classTAuthenticate.html,https://root.cern,https://root.cern/doc/master/classTAuthenticate.html,1,['echo'],['echoing']
Availability,"efinition at line 283 of file TApplicationRemote.cxx. ◆ Broadcast() [2/3]. Int_t TApplicationRemote::Broadcast ; (; const TMessage & ; mess). private . Broadcast a message to the remote session. ; Returns 0 on success, -1 in case of error. ; Definition at line 266 of file TApplicationRemote.cxx. ◆ Broadcast() [3/3]. Int_t TApplicationRemote::Broadcast ; (; Int_t ; kind, . Int_t ; type = kRRT_Undef . ). inlineprivate . Definition at line 86 of file TApplicationRemote.h. ◆ BroadcastObject(). Int_t TApplicationRemote::BroadcastObject ; (; const TObject * ; obj, . Int_t ; kind = kMESS_OBJECT . ). private . Broadcast an object to the remote session. ; Use kind to set the TMessage what field. Returns 0 on success, -1 in case of error. ; Definition at line 297 of file TApplicationRemote.cxx. ◆ BroadcastRaw(). Int_t TApplicationRemote::BroadcastRaw ; (; const void * ; buffer, . Int_t ; length . ). private . Broadcast a raw buffer of specified length to the remote session. ; Returns 0 on success, -1 in case of error. ; Definition at line 308 of file TApplicationRemote.cxx. ◆ Browse(). void TApplicationRemote::Browse ; (; TBrowser * ; b). overridevirtual . Browse remote application (working directory and ROOT files). ; Reimplemented from TObject.; Definition at line 1056 of file TApplicationRemote.cxx. ◆ CheckFile(). Bool_t TApplicationRemote::CheckFile ; (; const char * ; file, . Long_t ; modtime . ). private . Check if a file needs to be send to the server. ; Use the following algorithm:; check if file appears in file map; if yes, get file's modtime and check against time in map, if modtime not same get md5 and compare against md5 in map, if not same return kTRUE.; if no, get file's md5 and modtime and store in file map, ask slave if file exists with specific md5, if yes return kFALSE, if no return kTRUE. Returns kTRUE in case file needs to be send, returns kFALSE in case file is already on remote node. . Definition at line 674 of file TApplicationRemote.cxx. ◆ Class(). stat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplicationRemote.html:25640,error,error,25640,doc/master/classTApplicationRemote.html,https://root.cern,https://root.cern/doc/master/classTApplicationRemote.html,1,['error'],['error']
Availability,"efinition at line 3097 of file TGeoManager.cxx. ◆ RestoreMasterVolume(). void TGeoManager::RestoreMasterVolume ; (; ). Restore the master volume of the geometry. ; Definition at line 3118 of file TGeoManager.cxx. ◆ Safety(). Double_t TGeoManager::Safety ; (; Bool_t ; inside = kFALSE). Compute safe distance from the current point. ; This represent the distance from POINT to the closest boundary. ; Definition at line 2300 of file TGeoManager.cxx. ◆ SamplePoints(). TGeoNode * TGeoManager::SamplePoints ; (; Int_t ; npoints, . Double_t & ; dist, . Double_t ; epsil = 1E-5, . const char * ; g3path = """" . ). shoot npoints randomly in a box of 1E-5 around current point. ; return minimum distance to points outside ; Definition at line 3647 of file TGeoManager.cxx. ◆ SaveAttributes(). void TGeoManager::SaveAttributes ; (; const char * ; filename = ""tgeoatt.C""). Save current attributes in a macro. ; Definition at line 2658 of file TGeoManager.cxx. ◆ SearchNode(). TGeoNode * TGeoManager::SearchNode ; (; Bool_t ; downwards = kFALSE, . const TGeoNode * ; skipnode = nullptr . ). Returns the deepest node containing fPoint, which must be set a priori. ; Definition at line 2716 of file TGeoManager.cxx. ◆ SelectTrackingMedia(). void TGeoManager::SelectTrackingMedia ; (; ). Define different tracking media. ; Definition at line 3708 of file TGeoManager.cxx. ◆ SetAlignableEntry(). TGeoPNEntry * TGeoManager::SetAlignableEntry ; (; const char * ; unique_name, . const char * ; path, . Int_t ; uid = -1 . ). Creates an alignable object with unique name corresponding to a path and adds it to the list of alignables. ; An optional unique ID can be provided, in which case PN entries can be searched fast by uid. ; Definition at line 3342 of file TGeoManager.cxx. ◆ SetAllIndex(). void TGeoManager::SetAllIndex ; (; ). Assigns uid's for all materials,media and matrices. ; Definition at line 1409 of file TGeoManager.cxx. ◆ SetAnimateTracks(). void TGeoManager::SetAnimateTracks ; (; Bool_t ; flag = kTRUE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:131586,down,downwards,131586,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,1,['down'],['downwards']
Availability,"efinition at line 316 of file TLinearFitter.cxx. ◆ TLinearFitter() [5/5]. TLinearFitter::TLinearFitter ; (; const TLinearFitter & ; tlf). Copy ctor. ; Definition at line 349 of file TLinearFitter.cxx. ◆ ~TLinearFitter(). TLinearFitter::~TLinearFitter ; (; ). override . Linear fitter cleanup. ; Definition at line 405 of file TLinearFitter.cxx. Member Function Documentation. ◆ Add(). void TLinearFitter::Add ; (; TLinearFitter * ; tlf). virtual . Add another linear fitter to this linear fitter. ; Points and Design matrices are added, but the previous fitting results (if any) are deleted. Fitters must have same formulas (this is not checked). Fixed parameters are not changed ; Definition at line 496 of file TLinearFitter.cxx. ◆ AddPoint(). void TLinearFitter::AddPoint ; (; Double_t * ; x, . Double_t ; y, . Double_t ; e = 1 . ). virtual . Adds 1 point to the fitter. ; First parameter stands for the coordinates of the point, where the function is measured Second parameter - the value being fitted Third parameter - weight(measurement error) of this point (=1 by default) ; Definition at line 545 of file TLinearFitter.cxx. ◆ AddTempMatrices(). void TLinearFitter::AddTempMatrices ; (; ). virtual . Definition at line 707 of file TLinearFitter.cxx. ◆ AddToDesign(). void TLinearFitter::AddToDesign ; (; Double_t * ; x, . Double_t ; y, . Double_t ; e . ). private . Add a point to the AtA matrix and to the Atb vector. ; Definition at line 621 of file TLinearFitter.cxx. ◆ AssignData(). void TLinearFitter::AssignData ; (; Int_t ; npoints, . Int_t ; xncols, . Double_t * ; x, . Double_t * ; y, . Double_t * ; e = nullptr . ). virtual . This function is to use when you already have all the data in arrays and don't want to copy them into the fitter. ; In this function, the Use() method of TVectorD and TMatrixD is used, so no bytes are physically moved around. First parameter - number of points to fit Second parameter - number of variables in the model Third parameter - the variables of th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLinearFitter.html:34206,error,error,34206,doc/master/classTLinearFitter.html,https://root.cern,https://root.cern/doc/master/classTLinearFitter.html,1,['error'],['error']
Availability,"efinition at line 352 of file TUnfold.h. ◆ GetFoldedOutput(). void TUnfold::GetFoldedOutput ; (; TH1 * ; out, . const Int_t * ; binMap = nullptr . ); const. get unfolding result on detector level ; Parameters. [out]outhistogram to store the correlation coefficiencts. The bin contents and errors are overwritten. ; [in]binMap(default=nullptr) array for mapping truth bins to histogram bins. This method returns the unfolding output folded by the response matrix, i.e. the vector Ax.; The use of binMap is explained with the documentation of the GetOutput() method ; Definition at line 2962 of file TUnfold.cxx. ◆ GetInput(). void TUnfold::GetInput ; (; TH1 * ; out, . const Int_t * ; binMap = nullptr . ); const. Input vector of measurements. ; Parameters. [out]outhistogram to store the measurements. Bin content and bin errors are overwritte. ; [in]binMap(default=nullptr) array for mapping truth bins to histogram bins. Bins which had an uncertainty of zero in the call to SetInput() maye acquire bin contents or bin errors different from the original settings in SetInput().; The use of binMap is explained with the documentation of the GetOutput() method ; Definition at line 3069 of file TUnfold.cxx. ◆ GetInputInverseEmatrix(). void TUnfold::GetInputInverseEmatrix ; (; TH2 * ; out). get inverse of the measurement's covariance matrix ; Parameters. [out]outhistogram to store the inverted covariance . Definition at line 3098 of file TUnfold.cxx. ◆ GetL(). void TUnfold::GetL ; (; TH2 * ; out); const. get matrix of regularisation conditions ; Parameters. [out]outhistogram to store the regularisation conditions. the bincontents are overwritten. The histogram should have dimension nr (y-axis) times nx (x-axis). nr corresponds to the number of regularisation conditions, it can be obtained using the method GetNr(). nx corresponds to the number of histogram bins in the response matrix along the truth axis. ; Definition at line 3191 of file TUnfold.cxx. ◆ GetLcurveX(). Double_t TUnfold::Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfold.html:36784,error,errors,36784,doc/master/classTUnfold.html,https://root.cern,https://root.cern/doc/master/classTUnfold.html,1,['error'],['errors']
Availability,"efinition at line 381 of file TProfile2Poly.cxx. ◆ GetBinEntriesW2(). Double_t TProfile2Poly::GetBinEntriesW2 ; (; Int_t ; bin); const. Get bin entries W2. ; Definition at line 371 of file TProfile2Poly.cxx. ◆ GetBinEntriesWV2(). Double_t TProfile2Poly::GetBinEntriesWV2 ; (; Int_t ; bin); const. Get bin entries WV2. ; Definition at line 391 of file TProfile2Poly.cxx. ◆ GetBinError() [1/4]. Double_t TH2Poly::GetBinError ; (; Int_t ; bin); const. overridevirtual . Returns the value of error associated to bin number bin. ; If the sum of squares of weights has been defined (via Sumw2), this function returns the sqrt(sum of w2). otherwise it returns the sqrt(contents) for this bin. Bins are in range [1:nbins] and for bin < 0 in range [-9:-1] it returns errors for overflow bins. See also TH2Poly::GetBinContent ; Reimplemented from TH2Poly.; Definition at line 104 of file TH2Poly.cxx. ◆ GetBinError() [2/4]. Double_t TProfile2Poly::GetBinError ; (; Int_t ; bin); const. overridevirtual . Get bin error. ; Reimplemented from TH2Poly.; Definition at line 401 of file TProfile2Poly.cxx. ◆ GetBinError() [3/4]. Double_t TH2Poly::GetBinError ; (; Int_t ; , . Int_t ;  . ); const. inlineoverridevirtual . NOT IMPLEMENTED for TH2Poly. ; Reimplemented from TH2Poly.; Definition at line 146 of file TH2Poly.h. ◆ GetBinError() [4/4]. Double_t TH2Poly::GetBinError ; (; Int_t ; , . Int_t ; , . Int_t ;  . ); const. inlineoverridevirtual . NOT IMPLEMENTED for TH2Poly. ; Reimplemented from TH2Poly.; Definition at line 147 of file TH2Poly.h. ◆ GetOverflowContent(). Double_t TProfile2Poly::GetOverflowContent ; (; Int_t ; idx). inline . Definition at line 99 of file TProfile2Poly.h. ◆ GetOverflowRegionFromCoordinates(). Int_t TProfile2Poly::GetOverflowRegionFromCoordinates ; (; Double_t ; x, . Double_t ; y . ). protected . The overflow regions are calculated by considering x, y coordinates. ; The Middle bin at -5 contains all the TProfile2Poly bins.; -0 -1 -2; ________; -1: |__|__|__|; -4: |__|__|__|",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile2Poly.html:68068,error,error,68068,doc/master/classTProfile2Poly.html,https://root.cern,https://root.cern/doc/master/classTProfile2Poly.html,1,['error'],['error']
Availability,"efinition at line 389 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. ◆ GSL_EMAXITER. #define GSL_EMAXITER   3. Definition at line 390 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. ◆ GSL_ENOMEM. #define GSL_ENOMEM   8 /* malloc failed */. Definition at line 381 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. ◆ GSL_EROUND. #define GSL_EROUND   7. Definition at line 394 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. ◆ GSL_ERROR. #define GSL_ERROR; (;  ; a, .  ; b . );    oocoutE(nullptr,Integration) << ""RooAdaptiveGaussKronrodIntegrator1D::integral() ERROR: "" << a << endl ; return b ;. Definition at line 384 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. ◆ GSL_ERROR_VAL. #define GSL_ERROR_VAL; (;  ; reason, .  ; gsl_errno, .  ; value . );    return value ;. Definition at line 396 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. ◆ GSL_ESING. #define GSL_ESING   4. Definition at line 391 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. ◆ GSL_ETOL. #define GSL_ETOL   14 /* failed to reach the specified tolerance */. Definition at line 383 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. ◆ GSL_FN_EVAL. #define GSL_FN_EVAL; (;  ; F, .  ; x . );    (*((F)->function))(x,(F)->params). Definition at line 68 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. ◆ GSL_MAX. #define GSL_MAX; (;  ; a, .  ; b . );    ((a) > (b) ? (a) : (b)). Definition at line 398 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. ◆ GSL_SUCCESS. #define GSL_SUCCESS   0. Definition at line 379 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. Typedef Documentation. ◆ gsl_function. typedef struct gsl_function_struct gsl_function. Definition at line 67 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. ◆ gsl_integration_rule. typedef void gsl_integration_rule(const gsl_function *f, double a, double b, double *result, double *abserr, double *defabs, double *resabs). Definition at line 425 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. Enumeration Type Documentation. ◆ anonymous enum. anonymous enum. Enu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAdaptiveGaussKronrodIntegrator1D_8cxx.html:9447,toler,tolerance,9447,doc/master/RooAdaptiveGaussKronrodIntegrator1D_8cxx.html,https://root.cern,https://root.cern/doc/master/RooAdaptiveGaussKronrodIntegrator1D_8cxx.html,1,['toler'],['tolerance']
Availability,"efinition at line 445 of file TInterpreter.h. ◆ BaseClassInfo_Offset(). virtual Longptr_t TInterpreter::BaseClassInfo_Offset ; (; BaseClassInfo_t * ; , . void * ; = nullptr, . bool ; = true . ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 446 of file TInterpreter.h. ◆ BaseClassInfo_Property(). virtual Long_t TInterpreter::BaseClassInfo_Property ; (; BaseClassInfo_t * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 447 of file TInterpreter.h. ◆ BaseClassInfo_Tagnum(). virtual Longptr_t TInterpreter::BaseClassInfo_Tagnum ; (; BaseClassInfo_t * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 448 of file TInterpreter.h. ◆ BaseClassInfo_TmpltName(). virtual const char * TInterpreter::BaseClassInfo_TmpltName ; (; BaseClassInfo_t * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 452 of file TInterpreter.h. ◆ Calc(). virtual Longptr_t TInterpreter::Calc ; (; const char * ; line, . EErrorCode * ; error = nullptr . ). pure virtual . Implemented in TCling. ◆ CallFunc_Delete(). virtual void TInterpreter::CallFunc_Delete ; (; CallFunc_t * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 314 of file TInterpreter.h. ◆ CallFunc_Exec() [1/2]. virtual void TInterpreter::CallFunc_Exec ; (; CallFunc_t * ; , . void * ;  . ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 315 of file TInterpreter.h. ◆ CallFunc_Exec() [2/2]. virtual void TInterpreter::CallFunc_Exec ; (; CallFunc_t * ; , . void * ; , . TInterpreterValue & ;  . ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 316 of file TInterpreter.h. ◆ CallFunc_ExecDouble(). virtual Double_t TInterpreter::CallFunc_ExecDouble ; (; CallFunc_t * ; , . void * ;  . ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 321 of file TInterpreter.h. ◆ CallFunc_ExecInt(). virtual Longptr_t TInterpreter::CallFunc_ExecInt ; (; CallFunc_t * ; , . void * ;  . ); const. inl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInterpreter.html:40337,error,error,40337,doc/master/classTInterpreter.html,https://root.cern,https://root.cern/doc/master/classTInterpreter.html,1,['error'],['error']
Availability,"efinition at line 4714 of file TGWin32.cxx. ◆ MakeOpaqueColors(). void TGWin32::MakeOpaqueColors ; (; Int_t ; percent, . ULong_t * ; orgcolors, . Int_t ; ncolors . ). private . Get RGB values for orgcolors, add percent neutral to the RGB and allocate new_colors. ; Definition at line 4022 of file TGWin32.cxx. ◆ MapColorStruct(). void TGWin32::MapColorStruct ; (; ColorStruct_t * ; color, . GdkColor & ; xcolor . ). private . Map a ColorStruct_t to a XColor structure. ; Definition at line 5721 of file TGWin32.cxx. ◆ MapCursor(). void TGWin32::MapCursor ; (; ECursor ; cursor, . Int_t & ; xcursor . ). private . ◆ MapEvent(). void TGWin32::MapEvent ; (; Event_t & ; ev, . GdkEvent & ; xev, . Bool_t ; tox = kTRUE . ). private . Map Event_t structure to gdk_event structure. ; If tox is false map the other way. ; Definition at line 5945 of file TGWin32.cxx. ◆ MapEventMask(). void TGWin32::MapEventMask ; (; UInt_t & ; emask, . UInt_t & ; xemask, . Bool_t ; tox = kTRUE . ). private . Map event mask to or from gdk. ; Definition at line 4913 of file TGWin32.cxx. ◆ MapGCValues(). void TGWin32::MapGCValues ; (; GCValues_t & ; gval, . ULong_t & ; xmask, . GdkGCValues & ; xgval, . Bool_t ; tox = kTRUE . ). private . Map a GCValues_t to a XCGValues structure if tox is true. ; Map the other way in case tox is false. ; Definition at line 5025 of file TGWin32.cxx. ◆ MapKeySym(). void TGWin32::MapKeySym ; (; UInt_t & ; keysym, . UInt_t & ; xkeysym, . Bool_t ; tox = kTRUE . ). private . Map to and from X key symbols. ; Keysym are the values returned by XLookUpString. ; Definition at line 6873 of file TGWin32.cxx. ◆ MapModifierState(). void TGWin32::MapModifierState ; (; UInt_t & ; state, . UInt_t & ; xstate, . Bool_t ; tox = kTRUE . ). private . Map modifier key state to or from X. ; Definition at line 5889 of file TGWin32.cxx. ◆ MapRaised(). void TGWin32::MapRaised ; (; Window_t ; id). overridevirtual . Map window on screen and put on top of all windows. ; Reimplemented from TVirtualX.; Def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32.html:90338,mask,mask,90338,doc/master/classTGWin32.html,https://root.cern,https://root.cern/doc/master/classTGWin32.html,1,['mask'],['mask']
Availability,"efinition at line 5010 of file TH1.cxx. ◆ GetRMS(). Double_t TH1::GetRMS ; (; Int_t ; axis = 1); const. inline . This function returns the Standard Deviation (Sigma) of the distribution not the Root Mean Square (RMS). ; The name ""RMS"" is been often used as a synonym for the Standard Deviation and it was introduced many years ago (Hbook/PAW times). We keep the name GetRMS for continuity as an alias to GetStdDev. GetStdDev() should be used instead. ; Definition at line 319 of file TH1.h. ◆ GetRMSError(). Double_t TH1::GetRMSError ; (; Int_t ; axis = 1); const. inline . Definition at line 320 of file TH1.h. ◆ GetSkewness(). Double_t TH1::GetSkewness ; (; Int_t ; axis = 1); const. virtual . For axis = 1, 2 or 3 returns skewness of the histogram along x, y or z axis.; For axis = 11, 12 or 13 returns the approximate standard error of skewness of the histogram along x, y or z axis. Note, that since third and fourth moment are not calculated at the fill time, skewness and its standard error are computed bin by bin; IMPORTANT NOTE: The returned value depends on how the histogram statistics are calculated. See TH1::GetMean and TH1::GetStdDev. ; Definition at line 7671 of file TH1.cxx. ◆ GetStatOverflows(). EStatOverflows TH1::GetStatOverflows ; (; ); const. inline . Get the behaviour adopted by the object about the statoverflows. See EStatOverflows for more information. ; Definition at line 323 of file TH1.h. ◆ GetStatOverflowsBehaviour(). Bool_t TH1::GetStatOverflowsBehaviour ; (; ); const. inlineprotected . Definition at line 152 of file TH1.h. ◆ GetStats(). void TH1::GetStats ; (; Double_t * ; stats); const. virtual . fill the array stats from the contents of this histogram The array stats must be correctly dimensioned in the calling program. ; stats[0] = sumw; stats[1] = sumw2; stats[2] = sumwx; stats[3] = sumwx2; If no axis-subrange is specified (via TAxis::SetRange), the array stats is simply a copy of the statistics quantities computed at filling time. If a sub-range i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:172918,error,error,172918,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['error'],['error']
Availability,"efinition at line 5233 of file TCling.cxx. ◆ Execute() [2/5]. void TCling::Execute ; (; TMethod * ; method, . TObjArray * ; params, . int * ; error = nullptr . ). inlinefinalprivatevirtual . Execute method on this object with parameters stored in the TObjArray. ; The TObjArray should contain an argv vector like: argv[0] ... argv[n] = the list of TObjString parameters; TObjStringCollectable string class.Definition TObjString.h:28; nconst Int_t nDefinition legend1.C:16. Implements TInterpreter.; Definition at line 628 of file TCling.h. ◆ Execute() [3/5]. void TCling::Execute ; (; TObject * ; obj, . TClass * ; cl, . const char * ; method, . const char * ; params, . Bool_t ; objectIsConst, . int * ; error = nullptr . ). Execute a method from class cl with arguments params. ; FIXME: The cint-based version of this code does not check if the SetFunc() call works, and does not do any real checking for errors from the Exec() call. It did fetch the most recent cint security error and return that in error, but this does not really translate well to cling/clang. We should enhance these interfaces so that we can report compilation and runtime errors properly. ; Definition at line 5257 of file TCling.cxx. ◆ Execute() [4/5]. void TCling::Execute ; (; TObject * ; obj, . TClass * ; cl, . const char * ; method, . const char * ; params, . int * ; error = nullptr . ). finalvirtual . Implements TInterpreter.; Definition at line 5277 of file TCling.cxx. ◆ Execute() [5/5]. void TCling::Execute ; (; TObject * ; obj, . TClass * ; cl, . TMethod * ; method, . TObjArray * ; params, . int * ; error = nullptr . ). finalvirtual . Execute a method from class cl with the arguments in array params (params[0] ... params[n] = array of TObjString parameters). ; Convert the TObjArray array of TObjString parameters to a character string of comma separated parameters. The parameters of type 'char' are enclosed in double quotes and all internal quotes are escaped. ; Implements TInterpreter.; Definition at l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:85290,error,error,85290,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,2,['error'],['error']
Availability,efinition at line 587 of file RooVectorDataStore.h. ◆ _catStoreList. std::vector<CatVector*> RooVectorDataStore::_catStoreList. private . Definition at line 572 of file RooVectorDataStore.h. ◆ _currentWeightIndex. ULong64_t RooVectorDataStore::_currentWeightIndex {0}. mutableprivate . Definition at line 584 of file RooVectorDataStore.h. ◆ _extSumW2Array. const double* RooVectorDataStore::_extSumW2Array = nullptr. private . ! External sum of weights array ; Definition at line 582 of file RooVectorDataStore.h. ◆ _extWgtArray. const double* RooVectorDataStore::_extWgtArray = nullptr. private . ! External weight array ; Definition at line 579 of file RooVectorDataStore.h. ◆ _extWgtErrHiArray. const double* RooVectorDataStore::_extWgtErrHiArray = nullptr. private . ! External weight array - high error ; Definition at line 581 of file RooVectorDataStore.h. ◆ _extWgtErrLoArray. const double* RooVectorDataStore::_extWgtErrLoArray = nullptr. private . ! External weight array - low error ; Definition at line 580 of file RooVectorDataStore.h. ◆ _forcedUpdate. bool RooVectorDataStore::_forcedUpdate = false. private . ! Request for forced cache update ; Definition at line 589 of file RooVectorDataStore.h. ◆ _realfStoreList. std::vector<RealFullVector*> RooVectorDataStore::_realfStoreList. private . Definition at line 571 of file RooVectorDataStore.h. ◆ _realStoreList. std::vector<RealVector*> RooVectorDataStore::_realStoreList. private . Definition at line 570 of file RooVectorDataStore.h. ◆ _sumWeight. double RooVectorDataStore::_sumWeight = 0.0. private . Definition at line 576 of file RooVectorDataStore.h. ◆ _sumWeightCarry. double RooVectorDataStore::_sumWeightCarry = 0.0. private . Definition at line 577 of file RooVectorDataStore.h. ◆ _varsww. RooArgSet RooVectorDataStore::_varsww. private . Definition at line 567 of file RooVectorDataStore.h. ◆ _wgtVar. RooRealVar* RooVectorDataStore::_wgtVar = nullptr. private . Pointer to weight variable (if set) ; Definition at line 568,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooVectorDataStore.html:40958,error,error,40958,doc/master/classRooVectorDataStore.html,https://root.cern,https://root.cern/doc/master/classRooVectorDataStore.html,1,['error'],['error']
Availability,"efinition at line 71 of file ExpectedErrorPruneTool.cxx. Member Function Documentation. ◆ CalculatePruningInfo(). TMVA::PruningInfo * TMVA::ExpectedErrorPruneTool::CalculatePruningInfo ; (; DecisionTree * ; dt, . const IPruneTool::EventSample * ; testEvents = nullptr, . Bool_t ; isAutomatic = kFALSE . ). virtual . Implements TMVA::IPruneTool.; Definition at line 79 of file ExpectedErrorPruneTool.cxx. ◆ CountNodes(). Int_t TMVA::ExpectedErrorPruneTool::CountNodes ; (; DecisionTreeNode * ; node, . Int_t ; icount = 0 . ). inlineprivate . Definition at line 81 of file ExpectedErrorPruneTool.h. ◆ FindListOfNodes(). void TMVA::ExpectedErrorPruneTool::FindListOfNodes ; (; DecisionTreeNode * ; node). private . recursive pruning of nodes using the Expected Error Pruning (EEP) ; Definition at line 175 of file ExpectedErrorPruneTool.cxx. ◆ GetNodeError(). Double_t TMVA::ExpectedErrorPruneTool::GetNodeError ; (; DecisionTreeNode * ; node); const. private . Calculate an UPPER limit on the error made by the classification done by this node. ; If the S/S+B of the node is f, then according to the training sample, the error rate (fraction of misclassified events by this node) is (1-f) Now f has a statistical error according to the binomial distribution hence the error on f can be estimated (same error as the binomial error for efficiency calculations \( (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \) ; Definition at line 219 of file ExpectedErrorPruneTool.cxx. ◆ GetSubTreeError(). Double_t TMVA::ExpectedErrorPruneTool::GetSubTreeError ; (; DecisionTreeNode * ; node); const. private . calculate the expected statistical error on the subtree below ""node"" which is used in the expected error pruning ; Definition at line 193 of file ExpectedErrorPruneTool.cxx. ◆ Log(). MsgLogger & TMVA::ExpectedErrorPruneTool::Log ; (; ); const. inlineprivate . Definition at line 78 of file ExpectedErrorPruneTool.h. ◆ SetPruneStrengthIncrement(). void TMVA::ExpectedErrorPruneTool::SetPruneStrengthIncrement",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:4249,error,error,4249,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,1,['error'],['error']
Availability,"efinition at line 9753 of file TProof.cxx. ◆ GetLastLog(). TMacro * TProof::GetLastLog ; (; ). Fill a TMacro with the log lines since the last reading (fLogFileR) Return (TMacro *)0 if no line was logged. ; The returned TMacro must be deleted by the caller. ; Definition at line 10257 of file TProof.cxx. ◆ GetListOfActiveSlaves(). TList * TProof::GetListOfActiveSlaves ; (; ); const. inlineprotected . Definition at line 723 of file TProof.h. ◆ GetListOfBadSlaves(). TList * TProof::GetListOfBadSlaves ; (; ); const. inlineprivate . Definition at line 657 of file TProof.h. ◆ GetListOfEnabledPackages(). TList * TProof::GetListOfEnabledPackages ; (; ). Get from the master the list of names of the packages enabled. ; Definition at line 9124 of file TProof.cxx. ◆ GetListOfInactiveSlaves(). TList * TProof::GetListOfInactiveSlaves ; (; ); const. inlineprivate . Definition at line 655 of file TProof.h. ◆ GetListOfPackages(). TList * TProof::GetListOfPackages ; (; ). Get from the master the list of names of the packages available. ; Definition at line 9108 of file TProof.cxx. ◆ GetListOfQueries(). TList * TProof::GetListOfQueries ; (; Option_t * ; opt = """"). virtual . Ask the master for the list of queries. ; Reimplemented in TProofLite.; Definition at line 2088 of file TProof.cxx. ◆ GetListOfSlaveInfos(). TList * TProof::GetListOfSlaveInfos ; (; ). Returns list of TSlaveInfo's. In case of error return 0. ; Definition at line 2321 of file TProof.cxx. ◆ GetListOfSlaves(). TList * TProof::GetListOfSlaves ; (; ); const. inlineprivate . Definition at line 654 of file TProof.h. ◆ GetListOfUniqueSlaves(). TList * TProof::GetListOfUniqueSlaves ; (; ); const. inlineprivate . Definition at line 656 of file TProof.h. ◆ GetLoadedMacros(). TList * TProof::GetLoadedMacros ; (; ); const. inline . Definition at line 944 of file TProof.h. ◆ GetLog(). void TProof::GetLog ; (; Int_t ; start = -1, . Int_t ; end = -1 . ). Ask for remote logs in the range [start, end]. ; If start == -1 all the messag",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:96615,avail,available,96615,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['avail'],['available']
Availability,"efinition at line 9918 of file TProof.cxx. ◆ GetParameter() [2/6]. Int_t TProof::GetParameter ; (; TCollection * ; c, . const char * ; par, . Double_t & ; value . ). static . Get the value from the specified parameter from the specified collection. ; Returns -1 in case of error (i.e. list is 0, parameter does not exist or value type does not match), 0 otherwise. ; Definition at line 11995 of file TProof.cxx. ◆ GetParameter() [3/6]. Int_t TProof::GetParameter ; (; TCollection * ; c, . const char * ; par, . Int_t & ; value . ). static . Get the value from the specified parameter from the specified collection. ; Returns -1 in case of error (i.e. list is 0, parameter does not exist or value type does not match), 0 otherwise. ; Definition at line 11941 of file TProof.cxx. ◆ GetParameter() [4/6]. Int_t TProof::GetParameter ; (; TCollection * ; c, . const char * ; par, . Long64_t & ; value . ). static . Get the value from the specified parameter from the specified collection. ; Returns -1 in case of error (i.e. list is 0, parameter does not exist or value type does not match), 0 otherwise. ; Definition at line 11977 of file TProof.cxx. ◆ GetParameter() [5/6]. Int_t TProof::GetParameter ; (; TCollection * ; c, . const char * ; par, . Long_t & ; value . ). static . Get the value from the specified parameter from the specified collection. ; Returns -1 in case of error (i.e. list is 0, parameter does not exist or value type does not match), 0 otherwise. ; Definition at line 11959 of file TProof.cxx. ◆ GetParameter() [6/6]. Int_t TProof::GetParameter ; (; TCollection * ; c, . const char * ; par, . TString & ; value . ). static . Get the value from the specified parameter from the specified collection. ; Returns -1 in case of error (i.e. list is 0, parameter does not exist or value type does not match), 0 otherwise. ; Definition at line 11922 of file TProof.cxx. ◆ GetPlayer(). TVirtualProofPlayer * TProof::GetPlayer ; (; ); const. inlineprotected . Definition at line 716 of file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:102297,error,error,102297,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['error'],['error']
Availability,"efix.h; located in the current directory or in 'path/' if it is specified. The class generated will be named 'fileprefix'; ""macrofilename"" and optionally ""cutfilename"" are expected to point to source files which will be included by the generated skeleton. Method of the same name as the file(minus the extension and path) will be called by the generated skeleton's Process method as follow: [if (cutfilename())] htemp->Fill(macrofilename());; ""option"" can be used select some of the optional features during the code generation. The possible options are:. nohist : indicates that the generated ProcessFill should not fill the histogram. 'maxUnrolling' controls how deep in the class hierarchy does the system 'unroll' classes that are not split. Unrolling a class allows direct access to its data members (this emulates the behavior of TTreeFormula).; The main features of this skeleton are:. on-demand loading of branches; ability to use the 'branchname' as if it was a data member; protection against array out-of-bounds errors; ability to use the branch data as an object (when the user code is available). For example with Event.root, if Double_t somePx = fTracks.fPx[2];; double; is executed by one of the method of the skeleton, somePx will updated with the current value of fPx of the 3rd track.; Both macrofilename and the optional cutfilename are expected to be the name of source files which contain at least a free standing function with the signature: x_t macrofilename(); // i.e function with the same name as the file; and y_t cutfilename(); // i.e function with the same name as the file; x_t and y_t needs to be types that can convert respectively to a double and a bool (because the skeleton uses: if (cutfilename()) htemp->Fill(macrofilename());; These two functions are run in a context such that the branch names are available as local variables of the correct (read-only) type.; Note that if you use the same 'variable' twice, it is more efficient to 'cache' the value. For exampl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:176342,error,errors,176342,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,4,"['avail', 'error']","['available', 'errors']"
Availability,"efore filling the profile with weights.; 851/// Only by calling this method the sum of the square of the weights per bin is stored.; 852 ; 853Double_t TProfile::GetBinEffectiveEntries(Int_t bin) const; 854{; 855 return TProfileHelper::GetBinEffectiveEntries((TProfile*)this, bin);; 856}; 857 ; 858////////////////////////////////////////////////////////////////////////////////; 859/// Return bin error of a Profile histogram; 860///; 861/// Computing errors: A moving field; 862///; 863/// The computation of errors for a TProfile has evolved with the versions; 864/// of ROOT. The difficulty is in computing errors for bins with low statistics.; 865///; 866/// - prior to version 3.00, we had no special treatment of low statistic bins.; 867/// As a result, these bins had huge errors. The reason is that the; 868/// expression eprim2 is very close to 0 (rounding problems) or 0.; 869/// - in version 3.00 (18 Dec 2000), the algorithm is protected for values of; 870/// eprim2 very small and the bin errors set to the average bin errors, following; 871/// recommendations from a group of users.; 872/// - in version 3.01 (19 Apr 2001), it is realized that the algorithm above; 873/// should be applied only to low statistic bins.; 874/// - in version 3.02 (26 Sep 2001), the same group of users recommend instead; 875/// to take two times the average error on all bins for these low; 876/// statistics bins giving a very small value for eprim2.; 877/// - in version 3.04 (Nov 2002), the algorithm is modified/protected for the case; 878/// when a TProfile is projected (ProjectionX). The previous algorithm; 879/// generated a N^2 problem when projecting a TProfile with a large number of; 880/// bins (eg 100000).; 881/// - in version 3.05/06, a new static function TProfile::Approximate; 882/// is introduced to enable or disable (default) the approximation.; 883///; 884/// Ideas for improvements of this algorithm are welcome. No suggestions; 885/// received since our call for advice to roottal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile_8cxx_source.html:31719,error,errors,31719,doc/master/TProfile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile_8cxx_source.html,2,['error'],['errors']
Availability,"efore knowing the location of a point in the; geometry can be saved as a starting state for later use. Nodes can be declared as ""overlapping"" in case they do overlap with other; nodes inside the same container or extrude this container. Non-overlapping; nodes can be created with:. TGeoVolume::AddNode(TGeoVolume *daughter, Int_t copy_No, TGeoMatrix *matr);. The creation of overapping nodes can be done with a similar prototype:. TGeoVolume::AddNodeOverlap(same arguments);. When closing the geometry, overlapping nodes perform a check of possible; overlaps with their neighbours. These are stored and checked all the time; during navigation, therefore navigation is slower when embedding such nodes; into geometry. Node have visualization attributes as volume have. When undefined by users,; painting a node on a pad will take the corresponding volume attributes. /*. */. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TGeoNode(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); virtual voidcd() const; voidCheckOverlaps(Double_t ovlp = 0.1, Option_t* option = """")MENU ; voidCheckShapes(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; Int_tCountDaughters(Bool_t unique_volumes = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidDrawOnly(Option_t* option = """"); voidDrawOverlaps(); virtual voidTObject::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoNode.html:3380,avail,available,3380,root/html528/TGeoNode.html,https://root.cern,https://root.cern/root/html528/TGeoNode.html,6,['avail'],['available']
Availability,"efore knowing the location of a point in the; geometry can be saved as a starting state for later use. Nodes can be declared as ""overlapping"" in case they do overlap with other; nodes inside the same container or extrude this container. Non-overlapping; nodes can be created with:. TGeoVolume::AddNode(TGeoVolume *daughter, Int_t copy_No, TGeoMatrix *matr);. The creation of overapping nodes can be done with a similar prototype:. TGeoVolume::AddNodeOverlap(same arguments);. When closing the geometry, overlapping nodes perform a check of possible; overlaps with their neighbours. These are stored and checked all the time; during navigation, therefore navigation is slower when embedding such nodes; into geometry. Node have visualization attributes as volume have. When undefined by users,; painting a node on a pad will take the corresponding volume attributes. /*. */. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TGeoNode(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); virtual voidcd() const; voidCheckOverlaps(Double_t ovlp = 0.10000000000000001, Option_t* option = """")MENU ; voidCheckShapes(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; Int_tCountDaughters(Bool_t unique_volumes = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidDrawOnly(Option_t* option = """"); voidDrawOverlaps(); virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoNode.html:3380,avail,available,3380,root/html602/TGeoNode.html,https://root.cern,https://root.cern/root/html602/TGeoNode.html,4,['avail'],['available']
Availability,"eful for obtaining a ‘real world’ views. The degree of foreshortening is affected by the current camera field of view (focal length of its ‘lens’) - see “Adjusting Cameras”.; Orthographic: Distance from camera does not affect object size. These projections are useful for measurement or checking alignments, as the sizes and angles between objects are preserved. You can select the active camera from the viewer’s Camera menu on the top menu bar. There are three perspective camera choices:. Perspective (Floor XOZ) Default; Perspective (Floor YOZ); Perspective (Floor XOY). In each case the perspective camera is constrained to keep the chosen floor plane, defined by a pair of world axes, appearing level at all times - i.e. there is no banking of the ‘horizon’ that you experience when a plane rolls. There are also three orthographic camera choices:. Orthographic (XOY); Orthographic (XOZ); Orthographic (ZOY). Orthographic projections are generally constrained to look down one of the global axes of the world, with the other two axes lying horizontal/vertical on the viewer window. Therefore, XOY has the X-axis horizontal, the Y-axis vertical. You can always confirm the orientation and constraints of the camera in the world by enabling axis drawing in the “Guides” tab - see sections “Guides” and “Clipping” below. For orthographic camera a ruler-depicting current scene units is also available.; You can also pick the current camera by obtaining a handle to the GL Viewer object behind the interface:; TGLViewer * v = (TGLViewer *)gPad->GetViewer3D();; calling the method TGLViewer::SetCurrentCamera with one of the TGLViewer::ECameraType types:; v->SetCurrentCamera(TGLViewer::kCameraPerspXOZ);; See also $ROOTSYS/tutorials/gl/glViewerExercise.C.; 9.13.2.2 Adjusting Cameras; The interactions with the camera are summarized above. In each case the interaction is listed, along with description and user actions required to achieve it. For all cameras you can reset the original default view",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:389530,down,down,389530,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['down'],['down']
Availability,"egative it indicates the compression level is not set yet. The enumeration ROOT::ECompressionAlgorithm associates each; algorithm with a number. There is a utility function to help; to set the value of compress. For example,; ROOT::CompressionSettings(ROOT::kLZMA, 1); will build an integer which will set the compression to use; the LZMA algorithm and compression level 1. These are defined; in the header file Compression.h. Note that the compression settings may be changed at any time.; The new compression settings will only apply to branches created; or attached after the setting is changed and other objects written; after the setting is changed. In case the file does not exist or is not a valid ROOT file,; it is made a Zombie. One can detect this situation with a code like:; TFile f(""file.root"");; if (f.IsZombie()) {; std::cout << ""Error opening file"" << std::endl;; exit(-1);; }. When opening the file, the system checks the validity of this directory.; If something wrong is detected, an automatic Recovery is performed. In; this case, the file is scanned sequentially reading all logical blocks; and attempting to rebuild a correct directory (see TFile::Recover).; One can disable the automatic recovery procedure when reading one; or more files by setting the environment variable ""TFile.Recover: 0""; in the system.rootrc file. TFile(const TFile& ); TFile objects can not be copied. ~TFile(); File destructor. void Init(Bool_t create); Initialize a TFile object.; TFile implementations providing asynchronous open functionality need to; override this method to run the appropriate checks before calling this; standard initialization part. See TXNetFile::Init for an example. void Close(Option_t* option = """"); Close a file.; If option == ""R"", all TProcessIDs referenced by this file are deleted.; Calling TFile::Close(""R"") might be necessary in case one reads a long list; of files having TRef, writing some of the referenced objects or TRef; to a new file. If the TRef or referenced ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFile.html:28356,Recover,Recovery,28356,root/html602/TFile.html,https://root.cern,https://root.cern/root/html602/TFile.html,2,['Recover'],['Recovery']
Availability,"egexp = """"). virtual . List the loaded shared libraries. ; regexp is a regular expression allowing to filter the list.; Examples:; The following line lists all the libraries currently loaded: gSystem->ListLibraries(); TSystem::ListLibrariesvirtual void ListLibraries(const char *regexp="""")List the loaded shared libraries.Definition TSystem.cxx:2085; The following line lists all the libraries currently loaded having ""RIO"" in their names: gSystem->ListLibraries("".*RIO.*""). Reimplemented in TUnixSystem.; Definition at line 2085 of file TSystem.cxx. ◆ ListSymbols(). void TSystem::ListSymbols ; (; const char * ; module, . const char * ; re = """" . ). virtual . List symbols in a shared library. ; Reimplemented in TUnixSystem.; Definition at line 2064 of file TSystem.cxx. ◆ Load(). int TSystem::Load ; (; const char * ; module, . const char * ; entry = """", . Bool_t ; system = kFALSE . ). virtual . Load a shared library. ; Returns 0 on successful loading, 1 in case lib was already loaded, -1 in case lib does not exist or in case of error and -2 in case of version mismatch. When entry is specified the loaded lib is searched for this entry point (return -1 when entry does not exist, 0 otherwise). When the system flag is kTRUE, the library is considered a permanent system library that should not be unloaded during the course of the session. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 1857 of file TSystem.cxx. ◆ LoadAllLibraries(). UInt_t TSystem::LoadAllLibraries ; (; ). virtual . Load all libraries known to ROOT via the rootmap system. ; Returns the number of top level libraries successfully loaded. ; Definition at line 1970 of file TSystem.cxx. ◆ MakeDirectory(). int TSystem::MakeDirectory ; (; const char * ; name). virtual . Make a directory. ; Returns 0 in case of success and -1 if the directory could not be created (either already exists or illegal path name). ; Reimplemented in TDavixSystem, TNetXNGSystem, TUnixSystem, TWinNTSystem, TDCacheSystem, T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystem.html:73215,error,error,73215,doc/master/classTSystem.html,https://root.cern,https://root.cern/doc/master/classTSystem.html,1,['error'],['error']
Availability,"egin'); CREATE TABLE proofquerydsets ( id int(11) NOT NULL auto_increment, dsn varchar(512) NOT NULL, querytag varchar(64) NOT NULL, numfiles int(11) default NULL, missfiles int(11) default NULL, PRIMARY KEY (id), KEY ix_querytag (querytag) );; The information is posted with a bulk insert.; Returns 0 on success, -1 on failure. ; Implements TProofMonSender.; Definition at line 255 of file TProofMonSenderSQL.cxx. ◆ SendFileInfo(). Int_t TProofMonSenderSQL::SendFileInfo ; (; TDSet * ; dset, . TList * ; missing, . const char * ; begin, . const char * ; qid . ). overridevirtual . Post information about the requested files. ; The information is taken from the TDSet object 'dset' and integrated with the missing files information in the list 'missing'. The string 'qid' is the unique ID of the query; 'begin' the starting time.; The record is formatted for the table 'proofqueryfiles'.; There are two versions of this record, with or without the starting time. The starting time could be looked up from the summary record, if available.; The default version 1 corresponds to the table created with the following command:; CREATE TABLE proofqueryfiles ( id int(11) NOT NULL auto_increment, lfn varchar(255) NOT NULL, path varchar(2048) NOT NULL, querytag varchar(64) NOT NULL, querybegin datetime default NULL, status enum('Ok','Failed') NOT NULL default 'Ok', PRIMARY KEY (id), KEY ix_querytag (querytag) );; Version 0 corresponds to the table created with the following command: (no 'querybegin'); CREATE TABLE proofqueryfiles ( id int(11) NOT NULL auto_increment, lfn varchar(255) NOT NULL, path varchar(2048) NOT NULL, querytag varchar(64) NOT NULL, status enum('Ok','Failed') NOT NULL default 'Ok', PRIMARY KEY (id), KEY ix_querytag (querytag) );; The information is posted with a bulk insert.; Returns 0 on success, -1 on failure. ; Implements TProofMonSender.; Definition at line 416 of file TProofMonSenderSQL.cxx. ◆ SendSummary(). Int_t TProofMonSenderSQL::SendSummary ; (; TList * ; recs, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofMonSenderSQL.html:16238,avail,available,16238,doc/master/classTProofMonSenderSQL.html,https://root.cern,https://root.cern/doc/master/classTProofMonSenderSQL.html,1,['avail'],['available']
Availability,"egin() const. TemplateParameterDefault_End() const. TemplateParameterDefault_RBegin() const. TemplateParameterDefault_REnd() const. TemplateParameterNameAt(size_t nth) const. TemplateParameterName_Begin() const. TemplateParameterName_End() const. TemplateParameterName_RBegin() const. TemplateParameterName_REnd() const. TypeTemplateSize(). TypeTemplate ByName(const string& name, size_t nTemplateParams = 0). * ByName will return a type template corresponding to the argument name; * @param type template name to lookup; * @param nTemplateParams looks up the template family with this number of template parameters; * if it is set to 0, the first occurence of the template family name will be returned; * @return corresponding type template to name. std::string Name(unsigned int mod = 0) const. * Id will return a memory address which is a unique id for this type template; * @return unique id of this type template. * Name will return the Name of the template family and a list of; * all currently available instantiations; * @return template family Name with all instantiantion. Type_Iterator TemplateInstance_Begin() const. * TemplateInstance_Begin returns the begin iterator of the instance container; * @return the begin iterator of the instance container. Type_Iterator TemplateInstance_End() const. * TemplateInstance_End returns the end iterator of the instance container; * @return the end iterator of the instance container. Reverse_Type_Iterator TemplateInstance_RBegin() const. * TemplateInstance_RBegin returns the rbegin iterator of the instance container; * @return the rbegin iterator of the instance container. Reverse_Type_Iterator TemplateInstance_REnd() const. * TemplateInstance_Rend returns the rend iterator of the instance container; * @return the rend iterator of the instance container. Type TemplateInstanceAt(size_t nth) const. * TemplateInstanceAt will return a pointer to the nth template instantion; * @param nth template instantion; * @return pointer to nth template",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/Reflex__TypeTemplate.html:3593,avail,available,3593,root/html526/Reflex__TypeTemplate.html,https://root.cern,https://root.cern/root/html526/Reflex__TypeTemplate.html,6,['avail'],['available']
Availability,"egin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t ex, Double_t ey); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t ex, Double_t ey); Set ex and ey values for point number i. void Streamer(TBuffer& b); Stream an object of class TGraphErrors. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t ** Allocate(Int_t size). Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. » Author: Rene Brun 15/09/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: TGraphErrors.h 24702 2008-07-08 12:01:46Z brun $ » Last generated: 2010-09-23 20:10; This page has been automa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphErrors.html:18185,error,error,18185,root/html528/TGraphErrors.html,https://root.cern,https://root.cern/root/html528/TGraphErrors.html,1,['error'],['error']
Availability,"egin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t ex, Double_t ey); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t ex, Double_t ey); Set ex and ey values for point number i. void Streamer(TBuffer& b); Stream an object of class TGraphErrors. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t ** Allocate(Int_t size). Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. » Author: Rene Brun 15/09/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: TGraphErrors.h 24702 2008-07-08 12:01:46Z brun $ » Last generated: 2011-07-04 15:32; This page has been automa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGraphErrors.html:18347,error,error,18347,root/html530/TGraphErrors.html,https://root.cern,https://root.cern/root/html530/TGraphErrors.html,1,['error'],['error']
Availability,"egin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t ex, Double_t ey); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t ex, Double_t ey); Set ex and ey values for point number i. void Streamer(TBuffer& b); Stream an object of class TGraphErrors. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t ** Allocate(Int_t size). Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. » Author: Rene Brun 15/09/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: TGraphErrors.h 24702 2008-07-08 12:01:46Z brun $ » Last generated: 2011-11-03 20:17; This page has been automa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGraphErrors.html:18764,error,error,18764,root/html532/TGraphErrors.html,https://root.cern,https://root.cern/root/html532/TGraphErrors.html,2,['error'],['error']
Availability,"egin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate.; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Int_t Merge(TCollection* list); Adds all graphs with errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t ex, Double_t ey); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t ex, Double_t ey); Set ex and ey values for point number i. void Streamer(TBuffer& ); Stream an object of class TGraphErrors. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t ** Allocate(Int_t size). Double_t * Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraphErrors.html:19732,error,error,19732,root/html602/TGraphErrors.html,https://root.cern,https://root.cern/root/html602/TGraphErrors.html,4,['error'],['error']
Availability,"egin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate.; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t ex, Double_t ey); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t ex, Double_t ey); Set ex and ey values for point number i. void Streamer(TBuffer& ); Stream an object of class TGraphErrors. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t ** Allocate(Int_t size). Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. » Author: Rene Brun 15/09/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last change",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraphErrors.html:19243,error,error,19243,root/html534/TGraphErrors.html,https://root.cern,https://root.cern/root/html534/TGraphErrors.html,2,['error'],['error']
Availability,"egin, ItTarget itTargetEnd);  ; template<bool HasDropOut, typename ItSource , typename ItWeight , typename ItTarget , typename ItDrop > ; void applyWeights (ItSource itSourceBegin, ItSource itSourceEnd, ItWeight itWeight, ItTarget itTargetBegin, ItTarget itTargetEnd, ItDrop itDrop);  apply weights using drop-out; for no drop out, provide (&bool = true) to itDrop such that *itDrop becomes ""true"" ;  ; template<typename ItSource , typename ItWeight , typename ItPrev > ; void applyWeightsBackwards (ItSource itCurrBegin, ItSource itCurrEnd, ItWeight itWeight, ItPrev itPrevBegin, ItPrev itPrevEnd);  ; template<bool HasDropOut, typename ItSource , typename ItWeight , typename ItPrev , typename ItDrop > ; void applyWeightsBackwards (ItSource itCurrBegin, ItSource itCurrEnd, ItWeight itWeight, ItPrev itPrevBegin, ItPrev itPrevEnd, ItDrop itDrop);  apply weights backwards (for backprop); for no drop out, provide (&bool = true) to itDrop such that *itDrop becomes ""true"" ;  ; template<typename LAYERDATA > ; void backward (LAYERDATA &prevLayerData, LAYERDATA &currLayerData);  backward application of the weights (back-propagation of the error) ;  ; template<EnumRegularization Regularization> ; double computeRegularization (double weight, const double &factorWeightDecay);  compute the regularization (L1, L2) ;  ; template<> ; double computeRegularization< EnumRegularization::L1 > (double weight, const double &factorWeightDecay);  ; template<> ; double computeRegularization< EnumRegularization::L2 > (double weight, const double &factorWeightDecay);  ; template<typename ItProbability , typename ItTruth , typename ItDelta , typename ItInvActFnc > ; double crossEntropy (ItProbability itProbabilityBegin, ItProbability itProbabilityEnd, ItTruth itTruthBegin, ItTruth, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc, double patternWeight);  cross entropy error function ;  ; void cudaError (cudaError_t code, const char *file, int line, bool abort=true);  Function to check cuda return code.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:8518,error,error,8518,doc/master/namespaceTMVA_1_1DNN.html,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html,4,['error'],['error']
Availability,"egin, end]Definition TGraphAsymmErrors.cxx:1104; TGraphAsymmErrors::Dividevirtual void Divide(const TH1 *pass, const TH1 *total, Option_t *opt=""cp"")Fill this TGraphAsymmErrors by dividing two 1-dimensional histograms pass/total.Definition TGraphAsymmErrors.cxx:588; TGraphAsymmErrors::CtorAllocateBool_t CtorAllocate()Should be called from ctors after fNpoints has been set.Definition TGraphAsymmErrors.cxx:1061; TGraphAsymmErrors::Classstatic TClass * Class(); TGraphAsymmErrors::SetPointErrorvirtual void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh)Set ex and ey values for point pointed by the mouse.Definition TGraphAsymmErrors.cxx:1299; TGraphAsymmErrors::GetErrorXhighDouble_t GetErrorXhigh(Int_t i) const overrideGet high error on X.Definition TGraphAsymmErrors.cxx:1151; TGraphAsymmErrors::fEYhighDouble_t * fEYhigh[fNpoints] array of Y high errorsDefinition TGraphAsymmErrors.h:32; TGraphAsymmErrors::CopyPointsBool_t CopyPoints(Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy errors from fE*** to arrays[***] or to f*** Copy points.Definition TGraphAsymmErrors.cxx:1033; TGraphAsymmErrors::AddPointErrorvirtual void AddPointError(Double_t x, Double_t y, Double_t exl=0., Double_t exh=0., Double_t eyl=0., Double_t eyh=0.)Add a point with asymmetric errorbars to the graph.Definition TGraphAsymmErrors.cxx:451; TGraphAsymmErrors::ComputeRangevoid ComputeRange(Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const overrideCompute Range.Definition TGraphAsymmErrors.cxx:977; TGraphAsymmErrors::SetPointEXlowvirtual void SetPointEXlow(Int_t i, Double_t exl)Set EXlow for point i.Definition TGraphAsymmErrors.cxx:1348; TGraphAsymmErrors::Streamervoid Streamer(TBuffer &) overrideStream an object of class TGraphAsymmErrors.Definition TGraphAsymmErrors.cxx:1404; TGraphAsymmErrors::SetPointEYhighvirtual void SetPointEYhigh(Int_t i, Double_t eyh)Set EYhigh for point i.Definition TGraphAsymmErrors.cxx:1390; TGraphAsymmErrors::Save",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html:60187,error,errors,60187,doc/master/TGraphAsymmErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html,1,['error'],['errors']
Availability,"eginEvent(); virtual voidBeginPrimary(); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidConstructGeometry(); virtual voidConstructOpGeometry(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidField(const Double_t* x, Double_t* b) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFinishEvent(); virtual voidFinishPrimary(); virtual voidGeaneStepping(); virtual voidGeneratePrimaries(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualMCApplication.html:1745,error,error,1745,root/html528/TVirtualMCApplication.html,https://root.cern,https://root.cern/root/html528/TVirtualMCApplication.html,4,['error'],['error']
Availability,"egion(); voidTObject::AbstractMethod(const char* method) const; RooStats::AcceptanceRegionAcceptanceRegion(); RooStats::AcceptanceRegionAcceptanceRegion(const RooStats::AcceptanceRegion&); RooStats::AcceptanceRegionAcceptanceRegion(Int_t lu, Double_t ll, Double_t ul); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Int_tGetLookupIndex(); Double_tGetLowerLimit(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetUpperLimit(); virtual Bool_tTObject:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__AcceptanceRegion.html:1374,Error,Error,1374,root/html532/RooStats__AcceptanceRegion.html,https://root.cern,https://root.cern/root/html532/RooStats__AcceptanceRegion.html,4,['Error'],['Error']
Availability,"egisterProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooRealProxy c;  ; RooRealProxy m;  ; RooRealProxy m0;  ; RooRealProxy p;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooArgusBG.html:67796,error,errors,67796,doc/master/classRooArgusBG.html,https://root.cern,https://root.cern/doc/master/classRooArgusBG.html,1,['error'],['errors']
Availability,"egoryLValue::setIndex ; (; value_type ; index, . bool ; printError = true . ). virtual . Change category state by specifying the index code of the desired state. ; If printError is set, a message will be printed if the specified index does not represent a valid state. Returnsbool to signal an error. ; Implements RooAbsCategoryLValue. ◆ setLabel() [1/4]. bool RooSuperCategory::setLabel ; (; const char * ; label, . bool ; printError = true . ). overridevirtual . Set the value of the super category by specifying the state name. ; This looks up the corresponding index number, and calls setIndex(). ; Implements RooAbsCategoryLValue.; Definition at line 119 of file RooSuperCategory.cxx. ◆ setLabel() [2/4]. virtual bool RooAbsCategoryLValue::setLabel ; (; const char * ; label, . bool ; printError = true . ). virtual . Change category state by specifying a state name. ; If printError is set, a message will be printed if the specified state name does not represent a valid state. Returnsbool to signal an error. ; Implements RooAbsCategoryLValue. ◆ setLabel() [3/4]. bool RooAbsCategoryLValue::setLabel ; (; const std::pair< std::string, value_type > & ; nameIdxPair, . bool ; printError = true . ). inline . Change category state to the state name of another category. ; If printError is set, a message will be printed if the specified state name does not represent a valid state. NoteThe state index of the other category is ignored. ; Returnsbool to signal an error. ; Definition at line 69 of file RooAbsCategoryLValue.h. ◆ setLabel() [4/4]. bool RooAbsCategoryLValue::setLabel ; (; const std::string & ; label, . bool ; printError = true . ). inline . Set the value of the super category by specifying the state name. ; This looks up the corresponding index number, and calls setIndex(). ; Definition at line 60 of file RooAbsCategoryLValue.h. ◆ Streamer(). void RooSuperCategory::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSuperCategory.html:53767,error,error,53767,doc/master/classRooSuperCategory.html,https://root.cern,https://root.cern/doc/master/classRooSuperCategory.html,1,['error'],['error']
Availability,"egrates over. The following named arguments are accepted. SupNormSet(const RooArgSet&) -- Observables over which should be normalized _in_addition_ to the; integration observables; ScanNumCdf() -- Apply scanning technique if cdf integral involves numeric integration [ default ]; ScanAllCdf() -- Always apply scanning technique; ScanNoCdf() -- Never apply scanning technique; ScanParameters(Int_t nbins, -- Parameters for scanning technique of making CDF: number; Int_t intOrder) of sampled bins and order of interpolation applied on numeric cdf. RooAbsReal* createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder). RooArgSet* getAllConstraints(const RooArgSet& observables, RooArgSet& constrainedParams, Bool_t stripDisconnected = kTRUE) const; This helper function finds and collects all constraints terms of all coponent p.d.f.s; and returns a RooArgSet with all those terms. void clearEvalError(); Clear the evaluation error flag. Bool_t evalError(); Return the evaluation error flag. void raiseEvalError(); Raise the evaluation error flag. RooNumGenConfig* defaultGeneratorConfig(); Returns the default numeric MC generator configuration for all RooAbsReals. RooNumGenConfig* specialGeneratorConfig() const; Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned. RooNumGenConfig* specialGeneratorConfig(Bool_t createOnTheFly); Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned,; unless createOnTheFly is kTRUE in which case a clone of the default integrator; configuration is created, installed as specialized configuration, and returned. const RooNumGenConfig* getGeneratorConfig() const; Return the numeric MC generator configuration used for this object. If; a specialized configuration was associated with this object, that configuration; is returned, otherw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsPdf.html:77450,error,error,77450,root/html528/RooAbsPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsPdf.html,9,['error'],['error']
Availability,"egratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). protected:. boolCheckFunction(). private:. ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::GSLIntegrator&); ROOT::Math::GSLIntegrator&operator=(const ROOT::Math::GSLIntegrator&). Data Members; private:. doublefAbsTol; doublefError; ROOT::Math::GSLFunctionWrapper*fFunction; size_tfMaxIntervals; intfNEval; doublefRelTol; doublefResult; ROOT::Math::Integration::GKRulefRule; size_tfSize; intfStatus; ROOT::Math::Integration::TypefType; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GSLIntegrator.html:5402,Error,Error,5402,root/html602/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GSLIntegrator.html,4,['Error'],['Error']
Availability,"egular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsCollection.html:16645,error,error,16645,doc/v632/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/v632/classRooAbsCollection.html,4,['error'],['error']
Availability,"egular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCatType.html:3633,error,error,3633,doc/master/classRooCatType.html,https://root.cern,https://root.cern/doc/master/classRooCatType.html,1,['error'],['error']
Availability,"egular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMethodCall.html:7760,error,error,7760,doc/master/classTMethodCall.html,https://root.cern,https://root.cern/doc/master/classTMethodCall.html,1,['error'],['error']
Availability,"egular expressions; helper function to remove all occurences ""$!%^&()'<>?= "" from a string; and replace all ::,$,*,/,+,- with _M_,_S_,_T_,_D_,_P_,_M_ respectively. const TString& Color(const TString& ); human readable color strings. void FormattedOutput(const vector<Double_t>& , const vector<TString>& , const TString titleVars, const TString titleValues, TMVA::MsgLogger& logger, TString format = ""%+1.3f""); formatted output of simple table. void FormattedOutput(const TMatrixD& , const vector<TString>& , TMVA::MsgLogger& logger); formatted output of matrix (with labels). void FormattedOutput(const TMatrixD& , const vector<TString>& vert, const vector<TString>& horiz, TMVA::MsgLogger& logger); formatted output of matrix (with labels). TString GetXTitleWithUnit(const TString& title, const TString& unit); histogramming utility. TString GetYTitleWithUnit(const TH1& h, const TString& unit, Bool_t normalised); histogramming utility. void WriteFloatArbitraryPrecision(Float_t val, ostream& os); writes a float value with the available precision to a stream. void ReadFloatArbitraryPrecision(Float_t& val, istream& is); reads a float value with the available precision from a stream. Bool_t HasAttr(void* node, const char* attrname); add attribute from xml. void ReadAttr(void* node, const char* attrname, TString& value); add attribute from xml. void AddAttr(void* node, const char* attrname, const char* value); add attribute to node. void* AddChild(void* parent, const char* childname, const char* content = 0, bool isRootNode = false). Bool_t AddComment(void* node, const char* comment). void* GetParent(void* child). void* GetChild(void* parent, const char* childname = 0). void* GetNextChild(void* prevchild, const char* childname = 0); XML helpers. const char* GetContent(void* node); XML helpers. const char* GetName(void* node); XML helpers. Bool_t AddRawLine(void* node, const char* raw); XML helpers. std::vector<TString> SplitString(const TString& theOpt, const char separator) const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Tools.html:9939,avail,available,9939,root/html528/TMVA__Tools.html,https://root.cern,https://root.cern/root/html528/TMVA__Tools.html,1,['avail'],['available']
Availability,"egular expressions; helper function to remove all occurences ""$!%^&()'<>?= "" from a string; and replace all ::,$,*,/,+,- with _M_,_S_,_T_,_D_,_P_,_M_ respectively. const TString& Color(const TString& ); human readable color strings. void FormattedOutput(const vector<Double_t>& , const vector<TString>& , const TString titleVars, const TString titleValues, TMVA::MsgLogger& logger, TString format = ""%+1.3f""); formatted output of simple table. void FormattedOutput(const TMatrixD& , const vector<TString>& , TMVA::MsgLogger& logger); formatted output of matrix (with labels). void FormattedOutput(const TMatrixD& , const vector<TString>& vert, const vector<TString>& horiz, TMVA::MsgLogger& logger); formatted output of matrix (with labels). TString GetXTitleWithUnit(const TString& title, const TString& unit); histogramming utility. TString GetYTitleWithUnit(const TH1& h, const TString& unit, Bool_t normalised); histogramming utility. void WriteFloatArbitraryPrecision(Float_t val, ostream& os); writes a float value with the available precision to a stream. void ReadFloatArbitraryPrecision(Float_t& val, istream& is); reads a float value with the available precision from a stream. Bool_t HasAttr(void* node, const char* attrname); add attribute from xml. void ReadAttr(void* node, const char* attrname, TString& value); add attribute from xml. void AddAttr(void* node, const char* attrname, const char* value); add attribute to node. void* AddChild(void* parent, const char* childname, const char* content = 0, bool isRootNode = false); add child node. Bool_t AddComment(void* node, const char* comment). void* GetParent(void* child); get parent node. void* GetChild(void* parent, const char* childname = 0); get child node. void* GetNextChild(void* prevchild, const char* childname = 0); XML helpers. const char* GetContent(void* node); XML helpers. const char* GetName(void* node); XML helpers. Bool_t AddRawLine(void* node, const char* raw); XML helpers. std::vector<TString> SplitString(co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__Tools.html:9987,avail,available,9987,root/html530/TMVA__Tools.html,https://root.cern,https://root.cern/root/html530/TMVA__Tools.html,9,['avail'],['available']
Availability,"egy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumMinimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__ModularFunctionMinimizer.html:2301,toler,toler,2301,root/html526/ROOT__Minuit2__ModularFunctionMinimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__ModularFunctionMinimizer.html,7,['toler'],['toler']
Availability,"egy() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); doubleROOT::Math::Minimizer::Tolerance() const; static boolUseStaticMinuit(bool on = true); virtual intVariableIndex(const string& name) const; virtual stringVariableName(unsigned int ivar) const; virtual const double*X() const. protected:. voidDoClear(); voidDoReleaseFixParameter(int ivar); static voidFcn(int&, double*, double& f, double*, int); static voidFcnGrad(int&, double* g, double& f, double*, int); voidInitTMinuit(int ndim); voidRetrieveErrorMatrix(); voidRetrieveParams(). private:. TMinuitMinimizer(const TMinuitMinimizer&); TMinuitMinimizer&operator=(const TMinuitMinimizer& rhs). Data Members; protected:. intROOT::Math::Minimizer::fDebugprint level; unsigned intROOT::Math::Minimizer::fMaxCallsmax number of function calls ; unsigned intROOT::Math::Minimizer::fMaxItermax number or iterations used to find the minimum; doubleROOT::Math::Minimizer::fPrecprecision; intROOT::Math::Minimizer::fStatusstatus of minimizer ; intROOT::Math::Minimizer::fStrategyminimizer strategy; doubleROOT::Math::Minimizer::fToltolerance (absolute); doubleROOT::Math::Minimizer::fUperror scale ; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. vector<double>fCovar; unsigned intfDim; vector<double>fErrors; boolfMinosRun; TMinuit*fMinuit; vector<double>fParams; unsigned intfStrategy; ROOT::Minuit::EMinimizerTypefType; boolfUsed; static ROOT::Math::IBaseFunctionMultiDim*fgFunc; static TMinuit*fgMinuit; static boolfgUseStaticMinuitflag to control if using global TMInuit instance (gMinuit); static boolfgUsedflag to control if static instance has done minimization. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMinuitMinimizer(ROOT::Minuit::EMinimizerType type = ROOT::Minuit::kMigrad, unsigned int ndim = 0); Constructor for TMinuitMinimier class via an enumeration specifying the minim",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMinuitMinimizer.html:4971,error,errors,4971,root/html528/TMinuitMinimizer.html,https://root.cern,https://root.cern/root/html528/TMinuitMinimizer.html,2,['error'],['errors']
Availability,"eight. (Dummy implementation returning zero). RooPlot* plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()) const; Plot dataset on specified frame. By default an unbinned dataset will use the default binning of; the target frame. A binned dataset will by default retain its intrinsic binning. The following optional named arguments can be used to modify the default behavior. Data representation options. Asymmetry(const RooCategory& c) -- Show the asymmetry of the daya in given two-state category [F(+)-F(-)] / [F(+)+F(-)].; Category must have two states with indices -1 and +1 or three states with indeces -1,0 and +1.; DataError(RooAbsData::EType) -- Select the type of error drawn: Poisson (default) draws asymmetric Poisson; confidence intervals. SumW2 draws symmetric sum-of-weights error; Binning(double xlo, double xhi, -- Use specified binning to draw dataset; int nbins); Binning(const RooAbsBinning&) -- Use specified binning to draw dataset; Binning(const char* name) -- Use binning with specified name to draw dataset; RefreshNorm(Bool_t flag) -- Force refreshing for PDF normalization information in frame.; If set, any subsequent PDF will normalize to this dataset, even if it is; not the first one added to the frame. By default only the 1st dataset; added to a frame will update the normalization information; Rescale(Double_t factor) -- Apply global rescaling factor to histogram. Histogram drawing options. DrawOption(const char* opt) -- Select ROOT draw option for resulting TGraph object; LineStyle(Int_t style) -- Select line style by ROOT line style code, default is solid; LineColor(Int_t color) -- Select line color by ROOT color code, default is black; LineWid",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsData.html:18225,error,error,18225,root/html526/RooAbsData.html,https://root.cern,https://root.cern/root/html526/RooAbsData.html,4,['error'],['error']
Availability,"eight. (Dummy implementation returning zero). RooPlot* plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()) const; Plot dataset on specified frame. By default an unbinned dataset will use the default binning of; the target frame. A binned dataset will by default retain its intrinsic binning. The following optional named arguments can be used to modify the default behavior. Data representation options. Asymmetry(const RooCategory& c) -- Show the asymmetry of the daya in given two-state category [F(+)-F(-)] / [F(+)+F(-)].; Category must have two states with indices -1 and +1 or three states with indeces -1,0 and +1.; DataError(RooAbsData::EType) -- Select the type of error drawn: Poisson (default) draws asymmetric Poisson; confidence intervals. SumW2 draws symmetric sum-of-weights error; Binning(int nbins, double xlo, -- Use specified binning to draw dataset; double xhi); Binning(const RooAbsBinning&) -- Use specified binning to draw dataset; Binning(const char* name) -- Use binning with specified name to draw dataset; RefreshNorm(Bool_t flag) -- Force refreshing for PDF normalization information in frame.; If set, any subsequent PDF will normalize to this dataset, even if it is; not the first one added to the frame. By default only the 1st dataset; added to a frame will update the normalization information; Rescale(Double_t factor) -- Apply global rescaling factor to histogram. Histogram drawing options. DrawOption(const char* opt) -- Select ROOT draw option for resulting TGraph object; LineStyle(Int_t style) -- Select line style by ROOT line style code, default is solid; LineColor(Int_t color) -- Select line color by ROOT color code, default is black; LineWid",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsData.html:19416,error,error,19416,root/html534/RooAbsData.html,https://root.cern,https://root.cern/root/html534/RooAbsData.html,6,['error'],['error']
Availability,"eights"");; 2591 /// ~~~; 2592 ///; 2593 template <typename V = RDFDetail::RInferredType, typename W = RDFDetail::RInferredType>; 2594 RResultPtr<TStatistic> Stats(std::string_view value, std::string_view weight); 2595 {; 2596 ColumnNames_t columns{std::string(value), std::string(weight)};; 2597 constexpr auto vIsInferred = std::is_same<V, RDFDetail::RInferredType>::value;; 2598 constexpr auto wIsInferred = std::is_same<W, RDFDetail::RInferredType>::value;; 2599 const auto validColumnNames = GetValidatedColumnNames(2, columns);; 2600 // We have 3 cases:; 2601 // 1. Both types are inferred: we use Fill and let the jit kick in.; 2602 // 2. One of the two types is explicit and the other one is inferred: the case is not supported.; 2603 // 3. Both types are explicit: we invoke the fully compiled Fill method.; 2604 if (vIsInferred && wIsInferred) {; 2605 return Fill(TStatistic(), validColumnNames);; 2606 } else if (vIsInferred != wIsInferred) {; 2607 std::string error(""The "");; 2608 error += vIsInferred ? ""value "" : ""weight "";; 2609 error += ""column type is explicit, while the "";; 2610 error += vIsInferred ? ""weight "" : ""value "";; 2611 error += "" is specified to be inferred. This case is not supported: please specify both types or none."";; 2612 throw std::runtime_error(error);; 2613 } else {; 2614 return Fill<V, W>(TStatistic(), validColumnNames);; 2615 }; 2616 }; 2617 ; 2618 ////////////////////////////////////////////////////////////////////////////; 2619 /// \brief Return the minimum of processed column values (*lazy action*).; 2620 /// \tparam T The type of the branch/column.; 2621 /// \param[in] columnName The name of the branch/column to be treated.; 2622 /// \return the minimum value of the selected column wrapped in a RResultPtr.; 2623 ///; 2624 /// If T is not specified, RDataFrame will infer it from the data and just-in-time compile the correct; 2625 /// template specialization of this method.; 2626 /// If the type of the column is inferred, the return type is `d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:146395,error,error,146395,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,5,['error'],['error']
Availability,"eights*-*-*-*-*-*-*-*. if histogram is already filled, the sum of squares of weights; is filled with the existing bin contents. The error per bin will be computed as sqrt(sum of squares of weight); for each bin. This function is automatically called when the histogram is created; if the static function TH1::SetDefaultSumw2 has been called before.; If flag = false the structure is deleted. TF1 * GetFunction(const char* name) const; -*-*-*Return pointer to function with name*-*-*-*-*-*-*-*-*-*-*-*-*. Functions such as TH1::Fit store the fitted function in the list of; functions of this histogram. Double_t GetBinError(Int_t bin) const; -*-*-*-*-*Return value of error associated to bin number bin*-*-*-*-*. if the sum of squares of weights has been defined (via Sumw2),; this function returns the sqrt(sum of w2).; otherwise it returns the sqrt(contents) for this bin. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. Double_t GetBinErrorLow(Int_t bin) const; -*-*-*-*-*Return lower error associated to bin number bin*-*-*-*-*. The error will depend on the statistic option used will return; the binContent - lower interval value. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. Double_t GetBinErrorUp(Int_t bin) const; -*-*-*-*-*Return upper error associated to bin number bin*-*-*-*-*. The error will depend on the statistic option used will return; the binContent - upper interval value. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. Double_t GetBinError(Int_t binx, Int_t biny) const; -*-*-*-*-*Return error of bin number binx, biny. NB: Function to be called for 2-D histograms only. Double_t GetBinError(Int_t binx, Int_t biny, Int_t binz) const; -*-*-*-*-*Return error of bin number binx,biny,binz. NB: Function to be called for 3-D histograms only. Double_t GetCellContent(Int_t binx, Int_t biny) const; -*-*-*-*-*Return content of bin number binx, biny. NB: Function to be called for 2-D histograms only. Double_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1.html:126899,error,error,126899,root/html534/TH1.html,https://root.cern,https://root.cern/root/html534/TH1.html,2,['error'],['error']
Availability,"eimplemented from TSystem.; Definition at line 3108 of file TWinNTSystem.cxx. ◆ FreeDirectory(). void TWinNTSystem::FreeDirectory ; (; void * ; dirp). overridevirtual . Close a WinNT file system directory. ; Reimplemented from TSystem.; Definition at line 1944 of file TWinNTSystem.cxx. ◆ GetCpuInfo(). Int_t TWinNTSystem::GetCpuInfo ; (; CpuInfo_t * ; info, . Int_t ; sampleTime = 1000 . ); const. overridevirtual . Returns cpu load average and load info into the CpuInfo_t structure. ; Returns -1 in case of error, 0 otherwise. Use sampleTime to set the interval over which the CPU load will be measured, in ms (default 1000). ; Reimplemented from TSystem.; Definition at line 6133 of file TWinNTSystem.cxx. ◆ GetCPUTime(). Double_t TWinNTSystem::GetCPUTime ; (; ). Definition at line 4501 of file TWinNTSystem.cxx. ◆ GetCryptoRandom(). Int_t TWinNTSystem::GetCryptoRandom ; (; void * ; buf, . Int_t ; len . ). overridevirtual . Return cryptographic random number Fill provided buffer with random values Returns number of bytes written to buffer or -1 in case of error. ; Reimplemented from TSystem.; Definition at line 1273 of file TWinNTSystem.cxx. ◆ GetDirEntry(). const char * TWinNTSystem::GetDirEntry ; (; void * ; dirp). overridevirtual . Returns the next directory entry. ; Reimplemented from TSystem.; Definition at line 1960 of file TWinNTSystem.cxx. ◆ GetDirName(). TString TWinNTSystem::GetDirName ; (; const char * ; pathname). overridevirtual . Return the directory name in pathname. ; DirName of c:/user/root is /user. DirName of c:/user/root/ is /user/root. ; Reimplemented from TSystem.; Definition at line 2434 of file TWinNTSystem.cxx. ◆ GetDynamicPath(). const char * TWinNTSystem::GetDynamicPath ; (; ). overridevirtual . Return the dynamic path (used to find shared libraries). ; Reimplemented from TSystem.; Definition at line 4090 of file TWinNTSystem.cxx. ◆ GetEffectiveGid(). Int_t TWinNTSystem::GetEffectiveGid ; (; ). overridevirtual . Returns the effective group id. ; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWinNTSystem.html:49040,error,error,49040,doc/master/classTWinNTSystem.html,https://root.cern,https://root.cern/doc/master/classTWinNTSystem.html,1,['error'],['error']
Availability,"eing merged. It provides access to the output directory pointer (fOutputDirectory); to whether or not this is the first time Merge is being called in the; serie (for example for TTree, the first time we also need to Clone; the object on which Merge is called), and provides for a User Data; object to be passed along to each of the calls to Merge.; The fUserData object is owned by the TFileMergeInfo and will be; deleted when the TFileMerger moves on to the next set of objects. Function Members (Methods); public:. virtual~TFileMergeInfo(); static TClass*Class(); virtual TClass*IsA() const; voidReset(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TFileMergeInfo(TDirectory* outputfile). private:. TFileMergeInfo&operator=(const TFileMergeInfo&); TFileMergeInfo(); TFileMergeInfo(const TFileMergeInfo&). Data Members; public:. Bool_tfIsFirstTrue if this is the first call to Merge for this series of object.; TStringfOptionsAdditional text based option being passed down to customize the merge.; TDirectory*fOutputDirectoryTarget directory where the merged object will be written.; TObject*fUserDataPlace holder to pass extra information. This object will be deleted at the end of each series of objects. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFileMergeInfo(). TFileMergeInfo(const TFileMergeInfo& ). TFileMergeInfo& operator=(const TFileMergeInfo& ). TFileMergeInfo(TDirectory* outputfile); {}. virtual ~TFileMergeInfo(); { delete fUserData; }. void Reset(); { fIsFirst = kTRUE; delete fUserData; fUserData = 0; }. » Author: Philippe Canal May, 2011 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-06-30 14:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFileMergeInfo.html:1426,down,down,1426,root/html602/TFileMergeInfo.html,https://root.cern,https://root.cern/root/html602/TFileMergeInfo.html,2,['down'],['down']
Availability,"eing merged. It provides access to the output directory pointer (fOutputDirectory); to whether or not this is the first time Merge is being called in the; serie (for example for TTree, the first time we also need to Clone; the object on which Merge is called), and provides for a User Data; object to be passed along to each of the calls to Merge.; The fUserData object is owned by the TFileMergeInfo and will be; deleted when the TFileMerger moves on to the next set of objects. Function Members (Methods); public:. virtual~TFileMergeInfo(); static TClass*Class(); virtual TClass*IsA() const; voidReset(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TFileMergeInfo(TDirectory* outputfile). private:. TFileMergeInfo&operator=(const TFileMergeInfo&); TFileMergeInfo(); TFileMergeInfo(const TFileMergeInfo&). Data Members; public:. Bool_tfIsFirstTrue if this is the first call to Merge for this series of object.; TStringfOptionsAdditional text based option being passed down to customize the merge.; TDirectory*fOutputDirectoryTarget directory where the merged object will be written.; TObject*fUserDataPlace holder to pass extra information. This object will be deleted at the end of each series of objects. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFileMergeInfo(). TFileMergeInfo(const TFileMergeInfo& ). TFileMergeInfo& operator=(const TFileMergeInfo& ). TFileMergeInfo(TDirectory* outputfile); {}. virtual ~TFileMergeInfo(); { delete fUserData; }. void Reset(); { fIsFirst = kTRUE; delete fUserData; fUserData = 0; }. » Author: Philippe Canal May, 2011 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-09-08 17:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TFileMergeInfo.html:1426,down,down,1426,root/html604/TFileMergeInfo.html,https://root.cern,https://root.cern/root/html604/TFileMergeInfo.html,2,['down'],['down']
Availability,"eir smooth values.; Errors (if any) are not modified.; the smoothing procedure is repeated ntimes (default=1). void StatOverflows(Bool_t flag = kTRUE); if flag=kTRUE, underflows and overflows are used by the Fill functions; in the computation of statistics (mean value, RMS).; By default, underflows or overflows are not used. void Streamer(TBuffer& ); Stream a class object. void Print(Option_t* option = """") const; Print some global quantities for this histogram. If option ""base"" is given, number of bins and ranges are also printed; If option ""range"" is given, bin contents and errors are also printed; for all bins in the current range (default 1-->nbins); If option ""all"" is given, bin contents and errors are also printed; for all bins including under and overflows. void Rebuild(Option_t* option = """"); Using the current bin info, recompute the arrays for contents and errors. void Reset(Option_t* option = """"); Reset this histogram: contents, errors, etc. if option ""ICE"" is specified, resets only Integral, Contents and Errors.; if option ""ICES"" is specified, resets only Integral, Contents , Errors and Statistics; This option is used; if option ""M"" is specified, resets also Minimum and Maximum. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SavePrimitiveHelp(ostream& out, const char* hname, Option_t* option = """"); helper function for the SavePrimitive functions from TH1; or classes derived from TH1, eg TProfile, TProfile2D. void UseCurrentStyle(); Copy current attributes from/to current style. Double_t GetMean(Int_t axis = 1) const; For axis = 1,2 or 3 returns the mean value of the histogram along; X,Y or Z axis.; For axis = 11, 12, 13 returns the standard error of the mean value; of the histogram along X, Y or Z axis. Note that the mean value/RMS is computed using the bins in the currently; defined range (see TAxis::SetRange). By default the range includes; all bins from 1 to nbins included, excludi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1.html:109261,Error,Errors,109261,root/html602/TH1.html,https://root.cern,https://root.cern/root/html602/TH1.html,1,['Error'],['Errors']
Availability,"eiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Attributes; const TGMdiMainFrame * fMain;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Additional Inherited Members;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMdiContainer.html:21429,mask,mask,21429,doc/master/classTGMdiContainer.html,https://root.cern,https://root.cern/doc/master/classTGMdiContainer.html,1,['mask'],['mask']
Availability,"eiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTProofServ::DeletePlayer(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Int_tTProofServ::Fork(); virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; Int_tTProofServ::GetSessionStatus(); virtual voidTProofServ::HandleArchive(TMessage* mess, TString* slb = 0); virtual Int_tTProofServ::HandleCache(TMessage* mess, TString* slb = 0); virtual voidTProofServ::HandleCheckFile(TMessage* mess, TString* slb = 0); virtual Int_tTProofServ::HandleDataSets(TMessage* mess, TString* slb = 0); virtual voidTProofServ::HandleFork(TMessage* mess); virtual voidTProofServ::HandleLibIncPath(TMessage* mess); virtual voidTProofServ::HandleProcess(TMessage* mess, TString* slb = 0); virtual voidTProofServ::HandleQueryList(TMessage* mess); virtual voidTProofServ::HandleRemove(TMessage* mess, TString* slb = 0); virtual voidTProofServ::HandleRetrieve(TMessage* mess, TString* slb = 0); virtual voidTProofServ::HandleSubmerger(TMessage* mess); virtual Int_tTProofServ::HandleWorkerLists(TMessage* mess); virtual voidTApplication::Help(const char* line); Bool_tTProofServ::IsIdle(); virtual voidTApplication::LoadGraphicsLibs(); virtual voidTApplication::MakeBatch(); virtual voidTProofServ::MakePlayer(); voidTObject::MakeZombie(); static TApplication*TApplication::Open(const char* url, Int_t debug, const char* script); static Int_tTApplication::ParseRemoteLine(const char* ln, TString& hostdir, TString& user, Int_t& dbg, TString& script); virtual voidTProofServ::ProcessNext(TString* slb = 0); virtual Long_tTApplication::ProcessRemote(const char* line, Int_t* error = 0); voidTApplication::SetSignalHandler(TSignalHandler* sh); Int_tTProofServ::SetupCommon(); Bool_tTProofServ::UnlinkDataDir(const char* path).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TXProofServ.html:15433,error,error,15433,root/html530/TXProofServ.html,https://root.cern,https://root.cern/root/html530/TXProofServ.html,5,['error'],['error']
Availability,"el(TH1*, TH1*, TH1*, TVectorD*, TVectorD*, TObjArray*); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TObjArray*GetBackground(); virtual TObjArray*GetCandidates(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TObjArray*GetErrorNames(); virtual TObjArray*GetErrorOnBackground(); virtual TObjArray*GetErrorOnSignal(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TObjArray*GetSignal(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLimitDataSource.html:1726,error,error,1726,root/html528/TLimitDataSource.html,https://root.cern,https://root.cern/root/html528/TLimitDataSource.html,10,['error'],['error']
Availability,"el(df_data_doubleel); ; df_h_data_4el = df_data_4el_reco.Define(""weight"", ""1.0"")\; .Histo1D((""h_data_4el"", """", nbins, 70, 180), ""H_mass"", ""weight""); ; # Reconstruct Higgs to 2 electrons and 2 muons; df_sig_2el2mu_reco = reco_higgs_to_2el2mu(df_sig_4l); ; df_h_sig_2el2mu = df_sig_2el2mu_reco.Define(""weight"", ""{}"".format(weight_sig_2el2mu))\; .Histo1D((""h_sig_2el2mu"", """", nbins, 70, 180), ""H_mass"", ""weight""); ; df_bkg_2el2mu_reco = reco_higgs_to_2el2mu(df_bkg_2el2mu); ; df_h_bkg_2el2mu = df_bkg_2el2mu_reco.Define(""weight"", ""{}"".format(weight_bkg_2el2mu))\; .Histo1D((""h_bkg_2el2mu"", """", nbins, 70, 180), ""H_mass"", ""weight""); ; df_data_2el2mu_reco = reco_higgs_to_2el2mu(df_data_doublemu); ; df_h_data_2el2mu = df_data_2el2mu_reco.Define(""weight"", ""1.0"")\; .Histo1D((""h_data_2el2mu_doublemu"", """", nbins, 70, 180), ""H_mass"", ""weight""); ; # RunGraphs allows to run the event loops of the separate RDataFrame graphs; # concurrently. This results in an improved usage of the available resources; # if each separate RDataFrame can not utilize all available resources, e.g.,; # because not enough data is available.; ROOT.RDF.RunGraphs([df_h_sig_4mu, df_h_bkg_4mu, df_h_data_4mu,; df_h_sig_4el, df_h_bkg_4el, df_h_data_4el,; df_h_sig_2el2mu, df_h_bkg_2el2mu, df_h_data_2el2mu]); ; # Get histograms (does not rerun the event loop); signal_4mu = df_h_sig_4mu.GetValue(); background_4mu = df_h_bkg_4mu.GetValue(); data_4mu = df_h_data_4mu.GetValue(); ; signal_4el = df_h_sig_4el.GetValue(); background_4el = df_h_bkg_4el.GetValue(); data_4el = df_h_data_4el.GetValue(); ; signal_2el2mu = df_h_sig_2el2mu.GetValue(); background_2el2mu = df_h_bkg_2el2mu.GetValue(); data_2el2mu = df_h_data_2el2mu.GetValue(); ; # Make plots; plot(signal_4mu, background_4mu, data_4mu, ""m_{4#mu} (GeV)"", ""higgs_4mu.pdf""); plot(signal_4el, background_4el, data_4el, ""m_{4e} (GeV)"", ""higgs_4el.pdf""); plot(signal_2el2mu, background_2el2mu, data_2el2mu, ""m_{2e2#mu} (GeV)"", ""higgs_2el2mu.pdf""); ; # Combined plots; # If this was ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df103__NanoAODHiggsAnalysis_8py.html:15024,avail,available,15024,doc/master/df103__NanoAODHiggsAnalysis_8py.html,https://root.cern,https://root.cern/doc/master/df103__NanoAODHiggsAnalysis_8py.html,2,['avail'],['available']
Availability,"el, as the rest of the functionality is tried automatically with the UnitTest.C unit ;  fitslicesy.C Illustrates how to use the TH1::FitSlicesY function It uses the TH2F histogram generated in macro hsimple.C It invokes FitSlicesY and draw the fitted ""mean"" and ""sigma"" in 2 sepate pads ;  FittingDemo.C Example for fitting signal/background ;  graph2dfit.C Fitting a TGraph2D ;  Ifit.C Example of a program to fit non-equidistant data points ;  langaus.C Convoluted Landau and Gaussian Fitting Function (using ROOT's Landau and Gauss functions) ;  line3Dfit.C Fitting of a TGraph2D with a 3D straight line ;  minuit2FitBench.C Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits ;  minuit2FitBench2D.C ;  minuit2GausFit.C Perform fits with different configurations using Minuit2 ;  multidimfit.C Multi-Dimensional Parametrisation and Fitting ;  multifit.C Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram An histogram is created and filled with the bin contents and errors defined in the table below ;  myfit.C Get in memory an histogram from a root file and fit a user defined function ;  NumericalMinimization.C Example on how to use the new Minimizer class in ROOT Show usage with all the possible minimizers ;  qa2.C Test generation of random numbers distributed according to a function defined by the user ;  TestBinomial.C Perform a fit to a set of data with binomial errors like those derived from the division of two histograms ;  TwoHistoFit2D.C Example to fit two histograms at the same time ;  vectorizedFit.C use it for fitting an histogram ;  ► fitsio;  FITS_tutorial1.C ;  FITS_tutorial2.C ;  FITS_tutorial3.C ;  FITS_tutorial4.C ;  FITS_tutorial5.C ;  FITS_tutorial6.C ;  FITS_tutorial7.C ;  ► foam;  foam_demo.C Demonstrate the TFoam class ;  foam_demopers.C This simple macro demonstrates persistency of FOAM object ;  foam_kanwa.C This program can be execute from the command ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:109727,error,errors,109727,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['error'],['errors']
Availability,"el, as the rest of the functionality is tried automatically with the UnitTest.C unit ;  fitslicesy.C Illustrates how to use the TH1::FitSlicesY function It uses the TH2F histogram generated in macro hsimple.C It invokes FitSlicesY and draw the fitted ""mean"" and ""sigma"" in 2 sepate pads ;  FittingDemo.C Example for fitting signal/background ;  graph2dfit.C Fitting a TGraph2D ;  Ifit.C Example of a program to fit non-equidistant data points ;  langaus.C Convoluted Landau and Gaussian Fitting Function (using ROOT's Landau and Gauss functions) ;  line3Dfit.C Fitting of a TGraph2D with a 3D straight line ;  minuit2FitBench.C Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits ;  minuit2FitBench2D.C ;  minuit2GausFit.C Perform fits with different configurations using Minuit2 ;  multidimfit.C Multi-Dimensional Parametrisation and Fitting ;  multifit.C Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram An histogram is created and filled with the bin contents and errors defined in the table below ;  myfit.C Get in memory an histogram from a root file and fit a user defined function ;  NumericalMinimization.C Example on how to use the new Minimizer class in ROOT Show usage with all the possible minimizers ;  qa2.C Test generation of random numbers distributed according to a function defined by the user ;  TestBinomial.C Perform a fit to a set of data with binomial errors like those derived from the division of two histograms ;  TwoHistoFit2D.C Example to fit two histograms at the same time ;  vectorizedFit.C use it for fitting an histogram ;  ► fitsio;  FITS_tutorial1.COpen a FITS file and retrieve the first plane of the image array as a TImage object ;  FITS_tutorial2.COpen a FITS file whose primary array represents a spectrum (flux vs wavelength) ;  FITS_tutorial3.COpen a FITS file and retrieve the first plane of the image array as a TImage object ;  FITS_tutorial4.COpen a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:105425,error,errors,105425,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,2,['error'],['errors']
Availability,"el, as the rest of the functionality is tried automatically with the UnitTest.C unit ;  fitslicesy.C Illustrates how to use the TH1::FitSlicesY function It uses the TH2F histogram generated in macro hsimple.C It invokes FitSlicesY and draw the fitted ""mean"" and ""sigma"" in 2 sepate pads ;  FittingDemo.C Example for fitting signal/background ;  graph2dfit.C Fitting a TGraph2D ;  Ifit.C Example of a program to fit non-equidistant data points ;  langaus.C Convoluted Landau and Gaussian Fitting Function (using ROOT's Landau and Gauss functions) ;  line3Dfit.C Fitting of a TGraph2D with a 3D straight line ;  minuit2FitBench.C Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits ;  minuit2FitBench2D.C ;  minuit2GausFit.C Perform fits with different configurations using Minuit2 ;  multidimfit.C Multi-Dimensional Parametrisation and Fitting ;  multifit.C Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram An histogram is created and filled with the bin contents and errors defined in the table below ;  myfit.C Get in memory an histogram from a root file and fit a user defined function ;  NumericalMinimization.C Example on how to use the new Minimizer class in ROOT Show usage with all the possible minimizers ;  qa2.C Test generation of random numbers distributed according to a function defined by the user ;  TestBinomial.C Perform a fit to a set of data with binomial errors like those derived from the division of two histograms ;  TwoHistoFit2D.C Example to fit two histograms at the same time ;  ► fitsio;  FITS_tutorial1.COpen a FITS file and retrieve the first plane of the image array as a TImage object ;  FITS_tutorial2.COpen a FITS file whose primary array represents a spectrum (flux vs wavelength) ;  FITS_tutorial3.COpen a FITS file and retrieve the first plane of the image array as a TImage object ;  FITS_tutorial4.COpen a FITS file whose primary array represents a spectru",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:107063,error,errors,107063,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,2,['error'],['errors']
Availability,"el, const char* location, const char* fmt, va_list va) const; virtual voidDoFill(Long64_t entry, Double_t w, const Double_t* v); voidTProofDraw::FillWeight(); voidTObject::MakeZombie(); virtual Bool_tTProofDraw::ProcessSingle(Long64_t, Int_t); voidTProofDraw::SetCanvas(const char* objname); voidTProofDraw::SetDrawAtt(TObject* o); voidTProofDraw::SetError(const char* sub, const char* mesg). Data Members; public:. enum TProofDraw::[unnamed] { kWarn; };; enum TSelector::EAbort { kContinue; kAbortProcess; kAbortFile; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSelector::EAbortTSelector::fAbortAbort status; Int_tTProofDraw::fDimensionDimension of the current expression; TGraph*fGraph; TStringTProofDraw::fInitialExp; TList*TSelector::fInputList of objects available during processing; TTreeFormulaManager*TProofDraw::fManager; Int_tTProofDraw::fMultiplicityIndicator of the variability of the size of entries; Bool_tTProofDraw::fObjEvaltrue if fVar1 returns an object (or pointer to).; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; TTreeFormula*TProofDraw::fSelectPointer to selection formula; TStringTProofDraw::fSelection; TStatus*TProofDraw::fStatus; Long64_tTSelector::fStatusSelector status; TTree*TProofDraw::fTree; TTreeDrawArgsParserTProofDraw::fTreeDrawArgsParser; TTreeFormula*TProofDraw::fVar[4]Pointer to variable formula; Double_tTProofDraw::fWeightGlobal weight for fill actions. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Init(TTree* tree); See TProofDraw::Init(). void SlaveBegin(TTree* ); See TProofDraw::SlaveBegin(). void DoFill(Long64_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofDrawGraph.html:6908,avail,available,6908,root/html534/TProofDrawGraph.html,https://root.cern,https://root.cern/root/html534/TProofDrawGraph.html,2,['avail'],['available']
Availability,"el, const char* location, const char* fmt, va_list va) const; virtual voidDoFill(Long64_t entry, Double_t w, const Double_t* v); voidTProofDraw::FillWeight(); voidTObject::MakeZombie(); virtual Bool_tTProofDraw::ProcessSingle(Long64_t, Int_t); voidTProofDraw::SetCanvas(const char* objname); voidTProofDraw::SetDrawAtt(TObject* o); voidTProofDraw::SetError(const char* sub, const char* mesg). Data Members; public:. enum TProofDraw::[unnamed] { kWarn; };; enum TSelector::EAbort { kContinue; kAbortProcess; kAbortFile; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSelector::EAbortTSelector::fAbortabort status; Int_tTProofDraw::fDimensionDimension of the current expression; TGraph*fGraph; TStringTProofDraw::fInitialExp; TList*TSelector::fInputlist of objects available during processing; TTreeFormulaManager*TProofDraw::fManager; Int_tTProofDraw::fMultiplicityIndicator of the variability of the size of entries; Bool_tTProofDraw::fObjEvaltrue if fVar1 returns an object (or pointer to).; TObject*TSelector::fObjectcurrent object if processing object (vs. TTree); TStringTSelector::fOptionoption given to TTree::Process; TSelectorList*TSelector::fOutputlist of objects created during processing; TTreeFormula*TProofDraw::fSelectPointer to selection formula; TStringTProofDraw::fSelection; TStatus*TProofDraw::fStatus; Long64_tTSelector::fStatusselector status; TTree*TProofDraw::fTree; TTreeDrawArgsParserTProofDraw::fTreeDrawArgsParser; TTreeFormula*TProofDraw::fVar[4]Pointer to variable formula; Double_tTProofDraw::fWeightGlobal weight for fill actions. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Init(TTree* tree); See TProofDraw::Init(). void SlaveBegin(TTree* ); See TProofDraw::SlaveBegin(). void DoFill(Long64_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofDrawGraph.html:6842,avail,available,6842,root/html530/TProofDrawGraph.html,https://root.cern,https://root.cern/root/html530/TProofDrawGraph.html,3,['avail'],['available']
Availability,"el; option=1 leaves and nodes at vislevel drawn; option=2 path is drawn; option=4 visibility changed. void ViewLeaves(Bool_t flag = kTRUE); Set visualization option (leaves only OR all volumes). void SetVisDensity(Double_t dens = 0.01); Set density threshold. Volumes with densities lower than this become; transparent. void SetVisLevel(Int_t level = 3); set default level down to which visualization is performed. void SortOverlaps(); Sort overlaps by decreasing overlap distance. Extrusions comes first. void OptimizeVoxels(const char* filename = ""tgeovox.C""); Optimize voxelization type for all volumes. Save best choice in a macro. Int_t Parse(const char* expr, TString& expr1, TString& expr2, TString& expr3); Parse a string boolean expression and do a syntax check. Find top; level boolean operator and returns its type. Fill the two; substrings to which this operator applies. The returned integer is :; -1 : parse error; 0 : no boolean operator; 1 : union - represented as '+' in expression; 2 : difference (subtraction) - represented as '-' in expression; 3 : intersection - represented as '*' in expression.; Paranthesys should be used to avoid ambiguites. For instance :; A+B-C will be interpreted as (A+B)-C which is not the same as A+(B-C); eliminate not needed paranthesys. void SaveAttributes(const char* filename = ""tgeoatt.C""); Save current attributes in a macro. TGeoNode * SearchNode(Bool_t downwards = kFALSE, const TGeoNode* skipnode = 0); Returns the deepest node containing fPoint, which must be set a priori. TGeoNode * CrossBoundaryAndLocate(Bool_t downwards, TGeoNode* skipnode); Cross next boundary and locate within current node; The current point must be on the boundary of fCurrentNode. TGeoNode * FindNextBoundaryAndStep(Double_t stepmax = TGeoShape::Big(), Bool_t compsafe = kFALSE); Compute distance to next boundary within STEPMAX. If no boundary is found,; propagate current point along current direction with fStep=STEPMAX. Otherwise; propagate with fStep=SNEXT (d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoManager.html:49848,error,error,49848,root/html528/TGeoManager.html,https://root.cern,https://root.cern/root/html528/TGeoManager.html,10,['error'],['error']
Availability,"elSize(h->GetZaxis()->GetLabelSize());; 4520 palette->SetTitleOffset(h->GetZaxis()->GetTitleOffset());; 4521 palette->SetTitleSize(h->GetZaxis()->GetTitleSize());; 4522 palette->SetNdivisions(h->GetZaxis()->GetNdivisions());; 4523 palette->SetTitle(h->GetZaxis()->GetTitle());; 4524 palette->SetTitleColor(h->GetZaxis()->GetTitleColor());; 4525 palette->SetTitleFont(h->GetZaxis()->GetTitleFont());; 4526 ; 4527 functions->AddFirst(palette);; 4528 }; 4529 if (palette) palette->Paint();; 4530 }; 4531 ; 4532 // Draw markers; 4533 auto nbcol = gStyle->GetNumberOfColors();; 4534 int logx = gPad->GetLogx();; 4535 int logy = gPad->GetLogy();; 4536 int logz = gPad->GetLogz();; 4537 if (theColor && logz) {; 4538 if (minc>0) minc = log10(minc);; 4539 if (maxc>0) maxc = log10(maxc);; 4540 }; 4541 theScatter->SetMarkerColor(theScatter->GetMarkerColor());; 4542 theScatter->TAttMarker::Modify();; 4543 double x,y,c,ms;; 4544 int nc;; 4545 for (int i=0; i<n; i++) {; 4546 if (theColor) {; 4547 if (logz) {; 4548 if (theColor[i]>0) c = log10(theColor[i]);; 4549 else continue;; 4550 } else {; 4551 c = theColor[i];; 4552 }; 4553 if (c<minc) continue;; 4554 if (c>maxc) continue;; 4555 nc = TMath::Nint(((c-minc)/(maxc-minc))*(nbcol-1));; 4556 if (nc > nbcol-1) nc = nbcol-1;; 4557 theScatter->SetMarkerColor(gStyle->GetColorPalette(nc));; 4558 }; 4559 if (theSize) {; 4560 ms = (MaxMarkerSize-MinMarkerSize)*((theSize[i]-mins)/(maxs-mins))+MinMarkerSize;; 4561 theScatter->SetMarkerSize(ms);; 4562 }; 4563 if (theColor || theSize) theScatter->TAttMarker::Modify();; 4564 if (logx) {; 4565 if (theX[i]>0) x = log10(theX[i]);; 4566 else break;; 4567 } else {; 4568 x = theX[i];; 4569 }; 4570 if (logy) {; 4571 if (theY[i]>0) y = log10(theY[i]);; 4572 else break;; 4573 } else {; 4574 y = theY[i];; 4575 }; 4576 gPad->PaintPolyMarker(1,&x,&y);; 4577 }; 4578}; 4579 ; 4580 ; 4581////////////////////////////////////////////////////////////////////////////////; 4582/// Paint a simple graph, without errors bars.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:161221,error,errors,161221,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['error'],['errors']
Availability,"elated errors on background sources, taken as the errors; provided with the background histograms. (e) scale errors on background sources. In addition there is the (statistical) uncertainty of the input vector (i). Source (a) is providede with the original histogram histA; TUnfoldSys(histA,...). Sources (b) are added by calls to; AddSysError(). The systematic uncertainty on tau (c) is set by; SetTauError(). Backgound sources causing errors of type (d) and (e) are added by; SubtractBackground(). NOTE:. Systematic errors (a), (b), (c) are propagated to the result; AFTER unfolding. Background errors (d) and (e) are added to the data errors; BEFORE unfolding. For this reason:; errors of type (d) and (e) are INCLUDED in the standard error matrix; and other methods provided by the base class TUnfold:; GetOutput(); GetEmatrix(). whereas errors of type (a), (b), (c) are NOT INCLUDED in the methods; provided by the base class TUnfold. Accessing error matrices:. The error sources (b),(c) and (e) propagate to shifts of the result.; These shifts may be accessed as histograms using the methods; GetDeltaSysSource() corresponds to (b); GetDeltaSysTau() corresponds to (c); GetDeltaSysBackgroundScale() corresponds to (e); The error sources (a) and (d) originate from many uncorrelated errors,; which in general are NOT uncorrelated on the result vector.; Thus, there is no corresponding shift of the output vector, only error; matrices are available. Method to get error matrix corresponds to error sources. GetEmatrixSysUncorr() (a); GetEmatrixSysSource() (b); GetEmatrixSysTau() (c); GetEmatrixSysBackgroundUncorr() (d); GetEmatrixSysBackgroundScale() (e); GetEmatrixInput() (i); GetEmatrix() (i)+(d)+(e); GetEmatrixTotal() (i)+(a)+(b)+(c)+(d)+(e). Error matrices can be added to existing histograms.; This is useful to retreive the sum of several error matrices.; If the last argument of the GetEmatrixXXX() methods is set to kFALSE,; the histogram is not cleared, but the error matrix is simply",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfoldSys.html:2347,error,error,2347,root/html534/TUnfoldSys.html,https://root.cern,https://root.cern/root/html534/TUnfoldSys.html,6,['error'],['error']
Availability,"elect the type of displayed information . The parameter mode has up to nine digits that can be set OFF (0) or ON as follows:; mode = ksiourmen (default =000001111). n = 1 the name of histogram is printed; e = 1 the number of entries; m = 1 the mean value; m = 2 the mean and mean error values; r = 1 the root mean square (RMS); r = 2 the RMS and RMS error; u = 1 the number of underflows; o = 1 the number of overflows; i = 1 the integral of bins; s = 1 the skewness; s = 2 the skewness and the skewness error; k = 1 the kurtosis; k = 2 the kurtosis and the kurtosis error. Never call SetOptStat(0001111) , but SetOptStat(1111) , because 0001111 will be taken as an octal number.; The method TStyle::SetOptStat(Option_t*option) can also be called with a character string as a parameter. The parameter option can contain:. n for printing the name of histogram; e the number of entries; m the mean value; M the mean and mean error values; r the root mean square (RMS); R the RMS and RMS error; u the number of underflows; o the number of overflows; i the integral of bins; s the skewness; S the skewness and the skewness error; k the kurtosis; K the kurtosis and the kurtosis error. gStyle->SetOptStat(""ne""); // prints the histogram name and number; // of entries; gStyle->SetOptStat(""n""); // prints the histogram name; gStyle->SetOptStat(""nemr""); // the default value; With the option ""same"", the statistic box is not redrawn. With the option ""sames"", it is re-drawn. If it hides the previous statistics box, you can change its position with the next lines (where h is the histogram pointer):; root[] TPaveStats *s =; (TPaveStats*)h->GetListOfFunctions()->FindObject(""stats"");; root[] s->SetX1NDC (newx1); // new x start position; root[] s->SetX2NDC (newx2); // new x end position; 3.8.6 Setting Line, Fill, Marker, and Text Attributes; The histogram classes inherit from the attribute classes: TAttLine, TAttFill, TAttMarker and TAttText. See the description of these classes for the list of options.;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:111503,error,error,111503,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,8,['error'],['error']
Availability,"electedItem;  Item currently open. ;  ; TTimer * fTimer;  Timer for animation. ;  ; TList * fTrash;  Items that need to be cleaned up. ;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Private Member Functions;  TGShutter (const TGShutter &)=delete;  ; TGShutter & operator= (const TGShutter &)=delete;  . Additional Inherited Members;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEdi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGShutter.html:26460,mask,mask,26460,doc/master/classTGShutter.html,https://root.cern,https://root.cern/doc/master/classTGShutter.html,1,['mask'],['mask']
Availability,"electing events using 'select' RooFormulaVar. The source tree 't' is first clone as not disturb its branch; structure when retrieving information from it. void loadValues(const RooAbsDataStore* tds, const RooFormulaVar* select = 0, const char* rangeName = 0, Int_t nStart = 0, Int_t nStop = 2000000000); Load values from dataset 't' into this data collection, optionally; selecting events using 'select' RooFormulaVar. Bool_t valid() const; Return true if currently loaded coordinate is considered valid within; the current range definitions of all observables. Int_t fill(); Interface function to TTree::Fill. const RooArgSet* get(Int_t index) const; Load the n-th data point (n='index') in memory; and return a pointer to the internal RooArgSet; holding its coordinates. Double_t weight(Int_t index) const; Return the weight of the n-th data point (n='index') in memory. Double_t weight() const; Return the weight of the n-th data point (n='index') in memory. Double_t weightError(RooAbsData::ErrorType etype = RooAbsData::Poisson) const. void weightError(Double_t& lo, Double_t& hi, RooAbsData::ErrorType etype = RooAbsData::Poisson) const. Bool_t changeObservableName(const char* from, const char* to); Change name of internal observable named 'from' into 'to'. RooAbsArg* addColumn(RooAbsArg& var, Bool_t adjustRange = kTRUE); Add a new column to the data set which holds the pre-calculated values; of 'newVar'. This operation is only meaningful if 'newVar' is a derived; value. The return value points to the added element holding 'newVar's value; in the data collection. The element is always the corresponding fundamental; type of 'newVar' (e.g. a RooRealVar if 'newVar' is a RooFormulaVar). Note: This function is explicitly NOT intended as a speed optimization; opportunity for the user. Components of complex PDFs that can be; precalculated with the dataset are automatically identified as such; and will be precalculated when fitting to a dataset. By forcibly precalculating functions with",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooTreeDataStore.html:15149,Error,ErrorType,15149,root/html532/RooTreeDataStore.html,https://root.cern,https://root.cern/root/html532/RooTreeDataStore.html,4,['Error'],['ErrorType']
Availability,"election = """", . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; first = 0 . ). virtual . Execute the specified drawing action on a data set (TDSet). ; Event- or Entry-lists should be set in the data set object using TDSet::SetEntryList. Returns -1 in case of error or number of selected events otherwise. ; Reimplemented in TProofLite.; Definition at line 6146 of file TProof.cxx. ◆ Echo() [1/2]. Int_t TProof::Echo ; (; const char * ; str). virtual . Sends a string to master and workers and expect them to echo it back to the client via a message. ; It is a special case of the generic Echo() that works with TObjects. Returns -1 on error, the number of workers that received the message on success. ; Definition at line 7042 of file TProof.cxx. ◆ Echo() [2/2]. Int_t TProof::Echo ; (; const TObject * ; obj). virtual . Sends an object to master and workers and expect them to send back a message with the output of its TObject::Print(). ; Returns -1 on error, the number of workers that received the objects on success. ; Definition at line 7028 of file TProof.cxx. ◆ EnablePackage() [1/3]. Int_t TProof::EnablePackage ; (; const char * ; package, . Bool_t ; notOnClient = kFALSE, . TList * ; workers = 0 . ). Enable specified package. ; Executes the PROOF-INF/BUILD.sh script if it exists followed by the PROOF-INF/SETUP.C script. In case notOnClient = true, don't enable the package on the client. The default is to enable packages also on the client. If specified, enables packages only on the specified workers. Returns 0 in case of success and -1 in case of error. Provided for backward compatibility. ; Definition at line 8175 of file TProof.cxx. ◆ EnablePackage() [2/3]. Int_t TProof::EnablePackage ; (; const char * ; package, . const char * ; loadopts, . Bool_t ; notOnClient = kFALSE, . TList * ; workers = 0 . ). Enable specified package. ; Executes the PROOF-INF/BUILD.sh script if it exists followed by the PROOF-INF/SETUP.C script. In case notOnClient = true, don'",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:85644,error,error,85644,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['error'],['error']
Availability,"election' field :; A, allfiles: process all files; D, staged: process only staged (on Disk) files (if 'allfiles:' is not specified; the default is to process only files marked as non-staged); 'pre-action field':; O, open: open the files marked as staged when processing only files; marked as non-staged; T, touch: open and touch the files marked as staged when processing; only files marked as non-staged; I, nostagedcheck: do not check the actual stage status on selected files. 'process' field:; N, noaction: do nothing on the selected files; P, fullproc: open the selected files and extract the meta information; L, locateonly: only locate the selected files; S, stageonly: issue a stage request for the selected files not yet staged. 'auxilliary' field; V, verbose: notify the actions. Returns 0 on success, -1 if any failure occurs. Int_t ScanDataSet(const char* uri, UInt_t option = kReopen|kDebug); Scans the dataset indicated by <uri> and returns the number of missing files.; Returns -1 if any failure occurs.; For more details, see documentation of; ScanDataSet(TFileCollection *dataset, const char *option). void GetQuota(const char* group, const char* user, const char* dsName, TFileCollection* dataset). Gets quota information from this dataset. void ShowQuota(const char* opt); Display quota information. void PrintUsedSpace(). Prints the quota. void MonitorUsedSpace(TVirtualMonitoringWriter* monitoring). Log info to the monitoring server. Long64_t GetGroupUsed(const char* group). Returns the used space of that group. Long64_t GetGroupQuota(const char* group). returns the quota a group is allowed to have. void UpdateUsedSpace(); updates the used space maps. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings, if needed.; Returns 0 on success, -1 on failure. Int_t NotifyUpdate(const char* group = 0, const char* user = 0, const char* dspath = 0, Long_t mtime = 0, const char* checksum = 0); Save into t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDataSetManager.html:12982,failure,failure,12982,root/html528/TDataSetManager.html,https://root.cern,https://root.cern/root/html528/TDataSetManager.html,4,['failure'],['failure']
Availability,"electionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t formatDefinition TGWin32VirtualXProxy.cxx:249; [#1] INFO:Fitting -- RooAbsPdf::fitTo(pol3_over_pol3_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_pol3_over_pol3_Int[x]_pol3Data) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#0] ERROR:Minimization -- RooMinimizer: all function calls during minimization gave invalid NLL values!; [#0] ERROR:Minimization -- RooMinimizer::calculateHessErrors() Error when calculating Hessian; [#0] ERROR:Minimization -- RooMinimizer: all function calls during minimization gave invalid NLL values!; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#0] ERROR:Eval -- RooAbsReal::logEvalError(pol3) evaluation error, ; origin : RooPolynomial::pol3[ x=x coefList=(a1,a2,a3) ]; message : p.d.f normalization integral is zero or negative: -2220.000000; server values: x=x=0, coefList=(a1 = 10 +/- 0,a2 = -1 +/- 0,a3 = 0.01); [#1] INFO:Fitting -- RooAbsPdf::fitTo(pol3_over_pol3_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_pol3_over_pol3_Int[x]_pol3Data) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8py.html:5590,error,error,5590,doc/master/rf612__recoverFromInvalidParameters_8py.html,https://root.cern,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8py.html,2,['error'],['error']
Availability,"electionRequest event to be sent to the current primary selection owner. ;  ; void ConvertSelection (Window_t, Atom_t &, Atom_t &, Atom_t &, Time_t &) override;  Get Clipboard data. ;  ; void CopyArea (Drawable_t src, Drawable_t dest, GContext_t gc, Int_t src_x, Int_t src_y, UInt_t width, UInt_t height, Int_t dest_x, Int_t dest_y) override;  Copy a drawable (i.e. ;  ; void CopyGC (GContext_t org, GContext_t dest, Mask_t mask) override;  Copies graphics context from org to dest. ;  ; void CopyPixmap (Int_t wid, Int_t xpos, Int_t ypos) override;  Copy the pixmap wid at the position xpos, ypos in the current window. ;  ; Pixmap_t CreateBitmap (Drawable_t id, const char *bitmap, UInt_t width, UInt_t height) override;  Create a bitmap (i.e. pixmap with depth 1) from the bitmap data. ;  ; Cursor_t CreateCursor (ECursor cursor) override;  Create cursor handle (just return cursor from cursor pool fCursors). ;  ; GContext_t CreateGC (Drawable_t id, GCValues_t *gval) override;  Create a graphics context using the values set in gval (but only for those entries that are in the mask). ;  ; Drawable_t CreateImage (UInt_t width, UInt_t height) override;  Allocates the memory needed for an drawable. ;  ; Bool_t CreatePictureFromData (Drawable_t id, char **data, Pixmap_t &pict, Pixmap_t &pict_mask, PictureAttributes_t &attr) override;  Create a pixture pixmap from data. ;  ; Bool_t CreatePictureFromFile (Drawable_t id, const char *filename, Pixmap_t &pict, Pixmap_t &pict_mask, PictureAttributes_t &attr) override;  Create a picture pixmap from data on file. ;  ; Pixmap_t CreatePixmap (Drawable_t id, const char *bitmap, UInt_t width, UInt_t height, ULong_t forecolor, ULong_t backcolor, Int_t depth) override;  Create a pixmap from bitmap data. ;  ; Pixmap_t CreatePixmap (Drawable_t id, UInt_t w, UInt_t h) override;  Creates a pixmap of the width and height you specified and returns a pixmap ID that identifies it. ;  ; Pixmap_t CreatePixmapFromData (unsigned char *bits, UInt_t width, UI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32.html:3932,mask,mask,3932,doc/master/classTGWin32.html,https://root.cern,https://root.cern/doc/master/classTGWin32.html,1,['mask'],['mask']
Availability,element; TGButtonGroup*fGroupbutton group this button belongs to; UInt_tTGFrame::fHeightframe height; Pixel_tfHighColorhighlight color; Handle_tTGObject::fIdX11/Win32 Window identifier; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; const TGWindow*TGWidget::fMsgWindowwindow which handles widget events; TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; GContext_tfNormGCgraphics context used for drawing button; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; EButtonStatefStatebutton state; Bool_tfStayDowntrue if button has to stay down; UInt_tfStylebutton style (modern or classic); UInt_tfTHeightbutton height; UInt_tfTWidthbutton width; TGToolTip*fTiptool tip associated with button; void*fUserDatapointer to user data structure; Int_tTGWidget::fWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tTGWidget::fWidgetIdthe widget id (used for event processing); UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*fgHibckgndGC; static const TGGC*TGFrame::fgHilightGC,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGButton.html:20401,down,down,20401,root/html530/TGButton.html,https://root.cern,https://root.cern/root/html530/TGButton.html,9,['down'],['down']
Availability,"elete; static TObject::(anonymous)TObject::kZombie. protected:. RooRealVar**fAxesarray of pointers to RooRealVars representing; RooStats::MarkovChain*fChainthe markov chain; Double_tfConfidenceLevelRequested confidence level (eg. 0.95 for 95% CL); RooRealVar*fCutoffVarcutoff variable to use for integrating keys pdf; RooDataHist*fDataHistthe binned Markov Chain data; Double_tfDeltatopCutoff (a) considered == bottomCutoff (b) iff; Int_tfDimensionnumber of variables; Double_tfEpsilonacceptable error for Keys interval determination; Double_tfFullValue of intergral of fProduct; RooStats::Heaviside*fHeavisidethe Heaviside function; TH1*fHistthe binned Markov Chain data; Double_tfHistConfLevelthe actual conf level determined by hist; Double_tfHistCutoffcutoff bin size to be in interval; enum IntervalTypefIntervalType; Bool_tfIsHistStrictwhether the specified confidence level is a; Double_tfKeysConfLevelthe actual conf level determined by keys; Double_tfKeysCutoffcutoff keys pdf value to be in interval; RooDataHist*fKeysDataHistdata hist representing product; RooNDKeysPdf*fKeysPdfthe kernel estimation pdf; Double_tfLeftSideTFleft side tail-fraction for interval; TStringTNamed::fNameobject identifier; Int_tfNumBurnInStepsnumber of steps to discard as burn in, starting; RooArgSetfParametersparameters of interest for this interval; RooProduct*fProductthe (keysPdf * heaviside) product; THnSparse*fSparseHistthe binned Markov Chain data; Double_tfTFConfLevelthe actual conf level of tail-fraction interval; Double_tfTFLowerlower limit of the tail-fraction interval; Double_tfTFUpperupper limit of the tail-fraction interval; TStringTNamed::fTitleobject title; Bool_tfUseKeyswhether to use kernel estimation; Bool_tfUseSparseHistwhether to use sparse hist (vs. RooDataHist); Double_tfVecWeightsum of weights of all entries in fVector; vector<Int_t>fVectorvector containing the Markov chain data. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MCMCI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__MCMCInterval.html:12000,error,error,12000,root/html602/RooStats__MCMCInterval.html,https://root.cern,https://root.cern/root/html602/RooStats__MCMCInterval.html,4,['error'],['error']
Availability,"eleteYError(Int_t e)Deletes the y error with the index e.Definition TGraphMultiErrors.cxx:1422; TGraphMultiErrors::Applyvoid Apply(TF1 *f) overrideApply a function to all data points .Definition TGraphMultiErrors.cxx:951; TGraphMultiErrors::SetEYhighvirtual void SetEYhigh(Int_t e, Int_t np, const Double_t *eyH)Set error e eyH values.Definition TGraphMultiErrors.cxx:1995; TGraphMultiErrors::GetNYErrorsInt_t GetNYErrors() constDefinition TGraphMultiErrors.h:166; TGraphMultiErrors::SwapPointsvoid SwapPoints(Int_t pos1, Int_t pos2) overrideSwap points.Definition TGraphMultiErrors.cxx:869; TGraphMultiErrors::SetAttFillvirtual void SetAttFill(Int_t e, TAttFill *taf)Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2018; TGraphMultiErrors::SetEYlowvirtual void SetEYlow(Int_t e, Int_t np, const Double_t *eyL)Set error e eyL values.Definition TGraphMultiErrors.cxx:1982; TGraphMultiErrors::fAttFillstd::vector< TAttFill > fAttFillThe AttFill attributes of the different errors.Definition TGraphMultiErrors.h:41; TGraphMultiErrors::UpdateArraysvoid UpdateArrays(const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) overrideUpdate the fX, fY, fExL, fExH, fEyL and fEyH arrays with the sorted values.Definition TGraphMultiErrors.cxx:885; TGraphMultiErrors::CtorAllocateBool_t CtorAllocate()Should be called from ctors after fNpoints has been set Note: This function should be called only fro...Definition TGraphMultiErrors.cxx:718; TGraphMultiErrors::fExHDouble_t * fExH[fNpoints] array of X high errorsDefinition TGraphMultiErrors.h:36; TGraphMultiErrors::SetPointEYvirtual void SetPointEY(Int_t i, Int_t ne, const Double_t *eyL, const Double_t *eyH)Set ey values for point i.Definition TGraphMultiErrors.cxx:1885; TGraphMultiErrors::SetPointEXlowvirtual void SetPointEXlow(Int_t i, Double_t exL)Set exL value for point i.Definition TGraphMultiErrors.cxx:1853; TGraphMultiErrors::SetPointEYhighv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html:23744,error,errors,23744,doc/master/TGraphMultiErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html,1,['error'],['errors']
Availability,"eleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TStopwatch_cumulTimer; TMatrixDSym*_extV; RooMinimizerFcn*_fcn; RooAbsReal*_func; string_minimizerType; Bool_t_optConst; Int_t_printLevel; Bool_t_profile; Int_t_status; static ROOT::Fit::Fitter*_theFitter; TStopwatch_timer; Bool_t_verbose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Cleanup method called by atexit handler installed by RooSentinel; to delete all global heap objects when the program is terminated. RooMinimizer(RooAbsReal& function); Construct MINUIT interface to given function. Function can be anything,; but is typically a -log(likelihood) implemented by RooNLLVar or a chi^2; (implemented by RooChi2Var). Other frequent use cases are a RooAddition; of a RooNLLVar plus a penalty or constraint term. This class propagates; all RooFit information (floating parameters, their values and errors); to MINUIT before each MINUIT call and propagates all MINUIT information; back to the RooFit object at the end of each call (updated parameter; values, their (asymmetric errors) etc. The default MINUIT error level; for HESSE and MINOS error analysis is taken from the defaultErrorLevel(); value of the input function. ~RooMinimizer(); Destructor. void setStrategy(Int_t strat); Change MINUIT strategy to istrat. Accepted codes; are 0,1,2 and represent MINUIT strategies for dealing; most efficiently with fast FCNs (0), expensive FCNs (2); and 'intermediate' FCNs (1). void setErrorLevel(Double_t level); Set the level for MINUIT error analysis to the given; value. This function overrides the default value; that is taken in the RooMinimizer constructor from; the defaultErrorLevel() method of the input function. void setEps(Double_t eps); Change MINUIT epsilon. void setMinimizerType(const char* type); Choose the minimzer algorithm. RooFitResult* fit(const char* options); Parse traditional RooAbsPdf::fitTo driver options. m - Run Migrad o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMinimizer.html:8061,error,errors,8061,root/html526/RooMinimizer.html,https://root.cern,https://root.cern/root/html526/RooMinimizer.html,6,['error'],['errors']
Availability,"eleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Int_tf3DStyle3D style (0 - normal, kRaisedFrame - raised, kSunkenFrame - sunken); Pixel_tTGFrame::fBackgroundframe background color; Int_tTGFrame::fBorderWidthframe border width; TGClient*TGObject::fClientConnection to display server; Int_tTGFrame::fDNDStateEDNDFlags; Bool_tfDisabledif kTRUE label looks disabled (shaded text); UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; UInt_tTGFrame::fEventMaskcurrenty active event mask; TGFrameElement*TGFrame::fFEpointer to frame element; TGFont*fFontfont to draw label; Bool_tfHasOwnFontkTRUE - font defined locally, kFALSE - globally; UInt_tTGFrame::fHeightframe height; Handle_tTGObject::fIdX11/Win32 Window identifier; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfMBottommargin bottom; Int_tfMLeftmargin left; Int_tfMRightmargin right; Int_tfMTopmargin top; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; GContext_tfNormGCgraphics context used for drawing label; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tfTFlagstext flags (see TGFont.h ETextLayoutFlags); UInt_tfTHeighttext height; TGTextLayout*fTLayouttext layout; Int_tfTModetext alignment; UInt_tfTWidthtext width; TGString*fTextlabel text; Bool_tfTextChangedhas text changed; UInt_tTGFrame::fWidthframe width; Int_tfWrapLengthwrap length; I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLabel.html:17537,mask,mask,17537,root/html602/TGLabel.html,https://root.cern,https://root.cern/root/html602/TGLabel.html,4,['mask'],['mask']
Availability,"eleting the pointer. In READ mode, a nullptr is returned if the file does not exist or cannot be opened. In CREATE mode, a nullptr is returned if the file already exists or cannot be created. In RECREATE mode, a nullptr is returned if the file can not be created. In UPDATE mode, a nullptr is returned if the file cannot be created or opened. ; Definition at line 4089 of file TFile.cxx. ◆ Open() [2/2]. TFile * TFile::Open ; (; TFileOpenHandle * ; fh). static . Waits for the completion of an asynchronous open request. ; Returns the pointer to the associated TFile, transferring ownership of the handle to the TFile instance. ; Definition at line 4447 of file TFile.cxx. ◆ OpenFromCache(). TFile * TFile::OpenFromCache ; (; const char * ; name, . Option_t * ; = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, . Int_t ; netopt = 0 . ). staticprivate . Open a file for reading through the file cache. ; The file will be downloaded to the cache and opened from there. If the download fails, it will be opened remotely. The file will be downloaded to the directory specified by SetCacheFileDir(). ; Definition at line 3874 of file TFile.cxx. ◆ operator=(). void TFile::operator= ; (; const TFile & ; ). privatedelete . ◆ Paint(). void TFile::Paint ; (; Option_t * ; option = """"). overridevirtual . Paint all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1698 of file TFile.cxx. ◆ Print(). void TFile::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, TXMLFile, TNetFile, TXNetFile, and TMemFile.; Definition at line 1706 of file TFile.cxx. ◆ ReadBuffer() [1/2]. Bool_t TFile::ReadBuffer ; (; char * ; buf, . Int_t ; len . ). virtual . Read a buffer from the file. ; This is the basic low level read operation. Returns kTRUE in case of failure. ; Reimplemented ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:85024,down,downloaded,85024,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,1,['down'],['downloaded']
Availability,"eleting the pointer. In READ mode, a nullptr is returned if the file does not exist or cannot be opened. In CREATE mode, a nullptr is returned if the file already exists or cannot be created. In RECREATE mode, a nullptr is returned if the file can not be created. In UPDATE mode, a nullptr is returned if the file cannot be created or opened. ; Definition at line 4089 of file TFile.cxx. ◆ Open() [2/2]. TFile * TFile::Open ; (; TFileOpenHandle * ; fh). static . Waits for the completion of an asynchronous open request. ; Returns the pointer to the associated TFile, transferring ownership of the handle to the TFile instance. ; Definition at line 4447 of file TFile.cxx. ◆ OpenFromCache(). TFile * TFile::OpenFromCache ; (; const char * ; name, . Option_t * ; = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, . Int_t ; netopt = 0 . ). staticprivate . Open a file for reading through the file cache. ; The file will be downloaded to the cache and opened from there. If the download fails, it will be opened remotely. The file will be downloaded to the directory specified by SetCacheFileDir(). ; Definition at line 3874 of file TFile.cxx. ◆ operator=(). void TFile::operator= ; (; const TFile & ; ). privatedelete . ◆ Paint(). void TFile::Paint ; (; Option_t * ; option = """"). overridevirtual . Paint all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1698 of file TFile.cxx. ◆ Print(). void TFile::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, TXMLFile, TNetFile, and TMemFile.; Definition at line 1706 of file TFile.cxx. ◆ ReadBuffer() [1/2]. Bool_t TFile::ReadBuffer ; (; char * ; buf, . Int_t ; len . ). virtual . Read a buffer from the file. ; This is the basic low level read operation. Returns kTRUE in case of failure. ; Reimplemented in TSQLFile",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFile.html:84927,down,downloaded,84927,doc/master/classTFile.html,https://root.cern,https://root.cern/doc/master/classTFile.html,1,['down'],['downloaded']
Availability,"elieves the; 202errors are accurate, although there is always a small chance that MINUIT; 203has been fooled. Some visible signs that MINUIT may have been fooled are:; 204 ; 205 ; 206 1. Warning messages produced during the minimization or error analysis.; 207 ; 208 2. Failure to find new minimum.; 209 ; 210 3. Value of <TT>EDM</TT> too big (estimated Distance to Minimum).; 211 ; 212 4. Correlation coefficients exactly equal to zero, unless some parameters; 213 are known to be uncorrelated with the others.; 214 ; 215 5. Correlation coefficients very close to one (greater than 0.99). This; 216 indicates both an exceptionally difficult problem, and one which has been; 217 badly parameterised so that individual errors are not very meaningful; 218 because they are so highly correlated.; 219 ; 220 6. Parameter at limit. This condition, signalled by a MINUIT warning; 221 message, may make both the function minimum and parameter errors; 222 unreliable. See the discussion above ``Getting the right parameter errors; 223 with limits''.; 224 ; 225 ; 226The best way to be absolutely sure of the errors, is to use; 227``independent'' calculations and compare them, or compare the calculated; 228errors with a picture of the function. Theoretically, the covariance; 229matrix for a ``physical'' function must be positive-definite at the; 230minimum, although it may not be so for all points far away from the; 231minimum, even for a well-determined physical problem. Therefore, if MIGRAD; 232reports that it has found a non-positive-definite covariance matrix, this; 233may be a sign of one or more of the following:; 234 ; 235##### A non-physical region:; 236 ; 237On its way to the minimum, MIGRAD may have traversed a region which has; 238unphysical behaviour, which is of course not a serious problem as long as; 239it recovers and leaves such a region.; 240 ; 241##### An underdetermined problem:; 242 ; 243If the matrix is not positive-definite even at the minimum, this may mean; 244that th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:10811,error,errors,10811,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['error'],['errors']
Availability,"elsInflate (Option_t *axis=""X"");  Double the number of bins for axis. ;  ; virtual void LabelsOption (Option_t *option=""h"", Option_t *axis=""X"");  Sort bins with labels or set option(s) to draw axis with labels. ;  ; virtual Long64_t Merge (TCollection *list);  ; Long64_t Merge (TCollection *list, Option_t *option);  Add all histograms in the collection to this histogram. ;  ; virtual Bool_t Multiply (const TH1 *h1);  Multiply this histogram by h1. ;  ; virtual Bool_t Multiply (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by multiplication of h1 by h2. ;  ; virtual Bool_t Multiply (TF1 *f1, Double_t c1=1);  Performs the operation: ;  ; void Paint (Option_t *option="""") override;  Control routine to paint any kind of histograms. ;  ; void Print (Option_t *option="""") const override;  Print some global quantities for this histogram. ;  ; virtual void RebinAxis (Double_t x, TAxis *axis);  ; virtual void Rebuild (Option_t *option="""");  Using the current bin info, recompute the arrays for contents and errors. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual void ResetStats ();  Reset the statistics including the number of entries and replace with values calculated from bin content. ;  ; void SaveAs (const char *filename=""hist"", Option_t *option="""") const override;  Save the histogram as .csv, .tsv or .txt. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; virtual void Scale (Double_t c1=1, Option_t *option="""");  Multiply this histogram by a constant c1. ;  ; virtual void SetAxisColor (Color_t color=1, Option_t *axis=""X"");  Set color to draw the axis line and tick marks. ;  ; virtual void SetAxisRange (Double_t xmin, Double_t xmax, Option_t *axis=""X"");  Set the ""axis"" range. ;  ; virtual void SetBarOffset (Float_t offset=0.25);  Set the bar offset",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2.html:24939,error,errors,24939,doc/master/classTH2.html,https://root.cern,https://root.cern/doc/master/classTH2.html,7,['error'],['errors']
Availability,"else if (fSumErrorsMode == TGraphMultiErrors::kAbsSum) {; 1543 Double_t sum = 0.;; 1544 for (Int_t j = 0; j < fNYErrors; j++); 1545 sum += fEyH[j][i];; 1546 return sum;; 1547 }; 1548 ; 1549 return -1.;; 1550}; 1551 ; 1552////////////////////////////////////////////////////////////////////////////////; 1553/// Get low error e on y coordinate for point `i`.; 1554 ; 1555Double_t TGraphMultiErrors::GetErrorYlow(Int_t i, Int_t e) const; 1556{; 1557 if (i < 0 || i >= fNpoints || e >= fNYErrors || fEyL.empty()); 1558 return -1.;; 1559 ; 1560 return fEyL[e][i];; 1561}; 1562 ; 1563////////////////////////////////////////////////////////////////////////////////; 1564/// Get high error e on y coordinate for point `i`.; 1565 ; 1566Double_t TGraphMultiErrors::GetErrorYhigh(Int_t i, Int_t e) const; 1567{; 1568 if (i < 0 || i >= fNpoints || e >= fNYErrors || fEyH.empty()); 1569 return -1.;; 1570 ; 1571 return fEyH[e][i];; 1572}; 1573 ; 1574////////////////////////////////////////////////////////////////////////////////; 1575/// Get all low errors on y coordinates as an array summed according to `fSumErrorsMode`.; 1576 ; 1577Double_t *TGraphMultiErrors::GetEYlow() const; 1578{; 1579 if (!fEyLSum); 1580 CalcYErrorsSum();; 1581 ; 1582 return fEyLSum;; 1583}; 1584 ; 1585////////////////////////////////////////////////////////////////////////////////; 1586/// Get all high errors on y coordinates as an array summed according to `fSumErrorsMode`.; 1587 ; 1588Double_t *TGraphMultiErrors::GetEYhigh() const; 1589{; 1590 if (!fEyHSum); 1591 CalcYErrorsSum();; 1592 ; 1593 return fEyHSum;; 1594}; 1595 ; 1596////////////////////////////////////////////////////////////////////////////////; 1597/// Get all low errors `e` on y coordinates as an array.; 1598 ; 1599Double_t *TGraphMultiErrors::GetEYlow(Int_t e); 1600{; 1601 if (e >= fNYErrors || fEyL.empty()); 1602 return nullptr;; 1603 else; 1604 return fEyL[e].GetArray();; 1605}; 1606 ; 1607/////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html:53895,error,errors,53895,doc/master/TGraphMultiErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html,1,['error'],['errors']
Availability,"ely remove this object from a list. Typically implemented; by classes that can contain mulitple references to a same object. void SaveAs(const char* filename = """", Option_t* option = """") const; Save this object in the file specified by filename. - if ""filename"" contains "".root"" the object is saved in filename as root; binary file. - if ""filename"" contains "".xml"" the object is saved in filename as a xml; ascii file. - if ""filename"" contains "".cc"" the object is saved in filename as C code; independant from ROOT. The code is generated via SavePrimitive().; Specific code should be implemented in each object to handle this; option. Like in TF1::SavePrimitive(). - otherwise the object is written to filename as a CINT/C++ script. The; C++ code to rebuild this object is generated via SavePrimitive(). The; ""option"" parameter is passed to SavePrimitive. By default it is an empty; string. It can be used to specify the Draw option in the code generated; by SavePrimitive. The function is available via the object context menu. void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void SetDrawOption(Option_t* option = """"); Set drawing option for object. This option only affects; the drawing style and is stored in the option field of the; TObjOptLink supporting a TPad's primitive list (TList).; Note that it does not make sense to call object.SetDrawOption(option); before having called object.Draw(). void SetBit(UInt_t f, Bool_t set); Set or unset the user status bits as specified in f. void SetUniqueID(UInt_t uid); Set the unique object id. void UseCurrentStyle(); Set current style settings in this object; This function is called when either TCanvas::UseCurrentStyle; or TROOT::ForceStyle have been invoked. Int_t Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Write this object to the current directory.; The data structure corresponding to this object is serialized.; The corresponding buffer is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TObject.html:14191,avail,available,14191,root/html602/TObject.html,https://root.cern,https://root.cern/root/html602/TObject.html,4,['avail'],['available']
Availability,"em () const;  Return the amount of used memory over memory that would be used by a non-sparse n-dimensional histogram. ;  ; TClass * IsA () const override;  ; THnSparse * Projection (Int_t ndim, const Int_t *dim, Option_t *option="""") const;  ; TH3D * Projection (Int_t xDim, Int_t yDim, Int_t zDim, Option_t *option="""") const;  Forwards to THnBase::Projection(). ;  ; TH1D * Projection (Int_t xDim, Option_t *option="""") const;  Forwards to THnBase::Projection(). ;  ; TH2D * Projection (Int_t yDim, Int_t xDim, Option_t *option="""") const;  Forwards to THnBase::Projection(). ;  ; THnSparse * Rebin (const Int_t *group) const;  ; THnSparse * Rebin (Int_t group) const;  ; void Reset (Option_t *option="""") override;  Clear the histogram. ;  ; void SetBinContent (const Int_t *idx, Double_t v);  Forwards to THnBase::SetBinContent(). ;  ; void SetBinContent (Long64_t bin, Double_t v) override;  Set content of bin with index ""bin"" to ""v"". ;  ; void SetBinError2 (Long64_t bin, Double_t e2) override;  Set error of bin with index ""bin"" to ""e"", enable errors if needed. ;  ; void SetFilledBins (Long64_t nbins) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Sumw2 () override;  Enable calculation of errors. ;  ;  Public Member Functions inherited from THnBase;  ~THnBase () override;  Destruct a THnBase. ;  ; void Add (const TH1 *hist, Double_t c=1.);  Fill the THnBase with the bins of hist that have content or error != 0. ;  ; void Add (const THnBase *h, Double_t c=1.);  Add contents of h scaled by c to this histogram: this = this + c * h Note that if h has Sumw2 set, Sumw2 is automatically called for this if not already set. ;  ; void AddBinContent (const Int_t *x, Double_t v=1.);  ; void Browse (TBrowser *b) override;  Browse a THnSparse: create an entry (ROOT::THnSparseBrowsable) for each dimension. ;  ; void CalculateErrors (Bool_t calc=kTRUE);  Calculate errors (or not if """,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparse.html:7845,error,error,7845,doc/master/classTHnSparse.html,https://root.cern,https://root.cern/doc/master/classTHnSparse.html,2,['error'],"['error', 'errors']"
Availability,"em ; Reimplemented from TObject.; Definition at line 36 of file HypoTestResult.h. ◆ CLs(). virtual double RooStats::HypoTestResult::CLs ; (; ); const. inlinevirtual . \(CL_{s}\) is simply \(CL_{s+b}/CL_{b}\) (not a method, but a quantity) ; Definition at line 64 of file HypoTestResult.h. ◆ CLsError(). double HypoTestResult::CLsError ; (; ); const. The error on the ratio \(CL_{s+b}/CL_{b}\). ; Returns an estimate of the error on \(CL_{s}\) through combination of the errors on \(CL_{b}\) and \(CL_{s+b}\):. \[; \sigma_{CL_s} = CL_s; \sqrt{\left( \frac{\sigma_{CL_{s+b}}}{CL_{s+b}} \right)^2 + \left( \frac{\sigma_{CL_{b}}}{CL_{b}} \right)^2}; \]. Definition at line 292 of file HypoTestResult.cxx. ◆ CLsplusb(). virtual double RooStats::HypoTestResult::CLsplusb ; (; ); const. inlinevirtual . Convert AlternatePValue into a ""confidence level"". ; Definition at line 61 of file HypoTestResult.h. ◆ CLsplusbError(). double HypoTestResult::CLsplusbError ; (; ); const. The error on the ""confidence level"" of the alternative hypothesis. ; Definition at line 273 of file HypoTestResult.cxx. ◆ DeclFileName(). static const char * RooStats::HypoTestResult::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 142 of file HypoTestResult.h. ◆ GetAllTestStatisticsData(). const RooArgList * RooStats::HypoTestResult::GetAllTestStatisticsData ; (; void ; ); const. inline . Definition at line 83 of file HypoTestResult.h. ◆ GetAltDetailedOutput(). RooDataSet * RooStats::HypoTestResult::GetAltDetailedOutput ; (; void ; ); const. inline . Definition at line 80 of file HypoTestResult.h. ◆ GetAltDistribution(). SamplingDistribution * RooStats::HypoTestResult::GetAltDistribution ; (; void ; ); const. inline . Definition at line 78 of file HypoTestResult.h. ◆ GetBackGroundIsAlt(). bool RooStats::HypoTestResult::GetBackGroundIsAlt ; (; void ; ); const. inline . Definition at line 102 of file HypoTestResult.h. ◆ GetFitInfo(). RooDataSet * RooStat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html:20472,error,error,20472,doc/master/classRooStats_1_1HypoTestResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html,1,['error'],['error']
Availability,"em. ; Leaf fields contain just data, collection fields resolve to offset columns, record fields have no materialization on the primitive column layer. . EnumeratorkLeaf ; kCollection ; kRecord ; kVariant ; kReference ; kInvalid . Definition at line 38 of file RNTupleUtil.hxx. Function Documentation. ◆ Add(). template<int DIMENSIONS, class PRECISION , template< int D_, class P_ > class... STAT_TO, template< int D_, class P_ > class... STAT_FROM> . void ROOT::Experimental::Add ; (; RHist< DIMENSIONS, PRECISION, STAT_TO... > & ; to, . const RHist< DIMENSIONS, PRECISION, STAT_FROM... > & ; from . ). Add two histograms. ; This operation may currently only be performed if the two histograms have the same axis configuration, use the same precision, and if from records at least the same statistics as to (recording more stats is fine).; Adding histograms with incompatible axis binning will be reported at runtime with an std::runtime_error. Insufficient statistics in the source histogram will be detected at compile-time and result in a compiler error.; In the future, we may either adopt a more relaxed definition of histogram addition or provide a mechanism to convert from one histogram type to another. We currently favor the latter path. ; Definition at line 342 of file RHist.hxx. ◆ CanMap(). ROOT::Experimental::EAxisCompatibility ROOT::Experimental::CanMap ; (; const RAxisEquidistant & ; target, . const RAxisEquidistant & ; source . ). noexcept . Whether (and how) the source axis can be merged into the target axis. ; Definition at line 126 of file RAxis.cxx. ◆ FitPanelLog(). ROOT::Experimental::RLogChannel & ROOT::Experimental::FitPanelLog ; (; ). Log channel for FitPanel diagnostics. ; Definition at line 22 of file RFitPanelModel.cxx. ◆ FitTo(). template<int DIMENSIONS, class PRECISION , template< int D_, class P_ > class... STAT> . RFitResult ROOT::Experimental::FitTo ; (; const RHist< DIMENSIONS, PRECISION, STAT... > & ; hist, . const RFunction< DIMENSIONS > & ; func, . st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:42811,error,error,42811,doc/v632/namespaceROOT_1_1Experimental.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html,1,['error'],['error']
Availability,"em::fBeepDurationUsed by Beep(); Int_tTSystem::fBeepFreqUsed by Beep(); TStringTSystem::fBuildArchArchitecure for which ROOT was built (passed to ./configure); TStringTSystem::fBuildCompilerCompiler used to build this ROOT; TStringTSystem::fBuildCompilerVersionCompiler version used to build this ROOT; TStringTSystem::fBuildDirLocation where to build ACLiC shared library and use as scratch area.; TStringTSystem::fBuildNodeDetailed information where ROOT was built; TSeqCollection*TSystem::fCompiledList of shared libs from compiled macros to be deleted; Bool_tTSystem::fDoneTrue if eventloop should be finished; TSeqCollection*TSystem::fFileHandlerList of file handlers; TStringTSystem::fFlagsDebugFlags for debug compilation; TStringTSystem::fFlagsOptFlags for optimized compilation; TSeqCollection*TSystem::fHelpersList of helper classes for alternative file/directory access; TStringTSystem::fHostnameHostname; Bool_tTSystem::fInControlTrue if in eventloop; TStringTSystem::fIncludePathUsed to expand $IncludePath in the directives given to SetMakeSharedLib and SetMakeExe; Bool_tTSystem::fInsideNotifyUsed by DispatchTimers(); TStringTSystem::fLastErrorStringLast system error message; Int_tTSystem::fLevelLevel of nested eventloops; TStringTSystem::fLinkdefSuffixDefault suffix for linkdef files to be used by ACLiC; TStringTSystem::fLinkedLibsUsed to expand $LinkedLibs in the directives given to SetMakeSharedLib and SetMakeExe; TStringTSystem::fListLibsList shared libraries, cache used by GetLibraries; TStringTSystem::fListPathsList of all include (fIncludePath + interpreter include path). Cache used by GetIncludePath; TStringTSystem::fMakeExeDirective used to build an executable; TStringTSystem::fMakeSharedLibDirective used to build a shared library; Int_tTSystem::fMaxrfdLargest fd in read mask; Int_tTSystem::fMaxwfdLargest fd in write mask; TStringTNamed::fNameobject identifier; Int_tTSystem::fNfdNumber of fd's in masks; TStringTSystem::fObjExtExtension of object files (.o, .o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TDCacheSystem.html:16764,error,error,16764,root/html526/TDCacheSystem.html,https://root.cern,https://root.cern/root/html526/TDCacheSystem.html,1,['error'],['error']
Availability,"em::fBeepFreqUsed by Beep(); TStringTSystem::fBuildArchArchitecure for which ROOT was built (passed to ./configure); TStringTSystem::fBuildCompilerCompiler used to build this ROOT; TStringTSystem::fBuildCompilerVersionCompiler version used to build this ROOT; TStringTSystem::fBuildDirLocation where to build ACLiC shared library and use as scratch area.; TStringTSystem::fBuildNodeDetailed information where ROOT was built; TSeqCollection*TSystem::fCompiledList of shared libs from compiled macros to be deleted; Bool_tTSystem::fDoneTrue if eventloop should be finished; TSeqCollection*TSystem::fFileHandlerList of file handlers; TStringTSystem::fFlagsDebugFlags for debug compilation; TStringTSystem::fFlagsOptFlags for optimized compilation; TSeqCollection*TSystem::fHelpersList of helper classes for alternative file/directory access; TStringTSystem::fHostnameHostname; Bool_tTSystem::fInControlTrue if in eventloop; TStringTSystem::fIncludePathUsed to expand $IncludePath in the directives given to SetMakeSharedLib and SetMakeExe; Bool_tTSystem::fInsideNotifyUsed by DispatchTimers(); Bool_tTNetSystem::fIsLocalTRUE if the path points to this host; TStringTSystem::fLastErrorStringLast system error message; Int_tTSystem::fLevelLevel of nested eventloops; TStringTSystem::fLinkdefSuffixDefault suffix for linkdef files to be used by ACLiC (see EACLiCProperties); TStringTSystem::fLinkedLibsUsed to expand $LinkedLibs in the directives given to SetMakeSharedLib and SetMakeExe; TStringTSystem::fListLibsList shared libraries, cache used by GetLibraries; TStringTSystem::fListPathsList of all include (fIncludePath + interpreter include path). Cache used by GetIncludePath; TStringTNetSystem::fLocalPrefixif fIsLocal, prefix to be prepend locally; TStringTSystem::fMakeExeDirective used to build an executable; TStringTSystem::fMakeSharedLibDirective used to build a shared library; Int_tTSystem::fMaxrfdLargest fd in read mask; Int_tTSystem::fMaxwfdLargest fd in write mask; TStringTNamed::fNameo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXNetSystem.html:17807,error,error,17807,root/html528/TXNetSystem.html,https://root.cern,https://root.cern/root/html528/TXNetSystem.html,4,['error'],['error']
Availability,"em::fSignalHandlerList of signal handlers; TFdSet*TSystem::fSignals!Signals that were trapped; TStringTSystem::fSoExtExtension of shared library (.so, .sl, .a, .dll, etc.); TSeqCollection*TSystem::fStdExceptionHandlerList of std::exception handlers; TSeqCollection*TSystem::fTimersList of timers; TStringTNamed::fTitleobject title; TStringTSystem::fWdpathWorking directory; TFdSet*TSystem::fWritemask!Files that should be checked for write events; TFdSet*TSystem::fWriteready!Files with writes waiting. private:. void*fDirpdirectory handler. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSystem. ←; TWebSystem. Function documentation; TWebSystem(); Create helper class that allows directory access via httpd.; The name must start with '-' to bypass the TSystem singleton check. Int_t MakeDirectory(const char* name); Make a directory via httpd. Not supported. void * OpenDirectory(const char* name); Open a directory via httpd. Returns an opaque pointer to a dir; structure. Returns 0 in case of error. void FreeDirectory(void* dirp); Free directory via httpd. const char * GetDirEntry(void* dirp); Get directory entry via httpd. Returns 0 in case no more entries. Int_t GetPathInfo(const char* path, FileStat_t& buf); Get info about a file. Info is returned in the form of a FileStat_t; structure (see TSystem.h).; The function returns 0 in case of success and 1 if the file could; not be stat'ed. Bool_t AccessPathName(const char* path, EAccessMode mode); Returns FALSE if one can access a file using the specified access mode.; Mode is the same as for the Unix access(2) function.; Attention, bizarre convention of return value!!. Int_t Unlink(const char* path); Unlink, i.e. remove, a file or directory. Returns 0 when successful,; -1 in case of failure. Not supported for httpd. void * GetDirPtr() const; { return fDirp; }. TWebSystem(). virtual ~TWebSystem(); { }. » Author: Fons Rademakers 17/01/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TWebSystem.html:20104,error,error,20104,root/html602/TWebSystem.html,https://root.cern,https://root.cern/root/html602/TWebSystem.html,2,['error'],['error']
Availability,"em::fWriteready!Files with writes waiting. private:. TStringfDirCurrent directory; TStringfDirEntryLast dir entry; VecStringVP_tfDirListBuffer for directory content; void*fDirpDirectory pointer; Bool_tfIsRootdNature of remote file server; Bool_tfIsXRootdNature of remote file server; TStringfUrlInitial url; static THashListfgAddrFQDNCross-table address<->FQDN; static THashListfgAdminHashList of existing XrdClientAdmin; static Bool_tfgInitDoneAvoid initializing more than once; static Bool_tfgRootdBCControl rootd backward compatibility. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSystem. ←; TNetSystem. ←; TXNetSystem. Function documentation; TXNetSystem(Bool_t owner = kTRUE); Create system management class without connecting to server. TXNetSystem(const char* url, Bool_t owner = kTRUE); Create system management class and connect to server specified by url. XrdClientAdmin * Connect(const char* url); Init a connection to the server.; Returns a pointer to the appropriate instance of XrdClientAdmin or 0; in case of failure. void InitXrdClient(); One-time initialization of some communication variables for xrootd protocol. void* OpenDirectory(const char* dir); Open a directory. Returns a non-zero pointer (with no special; purpose) in case of success, 0 in case of error. void FreeDirectory(void* dirp); Free(Close) the directory referenced by dirp. Int_t MakeDirectory(const char* dir); Create a directory. Return 0 on success, -1 otherwise. const char* GetDirEntry(void* dirp); Get directory entry for directory referenced by dirp.; Returns 0 in case there are no more entries. Int_t GetPathInfo(const char* path, FileStat_t& buf); Get info about a file. Info is returned in the form of a FileStat_t; structure (see TSystem.h).; The function returns 0 in case of success and 1 if the file could; not be stat'ed.; NOTICE: Not all information is available with an xrootd server. Bool_t ConsistentWith(const char* path, void* dirptr); Check consistency of this helper with the o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXNetSystem.html:21482,failure,failure,21482,root/html602/TXNetSystem.html,https://root.cern,https://root.cern/root/html602/TXNetSystem.html,4,['failure'],['failure']
Availability,"emDirectory(); TSystemDirectory(const char* dirname, const char* path); virtual~TSystemDirectory(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(const char*); virtual voidCopy(TObject&) const; virtual voidDelete(); virtual voidDelete(Option_t*); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidDrawClass() const; virtual TObject*DrawClone(Option_t*) const; virtual voidTSystemFile::Dump() const; virtual voidEdit(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TSystemFile::GetIconName() const; virtual TList*GetListOfFiles() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSystemDirectory.html:1513,error,error,1513,root/html528/TSystemDirectory.html,https://root.cern,https://root.cern/root/html528/TSystemDirectory.html,6,['error'],['error']
Availability,"emIter& iter); virtual voidPrint(Option_t* option = """") const; voidSetLimitRatio(Double_t limit); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. TGeoElemIter(); TGeoElementRN*Down(Int_t ibranch); TGeoElementRN*Up(). Data Members; private:. TObjArray*fBranchCurrent branch; const TGeoElementRN*fElemCurrent element; Int_tfLevelCurrent level; Double_tfLimitRatioMinimum cumulative branching ratio; Double_tfRatioCurrent ratio; const TGeoElementRN*fTopTop element of the iteration. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoElemIter(TGeoElementRN* top, Double_t limit = 1.e-4); Default constructor. TGeoElemIter(const TGeoElemIter& iter); Copy ctor. ~TGeoElemIter(); Destructor. TGeoElemIter & operator=(const TGeoElemIter& iter); Assignment. TGeoElementRN * operator()(); () operator. TGeoElementRN * Up(); Go upwards from the current location until the next branching, then down. TGeoElementRN * Down(Int_t ibranch); Go downwards from current level via ibranch as low in the tree as possible.; Return value flags if the operation was successful. TGeoElementRN * Next(); Return next element. void Print(Option_t* option = """") const; Print info about the current decay branch. TGeoElementRN * GetElement() const; {return fElem;}. TGeoElemIter(); {}. TObjArray * GetBranch() const; {return fBranch;}. const TGeoElementRN * GetTop() const; {return fTop;}. Int_t GetLevel() const; {return fLevel;}. Double_t GetRatio() const; {return fRatio;}. void SetLimitRatio(Double_t limit); {fLimitRatio = limit;}. » Author: Andrei Gheata 17/06/04 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id: TGeoElement.h 33465 2010-05-11 09:58:19Z agheata $ » Last generated: 2010-11-08 19:54; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoElemIter.html:2020,down,downwards,2020,root/html528/TGeoElemIter.html,https://root.cern,https://root.cern/root/html528/TGeoElemIter.html,1,['down'],['downwards']
Availability,"emIter& iter); virtual voidPrint(Option_t* option = """") const; voidSetLimitRatio(Double_t limit); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. TGeoElemIter(); TGeoElementRN*Down(Int_t ibranch); TGeoElementRN*Up(). Data Members; private:. TObjArray*fBranchCurrent branch; const TGeoElementRN*fElemCurrent element; Int_tfLevelCurrent level; Double_tfLimitRatioMinimum cumulative branching ratio; Double_tfRatioCurrent ratio; const TGeoElementRN*fTopTop element of the iteration. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoElemIter(TGeoElementRN* top, Double_t limit = 1.e-4); Default constructor. TGeoElemIter(const TGeoElemIter& iter); Copy ctor. ~TGeoElemIter(); Destructor. TGeoElemIter & operator=(const TGeoElemIter& iter); Assignment. TGeoElementRN * operator()(); () operator. TGeoElementRN * Up(); Go upwards from the current location until the next branching, then down. TGeoElementRN * Down(Int_t ibranch); Go downwards from current level via ibranch as low in the tree as possible.; Return value flags if the operation was successful. TGeoElementRN * Next(); Return next element. void Print(Option_t* option = """") const; Print info about the current decay branch. TGeoElementRN * GetElement() const; {return fElem;}. TGeoElemIter(); {}. TObjArray * GetBranch() const; {return fBranch;}. const TGeoElementRN * GetTop() const; {return fTop;}. Int_t GetLevel() const; {return fLevel;}. Double_t GetRatio() const; {return fRatio;}. void SetLimitRatio(Double_t limit); {fLimitRatio = limit;}. » Author: Andrei Gheata 17/06/04 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id: TGeoElement.h 33465 2010-05-11 09:58:19Z agheata $ » Last generated: 2011-07-04 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoElemIter.html:2020,down,downwards,2020,root/html530/TGeoElemIter.html,https://root.cern,https://root.cern/root/html530/TGeoElemIter.html,1,['down'],['downwards']
Availability,"emIter& iter); virtual voidPrint(Option_t* option = """") const; voidSetLimitRatio(Double_t limit); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. TGeoElemIter(); TGeoElementRN*Down(Int_t ibranch); TGeoElementRN*Up(). Data Members; private:. TObjArray*fBranchCurrent branch; const TGeoElementRN*fElemCurrent element; Int_tfLevelCurrent level; Double_tfLimitRatioMinimum cumulative branching ratio; Double_tfRatioCurrent ratio; const TGeoElementRN*fTopTop element of the iteration. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoElemIter(TGeoElementRN* top, Double_t limit = 1.e-4); Default constructor. TGeoElemIter(const TGeoElemIter& iter); Copy ctor. ~TGeoElemIter(); Destructor. TGeoElemIter & operator=(const TGeoElemIter& iter); Assignment. TGeoElementRN * operator()(); () operator. TGeoElementRN * Up(); Go upwards from the current location until the next branching, then down. TGeoElementRN * Down(Int_t ibranch); Go downwards from current level via ibranch as low in the tree as possible.; Return value flags if the operation was successful. TGeoElementRN * Next(); Return next element. void Print(Option_t* option = """") const; Print info about the current decay branch. TGeoElementRN * GetElement() const; {return fElem;}. TGeoElemIter(); {}. TObjArray * GetBranch() const; {return fBranch;}. const TGeoElementRN * GetTop() const; {return fTop;}. Int_t GetLevel() const; {return fLevel;}. Double_t GetRatio() const; {return fRatio;}. void SetLimitRatio(Double_t limit); {fLimitRatio = limit;}. » Author: Andrei Gheata 17/06/04 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id: TGeoElement.h 33465 2010-05-11 09:58:19Z agheata $ » Last generated: 2011-11-03 20:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoElemIter.html:2020,down,downwards,2020,root/html532/TGeoElemIter.html,https://root.cern,https://root.cern/root/html532/TGeoElemIter.html,3,"['Down', 'down']","['Down', 'downwards']"
Availability,"emaining component PDF for its analytical integration; capability of the requested set ('allVars'). It finds the largest common set of variables; that can be integrated by all remaining components. If such a set exists, it reconfirms that; each component is capable of analytically integrating the common set, and combines the components; individual integration codes into a single integration code valid for RooProdPdf. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given scenario code. Bool_t checkObservables(const RooArgSet* nset) const; Obsolete. RooAbsPdf::ExtendMode extendMode() const; If this product contains exactly one extendable p.d.f return the extension abilities of; that p.d.f, otherwise return CanNotBeExtended. Double_t expectedEvents(const RooArgSet* nset); Return the expected number of events associated with the extentable input p.d.f; in the product. If there is no extendable term, return zero and issue and error. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return generator context optimized for generating events from product p.d.f.s. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; Query internal generation capabilities of component p.d.f.s and aggregate capabilities; into master configuration passed to the generator context. void initGenerator(Int_t code); Forward one-time initialization call to component generation initialization; methods. void generateEvent(Int_t code); Generate a single event with configuration specified by 'code'; Defer internal generation to components as encoded in the _genCode; registry for given generator code. Bool_t isDirectGenSafe(const RooAbsArg& arg) const; Forward determination of safety of internal generator code to; component p.d.f that would generate the given observ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProdPdf.html:51150,error,error,51150,root/html526/RooProdPdf.html,https://root.cern,https://root.cern/root/html526/RooProdPdf.html,1,['error'],['error']
Availability,"ember Functions inherited from RooAbsMoment; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFirstMoment.html:46256,error,error,46256,doc/master/classRooFirstMoment.html,https://root.cern,https://root.cern/doc/master/classRooFirstMoment.html,6,['error'],['error']
Availability,"ember Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::PDEFoamDiscriminant Class ReferenceTMVA. ; This PDEFoam variant stores in every cell the discriminant. ; D = #events with given class / total number of events; as well as the statistical error on the discriminant. It therefore acts as a discriminant estimator. It should be booked together with the PDEFoamDiscriminantDensity density estimator, which returns the discriminant density at a given phase space point during the foam build-up. ; Definition at line 38 of file PDEFoamDiscriminant.h. Public Member Functions;  PDEFoamDiscriminant ();  Default constructor for streamer, user should not use it. ;  ;  PDEFoamDiscriminant (const TString &, UInt_t);  ; virtual ~PDEFoamDiscriminant ();  ; virtual void FillFoamCells (const Event *ev, Float_t wt);  This function fills an event into the discriminant PDEFoam. ;  ; virtual void Finalize ();  Calc discriminator and its error for every cell and save it to the cell. ;  ; virtual TClass * IsA () const;  ; virtual TH2D * Project2 (Int_t, Int_t, ECellValue, PDEFoamKernelBase *, UInt_t);  Project foam variable idim1 and variable idim2 to histogram. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::PDEFoam;  PDEFoam ();  Default constructor for streamer, user should not use it. ;  ;  PDEFoam (const TString &);  User constructor, to be employed by the user. ;  ; virtual ~PDEFoam ();  Default destructor. ;  ; void AddVariableName (const char *s);  ; void AddVariableName (TObjString *s);  ; void CheckAll (Int_t);  User utility, miscellaneous and debug. ;  ; void Create ();  Basic initialization of FOAM invoked by the user. ;  ; void DeleteBinarySearchTree ();  Delete the foam's density estimator, which contains the binary search tree. ;  ; TH1D * Draw1Dim (ECellVa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamDiscriminant.html:1171,error,error,1171,doc/master/classTMVA_1_1PDEFoamDiscriminant.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamDiscriminant.html,1,['error'],['error']
Availability,"ember is a pointer, the pointer value is printed 'obj' is assume to point to an object of the class describe by this TClass; The following output is the Dump of a TArrow object: fAngle 0 Arrow opening angle (degrees); fArrowSize 0.2 Arrow Size; fOption.*fData; fX1 0.1 X of 1st point; fY1 0.15 Y of 1st point; fX2 0.67 X of 2nd point; fY2 0.83 Y of 2nd point; fUniqueID 0 object unique identifier; fBits 50331648 bit field status word; fLineColor 1 line color; fLineStyle 1 line style; fLineWidth 1 line width; fFillColor 19 fill area color; fFillStyle 1001 fill area style; If noAddr is true, printout of all pointer values is skipped. ; Definition at line 2535 of file TClass.cxx. ◆ DynamicCast() [1/2]. const void * TClass::DynamicCast ; (; const TClass * ; cl, . const void * ; obj, . Bool_t ; up = kTRUE . ). Cast obj of this class type up to baseclass cl if up is true. ; Cast obj of this class type down from baseclass cl if up is false. If this class is not a baseclass of cl return 0, else the pointer to the cl part of this (up) or to this (down). ; Definition at line 4937 of file TClass.cxx. ◆ DynamicCast() [2/2]. void * TClass::DynamicCast ; (; const TClass * ; cl, . void * ; obj, . Bool_t ; up = kTRUE . ). Cast obj of this class type up to baseclass cl if up is true. ; Cast obj of this class type down from baseclass cl if up is false. If this class is not a baseclass of cl return 0, else the pointer to the cl part of this (up) or to this (down). ; Definition at line 4915 of file TClass.cxx. ◆ EscapeChars(). char * TClass::EscapeChars ; (; const char * ; text); const. Introduce an escape character (@) in front of a special chars. ; You need to use the result immediately before it is being overwritten. ; Definition at line 2568 of file TClass.cxx. ◆ FindClassOrBaseMethodWithId(). TMethod * TClass::FindClassOrBaseMethodWithId ; (; DeclId_t ; faddr). private . Find a method with decl id in this class or its bases. ; Definition at line 4440 of file TClass.cxx. ◆ FindConversi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:65945,down,down,65945,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,1,['down'],['down']
Availability,"ember is a pointer, the pointer value is printed 'obj' is assume to point to an object of the class describe by this TClass; The following output is the Dump of a TArrow object: fAngle 0 Arrow opening angle (degrees); fArrowSize 0.2 Arrow Size; fOption.*fData; fX1 0.1 X of 1st point; fY1 0.15 Y of 1st point; fX2 0.67 X of 2nd point; fY2 0.83 Y of 2nd point; fUniqueID 0 object unique identifier; fBits 50331648 bit field status word; fLineColor 1 line color; fLineStyle 1 line style; fLineWidth 1 line width; fFillColor 19 fill area color; fFillStyle 1001 fill area style; If noAddr is true, printout of all pointer values is skipped. ; Definition at line 2602 of file TClass.cxx. ◆ DynamicCast() [1/2]. const void * TClass::DynamicCast ; (; const TClass * ; cl, . const void * ; obj, . Bool_t ; up = kTRUE . ). Cast obj of this class type up to baseclass cl if up is true. ; Cast obj of this class type down from baseclass cl if up is false. If this class is not a baseclass of cl return 0, else the pointer to the cl part of this (up) or to this (down). ; Definition at line 5004 of file TClass.cxx. ◆ DynamicCast() [2/2]. void * TClass::DynamicCast ; (; const TClass * ; cl, . void * ; obj, . Bool_t ; up = kTRUE . ). Cast obj of this class type up to baseclass cl if up is true. ; Cast obj of this class type down from baseclass cl if up is false. If this class is not a baseclass of cl return 0, else the pointer to the cl part of this (up) or to this (down). ; Definition at line 4982 of file TClass.cxx. ◆ EscapeChars(). char * TClass::EscapeChars ; (; const char * ; text); const. Introduce an escape character (@) in front of a special chars. ; You need to use the result immediately before it is being overwritten. ; Definition at line 2635 of file TClass.cxx. ◆ FindClassOrBaseMethodWithId(). TMethod * TClass::FindClassOrBaseMethodWithId ; (; DeclId_t ; faddr). private . Find a method with decl id in this class or its bases. ; Definition at line 4507 of file TClass.cxx. ◆ FindConversi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClass.html:65946,down,down,65946,doc/master/classTClass.html,https://root.cern,https://root.cern/doc/master/classTClass.html,1,['down'],['down']
Availability,"ember(const char* name); TZIPMember(const TZIPMember& member); virtual~TZIPMember(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; UInt_tGetAttrExt() const; UInt_tGetAttrInt() const; const char*TArchiveMember::GetComment() const; Long64_tTArchiveMember::GetCompressedSize() const; UInt_tGetCRC32() const; Long64_tTArchiveMember::GetDecompressedSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tTArchiveMember::GetFilePosition() const; void*GetGlobal() const; Long64_tGetGlobalLen() const; virtual const char*TObject::GetIconName() const; UInt_tGetLevel() const; void*GetLocal() const; Long64_tGetLocalLen() const; UInt_tGetMethod() const; TDatimeTArchiveMember::GetModTime() const; virtual const char*TArchiveMembe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TZIPMember.html:3413,error,error,3413,root/html528/TZIPMember.html,https://root.cern,https://root.cern/root/html528/TZIPMember.html,1,['error'],['error']
Availability,"ember(const char* name); TZIPMember(const TZIPMember& member); virtual~TZIPMember(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; UInt_tGetAttrExt() const; UInt_tGetAttrInt() const; const char*TArchiveMember::GetComment() const; Long64_tTArchiveMember::GetCompressedSize() const; UInt_tGetCRC32() const; Long64_tTArchiveMember::GetDecompressedSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tTArchiveMember::GetFilePosition() const; void*GetGlobal() const; UInt_tGetGlobalLen() const; virtual const char*TObject::GetIconName() const; UInt_tGetLevel() const; void*GetLocal() const; UInt_tGetLocalLen() const; UInt_tGetMethod() const; TDatimeTArchiveMember::GetModTime() const; virtual const char*TArchiveMember::G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TZIPMember.html:3519,error,error,3519,root/html530/TZIPMember.html,https://root.cern,https://root.cern/root/html530/TZIPMember.html,5,['error'],['error']
Availability,"embers (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TArray(); static TClass*Class(); virtual Double_tGetAt(Int_t i) const; Int_tGetSize() const; virtual TClass*IsA() const; TArray&operator=(const TArray& rhs); static TArray*ReadArray(TBuffer& b, const TClass* clReq); virtual voidSet(Int_t n); virtual voidSetAt(Double_t v, Int_t i); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TArray(); TArray(Int_t n); TArray(const TArray& a); static voidWriteArray(TBuffer& b, const TArray* a). protected:. Bool_tBoundsOk(const char* where, Int_t at) const; Bool_tOutOfBoundsError(const char* where, Int_t i) const. Data Members; public:. Int_tfNNumber of array elements. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t OutOfBoundsError(const char* where, Int_t i) const; Generate an out-of-bounds error. Always returns false. TArray * ReadArray(TBuffer& b, const TClass* clReq); Read TArray object from buffer. Simplified version of; TBuffer::ReadObject (does not keep track of multiple; references to same array). void WriteArray(TBuffer& b, const TArray* a); Write TArray object to buffer. Simplified version of; TBuffer::WriteObject (does not keep track of multiple; references to the same array). Bool_t BoundsOk(const char* where, Int_t at) const. TArray(); { }. TArray(Int_t n); { }. TArray(const TArray& a); { }. TArray & operator=(const TArray& rhs); {if(this!=&rhs) fN = rhs.fN; return *this; }. virtual ~TArray(); { fN = 0; }. Int_t GetSize() const; { return fN; }. void Set(Int_t n). Double_t GetAt(Int_t i) const. void SetAt(Double_t v, Int_t i). » Author: Fons Rademakers 21/10/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id$ » Last generated: 2015-06-02 15:37; This page has been auto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TArray.html:1473,error,error,1473,root/html604/TArray.html,https://root.cern,https://root.cern/root/html604/TArray.html,2,['error'],['error']
Availability,"embers (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TArray(); static TClass*Class(); virtual Double_tGetAt(Int_t i) const; Int_tGetSize() const; virtual TClass*IsA() const; TArray&operator=(const TArray& rhs); static TArray*ReadArray(TBuffer& b, const TClass* clReq); virtual voidSet(Int_t n); virtual voidSetAt(Double_t v, Int_t i); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TArray(); TArray(Int_t n); TArray(const TArray& a); static voidWriteArray(TBuffer& b, const TArray* a). protected:. Bool_tBoundsOk(const char* where, Int_t at) const; Bool_tOutOfBoundsError(const char* where, Int_t i) const. Data Members; public:. Int_tfNNumber of array elements. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t OutOfBoundsError(const char* where, Int_t i) const; Generate an out-of-bounds error. Always returns false. TArray * ReadArray(TBuffer& b, const TClass* clReq); Read TArray object from buffer. Simplified version of; TBuffer::ReadObject (does not keep track of multiple; references to same array). void WriteArray(TBuffer& b, const TArray* a); Write TArray object to buffer. Simplified version of; TBuffer::WriteObject (does not keep track of multiple; references to the same array). Bool_t BoundsOk(const char* where, Int_t at) const. TArray(); { }. TArray(Int_t n); { }. TArray(const TArray& a); { }. TArray & operator=(const TArray& rhs); {if(this!=&rhs) fN = rhs.fN; return *this; }. virtual ~TArray(); { fN = 0; }. Int_t GetSize() const; { return fN; }. void Set(Int_t n). Double_t GetAt(Int_t i) const. void SetAt(Double_t v, Int_t i). » Author: Fons Rademakers 21/10/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id$ » Last generated: 2015-06-30 14:38; This page has been auto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TArray.html:1473,error,error,1473,root/html602/TArray.html,https://root.cern,https://root.cern/root/html602/TArray.html,2,['error'],['error']
Availability,"embers(const void* obj, TMemberInspector& insp, Bool_t isTransient) const; static Bool_tCanDelete(); static Bool_tCanOptimize(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t*); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Bool_tCompareContent(TClass* cl, TVirtualStreamerInfo* info, Bool_t warn, Bool_t complete, TFile* file); virtual voidCompile(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDeleteArray(void* p, Bool_t dtorOnly = kFALSE); virtual voidDestructor(void* p, Bool_t dtorOnly = kFALSE); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static TVirtualStreamerInfo*Factory(); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidForceWriteInfo(TFile* file, Bool_t force = kFALSE); virtual TClassStreamer*GenEmulatedClassStreamer(const char* class_name, Bool_t silent); virtual TVirtualCollectionProxy*GenEmulatedProxy(const char* class_name, Bool_t silent); virtual Int_tGenerateHeaderFile(const char* dirname, const TList* subClasses = 0, const TList* extrainfos = 0); virtual TClassStreamer*GenExplicitClassStreamer(const ROOT::TCollectionPr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVirtualStreamerInfo.html:1995,Error,Error,1995,root/html602/TVirtualStreamerInfo.html,https://root.cern,https://root.cern/root/html602/TVirtualStreamerInfo.html,2,['Error'],['Error']
Availability,"emchr(p, '&', (size_t)(e - p));; 7032 if (s == NULL) {; 7033 s = e;; 7034 }; 7035 DEBUG_ASSERT(s >= p);; 7036 if (s < p) {; 7037 return -3;; 7038 }; 7039 ; 7040 /* Decode variable into destination buffer */; 7041 len = mg_url_decode(p, (int)(s - p), dst, (int)dst_len, 1);; 7042 ; 7043 /* Redirect error code from -1 to -2 (destination buffer too; 7044 * small). */; 7045 if (len == -1) {; 7046 len = -2;; 7047 }; 7048 break;; 7049 }; 7050 }; 7051 }; 7052 ; 7053 return len;; 7054}; 7055 ; 7056 ; 7057/* split a string ""key1=val1&key2=val2"" into key/value pairs */; 7058int; 7059mg_split_form_urlencoded(char *data,; 7060 struct mg_header *form_fields,; 7061 unsigned num_form_fields); 7062{; 7063 char *b;; 7064 int i;; 7065 int num = 0;; 7066 ; 7067 if (data == NULL) {; 7068 /* parameter error */; 7069 return -1;; 7070 }; 7071 ; 7072 if ((form_fields == NULL) && (num_form_fields == 0)) {; 7073 /* determine the number of expected fields */; 7074 if (data[0] == 0) {; 7075 return 0;; 7076 }; 7077 /* count number of & to return the number of key-value-pairs */; 7078 num = 1;; 7079 while (*data) {; 7080 if (*data == '&') {; 7081 num++;; 7082 }; 7083 data++;; 7084 }; 7085 return num;; 7086 }; 7087 ; 7088 if ((form_fields == NULL) || ((int)num_form_fields <= 0)) {; 7089 /* parameter error */; 7090 return -1;; 7091 }; 7092 ; 7093 for (i = 0; i < (int)num_form_fields; i++) {; 7094 /* extract key-value pairs from input data */; 7095 while ((*data == ' ') || (*data == '\t')) {; 7096 /* skip initial spaces */; 7097 data++;; 7098 }; 7099 if (*data == 0) {; 7100 /* end of string reached */; 7101 break;; 7102 }; 7103 form_fields[num].name = data;; 7104 ; 7105 /* find & or = */; 7106 b = data;; 7107 while ((*b != 0) && (*b != '&') && (*b != '=')) {; 7108 b++;; 7109 }; 7110 ; 7111 if (*b == 0) {; 7112 /* last key without value */; 7113 form_fields[num].value = NULL;; 7114 } else if (*b == '&') {; 7115 /* mid key without value */; 7116 form_fields[num].value = NULL;; 7117 } else {; 7118 /* te",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:203885,error,error,203885,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,2,['error'],['error']
Availability,"emchr(p, '&', (size_t)(e - p));; 7033 if (s == NULL) {; 7034 s = e;; 7035 }; 7036 DEBUG_ASSERT(s >= p);; 7037 if (s < p) {; 7038 return -3;; 7039 }; 7040 ; 7041 /* Decode variable into destination buffer */; 7042 len = mg_url_decode(p, (int)(s - p), dst, (int)dst_len, 1);; 7043 ; 7044 /* Redirect error code from -1 to -2 (destination buffer too; 7045 * small). */; 7046 if (len == -1) {; 7047 len = -2;; 7048 }; 7049 break;; 7050 }; 7051 }; 7052 }; 7053 ; 7054 return len;; 7055}; 7056 ; 7057 ; 7058/* split a string ""key1=val1&key2=val2"" into key/value pairs */; 7059int; 7060mg_split_form_urlencoded(char *data,; 7061 struct mg_header *form_fields,; 7062 unsigned num_form_fields); 7063{; 7064 char *b;; 7065 int i;; 7066 int num = 0;; 7067 ; 7068 if (data == NULL) {; 7069 /* parameter error */; 7070 return -1;; 7071 }; 7072 ; 7073 if ((form_fields == NULL) && (num_form_fields == 0)) {; 7074 /* determine the number of expected fields */; 7075 if (data[0] == 0) {; 7076 return 0;; 7077 }; 7078 /* count number of & to return the number of key-value-pairs */; 7079 num = 1;; 7080 while (*data) {; 7081 if (*data == '&') {; 7082 num++;; 7083 }; 7084 data++;; 7085 }; 7086 return num;; 7087 }; 7088 ; 7089 if ((form_fields == NULL) || ((int)num_form_fields <= 0)) {; 7090 /* parameter error */; 7091 return -1;; 7092 }; 7093 ; 7094 for (i = 0; i < (int)num_form_fields; i++) {; 7095 /* extract key-value pairs from input data */; 7096 while ((*data == ' ') || (*data == '\t')) {; 7097 /* skip initial spaces */; 7098 data++;; 7099 }; 7100 if (*data == 0) {; 7101 /* end of string reached */; 7102 break;; 7103 }; 7104 form_fields[num].name = data;; 7105 ; 7106 /* find & or = */; 7107 b = data;; 7108 while ((*b != 0) && (*b != '&') && (*b != '=')) {; 7109 b++;; 7110 }; 7111 ; 7112 if (*b == 0) {; 7113 /* last key without value */; 7114 form_fields[num].value = NULL;; 7115 } else if (*b == '&') {; 7116 /* mid key without value */; 7117 form_fields[num].value = NULL;; 7118 } else {; 7119 /* te",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:203917,error,error,203917,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,2,['error'],['error']
Availability,"ement of two-dimensional histograms. The inter-relation of two measured quantities X and Y can always be visualized by a two-dimensional histogram or scatter plot, but if Y is an unknown (but single-valued) approximate function of X, this function is displayed by a profile histogram with much better precision than by a scatter plot.; The following formulae show the cumulated contents (capital letters) and the values displayed by the printing or plotting routines (small letters) of the elements for bin j. ; \[; \begin{align}; H(j) &= \sum w \cdot Y \\; E(j) &= \sum w \cdot Y^2 \\; W(j) &= \sum w & &\text{if weights different from 1, the number of bin effective entries is used} \\; h(j) &= H(j) / W(j) & &\text{mean of Y,} \\; s(j) &= \sqrt{E(j)/W(j)- h(j)^2} & &\text{standard deviation of Y} \\; e(j) &= s(j)/\sqrt{W(j)} & &\text{standard error on the mean} \\; \end{align}; \]. The bin content is always the mean of the Y values, but errors change depending on options: ; \[; \begin{align}; \text{GetBinContent}(j) &= h(j) \\; \text{GetBinError}(j) &=; \begin{cases}; e(j) &\text{if option="""" (default). Error of the mean of all y values.} \\; s(j) &\text{if option=""s"". Standard deviation of all y values.} \\; \begin{cases} e(j) &\text{if } h(j) \ne 0 \\ 1/\sqrt{12 N} &\text{if } h(j)=0 \end{cases} &\text{if option=""i"". This is useful for storing integers such as ADC counts.} \\; 1/\sqrt{W(j)} &\text{if option=""g"". Error of a weighted mean for combining measurements with variances of } w. \\; \end{cases}; \end{align}; \]. In the special case where s(j) is zero (eg, case of 1 entry only in one bin) the bin error e(j) is computed from the average of the s(j) for all bins if the static function TProfile::Approximate() has been called. This simple/crude approximation was suggested in order to keep the bin during a fit operation. But note that this approximation is not the default behaviour. See also TProfile::BuildOptions for more on error options. Creating and drawing a profil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile.html:1641,error,errors,1641,doc/master/classTProfile.html,https://root.cern,https://root.cern/doc/master/classTProfile.html,1,['error'],['errors']
Availability,"ement->CannotSplit()) {; 432 fSplitLevel = 0;; 433 } else if (element->IsA() == TStreamerBase::Class()) {; 434 // -- We are a base class element.; 435 // Note: This does not include an STL container class which is; 436 // being used as a base class because the streamer element; 437 // in that case is not the base streamer element it is the; 438 // STL streamer element.; 439 fType = 1;; 440 TClass* clOfElement = element->GetClassPointer();; 441 Int_t nbranches = fBranches.GetEntriesFast();; 442 // Note: The following code results in base class branches; 443 // having two different cases for what their parent; 444 // class will be, this is very annoying. It is also; 445 // very annoying that the naming conventions for the; 446 // sub-branch names are different as well.; 447 if (!strcmp(name, clOfElement->GetName())) {; 448 // -- If the branch's name is the same as the base class name,; 449 // which happens when we are a child branch of a top-level; 450 // branch whose name does not end in a dot and also has no; 451 // internal dots, elide the branch name, and keep the branch; 452 // hierarchy rooted at the ultimate parent, this keeps the base; 453 // class part of the branch name from propagating downwards.; 454 // FIXME: We are eliding the base class here, creating a break in the branch hierarchy.; 455 // Note: We can use parent class (cltop) != branch class (elemClass) to detection elision.; 456 Unroll("""", fBranchClass.GetClass(), clOfElement, pointer, basketsize, splitlevel+splitSTLP, 0);; 457 SetReadLeavesPtr();; 458 SetFillLeavesPtr();; 459 return;; 460 }; 461 // If the branch's name is not the same as the base class name,; 462 // keep the branch name as a prefix (i.e., continue the branch; 463 // hierarchy), but start a new class hierarchy at the base class.; 464 //; 465 // Note: If the parent branch was created by the branch constructor; 466 // which takes a folder as a parameter, then this case will; 467 // be used, because the branch name will be the same as t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:15711,down,downwards,15711,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['down'],['downwards']
Availability,"ement->IsBase()) {; 3526 if (atstart) { fprintf(file,"" : ""); atstart = kFALSE; }; 3527 else fprintf(file,"" , "");; 3528 fprintf(file, ""%s(const_cast<%s &>( rhs ))\n"", element->GetName(),protoname.Data());; 3529 } else {; 3530 if (element->GetArrayLength() <= 1) {; 3531 if (atstart) { fprintf(file,"" : ""); atstart = kFALSE; }; 3532 else fprintf(file,"" , "");; 3533 if (R__IsUniquePtr(element)) {; 3534 fprintf(file, ""%s(const_cast<%s &>( rhs ).%s.release() )\n"",element->GetName(),protoname.Data(),element->GetName());; 3535 } else {; 3536 fprintf(file, ""%s(const_cast<%s &>( rhs ).%s)\n"",element->GetName(),protoname.Data(),element->GetName());; 3537 }; 3538 }; 3539 }; 3540 }; 3541 fprintf(file,""{\n"");; 3542 fprintf(file,"" // This is NOT a copy constructor. This is actually a move constructor (for stl container's sake).\n"");; 3543 fprintf(file,"" // Use at your own risk!\n"");; 3544 fprintf(file,"" (void)rhs; // avoid warning about unused parameter\n"");; 3545 ; 3546 R__WriteMoveBodyPointersArrays(file, protoname, next);; 3547}; 3548 ; 3549////////////////////////////////////////////////////////////////////////////////; 3550/// Write down the body of the 'move' constructor.; 3551 ; 3552static void R__WriteOddOperatorEqualBody(FILE *file, const TString &protoname, TIter &next); 3553{; 3554 fprintf(file,""{\n"");; 3555 fprintf(file,"" // This is NOT a copy operator=. This is actually a move operator= (for stl container's sake).\n"");; 3556 fprintf(file,"" // Use at your own risk!\n"");; 3557 fprintf(file,"" (void)rhs; // avoid warning about unused parameter\n"");; 3558 ; 3559 TStreamerElement *element = 0;; 3560 next.Reset();; 3561 while ((element = (TStreamerElement*)next())) {; 3562 if (element->IsBase()) {; 3563 fprintf(file, "" %s::operator=(const_cast<%s &>( rhs ));\n"", element->GetName(),protoname.Data());; 3564 } else {; 3565 if (element->GetArrayLength() <= 1) {; 3566 if (R__IsUniquePtr(element)) {; 3567 fprintf(file, "" %s = std::move((const_cast<%s &>( rhs ).%s));\n"",element->GetNa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:143899,down,down,143899,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['down'],['down']
Availability,"ement. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveScene(const char* n = ""TEveScene"", const char* t = """"); Constructor. TEveScene(TGLScenePad* gl_scene, const char* n = ""TEveScene"", const char* t = """"); Constructor. ~TEveScene(); Destructor. void CollectSceneParents(TEveElement::List_t& scenes); Virtual from TEveElement; here we simply append this scene to; the list. void Repaint(Bool_t dropLogicals = kFALSE); Repaint the scene. void RetransHierarchically(); Entry point for hierarchical transformation update.; Calls the recursive variant on all children. void RetransHierarchicallyRecurse(TEveElement* el, const TEveTrans& tp); Set transformation matrix for physical shape of element el in; the GL-scene and recursively descend into children (if enabled). void SetName(const char* n); Set scene's name. void Paint(Option_t* option = """"); Paint the scene. Iterate over children and calls PadPaint(). void DestroyElementRenderers(TEveElement* element); Remove element from the scene.; It is not an error if the element is not found in the scene. void DestroyElementRenderers(TObject* rnrObj); Remove element represented by object rnrObj from the scene.; It is not an error if the element is not found in the scene. const TGPicture* GetListTreeIcon(Bool_t open = kFALSE); Return icon for scene. TEveScene(const TEveScene& ). TEveScene& operator=(const TEveScene& ). Bool_t SingleRnrState() const; { return kTRUE; }. void Changed(); { fChanged = kTRUE; }. Bool_t IsChanged() const; { return fChanged; }. void SetHierarchical(Bool_t h); { fHierarchical = h; }. Bool_t GetHierarchical() const; { return fHierarchical; }. TGLScenePad* GetGLScene() const; { return fGLScene; }. void SetGLScene(TGLScenePad* s); { fGLScene = s; }. » Last changed: root/eve:$Id$ » Last generated: 2015-03-13 19:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveScene.html:21368,error,error,21368,root/html534/TEveScene.html,https://root.cern,https://root.cern/root/html534/TEveScene.html,4,['error'],['error']
Availability,"ement.h:385; TGeoElemIter::fElemconst TGeoElementRN * fElemDefinition TGeoElement.h:361; TGeoElemIter::fBranchTObjArray * fBranchDefinition TGeoElement.h:362; TGeoElemIter::NextTGeoElementRN * Next()Return next element.Definition TGeoElement.cxx:941; TGeoElemIter::operator=TGeoElemIter & operator=(const TGeoElemIter &iter)Assignment.Definition TGeoElement.cxx:867; TGeoElemIter::~TGeoElemItervirtual ~TGeoElemIter()Destructor.Definition TGeoElement.cxx:858; TGeoElemIter::operator()TGeoElementRN * operator()()() operator.Definition TGeoElement.cxx:887; TGeoElemIter::fTopconst TGeoElementRN * fTopDefinition TGeoElement.h:360; TGeoElemIter::fLimitRatioDouble_t fLimitRatioDefinition TGeoElement.h:364; TGeoElemIter::UpTGeoElementRN * Up()Go upwards from the current location until the next branching, then down.Definition TGeoElement.cxx:895; TGeoElemIter::GetElementconst TGeoElementRN * GetElement() constDefinition TGeoElement.h:383; TGeoElemIter::DownTGeoElementRN * Down(Int_t ibranch)Go downwards from current level via ibranch as low in the tree as possible.Definition TGeoElement.cxx:921; TGeoElemIter::GetTopconst TGeoElementRN * GetTop() constDefinition TGeoElement.h:382; TGeoElemIter::fLevelInt_t fLevelDefinition TGeoElement.h:363; TGeoElemIter::TGeoElemIterTGeoElemIter()Definition TGeoElement.h:368; TGeoElemIter::GetLevelInt_t GetLevel() constDefinition TGeoElement.h:384; TGeoElementRNClass representing a radionuclidevoid TGeoManager::SetDefaultRootUnits() { if ( fgDefaultUnits == kRo...Definition TGeoElement.h:132; TGeoElementRN::fNatAbunDouble_t fNatAbunDefinition TGeoElement.h:139; TGeoElementRN::AddRatiovoid AddRatio(TGeoBatemanSol &ratio)Adds a proportion ratio to the existing one.Definition TGeoElement.cxx:684; TGeoElementRN::FillPopulationvoid FillPopulation(TObjArray *population, Double_t precision=0.001, Double_t factor=1.)Fills the input array with the set of RN elements resulting from the decay of this one.Definition TGeoElement.cxx:550; TGeoElementRN::operat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoElement_8h_source.html:26492,down,downwards,26492,doc/master/TGeoElement_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoElement_8h_source.html,1,['down'],['downwards']
Availability,"emented from TGTextView.; Definition at line 372 of file TGTextEdit.cxx. ◆ Saved(). virtual void TGTextEdit::Saved ; (; ). inlinevirtual . Definition at line 128 of file TGTextEdit.h. ◆ SavedAs(). virtual void TGTextEdit::SavedAs ; (; ). inlinevirtual . Definition at line 129 of file TGTextEdit.h. ◆ SaveFile(). Bool_t TGTextEdit::SaveFile ; (; const char * ; filename, . Bool_t ; saveas = kFALSE . ). virtual . Save file. ; If filename==0 ask user via dialog for a filename, if in addition saveas==kTRUE always ask for new filename. Returns kTRUE if file was correctly saved, kFALSE otherwise. ; Definition at line 394 of file TGTextEdit.cxx. ◆ SavePrimitive(). void TGTextEdit::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a text edit widget as a C++ statement(s) on output stream out. ; Reimplemented from TGCompositeFrame.; Definition at line 2207 of file TGTextEdit.cxx. ◆ ScreenDown(). void TGTextEdit::ScreenDown ; (; ). virtual . Move one screen down. ; Definition at line 2137 of file TGTextEdit.cxx. ◆ ScreenUp(). void TGTextEdit::ScreenUp ; (; ). virtual . Move one screen up. ; Definition at line 2117 of file TGTextEdit.cxx. ◆ ScrollCanvas(). void TGTextEdit::ScrollCanvas ; (; Int_t ; newTop, . Int_t ; direction . ). overridevirtual . Scroll the canvas to new_top in the kVertical or kHorizontal direction. ; Reimplemented from TGView.; Definition at line 1944 of file TGTextEdit.cxx. ◆ Search() [1/2]. void TGTextEdit::Search ; (; Bool_t ; close). virtual . Invokes search dialog. ; Definition at line 1565 of file TGTextEdit.cxx. ◆ Search() [2/2]. Bool_t TGTextEdit::Search ; (; const char * ; string, . Bool_t ; direction = kTRUE, . Bool_t ; caseSensitive = kFALSE . ). overridevirtual . Search for string in the specified direction. ; If direction is true the search will be in forward direction. ; Reimplemented from TGTextView.; Definition at line 640 of file TGTextEdit.cxx. ◆ SetCurrent(). void TGTextEdit::SetCurrent ; (; TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEdit.html:58208,down,down,58208,doc/master/classTGTextEdit.html,https://root.cern,https://root.cern/doc/master/classTGTextEdit.html,1,['down'],['down']
Availability,"emented from TObject.; Definition at line 250 of file TRootBrowserLite.cxx. ◆ Hash(). ULong_t TIconBoxThumb::Hash ; (; ); const. inlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TIconBoxThumb::HashULong_t Hash() const overrideReturn hash value for this object.Definition TRootBrowserLite.cxx:249; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented from TObject.; Definition at line 249 of file TRootBrowserLite.cxx. Member Data Documentation. ◆ fLarge. const TGPicture* TIconBoxThumb::fLarge. Definition at line 242 of file TRootBrowserLite.cxx. ◆ fName. TString TIconBoxThumb::fName. Definition at line 240 of file TRootBrowserLite.cxx. ◆ fSmall. const TGPicture* TIconBoxThumb::fSmall. Definition at line 241 of file TRootBrowserLite.cxx. gui/gui/src/TRootBrowserLite.cxx. TIconBoxThumb. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:51 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTIconBoxThumb.html:11530,error,error,11530,doc/master/classTIconBoxThumb.html,https://root.cern,https://root.cern/doc/master/classTIconBoxThumb.html,1,['error'],['error']
Availability,"emented from TVirtualX. ◆ ChangeProperty(). void TGWin32VirtualXProxy::ChangeProperty ; (; Window_t ; id, . Atom_t ; property, . Atom_t ; type, . UChar_t * ; data, . Int_t ; len . ). overridevirtual . Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ; Parameters. [in]idthe window whose property you want to change ; [in]propertyspecifies the property name ; [in]typethe type of the property; the X server does not interpret the type but simply passes it back to an application that might ask about the window properties ; [in]datathe property data ; [in]lenthe length of the specified data format . Reimplemented from TVirtualX. ◆ ChangeWindowAttributes(). void TGWin32VirtualXProxy::ChangeWindowAttributes ; (; Window_t ; id, . SetWindowAttributes_t * ; attr . ). overridevirtual . Changes the attributes of the specified window ""id"" according the values provided in ""attr"". ; The mask data member of ""attr"" specifies which window attributes are defined in the attributes argument. This mask is the bitwise inclusive OR of the valid attribute mask bits; if it is zero, the attributes are ignored. ; Reimplemented from TVirtualX. ◆ CheckEvent(). Bool_t TGWin32VirtualXProxy::CheckEvent ; (; Window_t ; id, . EGEventType ; type, . Event_t & ; ev . ). overridevirtual . Check if there is for window ""id"" an event of type ""type"". ; Reimplemented from TVirtualX.; Definition at line 312 of file TGWin32VirtualXProxy.cxx. ◆ ClearArea(). void TGWin32VirtualXProxy::ClearArea ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Paints a rectangular area in the specified window ""id"" according to the specified dimensions with the window's background pixel or pixmap. ; Parameters. [in]idspecifies the window ; [in]x,ycoordinates, which are relative to the origin ; [in]w,hthe width and height which define the rectangle dimensions . Reimplemented from TVirtualX. ◆ ClearWindow() [1/2]. void T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32VirtualXProxy.html:55530,mask,mask,55530,doc/master/classTGWin32VirtualXProxy.html,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html,1,['mask'],['mask']
Availability,"ements ROOT::Math::Minimizer.; Definition at line 63 of file TLinearMinimizer.h. ◆ NCalls(). unsigned int TLinearMinimizer::NCalls ; (; ); const. inlineoverridevirtual . number of function calls to reach the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 75 of file TLinearMinimizer.h. ◆ NDim(). unsigned int TLinearMinimizer::NDim ; (; ); const. inlineoverridevirtual . this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ; Implements ROOT::Math::Minimizer.; Definition at line 79 of file TLinearMinimizer.h. ◆ NFree(). unsigned int TLinearMinimizer::NFree ; (; ); const. inlineoverridevirtual . number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 83 of file TLinearMinimizer.h. ◆ ProvidesError(). bool TLinearMinimizer::ProvidesError ; (; ); const. inlineoverridevirtual . minimizer provides error and error matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 86 of file TLinearMinimizer.h. ◆ SetFixedVariable(). bool TLinearMinimizer::SetFixedVariable ; (; unsigned int ; ivar, . const std::string & ; , . double ; val . ). overridevirtual . set fixed variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 190 of file TLinearMinimizer.cxx. ◆ SetFunction(). void TLinearMinimizer::SetFunction ; (; const ROOT::Math::IMultiGenFunction & ; func). overridevirtual . set the fit model function ; Implements ROOT::Math::Minimizer.; Definition at line 106 of file TLinearMinimizer.cxx. ◆ SetVariable(). bool TLinearMinimizer::SetVariable ; (; unsigned int ; , . const std::string & ; , . double ; , . double ;  . ). inlineoverridevirtual . set free variable (dummy impl. since there is no need to set variables in the Linear Fitter) ; Implements ROOT::Math::Minimizer.; Definition at line 54 of file TLinearMinimizer.h. ◆ Streamer(). virtual vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLinearMinimizer.html:15344,error,error,15344,doc/master/classTLinearMinimizer.html,https://root.cern,https://root.cern/doc/master/classTLinearMinimizer.html,2,['error'],['error']
Availability,"ements \(m_i\). If these uncertainties are not known, and are simply left out of the calculation, then the fit may still have meaning, but not the quantitative values of the resulting parameter errors. (Only the relative errors of different parameters with respect to each other may be meaningful.); If the \(\sigma_i\) are all overestimated by a factor \(\beta\), then the resulting parameter errors from the fit will be overestimated by the same factor \(\beta\).; 2.5.2 The error matrix; The M processors \(\mbox{MIGRAD}\) (MnMigrad, see [api:migrad]) and HESSE (MnHesse, see [api:hesse]) (normally) produce an error matrix. This matrix is twice the inverse of the matrix of second derivatives of the \(\mbox{FCN}\), transformed if necessary into external coordinate space2, and multiplied by FCNBase::up(). Therefore, errors based on the M error matrix take account of all the parameter correlations, but not the non-linearities. That is, from the error matrix alone, two-standard-deviation errors are always exactly twice as big as one-standard-deviation errors.; When the error matrix has been calculated (for example by the successful execution of \(\mbox{MIGRAD}\) (MnMigrad::operator(), see [api:migradop]) or HESSE (MnHesse::operator())) then the parameter errors printed by M are the square roots of the diagonal elements of this matrix. The covariance or the correlations can be printed and shown via std::cout as the ostream operator operator\(<<\) is overloaded. The eigenvalues of the error matrix can be calculated using MnEigen, which should all be positive if the matrix is positive-definite (see below on \(\mbox{MIGRAD}\) and positive-definiteness).; The effect of correlations on the individual parameter errors can be seen as follows. When parameter \(\mbox{n}\) is fixed (e.g. via the method MnMigrad::fix(n)), M inverts the error matrix, removes the row and column corresponding to parameter \(\mbox{n}\), and re-inverts the result. The effect on the errors of the other param",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:21274,error,error,21274,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,12,['error'],"['error', 'errors']"
Availability,"emoval. ""LEGO1""; Draw a lego plot with hidden surface removal. ""LEGO2""; Draw a lego plot using colors to show the cell contents When the option ""0"" is; used with any LEGO option, the empty bins are not drawn. ""TEXT""; Draw bin contents as text (format set via gStyle->SetPaintTextFormat). ""TEXTnn""; Draw bin contents as text at angle nn (0 < nn < 90). ""X+""; The X-axis is drawn on the top side of the plot. ""Y+""; The Y-axis is drawn on the right side of the plot. Options supported for 1D histograms. "" ""; Default. ""AH""; Draw histogram without axis. ""A"" can be combined with any drawing option. For; instance, ""AC"" draws the histogram as a smooth Curve without axis. ""][""; When this option is selected the first and last vertical lines of the histogram; are not drawn. ""B""; Bar chart option. ""BAR""; Like option ""B"", but bars can be drawn with a 3D effect. ""HBAR""; Like option ""BAR"", but bars are drawn horizontally. ""C""; Draw a smooth Curve through the histogram bins. ""E""; Draw error bars. ""E0""; Draw error bars. Markers are drawn for bins with 0 contents. ""E1""; Draw error bars with perpendicular lines at the edges. ""E2""; Draw error bars with rectangles. ""E3""; Draw a fill area through the end points of the vertical error bars. ""E4""; Draw a smoothed filled area through the end points of the error bars. ""E5""; Like E3 but ignore the bins with 0 contents. ""E6""; Like E4 but ignore the bins with 0 contents. ""X0""; When used with one of the ""E"" option, it suppress the error bar along; X as gStyle->SetErrorX(0) would do. ""L""; Draw a line through the bin contents. ""P""; Draw current marker at each bin except empty bins. ""P0""; Draw current marker at each bin including empty bins. ""PIE""; Draw histogram as a Pie Chart. ""*H""; Draw histogram with a * at each bin. ""LF2""; Draw histogram like with option ""L"" but with a fill area. Note that ""L"" draws; also a fill area if the hist fill color is set but the fill area corresponds to; the histogram contour. ""9""; Force histogram to be drawn in high resoluti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THistPainter.html:6362,error,error,6362,root/html528/THistPainter.html,https://root.cern,https://root.cern/root/html528/THistPainter.html,4,['error'],['error']
Availability,"emove the last n template arguments from the name. ;  ; void ReplaceAll (std::string &str, const std::string &from, const std::string &to, bool recurse=false);  ; bool RequireCompleteType (const cling::Interpreter &interp, clang::SourceLocation Loc, clang::QualType Type);  ; bool RequireCompleteType (const cling::Interpreter &interp, const clang::CXXRecordDecl *cl);  ; clang::QualType ReSubstTemplateArg (clang::QualType input, const clang::Type *instance);  Check if 'input' or any of its template parameter was substituted when instantiating the class template instance and replace it with the partially sugared types we have from 'instance'. ;  ; const clang::CXXRecordDecl * ScopeSearch (const char *name, const cling::Interpreter &gInterp, bool diagnose, const clang::Type **resultType);  Return the scope corresponding to 'name' or std::'name'. ;  ; void SetPathsForRelocatability (std::vector< std::string > &clingArgs);  Organise the parameters for cling in order to guarantee relocatability It treats the gcc toolchain and the root include path FIXME: enables relocatability for experiments' framework headers until PCMs are available. ;  ; const char * ShortTypeName (const char *typeDesc);  Return the absolute type of typeDesc. ;  ; std::string ShortTypeName (const clang::FieldDecl &m);  Return the absolute type of typeDesc. ;  ; ROOT::ESTLType STLKind (const llvm::StringRef type);  Converts STL container name to number. vector -> 1, etc.. ;  ; void SysError (const char *location, const char *fmt,...);  ; std::string TrueName (const clang::FieldDecl &m);  TrueName strips the typedefs and array dimensions. ;  ; void Warning (const char *location, const char *fmt,...);  ; void WriteAuxFunctions (std::ostream &finalString, const AnnotatedRecordDecl &cl, const clang::CXXRecordDecl *decl, const cling::Interpreter &interp, const RConstructorTypes &ctorTypes, const TNormalizedCtxt &normCtxt);  std::string NormalizedName; GetNormalizedName(NormalizedName, decl->getASTContext().g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:16313,avail,available,16313,doc/master/namespaceROOT_1_1TMetaUtils.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html,2,['avail'],['available']
Availability,"emoveAll(). void TMonitor::RemoveAll ; (; ). virtual . Remove all sockets from the monitor. ; Definition at line 241 of file TMonitor.cxx. ◆ ResetInterrupt(). void TMonitor::ResetInterrupt ; (; ). inline . Definition at line 72 of file TMonitor.h. ◆ Select() [1/3]. TSocket * TMonitor::Select ; (; ). Return pointer to socket for which an event is waiting. ; Select can be interrupt by a call to Interrupt() (e.g. connected with a Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable in such a case. Return 0 in case of error. ; Definition at line 322 of file TMonitor.cxx. ◆ Select() [2/3]. TSocket * TMonitor::Select ; (; Long_t ; timeout). Return pointer to socket for which an event is waiting. ; Wait a maximum of timeout milliseconds. If return is due to timeout it returns (TSocket *)-1. Select() can be interrupt by a call to Interrupt() (e.g. connected with a Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable in such a case. Return 0 in case of any other error situation. ; Definition at line 348 of file TMonitor.cxx. ◆ Select() [3/3]. Int_t TMonitor::Select ; (; TList * ; rdready, . TList * ; wrready, . Long_t ; timeout . ). Return numbers of sockets that are ready for reading or writing. ; Wait a maximum of timeout milliseconds. Return 0 if timed-out. Return < 0 in case of error. If rdready and/or wrready are not 0, the lists of sockets with something to read and/or write are also returned. ; Definition at line 377 of file TMonitor.cxx. ◆ SetInterest(). void TMonitor::SetInterest ; (; TSocket * ; sock, . Int_t ; interest = kRead . ). virtual . Set interest mask for socket sock to interest. ; If the socket is not in the active list move it or add it there. If interest=kRead then we want to monitor the socket for read readiness, if interest=kWrite then we monitor the socket for write readiness, if interest=kRead|kWrite then we monitor both read and write readiness. ; Definition at line 180 of file TMonitor.cxx. ◆ SetReady(). void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMonitor.html:22214,error,error,22214,doc/master/classTMonitor.html,https://root.cern,https://root.cern/doc/master/classTMonitor.html,1,['error'],['error']
Availability,"emoveSecContext(). void TAuthenticate::RemoveSecContext ; (; TRootSecContext * ; ctx). staticprivate . Tool for removing SecContext ctx from THostAuth listed in fgAuthInfo or fgProofAuthInfo. ; Definition at line 3661 of file TAuthenticate.cxx. ◆ RfioAuth(). Int_t TAuthenticate::RfioAuth ; (; TString & ; user). private . RFIO authentication (no longer supported) ; Definition at line 1498 of file TAuthenticate.cxx. ◆ SecureRecv(). Int_t TAuthenticate::SecureRecv ; (; TSocket * ; sock, . Int_t ; dec, . Int_t ; key, . char ** ; str . ). static . Receive str from sock and decode it using key indicated by key type Return number of received bytes or -1 in case of error. ; dec = 1 for private decoding, dec = 2 for public decoding ; Definition at line 2864 of file TAuthenticate.cxx. ◆ SecureSend(). Int_t TAuthenticate::SecureSend ; (; TSocket * ; sock, . Int_t ; enc, . Int_t ; key, . const char * ; str . ). static . Encode null terminated str using the session private key indicated by enc and sends it over the network Returns number of bytes sent, or -1 in case of error. ; enc = 1 for private encoding, enc = 2 for public encoding ; Definition at line 2803 of file TAuthenticate.cxx. ◆ SendRSAPublicKey(). Int_t TAuthenticate::SendRSAPublicKey ; (; TSocket * ; Socket, . Int_t ; key = 0 . ). static . Receives server RSA Public key Sends local RSA public key encoded. ; Definition at line 3117 of file TAuthenticate.cxx. ◆ SetAuthReUse(). void TAuthenticate::SetAuthReUse ; (; Bool_t ; authreuse). static . Set global AuthReUse flag. ; Definition at line 1377 of file TAuthenticate.cxx. ◆ SetDefaultRSAKeyType(). void TAuthenticate::SetDefaultRSAKeyType ; (; Int_t ; key). static . Static method setting the default type of RSA key. ; Definition at line 1219 of file TAuthenticate.cxx. ◆ SetDefaultUser(). void TAuthenticate::SetDefaultUser ; (; const char * ; defaultuser). static . Set default user name. ; Definition at line 1357 of file TAuthenticate.cxx. ◆ SetEnvironment(). void TAuthe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAuthenticate.html:37000,error,error,37000,doc/master/classTAuthenticate.html,https://root.cern,https://root.cern/doc/master/classTAuthenticate.html,1,['error'],['error']
Availability,"emoved. ; Definition at line 177 of file TError.cxx. ◆ SetErrorHandler(). ErrorHandlerFunc_t SetErrorHandler ; (; ErrorHandlerFunc_t ; newhandler). Set an errorhandler function. Returns the old handler. ; Definition at line 90 of file TError.cxx. ◆ SysError(). void SysError ; (; const char * ; location, . const char * ; msgfmt, .  ; ... . ). Use this function in case a system (OS or GUI) related error occurred. ; Definition at line 196 of file TError.cxx. ◆ Warning(). void Warning ; (; const char * ; location, . const char * ; msgfmt, .  ; ... . ). Use this function in warning situations. ; Definition at line 229 of file TError.cxx. Variable Documentation. ◆ gErrorAbortLevel. Int_t gErrorAbortLevel. extern . Definition at line 32 of file TError.cxx. ◆ gErrorIgnoreLevel. Int_t gErrorIgnoreLevel. extern . Error handling routines. ; This file defines a number of global error handling routines: Warning(), Error(), SysError() and Fatal(). They all take a location string (where the error happened) and a printf style format string plus vararg's. In the end these functions call an errorhandler function. Initially the MinimalErrorHandler, which is supposed to be replaced by the proper DefaultErrorHandler() ; Definition at line 31 of file TError.cxx. ◆ gPrintViaErrorHandler. Bool_t gPrintViaErrorHandler. extern . Definition at line 33 of file TError.cxx. ◆ kAssertMsg. const char* kAssertMsg. extern . Definition at line 35 of file TError.cxx. ◆ kBreak. constexpr Int_t kBreak = 4000. constexpr . Definition at line 48 of file TError.h. ◆ kCheckMsg. const char* kCheckMsg. extern . Definition at line 36 of file TError.cxx. ◆ kError. constexpr Int_t kError = 3000. constexpr . Definition at line 47 of file TError.h. ◆ kFatal. constexpr Int_t kFatal = 6000. constexpr . Definition at line 50 of file TError.h. ◆ kInfo. constexpr Int_t kInfo = 1000. constexpr . Definition at line 45 of file TError.h. ◆ kPrint. constexpr Int_t kPrint = 0. constexpr . Definition at line 44 of file TError.h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TError_8h.html:8792,error,error,8792,doc/master/TError_8h.html,https://root.cern,https://root.cern/doc/master/TError_8h.html,1,['error'],['error']
Availability,"empl = ROOT::Math::IParamMultiFunctionTempl< T >;  ; typedef void(* MinuitFCN_t) (int &npar, double *gin, double &f, double *u, int flag);  fit using user provided FCN with Minuit-like interface If npar = 0 it is assumed that the parameters are specified in the parameter settings created before For the options same consideration as in the previous method ;  . Public Member Functions;  Fitter ();  Default constructor. ;  ;  Fitter (const Fitter &)=delete;  Copy constructor (disabled, class is not copyable) ;  ;  Fitter (const std::shared_ptr< FitResult > &result);  Constructor from a result. ;  ; virtual ~Fitter ();  Destructor. ;  ; bool ApplyWeightCorrection (const ROOT::Math::IMultiGenFunction &loglw2, bool minimizeW2L=false);  apply correction in the error matrix for the weights for likelihood fits This method can be called only after a fit. ;  ; bool CalculateHessErrors ();  perform an error analysis on the result using the Hessian Errors are obtained from the inverse of the Hessian matrix To be called only after fitting and when a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ;  ; bool CalculateMinosErrors ();  perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ;  ; FitConfig & Config ();  access to the configuration (non const method) ;  ; const FitConfig & Config () const;  access to the fit configuration (const method) ;  ; bool EvalFCN ();  Perform a simple FCN evaluation. ;  ; bool Fit (const BinData &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; template<class Data , class Function , class cond = typename std::enable_if<!(std::is_same<Function, ROOT::EExecutionPolicy>::value || std::is_same<Function, int>::value), Function>::type> ; bool Fit (const Data &data, const Function &func, const ROOT::EE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:2520,error,error,2520,doc/master/classROOT_1_1Fit_1_1Fitter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html,2,['error'],['error']
Availability,"emplate<typename Minimizer > ; double train (std::vector< double > &weights, std::vector< Pattern > &trainPattern, const std::vector< Pattern > &testPattern, Minimizer &minimizer, Settings &settings);  start the training ;  ; template<typename Iterator , typename Minimizer > ; double trainCycle (Minimizer &minimizer, std::vector< double > &weights, Iterator itPatternBegin, Iterator itPatternEnd, Settings &settings, DropContainer &dropContainer);  executes one training cycle ;  . Protected Member Functions; void fillDropContainer (DropContainer &dropContainer, double dropFraction, size_t numNodes) const;  prepare the drop-out-container (select the nodes which are to be dropped out) ;  . Protected Attributes; bool * fExitFromTraining = nullptr;  ; IPythonInteractive * fInteractive = nullptr;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  . Private Attributes; ModeErrorFunction m_eErrorFunction;  denotes the error function ;  ; std::vector< Layer > m_layers;  layer-structure-data ;  ; size_t m_sizeInput;  input size of this DNN ;  ; size_t m_sizeOutput;  output size of this DNN ;  . #include <TMVA/NeuralNet.h>; Member Typedef Documentation. ◆ begin_end_type. typedef std::pair<iterator_type,iterator_type> TMVA::DNN::Net::begin_end_type. Definition at line 1067 of file NeuralNet.h. ◆ container_type. typedef std::vector<double> TMVA::DNN::Net::container_type. Definition at line 1065 of file NeuralNet.h. ◆ iterator_type. typedef container_type::iterator TMVA::DNN::Net::iterator_type. Definition at line 1066 of file NeuralNet.h. Constructor & Destructor Documentation. ◆ Net() [1/2]. TMVA::DNN::Net::Net ; (; ). inline . c'tor ; Definition at line 1074 of file NeuralNet.h. ◆ Net() [2/2]. TMVA::DNN::Net::Net ; (; const Net & ; other). inline . d'tor ; Definition at line 1085 of file NeuralNet.h. Member Function Documentation. ◆ addLayer() [1/2]. void TMVA::DNN::Net::addLayer ; (; Layer && ; layer). inline . Definition at line 1095 of file NeuralNet.h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Net.html:6743,error,error,6743,doc/master/classTMVA_1_1DNN_1_1Net.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Net.html,1,['error'],['error']
Availability,"empty bin they could be merged in a single larger bin Return a NULL pointer if the bin width is not stored ; Definition at line 519 of file BinData.h. ◆ ComputeSums(). void ROOT::Fit::BinData::ComputeSums ; (; ). protected . Definition at line 814 of file BinData.cxx. ◆ CoordErrors(). const double * ROOT::Fit::BinData::CoordErrors ; (; unsigned int ; ipoint); const. inline . Return a pointer to the errors in the coordinates for the given fit point. ; Definition at line 412 of file BinData.h. ◆ Error(). double ROOT::Fit::BinData::Error ; (; unsigned int ; ipoint); const. inline . Return the error on the given point. ; Safer method returning in any case the error and not the inverse as in the function above. ; Definition at line 262 of file BinData.h. ◆ ErrorPtr(). const double * ROOT::Fit::BinData::ErrorPtr ; (; unsigned int ; ipoint); const. inline . Return a pointer to the error (or the inverse error) on the value for a given point depending on the type of data. . If the data contains only value error (e.g. from histograms) returns a pointer to the inverse of the errors.; If the data contains errors in coordinates and value (e.g from TGraphErrors) returns a pointer to the corresponding value error (NOT the inverse).; If the data contains asymmetric errors return a pointer to the average error (NOT the inverse): 0.5(eu + el).; If the data does not contain errors return a nullptr. . Definition at line 249 of file BinData.h. ◆ GetAsymError(). void ROOT::Fit::BinData::GetAsymError ; (; unsigned int ; ipoint, . double & ; lowError, . double & ; highError . ); const. inline . Definition at line 307 of file BinData.h. ◆ GetBinUpEdgeComponent(). double ROOT::Fit::BinData::GetBinUpEdgeComponent ; (; unsigned int ; ipoint, . unsigned int ; icoord . ); const. inline . returns a single coordinate error component of a point. ; This function is threadsafe in contrast to Coords(...) and can easily get vectorized by the compiler in loops running over the ipoint-index. ; Definition",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:21381,error,error,21381,doc/master/classROOT_1_1Fit_1_1BinData.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html,1,['error'],['error']
Availability,"empty datasets for missing categories (false by default). ReturnsAn owning pointer to a TList of subsets of the dataset. Returns nullptr if an error occurs. ; Definition at line 1552 of file RooAbsData.cxx. ◆ split() [2/2]. RooFit::OwningPtr< TList > RooAbsData::split ; (; const RooSimultaneous & ; simPdf, . bool ; createEmptyDataSets = false . ); const. virtual . Split the dataset into subsets based on the channels of a RooSimultaneous. ; Returns a list of sub-datasets, which each dataset named after the applicable state name of the RooSimultaneous index category. The index category itself is no longer present in the sub-datasets. The sub-datasets only contain variables that the pdf for the corresponding channel depends on.; Parameters. simPdfThe simultaneous pdf used for splitting the dataset. ; createEmptyDataSetsFlag indicating whether to create empty datasets for missing categories (false by default). ReturnsAn owning pointer to a TList of subsets of the dataset. Returns nullptr if an error occurs. ; Definition at line 1584 of file RooAbsData.cxx. ◆ standMoment(). double RooAbsData::standMoment ; (; const RooRealVar & ; var, . double ; order, . const char * ; cutSpec = nullptr, . const char * ; cutRange = nullptr . ); const. Calculate standardized moment. ; Parameters. [in]varVariable to be used for calculating the moment. ; [in]orderOrder of the moment. ; [in]cutSpecIf specified, the moment is calculated on the subset of the data which pass the C++ cut specification expression 'cutSpec' ; [in]cutRangeIf specified, calculate inside the range named 'cutRange' (also applies cut spec) . Returns\( \frac{\left< \left( X - \left< X \right> \right)^n \right>}{\sigma^n} \), where n = order. ; Definition at line 828 of file RooAbsData.cxx. ◆ statOn() [1/2]. RooPlot * RooAbsData::statOn ; (; RooPlot * ; frame, . const char * ; what, . const char * ; label = """", . Int_t ; sigDigits = 2, . Option_t * ; options = ""NELU"", . double ; xmin = 0.15, . double ; xmax = 0.65, . dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsData.html:70383,error,error,70383,doc/master/classRooAbsData.html,https://root.cern,https://root.cern/doc/master/classRooAbsData.html,1,['error'],['error']
Availability,"empty() && ( Minim::gDefaultMinimizer == ""Minuit"" ||; 48 Minim::gDefaultMinimizer == ""Minuit2"") ); 49 Minim::gDefaultMinimAlgo = ""Migrad"";; 50}; 51void MinimizerOptions::SetDefaultErrorDef(double up) {; 52 // set the default error definition; 53 Minim::gDefaultErrorDef ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MinimizerOptions_8cxx_source.html:1956,error,error,1956,doc/master/MinimizerOptions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MinimizerOptions_8cxx_source.html,2,"['error', 'toler']","['error', 'tolerance']"
Availability,"emselves and override StartSlaves; appropriately). This constructor simply closes any previous gProof and sets gProof; to this instance. void InitMembers(); Default initializations. ~TProof(); Clean up PROOF environment. Int_t Init(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); Start the PROOF environment. Starting PROOF involves either connecting; to a master server, which in turn will start a set of slave servers, or; directly starting as master server (if master = """"). For a description; of the arguments see the TProof ctor. Returns the number of started; master or slave servers, returns 0 in case of error, in which case; fValid remains false. Int_t GetSandbox(TString& sb, Bool_t assert = kFALSE, const char* rc = 0); Set the sandbox path from ' Proof.Sandbox' or the alternative var 'rc'.; Use the existing setting or the default if nothing is found.; If 'assert' is kTRUE, make also sure that the path exists.; Return 0 on success, -1 on failure. void ParseConfigField(const char* config); The config file field may contain special instructions which need to be; parsed at the beginning, e.g. for debug runs with valgrind. Int_t AssertPath(const char* path, Bool_t writable); Make sure that 'path' exists; if 'writable' is kTRUE, make also sure; that the path is writable. void SetManager(TProofMgr* mgr); Set manager and schedule its destruction after this for clean; operations. Int_t AddWorkers(TList* wrks); Works on the master node only.; It starts workers on the machines in workerList and sets the paths,; packages and macros as on the master.; It is a subbstitute for StartSlaves(...); The code is mostly the master part of StartSlaves,; with the parallel startup removed. Int_t RemoveWorkers(TList* wrks); Used for shuting down the workres after a query is finished.; Sends each of the workers from the workerList, a kPROOF_STOP message.; If the workerList == 0, shutdown all the workers. Bool_t StartSlaves(Bool_t atta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProof.html:33808,failure,failure,33808,root/html530/TProof.html,https://root.cern,https://root.cern/root/html530/TProof.html,3,['failure'],['failure']
Availability,"emselves and override StartSlaves; appropriately). This constructor simply closes any previous gProof and sets gProof; to this instance. void InitMembers(); Default initializations. ~TProof(); Clean up PROOF environment. Int_t Init(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); Start the PROOF environment. Starting PROOF involves either connecting; to a master server, which in turn will start a set of slave servers, or; directly starting as master server (if master = """"). For a description; of the arguments see the TProof ctor. Returns the number of started; master or slave servers, returns 0 in case of error, in which case; fValid remains false. Int_t GetSandbox(TString& sb, Bool_t assert = kFALSE, const char* rc = 0); Set the sandbox path from ' Proof.Sandbox' or the alternative var 'rc'.; Use the existing setting or the default if nothing is found.; If 'assert' is kTRUE, make also sure that the path exists.; Return 0 on success, -1 on failure. void ParseConfigField(const char* config); The config file field may contain special instructions which need to be; parsed at the beginning, e.g. for debug runs with valgrind.; Several options can be given separated by a ','. Int_t AssertPath(const char* path, Bool_t writable); Make sure that 'path' exists; if 'writable' is kTRUE, make also sure; that the path is writable. void SetManager(TProofMgr* mgr); Set manager and schedule its destruction after this for clean; operations. Int_t AddWorkers(TList* wrks); Works on the master node only.; It starts workers on the machines in workerList and sets the paths,; packages and macros as on the master.; It is a subbstitute for StartSlaves(...); The code is mostly the master part of StartSlaves,; with the parallel startup removed. Int_t RemoveWorkers(TList* wrks); Used for shuting down the workres after a query is finished.; Sends each of the workers from the workerList, a kPROOF_STOP message.; If the workerList == 0, shutdo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProof.html:39446,failure,failure,39446,root/html602/TProof.html,https://root.cern,https://root.cern/root/html602/TProof.html,2,['failure'],['failure']
Availability,"emselves and override StartSlaves; appropriately). This constructor simply closes any previous gProof and sets gProof; to this instance. void InitMembers(); Default initializations. ~TProof(); Clean up PROOF environment. Int_t Init(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); Start the PROOF environment. Starting PROOF involves either connecting; to a master server, which in turn will start a set of slave servers, or; directly starting as master server (if master = """"). For a description; of the arguments see the TProof ctor. Returns the number of started; master or slave servers, returns 0 in case of error, in which case; fValid remains false. Int_t GetSandbox(TString& sb, Bool_t assert = kFALSE, const char* rc = 0); Set the sandbox path from ' Proof.Sandbox' or the alternative var 'rc'.; Use the existing setting or the default if nothing is found.; If 'assert' is kTRUE, make also sure that the path exists.; Return 0 on success, -1 on failure. void ParseConfigField(const char* config); The config file field may contain special instructions which need to be; parsed at the beginning, e.g. for debug runs with valgrind.; Several options can be given separated by a ','. Int_t AssertPath(const char* path, Bool_t writable); Make sure that 'path' exists; if 'writable' is kTRUE, make also sure; that the path is writable. void SetManager(TProofMgr* mgr); Set manager and schedule its destruction after this for clean; operations. Int_t AddWorkers(TList* wrks); Works on the master node only.; It starts workers on the machines in workerList and sets the paths,; packages and macros as on the master.; It is a subbstitute for StartSlaves(...); The code is mostly the master part of StartSlaves,; with the parallel startup removed. void SetupWorkersEnv(TList* wrks, Bool_t increasingpool = kFALSE); Set up packages, loaded macros, include and lib paths ... Int_t RemoveWorkers(TList* wrks); Used for shuting down the workres afte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:36947,failure,failure,36947,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,4,['failure'],['failure']
Availability,"en bin is; excluded from the fit or not. void Constrain(Int_t parm, Double_t low, Double_t high); Constrain the values of parameter number <parm> (the parameter numbering; follows that of the input template vector).; Use UnConstrain() to remove this constraint. void UnConstrain(Int_t parm); Remove the constraints on the possible values of parameter <parm>. void CheckConsistency(); Function used internally to check the consistency between the; various histograms. Checks are performed on nonexistent or empty; histograms, the precise histogram class, and the number of bins.; In addition, integrals over the ""allowed"" bin ranges are computed.; Any inconsistency results in a error. TFitResultPtr Fit(); Perform the fit with the default UP value.; The value returned is the minimisation status. void ErrorAnalysis(Double_t UP); Set UP to the given value (see class TMinuit), and perform a MINOS minimisation. void GetResult(Int_t parm, Double_t& value, Double_t& error) const; Obtain the fit result for parameter <parm> (the parameter numbering; follows that of the input template vector). TH1* GetPlot(); Return the ""template prediction"" corresponding to the fit result (this is not; the same as the weighted sum of template distributions, as template statistical; uncertainties are taken into account).; Note that the name of this histogram will simply be the same as that of the; ""data"" histogram, prefixed with the string ""Fraction fit to hist: "".; Note also that the histogram is managed by the TFractionFitter class, so the returned pointer will be invalid if; the class is deleted. void GetRanges(Int_t& minX, Int_t& maxX, Int_t& minY, Int_t& maxY, Int_t& minZ, Int_t& maxZ) const; Used internally to obtain the bin ranges according to the dimensionality of; the histogram and the limits set by hand. void ComputeFCN(Double_t& f, const Double_t* par, Int_t flag); Used internally to compute the likelihood value. void FindPrediction(int bin, double& t_i, int& k_0, double& A_ki) const; Functi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFractionFitter.html:17777,error,error,17777,root/html602/TFractionFitter.html,https://root.cern,https://root.cern/root/html602/TFractionFitter.html,4,['error'],['error']
Availability,"en from 'config'. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Return clone of this generator operating on given function with given configuration; Needed to support RooNumIntFactory. ~RooMCIntegrator(); Destructor. Bool_t checkLimits() const; Check if we can integrate over the current domain. If return value; is kTRUE we cannot handle the current limits (e.g. where the domain; of one or more observables is open ended. Double_t integral(const Double_t* yvec = 0); Evaluate the integral using a fixed number of calls to evaluate the integrand; equal to about 10k per dimension. Use the first 5k calls to refine the grid; over 5 iterations of 1k calls each, and the remaining 5k calls for a single; high statistics integration. Double_t vegas(RooMCIntegrator::Stage stage, UInt_t calls, UInt_t iterations, Double_t* absError = 0); Perform one step of Monte Carlo integration using the specified number of iterations; with (approximately) the specified number of integrand evaluation calls per iteration.; Use the VEGAS algorithm, starting from the specified stage. Returns the best estimate; of the integral. Also sets *absError to the estimated absolute error of the integral; estimate if absError is non-zero. RooMCIntegrator(). Double_t getAlpha() const; { return _alpha; }. void setAlpha(Double_t alpha); { _alpha= alpha; }. GeneratorType getGenType() const; { return _genType; }. void setGenType(RooMCIntegrator::GeneratorType type); { _genType= type; }. const RooGrid & grid() const; { return _grid; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kTRUE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. » Last changed: Tue Jun 30 14:33:52 2015 » Last generated: 2015-06-30 14:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMCIntegrator.html:11368,error,error,11368,root/html602/RooMCIntegrator.html,https://root.cern,https://root.cern/root/html602/RooMCIntegrator.html,2,['error'],['error']
Availability,"en from 'config'. RooAbsIntegrator* clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; Return clone of this generator operating on given function with given configuration; Needed to support RooNumIntFactory. ~RooMCIntegrator(); Destructor. Bool_t checkLimits() const; Check if we can integrate over the current domain. If return value; is kTRUE we cannot handle the current limits (e.g. where the domain; of one or more observables is open ended. Double_t integral(const Double_t* yvec = 0); Evaluate the integral using a fixed number of calls to evaluate the integrand; equal to about 10k per dimension. Use the first 5k calls to refine the grid; over 5 iterations of 1k calls each, and the remaining 5k calls for a single; high statistics integration. Double_t vegas(RooMCIntegrator::Stage stage, UInt_t calls, UInt_t iterations, Double_t* absError = 0); Perform one step of Monte Carlo integration using the specified number of iterations; with (approximately) the specified number of integrand evaluation calls per iteration.; Use the VEGAS algorithm, starting from the specified stage. Returns the best estimate; of the integral. Also sets *absError to the estimated absolute error of the integral; estimate if absError is non-zero. RooMCIntegrator(). Double_t getAlpha() const; { return _alpha; }. void setAlpha(Double_t alpha); { _alpha= alpha; }. GeneratorType getGenType() const; { return _genType; }. void setGenType(RooMCIntegrator::GeneratorType type); { _genType= type; }. const RooGrid & grid() const; { return _grid; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kTRUE ; }. Bool_t canIntegrateND() const; { return kTRUE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. » Last changed: Tue Mar 10 17:17:43 2015 » Last generated: 2015-03-10 17:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMCIntegrator.html:10205,error,error,10205,root/html534/RooMCIntegrator.html,https://root.cern,https://root.cern/root/html534/RooMCIntegrator.html,2,['error'],['error']
Availability,"en looping over a TTree with a friend with a larger number of entries, the loop spans all entries in the friend; [#7143] - TTreeProcessorMT: Fails when iterating over different treenames within same ROOT file; [#7039] - TExecutor: handling of non-IMT/… case; [#6933] - ROOT 6.22 should reject TBB 2021.1.1 and above during configuration (fails to compile); [#6765] - PyROOT breaks if ROOT objects are unpickled in a multiprocess environment; [#6915] - roottest-python-regression-regression requires OpenGL but still run when it is disable; [#6472] - TThreadExecutor::Map should be able to accept const std::vector arguments; [#6363] - [IMT] ROOT::GetThreadPoolSize does not reflect tbb::global_control settings; [#7055] - Fatal error after running make install when built against LLVM 9; [#7067] - RooFit RooAbsArg::graphVizTree produces invalid dot files for graph titles including spaces; [#7115] - regex_error when selecting pdf components to plot; [#7164] - TGSpeedo mean value calculation; [#7195] - ROOT crash when parameter by value passed to slot: StrDup; [#7240] - [RF] Batch mode returns broken logarithms when -DVDT=OFF; [#7180] - TGCommandLinePlugin Up-Down Arrows and Tab Keys; [#7181] - RDataFrame Snapshot of friend trees; [#7258] - [RF] Update crystal ball shapes in RooFit; [#7086] - [DF] Section of RDF reference guide about RDF+RVec; [#7182] - Range not considered when computing integral of RooParamHistFunc; [#7547] - [DF] Crash in lazy jitted Snapshot; [#7010] - fifo in $CWD causes TCanvas to hang on macOS; [#7676] - hadd reverses order of object cycles; [#6343] - Problem with using namespace std in generated dictionary files; [#7657] - New dictionary-related crash in 6.24.00-patches; [#7718] - PyROOT in root 6.24 branch hangs while loading CMSSW library; [#7090] - Apple M1: bug in jitting argument of type short; [#6802] - Allow to pass Bearer token authentication header to Davix client; [#7345] - Issue building built-in libafterimage; [#6812] - root REPL problem with ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:44088,error,error,44088,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['error'],['error']
Availability,"en on the file via WriteFree as a single data record. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1925 of file TFile.cxx. ◆ ReadProcessID(). TProcessID * TFile::ReadProcessID ; (; UShort_t ; pidf). virtual . The TProcessID with number pidf is read from this file. ; If the object is not already entered in the gROOT list, it is added. ; Definition at line 1951 of file TFile.cxx. ◆ ReadStreamerInfo(). void TFile::ReadStreamerInfo ; (; ). virtual . Read the list of StreamerInfo from this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this function is not called if the static member fgReadInfo is false. (see TFile::SetReadStreamerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree heade",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:88896,recover,recovered,88896,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,2,['recover'],['recovered']
Availability,"en option=""a"" print full data. void SetObjName(const char* objname); Set/change object name. void SetDirectory(const char* dir); Set/change directory. Bool_t Add(const char* file, const char* objname = 0, const char* dir = 0, Long64_t first = 0, Long64_t num = -1, const char* msd = 0); Add file to list of files to be analyzed. Optionally with the; objname and dir arguments the default, TDSet wide, objname and; dir can be overridden. Bool_t Add(TDSet* set); Add specified data set to the this set. Bool_t Add(TCollection* fileinfo, const char* meta = 0, Bool_t availableOnly = kFALSE, TCollection* badlist = 0); Add files passed as list of TFileInfo, TUrl or TObjString objects .; If TFileInfo, the first entry and the number of entries are also filled.; The argument 'meta' can be used to specify one of the subsets in the; file as described in the metadata of TFileInfo. By default the first one; is taken.; If 'availableOnly' is true only files available ('staged' and non corrupted); are taken: those not satisfying this requirement are added to 'badlist', if; the latter is defined. By default availableOnly is false. void SetSrvMaps(TList* srvmaps = 0); Set (or unset) the list for mapping servers coordinate for files.; Reinitialize the related iterator if needed.; Used by TProof. Bool_t Add(TFileInfo* fileinfo, const char* meta = 0); Add file described by 'fi' to list of files to be analyzed.; The argument 'meta' can be used to specify a subsets in the; file as described in the metadata of TFileInfo. By default the first one; is taken. Int_t ExportFileList(const char* filepath, Option_t* opt = """"); Export TDSetElements files as list of TFileInfo objects in file; 'fpath'. If the file exists already the action fails, unless; 'opt == ""F""'.; Return 0 on success, -1 otherwise. void AddFriend(TDSet* friendset, const char* alias); Add friend dataset to this set. Only possible if the TDSet type is; a TTree or derived class. The friendset will be owned by this class; and deleted in it",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDSet.html:12017,avail,availableOnly,12017,root/html528/TDSet.html,https://root.cern,https://root.cern/root/html528/TDSet.html,20,['avail'],"['available', 'availableOnly']"
Availability,"en range. ; If no range is specified (i.e., the default range), all category states count as being in range. This overload requires a name lookup. Recommend to use the category index with RooCategory::isStateInRange(const char*, RooAbsCategory::value_type) const. ; Definition at line 414 of file RooCategory.cxx. ◆ isStateInRange() [2/2]. bool RooCategory::isStateInRange ; (; const char * ; rangeName, . RooAbsCategory::value_type ; stateIndex . ); const. Check if the state is in the given range. ; If no range is specified either as argument or if no range has been defined for this category (i.e., the default range is meant), all category states count as being in range. ; Definition at line 396 of file RooCategory.cxx. ◆ operator=(). RooCategory & RooCategory::operator= ; (; const RooCategory & ; ). delete . ◆ operator[](). RooAbsCategory::value_type & RooCategory::operator[] ; (; const std::string & ; stateName). Access a named state. ; If a state with this name doesn't exist yet, the state is assigned the next available positive integer. Parameters. [in]stateNameName of the state to be accessed. . ReturnsReference to the category index. If no state exists, it will be created on the fly. ; Definition at line 256 of file RooCategory.cxx. ◆ readFromStream(). bool RooCategory::readFromStream ; (; std::istream & ; is, . bool ; compact, . bool ; verbose = false . ). overridevirtual . Read object contents from given stream. ; If token is a decimal digit, try to find a corresponding state for it. If that succeeds, the state denoted by this index is used. Otherwise, interpret it as a label. ; Reimplemented from RooAbsCategory.; Definition at line 288 of file RooCategory.cxx. ◆ recomputeShape(). void RooCategory::recomputeShape ; (; ). inlineoverrideprotectedvirtual . This category's shape does not depend on others, and does not need recomputing. ; Implements RooAbsCategory.; Definition at line 124 of file RooCategory.h. ◆ setIndex() [1/3]. bool RooAbsCategoryLValue::setIndex",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCategory.html:60756,avail,available,60756,doc/master/classRooCategory.html,https://root.cern,https://root.cern/doc/master/classRooCategory.html,1,['avail'],['available']
Availability,"en return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLinkedList.html:5430,error,error,5430,doc/master/classRooLinkedList.html,https://root.cern,https://root.cern/doc/master/classRooLinkedList.html,1,['error'],['error']
Availability,"en set.; Consult RooFit plotting tutorial for further explanation of meaning & use of this technique. ProjWData(const RooArgSet& s, -- As above but only consider subset 's' of observables in dataset 'd' for projection through data averaging; const RooAbsData& d). ProjectionRange(const char* rn) -- Override default range of projection integrals to a different range speficied by given range name.; This technique allows you to project a finite width slice in a real-valued observable. NumCPU(Int_t ncpu) -- Number of CPUs to use simultaneously to calculate data-weighted projections (only in combination with ProjWData). Misc content control. PrintEvalErrors(Int_t numErr) -- Control number of p.d.f evaluation errors printed per curve. A negative; value suppress output completely, a zero value will only print the error count per p.d.f component,; a positive value is will print details of each error up to numErr messages per p.d.f component. EvalErrorValue(Double_t value) -- Set curve points at which (pdf) evaluation error occur to specified value. By default the; function value is plotted. Normalization(Double_t scale, -- Adjust normalization by given scale factor. Interpretation of number depends on code: Relative:; ScaleType code) relative adjustment factor, NumEvent: scale to match given number of events. Name(const chat* name) -- Give curve specified name in frame. Useful if curve is to be referenced later. Asymmetry(const RooCategory& c) -- Show the asymmetry of the PDF in given two-state category [F(+)-F(-)] / [F(+)+F(-)] rather than; the PDF projection. Category must have two states with indices -1 and +1 or three states with; indeces -1,0 and +1. ShiftToZero(Bool_t flag) -- Shift entire curve such that lowest visible point is at exactly zero. Mostly useful when; plotting -log(L) or chi^2 distributions. AddTo(const char* name, -- Add constructed projection to already existing curve with given name and relative weight factors; double_t wgtSelf, double_t wgtOther). Plot",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:45992,error,error,45992,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,10,['error'],['error']
Availability,"en they are selected and keep that appearance afterwards.; A text button is represented by the class TGTextButton. We already used its constructor in the example. The button label indicates the action to be taken when the button is selected or pressed. The text can be a hot string defining a hot key (known as shortcut key also) for this selection. The hot key is an underlined character in a button label that shows the assigned keyboard mnemonic for its choice. A button that prompts more information for users has the label generally followed by ellipsis (…). As we saw the hot strings “&Draw” and “&Exit” define the text labels “Draw” and “Exit” and keyboard mnemonics Alt+D, Alt+E for their selection. The letter D and E appear underlined on the screen. All text buttons should have a unique shortcut key with the exception of OK and Cancel.; These buttons are usually placed within a window to provide fast access to frequently used or critical commands. They help in situations where a command is not available through the menu bar. You already know that a command string can be passed in the text button via the constructor:; TGTextButton(const TGWindow *p, const char *s, const char *cmd,; Int_t id, GContext_t norm, FontStruct_t font,; UInt_t options);; A button label can be changed by SetText(new_label). There are important guidelines to be followed about a button label. The text has to provide a meaningful description of the performed action. The single-word label should be used whenever possible, only two-three words for clarity, if necessary. Do not number labels. Always follow all platform presentation and usage guidelines for standard button functions. Let’s remember a few standard names and definitions of well known buttons:; OK - any changed information in a window is accepted and the window is closed;; Cancel - closes window without implementing submitted changes;; Reset- resets defaults and cancels any changed information that has not be submitted;; Apply - any chan",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1177773,avail,available,1177773,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['avail'],['available']
Availability,"en value; If name is a null pointer, set the lower bound of the default range. void setMax(const char* name, Double_t value); Set the upper bound of the range with the given name to the given value; If name is a null pointer, set the upper bound of the default range. void setRange(const char* name, Double_t min, Double_t max); Set the upper and lower lower bound of the range with the given name to the given values; If name is a null pointer, set the upper and lower bounds of the default range. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Read object contents from given stream. void writeToStream(ostream& os, Bool_t compact) const; Write value to stream. void syncCache(const RooArgSet* set = 0); Force the internal value cache to be up to date. inline RooErrorVar(); Constructors, assignment etc. TObject* clone(const char* newname) const; { return new RooErrorVar(*this,newname); }. Double_t evaluate() const; return error of input RooRealVar. void setVal(Double_t value); Set error of input RooRealVar to value. Bool_t isFundamental() const; Return kTRUE as we implement a fundamental type of AbsArg that can be stored in a dataset. void setMin(Double_t value); Set/get finite fit range limits. void setMax(Double_t value); Set upper bound of default range to value. void setRange(Double_t min, Double_t max); Set default ranges to [min,max]. void setBins(Int_t nBins); Set default binning to nBins uniform bins. void removeMin(const char* name = 0); Set infinite fit range limits. void removeMax(const char* name = 0); Remove upper bound from named binning, or default binning if name is null. void removeRange(const char* name = 0); Remove both upper and lower bounds from named binning, or; default binning if name is null. » Last changed: Fri Dec 2 14:26:47 2011 » Last generated: 2011-12-02 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooErrorVar.html:40893,error,error,40893,root/html532/RooErrorVar.html,https://root.cern,https://root.cern/root/html532/RooErrorVar.html,2,['error'],['error']
Availability,"en value; If name is a null pointer, set the lower bound of the default range. void setMax(const char* name, Double_t value); Set the upper bound of the range with the given name to the given value; If name is a null pointer, set the upper bound of the default range. void setRange(const char* name, Double_t min, Double_t max); Set the upper and lower lower bound of the range with the given name to the given values; If name is a null pointer, set the upper and lower bounds of the default range. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Read object contents from given stream. void writeToStream(ostream& os, Bool_t compact) const; Write value to stream. void syncCache(const RooArgSet* set = 0); Force the internal value cache to be up to date. inline RooErrorVar(); Constructors, assignment etc. TObject* clone(const char* newname) const; { return new RooErrorVar(*this,newname); }. Double_t evaluate() const; return error of input RooRealVar. void setVal(Double_t value); Set error of input RooRealVar to value. Bool_t isFundamental() const; Return kTRUE as we implement a fundamental type of AbsArg that can be stored in a dataset. void setMin(Double_t value); Set/get finite fit range limits. void setMax(Double_t value); Set upper bound of default range to value. void setRange(Double_t min, Double_t max); Set default ranges to [min,max]. void setBins(Int_t nBins); Set default binning to nBins uniform bins. void removeMin(const char* name = 0); Set infinite fit range limits. void removeMax(const char* name = 0); Remove upper bound from named binning, or default binning if name is null. void removeRange(const char* name = 0); Remove both upper and lower bounds from named binning, or; default binning if name is null. » Last changed: Mon Dec 7 13:47:31 2009 » Last generated: 2009-12-07 13:47; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooErrorVar.html:39331,error,error,39331,root/html526/RooErrorVar.html,https://root.cern,https://root.cern/root/html526/RooErrorVar.html,1,['error'],['error']
Availability,"en value; If name is a null pointer, set the lower bound of the default range. void setMax(const char* name, Double_t value); Set the upper bound of the range with the given name to the given value; If name is a null pointer, set the upper bound of the default range. void setRange(const char* name, Double_t min, Double_t max); Set the upper and lower lower bound of the range with the given name to the given values; If name is a null pointer, set the upper and lower bounds of the default range. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Read object contents from given stream. void writeToStream(ostream& os, Bool_t compact) const; Write value to stream. void syncCache(const RooArgSet* set = 0); Force the internal value cache to be up to date. inline RooErrorVar(); Constructors, assignment etc. TObject* clone(const char* newname) const; { return new RooErrorVar(*this,newname); }. Double_t evaluate() const; return error of input RooRealVar. void setVal(Double_t value); Set error of input RooRealVar to value. Bool_t isFundamental() const; Return kTRUE as we implement a fundamental type of AbsArg that can be stored in a dataset. void setMin(Double_t value); Set/get finite fit range limits. void setMax(Double_t value); Set upper bound of default range to value. void setRange(Double_t min, Double_t max); Set default ranges to [min,max]. void setBins(Int_t nBins); Set default binning to nBins uniform bins. void removeMin(const char* name = 0); Set infinite fit range limits. void removeMax(const char* name = 0); Remove upper bound from named binning, or default binning if name is null. void removeRange(const char* name = 0); Remove both upper and lower bounds from named binning, or; default binning if name is null. » Last changed: Mon Jul 4 15:22:44 2011 » Last generated: 2011-07-04 15:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooErrorVar.html:40133,error,error,40133,root/html530/RooErrorVar.html,https://root.cern,https://root.cern/root/html530/RooErrorVar.html,1,['error'],['error']
Availability,"en value; If name is a null pointer, set the lower bound of the default range. void setMax(const char* name, Double_t value); Set the upper bound of the range with the given name to the given value; If name is a null pointer, set the upper bound of the default range. void setRange(const char* name, Double_t min, Double_t max); Set the upper and lower lower bound of the range with the given name to the given values; If name is a null pointer, set the upper and lower bounds of the default range. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Read object contents from given stream. void writeToStream(ostream& os, Bool_t compact) const; Write value to stream. void syncCache(const RooArgSet* set = 0); Force the internal value cache to be up to date. inline RooErrorVar(); Constructors, assignment etc. TObject* clone(const char* newname) const; { return new RooErrorVar(*this,newname); }. Double_t evaluate() const; return error of input RooRealVar. void setVal(Double_t value); Set error of input RooRealVar to value. Bool_t isFundamental() const; Return kTRUE as we implement a fundamental type of AbsArg that can be stored in a dataset. void setMin(Double_t value); Set/get finite fit range limits. void setMax(Double_t value); Set upper bound of default range to value. void setRange(Double_t min, Double_t max); Set default ranges to [min,max]. void setBins(Int_t nBins); Set default binning to nBins uniform bins. void removeMin(const char* name = 0); Set infinite fit range limits. void removeMax(const char* name = 0); Remove upper bound from named binning, or default binning if name is null. void removeRange(const char* name = 0); Remove both upper and lower bounds from named binning, or; default binning if name is null. » Last changed: Tue Jun 2 15:30:36 2015 » Last generated: 2015-06-02 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooErrorVar.html:44317,error,error,44317,root/html604/RooErrorVar.html,https://root.cern,https://root.cern/root/html604/RooErrorVar.html,2,['error'],['error']
Availability,"en volume) and from the geometry manager level (checking full geometry):; myVolume->CheckOverlaps(precision, option);; gGeoManager->CheckOverlaps(precision);; myNode->CheckOverlaps(precision);; TGeoManager::CheckOverlapsvoid CheckOverlaps(Double_t ovlp=0.1, Option_t *option="""")Check all geometry for illegal overlaps within a limit OVLP.Definition TGeoManager.cxx:3869; Here precision represents the desired maximum accepted overlap value in centimeters (default value is 0.1). This tool checks all possible significant pairs of candidates inside a given volume (not declared as overlapping or division volumes). The check is performed by verifying the mesh representation of one candidate against the shape of the other. This sort of check cannot identify all possible overlapping topologies, but it works for more than 95% and is much faster than the usual shape-to-shape comparison. For a 100% reliability, one can perform the check at the level of a single volume by using option=""`d`"" or option=""`d<number>`"" to perform overlap checking by sampling the volume with <number> random points (default 1 million). This produces also a picture showing in red the overlapping region and estimates the volume of the overlaps.; An extrusion A) is declared in any of the following cases:. At least one of the vertices of the daughter mesh representation is outside the mother volume (in fact its shape) and having a safety distance to the mother greater than the desired value;; At least one of the mother vertices is contained also by one of its daughters, in the same conditions. An overlap B) is declared if:. At least one vertex of a positioned volume mesh is contained (having a safety bigger than the accepted maximum value) by other positioned volume inside the same container. The check is performed also by inverting the candidates. The code is highly optimized to avoid checking candidates that are far away in space by performing a fast check on their bounding boxes. Once the checking tool is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:102564,reliab,reliability,102564,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['reliab'],['reliability']
Availability,"en ylow and yup will be considered at filling time. ylow and yup will also be the maximum and minimum values on the y scale when drawing the profile.; See TProfile::BuildOptions for more explanations on errors; see also comments in the TH1 base class constructors ; Definition at line 180 of file TProfile.cxx. ◆ TProfile() [4/7]. TProfile::TProfile ; (; const char * ; name, . const char * ; title, . Int_t ; nbins, . const Float_t * ; xbins, . Option_t * ; option = """" . ). Constructor for Profile histograms with variable bin size. ; See TProfile::BuildOptions() for more explanations on errors see also comments in the TH1 base class constructors ; Definition at line 138 of file TProfile.cxx. ◆ TProfile() [5/7]. TProfile::TProfile ; (; const char * ; name, . const char * ; title, . Int_t ; nbins, . const Double_t * ; xbins, . Option_t * ; option = """" . ). Constructor for Profile histograms with variable bin size. ; See TProfile::BuildOptions for more explanations on errors see also comments in the TH1 base class constructors ; Definition at line 150 of file TProfile.cxx. ◆ TProfile() [6/7]. TProfile::TProfile ; (; const char * ; name, . const char * ; title, . Int_t ; nbins, . const Double_t * ; xbins, . Double_t ; ylow, . Double_t ; yup, . Option_t * ; option = """" . ). Constructor for Profile histograms with variable bin size. ; See TProfile::BuildOptions for more explanations on errors; see also comments in the TH1 base class constructors ; Definition at line 162 of file TProfile.cxx. ◆ TProfile() [7/7]. TProfile::TProfile ; (; const TProfile & ; profile). Copy constructor. ; Definition at line 244 of file TProfile.cxx. ◆ ~TProfile(). TProfile::~TProfile ; (; ). override . Default destructor for Profile histograms. ; Definition at line 100 of file TProfile.cxx. Member Function Documentation. ◆ Add() [1/3]. Bool_t TProfile::Add ; (; const TH1 * ; h1, . const TH1 * ; h2, . Double_t ; c1 = 1, . Double_t ; c2 = 1 . ). overridevirtual . Replace contents of this profile by t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile.html:60364,error,errors,60364,doc/master/classTProfile.html,https://root.cern,https://root.cern/doc/master/classTProfile.html,1,['error'],['errors']
Availability,"en, bin contents and errors are also printed for all bins including under and overflows. . Reimplemented from TObject.; Definition at line 7009 of file TH1.cxx. ◆ PutStats(). void TH1::PutStats ; (; Double_t * ; stats). virtual . Replace current statistics with the values in array stats. ; Reimplemented in TH2, TH3, TProfile, TProfile2D, and TProfile3D.; Definition at line 7884 of file TH1.cxx. ◆ Rebin(). TH1 * TH1::Rebin ; (; Int_t ; ngroup = 2, . const char * ; newname = """", . const Double_t * ; xbins = nullptr . ). virtual . Rebin this histogram. ; case 1 xbins=0; If newname is blank (default), the current histogram is modified and a pointer to it is returned.; If newname is not blank, the current histogram is not modified, and a new histogram is returned which is a Clone of the current histogram with its name set to newname.; The parameter ngroup indicates how many bins of this have to be merged into one bin of the result.; If the original histogram has errors stored (via Sumw2), the resulting histograms has new errors correctly calculated.; examples: if h1 is an existing TH1F histogram with 100 bins; h1->Rebin(); //merges two bins in one in h1: previous contents of h1 are lost; h1->Rebin(5); //merges five bins in one in h1; TH1F *hnew = dynamic_cast<TH1F*>(h1->Rebin(5,""hnew"")); // creates a new histogram hnew; // merging 5 bins of h1 in one bin; TH1::Rebinvirtual TH1 * Rebin(Int_t ngroup=2, const char *newname="""", const Double_t *xbins=nullptr)Rebin this histogram.Definition TH1.cxx:6275; NOTE: If ngroup is not an exact divider of the number of bins, the top limit of the rebinned histogram is reduced to the upper edge of the last bin that can make a complete group. The remaining bins are added to the overflow bin. Statistics will be recomputed from the new bin contents.; case 2 xbins!=0; A new histogram is created (you should specify newname). The parameter ngroup is the number of variable size bins in the created histogram. The array xbins must contain ngroup+",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:194435,error,errors,194435,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,2,['error'],['errors']
Availability,en. MinimizerOptions(IOptions * extraOpts = 0); constructor using the default options; pass optionally a pointer to the additional options; otehrwise look if they exist for this default minimizer; and in that case they are copied in the constructed instance. ~MinimizerOptions(); destructor. MinimizerOptions(const MinimizerOptions & opt); copy constructor. MinimizerOptions & operator=(const ROOT::Math::MinimizerOptions& opt); assignment operators. int PrintLevel() const; non-static methods for retrivieng options ; set print level. { return fLevel; }. unsigned int MaxFunctionCalls() const; max number of function calls. { return fMaxCalls; }. unsigned int MaxIterations() const; max iterations. { return fMaxIter; }. int Strategy() const; strategy. { return fStrategy; }. double Tolerance() const; absolute tolerance. { return fTolerance; }. double Precision() const; precision in the objective funciton calculation (value <=0 means left to default). { return fPrecision; }. double ErrorDef() const; error definition. { return fErrorDef; }. IOptions * ExtraOptions() const; return extra options (NULL pointer if they are not present). { return fExtraOptions; }. const std::string & MinimizerType() const; type of minimizer. { return fMinimType; }. const std::string & MinimizerAlgorithm() const; type of algorithm. { return fAlgoType; }. void Print(ostream& os = std::cout) const; print all the options. void SetPrintLevel(int level); non-static methods for setting options ; set print level. { fLevel = level; }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { fMaxCalls = maxfcn; }. void SetMaxIterations(unsigned int maxiter); set maximum iterations (one iteration can have many function calls). { fMaxIter = maxiter; }. void SetTolerance(double tol); set the tolerance. { fTolerance = tol; }. void SetPrecision(double prec); set the precision. { fPrecision = prec; }. void SetStrategy(int stra); set the strategy. { fStrategy = stra; }. void SetErrorDef(double,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__MinimizerOptions.html:4977,error,error,4977,root/html528/ROOT__Math__MinimizerOptions.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__MinimizerOptions.html,5,"['Error', 'error']","['ErrorDef', 'error']"
Availability,"enPhaseSpace(); TGenPhaseSpace(const TGenPhaseSpace& gen); virtual~TGenPhaseSpace(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGenerate(); TLorentzVector*GetDecay(Int_t n); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; Int_tGetNt() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetWtMax() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGenPhaseSpace.html:1873,error,error,1873,root/html528/TGenPhaseSpace.html,https://root.cern,https://root.cern/root/html528/TGenPhaseSpace.html,6,['error'],['error']
Availability,"en_b;; 865 if (c == ""dyellow"") return gClr_darkyellow;; 866 ; 867 if (c == ""bold"") return gClr_bold;; 868 if (c == ""bblack"") return gClr_black_b;; 869 ; 870 if (c == ""blue_bgd"") return gClr_blue_bg;; 871 if (c == ""red_bgd"" ) return gClr_red_bg;; 872 ; 873 if (c == ""white_on_blue"" ) return gClr_whiteonblue;; 874 if (c == ""white_on_green"") return gClr_whiteongreen;; 875 ; 876 if (c == ""reset"") return gClr_reset;; 877 ; 878 std::cout << ""Unknown color "" << c << std::endl;; 879 exit(1);; 880 ; 881 return gClr_none;; 882}; 883 ; 884////////////////////////////////////////////////////////////////////////////////; 885/// formatted output of simple table; 886 ; 887void TMVA::Tools::FormattedOutput( const std::vector<Double_t>& values, const std::vector<TString>& V,; 888 const TString titleVars, const TString titleValues, MsgLogger& logger,; 889 TString format ); 890{; 891 // sanity check; 892 UInt_t nvar = V.size();; 893 if ((UInt_t)values.size() != nvar) {; 894 logger << kFATAL << ""<FormattedOutput> fatal error with dimensions: ""; 895 << values.size() << "" OR "" << "" != "" << nvar << Endl;; 896 }; 897 ; 898 // find maximum length in V (and column title); 899 UInt_t maxL = 7;; 900 std::vector<UInt_t> vLengths;; 901 for (UInt_t ivar=0; ivar<nvar; ivar++) maxL = TMath::Max( (UInt_t)V[ivar].Length(), maxL );; 902 maxL = TMath::Max( (UInt_t)titleVars.Length(), maxL );; 903 ; 904 // column length; 905 UInt_t maxV = 7;; 906 maxV = TMath::Max( (UInt_t)titleValues.Length() + 1, maxL );; 907 ; 908 // full column length; 909 UInt_t clen = maxL + maxV + 3;; 910 ; 911 // bar line; 912 for (UInt_t i=0; i<clen; i++) logger << ""-"";; 913 logger << Endl;; 914 ; 915 // title bar; 916 logger << setw(maxL) << titleVars << "":"";; 917 logger << setw(maxV+1) << titleValues << "":"";; 918 logger << Endl;; 919 for (UInt_t i=0; i<clen; i++) logger << ""-"";; 920 logger << Endl;; 921 ; 922 // the numbers; 923 for (UInt_t irow=0; irow<nvar; irow++) {; 924 logger << setw(maxL) << V[irow] << "":"";; 925 logger <",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:30997,error,error,30997,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,1,['error'],['error']
Availability,"enalty for using different versions in the same program. ; printUsage() always interprets Descriptor::help as UTF-8 and always produces UTF-8-encoded output. If your system uses a different charset, you must do your own conversion. You may also need to change the font of the console to see non-ASCII characters properly. This is particularly true for Windows. ; Security warning: Do not insert untrusted strings (such as user-supplied arguments) into the usage. printUsage() has no protection against malicious UTF-8 sequences. Parameters. prnThe output method to use. See the examples above. ; usagethe Descriptor[] array whose help texts will be formatted. ; widththe maximum number of characters per output line. Note that this number is in actual characters, not bytes. printUsage() supports UTF-8 in help and will count multi-byte UTF-8 sequences properly. Asian wide characters are counted as 2 characters. ; last_column_min_percent(0-100) The minimum percentage of width that should be available for the last column (which typically contains the textual explanation of an option). If less space is available, the last column will be printed on its own line, indented according to last_column_own_line_max_percent. ; last_column_own_line_max_percent(0-100) If the last column is printed on its own line due to less than last_column_min_percent of the width being available, then only last_column_own_line_max_percent of the extra line(s) will be used for the last column's text. This ensures an indentation. See example below. // width=20, last_column_min_percent=50 (i.e. last col. min. width=10); --3456789 1234567890; 1234567890; ; // width=20, last_column_min_percent=75 (i.e. last col. min. width=15); // last_column_own_line_max_percent=75; --3456789; 123456789012345; 67890; ; // width=20, last_column_min_percent=75 (i.e. last col. min. width=15); // last_column_own_line_max_percent=33 (i.e. max. 5); --3456789; 12345; 67890; 12345; 67890. Definition at line 2798 of file OptionParser.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1option.html:12574,avail,available,12574,doc/master/namespaceROOT_1_1option.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1option.html,2,['avail'],['available']
Availability,"ename);  ; static bool R__InitStreamerInfoFactory ();  Helper to initialize TVirtualStreamerInfo's factor early. ;  ; static void RegisterCxxModules (cling::Interpreter &clingInterp);  ; static void RegisterPreIncludedHeaders (cling::Interpreter &clingInterp);  ; static bool requiresRootMap (const char *rootmapfile);  ; static Bool_t s_IsLibraryLoaded (const char *libname, cling::Interpreter *fInterpreter);  ; int TCling__AutoLoadCallback (const char *className);  ; int TCling__AutoParseCallback (const char *className);  ; int TCling__CompileMacro (const char *fileName, const char *options);  ; clang::NamespaceDecl * TCling__DEBUG__DCtoNamespace (clang::DeclContext *DC);  ; clang::RecordDecl * TCling__DEBUG__DCtoRecordDecl (clang::DeclContext *DC);  ; void TCling__DEBUG__decl_dump (void *D);  ; void TCling__DEBUG__dump (clang::Decl *D);  ; void TCling__DEBUG__dump (clang::DeclContext *DC);  ; void TCling__DEBUG__dump (clang::FunctionDecl *FD);  ; clang::DeclContext * TCling__DEBUG__getDeclContext (clang::Decl *D);  ; void TCling__DEBUG__printName (clang::Decl *D);  ; const char * TCling__GetClassSharedLibs (const char *className, bool skipCore);  ; void TCling__GetNormalizedContext (const ROOT::TMetaUtils::TNormalizedCtxt *&normCtxt);  ; TObject * TCling__GetObjectAddress (const char *Name, void *&LookupCtx);  ; const Decl * TCling__GetObjectDecl (TObject *obj);  ; void TCling__InvalidateGlobal (const clang::Decl *D);  ; int TCling__IsAutoLoadNamespaceCandidate (const clang::NamespaceDecl *nsDecl);  ; void TCling__LibraryLoadedRTTI (const void *dyLibHandle, const char *canonicalName);  ; bool TCling__LibraryLoadingFailed (const std::string &errmessage, const std::string &libStem, bool permanent, bool resolved);  Lookup libraries in LD_LIBRARY_PATH and DYLD_LIBRARY_PATH with mangled_name, which is extracted by error messages we get from callback from cling. ;  ; void TCling__LibraryUnloadedRTTI (const void *dyLibHandle, const char *canonicalName);  ; int TCling__Load",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx.html:8423,error,error,8423,doc/master/TCling_8cxx.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx.html,1,['error'],['error']
Availability,"ename, weight);; 266 hist2->Fill(x, somename, weight);; 267 hist2->Fill(somename, y, weight);; 268 hist2->Fill(somenamex, somenamey, weight);; 269~~~; 270 See examples hlabels1.C and hlabels2.C; 271 - via TTree::Draw. see for example cernstaff.C; 272~~~ {.cpp}; 273 tree.Draw(""Nation::Division"");; 274~~~; 275 where ""Nation"" and ""Division"" are two branches of a Tree.; 276 ; 277When using the options 2 or 3 above, the labels are automatically; 278 added to the list (THashList) of labels for a given axis.; 279 By default, an axis is drawn with the order of bins corresponding; 280 to the filling sequence. It is possible to reorder the axis; 281 ; 282 - alphabetically; 283 - by increasing or decreasing values; 284 ; 285 The reordering can be triggered via the TAxis context menu by selecting; 286 the menu item ""LabelsOption"" or by calling directly; 287 TH1::LabelsOption(option, axis) where; 288 ; 289 - axis may be ""X"", ""Y"" or ""Z""; 290 - option may be:; 291 - ""a"" sort by alphabetic order; 292 - "">"" sort by decreasing values; 293 - ""<"" sort by increasing values; 294 - ""h"" draw labels horizontal; 295 - ""v"" draw labels vertical; 296 - ""u"" draw labels up (end of label right adjusted); 297 - ""d"" draw labels down (start of label left adjusted); 298 ; 299 When using the option 2 above, new labels are added by doubling the current; 300 number of bins in case one label does not exist yet.; 301 When the Filling is terminated, it is possible to trim the number; 302 of bins to match the number of active labels by calling; 303~~~ {.cpp}; 304 TH1::LabelsDeflate(axis) with axis = ""X"", ""Y"" or ""Z""; 305~~~; 306 This operation is automatic when using TTree::Draw.; 307 Once bin labels have been created, they become persistent if the histogram; 308 is written to a file or when generating the C++ code via SavePrimitive.; 309 ; 310\anchor auto-bin; 311### Histograms with automatic bins; 312 ; 313 When a histogram is created with an axis lower limit greater or equal; 314 to its upper limit, the Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:13023,down,down,13023,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['down'],['down']
Availability,"ence Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TProofServLite Class ReferencePROOF » PROOF kernel Libraries. ; Version of the PROOF worker server for local running. ; The client starts directly the desired number of these workers; the master and daemons are eliminated, optimizing the number of messages exchanged and created / destroyed. ; Definition at line 30 of file TProofServLite.h. Public Member Functions;  TProofServLite (Int_t *argc, char **argv, FILE *flog=0);  Main constructor. ;  ;  ~TProofServLite () override;  Cleanup. ;  ; Int_t CreateServer () override;  Finalize the server setup. ;  ; void HandleFork (TMessage *mess) override;  Cloning itself via fork. ;  ; void HandleSigPipe () override;  Called when the client is not alive anymore; terminate the session. ;  ; void HandleTermination () override;  Called when the client is not alive anymore; terminate the session. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Terminate (Int_t status) override;  Terminate the proof server. ;  ;  Public Member Functions inherited from TProofServ;  TProofServ (Int_t *argc, char **argv, FILE *flog=0);  Main constructor. ;  ;  ~TProofServ () override;  Cleanup. ;  ; virtual void DisableTimeout ();  ; virtual void EnableTimeout ();  ; void FlushLogFile ();  Reposition the read pointer in the log file to the very end. ;  ; TObject * Get (const char *namecycle);  Get object with name ""name;cycle"" (e.g. ;  ; Int_t GetActSessions () const;  ; const char * GetCacheDir () const;  ; TProofLockPath * GetCacheLock ();  ; const char * GetConfDir () const;  ; const char * GetConfFile () const;  ; Float_t GetCpuTime () const;  ; const char * GetDataDir () const;  ; const char * GetDataD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServLite.html:1083,alive,alive,1083,doc/master/classTProofServLite.html,https://root.cern,https://root.cern/doc/master/classTProofServLite.html,1,['alive'],['alive']
Availability,"ence level for the i^th entry in the results. double GetYError(int index) const; function to return the estimated error on the value of the confidence level for the i^th entry in the results. double CLb(int index) const; function to return the observed CLb value for the i-th entry. double CLsplusb(int index) const; function to return the observed CLs+b value for the i-th entry. double CLs(int index) const; function to return the observed CLs value for the i-th entry. double CLbError(int index) const; function to return the error on the observed CLb value for the i-th entry. double CLsplusbError(int index) const; function to return the error on the observed CLs+b value for the i-th entry. double CLsError(int index) const; function to return the error on the observed CLs value for the i-th entry. HypoTestResult* GetResult(int index) const; get the HypoTestResult object at the given index point. int FindIndex(double xvalue) const; find the index corresponding at the poi value xvalue; If no points is found return -1; Note that a tolerance is used of 10^-12 to find the closest point. double GetGraphX(const TGraph& g, double y0, bool lowSearch = false, double xmin = 1, double xmax = 0) const; return the X value of the given graph for the target value y0; the graph is evaluated using linea rinterpolation by default.; if option = ""S"" a TSpline3 is used. double FindInterpolatedLimit(double target, bool lowSearch = false, double xmin = 1, double xmax = 0); interpolate to find a limit value; Use a linear or a spline interpolation depending on the interpolation option. int FindClosestPointIndex(double target); find the object with the smallest error that is < 1 sigma from the target. Double_t LowerLimit(). Double_t UpperLimit(); std::cout << ""finding point with cl = "" << (1-ConfidenceLevel())/2 << endl;. Double_t CalculateEstimatedError(double target); Return an error estimate on the upper limit. This is the error on; either CLs or CLsplusb divided by an estimate of the slope a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HypoTestInverterResult.html:11588,toler,tolerance,11588,root/html530/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html530/RooStats__HypoTestInverterResult.html,1,['toler'],['tolerance']
Availability,"ence level for the i^th entry in the results. double GetYError(int index) const; function to return the estimated error on the value of the confidence level for the i^th entry in the results. double CLb(int index) const; function to return the observed CLb value for the i-th entry. double CLsplusb(int index) const; function to return the observed CLs+b value for the i-th entry. double CLs(int index) const; function to return the observed CLs value for the i-th entry. double CLbError(int index) const; function to return the error on the observed CLb value for the i-th entry. double CLsplusbError(int index) const; function to return the error on the observed CLs+b value for the i-th entry. double CLsError(int index) const; function to return the error on the observed CLs value for the i-th entry. HypoTestResult* GetResult(int index) const; get the HypoTestResult object at the given index point. int FindIndex(double xvalue) const; find the index corresponding at the poi value xvalue; If no points is found return -1; Note that a tolerance is used of 10^-12 to find the closest point. double GetGraphX(const TGraph& g, double y0, bool lowSearch = false, double xmin = 1, double xmax = 0) const; return the X value of the given graph for the target value y0; the graph is evaluated using linear interpolation by default.; if option = ""S"" a TSpline3 is used. double FindInterpolatedLimit(double target, bool lowSearch = false, double xmin = 1, double xmax = 0); interpolate to find a limit value; Use a linear or a spline interpolation depending on the interpolation option. int FindClosestPointIndex(double target); find the object with the smallest error that is < 1 sigma from the target. Double_t LowerLimit(). Double_t UpperLimit(); std::cout << ""finding point with cl = "" << (1-ConfidenceLevel())/2 << endl;. Double_t CalculateEstimatedError(double target); Return an error estimate on the upper limit. This is the error on; either CLs or CLsplusb divided by an estimate of the slope a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__HypoTestInverterResult.html:11917,toler,tolerance,11917,root/html532/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html532/RooStats__HypoTestInverterResult.html,2,['toler'],['tolerance']
Availability,"ence level for the i^th entry in the results. double GetYError(int index) const; function to return the estimated error on the value of the confidence level for the i^th entry in the results. double CLb(int index) const; function to return the observed CLb value for the i-th entry. double CLsplusb(int index) const; function to return the observed CLs+b value for the i-th entry. double CLs(int index) const; function to return the observed CLs value for the i-th entry. double CLbError(int index) const; function to return the error on the observed CLb value for the i-th entry. double CLsplusbError(int index) const; function to return the error on the observed CLs+b value for the i-th entry. double CLsError(int index) const; function to return the error on the observed CLs value for the i-th entry. HypoTestResult* GetResult(int index) const; get the HypoTestResult object at the given index point. int FindIndex(double xvalue) const; find the index corresponding at the poi value xvalue; If no points is found return -1; Note that a tolerance is used of 10^-12 to find the closest point. double GetGraphX(const TGraph& g, double y0, bool lowSearch, double& xmin, double& xmax) const; return the X value of the given graph for the target value y0; the graph is evaluated using linear interpolation by default.; if option = ""S"" a TSpline3 is used. double FindInterpolatedLimit(double target, bool lowSearch = false, double xmin = 1, double xmax = 0); interpolate to find a limit value; Use a linear or a spline interpolation depending on the interpolation option. int FindClosestPointIndex(double target, int mode = 0, double xtarget = 0); if mode = 0; find closest point to target in Y, the object closest to the target which is 3 sigma from the target; and has smaller error; if mode = 1; find 2 closest point to target in X and between these two take the one closer to the target; if mode = 2 as in mode = 1 but return the lower point not the closest one; if mode = 3 as in mode = 1 but retu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html:12709,toler,tolerance,12709,root/html534/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html,6,['toler'],['tolerance']
Availability,"enceCut(). Double_t TMVA::ROCCalc::GetSignalReferenceCut ; (; ). inline . Definition at line 32 of file ROCCalc.h. ◆ GetSignificance(). TH1 * TMVA::ROCCalc::GetSignificance ; (; Int_t ; nStot, . Int_t ; nBtot . ). Definition at line 440 of file ROCCalc.cxx. ◆ GetStatus(). Bool_t TMVA::ROCCalc::GetStatus ; (; ). inline . Definition at line 45 of file ROCCalc.h. ◆ Log(). MsgLogger & TMVA::ROCCalc::Log ; (; ); const. inlineprivate . message logger ; Definition at line 78 of file ROCCalc.h. ◆ ResetStatus(). void TMVA::ROCCalc::ResetStatus ; (; ). inline . Definition at line 46 of file ROCCalc.h. ◆ Root(). Double_t TMVA::ROCCalc::Root ; (; Double_t ; refValue). private . Root finding using Brents algorithm; taken from CERNLIB function RZERO. ; Definition at line 348 of file ROCCalc.cxx. Member Data Documentation. ◆ effBvsS. TH1D* TMVA::ROCCalc::effBvsS. private . Definition at line 71 of file ROCCalc.h. ◆ fAbsTol. Double_t TMVA::ROCCalc::fAbsTol. private . absolute tolerance deviation ; Definition at line 52 of file ROCCalc.h. ◆ fCutOrientation. Int_t TMVA::ROCCalc::fCutOrientation. private . +1 if larger mva value means more signal like, -1 otherwise ; Definition at line 63 of file ROCCalc.h. ◆ fLogger. MsgLogger* TMVA::ROCCalc::fLogger. mutableprivate . Definition at line 77 of file ROCCalc.h. ◆ fMaxIter. Int_t TMVA::ROCCalc::fMaxIter. private . maximum number of iterations ; Definition at line 51 of file ROCCalc.h. ◆ fmvaB. TH1 * TMVA::ROCCalc::fmvaB. private . the input mva distributions ; Definition at line 59 of file ROCCalc.h. ◆ fmvaBcumul. TH1 * TMVA::ROCCalc::fmvaBcumul. private . Definition at line 67 of file ROCCalc.h. ◆ fmvaBpdf. TH1 * TMVA::ROCCalc::fmvaBpdf. private . the normalized (and rebinned) input mva distributions ; Definition at line 60 of file ROCCalc.h. ◆ fmvaS. TH1* TMVA::ROCCalc::fmvaS. private . Definition at line 59 of file ROCCalc.h. ◆ fmvaScumul. TH1* TMVA::ROCCalc::fmvaScumul. private . Definition at line 67 of file ROCCalc.h. ◆ fmvaSpdf. T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ROCCalc.html:5114,toler,tolerance,5114,doc/master/classTMVA_1_1ROCCalc.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ROCCalc.html,1,['toler'],['tolerance']
Availability,"enceRooFit » xRooFit. ; A version of the TBrowser that can be used to interact with RooFit models and datasets. . Also available under the ROOT::Experimental::RooBrowser alias.; To get started with the xRooBrowser, open any ROOT file containing a workspace and then create an instance of the xRooBrowser just like creating an instance of a TBrowser. A window will be displayed with a navigable tree structure on the left that lets you explore the content of the workspaces present in the loaded file. Note that additional files, including json workspace files, can be loaded through the Browser --> Open menu in the top left corner.; The context menu for each node (access by right clicking on the node) in the tree structure can be used to get more information about the node. In particular, the Draw command can be selected on many of the nodes that are part of a statistical model, which will visualize that part of the model in the browser window. A number of options are available for the Draw command, including (some options can be combined):. ""e"" : calculate and visualize propagated model uncertainty; ""auxratio"" : Draw a ratio auxiliary plot below the main plot; ""auxsignif"" : Draw a significance auxiliary plot below the main plot; ""pull"" : show panel of current parameter values, which can be dragged in order to change the values and visualize the effect on the model (very experimental feature). Once a node has been drawn, the styling of subsequent draws can be controlled through TStyle objects that will now appear in the objects folder in the workspace.; A model can be fit to a dataset from the workspace using the fitTo context menu command and specifying the name of a dataset in the workspace (if no name is given, an expected dataset corresponding to the current state of the model will be used). A dialog will display the fit result status code when the fit completes and then a fits folder will be found under the workspace (the workspace may need to be collapsed and re-expan",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:1303,avail,available,1303,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,1,['avail'],['available']
Availability,"enceTutorials » Dataframe tutorials. Detailed Description; Use just-in-time-compiled Filters and Defines for quick prototyping. ; This tutorial illustrates how to save some typing when using RDataFrame by invoking functions that perform jit-compiling at runtime.; ; void df012_DefinesAndFiltersAsStrings(); {; // We will inefficiently calculate an approximation of pi by generating; // some data, and doing very simple filtering and analysis on it.; ; // We start by creating an empty dataframe where we will insert 10 million; // random points in a square of side 2.0 (that is, with an inscribed circle; // of radius 1.0).; ; size_t npoints = 10000000;; ROOT::RDataFrame df(npoints);; ; // Define what we want inside the dataframe. We do not need to define p as an array,; // but we do it here to demonstrate how to use jitting with RDataFrame.; ; // NOTE: Although it's possible to use ""for (auto&& x : p)"" below, it will; // shadow the name of the data column ""x"", and may cause compilation failures; // if the local variable and the data column are of different types, or the; // local x variable is declared in the global scope of the lambda function.; ; auto pidf = df.Define(""x"", ""gRandom->Uniform(-1.0, 1.0)""); .Define(""y"", ""gRandom->Uniform(-1.0, 1.0)""); .Define(""p"", ""std::array<double, 2> v{x, y}; return v;""); .Define(""r"", ""double r2 = 0.0; for (auto&& x : p) r2 += x*x; return sqrt(r2);"");; ; // Now we have a dataframe with columns x, y, p (which is a point based on x; // and y), and the radius r = sqrt(x*x + y*y). In order to approximate pi, we; // need to know how many of our data points fall inside the unit circle compared; // with the total number of points. The ratio of the areas is; //; // A_circle / A_square = pi r*r / l * l, where r = 1.0, and l = 2.0; //; // Therefore, we can approximate pi with four times the number of points inside the; // unit circle over the total number of points in our dataframe:; ; auto incircle = *(pidf.Filter(""r <= 1.0"").Count());; ; double p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df012__DefinesAndFiltersAsStrings_8C.html:1199,failure,failures,1199,doc/master/df012__DefinesAndFiltersAsStrings_8C.html,https://root.cern,https://root.cern/doc/master/df012__DefinesAndFiltersAsStrings_8C.html,1,['failure'],['failures']
Availability,"enced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TMemFile; enum class  EMode { kCreate; , kRecreate; , kUpdate; , kRead; };  ;  Protected Types inherited from TDirectory; using SharedGDirectory_t = std::shared_ptr< std::atomic< TDirectory * > >;  Pointer to a list of TContext object pointing to this TDirectory. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMemFile; Bool_t IsExternalData () const;  ; Long64_t MemRead (Int_t fd, void *buf, Long64_t len) const;  ; bool NeedsExistingFile (EMode mode) const;  ; bool NeedsToWrite (EMode mode) const;  ; TMemFile & operator= (const TMemFile &)=delete;  ; EMode ParseOption (Option_t *option);  Parse option strings and set fOption. ;  ; void ResetObjects (TDirectoryFile *, TFileMergeInfo *) const;  Wipe all the data from the permanent buffer but keep, the in-memory object alive. ;  ; Int_t SysClose (Int_t fd) override;  Close the mem file. ;  ; Int_t SysOpen (const char *pathname, Int_t flags, UInt_t mode) override;  Open a file in 'MemFile'. ;  ; Int_t SysRead (Int_t fd, void *buf, Int_t len) override;  Read specified number of bytes from current offset into the buffer. ;  ; Int_t SysReadImpl (Int_t fd, void *buf, Long64_t len);  Read specified number of bytes from current offset into the buffer. ;  ; Long64_t SysSeek (Int_t fd, Long64_t offset, Int_t whence) override;  Seek to a specified position in the file. ;  ; Int_t SysStat (Int_t fd, Long_t *id, Long64_t *size, Long_t *flags, Long_t *modtime) override;  Perform a stat on the file; see TFile::SysStat(). ;  ; Int_t SysSync (Int_t fd) override;  Sync remaining data to disk. ;  ; Int_t SysWrite (Int_t fd, const void *buf, Int_t len) override;  Write a buffer into the file. ;  ; Int_t SysWriteImpl (Int_t fd, const void *buf, Long64_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:34247,alive,alive,34247,doc/v632/classROOT_1_1TBufferMergerFile.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html,3,['alive'],['alive']
Availability,"enced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; UInt_tfShapeBitsshape bits; Int_tfShapeIdshape id; TStringTNamed::fTitleobject title. private:. static Double_tfgEpsMchMachine round-off error; static TGeoMatrix*fgTransformcurrent transformation matrix that applies to shape. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TGeoShape(); Destructor. void CheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); Test for shape navigation methods. Summary for test numbers:; 1: DistFromInside/Outside. Sample points inside the shape. Generate; directions randomly in cos(theta). Compute DistFromInside and move the; point with bigger distance. Compute DistFromOutside back from new point.; Plot d-(d1+d2). Double_t ComputeEpsMch(); Compute machine round-off double precision error as the smallest number that; if added to 1.0 is different than 1.0. Double_t EpsMch(); static function returning the machine round-off error. const char * GetName() const; Get the shape name. Int_t ShapeDistancetoPrimitive(Int_t numpoints, Int_t px, Int_t py) const; Returns distance to shape primitive mesh. Bool_t IsCloseToPhi(Double_t epsil, Double_t* point, Double_t c1, Double_t s1, Double_t c2, Double_t s2); True if point is closer than epsil to one of the phi planes defined by c1,s1 or c2,s2. Bool_t IsInPhiRange(Double_t* point, Double_t phi1, Double_t phi2); Static method to check if a point is in the phi range (phi1, phi2) [degrees]. Bool_t IsCrossingSemiplane(Double_t* point, Double_t* dir, Double_t cphi, Double_t sphi, Double_t& snext, Double_t& rxy); Compute distance from POINT to semiplane defined by PHI angle along DIR. Computes; also radius at crossing point. This might be negative in case the crossing is; on the other side of the semiplane. Bool_t IsSameWit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoShape.html:16472,error,error,16472,root/html530/TGeoShape.html,https://root.cern,https://root.cern/root/html530/TGeoShape.html,3,['error'],['error']
Availability,"enced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; UInt_tfShapeBitsshape bits; Int_tfShapeIdshape id; TStringTNamed::fTitleobject title. private:. static Double_tfgEpsMchMachine round-off error; static TGeoMatrix*fgTransformcurrent transformation matrix that applies to shape. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TGeoShape(); Destructor. void CheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); Test for shape navigation methods. Summary for test numbers:; 1: DistFromInside/Outside. Sample points inside the shape. Generate; directions randomly in cos(theta). Compute DistFromInside and move the; point with bigger distance. Compute DistFromOutside back from new point.; Plot d-(d1+d2). Double_t ComputeEpsMch(); Compute machine round-off double precision error as the smallest number that; if added to 1.0 is different than 1.0. Double_t EpsMch(); static function returning the machine round-off error. const char * GetName() const; Get the shape name. Int_t ShapeDistancetoPrimitive(Int_t numpoints, Int_t px, Int_t py) const; Returns distance to shape primitive mesh. Bool_t IsCloseToPhi(Double_t epsil, const Double_t* point, Double_t c1, Double_t s1, Double_t c2, Double_t s2); True if point is closer than epsil to one of the phi planes defined by c1,s1 or c2,s2. Bool_t IsInPhiRange(const Double_t* point, Double_t phi1, Double_t phi2); Static method to check if a point is in the phi range (phi1, phi2) [degrees]. Bool_t IsCrossingSemiplane(const Double_t* point, const Double_t* dir, Double_t cphi, Double_t sphi, Double_t& snext, Double_t& rxy); Compute distance from POINT to semiplane defined by PHI angle along DIR. Computes; also radius at crossing point. This might be negative in case the crossing is; on the other side of the sem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoShape.html:17257,error,error,17257,root/html534/TGeoShape.html,https://root.cern,https://root.cern/root/html534/TGeoShape.html,2,['error'],['error']
Availability,"enced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TGraph::(anonymous)TGraph::kNotEditable; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*fEXhigh[fNpoints] array of X high errors; Double_t*fEXlow[fNpoints] array of X low errors; Double_t*fEYhigh[fNpoints] array of Y high errors; Double_t*fEYlow[fNpoints] array of Y low errors; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TList*TGraph::fFunctionsPointer to list of functions (fits and user); TH1F*TGraph::fHistogramPointer to histogram used for drawing axis; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph::fMaxSize!Current dimension of arrays fX and fY; Double_tTGraph::fMaximumMaximum value for plotting along y; Double_tTGraph::fMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tTGraph::fNpointsNumber of points <= fMaxSize; TStringTNamed::fTitleobject title; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*TGraph::fY[fNpoints] array of Y points. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphAsymmErrors(); TGraphAsymmErrors default constructor. TGraphAsymmErrors(const TGraphAsymmErrors& gr); TGraphAsymmErrors copy constructor. TGraphAsymmErrors& operator=(const TGraphAsymmErrors& gr); TGraphAsymmErrors assignment operator. TGraphAsymmErrors(Int_t n); TGraphAsymmErrors normal constructor. the arrays are preset to zero. TGraphAsymmErrors(Int_t n, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraphAsymmErrors.html:15228,error,errors,15228,root/html602/TGraphAsymmErrors.html,https://root.cern,https://root.cern/root/html602/TGraphAsymmErrors.html,16,['error'],['errors']
Availability,"ences for citation; 2211 gTools().TMVACitation(Log(), Tools::kHtmlLink);; 2212}; 2213 ; 2214////////////////////////////////////////////////////////////////////////////////; 2215/// Evaluate Variable Importance; 2216 ; 2217TH1F *TMVA::Factory::EvaluateImportance(DataLoader *loader, VIType vitype, Types::EMVA theMethod, TString methodTitle,; 2218 const char *theOption); 2219{; 2220 fModelPersistence = kFALSE;; 2221 fSilentFile = kTRUE; // we need silent file here because we need fast classification results; 2222 ; 2223 // getting number of variables and variable names from loader; 2224 const int nbits = loader->GetDataSetInfo().GetNVariables();; 2225 if (vitype == VIType::kShort); 2226 return EvaluateImportanceShort(loader, theMethod, methodTitle, theOption);; 2227 else if (vitype == VIType::kAll); 2228 return EvaluateImportanceAll(loader, theMethod, methodTitle, theOption);; 2229 else if (vitype == VIType::kRandom) {; 2230 if ( nbits > 10 && nbits < 30) {; 2231 // limit nbits to less than 30 to avoid error converting from double to uint and also cannot deal with too many combinations; 2232 return EvaluateImportanceRandom(loader, static_cast<UInt_t>( pow(2, nbits) ), theMethod, methodTitle, theOption);; 2233 } else if (nbits < 10) {; 2234 Log() << kERROR << ""Error in Variable Importance: Random mode require more that 10 variables in the dataset.""; 2235 << Endl;; 2236 } else if (nbits > 30) {; 2237 Log() << kERROR << ""Error in Variable Importance: Number of variables is too large for Random mode""; 2238 << Endl;; 2239 }; 2240 }; 2241 return nullptr;; 2242}; 2243 ; 2244////////////////////////////////////////////////////////////////////////////////; 2245 ; 2246TH1F *TMVA::Factory::EvaluateImportanceAll(DataLoader *loader, Types::EMVA theMethod, TString methodTitle,; 2247 const char *theOption); 2248{; 2249 ; 2250 uint64_t x = 0;; 2251 uint64_t y = 0;; 2252 ; 2253 // getting number of variables and variable names from loader; 2254 const int nbits = loader->GetDataSetInfo(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:94147,error,error,94147,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['error'],['error']
Availability,"ency.h:34; TEfficiency::SetTitlevoid SetTitle(const char *title) overrideSets the title.Definition TEfficiency.cxx:3726; TEfficiency::FitTFitResultPtr Fit(TF1 *f1, Option_t *opt="""")Fits the efficiency using the TBinomialEfficiencyFitter class.Definition TEfficiency.cxx:2555; TEfficiency::fPaintHistoTH2 * fPaintHisto! Temporary histogram for paintingDefinition TEfficiency.h:57; TF11-Dim function classDefinition TF1.h:233; TF1::Classstatic TClass * Class(); TF1::Copyvoid Copy(TObject &f1) const overrideCopy this F1 to a new F1.Definition TF1.cxx:1005; TF1::IsATClass * IsA() const overrideDefinition TF1.h:755; TFitResultPtrProvides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointe...Definition TFitResultPtr.h:32; TGraph2DAsymmErrorsGraph 2D class with errors.Definition TGraph2DAsymmErrors.h:26; TGraph2D::Paintvoid Paint(Option_t *option="""") overridePaints this 2D graph with its current attributes.Definition TGraph2D.cxx:1270; TGraphAsymmErrorsTGraph with asymmetric error bars.Definition TGraphAsymmErrors.h:26; TGraph::Paintvoid Paint(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:1977; TGraph::ExecuteEventvoid ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideExecute action corresponding to one event.Definition TGraph.cxx:1056; TGraph::PaintStatsvirtual void PaintStats(TF1 *fit)Draw the stats.Definition TGraph.cxx:2004; TGraph::DistancetoPrimitiveInt_t DistancetoPrimitive(Int_t px, Int_t py) overrideCompute distance from point px,py to a graph.Definition TGraph.cxx:879; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1F::Classstatic TClass * Class(); TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::SetDirectoryvirtual void SetDirectory(TDirectory *dir)By default, when a histogram is created, it is added to the list",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEfficiency_8cxx_source.html:176842,error,error,176842,doc/master/TEfficiency_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEfficiency_8cxx_source.html,1,['error'],['error']
Availability,"end > RooPlot::BuildLegend ; (; ); const. Build a legend that contains all objects that have been drawn on the plot. ; Definition at line 1412 of file RooPlot.cxx. ◆ chiSquare() [1/2]. double RooPlot::chiSquare ; (; const char * ; curvename, . const char * ; histname, . int ; nFitParam = 0 . ); const. Calculate and return reduced chi-squared between a curve and a histogram. ; Parameters. [in]curvenameName of the curve or nullptr for last curve ; [in]histnameName of the histogram to compare to or nullptr for last added histogram ; [in]nFitParamIf non-zero, reduce the number of degrees of freedom by this number. This means that the curve was fitted to the data with nFitParam floating parameters, which needs to be reflected in the calculation of \(\chi^2 / \mathrm{ndf}\). Returns\( \chi^2 / \mathrm{ndf} \) between the plotted curve and the data.; NoteThe \( \chi^2 \) is calculated between a plot of the original distribution and the data. It therefore has more rounding errors than directly calculating the \( \chi^2 \) from a PDF or function. To do this, use RooAbsReal::createChi2(RooDataHist&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&). ; Definition at line 1068 of file RooPlot.cxx. ◆ chiSquare() [2/2]. double RooPlot::chiSquare ; (; int ; nFitParam = 0); const. inline . Shortcut for RooPlot::chiSquare(const char* pdfname, const char* histname, int nFitParam=nullptr) ; Definition at line 180 of file RooPlot.h. ◆ Class(). static TClass * RooPlot::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooPlot::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooPlot::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 256 of file RooPlot.h. ◆ createInternalPlotVarClone(). void RooPlot::createInternalPlotVarClone ; (; ). Replaces the poin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPlot.html:33109,error,errors,33109,doc/master/classRooPlot.html,https://root.cern,https://root.cern/doc/master/classRooPlot.html,1,['error'],['errors']
Availability,"end points of the vertical error bars.|; 695| ""E4"" | A smoothed filled area is drawn through the end points of the vertical error bars.|; 696| ""E0"" | Draw error bars. Markers are drawn for bins with 0 contents. Combined with E1 or E2 it avoids error bars clipping|; 697| ""E5"" | Like E3 but ignore the bins with 0 contents.|; 698| ""E6"" | Like E4 but ignore the bins with 0 contents.|; 699| ""X0"" | When used with one of the ""E"" option, it suppress the error bar along X as `gStyle->SetErrorX(0)` would do.|; 700 ; 701Begin_Macro(source); 702{; 703 auto c1 = new TCanvas(""c1"",""c1"",600,400);; 704 auto he = new TH1F(""he"",""Distribution drawn with error bars (option E1) "",100,-3,3);; 705 for (int i=0; i<10000; i++) he->Fill(gRandom->Gaus(0,1));; 706 gStyle->SetEndErrorSize(3);; 707 gStyle->SetErrorX(1.);; 708 he->SetMarkerStyle(20);; 709 he->Draw(""E1"");; 710}; 711End_Macro; 712 ; 713The options ""E3"" and ""E4"" draw an error band through the end points of the; 714vertical error bars. With ""E4"" the error band is smoothed. Because of the; 715smoothing algorithm used some artefacts may appear at the end of the band; 716like in the following example. In such cases ""E3"" should be used instead; 717of ""E4"".; 718 ; 719Begin_Macro(source); 720{; 721 auto ce4 = new TCanvas(""ce4"",""ce4"",600,400);; 722 ce4->Divide(2,1);; 723 auto he4 = new TH1F(""he4"",""Distribution drawn with option E4"",100,-3,3);; 724 Int_t i;; 725 for (i=0;i<10000;i++) he4->Fill(gRandom->Gaus(0,1));; 726 he4->SetFillColor(kRed);; 727 he4->GetXaxis()->SetRange(40,48);; 728 ce4->cd(1);; 729 he4->Draw(""E4"");; 730 ce4->cd(2);; 731 auto he3 = (TH1F*)he4->DrawClone(""E3"");; 732 he3->SetTitle(""Distribution drawn option E3"");; 733}; 734End_Macro; 735 ; 7362D histograms can be drawn with error bars as shown is the following example:; 737 ; 738Begin_Macro(source); 739{; 740 auto c2e = new TCanvas(""c2e"",""c2e"",600,400);; 741 auto h2e = new TH2F(""h2e"",""TH2 drawn with option E"",40,-4,4,40,-20,20);; 742 float px, py;; 743 for (Int_t i = 0; i <",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:31555,error,error,31555,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['error'],['error']
Availability,"end to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Multiply. The function return kFALSE if the Multiply operation failed. void Paint(Option_t* option = """"); -*-*-*-*-*-*-*Control routine to paint any kind of histograms*-*-*-*-*-*-*. This function is automatically called by TCanvas::Update.; (see TH1::Draw for the list of options). TH1 * Rebin(Int_t ngroup = 2, const char* newname = """", const Double_t* xbins = 0); Rebin this histogram. -case 1 xbins=0; If newname is blank (default), the current histogram is modified and; a pointer to it is returned. If newname is not blank, the current histogram is not modified, and a; new histogram is returned which is a Clone of the current histogram; with its name set to newname. The parameter ngroup indicates how many bins of this have to be merged; into one bin of the result. If the original histogram has errors stored (via Sumw2), the resulting; histograms has new errors correctly calculated. examples: if h1 is an existing TH1F histogram with 100 bins; h1->Rebin(); //merges two bins in one in h1: previous contents of h1 are lost; h1->Rebin(5); //merges five bins in one in h1; TH1F *hnew = h1->Rebin(5,""hnew""); // creates a new histogram hnew; // merging 5 bins of h1 in one bin. NOTE: If ngroup is not an exact divider of the number of bins,; the top limit of the rebinned histogram is reduced; to the upper edge of the last bin that can make a complete; group. The remaining bins are added to the overflow bin.; Statistics will be recomputed from the new bin contents. -case 2 xbins!=0; A new histogram is created (you should specify newname).; The parameter ngroup is the number of variable size bins in the created histogram.; The array xbins must contain ngroup+1 elements that represent the low-edges; of the bins.; If the original histogram has errors stored (via Sumw2), the resulting; histograms has new errors correctly",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1.html:100604,error,errors,100604,root/html534/TH1.html,https://root.cern,https://root.cern/root/html534/TH1.html,4,['error'],['errors']
Availability,"end(const TVirtualIndex*, Bool_t delaySort = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntryNumberFriend(const TTree* T); virtual Long64_tGetEntryNumberWithBestIndex(Int_t major, Int_t minor) const; virtual Long64_tGetEntryNumberWithIndex(Int_t major, Int_t minor) const; virtual const char*TObject::GetIconName() const; virtual Long64_t*GetIndex() const; virtual Long64_t*GetIndexValues() const; virtual TTreeFormula*GetMajorFormula(); virtual TTreeFormula*GetMajorFormulaParent(const TTree* T); virtual const char*GetMajorName() const; virtual TTreeFormula*GetMinorFormula(); virtual TTreeFormula*GetMinorFormulaParent(const TTree* T); virtual const char*GetMin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeIndex.html:1591,error,error,1591,root/html528/TTreeIndex.html,https://root.cern,https://root.cern/root/html528/TTreeIndex.html,1,['error'],['error']
Availability,"end(const TVirtualIndex*, Bool_t delaySort = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntryNumberFriend(const TTree* T); virtual Long64_tGetEntryNumberWithBestIndex(Int_t major, Int_t minor) const; virtual Long64_tGetEntryNumberWithIndex(Int_t major, Int_t minor) const; virtual const char*TObject::GetIconName() const; virtual TTreeFormula*GetMajorFormulaParent(const TTree* T); virtual const char*GetMajorName() const; virtual TTreeFormula*GetMinorFormulaParent(const TTree* T); virtual const char*GetMinorName() const; virtual Long64_tGetN() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; sta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TChainIndex.html:1571,error,error,1571,root/html526/TChainIndex.html,https://root.cern,https://root.cern/root/html526/TChainIndex.html,2,['error'],['error']
Availability,"end(const TVirtualIndex*, Bool_t delaySort = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntryNumberFriend(const TTree*); virtual Long64_tGetEntryNumberWithBestIndex(Int_t major, Int_t minor) const; virtual Long64_tGetEntryNumberWithIndex(Int_t major, Int_t minor) const; virtual const char*TObject::GetIconName() const; virtual const char*GetMajorName() const; virtual const char*GetMinorName() const; virtual Long64_tGetN() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualIndex.html:1594,error,error,1594,root/html528/TVirtualIndex.html,https://root.cern,https://root.cern/root/html528/TVirtualIndex.html,1,['error'],['error']
Availability,"end(const TVirtualIndex*, Bool_t delaySort = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tGetEntryNumberFriend(const TTree* parent); virtual Long64_tGetEntryNumberWithBestIndex(Int_t major, Int_t minor) const; virtual Long64_tGetEntryNumberWithIndex(Int_t major, Int_t minor) const; virtual const char*TObject::GetIconName() const; virtual Long64_t*GetIndex() const; virtual Long64_t*GetIndexValues() const; virtual TTreeFormula*GetMajorFormula(); virtual TTreeFormula*GetMajorFormulaParent(const TTree* parent); virtual const char*GetMajorName() const; virtual TTreeFormula*GetMinorFormula(); virtual TTreeFormula*GetMinorFormulaParent(const TTree* parent); virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTreeIndex.html:1591,error,error,1591,root/html530/TTreeIndex.html,https://root.cern,https://root.cern/root/html530/TTreeIndex.html,3,['error'],['error']
Availability,"end(const TVirtualIndex*, Bool_t delaySort = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tGetEntryNumberFriend(const TTree* parent); virtual Long64_tGetEntryNumberWithBestIndex(Int_t major, Int_t minor) const; virtual Long64_tGetEntryNumberWithIndex(Int_t major, Int_t minor) const; virtual const char*TObject::GetIconName() const; virtual TTreeFormula*GetMajorFormulaParent(const TTree* parent); virtual const char*GetMajorName() const; virtual TTreeFormula*GetMinorFormulaParent(const TTree* parent); virtual const char*GetMinorName() const; virtual Long64_tGetN() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TChainIndex.html:1571,error,error,1571,root/html530/TChainIndex.html,https://root.cern,https://root.cern/root/html530/TChainIndex.html,3,['error'],['error']
Availability,"end(const TVirtualIndex*, Bool_t delaySort = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tGetEntryNumberFriend(const TTree* parent); virtual Long64_tGetEntryNumberWithBestIndex(Long64_t major, Long64_t minor) const; virtual Long64_tGetEntryNumberWithIndex(Long64_t major, Long64_t minor) const; virtual const char*TObject::GetIconName() const; virtual TTreeFormula*GetMajorFormulaParent(const TTree* parent); virtual const char*GetMajorName() const; virtual TTreeFormula*GetMinorFormulaParent(const TTree* parent); virtual const char*GetMinorName() const; virtual Long64_tGetN() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TChainIndex.html:1571,error,error,1571,root/html534/TChainIndex.html,https://root.cern,https://root.cern/root/html534/TChainIndex.html,6,['error'],['error']
Availability,"end(const TVirtualIndex*, Bool_t delaySort = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tGetEntryNumberFriend(const TTree*); virtual Long64_tGetEntryNumberWithBestIndex(Int_t major, Int_t minor) const; virtual Long64_tGetEntryNumberWithIndex(Int_t major, Int_t minor) const; virtual const char*TObject::GetIconName() const; virtual const char*GetMajorName() const; virtual const char*GetMinorName() const; virtual Long64_tGetN() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TVirtualIndex.html:1594,error,error,1594,root/html530/TVirtualIndex.html,https://root.cern,https://root.cern/root/html530/TVirtualIndex.html,3,['error'],['error']
Availability,"end(const TVirtualIndex*, Bool_t delaySort = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tGetEntryNumberFriend(const TTree*); virtual Long64_tGetEntryNumberWithBestIndex(Long64_t major, Long64_t minor) const; virtual Long64_tGetEntryNumberWithIndex(Long64_t major, Long64_t minor) const; virtual const char*TObject::GetIconName() const; virtual const char*GetMajorName() const; virtual const char*GetMinorName() const; virtual Long64_tGetN() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualIndex.html:1594,error,error,1594,root/html534/TVirtualIndex.html,https://root.cern,https://root.cern/root/html534/TVirtualIndex.html,6,['error'],['error']
Availability,"endPad(Option_t* option = """"); TStringasString(); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual RooSharedProperties*clone(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voiddecreaseRefCount(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; voidincreaseRefCount(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooSharedProperties.html:1718,error,error,1718,root/html534/RooSharedProperties.html,https://root.cern,https://root.cern/root/html534/RooSharedProperties.html,6,['error'],['error']
Availability,"endPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Int_tConvertGeant3ToPdg(Int_t Geant3Number) const; virtual Int_tConvertIsajetToPdg(Int_t isaNumber) const; virtual Int_tConvertPdgToGeant3(Int_t pdgNumber) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TParticlePDG*GetParticle(Int_t pdgCode) const; TParticlePDG*GetParticle(const char* name) const; TParticleClassPDG*GetParticleClass(const char* name); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::Handl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDatabasePDG.html:2471,error,error,2471,root/html534/TDatabasePDG.html,https://root.cern,https://root.cern/root/html534/TDatabasePDG.html,6,['error'],['error']
Availability,"endPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidComputeFCN(Int_t& npar, Double_t*, Double_t& f, Double_t* par, Int_t flag); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tFit(TF1* f1, Option_t* option = """"); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); static TVirtualFitter*GetFitter(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBinomialEfficiencyFitter.html:4278,error,error,4278,root/html526/TBinomialEfficiencyFitter.html,https://root.cern,https://root.cern/root/html526/TBinomialEfficiencyFitter.html,7,['error'],['error']
Availability,"end]; Constructor & Destructor Documentation. ◆ TGeoChecker() [1/2]. TGeoChecker::TGeoChecker ; (; ). Default constructor. ; Definition at line 96 of file TGeoChecker.cxx. ◆ TGeoChecker() [2/2]. TGeoChecker::TGeoChecker ; (; TGeoManager * ; geom). Constructor for a given geometry. ; Definition at line 116 of file TGeoChecker.cxx. ◆ ~TGeoChecker(). TGeoChecker::~TGeoChecker ; (; ). override . Destructor. ; Definition at line 138 of file TGeoChecker.cxx. Member Function Documentation. ◆ CheckBoundaryErrors(). void TGeoChecker::CheckBoundaryErrors ; (; Int_t ; ntracks = 1000000, . Double_t ; radius = -1. . ). virtual . Check pushes and pulls needed to cross the next boundary with respect to the position given by FindNextBoundary. ; If radius is not mentioned the full bounding box will be sampled. ; Definition at line 257 of file TGeoChecker.cxx. ◆ CheckBoundaryReference(). void TGeoChecker::CheckBoundaryReference ; (; Int_t ; icheck = -1). virtual . Check the boundary errors reference file created by CheckBoundaryErrors method. ; The shape for which the crossing failed is drawn with the starting point in red and the extrapolated point to boundary (+/- failing push/pull) in yellow. ; Definition at line 406 of file TGeoChecker.cxx. ◆ CheckGeometry(). void TGeoChecker::CheckGeometry ; (; Int_t ; nrays, . Double_t ; startx, . Double_t ; starty, . Double_t ; startz . ); const. Shoot nrays with random directions from starting point (startx, starty, startz) in the reference frame of this volume. ; Track each ray until exiting geometry, then shoot backwards from exiting point and compare boundary crossing points. ; Definition at line 809 of file TGeoChecker.cxx. ◆ CheckGeometryFull(). void TGeoChecker::CheckGeometryFull ; (; Bool_t ; checkoverlaps = kTRUE, . Bool_t ; checkcrossings = kTRUE, . Int_t ; ntracks = 10000, . const Double_t * ; vertex = nullptr . ). Geometry checking. ; Optional overlap checkings (by sampling and by mesh). Optional boundary crossing check + timing pe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoChecker.html:18348,error,errors,18348,doc/master/classTGeoChecker.html,https://root.cern,https://root.cern/doc/master/classTGeoChecker.html,1,['error'],['errors']
Availability,"endent of; ; ) quantities . For each component ; make a mutlidimensional fit,; using ; as the variables, thus determing a set of; coefficents ; .; . To process data, using this parameterisation, do; ; Test wether the observation ; within the domain of; the parameterization, using the result from the Principal Component; Analysis.; ; Determine ; as before.; ; Detetmine ; as before.; ; Use the result of the fit to determind ; .; ; Transform back to ; from ; , using; the result from the Principal Component Analysis.; . Testing the parameterization; . The class also provides functionality for testing the, over the; training sample, found parameterization; (TMultiDimFit::Fit). This is done by passing; the class a test sample of tuples of the form ; , where ; are the independent; variables, the known, dependent quantity, and is; the square error in ; (TMultiDimFit::AddTestRow).; ; The parameterization is then evaluated at every ; in the; test sample, and; . is evaluated. The relative error over the test sample; . should not be to low or high compared to from the training; sample. Also, multiple correlation coefficient from both samples should; be fairly close, otherwise one of the samples is not representive of; the problem. A large difference in the reduced over the two; samples indicate an over fit, and the maximum number of terms in the; parameterisation should be reduced.; ; It's possible to use Minuit; [4] to further improve the fit, using the test sample.; . Christian Holm; November 2000, NBI; . Bibliography; 1. Philip R. Bevington and D. Keith Robinson.; Data Reduction and Error Analysis for the Physical Sciences.; McGraw-Hill, 2 edition, 1992.; 2. René Brun et al.; Mudifi.; Long writeup DD/75-23, CERN, 1980.; 3. Gene H. Golub and Charles F. van Loan.; Matrix Computations.; John Hopkins Univeristy Press, Baltimore, 3 edition, 1996.; 4. F. James.; Minuit.; Long writeup D506, CERN, 1998.; 5. H. Wind.; Function parameterization.; In Proceedings of the 1972 CERN Computi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMultiDimFit.html:12305,error,error,12305,root/html534/TMultiDimFit.html,https://root.cern,https://root.cern/root/html534/TMultiDimFit.html,6,['error'],['error']
Availability,"ender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(). Data Members; public:. enum { kRead; kWrite; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. intfFileNumFile descriptor; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; intfMaskEvent interest mask, either bit 1 (read), 2 (write) or both can be set; intfReadyMaskReadiness mask, either bit 1 (read), 2 (write) or both can be set; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFileHandler(int fd, int mask); Create a file descriptor event handler. If mask=kRead then we; want to monitor the file for read readiness, if mask=kWrite; then we monitor the file for write readiness, if mask=kRead|kWrite; then we monitor both read and write readiness. Bool_t Notify(); Notify when event occured on descriptor associated with this handler. Bool_t ReadNotify(); Notify when something can be read from the descriptor associated with; this handler. Bool_t WriteNotify(); Notify when something can be written to the descriptor associated with; this handler. Bool_t HasReadInterest(); True if handler is interested in read events. Bool_t HasWriteInterest(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFileHandler.html:9264,mask,mask,9264,root/html528/TFileHandler.html,https://root.cern,https://root.cern/root/html528/TFileHandler.html,12,['mask'],['mask']
Availability,"endif; 19676 pthread_setspecific(sTlsKey, &tls);; 19677 ; 19678 ok = (0 == pthread_mutex_init(&ctx->thread_mutex, &pthread_mutex_attr));; 19679#if !defined(ALTERNATIVE_QUEUE); 19680 ok &= (0 == pthread_cond_init(&ctx->sq_empty, NULL));; 19681 ok &= (0 == pthread_cond_init(&ctx->sq_full, NULL));; 19682 ctx->sq_blocked = 0;; 19683#endif; 19684 ok &= (0 == pthread_mutex_init(&ctx->nonce_mutex, &pthread_mutex_attr));; 19685#if defined(USE_LUA); 19686 ok &= (0 == pthread_mutex_init(&ctx->lua_bg_mutex, &pthread_mutex_attr));; 19687#endif; 19688 if (!ok) {; 19689 const char *err_msg =; 19690 ""Cannot initialize thread synchronization objects"";; 19691 /* Fatal error - abort start. However, this situation should never; 19692 * occur in practice. */; 19693 ; 19694 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 19695 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19696 mg_snprintf(NULL,; 19697 NULL, /* No truncation check for error buffers */; 19698 error->text,; 19699 error->text_buffer_size,; 19700 ""%s"",; 19701 err_msg);; 19702 }; 19703 ; 19704 mg_free(ctx);; 19705 pthread_setspecific(sTlsKey, NULL);; 19706 return NULL;; 19707 }; 19708 ; 19709 if ((init != NULL) && (init->callbacks != NULL)) {; 19710 /* Set all callbacks except exit_context. */; 19711 ctx->callbacks = *init->callbacks;; 19712 exit_callback = init->callbacks->exit_context;; 19713 /* The exit callback is activated once the context is successfully; 19714 * created. It should not be called, if an incomplete context object; 19715 * is deleted during a failed initialization. */; 19716 ctx->callbacks.exit_context = 0;; 19717 }; 19718 ctx->user_data = ((init != NULL) ? (init->user_data) : (NULL));; 19719 ctx->dd.handlers = NULL;; 19720 ctx->dd.next = NULL;; 19721 ; 19722#if defined(USE_LUA); 19723 lua_ctx_init(ctx);; 19724#endif; 19725 ; 19726 /* Store options */; 19727 while (options && (name = *options++) != NULL) {; 19728 if ((idx = get_option_index(name)) == -1) {; 19729 mg_cry_ctx_internal(ctx, ""Invalid opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:587472,error,error,587472,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,5,['error'],['error']
Availability,"endif; 19677 pthread_setspecific(sTlsKey, &tls);; 19678 ; 19679 ok = (0 == pthread_mutex_init(&ctx->thread_mutex, &pthread_mutex_attr));; 19680#if !defined(ALTERNATIVE_QUEUE); 19681 ok &= (0 == pthread_cond_init(&ctx->sq_empty, NULL));; 19682 ok &= (0 == pthread_cond_init(&ctx->sq_full, NULL));; 19683 ctx->sq_blocked = 0;; 19684#endif; 19685 ok &= (0 == pthread_mutex_init(&ctx->nonce_mutex, &pthread_mutex_attr));; 19686#if defined(USE_LUA); 19687 ok &= (0 == pthread_mutex_init(&ctx->lua_bg_mutex, &pthread_mutex_attr));; 19688#endif; 19689 if (!ok) {; 19690 const char *err_msg =; 19691 ""Cannot initialize thread synchronization objects"";; 19692 /* Fatal error - abort start. However, this situation should never; 19693 * occur in practice. */; 19694 ; 19695 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 19696 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19697 mg_snprintf(NULL,; 19698 NULL, /* No truncation check for error buffers */; 19699 error->text,; 19700 error->text_buffer_size,; 19701 ""%s"",; 19702 err_msg);; 19703 }; 19704 ; 19705 mg_free(ctx);; 19706 pthread_setspecific(sTlsKey, NULL);; 19707 return NULL;; 19708 }; 19709 ; 19710 if ((init != NULL) && (init->callbacks != NULL)) {; 19711 /* Set all callbacks except exit_context. */; 19712 ctx->callbacks = *init->callbacks;; 19713 exit_callback = init->callbacks->exit_context;; 19714 /* The exit callback is activated once the context is successfully; 19715 * created. It should not be called, if an incomplete context object; 19716 * is deleted during a failed initialization. */; 19717 ctx->callbacks.exit_context = 0;; 19718 }; 19719 ctx->user_data = ((init != NULL) ? (init->user_data) : (NULL));; 19720 ctx->dd.handlers = NULL;; 19721 ctx->dd.next = NULL;; 19722 ; 19723#if defined(USE_LUA); 19724 lua_ctx_init(ctx);; 19725#endif; 19726 ; 19727 /* Store options */; 19728 while (options && (name = *options++) != NULL) {; 19729 if ((idx = get_option_index(name)) == -1) {; 19730 mg_cry_ctx_internal(ctx, ""Invalid opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:587505,error,error,587505,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,5,['error'],['error']
Availability,endif; 751}; 752 ; 753////////////////////////////////////////////////////////////////////////////////; 754/// Returns the natural logarithm of `x`.; 755 ; 756inline Double_t TMath::Log(Double_t x); 757 { return log(x); }; 758 ; 759////////////////////////////////////////////////////////////////////////////////; 760/// Returns the common (base-10) logarithm of `x`.; 761 ; 762inline Double_t TMath::Log10(Double_t x); 763 { return log10(x); }; 764 ; 765////////////////////////////////////////////////////////////////////////////////; 766/// Check if it is finite with a mask in order to be consistent in presence of; 767/// fast math.; 768/// Inspired from the CMSSW FWCore/Utilities package; 769 ; 770inline Int_t TMath::Finite(Double_t x); 771#if defined(R__FAST_MATH); 772 ; 773{; 774 const unsigned long long mask = 0x7FF0000000000000LL;; 775 union { unsigned long long l; double d;} v;; 776 v.d =x;; 777 return (v.l&mask)!=mask;; 778}; 779#else; 780# if defined(R__HPUX11); 781 { return isfinite(x); }; 782# elif defined(R__MACOSX); 783# ifdef isfinite; 784 // from math.h; 785 { return isfinite(x); }; 786# else; 787 // from cmath; 788 { return std::isfinite(x); }; 789# endif; 790# else; 791 { return finite(x); }; 792# endif; 793#endif; 794 ; 795////////////////////////////////////////////////////////////////////////////////; 796/// Check if it is finite with a mask in order to be consistent in presence of; 797/// fast math.; 798/// Inspired from the CMSSW FWCore/Utilities package; 799 ; 800inline Int_t TMath::Finite(Float_t x); 801#if defined(R__FAST_MATH); 802 ; 803{; 804 const unsigned int mask = 0x7f800000;; 805 union { unsigned int l; float d;} v;; 806 v.d =x;; 807 return (v.l&mask)!=mask;; 808}; 809#else; 810{ return std::isfinite(x); }; 811#endif; 812 ; 813// This namespace provides all the routines necessary for checking if a number; 814// is a NaN also in presence of optimisations affecting the behaviour of the; 815// floating point calculations.; 816// Inspired from,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8h_source.html:29087,mask,mask,29087,doc/master/TMath_8h_source.html,https://root.cern,https://root.cern/doc/master/TMath_8h_source.html,2,['mask'],['mask']
Availability,"ending events are removed.; // This may effectively create a false minimum in problem areas. This is clearly; // illustrated in the second plot; ; m0.setError(0.1);; argus.fitTo(*data, PrintEvalErrors(0), EvalErrorWall(false));; ; // P l o t l i k e l i h o o d a s f u n c t i o n o f m 0; // ------------------------------------------------------------------; ; // Construct likelihood function of model and data; std::unique_ptr<RooAbsReal> nll{argus.createNLL(*data)};; ; // Plot likelihood in m0 in range that includes problematic values; // In this configuration no messages are printed for likelihood evaluation errors,; // but if an likelihood value evaluates with error, the corresponding value; // on the curve will be set to the value given in EvalErrorValue().; ; RooPlot *frame2 = m0.frame(Range(5.288, 5.293), Title(""-log(L) scan vs m0, problematic regions masked""));; nll->plotOn(frame2, PrintEvalErrors(-1), ShiftToZero(), EvalErrorValue(nll->getVal() + 10), LineColor(kRed));; frame2->SetMaximum(15);; frame2->SetMinimum(0);; ; TCanvas *c = new TCanvas(""rf606_nllerrorhandling"", ""rf606_nllerrorhandling"", 1200, 400);; c->Divide(2);; c->cd(1);; gPad->SetLeftMargin(0.15);; frame1->GetYaxis()->SetTitleOffset(1.4);; frame1->Draw();; c->cd(2);; gPad->SetLeftMargin(0.15);; frame2->GetYaxis()->SetTitleOffset(1.4);; frame2->Draw();; }; c#define c(i)Definition RSha256.hxx:101; RooArgusBG.h; RooDataSet.h; RooPlot.h; RooRealVar.h; kRed@ kRedDefinition Rtypes.h:66; TAxis.h; TCanvas.h; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; gPad#define gPadDefinition TVirtualPad.h:308; RooArgusBGRooArgusBG is a RooAbsPdf implementation describing the ARGUS background shape.Definition RooArgusBG.h:22; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::framestatic RooPlot * frame(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf606__nllerrorhandling_8C.html:3153,mask,masked,3153,doc/master/rf606__nllerrorhandling_8C.html,https://root.cern,https://root.cern/doc/master/rf606__nllerrorhandling_8C.html,1,['mask'],['masked']
Availability,"ene() const; virtual Bool_tTVirtualViewer3D::CanLoopOnPrimitives() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidClose(); virtual voidCloseComposite(); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTVirtualViewer3D::DrawViewer(); virtual voidTObject::Dump() constMENU ; virtual voidEndScene(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; Int_tExecCommand(Int_t px, Int_t py, char command); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidGetPosition(Float_t& longitude, Float_t& latitude, Float_t& psi); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; voidIconify(); virtual voidTObject::Info(const char* method, cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TViewerX3D.html:2103,error,error,2103,root/html528/TViewerX3D.html,https://root.cern,https://root.cern/root/html528/TViewerX3D.html,10,['error'],['error']
Availability,"eneral draw options and options concerning the x-Errors.; 430In case there are less than NErrorDimensions + 1 blocks in the option string; 431the first block is also used for the first error dimension which is reserved for; 432statistical errors. The remaining blocks are assigned to the remaining dimensions.; 433 ; 434In addition to the draw options of options of `TGraphAsymmErrors` the following are possible:; 435 ; 436| Option | Block | Description |; 437|----------|----------------|-------------------------------------------------------------------|; 438| ""X0"" | First one only | Do not draw errors for points with x = 0 |; 439| ""Y0"" | First one only | Do not draw errors for points with y = 0 |; 440| ""s=%f"" | Any | Scales the x-Errors with %f similar to `gStyle->SetErrorX(dx)` but does not affect them directly (Useful when used in addition with box errors to make the box only half as wide as the x-Errors e.g. s=0.5) |; 441| ""S"" | First one only | Use individual TAttFill and TAttLine attributes for the different error dimensions instead of the global ones. |; 442 ; 443 ; 444Per default the Fill and Line Styles of the Graph are being used for all error; 445dimensions. To use the specific ones add the draw option ""S"" to the first block.; 446 ; 447Begin_Macro(source); 448{; 449 auto c47 = new TCanvas(""c47"",""c47"",200,10,600,400);; 450 double ax[] = {0, 1, 2, 3, 4};; 451 double ay[] = {0, 2, 4, 1, 3};; 452 double aexl[] = {0.3, 0.3, 0.3, 0.3, 0.3};; 453 double aexh[] = {0.3, 0.3, 0.3, 0.3, 0.3};; 454 double* aeylstat = new double[5] {1, 0.5, 1, 0.5, 1};; 455 double* aeyhstat = new double[5] {0.5, 1, 0.5, 1, 0.5};; 456 double* aeylsys = new double[5] {0.5, 0.4, 0.8, 0.3, 1.2};; 457 double* aeyhsys = new double[5] {0.6, 0.7, 0.6, 0.4, 0.8};; 458 ; 459 TGraphMultiErrors* gme = new TGraphMultiErrors(""gme"", ""TGraphMultiErrors Example"", 5, ax, ay, aexl, aexh, aeylstat, aeyhstat);; 460 gme->AddYError(5, aeylsys, aeyhsys);; 461 gme->SetMarkerStyle(20);; 462 gme->SetLineColor(kRe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:17644,error,error,17644,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['error'],['error']
Availability,"enericError"",""Interface not available yet."");; 7462#endif; 7463#endif; 7464}; 7465 ; 7466////////////////////////////////////////////////////////////////////////////////; 7467/// This routines used to return the address of the internal wrapper; 7468/// function (of the interpreter) that was used to call *all* the; 7469/// interpreted functions that were bytecode compiled (no longer; 7470/// interpreted line by line). In Cling, there is no such; 7471/// wrapper function.; 7472/// In practice this routines was use to decipher whether the; 7473/// pointer returns by InterfaceMethod could be used to uniquely; 7474/// represent the function. In Cling if the function is in a; 7475/// useable state (its compiled version is available), this is; 7476/// always the case.; 7477/// See TClass::GetMethod.; 7478 ; 7479Long_t TCling::GetExecByteCode() const; 7480{; 7481 return 0;; 7482}; 7483 ; 7484////////////////////////////////////////////////////////////////////////////////; 7485/// Interface to cling function; 7486 ; 7487int TCling::GetSecurityError() const; 7488{; 7489#if defined(R__MUST_REVISIT); 7490#if R__MUST_REVISIT(6,2); 7491 Warning(""GetSecurityError"", ""Interface not available yet."");; 7492#endif; 7493#endif; 7494 return 0;; 7495}; 7496 ; 7497////////////////////////////////////////////////////////////////////////////////; 7498/// Load a source file or library called path into the interpreter.; 7499 ; 7500int TCling::LoadFile(const char* path) const; 7501{; 7502 // Modifying the interpreter state needs locking.; 7503 R__LOCKGUARD(gInterpreterMutex);; 7504 cling::Interpreter::CompilationResult compRes;; 7505 HandleInterpreterException(GetMetaProcessorImpl(), TString::Format("".L %s"", path), compRes, /*cling::Value*/nullptr);; 7506 return compRes == cling::Interpreter::kFailure;; 7507}; 7508 ; 7509////////////////////////////////////////////////////////////////////////////////; 7510/// Load the declarations from text into the interpreter.; 7511/// Note that this cannot be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:292345,avail,available,292345,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['avail'],['available']
Availability,"ength of fStreamerInfo is %d"", fStreamerInfo->GetSize());; 5471 Int_t i = fStreamerInfo->LowerBound();; 5472 for (Int_t v = 0; v < fStreamerInfo->GetSize(); ++v, ++i) {; 5473 Error(""Destructor"", ""fStreamerInfo->At(%d): %p"", i, fStreamerInfo->At(i));; 5474 if (fStreamerInfo->At(i) != nullptr) {; 5475 Error(""Destructor"", ""Doing Dump() ..."");; 5476 ((TVirtualStreamerInfo*)fStreamerInfo->At(i))->Dump();; 5477 }; 5478 }; 5479 }; 5480 } else {; 5481 // The loaded class version is not the same as the version of the code; 5482 // which was used to allocate this object. The best we can do is use; 5483 // the TVirtualStreamerInfo to try to free up some of the allocated memory.; 5484 TVirtualStreamerInfo* si = (TVirtualStreamerInfo*) fStreamerInfo->At(objVer);; 5485 if (si) {; 5486 si->Destructor(p, dtorOnly);; 5487 } else {; 5488 Error(""Destructor"", ""No streamer info available for class '%s' version %d, cannot destruct object at addr: %p"", GetName(), objVer, p);; 5489 Error(""Destructor"", ""length of fStreamerInfo is %d"", fStreamerInfo->GetSize());; 5490 Int_t i = fStreamerInfo->LowerBound();; 5491 for (Int_t v = 0; v < fStreamerInfo->GetSize(); ++v, ++i) {; 5492 Error(""Destructor2"", ""fStreamerInfo->At(%d): %p"", i, fStreamerInfo->At(i));; 5493 if (fStreamerInfo->At(i) != nullptr) {; 5494 // Do some debugging output.; 5495 Error(""Destructor2"", ""Doing Dump() ..."");; 5496 ((TVirtualStreamerInfo*)fStreamerInfo->At(i))->Dump();; 5497 }; 5498 }; 5499 }; 5500 }; 5501 ; 5502 if (inRepo && p) {; 5503 UnregisterAddressInRepository(""TClass::Destructor"",p,this);; 5504 }; 5505 } else {; 5506 Error(""Destructor"", ""This cannot happen! (class %s)"", GetName());; 5507 }; 5508}; 5509 ; 5510////////////////////////////////////////////////////////////////////////////////; 5511/// Explicitly call destructor for object.; 5512 ; 5513void TClass::Destructor(TClass::ObjectPtr obj, Bool_t dtorOnly); 5514{; 5515 // Do nothing if passed a null pointer.; 5516 if (obj.GetPtr() == nullptr); 5517 return;; 5518 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:210041,avail,available,210041,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['avail'],['available']
Availability,"ength of fStreamerInfo is %d"", fStreamerInfo->GetSize());; 5538 Int_t i = fStreamerInfo->LowerBound();; 5539 for (Int_t v = 0; v < fStreamerInfo->GetSize(); ++v, ++i) {; 5540 Error(""Destructor"", ""fStreamerInfo->At(%d): %p"", i, fStreamerInfo->At(i));; 5541 if (fStreamerInfo->At(i) != nullptr) {; 5542 Error(""Destructor"", ""Doing Dump() ..."");; 5543 ((TVirtualStreamerInfo*)fStreamerInfo->At(i))->Dump();; 5544 }; 5545 }; 5546 }; 5547 } else {; 5548 // The loaded class version is not the same as the version of the code; 5549 // which was used to allocate this object. The best we can do is use; 5550 // the TVirtualStreamerInfo to try to free up some of the allocated memory.; 5551 TVirtualStreamerInfo* si = (TVirtualStreamerInfo*) fStreamerInfo->At(objVer);; 5552 if (si) {; 5553 si->Destructor(p, dtorOnly);; 5554 } else {; 5555 Error(""Destructor"", ""No streamer info available for class '%s' version %d, cannot destruct object at addr: %p"", GetName(), objVer, p);; 5556 Error(""Destructor"", ""length of fStreamerInfo is %d"", fStreamerInfo->GetSize());; 5557 Int_t i = fStreamerInfo->LowerBound();; 5558 for (Int_t v = 0; v < fStreamerInfo->GetSize(); ++v, ++i) {; 5559 Error(""Destructor2"", ""fStreamerInfo->At(%d): %p"", i, fStreamerInfo->At(i));; 5560 if (fStreamerInfo->At(i) != nullptr) {; 5561 // Do some debugging output.; 5562 Error(""Destructor2"", ""Doing Dump() ..."");; 5563 ((TVirtualStreamerInfo*)fStreamerInfo->At(i))->Dump();; 5564 }; 5565 }; 5566 }; 5567 }; 5568 ; 5569 if (inRepo && p) {; 5570 UnregisterAddressInRepository(""TClass::Destructor"",p,this);; 5571 }; 5572 } else {; 5573 Error(""Destructor"", ""This cannot happen! (class %s)"", GetName());; 5574 }; 5575}; 5576 ; 5577////////////////////////////////////////////////////////////////////////////////; 5578/// Explicitly call destructor for object.; 5579 ; 5580void TClass::Destructor(TClass::ObjectPtr obj, Bool_t dtorOnly); 5581{; 5582 // Do nothing if passed a null pointer.; 5583 if (obj.GetPtr() == nullptr); 5584 return;; 5585 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:212792,avail,available,212792,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['avail'],['available']
Availability,"enient classes for the users to wrap their own functions in this required interface for minimization. These are the ROOT::Math::Functor class and the ROOT::Math::GradFunctor class for wrapping functions providing both evaluation and gradient. Some methods, like Fumili, Fumili2 and GSLMultiFit are specialized method for least-square and also likelihood minimizations. They require then that the given function implements in addition the ROOT::Math::FitMethodFunction interface.; The interface for setting the initial values for the function variables (which are the parameters in of the model function in case of solving for fitting) and specifying their limits.; The interface to set and retrieve basic minimization parameters. These parameter are controlled by the class ROOT::Math::MinimizerOptions. When no parameters are specified the default ones are used. Specific Minimizer options can also be passed via the MinimizerOptions class. For the list of the available option parameter one must look at the documentation of the corresponding derived class.; The interface to retrieve the result of minimization ( minimum X values, function value, gradient, error on the minimum, etc...); The interface to perform a Scan, Hesse or a Contour plot (for the minimizers that support this, i.e. Minuit and Minuit2). An example on how to use this interface is the tutorial NumericalMinimization.C in the tutorials/fit directory. ; Definition at line 119 of file Minimizer.h. Public Member Functions;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html:3489,avail,available,3489,doc/master/classROOT_1_1Math_1_1Minimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html,1,['avail'],['available']
Availability,"enl' specifies an entry- or event-list to be used as event selection. The return value is -1 in case of error and TSelector::GetStatus() in in case of success. ; Definition at line 6182 of file TProof.cxx. ◆ DrawSelect() [2/2]. Long64_t TProof::DrawSelect ; (; TDSet * ; dset, . const char * ; varexp, . const char * ; selection = """", . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; first = 0 . ). virtual . Execute the specified drawing action on a data set (TDSet). ; Event- or Entry-lists should be set in the data set object using TDSet::SetEntryList. Returns -1 in case of error or number of selected events otherwise. ; Reimplemented in TProofLite.; Definition at line 6146 of file TProof.cxx. ◆ Echo() [1/2]. Int_t TProof::Echo ; (; const char * ; str). virtual . Sends a string to master and workers and expect them to echo it back to the client via a message. ; It is a special case of the generic Echo() that works with TObjects. Returns -1 on error, the number of workers that received the message on success. ; Definition at line 7042 of file TProof.cxx. ◆ Echo() [2/2]. Int_t TProof::Echo ; (; const TObject * ; obj). virtual . Sends an object to master and workers and expect them to send back a message with the output of its TObject::Print(). ; Returns -1 on error, the number of workers that received the objects on success. ; Definition at line 7028 of file TProof.cxx. ◆ EnablePackage() [1/3]. Int_t TProof::EnablePackage ; (; const char * ; package, . Bool_t ; notOnClient = kFALSE, . TList * ; workers = 0 . ). Enable specified package. ; Executes the PROOF-INF/BUILD.sh script if it exists followed by the PROOF-INF/SETUP.C script. In case notOnClient = true, don't enable the package on the client. The default is to enable packages also on the client. If specified, enables packages only on the specified workers. Returns 0 in case of success and -1 in case of error. Provided for backward compatibility. ; Definition at line 8175 of file TProof.cxx. ◆ Ena",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:85323,error,error,85323,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['error'],['error']
Availability,"ension]. ;  ;  TGraphMultiErrors (Int_t ne, const TVectorF &tvX, const TVectorF &tvY, const TVectorF &tvExL, const TVectorF &tvExH, const TVectorF *tvEyL, const TVectorF *tvEyH, Int_t m=kOnlyFirst);  Constructor with multiple vectors of floats in input and multiple y error dimension. ;  ;  TGraphMultiErrors (Int_t np, const Double_t *x, const Double_t *y, const Double_t *exL=nullptr, const Double_t *exH=nullptr, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and a single y-error. ;  ;  TGraphMultiErrors (Int_t np, const Float_t *x, const Float_t *y, const Float_t *exL=nullptr, const Float_t *exH=nullptr, const Float_t *eyL=nullptr, const Float_t *eyH=nullptr, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and a single y-error. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Double_t *x, const Double_t *y, const Double_t *exL, const Double_t *exH, std::vector< std::vector< Double_t > > eyL, std::vector< std::vector< Double_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Double_t *x, const Double_t *y, const Double_t *exL, const Double_t *exH, std::vector< TArrayD > eyL, std::vector< TArrayD > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, const Float_t *exH, std::vector< std::vector< Float_t > > eyL, std::vector< std::vector< Float_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, const Float_t *exH, std::vector< TArrayF > eyL, std::vector< TArrayF > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors.html:8456,error,errors,8456,doc/master/classTGraphMultiErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html,1,['error'],['errors']
Availability,"ensions of points; x - points, at which to compute the intervals, for ndim > 1 should be in order: (x0,y0, x1, y1, ... xn, yn); ci - computed intervals are returned in this array; cl - confidence level, default=0.95. NOTE, that the intervals are approximate for nonlinear(in parameters) models ; Reimplemented from TVirtualFitter.; Definition at line 119 of file TFitter.cxx. ◆ GetConfidenceIntervals() [2/2]. void TFitter::GetConfidenceIntervals ; (; TObject * ; obj, . Double_t ; cl = 0.95 . ). overridevirtual . Computes confidence intervals at level cl. ; Default is 0.95; The TObject parameter can be a TGraphErrors, a TGraph2DErrors or a TH1,2,3. For Graphs, confidence intervals are computed for each point, the value of the graph at that point is set to the function value at that point, and the graph y-errors (or z-errors) are set to the value of the confidence interval at that point. For Histograms, confidence intervals are computed for each bin center The bin content of this bin is then set to the function value at the bin center, and the bin error is set to the confidence interval value. NOTE: confidence intervals are approximate for nonlinear models!; Allowed combinations:. Fitted object Passed object; TGraph TGraphErrors, TH1; TGraphErrors, AsymmErrors TGraphErrors, TH1; TH1 TGraphErrors, TH1; TGraph2D TGraph2DErrors, TH2; TGraph2DErrors TGraph2DErrors, TH2; TH2 TGraph2DErrors, TH2; TH3 TH3 . Reimplemented from TVirtualFitter.; Definition at line 229 of file TFitter.cxx. ◆ GetCovarianceMatrix(). Double_t * TFitter::GetCovarianceMatrix ; (; ); const. overridevirtual . return a pointer to the covariance matrix ; Implements TVirtualFitter.; Definition at line 379 of file TFitter.cxx. ◆ GetCovarianceMatrixElement(). Double_t TFitter::GetCovarianceMatrixElement ; (; Int_t ; i, . Int_t ; j . ); const. overridevirtual . return element i,j from the covariance matrix ; Implements TVirtualFitter.; Definition at line 391 of file TFitter.cxx. ◆ GetErrors(). Int_t TFitter::Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFitter.html:22030,error,error,22030,doc/master/classTFitter.html,https://root.cern,https://root.cern/doc/master/classTFitter.html,1,['error'],['error']
Availability,"ent (Long64_t bin, Int_t *idx=nullptr) const override;  Get the content of bin, and set its index if idx is != 0. ;  ; Double_t GetBinError2 (Long64_t linidx) const override;  ; Long64_t GetNbins () const override;  ; THn * Projection (Int_t ndim, const Int_t *dim, Option_t *option="""") const;  ; TH3D * Projection (Int_t xDim, Int_t yDim, Int_t zDim, Option_t *option="""") const;  Forwards to THnBase::Projection(). ;  ; TH1D * Projection (Int_t xDim, Option_t *option="""") const;  Forwards to THnBase::Projection(). ;  ; TH2D * Projection (Int_t yDim, Int_t xDim, Option_t *option="""") const;  Forwards to THnBase::Projection(). ;  ; THn * Rebin (const Int_t *group) const;  ; THn * Rebin (Int_t group) const;  ; void Reset (Option_t *option="""") override;  Reset the contents of a THn. ;  ; void SetBinContent (const Int_t *idx, Double_t v);  Forwards to THnBase::SetBinContent(). ;  ; void SetBinContent (Long64_t bin, Double_t v) override;  ; void SetBinError2 (Long64_t bin, Double_t e2) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Sumw2 () override;  Enable calculation of errors. ;  ;  Public Member Functions inherited from THnBase;  ~THnBase () override;  Destruct a THnBase. ;  ; void Add (const TH1 *hist, Double_t c=1.);  Fill the THnBase with the bins of hist that have content or error != 0. ;  ; void Add (const THnBase *h, Double_t c=1.);  Add contents of h scaled by c to this histogram: this = this + c * h Note that if h has Sumw2 set, Sumw2 is automatically called for this if not already set. ;  ; void AddBinContent (const Int_t *x, Double_t v=1.);  ; void Browse (TBrowser *b) override;  Browse a THnSparse: create an entry (ROOT::THnSparseBrowsable) for each dimension. ;  ; void CalculateErrors (Bool_t calc=kTRUE);  Calculate errors (or not if ""calc"" == kFALSE) ;  ; Double_t ComputeIntegral ();  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnT.html:4214,error,errors,4214,doc/master/classTHnT.html,https://root.cern,https://root.cern/doc/master/classTHnT.html,1,['error'],['errors']
Availability,"ent ; (; Long64_t ; bin, . Double_t ; v . ). overridevirtual . Set content of bin with index ""bin"" to ""v"". ; Implements THnBase.; Definition at line 904 of file THnSparse.cxx. ◆ SetBinError2(). void THnSparse::SetBinError2 ; (; Long64_t ; bin, . Double_t ; e2 . ). overridevirtual . Set error of bin with index ""bin"" to ""e"", enable errors if needed. ; Implements THnBase.; Definition at line 914 of file THnSparse.cxx. ◆ SetFilledBins(). void THnSparse::SetFilledBins ; (; Long64_t ; nbins). inlineoverridevirtual . Reimplemented from THnBase.; Definition at line 94 of file THnSparse.h. ◆ Streamer(). void THnSparse::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from THnBase.; Reimplemented in THnSparseT< CONT >. ◆ StreamerNVirtual(). void THnSparse::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 169 of file THnSparse.h. ◆ Sumw2(). void THnSparse::Sumw2 ; (; ). overridevirtual . Enable calculation of errors. ; Implements THnBase.; Definition at line 948 of file THnSparse.cxx. Member Data Documentation. ◆ fBinContent. TObjArray THnSparse::fBinContent. private . Array of THnSparseArrayChunk. ; Definition at line 41 of file THnSparse.h. ◆ fBins. TExMap THnSparse::fBins. private . ! Filled bins ; Definition at line 42 of file THnSparse.h. ◆ fBinsContinued. TExMap THnSparse::fBinsContinued. private . ! Filled bins for non-unique hashes, containing pairs of (bin index 0, bin index 1) ; Definition at line 43 of file THnSparse.h. ◆ fChunkSize. Int_t THnSparse::fChunkSize. private . Number of entries for each chunk. ; Definition at line 39 of file THnSparse.h. ◆ fCompactCoord. THnSparseCompactBinCoord* THnSparse::fCompactCoord. private . ! Compact coordinate ; Definition at line 44 of file THnSparse.h. ◆ fFilledBins. Long64_t THnSparse::fFilledBins. private . Number of filled bins. ; Definition at line 40 of file THnSparse.h. Libraries for THnSparse:. [legend]; The documentation for",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparse.html:40363,error,errors,40363,doc/master/classTHnSparse.html,https://root.cern,https://root.cern/doc/master/classTHnSparse.html,1,['error'],['errors']
Availability,"ent boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; RooCategoryProxyRooSimultaneous::_indexCatIndex category; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HistFactory__HistFactorySimultaneous.html:43511,error,errors,43511,root/html602/RooStats__HistFactory__HistFactorySimultaneous.html,https://root.cern,https://root.cern/root/html602/RooStats__HistFactory__HistFactorySimultaneous.html,4,['error'],['errors']
Availability,"ent equal to zero AND error equal to zero,; 4231/// are excluded by default from the chi-square fit, but they are considered in the likelihood fit.; 4232/// since they affect the likelihood if the function value in these bins is not negligible.; 4233/// Note that if the histogram is having bins with zero content and non zero-errors they are considered as; 4234/// any other bins in the fit. Instead bins with zero error and non-zero content are by default excluded in the chi-squared fit.; 4235/// In general, one should not fit a histogram with non-empty bins and zero errors.; 4236///; 4237/// If the bin errors are not known, one should use the fit option ""W"", which gives a weight=1 for each bin (it is an unweighted least-square; 4238/// fit). When using option ""WW"" the empty bins will be also considered in the chi-square fit with an error of 1.; 4239/// Note that in this fitting case (option ""W"" or ""WW"") the resulting fitted parameter errors; 4240/// are corrected by the obtained chi2 value using this scaling expression:; 4241/// `errorp *= sqrt(chisquare/(ndf-1))` as it is done when fitting a TGraph with; 4242/// no point errors.; 4243///; 4244/// #### Excluding points; 4245///; 4246/// You can use TF1::RejectPoint inside your fitting function to exclude some points; 4247/// within a certain range from the fit. See the tutorial `fit/fitExclude.C`.; 4248///; 4249///; 4250/// #### Warning when using the option ""0""; 4251///; 4252/// When selecting the option ""0"", the fitted function is added to; 4253/// the list of functions of the histogram, but it is not drawn when the histogram is drawn.; 4254/// You can undo this behaviour resetting its corresponding bit in the TF1 object as following:; 4255///; 4256/// ~~~ {.cpp}; 4257/// h.Fit(""myFunction"", ""0""); // fit, store function but do not draw; 4258/// h.Draw(); // function is not drawn; 4259/// h.GetFunction(""myFunction"")->ResetBit(TF1::kNotDraw);; 4260/// h.Draw(); // function is visible again; 4261/// ~~~; 4262///; 4263",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:175424,error,errors,175424,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,3,['error'],"['errorp', 'errors']"
Availability,"ent for display of RHistStat, required to avoid sending histogram to the client. More...;  ; class  RDisplayItem;  Base class for painting data for JS. More...;  ; class  RDrawable;  Base class for drawable entities: objects that can be painted on a RPad. More...;  ; class  RDrawableDisplayItem;  Generic display item for RDrawable, just reference drawable itself. More...;  ; class  RDrawableExecRequest;  Request execution of method of referenced drawable, no reply. More...;  ; class  RDrawableMenuRequest;  Request menu items for the drawable object. More...;  ; class  RDrawableReply;  Base class for replies on RDrawableRequest. More...;  ; class  RDrawableRequest;  Base class for requests which can be submitted from the clients. More...;  ; class  REntry;  The REntry is a collection of values in an ntuple corresponding to a complete row in the data set. More...;  ; class  REnumField;  The field for an unscoped or scoped enum with dictionary. More...;  ; class  RError;  Captures diagnostics related to a ROOT runtime error. More...;  ; class  REve3DProjection;  ; class  REveAunt;  ; class  REveAuntAsList;  ; class  REveBox;  ; class  REveBoxProjected;  ; class  REveBoxSet;  ; class  REveCalo2D;  ; class  REveCalo3D;  ; class  REveCaloData;  ; class  REveCaloDataHist;  ; class  REveCaloDataSelector;  ; class  REveCaloDataSliceSelector;  ; class  REveCaloDataVec;  ; class  REveCaloLego;  ; class  REveCaloViz;  ; class  REveChunkManager;  ; class  REveChunkVector;  ; class  REveClient;  ; class  REveCluster;  REveCluster Reconstructed cluster (also used in VSD). More...;  ; class  REveCollectionCompound;  ; class  REveCompound;  ; class  REveCompoundProjected;  ; class  REveDataCollection;  ; class  REveDataColumn;  ; class  REveDataItem;  ; class  REveDataItemList;  ; class  REveDataProxyBuilderBase;  ; class  REveDataSimpleProxyBuilder;  ; class  REveDataSimpleProxyBuilderTemplate;  ; class  REveDataTable;  ; class  REveDigitSet;  ; class  REveElement;  ; class  REveEl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:5529,error,error,5529,doc/master/namespaceROOT_1_1Experimental.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html,2,['error'],['error']
Availability,"ent handler converts a key press to some line editor; action. Bool_t HandleCrossing(Event_t* event); Handle mouse crossing event. Bool_t HandleFocusChange(Event_t* event); Handle focus change event in text edit widget. void Search(Bool_t close); Invokes search dialog. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process context menu messages. void InsChar(char character); Insert a character in the text edit widget. void DelChar(); Delete a character from the text edit widget. void BreakLine(); Break a line. void ScrollCanvas(Int_t newTop, Int_t direction); Scroll the canvas to new_top in the kVertical or kHorizontal direction. void DrawRegion(Int_t x, Int_t y, UInt_t width, UInt_t height); Redraw the text edit widget. void PrevChar(); Go to the previous character. void NextChar(); Go to next character. void LineUp(); Make current position first line in window by scrolling up. void LineDown(); Move one line down. void ScreenUp(); Move one screen up. void ScreenDown(); Move one screen down. void Home(); Move to beginning of line. void End(); Move to end of line. const TGGC & GetCursor0GC(); Return selection graphics context for text cursor. const TGGC & GetCursor1GC(); Return default graphics context for text cursor. void SavePrimitive(ostream& out, Option_t* = """"); Save a text edit widget as a C++ statement(s) on output stream out. TGTextEdit(const TGTextEdit& ). TGTextEdit& operator=(const TGTextEdit& ). void Copy(TObject& ) const; { MayNotUse(""Copy(TObject &)""); }. EInsertMode GetInsertMode() const; { return fInsertMode; }. TGPopupMenu * GetMenu() const; { return fMenu; }. void EnableMenu(Bool_t on = kTRUE); { fEnableMenu = on; }. Bool_t IsMenuEnabled() const; { return fEnableMenu; }. TList * GetHistory() const; { return (TList *)fHistory; }. void EnableCursorWithoutFocus(Bool_t on = kTRUE); { fEnableCursorWithoutFocus = on; }. Bool_t IsCursorEnabledithoutFocus() const; { return fEnableCursorWithoutFocus; }. void SetFocus(); { RequestFocus(); }. TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTextEdit.html:30732,down,down,30732,root/html528/TGTextEdit.html,https://root.cern,https://root.cern/root/html528/TGTextEdit.html,10,['down'],['down']
Availability,"ent implemented in TF1::GradientPar for the minimization. This allows to use Automatic Differentiation when it is supported by the provided TF1 function. . ""EX0"" When fitting a TGraphErrors or TGraphAsymErrors do not consider errors in the X coordinates . ""ROB"" In case of linear fitting, compute the LTS regression coefficients (robust (resistant) regression), using the default fraction of good points ""ROB=0.x"" - compute the LTS regression coefficients, using 0.x as a fraction of good points . This function is used for fitting also the derived TGraph classes such as TGraphErrors or TGraphAsymmErrors. See the note below on how the errors are used when fitting a TGraphErrors or TGraphAsymmErrors.; The fitting of the TGraph, i.e simple data points without any error associated, is performed using the un-weighted least-square (chi-square) method. TGraphErrors fit:; In case of a TGraphErrors or TGraphAsymmErrors object, when x errors are present, the error along x, is projected along the y-direction by calculating the function at the points x-ex_low and x+ex_high, where ex_low and ex_high are the corresponding lower and upper error in x. The chi-square is then computed as the sum of the quantity below at each data point:. \[; \frac{(y-f(x))^{2}}{ey^{2}+(\frac{1}{2}(exl+exh)f'(x))^{2}}; \]. where x and y are the point coordinates, and ‘f’(x)is the derivative of the functionf(x)`.; In case of asymmetric errors, if the function lies below (above) the data point, ey is ey_low (ey_high).; The approach used to approximate the uncertainty in y because of the errors in x is to make it equal the error in x times the slope of the line. This approach is called ""effective variance method"" and the implementation is provided in the function FitUtil::EvaluateChi2Effective. Linear fitting:; When the fitting function is linear (contains the ++ sign) or the fitting function is a polynomial, a linear fitter is initialised. To create a linear function, use the following syntax: linear parts s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph.html:50113,error,errors,50113,doc/master/classTGraph.html,https://root.cern,https://root.cern/doc/master/classTGraph.html,3,['error'],"['error', 'errors']"
Availability,"ent is the type of polynomials to use in; parameterisation, one of:; TMultiDimFit::kMonomials; TMultiDimFit::kChebyshev; TMultiDimFit::kLegendre. Options:; K Compute (k)correlation matrix; V Be verbose. Default is no options. ~TMultiDimFit(); Destructor. void AddRow(const Double_t* x, Double_t D, Double_t E = 0); Add a row consisting of fNVariables independent variables, the; known, dependent quantity, and optionally, the square error in; the dependent quantity, to the training sample to be used for the; parameterization.; The mean of the variables and quantity is calculated on the fly,; as outlined in TPrincipal::AddRow.; This sample should be representive of the problem at hand.; Please note, that if no error is given Poisson statistics is; assumed and the square error is set to the value of dependent; quantity. See also the; class description. void AddTestRow(const Double_t* x, Double_t D, Double_t E = 0); Add a row consisting of fNVariables independent variables, the; known, dependent quantity, and optionally, the square error in; the dependent quantity, to the test sample to be used for the; test of the parameterization.; This sample needn't be representive of the problem at hand.; Please note, that if no error is given Poisson statistics is; assumed and the square error is set to the value of dependent; quantity. See also the; class description. void Browse(TBrowser* b); Browse the TMultiDimFit object in the TBrowser. void Clear(Option_t* option = """"); Clear internal structures and variables. Double_t Eval(const Double_t* x, const Double_t* coeff = 0) const; Evaluate parameterization at point x. Optional argument coeff is; a vector of coefficients for the parameterisation, fNCoefficients; elements long. Double_t EvalError(const Double_t* x, const Double_t* coeff = 0) const; Evaluate parameterization error at point x. Optional argument coeff is; a vector of coefficients for the parameterisation, fNCoefficients; elements long. Double_t EvalControl(const Int_t* po",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiDimFit.html:26162,error,error,26162,root/html528/TMultiDimFit.html,https://root.cern,https://root.cern/root/html528/TMultiDimFit.html,10,['error'],['error']
Availability,"ent line color.Definition TAttLine.cxx:305; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttLine::GetLineStylevirtual Style_t GetLineStyle() constReturn the line style.Definition TAttLine.h:34; TF11-Dim function classDefinition TF1.h:233; TGraphMultiErrorsTGraph with asymmetric error bars and multiple y error dimensions.Definition TGraphMultiErrors.h:29; TGraphMultiErrors::fEyLSumDouble_t * fEyLSum! Array of summed Y low errors for fittingDefinition TGraphMultiErrors.h:39; TGraphMultiErrors::GetSumErrorsModeInt_t GetSumErrorsMode() constDefinition TGraphMultiErrors.h:165; TGraphMultiErrors::GetFillColorvirtual Color_t GetFillColor() constReturn the fill area color.Definition TAttFill.h:30; TGraphMultiErrors::GetEYhighDouble_t * GetEYhigh() const overrideGet all high errors on y coordinates as an array summed according to fSumErrorsMode.Definition TGraphMultiErrors.cxx:1588; TGraphMultiErrors::GetErrorXDouble_t GetErrorX(Int_t i) const overrideGet error on x coordinate for point i.Definition TGraphMultiErrors.cxx:1439; TGraphMultiErrors::GetFillStylevirtual Style_t GetFillStyle() constReturn the fill area style.Definition TAttFill.h:31; TGraphMultiErrors::GetErrorXhighDouble_t GetErrorXhigh(Int_t i) const overrideGet high error on x coordinate for point i.Definition TGraphMultiErrors.cxx:1492; TGraphMultiErrors::SetPointErrorvirtual void SetPointError(Double_t exL, Double_t exH, Double_t eyL1, Double_t eyH1, Double_t eyL2=0., Double_t eyH2=0., Double_t eyL3=0., Double_t eyH3=0.)Set ex and ey values for point pointed by the mouse.Definition TGraphMultiErrors.cxx:1793; TGraphMultiErrors::GetAttLinevirtual TAttLine * GetAttLine(Int_t e)Get AttLine pointer for specified error dimension.Definition TGraphMultiErrors.cxx:1632; TGraphMultiErrors::SetFillColorAlphavirtual void SetFillColorAlpha(Int_t e, Color_t fcolor, Float_t falpha)Set Fill Color and Alpha of error e (-1 = Global and x errors).Definition TGraph",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html:15657,error,error,15657,doc/master/TGraphMultiErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html,1,['error'],['error']
Availability,"ent new[] when throwing an exception. ;  ; void * operator new (size_t sz);  ; void * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualPad.html:18981,error,error,18981,doc/master/classTVirtualPad.html,https://root.cern,https://root.cern/doc/master/classTVirtualPad.html,1,['error'],['error']
Availability,"ent number; of bins and different limits, BUT the largest bin width must be; a multiple of the smallest bin width and the upper limit must also; be a multiple of the bin width. Bool_t Multiply(TF1* h1, Double_t c1 = 1); Performs the operation: this = this*c1*f1. The function return kFALSE if the Multiply operation failed. Bool_t Multiply(const TH1* h1); Multiply this profile by h1*-*-; *-* =============================. this = this*h1. Bool_t Multiply(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """"); -*-*-*Replace contents of this profile by multiplication of h1 by h2; *-* ================================================================. this = (c1*h1)*(c2*h2). TH1D * ProjectionX(const char* name = ""_px"", Option_t* option = ""e"") const; Project this profile into a 1-D histogram along X*-*-; *-* =================================================. The projection is always of the type TH1D. if option ""E"" is specified the errors of the projected histogram are computed and set; to be equal to the errors of the profile.; Option ""E"" is defined as the default one in the header file.; if option """" is specified the histogram errors are simply the sqrt of its content; if option ""B"" is specified, the content of bin of the returned histogram; will be equal to the GetBinEntries(bin) of the profile,; otherwise (default) it will be equal to GetBinContent(bin); if option ""C=E"" the bin contents of the projection are set to the; bin errors of the profile; if option ""W"" is specified the bin content of the projected histogram is set to the; product of the bin content of the profile and the entries.; With this option the returned histogram will be equivalent to the one obtained by; filling directly a TH1D using the 2-nd value as a weight.; This makes sense only for profile filled with weights =1. If not, the error of the; projected histogram obtained with this option will not be correct. void PutStats(Double_t* stats); Replace current statistics with th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProfile.html:40728,error,errors,40728,root/html534/TProfile.html,https://root.cern,https://root.cern/root/html534/TProfile.html,12,['error'],['errors']
Availability,"ent object ; Reimplemented from TObject.; Definition at line 167 of file TEnv.h. ◆ Lookup(). TEnvRec * TEnv::Lookup ; (; const char * ; name); const. virtual . Loop over all resource records and return the one with name. ; Return 0 in case name is not in the resource table. ; Definition at line 547 of file TEnv.cxx. ◆ operator=(). TEnv & TEnv::operator= ; (; const TEnv & ; ). privatedelete . ◆ Print(). void TEnv::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print all resources or the global, user or local resources separately. ; Reimplemented from TObject.; Definition at line 556 of file TEnv.cxx. ◆ PrintEnv(). void TEnv::PrintEnv ; (; EEnvLevel ; level = kEnvAll); const. virtual . Print all resources for a certain level (global, user, local, changed). ; Definition at line 574 of file TEnv.cxx. ◆ ReadFile(). Int_t TEnv::ReadFile ; (; const char * ; fname, . EEnvLevel ; level . ). virtual . Read and parse the resource file for a certain level. ; Returns -1 on case of error, 0 in case of success. ; Definition at line 592 of file TEnv.cxx. ◆ Save(). void TEnv::Save ; (; ). virtual . Write the resource files for each level. ; The new files have the same name as the original files. The old files are renamed to *.bak. ; Definition at line 649 of file TEnv.cxx. ◆ SaveLevel(). void TEnv::SaveLevel ; (; EEnvLevel ; level). virtual . Write the resource file for a certain level. ; Definition at line 664 of file TEnv.cxx. ◆ SetRcName(). virtual void TEnv::SetRcName ; (; const char * ; name). inlinevirtual . Definition at line 145 of file TEnv.h. ◆ SetValue() [1/4]. void TEnv::SetValue ; (; const char * ; name, . const char * ; value, . EEnvLevel ; level = kEnvChange, . const char * ; type = nullptr . ). virtual . Set the value of a resource or create a new resource. ; Definition at line 736 of file TEnv.cxx. ◆ SetValue() [2/4]. void TEnv::SetValue ; (; const char * ; name, . Double_t ; value . ). virtual . Set or create a double resource value. ; Definition at ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEnv.html:19685,error,error,19685,doc/master/classTEnv.html,https://root.cern,https://root.cern/doc/master/classTEnv.html,1,['error'],['error']
Availability,"ent operator. virtual ~BinData(). destructor. void Initialize(unsigned int maxpoints, unsigned int dim = 1, ROOT::Fit::BinData::ErrorType err = kValueError). preallocate a data set with given size , dimension and error type (to get the full point size); If the data set already exists and it is having the compatible point size space for the new points; is created in the data sets, while if not compatible the old data are erased and new space of; new size is allocated.; (i.e if exists initialize is equivalent to a resize( NPoints() + maxpoints). unsigned int PointSize() const. return the size of a fit point (is the coordinate dimension + 1 for the value and eventually; the number of all errors. unsigned int DataSize() const. return the size of internal data (number of fit points); if data are not copied in but used externally the size is 0. bool HaveCoordErrors() const. flag to control if data provides error on the coordinates. bool HaveAsymErrors() const. flag to control if data provides asymmetric errors on the value. void Add(double x, double y ). add one dim data with only coordinate and values. void Add(double x, double y, double ey). add one dim data with no error in the coordinate (x); in this case store the inverse of the error in the value (y). void Add(double x, double y, double ex, double ey). add one dim data with error in the coordinate (x); in this case store the value (y) error and not the inverse. void Add(double x, double y, double ex, double eyl, double eyh). add one dim data with error in the coordinate (x) and asymmetric errors in the value (y); in this case store the y errors and not the inverse. void Add(const double *x, double val). add multi-dim coordinate data with only value (no errors). void Add(const double *x, double val, double eval). add multi-dim coordinate data with only error in value. void Add(const double *x, double val, const double * ex, double eval). add multi-dim coordinate data with both error in coordinates and value. const dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Fit__BinData.html:8240,error,errors,8240,root/html526/ROOT__Fit__BinData.html,https://root.cern,https://root.cern/root/html526/ROOT__Fit__BinData.html,1,['error'],['errors']
Availability,"ent operator. virtual ~BinData(). destructor. void Initialize(unsigned int maxpoints, unsigned int dim = 1, ROOT::Fit::BinData::ErrorType err = kValueError). preallocate a data set with given size , dimension and error type (to get the full point size); If the data set already exists and it is having the compatible point size space for the new points; is created in the data sets, while if not compatible the old data are erased and new space of; new size is allocated.; (i.e if exists initialize is equivalent to a resize( NPoints() + maxpoints). unsigned int PointSize() const. return the size of a fit point (is the coordinate dimension + 1 for the value and eventually; the number of all errors. unsigned int DataSize() const. return the size of internal data (number of fit points); if data are not copied in but used externally the size is 0. bool HaveCoordErrors() const. flag to control if data provides error on the coordinates. bool HaveAsymErrors() const. flag to control if data provides asymmetric errors on the value. void Add(double x, double y). add one dim data with only coordinate and values. void Add(double x, double y, double ey). add one dim data with no error in the coordinate (x); in this case store the inverse of the error in the value (y). void Add(double x, double y, double ex, double ey). add one dim data with error in the coordinate (x); in this case store the value (y) error and not the inverse. void Add(double x, double y, double ex, double eyl, double eyh). add one dim data with error in the coordinate (x) and asymmetric errors in the value (y); in this case store the y errors and not the inverse. void Add(const double* x, double val). add multi-dim coordinate data with only value (no errors). void Add(const double* x, double val, double eval). add multi-dim coordinate data with only error in value. void Add(const double* x, double val, const double* ex, double eval). add multi-dim coordinate data with both error in coordinates and value. void Add(co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Fit__BinData.html:8352,error,errors,8352,root/html528/ROOT__Fit__BinData.html,https://root.cern,https://root.cern/root/html528/ROOT__Fit__BinData.html,10,['error'],['errors']
Availability,"ent tree:; fReader.SetLocalEntry(entry);. // We can still print some informations about the current event; //printf(""Size of Event %ld = %d Bytes\n"", entry, *fCurrentEventSize);. // compute the total size of all events; dereference the TTreeReaderValue; // using '*' to get the value it refers to, just like an iterator.; fTotalDataSize += *fCurrentEventSize;. return kTRUE;; }. Accessing the Analysis Result; In your selector's Terminate() function, print the sum of all event sizes. This sum shows you the real power of a TTree: even though you can analyze large amounts of data (our example tree with 22MB is tiny!) ROOT needs just a few MB of your RAM, no matter how many events you analyze. Imagine what it would be like if you had to load all data into memory, e.g. using a simple vector!; void EventSelector::Terminate(); {; // ... int sizeInMB = fTotalDataSize/1024/1024;; printf(""Total size of all events: %d MB\n"", sizeInMB);; }. If, for any reason, you don't manage to get it to work, you can download a working selector file here: CountEventSelector.C; Here again, if you are using ROOT via ssh, you have to download the file with wget from your remote directory:; wget http://root-mirror.github.io/training/intro/CountEventSelector.C; Note: You will have to use it that way:; EventTree->Process(""CountEventSelector.C""). . ‹ Compiling Your Code (also known as ACLiC); up; Histogramming in a Selector ›. Navigate through this book; Meet a TTree; Accessing a TTree With a TBrowser; Using TTree::Draw() to access a TTree; TTree and Its Data; Using a Macro to Read a TTree; Histogramming; Fit Panel; Compiling Your Code (also known as ACLiC); Accessing a TTree With a TSelector; Histogramming in a Selector; Using a TSelector with PROOF; The End. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/accessing-ttree-tselector.html:8463,down,download,8463,d/accessing-ttree-tselector.html,https://root.cern,https://root.cern/d/accessing-ttree-tselector.html,1,['down'],['download']
Availability,"ent(%s) ignored in %s"", arguments.Data(), GetMacroPath());; 2285 }; 2286 char *mac = gSystem->Which(GetMacroPath(), fname, kReadPermission);; 2287 if (!mac) {; 2288 if (!check); 2289 Error(""LoadMacro"", ""macro %s not found in path %s"", fname.Data(), GetMacroPath());; 2290 *terr = TInterpreter::kFatal;; 2291 } else {; 2292 err = 0;; 2293 if (!check) {; 2294 fname = mac;; 2295 fname += aclicMode;; 2296 fname += io;; 2297 gInterpreter->LoadMacro(fname.Data(), (TInterpreter::EErrorCode*)terr);; 2298 if (*terr); 2299 err = -1;; 2300 }; 2301 }; 2302 delete [] mac;; 2303 }; 2304 return err;; 2305}; 2306 ; 2307////////////////////////////////////////////////////////////////////////////////; 2308/// Execute a macro in the interpreter. Equivalent to the command line; 2309/// command "".x filename"". If the filename has ""+"" or ""++"" appended; 2310/// the macro will be compiled by ACLiC. The filename must have the format:; 2311/// [path/]macro.C[+|++[g|O]][(args)].; 2312/// The possible error codes are defined by TInterpreter::EErrorCode.; 2313/// If padUpdate is true (default) update the current pad.; 2314/// Returns the macro return value.; 2315 ; 2316Longptr_t TROOT::Macro(const char *filename, Int_t *error, Bool_t padUpdate); 2317{; 2318 Longptr_t result = 0;; 2319 ; 2320 if (fInterpreter) {; 2321 TString aclicMode;; 2322 TString arguments;; 2323 TString io;; 2324 TString fname = gSystem->SplitAclicMode(filename, aclicMode, arguments, io);; 2325 ; 2326 char *mac = gSystem->Which(GetMacroPath(), fname, kReadPermission);; 2327 if (!mac) {; 2328 Error(""Macro"", ""macro %s not found in path %s"", fname.Data(), GetMacroPath());; 2329 if (error); 2330 *error = TInterpreter::kFatal;; 2331 } else {; 2332 fname = mac;; 2333 fname += aclicMode;; 2334 fname += arguments;; 2335 fname += io;; 2336 result = gInterpreter->ExecuteMacro(fname, (TInterpreter::EErrorCode*)error);; 2337 }; 2338 delete [] mac;; 2339 ; 2340 if (padUpdate && gPad); 2341 gPad->Update();; 2342 }; 2343 ; 2344 return result;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:88085,error,error,88085,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,2,['error'],['error']
Availability,"ent(); virtual voidBeginPrimary(); virtual voidBeginWorkerRun() const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TVirtualMCApplication*CloneForWorker() const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidConstructGeometry(); virtual voidConstructOpGeometry(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidField(const Double_t* x, Double_t* b) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFinishEvent(); virtual voidFinishPrimary(); virtual voidFinishWorkerRun() const; virtual voidGeaneStepping(); virtual voidGeneratePrimaries(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualMCApplication.html:1751,error,error,1751,root/html534/TVirtualMCApplication.html,https://root.cern,https://root.cern/root/html534/TVirtualMCApplication.html,6,['error'],['error']
Availability,"ent(const TMySQLStatement&); TMySQLStatement(MYSQL_STMT* stmt, Bool_t errout = kTRUE); virtual~TMySQLStatement(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* = """"); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTSQLStatement::EnableErrorOutput(Bool_t on = kTRUE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; static unsigned longGetAllocSizeLimit(); virtual Bool_tGetBinary(Int_t npar, void*& mem, Long_t& size); virtual Int_tGetBufferLength() const; virtual Bool_tGetDate(Int_t npar, Int_t& year, Int_t& month, Int_t& day); virtual Bool_tGetDatime(Int_t npar, Int_t& year, Int_t& month, Int_t& day, Int_t& hour, Int_t& min, Int_t& sec); Int_tTSQLStatement::GetDay(Int_t); virtual Double_tGetDouble(Int_t npar); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSQLStatem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMySQLStatement.html:1445,Error,Error,1445,root/html532/TMySQLStatement.html,https://root.cern,https://root.cern/root/html532/TMySQLStatement.html,1,['Error'],['Error']
Availability,"ent::GetColorByName(). String will be reused so copy immediately; if needed.; ; . void SaveColor(ostream& out, Int_t ci). Save a color with index > 228 as a C++ statement(s) on output stream out.; ; . Bool_t IsGrayscale(). Return whether all colors return grayscale values.; ; . void SetGrayscale(Bool_t set = kTRUE). Set whether all colors should return grayscale values.; ; . Int_t CreateGradientColorTable(UInt_t Number, Double_t* Stops, Double_t* Red, Double_t* Green, Double_t* Blue, UInt_t NColors). Static function creating a color table with several connected linear gradients.; ; Number: The number of end point colors that will form the gradients.; Must be at least 2.; Stops: Where in the whole table the end point colors should lie.; Each entry must be on [0, 1], each entry must be greater than; the previous entry.; Red, Green, Blue: The end point color values.; Each entry must be on [0, 1]; NColors: Total number of colors in the table. Must be at least 1.; ; ; Returns a positive value on sucess and -1 on error.; ; The table is constructed by tracing lines between the given points in ; RGB space. Each color value may have a value between 0 and 1. The ; difference between consecutive ""Stops"" values gives the fraction of ; space in the whole table that should be used for the interval between ; the corresponding color values.; ; Normally the first element of Stops should be 0 and the last should be 1.; If this is not true, fewer than NColors will be used in proportion with; the total interval between the first and last elements of Stops.; ; This definition is similar to the povray-definition of gradient; color tables.; ; For instance:; ; UInt_t Number = 3;; Double_t Red[3] = { 0.0, 1.0, 1.0 };; Double_t Green[3] = { 0.0, 0.0, 1.0 };; Double_t Blue[3] = { 1.0, 0.0, 1.0 };; Double_t Stops[3] = { 0.0, 0.4, 1.0 };; ; This defines a table in which there are three color end points:; RGB = {0, 0, 1}, {1, 0, 0}, and {1, 1, 1} = blue, red, white; The first 40% of the table is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TColor.html:23364,error,error,23364,root/html526/TColor.html,https://root.cern,https://root.cern/root/html526/TColor.html,1,['error'],['error']
Availability,"ent::GetColorByName(). String will be reused so copy immediately; if needed.; ; . void SaveColor(ostream& out, Int_t ci). Save a color with index > 228 as a C++ statement(s) on output stream out.; ; . Bool_t IsGrayscale(). Return whether all colors return grayscale values.; ; . void SetGrayscale(Bool_t set = kTRUE). Set whether all colors should return grayscale values.; ; . Int_t CreateGradientColorTable(UInt_t Number, Double_t* Stops, Double_t* Red, Double_t* Green, Double_t* Blue, UInt_t NColors). Static function creating a color table with several connected linear gradients.; ; Number: The number of end point colors that will form the gradients.; Must be at least 2.; Stops: Where in the whole table the end point colors should lie.; Each entry must be on [0, 1], each entry must be greater than; the previous entry.; Red, Green, Blue: The end point color values.; Each entry must be on [0, 1]; NColors: Total number of colors in the table. Must be at least 1.; ; Returns a positive value on success and -1 on error.; ; The table is constructed by tracing lines between the given points in; RGB space. Each color value may have a value between 0 and 1. The; difference between consecutive ""Stops"" values gives the fraction of; space in the whole table that should be used for the interval between; the corresponding color values.; ; Normally the first element of Stops should be 0 and the last should be 1.; If this is not true, fewer than NColors will be used in proportion with; the total interval between the first and last elements of Stops.; ; This definition is similar to the povray-definition of gradient; color tables.; ; For instance:; ; UInt_t Number = 3;; Double_t Red[3] = { 0.0, 1.0, 1.0 };; Double_t Green[3] = { 0.0, 0.0, 1.0 };; Double_t Blue[3] = { 1.0, 0.0, 1.0 };; Double_t Stops[3] = { 0.0, 0.4, 1.0 };; ; This defines a table in which there are three color end points:; RGB = {0, 0, 1}, {1, 0, 0}, and {1, 1, 1} = blue, red, white; The first 40% of the table is used",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TColor.html:23433,error,error,23433,root/html532/TColor.html,https://root.cern,https://root.cern/root/html532/TColor.html,2,['error'],['error']
Availability,"ent::fVizTagTag used to query VizDB for model element. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveScene(const char* n = ""TEveScene"", const char* t = """"); Constructor. ~TEveScene(); Destructor. void CollectSceneParents(TEveElement::List_t& scenes); Virtual from TEveElement; here we simply append this scene to; the list. void Repaint(Bool_t dropLogicals = kFALSE); Repaint the scene. void RetransHierarchically(); Entry point for hierarchical transformation update.; Calls the recursive variant on all children. void RetransHierarchicallyRecurse(TEveElement* el, const TEveTrans& tp); Set transformation matrix for physical shape of element el in; the GL-scene and recursively descend into children (if enabled). void SetName(const char* n); Set scene's name. void Paint(Option_t* option = """"); Paint the scene. Iterate over children and calls PadPaint(). void DestroyElementRenderers(TEveElement* element); Remove element from the scene.; It is not an error if the element is not found in the scene. void DestroyElementRenderers(TObject* rnrObj); Remove element represented by object rnrObj from the scene.; It is not an error if the element is not found in the scene. const TGPicture* GetListTreeIcon(Bool_t open = kFALSE); Return icon for scene. TEveScene(const TEveScene& ). TEveScene& operator=(const TEveScene& ). Bool_t SingleRnrState() const; { return kTRUE; }. void Changed(); { fChanged = kTRUE; }. Bool_t IsChanged() const; { return fChanged; }. void SetHierarchical(Bool_t h); { fHierarchical = h; }. Bool_t GetHierarchical() const; { return fHierarchical; }. TGLScenePad* GetGLScene() const; { return fGLScene; }. void SetGLScene(TGLScenePad* s); { fGLScene = s; }. » Last changed: root/eve:$Id: TEveScene.h 35074 2010-08-30 15:18:02Z matevz $ » Last generated: 2010-10-20 08:46; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveScene.html:21050,error,error,21050,root/html528/TEveScene.html,https://root.cern,https://root.cern/root/html528/TEveScene.html,2,['error'],['error']
Availability,"ent::fVizTagTag used to query VizDB for model element. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveScene(const char* n = ""TEveScene"", const char* t = """"); Constructor. ~TEveScene(); Destructor. void CollectSceneParents(TEveElement::List_t& scenes); Virtual from TEveElement; here we simply append this scene to; the list. void Repaint(Bool_t dropLogicals = kFALSE); Repaint the scene. void RetransHierarchically(); Entry point for hierarchical transformation update.; Calls the recursive variant on all children. void RetransHierarchicallyRecurse(TEveElement* el, const TEveTrans& tp); Set transformation matrix for physical shape of element el in; the GL-scene and recursively descend into children (if enabled). void SetName(const char* n); Set scene's name. void Paint(Option_t* option = """"); Paint the scene. Iterate over children and calls PadPaint(). void DestroyElementRenderers(TEveElement* element); Remove element from the scene.; It is not an error if the element is not found in the scene. void DestroyElementRenderers(TObject* rnrObj); Remove element represented by object rnrObj from the scene.; It is not an error if the element is not found in the scene. const TGPicture* GetListTreeIcon(Bool_t open = kFALSE); Return icon for scene. TEveScene(const TEveScene& ). TEveScene& operator=(const TEveScene& ). Bool_t SingleRnrState() const; { return kTRUE; }. void Changed(); { fChanged = kTRUE; }. Bool_t IsChanged() const; { return fChanged; }. void SetHierarchical(Bool_t h); { fHierarchical = h; }. Bool_t GetHierarchical() const; { return fHierarchical; }. TGLScenePad* GetGLScene() const; { return fGLScene; }. void SetGLScene(TGLScenePad* s); { fGLScene = s; }. » Last changed: root/eve:$Id: TEveScene.h 35074 2010-08-30 15:18:02Z matevz $ » Last generated: 2011-07-04 15:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveScene.html:21119,error,error,21119,root/html530/TEveScene.html,https://root.cern,https://root.cern/root/html530/TEveScene.html,2,['error'],['error']
Availability,"ent::fVizTagTag used to query VizDB for model element. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveScene(const char* n = ""TEveScene"", const char* t = """"); Constructor. ~TEveScene(); Destructor. void CollectSceneParents(TEveElement::List_t& scenes); Virtual from TEveElement; here we simply append this scene to; the list. void Repaint(Bool_t dropLogicals = kFALSE); Repaint the scene. void RetransHierarchically(); Entry point for hierarchical transformation update.; Calls the recursive variant on all children. void RetransHierarchicallyRecurse(TEveElement* el, const TEveTrans& tp); Set transformation matrix for physical shape of element el in; the GL-scene and recursively descend into children (if enabled). void SetName(const char* n); Set scene's name. void Paint(Option_t* option = """"); Paint the scene. Iterate over children and calls PadPaint(). void DestroyElementRenderers(TEveElement* element); Remove element from the scene.; It is not an error if the element is not found in the scene. void DestroyElementRenderers(TObject* rnrObj); Remove element represented by object rnrObj from the scene.; It is not an error if the element is not found in the scene. const TGPicture* GetListTreeIcon(Bool_t open = kFALSE); Return icon for scene. TEveScene(const TEveScene& ). TEveScene& operator=(const TEveScene& ). Bool_t SingleRnrState() const; { return kTRUE; }. void Changed(); { fChanged = kTRUE; }. Bool_t IsChanged() const; { return fChanged; }. void SetHierarchical(Bool_t h); { fHierarchical = h; }. Bool_t GetHierarchical() const; { return fHierarchical; }. TGLScenePad* GetGLScene() const; { return fGLScene; }. void SetGLScene(TGLScenePad* s); { fGLScene = s; }. » Last changed: root/eve:$Id: TEveScene.h 35074 2010-08-30 15:18:02Z matevz $ » Last generated: 2011-11-03 20:12; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveScene.html:21119,error,error,21119,root/html532/TEveScene.html,https://root.cern,https://root.cern/root/html532/TEveScene.html,4,['error'],['error']
Availability,"ent; -1 if the elements are neither overlapping nor subsequent. TFileInfo * GetFileInfo(const char* type = ""TTree""); Return the content of this element in the form of a TFileInfo. const char * GetDirectory() const; Return directory where to look for object. void Print(Option_t* options = """") const; Print a TDSetElement. When option=""a"" print full data. void Validate(Bool_t isTree); Validate by opening the file. void Validate(TDSetElement* elem); Validate by checking against another element. Int_t Compare(const TObject* obj) const; Compare elements by filename (and the fFirst). void AddFriend(TDSetElement* friendElement, const char* alias); Add friend TDSetElement to this set. The friend element will be copied to this object. void DeleteFriends(); Deletes the list of friends and all the friends on the list. Long64_t GetEntries(Bool_t istree = kTRUE, Bool_t openfile = kTRUE); Returns number of entries in tree or objects in file.; If not yet defined and 'openfile' is TRUE, get the number from the file; (may considerably slow down the application).; Returns -1 in case of error. Int_t Lookup(Bool_t force = kFALSE); Resolve end-point URL for this element; Return 0 on success and -1 otherwise. void SetEntryList(TObject* aList, Long64_t first = -1, Long64_t num = -1); Set entry (or event) list for this element. void AddAssocObj(TObject* assocobj); Add an associated object to the list. TObject * GetAssocObj(Long64_t i, Bool_t isentry = kFALSE); Get i-th associated object.; If 'isentry' fFirst is subtracted, so that i == fFirst returns the first; object in the list.; If there are not enough elements in the list, the element i%list_size is; returned (if the list has only one element this only one element is always; returned.; This method is used when packet processing consist in processing the objects; in the associated object list. void Streamer(TBuffer& ); Stream an object of class TDSetElement. Bool_t HasBeenLookedUp() const; { return TestBit(kHasBeenLookedUp); }. TDSetElem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDSetElement.html:10027,down,down,10027,root/html534/TDSetElement.html,https://root.cern,https://root.cern/root/html534/TDSetElement.html,6,['down'],['down']
Availability,"ent; -1 if the elements are neither overlapping nor subsequent. TFileInfo * GetFileInfo(const char* type = ""TTree""); Return the content of this element in the form of a TFileInfo. const char * GetDirectory() const; Return directory where to look for object. void Print(Option_t* options = """") const; Print a TDSetElement. When option=""a"" print full data. void Validate(Bool_t isTree); Validate by opening the file. void Validate(TDSetElement* elem); Validate by checking against another element. Int_t Compare(const TObject* obj) const; Compare elements by filename (and the fFirst). void AddFriend(TDSetElement* friendElement, const char* alias); Add friend TDSetElement to this set. The friend element will be copied to this object. void DeleteFriends(); Deletes the list of friends and all the friends on the list. Long64_t GetEntries(Bool_t istree = kTRUE, Bool_t openfile = kTRUE); Returns number of entries in tree or objects in file.; If not yet defined and 'openfile' is TRUE, get the number from the file; (may considerably slow down the application).; Returns -1 in case of error. Int_t Lookup(Bool_t force = kFALSE); Resolve end-point URL for this element; Return 0 on success and -1 otherwise. void SetEntryList(TObject* aList, Long64_t first = -1, Long64_t num = -1); Set entry (or event) list for this element. void AddAssocObj(TObject* assocobj); Add an associated object to the list. TObject * GetAssocObj(Long64_t i, Bool_t isentry = kFALSE); Get i-th associated object.; If 'isentry' fFirst is subtracted, so that i == fFirst returns the first; object in the list.; If there are not enough elements in the list, the element i%list_size is; returned (if the list has only one element this only one element is always; returned.; This method is used when packet processing consist in processing the objects; in the associated object list. void Streamer(TBuffer& b); Stream an object of class TDSetElement. Bool_t HasBeenLookedUp() const; (e.g. TObjString describing associated files). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDSetElement.html:9814,down,down,9814,root/html528/TDSetElement.html,https://root.cern,https://root.cern/root/html528/TDSetElement.html,4,['down'],['down']
Availability,"ent; prototype is limited and users have no freedom to enter file/user; function names in this field. ""Set Parameters"" button opens a dialog for parameters settings. ""Fit Settings"" provides user interface elements related to the; fitter. Currently there are two method choices: Chi-square and; Binned Likelihood. ""Linear Fit"" check button sets the use of Linear fitter is it is; selected. Otherwise the option 'F' is applied if polN is selected.; ""Robust"" number entry sets the robust value when fitting graphs.; ""No Chi-square"" check button sets ON/OFF option 'C' - do not; calculate Chi-square (for Linear fitter). Fit options:; ""Integral"" check button switch ON/OFF option 'I' - use integral; of function instead of value in bin center.; ""Best Errors"" sets ON/OFF option 'E' - better errors estimation; using Minos technique.; ""All weights = 1"" sets ON/OFF option 'W' - all weights set to 1,; excluding empty bins and ignoring error bars.; ""Empty bins, weights=1"" sets ON/OFF option 'WW' - all weights; equal to 1, including empty bins, error bars ignored.; ""Use range"" sets ON/OFF option 'R' - fit only data within the; specified function range with the slider.; ""Improve fit results"" sets ON/OFF option 'M' - after minimum is; found, search for a new one.; ""Add to list"" sets On/Off option '+'- add function to the list; without deleting the previous. Draw options:; ""SAME"" sets On/Off function drawing on the same pad.; ""No drawing"" sets On/Off option '0'- do not draw function graphics.; ""Do not store/draw"" sets On/Off option 'N'- do not store the; function, do not draw it. Sliders settings are used if option 'R' - use range is active.; Users can change min/max values by pressing the left mouse button; near to the left/right slider edges. It is possible o change both; values simultaneously by pressing the left mouse button near to its; center and moving it to a new desire position. ""Minimization"" Tab. ""Library"" group allows you to use Minuit, Minuit2 or Fumili; minimization packages ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFitEditor.html:2522,error,error,2522,root/html528/TFitEditor.html,https://root.cern,https://root.cern/root/html528/TFitEditor.html,10,['error'],['error']
Availability,"entErrors::SwapPoints ; (; Int_t ; pos1, . Int_t ; pos2 . ). overrideprotectedvirtual . Swap points. ; Reimplemented from TGraph.; Definition at line 646 of file TGraphBentErrors.cxx. ◆ UpdateArrays(). void TGraphBentErrors::UpdateArrays ; (; const std::vector< Int_t > & ; sorting_indices, . Int_t ; numSortedPoints, . Int_t ; low . ). overrideprotectedvirtual . Update the fX, fY, fEXlow, fEXhigh, fEXlowd, fEXhighd, fEYlow, fEYhigh, fEYlowd, ; and fEYhighd arrays with the sorted values. ; Reimplemented from TGraph.; Definition at line 665 of file TGraphBentErrors.cxx. Member Data Documentation. ◆ fEXhigh. Double_t* TGraphBentErrors::fEXhigh. protected . [fNpoints] array of X high errors ; Definition at line 29 of file TGraphBentErrors.h. ◆ fEXhighd. Double_t* TGraphBentErrors::fEXhighd. protected . [fNpoints] array of X high displacements ; Definition at line 34 of file TGraphBentErrors.h. ◆ fEXlow. Double_t* TGraphBentErrors::fEXlow. protected . [fNpoints] array of X low errors ; Definition at line 28 of file TGraphBentErrors.h. ◆ fEXlowd. Double_t* TGraphBentErrors::fEXlowd. protected . [fNpoints] array of X low displacements ; Definition at line 33 of file TGraphBentErrors.h. ◆ fEYhigh. Double_t* TGraphBentErrors::fEYhigh. protected . [fNpoints] array of Y high errors ; Definition at line 31 of file TGraphBentErrors.h. ◆ fEYhighd. Double_t* TGraphBentErrors::fEYhighd. protected . [fNpoints] array of Y high displacements ; Definition at line 36 of file TGraphBentErrors.h. ◆ fEYlow. Double_t* TGraphBentErrors::fEYlow. protected . [fNpoints] array of Y low errors ; Definition at line 30 of file TGraphBentErrors.h. ◆ fEYlowd. Double_t* TGraphBentErrors::fEYlowd. protected . [fNpoints] array of Y low displacements ; Definition at line 35 of file TGraphBentErrors.h. Libraries for TGraphBentErrors:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TGraphBentErrors.h; hist/hist/src/TGraphBentErrors.cxx. TGraphBentErrors. ROO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphBentErrors.html:45544,error,errors,45544,doc/master/classTGraphBentErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html,1,['error'],['errors']
Availability,"entFunctionMultiDim>&); ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&). Data Members; public:. enum ROOT::Math::BasicFitMethodFunction::Type_t { kUndefined; kLeastSquare; kLogLikelihood; };. private:. const ROOT::Fit::BinData&fData; const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction&fFunc; vector<double>fGradfor derivatives; unsigned intfNEffPointsnumber of effective points used in the fit; intfWeightflag to indicate if needs to evaluate using weight or weight squared . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new PoissonLikelihoodFCN(fData,fFunc,fWeight); }. unsigned int NFitPoints() const; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood element and its gradient. void Gradient(const double* x, double* g) const; evaluate gradient. bool IsWeighted() const; { return (fWeight != 0); }. void UseSumOfWeights(); Use the weights in evaluating the likelihood. void UseSumOfWeightSquare(); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Fri Aug 17 14:29:24 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: PoissonLikelihoodFCN.h 39382 2011-05-26 08:31:43Z moneta $ » Last generated: 2011-07-04 15:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:4359,error,errors,4359,root/html530/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html530/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,1,['error'],['errors']
Availability,"entHandled(). Bool_t TGListTree::IsEventHandled ; (; ); const. inline . Definition at line 423 of file TGListTree.h. ◆ KeyPressed() [1/2]. void TGListTree::KeyPressed ; (; TGFrame * ; frame, . UInt_t ; keysym, . UInt_t ; mask . ). inlineoverrideprotectedvirtual . Signal emitted when keyboard key pressed. ; frame - activated frame keysym - defined in ""KeySymbols.h"" mask - modifier key mask, defined in ""GuiTypes.h""; const Mask_t kKeyShiftMask = BIT(0); const Mask_t kKeyLockMask = BIT(1); const Mask_t kKeyControlMask = BIT(2); const Mask_t kKeyMod1Mask = BIT(3); // typically the Alt key const Mask_t kButton1Mask = BIT(8); const Mask_t kButton2Mask = BIT(9); const Mask_t kButton3Mask = BIT(10); const Mask_t kButton4Mask = BIT(11); const Mask_t kButton5Mask = BIT(12); const Mask_t kAnyModifier = BIT(15); ; Reimplemented from TGContainer.; Definition at line 300 of file TGListTree.h. ◆ KeyPressed() [2/2]. void TGListTree::KeyPressed ; (; TGListTreeItem * ; entry, . UInt_t ; keysym, . UInt_t ; mask . ). virtual . Signal emitted when keyboard key pressed. ; entry - selected item keysym - defined in ""KeySymbols.h"" mask - modifier key mask, defined in ""GuiTypes.h""; const Mask_t kKeyShiftMask = BIT(0); const Mask_t kKeyLockMask = BIT(1); const Mask_t kKeyControlMask = BIT(2); const Mask_t kKeyMod1Mask = BIT(3); // typically the Alt key const Mask_t kButton1Mask = BIT(8); const Mask_t kButton2Mask = BIT(9); const Mask_t kButton3Mask = BIT(10); const Mask_t kButton4Mask = BIT(11); const Mask_t kButton5Mask = BIT(12); const Mask_t kAnyModifier = BIT(15); ; Definition at line 1085 of file TGListTree.cxx. ◆ Layout(). void TGListTree::Layout ; (; ). inlineoverrideprotectedvirtual . Layout container entries. ; Reimplemented from TGContainer.; Definition at line 290 of file TGListTree.h. ◆ LineDown(). void TGListTree::LineDown ; (; Bool_t ; select = kFALSE). overridevirtual . Move content one item-size down. ; Reimplemented from TGContainer.; Definition at line 1262 of file TGListTree",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGListTree.html:70030,mask,mask,70030,doc/master/classTGListTree.html,https://root.cern,https://root.cern/doc/master/classTGListTree.html,1,['mask'],['mask']
Availability,"entStyle(); virtual Int_tVersion() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TSelector::EAbort { kContinue; kAbortProcess; kAbortFile; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. RooStudyPackage*_pkg; TBranch*b_i!; TTree*fChain!pointer to the analyzed TTree or TChain; Int_ti; Int_tseed. protected:. TSelector::EAbortTSelector::fAbortabort status; TList*TSelector::fInputlist of objects available during processing; TObject*TSelector::fObjectcurrent object if processing object (vs. TTree); TStringTSelector::fOptionoption given to TTree::Process; TSelectorList*TSelector::fOutputlist of objects created during processing; Long64_tTSelector::fStatusselector status. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooProofDriverSelector(TTree* = 0); { b_i = 0 ; _pkg = 0 ; fChain = 0 ; }. virtual ~RooProofDriverSelector(); { }. Int_t Version() const; { return 2; }. void SlaveBegin(TTree* tree). void Init(TTree* tree). Bool_t Notify(). Bool_t Process(Long64_t entry). Int_t GetEntry(Long64_t entry, Int_t getall = 0); { return fChain ? fChain->GetTree()->GetEntry(entry, getall) : 0; }. void SetOption(const char* option); { fOption = option; }. void SetObject(TObject* obj); { fObject = obj; }. void SetInputList(TList* input); { fInput = input; }. void SlaveTerminate(). TList * GetOutputList() const; { return fOutput; }. » Last changed: Thu N",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooProofDriverSelector.html:6456,avail,available,6456,root/html532/RooProofDriverSelector.html,https://root.cern,https://root.cern/root/html532/RooProofDriverSelector.html,2,['avail'],['available']
Availability,"entStyle(); virtual Int_tVersion() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TSelector::EAbort { kContinue; kAbortProcess; kAbortFile; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. RooStudyPackage*_pkg; TBranch*b_i!; TTree*fChain!pointer to the analyzed TTree or TChain; Int_ti; Int_tseed. protected:. TSelector::EAbortTSelector::fAbortabort status; TList*TSelector::fInputlist of objects available during processing; TObject*TSelector::fObjectcurrent object if processing object (vs. TTree); TStringTSelector::fOptionoption given to TTree::Process; TSelectorList*TSelector::fOutputlist of objects created during processing; Long64_tTSelector::fStatusselector status. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooProofDriverSelector(TTree* = 0); { }. virtual ~RooProofDriverSelector(); { }. Int_t Version() const; { return 2; }. void SlaveBegin(TTree* tree). void Init(TTree* tree). Bool_t Notify(). Bool_t Process(Long64_t entry). Int_t GetEntry(Long64_t entry, Int_t getall = 0); { return fChain ? fChain->GetTree()->GetEntry(entry, getall) : 0; }. void SetOption(const char* option); { fOption = option; }. void SetObject(TObject* obj); { fObject = obj; }. void SetInputList(TList* input); { fInput = input; }. void SlaveTerminate(). TList * GetOutputList() const; { return fOutput; }. » Last changed: Mon Dec 7 13:48:46 2009 » Last generate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProofDriverSelector.html:6362,avail,available,6362,root/html526/RooProofDriverSelector.html,https://root.cern,https://root.cern/root/html526/RooProofDriverSelector.html,1,['avail'],['available']
Availability,"entStyle(); virtual Int_tVersion() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TSelector::EAbort { kContinue; kAbortProcess; kAbortFile; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. RooStudyPackage*_pkg; TBranch*b_i!; TTree*fChain!pointer to the analyzed TTree or TChain; Int_ti; Int_tseed. protected:. TSelector::EAbortTSelector::fAbortabort status; TList*TSelector::fInputlist of objects available during processing; TObject*TSelector::fObjectcurrent object if processing object (vs. TTree); TStringTSelector::fOptionoption given to TTree::Process; TSelectorList*TSelector::fOutputlist of objects created during processing; Long64_tTSelector::fStatusselector status. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooProofDriverSelector(TTree* = 0); { }. virtual ~RooProofDriverSelector(); { }. Int_t Version() const; { return 2; }. void SlaveBegin(TTree* tree). void Init(TTree* tree). Bool_t Notify(). Bool_t Process(Long64_t entry). Int_t GetEntry(Long64_t entry, Int_t getall = 0); { return fChain ? fChain->GetTree()->GetEntry(entry, getall) : 0; }. void SetOption(const char* option); { fOption = option; }. void SetObject(TObject* obj); { fObject = obj; }. void SetInputList(TList* input); { fInput = input; }. void SlaveTerminate(). TList * GetOutputList() const; { return fOutput; }. » Last changed: Mon Jul 4 15:23:46 2011 » Last generate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooProofDriverSelector.html:6456,avail,available,6456,root/html530/RooProofDriverSelector.html,https://root.cern,https://root.cern/root/html530/RooProofDriverSelector.html,1,['avail'],['available']
Availability,"entStyle(); virtual Int_tVersion() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TSelector::EAbort { kContinue; kAbortProcess; kAbortFile; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. RooStudyPackage*_pkg; TBranch*b_i!; TTree*fChain!pointer to the analyzed TTree or TChain; Int_ti; Int_tseed. protected:. TSelector::EAbortTSelector::fAbortabort status; TList*TSelector::fInputlist of objects available during processing; TObject*TSelector::fObjectcurrent object if processing object (vs. TTree); TStringTSelector::fOptionoption given to TTree::Process; TSelectorList*TSelector::fOutputlist of objects created during processing; Long64_tTSelector::fStatusselector status. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooProofDriverSelector(TTree* = 0); { }. virtual ~RooProofDriverSelector(); { }. Int_t Version() const; { return 2; }. void SlaveBegin(TTree* tree). void Init(TTree* tree). Bool_t Notify(). Bool_t Process(Long64_t entry). Int_t GetEntry(Long64_t entry, Int_t getall = 0); { return fChain ? fChain->GetTree()->GetEntry(entry, getall) : 0; }. void SetOption(const char* option); { fOption = option; }. void SetObject(TObject* obj); { fObject = obj; }. void SetInputList(TList* input); { fInput = input; }. void SlaveTerminate(). TList * GetOutputList() const; { return fOutput; }. » Last changed: Thu Sep 23 20:00:35 2010 » Last generat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooProofDriverSelector.html:6348,avail,available,6348,root/html528/RooProofDriverSelector.html,https://root.cern,https://root.cern/root/html528/RooProofDriverSelector.html,1,['avail'],['available']
Availability,"entStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum ConstraintType { Gaussian; Poisson; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. boolIncludeStatErrorFlag to implement Statistical errors for this sample; Double_tRelErrorThresholdThe minimum relative uncertainty for a bin to use stat errors; RooStats::HistFactory::EstimateSummary::ConstraintTypeStatConstraintTypeThe type of constraint binwise stat errors; stringchannel; pair<double,double>dummyForRoot; vector<TH1*>highHistsx pb per jet bin for + variations over list of systematics; vector<TH1*>lowHistsx pb per jet bin for - variations over list of systematics; stringname; TH1*nominalx pb per jet bin. all histograms need index of binning to be consistent; vector<NormFactor>normFactor; stringnormName; map<std::string,std::pair<double,double> >overallSyst""acceptance""->(0.8,1.2); TH1*relStatErrorAn (optional) externally provided shape for this error; stringshapeFactorName; vector<ShapeSys>shapeSysts; vector<std::string>systSourceForHist. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; EstimateSummary(). ~EstimateSummary(); {}. void Print(const char* opt = 0) const. void AddSyst(const string& sname, TH1* low, TH1* high). bool operator==(const RooStats::HistFactory::EstimateSummary& other) const; Comparator for two Estimate summary objects. Useful to make sure two analyses are the same",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__HistFactory__EstimateSummary.html:5551,error,errors,5551,root/html532/RooStats__HistFactory__EstimateSummary.html,https://root.cern,https://root.cern/root/html532/RooStats__HistFactory__EstimateSummary.html,12,['error'],['errors']
Availability,"entSubAxes (const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0);  Check that two sub axis are the same. ;  ; static bool CheckEqualAxes (const TAxis *a1, const TAxis *a2);  Check that the axis are the same. ;  ; static Bool_t RecomputeAxisLimits (TAxis &destAxis, const TAxis &anAxis);  Finds new limits for the axis for the Merge function. ;  ; static Bool_t SameLimitsAndNBins (const TAxis &axis1, const TAxis &axis2);  Same limits and bins. ;  ;  Protected Attributes inherited from TH3; Double_t fTsumwxy;  Total Sum of weight*X*Y. ;  ; Double_t fTsumwxz;  Total Sum of weight*X*Z. ;  ; Double_t fTsumwy;  Total Sum of weight*Y. ;  ; Double_t fTsumwy2;  Total Sum of weight*Y*Y. ;  ; Double_t fTsumwyz;  Total Sum of weight*Y*Z. ;  ; Double_t fTsumwz;  Total Sum of weight*Z. ;  ; Double_t fTsumwz2;  Total Sum of weight*Z*Z. ;  ;  Protected Attributes inherited from TH1; Short_t fBarOffset;  (1000*offset) for bar charts or legos ;  ; Short_t fBarWidth;  (1000*width) for bar charts or legos ;  ; EBinErrorOpt fBinStatErrOpt;  Option for bin statistical errors. ;  ; Double_t * fBuffer;  [fBufferSize] entry buffer ;  ; Int_t fBufferSize;  fBuffer size ;  ; TArrayD fContour;  Array to display contour levels. ;  ; Int_t fDimension;  ! Histogram dimension (1, 2 or 3 dim) ;  ; TDirectory * fDirectory;  ! Pointer to directory holding this histogram ;  ; Double_t fEntries;  Number of entries. ;  ; TList * fFunctions;  ->Pointer to list of functions (fits and user) ;  ; Double_t * fIntegral;  ! Integral of bins used by GetRandom ;  ; Double_t fMaximum;  Maximum value for plotting. ;  ; Double_t fMinimum;  Minimum value for plotting. ;  ; Int_t fNcells;  Number of bins(1D), cells (2D) +U/Overflows. ;  ; Double_t fNormFactor;  Normalization factor. ;  ; TString fOption;  Histogram options. ;  ; TVirtualHistPainter * fPainter;  ! Pointer to histogram painter ;  ; EStatOverflows fStatOverflows;  Per object flag to use under/overflows in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLTH3Composition.html:60111,error,errors,60111,doc/master/classTGLTH3Composition.html,https://root.cern,https://root.cern/doc/master/classTGLTH3Composition.html,7,['error'],['errors']
Availability,"entation of this file. 1// @(#)root/hist:$Id$; 2// Author: Rene Brun 29/09/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#include ""TProfile.h""; 13#include ""TBuffer.h""; 14#include ""TMath.h""; 15#include ""TF1.h""; 16#include ""THLimitsFinder.h""; 17#include <iostream>; 18#include ""TError.h""; 19#include ""TClass.h""; 20#include ""TObjString.h""; 21 ; 22#include ""TProfileHelper.h""; 23 ; 24Bool_t TProfile::fgApproximate = kFALSE;; 25 ; 26ClassImp(TProfile);; 27 ; 28/** \class TProfile; 29 \ingroup Histograms; 30 Profile Histogram.; 31 Profile histograms are used to display the mean; 32 value of Y and its error for each bin in X. The displayed error is by default the; 33 standard error on the mean (i.e. the standard deviation divided by the sqrt(n) ).; 34 Profile histograms are in many cases an; 35 elegant replacement of two-dimensional histograms. The inter-relation of two; 36 measured quantities X and Y can always be visualized by a two-dimensional; 37 histogram or scatter plot, but if Y is an unknown (but single-valued); 38 approximate function of X, this function is displayed by a profile histogram with; 39 much better precision than by a scatter plot.; 40 ; 41 The following formulae show the cumulated contents (capital letters) and the values; 42 displayed by the printing or plotting routines (small letters) of the elements for bin j.; 43 \f[; 44 \begin{align}; 45 H(j) &= \sum w \cdot Y \\; 46 E(j) &= \sum w \cdot Y^2 \\; 47 W(j) &= \sum w & &\text{if weights different from 1, the number of bin effective entries is used} \\; 48 h(j) &= H(j) / W(j) & &\text{mean of Y,} \\; 49 s(j) &= \sqrt{E(j)/W(j)- h(j)^2} & &\text{standard deviation of Y} ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile_8cxx_source.html:1137,error,error,1137,doc/master/TProfile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile_8cxx_source.html,2,['error'],['error']
Availability,"entation; Int_tTF1::fNsaveNumber of points used to fill array fSave; Int_tTFormula::fNstringNumber of different constants character strings; Int_tTFormula::fNumberformula number identifier; Int_tTFormula::fNvalNumber of different variables in expression; TOperOffset*TFormula::fOperOffset![fNOperOptimized] Offsets of operrands; Int_t*TFormula::fOperOptimized![fNOperOptimized] List of operators. (See documentation for changes made at version 7); G__p2memfuncTFormula::fOptimal!pointer to optimal function; Double_t*TF1::fParErrors[fNpar] Array of errors of the fNpar parameters; Double_t*TF1::fParMax[fNpar] Array of upper limits of the fNpar parameters; Double_t*TF1::fParMin[fNpar] Array of lower limits of the fNpar parameters; Double_t*TFormula::fParams[fNpar] Array of fNpar parameters; TObject*TF1::fParent!Parent object hooking this function (if one); TFormulaPrimitive**TFormula::fPredefined![fNPar] predefined function ; Double_t*TF1::fSave[fNsave] Array of fNsave function values; TStringTNamed::fTitleobject title; Int_tTF1::fType(=0 for standard functions, 1 if pointer to function); Double_tTF1::fXmaxUpper bounds for the range; Double_tTF1::fXminLower bounds for the range; Double_tTF2::fYmaxUpper bound for the range in y; Double_tTF2::fYminLower bound for the range in y; Double_tfZmaxUpper bound for the range in z; Double_tfZminLower bound for the range in z; static Bool_tTF1::fgAbsValueuse absolute value of function when computing integral; static TF1*TF1::fgCurrentpointer to current function being processed; static Bool_tTF1::fgRejectPointTrue if point must be rejected in a fit. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TF3(); F3 default constructor*-*-*-*-*-*-; *-* ======================. TF3(const char* name, const char* formula, Double_t xmin = 0, Double_t xmax = 1, Double_t ymin = 0, Double_t ymax = 1, Double_t zmin = 0, Double_t zmax = 1); F3 constructor using a formula definition*-*-*-*-; *-* ====================",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TF3.html:24824,error,errors,24824,root/html528/TF3.html,https://root.cern,https://root.cern/root/html528/TF3.html,6,['error'],['errors']
Availability,"ented by a multi-dimensional gradient function interface; (ROOT::Math::IMultiGenFunction) and optionally the initial parameters; See also note above for the initial parameters for FitFCN. bool FitFCN(ROOT::Fit::Fitter::MinuitFCN_t fcn, int npar = 0, const double* params = 0, unsigned int dataSize = 0, bool chi2fit = false). bool EvalFCN(). Perform a simple FCN evaluation. FitResult will be modified and contain the value of the FCN. bool LinearFit(const ROOT::Fit::BinData& data). do a linear fit on a set of bin-data. { return DoLinearFit(data); }. void SetFunction(const IModelFunction & func, bool useGradient = false). Set the fitted function (model function) from a parametric function interface. void SetFunction(const IModel1DFunction & func, bool useGradient = false). Set the fitted function from a parametric 1D function interface. bool CalculateHessErrors(). perform an error analysis on the result using the Hessian; Errors are obtaied from the inverse of the Hessian matrix; To be called only after fitting and when a minimizer supporting the Hessian calculations is used; otherwise an error (false) is returned.; A new FitResult with the Hessian result will be produced. bool CalculateMinosErrors(). perform an error analysis on the result using MINOS; To be called only after fitting and when a minimizer supporting MINOS is used; otherwise an error (false) is returned.; The result will be appended in the fit result class; Optionally a vector of parameter indeces can be passed for selecting; the parameters to analyse using FitConfig::SetMinosErrors. bool IsBinFit() const. query if fit is binned. In cse of false teh fit can be unbinned; or is not defined (like in case of fitting through a ::FitFCN). { return fBinFit; }. ROOT::Math::Minimizer * GetMinimizer() const. return pointer to last used minimizer; (is NULL in case fit is not yet done); This pointer will be valid as far as the data, the objective function; and the fitter class have not been deleted.; To be used only",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Fit__Fitter.html:11710,error,error,11710,root/html532/ROOT__Fit__Fitter.html,https://root.cern,https://root.cern/root/html532/ROOT__Fit__Fitter.html,15,"['Error', 'error']","['Errors', 'error']"
Availability,"ented from TH1.; Reimplemented in TProfile3D.; Definition at line 267 of file TH1.h. ◆ GetBinContent() [4/4]. Double_t TH3::GetBinContent ; (; Int_t ; binx, . Int_t ; biny, . Int_t ; binz . ); const. inlineoverridevirtual . Reimplemented from TH1.; Reimplemented in TProfile3D.; Definition at line 101 of file TH3.h. ◆ GetBinErrorLow() [1/2]. Double_t TH1::GetBinErrorLow ; (; Int_t ; bin); const. virtual . Return lower error associated to bin number bin. ; The error will depend on the statistic option used will return the binContent - lower interval value ; Reimplemented from TH1.; Definition at line 271 of file TH1.cxx. ◆ GetBinErrorLow() [2/2]. virtual Double_t TH3::GetBinErrorLow ; (; Int_t ; binx, . Int_t ; biny, . Int_t ; binz . ). inlinevirtual . Definition at line 104 of file TH3.h. ◆ GetBinErrorUp() [1/2]. Double_t TH1::GetBinErrorUp ; (; Int_t ; bin); const. virtual . Return upper error associated to bin number bin. ; The error will depend on the statistic option used will return the binContent - upper interval value ; Reimplemented from TH1.; Definition at line 272 of file TH1.cxx. ◆ GetBinErrorUp() [2/2]. virtual Double_t TH3::GetBinErrorUp ; (; Int_t ; binx, . Int_t ; biny, . Int_t ; binz . ). inlinevirtual . Definition at line 105 of file TH3.h. ◆ GetBinWithContent3(). Double_t TH3::GetBinWithContent3 ; (; Double_t ; c, . Int_t & ; binx, . Int_t & ; biny, . Int_t & ; binz, . Int_t ; firstx = 0, . Int_t ; lastx = 0, . Int_t ; firsty = 0, . Int_t ; lasty = 0, . Int_t ; firstz = 0, . Int_t ; lastz = 0, . Double_t ; maxdiff = 0 . ); const. virtual . Compute first cell (binx,biny,binz) in the range [firstx,lastx](firsty,lasty][firstz,lastz] for which diff = abs(cell_content-c) <= maxdiff In case several cells in the specified range with diff=0 are found the first cell found is returned in binx,biny,binz. ; In case several cells in the specified range satisfy diff <=maxdiff the cell with the smallest difference is returned in binx,biny,binz. In all cases the fun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3.html:81261,error,error,81261,doc/master/classTH3.html,https://root.cern,https://root.cern/doc/master/classTH3.html,1,['error'],['error']
Availability,"ented in TH2Poly.; Definition at line 9206 of file TH1.cxx. ◆ SetBinError() [2/3]. void TH1::SetBinError ; (; Int_t ; binx, . Int_t ; biny, . Double_t ; error . ). virtual . See convention for numbering bins in TH1::GetBin. ; Reimplemented in TH2Poly.; Definition at line 9241 of file TH1.cxx. ◆ SetBinError() [3/3]. void TH1::SetBinError ; (; Int_t ; binx, . Int_t ; biny, . Int_t ; binz, . Double_t ; error . ). virtual . See convention for numbering bins in TH1::GetBin. ; Reimplemented in TH2Poly.; Definition at line 9251 of file TH1.cxx. ◆ SetBinErrorOption(). virtual void TH1::SetBinErrorOption ; (; EBinErrorOpt ; type). inlinevirtual . Definition at line 381 of file TH1.h. ◆ SetBins() [1/6]. void TH1::SetBins ; (; Int_t ; nx, . const Double_t * ; xBins . ). virtual . Redefine x axis parameters with variable bin sizes. ; The X axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange xBins is supposed to be of length nx+1 ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 8794 of file TH1.cxx. ◆ SetBins() [2/6]. void TH1::SetBins ; (; Int_t ; nx, . const Double_t * ; xBins, . Int_t ; ny, . const Double_t * ; yBins . ). virtual . Redefine x and y axis parameters with variable bin sizes. ; The X and Y axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange xBins is supposed to be of length nx+1, yBins is supposed to be of length ny+1 ; Reimplemented in TProfile2D, TProfile, and TProfile3D.; Definition at line 8848 of file TH1.cxx. ◆ SetBins() [3/6]. void TH1::SetBins ; (; Int_t ; nx, . const Double_t * ; xBins, . Int_t ; ny, . const Double_t * ; yBins, . Int_t ; nz, . const Double_t * ; zBins . ). virtual . Redefine x, y and z axis parameters with variable bin sizes. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:205196,error,errors,205196,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,2,['error'],['errors']
Availability,"ented in the GSL library. It supports several integration methods that can be chosen in construction time. The default type is adaptive integration with singularity applying a Gauss-Kronrod 21-point integration rule. For a detail description of the GSL methods visit the GSL user guide This class implements the best algorithms for numerical integration for one dimensional functions. We encourage the use it as the main option, bearing in mind that it uses code from the GSL library, wich is provided in the MathMore library of ROOT.; The interface to use is the same as above. We have now the possibility to specify a different integration algorithm in the constructor of the ROOT::Math::GSLIntegrator class.; // create the adaptive integrator with the 51 point rule; ROOT::Math::GSLIntegrator ig(ROOT::Math::Integration::kADAPTIVE, ROOT::Math::Integration::kGAUSS51);; ig.SetRelTolerance(1.E-6); // set relative tolerance; ig.SetAbsTolerance(1.E-6); // set absoulte tolerance; The algorithm is controlled by the given absolute and relative tolerance. The iterations are continued until the following condition is satisfied \[; absErr <= max ( epsAbs, epsRel * Integral); \] Where absErr is an estimate of the absolute error (it can be retrieved with GSLIntegrator::Error()) and Integral is the estimate of the function integral (it can be obtained with GSLIntegrator::Result()); The possible integration algorithm types to use with the GSLIntegrator are the following. More information is provided in the GSL users documentation. * ROOT::Math::Integration::kNONADAPTIVE : based on gsl_integration_qng. It is a non-adaptive procedure which uses fixed Gauss-Kronrod-Patterson abscissae to sample the integrand at a maximum of 87 points. It is provided for fast integration of smooth functions. * ROOT::Math::Integration::kADAPTIVE: based on gsl_integration_qag. It is an adaptiva Gauss-Kronrod integration algorithm, the integration region is divided into subintervals, and on each iteration the sub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:706785,toler,tolerance,706785,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,4,['toler'],['tolerance']
Availability,"ented lines) are ignored.; If nfiles > 0 only nfiles files are added, starting from file 'firstfile' (>= 1).; The method returns the number of added files. Int_t Add(const char* path); Add all files matching the specified pattern to the collection.; 'dir' can include wildcards after the last slash, which causes all; matching files in that directory to be added.; If dir is the full path of a file, only one element is added.; Return value is the number of added files. Int_t RemoveDuplicates(); Remove duplicates based on the UUID, typically after a verification.; Return the number of entries removed. TFileCollection * GetStagedSubset(); Creates a subset of the files that have the kStaged & !kCorrupted bit set. Long64_t Merge(TCollection* list); merge all TFileCollection objects in li into this TFileCollection object. Int_t Update(Long64_t avgsize = -1); Update accumulated information about the elements of the collection; (e.g. fTotalSize). If 'avgsize' > 0, use an average file size of 'avgsize'; bytes when the size info is not available.; Also updates the meta data information by summarizing; the meta data of the contained objects.; Return -1 in case of any failure, 0 if the total size is exact, 1 if; incomplete, 2 if complete but (at least partially) estimated. void Print(Option_t* option = """") const; Prints the contents of the TFileCollection.; If option contains:; 'M' print global meta information; 'F' print all the files in the collection in compact form; (current url, default tree name|class|entries, md5); 'L' together with 'F', print all the files in the collection; in long form (uuid, md5, all URLs, all meta objects; on; many lines). void SetAnchor(const char* anchor); Calls TUrl::SetAnchor() for all URLs contained in all TFileInfos. void SetBitAll(UInt_t f); Set the bit for all TFileInfos. void ResetBitAll(UInt_t f); Reset the bit for all TFileInfos. const char * GetDefaultTreeName() const; Returns the tree set with SetDefaultTreeName if set; Returns the name o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFileCollection.html:9086,avail,available,9086,root/html528/TFileCollection.html,https://root.cern,https://root.cern/root/html528/TFileCollection.html,2,['avail'],['available']
Availability,"entity as the URL; in memory. TProofMgr::MatchUrl cannot be used here because of the; 'double' default port, implying an additional check on the port effectively; open. void ShowWorkers(); Show available workers. TList * QuerySessions(Option_t* opt = ""S""); Get list of sessions accessible to this manager. Bool_t HandleInput(const void* ); Handle asynchronous input on the socket. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Int_t Reset(Bool_t hard = kFALSE, const char* usr = 0); Send a cleanup request for the sessions associated with the current user.; If 'hard' is true sessions are signalled for termination and moved to; terminate at all stages (top master, sub-master, workers). Otherwise; (default) only top-master sessions are asked to terminate, triggering; a gentle session termination. In all cases all sessions should be gone; after a few (2 or 3) session checking cycles.; A user with superuser privileges can also asks cleaning for an different; user, specified by 'usr', or for all users (usr = *); Return 0 on success, -1 in case of error. TProofLog * GetSessionLogs(Int_t ridx = 0, const char* stag = 0, const char* pattern = ""-v \""| SvcMsg\""""); Get logs or log tails from last session associated with this manager; instance.; The arguments allow to specify a session different from the last one:; isess specifies a position relative to the last one, i.e. 1; for the next to last session; the absolute value is taken; so -1 and 1 are equivalent.; stag specifies the unique tag of the wanted session; The special value stag = ""NR"" allows to just initialize the TProofLog; object w/o retrieving the files; this may be useful when the number; of workers is large and only a subset of logs is required.; If 'stag' is specified 'isess' is ignored (unless stag = ""NR"").; If 'pattern' is specified only the lines containing it are retrieved; (remote grep functionality); to filter out a pattern 'pat' use; pattern = ""-v pat"".; Returns a TProofLog object (to be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXProofMgr.html:11519,error,error,11519,root/html528/TXProofMgr.html,https://root.cern,https://root.cern/root/html528/TXProofMgr.html,1,['error'],['error']
Availability,"entity as the URL; in memory. TProofMgr::MatchUrl cannot be used here because of the; 'double' default port, implying an additional check on the port effectively; open. void ShowWorkers(); Show available workers. TList * QuerySessions(Option_t* opt = ""S""); Get list of sessions accessible to this manager. Bool_t HandleInput(const void* ); Handle asynchronous input on the socket. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Int_t Reset(Bool_t hard = kFALSE, const char* usr = 0); Send a cleanup request for the sessions associated with the current user.; If 'hard' is true sessions are signalled for termination and moved to; terminate at all stages (top master, sub-master, workers). Otherwise; (default) only top-master sessions are asked to terminate, triggering; a gentle session termination. In all cases all sessions should be gone; after a few (2 or 3) session checking cycles.; A user with superuser privileges can also asks cleaning for an different; user, specified by 'usr', or for all users (usr = *); Return 0 on success, -1 in case of error. TProofLog * GetSessionLogs(Int_t ridx = 0, const char* stag = 0, const char* pattern = ""-v \""| SvcMsg\"""", Bool_t rescan = kFALSE); Get logs or log tails from last session associated with this manager; instance.; The arguments allow to specify a session different from the last one:; isess specifies a position relative to the last one, i.e. 1; for the next to last session; the absolute value is taken; so -1 and 1 are equivalent.; stag specifies the unique tag of the wanted session; The special value stag = ""NR"" allows to just initialize the TProofLog; object w/o retrieving the files; this may be useful when the number; of workers is large and only a subset of logs is required.; If 'stag' is specified 'isess' is ignored (unless stag = ""NR"").; If 'pattern' is specified only the lines containing it are retrieved; (remote grep functionality); to filter out a pattern 'pat' use; pattern = ""-v pat"".; If 'resca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TXProofMgr.html:11636,error,error,11636,root/html530/TXProofMgr.html,https://root.cern,https://root.cern/root/html530/TXProofMgr.html,3,['error'],['error']
Availability,"ently visible. ; Definition at line 71 of file TGHtmlForm.cxx. ◆ MaxIndex(). void TGHtml::MaxIndex ; (; TGHtmlElement * ; p, . int * ; pIndex, . int ; isLast . ). protected . Find the maximum index for the given token. ; Definition at line 97 of file TGHtmlIndex.cxx. ◆ MinMax(). TGHtmlElement * TGHtml::MinMax ; (; TGHtmlElement * ; p, . int * ; pMin, . int * ; pMax, . int ; lineWidth, . int ; hasbg . ). protected . Given a list of elements, compute the minimum and maximum width needed to render the list. ; Stop the search at the first element seen that is in the following set: <tr> <td> <th> </tr> </td> </th> </table>; Return a pointer to the element that stopped the search, or to NULL if we ran out of data.; Sometimes the value returned for both min and max will be larger than the true minimum and maximum. This is rare, and only occurs if the element string contains figures with flow-around text.; p - Start the search here pMin - Return the minimum width here pMax - Return the maximum width here lineWidth - Total width available ; Definition at line 878 of file TGHtmlTable.cxx. ◆ MouseDown(). virtual void TGHtml::MouseDown ; (; const char * ; uri). inlinevirtual . Definition at line 1120 of file TGHtml.h. ◆ MouseOver(). virtual void TGHtml::MouseOver ; (; const char * ; uri). inlinevirtual . Definition at line 1119 of file TGHtml.h. ◆ MoveVertically(). void TGHtml::MoveVertically ; (; TGHtmlElement * ; p, . TGHtmlElement * ; pLast1, . int ; dy . ). Move all elements in the given list vertically by the amount dy. ; p - First element to move pLast1 - Last element. Do move this one dy - Amount by which to move ; Definition at line 1542 of file TGHtmlTable.cxx. ◆ NameToPmap(). SHtmlTokenMap_t * TGHtml::NameToPmap ; (; char * ; zType). protected . Returns token map matching zType name. ; Definition at line 1282 of file TGHtmlParse.cxx. ◆ NameToType(). int TGHtml::NameToType ; (; char * ; zType). protected . Convert a markup name into a type integer. ; Definition at line ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtml.html:78587,avail,available,78587,doc/master/classTGHtml.html,https://root.cern,https://root.cern/doc/master/classTGHtml.html,1,['avail'],['available']
Availability,"ents ; (; Option_t * ; opt); const. overridevirtual . Mapping of Print() option string to RooPrintable contents specifications. ; Reimplemented from RooAbsArg.; Definition at line 820 of file RooRealVar.cxx. ◆ deleteSharedProperties(). void RooRealVar::deleteSharedProperties ; (; ). Stop sharing properties. ; Definition at line 1318 of file RooRealVar.cxx. ◆ errorVar(). RooErrorVar * RooRealVar::errorVar ; (; ); const. Return a RooAbsRealLValue representing the error associated with this variable. ; The callers takes ownership of the return object ; Definition at line 278 of file RooRealVar.cxx. ◆ evaluate(). double RooRealVar::evaluate ; (; ); const. inlineoverrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 145 of file RooRealVar.h. ◆ fillTreeBranch(). void RooRealVar::fillTreeBranch ; (; TTree & ; t). overrideprotectedvirtual . Overload RooAbsReal::fillTreeBranch to also fill tree branches with (asymmetric) errors if requested. ; Reimplemented from RooAbsReal.; Definition at line 1155 of file RooRealVar.cxx. ◆ format() [1/2]. TString * RooRealVar::format ; (; const RooCmdArg & ; formatArg); const. Format contents of RooRealVar for pretty printing on RooPlot parameter boxes. ; This function processes the named arguments taken by paramOn() and translates them to an option string parsed by RooRealVar::format(Int_t sigDigits, const char *options) ; Definition at line 849 of file RooRealVar.cxx. ◆ format() [2/2]. TString * RooRealVar::format ; (; Int_t ; sigDigits, . const char * ; options . ); const. Format numeric value of RooRealVar and its error in a variety of ways. ; To control what is shown use the following options N = show name T = show title (takes precedent over N, falls back to N if title is empty) H = hide value E = show error A = show asymmetric error instead of parabolic error (if available) U = show unit; To control how it is shown use these optio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealVar.html:78704,error,errors,78704,doc/master/classRooRealVar.html,https://root.cern,https://root.cern/doc/master/classRooRealVar.html,1,['error'],['errors']
Availability,"ents ROOT::Math::Minimizer.; Definition at line 84 of file TFumiliMinimizer.h. ◆ NCalls(). unsigned int TFumiliMinimizer::NCalls ; (; ); const. inlineoverridevirtual . number of function calls to reach the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 96 of file TFumiliMinimizer.h. ◆ NDim(). unsigned int TFumiliMinimizer::NDim ; (; ); const. inlineoverridevirtual . this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ; Implements ROOT::Math::Minimizer.; Definition at line 100 of file TFumiliMinimizer.h. ◆ NFree(). unsigned int TFumiliMinimizer::NFree ; (; ); const. inlineoverridevirtual . number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 104 of file TFumiliMinimizer.h. ◆ ProvidesError(). bool TFumiliMinimizer::ProvidesError ; (; ); const. inlineoverridevirtual . minimizer provides error and error matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 107 of file TFumiliMinimizer.h. ◆ SetFixedVariable(). bool TFumiliMinimizer::SetFixedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val . ). overridevirtual . set fixed variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 460 of file TFumiliMinimizer.cxx. ◆ SetFunction(). void TFumiliMinimizer::SetFunction ; (; const ROOT::Math::IMultiGenFunction & ; func). overridevirtual . set the function to minimize ; Implements ROOT::Math::Minimizer.; Definition at line 168 of file TFumiliMinimizer.cxx. ◆ SetLimitedVariable(). bool TFumiliMinimizer::SetLimitedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step, . double ; lower, . double ; upper . ). overridevirtual . set upper/lower limited variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 43",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFumiliMinimizer.html:15789,error,error,15789,doc/master/classTFumiliMinimizer.html,https://root.cern,https://root.cern/doc/master/classTFumiliMinimizer.html,2,['error'],['error']
Availability,"ents corresponding to fix parameters are removed. n: number of variable parameters . Definition at line 945 of file TFumili.cxx. ◆ IsA(). TClass * TFumili::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 114 of file TFumili.h. ◆ IsFixed(). Bool_t TFumili::IsFixed ; (; Int_t ; ipar); const. overridevirtual . Return kTRUE if parameter ipar is fixed, kFALSE otherwise) ; Implements TVirtualFitter.; Definition at line 1060 of file TFumili.cxx. ◆ Minimize(). Int_t TFumili::Minimize ; (; ). Main minimization procedure. ; This function is called after setting theoretical function by means of TFumili::SetUserFunc and initializing parameters. Optionally one can set FCN function (see TFumili::SetFCN and TFumili::Eval) If FCN is undefined then user has to provide data arrays by calling TFumili::SetData procedure.; TFumili::Minimize return following values:; 0 - fit is converged; -2 - function is not decreasing (or bad derivatives); -3 - error estimations are infinite; -4 - maximum number of iterations is exceeded . Definition at line 1085 of file TFumili.cxx. ◆ PrintResults(). void TFumili::PrintResults ; (; Int_t ; ikode, . Double_t ; p . ); const. overridevirtual . Prints fit results. ; ikode is the type of printing parameters p is function value. ikode = 1 - print values, errors and limits; ikode = 2 - print values, errors and steps; ikode = 3 - print values, errors, steps and derivatives; ikode = 4 - print only values and errors . Implements TVirtualFitter.; Definition at line 1483 of file TFumili.cxx. ◆ ReleaseParameter(). void TFumili::ReleaseParameter ; (; Int_t ; ipar). overridevirtual . Releases parameter number ipar. ; Implements TVirtualFitter.; Definition at line 1586 of file TFumili.cxx. ◆ SetData(). void TFumili::SetData ; (; Double_t * ; exdata, . Int_t ; numpoints, . Int_t ; vecsize . ). Sets pointer to data array provided by user. ; Necessary if SetFCN is not called. numpoints:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFumili.html:36474,error,error,36474,doc/master/classTFumili.html,https://root.cern,https://root.cern/doc/master/classTFumili.html,1,['error'],['error']
Availability,"ents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealSumFunc.html:45854,error,error,45854,doc/master/classRooRealSumFunc.html,https://root.cern,https://root.cern/doc/master/classRooRealSumFunc.html,1,['error'],['error']
Availability,"ents of supplied RooDataSet to this dataset for given index category state name.; In this mode, no data is copied and the linked dataset must be remain live for the duration; of this dataset. Note that link is active for both reading and writing, so modifications; to the aggregate dataset will also modify its components. Link() and Import() are mutually exclusive. Import(map<string,RooDataSet*>&) -- As above, but allows specification of many imports in a single operation; Link(map<string,RooDataSet*>&) -- As above, but allows specification of many links in a single operation. Cut(const char*) -- Apply the given cut specification when importing data; Cut(RooFormulaVar&). CutRange(const char*) -- Only accept events in the observable range with the given name. WeightVar(const char*) -- Interpret the given variable as event weight rather than as observable; WeightVar(const RooAbsArg&). StoreError(const RooArgSet&) -- Store symmetric error along with value for given subset of observables; StoreAsymError(const RooArgSet&) -- Store asymmetric error along with value for given subset of observables. RooDataSet(const char* name, const char* title, const RooArgSet& vars, const char* wgtVarName = 0); Constructor of an empty data set from a RooArgSet defining the dimensions; of the data space. RooDataSet(const char* name, const char* title, RooDataSet* data, const RooArgSet& vars, const char* cuts = 0, const char* wgtVarName = 0); Constructor of a data set from (part of) an existing data; set. The dimensions of the data set are defined by the 'vars'; RooArgSet, which can be identical to 'dset' dimensions, or a; subset thereof. The 'cuts' string is an optional RooFormula; expression and can be used to select the subset of the data; points in 'dset' to be copied. The cut expression can refer to; any variable in the source dataset. For cuts involving variables; other than those contained in the source data set, such as; intermediate formula objects, use the equivalent constructor; a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooDataSet.html:19526,error,error,19526,root/html528/RooDataSet.html,https://root.cern,https://root.cern/root/html528/RooDataSet.html,2,['error'],['error']
Availability,ents that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAICRegistryRooAbsAnaConvPdf::_codeReg! Registry of analytical integration codes; RooObjCacheManagerRooAbsAnaConvPdf::_coefNormMgrCoefficient normalization manager; RooArgSet*RooAbsAnaConvPdf::_convNormSet! Subset of last normalization that applies to convolutions; RooListProxyRooAbsAnaConvPdf::_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*RooAbsAnaConvPdf::_convSetIter! Iterator over _convNormSet; RooRealVar*RooAbsAnaConvPdf::_convVar! Convolution variable; RooRealProxy_correctQ; RooRealProxy_delC; RooRealProxy_delS; RooRealProxy_delW; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooRealProxy_dm; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; Double_t_genB0Frac; Double_t_genRhoPlusFrac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooResolutionModel*RooAbsAnaConvPdf::_model! Original resolution model; static Int_tRooPri,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNonCPEigenDecay.html:39323,error,errors,39323,root/html526/RooNonCPEigenDecay.html,https://root.cern,https://root.cern/root/html526/RooNonCPEigenDecay.html,5,['error'],['errors']
Availability,"ents(nset), sumEntriesW2, doOffset);; 728}; 729 ; 730double RooAbsPdf::extendedTerm(double sumEntries, double expected, double sumEntriesW2, bool doOffset) const; 731{; 732 // check if this PDF supports extended maximum likelihood fits; 733 if(!canBeExtended()) {; 734 coutE(InputArguments) << GetName() << "": this PDF does not support extended maximum likelihood""; 735 << std::endl;; 736 return 0.0;; 737 }; 738 ; 739 if(expected < 0.0) {; 740 coutE(InputArguments) << GetName() << "": calculated negative expected events: "" << expected; 741 << std::endl;; 742 logEvalError(""extendedTerm #expected events is <0 return a NaN"");; 743 return TMath::QuietNaN();; 744 }; 745 ; 746 ; 747 // Explicitly handle case Nobs=Nexp=0; 748 if (std::abs(expected)<1e-10 && std::abs(sumEntries)<1e-10) {; 749 return 0.0;; 750 }; 751 ; 752 // Check for errors in Nexpected; 753 if (TMath::IsNaN(expected)) {; 754 logEvalError(""extendedTerm #expected events is a NaN"") ;; 755 return TMath::QuietNaN() ;; 756 }; 757 ; 758 double extra = doOffset; 759 ? (expected - sumEntries) - sumEntries * (std::log(expected) - std::log(sumEntries)); 760 : expected - sumEntries * std::log(expected);; 761 ; 762 if(sumEntriesW2 != 0.0) {; 763 extra *= sumEntriesW2 / sumEntries;; 764 }; 765 ; 766 return extra;; 767}; 768 ; 769////////////////////////////////////////////////////////////////////////////////; 770/// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); 771/// of this PDF for the given number of observed events.; 772///; 773/// This function is a wrapper around; 774/// RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const,; 775/// where the number of observed events and observables to be used as the; 776/// normalization set for the pdf is extracted from a RooAbsData.; 777///; 778/// For successful operation, the PDF implementation must indicate that; 779/// it is extendable by overloading `canBeExtended()`, and must; 780/// impl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:29899,error,errors,29899,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['error'],['errors']
Availability,"ents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet const &, RooArgSet &) const;  ; virtual Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; virtual bool isDirectGenSafe (const RooAbsArg &arg) const;  Check if given observable can be safely generated using the pdfs internal generator mechanism (if that existsP). ;  ; bool mustBeExtended () con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooResolutionModel.html:12390,error,error,12390,doc/master/classRooResolutionModel.html,https://root.cern,https://root.cern/doc/master/classRooResolutionModel.html,1,['error'],['error']
Availability,"ents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet const &, RooArgSet &) const;  ; virtual Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Return current value, normalized by integrating over the observables in nset. ;  ; virtual bool isDirectGenSafe (const RooAbsA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classxRooProjectedPdf.html:9841,error,error,9841,doc/master/classxRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classxRooProjectedPdf.html,2,['error'],['error']
Availability,"ents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet const &, RooArgSet &) const;  ; virtual Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Return current value, normalized by integrating over the observables in nset. ;  ; virtual void initGenerator (Int_t code);  I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBreitWigner.html:9118,error,error,9118,doc/master/classRooBreitWigner.html,https://root.cern,https://root.cern/doc/master/classRooBreitWigner.html,45,['error'],['error']
Availability,"ents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet const &, RooArgSet &) const;  ; virtual Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; TClass * IsA () const override;  ; virtual bool isDirectG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNormalizedPdf.html:9069,error,error,9069,doc/master/classRooNormalizedPdf.html,https://root.cern,https://root.cern/doc/master/classRooNormalizedPdf.html,1,['error'],['error']
Availability,"ents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet const &, RooArgSet &) const;  ; virtual Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; virtual bool isDirectGenSafe (const RooAbsArg &arg) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMomentMorph.html:11331,error,error,11331,doc/master/classRooMomentMorph.html,https://root.cern,https://root.cern/doc/master/classRooMomentMorph.html,2,['error'],['error']
Availability,"ents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:49030,error,error,49030,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,2,['error'],['error']
Availability,"ents. Only bins in the bins range are considered.; By default the integral is computed as the sum of bin contents in the range.; if option ""width"" is specified, the integral is the sum of; the bin contents multiplied by the bin width in x, y and in z. Double_t Integral(Int_t binx1, Int_t binx2, Int_t biny1, Int_t biny2, Int_t binz1, Int_t binz2, Option_t* option = """") const; Return integral of bin contents in range [binx1,binx2],[biny1,biny2],[binz1,binz2]; for a 3-D histogram; By default the integral is computed as the sum of bin contents in the range.; if option ""width"" is specified, the integral is the sum of; the bin contents multiplied by the bin width in x, y and in z. Double_t IntegralAndError(Int_t binx1, Int_t binx2, Int_t biny1, Int_t biny2, Int_t binz1, Int_t binz2, Double_t& err, Option_t* option = """") const; Return integral of bin contents in range [binx1,binx2],[biny1,biny2],[binz1,binz2]; for a 3-D histogram. Calculates also the integral error using error propagation; from the bin errors assumming that all the bins are uncorrelated.; By default the integral is computed as the sum of bin contents in the range.; if option ""width"" is specified, the integral is the sum of; the bin contents multiplied by the bin width in x, y and in z. Double_t Interpolate(Double_t x). Double_t Interpolate(Double_t x, Double_t y). Double_t Interpolate(Double_t x, Double_t y, Double_t z); Given a point P(x,y,z), Interpolate approximates the value via trilinear interpolation; based on the 8 nearest bin center points ( corner of the cube surronding the points); The Algorithm is described in http://en.wikipedia.org/wiki/Trilinear_interpolation; The given values (x,y,z) must be between first bin center and last bin center for each coordinate:. fXAxis.GetBinCenter(1) < x < fXaxis.GetBinCenter(nbinX) AND; fYAxis.GetBinCenter(1) < y < fYaxis.GetBinCenter(nbinY) AND; fZAxis.GetBinCenter(1) < z < fZaxis.GetBinCenter(nbinZ). Double_t KolmogorovTest(const TH1* h2, Option_t* option = """,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH3.html:35549,error,error,35549,root/html528/TH3.html,https://root.cern,https://root.cern/root/html528/TH3.html,18,['error'],"['error', 'errors']"
Availability,"ents. Only bins in the bins range are considered.; By default the integral is computed as the sum of bin contents in the range.; if option ""width"" is specified, the integral is the sum of; the bin contents multiplied by the bin width in x, y and in z. Double_t Integral(Int_t binx1, Int_t binx2, Int_t biny1, Int_t biny2, Int_t binz1, Int_t binz2, Option_t* option = """") const; Return integral of bin contents in range [binx1,binx2],[biny1,biny2],[binz1,binz2]; for a 3-D histogram; By default the integral is computed as the sum of bin contents in the range.; if option ""width"" is specified, the integral is the sum of; the bin contents multiplied by the bin width in x, y and in z. Double_t IntegralAndError(Int_t binx1, Int_t binx2, Int_t biny1, Int_t biny2, Int_t binz1, Int_t binz2, Double_t& err, Option_t* option = """") const; Return integral of bin contents in range [binx1,binx2],[biny1,biny2],[binz1,binz2]; for a 3-D histogram. Calculates also the integral error using error propagation; from the bin errors assumming that all the bins are uncorrelated.; By default the integral is computed as the sum of bin contents in the range.; if option ""width"" is specified, the integral is the sum of; the bin contents multiplied by the bin width in x, y and in z. Double_t Interpolate(Double_t x); Not yet implemented. Double_t Interpolate(Double_t x, Double_t y); Not yet implemented. Double_t Interpolate(Double_t x, Double_t y, Double_t z); Given a point P(x,y,z), Interpolate approximates the value via trilinear interpolation; based on the 8 nearest bin center points ( corner of the cube surronding the points); The Algorithm is described in http://en.wikipedia.org/wiki/Trilinear_interpolation; The given values (x,y,z) must be between first bin center and last bin center for each coordinate:. fXAxis.GetBinCenter(1) < x < fXaxis.GetBinCenter(nbinX) AND; fYAxis.GetBinCenter(1) < y < fYaxis.GetBinCenter(nbinY) AND; fZAxis.GetBinCenter(1) < z < fZaxis.GetBinCenter(nbinZ). Double_t Kolmogor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH3.html:39875,error,error,39875,root/html602/TH3.html,https://root.cern,https://root.cern/root/html602/TH3.html,12,['error'],"['error', 'errors']"
Availability,"ents; kEditDisableGrab; kEditDisableLayout; kEditDisableResize; kEditDisableHeight; kEditDisableWidth; kEditDisableBtnEnable; kEditDisableKeyEnable; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TGComboBox*f2DMode; TGCheckButton*fAutoRebin; Bool_tTGedFrame::fAvoidSignalflag for executing slots; Pixel_tTGFrame::fBackgroundframe background color; Int_tTGFrame::fBorderWidthframe border width; TGComboBox*fBoxMode; TEveGValuator*fCell2DTextMin; TGClient*TGObject::fClientConnection to display server; Int_tTGFrame::fDNDStateEDNDFlags; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; UInt_tTGFrame::fEventMaskcurrenty active event mask; TList*TGedFrame::fExtraTabsaddtional tabs in ged editor; TGFrameElement*TGFrame::fFEpointer to frame element; TGColorSelect*fFontColor; TGedEditor*TGedFrame::fGedEditormanager of this frame; TGColorSelect*fGridColor; UInt_tTGFrame::fHeightframe height; Handle_tTGObject::fIdX11/Win32 Window identifier; Bool_tTGedFrame::fInitinit flag for setting signals/slots; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TList*TGCompositeFrame::fListcontainer of frame elements; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TEveCaloLego*fMModel object.; Bool_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; TClass*TGedFrame::fModelClassclass corresponding to instantiated GedFrame; Int_tTGCompositeFrame::fMustCleanupcleanup mode (see EFrameCleanup); TStringTGWindow::fNamenam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveCaloLegoEditor.html:17706,mask,mask,17706,root/html528/TEveCaloLegoEditor.html,https://root.cern,https://root.cern/root/html528/TEveCaloLegoEditor.html,6,['mask'],['mask']
Availability,"entvirtual Double_t GetBinContent(Int_t bin) constReturn content of bin number bin.Definition TH1.cxx:5061; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random number from the standard Normal (Gaussian) Distribution with the given mean and sigm...Definition TRandom.cxx:275; c1return c1Definition legend1.C:41; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345. Statistics Display; The type of information shown in the histogram statistics box can be selected with: gStyle->SetOptStat(mode);; The mode has up to nine digits that can be set to on (1 or 2), off (0). mode = ksiourmen (default = 000001111); k = 1; kurtosis printed; k = 2; kurtosis and kurtosis error printed; s = 1; skewness printed; s = 2; skewness and skewness error printed; i = 1; integral of bins printed; i = 2; integral of bins with option ""width"" printed; o = 1; number of overflows printed; u = 1; number of underflows printed; r = 1; standard deviation printed; r = 2; standard deviation and standard deviation error printed; m = 1; mean value printed; m = 2; mean and mean error values printed; e = 1; number of entries printed; n = 1; name of histogram is printed; For example: gStyle->SetOptStat(11);; displays only the name of histogram and the number of entries, whereas: gStyle->SetOptStat(1101);; displays the name of histogram, mean value and standard deviation.; WARNING 1: never do: gStyle->SetOptStat(0001111);; but instead do: gStyle->SetOptStat(1111);; because 0001111 will be taken as an octal number!; WARNING 2: for backward compatibility with older versions gStyle->SetOptStat(1);; is taken as: gStyle->SetOptStat(1111); To print only the name of the histogram do: gStyle->SetOptStat(1000000001);; NOTE that in case of 2D histograms, when selecting only underflow (10000) or overflow (100000), the statistics box will show all combinations of underflow/overflows and not just one single number.; The parameter mode can be any combination of the letters kKsSiIourR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHistPainter.html:23298,error,error,23298,doc/master/classTHistPainter.html,https://root.cern,https://root.cern/doc/master/classTHistPainter.html,4,['error'],['error']
Availability,"enu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TCondor::EStatekSuspended; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TList*fClaimslist of claims we manage; TStringfPoolthe condor pool to be accessed; TCondor::EStatefStateour claim state; Bool_tfValidaccess to Condor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCondor(const char* pool = """"); Create Condor interface object. Uses Condor apps since there is no; API yet. ~TCondor(); Cleanup Condor interface. void Print(Option_t* option = """") const; Print master status. TCondorSlave * ClaimVM(const char* vm, const char* cmd); Claim a VirtualMachine for PROOF usage. TList * GetVirtualMachines() const; Get the names of the virtual machines in the pool.; Return a TList of TObjString or 0 in case of failure. TList * Claim(Int_t n, const char* cmd); Claim n virtual machines; This function figures out the image and performance index before returning; the list of condor slaves. TCondorSlave * Claim(const char* vmname, const char* cmd); Claim virtual machine with name vmname; This function does not figure out the image and performance index before; returning the condor slave. Bool_t SetState(TCondor::EState state); Set the state of workers. Bool_t Suspend(); Suspend worker. Bool_t Resume(); Resume worker. Bool_t Release(); Release worker. Bool_t GetVmInfo(const char* vm, TString& image, Int_t& perfidx) const; Get info about worker status. TString GetImage(const char* host) const; Get image of the worker. TCondor(const char* pool = """"). Bool_t IsValid() const; { return fValid; }. EState GetState() const; {return fState;}. » Author: Maarten Ballintijn 06/12/03 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TCondor.html:6937,failure,failure,6937,root/html602/TCondor.html,https://root.cern,https://root.cern/root/html602/TCondor.html,4,['failure'],['failure']
Availability,"enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TProofServLogHandler (const char *cmd, TSocket *s, const char *pfx="""");  Execute 'cmd' in a pipe and handle output messages from the related file. ;  ;  TProofServLogHandler (FILE *f, TSocket *s, const char *pfx="""");  Handle available message from the open file 'f'. ;  ;  ~TProofServLogHandler () override;  Handle available message in the open file. ;  ; Bool_t IsValid ();  ; Bool_t Notify () override;  Handle available message in the open file. ;  ; Bool_t ReadNotify () override;  Notify when something can be read from the descriptor associated with this handler. ;  ;  Public Member Functions inherited from TFileHandler;  TFileHandler (int fd, int mask);  Create a file descriptor event handler. ;  ; virtual ~TFileHandler ();  ; void Add () override;  Add file event handler to system file handler list. ;  ; int GetFd () const;  ; virtual Bool_t HasReadInterest ();  True if handler is interested in read events. ;  ; virtual Bool_t HasWriteInterest ();  True if handler is interested in write events. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsReadReady () const;  ; virtual Bool_t IsWriteReady () const;  ; void Remove () override;  Remove file event handler from system file handler list. ;  ; virtual void ResetReadyMask ();  ; void SetFd (int fd);  ; virtual void SetInterest (Int_t mask);  Set interest mask to 'mask'. ;  ; virtual void SetReadReady ();  ; virtual void SetWriteReady ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Bool_t WriteNotify ();  Notify when something can be written to t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServLogHandler.html:1860,mask,mask,1860,doc/master/classTProofServLogHandler.html,https://root.cern,https://root.cern/doc/master/classTProofServLogHandler.html,1,['mask'],['mask']
Availability,"enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSpectrumFit (Int_t numberPeaks);  numberPeaks: number of fitted peaks (must be greater than zero) ;  ;  TSpectrumFit (void);  Default constructor. ;  ;  ~TSpectrumFit () override;  Destructor. ;  ; void FitAwmi (Double_t *source);  This function fits the source spectrum. ;  ; void FitStiefel (Double_t *source);  This function fits the source spectrum. ;  ; Double_t * GetAmplitudes () const;  ; Double_t * GetAmplitudesErrors () const;  ; Double_t * GetAreas () const;  ; Double_t * GetAreasErrors () const;  ; void GetBackgroundParameters (Double_t &a0, Double_t &a0Err, Double_t &a1, Double_t &a1Err, Double_t &a2, Double_t &a2Err);  This function gets the background parameters and their errors. ;  ; Double_t GetChi () const;  ; Double_t * GetPositions () const;  ; Double_t * GetPositionsErrors () const;  ; void GetSigma (Double_t &sigma, Double_t &sigmaErr);  This function gets the sigma parameter and its error. ;  ; void GetTailParameters (Double_t &t, Double_t &tErr, Double_t &b, Double_t &bErr, Double_t &s, Double_t &sErr);  This function gets the tail parameters and their errors. ;  ; TClass * IsA () const override;  ; void SetBackgroundParameters (Double_t a0Init, Bool_t fixA0, Double_t a1Init, Bool_t fixA1, Double_t a2Init, Bool_t fixA2);  This function sets the following fitting parameters of background: ;  ; void SetFitParameters (Int_t xmin, Int_t xmax, Int_t numberIterations, Double_t alpha, Int_t statisticType, Int_t alphaOptim, Int_t power, Int_t fitTaylor);  This function sets the following f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrumFit.html:3351,error,errors,3351,doc/master/classTSpectrumFit.html,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html,1,['error'],['errors']
Availability,"en . ). overridevirtual . Read specified byte range from remote file via dCache daemon. ; Returns kTRUE in case of error. ; Reimplemented from TFile.; Definition at line 227 of file TDCacheFile.cxx. ◆ ReadBuffers(). Bool_t TDCacheFile::ReadBuffers ; (; char * ; buf, . Long64_t * ; pos, . Int_t * ; len, . Int_t ; nbuf . ). overridevirtual . Read the nbuf blocks described in arrays pos and len, where pos[i] is the seek position of block i of length len[i]. ; Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer. This function is overloaded by TNetFile, TWebFile, etc. Returns kTRUE in case of failure. ; Reimplemented from TFile.; Definition at line 247 of file TDCacheFile.cxx. ◆ ResetErrno(). void TDCacheFile::ResetErrno ; (; ); const. overridevirtual . Method resetting the dc_errno and errno. ; Reimplemented from TFile.; Definition at line 577 of file TDCacheFile.cxx. ◆ SetOnError(). void TDCacheFile::SetOnError ; (; EOnErrorAction ; a = kOnErrorDefault). static . Set on error handler. ; Definition at line 388 of file TDCacheFile.cxx. ◆ SetOpenTimeout(). void TDCacheFile::SetOpenTimeout ; (; UInt_t ; secs). static . Set file open timeout. ; Definition at line 380 of file TDCacheFile.cxx. ◆ SetReplyHostName(). void TDCacheFile::SetReplyHostName ; (; const char * ; host_name). static . Set reply host name. ; Definition at line 396 of file TDCacheFile.cxx. ◆ Stage(). Bool_t TDCacheFile::Stage ; (; const char * ; path, . UInt_t ; secs, . const char * ; location = 0 . ). static . Stage() returns kTRUE on success and kFALSE on failure. ; Definition at line 340 of file TDCacheFile.cxx. ◆ Streamer(). void TDCacheFile::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TDCacheFile::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 75 of file TDCacheFile.h. ◆ SysClose(). Int_t TDCacheFile::SysClose ; (; Int_t ; fd). overrideprivatevi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDCacheFile.html:46852,error,error,46852,doc/master/classTDCacheFile.html,https://root.cern,https://root.cern/doc/master/classTDCacheFile.html,1,['error'],['error']
Availability,"eoNode* node); Make a daughter of current node current. Can be called only with a valid; daughter node (no check). Updates cache accordingly. void CdUp(); Go one level up in geometry. Updates cache accordingly.; Determine the overlapping state of current node. void CdTop(); Make top level node the current node. Updates the cache accordingly.; Determine the overlapping state of current node. void CdNext(); Do a cd to the node found next by FindNextBoundary. void GetBranchNames(Int_t* names) const; Fill volume names of current branch into an array. void GetBranchNumbers(Int_t* copyNumbers, Int_t* volumeNumbers) const; Fill node copy numbers of current branch into an array. void GetBranchOnlys(Int_t* isonly) const; Fill node copy numbers of current branch into an array. TGeoNode * CrossDivisionCell(); Cross a division cell. Distance to exit contained in fStep, current node; points to the cell node. TGeoNode * CrossBoundaryAndLocate(Bool_t downwards, TGeoNode* skipnode); Cross next boundary and locate within current node; The current point must be on the boundary of fCurrentNode. TGeoNode * FindNextBoundary(Double_t stepmax = TGeoShape::Big(), const char* path = """", Bool_t frombdr = kFALSE); Find distance to next boundary and store it in fStep. Returns node to which this; boundary belongs. If PATH is specified, compute only distance to the node to which; PATH points. If STEPMAX is specified, compute distance only in case fSafety is smaller; than this value. STEPMAX represent the step to be made imposed by other reasons than; geometry (usually physics processes). Therefore in this case this method provides the; answer to the question : ""Is STEPMAX a safe step ?"" returning a NULL node and filling; fStep with a big number.; In case frombdr=kTRUE, the isotropic safety is set to zero.; Note : safety distance for the current point is computed ONLY in case STEPMAX is; specified, otherwise users have to call explicitly TGeoManager::Safety() if; they want this computed for the c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoNavigator.html:14361,down,downwards,14361,root/html534/TGeoNavigator.html,https://root.cern,https://root.cern/root/html534/TGeoNavigator.html,6,['down'],['downwards']
Availability,"eoTube; static TGeoShape::EShapeTypekGeoTubeSeg; static TGeoShape::EShapeTypekGeoVisX; static TGeoShape::EShapeTypekGeoVisY; static TGeoShape::EShapeTypekGeoVisZ; static TGeoShape::EShapeTypekGeoXtru; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; UInt_tfShapeBitsshape bits; Int_tfShapeIdshape id; TStringTNamed::fTitleobject title. private:. static Double_tfgEpsMchMachine round-off error; static TGeoMatrix*fgTransformcurrent transformation matrix that applies to shape. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoShape(); Default constructor. TGeoShape(const char* name); Default constructor. ~TGeoShape(); Destructor. void CheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); Test for shape navigation methods. Summary for test numbers:; 1: DistFromInside/Outside. Sample points inside the shape. Generate; directions randomly in cos(theta). Compute DistFromInside and move the; point with bigger distance. Compute DistFromOutside back from new point.; Plot d-(d1+d2). Double_t ComputeEpsMch(); Compute machine round-off double precision error as the smallest number that; if added to 1.0 is different than 1.0. Double_t EpsMch(); static function returning the machine round-off error. const char * GetName() const; Get the shape name. Int_t ShapeDistancetoPrimitive(Int_t numpoints, Int_t px, Int_t py) const; Returns distance to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoShape.html:18073,error,error,18073,root/html602/TGeoShape.html,https://root.cern,https://root.cern/root/html602/TGeoShape.html,4,['error'],['error']
Availability,"eof() constTNamedvirtual; Sleep(UInt_t milliSec)TSystemvirtual; SplitAclicMode(const char *filename, TString &mode, TString &args, TString &io) constTSystemvirtual; StackTrace()TSystemvirtual; Streamer(TBuffer &) overrideTSystemvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TSysteminline; StripOffProto(const char *path, const char *proto)TSystemprotectedstatic; Symlink(const char *from, const char *to)TSystemvirtual; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; Syslog(ELogLevel level, const char *mess)TSystemvirtual; TempDirectory() constTSystemvirtual; TempFileName(TString &base, const char *dir=nullptr, const char *suffix=nullptr)TSystemvirtual; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; TSystem(const TSystem &)=deleteTSystemprivate; TSystem(const char *name=""Generic"", const char *title=""Generic System"")TSystem; Umask(Int_t mask)TSystemvirtual; UnixPathName(const char *unixpathname)TSystemvirtual; Unlink(const char *name)TSystemvirtual; Unload(const char *module)TSystemvirtual; Unsetenv(const char *name)TSystemvirtual; UseCurrentStyle()TObjectvirtual; Utime(const char *file, Long_t modtime, Long_t actime)TSystemvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Which(const char *search, const char *file, EAccessMode mode=kFileExists)TSystemvirtual; WorkingDirectory()TSystemvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual; ~TSystem()TSystemvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:36 (GVA Time) using Doxygen 1.9.8 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystem-members.html:16269,mask,mask,16269,doc/master/classTSystem-members.html,https://root.cern,https://root.cern/doc/master/classTSystem-members.html,1,['mask'],['mask']
Availability,"eout seconds (timeout = -1 by default, which means wait forever). If defined (>= 0) endtype is the message that stops this collection. ; Definition at line 2696 of file TProof.cxx. ◆ Collect() [4/4]. Int_t TProof::Collect ; (; TMonitor * ; mon, . Long_t ; timeout = -1, . Int_t ; endtype = -1, . Bool_t ; deactonfail = kFALSE . ). private . Collect responses from the slave servers. ; Returns the number of messages received. Can be 0 if there are no active slaves. If timeout >= 0, wait at most timeout seconds (timeout = -1 by default, which means wait forever). If defined (>= 0) endtype is the message that stops this collection. Collect also stops its execution from time to time to check for new workers in Dynamic Startup mode. ; Definition at line 2756 of file TProof.cxx. ◆ CollectInputFrom(). Int_t TProof::CollectInputFrom ; (; TSocket * ; s, . Int_t ; endtype = -1, . Bool_t ; deactonfail = kFALSE . ). private . Collect and analyze available input from socket s. ; Returns 0 on success, -1 if any failure occurs. ; Definition at line 3060 of file TProof.cxx. ◆ CreateDrawFeedback(). TDrawFeedback * TProof::CreateDrawFeedback ; (; ). Draw feedback creation proxy. ; When accessed via TProof avoids link dependency on libProofPlayer. ; Definition at line 10094 of file TProof.cxx. ◆ CreateMerger(). Bool_t TProof::CreateMerger ; (; TSlave * ; sl, . Int_t ; port . ). private . Create a new merger. ; Definition at line 4454 of file TProof.cxx. ◆ CreateSlave(). TSlave * TProof::CreateSlave ; (; const char * ; url, . const char * ; ord, . Int_t ; perf, . const char * ; image, . const char * ; workdir . ). protected . Create a new TSlave of type TSlave::kSlave. ; Note: creation of TSlave is private with TProof as a friend. Derived classes must use this function to create slaves. ; Definition at line 1853 of file TProof.cxx. ◆ CreateSubmaster(). TSlave * TProof::CreateSubmaster ; (; const char * ; url, . const char * ; ord, . const char * ; image, . const char * ; msd, . Int_t ; nw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:79140,failure,failure,79140,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['failure'],['failure']
Availability,"eoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 95 of file TServerSocket.h. ◆ operator=(). void TServerSocket::operator= ; (; const TServerSocket & ; ). private . ◆ Recv() [1/4]. Int_t TServerSocket::Recv ; (; char * ; str, . Int_t ; max . ). inlineoverridevirtual . Receive a character string message of maximum max length. ; The expected message must be of type kMESS_STRING. Returns length of received string (can be 0 if otherside of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented from TSocket.; Definition at line 84 of file TServerSocket.h. ◆ Recv() [2/4]. Int_t TServerSocket::Recv ; (; char * ; str, . Int_t ; max, . Int_t & ; kind . ). inlineoverridevirtual . Receive a character string message of maximum max length. ; Returns in kind the message type. Returns length of received string+4 (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented from TSocket.; Definition at line 86 of file TServerSocket.h. ◆ Recv() [3/4]. Int_t TServerSocket::Recv ; (; Int_t & ; status, . Int_t & ; kind . ). inlineoverridevirtual . Receives a status and a message type. ; Returns length of received integers, 2*sizeof(Int_t) (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented from TSocket.; Definition at line 82 of file TServerSocket.h. ◆ Recv() [4/4]. Int_t TServerSocket::Recv ; (; TMessage *& ; mess). inlineoverridevirtual . Receive a TMessage object. ; The user must delete the TMessage object. Returns length of message in bytes (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read) or -5 if pipe brok",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTServerSocket.html:25792,error,error,25792,doc/master/classTServerSocket.html,https://root.cern,https://root.cern/doc/master/classTServerSocket.html,1,['error'],['error']
Availability,"eoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 203 of file RooFitResult.h. ◆ isIdentical(). bool RooFitResult::isIdentical ; (; const RooFitResult & ; other, . double ; tol = 1e-6, . double ; tolCorr = 1e-4, . bool ; verbose = true . ); const. Return true if this fit result is identical to other within tolerances. ; Parameters. [in]otherFit result to test against. ; [in]tolRelative tolerance for parameters and NLL. ; [in]tolCorrabsolute tolerance for correlation coefficients. ; [in]verboseIf this function will log to the standard output when comparisons fail. As the relative tolerance for the parameter errors, the default value of 1e-3 will be used. ; Definition at line 863 of file RooFitResult.cxx. ◆ isIdenticalNoCov(). bool RooFitResult::isIdenticalNoCov ; (; const RooFitResult & ; other, . double ; tol = 1e-6, . double ; tolErr = 1e-3, . bool ; verbose = true . ); const. Return true if this fit result is identical to other within tolerances, ignoring the correlation matrix. ; Parameters. [in]otherFit result to test against. ; [in]tolRelative tolerance for parameters and NLL. ; [in]tolErrRelative tolerance for parameter errors. ; [in]verboseIf this function will log to the standard output when comparisons fail. . Definition at line 801 of file RooFitResult.cxx. ◆ lastMinuitFit(). RooFitResult * RooFitResult::lastMinuitFit ; (; const RooArgList & ; varList = RooArgList()). static . Import the results of the last fit performed by gMinuit, interpreting the fit parameters as the given varList of parameters. ; Definition at line 917 of file RooFitResult.cxx. ◆ minNll(). double RooFitResult::minNll ; (; ); const. inline . Return minimized -log(L) value. ; Definition at line 99 of file RooFitResult.h. ◆ numInvalidNLL(). Int_t RooFitResult::numInvalidNLL ; (; ); const. inline . Return number of NLL evaluations with problems. ; Definition at line 91 of file RooFitResult.h. ◆ numStatusHistory(). UInt_t RooFitResul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFitResult.html:30324,toler,tolerances,30324,doc/master/classRooFitResult.html,https://root.cern,https://root.cern/doc/master/classRooFitResult.html,1,['toler'],['tolerances']
Availability,"ep = TGeoShape::Big(), Double_t* safe = 0) const; virtual voidDistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; static Double_tTGeoShape::DistToPhiMin(const Double_t* point, const Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); Double_tTGeoArb8::DistToPlane(const Double_t* point, const Double_t* dir, Int_t ipl, Bool_t in) const; virtual TGeoVolume*TGeoTrap::Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tTGeoTrap::GetAlpha1() const; Double_tTGeoTrap::GetAlpha2() const; virtual const char*TGeoBBox::GetAxisName(Int_t iaxis) const; virtual Double_tTGeoArb8::GetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; Double_tTGeoTrap::GetBl1() const; Double_tTGeoTrap::GetBl2() const; virtual voidTGeoArb8::GetBoundingCylinder(Double_t* param) const; virtual const TBuffer3D&TGeoBBox::GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tTGeoArb8::GetByteCount() const; Double_tTGeoArb8::GetClosestEdge(const Double_t* point, Double_t* vert, Int_t& isegment) const; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoGtra.html:4628,error,error,4628,root/html534/TGeoGtra.html,https://root.cern,https://root.cern/root/html534/TGeoGtra.html,6,['error'],['error']
Availability,"epNet_t &deepNet, std::vector< Matrix_t > &input, const Matrix_t &output, const Matrix_t &weights);  Does not evaluate the loss and therefore not trigger a possible synchronization with the device. ;  ; Scalar_t StepReducedWeightsLoss (DeepNet_t &deepNet, std::vector< Matrix_t > &input, const Matrix_t &output, const Matrix_t &weights);  Similar to StepReducedWeights(...) but also evaluates the loss. ;  . Private Attributes; size_t fBatchSize;  Batch size to use for the training. ;  ; size_t fConvergenceCount;  Current number of training epochs without. ;  ; size_t fConvergenceSteps;  Number of training epochs without considerable. ;  ; Scalar_t fLearningRate;  Learning rate \(\alpha\). ;  ; Scalar_t fMinimumError;  The minimum loss achieved on the training set during the current training session. ;  ; size_t fStepCount;  Number of steps performed in the current training session. ;  ; Scalar_t fTestError;  Holds the most recently computed test loss. ;  ; size_t fTestInterval;  Interval for the computation of the test error. ;  ; Scalar_t fTrainingError;  Holds the most recently computed training loss. ;  . #include <TMVA/DNN/DLMinimizers.h>; Member Typedef Documentation. ◆ DeepNet_t. template<typename Architecture_t > . using TMVA::DNN::TDLGradientDescent< Architecture_t >::DeepNet_t = TDeepNet<Architecture_t>. Definition at line 67 of file DLMinimizers.h. ◆ Matrix_t. template<typename Architecture_t > . using TMVA::DNN::TDLGradientDescent< Architecture_t >::Matrix_t = typename Architecture_t::Matrix_t. Definition at line 69 of file DLMinimizers.h. ◆ Scalar_t. template<typename Architecture_t > . using TMVA::DNN::TDLGradientDescent< Architecture_t >::Scalar_t = typename Architecture_t::Scalar_t. Definition at line 68 of file DLMinimizers.h. Constructor & Destructor Documentation. ◆ TDLGradientDescent() [1/2]. template<typename Architecture_t > . TMVA::DNN::TDLGradientDescent< Architecture_t >::TDLGradientDescent. Definition at line 163 of file DLMinimizers.h. ◆ TDLGr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html:3720,error,error,3720,doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,1,['error'],['error']
Availability,"epage; Class Index; Class Hierarchy. Search. Source:; header file; ; inheritance tree (.pdf) viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » WindowAttributes_t. class WindowAttributes_t. GuiTypes. Types used by the GUI classes. Function Members (Methods); public:. ~WindowAttributes_t(); WindowAttributes_t&operator=(const WindowAttributes_t&); WindowAttributes_t&operator=(WindowAttributes_t&&); WindowAttributes_t(); WindowAttributes_t(const WindowAttributes_t&); WindowAttributes_t(WindowAttributes_t&&). Data Members; public:. Long_tfAllEventMasksset of events all people have interest in; ULong_tfBackingPixelvalue to be used when restoring planes; ULong_tfBackingPlanesplanes to be preserved if possible; Int_tfBackingStorekNotUseful, kWhenMapped, kAlways; Int_tfBitGravityone of bit gravity values; Int_tfBorderWidthborder width of window; Int_tfClasskInputOutput, kInputOnly; Colormap_tfColormapcolor map to be associated with window; Int_tfDepthdepth of window; Long_tfDoNotPropagateMaskset of events that should not propagate; Int_tfHeightwidth and height of window; Bool_tfMapInstalledboolean, is color map currently installed; Int_tfMapStatekIsUnmapped, kIsUnviewable, kIsViewable; Bool_tfOverrideRedirectboolean value for override-redirect; Window_tfRootroot of screen containing window; Bool_tfSaveUnderboolean, should bits under be saved?; void*fScreenback pointer to correct screen; void*fVisualthe associated visual structure; Int_tfWidthwidth and height of window; Int_tfWinGravityone of the window gravity values; Int_tfXlocation of window; Int_tfYlocation of window; Long_tfYourEventMaskmy event mask. Class Charts. Inheritance Chart:. WindowAttributes_t. Function documentation. » Last changed: Tue Jun 30 15:32:59 2015 » Last generated: 2015-06-30 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/WindowAttributes_t.html:1728,mask,mask,1728,root/html602/WindowAttributes_t.html,https://root.cern,https://root.cern/root/html602/WindowAttributes_t.html,2,['mask'],['mask']
Availability,"epage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLCamera. class TGLCamera. TGLCamera. Abstract base camera class - concrete classes for orthographic and; persepctive cameras derive from it. This class maintains values for; the current:; i) Viewport; ii) Projection, modelview and clip matricies - extracted from GL; iii) The 6 frustum planes; iv) Expanded frustum interest box. It provides methods for various projection, overlap and intersection; tests for viewport and world locations, against the true frustum and; expanded interest box, and for extracting eye position and direction. It also defines the pure virtual manipulation interface methods the; concrete ortho and prespective classes must implement. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TGLCamera(); Bool_tAdjustAndClampVal(Double_t& val, Double_t min, Double_t max, Int_t screenShift, Int_t screenShiftRange, Bool_t mod1, Bool_t mod2) const; Double_tAdjustDelta(Double_t screenShift, Double_t deltaFactor, Bool_t mod1, Bool_t mod2) const; virtual voidApply(const TGLBoundingBox& sceneBox, const TGLRect* pickRect = 0) const; static TClass*Class(); virtual voidConfigure(Double_t zoom, Double_t dolly, Double_t* center, Double_t hRotate, Double_t vRotate); virtual Bool_tDolly(Int_t delta, Bool_t mod1, Bool_t mod2); voidDrawDebugAids() const; TGLVector3EyeDirection() const; TGLVertex3EyePoint() const; TGLVertex3FrustumCenter() const; EOverlapFrustumOverlap(const TGLBoundingBox& box) const; const TGLPlane&FrustumPlane(TGLCamera::EFrustumPlane plane) const; const TGLMatrix&GetCamBase() const; const TGLMatrix&GetCamTrans() const; Double_t*GetCenterVec(); Bool_tGetExternalCenter(); Double_tGetFarClip() const; Double_t*GetFixDefCenter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLCamera.html:1043,avail,available,1043,root/html528/TGLCamera.html,https://root.cern,https://root.cern/root/html528/TGLCamera.html,4,['avail'],['available']
Availability,"eparately. In THistPainter::Paint this; feature is used to make sure that the grid is drawn in the background and; the axis tick marks in the foreground of the pad.; ; . void PaintBar(Option_t* option). Draw a bar-chart in a normal pad.; . void PaintBarH(Option_t* option). Draw a bar char in a rotated pad (X vertical, Y horizontal).; . void PaintBoxes(Option_t* option). Control function to draw a 2D histogram as a box plot.; . void PaintColorLevels(Option_t* option). Control function to draw a 2D histogram as a color plot.; . void PaintContour(Option_t* option). Control function to draw a 2D histogram as a contour plot.; . Int_t PaintContourLine(Double_t elev1, Int_t icont1, Double_t x1, Double_t y1, Double_t elev2, Int_t icont2, Double_t x2, Double_t y2, Double_t* xarr, Double_t* yarr, Int_t* itarr, Double_t* levels). Fill the matrix XARR YARR for Contour Plot.; ; . void PaintErrors(Option_t* option). Draw 1D histograms error bars.; . void Paint2DErrors(Option_t* option). Draw 2D histograms errors.; ; . void PaintFrame(). Calculate range and clear pad (canvas).; ; . void PaintFunction(Option_t* option). Paint functions associated to an histogram.; . void PaintHist(Option_t* option). Control routine to draw 1D histograms.; . void PaintH3(Option_t* option = """"). Control function to draw a 3D histograms.; . Int_t PaintInit(). Compute histogram parameters used by the drawing routines.; ; . Int_t PaintInitH(). Compute histogram parameters used by the drawing routines for a rotated pad.; ; . void PaintH3Iso(). Control function to draw a 3D histogram with Iso Surfaces.; . void PaintLego(Option_t* option). Control function to draw a 2D histogram as a lego plot.; . void PaintLegoAxis(TGaxis* axis, Double_t ang). Draw the axis for legos and surface plots.; ; . void PaintPalette(). Paint the color palette on the right side of the pad.; . void PaintScatterPlot(Option_t* option). Control function to draw a 2D histogram as a scatter plot.; . void PaintSpecialObjects(const TObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THistPainter.html:85066,error,errors,85066,root/html528/THistPainter.html,https://root.cern,https://root.cern/root/html528/THistPainter.html,4,['error'],['errors']
Availability,"epest node"" that geometrically contains P (in our case let us suppose it is B\_3). Since a node is just a positioned volume, we can then get a pointer to the volume, medium or material objects related to it. ""Deepest"" means that B\_3 still contains point P (as well as A\_1 and TOP\_1), but none of the daughters of volume B does. After finding out the node containing the particle, one can check if the geometry state is different compared to the last located point:; Bool_t *TGeoManager::IsSameLocation(); The algorithm for finding where a point is located in geometry is presented in the figure 17-36.; It always starts by checking if the last computed modeller state is the answer. This optimizes the search when continuously tracking a particle. The main actions performed are:. moving up and down in the logical node tree while updating the current node and its global matrix; converting the global position into the local frame of the current node/volume; checking whether the local position lies within the geometrical shape of the current volume - if this is the case continue the search downwards for the daughters of the current node, otherwise search upwards its containers until the top level is reached.; the number of candidate nodes to be checked at a given level is minimized by an additional optimization structure: voxels. This is effective even in case there is only one daughter of the current volume.; in case the current node is declared as possibly overlapping, the method FindInCluster() is invoked. This method checks all different possibilities within the cluster of overlapping candidates. One of the candidates is prioritized if one of the following conditions id fulfilled (in order):; Is declared as non-overlapping (these are anyway searched first); Has at least one daughter that contains the current point; Was already declared as containing the point at a previous step. Finding the location of a point in the geometry hierarchy. Finding the Distance to Next Crosse",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:128401,down,down,128401,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,2,['down'],"['down', 'downwards']"
Availability,"eping); TObjArrayfDummyTAarray of dummy object (used for bookeeping); TObjArrayfErrorOnBackgroundpacked error sources for background; TObjArrayfErrorOnSignalpacked error sources for signal; TObjArrayfIdspacked IDs for the different error sources; TObjArrayfSignalpacked input signal. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLimitDataSource(); Default constructor. TLimitDataSource(TH1* s, TH1* b, TH1* d); Another constructor, directly adds one channel; with signal, background and data given as input. TLimitDataSource(TH1* s, TH1* b, TH1* d, TVectorD* es, TVectorD* eb, TObjArray* names); Another constructor, directly adds one channel; with signal, background and data given as input. void AddChannel(TH1* , TH1* , TH1* ); Adds a channel with signal, background and data given as input. void AddChannel(TH1* , TH1* , TH1* , TVectorD* , TVectorD* , TObjArray* ); Adds a channel with signal, background and data given as input.; In addition, error sources are defined.; TH1 are here used for convenience: each bin has to be seen as; an error source (relative).; names is an array of strings containing the names of the sources.; Sources with the same name are correlated. void SetOwner(bool swtch = kTRUE); Gives to the TLimitDataSource the ownership of the various objects; given as input.; Objects are then deleted by the TLimitDataSource destructor. TLimitDataSource(). virtual ~TLimitDataSource(); {}. TObjArray* GetSignal(); { return &fSignal;}. TObjArray* GetBackground(); { return &fBackground;}. TObjArray* GetCandidates(); { return &fCandidates;}. TObjArray* GetErrorOnSignal(); { return &fErrorOnSignal;}. TObjArray* GetErrorOnBackground(); { return &fErrorOnBackground;}. TObjArray* GetErrorNames(); { return &fIds;}. » Last changed: root/hist:$Id$ » Last generated: 2015-06-02 13:51; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT suppor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TLimitDataSource.html:7338,error,error,7338,root/html602/TLimitDataSource.html,https://root.cern,https://root.cern/root/html602/TLimitDataSource.html,2,['error'],['error']
Availability,"eping); TObjArrayfDummyTAarray of dummy object (used for bookeeping); TObjArrayfErrorOnBackgroundpacked error sources for background; TObjArrayfErrorOnSignalpacked error sources for signal; TObjArrayfIdspacked IDs for the different error sources; TObjArrayfSignalpacked input signal. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLimitDataSource(); Default constructor. TLimitDataSource(TH1* s, TH1* b, TH1* d); Another constructor, directly adds one channel; with signal, background and data given as input. TLimitDataSource(TH1* s, TH1* b, TH1* d, TVectorD* es, TVectorD* eb, TObjArray* names); Another constructor, directly adds one channel; with signal, background and data given as input. void AddChannel(TH1* , TH1* , TH1* ); Adds a channel with signal, background and data given as input. void AddChannel(TH1* , TH1* , TH1* , TVectorD* , TVectorD* , TObjArray* ); Adds a channel with signal, background and data given as input.; In addition, error sources are defined.; TH1 are here used for convenience: each bin has to be seen as; an error source (relative).; names is an array of strings containing the names of the sources.; Sources with the same name are correlated. void SetOwner(bool swtch = kTRUE); Gives to the TLimitDataSource the ownership of the various objects; given as input.; Objects are then deleted by the TLimitDataSource destructor. TLimitDataSource(). virtual ~TLimitDataSource(); {}. TObjArray* GetSignal(); { return &fSignal;}. TObjArray* GetBackground(); { return &fBackground;}. TObjArray* GetCandidates(); { return &fCandidates;}. TObjArray* GetErrorOnSignal(); { return &fErrorOnSignal;}. TObjArray* GetErrorOnBackground(); { return &fErrorOnBackground;}. TObjArray* GetErrorNames(); { return &fIds;}. » Last changed: root/hist:$Id$ » Last generated: 2015-06-02 16:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT suppor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TLimitDataSource.html:7338,error,error,7338,root/html604/TLimitDataSource.html,https://root.cern,https://root.cern/root/html604/TLimitDataSource.html,2,['error'],['error']
Availability,"eping); TObjArrayfDummyTAarray of dummy object (used for bookeeping); TObjArrayfErrorOnBackgroundpacked error sources for background; TObjArrayfErrorOnSignalpacked error sources for signal; TObjArrayfIdspacked IDs for the different error sources; TObjArrayfSignalpacked input signal. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLimitDataSource(); Default constructor. TLimitDataSource(TH1* s, TH1* b, TH1* d); Another constructor, directly adds one channel; with signal, background and data given as input. TLimitDataSource(TH1* s, TH1* b, TH1* d, TVectorD* es, TVectorD* eb, TObjArray* names); Another constructor, directly adds one channel; with signal, background and data given as input. void AddChannel(TH1* , TH1* , TH1* ); Adds a channel with signal, background and data given as input. void AddChannel(TH1* , TH1* , TH1* , TVectorD* , TVectorD* , TObjArray* ); Adds a channel with signal, background and data given as input.; In addition, error sources are defined.; TH1 are here used for convenience: each bin has to be seen as; an error source (relative).; names is an array of strings containing the names of the sources.; Sources with the same name are correlated. void SetOwner(bool swtch = kTRUE); Gives to the TLimitDataSource the ownership of the various objects; given as input.; Objects are then deleted by the TLimitDataSource destructor. virtual ~TLimitDataSource(); {}. TObjArray* GetSignal(); { return &fSignal;}. TObjArray* GetBackground(); { return &fBackground;}. TObjArray* GetCandidates(); { return &fCandidates;}. TObjArray* GetErrorOnSignal(); { return &fErrorOnSignal;}. TObjArray* GetErrorOnBackground(); { return &fErrorOnBackground;}. TObjArray* GetErrorNames(); { return &fIds;}. » Last changed: root/hist:$Id: TLimitDataSource.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-30 18:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLimitDataSource.html:6741,error,error,6741,root/html528/TLimitDataSource.html,https://root.cern,https://root.cern/root/html528/TLimitDataSource.html,1,['error'],['error']
Availability,"eping); TObjArrayfDummyTAarray of dummy object (used for bookeeping); TObjArrayfErrorOnBackgroundpacked error sources for background; TObjArrayfErrorOnSignalpacked error sources for signal; TObjArrayfIdspacked IDs for the different error sources; TObjArrayfSignalpacked input signal. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLimitDataSource(); Default constructor. TLimitDataSource(TH1* s, TH1* b, TH1* d); Another constructor, directly adds one channel; with signal, background and data given as input. TLimitDataSource(TH1* s, TH1* b, TH1* d, TVectorD* es, TVectorD* eb, TObjArray* names); Another constructor, directly adds one channel; with signal, background and data given as input. void AddChannel(TH1* , TH1* , TH1* ); Adds a channel with signal, background and data given as input. void AddChannel(TH1* , TH1* , TH1* , TVectorD* , TVectorD* , TObjArray* ); Adds a channel with signal, background and data given as input.; In addition, error sources are defined.; TH1 are here used for convenience: each bin has to be seen as; an error source (relative).; names is an array of strings containing the names of the sources.; Sources with the same name are correlated. void SetOwner(bool swtch = kTRUE); Gives to the TLimitDataSource the ownership of the various objects; given as input.; Objects are then deleted by the TLimitDataSource destructor. virtual ~TLimitDataSource(); {}. TObjArray* GetSignal(); { return &fSignal;}. TObjArray* GetBackground(); { return &fBackground;}. TObjArray* GetCandidates(); { return &fCandidates;}. TObjArray* GetErrorOnSignal(); { return &fErrorOnSignal;}. TObjArray* GetErrorOnBackground(); { return &fErrorOnBackground;}. TObjArray* GetErrorNames(); { return &fIds;}. » Last changed: root/hist:$Id: TLimitDataSource.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TLimitDataSource.html:6810,error,error,6810,root/html530/TLimitDataSource.html,https://root.cern,https://root.cern/root/html530/TLimitDataSource.html,1,['error'],['error']
Availability,"eping); TObjArrayfDummyTAarray of dummy object (used for bookeeping); TObjArrayfErrorOnBackgroundpacked error sources for background; TObjArrayfErrorOnSignalpacked error sources for signal; TObjArrayfIdspacked IDs for the different error sources; TObjArrayfSignalpacked input signal. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLimitDataSource(); Default constructor. TLimitDataSource(TH1* s, TH1* b, TH1* d); Another constructor, directly adds one channel; with signal, background and data given as input. TLimitDataSource(TH1* s, TH1* b, TH1* d, TVectorD* es, TVectorD* eb, TObjArray* names); Another constructor, directly adds one channel; with signal, background and data given as input. void AddChannel(TH1* , TH1* , TH1* ); Adds a channel with signal, background and data given as input. void AddChannel(TH1* , TH1* , TH1* , TVectorD* , TVectorD* , TObjArray* ); Adds a channel with signal, background and data given as input.; In addition, error sources are defined.; TH1 are here used for convenience: each bin has to be seen as; an error source (relative).; names is an array of strings containing the names of the sources.; Sources with the same name are correlated. void SetOwner(bool swtch = kTRUE); Gives to the TLimitDataSource the ownership of the various objects; given as input.; Objects are then deleted by the TLimitDataSource destructor. virtual ~TLimitDataSource(); {}. TObjArray* GetSignal(); { return &fSignal;}. TObjArray* GetBackground(); { return &fBackground;}. TObjArray* GetCandidates(); { return &fCandidates;}. TObjArray* GetErrorOnSignal(); { return &fErrorOnSignal;}. TObjArray* GetErrorOnBackground(); { return &fErrorOnBackground;}. TObjArray* GetErrorNames(); { return &fIds;}. » Last changed: root/hist:$Id: TLimitDataSource.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TLimitDataSource.html:6810,error,error,6810,root/html532/TLimitDataSource.html,https://root.cern,https://root.cern/root/html532/TLimitDataSource.html,2,['error'],['error']
Availability,"eport conversion; 13287 // errors; consider using 'strtol' instead; 13288 n = 0;; 13289 }; 13290 }; 13291 ; 13292 if ((n > 0) && ((size_t)n == vec->len)) {; 13293 if ((a < 256) && (b < 256) && (c < 256) && (d < 256) && (slash < 33)) {; 13294 /* IPv4 format */; 13295 if (sa->sa.sa_family == AF_INET) {; 13296 uint32_t ip = ntohl(sa->sin.sin_addr.s_addr);; 13297 uint32_t net = ((uint32_t)a << 24) | ((uint32_t)b << 16); 13298 | ((uint32_t)c << 8) | (uint32_t)d;; 13299 uint32_t mask = slash ? (0xFFFFFFFFu << (32 - slash)) : 0;; 13300 return (ip & mask) == net;; 13301 }; 13302 return 0;; 13303 }; 13304 }; 13305#if defined(USE_IPV6); 13306 else {; 13307 char ad[50];; 13308 const char *p;; 13309 ; 13310 if (sscanf(vec->ptr, ""[%49[^]]]/%u%n"", ad, &slash, &n) != 2) {; 13311 slash = 128;; 13312 if (sscanf(vec->ptr, ""[%49[^]]]%n"", ad, &n) != 1) {; 13313 n = 0;; 13314 }; 13315 }; 13316 ; 13317 if ((n <= 0) && no_strict) {; 13318 /* no square brackets? */; 13319 p = strchr(vec->ptr, '/');; 13320 if (p && (p < (vec->ptr + vec->len))) {; 13321 if (((size_t)(p - vec->ptr) < sizeof(ad)); 13322 && (sscanf(p, ""/%u%n"", &slash, &n) == 1)) {; 13323 n += (int)(p - vec->ptr);; 13324 mg_strlcpy(ad, vec->ptr, (size_t)(p - vec->ptr) + 1);; 13325 } else {; 13326 n = 0;; 13327 }; 13328 } else if (vec->len < sizeof(ad)) {; 13329 n = (int)vec->len;; 13330 slash = 128;; 13331 mg_strlcpy(ad, vec->ptr, vec->len + 1);; 13332 }; 13333 }; 13334 ; 13335 if ((n > 0) && ((size_t)n == vec->len) && (slash < 129)) {; 13336 p = ad;; 13337 c = 0;; 13338 /* zone indexes are unsupported, at least two colons are needed */; 13339 while (isxdigit((unsigned char)*p) || (*p == '.') || (*p == ':')) {; 13340 if (*(p++) == ':') {; 13341 c++;; 13342 }; 13343 }; 13344 if ((*p == '\0') && (c >= 2)) {; 13345 struct sockaddr_in6 sin6;; 13346 unsigned int i;; 13347 ; 13348 /* for strict validation, an actual IPv6 argument is needed */; 13349 if (sa->sa.sa_family != AF_INET6) {; 13350 return 0;; 13351 }; 13352 if (mg_inet_pton(A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:388905,mask,mask,388905,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,2,['mask'],['mask']
Availability,"eport conversion; 13288 // errors; consider using 'strtol' instead; 13289 n = 0;; 13290 }; 13291 }; 13292 ; 13293 if ((n > 0) && ((size_t)n == vec->len)) {; 13294 if ((a < 256) && (b < 256) && (c < 256) && (d < 256) && (slash < 33)) {; 13295 /* IPv4 format */; 13296 if (sa->sa.sa_family == AF_INET) {; 13297 uint32_t ip = ntohl(sa->sin.sin_addr.s_addr);; 13298 uint32_t net = ((uint32_t)a << 24) | ((uint32_t)b << 16); 13299 | ((uint32_t)c << 8) | (uint32_t)d;; 13300 uint32_t mask = slash ? (0xFFFFFFFFu << (32 - slash)) : 0;; 13301 return (ip & mask) == net;; 13302 }; 13303 return 0;; 13304 }; 13305 }; 13306#if defined(USE_IPV6); 13307 else {; 13308 char ad[50];; 13309 const char *p;; 13310 ; 13311 if (sscanf(vec->ptr, ""[%49[^]]]/%u%n"", ad, &slash, &n) != 2) {; 13312 slash = 128;; 13313 if (sscanf(vec->ptr, ""[%49[^]]]%n"", ad, &n) != 1) {; 13314 n = 0;; 13315 }; 13316 }; 13317 ; 13318 if ((n <= 0) && no_strict) {; 13319 /* no square brackets? */; 13320 p = strchr(vec->ptr, '/');; 13321 if (p && (p < (vec->ptr + vec->len))) {; 13322 if (((size_t)(p - vec->ptr) < sizeof(ad)); 13323 && (sscanf(p, ""/%u%n"", &slash, &n) == 1)) {; 13324 n += (int)(p - vec->ptr);; 13325 mg_strlcpy(ad, vec->ptr, (size_t)(p - vec->ptr) + 1);; 13326 } else {; 13327 n = 0;; 13328 }; 13329 } else if (vec->len < sizeof(ad)) {; 13330 n = (int)vec->len;; 13331 slash = 128;; 13332 mg_strlcpy(ad, vec->ptr, vec->len + 1);; 13333 }; 13334 }; 13335 ; 13336 if ((n > 0) && ((size_t)n == vec->len) && (slash < 129)) {; 13337 p = ad;; 13338 c = 0;; 13339 /* zone indexes are unsupported, at least two colons are needed */; 13340 while (isxdigit((unsigned char)*p) || (*p == '.') || (*p == ':')) {; 13341 if (*(p++) == ':') {; 13342 c++;; 13343 }; 13344 }; 13345 if ((*p == '\0') && (c >= 2)) {; 13346 struct sockaddr_in6 sin6;; 13347 unsigned int i;; 13348 ; 13349 /* for strict validation, an actual IPv6 argument is needed */; 13350 if (sa->sa.sa_family != AF_INET6) {; 13351 return 0;; 13352 }; 13353 if (mg_inet_pton(A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:388938,mask,mask,388938,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,2,['mask'],['mask']
Availability,"eprivatevirtual . Execute method on this object with the given parameter string, e.g. ; ""3.14,1,\""text\"""". ; Reimplemented from TObject.; Definition at line 64 of file TMethodCall.h. ◆ Execute() [3/17]. void TMethodCall::Execute ; (; const char * ; params). inline . Definition at line 133 of file TMethodCall.h. ◆ Execute() [4/17]. void TMethodCall::Execute ; (; const char * ; params, . Double_t & ; retDouble . ). inline . Definition at line 141 of file TMethodCall.h. ◆ Execute() [5/17]. void TMethodCall::Execute ; (; const char * ; params, . Longptr_t & ; retLong . ). inline . Definition at line 137 of file TMethodCall.h. ◆ Execute() [6/17]. void TMethodCall::Execute ; (; Double_t & ; retDouble). inline . Definition at line 139 of file TMethodCall.h. ◆ Execute() [7/17]. void TMethodCall::Execute ; (; Longptr_t & ; retLong). inline . Definition at line 135 of file TMethodCall.h. ◆ Execute() [8/17]. void TMethodCall::Execute ; (; TMethod * ; method, . TObjArray * ; params, . int * ; error = nullptr . ). inlineoverrideprivatevirtual . Execute method on this object with parameters stored in the TObjArray. ; The TObjArray should contain an argv vector like: argv[0] ... argv[n] = the list of TObjString parameters; TObjStringCollectable string class.Definition TObjString.h:28; nconst Int_t nDefinition legend1.C:16. Reimplemented from TObject.; Definition at line 65 of file TMethodCall.h. ◆ Execute() [9/17]. void TMethodCall::Execute ; (; void * ; objAddress, . const void * ; args[], . int ; nargs, . void * ; ret = nullptr . ). Invoke the method. ; Parameters. [in]objAddressAddress of the object to execute the method (nullptr if it is a free function) ; [in]argsArray of pointer to the address of the argument to pass to the function as is. No conversion is done, the argument must be of the expected type. ; [in]nargsNumber of arguments passed (must be less than actua size of args ; [out]retAddress of value (or object) to use for the return value. . Definition at line 552 of f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMethodCall.html:20051,error,error,20051,doc/master/classTMethodCall.html,https://root.cern,https://root.cern/doc/master/classTMethodCall.html,1,['error'],['error']
Availability,"ept by; 300Minuit must be transformed to an external error matrix for the user.; 301This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J),; 302where DEXDIN is the derivative of the external value with respect to the; 303internal value at the minimum. This is a linearisation of the; 304transformation, and is the only way to produce an error matrix in external; 305coordinates meaningful to the user. But when reporting the individual; 306parabolic errors for limited parameters, Minuit can do a little better, so; 307it does. In this case, Minuit actually transforms the ends of the; 308internal ""error bar"" to external coordinates and reports the length of; 309this transformed interval. Strictly speaking, it is now asymmetric, but; 310since the origin of the asymmetry is only an artificial transformation it; 311does not make much sense, so the transformed errors are symmetrized.; 312 ; 313The result of all the above is that for parameters with limits, the error; 314reported by Minuit is not exactly equal to the square root of the diagonal; 315element of the error matrix. The difference is a measure of how much the; 316limits deform the problem. If possible, it is suggested not to use limits; 317on parameters, and the problem goes away. If for some reason limits are; 318necessary, and you are sensitive to the difference between the two ways of; 319calculating the errors, it is suggested to use Minos errors which take; 320into account the non-linearities much more precisely.; 321 ; 322*/; 323 ; 324#include <cstdlib>; 325#include <cstdio>; 326 ; 327#include ""TROOT.h""; 328#include ""TList.h""; 329#include ""TMinuit.h""; 330#include ""TMath.h""; 331#include ""TError.h""; 332#include ""TPluginManager.h""; 333#include ""TClass.h""; 334 ; 335#include <atomic>; 336 ; 337TMinuit *gMinuit;; 338 ; 339static const char charal[29] = "" .ABCDEFGHIJKLMNOPQRSTUVWXYZ"";; 340 ; 341ClassImp(TMinuit);; 342 ; 343///////////////////////////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:15521,error,error,15521,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,2,['error'],['error']
Availability,"equires TBB. table; *; Build libTable contrib library. tcmalloc; OFF; Using the tcmalloc allocator. testing; OFF; Enable test suit of ROOT with CTest. thread; ON; Using thread library (cannot be disabled). tmva; ON; Build TMVA multi variate analysis library. unuran; *; UNURAN - package for generating non-uniform random numbers. vc; *; Vc adds a few new types for portable and intuitive SIMD programming. vdt; ON; VDT adds a set of fast and vectorisable mathematical functions. winrtdebug; OFF; Link against the Windows debug runtime library. xft; ON; Xft support (X11 antialiased fonts). xml; ON; XML parser interface. xrootd; ON; Build xrootd file server and its client (if supported). x11; *; X11 support. The default value for these options are platform dependent. CMake Generators; CMake can generate, in addition to standard makefiles, specific proejcts for various integrated development environments (IDEs) such as Xcode, Eclipse, Visual Studio, etc.. The available generators depend on the platform for which cmake have been build. To see the list of available generators do cmake --help .; Ninja; Generate a Ninja project with cmake -G Ninja /path/to/source/dir. Building ROOT with Ninja is faster.; Xcode; Generate the Xcode project with cmake -G Xcode /path/to/source/dir. Open the generated file with the Xcode application.; Visual Studio; Generate the Microsoft Visual Studio soultion with cmake -G ""Visual Studio 10"" /path/to/source/dir. Open the generated solution with C:\Program Files\Microsoft Visual Studio 10.0\Common7\IDE\devenv.exe ROOT.sln`; Variables; This is list of useful ROOT and general CMake variables that can control the build process:; CMake Standard variables; Here are some of the CMake variables that are used often, along with a brief explanation and ROOT-specific notes. For full documentation, check the CMake docs or execute cmake --help-variable VARIABLE_NAME. Variable; Type; Explanation. CMAKE_BUILD_TYPE; STRING; Sets the build type for make based generat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/building-root.html:13425,avail,available,13425,d/building-root.html,https://root.cern,https://root.cern/d/building-root.html,1,['avail'],['available']
Availability,"equires; 2800/// this object to be added to a directory (I.e. when being read from; 2801/// a TKey or being Cloned); 2802 ; 2803void TH1::DirectoryAutoAdd(TDirectory *dir); 2804{; 2805 Bool_t addStatus = TH1::AddDirectoryStatus();; 2806 if (addStatus) {; 2807 SetDirectory(dir);; 2808 if (dir) {; 2809 ResetBit(kCanDelete);; 2810 }; 2811 }; 2812}; 2813 ; 2814////////////////////////////////////////////////////////////////////////////////; 2815/// Compute distance from point px,py to a line.; 2816///; 2817/// Compute the closest distance of approach from point px,py to elements; 2818/// of a histogram.; 2819/// The distance is computed in pixels units.; 2820///; 2821/// #### Algorithm:; 2822/// Currently, this simple model computes the distance from the mouse; 2823/// to the histogram contour only.; 2824 ; 2825Int_t TH1::DistancetoPrimitive(Int_t px, Int_t py); 2826{; 2827 if (!fPainter) return 9999;; 2828 return fPainter->DistancetoPrimitive(px,py);; 2829}; 2830 ; 2831////////////////////////////////////////////////////////////////////////////////; 2832/// Performs the operation: `this = this/(c1*f1)`; 2833/// if errors are defined (see TH1::Sumw2), errors are also recalculated.; 2834///; 2835/// Only bins inside the function range are recomputed.; 2836/// IMPORTANT NOTE: If you intend to use the errors of this histogram later; 2837/// you should call Sumw2 before making this operation.; 2838/// This is particularly important if you fit the histogram after TH1::Divide; 2839///; 2840/// The function return kFALSE if the divide operation failed; 2841 ; 2842Bool_t TH1::Divide(TF1 *f1, Double_t c1); 2843{; 2844 if (!f1) {; 2845 Error(""Divide"",""Attempt to divide by a non-existing function"");; 2846 return kFALSE;; 2847 }; 2848 ; 2849 // delete buffer if it is there since it will become invalid; 2850 if (fBuffer) BufferEmpty(1);; 2851 ; 2852 Int_t nx = GetNbinsX() + 2; // normal bins + uf / of; 2853 Int_t ny = GetNbinsY() + 2;; 2854 Int_t nz = GetNbinsZ() + 2;; 2855 if (fDime",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:112523,error,errors,112523,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,2,['error'],['errors']
Availability,"er & ROOT::Math::GSLMultiRootFinder::operator= ; (; const GSLMultiRootFinder & ; ). delete . ◆ operator=() [2/2]. GSLMultiRootFinder & ROOT::Math::GSLMultiRootFinder::operator= ; (; GSLMultiRootFinder && ; ). delete . ◆ PrintLevel(). int ROOT::Math::GSLMultiRootFinder::PrintLevel ; (; ); const. inline . return the print level ; Definition at line 249 of file GSLMultiRootFinder.h. ◆ PrintState(). void ROOT::Math::GSLMultiRootFinder::PrintState ; (; std::ostream & ; os = std::cout). print iteration state ; Definition at line 321 of file GSLMultiRootFinder.cxx. ◆ SetDefaultMaxIterations(). void ROOT::Math::GSLMultiRootFinder::SetDefaultMaxIterations ; (; int ; maxiter). static . set maximum number of iterations ; Definition at line 62 of file GSLMultiRootFinder.cxx. ◆ SetDefaultTolerance(). void ROOT::Math::GSLMultiRootFinder::SetDefaultTolerance ; (; double ; abstol, . double ; reltol = 0 . ). static . set tolerance (absolute and relative) relative tolerance is only use to verify the convergence do it is a minor parameter ; Definition at line 57 of file GSLMultiRootFinder.cxx. ◆ SetFunctionList(). template<class FuncIterator > . bool ROOT::Math::GSLMultiRootFinder::SetFunctionList ; (; FuncIterator ; begin, . FuncIterator ; end . ). inline . Definition at line 170 of file GSLMultiRootFinder.h. ◆ SetPrintLevel(). void ROOT::Math::GSLMultiRootFinder::SetPrintLevel ; (; int ; level). inline . Definition at line 246 of file GSLMultiRootFinder.h. ◆ SetType() [1/3]. void ROOT::Math::GSLMultiRootFinder::SetType ; (; const char * ; name). set the type using a string ; Definition at line 102 of file GSLMultiRootFinder.cxx. ◆ SetType() [2/3]. void ROOT::Math::GSLMultiRootFinder::SetType ; (; EDerivType ; type). inline . set the type of algorithm using derivatives ; Definition at line 153 of file GSLMultiRootFinder.h. ◆ SetType() [3/3]. void ROOT::Math::GSLMultiRootFinder::SetType ; (; EType ; type). inline . set the type for an algorithm without derivatives ; Definition at line",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html:10223,toler,tolerance,10223,doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,2,['toler'],['tolerance']
Availability,"er . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development » Git Primer Github ssh key. Using Github with ssh keys is preferred, as it's much easier to use. Here is how to set it up:; 1. Create an ssh key; Run; ssh-keygen -t rsa -b 4096 -C ""your_email@example.com"" -f ~/.ssh/github_id_rsa. The email address is for your convenience, it doesn't really matter what you put there; you can even use this to state the name of the computer that will use that key.; You can use a passphrase - but even without it's sufficiently safe, because only you have the secret key file! But please enabling Two Factor Authentication!; 2. Add the key to Github; Log in to https://github.com. In the top right corner, in a drop-down menu, click ""Settings"". Select ""SSH and GPG keys"" from the menu on the left. Click ""New SSH key"", add something as a title and copy the output of; cat ~/.ssh/github_id_rsa.pub. into the ""Key"" text box.; 3. Guide ssh to your key; Edit (or create) ~/.ssh/config and enter the following lines:; Host github.com; User git; PreferredAuthentications publickey; IdentityFile ~/.ssh/github_id_rsa. 4. Check; ssh -T git@github.com. should print; Hi UserName! You've successfully authenticated, but GitHub does not provide shell access. References. Create an ssh key; Add the key to Github; Check. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Wo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/github-ssh-key.html:2513,down,down,2513,d/github-ssh-key.html,https://root.cern,https://root.cern/d/github-ssh-key.html,1,['down'],['down']
Availability,"er << ""-"";; 913 logger << Endl;; 914 ; 915 // title bar; 916 logger << setw(maxL) << titleVars << "":"";; 917 logger << setw(maxV+1) << titleValues << "":"";; 918 logger << Endl;; 919 for (UInt_t i=0; i<clen; i++) logger << ""-"";; 920 logger << Endl;; 921 ; 922 // the numbers; 923 for (UInt_t irow=0; irow<nvar; irow++) {; 924 logger << setw(maxL) << V[irow] << "":"";; 925 logger << setw(maxV+1) << Form( format.Data(), values[irow] );; 926 logger << Endl;; 927 }; 928 ; 929 // bar line; 930 for (UInt_t i=0; i<clen; i++) logger << ""-"";; 931 logger << Endl;; 932}; 933 ; 934////////////////////////////////////////////////////////////////////////////////; 935/// formatted output of matrix (with labels); 936 ; 937void TMVA::Tools::FormattedOutput( const TMatrixD& M, const std::vector<TString>& V, MsgLogger& logger ); 938{; 939 // sanity check: matrix must be quadratic; 940 UInt_t nvar = V.size();; 941 if ((UInt_t)M.GetNcols() != nvar || (UInt_t)M.GetNrows() != nvar) {; 942 logger << kFATAL << ""<FormattedOutput> fatal error with dimensions: ""; 943 << M.GetNcols() << "" OR "" << M.GetNrows() << "" != "" << nvar << "" ==> abort"" << Endl;; 944 }; 945 ; 946 // get length of each variable, and maximum length; 947 UInt_t minL = 7;; 948 UInt_t maxL = minL;; 949 std::vector<UInt_t> vLengths;; 950 for (UInt_t ivar=0; ivar<nvar; ivar++) {; 951 vLengths.push_back(TMath::Max( (UInt_t)V[ivar].Length(), minL ));; 952 maxL = TMath::Max( vLengths.back(), maxL );; 953 }; 954 ; 955 // count column length; 956 UInt_t clen = maxL+1;; 957 for (UInt_t icol=0; icol<nvar; icol++) clen += vLengths[icol]+1;; 958 ; 959 // bar line; 960 for (UInt_t i=0; i<clen; i++) logger << ""-"";; 961 logger << Endl;; 962 ; 963 // title bar; 964 logger << setw(maxL+1) << "" "";; 965 for (UInt_t icol=0; icol<nvar; icol++) logger << setw(vLengths[icol]+1) << V[icol];; 966 logger << Endl;; 967 ; 968 // the numbers; 969 for (UInt_t irow=0; irow<nvar; irow++) {; 970 logger << setw(maxL) << V[irow] << "":"";; 971 for (UInt_t icol=0; icol<n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:32626,error,error,32626,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,1,['error'],['error']
Availability,"er Function Documentation. ◆ Class(). static TClass * TProofLogElem::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TProofLogElem::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TProofLogElem::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 114 of file TProofLog.h. ◆ DeclFileName(). static const char * TProofLogElem::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 114 of file TProofLog.h. ◆ Display(). void TProofLogElem::Display ; (; Int_t ; from = 0, . Int_t ; to = -1 . ). Display the current content starting from line 'from' to line 'to' inclusive. ; A negative value for 'from' indicates lines counted from the end (tail action); 'to' is ignored in such a case. TProofLog::Prt is called to display: the location (screen, file, box) is defined there. Return 0 on success, -1 in case of any error. ; Definition at line 467 of file TProofLog.cxx. ◆ GetMacro(). TMacro * TProofLogElem::GetMacro ; (; ); const. inline . Definition at line 100 of file TProofLog.h. ◆ GetMaxTransferSize(). Long64_t TProofLogElem::GetMaxTransferSize ; (; ). static . Get max transfer size. ; Definition at line 351 of file TProofLog.cxx. ◆ GetRole(). const char * TProofLogElem::GetRole ; (; ). inline . Definition at line 101 of file TProofLog.h. ◆ Grep(). Int_t TProofLogElem::Grep ; (; const char * ; txt, . TString & ; res, . Int_t ; from = 0 . ). Search lines containing 'txt', starting from line 'from'. ; Return their blanck-separated list into 'res'. Return the number of lines found, or -1 in case of error. ; Definition at line 559 of file TProofLog.cxx. ◆ IsA(). TClass * TProofLogElem::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 114 of file TProofLog.h. ◆ IsMaster(). Bool_t TProofLogElem::IsMas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLogElem.html:13547,error,error,13547,doc/master/classTProofLogElem.html,https://root.cern,https://root.cern/doc/master/classTProofLogElem.html,1,['error'],['error']
Availability,"er Functions;  RooErrorVar ();  Default constructor. ;  ;  RooErrorVar (const char *name, const char *title, const RooRealVar &input);  Construct an lvalue variable representing the error of RooRealVar input. ;  ;  RooErrorVar (const RooErrorVar &other, const char *name=nullptr);  ;  ~RooErrorVar () override;  ; TObject * clone (const char *newname) const override;  ; double evaluate () const override;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; const RooAbsBinning & getBinning (const char *name=nullptr, bool verbose=true, bool createOnTheFly=false) const override;  Return binning with given name. ;  ; RooAbsBinning & getBinning (const char *name=nullptr, bool verbose=true, bool createOnTheFly=false) override;  Return binning with given name. ;  ; std::list< std::string > getBinningNames () const override;  Get a list of all binning names. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Return value, i.e. error on input variable. ;  ; bool hasBinning (const char *name) const override;  Return true if we have binning with given name. ;  ; TClass * IsA () const override;  ; bool isFundamental () const override;  Is this object a fundamental type that can be added to a dataset? Fundamental-type subclasses override this method to return true. ;  ; virtual RooAbsArg & operator= (double newValue);  Assignment operator from a double. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from given stream. ;  ; void removeMax (const char *name=nullptr);  Remove upper bound from named binning, or default binning if name is null. ;  ; void removeMin (const char *name=nullptr);  Remove lower bound from named binning, or default binning if name is null. ;  ; void removeRange (const char *name=nullptr);  Remove both upper and lower bounds from named binning, or default binning if name is null. ;  ; void setBinning (const RooAbsBinning &binning, const char ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooErrorVar.html:1645,error,error,1645,doc/master/classRooErrorVar.html,https://root.cern,https://root.cern/doc/master/classRooErrorVar.html,1,['error'],['error']
Availability,"er Target; Int_tfNumParnumber of parameters; vector<Double_t>fParametersvector holding the current parameters . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinuitWrapper(TMVA::IFitterTarget& target, Int_t maxpar); constructor. Int_t Eval(Int_t , Double_t* , Double_t& , Double_t* , Int_t ); std::vector<Double_t> parameters( npar );. Int_t ExecuteCommand(const char* command, Double_t* args, Int_t nargs); Execute a fitter command;; command : command string; args : list of nargs command arguments. void Clear(Option_t* = 0); reset the fitter environment. Int_t GetStats(Double_t& amin, Double_t& edm, Double_t& errdef, Int_t& nvpar, Int_t& nparx); return global fit parameters; amin : chisquare; edm : estimated distance to minimum; errdef; nvpar : number of variable parameters; nparx : total number of parameters. Int_t GetErrors(Int_t ipar, Double_t& eplus, Double_t& eminus, Double_t& eparab, Double_t& globcc); return current errors for a parameter; ipar : parameter number; eplus : upper error; eminus : lower error; eparab : parabolic error; globcc : global correlation coefficient. Int_t SetParameter(Int_t ipar, const char* parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh); set initial values for a parameter; ipar : parameter number; parname : parameter name; value : initial parameter value; verr : initial error for this parameter; vlow : lower value for the parameter; vhigh : upper value for the parameter. TObject * Clone(const char* ) const; produces a clone of this MinuitWrapper. virtual ~MinuitWrapper(); {}. void SetFitterTarget(TMVA::IFitterTarget& target); { fFitterTarget = target; }. » Author: Peter Speckmayer » Copyright (c) 2005: *; » Last changed: root/tmva $Id: MinuitWrapper.h 29122 2009-06-22 06:51:30Z brun $ » Last generated: 2010-09-23 20:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MinuitWrapper.html:18847,error,errors,18847,root/html528/TMVA__MinuitWrapper.html,https://root.cern,https://root.cern/root/html528/TMVA__MinuitWrapper.html,4,['error'],"['error', 'errors']"
Availability,"er Target; Int_tfNumParnumber of parameters; vector<Double_t>fParametersvector holding the current parameters . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinuitWrapper(TMVA::IFitterTarget& target, Int_t maxpar); constructor. Int_t Eval(Int_t , Double_t* , Double_t& , Double_t* , Int_t ); std::vector<Double_t> parameters( npar );. Int_t ExecuteCommand(const char* command, Double_t* args, Int_t nargs); Execute a fitter command;; command : command string; args : list of nargs command arguments. void Clear(Option_t* = 0); reset the fitter environment. Int_t GetStats(Double_t& amin, Double_t& edm, Double_t& errdef, Int_t& nvpar, Int_t& nparx); return global fit parameters; amin : chisquare; edm : estimated distance to minimum; errdef; nvpar : number of variable parameters; nparx : total number of parameters. Int_t GetErrors(Int_t ipar, Double_t& eplus, Double_t& eminus, Double_t& eparab, Double_t& globcc); return current errors for a parameter; ipar : parameter number; eplus : upper error; eminus : lower error; eparab : parabolic error; globcc : global correlation coefficient. Int_t SetParameter(Int_t ipar, const char* parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh); set initial values for a parameter; ipar : parameter number; parname : parameter name; value : initial parameter value; verr : initial error for this parameter; vlow : lower value for the parameter; vhigh : upper value for the parameter. TObject * Clone(const char* ) const; produces a clone of this MinuitWrapper. virtual ~MinuitWrapper(); {}. void SetFitterTarget(TMVA::IFitterTarget& target); { fFitterTarget = target; }. » Author: Peter Speckmayer » Copyright (c) 2005: *; » Last changed: root/tmva $Id: MinuitWrapper.h 39395 2011-05-26 10:05:54Z moneta $ » Last generated: 2011-07-04 15:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT suppo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MinuitWrapper.html:18916,error,errors,18916,root/html530/TMVA__MinuitWrapper.html,https://root.cern,https://root.cern/root/html530/TMVA__MinuitWrapper.html,4,['error'],"['error', 'errors']"
Availability,"er Target; Int_tfNumParnumber of parameters; vector<Double_t>fParametersvector holding the current parameters . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinuitWrapper(TMVA::IFitterTarget& target, Int_t maxpar); constructor. Int_t Eval(Int_t , Double_t* , Double_t& , Double_t* , Int_t ); std::vector<Double_t> parameters( npar );. Int_t ExecuteCommand(const char* command, Double_t* args, Int_t nargs); Execute a fitter command;; command : command string; args : list of nargs command arguments. void Clear(Option_t* = 0); reset the fitter environment. Int_t GetStats(Double_t& amin, Double_t& edm, Double_t& errdef, Int_t& nvpar, Int_t& nparx); return global fit parameters; amin : chisquare; edm : estimated distance to minimum; errdef; nvpar : number of variable parameters; nparx : total number of parameters. Int_t GetErrors(Int_t ipar, Double_t& eplus, Double_t& eminus, Double_t& eparab, Double_t& globcc); return current errors for a parameter; ipar : parameter number; eplus : upper error; eminus : lower error; eparab : parabolic error; globcc : global correlation coefficient. Int_t SetParameter(Int_t ipar, const char* parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh); set initial values for a parameter; ipar : parameter number; parname : parameter name; value : initial parameter value; verr : initial error for this parameter; vlow : lower value for the parameter; vhigh : upper value for the parameter. TObject * Clone(const char* ) const; produces a clone of this MinuitWrapper. virtual ~MinuitWrapper(); {}. void SetFitterTarget(TMVA::IFitterTarget& target); { fFitterTarget = target; }. » Author: Peter Speckmayer » Copyright (c) 2005: *; » Last changed: root/tmva $Id: MinuitWrapper.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT supp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__MinuitWrapper.html:18916,error,errors,18916,root/html532/TMVA__MinuitWrapper.html,https://root.cern,https://root.cern/root/html532/TMVA__MinuitWrapper.html,8,['error'],"['error', 'errors']"
Availability,"er around a TObject so it can be stored in a TList.Definition TList.h:123; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::SetObjectStatstatic void SetObjectStat(Bool_t stat)Turn on/off tracking of objects in the TObjectTable.Definition TObject.cxx:1068; TObject::GetNamevirtual const char * GetName() constReturns name of object.Definition TObject.cxx:439; TObject::ClassNamevirtual const char * ClassName() constReturns name of class to which the object belongs.Definition TObject.cxx:207; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:973; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:403; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:780; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:987; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1015; TObject::kInvalidObject@ kInvalidObjectif object ctor succeeded but object should not be usedDefinition TObject.h:72; TObject::kMustCleanup@ kMustCleanupif object destructor must call RecursiveRemove()Definition TObject.h:64; TPluginManagerThis class implements a plugin library manager.Definition TPluginManager.h:258; TPluginManager::LoadHandlersFromEnvvoid LoadHandlersFromEnv(TEnv *env)Load plugin handlers specified in config file, like:Definition TPluginManager.cxx:391; TProcessID::Cleanupstatic void Cleanup()static function (called by TROOT destructor) to delete all TProcessIDsDefinition TProcessID.cxx:204; TProcessID::AddProcessIDstatic TProcessID * AddProcessID()Static function to add a new TProcessID to the list of PIDs.Definition TProcessID.cxx:116; TProcessUUIDThis class is a specialized TProcessID mana",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TROOT_8cxx_source.html:142208,error,error,142208,doc/v632/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TROOT_8cxx_source.html,1,['error'],['error']
Availability,"er around a TObject so it can be stored in a TList.Definition TList.h:123; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::SetObjectStatstatic void SetObjectStat(Bool_t stat)Turn on/off tracking of objects in the TObjectTable.Definition TObject.cxx:1074; TObject::GetNamevirtual const char * GetName() constReturns name of object.Definition TObject.cxx:444; TObject::ClassNamevirtual const char * ClassName() constReturns name of class to which the object belongs.Definition TObject.cxx:213; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::kInvalidObject@ kInvalidObjectif object ctor succeeded but object should not be usedDefinition TObject.h:72; TObject::kMustCleanup@ kMustCleanupif object destructor must call RecursiveRemove()Definition TObject.h:64; TPluginManagerThis class implements a plugin library manager.Definition TPluginManager.h:258; TPluginManager::LoadHandlersFromEnvvoid LoadHandlersFromEnv(TEnv *env)Load plugin handlers specified in config file, like:Definition TPluginManager.cxx:391; TProcessID::Cleanupstatic void Cleanup()static function (called by TROOT destructor) to delete all TProcessIDsDefinition TProcessID.cxx:204; TProcessID::AddProcessIDstatic TProcessID * AddProcessID()Static function to add a new TProcessID to the list of PIDs.Definition TProcessID.cxx:116; TProcessUUIDThis class is a specialized TProcessID mana",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:142384,error,error,142384,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,1,['error'],['error']
Availability,"er bound of the search interval; doublefXMinLower bound of the search interval.; doublefXMinimumPosition of the stimated minimum. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BrentMinimizer1D(); Default Constructor. . virtual ~BrentMinimizer1D(); Default Destructor. . double XMinimum() const; Return current estimate of the position of the minimum. . double XLower() const; Return current lower bound of the minimization interval. . double XUpper() const; Return current upper bound of the minimization interval. . double FValMinimum() const; Return function value at current estimate of the minimum. . double FValLower() const; Return function value at current lower bound of the minimization interval. . double FValUpper() const; Return function value at current upper bound of the minimization interval. . int Minimize(int maxIter, double absTol, double relTol); Find minimum position iterating until convergence specified by the absolute and relative tolerance or; the maximum number of iteration is reached. \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position.; \@param absTol desired relative error in the minimum position. int Iterations() const; Return number of iteration used to find minimum . const char * Name() const; Return name of minimization algorithm (""BrentMinimizer1D"") . int SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); Sets function to be minimized. \@param f Function to be minimized.; \@param xlow Lower bound of the search interval.; \@param xup Upper bound of the search interval. » Author: David Gonzalez Maline 2/2008 » Copyright (c) 2004 Maline, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: BrentMinimizer1D.h 31583 2009-12-06 13:55:26Z rdm $ » Last generated: 2009-12-07 13:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__BrentMinimizer1D.html:2693,error,error,2693,root/html526/ROOT__Math__BrentMinimizer1D.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__BrentMinimizer1D.html,2,['error'],['error']
Availability,"er can be used only for least-square fits.; GSLSimAn (library libMathMore). Minimizer based on simulated annealing.; Genetic (library libGenetic). Genetic minimizer based on an algorithm implemented in the TMVA package. Each minimizer can be configured using the ROOT::Math::MinimizerOptions class. The list of possible option that can be set are:. Minimizer type (MinimizerOptions::SetMinimizerType(const char *)) .; Minimizer algorithm (MinimizerOptions::SetMinimizerAlgorithm(const char *)).; Print Level (MinimizerOptions::SetPrintLevel(int )) to set the verbose printing level (default is 0).; Tolerance (MinimizerOptions::SetTolerance(double )) tolerance used to control the iterations.; Maximum number of function calls (MinimizerOptions::SetMaxFunctionCalls(int )).; Maximum number of iterations (MinimizerOptions::SetMaxIterations(int )). Note that this is not used by Minuit; FCN Upper value for Error Definition (MinimizerOptions::SetErrorDef(double )). Value in the minimization function used to compute the parameter errors. The default is to get the uncertainties at the 68% CL is a value of 1 for a chi-squared function minimization and 0.5 for a log-likelihood function.; Strategy (MinimizerOptions::SetStrategy(int )), minimization strategy used. For each minimization strategy Minuit uses different configuration parameters (e.g. different requirements in computing derivatives, computing full Hessian (strategy = 2) or an approximate version. The default is a value of 1. In this case the full Hessian matrix is computed only after the minimization.; Precision (MinimizerOptions::SetPrecision(double )). Precision value in the evaluation of the minimization function. Default is numerical double precision. Note that not all the options are implemented by all the minimizers. For example in Minuit is possible to set the maximum number of function calls, but not the maximum number of iterations. The Strategy and the Precision options apply instead only for Minuit (and Minuit2).; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:204723,error,errors,204723,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['error'],['errors']
Availability,"er can refuse to make a; window current), the state of window is changed accordingly and; WindowSelected() signal is emitted. void DeleteWindow(TEveWindow* w); Called by a window before it gets deleted. void WindowDocked(TEveWindow* window); Emit the ""WindowDocked(TEveWindow*)"" signal. void WindowUndocked(TEveWindow* window); Emit the ""WindowUndocked(TEveWindow*)"" signal. void WindowSelected(TEveWindow* window); Emit the ""WindowSelected(TEveWindow*)"" signal. void WindowDeleted(TEveWindow* window); Emit the ""WindowDeleted(TEveWindow*)"" signal. TEveWindowSlot* GetCurrentWindowAsSlot() const; Return current window dynamic-casted to TEveWindowSlot. void SetDefaultContainer(TEveWindow* w); Set default container window.; It has to be able to create new slots.; When main-frames are closed they will place the windows here. void DestroyWindowRecursively(TEveWindow* window); Destroy window's children and then the window itself.; Protected method used during shutdown. void DestroyWindows(); Wait for all windows to shut-down. void HideAllEveDecorations(); Hide all eve decorations (title-bar and mini-bar) on all frames. void ShowNormalEveDecorations(); Show eve decorations (title-bar or mini-bar) as specified for; the contained window on all frames. void SetShowTitleBars(Bool_t state); Set show title-bar state on all frames.; This does not modify the per-window settings - call; ShowNormalEveDecorations() to restore them. TEveWindowManager(const TEveWindowManager& ). TEveWindowManager& operator=(const TEveWindowManager& ). TEveWindow* GetCurrentWindow() const; { return fCurrentWindow; }. Bool_t IsCurrentWindow(const TEveWindow* w) const; { return w == fCurrentWindow; }. TEveWindow* GetDefaultContainer() const; { return fDefaultContainer; }. Bool_t HasDefaultContainer() const; { return fDefaultContainer != 0; }. » Author: Matevz Tadel 2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/eve:$Id$ » Last generated: 2015-03-13 19:23; This page has be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveWindowManager.html:25715,down,down,25715,root/html534/TEveWindowManager.html,https://root.cern,https://root.cern/root/html534/TEveWindowManager.html,2,['down'],['down']
