quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Usability,"> Hi Hanna, thank you very much for the PR!; > ; > Code changes look fine, but can you please change the commit message to explain why it was possible to use `setValFast` in `setBin`? That it's redundant to do the range, check in `getVal`, because the value you pass to `setBin` is a bin center which is in the variable range by definition anyway. Thank you for the comment, I hope the new commit message is clearer!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11090#issuecomment-1202401228:408,clear,clearer,408,https://root.cern,https://github.com/root-project/root/pull/11090#issuecomment-1202401228,2,['clear'],['clearer']
Usability,"> Hi! No that's alright, we don't enforce the formatting of old code. Also a rebase is not necessary, since the tests all passed and the PR would merge fine.; > ; > Just a note: probably the PR was unattended for so long because the usecase for this feature was not clear (or you needed it in your project?). Now that we have it, we might as well merge it, but for the future try to focus more on addressing concrete use needs or improving the ROOT developer experience (like you did in many other PRs). Thanks for the feedback!. It was a feature needed for my project. Because it took long, I used a workaround with a TGLabel class, so I did not insist much either, but for the future I will make it more clear what the usecase is :). Cheers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9156#issuecomment-1812527084:266,clear,clear,266,https://root.cern,https://github.com/root-project/root/pull/9156#issuecomment-1812527084,6,"['clear', 'feedback']","['clear', 'feedback']"
Usability,"> Hi, I don't understand what temporary gcc's message refers to?; > ; > * `GetColumnType` returns a `string` by value that is taken in as a `const string &` by `TypeName2TypeID`, so everything should be fine there; > ; > * `TypeName2TypeID` returns a `const type_info &` that is conditionally assigned to a `const auto &` and that should also be ok: the `const type_info &` is produced by expressions such as `typeid(bool)` and that value should have static lifetime; > ; > ; > Help?. GCC13 has not been officially released yet. It comes with the [new `-Wdangling-reference` diagnostic](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=106393), which I think still provides many false positives, e.g. [see this](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=107532). In particular, this warning seems absolutely bogus. It can be reproduced with this simple excerpt (compile with `g++ -Werror=dangling-reference`).; ```c++; #include <string>; #include <typeinfo>. const std::type_info &f(const std::string &);; void g() {; // A `std::string` temporary is implicitly constructed passing the string literal ""foo"" to the ctor.; // Apparently, this triggers one of the patterns in GCC's new `[-Wdangling-reference]`. ; const auto &ti = f(""foo"");; }; ```. IMO, this warning is totally bogus (and might be seen in other parts of ROOT). Thus, I would suggest not changing the code but conditionally ignoring it,; _(a)_ Either in this translation unit only; ```c++; #pragma GCC diagnostic ignored ...; ```; , or _(b)_ most likely for all ROOT (appending `-Wno-dangling-reference` from CMake). I would go for `_(b)_`, at least until the feature becomes mature enough and does not yield false positives. What do you think, @linev, @eguiraud?. Also CC: @Axel-Naumann and @hahnjo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12085#issuecomment-1403615900:845,simpl,simple,845,https://root.cern,https://github.com/root-project/root/pull/12085#issuecomment-1403615900,2,['simpl'],['simple']
Usability,"> Hmmh, so you don't want to give me an active directory? :). For the moment there is no direct support of such feature with `RWebWindow`.; But can be provided - if really necessary. In my mind, solution with direct access of font files via `currentdir/` path is much clear.; And does not require any extra threads locking. You always can implement active directory - but does it necessary with fonts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15812#issuecomment-2177936944:268,clear,clear,268,https://root.cern,https://github.com/root-project/root/pull/15812#issuecomment-2177936944,2,['clear'],['clear']
Usability,"> How can this be silenced? Since the interface is abstract, no I/O is needed, maybe not even type info. The I/O still needs to be informed of this. The simplest is to a ClassDef with version 0 and generate the dictionary.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3222#issuecomment-452066958:153,simpl,simplest,153,https://root.cern,https://github.com/root-project/root/pull/3222#issuecomment-452066958,2,['simpl'],['simplest']
Usability,"> How does it mess things up?. IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions.; > ; > > with no tests; > ; > As I said that won't be the case.; > ; > > to improve the less used feature of unloading; > ; > I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. . > ; > > make this feature configurable; > ; > Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability... As I said, I am not sure if the implementation does not force the regular person (not using unloading) to pay for something he does not use. Secondly, while I understand the test will come at some point in future, I cannot judge on the implementation without any test. Those are two points which we should always consider when enabling something of this size by default for cling standalone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4214#issuecomment-532596881:1057,usab,usability,1057,https://root.cern,https://github.com/root-project/root/pull/4214#issuecomment-532596881,2,['usab'],['usability']
Usability,"> How?. Sorry, I simply meant `std::byte b{};`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15787#issuecomment-2154673614:17,simpl,simply,17,https://root.cern,https://github.com/root-project/root/pull/15787#issuecomment-2154673614,2,['simpl'],['simply']
Usability,"> However, I think both clipping and skipping can be very dangerous. I'm about to change the behavior to simply erroring out when the values are not in the range, with the possibility to manually change that behavior to skipping or clipping if desired. Like that, there are no bad surprises. Any thoughts on that?. That sounds very reasonable. I would have intuitively assumed that the values are skipped, but if the clipping behavior also exists in the interface others might have assume that. Then it's probably best to force the users to decide.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10447#issuecomment-1110909383:105,simpl,simply,105,https://root.cern,https://github.com/root-project/root/issues/10447#issuecomment-1110909383,4,"['intuit', 'simpl']","['intuitively', 'simply']"
Usability,"> However, ROOT accepts the code without complaint.; > That actually is the issue. In your original post, you mention that the behaviour you expect to see is that both parameters should be usable. Implementing this would mean openly violating C++ standard (even further than CINT already did at the time of ROOT 5.34). On the other hand, a proper fix would be raising a compiler error. I am unsure whether providing such a fix for CINT is what we want, cling already works properly and it's just a matter of updating the ROOT version. I will leave to @Axel-Naumann the final say on this. In any case, isn't it possible for you to declare functions on your application side that do not have a trailing comma?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12840#issuecomment-1570855626:189,usab,usable,189,https://root.cern,https://github.com/root-project/root/issues/12840#issuecomment-1570855626,2,['usab'],['usable']
Usability,"> I agree that we should use a ""proper"", existing option parsing library; I very much like that change! 50 lines less of our code is strictly better, hurray!; > ; > We should use that option parsing for all of ROOT's binaries. I'm extremely hesitant to select llvm's option parsing for that purpose: we want to hide llvm's symbols; only libCling and rootcling are able to access them. But that means we cannot use the same option parsing for all of ROOT - and we'll be back in an inconsistent state where everyone and their binary will roll their own. Using e.g. the head-only http://optionparser.sourceforge.net or https://github.com/jarro2783/cxxopts . root.exe argument parsing is a lot simpler (eg, we need to handle -l -b -q and hardly something more complex). The advantage of using `llvm::cl` in rootcling is that we can encapsulate the arguments in data structures which are compatible with cling. For instance, after rootcling parses the arguments it can call a future overload of `cling::Interpreter::Interpreter(llvm::cl...` where it will pass already the processed arguments. Currently we have to convert back to `const char **argv`. This would be a drawback if we use a library different than `llvm::cl`. In theory, we can make `llvm::cl` work with the argument parser of root.exe by compiling the symbols of libLLVMSupport with -fvisibility=hidden (or instruct the linker to hide them). This way we will not leak symbols outside. Having that said, the value of this PR is the refactoring itself and not the library we use. As long as the library we chose as flexible as the `llvm::cl` we can easily migrate away from it if needed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4171#issuecomment-524868233:690,simpl,simpler,690,https://root.cern,https://github.com/root-project/root/pull/4171#issuecomment-524868233,2,['simpl'],['simpler']
Usability,"> I also have a general comment,; > ; > https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342; > ; > it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:; > ; > 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name); > ; > 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions?. This is a good question. If you omit the type name for structs or collections, they become untyped structs or untyped collections. RDF can deal with this fully, the `RNTupleReader` currently only with untyped collections (transparently cast to an `std::vector`). In general, C++/framework code is likely to have problems with untyped structs because there is no class to read data into... Still, untyped structs and untyped collections are valid RNTuple data. For basic types, we cannot omit the type because the column only specify the on-disk type while the field type information gives the in-memory type. The two don't have to be identical (e.g. `double` in memory and `Real32` on disk). I thought we already documented the allowed combinations of POD type and column types but I now realized we didn't. We'll update the docs in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13779#issuecomment-1820886920:198,clear,clear,198,https://root.cern,https://github.com/root-project/root/pull/13779#issuecomment-1820886920,2,['clear'],['clear']
Usability,"> I also just checked the manual now, and branch splitting is not covered in similar detail. May be that's for @pcanal in that case to decide what should be added in the manual ... @olantwin have you checked the reference Guide too ? That's where ALL the information should be.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12551#issuecomment-1485328091:222,Guid,Guide,222,https://root.cern,https://github.com/root-project/root/pull/12551#issuecomment-1485328091,1,['Guid'],['Guide']
Usability,"> I am not sure that we should increment the number of fNRuns and log as if everything went fine if an exception was thrown during the event loop. a different message might be warranted. Indeed this could be a good idea, to further clarify that the RDF is not usable anymore and should just be thrown away",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13546#issuecomment-1707966075:260,usab,usable,260,https://root.cern,https://github.com/root-project/root/pull/13546#issuecomment-1707966075,2,['usab'],['usable']
Usability,"> I am seeing a similar issue with TSystem.h, TSeqCollection *fTimers{nullptr}; //List of timers. I think we should tackle this in a separate PR. The simplest solution though is to always create the fTimers (i.e. move its creation to the constructor or init routine) and to mark it as a 'thread safe' collection:; ```; fTimers->UseRWLock();; ```; thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8379#issuecomment-857765612:150,simpl,simplest,150,https://root.cern,https://github.com/root-project/root/pull/8379#issuecomment-857765612,2,['simpl'],['simplest']
Usability,"> I am sure it is not. There is really no functional changes introduces by the commit, just a tad bit of timing difference that might make it harder to stumble upon it. Ok, I will wait for your feedback, but the difference between the versions is that one relies on the variable `done` to break out of the outer loop, while the changed version breaks out directly. I cannot see how this can be any worse than before, and since we immediately break out of both loops, I also cannot see how the writing thread could get stuck on the condition variable wait again, which is what I observed before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/583#issuecomment-302389835:194,feedback,feedback,194,https://root.cern,https://github.com/root-project/root/pull/583#issuecomment-302389835,1,['feedback'],['feedback']
Usability,> I appreciate the build option! Though I'm a little concerned that the name of the build option is not self explanatory enough for everyone. Why not `-Daddress-sanitizer` or so to make it very clear?. Can be done.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5066#issuecomment-592453596:194,clear,clear,194,https://root.cern,https://github.com/root-project/root/pull/5066#issuecomment-592453596,2,['clear'],['clear']
Usability,"> I believe the current failures are related to the roottest branch not being up-to-date with the latest master. Close but not quite. What is happening in the reverse. Once the CI test are started they pin the `ROOT master` commit that will be use to test. If one simply ""re-run"" the tests they will (this is intentional) use that same commit. To take in consideration new commits in the new CI build we need to do either of these 3 actions:; * Rebase the master onto the new PR branch.; * Add a new commit to the PR branch.; * Close and re-open the PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14967#issuecomment-2046265770:264,simpl,simply,264,https://root.cern,https://github.com/root-project/root/pull/14967#issuecomment-2046265770,2,['simpl'],['simply']
Usability,"> I can imagine that we can make change this function to return a string and then call it when we called the `.gh` command?. Sounds great, as long as the 'stacktrace' logic does not clear it internally, once it has printed it to terminal before calling `.gh bug`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10366#issuecomment-1122636569:182,clear,clear,182,https://root.cern,https://github.com/root-project/root/pull/10366#issuecomment-1122636569,2,['clear'],['clear']
Usability,> I can't see the exact reason for clang-format error which is reported above. It simply fails for all PRs. No idea why,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9643#issuecomment-1017950333:82,simpl,simply,82,https://root.cern,https://github.com/root-project/root/pull/9643#issuecomment-1017950333,2,['simpl'],['simply']
Usability,"> I could probably write some for sqlite . It would be grate! ; As far as I know, sqllite can be squeezed in one file. If you can create such small data base (~100KB) with all supported data types and provide simple test macro for reading - it would be really grate! With mysql I am not sure how to do this easily.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3707#issuecomment-484375382:209,simpl,simple,209,https://root.cern,https://github.com/root-project/root/pull/3707#issuecomment-484375382,2,['simpl'],['simple']
Usability,> I did not look into but I thought you said this would be blocking progress in TBufferText and TBufferFile optimizations. Now I check it more precisely - TBufferSQL cannot support objects or even simple TString in TBasketSQL. Therefore it can be used even when we change streamer actions.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1817#issuecomment-378675077:197,simpl,simple,197,https://root.cern,https://github.com/root-project/root/pull/1817#issuecomment-378675077,2,['simpl'],['simple']
Usability,"> I do not understand why you have to have your FindROOT.cmake. We do provide ROOTConfig.cmake and this should be sufficient. If it is not, then this is a bug. **Be as native CMake as possible and of not try to complicate things by building additional interfaces.**. What we do in the `FindROOT.cmake` is as native and cmake idiomatic as it gets. [find_package](https://cmake.org/cmake/help/v3.0/command/find_package.html) has two modes. The one used here is the config mode which is intended to be used to find and include your package config file (`ROOTConfig.cmake`). > The functions like `ROOT_LINKER_LIBRARY` where intended for internal consumption. Does that mean you will not support usage in external projects? Or do you consider it now to support? If not, I suggest putting it in a different module, so its clearer which macros are meant to be for public use.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/916#issuecomment-326541844:816,clear,clearer,816,https://root.cern,https://github.com/root-project/root/pull/916#issuecomment-326541844,2,['clear'],['clearer']
Usability,"> I don't agree with these changes for two reasons:; > ; > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834).; > ; > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. Indeed, I was wrong with the second bullet point here. I remembered it wrongly because when building with `tmva-gpu`, some tutorials use the GPU backend of TMVA by default. This first argument still holds though!. I made an alternative suggestion: https://github.com/root-project/root/pull/15155. This one also fixes the problem that the `cuda` flag is checked before it is set. It simplifies the logic also a bit: the `cuda` flag is not determining anymore if CMake will look for the CUDA language and add it to the project. It only determines if ROOTs CUDA sources are actually built.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15149#issuecomment-2039816688:617,clear,clearly,617,https://root.cern,https://github.com/root-project/root/pull/15149#issuecomment-2039816688,4,"['clear', 'simpl']","['clearly', 'simplifies']"
Usability,"> I don't agree with these changes for two reasons:; > ; > * The default is `cuda=OFF`, and if the user passes `cuda=ON` explicitly, it can be annoying if it is switched off at compile time because for example some environment variables were missing. We had complaints about this in the past. That's why I suggested to not have this fallback for features that are by default `OFF`. See also: [[cmake] Some improvements related to feature detection #14834](https://github.com/root-project/root/pull/14834).; > ; > * I would argue that it's not correct to set `cuda=ON` if `all=ON`. Enabling cuda disables TMVA CPU, so clearly you don't get `all` features but different ones. That's why many distros like Arch Linux have a separate `root` and `root-cuda` package. Unless this is fixed, I think the right solution to the problem is to not switch cuda on if `all=ON`. This sounds like a perfectly legitimate solution",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15149#issuecomment-2039583205:617,clear,clearly,617,https://root.cern,https://github.com/root-project/root/pull/15149#issuecomment-2039583205,2,['clear'],['clearly']
Usability,"> I don't think ROOT is at fault here for relying on this feature of CMake. As described in the blob post by a CMake maintainer (emphasis is mine):. > Even if find_package() were only redefined once though, it would still be relying on **undocumented** CMake behavior which may be modified or removed completely in a future version. Reliance on such behavior should be discouraged and as the above discussion shows, the technique is not safe to use in general. It's mostly sad that vcpkg did the same trick, making ROOT incompatible with it. Given the circumstances I think this cannot be fixed at the moment, since neither ROOT nor vcpkg can easily change and I also don't expect CMake to make such behavior defined and allow overriding build-ins multiple times. So I guess we need to close this is won't-fix?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8633#issuecomment-898355331:238,undo,undocumented,238,https://root.cern,https://github.com/root-project/root/issues/8633#issuecomment-898355331,2,['undo'],['undocumented']
Usability,"> I don't think `#if __arm64__` will work. Should be `#ifdef __aarch64__`. Oh yes, my bad, I simply copied from the line above which is for Apple / macOS. Thanks for catching, fixing, and confirming that the approach works. Then we can merge this and backport for 6.28/02 :smiley:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12353#issuecomment-1437462950:93,simpl,simply,93,https://root.cern,https://github.com/root-project/root/pull/12353#issuecomment-1437462950,2,['simpl'],['simply']
Usability,"> I don't think it's good enough. Some header files have to be found by ROOT, and there are quite a few more packages than those two IIRC... Yeah, this wont be as simple as I thought it would be 😅 . I'll come up with a solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8732#issuecomment-886601097:163,simpl,simple,163,https://root.cern,https://github.com/root-project/root/pull/8732#issuecomment-886601097,2,['simpl'],['simple']
Usability,"> I don't understand why we would want to allow older versions than we did in the past. The reason why we restrict version - we were not testing for `json_fwd.hpp`. ; With 3.11.x version such simple restriction no longer working. But now we testing `json_fwd.hpp` and can use it, and restriction making no sense.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11268#issuecomment-1245012584:192,simpl,simple,192,https://root.cern,https://github.com/root-project/root/pull/11268#issuecomment-1245012584,2,['simpl'],['simple']
Usability,"> I find doxygen really slow. I tried to optimize that and found many complaints (https://stackoverflow.com/questions/28628348/why-does-doxygen-always-reprocess-every-file). Maybe THtml still _could_ be useful, at least partially.; > UPD: I opened a feature request for `doxygen`. Yes it takes time to generate the full documentation. But ROOT is huge. I never do it fully. Only the nightlies build it completely regularly. It takes several hours. As said [here](https://root.cern/for_developers/doxygen/#how-to-generate-the-doxygen-documentation) look at the list of folders scanned to build the reference guide. It is quite big. When I modify a piece of documentation I shorten this list to generate only what I am working on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7295#issuecomment-787906738:607,guid,guide,607,https://root.cern,https://github.com/root-project/root/issues/7295#issuecomment-787906738,2,['guid'],['guide']
Usability,"> I just checked issues with optional and they are caused because rootcling_stage1 runs in C++14 mode, but no C++17. Currently I don't see where you set a language options for rootcling_stage1. Apriori it is the same place inside cling .... Are you sure it is not simply that our clang version is too old?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/522#issuecomment-298981827:264,simpl,simply,264,https://root.cern,https://github.com/root-project/root/pull/522#issuecomment-298981827,1,['simpl'],['simply']
Usability,"> I just tried and with this simple example I don't see anything, which is totally expected because it doesn't even initialize ROOT. The other reports that you provided before were the leakage we know about, or in the case of TemplateIdAnnotation are fixed by https://github.com/root-project/root/pull/16150. Thanks. I guess what I get from the sanitiser is what you suppress. This clarifies further the situation. > I totally understand that creating a reproducer takes time, but I fear without it there isn't much we can do without it... Fair enough. I will try to find some spare hours for this. In the best case scenario ROOT `6.34` does not show the problem and I can leave here a comment and close the issue... 🤞",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14055#issuecomment-2371268142:29,simpl,simple,29,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-2371268142,2,['simpl'],['simple']
Usability,"> I mean once this option goes to the rootling, it will be off by default. It is clear how to activate it when building with CMake. But I did not find any documentation on modifying the cling invocation options for ACLIC compilation of macros. That is a tough one. [Here](https://github.com/root-project/root/blob/master/core/base/src/TSystem.cxx#L3556-L3571) we configure the rootcling invocation which ACLiC does. [Here](https://github.com/root-project/root/blob/master/config/rootrc.in#L376-L391) we have a set of customization rules for ACLiC. We may want to extend this and if that configuration is set then we can call rootcling differently. On your side, you will 'just' need to alter the `.rootrc` configuration after building ROOT. Alternatively, if your framework qualifies everything and does not require `using namespace std` we may work towards a global cmake option `-Dstrict=On` where we delete all `using namespace std` cases [here](https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L4344) and [here](https://github.com/root-project/root/blob/master/core/metacling/src/TCling.cxx#L1278). This may require additional changes in ROOT and more investment in time but it is the right way to go IMO.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5296#issuecomment-609575899:81,clear,clear,81,https://root.cern,https://github.com/root-project/root/pull/5296#issuecomment-609575899,2,['clear'],['clear']
Usability,"> I might be missing something, but I think the C++ logic can be simplified by removing RTypeErasedMergeables: we should be able to just return a RMergeableVariations<T> (cast to RMergeableValueBase, from which it could inherit) from RVariedAction::GetMergeableValue. What do you think?. My understanding is as follows: `RVariedAction::GetMergeableValue`'s signature is `std::unique_ptr<RMergeableValueBase> GetMergeableValue() const` . Inside the implementation of this function, I have no typename `T` with which I could construct internally a `std::vector<std::unique_ptr<RDFDetail::RMergeableValue<T>>>`. Thus, I need a struct that holds a `std::vector<std::unique_ptr<RDFDetail::RMergeableValueBase>>` (keep in mind that any subclass of `RActionImpl` defined in `ActionHelpers.hxx` has a method `std::unique_ptr<RMergeableValueBase> GetMergeableValue() const`, so inside `RVariedAction`'s `GetMergeableValue` I don't have any information about the concrete mergeable value type).; I would also just return a `std::vector<std::unique_ptr<RDFDetail::RMergeableValueBase>>` directly from this method, but then I would break the pattern of passing around unique ptrs to `RMergeableValueBase` and I would need to change the interface just for `RVariedAction`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9942#issuecomment-1061744458:65,simpl,simplified,65,https://root.cern,https://github.com/root-project/root/pull/9942#issuecomment-1061744458,2,['simpl'],['simplified']
Usability,"> I noticed that by default everything is linked using the static libraries from LLVM. As I [said](https://github.com/root-project/root/issues/12156#issuecomment-1662255320):; > if we link the static libraries we don't want to *also* link the shared library. And we prefer static libs. And what you suggest:; > In `llvm-config`, one needs to pass `--link-static`, and that's about it. Will try it... sounds both plausible and simple :-) Let us know, please!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12156#issuecomment-1666916384:426,simpl,simple,426,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1666916384,2,['simpl'],['simple']
Usability,"> I reworded the documentation and commit message accordingly, can you have another look if it's clear(er) now?. To me the description in ""Ownership Model"" section is now clear. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15246#issuecomment-2069794311:97,clear,clear,97,https://root.cern,https://github.com/root-project/root/pull/15246#issuecomment-2069794311,4,['clear'],['clear']
Usability,"> I see https://github.com/root-project/root/pull/11311. This was not merged and does not reflect that actual content of the file. Somehow in your environment the code snippet I copy/pasted is failing. We need to understand if:; * If the code snippet works in (your) C++20 (expected behavior); * Why is the code snippet failing in (your) C++23 (never tested by us). This should be testable with a simple source file containing just:; ```; #include <span>; #include ""ROOT/RRangeCast.hxx""; ```; (and another test with just the second one).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13042#issuecomment-1595284979:397,simpl,simple,397,https://root.cern,https://github.com/root-project/root/issues/13042#issuecomment-1595284979,2,['simpl'],['simple']
Usability,"> I still don't see the advantage in deviating from the standard (i.e., either #include <cstddef> instead of stddef.h or just #define NULL nullptr). Let's see whether all implementations provide it as prescribed and simply remove it from ROOT (in a new PR). Once that works I'll close this one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/665#issuecomment-309975411:216,simpl,simply,216,https://root.cern,https://github.com/root-project/root/pull/665#issuecomment-309975411,1,['simpl'],['simply']
Usability,> I still don't understand this. All discussions we had so far ended with agreeing that the LLVM upgrade will change nothing wrt the JSON library. After LLVM upgrade we can use `json.hpp` directly in header files.; Thus one can simply avoid complication with `json_fwd.hpp`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11268#issuecomment-1230211903:228,simpl,simply,228,https://root.cern,https://github.com/root-project/root/pull/11268#issuecomment-1230211903,2,['simpl'],['simply']
Usability,"> I still think that the suffix Ptr is a bit misleading due to the fact that operator-> is/can-be a very heavy operation and as such we may want to consider TResultHandle. I think `TResultHandle` would suffer from the same problems as `TResultProxy`: the name is too generic, the average physicist will not know how to use it, it's not clear if I can make a `std::vector` of those, default construct one, assign one, copy.... `operator->` will be heavy for the first time the first result is accessed, and that is _the one thing_ to know about TDataFrame: event loop runs upon first access to one of the results.; Subsequent usages of `operator->` will be fast.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1855#issuecomment-381100053:336,clear,clear,336,https://root.cern,https://github.com/root-project/root/pull/1855#issuecomment-381100053,2,['clear'],['clear']
Usability,"> I strongly believe we should have a similar approach as with our LLVM fork. We need to have some ""source of truth"" that is a certain cppyy/CPyCPPyy tag from upstream and then a clear way to reach the status of our fork from there, i.e. a series of patches that can be applied without conflicts. This PR goes in that direction but doesn't implement it fully as the sync script refers to a repository outside of our organisation. Ideally we would have separate repositories (one for cppyy and one for CPyCppyy) that we can refer to. Thanks for raising this point. The situation will be improved in the next weeks, I'll try to get as many patches merged to upstream as possible. Then, based on how many differences are left, we can decide if we want to go with one (or multiple) separate repositories, or we stay with the patch files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14507#issuecomment-2007655575:179,clear,clear,179,https://root.cern,https://github.com/root-project/root/pull/14507#issuecomment-2007655575,2,['clear'],['clear']
Usability,"> I suspect we could reduce the code of the landau pullback quite a lot. I'm not sure there is still room for much improvement: I have already simplified a lot in my initial PR. Maybe we can merge it, and if you and @vaithak feel like simplifying the pullbacks manually, you can do so in a follow-up PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15501#issuecomment-2120812575:143,simpl,simplified,143,https://root.cern,https://github.com/root-project/root/pull/15501#issuecomment-2120812575,4,['simpl'],"['simplified', 'simplifying']"
Usability,"> I take it from the warnings that I might have to add the other FindObject method (that accepts a TObject pointer) to satisfy the builds? Please confirm and I can do this. Exactly. Something like `auto ptr = dynamic_cast<const RooAbsArg*>; return ptr ? find(*ptr) : nullptr;` should do it. Could you include a one-line doxygen-readable comment (`///`) to avoid having two undocumented functions? Also note that `find(RooAbsArg&)` will find objects with the same name, not necessarily with the same pointer. You should decide with @guitargeek if that's actually desired when called from the Python side. In a second sentence, you should document whether that function will find objects with the same name (= equivalent objects as far as RooFit is concerned) or if it should only find the exact same object.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8177#issuecomment-841335386:373,undo,undocumented,373,https://root.cern,https://github.com/root-project/root/pull/8177#issuecomment-841335386,2,['undo'],['undocumented']
Usability,"> I think TResultHandle would suffer from the same problems as TResultProxy: the name is too generic, the average physicist will not know how to use it, it's not clear if I can make a std::vector of those, default construct one, assign one, copy.... One could give the exact same argument against TResultPtr ;) .... One difference with a pointer is the life-time of the pointee. > the average physicist will not know how to use it,. A lot of the frameworks have the concept of 'Handle' already to indicate this kind of delay-loaded accessor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1855#issuecomment-381102689:162,clear,clear,162,https://root.cern,https://github.com/root-project/root/pull/1855#issuecomment-381102689,2,['clear'],['clear']
Usability,"> I think it should live in InternalTreeUtils?. I was thinking this is generic enough that we may want to use it in places that do not strictly depend from `libTree`, but maybe I'm just overthinking. > How can we be sure that this function returns the same files in the same order as the previous one in all cases?. I hope we already get a (very good?) degree of certainty by not breaking existing test cases. I can come up with a few more just to add extra safety. Irrespective of this, the function is taken verbatim from the logic in `TChain::Add`. Do you see any part of the function that intuitively might lead to different results? I was thinking about this and the only place that remotely gives me a slight doubt is using `std::sort` instead of `TList::Sort`, but I really hope that doesn't introduce a different behaviour. > the new one throws if a directory cannot be opened. Yes indeed that's a different behaviour. The existing logic never throws. In case `dir == nullptr`, which I guess happens if the expanded directory cannot be found/opened (?), then it will just fall to the end of the `TChain::Add` method and `return nf`, where `nf` will be zero since no files have been added. In this regard I see two options:. 1. The new function throws (because subjectively is the correct behaviour). Then in `TChain::Add` we can keep the old behaviour, by catching the error and not re-raising it.; 2. The new function can return an empty vector, in case `dir == nullptr`. This is more similar in spirit with the old behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13160#issuecomment-1619057225:593,intuit,intuitively,593,https://root.cern,https://github.com/root-project/root/pull/13160#issuecomment-1619057225,2,['intuit'],['intuitively']
Usability,"> I think my fix is actually could be right, can you check it please again?. Your fix simply removes usage of semi-standard pthread_setname_np function on linux.; It is not right solution in my mind. Unfortunately, I cannot test with clang8. ; With clang-6.0.1 I see no problems. That you always can do - try to compile following simple program:. #include ""civetweb.h"". int main(int argc, char **argv); {; return 0;; }. Just copy it into net/http/civetweb directory and call:. clang -pthread civetweb.c main.c -ldl -o test . Can you reproduce your error message?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2581#issuecomment-418737656:86,simpl,simply,86,https://root.cern,https://github.com/root-project/root/pull/2581#issuecomment-418737656,4,['simpl'],"['simple', 'simply']"
Usability,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14034#issuecomment-1823482567:73,simpl,simple,73,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1823482567,2,['simpl'],['simple']
Usability,"> I think there is a pretty clear explanation where this comes from in the commit history. We could not load `gRandom`. That was with the very old dyld-based approach to loading symbols. This PR checks if the new approach has the same problem. Note that:; - We can still not reproduce the issue; - With this change, I got the following test failure on Windows (not tested in our CI):; ```; 988: Processing C:/Users/sftnight/git/master/tutorials/rcanvas/symlog.cxx...; 988: IncrementalExecutor::executeFunction: symbol '_imp_?gRandom@@3PAVTRandom@@A' unresolved while linking function '_GLOBAL__sub_I_cling_module_5'!; 988: You are probably missing the definition of _imp_?gRandom@@3PAVTRandom@@A; 988: Maybe you need to load the corresponding shared library?; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10330#issuecomment-1091405727:28,clear,clear,28,https://root.cern,https://github.com/root-project/root/pull/10330#issuecomment-1091405727,2,['clear'],['clear']
Usability,"> I think this is already clear enough. To the person that wrote the code i'm sure it is! :smile: Concretely maybe ""extra arguments to be used by the wrapper object when receiving a call."" could be e.g. ""extra arguments that will be forwarded to `_wrapper_class`'s init method""?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10341#issuecomment-1094768654:26,clear,clear,26,https://root.cern,https://github.com/root-project/root/pull/10341#issuecomment-1094768654,2,['clear'],['clear']
Usability,"> I think we need to think about mapping and the view interface, which uses `RField<T>::Map()` where available. I'd be in favor of ignoring read callbacks for mapping. Mapping should be the interface to get the fastest possible performance. Of course, that would break views on simple types with read callback. One way to deal with it is to simply not allow creating a view on a field with a mappable type and a read callback. Good point; I agree on that :+1:. However, given that any `RField<T>` instance that has an on-disk field ID set (such as the one internally kept by `RNTupleView`) can be connected to a page source, additional bookkeeping is required somewhere else. (**EDIT:** see the pull request description - everything discussed there)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11731#issuecomment-1334547546:278,simpl,simple,278,https://root.cern,https://github.com/root-project/root/pull/11731#issuecomment-1334547546,4,['simpl'],"['simple', 'simply']"
Usability,"> I thought deprecation in 6.30 and removal 6.32, but whatever you think is best. I see more clearly what you were trying to do now. In that case I will have to say I don't agree. We cannot deprecate a feature and backport the deprecation of the feature to an already released branch. What we can do is to deprecate the build option for 6.32 and then remove it in 6.34 :+1: Sorry for my confusion :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14395#issuecomment-1924170430:93,clear,clearly,93,https://root.cern,https://github.com/root-project/root/pull/14395#issuecomment-1924170430,2,['clear'],['clearly']
Usability,"> I understand this will be simplified when we can pass a configuration object to RDataFrame where we specify the range. When reading trees/chains, I'm not sure the configuration object will allow anything more than what we can already do with TEntryLists?. IIUC the redundant info is that `globalend = globalstart + (localends - localstarts).sum()` (i.e. we could avoid passing `globalend`). However: do you still need `globalstart` and `globalend` at all when using TEntryLists?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8646#issuecomment-895318380:28,simpl,simplified,28,https://root.cern,https://github.com/root-project/root/pull/8646#issuecomment-895318380,2,['simpl'],['simplified']
Usability,> I was enabling SetClusterPrefetch as part of the attempt to reduce read_calls when processing our AODs. Apriori it does not intend have an effect on that. > Indeed I now notice that it's enough to simply do:. What is the change (increase of the cache size or explicit cache learning or both)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16640#issuecomment-2406995100:199,simpl,simply,199,https://root.cern,https://github.com/root-project/root/pull/16640#issuecomment-2406995100,4,"['learn', 'simpl']","['learning', 'simply']"
Usability,"> I will try to get rid of ThreadFileMerger by just fusing its functionality into TFileMergeServer. At this point, I don't think that is necessary. That class is in one the use case (i.e. using a ROOT collection). So unless it is clear that replacing THashTable with an equivalent stl collection is much more performant, there is no need to waste time changing the code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/533#issuecomment-299450733:230,clear,clear,230,https://root.cern,https://github.com/root-project/root/pull/533#issuecomment-299450733,1,['clear'],['clear']
Usability,"> I wonder, whether all the new TList should be moved to an in-class member variable initializer (See [C++ Core Guidelines C.48](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-in-class-initializer))?. Yes, this is a fair point. Feel free to open another PR with that further simplification.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13840#issuecomment-1760218445:112,Guid,Guidelines,112,https://root.cern,https://github.com/root-project/root/pull/13840#issuecomment-1760218445,3,"['Guid', 'simpl']","['Guidelines', 'simplification']"
Usability,"> I would be happier of you could replace the #includes both for cling and the compiler by forward declarations where possible. Done. > we should reduce the asymmetry between cling and compiler, not increase it. Problem to keep external includes in such plugins - one never knows if such includes still there or at same place as they were before. Therefore if possible - I prefer to hide them from interpreter.; Also long time ago cint simply was not able to parse all them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5255#issuecomment-606468116:436,simpl,simply,436,https://root.cern,https://github.com/root-project/root/pull/5255#issuecomment-606468116,2,['simpl'],['simply']
Usability,"> I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). Alright, latest commit uses this wording :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7705#issuecomment-810153069:227,simpl,simple,227,https://root.cern,https://github.com/root-project/root/pull/7705#issuecomment-810153069,2,['simpl'],['simple']
Usability,"> I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :). The proposed rename works for me. It's not only for mac and linux, it covers any platform.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14987#issuecomment-2001954686:168,feedback,feedback,168,https://root.cern,https://github.com/root-project/root/issues/14987#issuecomment-2001954686,2,['feedback'],['feedback']
Usability,"> I would rather make only only canvas with the two plot next to each other for a better comparison and a better display on the reference guide. Other wise it looks like a good example. Okay, i'll do that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7801#issuecomment-815696117:138,guid,guide,138,https://root.cern,https://github.com/root-project/root/pull/7801#issuecomment-815696117,2,['guid'],['guide']
Usability,"> I'd leave the backport decision up to you. We can patch this into our user environments without a backport too. Ok, I prefer backports over people patching ROOT :slightly_smiling_face: There is a very low risk of breaking something here, since the PF only affects the case where `exe` contains qemu, which simply didn't work before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14251#issuecomment-1860177688:308,simpl,simply,308,https://root.cern,https://github.com/root-project/root/pull/14251#issuecomment-1860177688,2,['simpl'],['simply']
Usability,"> I'm a little confused as the same tests seems to have been quoted as `passed` and `failed` in the same log. I struggle to find the exact definition of each test as well. I looked through the relevant files, but the structure is not clear to me. Which one exactly? I see from the logs that the interpreted stress test exits with code 1, so there's something going on. The node that has the high number of failures is probably a nullptr deref or similar. > Also, last time when I spoke with @amadio about the future of ROOT, he said you guys discussed making sure people outside of CERN can contribute. Unfortunately, I had to use my CERN login to see the test logs. I also don't know how to replicate the tests in my environment. Do they depend on files hosted somewhere? Could you give me some docs to read so I can find my way around?. Yes, I agree that it's not great to have jenkins behind a CERN login, but I guess this has to be done to secure the instance. The tests should be self-consistent, i.e. bring their own files. Try `ctest -R stressHistFactory -V` to see what's going on locally on your machine (i.e. see invocation and which files are used etc). If the test isn't there, you might have to activate `-Dtesting=ON` or `-Dhistfactory=ON` (which requires `-Dxml=ON`) in cmake.; Does the test pass locally?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9271#issuecomment-968052222:234,clear,clear,234,https://root.cern,https://github.com/root-project/root/pull/9271#issuecomment-968052222,2,['clear'],['clear']
Usability,"> IIUC a NullStmt would mean `if (true) {1;;}`.; > ; > I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. I agree with Axel. A smarter value printer is nice to have but we have enough more important issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6644#issuecomment-713643650:89,simpl,simple,89,https://root.cern,https://github.com/root-project/root/issues/6644#issuecomment-713643650,2,['simpl'],['simple']
Usability,"> IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so?. Yes (where there later is simply changing the input and output of the rootcling invocation in CompileMacro, and tweaking rootcling to handle this new input/output). > Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now. Fair enough :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2187#issuecomment-396920577:425,simpl,simply,425,https://root.cern,https://github.com/root-project/root/pull/2187#issuecomment-396920577,2,['simpl'],['simply']
Usability,"> IIUC, if I have `class MyClass{} m;` on the prompt, currently we will recognize the `class` token and we will ask clang to compile it as is. With the new PR we will be playing with the lookup rules (hideDecl and more) to make sure if we unload it in future it would rewire correctly the declarations and the definitions. I am not sure if IIUC your comment, but if I did, you are worried because it manually patches lookup tables so that old definitions cannot be found. That was the only way AFAIK (without a patch to Clang's SemaLookup), to invalidate old declarations so that a unqualified lookup is not ambiguous. Also, please see https://github.com/root-project/cling/issues/259 for some background on this feature. > I proposed to enable it for physicists within ROOT. I am opposed to enabling it by default for cling standalone with no usage experience gathered neither through the physicists nor via the notebook users. As suggested, I have disabled this feature for Cling standalone. It is manually enabled in TCling, so that it remains usable from the ROOT prompt and Jupyter notebooks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4214#issuecomment-532870917:1047,usab,usable,1047,https://root.cern,https://github.com/root-project/root/pull/4214#issuecomment-532870917,2,['usab'],['usable']
Usability,"> IMHO clearly the better approach is to have less patches. Sure, so can we just remove the patch from the conda forge and see what happens? It's still not clear to me why it is needed. > walk towards a fully cross-compilable ROOT build, albeit this PR might be just a very small step. I agree, but I don't see the bigger picture here: how do you want to achieve this with all of `rootcling` for dictionary and module generation? Personally I don't see a value of starting at the easy leaves with no clear plan how to actually tackle the hard parts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15930#issuecomment-2205481182:7,clear,clearly,7,https://root.cern,https://github.com/root-project/root/pull/15930#issuecomment-2205481182,6,['clear'],"['clear', 'clearly']"
Usability,"> IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem. I would agree if it was not the fact that this is being triggered by a benign and wildely used class ... i.e. `std::pair` ... . Consequently, it my opinion we are almost guaranteed to have this problem appear almost immediately in the wild (i.e. code and code flow that worked before will now fail)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13815#issuecomment-1768955888:81,clear,clearly,81,https://root.cern,https://github.com/root-project/root/issues/13815#issuecomment-1768955888,2,['clear'],['clearly']
Usability,"> IMHO, for the purpose of TEntryList, we have already TTreeReader::SetEntryRange. `SetEntryRange` is small subset of the feature/use of `TEntryList`. The main intent of the `TEntryList` is to store the result of a selection (so a more or sparse list entry numbers) so that further analysis step can read only the already select entries. > TEntryList is definitely not usable in production contexts as it only scales well for a few entries for its purpose. I am not sure I understand 'why'. For `TTree::Draw`, this is not the case as far as I remember. Does `TEventList` scale better for the case you are talking about? (if that is the case we would need to NOT deprecated either of them). Side note: the main intent of `TEntryList` over `TEventList` is that `TEntryList` is supposed to scale better with chain with large number of files. > Indeed, and I hope we are not going to develop the same feature. Humm ... it does not have to be implemented in `RNTuple` and could be implemented in `RDataFrame`; but why don't we want to have the ability to 'store' the result of computational heavy selection to speed-up further analysis by reducing the number of entries needed to be used?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16074#issuecomment-2245984573:369,usab,usable,369,https://root.cern,https://github.com/root-project/root/pull/16074#issuecomment-2245984573,2,['usab'],['usable']
Usability,"> If I read correctly the code, it means that in the pch we could have had garbage anytime in the past, even without VC. Is this correct? If yes, is it only by chance that everything worked?. No, by design. I just screwed up patching the PCH writer; this is a fairly well-controlled piece of clang that I broke. I broke it in a very safe way (because the PCH is safe by design), wasting lots of bytes. > Would we have seen this with valgrind/memory sanitiser if we had given a pass to rootcling generating the pch? If yes, perhaps it makes sense to do it when generating pcms. No. It's all valid memory, we have just been writing and reading long buffers out of which only a few leading bytes were actually needed. Additionally, this broken original patch of mine is pending review with clang, and they would have definitely pinpointed this bug. But we were first!. So I don't really think there's anything to learn or improve here. Please move on ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/848#issuecomment-321400176:910,learn,learn,910,https://root.cern,https://github.com/root-project/root/pull/848#issuecomment-321400176,2,['learn'],['learn']
Usability,"> If the `TChain` had a name then that would be the correct name to assign. Yes.; (I didn't know `TChain`'s could have a name. I thought they were conceptually just concatenations of trees). > 1. Get the name of the first tree in the first file of the chain, and assign that irrespective of the names of the other trees in the chain. That sounds too deliberate to me. > 2. Check that all trees of the chain have the same name (the first one), and assign that. I think this would be the only sensible solution. But I don't kow how big `TChain`s can get and whether such a check would become expensive at some point. > If this is not the case, fallback to assigning the first name anyway ?. Again, I think this is too deliberate. > 3. Invent a new name for the imported RNTuple which will always be applied in case the user is importing from an un-named `TChain`. This could be anything from something simple like `MyRNTuple` to something more unique and complicated like `R__IMPORTED_RNTUPLE`. That is the the status quo, as observed by me. The name picked is `ROOT::Experimental::RNTuple`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13088#issuecomment-1606956482:900,simpl,simple,900,https://root.cern,https://github.com/root-project/root/issues/13088#issuecomment-1606956482,2,['simpl'],['simple']
Usability,"> If the developer wants to also run Python-based unittests, yes. I don't see any issue with that. Humm .. I thought a bare `ctest` would run it, so it is the opposite, one would know to add a `-E ` to ignore them. > No, they are not. Well they ""appear"" to be because of the test. The jenkins node was configured however it was (and the user could have the exact same configuration) and a run of `ctest` fails and ""clearly"" states that those are requirements :). From my limited view point it seems that we have:; * python support is enabled ; * some optional component is not installed (and I am assuming that the related features are disabled and the actual tests related to those features are not run); * a test still complains that those optional component are not installed. To make an analogy: this sound like we would have the situations:; * `X11` support is enabled.; * The `OpenGL` libraries (`MesaGL`) is not installed and support for `OpenGL` is disabled, no test tries to run `OpenGL` code); * Still ctest fails noting that `MesaGL` is in the list of 'requirements'. How does my analogy fails/differs from the `xgboost` case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15212#issuecomment-2052136735:415,clear,clearly,415,https://root.cern,https://github.com/root-project/root/issues/15212#issuecomment-2052136735,2,['clear'],['clearly']
Usability,"> If you are deleting an object that is contained in a `TCollection`, you must remove it from that collection, otherwise the collection has a dangling pointer (that it will use during certain operations, including `Clear` but could be any other operation, etc `ls()` ). Ok, that makes sense, and indeed, it is impossible to do the other way around (i.e. `delete obj` before and `Remove(obj)` from the list after) as there is no obvious way to know if the object has been deleted. So, there is little you can do from the ROOT side. > Maybe setting the content of the dangling TList pointer to NULL just after delete helps ?. It would break the recursive structure of the `deleteTCollections` function, which we'll need to rethink. . Thanks for the clarifications and for your time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14504#issuecomment-1919802758:215,Clear,Clear,215,https://root.cern,https://github.com/root-project/root/issues/14504#issuecomment-1919802758,1,['Clear'],['Clear']
Usability,"> Important that canvas should be stored/restored from I/O. That might actually indicated that there is (also) a problem in the I/O. Does it also fail if you store/restore from a ROOT file (instead of a JSON file)?. And indeed. With some instrumentation, `Clear` see this the first time:; ```; TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up; TList::Clear for 0x5da71f0 see 0x5debc10 live must clean up; TList::Clear for 0x5da71f0 see 0x59fab50 live must clean up; ```; and this after the I/O:; ```; TList::Clear for 0x5ff4e20 see 0x5fef530 live must clean up; TList::Clear for 0x5ff4e20 see 0x5ff4e90 live; TList::Clear for 0x5ff4e20 see 0x5ff5940 live must clean up; TList::Clear for 0x5ff4e20 see 0x5ff4e90 deleted; ```. Where the lack of 'MustClean' in leading to the second one not being cleaned-up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13506#issuecomment-1692193723:256,Clear,Clear,256,https://root.cern,https://github.com/root-project/root/pull/13506#issuecomment-1692193723,8,['Clear'],['Clear']
Usability,"> In `AddColumnsFromField` and `CollectColumns` we now produce both, the vector of `RColumnInfo` records and the `RCluster::ColumnSet_t`. To me it seems that the source of truth is the `RColumnInfo` vector, and it may be clearer to generate and `RCluster::ColumnSet_t` from the `RColumnInfo` vector. It was a small optimization to avoid looping over all columns twice and get all the data we need at once. I can separate the loops if you prefer, it should make little difference.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15954#issuecomment-2210678615:221,clear,clearer,221,https://root.cern,https://github.com/root-project/root/pull/15954#issuecomment-2210678615,2,['clear'],['clearer']
Usability,"> In my mind, we should provide real implementation ; > ```; > TSQLStatement::SetTimestamp(Int_t, const TTimeStamp&); > TSQLStatement::GetTimestamp(Int_t, TTimeStamp&); > ```; > Otherwise these methods will be non-usable for other SQL plugins; > In principle, `TPgSQLStatement::GetTimestamp` could be just copy into `TSQLStatement`; > And same approach used for `SetTimestamp`. Unfortunately, it is impossible to implement these functions directly in TSQLStatement for all cases (database management systems: MySQL, PostgreSQL, Oracle...) because of the following important reasons:; 1. The one possible function with fractions of a second which can be used in TSQLStatement to set and get TTimeStamp; `virtual Bool_t GetTimestamp(Int_t npar, Int_t& year, Int_t& month, Int_t& day, Int_t& hour, Int_t& min, Int_t& sec, Int_t& frac)`; has the last parameter defined everywhere as a fraction of a second without strict specification what fraction means: milliseconds, microseconds, nanoseconds...; For example, PostgreSQL returns microseconds, but MySQL supports and can return nanoseconds in timestamp value, So, if i don't know what a fraction i get via the function, i can't set TTimeStamp with nanoseconds.; 2. TTimeStamp class has timezone value (opposed to TDatime) and i must specify whether it is in UTC in the TTimeStamp constructor:; `TTimeStamp (UInt_t year, UInt_t month, UInt_t day, UInt_t hour, UInt_t min, UInt_t sec, UInt_t nsec=0, Bool_t isUTC=kTRUE, Int_t secOffset=0)`; But I don't know what timezone returns from the function above (in 1.). In PostgreSQL - TPgSQLStatement it is in UTC, in MySQL - TMySQLStatement it is not UTC. If it is specified that ""virtual Bool_t GetTimestamp(Int_t npar, Int_t& year, Int_t& month, Int_t& day, Int_t& hour, Int_t& min, Int_t& sec, Int_t& frac)"" function always returns microseconds in the last field (indeed, it is better in nanoseconds) and always in UTC format for all plugins/DBMS, new functions could be copied to TSQLStatement. Sorry for t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3961#issuecomment-506253921:214,usab,usable,214,https://root.cern,https://github.com/root-project/root/pull/3961#issuecomment-506253921,2,['usab'],['usable']
Usability,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)?. As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14055#issuecomment-1818478493:1167,clear,clear,1167,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-1818478493,2,['clear'],['clear']
Usability,"> In principle `begin` can absolutely return a raw pointer (I _think_ LLVM's SmallVector was designed like that for simplicity, to avoid having to define a custom iterator type). But raw pointers make for fine iterators 😄 Seems like a bug in PyROOT?. I just had a quick look, but it seems to me that this is a corner case which doesn't trigger any mechanic for a proper pythonization, which enables the `for x in rvec` syntax in Python. Let's see, the final word is not yet spoken ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-806482531:116,simpl,simplicity,116,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-806482531,2,['simpl'],['simplicity']
Usability,"> In principle, it is clear what needs to happen, but I would like some input from @pcanal how throwing exceptions in these older parts of ROOT can best be handled (for the newer parts we use `ROOT::Experimental::RException`, but we cannot use this here). I think ""Fatal"" is the recommended way, see https://github.com/root-project/root/pull/14627#discussion_r1492987421. I just proposed a PR with that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14552#issuecomment-1952072544:22,clear,clear,22,https://root.cern,https://github.com/root-project/root/issues/14552#issuecomment-1952072544,2,['clear'],['clear']
Usability,"> In the end, the reason is much simpler: my fix for the dictionary build is simply too narrow. . Great :) Just for kicks, can you verify that the following trivial example works as expected:. ```; root [0] template <typename T, typename Q=const T> struct Example {};; root [1] TClass::GetClass(""Example<Double32_t>"")->GetName(); (const char *) ""Example<Double32_t,const Double32_t>""; root [2] TClass::GetClass(""Example<Double32_t,Float16_t>"")->GetName(); (const char *) ""Example<Double32_t,Float16_t>""; ```. Thanks,; Philippe. eg. Copy/paste this on the ROOT prompt:. ```; template <typename T, typename Q=const T> struct Example {};; TClass::GetClass(""Example<Double32_t>"")->GetName(); TClass::GetClass(""Example<Double32_t,Float16_t>"")->GetName(); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1137193958:33,simpl,simpler,33,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1137193958,4,['simpl'],"['simpler', 'simply']"
Usability,"> In the original reproducer, the __getitem__ attribute check is done for the instance, so this wouldn't help there right?. Right, I know no way around that. Also, it'd be fine for those cases where a pointer is known to be an array, but like the example above, would fail cases where it's simply *likely* to be an array, as a `__getitem__` would be returned. > https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. That will give you different answers depending on whether the sequence has 0 or N elements, though. But there are plenty more worrisome things in that code. :). I'm looking at the implementation of `PySequence_Check`, which is:. ```; int; PySequence_Check(PyObject *s); { ; if (PyDict_Check(s)); return 0; ; return Py_TYPE(s)->tp_as_sequence &&; Py_TYPE(s)->tp_as_sequence->sq_item != NULL;; }; ```. The default `__getitem__` is added to the class as part of the `tp_methods` set and I guess it ends up there. A bit strange, though, as `sq_item` is limited to indexing with Py_ssize_t and that's not specified in the method list (only `METH_O`). But it may give us something to work with as `mp_subscript` is also available. Would have to see whether C++-side `operator[]` properly overrides that and still makes `PySequence_Check` work. It's not directly clear to me that it would, but can give it a try.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15161#issuecomment-2057955720:290,simpl,simply,290,https://root.cern,https://github.com/root-project/root/issues/15161#issuecomment-2057955720,4,"['clear', 'simpl']","['clear', 'simply']"
Usability,"> In what situation is `R__HAS_STD_SPAN` not sufficient? If `ROOT` has been configured to build in C++20 mode and properly installed, it must be set in `RConfigure.h`. If it is not set, this means that the `ROOT` code will use an alternative to `std::span` (because at configure and build time, it detected it was not available). In fact, I have a project that uses C++20, and uses ROOT compiled with C++17, and I encountered compilation errors in the ROOT header file RSpan.hxx as mentioned (redefinition of std::span). However, once the restriction of this preprocessor macro is resolved, the compilation could pass, and no related problems have been encountered for the time being. I also checked RStringView.hxx, this header file also uses a similar technique, so I submitted this patch. I believe that I may not be considerate about this in depth, but I hope that the issues of ""mixing standards"", which seems not to be issues, can be solved. If there are indeed many restrictions/issues on this issue, I admit that this is not such simple...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11311#issuecomment-1252761771:1038,simpl,simple,1038,https://root.cern,https://github.com/root-project/root/pull/11311#issuecomment-1252761771,2,['simpl'],['simple']
Usability,"> Indeed, you are right. I still want to give some hints though. How about; > ; > ```; > ImportError: cannot import module 'pyspark'. Try installing it with `pip install pyspark` or `conda install pyspark`. Refer to the PySpark documentation for more details.; > ```. I would just say `ImportError: cannot import module 'pyspark'. Please see the Spark documentation for installation instructions.`. Why referring to pip or conda? Probably people prefer apt, dnf, pacman, whatever? I'd keep it simple :). People *will* just write `pip/conda install pyspark` if you write this and may not result in a proper configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7705#issuecomment-810141972:493,simpl,simple,493,https://root.cern,https://github.com/root-project/root/pull/7705#issuecomment-810141972,2,['simpl'],['simple']
Usability,"> Instead of -Wl,-w (which suppress all warnings), an undocumented options seems to be -Xlinker -no_fixup_chains (humm I guess actually maybe -Wl,-no_fixup_chains). I am afraid that older linkers will not know `-no_fixup_chains` as that seems to be a new concern. So `-w` it is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12045#issuecomment-1386778190:54,undo,undocumented,54,https://root.cern,https://github.com/root-project/root/pull/12045#issuecomment-1386778190,2,['undo'],['undocumented']
Usability,> Is it clear what ratioplot1->Close() is supposed to mean?. It is just method which is called when canvas closed in interactive mode.; I put it here to demonstrate problem. ; Calling canvas destructor will cause the same seg fault. I tried to fix the problem in #14861 but facing much more problems. ; `RecursiveRemove` is not a solution.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14855#issuecomment-1976051222:8,clear,clear,8,https://root.cern,https://github.com/root-project/root/issues/14855#issuecomment-1976051222,2,['clear'],['clear']
Usability,"> Is it possible to disable the Internet connection with an option during the cmake (and later build) phase?. Well, no, you can simply unplug (or disable) the internet connection. You can also use the `-Dminimal=ON` flag to reduce the number of packages",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8742#issuecomment-887583333:128,simpl,simply,128,https://root.cern,https://github.com/root-project/root/issues/8742#issuecomment-887583333,2,['simpl'],['simply']
Usability,"> Is the intention perhaps that for all other `TFile` subclasses than `TDavixFiles` and `TNetXNGFiles` (and `TFile`) itself the `RRawFileTFile` is used?. Yes, that's what I want to say. I will think about a clearer formulation... (or maybe you have a proposal?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15246#issuecomment-2059405769:207,clear,clearer,207,https://root.cern,https://github.com/root-project/root/pull/15246#issuecomment-2059405769,2,['clear'],['clearer']
Usability,> It does not hit the cache because the unloading clears the memory buffers behind the FileID. This means we have cache but it is unreachable after unloading by design. Fair enough. Which part of the new code make it unreacheable? [I am distracted by LookupHelper.cpp line 87/88 that get an Invalid flag but 'only' assert on it],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2483#issuecomment-413992581:50,clear,clears,50,https://root.cern,https://github.com/root-project/root/pull/2483#issuecomment-413992581,2,['clear'],['clears']
Usability,"> It is already in mathmore. The license is simply not FOSS (read it carefully if you care). Where? The header and source ""seems"" to be saying GPL.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13688#issuecomment-1728435744:44,simpl,simply,44,https://root.cern,https://github.com/root-project/root/pull/13688#issuecomment-1728435744,2,['simpl'],['simply']
Usability,"> It is at the same level of usage and encouragement as TTree. . I sincerely hope not. TEntryList is definitely not usable in production contexts as it only scales well for a few entries for its purpose. For RDataFrame we had to move away from it exactly for this reason. . > And if I remember correctly we do not have yet a RNTuple replacement/equivalent). Indeed, and I hope we are not going to develop the same feature. IMHO, for the purpose of `TEntryList`, we have already `TTreeReader::SetEntryRange` and we should have similar interfaces (private/internal) for modern I/O systems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16074#issuecomment-2242293382:116,usab,usable,116,https://root.cern,https://github.com/root-project/root/pull/16074#issuecomment-2242293382,2,['usab'],['usable']
Usability,"> It is not clear why `ApMon.h` does not include `unistd.h` in the first place. It actually does, but only later in the the compilation unit. I think this is some weird SunOS heritage (sigh). I am trying to see if I can simply get rid of that part.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12762#issuecomment-1535844840:12,clear,clear,12,https://root.cern,https://github.com/root-project/root/issues/12762#issuecomment-1535844840,4,"['clear', 'simpl']","['clear', 'simply']"
Usability,"> It is old logic that `TBrowser` does not starts without `DISAPLAY` variable set or simply in batch mode. One can solve this, but with some fine-tuning in ""normal"" `TBrowser`/`TBrowserImp` classes. If @bellenot has nothing against it - I can propose PR. Thanks @linev ! Feel free to open a PR if you want 😃",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10748#issuecomment-1159421157:85,simpl,simply,85,https://root.cern,https://github.com/root-project/root/issues/10748#issuecomment-1159421157,2,['simpl'],['simply']
Usability,"> It is really simple to check what gets linked in with a debugger if you have the setup done already. If I can get ssh access to a node somewhere I can do that. Unfortunately I don't have a public instance where you get ssh into. I created a simple example that links against ROOT and a different LLVM version, that worked without issue. While doing that I noticed that by default everything is linked using the static libraries from LLVM. This is probably what we want?. In `llvm-config`, one needs to pass `--link-static`, and that's about it. Will try it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12156#issuecomment-1666915077:15,simpl,simple,15,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1666915077,4,['simpl'],['simple']
Usability,"> It is unclear whether havoc will break. Actually, it _is_ clear. A priori your implementation as-is can't work, but if it did, remember that e.g. Gaudi/Athena like to expose only the interfaces and not the actual classes, so with this, you kill their use case. You're roughly on the right path, though, but you have to make this an optional feature. I.e. track a boolean parameter, with a default value that keeps the old behavior, through the full chain, and only add the class name if a) it is possible (this you're missing even above) and b) it is requested. Works like a charm in cppyy (already released).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7290#issuecomment-786085845:60,clear,clear,60,https://root.cern,https://github.com/root-project/root/pull/7290#issuecomment-786085845,2,['clear'],['clear']
Usability,"> It removes the requirement for version 3.9. Technically code works with all 3.x versions of `nlohmann/json.hpp`. I add requirement for 3.9 recently just because we were not using and not testing for `json_fwd.hpp`. Now version restriction is not necessary. > It worsens the error message in case json_fwd.h when it is required for recent versions. They were written based on feedback from upstream, so I would like to keep the detailed messages. `json_fwd.hpp` now always required - not only for 3.11. Just as workaround for time been we allow to use [3.10 .. 3.11] versions without it. After LLVM upgrade we could completely skip usage of `json_fwd.h`. I hope it will happen before 6.28 release.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11268#issuecomment-1230200939:377,feedback,feedback,377,https://root.cern,https://github.com/root-project/root/pull/11268#issuecomment-1230200939,2,['feedback'],['feedback']
Usability,"> It wasn't clear from what you said whether you were aware of that. There are zounds of things that I'm not aware of, but as said, the kind of C++ that folks outside of HEP expect to ""just work"" with cppyy is rather more advanced that the basic C++98 that most folk in HEP still use. Heck, you guys are even still hung up on Python2.7! Anyway, the reason I changed the implementation is b/c it is already not working _today_. C++20 (which Clang5 doesn't support anyway) is just gravy. As for #6389, I'm too far diverged from since I forked ROOT/meta to apply it, so have no interest in it. I'm also not familiar with how the ""special functions"" boil upward. Note that, going back to the initiation of this thread: there was/is no issue with constructors for cppyy proper on Windows: both 32b and 64b, work fine. So, I see no benefit even in trying it out. I'm currently fixing that crash in lookupHelper with unnamed namespaces. Seems the solution is upgrading Cling _and_ a judiciously placed `Interpreter::PushTransactionRAII` (the crash is actually an abort b/c of an open transaction). Then still modules, have to see how Windows looks now; after that, this change to lookupHelper's handling of templates is high on my list.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6393#issuecomment-697676086:12,clear,clear,12,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-697676086,2,['clear'],['clear']
Usability,"> It works because it calls what the virtual table shows 'so-far' and essentially it is equivalent to a call to > TFile::SysOpen, we probably ought to make it clear and do the substitution explicitly in the code. Probably, one should clearly use `TFile::SysOpen()` calls here and check that none of subclasses tries to use that TFile constructor. . > They are not related to this PR . Yes, error message has nothing to do with PR. ; Changes are minimal and looking very promissing. ; Probably, one should check if BIT(9) was used in older ROOT versions with TFile.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4253#issuecomment-523486256:159,clear,clear,159,https://root.cern,https://github.com/root-project/root/pull/4253#issuecomment-523486256,4,['clear'],"['clear', 'clearly']"
Usability,> Just a comment. The fact we still have to use naked new and things like Clone to make the graphics work looks really bad in tutorials. Main problem is ownership of histograms. They are destroyed by `DF` handle at the end and cannot be used for graphics.; The only chance to draw them - is to clone them. And `new TLegend` required while it referencing same histograms again. ; `TLegend::DrawClone()` is simply wrong - while it will clone all referenced objects and loos reference to original histograms. . I see no other chance to correctly create `THStack` and `TLegend` in such situation.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15758#issuecomment-2149433058:405,simpl,simply,405,https://root.cern,https://github.com/root-project/root/pull/15758#issuecomment-2149433058,2,['simpl'],['simply']
Usability,"> Just an idea: would it improve the situation if we kept the one name `RNTupleView` with a template parameter that distinguishes between owning and non-owning, but we make that template parameter an enum so that the meaning is clearly spelled out. I guess we should ask the experiments about this, since this change proposal came from them. ; Personally, I'm not sure how much this would help, given that we would just move the naming problem to the enum values rather than the classes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16363#issuecomment-2337593312:228,clear,clearly,228,https://root.cern,https://github.com/root-project/root/pull/16363#issuecomment-2337593312,2,['clear'],['clearly']
Usability,"> Looks good from my point of view, I'll let Jakob have the final say. One point we should clarify at some point (but doesn't need to block this PR) is how subfield access plays with writing: It intuitively makes sense for reading as you can just have the same value multiple times in memory. But I guess we only want to take the top-level fields from the entry for writing? Should we forbid creating a (parallel) writer passing a model with registered subfields?. This is a very good point, I've only considered the reading side of things. I would be in favor of the last possibility and just completely disallow creating writers from models with registered subfields.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16693#issuecomment-2443706354:195,intuit,intuitively,195,https://root.cern,https://github.com/root-project/root/pull/16693#issuecomment-2443706354,2,['intuit'],['intuitively']
Usability,"> Many thanks for the contribution, @jiangyilism! 🙂; > ; > In principle, LGTM, but I will defer the approval to @vgvassilev. Could you apply the included suggestions in the interim?; > . Sure. Thanks for the feedback.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11286#issuecomment-1401028920:208,feedback,feedback,208,https://root.cern,https://github.com/root-project/root/pull/11286#issuecomment-1401028920,2,['feedback'],['feedback']
Usability,> May be @bellenot might knows why the arrow keys are not responsive. It works for me on Windows... I'll check on Linux as soon as I can,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7184#issuecomment-778190837:58,responsiv,responsive,58,https://root.cern,https://github.com/root-project/root/pull/7184#issuecomment-778190837,2,['responsiv'],['responsive']
Usability,"> May be you can deactivate the zoombox in `TPad::ExecuteEventAxis` and see if the artifact remains ?. If I deactivate the 'removal' of the zoombox after button release, I get this on Ubuntu 20:; ![image](https://user-images.githubusercontent.com/10653970/151999027-9261c038-1725-42d9-bb89-4aa43333c7fd.png). I can move around with the zoombox, make it smaller, etc. and the artifact is still there. Touching on the canvas does not clear the artifacts, which surprises me!. ![image](https://user-images.githubusercontent.com/10653970/151999166-f26ae15b-53d9-4b9e-a08d-fe6afa784214.png). Only if I right click on the box, ""Delete"", the artifacts go away. (without having to click on the canvas)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9763#issuecomment-1027002365:432,clear,clear,432,https://root.cern,https://github.com/root-project/root/issues/9763#issuecomment-1027002365,2,['clear'],['clear']
Usability,"> Maybe we can just make RPageSource::UnsealPage a public method?. In principle yes, I guess for now it's ok to keep it private as it's not clear (to me at least) which use cases in the open this method would cater to. So we can avoid exposing an interface that we might want to take back/change at a later stage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14403#issuecomment-1912119472:140,clear,clear,140,https://root.cern,https://github.com/root-project/root/pull/14403#issuecomment-1912119472,2,['clear'],['clear']
Usability,"> Moving towards a generic explicit implementation based on a markers is. I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6644#issuecomment-713518912:298,simpl,simplicity,298,https://root.cern,https://github.com/root-project/root/issues/6644#issuecomment-713518912,2,['simpl'],['simplicity']
Usability,"> My general comment is that I would try to avoid doing a plain copy of code that is somewhere else.; > ; > I checked `rootx/src/rootx.cxx` and it not only parses `--notebook`, but also several other options such as `-b`, `-l`, etc. This makes me wonder: is `rootx/src/rootx.cxx` the right place to parse options or it's not?; > ; > Also, is there a place where options are parsed no matter the platform? If yes, we should put there the code for `--notebook`, shouldn't we?. `rootx` is used to create the `root` executable, which then may call `root.exe`. One cannot do that on Windows, we can only have one root executable, which is `root.exe`. Now, if someone find another, better solution, fine with me. As I said, this is the simplest and less intrusive solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9142#issuecomment-946778407:730,simpl,simplest,730,https://root.cern,https://github.com/root-project/root/pull/9142#issuecomment-946778407,2,['simpl'],['simplest']
Usability,"> My question was: is it possible to modify the ROOT-cmake-find script, so that it only forces the nlohmann-json-dependency if you are going to use ROOT7 classes? So to say, that depending on the `REQUIRED COMPONENTS` that you use in the `find_package` statement in your user code, it is more or less 'requiring'. That's an interesting question. 🤔 CMake project's can't easily do this. I mean, nothing is impossible, but it's not simple to do. As long as externals are handled through imported library targets (which I'm not sure the nlohmann_json dependency is used with 😕), one would need to tweak the behaviour of CMake in a pretty fundamental way for this. 🤔 You see, when you tell in (in this case) ROOT's build that library `Foo` needs to publicly link against library `Bar::bar`, CMake exports this information in the `ROOTConfig-targets.cmake` file. (That is a file generated fully by CMake itself.) It will say that `Foo` depends on `Bar::bar`. So at that point `ROOTConfig.cmake` has to produce `Bar::bar` in some way. Even if the user's code itself never wants to use the `Foo` library. Because CMake will not like it that it has the `Foo` library defined (even if unused by others), without all of its requirements met. So even if `ROOTConfig.cmake` itself doesn't look for nlohmann_json, if any of the CMake code depends on the `nlhmann::json` target (yes, there is such a target in CMake 😄), the CMake configuration would still fail. With a complaint about `nlohmann::json` not being known. 😦. So generally, projects that publicly depend on something else, always look for all of those dependencies with [find_dependency(...)](https://cmake.org/cmake/help/latest/module/CMakeFindDependencyMacro.html). Regardless of which parts of the project the user wants to use. 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14188#issuecomment-1845002083:430,simpl,simple,430,https://root.cern,https://github.com/root-project/root/issues/14188#issuecomment-1845002083,2,['simpl'],['simple']
Usability,"> My suspicion is that the for the non-modules case we somehow fail to unload the definition of SiStripCluster. That is very likely (or more likely because 'moving memory around change the behavior), the unloading is only partially done. > PS: How the deserialization of the vtables of TMVA::IPruneTool makes the test succeeds is a complete mystery to me at the moment. I recommend that it is actually investigated and understood as this 'seeming random behavior' is likely to be 'use of undefined behavior in the code (somewhere)' or (less likely) the correct behavior but we are completely misunderstanding what's going on under the hood. > It seems to me that failure is the right behavior. It is not :) . I am sure we can agree that an 'undo X' should return the state to a point as if the last X cling related actions had not happened. I.e. the simplified example:. ```; struct Marker { ~Marker() { fprintf(stdout,""dest\n""); } };; .L lib/libStrip.so ; Marker m2;; gInterpreter->AutoParse(""SiStripCluster"");; .undo 2; SiStripCluster obj;; ```. should actually have the same result (assuming no side effect for Marker::Marker) as. ```; struct Marker { ~Marker() { fprintf(stdout,""dest\n""); } };; .L lib/libStrip.so ; SiStripCluster obj;; ```. and it does not (when modules are turned on) ... possibly because the implicit AutoParse (that is triggered by the use of the symbol SiStripCluster) is no longer possible, in the module case, after the first execution (for example because the first execution of the AutoParse is switching some flag, like I already read this part of the pcm file, that is not 'reset'/'reverted' by the undo. > @pcanal, can you remember what exactly we were testing there?. It is testing both that in this setup the undo is not running into an infinite loop and that we correctly support an (implicit or explicit) AutoParse followed by undo followed by an implicit AutoParse. See the related commit:; ```; commit b6296198c2735101051daa33af89fe8ae641991e (fix_cms); Author: ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2852#issuecomment-434478365:741,undo,undo,741,https://root.cern,https://github.com/root-project/root/pull/2852#issuecomment-434478365,4,"['simpl', 'undo']","['simplified', 'undo']"
Usability,"> My two cents is we should disable the tests . Do you mean short term while we fix the issue or do you mean just ignore the issue?. In this case, unless the tutorial (!) are showing something that the user are very unlikely to do, I think we need to go further and make sure that this same crash/problem won't happen to the user. . > (and stop using Jenkins for PR builds). I agree ... except that they seems to be probing an area of the phase space we are not testing elsewhere. Note: if the issue is as simple as ""the installed version of some dependent product is too old so there is no point in fixing the problem"", we still need to fix the `CMake` configuration to fail when asked to use those older version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15211#issuecomment-2050660691:506,simpl,simple,506,https://root.cern,https://github.com/root-project/root/issues/15211#issuecomment-2050660691,2,['simpl'],['simple']
Usability,"> My version of os/compiler/valgrind seems to work better and I got some useful information.; > ; > For `root.exe -b -l -q callfuncbench.cxx+(1000)`.; > ; > The new code is a big faster: `42,696,463,692` instead of `45,892,859,389`; > ; > Some of the calculation are shifted to `Value::Value`: `5,000,000,988` vs `3,100,001,703` (it grows by 2 billions when the overall goes down by 3 billions).; > ; > The gains comes from the disappearance of `TClingCallFunc::InitRefAndExec` (minus 3.8 billions) and the simplifications of `std::function_handler (removed) and TClingCallFunc::exec` (minus 1.2 billions).; > ; > So it is getting better and `Value::Value` is a potential source of further optimization (see related comment).; > ; > [callgrind-callfund.tar.gz](https://github.com/root-project/root/files/9665974/callgrind-callfund.tar.gz). Thanks for the details. I've pushed the further optimization of `Value::Value`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11252#issuecomment-1262680556:507,simpl,simplifications,507,https://root.cern,https://github.com/root-project/root/pull/11252#issuecomment-1262680556,2,['simpl'],['simplifications']
Usability,> Nice change. I proposed a simplification. The tests seem to fail because the change does what it is supposed to do and the reference would need to be adapted. Thanks! We're on it,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10928#issuecomment-1947918617:28,simpl,simplification,28,https://root.cern,https://github.com/root-project/root/issues/10928#issuecomment-1947918617,2,['simpl'],['simplification']
Usability,"> No test was broken in the incrementals: perhaps we can give it a try in the nightlies?. I was hoping getting some feedback from @krasznaa before merging, but I guess we can merge and we'll see afterwards",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14474#issuecomment-1923285964:116,feedback,feedback,116,https://root.cern,https://github.com/root-project/root/pull/14474#issuecomment-1923285964,2,['feedback'],['feedback']
Usability,"> No, that will not work. As i said protoc is actually configured correctly already. The issue is that /opt/homebrew/include is prepended to the search path for headers. I managed to fix it by doing [alisw@526782c](https://github.com/alisw/root/commit/526782cfe8b7a7fffa90ae0395521b01ae902cf7) which will make sure that my own protobuf comes earlier than the one from homebrew. I see in master protobuf will use a config file, so maybe I can simply patch it in my own build. So if it works we can implement it in ROOT. @lmoneta what do you think? Can you give it a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14207#issuecomment-1851925257:442,simpl,simply,442,https://root.cern,https://github.com/root-project/root/issues/14207#issuecomment-1851925257,2,['simpl'],['simply']
Usability,"> No; ordinal as in ""the value on the palette axis"" with a range 0..1. I see the number is also used for interpolation between the defined colors ... not quite clear for the doc but fine ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1130#issuecomment-334249148:160,clear,clear,160,https://root.cern,https://github.com/root-project/root/pull/1130#issuecomment-334249148,2,['clear'],['clear']
Usability,"> Not easy to read/parse but fair enough. I gave a fully compiled C++ reproducer, clearly the syntax can get as simple as. ```cpp; df.Define(""vec3"", ""vec1 + Take(vec2, vec1.size(), 99)"").Display({""vec3""});; ```. Getting quite close to TTree::Draw's compactness. Although, for the sake of completeness, let me state that it is personally not my preferred way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15641#issuecomment-2354009946:82,clear,clearly,82,https://root.cern,https://github.com/root-project/root/pull/15641#issuecomment-2354009946,4,"['clear', 'simpl']","['clearly', 'simple']"
Usability,"> Not exactly the same. Sorry, I meant it's the same in the context that I mentioned: the computation graph is left in a state that at least I do not completely understand and I cannot guarantee is fully usable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13546#issuecomment-1707994347:204,usab,usable,204,https://root.cern,https://github.com/root-project/root/pull/13546#issuecomment-1707994347,2,['usab'],['usable']
Usability,"> Note that at this point, you could also make a PR yourself... Good point, hehhe. I did not do it in the beginning because I was not sure what path to follow (if circular TTree or external class). Your solution with just a std::vector looks neat and simple. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7170#issuecomment-776759665:251,simpl,simple,251,https://root.cern,https://github.com/root-project/root/pull/7170#issuecomment-776759665,2,['simpl'],['simple']
Usability,> Note that concurrent access to different elements of a std::vector is guaranteed to be safe. Do you have a reference and/or clear explanation :) ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2708#issuecomment-425180877:126,clear,clear,126,https://root.cern,https://github.com/root-project/root/pull/2708#issuecomment-425180877,2,['clear'],['clear']
Usability,"> Note that we might still face the problem with DLLs loaded from somewhere else, and for which there is no .lib,. Yes, I agree. This is clearly a problem/risk. > but it looks like an overkill to me, especially if I have to search all volumes (imagine NFS). Why ""all"" volumes? Wouldn't we be limited with the set of ""directory of the dll"" and directorys in %PATH% and other path variables?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6156#issuecomment-672220061:137,clear,clearly,137,https://root.cern,https://github.com/root-project/root/pull/6156#issuecomment-672220061,2,['clear'],['clearly']
Usability,"> Note: at least on Intel architectures, a single 64bit pointer cannot be split into more than one cache line due to alignment of 8 bytes (i.e. it's thread-safe to read it). . Even-though this might be true, the C++ standard explicit says that it is undefined behavior to read a value concurrently with an update with any explicit synchronization mechanism (for example std::atomic). In practice, this means that the same 'happenstance' you describe might not be true on other platforms. Furthermore the compiler is also allowed to re-order code in 'surprising ways' that would thwart/foil the assumption on the happenstance you describe. Thus our policy, consistent with the standard is that if a value can be updated while being read, it either must be an atomic or both the read and write must be protected by a lock. [This is not meant to preclude any other means of synchronization to achieve the same goal]. > Therefore, any thread will either see fBase == nullptr and acquire a lock to create the list of bases, or it will find the value already computed and return it immediately. In this case this true simply due to the fact that fBase is already an std::atomic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/957#issuecomment-327819102:1112,simpl,simply,1112,https://root.cern,https://github.com/root-project/root/pull/957#issuecomment-327819102,2,['simpl'],['simply']
Usability,"> Now that I see this issue (https://its.cern.ch/jira/projects/ROOT/issues/ROOT-8915) can we perhaps also provide a template for the commit messages, and close the issue?. Yes, this seems like a nice addition. The points raised by Philippe in the comments are still valid, we can either only provide it as an opt-in template that people themselves have to add locally as a commit template, or we have to enforce it somehow in the CI. I'm not sure the latter is desirable as it would turn the guidelines into rules. I don't know if this would be possible, but what could be nice is a 'commit format checker' in the CI that doesn't immediately turn red if it doesn't succeed but rather points the contributor to the guidelines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14410#issuecomment-1916621891:492,guid,guidelines,492,https://root.cern,https://github.com/root-project/root/pull/14410#issuecomment-1916621891,4,['guid'],['guidelines']
Usability,"> Now there are new failures associated with this change. Can you point me to one or two of those failures?. > https://github.com/root-project/root/commit/45c0f48f3c3c631d291e0a7a32fd1ba292e79160 fixed a bug in the template argument printing,. For up-streaming that, it probably would need to become a policy switch. If I understand correctly. 45c0f48f3c3c631d291e0a7a32fd1ba292e79160 : remove suffix in template parameter (However the fix seems counter-intuitive, I am not sure what that code change really does). https://github.com/root-project/root/commit/4417a2cd34effdc6ea59797c2d86b6ef8ca8717a : add default template parameter to the printing. Is `SuppressDefaultTemplateArgs` a new option? If it is not, is it new that it was set to true by default? (we always needed the default parameter to be printed ... and actually in most case, we 'worked' at making sure that all the component are explicitly included (with the right spelling, i.e. for 'opaque' typedef), (see Utils/AST.cpp and the partial desugaring). So, so far, my best guess (because I don't understand 'what' it really does) is that 45c0f48f3c3c631d291e0a7a32fd1ba292e79160 has the side effect of destroying/replacing the partial desugaring. I would have expected the change to be much closer to part that generate the (partial) output for this kind of type/value and/or to be an extension in the partial desugaring routines. (As a side note, I have a vague memory that we already solved a similar problem in the past but can not find (yet?) the solution (if any) in the repository)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1136396468:454,intuit,intuitive,454,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1136396468,2,['intuit'],['intuitive']
Usability,> Now you just have to find all includes that could also be handled with a forward declaration. ;-). I do not intend to touch such cases. There are many good reasons to have them as is.; But I just looked through the code (with Eclipse help) and tried to exclude heavy includes like `TMath.h` or `TVirtualX.h` there they simply not used,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5080#issuecomment-593406650:321,simpl,simply,321,https://root.cern,https://github.com/root-project/root/pull/5080#issuecomment-593406650,2,['simpl'],['simply']
Usability,"> Ok, got it. I commented that out and have been proceeding to test things out. I've hit an issue when trying to embed cling into my project and I've boiled it down to the simplest test case I can here: https://github.com/jeaye/cling-linkage-error-test-case; > ; > Is this expected behavior? If so, how can I have cling be able to work with all of the (mangled) symbols which are in my program? I'm trying to use cling as an embedded JIT in my own language's compiler, so the goal is to be generating code on the fly which works with the existing runtime in the compiler. I can move this to a separate ticket if that's preferred. You probably have compiled your code base with -fno-rtti (or exceptions) and you should pass that flag to cling as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1193060626:172,simpl,simplest,172,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1193060626,2,['simpl'],['simplest']
Usability,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT).; > ; > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1629035353:98,learn,learn,98,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1629035353,6,"['clear', 'learn', 'simpl']","['clear', 'learn', 'simply']"
Usability,"> Ok, the code is broken beyond repair, let's just kill it with fire. Yes, getting the code to work properly is 'hard' and thus the work has not been completely. If you have analyzed each of those lines and deemed that indeed it is not semantically possible to cleanups those things at the end of the process, then please replace the (unactivated) deletion code with a clear explanation of why it is impossible to delete (and saying 'it is hard' or 'broken beyond repair' is not quite enough of an explanation :) :) ). So unless, somebody actually investigate each of those lines, please leave them as a guide of what still needs to be investigated. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/794#issuecomment-317278853:369,clear,clear,369,https://root.cern,https://github.com/root-project/root/pull/794#issuecomment-317278853,8,"['clear', 'guid']","['clear', 'guide']"
Usability,"> One general point regarding the overall design. I wonder if the `RVecDS` data source can be made to have a map/vector of `RVec`s as data member instead of `void *` . Thanks for the review! I have changed the `RVecDS` to take a map to `RVecs`, and not pointers to it. > and those RVecs should be views on the numpy arrays. This would make the design intent clearer and possibly remove the need for a custom deleter that calls into a Python function. This is not possible right now, because RVecs are not true ""views on the numpy arrays"" in the sense that their existence keeps the numpy array alive. This is only hacked into the Python side by adding an `__adopted__` member to the RVec python proxy:; https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rvec.py#L135. As soon as the RVec gets passed to the C++ side we are losing this reference. So we can't work around a custom deleter in the `RVecDS`. Well, there would be a way, which is to implement a similar mechanism of implementing a deleter that calls to the Python side in RVec itself! But maybe that's not for this PR :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15031#issuecomment-2018028002:358,clear,clearer,358,https://root.cern,https://github.com/root-project/root/pull/15031#issuecomment-2018028002,2,['clear'],['clearer']
Usability,> Only lingering question is whether a `out.reserve(strlen(in)*2)` would be useful ... (it is not clear if it would). It would be really strange.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7463#issuecomment-796811095:98,clear,clear,98,https://root.cern,https://github.com/root-project/root/pull/7463#issuecomment-796811095,2,['clear'],['clear']
Usability,"> PGO has been investigated in detail by some HEP experiments, e.g. CMS https://indico.cern.ch/event/1106990/contributions/4991214/ . There was no symbol coming from ROOT which was really sticking out. Thanks a lot for sharing the results!. > At the moment don' see clearly how a general purpose framework such as ROOT could benefit from PGO, given the variety of workflows that use ROOT - from HLT to Reco, to Simulation and analysis - and all in different experiments, with very different software stacks. I agree that various workloads can benefit from PGO differently. What we can do is try to measure PGO performance improvements in multiple scenarios (like all the scenarios you mentioned above), and post the results somewhere (e.g. here). If the performance improvement is measurable for some scenarios - put this information into the project's documentation. In this case, users will be aware about additional ways to optimize Root. > Do you have something in particular in mind? Can you invest some time in the topic to prove your point? It would be interesting for us to comment on concrete measurements. Actually, I don't have in mind any specific workload since I don't have enough experience with Root (at least yet). Later maybe I will be able to spend some time on an experiment with PGO and Root. However, my TODO list for such experiments is a bit [huge](https://github.com/zamazan4ik/awesome-pgo/blob/main/are_we_pgo_yet.md) so I cannot promise any results soon.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15778#issuecomment-2154412824:266,clear,clearly,266,https://root.cern,https://github.com/root-project/root/issues/15778#issuecomment-2154412824,2,['clear'],['clearly']
Usability,"> Please think twice about your use-case before building as a shared library. You can get cling as a shared library through the [CppInterOp](https://github.com/compiler-research/CppInterOp) project. Is CppInterOp the future of Cling (that is, will it eventually obsolete it?). I remember reading about some effort integrating Cling or some clang-repl into the LLVM project itself, which would be simplest for users/distributors down the line. As for my use-case, I tried expounding on the rationale here: https://github.com/root-project/root/pull/15563#issuecomment-2125969791",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15563#issuecomment-2125981292:396,simpl,simplest,396,https://root.cern,https://github.com/root-project/root/pull/15563#issuecomment-2125981292,2,['simpl'],['simplest']
Usability,"> Profiles of RNTuple benchmarks (`iotools/cms, lhcb`) showed ~10-20% of; > total runtime is due to allocations in `RPageSource::UnsealPage`. @mxxo @jblomer This work will be resumed soon as we suspect that not reusing addresses is affecting RDMA data transfers (which has an impact on the measured throughput in the DAOS backend). Specifically, we need to confirm that not reusing addresses that appear in the IOVs array in `daos_obj_{fetch,update}()` is related to a higher overhead due to RDMA MR registration. Therefore, this PR might actually have some other side benefits besides reducing memory allocations and heap fragmentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8634#issuecomment-1300054951:175,resume,resumed,175,https://root.cern,https://github.com/root-project/root/pull/8634#issuecomment-1300054951,2,['resume'],['resumed']
Usability,"> Seems to me the error is not cryptic at all. It makes it clear that `main()` already exists. Newbie users do not know what TApplication is, and how that should be related with main(). See https://stackoverflow.com/questions/74247557/warning-failed-to-call-main-to-execute-the-macro/74445395#74445395",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11707#issuecomment-1315414134:59,clear,clear,59,https://root.cern,https://github.com/root-project/root/issues/11707#issuecomment-1315414134,2,['clear'],['clear']
Usability,"> Side question. If you try opening the Cmakelists with QtCreator, does it run well, too?. Well, that QtCreator is still a bit weird to me. I opened the `CMakeLists.txt` file from `documentation/doxygen` but then it is not clear at all what to do . I prefer to concentrate on debugging the batch way which will be the one used at the end. Note: I get this:; <img width=""1217"" alt=""Screenshot 2022-03-30 at 10 47 14"" src=""https://user-images.githubusercontent.com/4697738/160791054-b9f80406-79fe-4389-a8fc-a2d7410254ba.png"">",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9966#issuecomment-1082799915:223,clear,clear,223,https://root.cern,https://github.com/root-project/root/pull/9966#issuecomment-1082799915,2,['clear'],['clear']
Usability,"> Simpler tests that go straight to the point are easier to debug when they break. That's a good point yes. I will modify the reproducer for the linked issue. I prefer to keep the reproducer of the cloning issue because it's also mimicking the extra machinery involved in creating different tasks, changing the RDF spec and cloning the actions in a specific way",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13787#issuecomment-1745141219:2,Simpl,Simpler,2,https://root.cern,https://github.com/root-project/root/pull/13787#issuecomment-1745141219,1,['Simpl'],['Simpler']
Usability,"> Since the errors are true and valid, shouldn't we keep them? Or make them more clear as in `you are trying to access a system-protected file"" or something similar?. The user complains about the error message, then I'm not sure changing the text of the message will help in this case. And the error is `ENOENT`, meaning the file doesn't exists, which is not necessarily true, so telling this is a system protected file is not even reflecting the reality on all OSes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14865#issuecomment-1973063708:81,clear,clear,81,https://root.cern,https://github.com/root-project/root/pull/14865#issuecomment-1973063708,2,['clear'],['clear']
Usability,"> So `R__SUGGEST_CLASS` and `R__SUGGEST_FUNCTION` are now renamed to `R__SUGGEST_FASTER_...`? It's not always about speed, I actually prefer the original names. Agreed.; > Can we spell the diagnostic as `it has a superior alternative` such that we do not need to distinguish class/ function anymore?. Done. The distinction has to be made, though, because compilers provide a plethora of function attributes, but very few class attributes. For that reason (we wanted to make the `is deprecated` disappear from the message), the function macro is fundamentally different from the class macro.; > And the maybe simply `R__SUGGEST` or `R__USE_INSTEAD`?. Yes, that would be nice. However, in my opinion it's more annoying to see the class deprecation warnings than the function warnings. Just check what the bots are saying when the CI finishes. You should at least check a clang and gcc build. Currently, it's `R__SUGGEST_NEW_INTERFACE`, but that enables both class and function warnings. *PS*:; I added the do not merge label because I enabled the warnings in RooChebychev. When we are happy, I would like to remove that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3100#issuecomment-455564165:608,simpl,simply,608,https://root.cern,https://github.com/root-project/root/pull/3100#issuecomment-455564165,2,['simpl'],['simply']
Usability,"> So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug. There are much more options.; May be some of them mix up system include files. Especially following option is very suspicious:. -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include . Could you try compilation of my simple example without all these extra includes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2581#issuecomment-418887676:87,clear,clear,87,https://root.cern,https://github.com/root-project/root/pull/2581#issuecomment-418887676,4,"['clear', 'simpl']","['clear', 'simple']"
Usability,"> So the BranchTypes part of the template was simply not used?. yup, I think at some point we needed it (or I thought we needed it) to delay the instantiation of the template method, but it doesn't seem to be the case anymore.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5208#issuecomment-603091343:46,simpl,simply,46,https://root.cern,https://github.com/root-project/root/pull/5208#issuecomment-603091343,2,['simpl'],['simply']
Usability,"> So you mean extern template the new ExecImp?. Yes, this what I meant. > because you still have to instantiate the ""front-facing"" template . it is a trivial function, that we could even mark as 'force inline' to make it disappear. > Maybe, but I doubt that it actually achieves the goal of reducing compile time .... and neither [of the functions] seems particularly expensive to generate. . I started from the assumption that the existing code was there for a reason. Indeed if the functions are also simple/trivial, the extern template are not needed, however then the git log need to be enhanced to justify/explain that the existing optimization was in fact not needed (assuming this is the case :) )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16176#issuecomment-2271543583:503,simpl,simple,503,https://root.cern,https://github.com/root-project/root/pull/16176#issuecomment-2271543583,2,['simpl'],['simple']
Usability,"> So, I think it is better to make it clear a Clone is needed to avoir deletion. Then this object is drawn ... but the primary thing is to avoid deletion. OK, then I think, the std::unique_ptr should not be used at least in this tutorial, I would close this pr and try another one",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5680#issuecomment-633546122:38,clear,clear,38,https://root.cern,https://github.com/root-project/root/pull/5680#issuecomment-633546122,2,['clear'],['clear']
Usability,"> So, long story, I hope it is clear. Do you think that given this (temporary) situation, the choice for built-in only is acceptable?. Sorry, but no, this is not acceptable if you ask me. In fact, the need for a patched zeromq raises a big red flag as that may make it not possible to ever use a system version of zeromq if your pull request gets stuck. I agree with Axel that the right course of action is to add the needed functionality to zeromq directly first, then add this work to ROOT. I don't think that time constraints should be used as a way to get hackish code into ROOT. Alternatively, if your addition is really independent to zeromq, you could just add it to the RooFitZMQ library instead, so that you can use the system version of zeromq as is. If in a later version they add your new functionality, you can then adapt RooFitZMQ to that in a new pull request.; ; > Then about the RooFitZMQ option: agreed, I should add an option for that. The only catch is that this PR is part of a bigger series and the ""real"" end-product that should be optional in my opinion is RooFit::MultiProcess, so I wanted to wait with such an option until that PR (hopefully I'll be able to submit that one today). In this PR, RooFitZMQ is not used for anything and later on it will just be a library for RooFit::MultiProcess as well, so there would typically not really be a point for a user to want to build RooFitZMQ but not RooFit::MultiProcess. Do you think in this situation it makes sense to add the option for RooFitZMQ already or should I just do it for RooFit::MultiProcess? So, this option (say `-Droofit_multiprocess=ON`) would activate both RooFit::MultiProcess and RooFitZMQ, and also builtin_zeromq. If RooFitZMQ only makes sense as a support library for RooFit::MultiProcess, it's better to put them together in a single pull request. It will be much easier to ensure everything works together that way.; ; > I think that fail-on-missing is only relevant in case there would be a non built-in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8385#issuecomment-870570029:31,clear,clear,31,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-870570029,2,['clear'],['clear']
Usability,"> Some further debugging (but really just dumping notes from some experiments):; > ; > * The problem of `histhistdrawv7testUnit` can be simplified, in some approximation, to:; > ; > ; > ```; > root [0] TClass::GetClass(""ROOT::Experimental::RHist<1, double, ROOT::Experimental::RHistStatContent, ROOT::Experimental::RHistStatUncertainty>""); > root.exe: /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/Decl.cpp:4120: unsigned int clang::FunctionDecl::getODRHash() const: Assertion `hasODRHash()' failed.; > ```; > ; > * Even simpler, just trying to create an object of that template instantiation fails:; > ; > ; > ```; > root [0] ROOT::Experimental::RHist<1, double, ROOT::Experimental::RHistStatContent, ROOT::Experimental::RHistStatUncertainty> h;; > root.exe: /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/Decl.cpp:4120: unsigned int clang::FunctionDecl::getODRHash() const: Assertion `hasODRHash()' failed.; > ```; > ; > * Funnily enough, the `using RH1D = RHist<1, double, RHistStatContent, RHistStatUncertainty>` works just fine; same if I remove the second `STAT` template and only leave `RHistStatContent`. I've been stumbling upon these before: this is not simple as it has some template parameter pack expansion as part of the class inheritance chain...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12062#issuecomment-1419265262:136,simpl,simplified,136,https://root.cern,https://github.com/root-project/root/pull/12062#issuecomment-1419265262,6,['simpl'],"['simple', 'simpler', 'simplified']"
Usability,"> Sorry - I'm missing why updating builtin tbb unconditionally is off the table? Is it?. Not really, for continuity this was a first proposal, also linked to some discussions in the LIM. The overall cost of maintaining just one TBB version would be much lower and I personally would be in favour of simplifying the configuration, if possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13724#issuecomment-1736762182:299,simpl,simplifying,299,https://root.cern,https://github.com/root-project/root/pull/13724#issuecomment-1736762182,2,['simpl'],['simplifying']
Usability,"> Sorry, I simply meant `std::byte b{};`. Oh, right, stupid me...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15787#issuecomment-2154679564:11,simpl,simply,11,https://root.cern,https://github.com/root-project/root/pull/15787#issuecomment-2154679564,2,['simpl'],['simply']
Usability,"> TDirectoryFile::BuildImp ... give them slightly different names. I call them `BuildDirectory` and `BuildDirectoryFile`, and use these names in TROOT and TFile constructors respectively. > Even-though it is not necessary, I would keep the fully qualified name (clearer to read). Done in last commit",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4305#issuecomment-526230058:262,clear,clearer,262,https://root.cern,https://github.com/root-project/root/pull/4305#issuecomment-526230058,2,['clear'],['clearer']
Usability,"> Tell me though: An RDF (= RNode I think?) doesn't take callbacks. I need a `RResultPtr`, correct? Do I have to attach a dummy result or did I miss something?. OK, I had a look, and it would actually be amazing if I could get access to the LoopManager, because then I could just register the callback using `RLoopManager::RegisterCallback` (cannot link to docs because undocumented functions don't get an anchor in doxygen, any more 🤷‍♂️ ).; I don't see a way to get to the [LoopManager](https://root.cern.ch/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html), though. ... and it would be cool because I wouldn't need to throw away the payload of the resultptr, because I'm not using it anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8675#issuecomment-880524867:370,undo,undocumented,370,https://root.cern,https://github.com/root-project/root/pull/8675#issuecomment-880524867,2,['undo'],['undocumented']
Usability,"> Thank you for the addition @ferdymercury ! I believe this is better than `std::tuple_cat` as it doesn't need the input arguments to be `tuples` and it already returns the formatted string. Can I ask you to provide a couple of tests for the new feature?. Thanks! I just wrote a couple of tests, but I am not very familiar with the GTest infrastructure, I usually use CTest. So I will need some guidance from you ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13299#issuecomment-1723612261:395,guid,guidance,395,https://root.cern,https://github.com/root-project/root/pull/13299#issuecomment-1723612261,2,['guid'],['guidance']
Usability,"> Thank you for this PR.; > Since we include I agree we should use `std::sqrt` instead simple `sqrt` that is defined in; > ; > We should probably change other similar files in the genvector package.; > ; > For this PR, it would be nice if you cleanup the commit history and squash the commits in a single one to have a cleaner history; > Thank you; > ; > Lorenzo. Sure, will do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7909#issuecomment-822314822:87,simpl,simple,87,https://root.cern,https://github.com/root-project/root/pull/7909#issuecomment-822314822,2,['simpl'],['simple']
Usability,"> Thank you for your reminders, I will for sure follow the procedure once I am convinced this works fine for all ALICE usecases. Having a PR on the v6-28-00-patches branch merely simplifies sharing something which can be immediately used in the ALICE software stack. Yes understood :). > Could you please advise regarding the data structure to use? I could not find one that fits the needed sparseness. I'm not sure there is one already, but it has some comments to make about `std::vector` (because I saw you mentioning `std::pmr::vector`. If there is none yet (but I think Vassil mentioned one? maybe it's not listed in that document), it should likely be added to LLVM's ADT library first and then used in Clang. > On a separate note, are the tests supposed to be green?. Yes, and from a quick look it seems ~all builds are failing with; ```; Assertion `Index < TypesLoaded.size() && ""Type index out-of-range""' failed.; ```; which very much sounds like it is caused by the changes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13641#issuecomment-1719042201:179,simpl,simplifies,179,https://root.cern,https://github.com/root-project/root/pull/13641#issuecomment-1719042201,2,['simpl'],['simplifies']
Usability,> Thank you very much!. Thank you for your help. I learn something new with every PR :D,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8425#issuecomment-865182237:51,learn,learn,51,https://root.cern,https://github.com/root-project/root/pull/8425#issuecomment-865182237,2,['learn'],['learn']
Usability,"> Thanks Jonas! We might have to call some ROOT clean-up routine that is usually called by the ROOT-injected exit handler to make sure TFiles are closed correctly and similar. @pcanal might know if there is a simple way to do that. I think that's `gSystem->Exit(0)` that was used before. You can pass a second parameter (called `mode` and effectively undocumented AFAICT) that makes it call `_exit()` instead of `exit()`. However, I'm not sure if we need to close `TFile`s because the workers don't open them, the parent should handle them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7075#issuecomment-764677587:209,simpl,simple,209,https://root.cern,https://github.com/root-project/root/pull/7075#issuecomment-764677587,4,"['simpl', 'undo']","['simple', 'undocumented']"
Usability,"> Thanks for noticing, @bellenot! I think that the suggestion should also fix it (and is simpler) 🙂. You're right, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11782#issuecomment-1327938951:89,simpl,simpler,89,https://root.cern,https://github.com/root-project/root/pull/11782#issuecomment-1327938951,2,['simpl'],['simpler']
Usability,"> Thanks for the patch, Advait!; > ; > My thoughts: If the function is added to ROOT as is, I'd implement it in the header and simply `return a==b`. The C/C++ cast from `bool` to `int` is effectively a Kronecker Delta.; > ; > That said, I'm not sure if the function as such does in practice what users expect. Floating point values are hardly ever exactly equal, but usually one tests for them to be equal within +/ epsilon.; > ; > I'll assign to @lmoneta. Ahh yes , I see what you mean.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8719#issuecomment-886482916:127,simpl,simply,127,https://root.cern,https://github.com/root-project/root/pull/8719#issuecomment-886482916,2,['simpl'],['simply']
Usability,"> Thanks for the review! No, there is no unit test for this IO rule, but I tested it locally.; > ; > I don't think it's worth it to include a test for this simple IO rule, because such a test also always needs a file storing an object of the old class version, and I think it's not good to have too many binary files in the repository without strong reasons. Actually, if I may @guitargeek 🙂:; Some of the biggest grievances some users had in RF's ""dormant time"" was a non-functioning schema evolution, which prevented users from moving to a newer ROOT version. You lose these users, as they have to disconnect from ROOT's evolution. Therefore, I strongly suggest having schema evolution tests in master. These files only consume a few kB, and they will never be altered.; This becomes even more important if a specific class version was in use for a long time, because the number of workspaces in the wild will scale with the time that a class version was in master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10909#issuecomment-1181856704:156,simpl,simple,156,https://root.cern,https://github.com/root-project/root/pull/10909#issuecomment-1181856704,2,['simpl'],['simple']
Usability,"> Thanks for your comments! . Thanks for the discussion. I think many students learn C++ from root examples so it matters.; ; Thanks for the link to the docs. I got a little confused about Heap().Create details when I looked at first (and there you go) but I get it now. I learned two things:. a) RDirectory can take an existing shared_ptr using Add() instead of Create(), super!; b) Little thing but it looks like Create() syntax cannot cast a TH1F to a TH1. I've learned to always want a TH1 and never a TH1F, as their interfaces are identical after construction (nothing sliced). Implicit casts make it not a huge issue but I'd still prefer to cast to a TH1 smart pointer first and then use Add(), a trivial nuisance. Maybe Create has a way to cast that I'm missing, or could. Now, There's a lot to unpack here. Let's just stick with my pure subroutine version (not class version) for direct comparison for now. I could pass a structure anyway obviously. Now I can do this, with a TH1F... example 1: ; ```cpp; //my_subtrounes.C. // my_subroutines.C; void my_subroutine(shared_ptr<TH1> &x) {; x.reset(); // not needed for TH1F, but safer in general.; x.reset(new TH1F());; // .. do something with it.; }; ```; ```cpp; //make_th1.C; #include <ROOT/RDirectory.hxx> // one extra line ;); #ifdef __CINT__; // shared_ptr<TH1> mc_global_x,mc_global_y,mc_global_z; // but saved one line here...; #endif. void make_th1() {; shared_ptr<TH1> x,y,z;; my_subroutine(x);; my_subroutine(y);; my_subroutine(z);. // and the last we do is leave globals on the heap for interactive user if needed:; #ifdef __CINT__ // I wouldn't leave the globals in compiled code. ; RDirectory::Heap().Add(""test1"",x); // this line is ""extra"" compared to PR, but puts caller in control.; RDirectory::Heap().Add(""test2"",y); // but using RDirectory requires 3 lines now ;); RDirectory::Heap().Add(""test3"",z); // ; #endif; }; ```; I'm ok with this. I like vanilla better, but I got a clean ownership model up until the end here, and made",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7305#issuecomment-791104038:79,learn,learn,79,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-791104038,6,['learn'],"['learn', 'learned']"
Usability,"> Thanks! Very nice work, @glmiotto :slightly_smiling_face:!; > ; > I have added some comments that we have to address before merging. Great feedback @jalopezg-r00t, thanks as always! I'll get right on it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10720#issuecomment-1152255768:141,feedback,feedback,141,https://root.cern,https://github.com/root-project/root/pull/10720#issuecomment-1152255768,2,['feedback'],['feedback']
Usability,"> Thanks. Sounds like a good idea. Or maybe step and offset. (default 1 and 0). I prefer to set the ""start value"" it is more clear.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10588#issuecomment-1128913760:125,clear,clear,125,https://root.cern,https://github.com/root-project/root/pull/10588#issuecomment-1128913760,2,['clear'],['clear']
Usability,> That's great! Out of curiousity: How does the error message look like for `Filter('x = 0')`?; > And I don't think that this breaks any existing code. Writing back to the input arguments is clearly a super weird thing in RDF and would rely on implementation details that are not visible to the user. Very similar to this:; ```; root [0] auto func = [](const double doub) {; doub += 1.;; }; ROOT_prompt_1:1:6: error: cannot assign to variable 'doub' with const-qualified type 'const double'; doub += 1.;; ~~~~ ^; ROOT_prompt_0:1:29: note: variable 'doub' declared const here; auto func = [](const double doub) {; ~~~~~~~~~~~~~^~~~; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6526#issuecomment-702104810:191,clear,clearly,191,https://root.cern,https://github.com/root-project/root/pull/6526#issuecomment-702104810,2,['clear'],['clearly']
Usability,"> That's the user's guide... it is deprecated ... you should not use it. Hi, I am not using it, but forum users are doing, see https://root-forum.cern.ch/t/syntax-error-in-thisroot-csh-during-installation/50312/4?u=ferhue. So my suggestion is to put a big label on top informing anyone that it is deprecated. The results still appear when googling, so it seems useful to add some deprecated mark",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10722#issuecomment-1151136310:20,guid,guide,20,https://root.cern,https://github.com/root-project/root/issues/10722#issuecomment-1151136310,2,['guid'],['guide']
Usability,"> That's what I was about to say, now the JIT takes the ownership of the `llvm::Module` and then, once it is done JITing, returns it back to the transaction.; > ; > I think what your patch is doing is that, it forces the JIT to run on the `llvm::Module` and return the ownership to the transaction. Maybe not the best in terms of performance, but we should review the entire model where we have Transaction holding a pointer to a `llvm::Module`... I would not say, that the ownership model is the problem in my case. I implemented the device interpreter not well. Most of the functions of the Class `IncrementalCUDADeviceCompiler` should be integrated in an inherited version of `cling::Interprerter`. I discussed this already with Axel [here](https://github.com/root-project/cling/pull/284#discussion_r330985700). So, if the implementation would be clear, the incremental executor should never executed in the device interpreter, because the device code is not direct execute. The code is indirect executed via library function.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-777286355:850,clear,clear,850,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-777286355,2,['clear'],['clear']
Usability,"> The I/O still needs to be informed of this. The simplest is to a ClassDef with version 0 and generate the dictionary. Thanks Philippe, I had tried the ClassDef( ,0), but I forgot to mention it in the LinkDef.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3222#issuecomment-452207570:50,simpl,simplest,50,https://root.cern,https://github.com/root-project/root/pull/3222#issuecomment-452207570,2,['simpl'],['simplest']
Usability,"> The `###` to `#` or `##`. It complains that there is a `subsubsection` with no parent 'section'. Ah ok ... but that looks ugly (I tried) the headers are far too big. I guess we never use ""#"" only in the root ref guide. So fixing the main page might be not enough . The same problem might show with other pages. For instance here: https://github.com/root-project/root/blob/8a63f78a3f910b3bb8b7758a5af06a80d09e567f/hist/hist/src/TH1.cxx#L139",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-910444480:214,guid,guide,214,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-910444480,2,['guid'],['guide']
Usability,"> The cache mechanics looks good, but I think we need to discuss it a little more:; > ; > * I don't think a thread-local page cache works. In `UnzipClusterImpl()` we allocate pages in (TBB) tasks.; > . Oh, you are absolutely right! I didn't thought enough about the implications of this; it might actually happen that pages are returned by a totally different thread (not TBB's). Simplest thing would be to go for a locked data structure (while trying to keep the critical section small). > * I think we should pass a pre-allocated page to `UnsealPage()` instead of the column id. That would result in symmetric appearance of the cache page allocator for allocation an deallocation. I agree that it would result in symmetric use; however, `UnsealPage()` has to reserve an additional buffer for unpacking the page, if needed. Thus, I would leave it as-is or pass a page allocator as an additional (maybe template) argument.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12279#issuecomment-1428033452:380,Simpl,Simplest,380,https://root.cern,https://github.com/root-project/root/pull/12279#issuecomment-1428033452,1,['Simpl'],['Simplest']
Usability,"> The commit fixes a bug but it looks like we have no test for this case. This being TTree, I would warmly suggest a test is added for this case. Well ... that was of course useful ... as thinking about it more made it clear that there more similar cases. See https://github.com/root-project/roottest/pull/487",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5342#issuecomment-612209494:219,clear,clear,219,https://root.cern,https://github.com/root-project/root/pull/5342#issuecomment-612209494,2,['clear'],['clear']
Usability,"> The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Yes, that's the point at which `LoadClassInfo()` gets called. One thread works on that, while others are waiting for it to finish. That particular gap only happens once. > Do we know where (some of) the gaps are stopped in the main regime?. These stops are on the global lock at several points of the code, it's not a single type of wait. >> TBufferMerger random number generation test on my machine (Core i7 6700).; > Is that with or without the lock removed (both test are needed to get a clear view). I wanted to test the impact of your changes, so that means this branch against master (i.e., no, the lock was not removed). I will test with the lock removed tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1251#issuecomment-343755018:675,clear,clear,675,https://root.cern,https://github.com/root-project/root/pull/1251#issuecomment-343755018,2,['clear'],['clear']
Usability,"> The fix is 'simple':. Well yes, see https://github.com/root-project/root/pull/9089 and discussion",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8828#issuecomment-2373131937:14,simpl,simple,14,https://root.cern,https://github.com/root-project/root/issues/8828#issuecomment-2373131937,2,['simpl'],['simple']
Usability,"> The idea was to explicitly take out the relatively complicated conversion step from the tutorials in order to not drive away users. So I think we don't want to add this as another tutorial. Yes, I agree that having a simple tutorials for reading is better. If we expect user to have-to/want to convert TTree into RTNtuple then we should consider have a tutorials, shouldn't we?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6096#issuecomment-666504824:219,simpl,simple,219,https://root.cern,https://github.com/root-project/root/pull/6096#issuecomment-666504824,2,['simpl'],['simple']
Usability,"> The intent is the opposite. The RDirectory's internal representation and what it returns is a kind of shared_ptr. The user register the same name twice then if they hold a 'reference' to it, they keep and if they don't it is deleted. I do appreciate that as written it works and prevents a leak. New and delete have also worked for 20 years of root, and when written correctly do prevent leaks and get the job done, so there's no crisis of course. This offers a little more protection in some usages, but maybe new things to understand in others. I think stack-based lifetime management is simple, intuitive, encourages top-down code design and configuration, and avoids side effects. The smart pointer is interesting. It wasn't obvious to me that create would behave like shared_ptr::reset(), in the sense of allowing copies to persist (rather than redirecting some pointers they contain to the the new thing). . I kind of see a way now that it's possible to get the scalability (produce variable N plots at a time) without editing the PR routine. From my caller I'd need to call the subroutine, then do an RDirectory::Find() to get a shared pointer which will preserve the created thing, then call the routine again to get a new one. And if I still want to keep the first one for the interactive prompt, I have to make it global again with a new RDirectory::Add() of the contained thing, with a new name. So that cat can be skinned, but it's a bit comical compared to just passing the pointer, and certainly less obvious.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7305#issuecomment-795003958:592,simpl,simple,592,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-795003958,4,"['intuit', 'simpl']","['intuitive', 'simple']"
Usability,"> The last commit undoes the first. I could make an new PR if you think it is necessary. Yes, please create new PR, removing these commits",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9005#issuecomment-922042561:18,undo,undoes,18,https://root.cern,https://github.com/root-project/root/pull/9005#issuecomment-922042561,2,['undo'],['undoes']
Usability,"> The simplest solution though is to always create the fTimers . Also I noted that TOrdCollection (the type of fTimes at the moment) has not been upgraded yet to support ```UseRWLock()``` (it will silently ignore it), so we will need to also change the type to ```TList```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8379#issuecomment-857772652:6,simpl,simplest,6,https://root.cern,https://github.com/root-project/root/pull/8379#issuecomment-857772652,2,['simpl'],['simplest']
Usability,"> The way I did this was simply to open the v4 file with a newer ROOT version, use the copy constructor of RooDataHist and save the copied object. Is this the way that you would document, or is there an easier way?. Ah, right. That will work. I thought you re-engineered that RooDataHist to document it in the style of:; https://github.com/root-project/root/blob/ef483dd32765470c702d72adf387d68663e28842/roofit/roofitcore/test/testProxiesAndCategories.cxx#L59-L80. In this case, it was probably this, but I don't remember:; https://github.com/root-project/root/blob/ef483dd32765470c702d72adf387d68663e28842/roofit/roofitcore/test/testRooDataHist.cxx#L242-L248",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8090#issuecomment-832043953:25,simpl,simply,25,https://root.cern,https://github.com/root-project/root/pull/8090#issuecomment-832043953,2,['simpl'],['simply']
Usability,"> There is only one thing I couldn't figure out -- how to link against libpng ... so I just added -lpng into cmake file for graf3d/gl/. Please help me figure out how to do this correctly. Not so simple. Sometime ROOT uses system-wide `libpng`, sometime - builtin version included in `ASImage`.; And they can conflict with each other. Major problem - builtin with ASImage is not available from outside. You have to ensure that your code not linked with `ASImage`. And provide in your CMakeLists.txt file construct like; ```; find_Package(PNG); # handle include directories; ```; Because you may need to use custom include directories. See [here](https://github.com/root-project/root/blob/master/cmake/modules/SearchInstalledSoftware.cmake#L403-L410)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15812#issuecomment-2172410620:195,simpl,simple,195,https://root.cern,https://github.com/root-project/root/pull/15812#issuecomment-2172410620,2,['simpl'],['simple']
Usability,"> They have the same name. We would probably ""just"" need to also tag roottest as `latest_stable`, and update the tag whenever we update root.git's `latest_stable`. That is one of the possible solutions. The other is to add additional code in `CMakeLists.txt` to checkout the corresponding branch of `roottest`, if `latest-stable` has been checked out in the `root` repository, i.e. something similar to; ```; $ git for-each-ref --points-at=latest-stable^2 --format='%(refname:short)'; v6-24-06; ```; And then checkout `v6-24-06` in `roottest`, which is what `latest-stable` points to. For the sake of a simpler release procedure, I vote for this option given that it should only require 3 additional lines in `CMakeLists.txt`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8783#issuecomment-925104676:603,simpl,simpler,603,https://root.cern,https://github.com/root-project/root/issues/8783#issuecomment-925104676,2,['simpl'],['simpler']
Usability,> This column type stores floating point values on disk as integers with a user-defined precision (from 3 to 32 bits) and a user-defined value range. . This sounds very similar to Double32 ... We will need to explain clearly the differences and advantages ....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16390#issuecomment-2352913035:217,clear,clearly,217,https://root.cern,https://github.com/root-project/root/pull/16390#issuecomment-2352913035,2,['clear'],['clearly']
Usability,"> This latter is what needs a clear reproducer to dig out the problem. I agree. This is actually what I was meaning by making an hello-world program **that does not use ROOT**, compile it linking to ROOT and with sanitiser on, and see if the same leak report is given. I would expect so and, if not, then there is something I definitely do not get in our application. 🙈",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14055#issuecomment-1818495744:30,clear,clear,30,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-1818495744,2,['clear'],['clear']
Usability,"> This should be ""upstreamable""; printing `int i [[deprecated(""reason\n"")]];` seems a valid test case. I doubt there's something I don't know, anyway by applying this patch, tests below in LLVM failed:; ```; Failed Tests (23): ; Clang :: AST/ast-dump-attr.cpp ; Clang :: AST/ast-dump-attr.m ; Clang :: AST/ast-dump-c-attr.c ; Clang :: AST/ast-dump-color.cpp ; Clang :: AST/ast-dump-wasm-attr-export.c ; Clang :: AST/ast-dump-wasm-attr-import.c ; Clang :: AST/ast-print-attr.c; Clang :: AST/attr-swift_attr.m; Clang :: AST/attr-swift_bridge.m; Clang :: AST/category-attribute.m; Clang :: AST/pragma-attribute-cxx-subject-match-rules.cpp; Clang :: AST/pragma-attribute-objc-subject-match-rules.m; Clang :: AST/pragma-multiple-attributes.cpp; Clang :: Misc/pragma-attribute-cxx.cpp; Clang :: Misc/pragma-attribute-objc.m; Clang :: Misc/pragma-attribute-strict-subjects.c; Clang :: OpenMP/assumes_codegen.cpp; Clang :: OpenMP/assumes_print.cpp; Clang :: OpenMP/assumes_template_print.cpp; Clang :: Sema/ast-print.c; Clang :: Sema/attr-availability-swift.c; Clang :: SemaCXX/cxx11-attr-print.cpp; Clang :: SemaTemplate/attributes.cpp; ```. A broken example like:; ```; /home/jun/dev/llvm-project/clang/test/AST/ast-print-attr.c:14:11: error: CHECK: expected string not found in input ; // CHECK: int fun_asm() asm(""test""); ; ^ ; <stdin>:3:46: note: scanning from here ; using C = int ((*))() __attribute__((cdecl)); ; ^ ; <stdin>:4:1: note: possible intended match here ; int fun_asm() asm(R""ATTRDUMP(test)ATTRDUMP""); ; ```. > You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn. So I guess if `R` is enough for ROOT, maybe we can drop `ATTRDUMP`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10830#issuecomment-1168753106:1653,clear,clear,1653,https://root.cern,https://github.com/root-project/root/pull/10830#issuecomment-1168753106,2,['clear'],['clear']
Usability,"> This use case is fairly simple with RDataFrame and has been supported for a very long time, also it is really unrelated to this PR. Here is an example of how to deal with such cases: .... Not easy to read/parse but fair enough.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15641#issuecomment-2353530365:26,simpl,simple,26,https://root.cern,https://github.com/root-project/root/pull/15641#issuecomment-2353530365,2,['simpl'],['simple']
Usability,"> To do so we need an additional public API:; GetDatasetInfo, returns string like /path/to/file:name, TBD. > We also want a dedicated GetDataSourceInfo, because we have either fDataSet->GetLabel(), if there's a fDataSource, or a TTree/TChain type if there is a df.GetTree or it's a simple dataframe aka RDataFrame(N) if none if this is true. Alright so I have different opinions for both things. First off, I would like to have a common nomenclature that we agree upon, and we can use as reference in the future for our users. This is what my mind first thinks off when reads the following different names:; * `data format` is the identifier name of the logical or in-memory layout of the dataset. For example, `TTree`, `RNTuple`, `CSV`, `Apache Arrow`. The data format specification also imposes some extra constraints, like a CSV table does not have an embedded name, while a TTree does.; * `dataset` is the concrete representation of the information carried by data contained somewhere in some data format, e.g. a flat table or a table with possible n-dimensional cell elements for our usecases.; * `data source` is kind of more blurred, but I see it as a combination of the two above. You can't have a source of data without a dataset and you need a data format to be able to reason about the dataset and run computations on it. The nomenclature above might not be always true, but I still think it's worth to bring up the point that we should agree on one. It stems from my personal reasoning that:; * While I understand the utility of `GetDatasetInfo`, I see a lot of possible drawbacks which I described in [this comment](https://github.com/root-project/root/issues/7828#issuecomment-817820448) to what we currently call `GetDataSourceInfo` discussion; * I would more clearly understand `GetDataSourceInfo` if it were called `GetDataFormat` or `GetDataFormatName`. I still understand that we could keep this function name to be more aligned with existent RDataSource API, though I see little re",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7561#issuecomment-817863318:282,simpl,simple,282,https://root.cern,https://github.com/root-project/root/issues/7561#issuecomment-817863318,2,['simpl'],['simple']
Usability,"> To show better in the ref guide it is preferable to put the two plots vertically instead of horizontally.; > Therefore you should change the TCanvas and Divide lines to:; > ; > ```; > TCanvas *c1 = new TCanvas(""c1"", ""Schroedinger's Hydrogen Atom"", 750, 1500);; > c1->Divide(1, 2);; > ```; > ; > That will be the last changes. After that we can merge it. Okay, thank you for you help",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7801#issuecomment-816712227:28,guid,guide,28,https://root.cern,https://github.com/root-project/root/pull/7801#issuecomment-816712227,2,['guid'],['guide']
Usability,> Usability. The drawing options are the more common entity to be accessed. I will add a DrawAndGetDrawable in a future revision. Yes but it is counter intuitive ... Add a drawable and get back an option ... will have to see in tutorials what it looks like ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1130#issuecomment-334249466:152,intuit,intuitive,152,https://root.cern,https://github.com/root-project/root/pull/1130#issuecomment-334249466,3,"['Usab', 'intuit']","['Usability', 'intuitive']"
Usability,> Use a unique_ptr which guarantees the reference to stay valid for as long as the referencee is alive. But it changes the cardinality ... where there was a guarantee to have only one there is no one per SectionMemoryManager. ; Is that okay? If it is why wasn't that simpler pattern used (by llvm) in the first place?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7343#issuecomment-789911011:267,simpl,simpler,267,https://root.cern,https://github.com/root-project/root/pull/7343#issuecomment-789911011,2,['simpl'],['simpler']
Usability,"> Very nice! A few nits, in particular whole line comments in the code should use the `//` style (which makes it easier to comment blocks including comments with `/* */`).; > ; > I leave the final approval up to @jalopezg-r00t. Thanks for the feedback and suggestions, @jblomer! Block comments will be used more judiciously from now on :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10720#issuecomment-1152096497:243,feedback,feedback,243,https://root.cern,https://github.com/root-project/root/pull/10720#issuecomment-1152096497,2,['feedback'],['feedback']
Usability,"> Very nice! Initially, I thought that `includeSubFields` means that a matching fields counts with the size of its subtree. Perhaps the true meaning can be made more clear with `searchInSubfields`. Ah, good point! Yes, that sounds like a better name.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13331#issuecomment-1655666693:166,clear,clear,166,https://root.cern,https://github.com/root-project/root/pull/13331#issuecomment-1655666693,2,['clear'],['clear']
Usability,"> Very nice! Interactive rebase is awesome once you learn how to use it!. Yeah, it is. Feels like I've been living under a rock hehe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8426#issuecomment-862436434:52,learn,learn,52,https://root.cern,https://github.com/root-project/root/pull/8426#issuecomment-862436434,2,['learn'],['learn']
Usability,"> We did not come up with a better name. Ours was SparseVector. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset 101 in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right?. No, you would need first to register the range [100, 200) via addEmptyRange(). I could try to modify it for that behaviour, if you prefer. Maybe it would allow me to get rid of the logarithmic lookup, actually (basically, one less vector to worry about). > If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. Ok, I will clean it up a bit more. > Can we make the API of the PagedVector such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase?. > The source locations offset would be a major source of improvement if this technique flies there. I couldn't find the source locations vector anymore. Could you point it to me?. > PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html. I will have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1717037288:644,simpl,simple,644,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1717037288,2,['simpl'],['simple']
Usability,> We don't need (a) as we're no longer even generating rootmap files. Humm ... Was it made clear/decided that moving to use module **requires** that the user upgrade to using explicit-linking or is there a plan to migrate this feature of the rootmap file to something else?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2135#issuecomment-394474495:91,clear,clear,91,https://root.cern,https://github.com/root-project/root/pull/2135#issuecomment-394474495,2,['clear'],['clear']
Usability,"> We have a clear path to deal with this behaviour. Although there is a workaround, people hit by this bug will not necessarily know right away why their ROOT doesn't work and may waste their time trying to debug it. I think it's worth looking at a fix. It used to work before even with the compiler wrappers. Note also that the problem reported by @xkzl happens for a similar reason, but is not quite the same as the one reported here, as in https://github.com/root-project/root/issues/10556#issuecomment-1931464549 ccache is not involved.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10556#issuecomment-1968623162:12,clear,clear,12,https://root.cern,https://github.com/root-project/root/issues/10556#issuecomment-1968623162,2,['clear'],['clear']
Usability,> We have root7 enabled on mac1014/cxx17. What make you think we don't?. But how it not recognize such simple error?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4380#issuecomment-530800499:103,simpl,simple,103,https://root.cern,https://github.com/root-project/root/pull/4380#issuecomment-530800499,2,['simpl'],['simple']
Usability,"> We have this standard tutorial: https://root.cern/doc/master/canvas2_8C.html; > Without your change the axis titles appear as you see on the reference guide online.; > With your change all the titles disappear. Ok I've just run this demo, thanks for pointing me to it, and yes I confirm with my fix the titles disappear. But that was only because an offset of ""5"" was now too big, so I reduced it to ""1"" and they reappear. But I see now that the way they reappear for the x-axis is great but for the y-axis they depended on the height of the pad, so I concede that the fix as it stands isn't going to giver desirable behaviour. I think what I was trying to achieve here was a title offset that scales sensibly with the label offset, so that you dont have to tune the title offset for each pad size you work with. For example, if I take the histogram from the example and plot it to its own canvas in current ROOT, suddenly the offset of 5 is way too big and the titles disappear. I tried the following which seems to work well. ```; charheight /= (gPad->GetWh()*((x1==x0) ? gPad->GetAbsWNDC() : gPad->GetAbsHNDC()));; ```. With this change, and making the titleoffsets in the example=1, things look pretty, and also if I plot the histogram to its own canvas the same offsets then things still look good. . See the attached screenshot. The plots on the left are existing ROOT and note the title offsets are 5 in both cases, so ok for top left but no good for bottom left. But with the line above in TGAxis, title offset of 1 in both cases looks pretty reasonable to me. But I appreciate this is a change in behaviour that may be undesirable. I dunno, what are your thoughts?; ![Screenshot 2021-05-25 at 15 41 38](https://user-images.githubusercontent.com/18280829/119517952-fb4bcb00-bd6f-11eb-86fc-7829ba2c4191.png)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8235#issuecomment-847929734:153,guid,guide,153,https://root.cern,https://github.com/root-project/root/pull/8235#issuecomment-847929734,2,['guid'],['guide']
Usability,"> We measure an ~18% decrease when applied to CMS's NanoAOD compressed with LZ4. My expectation, that simple approach gives 10% or maybe more - while it much more efficient in terms of produced data size. Therefore I would recommend to try it first - it is really very simple.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1003#issuecomment-332284056:102,simpl,simple,102,https://root.cern,https://github.com/root-project/root/pull/1003#issuecomment-332284056,4,['simpl'],['simple']
Usability,"> We measured that sweeping a dataset with 59 files on eos within CERN network checking entries numbers in trees took ~.3s per file. Isn't this perf hit too large?. I am not 'too' worried about the user side (albeit, some TChain may have 1000s of files) but on the server side (i.e. trying to avoid a denial-of-services attack on the server). I still strongly recommend that we do not open all the files at once we 'stop'/'throttle' once you reach the number of task/threads you are going to have (then take a pause, start the actual tasks/jobs and then restart 'slowly' to get the rest of the information).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3051#issuecomment-442089455:510,pause,pause,510,https://root.cern,https://github.com/root-project/root/pull/3051#issuecomment-442089455,2,['pause'],['pause']
Usability,> We should really have a test for this... I absolutely agree! @scott-snyder how involved is the failing test in the ATLAS framework? If it's not too complicated to boil it down to a simple reproducer it would be really helpful here. Otherwise I can try to sketch one myself and then you can tell us how closely it represents your original case.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14887#issuecomment-1980364814:183,simpl,simple,183,https://root.cern,https://github.com/root-project/root/pull/14887#issuecomment-1980364814,2,['simpl'],['simple']
Usability,"> We strive/want to have the name of the column to be usable identifiers. Thank you Philippe, I've just pushed a new commit for this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8227#issuecomment-846119670:54,usab,usable,54,https://root.cern,https://github.com/root-project/root/pull/8227#issuecomment-846119670,2,['usab'],['usable']
Usability,"> We will need once to discuss this PR and #5249 . Do you have preferred solution? :). Personally I find more clear #5249, but I get the point of @etejedor who prefers this, so I'm working mainly on this one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5261#issuecomment-607779478:110,clear,clear,110,https://root.cern,https://github.com/root-project/root/pull/5261#issuecomment-607779478,2,['clear'],['clear']
Usability,"> Well not quite, it broke clean builds on the `master` branch on basically all platforms... Not clear why, investigating. Where did you see that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12149#issuecomment-1661819517:97,clear,clear,97,https://root.cern,https://github.com/root-project/root/pull/12149#issuecomment-1661819517,2,['clear'],['clear']
Usability,"> Well, no, you can simply unplug (or disable) the internet connection. Not really a good idea. I tried to run cmake for windows, but got some errors here as well, unfortunately stopping my attempts to build ROOT and especially to build the documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8742#issuecomment-887610171:20,simpl,simply,20,https://root.cern,https://github.com/root-project/root/issues/8742#issuecomment-887610171,2,['simpl'],['simply']
Usability,"> Well, what I'm doing here i prevent the following example: The class `TVector3` has a method `Orthogonal()` returning a `TVector3`, which as a method `Orthogonal()`, and so on. It's maybe not optimal, but it's a good compromise between not browsing any `TMethodBrowsable` and having infinite recursion. That being said, feel free to propose a better solution (it's @pcanal code anyway wink). At the end of the day, IIUC, what we need is to be able to (even partially) browse methods to be able to draw something... Yes, I see. However, while the case `Orthogonal()->Orthogonal()` is seldomly useful, other simple cases like `Orthogonal()->Px()` might be useful. . So I do actually wonder why the infinite recursion is an issue — I'm with @pcanal 's comment from #13233 here, i.e. since the recursion is real, and given that the populating is already done lazily (i.e. triggered by the user clicking), it does not break anything technically (unless I missed something). . In other words: Is JIRA issue [#9260](https://sft.its.cern.ch/jira/browse/ROOT-9260) actually a bug? In my opinion, this would be intended behaviour (if I click on a method which returns something not really useful from the mathematical / physics point of view, ROOT has no way to know and gives me exactly what I asked for :wink: ).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13284#issuecomment-1642563861:608,simpl,simple,608,https://root.cern,https://github.com/root-project/root/pull/13284#issuecomment-1642563861,2,['simpl'],['simple']
Usability,"> What Cling is really crashing on is the definition of `art::ensurePointer` or more precisely any function definition with a `try`-`catch` block as body (which I just learned is valid C++...). The problem can be seen with; > ; > ```c++; > .rawInput; > void f() try { } catch (...) { }; > ```; > ; > (on the ROOT prompt). Yeah, that's a common pitfall, where the assumption that the function's body is a CompoundStmt is incorrect. I suspect the fix is trivial?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9664#issuecomment-1021074174:168,learn,learned,168,https://root.cern,https://github.com/root-project/root/issues/9664#issuecomment-1021074174,2,['learn'],['learned']
Usability,> What about DrawCopy instead of DrawClone (keeping the simple cd) ?. DrawCopy could only used with TH1::; The TImage and TGraph do not have member function of DrawCopy,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5680#issuecomment-633524404:56,simpl,simple,56,https://root.cern,https://github.com/root-project/root/pull/5680#issuecomment-633524404,2,['simpl'],['simple']
Usability,"> What about replacing them with a free alternative?. Yes, I think it will be simpler",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8357#issuecomment-946590814:78,simpl,simpler,78,https://root.cern,https://github.com/root-project/root/issues/8357#issuecomment-946590814,2,['simpl'],['simpler']
Usability,> What happens if you simply remove the DEPENDENCY. Then rule executed only once when target file is not exists.; Any following changes in source will have no effect,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9804#issuecomment-1029083072:22,simpl,simply,22,https://root.cern,https://github.com/root-project/root/pull/9804#issuecomment-1029083072,2,['simpl'],['simply']
Usability,"> What is the change (increase of the cache size or explicit cache learning or both)?. Doing the caching at all. I thought prefetching was part of it, but apparently it is not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16640#issuecomment-2407188475:67,learn,learning,67,https://root.cern,https://github.com/root-project/root/pull/16640#issuecomment-2407188475,2,['learn'],['learning']
Usability,"> Which bug report is that? Which link is broken exactly? I found one that we can _improve_ - #7307. https://github.com/root-project/web/issues/510. The link ""You can find in the reference documentation page pointers to reference manuals for all ROOT versions."" is http://root.cern/guides/reference-guide, and it redirects to that same page.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7295#issuecomment-787091629:282,guid,guides,282,https://root.cern,https://github.com/root-project/root/issues/7295#issuecomment-787091629,4,['guid'],"['guide', 'guides']"
Usability,"> While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business... This is how I initially implemented it. Indeed it makes the index itself much more straightforward. However, when I started prototyping the actual join/unaligned friends it really didn't work without making that interface overly complicated so in the end I opted for a non-templated version. Perhaps there's some template trickery to still make it play nice with the foreseen interface (or allow for a slightly different but still simple enough interface), I will think about it for a bit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15116#issuecomment-2285578132:367,simpl,simplify,367,https://root.cern,https://github.com/root-project/root/pull/15116#issuecomment-2285578132,4,['simpl'],"['simple', 'simplify']"
Usability,"> With output variable you mean adding PARENT_SCOPE, or something else? This doesn't seem to require fixes in root test; > ... but; > So I make REFLEX_.. a function and then simply do ` set(gensrcdict ${dictionary}.cxx PARENT_SCOPE)` I get this error:; > ; > ```; > CMake Error at /home/sailer/software/buildroot/RootMacros.cmake:183 (add_custom_command):; > add_custom_command Wrong syntax. A TARGET or OUTPUT must be specified.; > Call Stack (most recent call first):; > /home/sailer/software/roottest/cmake/modules/RoottestMacros.cmake:349 (REFLEX_GENERATE_DICTIONARY); > /home/sailer/software/roottest/root/meta/dictSelection/CMakeLists.txt:1 (ROOTTEST_GENERATE_REFLEX_DICTIONARY); > ```; > ; > If I keep the first `set(gensrcdict...)` and add this ` set(gensrcdict ${dictionary}.cxx PARENT_SCOPE)` after the `add_custom_command` call I at least don't get any obvious cmake errors I can connect with these changes. I imagined that we will have the setting with PARENT_SCOPE and on the roottest side we will have an extra variable which we use onward. > ; > Could you trigger the CI, please? I would like to know if these changes are at least working. Done. > ; > To not have USES, one would check if `${dictionary}` is a target or not (I don't think this was a requirement before?) and then do what was done with the list given to USES before.; > This can potentially affect existing uses of REFLEX_GENERATE_DICTIONARY; > ; > ```cmake; > IF(TARGET ${dictionary}); > LIST(APPEND include_dirs $<TARGET_PROPERTY:${dictionary},INCLUDE_DIRECTORIES>); > LIST(APPEND definitions $<TARGET_PROPERTY:${dictionary},COMPILE_DEFINITIONS>); > ENDIF(); > ```; > ; > ```cmake; > IF(TARGET ${dictionary}); > target_sources(${dictionary} PRIVATE ${gensrcdict}); > ENDIF(); > ```. That seems to be the pattern used for the `ROOT_GENERATE_DICTIONARY` analog [here](https://github.com/root-project/root/blob/master/cmake/modules/RootMacros.cmake#L526). It would be great if we can reuse some code there...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5019#issuecomment-587581863:174,simpl,simply,174,https://root.cern,https://github.com/root-project/root/pull/5019#issuecomment-587581863,2,['simpl'],['simply']
Usability,"> Yes but we do not need to have consecutive ranges and I think encoding the following way is clearer:; > ""xy"" -> [0, 1000]; > ""X"" -> [2000, 3000]; > ""y"" -> [4000, 5000]. I think, it is also ok.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1553#issuecomment-360485904:94,clear,clearer,94,https://root.cern,https://github.com/root-project/root/pull/1553#issuecomment-360485904,2,['clear'],['clearer']
Usability,"> Yes that's what is said in the DrawClone documentation. But what about using simply Draw instead of DrawClone in these examples ?. In fact, the older version is using simple Draw without std::unique_ptr; the latest version is using std::unique_ptr instead of simple pointer, this would deconstruct at the end of program. so DrawClone must be used",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5680#issuecomment-633415717:79,simpl,simply,79,https://root.cern,https://github.com/root-project/root/pull/5680#issuecomment-633415717,6,['simpl'],"['simple', 'simply']"
Usability,"> Yes they need to be fixed. I could tell you - but what I'd recommend (look, we're teaching you here :-) ) is to copy the warning text, search the Internet, and pick the most helpful posting on StackOverflow: that'll explain you what to do. And it's a key pattern to become a successful developer, it's how all of us fix our warnings. Ahh hehe. Okay, I'll try to fix it :D . Thanks for the learning opportunity",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8426#issuecomment-862486337:391,learn,learning,391,https://root.cern,https://github.com/root-project/root/pull/8426#issuecomment-862486337,2,['learn'],['learning']
Usability,"> Yes this is a way towards this. There are more steps (TFile, TKey and adding custom streamers for the TProto* classes and a few others) so not simple but likely straight-forward. @pcanal, would simplifying the rdict.pcm file content reduce the amount of things we need to sink? Do we need custom streamers for it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6532#issuecomment-722617999:145,simpl,simple,145,https://root.cern,https://github.com/root-project/root/pull/6532#issuecomment-722617999,4,['simpl'],"['simple', 'simplifying']"
Usability,"> Yes, but on that web page, there is no module for MacOS14 yet. That might be the cause of the problem because when I build it from sources on my MacOS 14 machine I have no problem with TBrowser. The version for macOS14 should come soon. Meanwhile, you can try to build from the sources if you want. I'm sorry if I didn't make myself clear. I also build it from sources on my MacOS 14 machine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13834#issuecomment-1756960653:335,clear,clear,335,https://root.cern,https://github.com/root-project/root/issues/13834#issuecomment-1756960653,2,['clear'],['clear']
Usability,"> Yes, it seems the problem arises mainly when googling. The first two results lead you to the deprecated users guide. We need to watermark them in that case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10722#issuecomment-1151221786:112,guid,guide,112,https://root.cern,https://github.com/root-project/root/issues/10722#issuecomment-1151221786,2,['guid'],['guide']
Usability,"> Yes. But this is *wonderful*! This is a fantastic approach imho! Can I just throw in another suggestion then. Since we are introducing these new API methods from scratch and they do not belong already to any of the base classes of `TVirtualPad`, maybe we can take the opportunity to give them some more meaningful name. For example, `Add` could be `RegisterDrawable` or `AdoptDrawable` or just `Register`/`Adopt`. I would be in this sense very much in favour of having `Adopt(std::shared_ptr<TObject> obj)` so that the memory ownership is clear. This would for example enable any use case where the drawable object is not registered with the list of global cleanups. In the same spirit, I don't see (yet) the need for `AddFirst` and `Remove`. What are the user-side reasons for these?; In the current changes:; * `AddFirst` is defined in the class but never used anywhere else, so it should be removed.; * `Remove` is used only for internal purposes and could be made a private method.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15822#issuecomment-2162805726:541,clear,clear,541,https://root.cern,https://github.com/root-project/root/pull/15822#issuecomment-2162805726,2,['clear'],['clear']
Usability,"> You see that after deleting the dataset gives exactly the same memory as after having created the dataset, so there is a problem, isn't it ?!?. I'm not convinced by this yet because I don't completely understand the output at this point. Yes, you are right, memory doesn't decrease, but starting from the third toy it also doesn't *increase* when `generate()` is called, right? So these numbers don't make sense to me to begin with, and I would rather not conclude that there is a memory leak based on . But anyway, I managed to convince myself by generating many more toys, and observing a steady memory increase over time. I did this with a simplified version of your reproducer:; ```C++; void Minimum2(); {; using namespace RooFit;; using namespace RooStats;. ProcInfo_t procinfo;; const float toMB = 1.f / 1024.f;. std::unique_ptr<TFile> f_ws{TFile::Open(""WS-YY-resonant_500_For_Comb.root"", ""READ"")};. auto *ws = f_ws->Get<RooWorkspace>(""combWS"");; auto *mc = static_cast<ModelConfig *>(ws->obj(""ModelConfig""));; auto *pdf = static_cast<RooSimultaneous *>(mc->GetPdf());. for (std::size_t index_toy = 1; index_toy < 500; index_toy++) {. const RooArgSet *Observables = (RooArgSet *)mc->GetObservables();; std::vector<std::unique_ptr<RooDataSet>> toyDatas;; std::map<string, RooDataSet *> toyDataMap;. RooCategory channellist{""channellist"", ""channellist""};. // generate each category; for (auto const &item : pdf->indexCat()) {; channellist.defineType(item.first.c_str());; RooAbsPdf *pdftmp = pdf->getPdf(item.first.c_str());. RooArgSet obstmp;; pdftmp->getObservables(Observables, obstmp);. toyDatas.emplace_back(static_cast<RooDataSet *>(pdftmp->generate(obstmp, Extended())));; toyDataMap[item.first.c_str()] = toyDatas.back().get();; }. RooRealVar wt(""wt"", ""wt"", 1);; RooDataSet toyData{""toyData"", """", {*Observables, wt}, Index(channellist), Import(toyDataMap), WeightVar(wt)};. if (index_toy % 10 == 0) {; gSystem->GetProcInfo(&procinfo);; std::cout << index_toy << "": "" << procinfo.fMemResi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8984#issuecomment-1387712730:645,simpl,simplified,645,https://root.cern,https://github.com/root-project/root/issues/8984#issuecomment-1387712730,2,['simpl'],['simplified']
Usability,"> You should probably just delete that commit from the branch history, e.g. with an interactive rebase (`git rebase -i master` + `git push --force`). Isn't ""squash and merge"" good enough? Otherwise I will simply make another PR, so I'm sure not to screw up ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11892#issuecomment-1351098247:205,simpl,simply,205,https://root.cern,https://github.com/root-project/root/pull/11892#issuecomment-1351098247,2,['simpl'],['simply']
Usability,> `!entry == true` if `entry == 0`: `0` is fals-y in C++. Ohh I didn't know that. Then maybe one could simply check if entry is undefined. Or does that cause the same error?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8425#issuecomment-861667463:103,simpl,simply,103,https://root.cern,https://github.com/root-project/root/pull/8425#issuecomment-861667463,2,['simpl'],['simply']
Usability,"> ```c++; > auto progbar = ROOT::RDF::MakeProgressBar(df, everyNEvents, nEvents); // last 2 args are optional; > ```. Although the ProgressBar won't be a progress bar when we don't know the number of events ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8675#issuecomment-880514090:154,progress bar,progress bar,154,https://root.cern,https://github.com/root-project/root/pull/8675#issuecomment-880514090,2,['progress bar'],['progress bar']
Usability,"> `core/clib/res/mmprivate.h` is ours. I'm relatively sure this also comes from somewhere, judging by the occurrences that I found with a quick web search ;-). > Could you have that ""survive"" in this / a PR and propose the other one upstream?. I've opened https://github.com/civetweb/civetweb/pull/1056 to upstream the fix into `civetweb`. My plan would be to wait a few days, the maintainer seems to be very responsive. If we cannot get it in, I'll back out the other fix to get that merged.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9969#issuecomment-1050635411:409,responsiv,responsive,409,https://root.cern,https://github.com/root-project/root/pull/9969#issuecomment-1050635411,2,['responsiv'],['responsive']
Usability,"> `root [1] auto firstTwo2 = Take(v, 2);`. This resolves correctly to `ROOT::VecOps::Take()` after a `using namespace ROOT::VecOps;`, which is what appears in the example referenced above. Thus, the following works:; ```c++; root [0] ROOT::VecOps::RVec v{2., 3., 1.};; root [1] using namespace ROOT::VecOps;; root [2] auto firstTwo = Take(v, 2); (ROOT::VecOps::RVec<double> &) { 2.0000000, 3.0000000 }; ```. I cannot tell whether the names in `ROOT::VecOps` were directly available for unqualified lookup in the past. @Axel-Naumann? . Anyways, I agree that the interpreter should be more clear about unresolved names (instead of partially dumping the AST). I can dedicate some spare cycles in the first week of December for that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9261#issuecomment-966475070:588,clear,clear,588,https://root.cern,https://github.com/root-project/root/issues/9261#issuecomment-966475070,2,['clear'],['clear']
Usability,"> and ~~be done with it~~ never protect TFile::ReadProcessID. Thus obviously leading to random crash (simple conclusion from reading the code). > TTreeProcessorMT::Process respects (and if not, it's a bug and not intentional) the ""one file, one thread"" rule. As I rediscovered the protection are for that case. . From what I can infer the ""limitation"" of the protection to 'just' the TTreeProcessorMT::Process is a bad thing. So I propose:. - Remove TParTreeProcessingRAII and friends; - Replace R__RWLOCK_ACQUIRE_WRITE/READ by the regular R__WRITE/READ_LOCKGUARD; - Remove fgRwLock; - Refind test case containing and using TRef or TRefArray (thus exercising TFile::ReadProcessID and co); - Test with both TTreeProcessorMT::Process and RDF. @etejedor Do you still have (and/or remember) the test files you used to develop/test this code?. [Comment left on queue for a while :( ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5288#issuecomment-610506869:102,simpl,simple,102,https://root.cern,https://github.com/root-project/root/pull/5288#issuecomment-610506869,2,['simpl'],['simple']
Usability,> but at this point our priority is to get something usable in for the existing REve applications. Then I propose to reduce number of fonts - one or two for now. And think how one can allow to use external fonts - in this PR or may be later.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15812#issuecomment-2162185672:53,usab,usable,53,https://root.cern,https://github.com/root-project/root/pull/15812#issuecomment-2162185672,2,['usab'],['usable']
Usability,"> but the same callback; might be invoked concurrently by different worker threads if implicit multi-threading; is enabled. As far as I can tell this requires the user code to be thread safe, which does not seem to be the case of the example. Also, in the blur, in it is not clear whether the call back will see the global partial result or the partial result so far on the 'current' thread. The case 'global partial result' requires merging of the thread's histograms in the case there is one histo copy per thread/worker.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1037#issuecomment-331163715:275,clear,clear,275,https://root.cern,https://github.com/root-project/root/pull/1037#issuecomment-331163715,2,['clear'],['clear']
Usability,"> but then it is not clear at all what to do. - Click on ""Configure Project"".; - After that, you can override the default DOCU_INPUT or DOCU_THREADS, or DOXYGEN_EXECUTABLE, as you consider. (under Projects, Build settings).; - Finally click on the Build icon (hammer).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9966#issuecomment-1083459839:21,clear,clear,21,https://root.cern,https://github.com/root-project/root/pull/9966#issuecomment-1083459839,2,['clear'],['clear']
Usability,"> cause it says nothing about its meaning,. True. > fStreamingElement. It is indeed clearer. I am hesitant because we don't use this wording anywhere else (and have use fElement in TBranchProxy, albeit there it is clearer/more straightforward what the member is about). fStreamerElement could have work (if it was not just one character away from the type ...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3463#issuecomment-468646611:84,clear,clearer,84,https://root.cern,https://github.com/root-project/root/pull/3463#issuecomment-468646611,4,['clear'],['clearer']
Usability,"> changing the flags for the release builds is not an option, right?. It certainly is, but we have not received any request from an experiment, and you are the first user ever to mention this :-) Given these statistics I'd prefer to keep our build system simpler rather than adding complexity, especially as you can always build your own ROOT if needed, with the flags that you prefer!. > would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution?. I'll assign this to @couet so he can decide whether that's useful!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6677#issuecomment-713600538:255,simpl,simpler,255,https://root.cern,https://github.com/root-project/root/issues/6677#issuecomment-713600538,2,['simpl'],['simpler']
Usability,"> cling startup scripts are different from rootlogon.C and rootrc . rootrc is a config file while .clingrc is a regular cling script. cling startup scripts are executed also in invocation of standalone cling binary (not from root interpreter).; > ; > Question:; > ; > 1. Renaming `.cling_profile` and `.clingrc` with suffix `.C` ?; > ; > 2. Rename `.clingrc` to something else so that `.clingrc` can be reserved for cling config file in the future (if any)?; > Making it a config file instead of a cling script aligns with rootrc but not with bashrc, zshrc.; > ; > 3. Drop `.clingrc` for now and keep `.cling_profile` only ? If a cling script can easily tell if it is in interactive mode then keeping only 1 script makes sense. Otherwise it is better to keep both to align with bash and other interpreter inspired by bash design. By easily telling I mean a macro like `CLING_INTERACTIVE` or something simple that does not access `gCling`. How about a `~/.cling.d` folder where we glob all files and execute?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11262#issuecomment-1255476176:901,simpl,simple,901,https://root.cern,https://github.com/root-project/root/pull/11262#issuecomment-1255476176,2,['simpl'],['simple']
Usability,> couldn't we simply use a vector<char> as a byte buffer here?. I guess so.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2420#issuecomment-409973833:14,simpl,simply,14,https://root.cern,https://github.com/root-project/root/pull/2420#issuecomment-409973833,2,['simpl'],['simply']
Usability,"> ctually, for me it does not seem to improve the code quality. The advantage is that the next time we refactor the code we will not forget the delete statements (this is what happened here) and make it clearer that the ownership is not delegated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2361#issuecomment-409641166:203,clear,clearer,203,https://root.cern,https://github.com/root-project/root/pull/2361#issuecomment-409641166,2,['clear'],['clearer']
Usability,> do you have any intuition about what could have gone wrong that causes these failures in the execCheckClusterRange test because of different file sizes?. Not yet. It could be that some leaf type changed or a `StreamerInfo` changed (for that reverting just the `LinkDef` should be sufficient).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14268#issuecomment-1863174237:18,intuit,intuition,18,https://root.cern,https://github.com/root-project/root/pull/14268#issuecomment-1863174237,2,['intuit'],['intuition']
Usability,"> e.g. LHC experiments, of this change in case something behaves differently in that context. This move is necessary for the Python environments but there is a clear limitation in its current form, that is it breaks the usage of TPython from C++:. ```; root.exe -l -b -q -x -e 'TPython::Exec(""print(\""1 + 1 =\"", 1+1)"")'. cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/vpadulan/Programs/rootproject/rootbuild/master-4e3ca10195-pyroot-debug/lib/libROOTTPython.so, 0x0009): symbol not found in flat namespace '_PyBool_Type'; Error in <AutoloadLibraryMU>: Failed to load library /Users/vpadulan/Programs/rootproject/rootbuild/master-4e3ca10195-pyroot-debug/lib/libROOTTPython.socling JIT session error: Failed to materialize symbols: { (main, { __ZN7TPython4ExecEPKc }) }; ```. This is not surprising, we are purposely removing the linking against libPython so TPython cannot find the symbols. From within a Python interpreter, libpython is automatically injected and linked at the global scope, but that doesn't happen when a symbol from libpython is needed from an executable outside of Python itself. Bottom line, we will need to investigate how to properly manage both the requirements of Python packaging systems and embedding libpython in other cases.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15891#issuecomment-2180639835:160,clear,clear,160,https://root.cern,https://github.com/root-project/root/pull/15891#issuecomment-2180639835,2,['clear'],['clear']
Usability,"> generate RConfigure.h in special directory; > Do we agree on this?. Yes!!! It's better to put them simply into {{${CMAKE_CURRENT_BUILD_DIR} }} (or whatever it's called), and add it to the allheaders target so cmake copies it into {{include/}}. I verified with the modules folks: we have no problem with building against headers in `module/inc` and running without that header around.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5170#issuecomment-600632638:101,simpl,simply,101,https://root.cern,https://github.com/root-project/root/pull/5170#issuecomment-600632638,2,['simpl'],['simply']
Usability,"> he really new thing (although maybe not a product, but side-effect) is the p. But p stays null. F(x) is stored to a temporary variable, p is not set to F(x). > (if it really calculates them inside, that is quite surprising). It does. It's a technical workaround to have both paths to follow the same code. > It's just that if there is a default argument, normally it represents a frequent use case, so it brings attention while learning about a given method. Here it brings confusion (to me and to my student at least). I agree with you. So I would suggest to remove from your title ""add new method to handle this case"".; Making it non-default would force everyone to pass an argument. If one wants the old behavior, it will pass nullptr and get the bin edges as before, so no new extra method is needed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16784#issuecomment-2444656410:430,learn,learning,430,https://root.cern,https://github.com/root-project/root/issues/16784#issuecomment-2444656410,2,['learn'],['learning']
Usability,"> how confident are we that (simple) files with that option are indeed 'reproducible' (i.e. is there more field to handle?). I testing file with TH1 and with TTree (10K entries, 4 branches). ; Binary compare shows no difference.; Once option is there, we can try to apply it in several places in roottest.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4253#issuecomment-525010216:29,simpl,simple,29,https://root.cern,https://github.com/root-project/root/pull/4253#issuecomment-525010216,2,['simpl'],['simple']
Usability,"> how will users find out about the feature now?. Indeed I wouldn't remove it, but we can discuss where we place it. What's the intended use case of `AsRNode`, pass an RDF object to C++ for further processing?. > good for me (EDIT: as long as we still clearly state that it's Python-only). Yes that's the case already in the current text.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9611#issuecomment-1016848413:252,clear,clearly,252,https://root.cern,https://github.com/root-project/root/pull/9611#issuecomment-1016848413,2,['clear'],['clearly']
Usability,"> if (gDebug > 0) Info(...) does not have that issue. To be correct, gDebug (and it's replacement) should be an atomic. Also (I probably missed something) are we replacing the current multi-level gDebug by a simple bool? (I.e. either nothing or a flood of a data)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6875#issuecomment-735477104:208,simpl,simple,208,https://root.cern,https://github.com/root-project/root/pull/6875#issuecomment-735477104,2,['simpl'],['simple']
Usability,"> if someone will still try use pyroot_experimental => CMake should help user to switch to pyroot option? . Do you think this is really necessary? Isn't it enough to say clearly in the release notes that `pyroot_experimental` does not exist anymore, and that `pyroot_legacy` has been added? It seems to me that otherwise we are carrying old options that we do not use anymore. But I don't know what has been the policy for deprecated CMake options in the past. > As well do we need to provide message that if user uses pyroot option, CMake should notify that it is ex pyroot_experimental?. But PyROOT experimental will cease to exist as such, we will have PyROOT (which will be a new one) and then the legacy. Again I think that release notes can help explain this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5772#issuecomment-638171977:170,clear,clearly,170,https://root.cern,https://github.com/root-project/root/pull/5772#issuecomment-638171977,2,['clear'],['clearly']
Usability,"> in this sense, my understanding is that the situation is the same as before. Not exactly the same, consider the following repro taken from Danilo's new test. ```cpp; #include <ROOT/RDataFrame.hxx>; #include <ROOT/RDFHelpers.hxx>; #include <memory>; #include <TTreeReader.h>; #include <iostream>. class SimpleActionHelper : public ROOT::Detail::RDF::RActionImpl<SimpleActionHelper> {; public:; using Result_t = int;. private:; std::shared_ptr<Result_t> fValue;; int &fTestVal;. public:; static constexpr int fgRefVal = 42;; SimpleActionHelper(int &testVal) : fValue(new int), fTestVal(testVal) {}; SimpleActionHelper(SimpleActionHelper &&) = default;; SimpleActionHelper(const SimpleActionHelper &) = delete;; std::shared_ptr<int> GetResultPtr() const { return fValue; }; void Initialize() {}; void InitTask(TTreeReader *, unsigned int) {}; template <typename... ColumnTypes>; void Exec(unsigned int, ColumnTypes...); {; }; void Finalize() { fTestVal = SimpleActionHelper::fgRefVal; }; std::string GetActionName() { return ""SimpleAction""; }; };. int main(); {; auto exceptionThrower = [](ULong64_t ievt) {; if (ievt == 4) {; throw std::invalid_argument(""Time to throw."");; }; return int(0);; };. int testVal = 123;; std::cout << ""Testing value "" << testVal << std::endl;; SimpleActionHelper helper(testVal);; auto rdf = ROOT::RDataFrame(8).Define(""dummy"", exceptionThrower, {""rdfentry_""});; auto valRes = rdf.Book<int>(std::move(helper), {""dummy""});. try{; valRes.GetValue();; } catch (...){. }. std::cout << ""Testing value "" << testVal << std::endl;; }; ```; Then. ```; ./repro_628.out ; Testing value 123; RDataFrame::Run: event loop was interrupted; Testing value 123; ```; ```; ./repro_danilo_patch.out ; Testing value 123; RDataFrame::Run: event loop was interrupted; Testing value 42; ```. Still, this is probably not something to write in the docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13546#issuecomment-1707964693:304,Simpl,SimpleActionHelper,304,https://root.cern,https://github.com/root-project/root/pull/13546#issuecomment-1707964693,10,['Simpl'],"['SimpleAction', 'SimpleActionHelper']"
Usability,"> main: Yes, we should. It is indeed currently very inconsistent (none, by-itself, surrounded by arbitrary `#if[n]def`, hidding by `__CLING__`). Yes we should have guidelines? I'm in principle fine with the change but I think we should clarify whether or not we want `main` in the tutorials. If we do, we should change all the RNTuple tutorials.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6337#issuecomment-692295741:164,guid,guidelines,164,https://root.cern,https://github.com/root-project/root/pull/6337#issuecomment-692295741,2,['guid'],['guidelines']
Usability,"> or the expected usage. humm ... here it is. ```; gInterpreter->Calc("" ..... ""); Take Read Lock x N times; Take Write Lock x M times; suspend before calling User Code; UserCode; start multiple threads; Take WriteLock *** DEAD LOCK here without this infrastructure; ReleaseWriteLock; restore mutex state; Release Write Lock x M times; Release Read Lock x N times; ```; The recurse count is for this case (simplified to show just the salient point); ```; gInterpreter->SomeEntry("" ..... ""); Take Write Lock; Snapshot 1; Take Write Lock x M times; gInterpreter->Load("" ..... ""); Take Write Lock; Snapshot 2; Take Write Lock x N times; gInterpreter->Calc("" ..... ""); Take WriteLock; Snapshot 3; suspend before calling User Code; restore mutex state; Forget 3; Release Write Lock; Release Write Lock x N times; Forget 2; Release Write Lock; Release Write Lock x M times; Forget 1; Release Write Lock; ```; (I don't recall the exact set of possible re-entry points into the interpreter, so this one is inaccurate but in the spirit); where essentially Snapshot 2 and 3 needs to be ignored, i.e. we need to rewind to the top; but also we need to remember to skip the ""Forget 2"" and ""Forget 3""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6301#issuecomment-687294851:405,simpl,simplified,405,https://root.cern,https://github.com/root-project/root/pull/6301#issuecomment-687294851,2,['simpl'],['simplified']
Usability,"> probably due to filtering and skimming using a software that has the new persistency. CloneTree currently can only handle schema evolution if the 'fast' option is selected. For slow cloning it does not (yet?) deal well with the fact that the on-file and in-memory representation does not match (the reading part is 'sorta' fine but the writing part is confused because the cloned branches are (for now) the exact same as the input and thus we are now in the case were we attempt to write in a different format than the one in memory. The ""Info"" above are clear/exact that some data is lost because those field are no longer in memory (but they still have a branch for them on the output, so behavior will be strange). I am unclear why this leads to the behavior I have seen/reported but it might be linked. Thanks to your new file (that I can clone to a smaller if I make sure to load none of the pluto libraries), I seem to be back on track. thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7754#issuecomment-966525290:557,clear,clear,557,https://root.cern,https://github.com/root-project/root/issues/7754#issuecomment-966525290,2,['clear'],['clear']
Usability,"> so I think the appropriate fix would be to simply use a smaller value than the current 2^33 on 32bit machines, rather than switching to long long. I agree.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10302#issuecomment-1092976574:45,simpl,simply,45,https://root.cern,https://github.com/root-project/root/pull/10302#issuecomment-1092976574,2,['simpl'],['simply']
Usability,> so if you could try to compare before/after by running something simple using data at CERN. CMS currently does not mount CERN's eos through fuse at FNAL and does not export (without grid certificate) any data.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11644#issuecomment-1309267711:67,simpl,simple,67,https://root.cern,https://github.com/root-project/root/pull/11644#issuecomment-1309267711,2,['simpl'],['simple']
Usability,"> sorry it was not clear to me that you were actually asking for this change. done. Thanks, but I was just asking if you wanted me to do it, not for you to do it... 😉 sorry for the misunderstanding...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5276#issuecomment-607696223:19,clear,clear,19,https://root.cern,https://github.com/root-project/root/pull/5276#issuecomment-607696223,2,['clear'],['clear']
Usability,"> sounds both plausible and simple :-) Let us know, please!. I struggle a bit to find out exactly where CMake gets the LLVM library, unfortunately it doesn't look like it uses `llvm-config --libs`...; Will look around though",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12156#issuecomment-1666920625:28,simpl,simple,28,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1666920625,2,['simpl'],['simple']
Usability,"> t is clear that that inner track isn't iterating anywhere nearly as much as it should be. What is the actual difference? How much is expected vs how much is gotten? Is it for the exact same file? What code is your colleague using? Did you consider using RDataFrame?. In the code shown above, the only relevant number are `AutreeData.GetEntries()` and the set of `AutreeData.tracknumber`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14215#issuecomment-1851592415:7,clear,clear,7,https://root.cern,https://github.com/root-project/root/issues/14215#issuecomment-1851592415,2,['clear'],['clear']
Usability,"> the APPLE system SDK has changed. @cxwx I agree. But I can't figure out why you can build successfully by turning off some options, but I can't. I also updated the command line tool to 14.3, did you?. > When using the non-homebrew cmake, make sure you removed the previous CMakeCache.txt. As a brutal measure you can temporarily rename/ops/homebrew; that should also move it out of the way... @Axel-Naumann Sure. I cleared all files when I built. It may work but I need to install the dependencies manually, which is also an annoying thing. ; And I do think there is something new happening for these building errors other than homebrew things. rootfit and glew errors are always there no matter if I use external dependencies or builtins. I have never encountered these errors before. >Can you explain why you don't want to use homebrew's build of ROOT? This seems much simpler than building ROOT yourself - unless you want to help develop ROOT, of course! ;-). It really isn't necessary, it's just a habit. In addition to macos, I also use root on various versions of linux servers. For the latter, in most cases, I can only compile it myself. And we have many codes that depend on root, so we hope that root's compilation options can be mastered by ourselves. As for contributing to the development of root, I hope that I can do it in the future, but at present more is to use root to complete physical analysis. Thank you for your invaluable contributions!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12648#issuecomment-1523586633:417,clear,cleared,417,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1523586633,4,"['clear', 'simpl']","['cleared', 'simpler']"
Usability,> the problem is likely to be either at ... To be clearer. I suspect that __PRETTY_FUNCTION__ is returning for icc is different form that the one expected in TTypeNameExtractionBase::GetImpl and thus needs to be adjusted for it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1389#issuecomment-347637331:50,clear,clearer,50,https://root.cern,https://github.com/root-project/root/pull/1389#issuecomment-347637331,2,['clear'],['clearer']
Usability,"> turning by default a feature which messes up with the lookup tables. How does it mess things up?. > with no tests. As I said that won't be the case. > to improve the less used feature of unloading. I don't understand this part - do you mean unloading isn't used a lot? That's totally incorrect - it's the major missing feature of cling for physicists. Not even talking about all of cling's notebook users here. > make this feature configurable. Do you really believe we need a flag beyond `.rawInput`? Could you argue for this, please? Too many options kill usability...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4214#issuecomment-532585952:560,usab,usability,560,https://root.cern,https://github.com/root-project/root/pull/4214#issuecomment-532585952,2,['usab'],['usability']
Usability,"> using SO_LoadedLast (which is somewhat counter-intuitive to our use case) seems to work. I agree `SO_LoadedLast` shouldn't be what your after especially if it works with `SO_LoadedFirst` here.; Diff-ing my PR1 vs your JITRTLD_LOCAL shows something went screwy, in particular:; DynamicLibrary.h@91 should be:; ```; enum SearchOrdering {; /// SO_Linker - Search as a call to dlsym(dlopen(NULL)) would when; /// DynamicLibrary::getPermanentLibrary(NULL) has been called or; /// search the list of explcitly loaded symbols if not.; SO_Linker,; /// SO_LoadedFirst - Search all loaded libraries, then as SO_Linker would.; SO_LoadedFirst,; /// SO_LoadedLast - Search as SO_Linker would, then loaded libraries.; /// Only useful to search if libraries with RTLD_LOCAL have been added.; SO_LoadedLast,; /// SO_LoadOrder - Or this in to search libraries in the ordered loaded.; /// The default bahaviour is to search loaded libraries in reverse.; SO_LoadOrder = 4; };; ```. > Thanks for helping me out to sort this out!. No problem, but lets sort if it can be accomplished with `SO_LoadedFirst`. > My personal opinion is that it should be the default, being close to the old behavior. I understand that but do my examples or the fact the old behavior completely breaks down on Windows give you no pause?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/744#issuecomment-313811536:49,intuit,intuitive,49,https://root.cern,https://github.com/root-project/root/pull/744#issuecomment-313811536,2,"['intuit', 'pause']","['intuitive', 'pause']"
Usability,> what to do with the doc in the User's Guide . Should it be moved to the Reference Guide ? . Some of the information is still relevant (beside the mention of TThread) in particular 25.2. The rest looks like it is all not longer recommended to use.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7216#issuecomment-1057548923:40,Guid,Guide,40,https://root.cern,https://github.com/root-project/root/issues/7216#issuecomment-1057548923,2,['Guid'],['Guide']
Usability,"> why are all these super-important methods undocumented?. 'because' the code is ancient :( .... and there is some sparse documentation. TLeaf::GetLen has a one len documenation and GetLenStatic is trivial get for fLen (yes, the name don't match :( ) which has a documentation line. In summary the extent of the doc is:. ```; GetLenStatic : Number of fixed length elements.; GetLen : Return the number of effective elements of this leaf.; ```; And effectively we have the relationship:; ```; GetLen() == ( GetLenStatic() * variableDimensionSize ); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1532#issuecomment-359049449:44,undo,undocumented,44,https://root.cern,https://github.com/root-project/root/pull/1532#issuecomment-359049449,2,['undo'],['undocumented']
Usability,"> why should the RVec cast of the ""jets"" column work if it is in fact an std::vector<float>. I understand why it currently doesn't, but I believe we agree that reading any collection as an RVecs via RNTupleDS _should_ work. I think we agreed to:; - [ ] throw an exception from RNTupleDS in case type on disk and type requested do not match -- this will make the bug noisy instead of silent and will possibly catch other issues in the future; - [x] wait for the RVec redesign that adds a small vector optimization and then provide a type-erased deserialization function for RVecs which RNTupleDS can take advantage of -- the redesign will make it simpler to implement such a function in a robust way",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6347#issuecomment-692682651:646,simpl,simpler,646,https://root.cern,https://github.com/root-project/root/issues/6347#issuecomment-692682651,2,['simpl'],['simpler']
Usability,"> yes, I am a Git novice, (in ATLAS we use GitLab and merge), so I used several commit, merge commands. How do I use rebase?. No problem! We are here to help. In your case, the easiest way is to checkout your branch, and do a `git rebase -i master`. That will put you into an editor with a list of commits, more or less like this:. ```; pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory; pick 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory; pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes.; pick c25ea30332 Make some clang format changes; pick dae3241bee Fix whitespace; pick baa80f53a4 Fix memory leak; pick a8324c92ee Undo TBranch version change, thanks Philippe.; ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```; pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory; fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory; fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes.; fixup c25ea30332 Make some clang format changes; fixup dae3241bee Fix whitespace; fixup baa80f53a4 Fix memory leak; fixup a8324c92ee Undo TBranch version change, thanks Philippe.; ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```; commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2; Author: Peter van Gemmeren <gemmeren@anl.gov>; Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in m",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/796#issuecomment-317761739:880,Undo,Undo,880,https://root.cern,https://github.com/root-project/root/pull/796#issuecomment-317761739,1,['Undo'],['Undo']
Usability,"> you can calculate them from globalstart, globalend, filelist, treesnentries. yes if you pass all files and all tree entries. currently iirc we are only passing the file names and the tree entries for the files and trees that will be actually touched by the task. otoh i'm still thinking that `globalstart` and `globalend` could go away, what do we need them for?. EDIT: ah we use them for the call to `SetCacheEntryRange`, and they are not really global but they are relative to the task-specific chain uhm....it feels like some simplification is possible, if they are relative to the task-specific chain can't they be calculated from the rest?. EDIT 2: Ideally the call to `SetCacheEntryRange` should not be needed at all, `TTreeProcessorMT` and `TTreeReader` should take care of it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8646#issuecomment-895350585:531,simpl,simplification,531,https://root.cern,https://github.com/root-project/root/pull/8646#issuecomment-895350585,2,['simpl'],['simplification']
Usability,">> Is it so?. > Yes, as written in the manual. . I still do not see reason why dictionary is necessary here. ; It is really question for @pcanal. ; Is there special handling of `std::unique_ptr<T>` for the types derived from `TObject`? ; In dictionary for transient members? ; And how one gets such information for the class which does not appears in header files?. As I mention - there is much simpler workaround with plain pointer.; But once I implement it - one immediately forgets about the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13134#issuecomment-1638477128:395,simpl,simpler,395,https://root.cern,https://github.com/root-project/root/pull/13134#issuecomment-1638477128,2,['simpl'],['simpler']
Usability,">Though I do wonder how much I want to become involved in tweaking the ROOT configuration... There are many things that I'd love to change about the current ROOT CMake configuration (I find it pretty bad that target properties are used so sparsely in the configuration, using directory level configurations in most cases instead.), but I wouldn't have time to propose an update for those that I'd like... Hi Attila, thank you for the PR. Restructuring the build system is part of my work plan for the next year, so it's good to know that this is something that experiments will see as beneficial. I agree with you that we should be using target properties to propagate include directories and other settings that will allow dependent projects to simply add a `target_link_libraries()` call. This is one of the major motivations that we have for restructuring the build system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1466#issuecomment-351951349:746,simpl,simply,746,https://root.cern,https://github.com/root-project/root/pull/1466#issuecomment-351951349,2,['simpl'],['simply']
Usability,">simplify frame layout. seems like one step in the right direction in terms of trimming down number of ""speed bumps"" in reading things!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13779#issuecomment-1822922214:1,simpl,simplify,1,https://root.cern,https://github.com/root-project/root/pull/13779#issuecomment-1822922214,2,['simpl'],['simplify']
Usability,"@AntoniMarcinek I have made a PR implementing the functionality you requested. ; Only the support for `_chg_truncated`, but it is not clear to me exactly what is it and what is your use case for this ; Cheers",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7332#issuecomment-876389035:134,clear,clear,134,https://root.cern,https://github.com/root-project/root/issues/7332#issuecomment-876389035,2,['clear'],['clear']
Usability,"@Axel-Naumann , @vgvassilev Could you provide some feedback?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11262#issuecomment-1251040944:51,feedback,feedback,51,https://root.cern,https://github.com/root-project/root/pull/11262#issuecomment-1251040944,2,['feedback'],['feedback']
Usability,"@Axel-Naumann ,. ""This isn't going to ever work - C++ lookup is waaay too complex. And even if it were to work, we would be duplicating a large amount of (complex) functionality, and would have to update it with future language standards."". Except that a) it does work today (I think you're truly missing how much cppyy has evolved in functionality from the limited bindings that PyROOT offers, with portable binaries on all major platforms to boot), and b) most of the new language features are resolved in a way that is invisible to the bindings. A case like this PR is very rare. Neither this decl stuff nor the slowness of TClass and friends are material at this point (and simple to replace). What hurts cppyy much more, and what is taking up much more workaround code, is where ROOT/meta breaks things, like removing std::, or tries too hard to be smart, like with template instantiations or overload matching, where it doesn't even follow C++'s rules.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3579#issuecomment-478652670:678,simpl,simple,678,https://root.cern,https://github.com/root-project/root/pull/3579#issuecomment-478652670,2,['simpl'],['simple']
Usability,"@Axel-Naumann : I have to admit I have been stupid and my last posts have been wrong.; I did built root without builtin_llvm, so this could not have worked by designed.; I have rebuilt now with builtin_llvm and with your patch, and now I am only getting the warning message; ```; Error in <UnknownClass::InitInterpreter()>: LLVM SYMBOLS ARE EXPOSED TO CLING! This will cause problems; please hide them or dlopen() them after the call to TROOT::InitInterpreter()!; ```; But this is clear, since ROOT just checks for the presence of the LLVM symbols.; I am now rebuilding the ALICE software with this ROOT and checking whether the segfaults are gone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4689#issuecomment-570267436:481,clear,clear,481,https://root.cern,https://github.com/root-project/root/pull/4689#issuecomment-570267436,2,['clear'],['clear']
Usability,@Axel-Naumann ; Disregard of moduls requirements - it is much clear now.; One do not have long lists of different dirs in CXX flags and in dependencies. If try to make opposite approach - when only source dirs are used - one will have super long list of all ROOT subdirs with includes. It is definitely a worse scenario.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5170#issuecomment-600570372:62,clear,clear,62,https://root.cern,https://github.com/root-project/root/pull/5170#issuecomment-600570372,2,['clear'],['clear']
Usability,@Axel-Naumann ; In case simple `-m profile` can be helpful:. ```; ( lb-set-platform x86_64-centos7-gcc11-opt ; source /cvmfs/sft.cern.ch/lcg/views/LCG_102/${CMTCONFIG}/setup.sh ; echo $ROOTSYS ; time python -m profile ./tst100.py | tee root626.txt) ; ... ; real	0m14.144s; user	0m10.412s; sys	0m2.730s. ( lb-set-platform x86_64-centos7-gcc12-opt ; source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/${CMTCONFIG}/setup.sh ; echo $ROOTSYS ; time python -m profile ./tst100.py | tee root627.txt ); ... real	0m45.779s; user	0m36.429s; sys	0m4.734s. ```; output files: ; [root626.txt](https://gist.github.com/VanyaBelyaev/17884a2fb55deea182d27fe1b3076c70); [root627.txt](https://gist.github.com/VanyaBelyaev/c8bc792ead4f2a76c08edb0392046211),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11927#issuecomment-1361002552:24,simpl,simple,24,https://root.cern,https://github.com/root-project/root/issues/11927#issuecomment-1361002552,2,['simpl'],['simple']
Usability,"@Axel-Naumann @eguiraud One of my dataframe tests fails because of this:; ```; 27/155 Test #1500: roottest-root-dataframe-test_snapshot .........................***Failed 13.13 sec; ...; --- /srv/root/src/roottest/root/dataframe/test_snapshot.ref	Tue Mar 17 09:11:36 2020; +++ /srv/root/build/roottest/root/dataframe/test_snapshot.log	Fri Apr 23 09:56:40 2021; @@ -1,4 +1,5 @@; ; +cling::DynamicLibraryManager::loadLibrary():/srv/root/build/roottest/root/dataframe/par:cannotdynamicallyloadposition-independentexecutable; ----Nowwithatreeintherootdirectory; Branch:b1; Branch:b1_square. -- END OUTDIFF OUTPUT --; CMake Error at /srv/root/build/RootTestDriver.cmake:264 (message):; compare 'stdout' error: 1; ```; Somehow ROOT should address the case of binaries built with -fpie, as at least Gentoo has enabled that by default in GCC to improve security. Other distros may do the same in the future. See e.g. https://docs.fedoraproject.org/en-US/packaging-guidelines/#_pie",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936#issuecomment-825474655:956,guid,guidelines,956,https://root.cern,https://github.com/root-project/root/issues/7936#issuecomment-825474655,2,['guid'],['guidelines']
Usability,"@Axel-Naumann Many thanks for the detailed and friendly reply! :+1: . > Do you have a proposal for the latter? We can add a new boolean constructor argument, `failOnUnknownArgs = false` which we set to `true` in ROOT. Indeed, I believe the additional constructor argument is best. ; The only other solution which comes to mind (if it would not be possible to add a parameter) would be to (once more) use magic numbers for the `numOptions` parameter (similar to how `TApplication` ignores `argc` and `argv` if `numOptions==-1`), but that is certainly not a design pattern leading to modern, readable code, so better not spread it more ;-). ; `failOnUnknownArgs` sounds like a great choice of name, it clarifies the intent clearly. . > It would be wonderful to have that as unit test in `core/rint/test` [...]. It seems this does already exist, and has a unit test checking that errors are producted by `TRint` if unrecognitzed options are encountered ;-). Still, it seems I lack sufficient experience with `gtest`, since I don't understand why (for example) `TRint` with unsupported arguments does not `Terminate()` the test — so it's unclear to me how to write a test checking that it does not actually try to `Terminate()` when provided with a to-be-added `failOnUnknownArgs = false`. . In pseudo-steps, I think possible changes / additions to the existing test in `core/rint/test/TRintTests.cxx` to cover the use case as completely as possible could be:; 1. The existing test should be changed to set `failOnUnknownArgs = true` (after that is implemented). ; 2. A second test could be added, not setting `failOnUnknownArgs` (i.e. the default of `false` is used). This test then needs to check that no `stderr` is produced, and `Terminate()` is not called (here I'm unsure how to do these with `gtest`). ; 3. A third test could try to do the following, for complete coverage of the use case:; i. Create a `TRint (let's name it `myApp for simplicity here)`, passing in supported and unsupported option",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10090#issuecomment-1064634456:721,clear,clearly,721,https://root.cern,https://github.com/root-project/root/issues/10090#issuecomment-1064634456,2,['clear'],['clearly']
Usability,"@Axel-Naumann as discussed privately. I think I actually can easily support new and old versions of arrow, so I would suggest we do to simplify porting also in the ALICE framework.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5393#issuecomment-616127096:135,simpl,simplify,135,https://root.cern,https://github.com/root-project/root/pull/5393#issuecomment-616127096,2,['simpl'],['simplify']
Usability,"@Axel-Naumann, @couet pointed out that my read file was basically a simpler version of h1draw.C and that it would be better to just clarify some things in that file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8699#issuecomment-884186832:68,simpl,simpler,68,https://root.cern,https://github.com/root-project/root/pull/8699#issuecomment-884186832,2,['simpl'],['simpler']
Usability,"@AxelKrypton any updates on this? Looking over the past discussion, we are aware of the (intentional) memory leaks in `libCling` (even though we fixed one case in https://github.com/root-project/root/pull/16150 that was a mistake; the fix will appear in 6.34). I still have trouble understanding how just linking to ROOT and not using it should introduce a memory leak in the application... Lacking more feedback, I would propose to close this issue for the moment...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14055#issuecomment-2370819124:404,feedback,feedback,404,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-2370819124,2,['feedback'],['feedback']
Usability,"@ChristianTackeGSI As @oshadura said, the error comes from a timeout (after 4 hours) while trying to checkout [roottest](https://github.com/root-project/roottest). This is due to a bug (?) in CI/git on Windows:; ```; 12:24:10 * Connection #0 to host github.com left intact; 12:24:10 bash: /dev/tty: No such device or address; 16:23:23 Cancelling nested steps due to timeout; 16:23:23 Sending interrupt signal to process; 16:23:30 ^CTerminate batch job (Y/N)? ; 16:23:30 ^Cscript returned exit code -1073741510; ```; Simply forking [roottest](https://github.com/root-project/roottest) prevent this timeout",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7031#issuecomment-809942554:516,Simpl,Simply,516,https://root.cern,https://github.com/root-project/root/pull/7031#issuecomment-809942554,1,['Simpl'],['Simply']
Usability,"@Falcort This is simple solution for row._bHasChildren, also for layout",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4628#issuecomment-555477812:17,simpl,simple,17,https://root.cern,https://github.com/root-project/root/pull/4628#issuecomment-555477812,2,['simpl'],['simple']
Usability,@GiacomoXT thanks for the feedback. Let us know how that goes!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16774#issuecomment-2447782541:26,feedback,feedback,26,https://root.cern,https://github.com/root-project/root/issues/16774#issuecomment-2447782541,2,['feedback'],['feedback']
Usability,@Linev The first(2cf3535) and the last commit(3262d53) should be deleted. The last commit undoes the first. I could make an new PR if you think it is necessary.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9005#issuecomment-920572223:90,undo,undoes,90,https://root.cern,https://github.com/root-project/root/pull/9005#issuecomment-920572223,2,['undo'],['undoes']
Usability,"@MarkusFrankATcernch ; it's all clear now, nothing is missing. with the ROOT changes should be integrating fine.; thank you :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8955#issuecomment-915152676:32,clear,clear,32,https://root.cern,https://github.com/root-project/root/pull/8955#issuecomment-915152676,2,['clear'],['clear']
Usability,"@MrCarroll do not worry. These things happen, especially when one is under heavy load at work. Never hesitate to report issues as you encounter them, feedback is very important for us!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14138#issuecomment-1832630669:150,feedback,feedback,150,https://root.cern,https://github.com/root-project/root/issues/14138#issuecomment-1832630669,2,['feedback'],['feedback']
Usability,"@ShamrockLee there is already a `Browser.ExpandDirectories` entry in `system.rootrc`, you can simply set it to false. Otherwise I can also add something like:; ```; // always prevent expanding the parent directory tree on nix/store; if (first == ""nix"" && second == ""store""); expand = kFALSE;; ```; But I would prefer not to add such special case...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7213#issuecomment-779734329:94,simpl,simply,94,https://root.cern,https://github.com/root-project/root/issues/7213#issuecomment-779734329,2,['simpl'],['simply']
Usability,"@StephanTLavavej FYI, the upgrade of LLVM 13 is done, and this is now fixed in ROOT master (i.e. the workaround has been removed). Thanks again for your feedback!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10875#issuecomment-1346236983:153,feedback,feedback,153,https://root.cern,https://github.com/root-project/root/issues/10875#issuecomment-1346236983,2,['feedback'],['feedback']
Usability,"@Triple-S ; I see your points about posters. One simple way to bypass this issue is or course to use filled markers with seems to me are better any way. But I can understand you need hollow markers. As you may need only a few line widths may be 2, 3 and 4 simply adding new makers makes sense. Given the usually small size of markers, having any possible line widths does not make sense (you will rapidly get big ""blobs"" not understandable). So I am not sure a coding convention is necessary. The different look of the maker 3 should be fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4721#issuecomment-573597757:49,simpl,simple,49,https://root.cern,https://github.com/root-project/root/pull/4721#issuecomment-573597757,4,['simpl'],"['simple', 'simply']"
Usability,"@acampove,; > Thanks contacting us. We should probably wait for @eguiraud for a final answer, but I'd like to give my two cents about this.; > ; > > Instances of RDataFrame objects are meant to be treated like trees.; > ; > I am curious about this first sentence. I have never got this impression, neither reading docs / toying with tutorials or doing more complex analyses with RDF. the first line of the [RDF docs](https://root.cern/doc/master/classROOT_1_1RDataFrame.html) says `ROOT's RDataFrame offers a high level interface for analyses of data stored in TTree, CSV's and other data formats. `. Just by the fact that I can read and process other formats than TTree I would say that in general RDF is not meant to be treated like a TTree. Otherwise I would also have to say that RDF is meant to be treated like a CSV file or something similar. I did not refer to the documentation but to how people would actually use this class. 99% of people do not read CSV files with ROOT and `RDataFrame` will be mostly used to interact in a simple and quick way with trees. > ; > > there should be a function that allows us to merge them; > ; > If I have to think about this function you propose, I don't see it going much further than the example you already have above. Since RDataFrame **is not** the dataset itself, but just an interface to it, it still needs to open the file where the dataset is contained and read data from it. Thus, merging two RDF objects would still involve ` opening each file and saving them. Then loading them again and merging, then saving again` as you say above. Or at least the loading, merging and saving again part, if we consider that the part of your example where you create two files from scratch and save data into them with RDF could also just have been opening already existing files written by some other application before the merging. In fact the solution you provide follows exactly these steps:; > ; > ```python; > # Opening files and loading pre-existing dat",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9030#issuecomment-927331768:1084,simpl,simple,1084,https://root.cern,https://github.com/root-project/root/issues/9030#issuecomment-927331768,2,['simpl'],['simple']
Usability,@agheata ; I am a bit hesitant to have one TGeoManager with materials created with different systems of units.... Concerning the comparison:; if PDG == TROOTMaterial and PDG == TGeant4Material then also: TROOTMaterial == TGeant4Material. Clearly both tests must succeed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11060#issuecomment-1198041487:238,Clear,Clearly,238,https://root.cern,https://github.com/root-project/root/pull/11060#issuecomment-1198041487,1,['Clear'],['Clearly']
Usability,"@alja Should I merge it?; The only small doubt I have - probably we should use `override` specifier when implementing such ""complex"" interfaces. Otherwise at some point simple mistake in list of args will lead to error, which could be detected by compiler.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4030#issuecomment-509813570:169,simpl,simple,169,https://root.cern,https://github.com/root-project/root/pull/4030#issuecomment-509813570,2,['simpl'],['simple']
Usability,"@amadio , I have tested running the executable `tmva/sofie/test/emitFromONNX` on the machine directly. ; With the current master, I don't have the PCH dependency and I have : ; ```; sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ rm ../../../etc/allDict.cxx.pch; sftnight@SFT-ubuntu-1804-2:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX ; terminate called after throwing an instance of 'std::bad_alloc'; what(): std::bad_alloc; Aborted (core dumped); ```; with your PR I have instead: ; ```; sftnight@SFT-ubuntu-1804-3:/mnt/build/workspace/root-pullrequests-build/build/tmva/sofie/test$ ./emitFromONNX ; error: unable to read PCH file /mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch: 'No such file or directory'; fatal error: PCH file '/mnt/build/workspace/root-pullrequests-build/build/etc//allDict.cxx.pch' not found: module file not found; Segmentation fault (core dumped); ```. I think before merging, it would be nice to understand why after your changes in CMAKE affecting only libCore, a simple executable not using the ROOT I/O requires the PCH",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10690#issuecomment-1403728768:1102,simpl,simple,1102,https://root.cern,https://github.com/root-project/root/pull/10690#issuecomment-1403728768,2,['simpl'],['simple']
Usability,@amadio ; As idea: ; Can we provide build option which enables maximal-available c++ standard and root7 when at least c++14 is there? Or simply enable root7 an all platforms where it make sense? ; Otherwise it always a chalenge to test root7 features on Jenkins,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3831#issuecomment-493590447:137,simpl,simply,137,https://root.cern,https://github.com/root-project/root/pull/3831#issuecomment-493590447,2,['simpl'],['simply']
Usability,"@amadio @dpiparo what do you think, should we or should we not support `Filter(""x>0 //with a comment"")`? If yes, it's a crippled feature because people have to be careful not to use column names or ""return"" in the comment text. If not, should we check for comments and warn if they are present?. I don't know what's best. For sure we have to clearly state in the docs what's supported and what's not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1103#issuecomment-333880251:342,clear,clearly,342,https://root.cern,https://github.com/root-project/root/pull/1103#issuecomment-333880251,2,['clear'],['clearly']
Usability,"@amadio Thank you for the feedback. I will fix the indentation issue. The reason for misalignment of `*` was that I had written the original code with 2 spaces of indentation and later changed them all to 3. Regarding the `clang-format-diff`. I tried to get it working, but it does not seem to work. Especially, it is unable to capture filenames correctly from `git diff`. Details can be seen in the bug filed with clang here [https://bugs.llvm.org/show_bug.cgi?id=33759](https://bugs.llvm.org/show_bug.cgi?id=33759)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/778#issuecomment-316009181:26,feedback,feedback,26,https://root.cern,https://github.com/root-project/root/pull/778#issuecomment-316009181,2,['feedback'],['feedback']
Usability,"@amadio `v[{true,false}]` is returning only the first element of a two-elements RVec. Users are not expected to write that, but it's what something like `v[v > 0]` boils down to. I think this syntax is nice to have. Now my understanding is that _if_ we also want to allow `v[idxs]` where `idxs` is a list of indeces which select part of `v`, we need a way to distinguish between boolean masks and integer masks, hence `RStrongBool`.; But the use-case for `v[idxs]` is not as clear to me as I thought. @dpiparo what is an example of this? (and what do you think about `Take(v, {1,2})`?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2147#issuecomment-395704533:475,clear,clear,475,https://root.cern,https://github.com/root-project/root/pull/2147#issuecomment-395704533,2,['clear'],['clear']
Usability,"@amadio afaik, the build dirs for PRs are cleared before each build, or is something else broken?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/793#issuecomment-319057815:42,clear,cleared,42,https://root.cern,https://github.com/root-project/root/pull/793#issuecomment-319057815,2,['clear'],['cleared']
Usability,"@amadio not a problem, let's just make it very clear in the docs what can and cannot be done with expression strings. Both `Define` and `Filter`'s doxygen docs should be updated with the new feature actually :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1103#issuecomment-333877675:47,clear,clear,47,https://root.cern,https://github.com/root-project/root/pull/1103#issuecomment-333877675,2,['clear'],['clear']
Usability,"@amadio, can we try maybe with a simpler fix for png in asimage? Then I can merge my part and as a second iteration could be https://github.com/root-project/root/pull/1571 What you think about?. Thank you!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1527#issuecomment-362375643:33,simpl,simpler,33,https://root.cern,https://github.com/root-project/root/pull/1527#issuecomment-362375643,2,['simpl'],['simpler']
Usability,"@axel, It is just a few lines to be removed in [documentation/users-guide/Trees.md](https://github.com/root-project/root/pull/12551#diff-117cc7b0ab6e57e24e841291453a0649b39771247133629bd536ebd0212a3510) (not a complete file).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12551#issuecomment-1485324939:68,guid,guide,68,https://root.cern,https://github.com/root-project/root/pull/12551#issuecomment-1485324939,2,['guid'],['guide']
Usability,"@bbockelm ; My proposal (which actually not my) is not orthogonal - it solves similar problem in much more compact way. And only if it fails, one could try your approach. Do you have estimation in overall compression gain?; It could be, that after applying simple algorithm such gain will be negligible on realistic data.; And probably one could just skip your changes in TBasket raw format. ; As you could see - Victor algorithm does not change format.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1003#issuecomment-332276146:257,simpl,simple,257,https://root.cern,https://github.com/root-project/root/pull/1003#issuecomment-332276146,2,['simpl'],['simple']
Usability,@bbockelm I accidentally deleted my previous work last night. But good news is I figured out the issue I was facing when I try to reproduce my work today.; Now everything is working. I uploaded roottest repo in my github and generated the unit test as a commit. My current test simply follows the sample code in https://sft.its.cern.ch/jira/browse/ROOT-7588.; Let me know if something is not correct.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/84#issuecomment-174810100:278,simpl,simply,278,https://root.cern,https://github.com/root-project/root/pull/84#issuecomment-174810100,1,['simpl'],['simply']
Usability,"@bellenot . > isn't there any simpler solution. I have no idea. While it is not real standard, each linux/mac flawor has own way to provide function to read `/dev/random` or ; `/dev/urandom`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14908#issuecomment-1985836713:30,simpl,simpler,30,https://root.cern,https://github.com/root-project/root/pull/14908#issuecomment-1985836713,2,['simpl'],['simpler']
Usability,@bellenot : The new executables are signed. ; ![image](https://github.com/root-project/root/assets/73365079/89bf755e-dfd3-4bcd-a70f-e58d6d23b5d4); But they still present an issue. The certificate used to sign was not issued by a trusted root authority. ; ![image](https://github.com/root-project/root/assets/73365079/e101fbfa-4bad-473d-b197-e274431d1147); Code signing certificates must be provided by a Windows approved certificate authority. [They have them listed here](https://learn.microsoft.com/en-us/windows-hardware/drivers/dashboard/code-signing-cert-manage#get-or-renew-a-code-signing-certificate).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15896#issuecomment-2213690136:481,learn,learn,481,https://root.cern,https://github.com/root-project/root/issues/15896#issuecomment-2213690136,2,['learn'],['learn']
Usability,"@bellenot If I understand correctly, what @dpiparo is suggesting is a simple. ```cmake; set(ROOT_CXX_STANDARD @CMAKE_CXX_STANDARD@); ```; somewhere in `ROOTConfig.cmake.in`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7644#issuecomment-1833527467:70,simpl,simple,70,https://root.cern,https://github.com/root-project/root/issues/7644#issuecomment-1833527467,2,['simpl'],['simple']
Usability,"@bellenot Please check if it is ok. I tried to simplify code, avoid many intermediate and duplicated classes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3759#issuecomment-487943921:47,simpl,simplify,47,https://root.cern,https://github.com/root-project/root/pull/3759#issuecomment-487943921,2,['simpl'],['simplify']
Usability,@bellenot `build/win/cl.sh			build/win/f77.sh		build/win/ld.sh			build/win/makelib.sh		build/win/makeresource.sh` seems to have only been using in the `Makefile` and seem no longer used. Would we be able to simply removed them?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16271#issuecomment-2298682153:207,simpl,simply,207,https://root.cern,https://github.com/root-project/root/pull/16271#issuecomment-2298682153,2,['simpl'],['simply']
Usability,"@bellenot, the zlib problem is fixed now also on Windows, but there are sill build errors related to something else:; ```; (compiling source file '../BUILTIN_CFITSIO/eval_y.c'); ; C:\ROOT-CI\build\CFITSIO-prefix\src\BUILTIN_CFITSIO\cfortran.h(280,1): error C1189: #error: ""cfortran.h: Can't find your environment among: - GNU gcc (g77) on Linux. - MIPS cc and f77 2.0. (e.g. Silicon Graphics, DECstations, ...) - IBM AIX XL C and FORTRAN Compiler/6000 Version 01.01.0000.0000 - VAX VMS CC 3.1 and FORTRAN 5.4. - Alpha VMS DEC C 1.3 and DEC FORTRAN 6.0. - Alpha OSF DEC C and DEC Fortran for OSF/1 AXP Version 1.2 - Apollo DomainOS 10.2 (sys5.3) with f77 10.7 and cc 6.7. - CRAY - NEC SX-4 SUPER-UX - CONVEX - Sun - PowerStation Fortran with Visual C++ - HP9000s300/s700/s800 Latest test with: HP-UX A.08.07 A 9000/730 - LynxOS: cc or gcc with f2c. - VAXUltrix: vcc,cc or gcc with f2c. gcc or cc with f77. - f77 with vcc works; but missing link magic for f77 I/O. - NO fort. None of gcc, cc or vcc generate required names. - f2c/g77: Use #define f2cFortran, or cc -Df2cFortran - gfortran: Use #define gFortran, or cc -DgFortran (also necessary for g77 with -fno-f2c option) - NAG f90: Use #define NAGf90Fortran, or cc -DNAGf90Fortran - Absoft UNIX F77: Use #define AbsoftUNIXFortran or cc -DAbsoftUNIXFortran - Absoft Pro Fortran: Use #define AbsoftProFortran - Portland Group Fortran: Use #define pgiFortran - Intel Fortran: Use #define INTEL_COMPILER"" [C:\ROOT-CI\build\CFITSIO-prefix\src\BUILTIN_CFITSIO-build\cfitsio.vcxproj] [C:\ROOT-CI\build\builtins\cfitsio\BUILTIN_CFITSIO.vcxproj]; (compiling source file '../BUILTIN_CFITSIO/f77_wrap1.c'); ```; This PR has been much less trivial than I thought :laughing: . Maybe we can just avoid doing this check, as suggested in the source itself:; https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/cfortran.h#L254",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15508#issuecomment-2112196842:695,UX,UX,695,https://root.cern,https://github.com/root-project/root/pull/15508#issuecomment-2112196842,4,['UX'],['UX']
Usability,"@bendavid do you have anything against renaming `{S,G}etTaksPerWorker` to `{S,G}etMaxTasksPerWorker`? So it's clear that it's not a precise setting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7106#issuecomment-770832284:110,clear,clear,110,https://root.cern,https://github.com/root-project/root/pull/7106#issuecomment-770832284,2,['clear'],['clear']
Usability,"@bluehood Argh, this is the fallback solution for `RVec<bool>`? I think we should simply use `push_back` for all containers... `bool` is evil and should be treated so ;). Edit: Indeed, `std::vector<bool>` is the master of evil template specializations. Sry little `bool`!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3135#issuecomment-446347338:82,simpl,simply,82,https://root.cern,https://github.com/root-project/root/pull/3135#issuecomment-446347338,2,['simpl'],['simply']
Usability,@bluehood pointed out that the internals could be simplified with `TPython.h` features (without changing the user facing workflow). Let's have a look!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3488#issuecomment-468662849:50,simpl,simplified,50,https://root.cern,https://github.com/root-project/root/pull/3488#issuecomment-468662849,2,['simpl'],['simplified']
Usability,"@bluehood, I'd like to do that but let's merge this PR. We are swamped by other issues at the moment. I'd prefer to come back to that when it we have time (by simply reverting locally) or what's more probable when the issue pops up again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2706#issuecomment-425197874:159,simpl,simply,159,https://root.cern,https://github.com/root-project/root/pull/2706#issuecomment-425197874,2,['simpl'],['simply']
Usability,"@bluehood, it is in incrementals (""Continuous dashboard"") but name in CDash is just the same as simple build: master-x86_64-slc6-gcc62-opt - http://cdash.cern.ch/viewBuildError.php?buildid=571554 (I will fix anming tomorrow).; I am checking in Mattermost channel for now ;) https://mattermost.web.cern.ch/root/channels/builds",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2742#issuecomment-426772448:96,simpl,simple,96,https://root.cern,https://github.com/root-project/root/pull/2742#issuecomment-426772448,2,['simpl'],['simple']
Usability,"@cjones051073, I spent some time to investigate your header inclusion problem and here is a fix. Please let me know if you have any comments about this PR. Using this pattern, we can easily vectorize the rest of the Math package by simply turning all qualified ids of vectorizable functions to unqualified (eg. std::sqrt -> sqrt). @lmoneta, this was the fix I was talking about earlier this week. The code example in the PR was developed with @Axel-Naumann. PS: The key changes are done in math/mathcore/inc/Math/Math.h",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/445#issuecomment-287654476:232,simpl,simply,232,https://root.cern,https://github.com/root-project/root/pull/445#issuecomment-287654476,1,['simpl'],['simply']
Usability,"@couet - it seems that the html version is still updated. What do you mean by ""The ROOT user guide is consider as frozen""? Do you plan to stop supporting it?. I still find it the best documentation about ROOT. This is pretty detailed and written better than class documentation would be (this is a manual for reading, not a technical reference of existing functions).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7279#issuecomment-785861978:93,guid,guide,93,https://root.cern,https://github.com/root-project/root/issues/7279#issuecomment-785861978,2,['guid'],['guide']
Usability,@couet Could you have a look over the plotting code? I'm not sure whether the plotting could be simplified.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5108#issuecomment-597137033:96,simpl,simplified,96,https://root.cern,https://github.com/root-project/root/pull/5108#issuecomment-597137033,2,['simpl'],['simplified']
Usability,"@couet That you for your feedback. I will add some documentation and move the folder to bin/graphics. My thought process was that this could potentially be better than TikZ, as this is built completely using ROOT components and it can be changed over time. This class is also quite easy for beginners to contribute to, which would encourage more people to contribute.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7820#issuecomment-817615979:25,feedback,feedback,25,https://root.cern,https://github.com/root-project/root/pull/7820#issuecomment-817615979,2,['feedback'],['feedback']
Usability,@couet any feedback on this PR?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8681#issuecomment-946557019:11,feedback,feedback,11,https://root.cern,https://github.com/root-project/root/pull/8681#issuecomment-946557019,2,['feedback'],['feedback']
Usability,@davidlt Could you update to apply the clang-format recommendation (here it seems simply to use 3 characters for indentation rather than 2).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/523#issuecomment-296787374:82,simpl,simply,82,https://root.cern,https://github.com/root-project/root/pull/523#issuecomment-296787374,1,['simpl'],['simply']
Usability,"@dennisklein, thanks a lot for the quick feedback. @hahnjo, let's move forward with this then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10529#issuecomment-1118610993:41,feedback,feedback,41,https://root.cern,https://github.com/root-project/root/pull/10529#issuecomment-1118610993,2,['feedback'],['feedback']
Usability,"@dpiparo , we could start some simple APIs and I hope we could validate that ~3% does be caused by TTaskGroup.Run.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1010#issuecomment-330704409:31,simpl,simple,31,https://root.cern,https://github.com/root-project/root/pull/1010#issuecomment-330704409,2,['simpl'],['simple']
Usability,"@dpiparo - is it possible to pull up the logs? Unfortunately, the error message says simply the error message is in a different log file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/590#issuecomment-304902488:85,simpl,simply,85,https://root.cern,https://github.com/root-project/root/pull/590#issuecomment-304902488,1,['simpl'],['simply']
Usability,"@dpiparo I don't see the comments. Besides, after further development, I found the need also make the lock re-entrant from Read to Write lock making it relatively heavy so I am planning to actually separate the simple RW lock from the re-entrant one. So once I find (and address) the comments, I will close this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/596#issuecomment-308034317:211,simpl,simple,211,https://root.cern,https://github.com/root-project/root/pull/596#issuecomment-308034317,1,['simpl'],['simple']
Usability,"@dpiparo I don't think so! However, I'll write more proper doxygen markup so that the arguments get more clear. Then it should be fine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2329#issuecomment-405835584:105,clear,clear,105,https://root.cern,https://github.com/root-project/root/pull/2329#issuecomment-405835584,2,['clear'],['clear']
Usability,"@dudarboh the friend tree has less entries than the main tree. I think that's what's causing the problem. We should definitely have better diagnostics for this (i.e. give you a clear error message rather than the error you see), but this is not a supported usecase. . I could not reproduce the issue when truncating the tree in `test_default.root` to the same amount of entries as the friend. Can you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9106#issuecomment-944297935:177,clear,clear,177,https://root.cern,https://github.com/root-project/root/issues/9106#issuecomment-944297935,2,['clear'],['clear']
Usability,"@egpbos Given my [comment](https://github.com/root-project/root/pull/8385#issuecomment-870570029) in your previous merge request, I am quite disappointed to learn that this has been merged as enabled by default when it depends on a yet unreleased version of ZeroMQ. This, for example, has caused failures in pretty much all the LCG builds today: https://cdash.cern.ch/index.php?project=LCGSoft&date=2021-11-29. Please disable `roofit_multiprocess` by default and re-enable it only when a *released version* of ZeroMQ has the functionality you need, adding the proper version in your call to `find_package()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9078#issuecomment-981617370:157,learn,learn,157,https://root.cern,https://github.com/root-project/root/pull/9078#issuecomment-981617370,2,['learn'],['learn']
Usability,"@eguiraud , thanks for the feedback!. Ineed I have tried my reproducer with `/cvmfs/sft.cern.ch/lcg/views/LCG_103/x86_64-centos7-gcc11-opt/setup.sh`; and everything seems to work properly!. So I assume something magical happened between; `root 6.26.06` and `root 6.28.00`; or between; `Python 3.9.10` and `Python 3.9.12`. I will close the issue then. Thanks for your time investigating this :pray:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12496#issuecomment-1564653938:27,feedback,feedback,27,https://root.cern,https://github.com/root-project/root/issues/12496#issuecomment-1564653938,2,['feedback'],['feedback']
Usability,"@eguiraud ; > Hi Stephan, I'm confused, #5530 does not seem to have those warnings anymore? Also, ROOT is simply able to read an old `RooRealProxy` into a new `RooTemplateProxy<RooAbsReal>` with no problem, no instructions needed other than; > ; > ```; > #pragma read sourceClass=""RooRealProxy"" targetClass=""RooTemplateProxy<RooAbsReal>"";; > ```; > ; > ?; > ; > Do we need a test?. Actually, #5530 *does have* this problem.; http://cdash.cern.ch/testDetails.php?test=85254326&build=868739. It's not fatal, since the typedef and the things that it's `typedef`ed to are strictly identical, so all tests proceed normally. However, the warning shows up.; A follow-up question of this is whether gtests should have a failregex or something so we see warnings popping up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5536#issuecomment-623958983:106,simpl,simply,106,https://root.cern,https://github.com/root-project/root/pull/5536#issuecomment-623958983,2,['simpl'],['simply']
Usability,"@eguiraud Sorry about the issue, I had selected wrong rebase version while trying to squash commits, my bad.; PR is Fixed now and in accordance with the suggested clang-format.; I will definitely improve my PRs for future contributions, grateful for your guidance and suggestions. Thanks for your inputs !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7142#issuecomment-779138913:255,guid,guidance,255,https://root.cern,https://github.com/root-project/root/pull/7142#issuecomment-779138913,2,['guid'],['guidance']
Usability,"@eguiraud Thank you for your detailed response!. I currently create some TDirectories representing different stages of seloctions, and write histograms into it. For some reason, I would like to have TTree output also in some of the stages, and for that I need to use the `Snapshot` method. The way I had thought of (haven't tested yet, sorry) would be creating all the directories first and close the file, snapshotting to that file (not sure if the sub-directory could be, specified), and then open it for histogram writing. I have little knowledge about multi-threading, and was just (naïvely) looking for an RDataFrame anology of creating a TTree inside a TDirectory. It simply seemed strange to have to close the file and reopen. If feasible, it would be great if the (official) way to create a snapshot and to store into a certain sub-directory of a TFile, along with the multi-threading consideration, could be documented, so that users switching from the imperative pattern would be easier to understand.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9225#issuecomment-958037006:674,simpl,simply,674,https://root.cern,https://github.com/root-project/root/issues/9225#issuecomment-958037006,2,['simpl'],['simply']
Usability,"@eguiraud concerning .O1, should i change in MetaSema ; (not yet implemented) --> (implemented only for 0 and 1 ?) -->changed; And should I add (not yet implemented) to .undo or .U ? --> it seems to work for me. Also, I see that '.include' is implemented, but not documented. Should I add it? --> added; .stats and .fileEx are documented but not sure what they do.; What else from the CINT table above should be added that has been lost during the translation?; For example, .g still prints global variables, but .l does no longer print local variables.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10065#issuecomment-1067891493:170,undo,undo,170,https://root.cern,https://github.com/root-project/root/issues/10065#issuecomment-1067891493,2,['undo'],['undo']
Usability,"@eguiraud while i agree with you, my thinking actually was also along having a common code base and also ""a la python"" usage: while there is the option of having an executable doing ""import module, run main function"" one can also do ""python -m module module_args"". so, my proposal was from a point of view of code (common code base, maybe also usable programatically in macros, as part maybe of some generic ROOT toolbox) and the second point of view was of actual usage where maybe `root -verb verb_args` could be easier and clearer to use than `root[verb] args` .. but in the end my proposal was more on the lines of ""wouldn't you (devs) be interested in such a usage/point of view ?"" ; and getting back to python: yes, it is exactly (also) a swiss-army knife like python :) and beside some bash script that i converted to python, i started to see a point of/play with having root scripts (with root in shebang ;) )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8447#issuecomment-862518127:344,usab,usable,344,https://root.cern,https://github.com/root-project/root/issues/8447#issuecomment-862518127,4,"['clear', 'usab']","['clearer', 'usable']"
Usability,"@eguiraud: I simply *assumed* that you should always be able to program against TTEx, but you cannot. You have to `ifdef` - otherwise, you cannot compile. Or worse, you can actually compile albeit having committed wrong code, because in the `true` branch of your `ifdef`, you did everything right, but in the `false` branch (as happened in this PR), you have stuff that won't even compile.; Therefore, I never even remotely considered the possibility to put `ifdef`s concerning IMT into RooFit. Now that you mention it, it could obviously be done, but I'd rather have those in TTEx - single point of failure - than in `<insert everywhere where TTEx could be in use>`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6298#issuecomment-686577803:13,simpl,simply,13,https://root.cern,https://github.com/root-project/root/pull/6298#issuecomment-686577803,2,['simpl'],['simply']
Usability,"@en. > Hi Ivan, thank you, I have some doubts about the changes:; > ; > * I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call; > * the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."".; > ; > Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`. @eguiraud noted! This PR now only gives a clearer error message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10705#issuecomment-1148590657:615,clear,clearer,615,https://root.cern,https://github.com/root-project/root/pull/10705#issuecomment-1148590657,2,['clear'],['clearer']
Usability,"@etejedor @bbocjelm I think a simple way to do it is to remove the differences in this pull request that touch PyROOT— my contributions. Then this pull request can concentrate on only the TBranch/TBasket/TBufferFile modifications in C++ and we can later add code to AsMatrix to make use of it. A year ago, AsMatrix didn't exist, so the Numpy interface was a one-off. Now that there's AsMatrix, there's a natural place to put it. Nothing in git is every lost— Enric can see how I implemented it and copy that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2519#issuecomment-419064045:30,simpl,simple,30,https://root.cern,https://github.com/root-project/root/pull/2519#issuecomment-419064045,2,['simpl'],['simple']
Usability,"@etejedor, you can merge this PR. And after that I will try to simplify code",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6169#issuecomment-673293838:63,simpl,simplify,63,https://root.cern,https://github.com/root-project/root/pull/6169#issuecomment-673293838,2,['simpl'],['simplify']
Usability,"@ferdymercury ; > One trick would be to set: WARN_NO_PARAMDOC to YES in the Doxyfile, to find all undocumented params. That was not the point. This fixes properly document the class members (sorry ""parameters"" was not the right word) with the `///<` tag.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9673#issuecomment-1020117649:98,undo,undocumented,98,https://root.cern,https://github.com/root-project/root/pull/9673#issuecomment-1020117649,2,['undo'],['undocumented']
Usability,"@ferdymercury is that library already used in ROOT? Considering it's 10k loc, I'd not count it as ""simplifying"" unless we decided to use it in multiple places (ideally all our cpp executables).; Also, we must make sure that the argument parsing logic remains backward-compatible, which is not very clear to me if it would be the case with that lib.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16090#issuecomment-2244858400:99,simpl,simplifying,99,https://root.cern,https://github.com/root-project/root/pull/16090#issuecomment-2244858400,4,"['clear', 'simpl']","['clear', 'simplifying']"
Usability,"@ferdymercury thanks for the links. I fully agree with Axel's proposal of trying to make all ROOT binaries consistent in their argument parsing and make them POSIX (while keeping the legacy `-long` options valid but hidden). Having never used it, I don't have a strong opinion on the CLI11 library yet. On one hand it seems well maintained and tested on all platforms, which is great, and being header-only certainly makes it convenient to use. On the other hand it's quite big and I wonder if we need enough features from it as to justify its size. . In any case I think we should revive the topic and understand if there were any blockers to it or if it was simply not picked up by anyone in the past 3 years.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16090#issuecomment-2245114452:660,simpl,simply,660,https://root.cern,https://github.com/root-project/root/pull/16090#issuecomment-2245114452,2,['simpl'],['simply']
Usability,@ferdymercury thanks to let me know. See the bottom of https://root.cern/doc/master/ . 1.9.3 is already the doxygen version used to build the ROOT reference guide. So we can close this issue ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-1008843828:157,guid,guide,157,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-1008843828,2,['guid'],['guide']
Usability,@ferdymercury you can simply use a `TGPictureButton` with your own enabled/disabled LED pictures,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7156#issuecomment-775978601:22,simpl,simply,22,https://root.cern,https://github.com/root-project/root/issues/7156#issuecomment-775978601,2,['simpl'],['simply']
Usability,"@fylux thank you very much for your work! It is a very nice idea! I will start from simple comment: can you please remove ZSTD part (it is not a purpose of this PR as I understood), because you have it actually here https://github.com/root-project/root/pull/3947. Then code will become much more cleaner so we can actually see your changes related to other compression algorithms. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4037#issuecomment-508366062:84,simpl,simple,84,https://root.cern,https://github.com/root-project/root/pull/4037#issuecomment-508366062,2,['simpl'],['simple']
Usability,@guitargeek @wlav awesome! Thanks for the quick feedback on this! :). I'll mark that item as done! :tada:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14824#issuecomment-1964640642:48,feedback,feedback,48,https://root.cern,https://github.com/root-project/root/issues/14824#issuecomment-1964640642,2,['feedback'],['feedback']
Usability,"@guitargeek While addressing your comments, I started thinking that there's perhaps a better design. 1. I don't think we should have a default parameter at all, but only one ctor with the offset parameters. In real life current cases, these classes are always used from MinuitFcnGrad and they always share offsets with one or two other Likelihood* objects. The only cases where no shared offsets are necessary is in unit tests, but in those cases it's easy to just create a dummy offset vector.; 2. All the offset management is distracting a bit from the core Likelihood logic. I think it may be nicer to make a simple wrapper class `LikelihoodOffset` that holds the shared_ptrs to the vectors, does the swapping, and a few other things. This also makes it easier to create, because the unwieldy types that you also rightly point out would then only be contained within `LikelihoodOffset`. I will start working on point 1 at least, and in the meantime will consider (and allow you to comment on ;) ) point 2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12202#issuecomment-2091419386:612,simpl,simple,612,https://root.cern,https://github.com/root-project/root/pull/12202#issuecomment-2091419386,2,['simpl'],['simple']
Usability,@guitargeek any feedback on this one? Shall I rebase and run clang-format? Thanks in advance!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9156#issuecomment-1812203134:16,feedback,feedback,16,https://root.cern,https://github.com/root-project/root/pull/9156#issuecomment-1812203134,2,['feedback'],['feedback']
Usability,"@hageboeck @lmoneta : these are super simple additional classes. following up on our discussion on the ""RooAbsPdf"" vs. ""RooAbsReal"" business: do you think it would be useful for me to template these classes in such a way as to meet my suggestion of avoiding code duplication?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4015#issuecomment-507052809:38,simpl,simple,38,https://root.cern,https://github.com/root-project/root/pull/4015#issuecomment-507052809,2,['simpl'],['simple']
Usability,"@hageboeck Thanks for the correction. The build failure looks like it has something to do with a Git test, but it’s not clear to me what went wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6172#issuecomment-675412995:120,clear,clear,120,https://root.cern,https://github.com/root-project/root/pull/6172#issuecomment-675412995,2,['clear'],['clear']
Usability,"@hageboeck Thanks for the extensive review! I will implement some changes based on that and @guitargeek's comments today. In the meantime, perhaps it would be useful to check out #8596 as well. That PR introduces the second concrete MinimizerFcn. Possibly, seeing `RooAbsMinimizerFcn` ""in action"" through that new class (`RooGradMinimizerFcn`) will shed a different light on the design choices for this abstract class. Basically, we previously just had two classes, `RooMinimizerFcn` and `RooGradMinimizerFcn` (and then later on **another** one, which will be introduced in another PR this week) with tons of code duplication. `RooAbsMinimizerFcn` simply factors that stuff out into one class.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8569#issuecomment-874002788:648,simpl,simply,648,https://root.cern,https://github.com/root-project/root/pull/8569#issuecomment-874002788,2,['simpl'],['simply']
Usability,"@hageboeck Thanks for the feedback! I am trying to work on this PR in phases, so first I removed some of the (now unnecessary) commits.. and then I am now trying to incorporate your comment here - https://github.com/root-project/root/pull/5297#discussion_r410364571 ; Sorry, if the new commit was misleading - please review this code once I remove the [WIP] tag. ; Would it be better to close this PR and then open it up again once I am done making all relevant changes (based on your comments and the meeting)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5297#issuecomment-628512610:26,feedback,feedback,26,https://root.cern,https://github.com/root-project/root/pull/5297#issuecomment-628512610,2,['feedback'],['feedback']
Usability,"@hageboeck thanks for another Herculean reviewing effort :) Your comments make total sense; indeed, all the copy-pasted stuff still has to be merged with all the modernization and optimization work that was done in the past two years. I will go through as much of your suggestions as I can before I will be on leave after tomorrow for three weeks. After that, if anyone else has time to work on some of the issues, I'd of course welcome the help. As you know, my time on the project is running out, so I probably won't have time to integrate everything. For instance, Manos' mini computation library I have only learned about in the last few months and don't know it in enough detail to make any kind of sensible estimate of how to do it, let alone how much time this would take. Let's discuss detailed plans in our meeting at 14:00 today.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8700#issuecomment-884045031:612,learn,learned,612,https://root.cern,https://github.com/root-project/root/pull/8700#issuecomment-884045031,2,['learn'],['learned']
Usability,"@hageboeck the DataHandling ERROR you proposed is indeed the correct solution for this, but I would encourage the inclusion of documentation as well to make clear to users that there is no way to properly assign `wgtError` without calling the `StoreError` command arg in the constructor without relying on noticing a print statement at run time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4167#issuecomment-519959496:157,clear,clear,157,https://root.cern,https://github.com/root-project/root/pull/4167#issuecomment-519959496,2,['clear'],['clear']
Usability,"@hahnjo At least Alma9 + gcc11 (both in compiled and interpreted mode). Simple reproducer:; ```; {; struct Derived : public TObject { Derived() = default; };; auto obj = new Derived{};; if (! obj->IsOnHeap()); throw ""TObject::IsOnHeap is broken for MyType"";; delete obj;; }; ```; The 'more' than expected is that the defaulted constructor includes the execution of a `bzero` (or `memset`) on the object's memory. This does not violate the C++ standard but make the ""undefined behavior"" that `IsOnHeap` relies to not longer 'work'. @dpiparo I think it is indeed possible to add `Clang` based code in `rootcling` to detect if the constructors are defaulted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16218#issuecomment-2286884946:72,Simpl,Simple,72,https://root.cern,https://github.com/root-project/root/pull/16218#issuecomment-2286884946,1,['Simpl'],['Simple']
Usability,"@hahnjo Hi, I finally found some time to get this building, the branch now seems to somewhat work. Few things:; - it seems not to break the linux build; - seems to work for now, in whatever simple scenarios I have tested it till now; - the TThread tests crap out saying the _REENTRANT macro is not defined (I think it should be by -pthread which is enabled), probably needs some attention by an expert.; - there is an issue with library unload order vs the thread local dtor calling. Not a dealbreaker but the FreeBSD __cxa_thread_call_dtors is a bit verbose and prints warnings to stderr about that. Also here there is quite some room for experts to look at since there already are mitigations to similar issues in the code. (__cxa_thread_call_dtors: dtr 0x82b2c78f0 from unloaded dso, skipping); - actually a lot more tests fail - what is the general state of the test results on the master branch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12787#issuecomment-1585584886:190,simpl,simple,190,https://root.cern,https://github.com/root-project/root/issues/12787#issuecomment-1585584886,2,['simpl'],['simple']
Usability,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14055#issuecomment-2379654469:520,simpl,simply,520,https://root.cern,https://github.com/root-project/root/issues/14055#issuecomment-2379654469,4,"['feedback', 'simpl']","['feedback', 'simply']"
Usability,"@hahnjo Thanks for the comment! I can move it there, but do I really need to derive from TRandomEngine? The parent methods are for double Rndm(), which does not seem very useful to me.; This generator is a binary register generator, so rather a quite different structure, and it is not intended to be used as a normal generator, but rather as a test scenario or helper math functions for electronics testing. It also is inherently templated, etc. It returns an array rather than just a number Rndm(). See https://github.com/root-project/root/pull/8798/files#diff-2e848ceefaff2e24c9b2970fb86a8da1d3d00603fc4f48f920421e603198fab2. Wrt tests, I will 'copy' the mentioned tutorial as 'test' once it's clear where this class should go. Thanks for the review!! :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8798#issuecomment-2078772470:697,clear,clear,697,https://root.cern,https://github.com/root-project/root/pull/8798#issuecomment-2078772470,2,['clear'],['clear']
Usability,"@hahnjo for `vector<char>` it's all fine, there is actually a test for it [here](https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/test/stl_vector.py#L18) and it succeeds, meaning that our pythonization for `std::vector` runs fine. The fact that `value_type` for `vector<char>` in Python is the Python string `""char""` is due to another pythonization injected by cppyy itself [here](https://github.com/root-project/root/blob/07932d78211d0ac5fdb198ac2260c35530cb9647/bindings/pyroot/cppyy/CPyCppyy/src/Pythonize.cxx#L1159). Simple test:. ```python; >>> import ROOT; >>> a = ROOT.std.vector['char'].value_type; >>> a; 'char'; >>> type(a); <class 'str'>; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11592#issuecomment-1282453903:552,Simpl,Simple,552,https://root.cern,https://github.com/root-project/root/pull/11592#issuecomment-1282453903,1,['Simpl'],['Simple']
Usability,"@iarspider Did your tests indicate that this is a regression introduced by that commit specifically, or that this issue was simply not there yet at the time of that commit and it could be any commit since then?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14793#issuecomment-1983530703:124,simpl,simply,124,https://root.cern,https://github.com/root-project/root/issues/14793#issuecomment-1983530703,2,['simpl'],['simply']
Usability,"@jblomer : thanks a lot for your comments, I will address them shortly!; ; >One thing I'd like to discuss before merging is how we can unit test the code. If there is a stable, publicly available XRootD >service with test data, we can use the RRawFileDavix unit test as a blueprint. Otherwise, given that we have access to the xrootd >library, perhaps we can spawn a simple ad-hoc server in another thread. Well, I think one nice thing that we could do is to have an XRootD server with an HTTP plugin exporting same files with both root and HTTP protocols. Then we could simply run all the tests you currently have for the `RRawFileDavix` also for `RRawFileNetXNG`. If you have some stress tests we could even use them to benchmark the two protocols.; Could we use `root.cern.ch` to do this? Otherwise, I can create a small testing service, I would need to see what machine I can get.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9012#issuecomment-922713482:367,simpl,simple,367,https://root.cern,https://github.com/root-project/root/pull/9012#issuecomment-922713482,4,['simpl'],"['simple', 'simply']"
Usability,"@kgertsenberger ; As you can see, I merged your PR and fix several compiler warnings afterwards - see #4017 ; If you can implement methods for other plugins - it would be grate. ; Even better if one could provide testing in roottest - one could use SQLite, which is very simple to handle.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3961#issuecomment-507209448:271,simpl,simple,271,https://root.cern,https://github.com/root-project/root/pull/3961#issuecomment-507209448,2,['simpl'],['simple']
Usability,"@kgizdov the problem is the two cases are non-exhaustive: For versions before 3.11.0, our own forward declaration will always work. Starting with 3.11.2, `json_fwd.hpp` is always available. But in between, for 3.11.0 and 3.11.1, we can hit an ""external"" version of the library without `json_fwd.hpp` where our own forward declaration doesn't work (because of https://github.com/nlohmann/json/pull/3590). It's not clear to me how to make this case work, but I also don't think it's really that important.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11130#issuecomment-1218222161:413,clear,clear,413,https://root.cern,https://github.com/root-project/root/issues/11130#issuecomment-1218222161,2,['clear'],['clear']
Usability,"@ktf (I can reproduce the problem now). Commit b2c6904bf458d5149e3955881d0054ba256a4110 seems to have broken the expectation of only one basket in flight, I also wonder how it interact with the interface, in particular, it is clear that this PR removes the crashs but does it lead to correct data being read through the bulk interface?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16640#issuecomment-2400792247:226,clear,clear,226,https://root.cern,https://github.com/root-project/root/pull/16640#issuecomment-2400792247,2,['clear'],['clear']
Usability,@linev - is your concern that we break ABI with ROOT versions that are greater than 5 years old? Has there ever been a promise that applications predating ROOT 6.02 will be able to link against ROOT 6.22 without recompilation?. There's no intent to have performance gains here: the intent is to have clearer interfaces.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4060#issuecomment-510887484:300,clear,clearer,300,https://root.cern,https://github.com/root-project/root/pull/4060#issuecomment-510887484,2,['clear'],['clearer']
Usability,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it..; ```; -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml; ```; So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):; ```; [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test; civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]; (void)pthread_setname_np(pthread_self(), threadName);; ^; 1 warning generated.; example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]; int main(int argc, char **argv); ^; example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]; int main(int argc, char **argv); ^; 2 warnings generated. ```. We will investigate why and",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2581#issuecomment-418769386:505,clear,clear,505,https://root.cern,https://github.com/root-project/root/pull/2581#issuecomment-418769386,2,['clear'],['clear']
Usability,"@linev I could check how to do that, but isn't there any simpler solution?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14908#issuecomment-1985811465:57,simpl,simpler,57,https://root.cern,https://github.com/root-project/root/pull/14908#issuecomment-1985811465,2,['simpl'],['simpler']
Usability,"@linev I'm trying rebuilding from scratch now. I'm afraid I don't have enough battery, so I can't give feedback until some time after my current meeting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16129#issuecomment-2255350691:103,feedback,feedback,103,https://root.cern,https://github.com/root-project/root/pull/16129#issuecomment-2255350691,2,['feedback'],['feedback']
Usability,@linev Please check. This is a simple backport with change in digits rendering in RenderCore.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15411#issuecomment-2093332127:31,simpl,simple,31,https://root.cern,https://github.com/root-project/root/pull/15411#issuecomment-2093332127,2,['simpl'],['simple']
Usability,"@linev thanks for implementing my suggestions. I really think it doesn't hurt to learn a bit the language and do it yourself, that's why I made the effort to explain the Python coding style changes in my comments. Also, next time it will be faster if you fully read my comments so I don't have to repeat myself.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5209#issuecomment-604992532:81,learn,learn,81,https://root.cern,https://github.com/root-project/root/pull/5209#issuecomment-604992532,2,['learn'],['learn']
Usability,@lmoneta - Could you please have a look at this?. It would be helpful for extern Minuit2 users like us in iminuit if it's simple to extract and update to the latest version.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1677#issuecomment-384271097:122,simpl,simple,122,https://root.cern,https://github.com/root-project/root/pull/1677#issuecomment-384271097,2,['simpl'],['simple']
Usability,"@lmoneta Actually out of the above the most pressing is `SetMode(const double* mode)`, because this is the only one for which I don't have a workaround (I need to use `DistSampler` not `TUnuran` in the respective code). I can provide a pull request with mode data member being a `std::vector<double>` and `SetMode(const double mode)` setting a single entry and both 1D and ND setters clearing any previous entries. Should I provide the PR or do you prefer to implement it yourself (I guess this is faster than actual review of the PR and merging)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7332#issuecomment-864844142:384,clear,clearing,384,https://root.cern,https://github.com/root-project/root/issues/7332#issuecomment-864844142,2,['clear'],['clearing']
Usability,"@lmoneta I've changed the commit message accordingly (force-pushed to overwrite the previous commit with the old commit message). Anyway, thank you both for your feedback!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5368#issuecomment-614711534:162,feedback,feedback,162,https://root.cern,https://github.com/root-project/root/pull/5368#issuecomment-614711534,2,['feedback'],['feedback']
Usability,"@lmoneta I've implemented the conditional tests for the keras method. As well, this commit fixes the py2/py3 compatibility issue for the `find_python_module` function in `RootNewMacros.cmake` (simply a py2-only print statement buried in the code).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/280#issuecomment-253523265:193,simpl,simply,193,https://root.cern,https://github.com/root-project/root/pull/280#issuecomment-253523265,1,['simpl'],['simply']
Usability,"@lmoneta Regarding the method parameters, it is fine to pass them through the string API. The point is that this should be clearly documented in `TUnuran` doxygen and for the `TUnuranSampler` doxy it should be mentioned and redirected to `TUnuran` doxy. Right now the information is hidden in tutorials and the code. I am not sure if there is an elegant way to add methods to `TUnuranSampler`/`TUnuran` that would set the parameters. Maybe something like; ```; SetParameter(const TString& name); SetParameter(const TString& name, const double value); ```; that would build the string passed to the string API when `Init()` is called.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7332#issuecomment-844076534:123,clear,clearly,123,https://root.cern,https://github.com/root-project/root/issues/7332#issuecomment-844076534,2,['clear'],['clearly']
Usability,@lmoneta any feedback on the PR ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8143#issuecomment-946555747:13,feedback,feedback,13,https://root.cern,https://github.com/root-project/root/pull/8143#issuecomment-946555747,2,['feedback'],['feedback']
Usability,@lmoneta at this point I think it would be wise for you to finish it off. I clearly have other priorities as this has been open for a year. Thanks for offering to refactor it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1533#issuecomment-458600502:76,clear,clearly,76,https://root.cern,https://github.com/root-project/root/pull/1533#issuecomment-458600502,2,['clear'],['clearly']
Usability,@lmoneta the reason why this is not merged is not clear to me: could you clarify?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9968#issuecomment-2076533633:50,clear,clear,50,https://root.cern,https://github.com/root-project/root/pull/9968#issuecomment-2076533633,2,['clear'],['clear']
Usability,"@makortel . > In CMSSW; > ; > * we use `oneapi::tbb::global_control` to set the process' maximum number of threads usable by TBB; > ; > * we create a top-level `oneapi::tbb::task_arena` (with the same number of threads), and all data processing is run within one `task_arena::execute()` call; > ; > * every call to ROOT I/O is isolated with `oneapi::tbb::this_task_arena::isolate()` call; > ; > ; > By adding (or using) a global task arena to ROOT, does this mean, if multiple `TFile`s are writing concurrently, can their tasks be intermingled?. Yes, but I think that's already the case right now because we (incorrectly) use the surrounding task arena for everything. That said, `TTaskGroup` and the wrapped TBB's `task_group` prioritize tasks belonging to that group in their `Wait()` / `wait()` functionality. > Our guess is that ROOT's global task arena would trump the use of `this_task_arena::isolate()`, and allow such intermingling, but we don't really know. Possible that ROOT's task arena ""wins"", I don't know enough about TBB's scheduling internals; I see that you opened an issue to investigate what this means. > We are concerned that by sharing one task arena for unrelated activities it would cause synchronization of those activities because of task stealing. (assuming the explicit arena would trump the `this_task_arena::isolate()` call). As argued above, it's not worse than before except that this fixes the bug that ROOT must only use the resources that it was allowed by the user.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14807#issuecomment-1965963868:115,usab,usable,115,https://root.cern,https://github.com/root-project/root/pull/14807#issuecomment-1965963868,2,['usab'],['usable']
Usability,"@makortel apparently the technical term that I was looking for is ""dynamic type"". I reworded the documentation and commit message accordingly, can you have another look if it's clear(er) now?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15246#issuecomment-2068873320:177,clear,clear,177,https://root.cern,https://github.com/root-project/root/pull/15246#issuecomment-2068873320,2,['clear'],['clear']
Usability,"@marsupial using `SO_LoadedLast` (which is somewhat counter-intuitive to our use case) seems to work. I've greenlit D33529 but give Lang couple of hours/days to give feedback. My personal opinion is that it should be the default, being close to the old behavior. If not, could you point us what to modify to set it [here](https://github.com/root-project/root/blob/master/core/base/src/TROOT.cxx#L1945). Thanks for helping me out to sort this out!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/744#issuecomment-313809522:60,intuit,intuitive,60,https://root.cern,https://github.com/root-project/root/pull/744#issuecomment-313809522,2,"['feedback', 'intuit']","['feedback', 'intuitive']"
Usability,"@marsupial, I can make the inclusion of `ConvertUTF.h` conditionally included if `LLVM_UTF8` is set. It is not clear to me what would be the benefit, though. There is more information about the virtual file changes here: https://reviews.llvm.org/D33275. I do not expect to mess up anything and I do not see any failures wrt to it. Can you give an example of which case you are thinking og?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/589#issuecomment-305095243:111,clear,clear,111,https://root.cern,https://github.com/root-project/root/pull/589#issuecomment-305095243,1,['clear'],['clear']
Usability,"@martinmine, it is not clear why that last is green, it failed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/458#issuecomment-288747669:23,clear,clear,23,https://root.cern,https://github.com/root-project/root/pull/458#issuecomment-288747669,1,['clear'],['clear']
Usability,@moneta I would keep it for the time being (it is not clear what has been taken and what not...),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/745#issuecomment-458609974:54,clear,clear,54,https://root.cern,https://github.com/root-project/root/pull/745#issuecomment-458609974,1,['clear'],['clear']
Usability,"@moneta maybe simply `shape.push_back(1);` instead of `shape.insert(shape.end() + 1 + idx, 1);` would do it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13325#issuecomment-1651741707:14,simpl,simply,14,https://root.cern,https://github.com/root-project/root/issues/13325#issuecomment-1651741707,2,['simpl'],['simply']
Usability,"@ntadej I tried to cherry-pick, but it only worked with three of the four fixes. Also, I only know that *merging* worked at the moment, but it's not clear whether it compiles or if tests work.; I will let it run and see, but to get the full fixes, you will have to wait for ROOT 6.22. The good news is that we will branch off the release candidate this week, so you could use the tag v6-22-00-rc1 or so when it's available.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5466#issuecomment-624594499:149,clear,clear,149,https://root.cern,https://github.com/root-project/root/pull/5466#issuecomment-624594499,2,['clear'],['clear']
Usability,"@olantwin how did you find this? (Tells us what we need to remove.). > In principle, the user's guide is frozen. @couet should we remove this file then?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12551#issuecomment-1485286794:96,guid,guide,96,https://root.cern,https://github.com/root-project/root/pull/12551#issuecomment-1485286794,2,['guid'],['guide']
Usability,"@olifre this was an oversight so it does not appear in the release notes. I totally agree that we should avoid wasting other people time trying to debug the same thing, but the release notes of 6.20 may not be the first place people look, in particular since this affects several versions. I was thinking to put a short description of the incompatibility and fix in the reference guide of [TGeoMaterial](https://root.cern/doc/master/classTGeoMaterial.html) since this is the class where the users will actually see the different behaviour. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9383#issuecomment-987815314:380,guid,guide,380,https://root.cern,https://github.com/root-project/root/issues/9383#issuecomment-987815314,2,['guid'],['guide']
Usability,@omazapa yes the code is part of the Deep Learning module PR. I will close this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/778#issuecomment-332544140:42,Learn,Learning,42,https://root.cern,https://github.com/root-project/root/pull/778#issuecomment-332544140,1,['Learn'],['Learning']
Usability,"@oshadura, according to [this cmake docu](https://cmake.org/cmake/help/git-stage/guide/importing-exporting/index.html#creating-a-package-configuration-file), one have to add something like `find_dependency(nlohmann_json)` into ROOTConfig.cmake. I did not found any example of usage of this macro in ROOT. ; I tried to use your code around `builtin_glew`, but it does not work.; `nlohmann_json` does not appear in exported targets.; Also direct call like; ```; export(TARGETS nlohmann_json::nlohmann_json NAMESPACE nlohmann_json:: APPEND FILE ${PROJECT_BINARY_DIR}/ROOTConfig-targets.cmake); ```; fail while `nlohmann_json::nlohmann_json` is not build and cmake does not allow to export it. Should I try with `find_dependency(nlohmann_json)`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6784#issuecomment-724615880:81,guid,guide,81,https://root.cern,https://github.com/root-project/root/issues/6784#issuecomment-724615880,2,['guid'],['guide']
Usability,"@pamputt Cool, thanks for the feedback!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8292#issuecomment-880610339:30,feedback,feedback,30,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-880610339,2,['feedback'],['feedback']
Usability,"@pcanal - the local caching mechanism in `TFilePrefetch` is permanent cache -- it lives on the local disk beyond the lifetime of the actual process. This is a buffer -- it uses the system memory (i.e., the page cache and, eventually, the filesystem) to pull the data locally in large, storage-friendly reads. This allows us to do latency hiding for the duration of the running process. It does *not* cache the data beyond the lifetime of the running process. It is much simpler than the `TFilePrefetch` mechanism as the buffering is only done on demand. Overall, it's a pretty useful improvement - a modest improvement, admittedly - that we've used for many years in CMS.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/146#issuecomment-327365789:470,simpl,simpler,470,https://root.cern,https://github.com/root-project/root/pull/146#issuecomment-327365789,1,['simpl'],['simpler']
Usability,@pcanal ; ```; static Transaction* latestTransaction;; if (latestTransaction != m_Interpreter->getLatestTransaction()) {; latestTransaction = const_cast<Transaction*>(m_Interpreter->getLatestTransaction());; findFunctionProtoCache.clear();; }; ```; Is your suggestion something like this?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2434#issuecomment-411490304:231,clear,clear,231,https://root.cern,https://github.com/root-project/root/pull/2434#issuecomment-411490304,2,['clear'],['clear']
Usability,"@pcanal @bbockelm I think there are two possible refactoring approaches.; 1. I could extract all signal handling related functions and attributes out from TSystem(.h,.cxx) and modify both TUnixSystem and TWinNT; 2. I create SignalHandling class in another class and add it as an class member in TUnixSystem. In that sense, I need to overwrite all signal handling functions and point them to the corresponding functions in new class SignalHandling.; Which one is better? The first one is more clear to me but I am not sure how it will impact the windows machine. Zhe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/97#issuecomment-170733479:492,clear,clear,492,https://root.cern,https://github.com/root-project/root/pull/97#issuecomment-170733479,1,['clear'],['clear']
Usability,"@pcanal @jblomer, I agree with @vgvassilev - we had a chat today and it looks could be a pretty simple solution without any downsides and hacks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6532#issuecomment-721663576:96,simpl,simple,96,https://root.cern,https://github.com/root-project/root/pull/6532#issuecomment-721663576,2,['simpl'],['simple']
Usability,"@pcanal How should we proceed?; Is it goes in right direction?; If yes, should we extend `TClass::HasDefaultConstructor(bool testio=false)` or add new method `TClass::HasIOConstructor()`?; Also problem with array of objects is not clear for me",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5133#issuecomment-597828998:231,clear,clear,231,https://root.cern,https://github.com/root-project/root/pull/5133#issuecomment-597828998,2,['clear'],['clear']
Usability,"@pcanal I have thought of a ""solution"". If we remove the default value, set `event` to 0 in the method itself and simply warn the user that he/she has not provided a value for `event`, the user will know and other classes that rely on the default value of 0 still work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8425#issuecomment-861618831:114,simpl,simply,114,https://root.cern,https://github.com/root-project/root/pull/8425#issuecomment-861618831,2,['simpl'],['simply']
Usability,"@pcanal I reworked the error message for unimplemented merges in 0ccd1d3, thank you for the feedback :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6008#issuecomment-663685527:92,feedback,feedback,92,https://root.cern,https://github.com/root-project/root/pull/6008#issuecomment-663685527,2,['feedback'],['feedback']
Usability,"@pcanal I tested with RDataFrame `Snapshot` and a hand-written usage of `TBufferMerger`, writing a quite simple tree. Any ideas what else to test, do we have a more complex benchmark / a production use case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14034#issuecomment-1803962285:105,simpl,simple,105,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1803962285,2,['simpl'],['simple']
Usability,"@pcanal I would claim the check is simply spurious with the current implementation. The whole method could actually be folded in GetBulkEntries, if one simply adds a fallback to the ReadBasketFast call.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6558#issuecomment-703886881:35,simpl,simply,35,https://root.cern,https://github.com/root-project/root/pull/6558#issuecomment-703886881,4,['simpl'],['simply']
Usability,"@pcanal I wrote a testing program on my own. For compression, it basically reads the root file given in your ticket and compress all the trees in it and write out to another file. For decompression, it simply iterates all entries in the compressed file. I used TStopWatch to measure the performance. I did not use TTreePerfStats in my program.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/81#issuecomment-142029158:202,simpl,simply,202,https://root.cern,https://github.com/root-project/root/pull/81#issuecomment-142029158,1,['simpl'],['simply']
Usability,@pcanal This is just a documentatioon update. Can you please decide to merge or not ? ; It is clear the test failures have nothing to do with the PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1534#issuecomment-458600001:94,clear,clear,94,https://root.cern,https://github.com/root-project/root/pull/1534#issuecomment-458600001,2,['clear'],['clear']
Usability,"@pcanal a simple work-around would be to check whether `gEnv` and / or `gROOT` are `nullptr` in `DefaultErrorHandler`, and if so, to assume sane defaults rather than initializing ""the system"". Comments, opinions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7418#issuecomment-795128879:10,simpl,simple,10,https://root.cern,https://github.com/root-project/root/issues/7418#issuecomment-795128879,2,['simpl'],['simple']
Usability,@pcanal it is simple infrastructure fail..,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1059#issuecomment-332306910:14,simpl,simple,14,https://root.cern,https://github.com/root-project/root/pull/1059#issuecomment-332306910,2,['simpl'],['simple']
Usability,"@pcanal right, that seems a possible way forward. That said, it absolutely requires our own `FindGTest.cmake` while I personally think we should rather move towards standard ways of detecting ROOT dependencies (cf the saga around XRootD). For that reason, I would prefer to *not* make the setup more complicated in this PR than it already is - I argue that removing the dead compatibility code is simply acknowledging the fact that we silently depend on GTest 1.10 already.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15355#issuecomment-2082181170:397,simpl,simply,397,https://root.cern,https://github.com/root-project/root/pull/15355#issuecomment-2082181170,2,['simpl'],['simply']
Usability,@pcanal what's the difference between `GetLenStatic` and `GetLen`? why are all these super-important methods undocumented?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1532#issuecomment-359027718:109,undo,undocumented,109,https://root.cern,https://github.com/root-project/root/pull/1532#issuecomment-359027718,2,['undo'],['undocumented']
Usability,"@pcanal, do you have any intuition about what could have gone wrong that causes these failures in the `execCheckClusterRange` test because of different file sizes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14268#issuecomment-1863121010:25,intuit,intuition,25,https://root.cern,https://github.com/root-project/root/pull/14268#issuecomment-1863121010,2,['intuit'],['intuition']
Usability,"@pcanal, regarding your requirements:; * I've already run `clang-format` on my laptop. If the CI version behaves differently, I am of course happy to fix further stuff.; * The documentation is on par with `TCsvDS`, given I copied most of it from there. I am happy to improve it further in a subsequent PR.; * The tests are on par with `datasource_csv`, given I simply adapted it to my case. I will of course add more as I experiment more with it myself.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1712#issuecomment-371615688:361,simpl,simply,361,https://root.cern,https://github.com/root-project/root/pull/1712#issuecomment-371615688,2,['simpl'],['simply']
Usability,"@pcanal, thank you for feedback. Actually, I was talking about fastcloning test in roottest.git. I found in it's Makefile exactly the same macros and bash scripts including also dt_RunDrawTest.sh and dt_DrawTest.C. I tried to port it to CMake but code requires a lot of fixes and doesn't work out of the box. I have WIP PR https://github.com/root-project/roottest/pull/290 with commented out part including dt_RunDrawTest.sh and dt_DrawTest.C since it was not running for long time. Do you think I can remove in roottest PR https://github.com/root-project/roottest/pull/290 outdated code in favour of proposed solution in your comment - (a), b), c) steps?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3270#issuecomment-460264298:23,feedback,feedback,23,https://root.cern,https://github.com/root-project/root/pull/3270#issuecomment-460264298,2,['feedback'],['feedback']
Usability,"@pcanal, this is a bit of a pain for CMS as we have to put an ""undo commit"" on all our 6.24 and master branches, e.g.:; https://github.com/cms-sw/root/commit/425ac414ef564c1cdc5fa490967d95d63df3b8eb. We probably have several incarnation of this undo in various branches :(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-948087157:63,undo,undo,63,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-948087157,4,['undo'],['undo']
Usability,@pcanal. If it is any help I reference here a simple cmssw module [1]. When compile it with FWLite (built with root master) you can reproduce the crash. Below is the binary from the test module and the sample file:; test-bname-for.exe /eos/cms/store/group/phys_muon/dmytro/tmp/BPH-RunIIAutumn18DRPremix-00015.root. Crash is the line https://github.com/alja/OssTests/blob/root-test/BranchAddr/bin/test-bname-for.cc#L95. [1] https://github.com/alja/OssTests,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718#issuecomment-948203246:46,simpl,simple,46,https://root.cern,https://github.com/root-project/root/issues/7718#issuecomment-948203246,2,['simpl'],['simple']
Usability,@petrstepanov : Thank you for the contribution that now is merged!; I forgot to mention you that next time it would be better to merge together simple commits and have more meaningful commit log messages. ; Thanks again!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10780#issuecomment-1192647873:144,simpl,simple,144,https://root.cern,https://github.com/root-project/root/pull/10780#issuecomment-1192647873,2,['simpl'],['simple']
Usability,@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=On; @vgvassilev had to clear the build queue as something screwed up and made the PR by @xvallspl get built 8 times,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/470#issuecomment-290209174:89,clear,clear,89,https://root.cern,https://github.com/root-project/root/pull/470#issuecomment-290209174,1,['clear'],['clear']
Usability,"@phsft-bot build!. Could you update the commit message to something like:; ""[rootcling] Don't generate dictionary to throw it away when called with -r. This patch should speed up rootcling -r and simplify some of the conditional logic.""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5223#issuecomment-604382871:196,simpl,simplify,196,https://root.cern,https://github.com/root-project/root/pull/5223#issuecomment-604382871,2,['simpl'],['simplify']
Usability,"@pseyfert - to be clear though, you're talking about a different algorithm, right? (LZMA versus LZ4)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/81#issuecomment-170018187:18,clear,clear,18,https://root.cern,https://github.com/root-project/root/pull/81#issuecomment-170018187,1,['clear'],['clear']
Usability,"@saisoma123, I have squashed the commits. In future we should do these changes in a single commit to have a clearer history.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10936#issuecomment-1185376282:108,clear,clearer,108,https://root.cern,https://github.com/root-project/root/pull/10936#issuecomment-1185376282,2,['clear'],['clearer']
Usability,"@silverweed could you please propose a simple pr checking for the mold version? I know it's perhaps a niche use case, but also restoring an optimal user experience for it seems rather cheap...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15473#issuecomment-2258724184:39,simpl,simple,39,https://root.cern,https://github.com/root-project/root/issues/15473#issuecomment-2258724184,4,"['simpl', 'user experience']","['simple', 'user experience']"
Usability,"@smuzaffar, thanks a lot for the prompt feedback!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9592#issuecomment-1018284184:40,feedback,feedback,40,https://root.cern,https://github.com/root-project/root/pull/9592#issuecomment-1018284184,2,['feedback'],['feedback']
Usability,"@stephanlachnit I know you come from the Debian side, and I remember you have a private package of ROOT that builds successfully. Any idea what might go wrong on Ubuntu?. Otherwise I'm tempted to close this because it's basically not reproducible standalone, and I could simply argue it's a problem in the packaging system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10777#issuecomment-1205188390:271,simpl,simply,271,https://root.cern,https://github.com/root-project/root/issues/10777#issuecomment-1205188390,2,['simpl'],['simply']
Usability,"@stwunsch : The machine running the installation of the reference guide is root-ubuntu-2004-2. I logged on this machine and simply tried (stupidly) to type ""pyspark"". I know nothing about this tool but surprisingly I got an answer saying it seems wrongly installed there ... Dod you have an idea about that ? what should be done ? A Python expert might know better. ```; sftnight@root-ubuntu-2004-2:~$ pyspark; Could not find valid SPARK_HOME while searching ['/home', '/usr/local/bin']. Did you install PySpark via a package manager such as pip or Conda? If so,; PySpark was not found in your Python environment. It is possible your; Python environment does not properly bind with your package manager. Please check your default 'python' and if you set PYSPARK_PYTHON and/or; PYSPARK_DRIVER_PYTHON environment variables, and see if you can import; PySpark, for example, 'python -c 'import pyspark'. If you cannot import, you can install by using the Python executable directly,; for example, 'python -m pip install pyspark [--user]'. Otherwise, you can also; explicitly set the Python executable, that has PySpark installed, to; PYSPARK_PYTHON or PYSPARK_DRIVER_PYTHON environment variables, for example,; 'PYSPARK_PYTHON=python3 pyspark'. /usr/local/bin/pyspark: line 24: /bin/load-spark-env.sh: No such file or directory; /usr/local/bin/pyspark: line 68: /bin/spark-submit: No such file or directory; sftnight@root-ubuntu-2004-2:~$ . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7802#issuecomment-822528404:66,guid,guide,66,https://root.cern,https://github.com/root-project/root/issues/7802#issuecomment-822528404,4,"['guid', 'simpl']","['guide', 'simply']"
Usability,@stwunsch I simplified the docs to avoid repetition by referencing the documentation on base classes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6293#issuecomment-685789931:12,simpl,simplified,12,https://root.cern,https://github.com/root-project/root/pull/6293#issuecomment-685789931,2,['simpl'],['simplified']
Usability,"@stwunsch sorry for not being too responsive.; the PR looks good to me and it should solve a recent jira ticket, [ROOT-9546](https://sft.its.cern.ch/jira/browse/ROOT-9546).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2344#issuecomment-407298545:34,responsiv,responsive,34,https://root.cern,https://github.com/root-project/root/pull/2344#issuecomment-407298545,2,['responsiv'],['responsive']
Usability,@stwunsch uninformed question: couldn't we simply use a `vector<char>` as a byte buffer here?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2420#issuecomment-409946830:43,simpl,simply,43,https://root.cern,https://github.com/root-project/root/pull/2420#issuecomment-409946830,2,['simpl'],['simply']
Usability,"@vepadulano , not clear from the conversation to me, but is the comment above about the suppression file and how cling allocates addressing your original issue? If yes,could you close this item?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13130#issuecomment-1926398466:18,clear,clear,18,https://root.cern,https://github.com/root-project/root/issues/13130#issuecomment-1926398466,2,['clear'],['clear']
Usability,@vepadulano . All information is in the description of the PR.; THttpServer implements different kind of http requests.; Most of them described here:. https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html#data-access-from-command-shell. This PR adds one more.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14614#issuecomment-1931846997:182,guid,guides,182,https://root.cern,https://github.com/root-project/root/pull/14614#issuecomment-1931846997,2,['guid'],['guides']
Usability,"@vepadulano @Axel-Naumann with the last commit the situation is now the following:. explicit column list passed, a necessary size branch was omitted:; - compiled Snapshot throws an exception with a (hopefully) clear error message; - jitted Snapshot silently adds the required size branches. explicit column list passed, a necessary size branch is listed _after_ the branch that needs it:; - compiled and jitted Snapshot both work. no explicit column list passed:; - this is only possible with jitted Snapshots and this now works despite the fact that Snapshot reorders the column names in alphabetical order (which might put a size branch after the branch that needs it). In a subsequent PR I'll try to go back to Snapshot using the same ordering for the output columns as the ordering of the input columns -- it's not super straightforward.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10934#issuecomment-1190273501:210,clear,clear,210,https://root.cern,https://github.com/root-project/root/pull/10934#issuecomment-1190273501,2,['clear'],['clear']
Usability,"@vepadulano @pcanal I just noticed that all the 31 bit ugly stuff was due to an outdated documentation. It's no longer the case, minor and major have now independent variables both 64-bits. So this simplifies things significantly.; See https://github.com/root-project/root/commit/19b0ca55fe1643eb07c9bca362b64a4d2111674f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14967#issuecomment-2013036145:198,simpl,simplifies,198,https://root.cern,https://github.com/root-project/root/pull/14967#issuecomment-2013036145,2,['simpl'],['simplifies']
Usability,"@vepadulano thanks for the reply! (got caught up with some other work in the meantime). the simpler reproducer does not throw any errors, and removing the extra outfile.Close() no longer does as well. I had rebooted my computer and re-sourced thisroot.sh, so maybe there was something bad being referenced? Not sure. Hopefully issues doesn't arise again. Thanks for the help!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11823#issuecomment-1347823222:92,simpl,simpler,92,https://root.cern,https://github.com/root-project/root/issues/11823#issuecomment-1347823222,2,['simpl'],['simpler']
Usability,"@vepadulano the idea here is to separate ""regular"" users just using the RNTuple API from ""power"" users that want to reimplement parts thereof. I'm admittedly not sure if that's a clear enough distinction to warrant the use of the `Internal` namespace; we certainly want the public API to guide the regular user as much as possible to the correct usage of RNTuple and I think ""power"" users are fine with navigating the internals if they need to solve a very specific problem. ; I don't know if @jblomer has more to say about this, but I don't have a strong opinion either way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16786#issuecomment-2446318660:179,clear,clear,179,https://root.cern,https://github.com/root-project/root/pull/16786#issuecomment-2446318660,4,"['clear', 'guid']","['clear', 'guide']"
Usability,@vgvassilev - is there a short guide on writing gtests within ROOT? I just barely got caught up with doing `roottest` stuff...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/146#issuecomment-312723725:31,guid,guide,31,https://root.cern,https://github.com/root-project/root/pull/146#issuecomment-312723725,1,['guid'],['guide']
Usability,@vgvassilev - not clear why you mentioned me in the above comment? Did you mean to address Oksana instead?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1189#issuecomment-337095457:18,clear,clear,18,https://root.cern,https://github.com/root-project/root/pull/1189#issuecomment-337095457,2,['clear'],['clear']
Usability,"@vgvassilev : Your idea sounds nice. Implementation of such a system is, however, not realistic for us at the moment and it would also go far far beyond the simple step here. Of course, we'd be happy to address smaller comments (naming of things, etc.) if there are any.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12613#issuecomment-1514749749:157,simpl,simple,157,https://root.cern,https://github.com/root-project/root/pull/12613#issuecomment-1514749749,2,['simpl'],['simple']
Usability,"@vgvassilev ; > Why didn’t you move this check in maybeMangleName?. Well, it's simpler here (and only needed for globals anyway)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3590#issuecomment-479822505:79,simpl,simpler,79,https://root.cern,https://github.com/root-project/root/pull/3590#issuecomment-479822505,2,['simpl'],['simpler']
Usability,"@vgvassilev I think most dependent PRs are merged, so this PR could be simplified...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5443#issuecomment-620030802:71,simpl,simplified,71,https://root.cern,https://github.com/root-project/root/pull/5443#issuecomment-620030802,2,['simpl'],['simplified']
Usability,"@vgvassilev In theory, everybody with commit access can review and approve patches. In practice Lang's commits didn't touch the instruction selection, and I'd really prefer to get feedback from an expert on this. I'll ping the patch probably tomorrow, people might have been off last week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7757#issuecomment-813881052:180,feedback,feedback,180,https://root.cern,https://github.com/root-project/root/pull/7757#issuecomment-813881052,2,['feedback'],['feedback']
Usability,"@vgvassilev Indeed trailing space are not allowed in neither code nor comments ... . In this case the output from travis showed **also** other type of changes (including alignment) and since the trailing spaces were **not** **highlighted**, it was **very** easy to overlook them ... (see for example the result of git diff that makes it very clear).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/553#issuecomment-300005435:342,clear,clear,342,https://root.cern,https://github.com/root-project/root/pull/553#issuecomment-300005435,1,['clear'],['clear']
Usability,"@vgvassilev Let me clarify the disconnect. The title says ""Add **a** module for experimental/string_view""; The commit says:. That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context. The code says:; ```; module ""experimental/string_view"" {; export *; header ""experimental/algorithm""; }; ```; ; The commit content as-is seems completely unrelated to the commit log as far as I could tell (without doing research on the relationship between `range_base`, `string_view` and `algorithm`.; ; So I pondered whether the fix was the right fix for a problem I did not know anything about ... ; ; The right thing to do would have probably be have been to request a complete explanation of what the original problem was, what was the mechanism leading to the error and why this solution was the best solution. This was obviously much more than this seemingly simple fix required. So instead I thought to ask for a very low cost, straight forward solution: simply copy/pasting the error with no additional effort to explain in detail. > Can you suggest a commit message which adds enough information which makes me happy as well?. That requires to paraphrase the error and add a few more details. ```; That should fix a recent nightly failure with gcc11. The failure presented during dictionary generation in a C++14 and C++17 build and incorrectly complained about needing the 'cplusplus20' feature for the 'std.bits/ranges_base.h' module. The issue was triggered by an inclusion of `<bits/ranges_base.h>` from `string_view`. This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the experimental/string_view header file). . It seems the issue is solved by exporting `algorithm` as part of the `string_view` module.; ```. Actually, I still don't know why adding `algorithm` fixes a problem with `range_base.h`, so I can't add that to the commit ... maybe it is something like ""... by avoiding to use the module m",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12276#issuecomment-1430326540:909,simpl,simple,909,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430326540,2,['simpl'],['simple']
Usability,@vgvassilev Re: **778b83c Create a virtual file entry for each input line.**; Here's a simple failure:; ```; ./bin/cling -Xclang -verify; [$]for (int i=0;i<1;++i) { val; } // expected-error {{use of undeclared identifier 'val'}}; [$].q; fatal error: cannot open file 'input_line_3': No such file or directory; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/589#issuecomment-307291410:87,simpl,simple,87,https://root.cern,https://github.com/root-project/root/pull/589#issuecomment-307291410,1,['simpl'],['simple']
Usability,@vgvassilev Test is added. Please help resume github pipeline.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11286#issuecomment-1268422584:39,resume,resume,39,https://root.cern,https://github.com/root-project/root/pull/11286#issuecomment-1268422584,2,['resume'],['resume']
Usability,"@vgvassilev Upon reflection, I think this is the simplest/easier fix...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6551#issuecomment-704231127:49,simpl,simplest,49,https://root.cern,https://github.com/root-project/root/pull/6551#issuecomment-704231127,2,['simpl'],['simplest']
Usability,"@vgvassilev do you object to me merging? I'd want to see this exposed to users earlier rather than later, to hear feedback before we tag v6.26. I have opened an issue https://github.com/root-project/root/issues/9312 to keep track.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9301#issuecomment-972998223:114,feedback,feedback,114,https://root.cern,https://github.com/root-project/root/pull/9301#issuecomment-972998223,2,['feedback'],['feedback']
Usability,"@wlav ; ""So the only upside there seems to be is removing of this teeny-weeny inconvenience of having to setup PYTHONPATH if you install in /usr/local. But A) most from-source builders don't do that, they use bin/thisroot.sh, which sets up PYTHONPATH; and B) installing in /usr/local is not recommended to begin with, b/c of the same problem with remnants."". A) it's also valid when installing as user to ~/.local (like when you install a python module with --user); B) of course, users shouldn't install anything to /usr[/local] without using package management, but it will simplify packaging too by not having to install an ugly script somewhere that sets PYTHONPATH. As for the downsides, I think this solution is just simpler (not mentioning cleaner), maybe this will get you less bug reports.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/73#issuecomment-138831372:576,simpl,simplify,576,https://root.cern,https://github.com/root-project/root/pull/73#issuecomment-138831372,2,['simpl'],"['simpler', 'simplify']"
Usability,"@wolfv great to see you down here :smile: thank you for the snippet!; @SylvainCorlay let's be clear (haven't clarified it enough during the discussion in Sarajevo) that `RTensor` is not xtensor2, it is not meant to have broadcasting nor lazy execution, and it's nowhere near an expression system. It's there because the machine learning classes were missing a multidimensional container with shape information, which they obviously terribly need. I completely agree with @stwunsch that adopting xtensor is an larger, more complex, _ongoing_ discussion :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2593#issuecomment-421270850:94,clear,clear,94,https://root.cern,https://github.com/root-project/root/pull/2593#issuecomment-421270850,4,"['clear', 'learn']","['clear', 'learning']"
Usability,"@xvallspl Any feedback on the implementation ? Also, how to tackle the issue mentioned in the last comment ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2236#issuecomment-400992798:14,feedback,feedback,14,https://root.cern,https://github.com/root-project/root/pull/2236#issuecomment-400992798,2,['feedback'],['feedback']
Usability,A maybe minor change of behavior would be when there is time-dependent static initialization. If the ‘script’ has a static init that gets the current time or looks for files on disk the behavior of the unloading will be unexpected if:. .L script.C; .undo 1; .L script.C. doesn’t rerun static init.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4465#issuecomment-538779696:250,undo,undo,250,https://root.cern,https://github.com/root-project/root/pull/4465#issuecomment-538779696,2,['undo'],['undo']
Usability,"A more simple reproducer here shows the same effect on Ubuntu 18:; ```; TCanvas* c = new TCanvas(); TH1* h = new TH1F(""h"",""h"",100,0,10); c->SetFillStyle(0); h->Draw(); ```. ![image](https://user-images.githubusercontent.com/10653970/151991662-805da339-fd11-4490-9d08-631526798254.png)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9763#issuecomment-1026929100:7,simpl,simple,7,https://root.cern,https://github.com/root-project/root/issues/9763#issuecomment-1026929100,2,['simpl'],['simple']
Usability,"A new interface is perfectly fine. Right now, there is no way to run even an expression with zero side effects without leaking. But as to your first point, a failed transaction (such as the lookup of a type or function that does not exist) also leaks, and is even more common. Such a transaction should, by design, not have any side effects. These leaks affect any PyROOT user and it would not surprise me if ROOT I/O is hit by this, too, given the double lookups everywhere, with and without `std::`, with one of the two regularly failing. As for your second point, that interface is broken on Windows 64b already and simply changing the return to `intptr_t` has a massive ripple effect, so if that platform is ever in the cards, you're going to have to deal with it anyway. Plus, a trivial augmentation would be to take a pointer to a value wrapper, which by default is `nullptr`. If given, return the value there, if not, keep the old behavior. That won't break any code, but will allow current clients to stop part of the leaking. My preference would be to have such a new interface in Cling anyway, not on `TInterpreter`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7201#issuecomment-805982843:619,simpl,simply,619,https://root.cern,https://github.com/root-project/root/issues/7201#issuecomment-805982843,2,['simpl'],['simply']
Usability,"A possible fix is https://github.com/root-project/roottest/pull/610, which simply removes the inbuilt pytest and requires an external version. Edit: Checked, is fixed by a piped pytest version and the linked PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6597#issuecomment-706215684:75,simpl,simply,75,https://root.cern,https://github.com/root-project/root/issues/6597#issuecomment-706215684,2,['simpl'],['simply']
Usability,"A possible implementation, that could go in some ROOT::Math classes:. ```; #include <bitset>; #include <cmath>; #include <array>; #include <set>; #include <iostream>. using std::bitset;; using std::array;; using std::vector;; using std::set;; using std::cout;; using std::endl;. /**; * @brief Generation of pseudo-random bits using a linear feedback shift register (LFSR), until a register value is repeated (or maxPeriod is reached); * @tparam k the length of the LFSR, or the order of the monic polynomial PRBS-k (last exponent); * @tparam nTaps the number of taps; * @param start the start value of the LFSR; * @param taps the taps that will be XOR-ed to calculate the new bit. They are the exponents of the monic polynomial. Ordering is unimportant.; * @param wrapping if true, allow wrapping until maxPeriod or start is reached; * @param verbose if true, print the lfsr and new bit on each step; * @note Shift direction of the register is to the left <<, the newBit is set at bit position 0 (right); * @return the array of pseudo random bits, or an empty array if input was incorrect; * @see https://en.wikipedia.org/wiki/Monic_polynomial; * @see https://en.wikipedia.org/wiki/Linear-feedback_shift_register; * @see https://en.wikipedia.org/wiki/Pseudorandom_binary_sequence; */; template <size_t k, size_t nTaps>; vector<bool>; LFSR(const bitset<k> start, const array<uint16_t, nTaps> taps, const bool wrapping = false, const bool verbose = false); {; vector<bool> result;; //Sanity-checks; if(taps.size()<2); {; cerr << ""At least two taps are needed"" << endl;; return result;; }; for(auto tap : taps); {; if(tap > k); {; cerr << ""Out of range tap "" << tap << endl;; return result;; }; }; if(start.none()); {; cerr << ""A non-zero start value is needed"" << endl;; return result;; }. const uint32_t maxPeriod = pow(2,k) - 1;; result.reserve(maxPeriod);. set<uint32_t> lfsrHistory;; bitset<k> lfsr(start);; uint32_t i = 0;; do; {; // XOR of all the tapped bits. We use -1 because an exponent N in t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8199#issuecomment-843369054:341,feedback,feedback,341,https://root.cern,https://github.com/root-project/root/issues/8199#issuecomment-843369054,2,['feedback'],['feedback']
Usability,"A priori Python code is protected by the GIL, so this access wouldn't be an issue for threaded code (GIL release is ever only on the actual call into C++, not on any setup code to reach that point). Additionally, this is a workaround for ROOT/meta's buggy handling of enums. Since that is now fixed, this particular workaround is no longer necessary and can simply be removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6566#issuecomment-704347919:358,simpl,simply,358,https://root.cern,https://github.com/root-project/root/issues/6566#issuecomment-704347919,2,['simpl'],['simply']
Usability,"A reproducer. A simple macro. Is:; ```; void testTH3Label() {. TRandom3 r;; int nBins = 3;; int nEvents = 100000;; double minRange = 1; double maxRange = 5;; TH3D* h4 = new TH3D(""h4"", ""h4-Title"",; 2*nBins, minRange, maxRange,; nBins , minRange, maxRange,; nBins , minRange, maxRange);. std::vector<TString> labels = {""a1"",""b1"",""c1"",""a2"",""b2"",""c2""};; for ( Int_t e = 0; e < nEvents; ++e ) {; TString label = labels[r.Uniform(0,labels.size())];; Double_t x = r.Uniform(0.9 * minRange, 1.1 * maxRange);; Double_t y = r.Uniform(0.9 * minRange, 1.1 * maxRange);; Double_t z = r.Uniform(0.9 * minRange, 1.1 * maxRange);; h4->Fill(label, y, z, 1.0);; }; h4->Draw();; /// h4->GetXaxis()->SetNdivisions(-1); // This line fixes the issue; h4->GetXaxis()->GetLabels()->ls();; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6381#issuecomment-694888116:16,simpl,simple,16,https://root.cern,https://github.com/root-project/root/issues/6381#issuecomment-694888116,2,['simpl'],['simple']
Usability,"A similar warning is also provoked in the simpler case below, so it's not only related to STL stuff:. ```cpp; #include ""TFile.h"". class TestBase {};. class Test : public TestBase {};. void testio() {. Test t;. TFile *fout = TFile::Open(""test.root"", ""RECREATE"");. fout->WriteObjectAny(&t, TClass::GetClass<Test>(), ""t"");; }; ```. ```; root -l testio.cpp ; root [0] ; Processing testio.cpp...; Warning in <TStreamerInfo::Build>: Test: base class TestBase has no streamer or dictionary it will not be saved; root [1] .q; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9371#issuecomment-997463726:42,simpl,simpler,42,https://root.cern,https://github.com/root-project/root/issues/9371#issuecomment-997463726,2,['simpl'],['simpler']
Usability,"A simple `interp.declare(""#pragma once"")` should be enough. The original case was a header that got embedded verbatim in a dictionary, through genreflex, iirc.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10826#issuecomment-1167247909:2,simpl,simple,2,https://root.cern,https://github.com/root-project/root/pull/10826#issuecomment-1167247909,2,['simpl'],['simple']
Usability,A simple workaround that does not involve modifying the TTimeStamp code is provided o the ROOT forum.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12569#issuecomment-1561019614:2,simpl,simple,2,https://root.cern,https://github.com/root-project/root/issues/12569#issuecomment-1561019614,2,['simpl'],['simple']
Usability,"A simpler reproducer, after digging what triggers the problem in the cppyy code:. ```python; # tree generated in C++; import ROOT. df = ROOT.RDataFrame('tree', 'file.root'); hist = df.Histo1D('x'). ROOT.gROOT.GetType(""std::string"") # this triggers the issue. print(hist.GetEntries()); ```. So it does not seem a PyROOT problem. @Axel-Naumann and perhaps @vgvassilev any comments on this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7169#issuecomment-776819414:2,simpl,simpler,2,https://root.cern,https://github.com/root-project/root/issues/7169#issuecomment-776819414,2,['simpl'],['simpler']
Usability,"A simpler reproducer, generating a tree with:. ```cpp; void generate_tree() {; TFile f(""file.root"", ""RECREATE"");; TTree t(""tree"", ""tree"");; std::string x(""foo"");; t.Branch(""x"", &x);; t.Fill();; f.Write();; f.Close();; }; ```. and then running:; ```python; # tree generated in C++; import ROOT. df = ROOT.RDataFrame('tree', 'file.root'); hist = df.Histo1D('x'). ROOT.std.string. print(hist.GetEntries()); ```. triggers the same error. The culprit here is the lookup of `std::string`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7169#issuecomment-776729215:2,simpl,simpler,2,https://root.cern,https://github.com/root-project/root/issues/7169#issuecomment-776729215,2,['simpl'],['simpler']
Usability,"A simpler reproducer:; ```bash; cd ./roottest/root/meta/cmsUnload/; make cleantest V=1. cat scripts/case3.script; ```. ```cpp; struct Marker { ~Marker() { fprintf(stdout,""dest\n""); } };; .L lib/libStrip.so ; Marker m2;; gInterpreter->AutoParse(""SiStripCluster"");; .undo 2; SiStripCluster obj;; ```. ```bash; root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundUnnamedIncorrectFileLoc"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -l -b < scripts/case3.script; ```. Currently this test fails for runtime_cxxmodules even though the change seems unrelated. It seems to me that failure is the right behavior. The script 'unloads' `gInterpreter->AutoParse(""SiStripCluster"");` and after that point the definition of `SiStripCluster` should not be available. ```; ROOT_prompt_6:1:16: error: variable has incomplete type 'SiStripCluster'; SiStripCluster obj;; ^; libStrip dictionary forward declarations' payload:5:132: note: forward declaration of 'SiStripCluster'; ...__attribute__((annotate(""$clingAutoload$SiStripCluster.h""))) SiStripCluster;; ^; ```. My suspicion is that the for the non-modules case we somehow fail to unload the definition of `SiStripCluster`. @pcanal, can you remember what exactly we were testing there?. PS: How the deserialization of the vtables of `TMVA::IPruneTool` makes the test succeeds is a complete",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2852#issuecomment-433640932:2,simpl,simpler,2,https://root.cern,https://github.com/root-project/root/pull/2852#issuecomment-433640932,4,"['simpl', 'undo']","['simpler', 'undo']"
Usability,"A soft-break would require the effort of fixing the wild card import just to drop it afterwards.... There is a structural problem with Python 3.11 that prevents the wildcard import with the lazy lookup to work. Upstream CPyCppyy dropped that feature even:; https://github.com/wlav/CPyCppyy/commit/64fd89050a66bf8cb119f236cadd365efa07b005; Quote:; > As of py3.11, there is no longer a lookup function pointer in the dict object to replace. Since this feature is not widely advertised, it's simply droped. The dropped `SetCppLazyLookup()` function is exactly the one we used for `from ROOT import *`.; https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_facade.py#L162. @vepadulano, given this new information that it will never work with Python 3.11 onward, maybe we should remove the code path for `import ROOT *`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7669#issuecomment-1926805717:489,simpl,simply,489,https://root.cern,https://github.com/root-project/root/issues/7669#issuecomment-1926805717,2,['simpl'],['simply']
Usability,"A workaround has been introduced in xrootd and will be part of xrootd-5.3.1 release. See above referenced issue in xrootd repo. Similar workaround has already been there for XrdCl::File destruction that is also happening after libXrdCl has been unloaded. @Axel-Naumann do you think it's worth introducing something like TROOT::CleanupLeftovers() and call it from TApplication::Terminate() just before calling gSystem->Exit()? The same function can still be called from ~TROOT for cases when TApplication is not instantiated ... and if it is called beforehand, the lists will simply be empty at ~TROOT time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8767#issuecomment-889666524:575,simpl,simply,575,https://root.cern,https://github.com/root-project/root/issues/8767#issuecomment-889666524,2,['simpl'],['simply']
Usability,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5360-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77596/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77596/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77596/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77596/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5360#issuecomment-617094622:384,simpl,simple,384,https://root.cern,https://github.com/root-project/root/pull/5360#issuecomment-617094622,4,['simpl'],['simple']
Usability,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5395-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77548/console).; ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77548/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77548/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77548/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5395#issuecomment-617046782:882,simpl,simple,882,https://root.cern,https://github.com/root-project/root/pull/5395#issuecomment-617046782,4,['simpl'],['simple']
Usability,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5411-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77564/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77564/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77564/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77564/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5411#issuecomment-617073790:384,simpl,simple,384,https://root.cern,https://github.com/root-project/root/pull/5411#issuecomment-617073790,4,['simpl'],['simple']
Usability,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5412-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/console).; ### Warnings:; - [2020-04-21T09:26:20.442Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/root/math/foam/test/testTFoam.cxx:14:23: warning: unused parameter 'nDim' [-Wunused-parameter] . ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77580/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5412#issuecomment-617073738:1087,simpl,simple,1087,https://root.cern,https://github.com/root-project/root/pull/5412#issuecomment-617073738,4,['simpl'],['simple']
Usability,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5412-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77620/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77620/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77620/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77620/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5412#issuecomment-617160440:384,simpl,simple,384,https://root.cern,https://github.com/root-project/root/pull/5412#issuecomment-617160440,4,['simpl'],['simple']
Usability,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5413-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77588/console).; ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77588/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77588/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77588/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5413#issuecomment-617085149:882,simpl,simple,882,https://root.cern,https://github.com/root-project/root/pull/5413#issuecomment-617085149,4,['simpl'],['simple']
Usability,AXEL DEBUG: null workspace; Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5415-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77612/console).; ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77612/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77612/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77612/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5415#issuecomment-617102090:882,simpl,simple,882,https://root.cern,https://github.com/root-project/root/pull/5415#issuecomment-617102090,4,['simpl'],['simple']
Usability,"About drawing with two axes. . Web graphics supports drawing of axes on both sides.; Therefore one can simplify drawing just doing:; ```; graph->Draw(""APL"");; graphPerCore->Draw(""PLX+Y+"");; ```. No need for extra transparent pads, no need for axis drawing emulation.; I attach macro and produced output. Also see `graph->GetXaxis()->SetNdivisions(nodes.size());` - as many divisions are required. [scaling_new.C.txt](https://github.com/root-project/root/files/12724374/scaling_new.C.txt); [scaling_new.pdf](https://github.com/root-project/root/files/12724375/scaling_new.pdf)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13707#issuecomment-1734979113:103,simpl,simplify,103,https://root.cern,https://github.com/root-project/root/issues/13707#issuecomment-1734979113,2,['simpl'],['simplify']
Usability,"About naming: although `std::strtok` does a simple string splitting, tokenization is often understood as a more complex operation than string splitting, involving some lexing, see e.g. https://docs.python.org/3/library/tokenize.html (vs the simple Python string split mentioned above) and https://github.com/ArashPartow/lexertk . I would suggest to just call this `Split`, if other people share this ""tokenizing sounds more complex than just splitting"" feeling.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8807#issuecomment-895069093:44,simpl,simple,44,https://root.cern,https://github.com/root-project/root/issues/8807#issuecomment-895069093,4,['simpl'],['simple']
Usability,"Actually it worked for you because you centred the X title. In the previous macro, remove the X title centring and go to log scale in Y and you will get the problem you discovered. So that's not a regression. The bug fix simply revealed a problem (?) which was hidden by the bug generated by the X title centring. To make it short, with a ROOT version without the patch, try:; ```; {; auto c1 = new TCanvas(""c1"",""multigraph"",700,500);; c1->SetGrid();; auto *mg = new TMultiGraph();; std::vector<double> x1;; std::vector<double> sig1;; std::vector<double> sig2;; for (double E=1e-4;E<2e7;E*=1.1) {; x1.push_back(E);; sig1.push_back(10*pow(E,-0.1));; sig2.push_back(15*pow(E,-0.15));; }; auto g1 = new TGraph(x1.size(), x1.data(), sig1.data());; mg->Add(g1);; auto g2 = new TGraph(x1.size(), x1.data(), sig2.data());; mg->Add(g2);; mg->SetTitle(""; E (eV);#sigma (b)"");; mg->Draw(""AL"");; gPad->Update();; c1->SetLogy();; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9011#issuecomment-957859532:221,simpl,simply,221,https://root.cern,https://github.com/root-project/root/issues/9011#issuecomment-957859532,2,['simpl'],['simply']
Usability,Actually my apologies ... changing the default seems to warrant its own commit so that it is clearly marked/seen in short git logs.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4839#issuecomment-577677791:93,clear,clearly,93,https://root.cern,https://github.com/root-project/root/pull/4839#issuecomment-577677791,2,['clear'],['clearly']
Usability,"Actually, I found the old behaviour of root just ignoring unknown options extremely useful.; It allowed users to simply add their own command line options and parsing them in `.rootlogon.C`; A simple example I have been using for 15+ years:; ```; 	int argc = gApplication->Argc();; 	char** argv = gApplication->Argv();; 	for (int i=1; i<argc; i++) {; 		TString arg = argv[i];; 		if (arg == ""--browser"") {; 			new TBrowser();; 		}; 	}; ```. I can see the the arguments for the recent change, nevertheless I would very much like to keep the old behaviour.; My suggestion would be to add a command line option `--ignore-unknown`, after which all unknown options are ignored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8850#issuecomment-1079188278:113,simpl,simply,113,https://root.cern,https://github.com/root-project/root/issues/8850#issuecomment-1079188278,4,['simpl'],"['simple', 'simply']"
Usability,"Actually, I think that the correct behavior should be to clear the undo history after accepting a new input line (which also follows what GNU-readline does).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10182#issuecomment-1073909757:57,clear,clear,57,https://root.cern,https://github.com/root-project/root/issues/10182#issuecomment-1073909757,4,"['clear', 'undo']","['clear', 'undo']"
Usability,"Actually, I tried moving the target_include_directories after and it doesn't work. Either that was broken by some more recent commit or it didn't work before, but we didn't notice any problem. Something that needs to be debugged, because I did try to make the properties be usable even when the target_include_directories command is added later. Maybe it's something that only works within ROOT?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8308#issuecomment-856013049:274,usab,usable,274,https://root.cern,https://github.com/root-project/root/issues/8308#issuecomment-856013049,2,['usab'],['usable']
Usability,"Actually, it's probably not a good idea to introduce this progress bar, because it will break the logging to files, which is done a lot in batch jobs. Hence, I close this PR, which is superseded by another PR:; * https://github.com/root-project/root/pull/14309",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10509#issuecomment-1881730104:58,progress bar,progress bar,58,https://root.cern,https://github.com/root-project/root/pull/10509#issuecomment-1881730104,2,['progress bar'],['progress bar']
Usability,"Ad 1) With all the other modifications, I think in the end it is just simpler to build all the fields upfront. We'd save a bit of memory doing it on demand, but it will possibly take a little longer because we need to traverse the schema tree more often (for every leaf, we have to figure out again what are the parents). Ad 2) I'm fine with a squash on merge. I'd prefer not to squash individual commits, it's a long history and a partial rewrite will get it as wrong as the full history. Let me know if you like the squash commit over the rebase.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6700#issuecomment-797527506:70,simpl,simpler,70,https://root.cern,https://github.com/root-project/root/pull/6700#issuecomment-797527506,2,['simpl'],['simpler']
Usability,Added also possibility to set gpu_options. ; Added options `session.gpu_options.allow_growth= True` neded for running cuDNN on new RTX cards; See https://www.tensorflow.org/guide/using_gpu#allowing_gpu_memory_growth ; and solution described here for RTX cards: ; https://github.com/tensorflow/tensorflow/issues/24496,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2566#issuecomment-460601891:173,guid,guide,173,https://root.cern,https://github.com/root-project/root/pull/2566#issuecomment-460601891,2,['guid'],['guide']
Usability,"Added tests for the C++ mechanisms, and attempt at fixing the ubuntu18 failure (see last commit) with a much more simplified approach w.r.t. https://github.com/root-project/root/pull/12981, which should not be needed anymore (let's see what the CI thinks).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12363#issuecomment-1585596942:114,simpl,simplified,114,https://root.cern,https://github.com/root-project/root/pull/12363#issuecomment-1585596942,2,['simpl'],['simplified']
Usability,"Additional mention of the original issue (chained lookups): https://developer.apple.com/forums/thread/719961, https://github.com/python/cpython/issues/97524 ; and https://openradar.appspot.com/radar?id=5536824084660224. Instead of `-Wl,-w` (which suppress all warnings), an undocumented options seems to be `-Xlinker -no_fixup_chains` (humm I guess actually maybe `-Wl,-no_fixup_chains`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12045#issuecomment-1385813529:274,undo,undocumented,274,https://root.cern,https://github.com/root-project/root/pull/12045#issuecomment-1385813529,2,['undo'],['undocumented']
Usability,"After discussion, we decided to go back to the original simpler design for this PR, which effectively accounts for the following usecase: user wants to open a file, write some stuff to it or read objects and get information from them, in an ""encapsulated"" environment, finally closing the file. The ROOT objects attached to the file will be `None`ified at the end of the context, but they can be detached with the `SetDirectory` method. The other use case imagined, where a user wants to `cd` into some file to get objects from it and then let those objects survive while returning to the previous directory, is addressed by #10167 . Notably, that behaviour will keep the file alive, so that also the special objects like TTree and RNTuple can properly survive the `with` context",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9947#issuecomment-1072702588:56,simpl,simpler,56,https://root.cern,https://github.com/root-project/root/pull/9947#issuecomment-1072702588,2,['simpl'],['simpler']
Usability,"After more investigation, it is less clear to me how the valgrind report and the `AddDataset` function are related. Still, the logic of the function seems faulty any way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14433#issuecomment-1910477019:37,clear,clear,37,https://root.cern,https://github.com/root-project/root/issues/14433#issuecomment-1910477019,2,['clear'],['clear']
Usability,After positive feedback from user I merging this PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7885#issuecomment-841061484:15,feedback,feedback,15,https://root.cern,https://github.com/root-project/root/pull/7885#issuecomment-841061484,2,['feedback'],['feedback']
Usability,"After some investigation, it seems this issue is due to the priority level assigned to the two overloads. Specifically, the logic at https://github.com/root-project/root/blob/896940ef8c0936ad394a1cf6b98d1d8fbaabbfff/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx#L408-L412. seems to aim at assigning higher priority to class types that have a deeper inheritance chain. In the reproducer above, this should translate to class `B` having priority 1 (because it has 1 base class `A`) and class `C` having priority 2 (because it has 2 base classes `A,B`). The function this logic relies on ([GetNumBases](https://github.com/root-project/root/blob/87a998d48803bc207288d90038e60ff148827664/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1212)) in turn calls [TClass::GetListOfBases](https://github.com/root-project/root/blob/87a998d48803bc207288d90038e60ff148827664/core/meta/src/TClass.cxx#L3620) which does not return all the bases in the full inheritance chain of the class, rather just the direct bases of a class. So in this case:; ```; >>> import ROOT; >>> ROOT.gInterpreter.Declare(; ... '''; ... class A {};; ... class B: public A {};; ... class C: public B {};; ... '''); True; >>> c = ROOT.TClass.GetClass(""C""); >>> b = ROOT.TClass.GetClass(""B""); >>> len(c.GetListOfBases()); 1; >>> len(b.GetListOfBases()); 1; ```. In this case, if TClass:GetListOfBases returned a list of size 2 for class `C`, the correct overload would get assigned a higher priority and thus would be chosen at runtime. There is no clear general solution, but it is worth highlighting the cause of the issue",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8817#issuecomment-897023454:1533,clear,clear,1533,https://root.cern,https://github.com/root-project/root/issues/8817#issuecomment-897023454,2,['clear'],['clear']
Usability,"Ah that makes sense. Extending the defintion of strings to add metadata to paths (globbing, the `#` syntax in `TFile::Open`, ...) is always going to be error prone. > but probably we want to have a more authoritative list of all the tokens that should make the file name not be parsed as a glob. This feels like an impossible task to define. Maybe a simplier solution would be to not support `?` when globbing and only apply globbing to the text before the query string? Or maybe just have a dedicated method (or argument type) for creating a RDataFrame from a glob rather than relying on huristics?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16475#issuecomment-2366982360:350,simpl,simplier,350,https://root.cern,https://github.com/root-project/root/issues/16475#issuecomment-2366982360,2,['simpl'],['simplier']
Usability,"Ah, no, actually that first part can also be non-increasing, for instance if the reception of tasks on the queue for some reason pauses half way through, so e.g. you could get:; 1 [ reception pauses on queue here ]; 0 [ reception continues now, 2 comes in ]; 2 [ while executing 2, everything else is received ]; 9; 8; 7; 6; ... And that is still valid. I will just push one more update with a refactoring to not have this complicated expectation correction code duplicate.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11627#issuecomment-1330826120:129,pause,pauses,129,https://root.cern,https://github.com/root-project/root/pull/11627#issuecomment-1330826120,4,['pause'],['pauses']
Usability,"Ah, one more thing before merging: could you perhaps squash your two commits? Unless there's a clear motivation to keep them separate, but it appears to be both are related to schema compliance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14690#issuecomment-1943375342:95,clear,clear,95,https://root.cern,https://github.com/root-project/root/pull/14690#issuecomment-1943375342,2,['clear'],['clear']
Usability,"All comments above have been implemented, the code simplified and better commented.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2518#issuecomment-426547221:51,simpl,simplified,51,https://root.cern,https://github.com/root-project/root/pull/2518#issuecomment-426547221,2,['simpl'],['simplified']
Usability,All feedback integrated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3746#issuecomment-487528334:4,feedback,feedback,4,https://root.cern,https://github.com/root-project/root/pull/3746#issuecomment-487528334,2,['feedback'],['feedback']
Usability,"All green now, besides an unrelated failure that @egpbos should learn about",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15376#issuecomment-2099245931:64,learn,learn,64,https://root.cern,https://github.com/root-project/root/pull/15376#issuecomment-2099245931,2,['learn'],['learn']
Usability,All this circling to end up with a simplified TPoolManager,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5582#issuecomment-638329846:35,simpl,simplified,35,https://root.cern,https://github.com/root-project/root/pull/5582#issuecomment-638329846,2,['simpl'],['simplified']
Usability,"Alright, I think I understand what's going on (even though it's not fully clear to me why the story changes to an error in C++20): `REntry::GetPtr<T>` instantiates `RField<T>::TypeName()` to check the type name and despite the `if constexpr (std::is_void_v<T>)` check, it seems the compiler does ""something"" with `RField<void>`. In this PR, as mentioned above, the base class destructor changes to `virtual ~RFieldBase() = default;` in the header so the compiler sees it and apparently tries to instantiate also `GenerateValue`. There are a couple of solutions: First we can move `~RFieldBase()` back into the source file:; ```diff; diff --git a/tree/ntuple/v7/inc/ROOT/RField.hxx b/tree/ntuple/v7/inc/ROOT/RField.hxx; index deb9d5f4a3..cd0b5dd89e 100644; --- a/tree/ntuple/v7/inc/ROOT/RField.hxx; +++ b/tree/ntuple/v7/inc/ROOT/RField.hxx; @@ -570,7 +570,7 @@ public:; RFieldBase(RFieldBase&&) = default;; RFieldBase& operator =(const RFieldBase&) = delete;; RFieldBase& operator =(RFieldBase&&) = default;; - virtual ~RFieldBase() = default;; + virtual ~RFieldBase();; ; /// Copies the field and its sub fields using a possibly new name and a new, unconnected set of columns; std::unique_ptr<RFieldBase> Clone(std::string_view newName) const;; diff --git a/tree/ntuple/v7/src/RField.cxx b/tree/ntuple/v7/src/RField.cxx; index ef04fec76c..41d4962ac5 100644; --- a/tree/ntuple/v7/src/RField.cxx; +++ b/tree/ntuple/v7/src/RField.cxx; @@ -410,6 +410,10 @@ ROOT::Experimental::RFieldBase::RFieldBase(std::string_view name, std::string_vi; {; }; ; +ROOT::Experimental::RFieldBase::~RFieldBase(); +{; +}; +; std::string ROOT::Experimental::RFieldBase::GetQualifiedFieldName() const; {; std::string result = GetFieldName();; ```. Alternatively it helps to switch the `if constexpr` around to avoid the compiler instantiate the `RField<void>`:; ```diff; diff --git a/tree/ntuple/v7/inc/ROOT/REntry.hxx b/tree/ntuple/v7/inc/ROOT/REntry.hxx; index 1f3ec47095..b7b70b24cb 100644; --- a/tree/ntuple/v7/inc/ROOT/RE",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14468#issuecomment-1916371964:74,clear,clear,74,https://root.cern,https://github.com/root-project/root/pull/14468#issuecomment-1916371964,2,['clear'],['clear']
Usability,"Alright, I'm building a simpler reproducer then! Good to have one anyway for a unit test. Strange, at least getting a pointer to the workspace works for me also without the ATLAS RooFit extensions (indeed, the workspace contains some custom ATLAS classes)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10282#issuecomment-1085634160:24,simpl,simpler,24,https://root.cern,https://github.com/root-project/root/issues/10282#issuecomment-1085634160,2,['simpl'],['simpler']
Usability,"Alright, issue was cleared by @etejedor and I was able to put in a test that works around it.; I think this can be merged if jenkins is green.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1857#issuecomment-381656522:19,clear,cleared,19,https://root.cern,https://github.com/root-project/root/pull/1857#issuecomment-381656522,2,['clear'],['cleared']
Usability,"Alright, so the only test failing is `roottest/dataframe/test_glob.C`. It is not clear to me why the interpreter does not find methods like `TDataFrameImpl::Book`. Changing roottest to pass `test_glob.C+` rather than `test_glob.C` solves the problem on my machines. That is actually how the other macros are processed in `roottest/root/dataframe`. I am not sure whether this is expected behavior, so I am not sure how to proceed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/423#issuecomment-286704453:81,clear,clear,81,https://root.cern,https://github.com/root-project/root/pull/423#issuecomment-286704453,1,['clear'],['clear']
Usability,"Alright, thank you very much! That's very nice you chose ROOT to contribute to!. If you need any guidance on what you could help with, just ask me. Sometimes it's not easy to find the issues that are actually easy to work on, as the code is quite complex. Are you looking only Python-related issues, or would you also be interested in doing some C++ contributions to beef up your C++ skills and experience?. As for this PR, I'll merge it if the CI bot tests pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10853#issuecomment-1170576376:97,guid,guidance,97,https://root.cern,https://github.com/root-project/root/pull/10853#issuecomment-1170576376,2,['guid'],['guidance']
Usability,"Alright, thanks again for the feedback!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12653#issuecomment-1507275282:30,feedback,feedback,30,https://root.cern,https://github.com/root-project/root/issues/12653#issuecomment-1507275282,2,['feedback'],['feedback']
Usability,"Alright, thanks for all the details and clarifications. Let me try to bring this PR a conclusion.; The original question was: is it right, at least for the usecases of the function `GetFriendInfo`, to retrieve the name of any friend chain via the following?; ```; const auto *realName = chainFiles->First()->GetName();; ```; Let me try to make (simple) examples of tree/chain friends and how RDataFrame deals with them. Let's say my final goal is to have this dataset. | parent.x | friend.x |; |----------|----------|; | 0 | 0 |; | 1 | 1 |; | 2 | 2 |; | 3 | 3 |; | 4 | 4 |; | 5 | 5 |; | 6 | 6 |; | 7 | 7 |; | 8 | 8 |. I can do that through:; 1. Two TTrees, each with 9 entries, each saved to one single file.; 2. Two TChains, each chain has 9 total entries, each chain is made of three files, each file has internally one TTree with 3 entries.; 3. One TTree with 9 entries saved to one file, plus one TChain with 9 total entries, three files each with a TTree with 3 entries. In each scenario I will create the datasets, read the files back, add one of the two datasets as a friend to the other. Finally, I will try to print the columns both with `TTree::Print` and rdf's `Display`. Plus, I will also use `TTree::Scan` to get more information on the internal structure of the tree and its friend. # Case 1; This is the code I use to recreate the scenario. ```cpp; void write_tree(std::string_view filename, std::string_view treename); {; int x{};. TFile file{filename.data(), ""recreate""};; TTree tree{treename.data(), ""test friend trees""};; tree.Branch(""x"", &x, ""x/I"");. for (int i = 0; i < 9; i++); {; x = i;; tree.Fill();; }; tree.Write();; }; ; int main(){; write_tree(""treeparent.root"", ""treeparent"");; write_tree(""treefriend.root"", ""treefriend"");; TFile parentfile{""treeparent.root"", ""read""};; TFile friendfile{""treefriend.root"", ""read""};. std::unique_ptr<TTree> parenttree{parentfile.Get<TTree>(""treeparent"")};; std::unique_ptr<TTree> friendtree{friendfile.Get<TTree>(""treefriend"")};. parenttree",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7785#issuecomment-816500613:345,simpl,simple,345,https://root.cern,https://github.com/root-project/root/pull/7785#issuecomment-816500613,2,['simpl'],['simple']
Usability,"Alright, thanks for all the feedback! I think that it will be better to break this PR into smaller pieces, so I will close this one, rework the commits according to the feedback received, and push new PRs soon.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/709#issuecomment-313038913:28,feedback,feedback,28,https://root.cern,https://github.com/root-project/root/pull/709#issuecomment-313038913,2,['feedback'],['feedback']
Usability,"Also I am confused about the fact that `TBranch::GetEntriesSerialized` will simply ignore destructive DeserializeType as well. ```; 1512 if (R__unlikely(leaf->GetDeserializeType() == TLeaf::DeserializeType::kDestructive)) {; 1513 Error(""GetEntriesSerialized"", ""Encountered a branch with destructive deserialization; failing.\n"");; 1514 return -1;; ```. so my question remains: how can I bulk read a bunch of `int`s?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6520#issuecomment-703566990:76,simpl,simply,76,https://root.cern,https://github.com/root-project/root/issues/6520#issuecomment-703566990,2,['simpl'],['simply']
Usability,Also simply running `rline.cxx` macro in the docker also works.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14750#issuecomment-1953657976:5,simpl,simply,5,https://root.cern,https://github.com/root-project/root/pull/14750#issuecomment-1953657976,2,['simpl'],['simply']
Usability,"Am skeptical this could ever have worked even in older releases, because looking at the code I see the method ""MakeSingleChannelWorkspace"" where the measurement object is passed, and therefore it is assuming any parameter in the constant list *must* be present in the channel???. Tomas do you get the same error message about ""cannot find the variable"" in 6.28, but it succeeds? It might be blind luck that it did. . If so the fix is a simple one to just skip over said variable if its not found in the channel.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14225#issuecomment-1858155447:436,simpl,simple,436,https://root.cern,https://github.com/root-project/root/issues/14225#issuecomment-1858155447,2,['simpl'],['simple']
Usability,"Amadio: I removed const and variable name in catches when just rethrowing the initial exception.; About splitting the patch, I don't know how to do this simply without redoing the whole stuff.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1435#issuecomment-350868297:153,simpl,simply,153,https://root.cern,https://github.com/root-project/root/pull/1435#issuecomment-350868297,2,['simpl'],['simply']
Usability,"An even simpler example which doesn't depend on RDF:. ```python; import ROOT. ret = ROOT.gInterpreter.Declare('#include ""test.h""'). print(""declare ret"", ret). print(""creating helper""); helper = ROOT.Helper[ROOT.std.vector[""double""]](). res = ROOT.call_helper(helper); print(res); ```. test.h:; ```cpp; template <typename T>; class Helper {. public:. Helper() {}. std::size_t operator() () const {; const std::size_t res = 0;; res = T{0, 0}.size();; return res;; }. };. template <typename H>; std::size_t call_helper(const H &helper) {; return helper();; }; ```. Output (again with centos stream 8, root 6.26/10):; ```; declare ret True; creating helper; IncrementalExecutor::executeFunction: symbol '_ZNK6HelperISt6vectorIdSaIdEEEclEv' unresolved while linking symbol '__cf_11'!; You are probably missing the definition of Helper<std::vector<double, std::allocator<double> > >::operator()() const; Maybe you need to load the corresponding shared library?; 18446744073709551615; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11854#issuecomment-1341802449:8,simpl,simpler,8,https://root.cern,https://github.com/root-project/root/issues/11854#issuecomment-1341802449,2,['simpl'],['simpler']
Usability,"And also, apologies for this, should we rename TCutInfo to RCutInfo before making it writeable? I think we simply forgot to rename that ancillary class when TDataFrame was renamed into RDataFrame...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14833#issuecomment-1965918042:107,simpl,simply,107,https://root.cern,https://github.com/root-project/root/pull/14833#issuecomment-1965918042,2,['simpl'],['simply']
Usability,"And for this I think the problem is ""just"" the checks on ```TClass::IsLoaded()``` at. https://github.com/root-project/root/blob/702e1ee22ce472508d0ab2de7f51b85e6613b55d/io/io/src/TStreamerInfo.cxx#L384; https://github.com/root-project/root/blob/702e1ee22ce472508d0ab2de7f51b85e6613b55d/io/io/src/TStreamerInfo.cxx#L580; https://github.com/root-project/root/blob/702e1ee22ce472508d0ab2de7f51b85e6613b55d/io/io/src/TStreamerInfo.cxx#L592. Since the state of the TClass object is ```kInterpreted``` in this case. Not sure what the best solution here is. On the one hand being able to persist interpreted classes is extremely useful (especially for the case of templates which are only instantiated from PyROOT), but it's also clear that one can shoot themselves in the foot here if the interpreted class changes in a way that breaks the IO.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9371#issuecomment-997467808:723,clear,clear,723,https://root.cern,https://github.com/root-project/root/issues/9371#issuecomment-997467808,2,['clear'],['clear']
Usability,"And maybe @couet can give feedback too, since this is related to hbook/PAW (if I remember correctly)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1643#issuecomment-366731539:26,feedback,feedback,26,https://root.cern,https://github.com/root-project/root/pull/1643#issuecomment-366731539,2,['feedback'],['feedback']
Usability,"And one more thing: if it's not hard for users, maybe a recipe could be added to THtml (or to the page with all reference guides) on how to generate ROOT documentation using `doxygen`?; UPD: found the recipe https://root.cern/for_developers/doxygen/#how-to-generate-the-doxygen-documentation",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7295#issuecomment-787077972:122,guid,guides,122,https://root.cern,https://github.com/root-project/root/issues/7295#issuecomment-787077972,2,['guid'],['guides']
Usability,And we need some feedback on performance of this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1242#issuecomment-344890377:17,feedback,feedback,17,https://root.cern,https://github.com/root-project/root/pull/1242#issuecomment-344890377,2,['feedback'],['feedback']
Usability,"And what about something simpler and faster to execute (no need for a TGraph2D) moreover with this new version the peaks appears much better on the 3D view. ```; /// \file; /// \ingroup tutorial_graphics; /// \notebook; /// Plot the Amplitude of a Hydrogen Atom.; ///; /// Visualize the Amplitude of a Hydrogen Atom in the n = 2, l = 0, m = 0 state.; /// Demonstrates how TH2F can be used in Quantum Mechanics.; ///; /// \macro_image; /// \macro_code; ///; /// \author Advait Dhingra. #include <cmath>. double WaveFunction(double x, double y) {; double r = sqrt(x *x + y*y);. double w = (1/pow((4*sqrt(2*TMath::Pi())* 1), 1.5)) * (2 - (r / 1)*pow(TMath::E(), (-1 * r)/2)); // Wavefunction formula for psi 2,0,0. return w*w; // Amplitude. }. void schroedinger_hydrogen() {; TH2F *h2D = new TH2F(""Hydrogen Atom"",; ""#Psi^{2}_{200} i.e. n = 2, l = 0, m = 0; Position in x direction; Position in y direction"",; 200, -10, 10, 200, -10, 10);. for (float i = -10; i < 10; i += 0.01) {; for (float j = -10; j < 10; j += 0.01) {; h2D->Fill(i, j, WaveFunction(i, j));; }; }. gStyle->SetPalette(kCividis);; gStyle->SetOptStat(0);. TCanvas *c1 = new TCanvas(""c1"", ""Schroedinger's Hydrogen Atom"", 1500, 750);; c1->Divide(2, 1);. auto c1_1 = c1->cd(1);; c1_1->SetRightMargin(0.14);; h2D->GetXaxis()->SetLabelSize(0.03);; h2D->GetYaxis()->SetLabelSize(0.03);; h2D->GetZaxis()->SetLabelSize(0.03);; h2D->SetContour(50);; h2D->Draw(""colz"");. TLatex *l = new TLatex(-10, -12.43, ""The Electron is more likely to be found in the yellow areas and less likely to be found in the blue areas."");; l->SetTextFont(42);; l->SetTextSize(0.02);; l->Draw();. auto c1_2 = c1->cd(2);; c1_2->SetTheta(42.);. TH2D *h2Dc = (TH2D*)h2D->Clone();; h2Dc->SetTitle(""3D view of probability amplitude;;"");; h2Dc->Draw(""surf2"");; }; ```. If you agree I let you commit this new version. I made several cosmetics changes also.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7801#issuecomment-816540524:25,simpl,simpler,25,https://root.cern,https://github.com/root-project/root/pull/7801#issuecomment-816540524,2,['simpl'],['simpler']
Usability,"And what we've learned from the past 15 years: ""modularization"" means 100 different things, and not the same for any pair of people talking about it :-) Which is why I use the term ""lazy building"" for your ""build parts of ROOT later"" and you could use ""libdep"" or ""builddep"" for reducing or fixing/formalizing the library or build dependencies. Or ""incldep"" for header/including dependencies. Just a couple of ideas, I'm not suggesting that you should follow them (this is not a PR review)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2425#issuecomment-410166279:15,learn,learned,15,https://root.cern,https://github.com/root-project/root/pull/2425#issuecomment-410166279,2,['learn'],['learned']
Usability,"And when building with gcc and only asan like:; ```; cmake -DCMAKE_BUILD_TYPE=""Release"" -Dasan=ON -Dtesting=ON -DPYTHON_EXECUTABLE=/usr/bin/python3 /home/linev/git/webgui ; ```; I getting failure by simply starting ROOT: . ```; ==11405==ERROR: AddressSanitizer: use-after-poison on address 0x621000160c68 at pc 0x7fae6dbe9aa1 bp 0x7fff179941b0 sp 0x7fff179941a8; READ of size 8 at 0x621000160c68 thread T0; #0 0x7fae6dbe9aa0 in clang::LookupResult::configure() (/home/linev/build/asan/lib/libCling.so+0x9be9aa0) (BuildId: b992d84f780d9cdfaac57feecd814f7d11e56300); #1 0x7fae66c6d0ec in clad::plugin::CladPlugin::CheckBuiltins() [clone .part.0] (/home/linev/build/asan/lib/libCling.so+0x2c6d0ec) (BuildId: b992d84f780d9cdfaac57feecd814f7d11e56300); ```. Full error output: [start_log.txt](https://github.com/root-project/root/files/10519690/start_log.txt)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11629#issuecomment-1406573290:199,simpl,simply,199,https://root.cern,https://github.com/root-project/root/issues/11629#issuecomment-1406573290,2,['simpl'],['simply']
Usability,"Another ""simple"" approach to compile ROOT is specify `-Droot7=OFF`. This will disable eve7 compilation which has such problem with forward declarations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11130#issuecomment-1218228421:9,simpl,simple,9,https://root.cern,https://github.com/root-project/root/issues/11130#issuecomment-1218228421,2,['simpl'],['simple']
Usability,"Another minor related point:; ```; - TH1F *test = new TH1F(""test"",""This is test histogram"",100,-4,4);; + auto test = RDirectory::Heap().Create<TH1F>(""test"", ""test"",""This is test histogram"",100,-4,4);; ```; I guess this gives us what, a TH1F*? (auto doesn't add clarity); Isn't it better to use the base class?; ```; TH1 *test = RDirectory::Heap().Create<TH1F>(""test"", ""test"",""This is test histogram"",100,-4,4);; ```; assuming that works, or if not, this does:; ```; unique_ptr<TH1> test; ; void the_routine () {; //...; test.reset(new TH1F());; }; ```; This is something that I find not well documented in the past. The old docs point out that TH1F is derived from TH1, but what wasn't always clear to this non-expert was that after creation it seems you can cast to TH1 without loss of any functionality, and functions taking TH1 pointers have the advantage of working on all TH1-derivatives. Building this concept into the standard examples could be helpful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7305#issuecomment-789295272:693,clear,clear,693,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-789295272,2,['clear'],['clear']
Usability,"Another very simple example, less serious because at least it fails, but still problematic because it makes debugging very difficult. test.h:; ```cpp; template <typename T>; int some_template_function(const T &x) {; return x.size();; }; ```. test.py:; ```python; import ROOT. ret = ROOT.gInterpreter.Declare('#include ""test.h""'). print(""declare ret"", ret). res0 = ROOT.some_template_function(ROOT.std.vector[""double""]()); print(""res0"", res0). res1 = ROOT.some_template_function(0.0); print(""res1"", res1); ```. output:; ```; declare ret True; res0 0; Traceback (most recent call last):; File ""/home/b/bendavid/pyrootdebug2/test.py"", line 10, in <module>; res1 = ROOT.some_template_function(0.0); TypeError: Template method resolution failed:; int ::some_template_function(const vector<double>& x) =>; TypeError: could not convert argument 1; Failed to instantiate ""some_template_function(double)""; ```; ; Compare to the same in c++ ; ```; #include ""test.h"". const int res = some_template_function(0.0);; ```; ; Then the output of clang++ with nice error message is:; ```; In file included from test.cpp:1:; ./test.h:3:11: error: member reference base type 'const double' is not a structure or union; return x.size();; ~^~~~~; test.cpp:3:17: note: in instantiation of function template specialization 'some_template_function<double>' requested here; const int res = some_template_function(0.0);; ^; 1 error generated.; ```. So in the pyroot case all of the useful compiler errors are suppressed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11854#issuecomment-1410720055:13,simpl,simple,13,https://root.cern,https://github.com/root-project/root/issues/11854#issuecomment-1410720055,2,['simpl'],['simple']
Usability,Any feedback? @oshadura @bbockelm @pcanal @Axel-Naumann,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4037#issuecomment-508253313:4,feedback,feedback,4,https://root.cern,https://github.com/root-project/root/pull/4037#issuecomment-508253313,2,['feedback'],['feedback']
Usability,Any further feedback on this PR ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9629#issuecomment-1040393898:12,feedback,feedback,12,https://root.cern,https://github.com/root-project/root/pull/9629#issuecomment-1040393898,2,['feedback'],['feedback']
Usability,"Any plan when this can be addressed, at least for v6-26-00-patches? The LCG nightlies are not very usable at the moment.; Can I suggest to revet the patch for v6-26-00-patches and re-port it when it is fixed on the master ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9594#issuecomment-1017324188:99,usab,usable,99,https://root.cern,https://github.com/root-project/root/issues/9594#issuecomment-1017324188,2,['usab'],['usable']
Usability,"Apologies for joining the party only after it's over. My opinion:. `ptr` is fine because I don't see how (regular) people would notice / care *when* the cost occurs, this should be opaque to them. If they ever notice, they can be told and learn. `TTree::Draw()` sort of suffers from a similar mismatch of interface announcement (""register in the pad"") and runtime cost that `ptr` has in this case. And we survived. I find the argument convincing that `ptr`, unlike `handle`, conveys the usage: `handle` often means ""opaque thing that you don't know what to do with but someone else will"" and is thus not very helpful for interfaces. I find the usage cost for separating trigger and value access too high.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1855#issuecomment-381906840:239,learn,learn,239,https://root.cern,https://github.com/root-project/root/pull/1855#issuecomment-381906840,2,['learn'],['learn']
Usability,"Apparently, this is due to a flaw in the implementation of `RColumn::AppendV()` (whose only current user seems to be `RField<std::string>`). The following simple excerpt reproduces the problem:; ```c++; auto model = RNTupleModel::Create();; auto str = model->MakeField<std::string>(""str"");. RNTupleWriteOptions options;; options.SetApproxUnzippedPageSize(16);; {; auto ntuple = RNTupleWriter::Recreate(std::move(model), ""ntuple"", ""/tmp/out.ntuple"", options);; *str = ""01234567890123456789012"";; ntuple->Fill();; *str = ""012"";; ntuple->Fill();; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12742#issuecomment-1529137927:155,simpl,simple,155,https://root.cern,https://github.com/root-project/root/issues/12742#issuecomment-1529137927,2,['simpl'],['simple']
Usability,"Applying the patch causes a crash when cloning a `THnD`. Here is a simple code reproducing this:; ```; int bins[] = {10}; double xmin[] = {0}; double xmax[] = {10}; ; auto h = new THnD(""h"",""h"",1,bins,xmin,xmax);; h->Sumw2();; h->Clone();; ```. @pcanal , any idea what could be the problem ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11409#issuecomment-1255079351:67,simpl,simple,67,https://root.cern,https://github.com/root-project/root/pull/11409#issuecomment-1255079351,2,['simpl'],['simple']
Usability,"Are you talking about JSROOT or ROOT itself? And if it is ROOT, would that be really simpler than a single self-extracting executable?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7012#issuecomment-759308690:85,simpl,simpler,85,https://root.cern,https://github.com/root-project/root/issues/7012#issuecomment-759308690,2,['simpl'],['simpler']
Usability,"As @jalopezg-git mentioned, bool(foo) appears as a declaration (bool foo). The following simple C++ code also fails to compile with a re-declaration error and I think that should be the expected behavior.; ```C++; #include<iostream>; int main() {; int i = 54;; bool(i);; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8304#issuecomment-1943877354:89,simpl,simple,89,https://root.cern,https://github.com/root-project/root/issues/8304#issuecomment-1943877354,2,['simpl'],['simple']
Usability,"As I pointed out in https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=108747&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-108747 :. > we should keep ROOT7 graphics open enough for people to be able to write it themselves if they wish. Given that there is no way we will do this (we don't have the resources and this is simply not important enough) I'd suggest we close this?. That hasn't changed, which only leaves [this](https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=109658&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-109658) open for @linev . > Just to help potential users interested in implementing this drawing option, could you tell us in which classes the drawing is done in ROOT7?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6682#issuecomment-713430893:365,simpl,simply,365,https://root.cern,https://github.com/root-project/root/issues/6682#issuecomment-713430893,2,['simpl'],['simply']
Usability,"As I said we do not spend time on the users guide now. The .md files are still there though. So if someone is willing to do a valid PR on them we will considered it and merge it when finalised. So please convert this into is PR. And, once again, the User's guide is now frozen and not updated. It has never been update by the way. After the first writing developers did not put any new stuff in it. We found out that developers put the doc in the code. That why we choose doxygen which allow to produce the reference guide. Having a separated User's Guide often implies to duplicate the information with the risk of not being in sync. But we still need an entry point for people starting with ROOT. That is why we made the ""Manual"" which is still under development. The Manual has a much higher view that the reference Guide and helps to navigate into it. But it does not duplicate the information !! that's the key ! ... also, for beginners, we have the Primer also referenced from the web site.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7284#issuecomment-785870186:44,guid,guide,44,https://root.cern,https://github.com/root-project/root/issues/7284#issuecomment-785870186,8,"['Guid', 'guid']","['Guide', 'guide']"
Usability,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```; test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED; test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED; test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED; =============================== warnings summary ===============================; test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated; /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations; return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated; /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead.; from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html; ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13787#issuecomment-1744852013:1123,guid,guidance,1123,https://root.cern,https://github.com/root-project/root/pull/13787#issuecomment-1744852013,2,['guid'],['guidance']
Usability,"As a quick summary:; The only thing left in this PR is the addition of a `ROOT::Libraries` target, which provides a convenience target that mimics `${ROOT_LIBRARIES}` only with targets instead of a variable full of strings. The main three reasons to have it:. * A new user does not need to know whether they depend on `ROOT::Physics` or `ROOT::TreePlayer`, etc; * Adding required components to the `find_package` will also add them here, so no need to repeat yourself in simple packages; * It is not simple or trivial for an external CMake tool to build this target (Flags, for example, is a bit ugly to make, but it can be done). Advanced packages, like Geant, would not be expected to use the convenience target.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1959#issuecomment-387726565:471,simpl,simple,471,https://root.cern,https://github.com/root-project/root/pull/1959#issuecomment-387726565,4,['simpl'],['simple']
Usability,"As a side note, C++ already has a notion of onload so another option could be for the user to simply use:; ```; int anyfunction( .... ) { ... }; int execthefunctonload = anyfunction();; ```; (and on-unload can also be done (using a class destructor for example) but requires a bit more scaffolding)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11299#issuecomment-1235433090:94,simpl,simply,94,https://root.cern,https://github.com/root-project/root/issues/11299#issuecomment-1235433090,2,['simpl'],['simply']
Usability,"As a side note, the feature of ""snapshot merging""/""peeping at results in the making"" is something we had already in the first implementation of TThreadedObject (see https://root.cern/doc/master/mt201__parallelHistoFill_8C.html). This was a rudimental building block, which needed the user to asynchronously invoke a method. I see this functionality as something quite interesting. In general, ""callbacks""/""hooks"" of different sorts are a fundamental piece of data processing frameworks of which TDF is de facto an example. I welcome this feature warmly, also when thinking about the direction we have taken with the datasource, which consists in giving users the possibility to customise the usage of TDF according to their needs - we provide a rocksolid platform to solve their problems in an optimised way. A Crazy (?) example: right now we would be able to:; - Write a datasource that reads measurements coming from an oscilloscope/simple detector; - TDF loops and processes these measurements; - Histograms are produced, among other kind of data, and shown while refreshing in real time; - A file with the data acquired and manipulated is produced",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1037#issuecomment-331348710:935,simpl,simple,935,https://root.cern,https://github.com/root-project/root/pull/1037#issuecomment-331348710,2,['simpl'],['simple']
Usability,"As said in the forum, this can be reproduced doing a simple zoom on the X axis of a THStack plot.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6991#issuecomment-755354821:53,simpl,simple,53,https://root.cern,https://github.com/root-project/root/issues/6991#issuecomment-755354821,2,['simpl'],['simple']
Usability,"As suggested by Philippe, there is no reason to have genData returning a const pointer, since the class ; contains non-const pointer to RooAbsData. ; I would go for the simplest solution and change the function to be . RooAbsData * RooMCStudy::genData	(Int_t 	sampleNum	)	const. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1721#issuecomment-375732063:169,simpl,simplest,169,https://root.cern,https://github.com/root-project/root/pull/1721#issuecomment-375732063,2,['simpl'],['simplest']
Usability,"As we saw this should not be needed; ruby was deprecated *for* 6.16, I simply failed to remove it properly in 362b7d82e7914d5bdbd93b505f21dca16b158d18. I suggest we close this, and we create a PR that rips out the remainders of ruby?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3133#issuecomment-445264677:71,simpl,simply,71,https://root.cern,https://github.com/root-project/root/pull/3133#issuecomment-445264677,2,['simpl'],['simply']
Usability,Ask clang-format for feedback.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/367#issuecomment-290126485:21,feedback,feedback,21,https://root.cern,https://github.com/root-project/root/pull/367#issuecomment-290126485,1,['feedback'],['feedback']
Usability,"At some point we want people to migrate to the new iterators, becuase as Stephan showed in the past, they are also faster. As far as feedback goes, there is quite a long time to receive it. Now, we have about 1 year until the release of ROOT 6.32 where pro users will see the warnings in `master`, and then another year the warning would be in the released ROOT 6.32. The warning explicitly states that the legacy iterators will be removed in 6.34. So if this deprecation is really a problem, people will complain and we can ""un-deprecate"" if needed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14071#issuecomment-1816447278:133,feedback,feedback,133,https://root.cern,https://github.com/root-project/root/pull/14071#issuecomment-1816447278,2,['feedback'],['feedback']
Usability,"At the time, it was not clear how to introduce the new interfaces for the expression of parallelism within ROOT. This is also why the effort started from within the `Experimental` namespace. As correctly underlined above, the class is not really used nor needed, and it's good that these changes were proposed: thanks for that!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14856#issuecomment-1971063315:24,clear,clear,24,https://root.cern,https://github.com/root-project/root/pull/14856#issuecomment-1971063315,2,['clear'],['clear']
Usability,"Ater merging https://github.com/root-project/root/pull/8324, I verified that the memory increase as reported in this PR is gone. Both with the code from the initial post and also with the simple reproducer that I wrote.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9196#issuecomment-1092547617:188,simpl,simple,188,https://root.cern,https://github.com/root-project/root/issues/9196#issuecomment-1092547617,2,['simpl'],['simple']
Usability,"BTW, why doing this test ? we have something working with all bash versions, simply use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9966#issuecomment-1081920556:77,simpl,simply,77,https://root.cern,https://github.com/root-project/root/pull/9966#issuecomment-1081920556,2,['simpl'],['simply']
Usability,"Back to an alternative... Myself, I do the following to find out whether a C++ class had an `operator[]`: https://github.com/wlav/CPyCppyy/blob/master/src/Pythonize.cxx#L38 , but it may not work for you as-is, b/c an important point of that code is to not search for `__getitem__` in base classes, which I think you do want. Maybe something much simpler would be something along these lines:. ```; import cppyy; import cppyy.types. cppyy.cppdef(""""""\; struct MyStruct1 {};; struct MyStruct2 {; int operator[](int) { return 42; }; };. #include ""CPyCppyy/API.h"". bool CheckSequence(PyObject* obj, PyObject* base) {; if (CPyCppyy::Instance_Check(obj)) {; PyObject* gi1 = PyObject_GetAttrString((PyObject*)Py_TYPE(obj), ""__getitem__"");; PyObject* gi2 = PyObject_GetAttrString(base, ""__getitem__"");; bool ret = gi1 && gi1 != gi2;; Py_XDECREF(gi2);; Py_XDECREF(gi1);; return ret;; }; return false;; }; """"""). print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct1(), cppyy.types.Instance)); print(cppyy.gbl.CheckSequence(cppyy.gbl.MyStruct2(), cppyy.types.Instance)); ```. (Where you'd import `cppyy.types.Instance` on the C-side, not pass it as an argument, but this Q&D code was simpler.). This can be greatly simplified/sped up, by explicitly adding `op_getitem` as a method for `tp_as_sequence` and then do a straight-up pointer comparison. Can probably also expose it as a `CPyCppyy::Sequence_Check` in the API.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15161#issuecomment-2058191558:346,simpl,simpler,346,https://root.cern,https://github.com/root-project/root/issues/15161#issuecomment-2058191558,6,['simpl'],"['simpler', 'simplified']"
Usability,"Based on the discussion, it's not clear to me if there's anything left to be done. Can we close this? @vgvassilev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9594#issuecomment-1850068597:34,clear,clear,34,https://root.cern,https://github.com/root-project/root/issues/9594#issuecomment-1850068597,2,['clear'],['clear']
Usability,"Bertrand,; In my mind, after PR #9669 merged, one simply can remove build/win directory from includes at all - also inside ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9671#issuecomment-1019956657:50,simpl,simply,50,https://root.cern,https://github.com/root-project/root/pull/9671#issuecomment-1019956657,2,['simpl'],['simply']
Usability,"Both limitation/feature are present at the moment because of the ""simplest to implement factor"". I guess adding the code to simplify the name when possible should be straight-forward-ish. Switching from a fixed columns size by default to ""fit the name of all the columns"" should also be clear/straight-forward [albeit it might need a up to a reasonable maximum ...]; In case the name is truncated it might be usefull to add trailing dots .. but that might actually be slightly more complicated",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6473#issuecomment-700874559:66,simpl,simplest,66,https://root.cern,https://github.com/root-project/root/issues/6473#issuecomment-700874559,6,"['clear', 'simpl']","['clear', 'simplest', 'simplify']"
Usability,Build failed on ROOT-debian10-i386/soversion.; Running on pcepsft11.dyndns.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164077/console).; ### Failing tests:; - [projectroot.test.test_stressmathcore_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164077/testReport/projectroot/test/test_stressmathcore_interpreted/); - [projectroot.roottest.root.io.stdarray.roottest_root_io_stdarray_modelCheckValues](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164077/testReport/projectroot.roottest.root.io/stdarray/roottest_root_io_stdarray_modelCheckValues/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164077/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.reader.roottest_root_tree_reader_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164077/testReport/projectroot.roottest.root.tree/reader/roottest_root_tree_reader_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12018#issuecomment-1380914798:765,simpl,simple,765,https://root.cern,https://github.com/root-project/root/pull/12018#issuecomment-1380914798,4,['simpl'],['simple']
Usability,Build failed on ROOT-fedora27/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67062/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67062/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4338#issuecomment-527806081:192,simpl,simple,192,https://root.cern,https://github.com/root-project/root/pull/4338#issuecomment-527806081,4,['simpl'],['simple']
Usability,Build failed on ROOT-fedora27/noimt.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67422/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67422/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4338#issuecomment-529337927:192,simpl,simple,192,https://root.cern,https://github.com/root-project/root/pull/4338#issuecomment-529337927,4,['simpl'],['simple']
Usability,Build failed on ROOT-fedora29/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67063/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67063/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4338#issuecomment-527803650:194,simpl,simple,194,https://root.cern,https://github.com/root-project/root/pull/4338#issuecomment-527803650,4,['simpl'],['simple']
Usability,Build failed on ROOT-fedora29/python3.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67423/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67423/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4338#issuecomment-529331416:194,simpl,simple,194,https://root.cern,https://github.com/root-project/root/pull/4338#issuecomment-529331416,4,['simpl'],['simple']
Usability,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-1.cern.ch:/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5426-ROOT-fedora30-cxx14&date=2020-04-22).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77828/console).; ### Warnings:; - [2020-04-22T09:54:00.538Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-04-22T10:03:39.303Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5426#issuecomment-617692111:516,clear,clearing,516,https://root.cern,https://github.com/root-project/root/pull/5426#issuecomment-617692111,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-1.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/98801/console).; ### Warnings:; - [2020-10-12T10:36:12.315Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-10-12T10:46:02.906Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6614#issuecomment-707053494:356,clear,clearing,356,https://root.cern,https://github.com/root-project/root/pull/6614#issuecomment-707053494,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5615-ROOT-fedora30-cxx14&date=2020-05-14).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82058/console).; ### Warnings:; - [2020-05-14T11:00:37.189Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-14T11:07:00.384Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.meta.roottest_root_meta_expressiveErrorMessages](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/82058/testReport/projectroot.roottest.root/meta/roottest_root_meta_expressiveErrorMessages/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5615#issuecomment-628570271:530,clear,clearing,530,https://root.cern,https://github.com/root-project/root/pull/5615#issuecomment-628570271,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5685-ROOT-fedora30-cxx14&date=2020-05-24).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83317/console).; ### Warnings:; - [2020-05-24T21:12:13.842Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-24T21:18:34.559Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5685#issuecomment-633304650:530,clear,clearing,530,https://root.cern,https://github.com/root-project/root/pull/5685#issuecomment-633304650,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5692-ROOT-fedora30-cxx14&date=2020-05-25).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/console).; ### Warnings:; - [2020-05-25T10:19:25.159Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-25T10:26:03.641Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.cling.functionTemplate.roottest_cling_functionTemplate_testcint](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.cling/functionTemplate/roottest_cling_functionTemplate_testcint/); - [projectroot.roottest.python.basic.roottest_python_basic_basic](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_operator](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83389/testReport/projectroot.roottest.python/basic/roottest_python_basic_operator/); - [projectroot.roottest.python.basic.roottest_python_basic_overloa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5692#issuecomment-633509680:530,clear,clearing,530,https://root.cern,https://github.com/root-project/root/pull/5692#issuecomment-633509680,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5692-ROOT-fedora30-cxx14&date=2020-05-25).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83430/console).; ### Warnings:; - [2020-05-25T13:06:41.453Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-25T13:07:19.903Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.io.tuple.roottest_root_io_tuple_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83430/testReport/projectroot.roottest.root.io/tuple/roottest_root_io_tuple_make/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5692#issuecomment-633570667:530,clear,clearing,530,https://root.cern,https://github.com/root-project/root/pull/5692#issuecomment-633570667,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5716-ROOT-fedora30-cxx14&date=2020-05-27).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83727/console).; ### Errors:; - [2020-05-27T10:02:25.808Z] FAILED: tree/dataframe/test/dataframe_splitcoll_arrayview ; - [2020-05-27T10:02:25.808Z] collect2: error: ld returned 1 exit status . ### Warnings:; - [2020-05-27T09:53:43.857Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-27T10:00:15.862Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5716#issuecomment-634560707:706,clear,clearing,706,https://root.cern,https://github.com/root-project/root/pull/5716#issuecomment-634560707,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5716-ROOT-fedora30-cxx14&date=2020-05-27).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/83783/console).; ### Warnings:; - [2020-05-27T15:48:29.537Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-27T15:54:50.524Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5716#issuecomment-634773927:530,clear,clearing,530,https://root.cern,https://github.com/root-project/root/pull/5716#issuecomment-634773927,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5730-ROOT-fedora30-cxx14&date=2020-05-28).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84017/console).; ### Warnings:; - [2020-05-28T18:07:04.046Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-28T18:14:42.664Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5730#issuecomment-635523428:530,clear,clearing,530,https://root.cern,https://github.com/root-project/root/pull/5730#issuecomment-635523428,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5731-ROOT-fedora30-cxx14&date=2020-05-28).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84033/console).; ### Warnings:; - [2020-05-28T19:00:02.821Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-28T19:00:44.651Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5731#issuecomment-635541385:530,clear,clearing,530,https://root.cern,https://github.com/root-project/root/pull/5731#issuecomment-635541385,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5748-ROOT-fedora30-cxx14&date=2020-05-29).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/84258/console).; ### Warnings:; - [2020-05-29T17:37:04.729Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-05-29T17:45:09.837Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5748#issuecomment-636110134:530,clear,clearing,530,https://root.cern,https://github.com/root-project/root/pull/5748#issuecomment-636110134,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-6271-ROOT-fedora30-cxx14&date=2020-08-28).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/94060/console).; ### Warnings:; - [2020-08-28T11:23:46.094Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-08-28T11:31:00.825Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6271#issuecomment-682482962:530,clear,clearing,530,https://root.cern,https://github.com/root-project/root/pull/6271#issuecomment-682482962,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/101392/console).; ### Warnings:; - [2020-11-09T13:44:17.560Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-11-09T13:57:44.970Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6782#issuecomment-724047732:371,clear,clearing,371,https://root.cern,https://github.com/root-project/root/pull/6782#issuecomment-724047732,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/114303/console).; ### Warnings:; - [2021-04-14T11:03:20.855Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2021-04-14T11:10:29.086Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7870#issuecomment-819446975:371,clear,clearing,371,https://root.cern,https://github.com/root-project/root/pull/7870#issuecomment-819446975,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/114424/console).; ### Warnings:; - [2021-04-15T08:33:00.572Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2021-04-15T08:40:21.736Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7884#issuecomment-820253733:371,clear,clearing,371,https://root.cern,https://github.com/root-project/root/pull/7884#issuecomment-820253733,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115423/console).; ### Warnings:; - [2021-04-22T18:04:52.119Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2021-04-22T18:12:25.124Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7972#issuecomment-825088829:371,clear,clearing,371,https://root.cern,https://github.com/root-project/root/pull/7972#issuecomment-825088829,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115591/console).; ### Warnings:; - [2021-04-26T09:53:09.957Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2021-04-26T09:59:59.673Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7994#issuecomment-826711414:371,clear,clearing,371,https://root.cern,https://github.com/root-project/root/pull/7994#issuecomment-826711414,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/98913/console).; ### Warnings:; - [2020-10-12T17:59:07.743Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-10-12T18:07:15.273Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.cling.dict.ROOT-9185.roottest_cling_dict_ROOT_9185_ROOT9185](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/98913/testReport/projectroot.roottest.cling.dict/ROOT-9185/roottest_cling_dict_ROOT_9185_ROOT9185/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6614#issuecomment-707278634:370,clear,clearing,370,https://root.cern,https://github.com/root-project/root/pull/6614#issuecomment-707278634,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; Running on root-fedora30-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/98938/console).; ### Warnings:; - [2020-10-13T08:58:48.277Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-10-13T08:59:31.573Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.cling.dict.ROOT-9185.roottest_cling_dict_ROOT_9185_ROOT9185](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/98938/testReport/projectroot.roottest.cling.dict/ROOT-9185/roottest_cling_dict_ROOT_9185_ROOT9185/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6614#issuecomment-707605773:370,clear,clearing,370,https://root.cern,https://github.com/root-project/root/pull/6614#issuecomment-707605773,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5260)[See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/74284/console).; ### Warnings:; - [2020-03-31T14:18:15.280Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-03-31T14:28:22.117Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5260#issuecomment-606682987:401,clear,clearing,401,https://root.cern,https://github.com/root-project/root/pull/5260#issuecomment-606682987,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5281)[See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/74840/console).; ### Warnings:; - [2020-04-02T16:53:56.363Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-04-02T17:04:10.487Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.python.cpp.roottest_python_cpp_advanced](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/74840/testReport/projectroot.roottest.python/cpp/roottest_python_cpp_advanced/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5281#issuecomment-607985104:401,clear,clearing,401,https://root.cern,https://github.com/root-project/root/pull/5281#issuecomment-607985104,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5281)[See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/74921/console).; ### Warnings:; - [2020-04-03T08:09:45.001Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2020-04-03T08:19:39.771Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5281#issuecomment-608311989:401,clear,clearing,401,https://root.cern,https://github.com/root-project/root/pull/5281#issuecomment-608311989,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71055/console).; ### Warnings:; - CMake Warning at /build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message): ; - include/tbb/concurrent_hash_map.h:127:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - include/tbb/concurrent_hash_map.h:127:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.test.test_stressgraphics_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71055/testReport/projectroot/test/test_stressgraphics_interpreted/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4279#issuecomment-547064701:347,clear,clearing,347,https://root.cern,https://github.com/root-project/root/pull/4279#issuecomment-547064701,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71095/console).; ### Warnings:; - CMake Warning at /build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message): ; - include/tbb/concurrent_hash_map.h:127:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - include/tbb/concurrent_hash_map.h:127:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_cppcallable](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71095/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_cppcallable/); - [projectroot.test.test_stressgraphics_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71095/testReport/projectroot/test/test_stressgraphics_interpreted/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4279#issuecomment-547113818:347,clear,clearing,347,https://root.cern,https://github.com/root-project/root/pull/4279#issuecomment-547113818,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71167/console).; AXE### Warnings:; - CMake Warning at /build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:892 (message): ; - include/tbb/concurrent_hash_map.h:127:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - include/tbb/concurrent_hash_map.h:127:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.bindings.pyroot_experimental.PyROOT.ROOT.test.pyunittests_pyroot_cppcallable](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71167/testReport/projectroot.bindings.pyroot_experimental.PyROOT.ROOT/test/pyunittests_pyroot_cppcallable/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4279#issuecomment-547314147:350,clear,clearing,350,https://root.cern,https://github.com/root-project/root/pull/4279#issuecomment-547314147,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71191/console).; AXEL DEBUG: logParserAction errors=0, warnings=18; ### Warnings:; - include/tbb/concurrent_hash_map.h:127:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - /build/workspace/root-pullrequests-build/root/gui/webdisplay/inc/ROOT/RWebDisplayHandle.hxx:88:27: warning: unused parameter ‘UNUSED’ [-Wunused-parameter] ; - /build/workspace/root-pullrequests-build/root/gui/webdisplay/inc/ROOT/RWebDisplayHandle.hxx:88:27: warning: unused parameter ‘UNUSED’ [-Wunused-parameter] ; - /build/workspace/root-pullrequests-build/root/gui/webdisplay/inc/ROOT/RWebDisplayHandle.hxx:88:27: warning: unused parameter ‘UNUSED’ [-Wunused-parameter] ; - /build/workspace/root-pullrequests-build/root/gui/webdisplay/inc/ROOT/RWebDisplayHandle.hxx:88:27: warning: unused parameter ‘UNUSED’ [-Wunused-parameter] ; - include/ROOT/RWebDisplayHandle.hxx:88:27: warning: unused parameter ‘UNUSED’ [-Wunused-parameter] ; - include/ROOT/RWebDisplayHandle.hxx:88:27: warning: unused parameter ‘UNUSED’ [-Wunused-parameter] ; - include/ROOT/RWebDisplayHandle.hxx:88:27: warning: unused parameter ‘UNUSED’ [-Wunused-parameter] ; - include/ROOT/RWebDisplayHandle.hxx:88:27: warning: unused parameter ‘UNUSED’ [-Wunused-parameter] ; - include/ROOT/RWebDisplayHandle.hxx:88:27: warning: unused parameter ‘UNUSED’ [-Wunused-parameter] . And 8 more",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4585#issuecomment-547370533:288,clear,clearing,288,https://root.cern,https://github.com/root-project/root/pull/4585#issuecomment-547370533,2,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71207/console).; ### Warnings:; - include/tbb/concurrent_hash_map.h:127:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - /build/workspace/root-pullrequests-build/root/gui/webdisplay/inc/ROOT/RWebDisplayHandle.hxx:88:27: warning: unused parameter ‘UNUSED’ [-Wunused-parameter] ; - /build/workspace/root-pullrequests-build/root/gui/webdisplay/inc/ROOT/RWebDisplayHandle.hxx:88:27: warning: unused parameter ‘UNUSED’ [-Wunused-parameter] ; - /build/workspace/root-pullrequests-build/root/gui/webdisplay/inc/ROOT/RWebDisplayHandle.hxx:88:27: warning: unused parameter ‘UNUSED’ [-Wunused-parameter] ; - /build/workspace/root-pullrequests-build/root/gui/webdisplay/inc/ROOT/RWebDisplayHandle.hxx:88:27: warning: unused parameter ‘UNUSED’ [-Wunused-parameter] ; - include/ROOT/RWebDisplayHandle.hxx:88:27: warning: unused parameter ‘UNUSED’ [-Wunused-parameter] ; - include/ROOT/RWebDisplayHandle.hxx:88:27: warning: unused parameter ‘UNUSED’ [-Wunused-parameter] ; - include/ROOT/RWebDisplayHandle.hxx:88:27: warning: unused parameter ‘UNUSED’ [-Wunused-parameter] ; - include/ROOT/RWebDisplayHandle.hxx:88:27: warning: unused parameter ‘UNUSED’ [-Wunused-parameter] ; - include/ROOT/RWebDisplayHandle.hxx:88:27: warning: unused parameter ‘UNUSED’ [-Wunused-parameter] . And 8 more",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4585#issuecomment-547432803:237,clear,clearing,237,https://root.cern,https://github.com/root-project/root/pull/4585#issuecomment-547432803,2,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71215/console).; ### Warnings:; - include/tbb/concurrent_hash_map.h:127:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - include/tbb/concurrent_hash_map.h:127:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4555#issuecomment-547440899:237,clear,clearing,237,https://root.cern,https://github.com/root-project/root/pull/4555#issuecomment-547440899,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71223/console).; ### Warnings:; - include/tbb/concurrent_hash_map.h:127:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - include/tbb/concurrent_hash_map.h:127:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4561#issuecomment-547460410:237,clear,clearing,237,https://root.cern,https://github.com/root-project/root/pull/4561#issuecomment-547460410,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71239/console).; ### Warnings:; - include/tbb/concurrent_hash_map.h:127:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - include/tbb/concurrent_hash_map.h:127:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4497#issuecomment-547495482:237,clear,clearing,237,https://root.cern,https://github.com/root-project/root/pull/4497#issuecomment-547495482,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71264/console).; ### Warnings:; - include/tbb/concurrent_hash_map.h:127:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - include/tbb/concurrent_hash_map.h:127:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4594#issuecomment-547578379:237,clear,clearing,237,https://root.cern,https://github.com/root-project/root/pull/4594#issuecomment-547578379,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/71544/console).; ### Warnings:; - include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4604#issuecomment-548454582:237,clear,clearing,237,https://root.cern,https://github.com/root-project/root/pull/4604#issuecomment-548454582,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/72947/console).; ### Warnings:; - include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4680#issuecomment-564124989:237,clear,clearing,237,https://root.cern,https://github.com/root-project/root/pull/4680#issuecomment-564124989,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/73011/console).; ### Warnings:; - include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4680#issuecomment-564657347:237,clear,clearing,237,https://root.cern,https://github.com/root-project/root/pull/4680#issuecomment-564657347,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/73541/console).; ### Warnings:; - include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4697#issuecomment-566489140:237,clear,clearing,237,https://root.cern,https://github.com/root-project/root/pull/4697#issuecomment-566489140,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/75446/console).; ### Warnings:; - include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4820#issuecomment-576312361:237,clear,clearing,237,https://root.cern,https://github.com/root-project/root/pull/4820#issuecomment-576312361,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/75702/console).; ### Warnings:; - include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4835#issuecomment-577277715:237,clear,clearing,237,https://root.cern,https://github.com/root-project/root/pull/4835#issuecomment-577277715,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76255/console).; ### Warnings:; - include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4835#issuecomment-578723175:237,clear,clearing,237,https://root.cern,https://github.com/root-project/root/pull/4835#issuecomment-578723175,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76407/console).; ### Warnings:; - include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4873#issuecomment-578851973:237,clear,clearing,237,https://root.cern,https://github.com/root-project/root/pull/4873#issuecomment-578851973,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76632/console).; ### Warnings:; - include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4884#issuecomment-579557450:237,clear,clearing,237,https://root.cern,https://github.com/root-project/root/pull/4884#issuecomment-579557450,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76738/console).; ### Warnings:; - include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4884#issuecomment-579922714:237,clear,clearing,237,https://root.cern,https://github.com/root-project/root/pull/4884#issuecomment-579922714,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/76762/console).; ### Warnings:; - include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4893#issuecomment-579936036:237,clear,clearing,237,https://root.cern,https://github.com/root-project/root/pull/4893#issuecomment-579936036,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/78912/console).; ### Warnings:; - include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5027#issuecomment-587174733:237,clear,clearing,237,https://root.cern,https://github.com/root-project/root/pull/5027#issuecomment-587174733,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/79192/console).; ### Warnings:; - include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.tree.fastcloning.roottest_root_tree_fastcloning_execCheckClusterRange](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/79192/testReport/projectroot.roottest.root.tree/fastcloning/roottest_root_tree_fastcloning_execCheckClusterRange/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5038#issuecomment-588335594:237,clear,clearing,237,https://root.cern,https://github.com/root-project/root/pull/5038#issuecomment-588335594,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora30/cxx14.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/79916/console).; ### Warnings:; - include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5067#issuecomment-591975497:237,clear,clearing,237,https://root.cern,https://github.com/root-project/root/pull/5067#issuecomment-591975497,4,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115159/console).; ### Warnings:; - [2021-04-20T17:41:07.506Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115159/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115159/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115159/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7942#issuecomment-823498058:374,clear,clearing,374,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-823498058,2,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115296/console).; ### Warnings:; - [2021-04-21T16:53:52.297Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115296/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115296/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115296/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7942#issuecomment-824222731:374,clear,clearing,374,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-824222731,2,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115313/console).; ### Warnings:; - [2021-04-21T17:35:44.121Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115313/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115313/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115313/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7942#issuecomment-824249820:374,clear,clearing,374,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-824249820,2,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115314/console).; ### Warnings:; - [2021-04-21T20:32:03.524Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115314/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115314/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115314/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7942#issuecomment-824351593:374,clear,clearing,374,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-824351593,2,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115411/console).; ### Warnings:; - [2021-04-22T15:26:47.027Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2021-04-22T15:28:51.056Z] math/unuran/unuran-1.8.0-root/src/methods/mvtdr_init.ch:886:17: warning: argument 1 value ‘18446744073709551608’ exceeds maximum object size 9223372036854775807 [-Walloc-size-larger-than=] . ### Failing tests:; - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115411/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115411/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115411/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7942#issuecomment-824971382:374,clear,clearing,374,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-824971382,2,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115420/console).; ### Warnings:; - [2021-04-22T16:40:55.816Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2021-04-22T16:41:34.121Z] math/unuran/unuran-1.8.0-root/src/methods/mvtdr_init.ch:886:17: warning: argument 1 value ‘18446744073709551608’ exceeds maximum object size 9223372036854775807 [-Walloc-size-larger-than=] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115420/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115420/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115420/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7942#issuecomment-825024680:374,clear,clearing,374,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-825024680,2,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora32/default.; Running on root-fedora32-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117068/console).; ### Warnings:; - [2021-05-06T20:26:40.917Z] ginclude/tbb/concurrent_hash_map.h:131:76: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2021-05-06T20:28:24.470Z] math/unuran/unuran-1.8.0-root/src/methods/mvtdr_init.ch:886:17: warning: argument 1 value ‘18446744073709551608’ exceeds maximum object size 9223372036854775807 [-Walloc-size-larger-than=] . ### Failing tests:; - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117068/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117068/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/117068/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7942#issuecomment-833862493:374,clear,clearing,374,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-833862493,2,['clear'],['clearing']
Usability,"Build failed on ROOT-fedora34/default.; Running on root-fedora34-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/126763/console).; ### Warnings:; - [2021-10-04T15:57:57.930Z] /home/sftnight/build/workspace/root-pullrequests-build/build/ginclude/tbb/concurrent_hash_map.h:131:24: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleWriteRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/126763/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleWriteRead/); - [projectroot.roottest.root.io.uniquePointer.roottest_root_io_uniquePointer_simpleRead](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/126763/testReport/projectroot.roottest.root.io/uniquePointer/roottest_root_io_uniquePointer_simpleRead/); - [projectroot.roottest.root.meta.MakeProject.roottest_root_meta_MakeProject_runaliceesd](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/126763/testReport/projectroot.roottest.root.meta/MakeProject/roottest_root_meta_MakeProject_runaliceesd/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/126763/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9066#issuecomment-933646782:435,clear,clearing,435,https://root.cern,https://github.com/root-project/root/pull/9066#issuecomment-933646782,2,['clear'],['clearing']
Usability,Build failed on ROOT-performance-centos7-multicore/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67061/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67061/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4338#issuecomment-527796413:215,simpl,simple,215,https://root.cern,https://github.com/root-project/root/pull/4338#issuecomment-527796413,4,['simpl'],['simple']
Usability,Build failed on ROOT-performance-centos7-multicore/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67421/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67421/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4338#issuecomment-529325990:215,simpl,simple,215,https://root.cern,https://github.com/root-project/root/pull/4338#issuecomment-529325990,4,['simpl'],['simple']
Usability,Build failed on ROOT-ubuntu16/rtcxxmod.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65282/console).; ### Failing tests:; - [projectroot.roottest.root.hist.misc.roottest_root_hist_misc_runownership](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65282/testReport/projectroot.roottest.root.hist/misc/roottest_root_hist_misc_runownership/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_snapshot](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65282/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_snapshot/); - [projectroot.roottest.root.io.json.roottest_root_io_json_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65282/testReport/projectroot.roottest.root.io/json/roottest_root_io_json_make/); - [projectroot.roottest.root.io.xml.roottest_root_io_xml_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65282/testReport/projectroot.roottest.root.io/xml/roottest_root_io_xml_make/); - [projectroot.roottest.root.meta.autoloading.roottest_root_meta_autoloading_execTypeinfo_auto](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65282/testReport/projectroot.roottest.root.meta/autoloading/roottest_root_meta_autoloading_execTypeinfo_auto/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65282/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.core.metacling.test.gtest_core_metacling_test_coremetaclingtestUnit](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65282/testReport/projectroot.core.metacling/test/gtest_core_metacling_test_coremetaclingtestUnit/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4230#issuecomment-521946252:1323,simpl,simple,1323,https://root.cern,https://github.com/root-project/root/pull/4230#issuecomment-521946252,4,['simpl'],['simple']
Usability,Build failed on ROOT-ubuntu16/rtcxxmod.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67424/console).; ### Failing tests:; - [projectroot.roottest.root.multicore.roottest_root_multicore_exectsinclude](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67424/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_exectsinclude/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67424/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4338#issuecomment-529332052:425,simpl,simple,425,https://root.cern,https://github.com/root-project/root/pull/4338#issuecomment-529332052,4,['simpl'],['simple']
Usability,Build failed on ROOT-ubuntu18.04/nortcxxmod.; Running on sft-ubuntu-1804-2.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/149179/console).; ### Failing tests:; - [projectroot.roottest.cling.other.roottest_cling_other_checkMissingSymbolExitCode](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/149179/testReport/projectroot.roottest.cling/other/roottest_cling_other_checkMissingSymbolExitCode/); - [projectroot.roottest.cling.other.roottest_cling_other_assertDirWithParen](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/149179/testReport/projectroot.roottest.cling/other/roottest_cling_other_assertDirWithParen/); - [projectroot.roottest.python.cpp.roottest_python_cpp_advanced](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/149179/testReport/projectroot.roottest.python/cpp/roottest_python_cpp_advanced/); - [projectroot.roottest.root.meta.roottest_root_meta_execUnloading_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/149179/testReport/projectroot.roottest.root/meta/roottest_root_meta_execUnloading_auto/); - [projectroot.roottest.root.aclic.load.roottest_root_aclic_load_reload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/149179/testReport/projectroot.roottest.root.aclic/load/roottest_root_aclic_load_reload/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/149179/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1175130897:1491,simpl,simple,1491,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1175130897,4,['simpl'],['simple']
Usability,"Build failed on ROOT-ubuntu2004/python3.; Running on root-ubuntu-2004-1.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/console).; ### Warnings:; - [2023-08-31T18:23:40.513Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2023-08-31T18:29:46.289Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] . ### Failing tests:; - [projectroot.roottest.python.basic.roottest_python_basic_datatype](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_datatype/); - [projectroot.roottest.python.basic.roottest_python_basic_basic](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_basic/); - [projectroot.roottest.python.basic.roottest_python_basic_overload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/basic/roottest_python_basic_overload/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_pythonizations](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/pythonizations/roottest_python_pythonizations_pythonizations/); - [projectroot.roottest.python.pythonizations.roottest_python_pythonizations_smartptr](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/183764/testReport/projectroot.roottest.python/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13577#issuecomment-1701582600:378,clear,clearing,378,https://root.cern,https://github.com/root-project/root/pull/13577#issuecomment-1701582600,4,['clear'],['clearing']
Usability,"Build failed on ROOT-ubuntu2004/soversion.; Running on root-ubuntu-2004-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/127729/console).; ### Warnings:; - [2021-10-21T13:48:06.579Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess] ; - [2021-10-21T13:54:54.096Z] include/tbb/concurrent_hash_map.h:124:51: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘class tbb::interface5::internal::hash_map_base’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9157#issuecomment-948660830:380,clear,clearing,380,https://root.cern,https://github.com/root-project/root/pull/9157#issuecomment-948660830,4,['clear'],['clearing']
Usability,"Build failed on ROOT-ubuntu2204/cxx17.; Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/166598/console).; ### Warnings:; - [2023-02-01T13:46:58.435Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/tbb/concurrent_hash_map.h:131:24: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12187#issuecomment-1412117260:437,clear,clearing,437,https://root.cern,https://github.com/root-project/root/pull/12187#issuecomment-1412117260,2,['clear'],['clearing']
Usability,"Build failed on ROOT-ubuntu2204/cxx17.; Running on root-ubuntu-2204-2.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/166784/console).; ### Warnings:; - [2023-02-02T16:04:19.482Z] /home/sftnight/build/workspace/root-pullrequests-build/build/include/tbb/concurrent_hash_map.h:131:24: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12211#issuecomment-1414055652:437,clear,clearing,437,https://root.cern,https://github.com/root-project/root/pull/12211#issuecomment-1414055652,2,['clear'],['clearing']
Usability,"Build failed on fedora28/native.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/28889/console).; ### Errors:; - collect2: error: ld returned 1 exit status . ### Warnings:; - /mnt/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:686:14: warning: ‘char* strncpy(char*, const char*, size_t)’ specified bound depends on the length of the source argument [-Wstringop-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rpdutils/src/rpdutils.cxx:5203:14: warning: ‘char* strncpy(char*, const char*, size_t)’ specified bound depends on the length of the source argument [-Wstringop-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rpdutils/src/rpdutils.cxx:4757:26: warning: ‘char* strncpy(char*, const char*, size_t)’ output may be truncated copying 10 bytes from a string of length 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2141#issuecomment-394388968:1534,clear,clearing,1534,https://root.cern,https://github.com/root-project/root/pull/2141#issuecomment-394388968,2,['clear'],['clearing']
Usability,"Build failed on fedora28/native.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/32357/console).; ### Warnings:; - /mnt/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:686:14: warning: ‘char* strncpy(char*, const char*, size_t)’ specified bound depends on the length of the source argument [-Wstringop-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rpdutils/src/rpdutils.cxx:5203:14: warning: ‘char* strncpy(char*, const char*, size_t)’ specified bound depends on the length of the source argument [-Wstringop-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rpdutils/src/rpdutils.cxx:4757:26: warning: ‘char* strncpy(char*, const char*, size_t)’ output may be truncated copying 10 bytes from a string of length 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types fr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2319#issuecomment-405050428:512,clear,clearing,512,https://root.cern,https://github.com/root-project/root/pull/2319#issuecomment-405050428,2,['clear'],['clearing']
Usability,"Build failed on fedora28/native.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/32748/console).; ### Errors:; - /mnt/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3377:82: error: ‘interpreter’ was not declared in this scope . ### Warnings:; - /mnt/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:686:14: warning: ‘char* strncpy(char*, const char*, size_t)’ specified bound depends on the length of the source argument [-Wstringop-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rpdutils/src/rpdutils.cxx:5203:14: warning: ‘char* strncpy(char*, const char*, size_t)’ specified bound depends on the length of the source argument [-Wstringop-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rpdutils/src/rpdutils.cxx:4757:26: warning: ‘char* strncpy(char*, const char*, size_t)’ output may be truncated copying 10 bytes from a string of length 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2331#issuecomment-405843696:1638,clear,clearing,1638,https://root.cern,https://github.com/root-project/root/pull/2331#issuecomment-405843696,2,['clear'],['clearing']
Usability,"Build failed on fedora28/native.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/34737/console).; ### Errors:; - ERROR in cling::CIFactory::createCI(): ; - Error: Error loading the default header files. . ### Warnings:; - /mnt/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:686:14: warning: ‘char* strncpy(char*, const char*, size_t)’ specified bound depends on the length of the source argument [-Wstringop-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rpdutils/src/rpdutils.cxx:5203:14: warning: ‘char* strncpy(char*, const char*, size_t)’ specified bound depends on the length of the source argument [-Wstringop-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rpdutils/src/rpdutils.cxx:4757:26: warning: ‘char* strncpy(char*, const char*, size_t)’ output may be truncated copying 10 bytes from a string of length 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2406#issuecomment-409554854:1581,clear,clearing,1581,https://root.cern,https://github.com/root-project/root/pull/2406#issuecomment-409554854,2,['clear'],['clearing']
Usability,"Build failed on fedora28/native.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/37008/console).; ### Warnings:; - /mnt/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:686:14: warning: ‘char* strncpy(char*, const char*, size_t)’ specified bound depends on the length of the source argument [-Wstringop-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rpdutils/src/rpdutils.cxx:5203:14: warning: ‘char* strncpy(char*, const char*, size_t)’ specified bound depends on the length of the source argument [-Wstringop-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rpdutils/src/rpdutils.cxx:4757:26: warning: ‘char* strncpy(char*, const char*, size_t)’ output may be truncated copying 10 bytes from a string of length 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2442#issuecomment-412504856:1474,clear,clearing,1474,https://root.cern,https://github.com/root-project/root/pull/2442#issuecomment-412504856,2,['clear'],['clearing']
Usability,"Build failed on fedora28/native.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/37035/console).; ### Errors:; - ERROR in cling::CIFactory::createCI(): ; - Error: Error loading the default header files. . ### Warnings:; - /mnt/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:686:14: warning: ‘char* strncpy(char*, const char*, size_t)’ specified bound depends on the length of the source argument [-Wstringop-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rpdutils/src/rpdutils.cxx:5203:14: warning: ‘char* strncpy(char*, const char*, size_t)’ specified bound depends on the length of the source argument [-Wstringop-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rpdutils/src/rpdutils.cxx:4757:26: warning: ‘char* strncpy(char*, const char*, size_t)’ output may be truncated copying 10 bytes from a string of length 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2406#issuecomment-412837784:1581,clear,clearing,1581,https://root.cern,https://github.com/root-project/root/pull/2406#issuecomment-412837784,2,['clear'],['clearing']
Usability,"Build failed on fedora28/native.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/37062/console).; ### Errors:; - ERROR in cling::CIFactory::createCI(): ; - Error: Error loading the default header files. . ### Warnings:; - /mnt/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:686:14: warning: ‘char* strncpy(char*, const char*, size_t)’ specified bound depends on the length of the source argument [-Wstringop-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rpdutils/src/rpdutils.cxx:5203:14: warning: ‘char* strncpy(char*, const char*, size_t)’ specified bound depends on the length of the source argument [-Wstringop-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rpdutils/src/rpdutils.cxx:4757:26: warning: ‘char* strncpy(char*, const char*, size_t)’ output may be truncated copying 10 bytes from a string of length 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2406#issuecomment-412940246:1581,clear,clearing,1581,https://root.cern,https://github.com/root-project/root/pull/2406#issuecomment-412940246,2,['clear'],['clearing']
Usability,"Build failed on fedora28/native.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/37071/console).; ### Errors:; - ERROR in cling::CIFactory::createCI(): ; - Error: Error loading the default header files. . ### Warnings:; - /mnt/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:686:14: warning: ‘char* strncpy(char*, const char*, size_t)’ specified bound depends on the length of the source argument [-Wstringop-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rpdutils/src/rpdutils.cxx:5203:14: warning: ‘char* strncpy(char*, const char*, size_t)’ specified bound depends on the length of the source argument [-Wstringop-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rpdutils/src/rpdutils.cxx:4757:26: warning: ‘char* strncpy(char*, const char*, size_t)’ output may be truncated copying 10 bytes from a string of length 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2406#issuecomment-412957016:1581,clear,clearing,1581,https://root.cern,https://github.com/root-project/root/pull/2406#issuecomment-412957016,2,['clear'],['clearing']
Usability,Build failed on mac1014/cxx17.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/55340/console).; ### Errors:; - FAILED: net/http/CMakeFiles/RHTTP.dir/src/THttpLongPollEngine.cxx.o ; - /build/jenkins/workspace/root-pullrequests-build/root/net/http/src/THttpLongPollEngine.cxx:109:7: error: use of undeclared identifier 'Error' ; - /build/jenkins/workspace/root-pullrequests-build/root/net/http/src/THttpLongPollEngine.cxx:132:7: error: use of undeclared identifier 'Error' ; - /build/jenkins/workspace/root-pullrequests-build/root/net/http/src/THttpLongPollEngine.cxx:158:7: error: use of undeclared identifier 'Error' ; - /build/jenkins/workspace/root-pullrequests-build/root/net/http/src/THttpLongPollEngine.cxx:191:7: error: use of undeclared identifier 'Fatal' ; - /build/jenkins/workspace/root-pullrequests-build/root/net/http/src/THttpLongPollEngine.cxx:194:7: error: use of undeclared identifier 'Error' ; - FAILED: net/http/CMakeFiles/RHTTP.dir/src/THttpServer.cxx.o ; - /build/jenkins/workspace/root-pullrequests-build/root/net/http/src/THttpServer.cxx:155:10: error: no member named 'Warning' in the global namespace; did you mean simply 'Warning'?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3545#issuecomment-473229251:1171,simpl,simply,1171,https://root.cern,https://github.com/root-project/root/pull/3545#issuecomment-473229251,2,['simpl'],['simply']
Usability,Build failed on mac1014/cxx17.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67065/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67065/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4338#issuecomment-527799410:186,simpl,simple,186,https://root.cern,https://github.com/root-project/root/pull/4338#issuecomment-527799410,4,['simpl'],['simple']
Usability,Build failed on mac1014/cxx17.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67357/console).; ### Errors:; - 957/1991 Test #866: tutorial-v7-concurrentfill.cxx ....................................................................***Failed Error regular expression found in output. Regex=[: error:] 0.92 sec ; - 969/1991 Test #878: tutorial-v7-perf.cxx ..............................................................................***Failed Error regular expression found in output. Regex=[: error:] 1.06 sec ; - 970/1991 Test #879: tutorial-v7-perfcomp.cxx ..........................................................................***Failed Error regular expression found in output. Regex=[: error:] 1.03 sec ; - 972/1991 Test #880: tutorial-v7-simple.cxx ............................................................................***Failed Error regular expression found in output. Regex=[: error:] 1.09 sec . ### Failing tests:; - [projectroot.runtutorials.tutorial_v7_concurrentfill.cxx](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67357/testReport/projectroot/runtutorials/tutorial_v7_concurrentfill_cxx/); - [projectroot.runtutorials.tutorial_v7_perf.cxx](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67357/testReport/projectroot/runtutorials/tutorial_v7_perf_cxx/); - [projectroot.runtutorials.tutorial_v7_perfcomp.cxx](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67357/testReport/projectroot/runtutorials/tutorial_v7_perfcomp_cxx/); - [projectroot.runtutorials.tutorial_v7_simple.cxx](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67357/testReport/projectroot/runtutorials/tutorial_v7_simple_cxx/); - [projectroot.roottest.root.io.evolution.roottest_root_io_evolution_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67357/testReport/projectroot.roottest.root.io/evolution/roottest_root_io_evolution_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4354#issuecomment-528910405:778,simpl,simple,778,https://root.cern,https://github.com/root-project/root/pull/4354#issuecomment-528910405,2,['simpl'],['simple']
Usability,Build failed on mac1014/cxx17.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67375/console).; ### Errors:; - 958/1991 Test #866: tutorial-v7-concurrentfill.cxx ....................................................................***Failed Error regular expression found in output. Regex=[: error:] 1.01 sec ; - 969/1991 Test #878: tutorial-v7-perf.cxx ..............................................................................***Failed Error regular expression found in output. Regex=[: error:] 0.91 sec ; - 971/1991 Test #879: tutorial-v7-perfcomp.cxx ..........................................................................***Failed Error regular expression found in output. Regex=[: error:] 1.00 sec ; - 972/1991 Test #880: tutorial-v7-simple.cxx ............................................................................***Failed Error regular expression found in output. Regex=[: error:] 1.01 sec . ### Failing tests:; - [projectroot.runtutorials.tutorial_v7_concurrentfill.cxx](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67375/testReport/projectroot/runtutorials/tutorial_v7_concurrentfill_cxx/); - [projectroot.runtutorials.tutorial_v7_perf.cxx](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67375/testReport/projectroot/runtutorials/tutorial_v7_perf_cxx/); - [projectroot.runtutorials.tutorial_v7_perfcomp.cxx](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67375/testReport/projectroot/runtutorials/tutorial_v7_perfcomp_cxx/); - [projectroot.runtutorials.tutorial_v7_simple.cxx](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67375/testReport/projectroot/runtutorials/tutorial_v7_simple_cxx/); - [projectroot.roottest.root.io.evolution.roottest_root_io_evolution_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67375/testReport/projectroot.roottest.root.io/evolution/roottest_root_io_evolution_make/); - [projectroot.roottest.root.meta.enums.roottest_root_meta_enums_enumsInNamespaces](,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4358#issuecomment-528926777:778,simpl,simple,778,https://root.cern,https://github.com/root-project/root/pull/4358#issuecomment-528926777,2,['simpl'],['simple']
Usability,Build failed on mac1014/cxx17.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67395/console).; ### Errors:; - 961/1991 Test #866: tutorial-v7-concurrentfill.cxx ....................................................................***Failed Error regular expression found in output. Regex=[: error:] 1.99 sec ; - 971/1991 Test #878: tutorial-v7-perf.cxx ..............................................................................***Failed Error regular expression found in output. Regex=[: error:] 1.73 sec ; - 972/1991 Test #879: tutorial-v7-perfcomp.cxx ..........................................................................***Failed Error regular expression found in output. Regex=[: error:] 1.78 sec ; - 974/1991 Test #880: tutorial-v7-simple.cxx ............................................................................***Failed Error regular expression found in output. Regex=[: error:] 1.89 sec . ### Failing tests:; - [projectroot.runtutorials.tutorial_v7_concurrentfill.cxx](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67395/testReport/projectroot/runtutorials/tutorial_v7_concurrentfill_cxx/); - [projectroot.runtutorials.tutorial_v7_perf.cxx](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67395/testReport/projectroot/runtutorials/tutorial_v7_perf_cxx/); - [projectroot.runtutorials.tutorial_v7_perfcomp.cxx](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67395/testReport/projectroot/runtutorials/tutorial_v7_perfcomp_cxx/); - [projectroot.runtutorials.tutorial_v7_simple.cxx](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67395/testReport/projectroot/runtutorials/tutorial_v7_simple_cxx/); - [projectroot.roottest.root.io.evolution.roottest_root_io_evolution_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67395/testReport/projectroot.roottest.root.io/evolution/roottest_root_io_evolution_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4358#issuecomment-529028304:778,simpl,simple,778,https://root.cern,https://github.com/root-project/root/pull/4358#issuecomment-529028304,2,['simpl'],['simple']
Usability,Build failed on mac1014/cxx17.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67407/console).; ### Errors:; - 961/1991 Test #866: tutorial-v7-concurrentfill.cxx ....................................................................***Failed Error regular expression found in output. Regex=[: error:] 2.16 sec ; - 971/1991 Test #878: tutorial-v7-perf.cxx ..............................................................................***Failed Error regular expression found in output. Regex=[: error:] 1.43 sec ; - 972/1991 Test #879: tutorial-v7-perfcomp.cxx ..........................................................................***Failed Error regular expression found in output. Regex=[: error:] 1.69 sec ; - 973/1991 Test #880: tutorial-v7-simple.cxx ............................................................................***Failed Error regular expression found in output. Regex=[: error:] 1.65 sec,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3760#issuecomment-529046076:778,simpl,simple,778,https://root.cern,https://github.com/root-project/root/pull/3760#issuecomment-529046076,2,['simpl'],['simple']
Usability,Build failed on mac1014/cxx17.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67425/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67425/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4338#issuecomment-529338522:186,simpl,simple,186,https://root.cern,https://github.com/root-project/root/pull/4338#issuecomment-529338522,4,['simpl'],['simple']
Usability,Build failed on mac1014/cxx17.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67527/console).; ### Errors:; - 962/1991 Test #866: tutorial-v7-concurrentfill.cxx ....................................................................***Failed Error regular expression found in output. Regex=[: error:] 1.84 sec ; - 971/1991 Test #878: tutorial-v7-perf.cxx ..............................................................................***Failed Error regular expression found in output. Regex=[: error:] 1.20 sec ; - 973/1991 Test #879: tutorial-v7-perfcomp.cxx ..........................................................................***Failed Error regular expression found in output. Regex=[: error:] 1.28 sec ; - 975/1991 Test #880: tutorial-v7-simple.cxx ............................................................................***Failed Error regular expression found in output. Regex=[: error:] 1.82 sec . ### Failing tests:; - [projectroot.runtutorials.tutorial_v7_concurrentfill.cxx](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67527/testReport/projectroot/runtutorials/tutorial_v7_concurrentfill_cxx/); - [projectroot.runtutorials.tutorial_v7_perf.cxx](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67527/testReport/projectroot/runtutorials/tutorial_v7_perf_cxx/); - [projectroot.runtutorials.tutorial_v7_perfcomp.cxx](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67527/testReport/projectroot/runtutorials/tutorial_v7_perfcomp_cxx/); - [projectroot.runtutorials.tutorial_v7_simple.cxx](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67527/testReport/projectroot/runtutorials/tutorial_v7_simple_cxx/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4358#issuecomment-529553525:778,simpl,simple,778,https://root.cern,https://github.com/root-project/root/pull/4358#issuecomment-529553525,2,['simpl'],['simple']
Usability,Build failed on mac1014/cxx17.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/73239/console).; ### Errors:; - /ec/build/workspace/root-pullrequests-build/root/core/imt/src/TPoolManager.cxx:75:48: error: no member named 'NLogicalCores' in namespace 'ROOT'; did you mean simply 'NLogicalCores'?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4684#issuecomment-565376935:302,simpl,simply,302,https://root.cern,https://github.com/root-project/root/pull/4684#issuecomment-565376935,2,['simpl'],['simply']
Usability,Build failed on mac1014/cxx17.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74836/console).; ### Failing tests:; - [projectroot.hist.hist.test.gtest_hist_hist_test_TGraphMultiErrorsTests](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74836/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/); - [projectroot.tree.treeplayer.test.gtest_tree_treeplayer_test_treetreeplayertestUnit](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74836/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_treetreeplayertestUnit/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74836/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/); - [projectroot.roottest.root.html.roottest_root_html_runMakeIndex](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74836/testReport/projectroot.roottest.root/html/roottest_root_html_runMakeIndex/); - [projectroot.roottest.root.io.const.roottest_root_io_const_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74836/testReport/projectroot.roottest.root.io/const/roottest_root_io_const_make/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74836/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.meta.naming.roottest_root_meta_naming_execResolveTypedef_auto](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74836/testReport/projectroot.roottest.root.meta/naming/roottest_root_meta_naming_execResolveTypedef_auto/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74836/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4758#issuecomment-573843824:1754,simpl,simple,1754,https://root.cern,https://github.com/root-project/root/pull/4758#issuecomment-573843824,4,['simpl'],['simple']
Usability,Build failed on mac1014/cxx17.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/75345/console).; ### Failing tests:; - [projectroot.tree.treeplayer.test.gtest_tree_treeplayer_test_treetreeplayertestUnit](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/75345/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_treetreeplayertestUnit/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/75345/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/); - [projectroot.roottest.root.html.roottest_root_html_runMakeIndex](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/75345/testReport/projectroot.roottest.root/html/roottest_root_html_runMakeIndex/); - [projectroot.roottest.root.io.const.roottest_root_io_const_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/75345/testReport/projectroot.roottest.root.io/const/roottest_root_io_const_make/); - [projectroot.roottest.root.meta.naming.roottest_root_meta_naming_execResolveTypedef_auto](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/75345/testReport/projectroot.roottest.root.meta/naming/roottest_root_meta_naming_execResolveTypedef_auto/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/75345/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/75345/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.tmva.tmva.test.gtest_tmva_tmva_test_rstandardscaler](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/75345/testReport/projectroot.tmva.tmva/test/gtest_tmva_tmva_test_rstandardscaler/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4812#issuecomment-576029522:1302,simpl,simple,1302,https://root.cern,https://github.com/root-project/root/pull/4812#issuecomment-576029522,4,['simpl'],['simple']
Usability,Build failed on mac1014/cxx17.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/75362/console).; ### Failing tests:; - [projectroot.tree.treeplayer.test.gtest_tree_treeplayer_test_treetreeplayertestUnit](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/75362/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_treetreeplayertestUnit/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/75362/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/); - [projectroot.roottest.root.io.const.roottest_root_io_const_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/75362/testReport/projectroot.roottest.root.io/const/roottest_root_io_const_make/); - [projectroot.roottest.root.meta.naming.roottest_root_meta_naming_execResolveTypedef_auto](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/75362/testReport/projectroot.roottest.root.meta/naming/roottest_root_meta_naming_execResolveTypedef_auto/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/75362/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/75362/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4812#issuecomment-576245066:1094,simpl,simple,1094,https://root.cern,https://github.com/root-project/root/pull/4812#issuecomment-576245066,4,['simpl'],['simple']
Usability,Build failed on mac1014/cxx17.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/79011/console).; ### Failing tests:; - [projectroot.tree.treeplayer.test.gtest_tree_treeplayer_test_treetreeplayertestUnit](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/79011/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_treetreeplayertestUnit/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/79011/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/79011/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/79011/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5030#issuecomment-587500257:628,simpl,simple,628,https://root.cern,https://github.com/root-project/root/pull/5030#issuecomment-587500257,4,['simpl'],['simple']
Usability,Build failed on mac1014/cxx17.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/79453/console).; ### Failing tests:; - [projectroot.runtutorials.tutorial_roofit_rf104_classfactory_py](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/79453/testReport/projectroot/runtutorials/tutorial_roofit_rf104_classfactory_py/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/79453/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeproxy.roottest_root_treeproxy_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/79453/testReport/projectroot.roottest.root/treeproxy/roottest_root_treeproxy_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/79453/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5030#issuecomment-589663474:834,simpl,simple,834,https://root.cern,https://github.com/root-project/root/pull/5030#issuecomment-589663474,4,['simpl'],['simple']
Usability,Build failed on mac1014/cxx17.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/79541/console).; ### Failing tests:; - [projectroot.runtutorials.tutorial_v7_histops.cxx](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/79541/testReport/projectroot/runtutorials/tutorial_v7_histops_cxx/); - [projectroot.runtutorials.tutorial_roofit_rf104_classfactory_py](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/79541/testReport/projectroot/runtutorials/tutorial_roofit_rf104_classfactory_py/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/79541/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeproxy.roottest_root_treeproxy_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/79541/testReport/projectroot.roottest.root/treeproxy/roottest_root_treeproxy_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/79541/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5030#issuecomment-589931013:1014,simpl,simple,1014,https://root.cern,https://github.com/root-project/root/pull/5030#issuecomment-589931013,4,['simpl'],['simple']
Usability,Build failed on mac1014/cxx17.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/79581/console).; ### Failing tests:; - [projectroot.runtutorials.tutorial_v7_histops.cxx](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/79581/testReport/projectroot/runtutorials/tutorial_v7_histops_cxx/); - [projectroot.runtutorials.tutorial_roofit_rf104_classfactory_py](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/79581/testReport/projectroot/runtutorials/tutorial_roofit_rf104_classfactory_py/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/79581/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeproxy.roottest_root_treeproxy_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/79581/testReport/projectroot.roottest.root/treeproxy/roottest_root_treeproxy_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/79581/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5030#issuecomment-590256364:1014,simpl,simple,1014,https://root.cern,https://github.com/root-project/root/pull/5030#issuecomment-590256364,4,['simpl'],['simple']
Usability,Build failed on mac1014/cxx17.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/80131/console).; ### Failing tests:; - [projectroot.tree.treeplayer.test.gtest_tree_treeplayer_test_treetreeplayertestUnit](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/80131/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_treetreeplayertestUnit/); - [projectroot.roottest.python.stl.roottest_python_stl_stl](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/80131/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/80131/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/80131/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5082#issuecomment-593825152:628,simpl,simple,628,https://root.cern,https://github.com/root-project/root/pull/5082#issuecomment-593825152,4,['simpl'],['simple']
Usability,Build failed on mac1015/cxx17.; Running Allocate node on root-jenkins-01.cern.ch:/var/lib/jenkins/workspace/root-pullrequests-build; Running Allocate node on macphsft18.dyndns.cern.ch:/Users/sftnight/build/jenkins/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5412-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/console).; ### Failing tests:; - [projectroot.math.foam.test.gtest_math_foam_test_testTFoam](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.math.foam/test/gtest_math_foam_test_testTFoam/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77699/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5412#issuecomment-617254612:785,simpl,simple,785,https://root.cern,https://github.com/root-project/root/pull/5412#issuecomment-617254612,4,['simpl'],['simple']
Usability,Build failed on mac1015/cxx17.; Running on macphsft18.dyndns.cern.ch:/Users/sftnight/build/jenkins/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5219-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77710/console).; ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77710/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77710/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77710/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5219#issuecomment-617284554:955,simpl,simple,955,https://root.cern,https://github.com/root-project/root/pull/5219#issuecomment-617284554,4,['simpl'],['simple']
Usability,Build failed on mac1015/cxx17.; Running on macphsft18.dyndns.cern.ch:/Users/sftnight/build/jenkins/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5342-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77744/console).; ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77744/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77744/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.treeproxy.roottest_root_treeproxy_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77744/testReport/projectroot.roottest.root/treeproxy/roottest_root_treeproxy_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77744/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5342#issuecomment-617429874:1182,simpl,simple,1182,https://root.cern,https://github.com/root-project/root/pull/5342#issuecomment-617429874,4,['simpl'],['simple']
Usability,Build failed on mac1015/cxx17.; Running on macphsft18.dyndns.cern.ch:/Users/sftnight/build/jenkins/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5423-mac1015-cxx17&date=2020-04-22).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77775/console).; ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77775/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77775/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77775/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5423#issuecomment-617452035:955,simpl,simple,955,https://root.cern,https://github.com/root-project/root/pull/5423#issuecomment-617452035,4,['simpl'],['simple']
Usability,Build failed on mac1015/cxx17.; Running on macphsft20.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5342-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77703/console).; ### Failing tests:; - [projectroot.roottest.root.treeproxy.roottest_root_treeproxy_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77703/testReport/projectroot.roottest.root/treeproxy/roottest_root_treeproxy_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77703/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77703/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77703/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5342#issuecomment-617307490:676,simpl,simple,676,https://root.cern,https://github.com/root-project/root/pull/5342#issuecomment-617307490,4,['simpl'],['simple']
Usability,Build failed on mac1015/cxx17.; Running on macphsft20.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5391-mac1015-cxx17&date=2020-04-22).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77759/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77759/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77759/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77759/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.treeproxy.roottest_root_treeproxy_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77759/testReport/projectroot.roottest.root/treeproxy/roottest_root_treeproxy_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5391#issuecomment-617457400:449,simpl,simple,449,https://root.cern,https://github.com/root-project/root/pull/5391#issuecomment-617457400,4,['simpl'],['simple']
Usability,Build failed on mac1015/cxx17.; Running on macphsft20.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5398-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77751/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77751/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77751/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77751/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5398#issuecomment-617431954:449,simpl,simple,449,https://root.cern,https://github.com/root-project/root/pull/5398#issuecomment-617431954,4,['simpl'],['simple']
Usability,Build failed on mac1015/cxx17.; Running on macphsft20.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build; [See cdash](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5418-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77718/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77718/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77718/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77718/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5418#issuecomment-617355629:449,simpl,simple,449,https://root.cern,https://github.com/root-project/root/pull/5418#issuecomment-617355629,4,['simpl'],['simple']
Usability,Build failed on mac1015/cxx17.; Running on root-jenkins-01.cern.ch:/var/lib/jenkins/workspace/root-pullrequests-build; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5391-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77638/console).; ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77638/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77638/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.treeproxy.roottest_root_treeproxy_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77638/testReport/projectroot.roottest.root/treeproxy/roottest_root_treeproxy_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77638/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5391#issuecomment-617175571:1168,simpl,simple,1168,https://root.cern,https://github.com/root-project/root/pull/5391#issuecomment-617175571,4,['simpl'],['simple']
Usability,Build failed on mac1015/cxx17.; Running on root-jenkins-01.cern.ch:/var/lib/jenkins/workspace/root-pullrequests-build; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5417-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77647/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77647/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77647/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77647/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5417#issuecomment-617185813:443,simpl,simple,443,https://root.cern,https://github.com/root-project/root/pull/5417#issuecomment-617185813,4,['simpl'],['simple']
Usability,Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5030-mac1015-cxx17&date=2020-04-06).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/75331/console).; ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/75331/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/75331/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/75331/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5030#issuecomment-609768242:854,simpl,simple,854,https://root.cern,https://github.com/root-project/root/pull/5030#issuecomment-609768242,4,['simpl'],['simple']
Usability,Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5030-mac1015-cxx17&date=2020-04-06).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/75332/console).; ### Failing tests:; - [projectroot.runtutorials.tutorial_roofit_rf104_classfactory_py](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/75332/testReport/projectroot/runtutorials/tutorial_roofit_rf104_classfactory_py/); - [projectroot.roottest.root.treeproxy.roottest_root_treeproxy_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/75332/testReport/projectroot.roottest.root/treeproxy/roottest_root_treeproxy_make/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/75332/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/75332/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/75332/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5030#issuecomment-609794009:1304,simpl,simple,1304,https://root.cern,https://github.com/root-project/root/pull/5030#issuecomment-609794009,4,['simpl'],['simple']
Usability,Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5030-mac1015-cxx17&date=2020-04-07).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/75611/console).; ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/75611/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/75611/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/75611/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5030#issuecomment-610418457:854,simpl,simple,854,https://root.cern,https://github.com/root-project/root/pull/5030#issuecomment-610418457,4,['simpl'],['simple']
Usability,Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5030-mac1015-cxx17&date=2020-04-17).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/76835/console).; ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/76835/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/76835/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/76835/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5030#issuecomment-615170450:356,simpl,simple,356,https://root.cern,https://github.com/root-project/root/pull/5030#issuecomment-615170450,4,['simpl'],['simple']
Usability,Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5342-mac1015-cxx17&date=2020-04-20).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77447/console).; ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77447/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77447/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77447/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5342#issuecomment-616817622:854,simpl,simple,854,https://root.cern,https://github.com/root-project/root/pull/5342#issuecomment-616817622,4,['simpl'],['simple']
Usability,Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5391-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77480/console).; ### Failing tests:; - [projectroot.roottest.root.treeproxy.roottest_root_treeproxy_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77480/testReport/projectroot.roottest.root/treeproxy/roottest_root_treeproxy_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77480/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77480/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77480/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5391#issuecomment-616855956:583,simpl,simple,583,https://root.cern,https://github.com/root-project/root/pull/5391#issuecomment-616855956,4,['simpl'],['simple']
Usability,Build failed on mac1015/cxx17.; [See cdash ](http://cdash.cern.ch/index.php?project=ROOT&filtercount=1&field1=buildname/string&compare1=65&value1=PR-5395-mac1015-cxx17&date=2020-04-21).; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77512/console).; ### Failing tests:; - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77512/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77512/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/77512/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5395#issuecomment-616956457:854,simpl,simple,854,https://root.cern,https://github.com/root-project/root/pull/5395#issuecomment-616956457,4,['simpl'],['simple']
Usability,Build failed on mac11/cxx14.; Running on macphsft23.dyndns.cern.ch:/Users/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/174396/console).; ### Errors:; - [2023-05-11T12:52:41.022Z] FAILED: core/CMakeFiles/G__Core.dir/G__Core.cxx.o ; - [2023-05-11T12:52:41.023Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/core/G__Core.cxx:11318:52: error: no type named 'TVirtualRWMutex' in the global namespace; did you mean simply 'TVirtualRWMutex'? ; - [2023-05-11T12:52:41.023Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/core/G__Core.cxx:11324:52: error: no type named 'TVirtualRWMutex' in the global namespace; did you mean simply 'TVirtualRWMutex'? ; - [2023-05-11T12:52:41.023Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/core/G__Core.cxx:11330:53: error: no type named 'TVirtualRWMutex' in the global namespace; did you mean simply 'TVirtualRWMutex'? ; - [2023-05-11T12:52:41.023Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/core/G__Core.cxx:11337:107: error: no type named 'TVirtualRWMutex' in the global namespace; did you mean simply 'TVirtualRWMutex'? ; - [2023-05-11T12:52:41.023Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/core/G__Core.cxx:11355:52: error: no type named 'TReadLockGuard' in the global namespace; did you mean simply 'TReadLockGuard'? ; - [2023-05-11T12:52:41.023Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/core/G__Core.cxx:11361:52: error: no type named 'TReadLockGuard' in the global namespace; did you mean simply 'TReadLockGuard'? ; - [2023-05-11T12:52:41.023Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/core/G__Core.cxx:11367:53: error: no type named 'TReadLockGuard' in the global namespace; did you mean simply 'TReadLockGuard'? ; - [2023-05-11T12:52:41.023Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/core/G__Core.cxx:11374:1,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11027#issuecomment-1543945512:525,simpl,simply,525,https://root.cern,https://github.com/root-project/root/pull/11027#issuecomment-1543945512,6,['simpl'],['simply']
Usability,Build failed on mac12/noimt.; Running on macphsft18.dyndns.cern.ch:/Users/sftnight/build/jenkins/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/174395/console).; ### Errors:; - [2023-05-11T12:18:54.188Z] FAILED: core/CMakeFiles/G__Core.dir/G__Core.cxx.o ; - [2023-05-11T12:18:54.761Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/build/core/G__Core.cxx:11318:52: error: no type named 'TVirtualRWMutex' in the global namespace; did you mean simply 'TVirtualRWMutex'? ; - [2023-05-11T12:18:54.761Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/build/core/G__Core.cxx:11324:52: error: no type named 'TVirtualRWMutex' in the global namespace; did you mean simply 'TVirtualRWMutex'? ; - [2023-05-11T12:18:54.761Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/build/core/G__Core.cxx:11330:53: error: no type named 'TVirtualRWMutex' in the global namespace; did you mean simply 'TVirtualRWMutex'? ; - [2023-05-11T12:18:54.761Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/build/core/G__Core.cxx:11337:107: error: no type named 'TVirtualRWMutex' in the global namespace; did you mean simply 'TVirtualRWMutex'? ; - [2023-05-11T12:18:54.761Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/build/core/G__Core.cxx:11355:52: error: no type named 'TReadLockGuard' in the global namespace; did you mean simply 'TReadLockGuard'? ; - [2023-05-11T12:18:54.761Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/build/core/G__Core.cxx:11361:52: error: no type named 'TReadLockGuard' in the global namespace; did you mean simply 'TReadLockGuard'? ; - [2023-05-11T12:18:54.761Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/build/core/G__Core.cxx:11367:53: error: no type named 'TReadLockGuard' in the global namespace; did you mean simply 'TReadLockGuard'? ; - [2023-05-11T12:18:54.761Z] /Users/sftnight/build/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11027#issuecomment-1543894216:541,simpl,simply,541,https://root.cern,https://github.com/root-project/root/pull/11027#issuecomment-1543894216,6,['simpl'],['simply']
Usability,Build failed on mac12arm/cxx20.; Running on 194.12.161.128:/Users/sftnight/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/197157/console).; ### Errors:; - [2024-03-01T02:45:13.661Z] FAILED: interpreter/llvm-project/llvm/tools/clang/lib/Serialization/CMakeFiles/obj.clangSerialization.dir/ASTWriterDecl.cpp.o ; - [2024-03-01T02:45:13.661Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriterDecl.cpp:2440:3: error: use of undeclared identifier 'DeclSpecializationsAbbrev' ; - [2024-03-01T02:45:14.375Z] FAILED: interpreter/llvm-project/llvm/tools/clang/lib/Serialization/CMakeFiles/obj.clangSerialization.dir/ASTWriter.cpp.o ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3898:29: error: no member named 'endianness' in namespace 'llvm'; did you mean simply 'endianness'? ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3914:28: error: no member named 'endianness' in namespace 'llvm'; did you mean simply 'endianness'? ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3922:28: error: no member named 'endianness' in namespace 'llvm'; did you mean simply 'endianness'? ; - [2024-03-01T02:45:14.375Z] /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:3993:29: error: use of undeclared identifier 'DeclSpecializationsAbbrev',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14495#issuecomment-1972366916:1014,simpl,simply,1014,https://root.cern,https://github.com/root-project/root/pull/14495#issuecomment-1972366916,6,['simpl'],['simply']
Usability,Build failed on ubuntu16/native.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/16312/console).; ### Failing tests:; - [projectroot.roottest.root.html.roottest_root_html_runMakeIndex](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/16312/testReport/projectroot.roottest.root/html/roottest_root_html_runMakeIndex/); - [projectroot.roottest.root.io.simple.roottest_root_io_simple_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/16312/testReport/projectroot.roottest.root.io/simple/roottest_root_io_simple_make/); - [projectroot.roottest.root.io.set.roottest_root_io_set_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/16312/testReport/projectroot.roottest.root.io/set/roottest_root_io_set_make/); - [projectroot.roottest.root.io.stdarray.roottest_root_io_stdarray_colWiseRead_11](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/16312/testReport/projectroot.roottest.root.io/stdarray/roottest_root_io_stdarray_colWiseRead_11/); - [projectroot.roottest.root.io.json.roottest_root_io_json_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/16312/testReport/projectroot.roottest.root.io/json/roottest_root_io_json_make/); - [projectroot.roottest.root.io.stdarray.roottest_root_io_stdarray_colWiseRead_12](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/16312/testReport/projectroot.roottest.root.io/stdarray/roottest_root_io_stdarray_colWiseRead_12/); - [projectroot.roottest.root.io.newdelete.roottest_root_io_newdelete_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/16312/testReport/projectroot.roottest.root.io/newdelete/roottest_root_io_newdelete_make/); - [projectroot.roottest.root.io.stdarray.roottest_root_io_stdarray_arrTemplMemberWrite](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/16312/testReport/projectroot.roottest.root.io/stdarray/roottest_root_io_stdarray_arrTemplMemberWrite/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1591#issuecomment-363262262:390,simpl,simple,390,https://root.cern,https://github.com/root-project/root/pull/1591#issuecomment-363262262,4,['simpl'],['simple']
Usability,"Build failed on windows10/cxx14.; Running on null:C:\build\workspace\root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/119078/console).; ### Warnings:; - [2021-06-02T09:28:56.271Z] ghprbPullLongDescription=Warning like:\r\n```\r\ngeom/geom/src/TGeoManager.cxx:521:4: warning: this 'if' clause does not guard... [-Wmisleading-indentation]\r\n 521 | if (fHashVolumes) fHashVolumes-&gt;Clear(\""nodelete\""); SafeDelete(fHashVolumes);\r\n``` ; - [2021-06-02T10:19:30.580Z] ghprbPullLongDescription=Warning like:\r\n```\r\ngeom/geom/src/TGeoManager.cxx:521:4: warning: this 'if' clause does not guard... [-Wmisleading-indentation]\r\n 521 | if (fHashVolumes) fHashVolumes-&gt;Clear(\""nodelete\""); SafeDelete(fHashVolumes);\r\n```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8316#issuecomment-852950636:452,Clear,Clear,452,https://root.cern,https://github.com/root-project/root/pull/8316#issuecomment-852950636,2,['Clear'],['Clear']
Usability,"Build failed on windows10/cxx14.; Running on null:C:\build\workspace\root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/126788/console).; ### Warnings:; - [2021-10-05T07:51:00.677Z] ghprbPullLongDescription=Should fix the following compilation warnings with `gcc 11` and the current `builtin_tbb`:\r\n```\r\nIn file included from ginclude/tbb/tbb.h:48,\r\n from /home/vpadulan/Programs/rootproject/root/core/imt/src/TThreadExecutor.cxx:10:\r\nginclude/tbb/concurrent_hash_map.h: In constructor 'tbb::interface5::internal::hash_map_base::hash_map_base()':\r\nginclude/tbb/concurrent_hash_map.h:131:24: warning: 'void* memset(void*, int, size_t)' clearing an object of type 'struct tbb::interface5::internal::hash_map_base::bucket' with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]\r\n 131 | std::memset(my_embedded_segment, 0, sizeof(my_embedded_segment));\r\n | ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nginclude/tbb/concurrent_hash_map.h:93:16: note: 'struct tbb::interface5::internal::hash_map_base::bucket' declared here\r\n 93 | struct bucket : tbb::internal::no_copy {\r\n | ^~~~~~\r\n```\r\n . ### Failing tests:; - [projectroot.roottest.python.function.roottest_python_function_function](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/126788/testReport/projectroot.roottest.python/function/roottest_python_function_function/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9067#issuecomment-934265717:713,clear,clearing,713,https://root.cern,https://github.com/root-project/root/pull/9067#issuecomment-934265717,2,['clear'],['clearing']
Usability,"Build failed on windows10/cxx14.; Running on null:C:\build\workspace\root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/154362/console).; ### Errors:; - [2022-09-14T15:02:59.017Z] C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\tuple(74,90): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\CodeGen\TargetLoweringObjectFileImpl.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\CodeGen\LLVMCodeGen.vcxproj] ; - [2022-09-14T15:02:59.017Z] C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility(1274,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\Utils\SimplifyCFG.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Transforms\Utils\LLVMTransformUtils.vcxproj] ; - [2022-09-14T15:02:59.017Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/ADT/SmallVector.h(841,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\Utils\SimplifyIndVar.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Transforms\Utils\LLVMTransformUtils.vcxproj] ; - [2022-09-14T15:02:59.017Z] C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\utility(389,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\CodeGen\TailDuplication.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\CodeGen\LLVMCodeGen.vcxproj] ; - [2022-09-14T15:02:59.017Z] C:\build\workspace\root-pullreque",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11366#issuecomment-1246914758:944,Simpl,SimplifyCFG,944,https://root.cern,https://github.com/root-project/root/pull/11366#issuecomment-1246914758,1,['Simpl'],['SimplifyCFG']
Usability,"But did you add the '?' before each command, as in the example ?. The guide says:; `Use ? to get help on all ‘‘raw’’ interpreter commands`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10056#issuecomment-1060855729:70,guid,guide,70,https://root.cern,https://github.com/root-project/root/issues/10056#issuecomment-1060855729,2,['guid'],['guide']
Usability,But why does the guide tell you to put those question marks then?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10056#issuecomment-1060858993:17,guid,guide,17,https://root.cern,https://github.com/root-project/root/issues/10056#issuecomment-1060858993,2,['guid'],['guide']
Usability,"By any means I am not against this change. However, since such overhead is a significant problem for your O(N) microservices and saving a few calls makes a difference, have you considered using checkpointing to cache ROOT startup operations altogether? A very simplistic way to achieve the checkpointing is to implement a core dump. That would probably yield better results AFAICT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12613#issuecomment-1496294487:260,simpl,simplistic,260,https://root.cern,https://github.com/root-project/root/pull/12613#issuecomment-1496294487,2,['simpl'],['simplistic']
Usability,"By the way, from the new ROOT website, I do not see what is the clicks-series leading to the Old Users Guide.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10722#issuecomment-1151205866:103,Guid,Guide,103,https://root.cern,https://github.com/root-project/root/issues/10722#issuecomment-1151205866,1,['Guid'],['Guide']
Usability,"By the way, the TETRIS example seems broken, at least in Linux. It runs but it is not responsive to the keyboard (not able to move the parts). And Pause erases the screen momentarily.. ![image](https://user-images.githubusercontent.com/10653970/107710210-8e1a9b00-6c94-11eb-8427-dd66a3ae42d6.png)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7184#issuecomment-777854927:86,responsiv,responsive,86,https://root.cern,https://github.com/root-project/root/pull/7184#issuecomment-777854927,3,"['Pause', 'responsiv']","['Pause', 'responsive']"
Usability,"By the way, you are referring to the old ""User's Guide"". This Guide is now out dated. We do not update it anymore. The two main sources of documentation are the [Reference Guide](https://root.cern/doc/master/index.html) and the [Manual](https://root.cern/manual/). If some update is needed I guess it should be done in the[ reference of TThread](https://root.cern/doc/master/classTThread.html). May be the TThread part of the user guide should be updated and move into the reference guide.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7216#issuecomment-844170711:49,Guid,Guide,49,https://root.cern,https://github.com/root-project/root/issues/7216#issuecomment-844170711,7,"['Guid', 'guid']","['Guide', 'guide']"
Usability,"Can we simply add `const TROOT *&GetROOTPtrRef()`, in the source file of where `gROOT` is injected in the list of globals?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3208#issuecomment-457495268:7,simpl,simply,7,https://root.cern,https://github.com/root-project/root/pull/3208#issuecomment-457495268,2,['simpl'],['simply']
Usability,"Can we split the formatting commit of the existing code into a separate commit, please, such that everything "".help"" (and only that) is in a single commit? @couet should be able to help you with that. It makes reviewing much simpler, and I will review once this is done.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4203#issuecomment-523858865:225,simpl,simpler,225,https://root.cern,https://github.com/root-project/root/pull/4203#issuecomment-523858865,2,['simpl'],['simpler']
Usability,"Can you add this to a super simple test, just to make sure we compile this case?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9818#issuecomment-1031394700:28,simpl,simple,28,https://root.cern,https://github.com/root-project/root/pull/9818#issuecomment-1031394700,2,['simpl'],['simple']
Usability,Can you just add the two commits fixing the test? I have #15236 adding already xgboost and scikit-learn,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15237#issuecomment-2056871254:98,learn,learn,98,https://root.cern,https://github.com/root-project/root/pull/15237#issuecomment-2056871254,2,['learn'],['learn']
Usability,Can you please modify your code to follow the documentation guide lines described here https://root.cern.ch/how/formatting-comments-doxygen ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1327#issuecomment-344612301:60,guid,guide,60,https://root.cern,https://github.com/root-project/root/pull/1327#issuecomment-344612301,2,['guid'],['guide']
Usability,Can you suggest a PR and an expert of that part of ROOT will examine it ? Several things you mentioned here do not work or are not clear to me.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10065#issuecomment-1067013995:131,clear,clear,131,https://root.cern,https://github.com/root-project/root/issues/10065#issuecomment-1067013995,2,['clear'],['clear']
Usability,"Can't we just move the tests needing this infrastructure to roottest which is serving is pretty well for comparing to golden output, and which makes it much simpler to add such tests? That way we would not even need this ""common"" library for root.git's tests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5297#issuecomment-615061213:157,simpl,simpler,157,https://root.cern,https://github.com/root-project/root/pull/5297#issuecomment-615061213,2,['simpl'],['simpler']
Usability,"Can't we simply take `vector<double>`s instead of `int size, double*`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7151#issuecomment-779333149:9,simpl,simply,9,https://root.cern,https://github.com/root-project/root/issues/7151#issuecomment-779333149,2,['simpl'],['simply']
Usability,Can't you simply use the `-Dbuiltin_xrootd=ON` option?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11750#issuecomment-1339375009:10,simpl,simply,10,https://root.cern,https://github.com/root-project/root/issues/11750#issuecomment-1339375009,2,['simpl'],['simply']
Usability,Clearly a bug. I am investigating. Something should have changed since 6.24. You can see it is ok here:; https://root.cern/doc/v624/classRooChi2Var.html,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8519#issuecomment-866780686:0,Clear,Clearly,0,https://root.cern,https://github.com/root-project/root/issues/8519#issuecomment-866780686,1,['Clear'],['Clearly']
Usability,Clearly not fully awake yet... :crossed_fingers: this actually works on *both* Linux *and* macOS!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1180200053:0,Clear,Clearly,0,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1180200053,1,['Clear'],['Clearly']
Usability,"Clearly, the original developers didn't care about IO for these classes. It's likely that you will run into other problems. If yes, please let me know here!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11876#issuecomment-1384366976:0,Clear,Clearly,0,https://root.cern,https://github.com/root-project/root/issues/11876#issuecomment-1384366976,1,['Clear'],['Clearly']
Usability,"Client code can use `auto*` to make it explicit that a pointer is returned. However `TFile::Get` is so common in ROOT, and so idiomatic, that I don't think the ambiguity will be a disturbance.; Also, the doxygen doc will clearly show that a `T*` is returned in the signature.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3501#issuecomment-469727804:221,clear,clearly,221,https://root.cern,https://github.com/root-project/root/pull/3501#issuecomment-469727804,2,['clear'],['clearly']
Usability,"Closing because the usecase is gone, and the features is probably impossible to implement in cppyy. Without a clear usecase, we should not go into this rabbit hole.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13875#issuecomment-1991844247:110,clear,clear,110,https://root.cern,https://github.com/root-project/root/issues/13875#issuecomment-1991844247,2,['clear'],['clear']
Usability,Closing the PR after some discussion. The added benefit of having a more robust usage of namespaces and clearer definition of the classes being used in the headers is not worth w.r.t. having to rebase larger PRs on top of these changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12981#issuecomment-1585597579:104,clear,clearer,104,https://root.cern,https://github.com/root-project/root/pull/12981#issuecomment-1585597579,2,['clear'],['clearer']
Usability,"Closing, because at this point it's not clear to me whether the functionality should be in TPython or in CPyCppyy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16019#issuecomment-2388756085:40,clear,clear,40,https://root.cern,https://github.com/root-project/root/pull/16019#issuecomment-2388756085,2,['clear'],['clear']
Usability,Col2 option is a bitmap Representation of the histogram to make the col option very fast when the histogram has many bins and the bin size is close to one pixel. But this bitmap graphics and ps and pdf are vector graphics. So col2 produces an empty plot. This is not a bug. This feature is explained in the THistPainter reference guide (look at it) in the COL Option section.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6822#issuecomment-728770705:330,guid,guide,330,https://root.cern,https://github.com/root-project/root/issues/6822#issuecomment-728770705,2,['guid'],['guide']
Usability,"Concerning the ScientificColourMaps, more than having 'all of them', it would be useful to have them in a 'classified manner', clearly identified in the TColor documentation. Or maybe have one of each type. - Centric value type (only use when symmetric bin contents) + ""Inverted variant""; - Sequential type (usual case) + ""Inverted variant""; - Discrete variants; Here the full description: https://www.nature.com/articles/s41467-020-19160-7/figures/6. Another option I was thinking was that one could follow the approach of ""Themes"" used in many programs to define their color set. If a user downloads some themes from ScientificColourMaps and puts them in $HOME/.config/root/color-palettes/. then gStyle->SetPalette(""batlow"") would automatically load that one, if existing, using something like the script I posted above. This would make it pretty flexible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8098#issuecomment-832859001:127,clear,clearly,127,https://root.cern,https://github.com/root-project/root/issues/8098#issuecomment-832859001,2,['clear'],['clearly']
Usability,"Cool, good to hear that the PR goes in the right direction then!. > It is still not entirely clear in advance which features require connectivity. All features of builtins that do require network note this in their description:; * https://root.cern/install/build_from_source/#all-build-options; * https://github.com/root-project/root/blob/master/cmake/modules/RootBuildOptions.cmake#L87. I agree that `builtin_openui5` should explicitly say that it requires network if `OFF`. For the confusing name with `builtin_`, do you have a suggestion to make this clearer? I don't think there are many options there, we meant of course builtin to the ROOT build, not the source tree :slightly_smiling_face: . About the pre-populating of FetchContent locations: I was facing the same problem recently for nix packages. I fixed it in the end by patching the CMake code of ROOT:; https://github.com/NixOS/nixpkgs/pull/308497",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11603#issuecomment-2102765857:93,clear,clear,93,https://root.cern,https://github.com/root-project/root/issues/11603#issuecomment-2102765857,4,['clear'],"['clear', 'clearer']"
Usability,"Cool, thanks for the feedback!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7352#issuecomment-799383258:21,feedback,feedback,21,https://root.cern,https://github.com/root-project/root/pull/7352#issuecomment-799383258,2,['feedback'],['feedback']
Usability,"Cool, thanks! I don't have a strong opinion on it either, but if it works this should be the simplest solution to avoid replacing `find_package` and we can close #8633.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16274#issuecomment-2298776505:93,simpl,simplest,93,https://root.cern,https://github.com/root-project/root/pull/16274#issuecomment-2298776505,2,['simpl'],['simplest']
Usability,"Correct - and I wanted to start small (`vector`, `string`) and see what roottest has to say about that. I did expect some test failures?! That would guide me what else we should expose. Which makes me wonder whether this works at all - nope, it doesn't. Let me fix that...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11027#issuecomment-1192710542:149,guid,guide,149,https://root.cern,https://github.com/root-project/root/pull/11027#issuecomment-1192710542,2,['guid'],['guide']
Usability,"Correct, RDF was not used at all -- flamegraphs show the full call stacks. These are Jakob's I/O benchmarks from ACAT 2017, which showed TTreeReader's excessive overhead for the first time (as far as I know). There is a version that uses RDF but I did not run it, this is TTree vs TTreeReader (pre- and post-patch). It would be great if you could confirm that there is no sensible difference in performance with the patch, at least for this benchmark. A simplified version of Jakob's setup with (hopefully clear enough) instructions in the README can be found in my rootonly branch that I linked above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3216#issuecomment-456478794:454,simpl,simplified,454,https://root.cern,https://github.com/root-project/root/pull/3216#issuecomment-456478794,4,"['clear', 'simpl']","['clear', 'simplified']"
Usability,"Could you expand a little more the commit message and the PR description. I fail to capture the intent. In general, ROOT_GENERATE_DICTIONARY is very complex and needs to be simplified and refactored, unless this is fixing a real issue I'd be reluctant to make it more complex than it already is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5172#issuecomment-600574122:173,simpl,simplified,173,https://root.cern,https://github.com/root-project/root/pull/5172#issuecomment-600574122,2,['simpl'],['simplified']
Usability,"Could you please make the file name to contain the ROOT version? When I download ""Complete User's Guide in A4 format"" from http://root.cern.ch/root/htmldoc/guides/users-guide/ROOTUsersGuideA4.pdf, I've no idea whether it was changed in 2018 or in 2021.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7279#issuecomment-785698708:98,Guid,Guide,98,https://root.cern,https://github.com/root-project/root/issues/7279#issuecomment-785698708,5,"['Guid', 'guid']","['Guide', 'guide', 'guides']"
Usability,"Current screenshot:. ```; root [0] .?. Cling (C/C++ interpreter) meta commands usage; All commands must be preceded by a '.', except; for the evaluation statement { }; ==============================================================================================; Syntax: .Command [arg0 arg1 ... argN]. .Tab				- Autocomplete or print suggestions. .L <filename>		- Load the given file or library. .(x|X) <filename>(args)	- Same as .L and runs a function with; 				 signature: ret_type filename(args). .> <filename>		- Redirect command to a given file; '>' or '1>'		- Redirects the stdout stream only; '2>'			- Redirects the stderr stream only; '&>' (or '2>&1')		- Redirects both stdout and stderr; '>>'			- Appends to the given file. .undo [n]			- Unloads the last 'n' inputs lines. .U <filename>		- Unloads the given file. .(I|include) [path]		- Shows all include paths. If a path is given,; 				 adds the path to the include paths. .O <level>			- Sets the optimization level (0-3); 				 If no level is given, prints the current setting. .class <name>		- Prints out class <name> in a CINT-like style (one-level).; 				 If no name is given, prints out list of all classes. .Class <name>			- Prints out class <name> in a CINT-like style (all-levels).; 				 If no name is given, prints out list of all classes. .namespace			- Prints list of all known namespaces. .typedef <name>		- Prints out typedef <name> in a CINT-like style; 				 If no name is given, prints out list of all typedefs. .files			- Prints names of all included (parsed) files. .fileEx			- Prints out included (parsed) file statistics; 				 as well as a list of their names. .g <var>				- Prints out information about global variable; 				 'var' - if no name is given, print them all. .@ 				- Cancels and ignores the multiline input. .rawInput [0|1]		- Toggle wrapping and printing the; 				 execution results of the input. .dynamicExtensions [0|1]	- Toggles the use of the dynamic scopes; 				 and the late binding. .debug <level>		- ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10121#issuecomment-1084927674:735,undo,undo,735,https://root.cern,https://github.com/root-project/root/pull/10121#issuecomment-1084927674,2,['undo'],['undo']
Usability,"Dear @couet ,. 1) sorry for diappearing. DESY has changed the mail setup and I've noticed that quite late... Now reading the mails. 2) >I do not get a crash. So I do not really understand the protection you added. I see that in the code I do; ``` ; g++ $(root-config --glibs --cflags ) arrow.cxx -g -o arrow.exe ; ./arrow.exe; ```; and get. ```; $ ./arrow.exe . *** Break *** floating point exception. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; gdb.printing.register_pretty_printer(gdb.current_objfile(),; #0 0x00007fa672acc46c in __libc_waitpid (pid=1369358, stat_loc=stat_loc; entry=0x7ffc45f54860, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31; #1 0x00007fa672a49f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007fa67745b5dc in TUnixSystem::StackTrace (this=0x1c20980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408; #3 0x00007fa67745e06a in TUnixSystem::DispatchSignals (this=0x1c20980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646; #4 <signal handler called>; #5 TArrow::PaintArrow (this=0x2812cd0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>, arrowsize=<optimized out>, option=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/graf/src/TArrow.cxx:275; #6 0x0000000000400e1b in main (argc=1, argv=0x7ffc45f57528) at arrow.cxx:85; ===========================================================. ```. The reason if quite simple: when the pad is too small the coordinated rounded from float to int are the same.; Then the code divides over their difference which is 0. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6513#issuecomment-702670088:1632,simpl,simple,1632,https://root.cern,https://github.com/root-project/root/pull/6513#issuecomment-702670088,2,['simpl'],['simple']
Usability,"Dear @couet ,; > so I guess that's fine.. . OK. I've put [Do not merge] to the title, as I don't see if there is a label for such requests. . >clearly faulty code in a PR. My fault. I've replaced that with suggestion from @pcanal. >This sounds like an ""obvious thing"" ...padsave is equal to gPad on line 780... did I missed soothing ?. Maybe that is because of cast. I was trying to pay with it, but w/o much success. The IsBatch() was logical and did the job for that separate case... Will have a look soon. Best regards,. Andrii. Edit: but for the proper cast one should replace C-like cast with something else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6469#issuecomment-704330700:143,clear,clearly,143,https://root.cern,https://github.com/root-project/root/pull/6469#issuecomment-704330700,2,['clear'],['clearly']
Usability,"Dear @couet thank you very much. Is this something that could be implemented soon in ROOT. If it's a simple change to add the copy CTOR to the API it would avoid us in CMSSW to have to create a custom-made wrapper for TH2Poly.; Many thanks in advance, Pedro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13075#issuecomment-1891586098:101,simpl,simple,101,https://root.cern,https://github.com/root-project/root/issues/13075#issuecomment-1891586098,2,['simpl'],['simple']
Usability,"Dear @etejedor ; I have no local built of ROOT - it is too heavy for me - I am always rely on LCG releases or nightlies. ; The problem appeared not earlier than a week ago. There was a few days break in tests of my project, ; and restarting tests after this pause, couple of days ago, I've observed this behaviour.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8152#issuecomment-839744359:258,pause,pause,258,https://root.cern,https://github.com/root-project/root/issues/8152#issuecomment-839744359,2,['pause'],['pause']
Usability,"Dear @guitargeek ,; thanks a lot for your fast feedback! Indeed, v6-32-00-patches builds fine.; I'm building root as part of the ALICE software stack with custom build options. Using pre-packaged versions will not work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15585#issuecomment-2123267444:47,feedback,feedback,47,https://root.cern,https://github.com/root-project/root/issues/15585#issuecomment-2123267444,2,['feedback'],['feedback']
Usability,"Dear @guitargeek . ... and I have one more problem with another test no my project. It also hangs.. ; Unforunately it i not so simple to isolate,(that's why I am not reporting this problem; since I have no simple reproducer) but since it also involves C++ virtual functions ; reimplemented in python, migth be the unnderlying reason is the same..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15085#issuecomment-2036734953:127,simpl,simple,127,https://root.cern,https://github.com/root-project/root/issues/15085#issuecomment-2036734953,4,['simpl'],['simple']
Usability,"Dear @jan-busa , @lmoneta : it is not clear to me from the conversation if this is still an issue. If not, can this be closed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12770#issuecomment-1926372761:38,clear,clear,38,https://root.cern,https://github.com/root-project/root/issues/12770#issuecomment-1926372761,2,['clear'],['clear']
Usability,"Dear @mmaneyro ,. Thank you for your report. I take it that `Event.NParticles` is a sub-branch of the `Event` branch. What you describe is not really surprising, as `Redefine` is meant to substitute the values of the full column of the RDataFrame (column==branch). The difference in behaviour between non-jitted and jitted code is more surprising though. As a fast workaround, you could be more explicit about the columns you want to save in your output TTree by adding the list of column names to the `Snapshot` call. ```cpp; auto snap = df2.Snapshot(""LHEF"", ""out_snapshot.root"", {""Event.NParticles""});; ```. In order for me to better reproduce your problem though, I believe I would also need some instructions on how to generate the dictionaries for the classes in your file. Meanwhile, I can try to come up with a simpler reproducer, but having also your scenario would help. Cheers,; Vincenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13846#issuecomment-1760263815:818,simpl,simpler,818,https://root.cern,https://github.com/root-project/root/issues/13846#issuecomment-1760263815,2,['simpl'],['simpler']
Usability,"Dear @xkzl ,. Indeed, I can see the same thing with the following simple example ; ```cpp; // myheader.hxx; #ifndef myheader; #define myheader. enum class MyEnum; {; kFirst,; kSecond,; kThird; };. template <MyEnum T>; class MyClass; {; };. #endif ; ```. ```cpp; // LinkDef.h; #ifdef __CLING__; #pragma link C++ enum MyEnum;; #pragma link C++ class MyClass < MyEnum::kFirst> + ;; #pragma link C++ class MyClass < MyEnum::kSecond> + ;; #pragma link C++ class MyClass < MyEnum::kThird> + ;; #endif; ```. ```; $: rootcling -f myheaderdict.cxx myheader.hxx LinkDef.h -rmf myheader.rootmap; ```. ```; # myheader.rootmap; { decls }; template <MyEnum> class MyClass;. [ ]; # List of selected classes; class MyClass<(MyEnum)0>; class MyClass<(MyEnum)1>; class MyClass<(MyEnum)2>; class MyClass<MyEnum::kFirst>; class MyClass<MyEnum::kSecond>; class MyClass<MyEnum::kThird>; # List of selected enums and outer classes; enum MyEnum; ```. I am unsure whether we are missing some different configuration or spelling. @pcanal might be able to help here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16496#issuecomment-2365069147:66,simpl,simple,66,https://root.cern,https://github.com/root-project/root/issues/16496#issuecomment-2365069147,2,['simpl'],['simple']
Usability,"Dear @xkzl ,. Thank you for your report. From the stack trace you provided (formatted on two lines):; ```; error: static_assert failed due to requirement 'std::is_convertible<void, bool>::value' ; ""filter expression returns a type that is not convertible to bool""; ```. The error seems quite clear to me. You have some function or expression passed to a call to `df.Filter` somewhere that does not respect the filter signature, i.e. it does not return `bool`. Let me know if you find out where this is happening. Otherwise, you can post here the full program you are trying to compile and I can try to help you. Cheers,; Vincenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13656#issuecomment-1722875388:292,clear,clear,292,https://root.cern,https://github.com/root-project/root/issues/13656#issuecomment-1722875388,2,['clear'],['clear']
Usability,"Dear @xkzl ,. Thanks for your report. As a first attempt at fixing it, could you try specifying the pragma for the enum as simply. ```; #pragma link C++ enum MyEnum;; ```. Note the removal of the `class` keyword.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16496#issuecomment-2365047420:123,simpl,simply,123,https://root.cern,https://github.com/root-project/root/issues/16496#issuecomment-2365047420,2,['simpl'],['simply']
Usability,"Dear Denys,. Thanks for the logs and for the information. So if you cannot use c++17, why not simply use c++14 and disable root7?. Cheers, Bertrand.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12492#issuecomment-1473275035:94,simpl,simply,94,https://root.cern,https://github.com/root-project/root/issues/12492#issuecomment-1473275035,2,['simpl'],['simply']
Usability,"Dear Jonas @guitargeek . my PDF is just a simple 3D functon in each dimenstion is is just a Gaussian + linear polynomial. In total one has 8 components: SSS + SSB + SBS + BSS + SBB + BSB + BBS + BBB . Creation of the function is done via my ostap project. https://github.com/OstapHEP/ostap ; You can see the actual (failing) test code in ; https://github.com/OstapHEP/ostap/blob/master/ostap/fitting/tests/test_fitting_components_3D.py; It does not rely any external data - all data is produced internally ; It is a bit more complicated that is actually needed, since the initial purpose of this particular test fiel was to see the change of the fit resutls with addion ""additional"" components mixed to the the base line model. ; But it relies on ""external"" project https://github.com/OstapHEP/ostap . cheers, Vanya. P.S. I'll provide the stack with debug build tomorrow",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8474#issuecomment-864243565:42,simpl,simple,42,https://root.cern,https://github.com/root-project/root/issues/8474#issuecomment-864243565,2,['simpl'],['simple']
Usability,"Dear Jonas. A huge thank you for your investigation on this, and kind explanation. Almost everything on what you explained is clear to me. But let me give you a tiny point where I don't completely understand. **About the <55 instead of <=55. You are right : I made a mistake there in my minimum example. But the principle of the comment stay. I made the fix in order to ""synchronize"" with the numerical values that you gave in your kind answer (I deduced that you made the fix). -->ok for that. **Case option_normalize_hist=1. Your comment : ""n_times_pdf_continuum->getVal()*bin_width=0.0181818 : here n_times_pdf_continuum is a RooAddPdf, which automatically normalizes itself. You create it from the continuum with 55 bins and bin width one, so I'd expect 1/55 which is indeed 0.0181818""; -->I disagree : my pdf is not just ""pdf_continuum"" : I put *n* times pdf_continuum where n is here the number of bkg : n=2200.; So I would expect that n times pdf should be 2200 * (1/55) = 40. **n_times_pdf_continuum is a RooAddPdf (with one element in the addition) with one parameter of yield, and one parameter of shape, so it is a extended pdf : n_bkg * times a pdf.**. **Case option_normalize_hist=0.; From your log, you changed a bit my code since in my code, I was putting, for the case not normalize :; if (option_normalize_hist); value_pdf=nb_events*pdf->getVal()*bin_width;; else; value_pdf=pdf->getVal()*bin_width;. But I understood your point (and it is clear)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7991#issuecomment-826815525:126,clear,clear,126,https://root.cern,https://github.com/root-project/root/issues/7991#issuecomment-826815525,4,['clear'],['clear']
Usability,"Dear Vincenzo,. I have already managed to work with the redefined trees I need, just with a number of workarounds. The tree files in this case are generated from Les Houches event files using the ExRootLHEFConverter from ExRootAnalysis. As such the branches are custom classes, which can be found in the ExRootAnalysis source files. I can't actually snapshot individual columns without gettting an error as there are TClonesArray column headers which specify the structure of the branches. The obvious fix would be to snapshot the column plus the header, but then that also gives me an error. I understand that Redefine is ideally used for columns, however I need to be able to apply different redefinitions to different leaves within a branch. Do RDataFrames just not support rewriting leaves/nested columns? The columns seem to actually be doing what I'd like before snapshotting. It seems like there's not a simple solution where I get to benefit from using RDataFrame and keep the tree structure untouched. I need to be able to add rows of data to each entry within a leaf (I'm actually concatenating multiple trees), and TTrees don't allow this as far as I can see. I guess I could define a new TTree by hand, setup the branches and fill new arrays from my original trees with the redefinitions I need,(just by iterating over every entry and data value). But then I'm still changing my TTree stucture, as with snapshot. Maybe next time I'll just start by rewriting ExRootLHEFConverter to take the data from two .lhe files, or just stick to TTrees, but to be fair this project has been my first attempt at using ROOT/C++. You code you learn!. What I am trying to do may be a bit of a niche use case, but I hope some of what I wrote is useful to you. Regards, ; Marina",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13846#issuecomment-1760467268:911,simpl,simple,911,https://root.cern,https://github.com/root-project/root/issues/13846#issuecomment-1760467268,4,"['learn', 'simpl']","['learn', 'simple']"
Usability,"Dear Wolf,. there was a strange interval of time between the submission of the patch and its acceptance. I now merged this PR and the three patches you proposed on the root forum: thanks a lot - your and Paul's code represents a clear added value for ROOT! I am still ironing out some issues with the file here https://root.cern.ch/phpBB3/viewtopic.php?f=15&t=22880#p100922 .; I cannot unfortunately comment on the pending invitation since I am not involved in the organisation of the IML meetings. Cheers,; Danilo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/327#issuecomment-280628922:229,clear,clear,229,https://root.cern,https://github.com/root-project/root/pull/327#issuecomment-280628922,1,['clear'],['clear']
Usability,"Diagnostic findings:. Parameters are not saved unless there is a constraint due to [this line](https://root.cern.ch/doc/v624/RooMCStudy_8cxx_source.html#l00197). The documentation makes no mention of the need for constraints, and the use case without constraints is clear. . *External* constraints do not work because of the [use](https://root.cern.ch/doc/v624/RooMCStudy_8cxx_source.html#l00189) of `RooAbsPdf::getAllConstraints`, which does not account for external constraints, to determine the existence of constraints.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9490#issuecomment-1003615961:266,clear,clear,266,https://root.cern,https://github.com/root-project/root/issues/9490#issuecomment-1003615961,2,['clear'],['clear']
Usability,"Discussed and checked the problem with @pcanal . The root cause is that `TTree::CopyAddresses` has an implicit assumption that the input and output branches are of the same kind, while in this case we have a `TBranchElement` in input and a simple `TBranch` in output. In particular, `TBranchElement::SetAddress` would apply a correction to the wrong offset returned by `TBranchElement::GetAddress`, but `TBranch::SetAddress` does not. This bug is absolutely terrible: if the input dataset consists of multiple trees, starting from the second tree data members of types that were saved as TBranchElements are written out wrongly by Snapshot. The plan is the following:. 1. add a check in `TTree::CopyAddresses` that input and output branches are of the same kind, print an error otherwise; 2. refactor `Snapshot` so that instead of relying on `TChain::AddClone` and `TTree::CopyAddresses` to update the addresses of the output branches we instead reset the branches manually based on the addresses provided by TTreeReaderValue access -- we'll use the `TNotify` mechanism to reset the branches every time TChain switches input tree",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8295#issuecomment-852277296:240,simpl,simple,240,https://root.cern,https://github.com/root-project/root/issues/8295#issuecomment-852277296,2,['simpl'],['simple']
Usability,"Discussion with @eguiraud and @vepadulano:; - Rename DataSource to Dataset; - Add type and name of dataset; - Add type of datasource; - Number of slots; - Make ""Numbers of ..."" and other information a simple table; - Add it to the cheat sheet. To do so we need an additional public API:; - GetDatasetInfo, returns string like `/path/to/file:name`, TBD. I may put in all information except the dataset info first and update the output of `Describe` later. `Describe` is API-wise fixed but it's documented that the content of the returned string can change since it's meant for interactive usage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7561#issuecomment-817629082:201,simpl,simple,201,https://root.cern,https://github.com/root-project/root/issues/7561#issuecomment-817629082,2,['simpl'],['simple']
Usability,Do I understand correctly this affects only scoped enums within a vector? Can I simply fix it on my side by moving to `enum class Foo : int {}`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16312#issuecomment-2320321003:80,simpl,simply,80,https://root.cern,https://github.com/root-project/root/issues/16312#issuecomment-2320321003,2,['simpl'],['simply']
Usability,"Do we need to keep the credential file around during the time that the build happens? Or can we delay the creation of this file until after the build? Or remove it before the build starts? I understand that the CI workflow can be maliciously changed - but a change to the CI workflow is a very visible change, more than a simple addition of `print some credential file` as part of the build system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12201#issuecomment-1412357738:322,simpl,simple,322,https://root.cern,https://github.com/root-project/root/pull/12201#issuecomment-1412357738,2,['simpl'],['simple']
Usability,"Do you really want to destroy the arrays ? It is not better to leave the space allocated in memory to be filled back by other points, like clear() on a std::vector ? ; Otherwise, I think this function is not needed. There is already a TGraph::Set(0). Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/39#issuecomment-64431855:139,clear,clear,139,https://root.cern,https://github.com/root-project/root/pull/39#issuecomment-64431855,1,['clear'],['clear']
Usability,Do you see the same memory usage?. Also notice that the issue with the first reproducer might simply be some issue with my attempt to swap the arrow buffers for the std::vector.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11853#issuecomment-1343199135:94,simpl,simply,94,https://root.cern,https://github.com/root-project/root/issues/11853#issuecomment-1343199135,2,['simpl'],['simply']
Usability,Do you understand why the PR is not marked as solved? I can't see any unmerged commits. I simply closed it by hand.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/280#issuecomment-253759853:90,simpl,simply,90,https://root.cern,https://github.com/root-project/root/pull/280#issuecomment-253759853,1,['simpl'],['simply']
Usability,Doesn't https://github.com/root-project/cling/issues/430 require a simpler fix by adding libSerialization to the list of linked libraries?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15563#issuecomment-2119129084:67,simpl,simpler,67,https://root.cern,https://github.com/root-project/root/pull/15563#issuecomment-2119129084,2,['simpl'],['simpler']
Usability,"DrawClone also create a new object object see line 225 [here](https://root.cern/doc/master/TObject_8cxx_source.html#l00219) . The problem with DrawClone is that it will go in the SelectedPad, not in the Pad define by cd()... They may coincide sometime but not always. So, I think it is better to make it clear a Clone is needed to avoir deletion. Then this object is drawn ... but the primary thing is to avoid deletion.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5680#issuecomment-633535272:304,clear,clear,304,https://root.cern,https://github.com/root-project/root/pull/5680#issuecomment-633535272,2,['clear'],['clear']
Usability,DrawClone draws in in the SelectedPad see https://root.cern/doc/master/classTObject.html#a7cd0f76ae1791c469f9472a9d4c8d6f9; It was initially meant to be used interactively to draw an object from a pad to the selected one.; The question is more: Why do we need DrawClone in these examples (a simple Draw should be fine) ? I do not have FITS installed right now. I will need to make a new ROOT install with it to try.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5680#issuecomment-633400581:291,simpl,simple,291,https://root.cern,https://github.com/root-project/root/pull/5680#issuecomment-633400581,2,['simpl'],['simple']
Usability,"During the upgrade to LLVM 18, we enabled JITLink for AArch64 on Linux, because we had to (there were problems with RuntimeDyld that we could not solve). In order to switch x86 as well, we need a solution for `CLING_DEBUG` and `CLING_PROFILE`. It's not clear to me how this works with JITLink, does it have an equivalent interface to `registerJITEventListener`? Maybe @lhames can comment...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14209#issuecomment-2342696358:253,clear,clear,253,https://root.cern,https://github.com/root-project/root/issues/14209#issuecomment-2342696358,2,['clear'],['clear']
Usability,"E.g. ubu16 uses it. I like to attribute who wrote the patch. Learned that from llvm, still like it :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3866#issuecomment-496149925:61,Learn,Learned,61,https://root.cern,https://github.com/root-project/root/pull/3866#issuecomment-496149925,1,['Learn'],['Learned']
Usability,Enabling clang-format feedback.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/137#issuecomment-289756288:22,feedback,feedback,22,https://root.cern,https://github.com/root-project/root/pull/137#issuecomment-289756288,1,['feedback'],['feedback']
Usability,Errors above were due to some options unrecognized by `root` were actually necessary for other callables in the test. Last commit moves the check to `TRint` and also now checks if there are multiple unrecognized options issued by the user:. ```; $ root --random -z --nonexistingoption; root: unrecognized option '--random'; root: unrecognized option '-z'; root: unrecognized option '--nonexistingoption'; Try 'root --help' for more information.; ```. Also changed to using `std::cerr` for simplicity. Before merging we can discuss the correct output stream,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8868#issuecomment-902501605:489,simpl,simplicity,489,https://root.cern,https://github.com/root-project/root/pull/8868#issuecomment-902501605,2,['simpl'],['simplicity']
Usability,"Even if I remove all icons from build directory - it does not crash for me.; Seems to be warning about missing icon is not direct cause of the segfault,. From the backtrace it is not clear at which moment ROOT crashes.; Can you try to run in the debugger?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14247#issuecomment-1898343006:183,clear,clear,183,https://root.cern,https://github.com/root-project/root/issues/14247#issuecomment-1898343006,2,['clear'],['clear']
Usability,"Even simpler reproducer, that doesn't depend on `TObject` at all (sorry for the noise); ```py; import ROOT. ROOT.gInterpreter.Declare(; '''; class A {};; class B: public A {};; class C: public B {};. void myfunc(const B &b){; std::cout << ""B"" << std::endl;; }. void myfunc(const C &c){; std::cout << ""c"" << std::endl;; }. '''). ROOT.myfunc(ROOT.B()); ROOT.myfunc(ROOT.C()); ```. output:; ```; B; B; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8817#issuecomment-896106638:5,simpl,simpler,5,https://root.cern,https://github.com/root-project/root/issues/8817#issuecomment-896106638,2,['simpl'],['simpler']
Usability,"Exactly, It looks like a bug in `nbconvert`. This polite the ref guide build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10428#issuecomment-1105055702:65,guid,guide,65,https://root.cern,https://github.com/root-project/root/pull/10428#issuecomment-1105055702,2,['guid'],['guide']
Usability,"Example of failure:``` java.lang.IllegalArgumentException: Could not instantiate {delegate={$class=XUnitBuilder, testTimeMargin=3000, thresholdMode=1, thresholds=[{$class=FailedThreshold, failureNewThreshold=0, failureThreshold=0, unstableNewThreshold=0, unstableThreshold=0}, {$class=SkippedThreshold, failureNewThreshold=, failureThreshold=, unstableNewThreshold=, unstableThreshold=}], tools=[{$class=CTestType, deleteOutputFiles=true, failIfNotNew=false, pattern=build/Testing/*/Test.xml, skipNoTestFiles=false, stopProcessingIfError=true}]}} for org.jenkinsci.plugins.workflow.steps.CoreStep: java.lang.UnsupportedOperationException: no known implementation of interface jenkins.tasks.SimpleBuildStep is named XUnitBuilder ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7901#issuecomment-829093239:690,Simpl,SimpleBuildStep,690,https://root.cern,https://github.com/root-project/root/pull/7901#issuecomment-829093239,1,['Simpl'],['SimpleBuildStep']
Usability,Excellent notes. Do we want to include brief mentions of the PoW items which were addressed (clearly w/o linking to the PoW),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15630#issuecomment-2128825206:93,clear,clearly,93,https://root.cern,https://github.com/root-project/root/pull/15630#issuecomment-2128825206,2,['clear'],['clearly']
Usability,"Excellent reason. It's also likely only needed in very specific situations, i.e. usability is not really a concern here. I'll do a review the patch; looked good on a first quick glimpse!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/130#issuecomment-170829394:81,usab,usability,81,https://root.cern,https://github.com/root-project/root/pull/130#issuecomment-170829394,1,['usab'],['usability']
Usability,"Excellent work, @bendavid and apologies for not doing this myself, in time. Would it be an option to simply repeat the lookup without the RAII in case of failure to find an overload? It's only in the error case, where performance isn't as crucial anyway, and simplifies the interplay between PyROOT/cppyy and cling.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11854#issuecomment-1455544084:101,simpl,simply,101,https://root.cern,https://github.com/root-project/root/issues/11854#issuecomment-1455544084,4,['simpl'],"['simplifies', 'simply']"
Usability,"FDATA_SECTIONS - Success; -- Performing Test CXX_SUPPORTS_FDATA_SECTIONS; -- Performing Test CXX_SUPPORTS_FDATA_SECTIONS - Success; CMake Warning (dev) at /usr/lib/llvm/15/lib/cmake/llvm/HandleLLVMOptions.cmake:1000 (option):; Policy CMP0077 is not set: option() honors normal variables. Run ""cmake; --help-policy CMP0077"" for policy details. Use the cmake_policy command to; set the policy and suppress this warning. For compatibility with older versions of CMake, option is clearing the; normal variable 'LLVM_ENABLE_EH'.; Call Stack (most recent call first):; CMakeLists.txt:95 (include); This warning is for project developers. Use -Wno-dev to suppress it. CMake Warning (dev) at /usr/lib/llvm/15/lib/cmake/llvm/HandleLLVMOptions.cmake:1001 (option):; Policy CMP0077 is not set: option() honors normal variables. Run ""cmake; --help-policy CMP0077"" for policy details. Use the cmake_policy command to; set the policy and suppress this warning. For compatibility with older versions of CMake, option is clearing the; normal variable 'LLVM_ENABLE_RTTI'.; Call Stack (most recent call first):; CMakeLists.txt:95 (include); This warning is for project developers. Use -Wno-dev to suppress it. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeDependentOption.cmake:75 (option):; Policy CMP0077 is not set: option() honors normal variables. Run ""cmake; --help-policy CMP0077"" for policy details. Use the cmake_policy command to; set the policy and suppress this warning. For compatibility with older versions of CMake, option is clearing the; normal variable 'LLVM_EXPORT_SYMBOLS_FOR_PLUGINS'.; Call Stack (most recent call first):; /usr/lib/llvm/15/lib/cmake/llvm/HandleLLVMOptions.cmake:1157 (CMAKE_DEPENDENT_OPTION); CMakeLists.txt:95 (include); This warning is for project developers. Use -Wno-dev to suppress it. -- Looking for os_signpost_interval_begin; -- Looking for os_signpost_interval_begin - not found; -- Found PythonInterp: /usr/bin/python (found version ""3.10.9""); -- Performing Test",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11920#issuecomment-1370394653:6630,clear,clearing,6630,https://root.cern,https://github.com/root-project/root/issues/11920#issuecomment-1370394653,2,['clear'],['clearing']
Usability,"FUD? The new way of finding python in 6.20 required python-dev, breaking conda builds. The introduction of modules, not disabled by minimal, broke mac-debug and Windows builds. In the core libraries, new code appeared that casted pointer types to long, causing more Win64 breakage. Not that ROOT runs on Win64 at all and requires the exact same compiler on the user's end on Win32. Users can also not trivially switch C++ versions unless they rebuild from source, this on any platform. Several of these issues were also reported on the ROOT forum. What you are showing is that *you* are able to build ROOT on some carefully prepared machines with your carefully selected set of compilers. In that list of nightlies, you are not even building binaries on one machine and running them on others. Again, this is why I forked: you obviously have different goals in mind when you dismiss clear problems as ""FUD."" I can't work in such an environment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6393#issuecomment-703676872:883,clear,clear,883,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-703676872,2,['clear'],['clear']
Usability,"Fair enough. The LLVM 16 is revealing a part of the problem we had not solved yet :) [Note the simplified example is different from the real use case in that there is no expectation of recovery in that case while inside Core/Meta there is; i.e. once the problem is fixed, the command line reproducer will (and should) still fail ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13815#issuecomment-1757758714:95,simpl,simplified,95,https://root.cern,https://github.com/root-project/root/issues/13815#issuecomment-1757758714,2,['simpl'],['simplified']
Usability,Fair enough. We need to make that the distinction is clear.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13917#issuecomment-1778121890:53,clear,clear,53,https://root.cern,https://github.com/root-project/root/issues/13917#issuecomment-1778121890,2,['clear'],['clear']
Usability,"Final note: In the commits left on the branch there was a ""merge"" commit, we want to avoid them. When updating your branch with the content of the master branch, please use 'git rebase' rather than `git merge`. Also we tend to prefer to simplify the history by keeping only the effective commits. [For example, in this case, you could (have done)/do `git rebase -i` to remove the commit that was reverse and its reversal :)]. For this PR, I effectively handled these changes by doing a ""merge and squash"" but this works out only for PR that have one effective commit (the case here).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8425#issuecomment-865184527:237,simpl,simplify,237,https://root.cern,https://github.com/root-project/root/pull/8425#issuecomment-865184527,2,['simpl'],['simplify']
Usability,"Finally coming back to this one:; -Simplified a little the implementation of ExecPlugin to attempt the ""fast path"" automatically, while also allowing to explicitly provide the types; -replaced gPluginManagerMutex with the internal RWLock of the underlying TList as suggested",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11631#issuecomment-1460756802:35,Simpl,Simplified,35,https://root.cern,https://github.com/root-project/root/pull/11631#issuecomment-1460756802,1,['Simpl'],['Simplified']
Usability,"Fine, I'll open a ticket if I find something in the User's Guide missing in the Manual (or the reference guide). For me this issue is not resolved in this state of things. I would rather simply fix that. However, if your workflow says that you can close that, you can do that - it's your project and your decisions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7284#issuecomment-785976241:59,Guid,Guide,59,https://root.cern,https://github.com/root-project/root/issues/7284#issuecomment-785976241,5,"['Guid', 'guid', 'simpl']","['Guide', 'guide', 'simply']"
Usability,"First simple tests:. ### XRD_PARALLELEVTLOOP=4; In theory this should use 4 threads, but there are 10 instead; ```; $ XRD_PARALLELEVTLOOP=4 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; [784MB/2.09GB][ 36%][==================> ][11.04MB/s]; ```; ```; $ ps aux | grep xrdcp; vpadulan 2875 14.5 0.4 698364 77920 pts/0 Sl+ 12:15 0:03 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; $ ps hH p 2875 | wc -l; 10; ```; ### XRD_PARALLELEVTLOOP=1; This should use 1 thread, I see 7; ```; $ XRD_PARALLELEVTLOOP=1 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; [184MB/2.09GB][ 8%][====> ][10.82MB/s]; ```. ```; $ ps aux | grep xrdcp; vpadulan 3000 20.0 0.2 608092 46488 pts/0 Sl+ 12:18 0:00 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; $ ps hH p 3000 | wc -l; 7; ```. ### XRD_WORKERTHREADS=1 XRD_PARALLELEVTLOOP=1; I have found another environment variable in the xrootd docs https://xrootd.slac.stanford.edu/doc/xrdcl-docs/xrdcldocs.pdf described as ""Number of threads processing user callbacks."" with default value 3 . Setting both variables to 1 leads to 5 threads. ```; $ XRD_WORKERTHREADS=1 XRD_PARALLELEVTLOOP=1 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; [192MB/2.09GB][ 8%][====> ][10.67MB/s]; ```. ```; $ ps aux | grep xrdcp; vpadulan 3036 17.3 0.2 460628 48240 pts/0 Sl+ 12:21 0:00 xrdcp root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root .; $ ps hH p 3036 | wc -l; 5; ```. So for now:; 1. Setting XRD_PARALLELEVTLOOP=1 makes the xrdcp process use 7 thread, of which 3 are explicable by the default value of XRD_WORKERTHREADS, 1 is the event ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7709#issuecomment-847752725:6,simpl,simple,6,https://root.cern,https://github.com/root-project/root/issues/7709#issuecomment-847752725,2,['simpl'],['simple']
Usability,"Fixed in #11553 with the caveat that in order to be able to pass temporaries one should use e.g. `""const RVecF""` in the signature passed to `Numba.Declare` rather than simply `""RVecF""`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11294#issuecomment-1597506324:168,simpl,simply,168,https://root.cern,https://github.com/root-project/root/issues/11294#issuecomment-1597506324,2,['simpl'],['simply']
Usability,"Fixed the Travis build, moved build script, and added the cmake build-and-test test to the tests (Turns out, CMake's own source has lots of examples of that since that's what a test of CMake itself is generally doing). Fixed a bug in the calculation of the standalone directory, and simplified the CMake code a bit. `make package_source` now produces an error if in used in the wrong configuration. I've tried to avoid making any changes to the parts of Travis that are not affected, but there's a bug in the yaml: making a node anchor is also a normal definition; so if no packages are added, they get the default (which includes a non-existent timeout package). I'll see if I can make a separate PR with some improvements for Travis clarity/speed not related to Minuit2. This PR should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1680#issuecomment-375310840:283,simpl,simplified,283,https://root.cern,https://github.com/root-project/root/pull/1680#issuecomment-375310840,2,['simpl'],['simplified']
Usability,"Fixed the unused variable warnings, and simplified the template overloads so that Book can be called directly from python. (At least in the jitted case. I'm not sure how to call a template function like this from cppyy with partially specified template parameters, and it's not possible to explicitly specify the Helper type because it comes after the parameter pack.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7630#issuecomment-804399962:40,simpl,simplified,40,https://root.cern,https://github.com/root-project/root/pull/7630#issuecomment-804399962,2,['simpl'],['simplified']
Usability,Following Philippe's suggestion for the test (thanks!) it's clear that the current logic is not enough.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8934#issuecomment-908960572:60,clear,clear,60,https://root.cern,https://github.com/root-project/root/pull/8934#issuecomment-908960572,2,['clear'],['clear']
Usability,Following https://root-forum.cern.ch/t/simple-function-working-with-6-28-04-but-not-with-6-30-04/58975,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15227#issuecomment-2053932864:39,simpl,simple-function-working-with-,39,https://root.cern,https://github.com/root-project/root/pull/15227#issuecomment-2053932864,2,['simpl'],['simple-function-working-with-']
Usability,"For all our supported ABIs, all pointers to global / static functions, whatever their type, have the same size. If that ever changes we will have lots and lots of problems. So yes, your solution is correct, while mine is relying on undefined behavior but a lot simpler :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2652#issuecomment-423462064:261,simpl,simpler,261,https://root.cern,https://github.com/root-project/root/pull/2652#issuecomment-423462064,2,['simpl'],['simpler']
Usability,"For bench-marking the change can you run and compare with and without the PR:; ```; #include ""TChain.h"". void callfuncbench(int repeat = 1000) ; {; TChain ch(""ntuple""); ; for(int i = 0 ; i < repeat; ++i); ch.Draw(""TMath::TanH(px)"", """", ""goff""););; }; ```; This demonstrates a simple common (indirect) usage of CallFunc. . Thanks,; Philippe. They are also usage of CallFunc in Signal/Slot mechanism and QT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11252#issuecomment-1251578429:276,simpl,simple,276,https://root.cern,https://github.com/root-project/root/pull/11252#issuecomment-1251578429,2,['simpl'],['simple']
Usability,"For completeness dev3/Fri vs dev3/Thu. ```; ( lb-set-platform x86_64-centos7-gcc12-opt ; source /cvmfs/sft.cern.ch/lcg/views/dev3/Fri/${CMTCONFIG}/setup.sh ; echo $ROOTSYS ; time python -m profile ./tst100.py | tee root627_friday.txt ; ...; real	0m45.976s; user	0m36.305s; sys	0m5.073s. ( lb-set-platform x86_64-centos7-gcc12-opt ; source /cvmfs/sft.cern.ch/lcg/views/dev3/Thu/${CMTCONFIG}/setup.sh ; echo $ROOTSYS ; time python -m profile ./tst100.py | tee root627_thursday.txt ); ... real	0m31.001s; user	0m12.790s; sys	0m4.830s. ```. this time no factor of 2, but 1.5 . [log-files](https://gist.github.com/VanyaBelyaev/0e55d321d554af63b56b8f881804e7eb). but much more important for me - that [GitHub Action](https://github.com/OstapHEP/ostap/actions) tests for my real project clearly show a jump in bad direction for CPU performance - from something a bit smaller than 2 hours to something exceeding 6 hours with fails due to timeover",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11927#issuecomment-1361014198:780,clear,clearly,780,https://root.cern,https://github.com/root-project/root/issues/11927#issuecomment-1361014198,2,['clear'],['clearly']
Usability,"For completeness, `RNTupleImporter` already allows to supply a tree name:; ```c++; auto imp = ROOT::Experimental::RNTupleImporter::Create(&chain, ""B2HHH~zstd~10x.ntuple"");; imp->SetNTupleName(“DecayTree”);; imp->Import();; ```; My issue is just about an improvement of user experience.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13088#issuecomment-1612018808:269,user experience,user experience,269,https://root.cern,https://github.com/root-project/root/issues/13088#issuecomment-1612018808,2,['user experience'],['user experience']
Usability,"For me, this is not surprising. Imho, proper documentation could make the behaviour clear. and the case of implicit casting seems as well fine to me. noone will write `v[{0, 0, 1, 1}]` and expect a selection (?). Either doing this or breaking the API and inverting the behaviour? We can fix the selection type and let the index type float (but then with the unexpected implicit casting behaviour, which is bad). So this does not seem to be an option. Am I right that there's no other option to solve this in C++?. Last option could be dropping the feature and stick to `Take(v, idx)`, which is already there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2621#issuecomment-421944127:84,clear,clear,84,https://root.cern,https://github.com/root-project/root/pull/2621#issuecomment-421944127,2,['clear'],['clear']
Usability,"For the record, I have done what I outlined above and updated the PR. I do see some drastic improvements for some of our workflows (250MB out of 1GB) where we have many processes initialising the interpreter. For others, where the usage of ROOT is limited to reading files in a single process, the improvement is not so obvious. Simply opening a file does show improvement as well (I am down to 49MB, when I also patch the FileInfo vector in the HeaderSearch). The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache?. Notice I have also submitted the patch to llvm itself and it passes their CI (https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1720185060:329,Simpl,Simply,329,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1720185060,1,['Simpl'],['Simply']
Usability,"For the record, as you might have seen in https://github.com/AliceO2Group/AliceO2/pull/13464, simply changing the types breaks reading back old files (i.e. two shorts are read in an int). Could you comment when do you expect to have a fix for this on your side which applies to 6.32.2 and if it will allow old code to still read new data (and viceversa new code / old data)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16312#issuecomment-2333276845:94,simpl,simply,94,https://root.cern,https://github.com/root-project/root/issues/16312#issuecomment-2333276845,2,['simpl'],['simply']
Usability,"For the record, can you elaborate on why this is a blocker for RooFit development? I imagine you can have a simple `Internal::Foreach(task, args)` function that calls `TThreadExecutor` or falls back to STL algorithms if IMT=OFF or `!ROOT::IsImplicitMTEnabled()`. That's pretty much what RDF does.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6298#issuecomment-686548500:108,simpl,simple,108,https://root.cern,https://github.com/root-project/root/pull/6298#issuecomment-686548500,2,['simpl'],['simple']
Usability,"Found it! As it turns out, it is a ""simple"" 2 line fix:; https://github.com/stephanlachnit/root/commit/65ae229c6ba458c610f0a41d32b798a132f385e4. We need to set `LLVM_LINK_LLVM_DYLIB=OFF` for clang, this will prefer static libs. The only disadvantage is that links against *all* LLVM libraries, which means additionally dependencies might need to be installed. In particular LLVM 16 is broken due to https://github.com/llvm/llvm-project/issues/62300.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12156#issuecomment-1666954709:36,simpl,simple,36,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1666954709,2,['simpl'],['simple']
Usability,"From a user point of view, the text in the ROOT manual now seems sufficiently clear:. - Behaviour for non-TTree objects [1]:. ""By default, existing objects are not replaced when writing new objects with the same name. Instead, a new namecycle is created, denoted by ;2, ;3, etc. When retrieving the object from the file, ROOT will automatically pick the highest namecycle. Some objects, such as histograms, automatically register themselves with the current TDirectory (e.g. the last TFile opened): these objects will appear as OBJ entries, without a namecycle. See also → [Object ownership](https://root.cern/manual/object_ownership). For the particular case of TTree, cycles only store metadata, see [Baskets, clusters and the tree header](https://root.cern/manual/trees/#baskets-clusters-and-the-tree-header)."". - Behaviour for TTree objects [2]:. ""Multiple updates of these headers can often be found in files (treename;1, treename;2 etc, called cycles, see → [Opening and inspecting a ROOT file](https://root.cern/manual/root_files/#opening-and-inspecting-a-root-file)). Only the last one (also accessible as treename) knows about all written baskets."". [1] https://root.cern/manual/root_files/#opening-and-inspecting-a-root-file; [2] https://root.cern/manual/trees/#baskets-clusters-and-the-tree-header",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14584#issuecomment-1943874457:78,clear,clear,78,https://root.cern,https://github.com/root-project/root/issues/14584#issuecomment-1943874457,2,['clear'],['clear']
Usability,From the test results I learned that we already have a mechanism in ROOT to mark Python non-optional test dependencies:; https://github.com/root-project/root/commit/2917c6e7153c426507227d9fdba1937fca7535aa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15306#issuecomment-2069022427:24,learn,learned,24,https://root.cern,https://github.com/root-project/root/pull/15306#issuecomment-2069022427,2,['learn'],['learned']
Usability,"Further detail: Before CMake 3.10, `LIBXML2_INCLUDE_DIR` was the only variable. Then, after that, both are defined. `LIBXML2_INCLUDE_DIR` is just the libxml include directory, and `LIBXML2_INCLUDE_DIRS` is all the includes, including that one, that libxml needs. In some cases, this can contain extra required directories that are not otherwise picked up. If the DIRS variable is not defined, then it does not hurt to have it here, and listing the same directory twice is okay. I could do, if you prefer,. ```cmake; if(DEFINED LIBXML2_INCLUDE_DIRS); include_directories(${LIBXML2_INCLUDE_DIRS}); else(); # Remove when CMake <3.10 support is dropped; include_directories(${LIBXML2_INCLUDE_DIR}); endif(); ```; Less simple",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3381#issuecomment-461411896:714,simpl,simple,714,https://root.cern,https://github.com/root-project/root/pull/3381#issuecomment-461411896,2,['simpl'],['simple']
Usability,"Glad if this helped someone.; However, I don't understand how users are supposed to learn about this feature (without googling).; There is nothing in the release notes on that. ; https://root.cern/doc/v630/release-notes.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13606#issuecomment-2104829522:84,learn,learn,84,https://root.cern,https://github.com/root-project/root/pull/13606#issuecomment-2104829522,2,['learn'],['learn']
Usability,Good catch! indeed the real one is DistancetoPtrimitve (small t). The ones with capital T in the index file are typos I guess. In particular in the old User guide. I guess we can leave it as this guide is obsolete now and not updated anymore. ; But we can also fix them for clarity. Those with capital T in the TGeo code are more suspect I guess @agheata should have a look.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16087#issuecomment-2244578228:157,guid,guide,157,https://root.cern,https://github.com/root-project/root/issues/16087#issuecomment-2244578228,4,['guid'],['guide']
Usability,"Good idea! I would even suggest further simplifying it, using this header-only parser: https://github.com/CLIUtils/CLI11",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16090#issuecomment-2244826382:40,simpl,simplifying,40,https://root.cern,https://github.com/root-project/root/pull/16090#issuecomment-2244826382,2,['simpl'],['simplifying']
Usability,"Good move. The CI is quite demanding these days. If the change works there AND in the Conda CI, the coverage should be rather good. Clearly, we should add a note in the RN to inform owners of large stacks, e.g. LHC experiments, of this change in case something behaves differently in that context.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15891#issuecomment-2180601848:132,Clear,Clearly,132,https://root.cern,https://github.com/root-project/root/pull/15891#issuecomment-2180601848,1,['Clear'],['Clearly']
Usability,"Great idea, @pcanal - for instance by providing simply a `MemoryBuffer` to clang for the overlay! I'll merge this here now, to unblock CMS, and then we go from there!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3179#issuecomment-447882137:48,simpl,simply,48,https://root.cern,https://github.com/root-project/root/pull/3179#issuecomment-447882137,2,['simpl'],['simply']
Usability,"Great simplification, which matches well the PROOF=OFF by default in master: thanks. This is not very important, but could users rely on some other sort of parallelism, e.g. T{Thread/Process}Executor?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14993#issuecomment-2002334241:6,simpl,simplification,6,https://root.cern,https://github.com/root-project/root/pull/14993#issuecomment-2002334241,2,['simpl'],['simplification']
Usability,Great! We should probably squash the N calls (when in multidict mode) into one single call. I am not sure if that should be part of this PR but I think it makes things clearer.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4108#issuecomment-514641210:168,clear,clearer,168,https://root.cern,https://github.com/root-project/root/pull/4108#issuecomment-514641210,2,['clear'],['clearer']
Usability,"Great, thanks! Can you update the commit message (`git commit --amend; git push -f`) to include these findings? That makes the motivation for the change much clearer!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5474#issuecomment-629037999:158,clear,clearer,158,https://root.cern,https://github.com/root-project/root/pull/5474#issuecomment-629037999,2,['clear'],['clearer']
Usability,"Ha, I believe it is simply a problem with this typo https://github.com/vgvassilev/clad/commit/9401215ba3b07ceec26ba460cea6b4a3d128e8c2#r42285026",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6346#issuecomment-691918632:20,simpl,simply,20,https://root.cern,https://github.com/root-project/root/pull/6346#issuecomment-691918632,2,['simpl'],['simply']
Usability,"Ha, that was again a nice rabbit hole. Here's a summary of what I found:; 1. We'll never run into problems with GCC's `libstdc++` since [version 4.5](https://gcc.gnu.org/gcc-4.5/changes.html): ""The default behavior for comparing typeinfo names has changed, so in `<typeinfo>`, `__GXX_MERGED_TYPEINFO_NAMES` now defaults to zero"", which means that `operator==` performs the string comparison in all cases.; 2. `libc++` by now has three different implementations: https://github.com/llvm/llvm-project/blob/066b8f2fc6d584635a017a0a15494ce4460744e3/libcxx/include/typeinfo#L120-L169 For all platforms except Windows and Apple M1, the library ""assume[s] the Itanium C++ ABI and use[s] the Unique implementation"". This may be fine for compiled programs where the linker can unify the `type_info`s, but not if the JIT emits a new copy. I have yet to find an example where this can go wrong, it would be great to have a test that fails if somebody attempts to ""simplify"" things. For this particular method however, the Itanium ABI mandates that the `std::type_info` objects of the checked types live in the run-time support library: https://itanium-cxx-abi.github.io/cxx-abi/abi.html#rtti-emission With exactly one object for those types, even `operator==` cannot mess up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7776#issuecomment-823939722:953,simpl,simplify,953,https://root.cern,https://github.com/root-project/root/pull/7776#issuecomment-823939722,2,['simpl'],['simplify']
Usability,"Hallo Jonas,. thanks a lot for the feedback! My initial interest was to measure the speed of the new implementation. . I have now checked Section 2.3 of [your paper](https://arxiv.org/pdf/2106.02504.pdf) and I have missed this important point! I will add this to my code. . Thanks for the review.; Jirka",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8504#issuecomment-866145966:35,feedback,feedback,35,https://root.cern,https://github.com/root-project/root/issues/8504#issuecomment-866145966,2,['feedback'],['feedback']
Usability,"Hello @guitargeek @couet , I'd like to contribute to this repository. Can you guide me in going about this issue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8758#issuecomment-973032294:78,guid,guide,78,https://root.cern,https://github.com/root-project/root/issues/8758#issuecomment-973032294,2,['guid'],['guide']
Usability,"Hello @philippe554 ,; Indeed, we changed this behaviour a few releases ago, IIRC the reason was that the progressive output implementation had some problems, so we opted for capturing the output and releasing it only at the end, even at the expense of not covering cases such a progress bar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8989#issuecomment-919060975:278,progress bar,progress bar,278,https://root.cern,https://github.com/root-project/root/issues/8989#issuecomment-919060975,2,['progress bar'],['progress bar']
Usability,"Hello @sinnfashen, thank you very much for your PR!. I have rebased it on master, fixed the conflicts and ran your demo in `PTKDTree.C`. Unfortunately, depending on the number of `MAXN`, the code was either crashing, or the parallelization even resulted in a slowdown. As pointed out by @lmoneta and @dpiparo, to merge this it would be necessary to demonstrate a clear speedup in at least some usecases, and even better to show that these usecases also correspond to real-world problems. Since these concerns were not addressed and there was no further reply to the last comment of @lmoneta, I assume that you, @sinnfashen, have moved on from the project and I'll close this PR. Still, if you ever feel like playing with this again, and you can show that the parallelized algorithms performance scales well with the number of threads and gives the correct results, feel free to reopen this PR or open a new one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2202#issuecomment-1808849990:363,clear,clear,363,https://root.cern,https://github.com/root-project/root/pull/2202#issuecomment-1808849990,2,['clear'],['clear']
Usability,"Hello Sergey,, Danillo. Thank you for your suggestions (that we took into consideration ), feedback and prompt response. There is a new suggestion on how to solve this issue. Please check:. <https://its.cern.ch/jira/browse/SPI-2532>; its.cern.ch<https://its.cern.ch/jira/browse/SPI-2532>; [X]<https://its.cern.ch/jira/browse/SPI-2532>. We will keep you informed.; Best regards,; Ilias. On 14 Mar 2024, at 09:32, Sergey Linev ***@***.***> wrote:. @cogevito<https://github.com/cogevito>. Can you try to install libbsd-dev on your node?. —; Reply to this email directly, view it on GitHub<https://github.com/root-project/root/issues/14958#issuecomment-1996852848>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/ADMB4TR5V47G7UK252MEENDYYFODFAVCNFSM6AAAAABEUNYYK6VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTSOJWHA2TEOBUHA>.; You are receiving this because you were mentioned.Message ID: ***@***.***>",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14958#issuecomment-1996872551:91,feedback,feedback,91,https://root.cern,https://github.com/root-project/root/issues/14958#issuecomment-1996872551,2,['feedback'],['feedback']
Usability,"Hello both of you!; Thank you so much for the quick reply!; I went through my text again and didn't notice it repeated itself...! Sorry for that!. Considering the suggestion from @dpiparo , I have checked all the dependencies. Some I had to install, but now they are all in the system. I have tried to go through the cmake again and got the same problems. You suggest me to try from scratch again. I can do this simply by deleting the folders I have created for the installation and redo the process in the page ""build from source""?. I have tried the workaround suggested by @ferdymercury ! Firstly I have tried the snap version and nothing happened. Same errors. Now I have downloaded the pre-compiled version and I can use it, open canvases and browsers with no problem. I will run some macros to compare with the outputs I had previously and check if everything is according to what I had. Eventhough it is already working, I am willing to try and build it from source if that can help you somehow figuring out some kind of challanges you would like to improve in further versions! Please let me know if I can be of any use!. Thank you very much once again! It is always amazing to receive this kind of comprehensible support :))))",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14479#issuecomment-1916915766:412,simpl,simply,412,https://root.cern,https://github.com/root-project/root/issues/14479#issuecomment-1916915766,2,['simpl'],['simply']
Usability,"Hello, I can do that. Just to be clear, that applies only to RooEffGenContex.h and cxx, right? Not RooRealIntegral.cxx, which would change a lot with the ROOT format",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12178#issuecomment-1410285135:33,clear,clear,33,https://root.cern,https://github.com/root-project/root/pull/12178#issuecomment-1410285135,2,['clear'],['clear']
Usability,"Hello. I think this issue is quite relevant, not only for distributed execution, but also for PyROOT usability in general. This is why I proposed these changes, in case they turn out to seem useful https://github.com/root-project/root/pull/13803",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13798#issuecomment-1746991396:101,usab,usability,101,https://root.cern,https://github.com/root-project/root/issues/13798#issuecomment-1746991396,2,['usab'],['usability']
Usability,"Here a simple example of this issue:. **py3:**; ```; >>> import ROOT; >>> ROOT.TObject().__contains__; <bound method __contains__ of <ROOT.TObject object (""TObject"") at 0x39895d0>>; >>> type(ROOT.TObject()).__contains__; <bound method __contains__ of <NULL>>; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1777#issuecomment-378539088:7,simpl,simple,7,https://root.cern,https://github.com/root-project/root/pull/1777#issuecomment-378539088,2,['simpl'],['simple']
Usability,Here are the failing tests (without the `-fno-threadsafe-statics` flag):; ```; 7 - gtest-core-meta-test-testHashRecursiveRemove (Failed); 104 - gtest-tree-treeplayer-test-treetreeplayertestUnit (Failed); 105 - gtest-tree-treeplayer-test-dataframe-friends (Failed); 106 - gtest-tree-treeplayer-test-dataframe-alias (Failed); 107 - gtest-tree-treeplayer-test-dataframe-cache (Failed); 108 - gtest-tree-treeplayer-test-dataframe-callbacks (Failed); 110 - gtest-tree-treeplayer-test-dataframe-interface (Failed); 112 - gtest-tree-treeplayer-test-dataframe-regression (Failed); 113 - gtest-tree-treeplayer-test-dataframe-simple (Failed); 114 - gtest-tree-treeplayer-test-dataframe-snapshot (Failed); 116 - gtest-tree-treeplayer-test-datasource-more (Failed); 125 - tutorial-dataframe-tdf001_introduction (Failed); 126 - tutorial-dataframe-tdf002_dataModel (Failed); 127 - tutorial-dataframe-tdf003_profiles (Failed); 128 - tutorial-dataframe-tdf004_cutFlowReport (Failed); 129 - tutorial-dataframe-tdf005_fillAnyObject (Failed); 130 - tutorial-dataframe-tdf006_ranges (Failed); 131 - tutorial-dataframe-tdf007_snapshot (Failed); 132 - tutorial-dataframe-tdf008_createDataSetFromScratch (Failed); 133 - tutorial-dataframe-tdf009_FromScratchVSTTree (Failed); 134 - tutorial-dataframe-tdf010_trivialDataSource (Failed); 135 - tutorial-dataframe-tdf011_ROOTDataSource (Failed); 136 - tutorial-dataframe-tdf012_DefinesAndFiltersAsStrings (Failed); ```; With errors like:; ```; 131: Processing C:/Users/bellenot/git/master/tutorials/dataframe/tdf003_profiles.C...; 131: IncrementalExecutor::executeFunction: symbol '_Init_thread_header' unresolved while linking function '??__Eid@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@YAXXZcling_module_10_'!; 131: You are probably missing the definition of _Init_thread_header; 131: Maybe you need to load the corresponding shared library?; 131: IncrementalExecutor::executeFunction: symbol '__emutls_get_address' unresolved while li,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1607#issuecomment-364363584:616,simpl,simple,616,https://root.cern,https://github.com/root-project/root/pull/1607#issuecomment-364363584,2,['simpl'],['simple']
Usability,"Here is a implementation that may be naive, but I would argue catches the vast majority of the use cases:; ```c++; constexpr bool compare(float expected, float actual) {; // most simple and most common case; if (actual == expected); return true;. // comparison with an arbitrary small tolerance ; constexpr const float epsilon = std::numeric_limits<float>::epsilon();; const float delta = std::fabs(expected) * epsilon;; if ((actual > expected - delta) and (actual < expected + delta)); return true;; ; return false;; }; ```. If any of the arguments (the weight or the actual increment) is NaN or infinite the function should return `false`, which kind of makes sense in [the above context](https://github.com/root-project/root/issues/6671#issuecomment-2047035457).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6671#issuecomment-2047770259:179,simpl,simple,179,https://root.cern,https://github.com/root-project/root/issues/6671#issuecomment-2047770259,2,['simpl'],['simple']
Usability,"Here is a relevant [issue](https://gitlab.kitware.com/cmake/cmake/-/issues/17735) where this is discussed more in depth. One of the [comments](https://gitlab.kitware.com/cmake/cmake/-/issues/17735#note_487572) in this issue explains the rationale behind overriding `find_package` quite well. If there is a better solution that can work the way the current solution does (i.e. works also for LLVM without having to change its calls to `find_package(ZLIB)`, for example), we can implement it. However, so far I have not found a another way to do it. Maybe now that the required version of CMake is newer than 3.11, we may be able to improve things by using the [FetchContent](https://cmake.org/cmake/help/latest/module/FetchContent.html) module. It may also be possible to use [CMAKE_DISABLE_FIND_\<PackageName\>](https://cmake.org/cmake/help/v3.10/variable/CMAKE_DISABLE_FIND_PACKAGE_PackageName.html) to skip checking for packages if that doesn't force packages to be considered not found when `<PackageName_FOUND>` is then also set by hand. The reality, though, is that CMake still kinda sucks for managing optionally bundled dependencies like ROOT wants to support. As for the undocumented nature of the feature, it's sad but, like the [CDash test measurements](https://cmake.org/cmake/help/latest/command/ctest_test.html?#additional-test-measurements) that were undocumented for a long time, if you offer it, people will try to use it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8633#issuecomment-898406007:1179,undo,undocumented,1179,https://root.cern,https://github.com/root-project/root/issues/8633#issuecomment-898406007,4,['undo'],['undocumented']
Usability,Here is macro which reproduces the problem with simple histogram/latex drawing. [dupl.cxx.txt](https://github.com/root-project/root/files/12418698/dupl.cxx.txt). Important that canvas should be stored/restored from I/O.; Only in such case `ROOT::Detail::HasBeenDeleted` fails,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13506#issuecomment-1689807535:48,simpl,simple,48,https://root.cern,https://github.com/root-project/root/pull/13506#issuecomment-1689807535,2,['simpl'],['simple']
Usability,"Here is the stack trace of the error. Now I just simply use type casting gSystem to TUnixSystem to get rid of defining DispatchTimers() in TSystem. . ```; [zhan0915@hcc-zhan root]$ root -l. A fatal system signal has occurred: segmentation violation error; Thread 1 (Thread 0x7f8b05aa0920 (LWP 10908)):; #0 0x0000003fa220e82d in read () from /lib64/libpthread.so.0; #1 0x00007f8b05fa3c64 in SignalSafeRead (fd=3, inbuf=inbuf; entry=0x7ffd70966680 ""\001"", timeout=timeout; entry=-1, len=1) at /home/bockelman/zhan0915/root/core/unix/src/TUnixSigHandling.cxx:195; #2 0x00007f8b05fa4435 in TUnixSigHandling::StackTraceTriggerThread () at /home/bockelman/zhan0915/root/core/unix/src/TUnixSigHandling.cxx:816; #3 0x00007f8b05fa450c in TUnixSigHandling::DispatchSignals (this=0x1534f70, sig=kSigSegmentationViolation) at /home/bockelman/zhan0915/root/core/unix/src/TUnixSigHandling.cxx:552; #4 <signal handler called>; #5 0x0000003fa1e811a1 in __strlen_sse2 () from /lib64/libc.so.6; #6 0x00007f8b0255f728 in length (__s=0x0) at /opt/rh/devtoolset-2/root/usr/include/c++/4.8.2/bits/char_traits.h:259; #7 assign (__s=0x0, this=0x7ffd70966c40) at /opt/rh/devtoolset-2/root/usr/include/c++/4.8.2/bits/basic_string.h:1131; #8 operator= (__s=0x0, this=0x7ffd70966c40) at /opt/rh/devtoolset-2/root/usr/include/c++/4.8.2/bits/basic_string.h:555; #9 TCling::TCling (this=0x1594620, name=<optimized out>, title=<optimized out>) at /home/bockelman/zhan0915/root/core/meta/src/TCling.cxx:1068; #10 0x00007f8b025602ae in CreateInterpreter (interpLibHandle=<optimized out>) at /home/bockelman/zhan0915/root/core/meta/src/TCling.cxx:578; #11 0x00007f8b05e2daa8 in TROOT::InitInterpreter (this=0x7f8b062a5520 <ROOT::Internal::GetROOT1()::alloc>) at /home/bockelman/zhan0915/root/core/base/src/TROOT.cxx:1821; #12 0x00007f8b05e2de26 in ROOT::Internal::GetROOT2 () at /home/bockelman/zhan0915/root/core/base/src/TROOT.cxx:363; #13 0x00007f8b05f03845 in TApplication::TApplication (this=0x1582e40, appClassName=0x401350 ""Rint""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/134#issuecomment-195488572:49,simpl,simply,49,https://root.cern,https://github.com/root-project/root/pull/134#issuecomment-195488572,1,['simpl'],['simply']
Usability,"Here is the suspected code. ```; static TPad * tmpGuideLinePad;. //delete all existing Guidelines and create new invisible pad; if (tmpGuideLinePad) {; if (object == tmpGuideLinePad) { // in case of funny button click combination.; tmpGuideLinePad->Delete();; tmpGuideLinePad = 0;; return;; }; tmpGuideLinePad->Delete();; tmpGuideLinePad = 0;; }. // Get Primitives; prims = gPad->GetListOfPrimitives();; n = TMath::Min(15,prims->GetSize());; Int_t lineColor = TColor::GetColor(239, 202, 0);. TAttBBox2D *cur = dynamic_cast<TAttBBox2D *>( object );; if (cur) {; //create invisible TPad above gPad; if (!tmpGuideLinePad){; tmpGuideLinePad = new TPad(""tmpGuideLinePad"", ""tmpGuideLinePad"", 0, 0, 1, 1);; Double_t x1, y1, x2, y2;; gPad->GetRange(x1, y1, x2, y2);; tmpGuideLinePad->Range(x1, y1, x2, y2);; tmpGuideLinePad->SetFillStyle(0);; tmpGuideLinePad->SetFillColor(0);; tmpGuideLinePad->Draw();; tmpGuideLinePad->cd();; gPad->GetRange(x1, y1, x2, y2);; }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6511#issuecomment-701383921:87,Guid,Guidelines,87,https://root.cern,https://github.com/root-project/root/pull/6511#issuecomment-701383921,1,['Guid'],['Guidelines']
Usability,"Here you go!; - It checks pdg against TGeoROOT with tolerance; - It checks pdg against TGeoG4 with tolerance; - It checks TGeoROOT against TGeoG4 with numerical tolerance 1e-15 (some math simply is different); ```; $> root.exe test_material_units.C; ------------------------------------------------------------------; | Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jul 27 2022, 14:22:00 |; | From heads/fix_radlen_g4units@v6-25-01-4723-g1344269685 |; | With |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. root [0] ; Processing ../test_material_units.C...; Using ROOT system of units. ; Element: SI Z=14 N=28.000000 A=28.085500 [g/mole]; Material Mat_Si_TGeo A=28.0855 Z=14 rho=2.329 radlen=9.35361 intlen=45.7729 index=0; Element: FE Z=26 N=56.000000 A=55.845000 [g/mole]; Material Mat_Fe_TGeo A=55.845 Z=26 rho=7.874 radlen=1.75666 intlen=16.9589 index=4; Element: U Z=92 N=238.000000 A=238.028900 [g/mole]; Material Mat_U_TGeo A=238.029 Z=92 rho=18.95 radlen=0.316948 intlen=11.4473 index=8; Info in <TGeoManager>: Changing system of units to Geant4 units (mm, ns, MeV).; Using Geant4 system of units. ; Element: SI Z=14 N=28.000000 A=28.085500 [g/mole]; Material Mat_Si_G4 A=28.0855 Z=14 rho=2.329 radlen=93.5361 intlen=457.729 index=0; Element: FE Z=26 N=56.000000 A=55.845000 [g/mole]; Material Mat_Fe_G4 A=55.845 Z=26 rho=7.874 radlen=17.5666 intlen=169.589 index=4; Element: U Z=92 N=238.000000 A=238.028900 [g/mole]; Material Mat_U_G4 A=238.029 Z=92 rho=18.95 radlen=3.16948 intlen=114.473 index=8; TEST PASSED Si vs. Mat_Si_TGeo Units: TGeo Deviation density: 0 % RadLen: 0.17 % IntLen: 1.6 % ; TEST PASSED Si vs. Mix_1_Si_TGeo Units: TGeo Deviation density: 0 % RadLen: 0.0015 % IntLen: 1.6 % ; TEST PASSED Si vs. Mix_2_Si_TGeo Units: TGeo Deviation density: 0 % RadLen: 0.17 % IntLen: 1.6 % ; TEST ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11060#issuecomment-1198355345:188,simpl,simply,188,https://root.cern,https://github.com/root-project/root/pull/11060#issuecomment-1198355345,2,['simpl'],['simply']
Usability,"Here's simpler reproducer for https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/154832/testReport/projectroot/runtutorials/tutorial_multicore_mp101_fillNtuples/ ; ```; ❯ cat Demo.C; void Demo() {; auto X = ROOT::TSeqI(42);; } ; ```. The error message is:; ```. Processing Demo.C...; In module 'Core':; /home/jun/dev/root/Debug/include/ROOT/TSeq.hxx:67:10: error: instantiation of 'ROOT::TSeq<int>' is different in different modules; class TSeq {; ^; In module 'std' imported from input_line_1:1:; /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/type_traits:1910:13: error: 'std::__make_signed_selector<int, true, false>::__type' from module 'std.type_traits' is not present in definition of 'std::__make_signed_selector<int, true, false>' provided earlier; using __type; ^; /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/type_traits:1901:11: note: definition has no member '__type'; class __make_signed_selector;; ^; /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/type_traits:1966:12: error: 'std::make_signed<int>' has different definitions in different modules; defined here; struct make_signed; ^; /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/type_traits:1966:12: note: definition in module 'std.type_traits' is here; In module 'Core':; /home/jun/dev/root/Debug/include/ROOT/TSeq.hxx:79:7: error: multiple overloads of 'TSeq' instantiate to the same signature 'void (int)'; TSeq(T theEnd): fBegin(), fEnd(theEnd), fStep(1) {; ^; /home/jun/dev/root/Debug/Demo.C:2:12: note: in instantiation of template class 'ROOT::TSeq<int>' requested here; auto X = ROOT::TSeqI(42);; ^; /home/jun/dev/root/Debug/include/ROOT/TSeq.hxx:79:7: note: previous declaration is here; TSeq(T theEnd): fBegin(), fEnd(theEnd), fStep(1) {; ^; /home/jun/dev/root/Debug/include/ROOT/TSeq.hxx:82:7: error: multiple overloads of 'TSeq' instantiate to the same signature 'void (int, int, int)'; TSeq(T theBegin, T theEnd, T th",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10910#issuecomment-1253760320:7,simpl,simpler,7,https://root.cern,https://github.com/root-project/root/pull/10910#issuecomment-1253760320,2,['simpl'],['simpler']
Usability,"Here's the test program for which I'm doing the massif profile:. ```cpp; #include ""ROOT/RDataFrame.hxx""; #include ""ROOT/RVec.hxx""; #include ""ROOT/RDF/RInterface.hxx""; #include ""TH1D.h""; #include ""TCanvas.h"". #include <string>; #include <vector>; #include <iostream>. int main() {; using namespace std;; using namespace ROOT;. RDataFrame df(""Events"", ""DYJetsToLL.root"");. vector<string> cols;; for (auto& col: df.GetColumnNames()) {; const auto type = df.GetColumnType(col);; if (type.find(""RVec<Float_t>"") != string::npos) {; cols.emplace_back(col);; cout << ""Select column "" << col << "" with type "" << type << endl;; }; }. vector<RDF::RResultPtr<TH1D>> hists;; for (auto& col: cols) {; hists.emplace_back(df.Histo1D<RVec<float>>(col));; }. for (auto i = 0u; i < hists.size(); i++) {; auto c = new TCanvas(cols[i].c_str(), cols[i].c_str(), 600, 600);; hists[i]->Draw();; c->SaveAs((cols[i] + "".png"").c_str());; delete c;; }; }; ```. You can find the profile attached, but it's not very clear to me what we can learn from it. We have 3GB from malloc/new, but it's not clear where it's coming from.; [ms_print_cpp.log](https://github.com/root-project/root/files/5437832/ms_print_cpp.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6676#issuecomment-716413931:986,clear,clear,986,https://root.cern,https://github.com/root-project/root/issues/6676#issuecomment-716413931,6,"['clear', 'learn']","['clear', 'learn']"
Usability,"Hey Lorenzo!. Certainly, I will start Right now. This PR is considerably more complex and currently includes copy pasted parts from the merged PRs (I had to do it for temporary tests before we had merged them as the convolutional layer depends on them). As a result a simple rebase and conflict fix would be simple, but would also leave a very messy history. What I can do instead is start a new branch from the updated master and carefully choose the new changes with better messages. I should be able to do that within 1-2 days and it will yield a clean history. Unless w are in a big hurry I plan to go with th me second approach but please let me know if you prefer the first one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2216#issuecomment-402624497:268,simpl,simple,268,https://root.cern,https://github.com/root-project/root/pull/2216#issuecomment-402624497,4,['simpl'],['simple']
Usability,Hi - this is breaking some more or less urgent ATLAS analyses - if there is any guidance as to what we could test that'd be much appreciated. Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8387#issuecomment-861315969:80,guid,guidance,80,https://root.cern,https://github.com/root-project/root/issues/8387#issuecomment-861315969,2,['guid'],['guidance']
Usability,"Hi @AlkaidCheng ,. Thanks for reaching out! I am not sure I understand where the problem stands. You are purposely injecting a different namespace at runtime, so I don't see how the package can act in order to prevent the wrong namespace being used. The error is unfortunately not clear as to which call site is provoking the lookup to `ROOT.Math.Internal`. Judging by your short snippet, I can imagine that one place could be [here](https://github.com/root-project/root/blob/a29e81cb1cd217ca2096a44d01fb273e085b4e8b/bindings/experimental/distrdf/python/DistRDF/HeadNode.py#L457), but as you can see the correct full namespace is being called there. Can you give more context as to what is your use case so I can better understand how to help?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15035#issuecomment-2015329409:281,clear,clear,281,https://root.cern,https://github.com/root-project/root/issues/15035#issuecomment-2015329409,2,['clear'],['clear']
Usability,"Hi @Axel-Naumann ,. > Much of this has no effect on the resulting assembly; they are simply code churn. Some might result in slightly different assembly instructions, but I double they have a visible effect - can you convince us that this is needed?. This would be completely true if the clang would do its job well. Not the case, unfortunately. Therefore . > slightly different assembly instructions. actually matter. . > by including the case that this change fixes. The reproducer should not crash with these changes. >I don't see why this is needed. What I actually did is that I've put 'f' everywhere for the sake of consistency.; I completely agree that at least in some cases the changes will not matter even for clang. . >I'd be in favor of reducing the change to the few lines where it actually has an effect. OK. Revert the comparisons and leave the assignments? Does that sound reasonable?. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6684#issuecomment-715205130:85,simpl,simply,85,https://root.cern,https://github.com/root-project/root/pull/6684#issuecomment-715205130,2,['simpl'],['simply']
Usability,"Hi @Axel-Naumann ,. I would say ""both"". That is an event display from ZEUS, ""ported"" from ROOT5/Make to ROOT6/CMake. The userbase is small, so whenever someone needs it, some smaller of greater issues arise for various reasons (e.g. ROOT/OS/compiler update) and one has to debug them with the people who need that. No clear separation of ""debug"" and ""production"". And well, this event display is kind of small and fast, so there are no reasons to disable debug information ""in production"". Speed is lesser issue than correctness and stability. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6677#issuecomment-713672604:318,clear,clear,318,https://root.cern,https://github.com/root-project/root/issues/6677#issuecomment-713672604,2,['clear'],['clear']
Usability,"Hi @Axel-Naumann ,. This is very simple, but seems to be unmerged and 6-24-04 still has this bug. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8778#issuecomment-948526134:33,simpl,simple,33,https://root.cern,https://github.com/root-project/root/issues/8778#issuecomment-948526134,2,['simpl'],['simple']
Usability,"Hi @Axel-Naumann ,. no, I was running just from home directory. But, let me have a look if 1) this behaviour will be seen after the recent updates of root in EPEL; 2)if I'm able to provide a simple reproducer. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8904#issuecomment-908272636:191,simpl,simple,191,https://root.cern,https://github.com/root-project/root/issues/8904#issuecomment-908272636,2,['simpl'],['simple']
Usability,"Hi @Dr15Jones @makortel @siliataider, this PR aims to provide a tutorial how we (ROOT) envision frameworks could use the RNTuple API for writing. If you have some time, it would be great if you could check whether it makes sense and demonstrates the relevant use cases. The ""framework code"" is obviously very much simplified and the goal is not to code a full production framework, but I hope it's close enough to what the ""real"" experiment frameworks are doing. Thanks in advance!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16536#issuecomment-2378502691:314,simpl,simplified,314,https://root.cern,https://github.com/root-project/root/pull/16536#issuecomment-2378502691,2,['simpl'],['simplified']
Usability,"Hi @Harshalzzzzzzz ,; ROOT has a high-level data analysis interface called [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html), you can take a look at the docs and try reading and running some of the tutorials [here](https://root.cern/doc/master/group__tutorial__dataframe.html). `RDataFrame` returns results wrapped in the [RResultPtr](https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html) type, through which we implement lazy execution (data processing is triggered when a user accesses the contents of a `RResultPtr`, _not_ when they request the result). RResultPtr has interface and semantics similar to [std::shared_ptr](https://en.cppreference.com/w/cpp/memory/shared_ptr), but currently it's missing a way to release ownership of its contents. `RResultPtr<T>::Release` is a simple method that would mimic the semantics of `std::shared_ptr::release`: it must return a `T*` and empty the `RResultPtr`. What needs to be done concretely:. - [x] add the `RResultPtr::Release` method in RResultPtr.hxx. It should be implemented in terms of `fObjPtr.release()` and it should also set `fActionPtr` and `fLoopManager` to null; - [x] add tests for the feature in `tree/dataframe/test/dataframe_resptr.cxx`, in particular making sure that `Release` and the ResultPtr's move-constructor have consistent behavior; - [x] add logic to the current method `RResultPtr::GetValue` to throw an exception if it's called on a null `RResultPtr`. Thank you in advance for any contribution, and feel free to ask more questions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7047#issuecomment-771507725:814,simpl,simple,814,https://root.cern,https://github.com/root-project/root/issues/7047#issuecomment-771507725,2,['simpl'],['simple']
Usability,"Hi @HenryDayHall ,. yes that line is a leftover and #11972 will remove it (thanks to @ferdymercury ). I suggest looking at RCsvDS, RNTupleDS or RArrowDS (ordered from simpler to more complex) for existing implementations of data sources. RRootDS is unused and we might remove it in the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11971#issuecomment-1371082629:167,simpl,simpler,167,https://root.cern,https://github.com/root-project/root/issues/11971#issuecomment-1371082629,2,['simpl'],['simpler']
Usability,"Hi @VanyaBelyaev ,; I ran your reproducer with LCG97apython3(ROOT 6.20/06) and LCG98python3(ROOT 6.22/00).; With the latter it seems that the call to `dill.dumps` is executed but I get a different error with a long stacktrace, I report the main parts:; ```; ...; input_line_38:16:29: error: allocating an object of abstract class type 'TInterpreter'; *ret = new (arena) TInterpreter[nary];; ^; Error in <TClingCallFunc::make_ctor_wrapper>: Failed to compile; ...; Error in <TClingCallFunc::ExecDefaultConstructor>: Called with no wrapper, not implemented!; Error in <TClingClassInfo::New()>: Call of default constructor failed to return an object for class: TInterpreter; Error in <TClass::New>: cannot create object of class TInterpreter; Error in <TBufferFile::ReadObject>: could not create object of class TInterpreter; TBufferFile::WriteObjectAny:0: RuntimeWarning: since TROOT has no public constructor; 	which can be called without argument, objects of this class; 	can not be read with the current library. You will need to; 	add a default constructor before attempting to read it. <class cppyy.gbl.TH1D at 0x560bc237aa20>. Error in atexit._run_exitfuncs:; Traceback (most recent call last):; File ""/home/vpadulan/Programs/rootproject/rootinstall/v6-22-00-patches/lib/ROOT/__init__.py"", line 119, in cleanup; backend.gROOT.EndOfProcessCleanups(); ReferenceError: attempt to access a null-pointer; ```. The line `<class cppyy.gbl.TH1D at 0x560bc237aa20>` is there because I added a print to your reproducer just to check that `dill.loads` is executed. Actually this is the simplest command to reproduce the same stacktrace:. ```; python -c ""import ROOT; import dill; print(type(dill.loads(dill.dumps(ROOT.TH1D()))))""; ```. So it's possible that something in the new pyroot (default since 6.22) fixes the `dill` issue but triggers this other error.; @etejedor any thoughts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6370#issuecomment-696687077:1579,simpl,simplest,1579,https://root.cern,https://github.com/root-project/root/issues/6370#issuecomment-696687077,2,['simpl'],['simplest']
Usability,"Hi @VanyaBelyaev!. Can you use C++17? That would simplify the code with `if constexpr`, and also work in the ROOT nightlies thanks to our [cppyy upgrade](https://github.com/root-project/root/pull/14507) last week:. ```c++; // the same with functions; template <unsigned int K,unsigned int N>; auto fun_2 (A<N>&) {; if constexpr(K < N) return ""ququ"";; else return K;; ```. If this is not a solution for you and you absolutely need to support the reproducer above, please also open this issue also in [cppyy upstream](https://github.com/wlav/cppyy) since its also present there. > If I am not mistaken sometime ago the situations was just an opposite - standalone template functions were OK, but template methods were not OK... but now I am not 100% sure... What do you mean by ""sometime ago""? I checked with ROOT 6.30, and the situation is the same as with ROOT master, meaning the cppyy upgrade didn't cause any regression in this regard. Anyway, I can't encourage you enough to move to C++17, implementing the patterns that you implement there is a nightmare without `if constexpr` :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15085#issuecomment-2025083053:49,simpl,simplify,49,https://root.cern,https://github.com/root-project/root/issues/15085#issuecomment-2025083053,2,['simpl'],['simplify']
Usability,"Hi @VanyaBelyaev, thanks for posting about this!. As explained in [this PR](https://github.com/root-project/root/pull/11909/files) and later also dicussed in [this forum post](https://root-forum.cern.ch/t/retreiving-the-calculation-strategy-of-a-roonll/55715/2), saving test statistics objects to ROOT files like `RooNLLVar` is now prohibited since ROOT 6.28. It only technically seemed to work without error, but in fact the read-back RooNLLVars are corrupted and give wrong results when you read them back even for simple Gaussian cases, as I showed in the description of the linked PR. This and other reasons lead us to the decision to disallow the IO of `RooNLLVar` and other test statistics classes. From your warnings and error messages, it seems like you're trying to do IO of the RooNLLVar. Is there a way you can avoid this in your workflow? As I said it's not allowed anymore and in older ROOT versions it was not reliable. What people usually do is to save the pdf and the datasets in a RooWorkspace, and maybe a `ModelConfig` to simplify the NLL creation when reading back the data and pdf. Is that not an option for your?. Certainly I was not expecting that the removal of this accidental and buggy IO feature would cause some friction with some users, so I'm happy to help you finding an alternative and better solution!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13280#issuecomment-1644053557:517,simpl,simple,517,https://root.cern,https://github.com/root-project/root/issues/13280#issuecomment-1644053557,4,['simpl'],"['simple', 'simplify']"
Usability,"Hi @VanyaBelyaev, yes the stack trace with a debug build is indeed helpful because of the line numbers. Seeing that `RooProdPdf::factorizeProduct` is involved, I am sure that the recently merged PR https://github.com/root-project/root/pull/7907 causes your problem. No need for a C++ producer then, this problem has nothing to do with pyROOT. But even knowing that, I don't know enough about the problem to solve it. Do you mind sharing your RooFit code that produces the problem? Even better of course with the data, but I understand if you can't share it because of the guidelines of your experiment. But even without the data, seeing the RooFit model would be super helpful for me to understand how the RooProdPdf enters the game. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8474#issuecomment-864089572:572,guid,guidelines,572,https://root.cern,https://github.com/root-project/root/issues/8474#issuecomment-864089572,2,['guid'],['guidelines']
Usability,"Hi @VanyaBelyaev,. I confirm the following simple commands both work with ROOT 6.22/08 and ROOT master; ```; $ python2 -c ""import ROOT; import dill; print(type(dill.loads(dill.dumps(ROOT.TH1D()))))""; <class cppyy.gbl.TH1D at 0x564a995e04e0>; $ python3 -c ""import ROOT; import dill; print(type(dill.loads(dill.dumps(ROOT.TH1D()))))""; <class cppyy.gbl.TH1D at 0x559369cdb3a0>; ```. They should be similar to your original reproducer, can you confirm this is fixed for you as well now?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6370#issuecomment-819457468:43,simpl,simple,43,https://root.cern,https://github.com/root-project/root/issues/6370#issuecomment-819457468,2,['simpl'],['simple']
Usability,"Hi @acampove, thanks for reporting this issue!. I have opened a to avoid the overly-verbose printout in the unbinned case:; https://github.com/root-project/root/pull/14309. However, I would refrain from implementing a progress bar, because this makes the output more difficult to digest when reading log files from e.g. grid jobs. So while I agree it would be nice for interactive use, it would do more harm that good in batch jobs. One could maybe hack something that detects the context in which RooFit is used, but these hacks are usually fragile and I would prefer not to do it. I'll close this issue after merging the PR with the log in the unbinned case. If you *really* want this progress bar, feel free to open a new issue about this, but I'm afraid I can't justify giving that one a high priority. Thanks for your understanding!; Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9489#issuecomment-1881439092:218,progress bar,progress bar,218,https://root.cern,https://github.com/root-project/root/issues/9489#issuecomment-1881439092,4,['progress bar'],['progress bar']
Usability,"Hi @amadio, I think I found the problem. We simply need to add dependencies on libVecOps.so. For the dependency of PyROOT on VecOps, we can discuss a solution together with @etejedor. I have an idea on how to solve this relying on the fact that a TVec has the same layout of a vector with a custom allocator.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1896#issuecomment-383410777:44,simpl,simply,44,https://root.cern,https://github.com/root-project/root/pull/1896#issuecomment-383410777,2,['simpl'],['simply']
Usability,"Hi @bellenot , first of all a couple clarifications:. * as per my EDIT2 above, the test is also broken on (at least some) linux platforms (for example, my own machine), but it doesn't run in the nightlies, weirdly.; * your explanation is about why `maxTasksPerFile` is zero. I was asking about `clustersInThisFileSize`, which does not depend on `GetImplicitMTPoolSize()`, but also turns out to be zero. As per my EDIT3 above, it's now clear that `clustersInThisFileSize` is zero because the input file for this test has zero clusters. That's a bit surprising, hence my original question and my request for a comment in the code of the test in EDIT3. Ok cool so #4947 and this PR are meant to fix this same issue. Which solution we want to adopt depends on whether `TTreeProcessorMT` usage, by design and (currently missing) docs, should always be preceeded by a call to `EnableImplicitMT` or not. We are discussing that in the PPP channel on mattermost, as soon as we have an answer that we agree upon, we'll also know what fix to adopt for this failing test. To be clarified why the test does not run in the nightlies for certain platforms (EDIT: other than windows), but that's a different topic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4953#issuecomment-583762217:435,clear,clear,435,https://root.cern,https://github.com/root-project/root/pull/4953#issuecomment-583762217,2,['clear'],['clear']
Usability,"Hi @bendavid, with this PR we are officially not supporting to build ROOT with these minuit omp or mpi build options anymore:; * https://github.com/root-project/root/pull/12970. I'll close this issue here, because not it's clear that RooFit can't be used with Minuit2 multithreading. You are right that it's not unreasonable to expect that Minuit2 multithreading can be enabled/disabled at runtime, but this is another issue. Given the limited developer time we have, I think we need a better motivation than ""we realized it would be nice to have"" to implement this. If you have any usecase for Minuit 2 multithreading in ROOT that is covered by these flags, then please go ahead and open a new issue whenever :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12940#issuecomment-1796837979:223,clear,clear,223,https://root.cern,https://github.com/root-project/root/issues/12940#issuecomment-1796837979,2,['clear'],['clear']
Usability,"Hi @bernhardmgruber , thank you for reporting this!. I understand the problem, we need to make sure we give a meaningful name to the RNTuple. Regarding your specific example above, I have a doubt about the design. Since the input is a `TChain` with no name, there is no evident unique name to give to the imported RNTuple. If the `TChain` had a name then that would be the correct name to assign. But in this case, we could:. 1. Get the name of the first tree in the first file of the chain, and assign that irrespective of the names of the other trees in the chain.; 2. Check that all trees of the chain have the same name (the first one), and assign that. If this is not the case, fallback to assigning the first name anyway ?; 3. Invent a new name for the imported RNTuple which will always be applied in case the user is importing from an un-named `TChain`. This could be anything from something simple like `MyRNTuple` to something more unique and complicated like `R__IMPORTED_RNTUPLE`. Thoughts? Also inviting @pcanal and @jblomer to comment",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13088#issuecomment-1605303317:900,simpl,simple,900,https://root.cern,https://github.com/root-project/root/issues/13088#issuecomment-1605303317,2,['simpl'],['simple']
Usability,"Hi @bluehood , we could indeed be even better than the STL, I agree. In my opinion here the root of all evil is the vector<bool> specialisation which is de facto a completely different class than vector<T> :( We are just paying the consequences of this asymmetry. Said that, let's dive in the things we can change :). I am hesitant to change the behaviour of data. Can there be cases where the instantiation of RVec<bool>(or vector<bool>)::data() takes place and then is not used, i.e. cases where it is better to be able to instantiate the method rather than not to?; The clean-up RAdoptAllocator can also be done: it is working though and it was not for free. In general I could imagine scenarios where it is better to be able to instantiate vector<bool, RAdoptAllocator<bool>> than not to be... but again this is has to be balanced against the overall simplification of the code base.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2804#issuecomment-430372940:855,simpl,simplification,855,https://root.cern,https://github.com/root-project/root/pull/2804#issuecomment-430372940,2,['simpl'],['simplification']
Usability,"Hi @bluehood , wouldn't the method to_string be more appropriate in many cases (see http://en.cppreference.com/w/cpp/header/string_view)? We need to back port it but then the PR would be greatly simplified, wouldn't it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/937#issuecomment-327141998:195,simpl,simplified,195,https://root.cern,https://github.com/root-project/root/pull/937#issuecomment-327141998,2,['simpl'],['simplified']
Usability,"Hi @bluehood ,; I'd wait for the master to be green again and then merge. Since the PR is done and #833 and #828 are reviewed and my patch is very simple, I'd go for this ""summary PR"" and close the afore mentioned ones. Great that now we can seamlessly handle nested parallelism with ROOT. This is yet another milestone for the efficient usage of extreme architectures such as KNL.; In addition this work allows the upgrade of TTreeProcessorMT with the the ""locality patch"" of @etejedor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/835#issuecomment-320438735:147,simpl,simple,147,https://root.cern,https://github.com/root-project/root/pull/835#issuecomment-320438735,2,['simpl'],['simple']
Usability,"Hi @breitwieserCern ,; the functionality now looks good. Could you add a test in roottest about the new functionality?; This one should:; - Generate a dictionary with a selection xml; - Have a macro that loads it and checks that the custom streamer works fine; In order to achieve that, you can have a look to https://github.com/root-project/roottest/blob/master/root/meta/genreflex/CMakeLists.txt . Here you find the instructions about how to run tests: https://root.cern.ch/run-tests. In your case the CMake section could be something like:; ```. ROOTTEST_GENERATE_REFLEX_DICTIONARY(customStreamer customStreamer.h SELECTION customStreamer_selection.xml). ROOTTEST_ADD_TEST(customStreamer; MACRO customStreamer.C; OUTREF customStreamer.ref; DEPENDS ${GENERATE_REFLEX_TEST}); ```; This will generate the dictionary from *customStreamer.h* and *customStreamer_selection.xml*. The macro *customStreamer.C* will be then executed and you can check there that your streamer does what is supposed to do (print something? your call :) ). The output will be compared to customStreamer.ref . You can start from a simplified version of the actual classes you are working with.; Do not hesitate to contact me privately if you need more info!. Cheers,; D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/864#issuecomment-325595999:1105,simpl,simplified,1105,https://root.cern,https://github.com/root-project/root/pull/864#issuecomment-325595999,2,['simpl'],['simplified']
Usability,"Hi @bsunanda ,; Can you provide a simple reproducer of your case? Together with some information about your system (how you installed ROOT etc., compiler version etc.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12370#issuecomment-1443741367:34,simpl,simple,34,https://root.cern,https://github.com/root-project/root/issues/12370#issuecomment-1443741367,2,['simpl'],['simple']
Usability,"Hi @cburgard and @gartrog, thanks a lot for these developments! I have only a few comments inline. Besides that, please do a few things before we can merge (I would like to merge this as soon as possible, tomorrow or on Friday. If you have more you can always do a followup PR):. 1. You moved the `JSONInterface` to a public header now, so it's not a `RooFit::Detail` anymore (I understand now that the user needs the interface to implement custom importers/exporters). But still, it's an interface under heavy development and we need to make that clear to the user that they can't rely too much on the stability of this interface. Therefore, can you please change the namespace to `RooFit::Experimental`?; 2. Please give the PR a meaningful title, and the first commit a good commit message, optimally not only a title but also a body where you explain what you did. When merging, I will squash the commits and only the first commit message will be taken, so please consider that.; 3. Make sure that all C++ sources are formatted with `clang-format` and the python sources with `black --line-length=120`. Let me know when this is done, then we can ask the CI to test once again and then merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9482#issuecomment-1016939443:548,clear,clear,548,https://root.cern,https://github.com/root-project/root/pull/9482#issuecomment-1016939443,2,['clear'],['clear']
Usability,"Hi @couet , @Axel-Naumann ,. would you have a look? This PR was discussed with a lot of details... Not having these fixes at least in nightlies prevents me from looking at other things in the debugged code. ( The stuff I debug simply crashes before ). And I would really like to debug as much as possible so the results would go into 6.24. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6684#issuecomment-716479561:227,simpl,simply,227,https://root.cern,https://github.com/root-project/root/pull/6684#issuecomment-716479561,2,['simpl'],['simply']
Usability,"Hi @couet , @lmoneta , @pcanal ,. here is a reproducer.; ```. #include <TCanvas.h>; #include <TBox.h>; #include <thread>; #include <vector>. TCanvas* C=nullptr;; void test_function(const int& id); {; C->cd(id);; TPad* p= new TPad();; p->Draw();; p->cd();; TBox *x = new TBox( );; for (int i=0; i<10; i++) p->ShowGuidelines(x, kButton1Down, 'l', true );; delete x;; delete p;; return;; }; int main(int argc, char **argv) {; C= new TCanvas(""C"",""C"",1024,768);; const int N=20;; C->Divide(1,N);; std::vector<std::thread> threads;; std::vector<int> ids;; for (int j=0; j<N; j++) ids.push_back(j+1);; for (size_t j=0; j<ids.size(); j++); threads.push_back(std::thread(test_function,ids[j]));; for (auto& th : threads) th.join();; threads.clear();; delete C;; return 0;; }; ```; I do. ```; g++ $(root-config --glibs --cflags ) -g pad9.cxx -o pad9.exe; ./pad9.exe; ````; and get; ```; *** Error in `./pad9.exe': double free or corruption (fasttop): 0x00007f125c001100 ***; *** Error in `./pad9.exe; *** Break *** segmentation violation; Aborted (core dumped); ```; if I comment line with ``p->ShowGuidelines`` everything is fine. ROOT 6.22.02/gcc 4.8.5/CentOS7 x64_64. Best regards,. Andrii. Sorry if there are more crashes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6510#issuecomment-702865715:732,clear,clear,732,https://root.cern,https://github.com/root-project/root/issues/6510#issuecomment-702865715,2,['clear'],['clear']
Usability,"Hi @couet ,. > so it won't be really useful. Yes. But the size is set during the execution of GUI. > By chance do you have a simple reproducer ?. Simple -- no. But in a scope of elimination of this issue I can provide an access to a private github repository with these codes.; The application itself is not large. Would that work for you?. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6344#issuecomment-692118820:125,simpl,simple,125,https://root.cern,https://github.com/root-project/root/issues/6344#issuecomment-692118820,3,"['Simpl', 'simpl']","['Simple', 'simple']"
Usability,"Hi @couet ,. I've tested it and it fixes things for me.; I wrote hopefully because I cannot write a simple reproducer. ; Please read it as ""fixes for my case and hopefully for all similar cases"". Concerning the explanation, it looks like two threads are simultaneously in the scope where the pointer is not zero. Then one c deletes the pointer and the other one derefences null pointer. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6511#issuecomment-701382727:100,simpl,simple,100,https://root.cern,https://github.com/root-project/root/pull/6511#issuecomment-701382727,2,['simpl'],['simple']
Usability,"Hi @couet ,. OK. In TPad the problem is a bit more elaborated. ; At first the calculations of the new sizes are done and only after that the results are checked. ; Here is a simple solution that I've tried.; https://github.com/root-project/root/compare/master...andriish:for_zevis?expand=1. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6344#issuecomment-692129631:174,simpl,simple,174,https://root.cern,https://github.com/root-project/root/issues/6344#issuecomment-692129631,2,['simpl'],['simple']
Usability,"Hi @couet ,. the reproducer is the same as in #6447 (Which is closed now, I know). But this time the crash happens later, in the destructor.; ```; ./pad4.exe ; Error in <TList::Clear>: A list is accessing an object (0x2b7f740) already deleted (list name = TList). *** Break *** segmentation violation. ===========================================================; There was a crash (kSigSegmentationViolation).; This is the entire stack trace of all threads:; ===========================================================; gdb.printing.register_pretty_printer(gdb.current_objfile(),; #0 0x00007f9b7558746c in __libc_waitpid (pid=1463649, stat_loc=stat_loc; entry=0x7ffce938d760, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31; #1 0x00007f9b75504f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007f9b78f9a4bc in TUnixSystem::Exec (this=0x1e1e960, shellcmd=0x2b7f4b0 ""X/etc/gdb-backtrace.sh 1463630 1>&2"") at Projects/ROOT/root/core/unix/src/TUnixSystem.cxx:2120; #3 0x00007f9b78f9ad16 in TUnixSystem::StackTrace (this=0x1e1e960) at Projects/ROOT/root/core/unix/src/TUnixSystem.cxx:2411; #4 0x00007f9b78f9e5f4 in TUnixSystem::DispatchSignals (this=0x1e1e960, sig=kSigSegmentationViolation) at Projects/ROOT/root/core/unix/src/TUnixSystem.cxx:3649; #5 0x00007f9b78f96794 in SigHandler (sig=kSigSegmentationViolation) at Projects/ROOT/root/core/unix/src/TUnixSystem.cxx:407; #6 0x00007f9b78f9e4fc in sighandler (sig=11) at Projects/ROOT/root/core/unix/src/TUnixSystem.cxx:3620; #7 <signal handler called>; #8 0x0000000000000000 in ?? (); #9 0x00007f9b77f28ed4 in TCanvas::Close (this=0x1e9efd0, option=0x7f9b77f92e51 """") at Projects/ROOT/root/graf2d/gpad/src/TCanvas.cxx:782; #10 0x00007f9b77f28bc5 in TCanvas::Destructor (this=0x1e9efd0) at Projects/ROOT/root/graf2d/gpad/src/TCanvas.cxx:697; #11 0x00007f9b77f28969 in TCanvas::~TCanvas (this=0x1e9efd0, __in_chrg=<optimized out>) at Projects/ROOT/root/graf2d/gpad/src/TCanvas.cxx:668; #12 0x00007f9b77",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6537#issuecomment-702879711:177,Clear,Clear,177,https://root.cern,https://github.com/root-project/root/pull/6537#issuecomment-702879711,1,['Clear'],['Clear']
Usability,"Hi @couet ,. yes, sure. `feenableexcept` is not in `<fenv.h>` on Mac. One can add some code to have exceptions handling, but let us keep it simple. Linux is used much wider anyway. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6374#issuecomment-694282020:140,simpl,simple,140,https://root.cern,https://github.com/root-project/root/issues/6374#issuecomment-694282020,2,['simpl'],['simple']
Usability,"Hi @dpiparo , Thank you! Indeed, I'm not very familiar with the ways ROOT do parallel and I just searched in the document and chose a simple one, i.e. this way. I think we could improve that. ; The reason I wrote this is because it was actually a test problem for me on the GSOC this year, ""to parallel the build of TKDTree and compare the speed"". The benefit, obviously, is that the build of TKDTree could be faster. And maybe also benefit to those who use TKDTree. There might be other possible improvement but for now that is all I can see.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2202#issuecomment-397645948:134,simpl,simple,134,https://root.cern,https://github.com/root-project/root/pull/2202#issuecomment-397645948,2,['simpl'],['simple']
Usability,"Hi @dpiparo and @lmoneta, I included an additional gtest suite. I also modified to documentation so that it's clear that whenever b is rectangular, additional memory is allocated to compute a^(-1).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14420#issuecomment-1910617703:110,clear,clear,110,https://root.cern,https://github.com/root-project/root/pull/14420#issuecomment-1910617703,2,['clear'],['clear']
Usability,"Hi @dpiparo and thanks a lot @adriansev for this useful report!. Yes, there is probably even more breakage than before now that the `cppyy` in ROOT is synced more with `cppyy` upstream. More files are expected to collide. The cppyy module is part of ROOT, and if you install it in two different ways in the same environment (standalone and via ROOT), clashes are bound to happen. So the question to @adriansev is really: what's your usecase for installing cppyy in two different ways in the same environment? What does cppyy standalone give you that you won't get with ROOT? And why is the recommended way of dealing with this (virtual environments) not an option for you?. Many Linux distributions even *force* you to use virtual environments and don't allow `pip install --user` outside of virtual environments anymore. E.g. Arch, NixOS, or Ubuntu:; * https://askubuntu.com/questions/1465218/pip-error-on-ubuntu-externally-managed-environment-%C3%97-this-environment-is-extern. So given that your usecase is against good practices and that it's expected that if you install the same library from two different sources you get breakage, I'm in favor of closing this as ""not planned"" unless @adriansev can follow up with a clear motivation :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12635#issuecomment-2314956198:1223,clear,clear,1223,https://root.cern,https://github.com/root-project/root/issues/12635#issuecomment-2314956198,2,['clear'],['clear']
Usability,"Hi @dpiparo,. Ah! That is good to know!. I definitely think this solves one of the problems on the arm platform, could we be talking about different issues?. Regarding the preprocessor protect:; The change really should not make a difference with respect to the output regardless of platform. If the score of the particular cut so bad that this fix makes a difference we either:; - find a better cut value and forget about this one or,; - this is a solution that would not have been chosen without the patch, but both of these solutions are really really really bad so it doesn't matter which ones we choose. So since I don't think it will matter either way, feel free to do as you feel best. One point is that the code flow will be more clear, in my mind, without any preprocessor branching.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/450#issuecomment-287901267:738,clear,clear,738,https://root.cern,https://github.com/root-project/root/pull/450#issuecomment-287901267,1,['clear'],['clear']
Usability,"Hi @etejedor, thanks for your comments!. Enric and I had a meeting that resulted in the following action items for me:. 1. Remove the `test_` prefix from the roofit pythonization test files; 2. Come up with a mechanism that uses all the functions defined in the RooFit pythonization proxy classes for the pythonization, not excluding magic functions (which are often pythonized); 3. Check if the pythonization abstraction in this PR also allows for pythonizations with the C API; 4. Introduce Doxygen documentation for RooFit pyROOT. In my recent updates, I addressed bullet points 1, 2, and 3. 1. Was trivial to address; 2. I use now a combination of `mro()` and `funcname in klass.__dict__` to check if a new member function was defined in the corresponding Python class or any of it's base classes (inspired by [this stackoverflow post](https://stackoverflow.com/questions/5253397/check-if-class-attribute-was-defined-or-derived-in-given-class)); 3. I made a relatively [simple test](https://github.com/root-project/root/commit/96d76be74f347eb36bd4d785d6689efebb17408b) to verify that if one updates the Python classes with the C API, this is propagated as a pythonization to the correct RooFit class.; Indeed, if you make the changes to the code in my test branch, then this code gives the expected behaviour (using pythonized version of `__getattr__`:; ```Python; import ROOT; a = ROOT.RooRealVar(""x"", ""x"", 0, 0, 10.); getattr(a, ""Hello""); ```. 4. For the documentation, I still have to do that later.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7753#issuecomment-831297263:974,simpl,simple,974,https://root.cern,https://github.com/root-project/root/pull/7753#issuecomment-831297263,2,['simpl'],['simple']
Usability,"Hi @guitargeek , I have incorporated the comments that you had made earlier. it is unclear to me why why one of the travis CI build fails, please review the current version and provide us your feedback and suggestions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7766#issuecomment-814066020:193,feedback,feedback,193,https://root.cern,https://github.com/root-project/root/pull/7766#issuecomment-814066020,2,['feedback'],['feedback']
Usability,"Hi @guitargeek , I have some local example which I run to see if the Taylor expansion works fine. (simply Taylor expanding a RooFormulaVar around different points). I would like your inputs on the following items,; - What do you want to have as an unit test ? ; - Shall we also have a tutorial in place ?; - the anaytical integral for a polynomial can be written. I am unsure if the analyticalIntegral fully applies to a function of many variables, let me know how we can ; proceed here. :); ; Cheers,; Rahul",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9184#issuecomment-951725716:99,simpl,simply,99,https://root.cern,https://github.com/root-project/root/pull/9184#issuecomment-951725716,2,['simpl'],['simply']
Usability,"Hi @guitargeek @lmoneta @dpiparo,; I would really benefit if this feature were merged, as I need it for my project. Any feedback to my observations on https://github.com/root-project/root/pull/8546#issuecomment-1814425550 ?; Thanks in advance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8546#issuecomment-1895306674:120,feedback,feedback,120,https://root.cern,https://github.com/root-project/root/pull/8546#issuecomment-1895306674,2,['feedback'],['feedback']
Usability,"Hi @guitargeek, I've addressed your changes and rebased to master. I've also changed `LogTimings` to `TimingAnalysis` to it is clear that it is different to the existing profiling and allows for a bit more of an in-depth analysis. I did not add the test that you requested yet since I noticed it required some more changes to the `RooFit::MultiProcessing` then simply implementing the test. I am happy to look into this later though, but I think out of the scope of this MR. But for now we have the unit tests of the HeatmapAnalyzer and the ProcessTimer themselves.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11791#issuecomment-1354447607:127,clear,clear,127,https://root.cern,https://github.com/root-project/root/pull/11791#issuecomment-1354447607,4,"['clear', 'simpl']","['clear', 'simply']"
Usability,"Hi @guitargeek, yeah that does sound like a good idea. The reason why I kept the GetName() just as the class name for now is that I wanted to avoid building the full name as a char* to not have to deal with messy c-string concatenation in a very simple function.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10043#issuecomment-1058334840:246,simpl,simple,246,https://root.cern,https://github.com/root-project/root/pull/10043#issuecomment-1058334840,2,['simpl'],['simple']
Usability,"Hi @hageboeck, thanks for the feedback!. Okay, I now took the time to hopefully get this range casting also work for the TCollections, so we don't have duplicate code. Actually, there was an `assert` also in the old [TRangeStaticCast implementation](https://github.com/root-project/root/blob/master/core/cont/inc/TCollection.h#L355)! So to stay consistent with TRangeStaticCast, I had to bring the `assert` in so that change request is also addressed now :) And we can also use the existing unit test in `testTypedIteration.cxx`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8769#issuecomment-891218910:30,feedback,feedback,30,https://root.cern,https://github.com/root-project/root/pull/8769#issuecomment-891218910,2,['feedback'],['feedback']
Usability,"Hi @ihrivnac,. I investigate the issue more deeply. It turns out to be a mix of problems between our build system and the v2-4 and v2-7 of vmc/GEANT3. In v2-4 TrackPosition is not defined for Float: https://github.com/vmc-project/geant3/blob/v2-4/TGeant3/TGeant3.h#L677. While it is in v2-7: https://github.com/vmc-project/geant3/blob/v2-7/TGeant3/TGeant3.h#L682. We had a custom version of geant3 that was hiding the problem with ROOT v6-14, when I moved to v6-18 I lost this custom version, going back to use the standard v2-4, that broke the build because it needed TrackPosition(float) to be defined.; ; I am not sure I have been clear enough! But I believe you guys were correct in your code :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3513#issuecomment-516817913:634,clear,clear,634,https://root.cern,https://github.com/root-project/root/pull/3513#issuecomment-516817913,2,['clear'],['clear']
Usability,"Hi @j-mathe , I think you used `clang-format filename1 filename2 ...` instead of `git clang-format --diff ...`, right? because the clang-format commit introduces many formatting changes that are unrelated to the PR and that we should not apply here. It also makes it a bit harder to review the PR. Please remove that commit and only format your changes (e.g. with `git clang-format --diff master kahan | git apply`). I guess you will need to do an interactive git rebase -- you could also take this chance to clean the commit history, leaving only one commit or one for the new implementation plus one for the new tests. That would make it simpler for me to do a last review pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11230#issuecomment-1237232362:640,simpl,simpler,640,https://root.cern,https://github.com/root-project/root/pull/11230#issuecomment-1237232362,2,['simpl'],['simpler']
Usability,"Hi @jalopezg-git et al :). Thank you for your comments and suggestions, I have learnt new things in this PR. In the last commits I implemented the changes suggested by @vepadulano. Note that I have added a new file with the two lines that print the contents of the TTree using a RDF. The topics that would remain open are:; * Extension of README, as stated [here](https://github.com/root-project/root/pull/13205#discussion_r1259443075). I am sorry but that is beyond my knowledge. Please feel free to complement the README of this tutorial or the ROOT documentation.; * The dot at the end of the branch name is not documented, but it is discussed in some forum threads. I would suggest to add the comment from P. Canal [here](https://github.com/root-project/root/pull/13205#discussion_r1265655686) for sake of clarity. Thank you for your time. Best,; Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13205#issuecomment-1673054332:79,learn,learnt,79,https://root.cern,https://github.com/root-project/root/pull/13205#issuecomment-1673054332,2,['learn'],['learnt']
Usability,"Hi @jpherdi, thanks for the report! I suggest the following changes to the tutorials:; https://github.com/root-project/root/pull/14332. Would this address this issue?. Also, note that the RooFit RDF helpers are not feature complete yet:; https://github.com/root-project/root/issues/7223. I didn't continue working on this, because it was not clear to me which features would actually get used by the users. If it's missing something that you need, for example the treatment of weight columns, please comment on the other issue I linked so we can give it higher priority.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14329#issuecomment-1886862091:342,clear,clear,342,https://root.cern,https://github.com/root-project/root/issues/14329#issuecomment-1886862091,2,['clear'],['clear']
Usability,"Hi @klenze ,; thank you for the feedback, I tend to agree, my only doubt is that these days we don't expect the vast majority of users to have to compile ROOT from source, that's something for developers and contributors, who might want to checkout the full repo anyway.; Why do grad students working on their laptops have to compile ROOT from source?. (with that said, I think we would accept a PR that changes the commands as you suggest. Or maybe we can just mention it in a comment. There is a button the bottom-right of each page on our website which opens a new tab where you can suggest changes)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10238#issuecomment-1080355066:32,feedback,feedback,32,https://root.cern,https://github.com/root-project/root/issues/10238#issuecomment-1080355066,2,['feedback'],['feedback']
Usability,"Hi @ktf , the travis log could be clearer, but it indicates how to run the same command it does:. ```; Running clang-format-3.9 against branch master, with hash 7554be95715898fa2a93528254ce3646764ab3d2; clang-format failed.; To reproduce it locally please run; 	git checkout master; 	git-clang-format --commit 7554be95715898fa2a93528254ce3646764ab3d2 --diff --binary /usr/local/clang-5.0.0/bin/clang-format; ```. This system is not perfect and you might have to adapt hashes/paths to your case, but this is it.; If you do not get any corrections you might somehow be overriding ROOT's clang-format configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1712#issuecomment-371771090:34,clear,clearer,34,https://root.cern,https://github.com/root-project/root/pull/1712#issuecomment-371771090,2,['clear'],['clearer']
Usability,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13808#issuecomment-1893308958:1028,simpl,simple,1028,https://root.cern,https://github.com/root-project/root/pull/13808#issuecomment-1893308958,2,['simpl'],['simple']
Usability,Hi @linev! I would suggest to simply delete the line with `x1 = *iter2;` ([here a link to it](https://github.com/root-project/root/blob/master/roofit/roofitcore/src/RooCurve.cxx#L388)). The value of `x2` is already set correctly [a few lines before](https://github.com/root-project/root/blob/master/roofit/roofitcore/src/RooCurve.cxx#L373).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7536#issuecomment-804250769:30,simpl,simply,30,https://root.cern,https://github.com/root-project/root/issues/7536#issuecomment-804250769,2,['simpl'],['simply']
Usability,"Hi @lmoneta @couet . I checked the [current documentation](https://root.cern.ch/root/htmldoc/guides/users-guide/MathLibraries.html#numerical-integration), and the point `15.8.3.1 Using ROOT::Math::IntegratorMultiDim` actually shows an example of the IntegratorMultiDim and the usage of different algorithms. . There is a typo, probably caused by copypasting: `Here is a code example on how to use the ROOT::Math::IntegratorOneDim class`, actually it is an example of `IntegratorMultiDim`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7740#issuecomment-1943742763:93,guid,guides,93,https://root.cern,https://github.com/root-project/root/issues/7740#issuecomment-1943742763,4,['guid'],"['guide', 'guides']"
Usability,"Hi @lmoneta and @hageboeck, thanks for the feedback!. I will open a PR in rootbench with a benchmark based on the hf001_example.C tutorial.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10562#issuecomment-1128075811:43,feedback,feedback,43,https://root.cern,https://github.com/root-project/root/pull/10562#issuecomment-1128075811,2,['feedback'],['feedback']
Usability,"Hi @lmoneta, thanks for the review! You are right, it's not a sustainable solution to duplicate the interfaces if we want to accept `std::string` more generally in RooFit. I have updated the PR with a new intermediate class that can be used for the interfaces. The intermediate class, `RooStringView`, is simply a wrapper around `const char*` that can also be constructed from a `std::string`. Note that this is different from `std::string_view`, which is not null-terminated and therefore needs a copy when turned into a `const char*`, so we couldn't use that in RooFit interfaces without introducing superfluous copies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9747#issuecomment-1024992856:305,simpl,simply,305,https://root.cern,https://github.com/root-project/root/pull/9747#issuecomment-1024992856,2,['simpl'],['simply']
Usability,"Hi @lmoneta, the bug I fixed was a failing `testMinimizationCpu` test (in another PR). However, during the analysis of the bug, I've seen some places where the code could be improved. The conversion of LossFunctionEventInfo to a struct was a suggestion by Alex. There is a real bug fix for a memory leak, however, that we should merge, even if the rest of the code changes are discarded. The functionality of the minimizer is not changed, the improvements are in simplicity and readability of the code. For what class do you think I'm missing initializations to data members?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/494#issuecomment-293529688:463,simpl,simplicity,463,https://root.cern,https://github.com/root-project/root/pull/494#issuecomment-293529688,1,['simpl'],['simplicity']
Usability,"Hi @pcanal ,. > We need better understanding of the failure mode. OK, I see. Meanwhile I've simplified the reproducer; ```; #include <TCanvas.h>; #include <TPad.h>; int main(int argc, char **argv) {; TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);; C->cd();; TPad* c= new TPad();; c->cd();; delete c;; delete C;; return 0;; }; ```; Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6576#issuecomment-704919795:92,simpl,simplified,92,https://root.cern,https://github.com/root-project/root/pull/6576#issuecomment-704919795,2,['simpl'],['simplified']
Usability,"Hi @pcanal ,. this is quite a simple PR, would you have a look just to reduce the number of pull requests... Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6740#issuecomment-732759304:30,simpl,simple,30,https://root.cern,https://github.com/root-project/root/pull/6740#issuecomment-732759304,2,['simpl'],['simple']
Usability,"Hi @pcanal : great - really nice. Thanks for diving into this.; I can suggest a test:; ```; using namespace ROOT::Experimental;; using MyVec_t = std::vector<int,VecOps::TAdoptAllocator<int>>;; TDataFrame d(4);; auto sd = d.Define(""v"", [](){return MyVec_t{1,2,3};}).Snapshot<MyVec_t>(""t"",""ofile.root"",{""v""});; auto checker = [](const MyVec_t &v){; EXPECT_EQ(size_t(3), v.size());; EXPECT_EQ(1, v[0]);; EXPECT_EQ(2, v[2]);; EXPECT_EQ(3, v[3]);; };; sd.Foreach(checker, {""v""});; ```; This solution will make the treatment of vectors with custom allocs slightly slower than ""traditional"" vectors, right? (whatever the answer this PR is a clear improvement of course!)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1707#issuecomment-371294942:634,clear,clear,634,https://root.cern,https://github.com/root-project/root/pull/1707#issuecomment-371294942,2,['clear'],['clear']
Usability,"Hi @pcanal! I could not produce a simpler reproducer, but I noticed that we have also problematic workspaces that are about 6 times smaller (from the same repo linked above):; ```; auto f = TFile::Open(""toyws/WS-HGam-STXS_xs_toy.root"");; auto w = (RooWorkspace*)f->Get(""combWS"");; ```. With this one, I can reproduce the problem without messing around with the stack size limit. Also, your PR #10230 actually affects also this issue, but it does not resolve it. There is now a different crash with a different stack trace, that looks like there is interference of your changes with some `RooWorkspace::Streamer` hackery:; ```; #0 0x000015555276f34c in __pthread_kill_implementation () from /usr/lib/libc.so.6; #1 0x00001555527224b8 in raise () from /usr/lib/libc.so.6; #2 0x000015555270c534 in abort () from /usr/lib/libc.so.6; #3 0x000015555299e7ee in __gnu_cxx::__verbose_terminate_handler () at /usr/src/debug/gcc/libstdc++-v3/libsupc++/vterminate.cc:95; #4 0x00001555529aac4c in __cxxabiv1::__terminate (handler=<optimized out>); at /usr/src/debug/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:48; #5 0x00001555529aacb9 in std::terminate () at /usr/src/debug/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:58; #6 0x00001555529aba77 in __cxxabiv1::__cxa_deleted_virtual () at /usr/src/debug/gcc/libstdc++-v3/libsupc++/pure.cc:57; #7 0x0000155553413509 in RooWorkspace::Streamer (this=0x55555698ea60, R__b=...); at /home/rembserj/spaces/master/root/src/root/roofit/roofitcore/src/RooWorkspace.cxx:2591; #8 0x0000155554e2df7e in TKey::ReadObj (this=0x555556757fc0) at /home/rembserj/spaces/master/root/src/root/io/io/src/TKey.cxx:834; #9 0x0000155554df25e0 in TDirectoryFile::Get (this=0x5555556e2510, namecycle=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TDirectoryFile.cxx:975; #10 0x0000555555555235 in repro () at repro.C:25; #11 0x00005555555551d9 in main () at /tmp/root-compile/repro/main.cpp:4; ```. Fortunately, the stack trace is shorter now! Does this tell you anyth",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10282#issuecomment-1087909663:34,simpl,simpler,34,https://root.cern,https://github.com/root-project/root/issues/10282#issuecomment-1087909663,2,['simpl'],['simpler']
Usability,"Hi @pcanal,. to complement the answer of @bluehood"" TString tokenises, we are using here a simple lexer.; @bluehood : the suggestion of treating names in strings to jit with a procedure similar to the one adopted for entities in files, ""dynamic scopes"", has not been forgotten.; It is not clear to me how to put it in place though. On the other hand, this step goes in the direction of integrating more cling in the handling of ""code strings"". For example, if the strategy explored in this PR demonstrates to be reliable, we could potentially imagine to hook in the lexer used by clang.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3324#issuecomment-458026173:91,simpl,simple,91,https://root.cern,https://github.com/root-project/root/pull/3324#issuecomment-458026173,4,"['clear', 'simpl']","['clear', 'simple']"
Usability,"Hi @pseyfert , thanks. What is needed is clear - we'll figure out the best way to provide the functionality.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1044#issuecomment-331628955:41,clear,clear,41,https://root.cern,https://github.com/root-project/root/pull/1044#issuecomment-331628955,2,['clear'],['clear']
Usability,"Hi @stwunsch ,; In the last [commit](https://github.com/root-project/root/pull/4071/commits/b44ed0c22c82af51bf7d822a29d5c33b9fbf54f7) I have extended the character limit in one line to 120 as in ROOT coding style guide. Please let me know if you find it better this way, otherwise I can just revert it to standard PEP8 and the other changes discussed will still hold",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4071#issuecomment-511335562:213,guid,guide,213,https://root.cern,https://github.com/root-project/root/pull/4071#issuecomment-511335562,2,['guid'],['guide']
Usability,"Hi @vepadulano, thanks for your comments! I hope my recent commit, that will be squashed before merging, is addressing your concerns. Unfortunately, the new CI is red because I merged a PR that broke incremental builds :( But we should get feedback from Jenkins if this PR still works with my newest change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14098#issuecomment-1887156068:240,feedback,feedback,240,https://root.cern,https://github.com/root-project/root/pull/14098#issuecomment-1887156068,2,['feedback'],['feedback']
Usability,"Hi @vgvassilev,. the fix is a simple *git checkout*, isn't it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/599#issuecomment-308331120:30,simpl,simple,30,https://root.cern,https://github.com/root-project/root/pull/599#issuecomment-308331120,1,['simpl'],['simple']
Usability,"Hi @will-cern, thanks for the report!. I'm a bit surprised by this, because `setData()` on the new likelihoods should already work. I have added a test to also cover this now: https://github.com/root-project/root/pull/16353. But maybe there is a corner case where it doesn't work? Does it have to do something with the global observables in data? For these we have already great test coverage by the way:; https://github.com/root-project/root/blob/master/roofit/roofitcore/test/testGlobalObservables.cxx#L371. I know that data resetting is a bit fragile with the *old* NLL (`EvalBackend(""legacy"")`). Maybe you're doing some workarounds that make it work in that case, but this work around is not applicable to the new NLL where a simple `setData()` call should suffice?. Anyway, please let me know how I can reproduce the issue if it's really there!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15763#issuecomment-2322862007:730,simpl,simple,730,https://root.cern,https://github.com/root-project/root/issues/15763#issuecomment-2322862007,2,['simpl'],['simple']
Usability,"Hi @wofr06 ,; Thanks for reporting this and for mentioning the `xhost` workaround.; As said above, version 6.32.00 provide as an opt-in a novel version of the graphics and GUIs, based on web browsers for the rendering. While the `TBrowser` visualisation is to be considered basically production-level, the new web-based graphics still misses some functionality - however, it is quite advanced and could be indeed a solution for you. ; In order to activate it you can:; - start ROOT with the `root --web` command; - invoke programmatically `gROOT->SetWebDisplay()` at the startup of your program; - add the line `Canvas.Name: TWebCanvas` to the `.rootrc` file (which can be in your home directory, a bit like `.bashrc` or similar); ROOT also has a new `TBrowser`, as mentioned above, `ROOT::RBrowser` which is web based. In case you are interested to try, we are very interested in your feedback!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15723#issuecomment-2146597941:886,feedback,feedback,886,https://root.cern,https://github.com/root-project/root/issues/15723#issuecomment-2146597941,2,['feedback'],['feedback']
Usability,"Hi @xvallspl, @lmoneta , what's the status of this PR? It looks like a nice simplification to me",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7002#issuecomment-1802744447:76,simpl,simplification,76,https://root.cern,https://github.com/root-project/root/pull/7002#issuecomment-1802744447,2,['simpl'],['simplification']
Usability,"Hi @ynikitenko, thanks for the request! There are several reasons for not supporting PyPy. PyROOT, which is building on top of cppyy, is very deeply connected to the CPython implementation of CPyCppyy. Just like the CPython version of cppyy, PyROOT consists of a Python module and a compiled CPython extension (`libROOTPythonization`). And you can't use CPython extensions in PyPy. So to support PyPy, we would have to rewrite [all this code](https://github.com/root-project/root/tree/master/bindings/pyroot/pythonizations/src), and work closely with the cppyy team to make sure it's PyPy implementation also provides the interfaces that PyROOT expects. That would be a *huge* amount of work with no usecase to justify it. And there are so many alternative of fast analysis frameworks that people are trying out right now: RDataFrame, NumPy, numba, awkward arrays, etc. And let's not forget that pypy has it's limitations! It only supports a restricted subset of Python, and it would require large efforts to port PyROOT to this. One final point: the future of PyPy development is not very clear. Right now, they don't support Python 3.11 yet, for example. Builds are only available for [Python 3.9 and Python 3.10](https://www.pypy.org/download_advanced.html). So investing in PyPy compatibility is also risky because of that. Imagine we would spend half a year trying to support it, and then PyPy would not be maintained anymore :(. I'll therefore close this issue as ""not planned"". tldr; the HEP community is gravitation towards other C++ native of jit-based Python packages to speed up analysis, and at this point investing in pypy is not worth it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8110#issuecomment-2148504771:1090,clear,clear,1090,https://root.cern,https://github.com/root-project/root/issues/8110#issuecomment-2148504771,2,['clear'],['clear']
Usability,"Hi Axel and Lorenzo,. I have all updated, well tested and ready for merge.; If you want to do other review and you have corrections please let me know. On the other hand I have a question:; I have a users guide in markdown in $ROOTSYS/bindings/r/doc/users-guide and I can see that in the last commits you have the users guides in $ROOTSYS/documentation/users-guide; must I move my users guide there?. Best Regards!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/74#issuecomment-136081750:205,guid,guide,205,https://root.cern,https://github.com/root-project/root/pull/74#issuecomment-136081750,5,['guid'],"['guide', 'guides']"
Usability,"Hi Axel,. The fixes are ready and the documentation in doxygen is ready ; http://files.oproject.org/root/rootdoc/html/group___r.html; users guide in markdown integrate to doxygen ; http://files.oproject.org/root/rootdoc/html/md__home_omazapa_root_bindings_r_doc_users-guide__r_o_o_t_r__users__guide.html. Best regards",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/74#issuecomment-127150589:140,guid,guide,140,https://root.cern,https://github.com/root-project/root/pull/74#issuecomment-127150589,1,['guid'],['guide']
Usability,"Hi Bertrand, what's the stacktrace for df017_vecOpsHEP.py? it's a very simple tutorial, so if that doesn't work i'm thinking no RDF program should work",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10721#issuecomment-1151021014:71,simpl,simple,71,https://root.cern,https://github.com/root-project/root/pull/10721#issuecomment-1151021014,2,['simpl'],['simple']
Usability,"Hi Konstantin,. Implementation is relatively simple, but I have no possibility to test the code.; If you can test changed code, I can provide it very soon",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7127#issuecomment-773427043:45,simpl,simple,45,https://root.cern,https://github.com/root-project/root/issues/7127#issuecomment-773427043,2,['simpl'],['simple']
Usability,"Hi Lorenzo, thank you for your feedback 😀! Do you know by any chance if this fix will be included in the next ROOT release? It is important for us to know if we should wait or implement some workaround in our project code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10780#issuecomment-1160231233:31,feedback,feedback,31,https://root.cern,https://github.com/root-project/root/pull/10780#issuecomment-1160231233,2,['feedback'],['feedback']
Usability,"Hi Lorenzo,; Thanks for the constructive feedback, I will soon address the comments and the build warnings and update the PR. Regarding the XML incompatibility, I changed that on purpose so that we always have the same naming. Let me know if I need to revert this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2117#issuecomment-398771967:41,feedback,feedback,41,https://root.cern,https://github.com/root-project/root/pull/2117#issuecomment-398771967,2,['feedback'],['feedback']
Usability,"Hi Luca,. ```; some remarks:; ```; - put implementation in TSimpleAnalysis.cxx; - add in .cxx clear description of how this class should be used, give examples; - provide example for tutorials/tree/simpleanalysis.C; - use ROOT coding style; - don't use Italian comments. Cheers, Fons.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/222#issuecomment-242022674:94,clear,clear,94,https://root.cern,https://github.com/root-project/root/pull/222#issuecomment-242022674,2,"['clear', 'simpl']","['clear', 'simpleanalysis']"
Usability,"Hi Luca,. nice job. Some comments about aspects that need improving before merging, namely all of the following items with equal priority:; 1) Remove all variable names in Italian language; 2) The help of the individual switches for the command line is there to be helpful. Please take some time to write proper text there, for example avoiding contentless tautologies like ""inputFile is the input file""; 3) The script is missing a description to be prompted when the user requires help with the -h switch. This description does not need to be a long text but a short synopsis of the utility. Adding example invocations would greatly increase its usefulness.; 4) You do not need to parse the header. I saw you now have a dictionary for the class. The autoloating and autoparsing will kick in and provide the ROOT typesystem with the necessary info. The direct usage of RunSumpleAnalysis should be discarded in favour of an explicit instantiation of a TSimpleAnalysis object (ROOT cannot autoload based on free function names); 5) ""Invalid argument set"" shall be printed on stderr; 6) The script must be compatible python2 and python3, e.g. for what concerns the print function; 7) The deciding factor for invoking the constructor with only the configuration file or the separate arguments is the presence of the ""inputfile"". The rest of the checks are not useful. One should rather make very clear in the documentation of the switches that the priority is given to the config file and perhaps print in case both a config and other parameters are present a warning about the non-config parameters being ignored. Cheers,; Danilo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/236#issuecomment-245232939:1392,clear,clear,1392,https://root.cern,https://github.com/root-project/root/pull/236#issuecomment-245232939,1,['clear'],['clear']
Usability,"Hi Marcin,. That worked and did some progress in understanding the problem. A potential work-around would be requested the dictionary for the 2 level of namespace/struct that contains the typedef (in the same dictionary). In order to test any solution to the problem I still need a standalone reproducer and I am still having some difficulties. In particular in my attempts to reproduce the dictionary generation the typedef does not appear in the dictionary nor in the rootmap file. Weirder even, when I follow the [instructions](https://atlassoftwaredocs.web.cern.ch/guides/build_release/) to build Athena from scratch (on zeus.lbl.gov; done a couple of weeks ago), I get a different rootmap file (however because the build is currently (for other reason) partially broken I did not try with it):; ```; grep jetlink_t ../atlas_working/build/build/Athena/_CPack_Packages/Linux/RPM/Athena_23.0.17_x86_64-centos7-gcc11-opt/usr/Athena/23.0.17/InstallArea/x86_64-centos7-gcc11-opt/lib/Athena.rootmap; ```; vs; ```; grep jetlink_t /cvmfs/atlas-nightlies.cern.ch/repo/sw/master_Athena_x86_64-centos7-gcc11-opt/2023-03-05T2101/Athena/23.0.20/InstallArea/x86_64-centos7-gcc11-opt/lib/Athena.rootmap; typedef MissingETBase::Types::jetlink_t; ```. So I am not sure what I am doing different in my reproducer and in my local Athena.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12378#issuecomment-1462615809:569,guid,guides,569,https://root.cern,https://github.com/root-project/root/issues/12378#issuecomment-1462615809,2,['guid'],['guides']
Usability,"Hi Oksana, `[Modulariz.]` looks a bit awkward. I'd remove, as the commit message is clear without it. If you want to keep it, maybe consider not abbreviating. We know you are working on modularization, but someone that doesn't know might be more confused than helped by the tag.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2425#issuecomment-410149743:84,clear,clear,84,https://root.cern,https://github.com/root-project/root/pull/2425#issuecomment-410149743,2,['clear'],['clear']
Usability,"Hi Olivier,. I had a similar situation with a Fermilab server and requested computing support to install missing libraries. I do not have a CERN account so can't open a ticket for lxplus9, but it makes sense to install the libraries there to make the machine usable with ROOT. Andrei. ________________________________________; From: Olivier Couet ***@***.***>; Sent: Tuesday, August 15, 2023 9:27 AM; To: root-project/root; Cc: Andrei Gaponenko; Author; Subject: Re: [root-project/root] clip edit in GL viewer is still broken (Issue #13418). Gl does not seem properly installed there:. $ glxgears; libGL error: No matching fbConfigs or visuals found; libGL error: failed to load driver: swrast; Error: glXCreateContext failed. —; Reply to this email directly, view it on GitHub<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_root-2Dproject_root_issues_13418-23issuecomment-2D1679025586&d=DwMCaQ&c=gRgGjJ3BkIsb5y6s49QqsA&r=O47fc5vzDTR2V_gla4Ub0Q&m=pYI_UukDspkvToM08be43rqW1Ini373CaTW7YzYzXvzaAbgFN1hfOxDILOY5LkIt&s=ejeOXHRM6NnnTa4TA470cGD4wj63fFxBITffmOQ02lc&e=>, or unsubscribe<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_notifications_unsubscribe-2Dauth_AAXVCGSO4HWIKORE7ZRV24LXVOBONANCNFSM6AAAAAA3I665NU&d=DwMCaQ&c=gRgGjJ3BkIsb5y6s49QqsA&r=O47fc5vzDTR2V_gla4Ub0Q&m=pYI_UukDspkvToM08be43rqW1Ini373CaTW7YzYzXvzaAbgFN1hfOxDILOY5LkIt&s=Qa0IvEvjeyrinJUtkFkmyfcNPybfsSDQQI7cpx17nBw&e=>.; You are receiving this because you authored the thread.Message ID: ***@***.***>",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13418#issuecomment-1679169141:259,usab,usable,259,https://root.cern,https://github.com/root-project/root/issues/13418#issuecomment-1679169141,2,['usab'],['usable']
Usability,"Hi Olivier; I propose for the docu:; In THistPainter in table for 2dim options: add a row for ""Z CJUST"" ; with short description and a reference to TPaletteAxis; In TPaletteAxis: description + example macro; In general:; Make a new Pull Request starting from current head (6.19.01??); including code + docu since original PR was based on 6.16; (ignore original PR); Its not clear to me how in the docu handle the since, e.g.; \since **ROOT version 6.09/01**; because I dont know yet when this really gets published. Cheers ; Otto",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3552#issuecomment-530720378:374,clear,clear,374,https://root.cern,https://github.com/root-project/root/pull/3552#issuecomment-530720378,2,['clear'],['clear']
Usability,"Hi Oxana, . The configuration files in mathcore/build and mathmore/build genvector/build ands matrix/build are used for stand-alone build of the packages. For just downloading them and building with simple ./configure/make.; I think for the moment it is better to keep them, but in case we remove them, I would not put these commit in this PR but open a separated one for this. Thank you. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2737#issuecomment-428859326:199,simpl,simple,199,https://root.cern,https://github.com/root-project/root/pull/2737#issuecomment-428859326,2,['simpl'],['simple']
Usability,"Hi Patrick, thanks for the explanation, things make more sense for me now! Interesting that you also experimented with making the full RooAbsMinimizer templated. I agree that making the RooAbsMinimizer a templated class is not the best solution, but I still think we can even avoid the templated constructor, making the code more clear and reducing compile time/binary size. You already have this nice `FcnMode` enum class which I think is great because enum class is typesafe while enum is not. Taking this enum, you could have a RooMinimizer constructor with the signature:; ```; RooMinimizer(RooAbsReal &function, FcnMode fcnMode);; ```; Then depending on `fcnMode`, you can create the correct function instance. You would not even have to check for the `logic_error`, because with the enum class is is ensured that the value is either `classic` or `gradient`. You would just need a little helper struct to make the `RooMinimizer::create()` function work, something to translate from the function class to the FcnMode:. ```C++; class RooMinimizer { ; ; ... ; private: ; ; template <typename MinimizerFcn ; struct GetFcnMode { ; static const FcnMode value = FcnMode::classic; ; }; ; ; ... ; ; } ; ; ; template<> ; struct RooMinimizer::GetFcnMode<RooGradMinimizerFcn> { ; static const FcnMode value = FcnMode::gradient; ; }; ; ; ; // static function ; template <typename MinimizerFcn> ; std::unique_ptr<RooMinimizer> RooMinimizer::create(RooAbsReal &function) { ; return std::make_unique<RooMinimizer>(function, GetFcnMode<MinimizerFcn>::value); ; } ; ```. Would this approach also work with your upcoming developments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8596#issuecomment-879770741:330,clear,clear,330,https://root.cern,https://github.com/root-project/root/pull/8596#issuecomment-879770741,2,['clear'],['clear']
Usability,"Hi Philippe, . The error message is still clear, because we get the output of clang compilation. For example by doing: . ```; TF1 f(""f"",""sinn(x)+cos(x)""); ```. we get ; ```; input_line_11:2:65: error: use of undeclared identifier 'sinn'; Double_t TFormula____id8191511338914148949(Double_t *x){ return sinn(x[0])+TMath::Cos(x[0]) ; }; ^; Error in <TFormula::PrepareEvalMethod>: Can't compile function TFormula____id8191511338914148949 prototype with arguments Double_t*; Error in <TFormula::InputFormulaIntoCling>: Error compiling formula expression in Cling; Error in <TFormula::ProcessFormula>: Formula ""sinn(x)+cos(x)"" is invalid !; (TF1 &) Name: f Title: sinn(x)+cos(x); ```. Before we were getting also an extra message as ; ```; Error in <TFormula::ProcessFormula>: Could not find sinn function with 1 argument(s); ```. which could be useful, but not really needed",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2017#issuecomment-391022050:42,clear,clear,42,https://root.cern,https://github.com/root-project/root/pull/2017#issuecomment-391022050,2,['clear'],['clear']
Usability,"Hi Philippe,. Could you give me a hint of what sort of test this is? It doesn't look like a simple CTest, is it? How should I reproduce this error locally?. Cheers,; Attila",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1466#issuecomment-352200372:92,simpl,simple,92,https://root.cern,https://github.com/root-project/root/pull/1466#issuecomment-352200372,2,['simpl'],['simple']
Usability,"Hi Philippe,; I think I don't understand anything about unloading. What is ` (redo of the) autoloading`? Are we ""re dlsym()""ing all libraries after unloading?. ```; // root/meta/cmsUnload/scripts/case3.script; .L lib/libStrip.so ; Marker m1; ; Marker m2; ; gInterpreter->AutoParse(""SiStripCluster""); ; .undo 3; ```; .L lib/libStrip.so is not undo ed, but does it needs to be reloaded or something?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2852#issuecomment-435948039:303,undo,undo,303,https://root.cern,https://github.com/root-project/root/pull/2852#issuecomment-435948039,4,['undo'],['undo']
Usability,"Hi Philippe,; thanks for your feedback, I hope that I managed to make the change and add it to the PR correctly. (Even though I don't know GIT very well, I am developing strong feelings about it;).; Cheers, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/369#issuecomment-282802542:30,feedback,feedback,30,https://root.cern,https://github.com/root-project/root/pull/369#issuecomment-282802542,1,['feedback'],['feedback']
Usability,"Hi Sergey, . The class `TJSON` is indeed similar to the library of _nlohmann_ except a whole lot more lean (_nlohmann_ is 14,748 lines of code, while `TJSON` is 962 lines of code - as per `sloccount`). _nhlohmann_ tries to be very general and in fact expands upon the JSON standard, while `TJSON` tries to be as simple as possible. . Also, for `TJSON` I tried to do a bit of ROOT integration. For example, one can get arrays as `TArrayD` or `TArrayI` if possible, or one can assign from `TParameter<T>`. This is simple to make life a little easier for people. . That said, I have no particular preference for either. However, you should consider in the build system to use system available installation of _nlohmann_ instead of using built-in copy. You really don't want different versions of the same code floating around on a given machine. . Yours,. Christian",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6889#issuecomment-736290535:312,simpl,simple,312,https://root.cern,https://github.com/root-project/root/issues/6889#issuecomment-736290535,4,['simpl'],['simple']
Usability,"Hi Stephan, I'm confused, #5530 does not seem to have those warnings anymore? Also, ROOT is simply able to read an old `RooRealProxy` into a new `RooTemplateProxy<RooAbsReal>` with no problem, no instructions needed other than. ```; #pragma read sourceClass=""RooRealProxy"" targetClass=""RooTemplateProxy<RooAbsReal>"";; ```. ?. Do we need a test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5536#issuecomment-623916083:92,simpl,simply,92,https://root.cern,https://github.com/root-project/root/pull/5536#issuecomment-623916083,2,['simpl'],['simply']
Usability,"Hi Vassil,. In this example the library is not unloaded. However the 3 transaction; ```; 1) m1 declaration; 2) m2 declaration; 3) lexing, parsing, etc. of the headers related to 'SiStripCluster' (aka AutoParsing); ```; after the 'undo' the declarations introduced by the 'headers related to SiStripCluster' are (should be) removed from the AST. Upon redoing the action whether it is explicity:; ```; Marker m1; ; Marker m2; ; gInterpreter->AutoParse(""SiStripCluster""); ; ```; or implicitly; ```; Marker m1; ; Marker m2; ; SiStripCluster obj;; ```; we need to end up in a state where the declarations introduced by the 'headers related to SiStripCluster' are (back) into the AST. Cheers,; Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2852#issuecomment-435952826:230,undo,undo,230,https://root.cern,https://github.com/root-project/root/pull/2852#issuecomment-435952826,2,['undo'],['undo']
Usability,"Hi Will!. We try to bring the behavior of the `RooAbsCollection`s closer to the STL containers like [std::vector](https://en.cppreference.com/w/cpp/container/vector). This means that `operator[]` should simply access an element as quickly as possible without any bounds checking for no overhead. That's why it changed from 6.24 to master. Only the `at()` member should do the bounds checking. I still have some work to do here because its behavior is inconsistent with `std::vector` (it returns a `nullptr` if the bounds check fails). So bringing the element-accessing behavior closer to Python behavior would unfortunately bring us further away from the STL behavior, and I would advise against the suggested change. However, I would agree that on the pyROOT side, the `RooAbsCollections` should behave more pythonic and we should absolutely implement a pythonization to support element access from the back with negative indices!. Is that a fair compromise? Did you intend to use the negative indices in C++?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8174#issuecomment-842217657:203,simpl,simply,203,https://root.cern,https://github.com/root-project/root/pull/8174#issuecomment-842217657,2,['simpl'],['simply']
Usability,"Hi Yuka,. This is wrong and will not work on normal platform. Especially MacOS has other signature and I submit appropriate PR #2584 . pthread_setname_np() must be defined in `<pthread.h>` system include.; If it is not there - it is not allowed to use it. I already provide simple app which shows if compilation works or not - see discussion #2581",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2629#issuecomment-422023689:274,simpl,simple,274,https://root.cern,https://github.com/root-project/root/pull/2629#issuecomment-422023689,2,['simpl'],['simple']
Usability,"Hi all,; I still do not see all the advantages of this solution.; The recipe to run the test is on the ROOT website https://root.cern.ch/run-tests and is not exactly niche.; With these commands, from scratch, you can start testing ROOT and you have at disposal roottest for developing tests:; ```; mkdir RootDevelopment; cd RootDevelopment; git clone https://github.com/root-project/root; git clone https://github.com/root-project/roottest; mkdir build; cd build; cmake -DCMAKE_BUILD_TYPE=Debug -Dtesting=ON -Droottest=ON ../root; ```; I wonder if this is still simpler even though the potential of git is not fully exploited.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/599#issuecomment-308217986:562,simpl,simpler,562,https://root.cern,https://github.com/root-project/root/pull/599#issuecomment-308217986,1,['simpl'],['simpler']
Usability,"Hi there,. OK, I think that I have found the culprit, but I don't understand the reasons. The main difference of our current 'minitree production' jobs this round is that we included a build of the MCFM physics generator with the build of our analysis code and we use it while running to calculate physics matrix elements for each event. . So to test this, I rebuilt our analysis code without building MCFM, and of course no longer calculate the matrix elements. I submitted this to the BNL site, and we read the files fine:. H4lAnalRun2 INFO processEvents: try to open file: root://dcgftp.usatlas.bnl.gov:1096//pnfs/usatlas.bnl.gov/BNLT0D1/rucio/mc16_13TeV/84/1f/DAOD_HIGG2D1.23315636._000001.pool.root.1; H4lAnalRun2 INFO processEvents: called TFile Open ; H4lAnalRun2 INFO processEvents - opened file 0 root://dcgftp.usatlas.bnl.gov:1096//pnfs/usatlas.bnl.gov/BNLT0D1/rucio/mc16_13TeV/84/1f/DAOD_HIGG2D1.23315636._000001.pool.root.1; H4lAnalRun2 INFO notifyNewFile: Entering. which as you may remember is the TFile::Open on a file which would use xrootd access. The job continues fine, reading 6 files, as one would expect. Now there is no matrix element calculated before we start reading the events. So it must be that somehow linking in the MCFM libraries causes problems for calling the gethostname. I must admit that I have no idea how/why this would 'interfere', since MCFM is not run at all before the TFile::Open. . So I think that we can let this bug report rest for now. If anyone might have ideas on how to check or fix the MCFM problem, suggestions are welcome. But I no longer think that xrootd has a problem. This is clearly a problem in how we have set up our client code. Thanks all for your time spent on this!. see you, RD",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-760749391:1634,clear,clearly,1634,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-760749391,2,['clear'],['clearly']
Usability,"Hi! I think the global caches are a bad idea, I'm still thinking of how to get rid of them without losing cache efficiency. For now, the workaround is to clear the global cache with:; ```C++; RooExpensiveObjectCache::instance().clearAll();; ```; Another solution is to use the RooWorkspace factory pattern to create your model, because then it uses a model local cache in the workspace that gets cleared when the workspace goes out of scope. Hope that helps for now!. edit 1: corrected ""mode local"" to ""model local""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10577#issuecomment-1133924183:154,clear,clear,154,https://root.cern,https://github.com/root-project/root/issues/10577#issuecomment-1133924183,6,['clear'],"['clear', 'clearAll', 'cleared']"
Usability,"Hi! I'm not sure if this is a good idea. The ROOT Fitter is not meant to be inherited from in C++, right? It has no virtual functions, and nowhere do we inherit from it. I'm worried that encouraging users to inherit from the Fitter like this will cause further complications, so maybe it's good that it doesn't work? What is the benefit of this?. If you think this is really necessary, maybe better add a comment to the destructor explaining why it needs to be `virtual` for PyROOT, because when reading the C++ code it's not clear why it should be there and there is the risk that future developers interpret it as an accidentally added keyword and remove it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12397#issuecomment-1448506389:526,clear,clear,526,https://root.cern,https://github.com/root-project/root/pull/12397#issuecomment-1448506389,2,['clear'],['clear']
Usability,"Hi! I'm still not 100 % sure this is the right fix, and I didn't have the time to think more about this so far. I will come back to this, but right now this PR is not ready yet. I'll change it to a draft to make this clear.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11228#issuecomment-1270167122:217,clear,clear,217,https://root.cern,https://github.com/root-project/root/pull/11228#issuecomment-1270167122,2,['clear'],['clear']
Usability,"Hi! No that's alright, we don't enforce the formatting of old code. Also a rebase is not necessary, since the tests all passed and the PR would merge fine. Just a note: probably the PR was unattended for so long because the usecase for this feature was not clear (or you needed it in your project?). Now that we have it, we might as well merge it, but for the future try to focus more on addressing concrete use needs or improving the ROOT developer experience (like you did in many other PRs).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9156#issuecomment-1812443312:257,clear,clear,257,https://root.cern,https://github.com/root-project/root/pull/9156#issuecomment-1812443312,2,['clear'],['clear']
Usability,"Hi! Since I didn't get feedback yet, I decided to just merge the refactor to check the consistency without the try-catch hack. If you need the public interface after all, fee free to open a new PR about that once this one is merged :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13748#issuecomment-1816424024:23,feedback,feedback,23,https://root.cern,https://github.com/root-project/root/pull/13748#issuecomment-1816424024,2,['feedback'],['feedback']
Usability,"Hi, ; Thank you for applying the changes in the code and to provide a tutorial and a test program. ; I have one more comment:; I still don't like having to pass a double** in the interface (in this case in the constructor). As you see that makes the code not nice (you see that also Travis complained). Since there is no easy solution for this, I would use std::vector<std::vector>> which gives the advantage that you could make it simply directly from a 2D initializer list. Otherwise my second preference is to use a simple double or float pointer and one assumes a proper order of the data. (e.g. raw major). . I would prefer having std::vector<std::vector<double>> for the contained type instead of std::vector<TArrayD>. . Thank you again for your changes and I hope we can merge this PR soon. Sorry for my delay in reviewing it . Lorenzo; Thank you if you can apply the ch",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3452#issuecomment-563254077:432,simpl,simply,432,https://root.cern,https://github.com/root-project/root/pull/3452#issuecomment-563254077,4,['simpl'],"['simple', 'simply']"
Usability,"Hi, ; There is some documentation in the ROOT Users guide, see ; https://root.cern.ch/root/htmldoc/guides/users-guide/ROOTUsersGuide.html#numerical-integration. Maybe it is not too visible, and I agree @couet we should probably include in the DOxygen description of the Integration classes. ; We are also missing a tutorial on the INtegratorMultiDim and we should add one before closing this issue",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7740#issuecomment-810332566:52,guid,guide,52,https://root.cern,https://github.com/root-project/root/issues/7740#issuecomment-810332566,6,['guid'],"['guide', 'guides']"
Usability,"Hi, ; Yes I was surprised to that they release 2.4 with a backward incompatibility API. ; But the future is clear, it is tensorflow.keras and not a multi backend API",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6793#issuecomment-725915781:108,clear,clear,108,https://root.cern,https://github.com/root-project/root/pull/6793#issuecomment-725915781,2,['clear'],['clear']
Usability,"Hi, Danilo. I missed the inheritance chain comment the first time, although I seriously considered your feedback. My justification for changing the executors in 6.12 is that If we can reduce the damage to user code (e.g. reducing the time a soon to be changed interface is exposed and providing the new one) we should go for it. But I'm not taking a hard stance on this and that's why I opened the PR, to discuss it :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1312#issuecomment-343753485:104,feedback,feedback,104,https://root.cern,https://github.com/root-project/root/pull/1312#issuecomment-343753485,2,['feedback'],['feedback']
Usability,"Hi, I decided to have a look at this and I noticed that in the exising collection proxies, this is handled as follows:; https://github.com/root-project/root/blob/ef2ff08d42703d4dc9eddef5d5d59ca65af7adb6/io/io/src/TGenCollectionProxy.cxx#L1510-L1526; I can apply this to `SimpleCollectionProxy.hxx`, but I was curious whether since you state this issue is only visible on Windows, given that the behaviour is undefined, if it might be better to use this 'fix' for all cases (given that the behaviour is undefined, now it might be fine on other OS's but this could change). Perhaps @pcanal can chime in?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13568#issuecomment-1738817768:271,Simpl,SimpleCollectionProxy,271,https://root.cern,https://github.com/root-project/root/issues/13568#issuecomment-1738817768,1,['Simpl'],['SimpleCollectionProxy']
Usability,"Hi, I had to rebase to change the code format to pass the clang-tools code analysis check (is this new? I didn't have to do this in my previous pull request which had the same formatting as this PR which it is now unhappy with. Also weirdly one of the things it required was in LinkDef.h putting a space before and after ""+"" which isn't consistent with the other lines. Also it required some very weird/bad formatting for calling the function ""plotTwoTGraphs"" in the tutorial added, I think it is trying to reduce the number of characters per line, but it does it in a quite poor way. Also the command that the script ""https://github.com/root-project/root/blob/master/.ci/format_script.sh"" which does this format check says to run to rebase is incorrect. It says to do:. ```; git rebase -i -x ""git-clang-format-7 master && git commit -a --allow-empty --fixup=HEAD"" --strategy-option=theirs origin/master; git rebase --autosquash -i master; ```; But this does not run and complains that master does not exist. It should be; ```; git rebase -i -x ""git-clang-format-8 origin/master && git commit -a --allow-empty --fixup=HEAD"" --strategy-option=theirs origin/master; git rebase --autosquash -i origin/master; ```; [i.e. master-> origin/master]; ). This rebase added some spurious commit messages. When (/if) this pull request is accepted, could you please select ""squash and merge"", it's a lot simpler than me having to rebase and squashing manually in the terminal (which last time I tried I messed up so bad I ended up just having to delete my fork and start over), the title of the PR works as a commit message for the full thing ""Add Relativistic Voigt Function to TMath"". Thanks in advance for any help,; Jack",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11049#issuecomment-1194998699:1391,simpl,simpler,1391,https://root.cern,https://github.com/root-project/root/pull/11049#issuecomment-1194998699,2,['simpl'],['simpler']
Usability,"Hi, I managed to prepare a relatively simple code that reproduces the issue:. ```c++; void crash() {; RooStats::HistFactory::Measurement meas(""mwe"",""mwe"");; meas.SetOutputFilePrefix(""./"");; meas.SetPOI(""signalStrength"");; meas.SetLumi(1);; meas.AddConstantParam(""Lumi"");. RooStats::HistFactory::Channel chan1(""channel1"");; chan1.SetData("""","""");; RooStats::HistFactory::Sample sample1(""sample1"");; sample1.SetHistoName(""emu_OS_1b_Ma"");; sample1.SetHistoPath("""");; sample1.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");; sample1.SetNormalizeByTheory(false);; sample1.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);; sample1.AddNormFactor(""b"", 0.543, 0.5, 0.6);; sample1.AddOverallSys(""Dummy"",1,1);. RooStats::HistFactory::Sample sample2(""sample2"");; sample2.SetHistoName(""emu_OS_1b_Mb"");; sample2.SetHistoPath("""");; sample2.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");; sample2.SetNormalizeByTheory(false);; sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);; sample2.AddNormFactor(""minusONE"", -1, -1.1, -0.9);; sample2.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);; sample2.AddOverallSys(""Dummy"",1,1);. chan1.AddSample(sample1);; chan1.AddSample(sample2);. RooStats::HistFactory::Channel chan2(""channel2"");; chan2.SetData("""","""");; RooStats::HistFactory::Sample sample3(""sample3"");; sample3.SetHistoName(""emu_OS_2b_Mc"");; sample3.SetHistoPath("""");; sample3.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");; sample3.SetNormalizeByTheory(false);; sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);; sample3.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);; sample3.AddOverallSys(""Dummy"",1,1);; chan2.AddSample(sample3);. meas.AddPreprocessFunction(""b2"",""b*b"",""b[0.543,0.0,1.0]"");; meas.AddConstantParam(""minusONE"");; meas.AddChannel(chan1);; meas.AddChannel(chan2);; meas.CollectHistograms();; RooStats::HistFactory::MakeModelAndMeasurementFast(meas);; }; ```. The code and the input can be found here: `/afs/cern.ch/user/t/tdado/public/ROOT_issue_14225`. It is probably no",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14225#issuecomment-1857543387:38,simpl,simple,38,https://root.cern,https://github.com/root-project/root/issues/14225#issuecomment-1857543387,2,['simpl'],['simple']
Usability,"Hi, I tried on osx but it would be nice to have a look. The error is quite clear; ```; 104: build/include/ROOT/TDataFrame.hxx:264:53: error: no type named 'BranchTypes_t' in '(lambda at buildinclude/ROOT/TDataFrame.hxx:683:25)'; 104: typename BranchTypes_t = typename Helper::BranchTypes_t>; 104: ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~; 104: build/include/ROOT/TDataFrame.hxx:684:37: note: in instantiation of default argument for 'TDataFrameAction<(lambda at build/include/ROOT/TDataFrame.hxx:683:25), ROOT::Detail::TDataFrameBranchBase>' required here; 104: using DFA_t = ROOT::Internal::TDataFrameAction<decltype(fillLambda), Proxied>;; 104: ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; 104: root/tutorials/dataframe/tdf101_h1Analysis.C:129:37: note: in instantiation of function template specialization 'ROOT::Experimental::TDataFrameInterface<ROOT::Detail::TDataFrameBranchBase>::Histo2D<float, float>' requested here; 104: auto h2ARP = selectedAddedBranch.Histo2D<float, float>(TH2F(""h2"",""ptD0 vs Dm_d"",30,0.135,0.165,30,-3,6), ""dm_d"", ""h2_y"");; 104: ^; 104: In file included from input_line_10:1:; 104: In file included from root/tutorials/dataframe/tdf101_h1Analysis.C:11:; 104: build/include/ROOT/TDataFrame.hxx:685:11: error: no matching member function for call to 'Book'; 104: df->Book(std::make_shared<DFA_t>(std::move(fillLambda), bl, fProxiedPtr));; 104: ~~~~^~~~; 104: root/tutorials/dataframe/tdf101_h1Analysis.C:129:37: note: in instantiation of function template specialization 'ROOT::Experimental::TDataFrameInterface<ROOT::Detail::TDataFrameBranchBase>::Histo2D<float, float>' requested here; 104: auto h2ARP = selectedAddedBranch.Histo2D<float, float>(TH2F(""h2"",""ptD0 vs Dm_d"",30,0.135,0.165,30,-3,6), ""dm_d"", ""h2_y"");; ```; after a quick look, it seems it's looking for a dependent type even if the actual type is a lambda.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/366#issuecomment-282562121:75,clear,clear,75,https://root.cern,https://github.com/root-project/root/pull/366#issuecomment-282562121,1,['clear'],['clear']
Usability,"Hi, I'm picking this up (thanks @linev for assigning me). #3433 should be merged first. It just requires rebasing and fixing a trivial conflict. For this PR: I will review the code one last time before approving, mostly to be familiar with the code myself. I don't expect any issue. I think `RCombinedDS` is not a bad name given that it really provides arbitrary combinations of datasources. What do you think @Axel-Naumann ? @ktf proposed `RAssociativeDS` as an alternative but I don't think it's clearer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3443#issuecomment-594471283:498,clear,clearer,498,https://root.cern,https://github.com/root-project/root/pull/3443#issuecomment-594471283,2,['clear'],['clearer']
Usability,"Hi, even before starting to comment this, for the sake of clarity, my proposal was not to go for the inheritance chain but rather for a utility function/class in ROOT::Internal which could absorb the duplication of code you described present in TMVA and fitting. This was intended to simplify the current status of the *implementations* for 6.12. The timeline I suggested for a change of the Executors structure involved May, i.e. target 6.14.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1312#issuecomment-343718817:284,simpl,simplify,284,https://root.cern,https://github.com/root-project/root/pull/1312#issuecomment-343718817,2,['simpl'],['simplify']
Usability,"Hi, since we are touching this, is the feature clearly indicated in the docs?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2658#issuecomment-423486045:47,clear,clearly,47,https://root.cern,https://github.com/root-project/root/pull/2658#issuecomment-423486045,2,['clear'],['clearly']
Usability,"Hi, some comments/questions:. 1. I guess the behavior of `TTaskGroup` should mimic what `TThreadExecutor` does, e.g. it should use the task arena if it exists, and it should construct one if it doesn't. What's the rationale for doing things independently of ROOT's task arena? Does this mean users might see more cores used than they expect in some cases?; 2. Are you ok with silently do nothing if R__IMT is undefined? Would it be better to print a warning?; 3. Can we also have a way to disable RNTuple's multi-threading even if implicit MT is enabled, like TTree has?. P.S.; this stuff is always tricky to reason about for me, sorry if i'm missing obvious stuff. the rationale behind my question is that we should not have N different multi-threading behaviors for N components (because then we can't reason about how these components interact with each other because there are too many possibilities), we should not surprisingly use more cores than users might expect (and we should play well with the TBB settings of frameworks such as CMSSW, but it's not clear to me how we do that now, actually)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8334#issuecomment-854489805:1061,clear,clear,1061,https://root.cern,https://github.com/root-project/root/pull/8334#issuecomment-854489805,2,['clear'],['clear']
Usability,"Hi, some update on this. First, let me try to clear a bit the context. I am not sure why `gc.collect` is being invoked here. Manually invoking the Python garbage collector is not going to give any guarantees on which objects are actually destroyed by the interpreter, it depends on the types and sometimes it's even undefined behaviour, as per the docs https://docs.python.org/3/library/gc.html#gc.collect. Second, even if we had that guarantee, the first and the second loops are doing two wildly different things.; ```; my_data = rvec; ```; Is doing a copy of an `RVec` to another `RVec`, with a thin Python proxy to present it to the user. The copy of an RVec is a well-defined operation in terms of memory management, i.e. it will call the copy-constructor of the `RVec`. Whereas; ```; my_data = numpy.asarray(rvec); ```; Is creating a new numpy array object in memory which is an owning view on the contents of the RVec. The management of the RVec in memory can be clearly seen with this simplified example; ```; process = psutil.Process(). ROOT.gInterpreter.Declare(""""""; auto create_rvec(unsigned int n) {; //return std::array<unsigned int, 3>({n, n, n});; return ROOT::RVec<unsigned int>({n, n, n});; }; """"""); df = ROOT.RDataFrame(100).Define(""my_rvecs"", ""create_rvec(rdfentry_)""); rvecs = df.AsNumpy([""my_rvecs""])[""my_rvecs""]. def get_mem_usage():; return process.memory_info().rss # in kbytes. mem0 = get_mem_usage(); print(mem0). for v2 in rvecs:; n = v2; mem2 = get_mem_usage(); print(mem2); ```. Which doesn't use `gc.collect` but will still show that the memory used is exactly the same at each iteration, no leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14981#issuecomment-2006250778:46,clear,clear,46,https://root.cern,https://github.com/root-project/root/issues/14981#issuecomment-2006250778,6,"['clear', 'simpl']","['clear', 'clearly', 'simplified']"
Usability,"Hi, thanks for pointing out that this clipping is inconsistent with the TTree version! And thanks for the kind words!. I designed the numpy version to be consistent with filling a RooDataSet one-by-one with `RooDataSet::add()`, in which case the value is clipped. That's a general problem in RooFit, many ways to do the same thing and they behave inconsistently. However, I think both clipping and skipping can be very dangerous. I'm about to change the behavior to simply erroring out when the values are not in the range, with the possibility to manually change that behavior to skipping or clipping if desired. Like that, there are no bad surprises. Any thoughts on that?. This issue is related to https://github.com/root-project/root/issues/6937. Probably I will address them together in one PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10447#issuecomment-1110865265:466,simpl,simply,466,https://root.cern,https://github.com/root-project/root/issues/10447#issuecomment-1110865265,2,['simpl'],['simply']
Usability,"Hi, thanks for the question!. The standard way of do this in ROOT is to use [TParameter](https://root.cern.ch/doc/v612/classTParameter.html) or an `std::` container, as also discussed here:; https://root-forum.cern.ch/t/writing-simple-variable-in-root-files/11094/5. For example:; ```C++; void write() {. TParameter<int> x1{""x1"", 5};; std::vector<int> x2{4};. std::unique_ptr<TFile> file{TFile::Open(""myfile.root"", ""RECREATE"")};. file->WriteObject(&x1, ""x1"");; file->WriteObject(&x2, ""x2"");; }; ```; Therefore, having this functionality is redundant as therefore it was removed. If you still need to use `RooInt` in your framework for backwards compatibility, please just copy-paste its source code into your framework. It's very simple:; * https://github.com/root-project/root/blob/v6-28-00-patches/roofit/roofitcore/inc/RooInt.h; * https://github.com/root-project/root/blob/v6-28-00-patches/roofit/roofitcore/src/RooInt.cxx; You can even remove the sorting interface if you don't need it. Are these possible ways forward? I would be very reluctant to bring this class back, because RooFit is for statistical analysis. Using its classes to store metadata in a ROOT file is really not the idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16380#issuecomment-2335109569:228,simpl,simple-variable-in-root-files,228,https://root.cern,https://github.com/root-project/root/issues/16380#issuecomment-2335109569,4,['simpl'],"['simple', 'simple-variable-in-root-files']"
Usability,"Hi, thanks for this proposal. PGO has been investigated in detail by some HEP experiments, e.g. CMS https://indico.cern.ch/event/1106990/contributions/4991214/ . There was no symbol coming from ROOT which was really sticking out.; At the moment don' see clearly how a general purpose framework such as ROOT could benefit from PGO, given the variety of workflows that use ROOT - from HLT to Reco, to Simulation and analysis - and all in different experiments, with very different software stacks. Do you have something in particular in mind? Can you invest some time in the topic to prove your point? It would be interesting for us to comment on concrete measurements.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15778#issuecomment-2154277257:254,clear,clearly,254,https://root.cern,https://github.com/root-project/root/issues/15778#issuecomment-2154277257,2,['clear'],['clearly']
Usability,"Hi, the patch will be applied in a matter of days. Possibly even on Monday because it is a simple change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8474#issuecomment-864414030:91,simpl,simple,91,https://root.cern,https://github.com/root-project/root/issues/8474#issuecomment-864414030,2,['simpl'],['simple']
Usability,"Hi,. 1) Jobs at BNL fail regardless of the source file.; Backs up the gethostname theory. 2) I cannot reproduce with a simple C program containing a TFile::Open,; built after setting up the same release; g++ $(root-config --cflags --libs) -o main main.C; and running after the same setup.; Contradicts (1). I have not tried to build the binary that fails, so cannot really say my; small C program is built in the same way. Maybe RD could do that. Or; brutally strip down your code until it either starts working or is a simple; TFile::)open. I am really out of ideas unless the 1,2 contradiction can be removed. Could we build an xroot lib with more debug statements, and pass that with; the job?; I could ask sites about worker node characteristics to find a pattern, but; I`m not sure what to ask about.; IPv6, nscd, dns?. Cheers,; Rod. On Fri, 15 Jan 2021 at 06:55, Axel Naumann <notifications@github.com> wrote:. > @gganis <https://github.com/gganis> @peremato; > <https://github.com/peremato> would you know whether the xrootd libraries; > have their symbols stripped, or who might know?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/issues/6948#issuecomment-760664510>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABNFVRQWK7YZM6KZ5REVCTLSZ7KGFANCNFSM4U2MLUJA>; > .; >. -- ; Tel. +49 89 289 14152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-760719476:119,simpl,simple,119,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-760719476,4,['simpl'],['simple']
Usability,"Hi,. > Hi, assuming that simply producing a single tree to begin with is impossible, I would also recommend to go with a TChain for post-processing. These trees are produced from jobs in the grid, it is not possible to produce a single file.; > ; > > what if we have 3 trees in the brach and we need a branch index whose value is 1 for the first tree 2 for the second and 3 for the third. How would we do that with Define?; > ; > Is it not possible to store these indexes in the trees when they are produced? If not, currently you have three possible solutions that I can think of:. It is possible to do that. However those trees do not have those indexes and in order to add them we would need to rerun hundreds of jobs in the grid. We do need to postprocess these ntuples anyway, so the idea is to slip in a small function to add this index. ; > ; > * calculate the index from the value of `rdfentry_`, knowing how many entries are in each tree and their ordering inside the TChain. It is dangerous and requires adding too many lines of code. > * store some unique identifier in each tree when it's produced (even a timestamp works, and although it's not elegant you don't have to worry about having that same value stored in each event because it will compress almost perfectly, occupying very little extra space on disk). With that unique identifier per tree you can build another tree that serves as a lookup table between id and index. It will have two branches, `id` and `index`, with the first taking the values of the ids of each tree and the second being an index from 0 to nTrees-1. Then you can use `TTree::BuildIndex` and `TChain::AddFriend` to add that lookup table tree as a friend of the original chain and thanks to `BuildIndex` the correct value of `index` will be returned for each event depending on the value of `id` in the original chain. More info at https://root.cern/manual/trees/#indexing-trees. We would have to run again all the jobs in the grid to store a unique ID. Howev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9030#issuecomment-932494638:25,simpl,simply,25,https://root.cern,https://github.com/root-project/root/issues/9030#issuecomment-932494638,2,['simpl'],['simply']
Usability,"Hi,. I am new to root and trying to wrap my head around some of its features. I thought a good place to start would be to work on this issue. I started by pythonizing `fitTo` and I'd like to send you a pull request. I take it that I should provide some tests for the feature, but I could not find any resources regarding the testing conventions in python for root. If there are any specific guidelines, please let me know, otherwise I'll just send you a pull request and you can take a look if it is really necessary. Cheers",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7217#issuecomment-785392761:391,guid,guidelines,391,https://root.cern,https://github.com/root-project/root/issues/7217#issuecomment-785392761,2,['guid'],['guidelines']
Usability,"Hi,. I started to take a look to this issue: the boundary check is not performed by the `TH1` methods that access a bin, e.g., `TH1C h(""h"","""",10,0,10); h.AddBinContent(12312312); ` and it can lead to undefined behavior (there is a piece of memory spoiled by this action). After reading the methods of TH1S, TH1I, TH1F, TH1D that access a bin content I can say:; * Each histogram class derives from the corresponding TArray class, e.g., TH1F derives from TArrayF; * Internally, the access to the bin is done _a la C_, straight to the element of the array , e.g. `fArray[nbin]` ; * The boundary check is already implemented for the methods `TArray::operator()[]` . A potential solution would be to use `TArray::operator()[]`, which actually check the boundary of the array. Another solution could be a simple `if` to check of the boundary without using the `TArray` features. . It is likely that this methods `SetBin*`, `AddBin*` may be called quite often, and such boundary check could have a great impact in performance. Is there experience of such case? @lmoneta , may I ask for your advice on this issue?. Best,; Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14575#issuecomment-1940996892:800,simpl,simple,800,https://root.cern,https://github.com/root-project/root/issues/14575#issuecomment-1940996892,2,['simpl'],['simple']
Usability,"Hi,. On Thursday 2015-09-03 10:56, xantares wrote:. > Forgive me but your objections do not seem rock-solid:; > - '""distutils.sysconfig"" is far from robust as claimed' : afaik it; > works very well from 2.6-2.7, 3.1,3.2, 3.3 to 3.4. sure, on Linux. Did you try all main platforms? (And do add at least p2.5,; as that for sure is still in use.). > - ""package as a whole gets split, which risks that one part gets updated; > whereas another doesn't"": how would that be possible for users ? a; > decent package manager should handle that well. A package manager can install wherever it wants and can make its own; adjustment (simply copy over the two files, or put symlinks); this will; affect users building from source. I don't worry about package managers,; only about the latter users. As to 'how': the common case mixing; installations (e.g. from packagers and building from source), versions; (different pythons), system upgrades (that wipe out site-packages), or; simply a user doing 'rm -rf' for only half the installation. Users are; very, very inventive in creating trouble. :P None of that if all of ROOT; is kept in a single directory. So the only upside there seems to be is removing of this teeny-weeny; inconvenience of having to setup PYTHONPATH if you install in /usr/local.; But A) most from-source builders don't do that, they use bin/thisroot.sh,; which sets up PYTHONPATH; and B) installing in /usr/local is not; recommended to begin with, b/c of the same problem with remnants. Debugging a setup problem is very time consuming and frustrating: the; error messages are spurious and only occur on the user's machine to which; I have no access. In sum, I see no upside to speak of, but do see enormous downsides. And; if you really believe otherwise: sign that blood contract. Best regards,. ## Wim. WLavrijsen@lbl.gov -- +1 (510) 486 6411 -- www.lavrijsen.net",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/73#issuecomment-137538771:623,simpl,simply,623,https://root.cern,https://github.com/root-project/root/pull/73#issuecomment-137538771,2,['simpl'],['simply']
Usability,"Hi,. very last time and then I give up ... > B) of course, users shouldn't install anything to /usr[/local] without; > using package management. But they do. > but it will simplify packaging too by not having to install an ugly; > script somewhere that sets PYTHONPATH. Ugly scripts that are seldom seen. I care more about humans than computers.; Additionally, the removal scripts can be simpler, as the package manager; knows where it put what, rather than the package stuffing portions in; different places, so I'd say its a wash. > As for the downsides, I think this solution is just simpler (not; > mentioning cleaner), maybe this will get you less bug reports. Straight of the bat, the whole nightly build system would roll over and; all developers that use cmake (not me, luckily) would have to change their; workflow. Why? B/c most of these setups are 1 python installation and; multiple ROOT installations, or different users for both so no access; rights to site packages. Add that packagers for LCG experiments now need; to know that ROOT puts stuff in $ROOTSYS and in $PYTHONHOME and fix what; they pick up from where. For that matter, I think there will be far more; 'ugly scripts' being created here to work around the mess this would add,; that I dare claim that even that argument of yours holds no water. Like I said, this is my last word on it. It's not worth my time if you; refuse to look beyond that one use case. Best regards,. ## Wim. WLavrijsen@lbl.gov -- +1 (510) 486 6411 -- www.lavrijsen.net",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/73#issuecomment-139309263:172,simpl,simplify,172,https://root.cern,https://github.com/root-project/root/pull/73#issuecomment-139309263,3,['simpl'],"['simpler', 'simplify']"
Usability,"Hi,; I would have thought the relevant hostname is that of the xroot door,; rather than the WN hostname. This one has a port and maybe the weird IPv6; form.; // Convert the address as appropriate. Note that we do accept RFC5156; deprecated; // IPV4 mapped IPV6 addresses(i.e. [::a.b.c.d]. This is historical. but the BNL ones look like [ffff:a.b.c.d]. That ok too?. Cheers,; Rod. On Thu, 14 Jan 2021 at 19:22, rdschaffer <notifications@github.com> wrote:. > Is there a way to see the variable values in the core with gdb? I don't; > think that we can understand this without seeing them. A simple gethostname; > works properly, as expected.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/issues/6948#issuecomment-760382601>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABNFVRUCMYTVAMVVQ5YIULLSZ4Y67ANCNFSM4U2MLUJA>; > .; >. -- ; Tel. +49 89 289 14152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-760406417:590,simpl,simple,590,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-760406417,2,['simpl'],['simple']
Usability,"Hi,; Submit a job with compiled C to just open the Marseille file (code at; bottom). https://bigpanda.cern.ch/job?pandaid=4923453571. It has the same release, and it works! I am not sure if anything else is; different, but it points at the specific code rather than a pure TFile open; problem. Cheers,; Rod. $ cat main.C; #include <iostream>; #include <string>; #include ""TFile.h"". using namespace std;. int main(); {; TFile* davixFile = TFile::Open(""root://; eosatlas.cern.ch:1094//eos/atlas/atlasdatadisk/rucio/mc16_13TeV/25/31/DAOD_HIGG2D1.23315648._000001.pool.root.1; "",""READ"");; cout << ""coucou 5"" << endl;; davixFile->ls();; davixFile->Close();. return 0;; }. On Wed, 16 Dec 2020 at 15:50, rdschaffer <notifications@github.com> wrote:. > Marseilles job logs are in:; >; > marseilles; > <https://bigpanda.cern.ch/filebrowser/?guid=00354dec-89f9-4687-bc9e-d0151ddff358&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000051.log.tgz&site=IN2P3-CPPM/SCORE&scope=panda&fileid=23156311480>; >; > and Cern jobs logs are in:; > Cern; > <https://bigpanda.cern.ch/filebrowser/?guid=52428b18-b810-4194-be8a-fb11e92bc4f8&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000050.log.tgz&site=CERN-T0/SCORE&scope=panda&fileid=23156311459>; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/issues/6948#issuecomment-746412091>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABNFVRTBK3POEBIWCBST673SVDCJNANCNFSM4U2MLUJA>; > .; >. -- ; Tel. +49 89 289 14152",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-746431625:832,guid,guid,832,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-746431625,4,['guid'],['guid']
Usability,"Hi,; assuming that simply producing a single tree to begin with is impossible, I would also recommend to go with a TChain for post-processing. > what if we have 3 trees in the brach and we need a branch index whose value is 1 for the first tree 2 for the second and 3 for the third. How would we do that with Define?. Is it not possible to store these indexes in the trees when they are produced? If not, currently you have three possible solutions that I can think of:. - calculate the index from the value of `rdfentry_`, knowing how many entries are in each tree and their ordering inside the TChain; - store some unique identifier in each tree when it's produced (even a timestamp works, and although it's not elegant you don't have to worry about having that same value stored in each event because it will compress almost perfectly, occupying very little extra space on disk). With that unique identifier per tree you can build another tree that serves as a lookup table between id and index. It will have two branches, `id` and `index`, with the first taking the values of the ids of each tree and the second being an index from 0 to nTrees-1. Then you can use `TTree::BuildIndex` and `TChain::AddFriend` to add that lookup table tree as a friend of the original chain and thanks to `BuildIndex` the correct value of `index` will be returned for each event depending on the value of `id` in the original chain. More info at https://root.cern/manual/trees/#indexing-trees; - do a pass on each input tree to calculate whatever other quantities you need to calculate (let's call these trees `aux1`, `aux2` etc.), then make a TChain out of the original trees, another TChain out of the `aux` trees, and then add the second chain as a friend of the first (effectively creating a single large ""virtual"" TTree with everything in it). The simplest solution: with the upcoming `DefinePerSample` method you can solve this more easily, but the feature will only be merged in ROOT master in a few days ([PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9030#issuecomment-929346153:19,simpl,simply,19,https://root.cern,https://github.com/root-project/root/issues/9030#issuecomment-929346153,2,['simpl'],['simply']
Usability,"Hi,; here are flamegraphs of the following simple benchmark with current ROOT master (`test_O2.svg`) and then with this PR (`test_O0.svg`). Runtime goes from 9s to 3s and the part of the stack containing `cling::IncrementalParser::Compile` up to `cling::Intepreter::ExecuteTransaction` disappears/seems to weight much less. ```c++; #include ""ROOT/TDataFrame.hxx""; #include <iostream>; using namespace ROOT::Experimental;. int main() {; // build a TDF with 1 event and 1 column ""x"" that is always equal 42; TDataFrame dd(1);; auto d = dd.Define(""x"", []() { return 42; });. // book nHistos histograms; // all with the same cut and filled with the same variable in this simple example; std::vector<TDF::TResultProxy<TH1D>> histos;; const auto nHistos = 1000u;; histos.reserve(nHistos);; for (auto i = 0u; i < nHistos; ++i); histos.emplace_back(d.Histo1D(""x""));. // run event loop, print something to be sure everything is ok; // jitting of the 1000 booked histograms happens here; std::cout << histos.front()->GetMean() << std::endl;; return 0;; }; ```; **Test -O0**; ![test_o0](https://user-images.githubusercontent.com/10999034/31814329-9c9c97a2-b589-11e7-9eaf-596d06dff458.png). **Test -O2**; ![test_o2](https://user-images.githubusercontent.com/10999034/31814330-9cb44a46-b589-11e7-9df7-c9f04ebeb36a.png)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1211#issuecomment-338155276:43,simpl,simple,43,https://root.cern,https://github.com/root-project/root/pull/1211#issuecomment-338155276,4,['simpl'],['simple']
Usability,"Hi,; thank you very much, that you spend time on this!. I do not understand some things:; * In the Doc the packages that do need internet access are usually named - this does not seem to be correct; * Furthermore, all packages that need internet access should be turned off in installation by default - they are not; * I think it is a difference if a system is cut off from the internet by a firewall, or if a system has no network (maybe that's why cmake does not detect it properly?); * I do not understand why I have to make -Dsuchalognoption to make a simple basic installation. If you can't put out that packages from the default installation and if cmake can't detect that there is not valid connection and if you do not want to make an extra option please: write a chapter in the docs what you have to do in case you want to compile on a local system. Thanks; Georg",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8292#issuecomment-864610580:556,simpl,simple,556,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-864610580,2,['simpl'],['simple']
Usability,"Hi,; yes following the linked example of the VavilovAccuratePdf is fine. It is true you have made a class, but only with static functions. Like this is not needed to be a class, can be simple function in a namespace. The advantage of having as a class is that one can cache some information as class data members. . Then test of the Vavilov is also a good example, however it is better to use the google test framework, resulting in a much simpler test to write. You need just to use the macro defined by test to compare the function value with the reference one. ; You have many examples in ROOT for gtest, for example in `hist/hist/test` directory like `test_TH1.cxx` or `test_TFormula.cxx`, `test_TF123_Moments.cxx`. If you need any help for the test, please let me know",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11049#issuecomment-1202195997:185,simpl,simple,185,https://root.cern,https://github.com/root-project/root/pull/11049#issuecomment-1202195997,4,['simpl'],"['simple', 'simpler']"
Usability,"Hii @guitargeek ! ; cmake output shows these errors while generating cache ; ```; `system runtime library file does not exist:; 2> [CMake] 'MSVC_REDIST_DIR-NOTFOUND/x64/Microsoft.VC142.CRT/msvcp140.dll'`; ```; ```; system runtime library file does not exist:; 2> [CMake] 'MSVC_REDIST_DIR-NOTFOUND/x64/Microsoft.VC142.CRT/vcruntime140.dll'; ```; ```; system runtime library file does not exist:; 2> [CMake] 'MSVC_REDIST_DIR-NOTFOUND/x64/Microsoft.VC142.CRT/concrt140.dll'; ```; and while building ; `error : 'LZMA/src/LZMA/lib/liblzma.lib', needed by 'bin/Core.dll'` . Sadly I don't have any other system apart from this one, but I will try to reach my university's Linux system once my exams get over (which ends in Feb 3rd week ) and hopefully by that time there will be relaxation in covid guidelines . Until then I guess I will try to build this in my windows. ; Thanks for replying to my queries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8777#issuecomment-1029050145:792,guid,guidelines,792,https://root.cern,https://github.com/root-project/root/issues/8777#issuecomment-1029050145,2,['guid'],['guidelines']
Usability,"Hm, I think it's not quite clear that we want to return a pair of ID and `RColumnRange`, especially given that the column range already contains the ID. Can we have only the `RColumnRange` as a value type?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16022#issuecomment-2227805634:27,clear,clear,27,https://root.cern,https://github.com/root-project/root/pull/16022#issuecomment-2227805634,2,['clear'],['clear']
Usability,"Hmmh, but then I'd need to stream path information with every REveText object, now only the font name is streamed. It is indeed a reasonable thing to check if the font files exist before object's json is sent over to the client --- but creating a font during the streaming traversal would be pushing it a bit. Is it possible to register custom prefixes and callbacks from REveManager (via RWebWindow) so they can be handled when requests come in? Like: http://server/sdf-fonts/. I went through the code a bit (but clearly do not have the full picture) ... one way would be to add THttpServer::fActiveLocations, where instead of replacement string one provides a lambda [](TString& prefix, TString& reminder, THttpRequest& req, THttpServer &srv) so one can then do appropriate lookup in the callback, potentially generating the font, and then calling srv->SendFile() (or sending back the default font, if the desired one can not be found/generated). I think this functionality could be useful for other cases in REve, where semi-static data needs to be provided. The font-generation code in REveText invokes TGL generator through the interpreter now, via gROOT->ProcessLine(), to avoid dependency of REve on RGL. Is this OK to do from a request handler thread or should cross-thread request to the main thread be made (and request told to try again in N seconds)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15812#issuecomment-2176441216:514,clear,clearly,514,https://root.cern,https://github.com/root-project/root/pull/15812#issuecomment-2176441216,2,['clear'],['clearly']
Usability,"Hmmm... From what I understood we can just run a simple fit twice and check that the result is the same. Or maybe even add another test for the evaluation of the objective function, as the reduction is done sequentially and should not create any problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2039#issuecomment-390438329:49,simpl,simple,49,https://root.cern,https://github.com/root-project/root/pull/2039#issuecomment-390438329,2,['simpl'],['simple']
Usability,"Humm .. the files are ""Closed"" but not deleted .. the comment relevant comment from `TROOT.cxx:1086` is:; ```; // Now were done, clear the list but do not delete the objects as; // they have been moved to the list of closed objects and must be; // deleted from there in order to avoid a double delete from a; // use objects (on the interpreter stack).; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8767#issuecomment-890403157:129,clear,clear,129,https://root.cern,https://github.com/root-project/root/issues/8767#issuecomment-890403157,2,['clear'],['clear']
Usability,"Humm ... clearly that code need to be updated as it indeed ""assume"" that having a Merge function implies inheritance from TObject.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6016#issuecomment-656306997:9,clear,clearly,9,https://root.cern,https://github.com/root-project/root/pull/6016#issuecomment-656306997,2,['clear'],['clearly']
Usability,I Close the PR to recreate a clear one.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1364#issuecomment-347296366:29,clear,clear,29,https://root.cern,https://github.com/root-project/root/pull/1364#issuecomment-347296366,2,['clear'],['clear']
Usability,"I actually remember trying `Evaluate` but it crashed. Didn't look into too many details as to why; it does have a couple of fewer ""protection pieces"" (such as the mutex lock) than does `Calc()`, so that may be the reason. But even then, I gave up on all that when I realized that Python readily outperforms. I mean, talk about optimization, even for your integer case and compare these two macro's:. ```; int noleak() {; int result = 0;; for (int i = 0; i < 1000000; ++i) {; result += (int)TPython::Eval(""1+1"");; }; return result;; }; ```; and; ```; int leak() {; int result = 0;; for (int i = 0; i < 10000; ++i) {; result += (int)gInterpreter->Calc(""1+1"");; }; return result;; }; ```; Please note the constant: the `TPython::Eval()` is called _100x more_ than `TInterpreter::Calc()` and it is _still 4x faster_ on my box. So, my conclusion is that if you are in Cling and need to evaluate a run-time constructed expression represented in string-form, then the optimizily thing to do, is to call into Python ... (and if in a loop, then even if Python uses cppyy in turn, which uses Cling again, it will still outperform). And, of course, bonus points for not leaking ... There is one case where `cppyy` still fails: if the `operator+` in the expression above is a global `friend` (with the operands instances of some class), as so far, I've been unable to locate that method. So, I do still care, but my main problem is the leak on failed lookups, as those are very common. And I don't believe it is just the allocator, which as you tell it would re-use the memory, but I'll see first whether I can construct a pure Cling-only reproducer then. Aside, if/when the lookup helper is inverted (i.e. being able to tell what some _is_ rather than what it _isn't_), many of the failed lookups will simply go away.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7201#issuecomment-806058368:1791,simpl,simply,1791,https://root.cern,https://github.com/root-project/root/issues/7201#issuecomment-806058368,2,['simpl'],['simply']
Usability,"I add commit to fix compiler warning and simplify a bit code.; @couet, can I merge it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12349#issuecomment-1479066603:41,simpl,simplify,41,https://root.cern,https://github.com/root-project/root/pull/12349#issuecomment-1479066603,2,['simpl'],['simplify']
Usability,"I agree that it is an unfortunate circumstance to have the test not passing. However, I still urge you to consider the effect on debugability removing strict tests will have. I have wasted a lot of time trying to track down a subtle bug due to loose tests which left me unable to determine where the bug came from. Conversely, setting tests strictly and tracing discrepancies, I found a different bug in the Kahan sum: #11940. Unit tests especially should be as strict as possible. In absence of unit tests (which unfortunately is the case for the parts of RooFit I worked on), strict ""integration"" tests like these are the closest I could get. Note also that it was simply part of my original assignment: to ensure users can trust the new parallelized methods, I built them to be bit-wise exactly equal to the old methods. So, I know from experience how tedious it is to trace down these bit-wise differences to their actual concrete source, but also think that because we are dealing with scientific software, precision, robustness, reliability and interpretability (of components and hence the whole) are important. Of course, performance is an important factor too, but it's just one of the aspects. We want the end-results of experiments to be accurate and explainable, right? I personally at least don't like when I have to sell a ""because of floating point errors"", because I've been bitten by them a few times now. Now, I'm also well aware that the project only has a given amount of resources and I myself am currently more or less out of resources (I can spend only my free time), so my vote probably doesn't count strongly :) If I could be of more practical help in this, I would definitely be happy to, but I also don't have a non-x86 machine, so it's not feasible for me to do much right now. So, feel free to make a call on this as you all best see fit!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12389#issuecomment-1538758017:667,simpl,simply,667,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1538758017,2,['simpl'],['simply']
Usability,I agree that it would be best for users to have all functions in one place. Menu access to that place should be good and clear though.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7440#issuecomment-801758247:121,clear,clear,121,https://root.cern,https://github.com/root-project/root/issues/7440#issuecomment-801758247,2,['clear'],['clear']
Usability,"I agree that the interface is somewhat dangerous but the docs clearly mention its limitations. However, dangerous or not, this is currently broken and should be fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14135#issuecomment-1830160591:62,clear,clearly,62,https://root.cern,https://github.com/root-project/root/pull/14135#issuecomment-1830160591,2,['clear'],['clearly']
Usability,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13815#issuecomment-1768325139:216,clear,clearly,216,https://root.cern,https://github.com/root-project/root/issues/13815#issuecomment-1768325139,2,['clear'],['clearly']
Usability,I agree we should wait for a more robust solution for cross-compilation of the whole project before removing this simple test. I will close this PR and if in the future we decide what to do we can resume from here 👍,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15930#issuecomment-2228672121:114,simpl,simple,114,https://root.cern,https://github.com/root-project/root/pull/15930#issuecomment-2228672121,4,"['resume', 'simpl']","['resume', 'simple']"
Usability,"I agree with @couet , the better alternative would be to simply remove the option from cmake and always bundle libafterimage",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14395#issuecomment-1902123987:57,simpl,simply,57,https://root.cern,https://github.com/root-project/root/pull/14395#issuecomment-1902123987,2,['simpl'],['simply']
Usability,"I agree with @stwunsch , `{ 1 , 2 }` is simpler and it is actually all you want to see in this case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2201#issuecomment-398373451:40,simpl,simpler,40,https://root.cern,https://github.com/root-project/root/pull/2201#issuecomment-398373451,2,['simpl'],['simpler']
Usability,"I agree with Jonas it should stay ""Legacy"" as mentioned in the ref guide: https://root.cern/doc/v632/classTSpectrum.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16351#issuecomment-2323919858:67,guid,guide,67,https://root.cern,https://github.com/root-project/root/pull/16351#issuecomment-2323919858,2,['guid'],['guide']
Usability,"I agree with philippe. The + could be left aside as the default. For what concerns the name of the field I am not sure ""modifier"" is the best name possible. ""StreamerOption"" ? Two simple fields, which can be ""NoStreamer"" and ""NoInputOperator""?; E.g.; ```; ... NoStreamer = ""true"" />; ... NoInputOperator = ""true"" />; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/864#issuecomment-322819174:180,simpl,simple,180,https://root.cern,https://github.com/root-project/root/pull/864#issuecomment-322819174,2,['simpl'],['simple']
Usability,"I agree, that is the best way to go in theory. In practice, I'm dealing with time constraints that will make this challenging. The timeline for including `ppoll` into libzmq would be a liability, because even though I'm not worried it will not be accepted (it is actually quite a simple addition, especially in the way that [a libzmq maintainer suggests here](https://github.com/zeromq/libzmq/issues/4220)), delaying this PR to wait for that one will probably result in extra merging efforts for the later RooFit PRs that depend on this one. In any case, if this is the way we must go (and I can totally understand that you would want it this way), I will do my best to split up the other PRs as much as possible, so that those can be merged independently asap and merging conflicts will hopefully be minimized.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8385#issuecomment-870483338:280,simpl,simple,280,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-870483338,2,['simpl'],['simple']
Usability,"I also have a general comment, . https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name); 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13779#issuecomment-1806758875:185,clear,clear,185,https://root.cern,https://github.com/root-project/root/pull/13779#issuecomment-1806758875,2,['clear'],['clear']
Usability,I also think a test would be good. @vgvassilev in which subdirectory would you put the simple macro which was crashing in https://github.com/root-project/roottest/tree/master/cling ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15368#issuecomment-2083610710:87,simpl,simple,87,https://root.cern,https://github.com/root-project/root/pull/15368#issuecomment-2083610710,2,['simpl'],['simple']
Usability,"I am able to reproduce the failure with a simple standalone reproducer (2 threads one loading and unloading a library, the other interogating `TClassTable`). I will prepare a PR with the fine grained locking (or whatever is needed to make the crash go away :) )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11263#issuecomment-1483286941:42,simpl,simple,42,https://root.cern,https://github.com/root-project/root/pull/11263#issuecomment-1483286941,2,['simpl'],['simple']
Usability,"I am always wary about dropping support for a feature completely without a deprecation notice, even if that feature was buggy and incomplete. This might be one occasion where we simply can't do otherwise",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7669#issuecomment-1926883056:178,simpl,simply,178,https://root.cern,https://github.com/root-project/root/issues/7669#issuecomment-1926883056,2,['simpl'],['simply']
Usability,I am checking what's going on. I might have simply screwed up the backport.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13808#issuecomment-1750234087:44,simpl,simply,44,https://root.cern,https://github.com/root-project/root/pull/13808#issuecomment-1750234087,2,['simpl'],['simply']
Usability,"I am looking for a hotfix for the upcoming llvm release. The patch would be in the [area](https://github.com/llvm-mirror/llvm/blob/master/lib/Support/DynamicLibrary.cpp#L76-L92):; * I plan to remove the NDEBUG assert; * Make the `std::vector<void*>` a `std::vector<llvm::PointerIntPair<void*, 1, bool>>`; * Add a default flag to `addPermanentLibrary` saying if it was opened with RTLD_GLOBAL; * I will change the search order to search for first the one that are not marked RTLD_GLOBAL. A real solution I've discussed with Lang privately is that we should figure out a way how to pass the dlopened handle to the cling interpreter (before any parsing happens) and have a call to dlsym before calling the DynamicLibrary [here](https://github.com/root-project/cling/blob/master/lib/Interpreter/IncrementalJIT.cpp#L320). This would only happen after the next release of LLVM. I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I feel fairly strongly running cling (and ROOT) with a patch-free LLVM and clang. I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/744#issuecomment-313786623:1113,clear,clear,1113,https://root.cern,https://github.com/root-project/root/pull/744#issuecomment-313786623,1,['clear'],['clear']
Usability,"I am not sure of the value of translating the tutorial. It's not well written and it's not clear to me the information useful for the end users which is carried by it, especially since we already have threadsh1 already.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1531#issuecomment-359070985:91,clear,clear,91,https://root.cern,https://github.com/root-project/root/pull/1531#issuecomment-359070985,2,['clear'],['clear']
Usability,I am now looking at #8947. I am modifying the `Makefile` to left a clean source directory after build. `makeinput.sh` should be modified only temporarily by developers to make only part of the doc in order to speed the build when working on a specific part of the reference guide. This script is not only a static list. At the end is added the pieces of doc build by `xtract_docstrings.py`; and `print_roofit_pyz_doctrings.py`. But it is true that if one modifies (even temporarily) `makeinput.sh` then it will appears in `git status`. I am not should how a `cmake` approach will fix that.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8950#issuecomment-934492893:274,guid,guide,274,https://root.cern,https://github.com/root-project/root/issues/8950#issuecomment-934492893,2,['guid'],['guide']
Usability,"I am realizing that making removing the global variables which are meant to hold the values from the argument parser is probably not a good idea after all. It makes the code less clear for me. Is there a way to make a global variable in python read only?. I know we merged already at least one PR of that kind but I fear we might need to revert it... @saisoma123, @jalopezg-r00t, what do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11037#issuecomment-1200360373:179,clear,clear,179,https://root.cern,https://github.com/root-project/root/pull/11037#issuecomment-1200360373,2,['clear'],['clear']
Usability,"I am unable to reproduce the working case (with 819b4e321b), so I am missing something (i.e. probably part of the ATLAS software). > If it would help to produce a simpler reproducer workspace, I'm glad to help out by trying to build one. Could you please? :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10282#issuecomment-1085399125:163,simpl,simpler,163,https://root.cern,https://github.com/root-project/root/issues/10282#issuecomment-1085399125,2,['simpl'],['simpler']
Usability,I apologise to revive only now this item. I was curious to understand why this is a need and if with the newer ROOT 6 releases an equally usable solution can be found.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6535#issuecomment-2016794829:138,usab,usable,138,https://root.cern,https://github.com/root-project/root/issues/6535#issuecomment-2016794829,2,['usab'],['usable']
Usability,I appreciate the build option! Though I'm a little concerned that the name of the build option is not self explanatory enough for everyone. Why not `-Daddress-sanitizer` or so to make it very clear?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5066#issuecomment-592428824:192,clear,clear,192,https://root.cern,https://github.com/root-project/root/pull/5066#issuecomment-592428824,2,['clear'],['clear']
Usability,"I believe the difference between `Filter` (not working) and `Define` (working) is the overload that is picked. For `Filter` it picks (`columns` is an `std::initializer_list< std::string >`):; https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html#a66c60dde810b86a97fc01d1f7310a1b2. whereas for `Define` it picks (`columns` is an `std::vector<std::string>`):; https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html#a4698601205a55ac49279150d56fc904f. If instead of passing a Python list to `Filter` we pass an `std::vector`, it works. A simpler reproducer is then:; ```python; import ROOT; ROOT.gInterpreter.Declare(""""""; void foo (const std::initializer_list< std::string > &columns) {}; """"""); ROOT.foo([""x""]); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10092#issuecomment-1065158302:555,simpl,simpler,555,https://root.cern,https://github.com/root-project/root/issues/10092#issuecomment-1065158302,2,['simpl'],['simpler']
Usability,"I believe the real issue here is about user experience. Suppose I'm a mac user, I only use safari and don't even have chrome installed. I have been using ROOT for 10+ years, I want to see my plot in a canvas. Now the default canvas is the web canvas, so it will go through the only browser it can find on my machine, safari. That breaks functionality w.r.t. how I was using the canvas before. So, that's something we want to fix, right?. In general, I would imagine that at the very least for the three most commonly used browsers i.e. Chrome, Safari, Firefox (Edge even?) we should be able to provide exactly the same functionality to users. Writing in the documentation that they need to install google chrome on their machine in order to have a properly working canvas is not an option in my opinion. Practically, that would imply that ROOT has a dependency on Chrome and I don't think that's what we want",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14051#issuecomment-1813149328:39,user experience,user experience,39,https://root.cern,https://github.com/root-project/root/issues/14051#issuecomment-1813149328,2,['user experience'],['user experience']
Usability,I boiled down the failures to a simple extension of the issue that I already reported:; https://github.com/vgvassilev/clad/issues/681#issuecomment-1904660655,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14165#issuecomment-1904662806:32,simpl,simple,32,https://root.cern,https://github.com/root-project/root/pull/14165#issuecomment-1904662806,2,['simpl'],['simple']
Usability,"I can reproduce this in our software stack (SHiP/snd@snd) as well, where ROOTSYS etc. are all set for dependencies that need ROOT at build and/or run-time (using ALICE's alibuild). ROOT and its `ROOTConfig.cmake` are found without issues, but the new way to deal with VDT breaks anyone trying to user `ROOTConfig.cmake`. In our case, we use the `builtin_vdt` build option when building ROOT from source. This is a clear regression from 6.28.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14163#issuecomment-1837223379:414,clear,clear,414,https://root.cern,https://github.com/root-project/root/issues/14163#issuecomment-1837223379,2,['clear'],['clear']
Usability,"I can't identify the problem either. But there is a simple workaround: you can just use `TPython::Exec()` and bring the string to the C++ world with an output variable. In the interest of a more stable ROOT, I would suggest to promote this way of doing things and to to deprecate `TPython::Eval()`:. * https://github.com/root-project/root/pull/16175. Would this be a good way forward also for ATLAS?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12182#issuecomment-2270986830:52,simpl,simple,52,https://root.cern,https://github.com/root-project/root/issues/12182#issuecomment-2270986830,2,['simpl'],['simple']
Usability,"I cannot decide, that's up to you @egpbos and @lmoneta given the input by @hahnjo and me here. Please consider this:. IIUC you are interpreting this lack of bitwise equality as a bug. In that case our approach is to fix the failure asap. If ""asap"" isn't happening because reasons then we disable the test, and create a bug report about the test failure, reminding ourselves (you, @egpbos in this case) that the test needs to be fixed and re-enabled. ""Disabling the test"" can as well be a switch from equality to equality-with-range, as long as the GitHub issue is clear which commit needs to be reverted to reprouce the original test failure. How does that sound?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12389#issuecomment-1540010898:564,clear,clear,564,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1540010898,2,['clear'],['clear']
Usability,"I conclude that manually deleting the objects is not ok, even if the list is not the owner of the objects.; Am I missing any good practice here?. (edit: I misread the `nodelete` flag in the `TList::Clear`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14504#issuecomment-1919321697:198,Clear,Clear,198,https://root.cern,https://github.com/root-project/root/issues/14504#issuecomment-1919321697,1,['Clear'],['Clear']
Usability,"I convert into draft, while simple member name change does not work.; Also increase of class version does not help.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8181#issuecomment-842273434:28,simpl,simple,28,https://root.cern,https://github.com/root-project/root/pull/8181#issuecomment-842273434,2,['simpl'],['simple']
Usability,"I do not agree with changing the behaviour from returning `{ 1, 2 }` to `(SomeType&) { 1, 2 }`, which spoils the user experience (imho!).; The use of the `str` output in python is an informal representation of the object which should be most convenient for the user. If you want the type, you have the `repr` method in Python, which currently returns you something like `ROOT::SomeType at address 0x12345`. That behaviour is as well similar to numpy & co.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2201#issuecomment-398324213:113,user experience,user experience,113,https://root.cern,https://github.com/root-project/root/pull/2201#issuecomment-398324213,2,['user experience'],['user experience']
Usability,"I do not get this crash:; ```; % root -l main.cpp ; root [0] ; Processing main.cpp...; Error in <TApplication::TApplication>: only one instance of TApplication allowed; ------------------------------------------------------------------; | Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for macosx64 on Nov 15 2022, 10:28:34 |; | From heads/master@v6-25-02-2747-g7a90392f2a |; | With Apple clang version 14.0.0 (clang-1400.0.29.202) |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. root [0] ; ```; For me, on Mac, it is protected. Seems to me the error is not cryptic at all. It makes it clear that `main()` already exists.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11707#issuecomment-1315410117:754,clear,clear,754,https://root.cern,https://github.com/root-project/root/issues/11707#issuecomment-1315410117,2,['clear'],['clear']
Usability,"I don't need the full information. I needed information to learn about the topic. A good book is not only an information container, but it teaches ideas. . I think that if manual creators know what and how to write, they can look at the existing docs (or skip outdated data from there). . If you don't plan to update the User's guide, there is probably no need to fix that with Push Releases. As I understand, you wrote that rdataframe is missing in the manual, so I won't find out there. Anyway I don't use that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7284#issuecomment-785934293:59,learn,learn,59,https://root.cern,https://github.com/root-project/root/issues/7284#issuecomment-785934293,4,"['guid', 'learn']","['guide', 'learn']"
Usability,"I don't really understand your question. 😕. [tutorials/eve7/boxset.C](https://github.com/root-project/root/blob/master/tutorials/eve7/boxset.C) doesn't seem to need `nlohmann/json.hpp`, does it?. The nlohmann_json ""library"" is a pure header ""library"". It does not need to be distributed with the ROOT binaries for those binaries to be functional. All the symbols from `nlohmann/json.hpp` are compiled into the ROOT binaries themselves. 🤔. You ""only"" need `nlohmann/json.hpp` when using a ROOT header in your own build that itself publicly uses `nlohmann/json.hpp`. For that you do need that actual header. So I'm still pretty convinced that this is a relatively simple mistake. The machine on which 6.30 was built, probably had nlohmann_json installed on it recently. And people doing the ROOT binary builds didn't notice that their build now picked up nlohmann_json from the system. This does shine light on a deeper issue though. 😦 The ROOT CMake configuration is a bit too autonomous for my liking. 😦 It will too easily turn features on/off based on what it finds. Instead of asking the user explicitly to specify what they want to have on or off. If it was up to me, I'd remove most of the automation in how the build figures out what it should do, and rather introduce a bunch of [CMake presets](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html) to ease the life of the users a little. For the latter, we're using those pretty happily in this project for instance:; - https://github.com/acts-project/algebra-plugins/; - https://github.com/acts-project/algebra-plugins/blob/main/CMakePresets.json. Yes, ROOT has a lot more externals than we have in that particular project, but the spaghetti code used for figuring out what would come from where, and what would be turned on or off is also not a great solution. 😦",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14188#issuecomment-1844965943:662,simpl,simple,662,https://root.cern,https://github.com/root-project/root/issues/14188#issuecomment-1844965943,2,['simpl'],['simple']
Usability,"I don't think nvcc actually supports C++14 before CUDA 9.0. https://devblogs.nvidia.com/parallelforall/cuda-9-features-revealed. https://devtalk.nvidia.com/default/topic/985604/nvcc-test-cu-std-c-11-xcompiler-quot-std-c-14-quot-/?offset=2. So, I believe the easiest thing to do is simply to check for the CUDA version and require 9.0 or later.; As for the host compiler, if we use `CMAKE_CXX_STANDARD`, CMake should take care of it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1040#issuecomment-331498473:281,simpl,simply,281,https://root.cern,https://github.com/root-project/root/pull/1040#issuecomment-331498473,2,['simpl'],['simply']
Usability,"I don't think the issue is with `copy_if_different` - I bet you'd see the same behavior if you were to use `copy` instead. My guess is that this is caused by CMake determining that the `DEPENDENCY` is older than the target, thus no need to run the command. What happens if you simply remove the DEPENDENCY, such that `copy_if_different` (which should *not* look at filestamps) is run unconditionally?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9804#issuecomment-1029077291:277,simpl,simply,277,https://root.cern,https://github.com/root-project/root/pull/9804#issuecomment-1029077291,2,['simpl'],['simply']
Usability,"I don't think this is used by anyone, as it is not clear to the users that copy assignment does for RooFit objects. More complicated user codes like for example are CMS combine are still compiling with these changes. If someone was using this functionality, they will get warned with a compiler error now and can find a workaround.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11079#issuecomment-1204165478:51,clear,clear,51,https://root.cern,https://github.com/root-project/root/pull/11079#issuecomment-1204165478,2,['clear'],['clear']
Usability,"I finally learned how to reproduce these kind of warnings with a new version of the LLVM tools. You need to make sure that the relevant ROOT subdirectory is compiled with `set(CMAKE_EXPORT_COMPILE_COMMANDS 1)` (it also helps to disable this for llvm-project to not get spammed by warnings from LLVM). For example, if you want to scan the `math` directory, you can do:; ```diff; diff --git a/interpreter/llvm-project/llvm/CMakeLists.txt b/interpreter/llvm-project/llvm/CMakeLists.txt; index 0b046717ba..b685291490 100644; --- a/interpreter/llvm-project/llvm/CMakeLists.txt; +++ b/interpreter/llvm-project/llvm/CMakeLists.txt; @@ -283,7 +283,7 @@ list(INSERT CMAKE_MODULE_PATH 0. # Generate a CompilationDatabase (compile_commands.json file) for our build,; # for use by clang_complete, YouCompleteMe, etc.; -set(CMAKE_EXPORT_COMPILE_COMMANDS 1); +set(CMAKE_EXPORT_COMPILE_COMMANDS 0). option(LLVM_INSTALL_BINUTILS_SYMLINKS; ""Install symlinks from the binutils tool names to the corresponding LLVM tools."" OFF); diff --git a/math/CMakeLists.txt b/math/CMakeLists.txt; index 543adbf6b1..12f5930901 100644; --- a/math/CMakeLists.txt; +++ b/math/CMakeLists.txt; @@ -4,6 +4,10 @@; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. +set(CMAKE_EXPORT_COMPILE_COMMANDS 1); +; add_subdirectory(mathcore); if(mathmore); add_subdirectory(mathmore); ```; Then, after building, you go into equivalent subdirectory in the build directory (e.g. `build/math`) and run this:; ```bash; run-clang-tidy -checks='clang-analyzer-*' . -j20; ```. So the warnings are easy to reproduce and we are aware that these exist for all for ROOT in general. Therefore, I'd suggest to close this particular issue so that we can focus on feature development and fixing confirmed bugs. We can't afford separate GitHub issues for all groups of `clang-tidy` warnings in all subdirectories. Thank you very much @ferdymercury for the initiative thought! We learned a lot from this!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7422#issuecomment-2326891590:10,learn,learned,10,https://root.cern,https://github.com/root-project/root/issues/7422#issuecomment-2326891590,4,['learn'],['learned']
Usability,"I found in TH1::Draw(), line 3096. gPad->Clear();. If ""same"" not specified as draw option, pad is cleared.; Mean TPad object will be deleted. Not a nice feature, one always should draw histogram with care.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9869#issuecomment-1036371552:41,Clear,Clear,41,https://root.cern,https://github.com/root-project/root/issues/9869#issuecomment-1036371552,3,"['Clear', 'clear']","['Clear', 'cleared']"
Usability,I further simplified and improved the design of the new MnPrint in commit https://github.com/root-project/root/pull/6705/commits/c804c2e7f129c8fe7ae5b34a188a45bf6847fc17 and updated the previous note about the design.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6705#issuecomment-720092514:10,simpl,simplified,10,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-720092514,2,['simpl'],['simplified']
Usability,"I get the crash also with a simple C macro (extracted from your code) executed at the ROOT prompt. Reading the doc it looks like this functionality is meant to be used interactively from the context menu. Which means you need the graphics to be ready on the canvas. Therefore, to make it work in a ROOT script, you will need a few ""Update()"" to make sure the graphics id ready. Here is the working script:. ```; {; auto *c = new TCanvas(""c4"", """", 720, 1024);; c->Divide(1, 2);. auto f = new TF1(""lin"", ""x"", -10, 10);; c->cd(1);; f->Draw();; gPad->Update();. c->cd(2);; gPad->Update();; f->DrawIntegral();; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13708#issuecomment-1733934184:28,simpl,simple,28,https://root.cern,https://github.com/root-project/root/issues/13708#issuecomment-1733934184,2,['simpl'],['simple']
Usability,"I got a similar warning when using `RDataFrame` in Python, presumably due to the same problem:. I'm using ROOT 6.24.02 with gcc10, compiled w/ C++ 17 standard. Here's a reproducer:; ```python; #!/usr/bin/env python. import ROOT. # Let's create a simple dataframe with ten rows and two columns; df = ROOT.RDataFrame(10) \; .Define(""x"", ""(int)rdfentry_"") \; .Define(""y"", ""1.f/(1.f+rdfentry_)""). npy = df.AsNumpy(); ``` . The warnings are:; ```; input_line_49:10:7: warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]; ((const vector<int>*)obj)->empty();; ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; input_line_56:10:7: warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]; ((const vector<float>*)obj)->empty();; ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8622#issuecomment-889485521:246,simpl,simple,246,https://root.cern,https://github.com/root-project/root/issues/8622#issuecomment-889485521,2,['simpl'],['simple']
Usability,"I guess it's simply that they are not fixed in master, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3602#issuecomment-479555711:13,simpl,simply,13,https://root.cern,https://github.com/root-project/root/pull/3602#issuecomment-479555711,2,['simpl'],['simply']
Usability,I guess you need one more check in the function `TProcessID::Clear()` at line 222 of the same file?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5446#issuecomment-618643969:61,Clear,Clear,61,https://root.cern,https://github.com/root-project/root/pull/5446#issuecomment-618643969,1,['Clear'],['Clear']
Usability,"I had a look ant it seems very nice. About the discrepancy between `REntry::Get` and `RNTupleModel::MakeField`, one may argue that `MakeField` might return a raw pointer too as the memory of the field is owned by the model. OTOH, while it's kind of easy to keep track of the lifetime of an `REntry` (I get it, I use it, I drop it), it seems more difficult to keep track of `RNTupleModel` lifetime, which is bound to the lifetime of `RNTupleWriter`.; Using raw pointers from `MakeField` is fine if we assume that the writer of the code only accesses the fields within the scope of `RNTupleWriter` (but the fields are accessible before the writer is created... more confusing). My personal opinion is that the `CreateEntry` way is the best option for the single thread case too:; - I define a model; - create a writer based on the model; - get the *buffer* (`REntry`) to write to (one per thread, for example, even if I have only one thread); - commit the *buffer* to the writer. In this way I own the `REntry`, but it has a layout in memory that is directly understood by the serialization process without the need of extra copies. We can also think of a way of constructing the writer from an *inlined* model, without the need for repeated calls to `MakeField`. Something like:; ```cpp; auto ntuple = RNTupleWriter::Recreate({; Field<std::uint32_t>(""id""),; Field<std::vector<float>>(""vpx""),; Field<std::vector<float>>(""vpy""),; Field<std::vector<float>>(""vpz""); }, ""NTuple"", kNTupleFileName);. auto entry = ntuple->CreateEntry();; // cache the pointer for faster access in single thread,; // but I could use TLS (or a framework equivalent) for multithreading; auto& vpx = *entry->Get<std::vector<float>>(""vpx"");; for(auto& event: all_events) {; vpx.clear();; vpx.push_back(42.);; ntuple->Fill(entry); // I would prefer ntuple->Write(entry) but it's a matter of taste; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8688#issuecomment-883396155:1748,clear,clear,1748,https://root.cern,https://github.com/root-project/root/pull/8688#issuecomment-883396155,2,['clear'],['clear']
Usability,I have modified the following entries in Doxyfile:; ```; GENERATE_QHP = YES ; QCH_FILE = ROOT.qch ; QHP_NAMESPACE = ROOT.Project; QHG_LOCATION = /Users/couet/Qt/6.1.2/macos/bin/qhelpgenerator; ```; I regenerated the hist part of the reference guide on my local machine.; I was expecting the file `ROOT.qch` will appear somewhere . But it does not.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-902760247:243,guid,guide,243,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-902760247,2,['guid'],['guide']
Usability,"I have more strange effect. I do not compile davix and therefore after opening the file with:; `TFile::Open(""https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root"");` ; I getting instance of `TWebFile`. And if enable `gDebug=1`, one clearly sees ~1.5s per each http request. Moreover, when I try to perform `TTree::Draw()` from the `TBrowser` (web and normal one), `TWebFile` submits multirange request, but not able to parse result of it. Producing several errors - it fully crashes, including my console. Seems to be, it is another issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13018#issuecomment-1592493876:272,clear,clearly,272,https://root.cern,https://github.com/root-project/root/issues/13018#issuecomment-1592493876,2,['clear'],['clearly']
Usability,I have no idea either yet .. but we should start from my latest simple reproducer.; It is much simpler than the initial example.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9869#issuecomment-1036303797:64,simpl,simple,64,https://root.cern,https://github.com/root-project/root/issues/9869#issuecomment-1036303797,4,['simpl'],"['simple', 'simpler']"
Usability,"I have not completely understood why it crashed but that 's not ""simply"" because of the Drawing option. For instance if you move the `pad` creation and the `pad` Draw just before the `pad->cd() ` then it does not crash.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9869#issuecomment-1036281020:65,simpl,simply,65,https://root.cern,https://github.com/root-project/root/issues/9869#issuecomment-1036281020,2,['simpl'],['simply']
Usability,"I have not yet tried building llvm. Will try later this week. nvc++ has an implementation for std::par which allows seamless execution of both CPUs and NVIDIA GPUs (depending on a compile time flag). This could be a huge win for GPU portability (once other manufactures create the AMD/Intel backends), and allows much simpler user access to GPUs without having to learn CUDA (or hip, dpc++, etc). I was trying to compile some parts of a project with gcc and the bits that use std::par with nvc++, but immediately got some runtime segfaults at startup, so tried to compile the whole thing (including ROOT) with nvc++.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9036#issuecomment-933532217:318,simpl,simpler,318,https://root.cern,https://github.com/root-project/root/issues/9036#issuecomment-933532217,4,"['learn', 'simpl']","['learn', 'simpler']"
Usability,"I have spent some time simplifying the reproducer significantly. This code snippet it enough to reproduce the memory leak:; ```C++; #include ""RooRealVar.h"". #include ""TSystem.h"". void reproducer(); {; ProcInfo_t pinfo;; for(std::size_t i = 0; i < 10000; ++i) {. RooRealVar x(""x"",""x"",0);; RooRealVar y(x);. if(i % 500 == 0) {; gSystem->GetProcInfo(&pinfo);; std::cout << i << "" memory usage "" << pinfo.fMemResident; << "" "" << pinfo.fMemVirtual << std::endl;; }. }; }; ```; For the memory increase to happen, it is important that both `RooRealVars` are defined in the loop. Now that we have a simple reproduced, I will continue to investigate the problem later. This problem with the RooRealVar seems so general that we probably solve a ton of RooFit issues at once if we solve this problem here!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9196#issuecomment-964117041:23,simpl,simplifying,23,https://root.cern,https://github.com/root-project/root/issues/9196#issuecomment-964117041,4,['simpl'],"['simple', 'simplifying']"
Usability,"I have to update the PR, so: undo ping @ Philippe :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/807#issuecomment-319284833:29,undo,undo,29,https://root.cern,https://github.com/root-project/root/pull/807#issuecomment-319284833,2,['undo'],['undo']
Usability,"I have updated the contents of the CERNBox link from the PR description with more memray graphs, it looks clear that the effect of this PR is to properly remove the artifacts generated during the distributed execution, there is no more TTreeCache leaking leftover after the analysis (see any file ending with `_patch` and compare it with the same file ending with `_master`). Now that the main source of memory usage is gone, I have noticed a much smaller contribute that still seems to make the memory increase in the flamegraphs. And it seems to have something to do with the increased number of files, at least on the surface. Let's take the following two files to compare:; * test_agc_9sample_1file_10task_patch.html; * test_agc_9sample_10file_10task_patch.html. They are running exactly the same script, with all 9 RDF samples. In the first case we have 1 file per sample, in the second case 10 files per sample. The memray flamegraph report a total of 253.5 MB used for the first case and 260.9 MB used for the first case (7.4 MB delta). There are two main parts of the graph: the one deriving from the `clone` of the Dask process, where the actual analysis code is run, and the one deriving from the `_start` function where most of the Python code around the analysis is (things like `import`ing packages or the Dask worker-scheduler communication). The difference between the two graphs in the `clone` part is of 0.6 MB, the difference between the two `_start` parts is 6.7 MB, so I focus on that from now on. This 6.7 MB difference is in turn split between a 0.1 MB difference deriving from `_PyObject_VectorcallTState` and 6.6 MB difference deriving from. Finally, the vast majority of these 6.6 MB comes from:; * The metrics gathered by profiling (i.e. memray itself); * Dask communication protocol. [Screencast from 2024-07-26 10-47-18.webm](https://github.com/user-attachments/assets/3a21ea3e-c130-42af-b50b-bb324b06eaaa). TL;DR: After this patch the leftover memory increase may be attri",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16094#issuecomment-2252273470:106,clear,clear,106,https://root.cern,https://github.com/root-project/root/pull/16094#issuecomment-2252273470,2,['clear'],['clear']
Usability,I have updated the list of 'owners' and would like to see (experimentally) what is the effect of it for assigning PR. Clearly we need to fine tune the list with more fine grain assignments.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/840#issuecomment-324291657:118,Clear,Clearly,118,https://root.cern,https://github.com/root-project/root/pull/840#issuecomment-324291657,1,['Clear'],['Clearly']
Usability,I have updated the root-spi repo for the old (Jenkins) CI to learn about this new module and know that it should be built everywhere.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13571#issuecomment-1705212121:61,learn,learn,61,https://root.cern,https://github.com/root-project/root/pull/13571#issuecomment-1705212121,2,['learn'],['learn']
Usability,"I hope the failing checks are unrelated (at least, I don't understand the relationship). If they're related, I need some help. I wonder, whether all the `new TList` should be moved to an in-class member variable initializer (See [C++ Core Guidelines C.48](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-in-class-initializer))?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13840#issuecomment-1757793268:239,Guid,Guidelines,239,https://root.cern,https://github.com/root-project/root/pull/13840#issuecomment-1757793268,1,['Guid'],['Guidelines']
Usability,"I investigated a bit more in depth the problem and it seems like the regex_error gets thrown as soon as I plot a composite pdf or by calling RooFit::Components, in fact given the previous example with expo being a simple exponential. ```; RooExponential expo((""modelBkgTot""+trigCatS).c_str(), (""modelBkgTot""+trigCatS).c_str(), *B_plus_DTFM_M_zero, lambda);; expo.plotOn(frame);; ```. works, but as soon as I do for example:. ```; RooAddPdf modelSigTot((""modelSigTot""+trigCatS).c_str(), (""modelSigTot""+trigCatS).c_str(), RooArgList(modelSig0, modelSig1, modelSig2), RooArgList(frac0gamma, frac1gamma));; modelSigTot.plotOn(frame); ```. I get:. ```; terminate called after throwing an instance of 'std::regex_error'; what(): Unexpected character in brace expression.; Aborted (core dumped); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7115#issuecomment-770361561:214,simpl,simple,214,https://root.cern,https://github.com/root-project/root/issues/7115#issuecomment-770361561,2,['simpl'],['simple']
Usability,"I just built a fresh version of `master` and `v6-26-00-patches` on `macphsft24` with macOS 14.2; the test posted in https://github.com/root-project/root/issues/7541#issuecomment-1316247162 still fails. It's not clear to me how it could work in one setup in the past, but it's certainly not working out-of-box in the default build configuration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7541#issuecomment-1862729596:211,clear,clear,211,https://root.cern,https://github.com/root-project/root/issues/7541#issuecomment-1862729596,2,['clear'],['clear']
Usability,"I just wrote simple program and testing it with **g++** and **clang**; To compile with clang, I need ""-pthread"" compiler flags.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2581#issuecomment-418330918:13,simpl,simple,13,https://root.cern,https://github.com/root-project/root/pull/2581#issuecomment-418330918,2,['simpl'],['simple']
Usability,"I keep thinking about the intend of this PR and it mostly tries to solve a usability issue with my IDE. It might be likely that this problem can be solved otherwise, like having all headers added to their targets. This might render this PR unnecessary. So I think for now we can just keep the PR and not merge it. I want to have some more time thinking on it and then I will come back to it!. Thank you everybody for your feedback and comments!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6010#issuecomment-656614652:75,usab,usability,75,https://root.cern,https://github.com/root-project/root/pull/6010#issuecomment-656614652,4,"['feedback', 'usab']","['feedback', 'usability']"
Usability,I know but it was just to avoid more noise from a simple mistake :-),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1239#issuecomment-341526163:50,simpl,simple,50,https://root.cern,https://github.com/root-project/root/pull/1239#issuecomment-341526163,2,['simpl'],['simple']
Usability,"I like this decorator and I'm planning to use it wherever I can. I would have preferred a pattern rather than a prefix, but you made your point clear and I think I can work with what you propose. About the `name` argument, if inside the code you invoke the user function as `fn(klass, name=name)` then it becomes a user choice whether to use it or not.; In any case I'm not convinced that bare class name is very useful, I feel I would be more interested in the fully qualified name... and actually in all places you use `name` is for a class in the global namespace, and the only time you have to deal with a class in a namespace (`std::string`) you have to use `klass.__cpp_name__`, so if you change `name` to be the fully qualified version you can *fix* the only exception. Also, I'm not too much in favor of suggesting people to use *private* data members of a Python class, even if we know that it's always there (for the moment).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9128#issuecomment-957360673:144,clear,clear,144,https://root.cern,https://github.com/root-project/root/pull/9128#issuecomment-957360673,2,['clear'],['clear']
Usability,"I made minimal change concerning thread safety.; As I learned in workshop, one should use ROOT::EnableThreadSafety() to enable proper locking for I/O.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2603#issuecomment-422001206:54,learn,learned,54,https://root.cern,https://github.com/root-project/root/pull/2603#issuecomment-422001206,2,['learn'],['learned']
Usability,I mean e.g. the Reference Guide at https://root.cern/reference/ . as I wrote in the topic.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7421#issuecomment-824044598:26,Guid,Guide,26,https://root.cern,https://github.com/root-project/root/issues/7421#issuecomment-824044598,1,['Guid'],['Guide']
Usability,"I mean once this option goes to the rootling, it will be off by default. It is clear how to activate it when building with CMake. But I did not find any documentation on modifying the cling invocation options for ACLIC compilation of macros.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5296#issuecomment-609468284:79,clear,clear,79,https://root.cern,https://github.com/root-project/root/pull/5296#issuecomment-609468284,2,['clear'],['clear']
Usability,"I misunderstood the intent: you did not remove the previously deprecated option - it is still there, and continues to print a warning. You simply don't pass it anymore in one of the invocations. Sorry for the noise!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4360#issuecomment-529567889:139,simpl,simply,139,https://root.cern,https://github.com/root-project/root/pull/4360#issuecomment-529567889,2,['simpl'],['simply']
Usability,"I narrowed the issue down to a more simple reproducer:; ```C++; void script(); {; RooRealVar x{""x"", """", -10, 10};; x.setRange(""fit"", 0, 10);. RooGenericPdf gauss{""gauss"", ""std::exp(-0.5 * (x*x))"", x};; RooRealVar s{""n_sig"", """", 1000., 0, 10000};; RooAddPdf model{""model"", """", {gauss}, {s}};. std::unique_ptr<RooDataSet> data{model.generate(x)};. // Comment this out and it is fast again; model.setNormRange(""fit"");. std::unique_ptr<RooAbsReal> nll{model.createNLL(*data)};. for(std::size_t i = 0; i < 1000; ++i) {; s.setVal(s.getVal() + (i % 2 ? +1 : -1));; nll->getVal();; }; }; ```. The problem might have something to do with the old test statistics, because if you use the new BatchMode things are going fine. Probably, the dirty flags to the integral are propagated wrongly, causing a numeric integral to be computed for each event.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11637#issuecomment-1297295506:36,simpl,simple,36,https://root.cern,https://github.com/root-project/root/issues/11637#issuecomment-1297295506,2,['simpl'],['simple']
Usability,"I not yet test latest `nlohmann/json.hpp`, but seems to be it is incompatible with previous versions.; The simple solution for now would be ignoring incompatible versions of `nlohmann/json.hpp` and use builtin one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11130#issuecomment-1208998994:107,simpl,simple,107,https://root.cern,https://github.com/root-project/root/issues/11130#issuecomment-1208998994,2,['simpl'],['simple']
Usability,I noticed that the code you upload contains:; ```; gROOT->Reset();; ```; This call is only valid when used in an unnamed macro. In all other scenario it has the potential of being harmful (undo/reset too many things). Please try again after removing those lines.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13511#issuecomment-1696533640:189,undo,undo,189,https://root.cern,https://github.com/root-project/root/issues/13511#issuecomment-1696533640,2,['undo'],['undo']
Usability,"I now (hopefully) removed all of the rebasing artefacts by undoing and redoing the cherry-picking. Unfortunately it seems that Jenkins still complains, although I can't seem to find the reason - my local version seems to compile... any suggestions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/792#issuecomment-316703550:59,undo,undoing,59,https://root.cern,https://github.com/root-project/root/pull/792#issuecomment-316703550,2,['undo'],['undoing']
Usability,"I only did two minor changes to the existing commits, as discussed yesterday evening:; ```diff; diff --git a/tree/ntuple/v7/inc/ROOT/RField.hxx b/tree/ntuple/v7/inc/ROOT/RField.hxx; index 7c9ccebeaa..411ef5733c 100644; --- a/tree/ntuple/v7/inc/ROOT/RField.hxx; +++ b/tree/ntuple/v7/inc/ROOT/RField.hxx; @@ -2179,9 +2179,8 @@ public:; ; template <typename T>; class RIntegralField {; - // Cannot say static_assert(false) because not all compilers implement CWG2518 yet...; - static_assert(std::is_integral_v<T>, ""RIntegralField requires integral type"");; - static_assert(!std::is_integral_v<T>, ""unsupported integral type"");; + // Instantiating this base template definition should never happen and is an error!; + RIntegralField() = delete;; };; ; template <>; @@ -2573,6 +2572,8 @@ template <typename T>; class RField<T, typename std::enable_if<std::is_integral_v<T>>::type> final; : public RIntegralField<typename Internal::RIntegralTypeMap<T>::type> {; using MappedType = typename Internal::RIntegralTypeMap<T>::type;; + static_assert(sizeof(T) == sizeof(MappedType), ""invalid size of mapped type"");; + static_assert(std::is_signed_v<T> == std::is_signed_v<MappedType>, ""invalid signedness of mapped type"");; ; public:; RField(std::string_view name) : RIntegralField<MappedType>(name) {}; ```. Eventually, after implementing the changes, I decided to hold off moving some member functions to the templated `RField` specialization: It didn't work for the `Map[V]` functions because `RColumn::Map[V]` has to be called with the fixed width integer type after mapping. Instead the newly added last commit `reinterpret_cast`s the pointer since we can guarantee that the mapped type has identical storage layout. This solves the problem with `RNTupleView`s, discussed on Mattermost. I still plan to come back to possible deduplications and simplifications in a follow-up PR (now https://github.com/root-project/root/pull/16101).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16039#issuecomment-2247304935:1837,simpl,simplifications,1837,https://root.cern,https://github.com/root-project/root/pull/16039#issuecomment-2247304935,2,['simpl'],['simplifications']
Usability,"I propose to document this feature clearly unless it can be easily implemented. Technically it's a bug fix, I do not see issues in dealing with it for 6.12 too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1310#issuecomment-343718667:35,clear,clearly,35,https://root.cern,https://github.com/root-project/root/pull/1310#issuecomment-343718667,2,['clear'],['clearly']
Usability,"I put `gPad->Modified(); gPad->Update()` in all possible places and none of them worked. I guess for the time being we keep that a ""feature"" as the workaround is simple: it is enough to zoom on the X top Axis.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9263#issuecomment-967029745:162,simpl,simple,162,https://root.cern,https://github.com/root-project/root/issues/9263#issuecomment-967029745,2,['simpl'],['simple']
Usability,"I really prefer a separate repo, exactly the design of `GooFit/Minut2` (though it should be moved to `root-project/minuit2` and have the latest improvements merged in). It has the nice feature that you can use it on multiple ROOT versions (producing a 6.10 version, for example), it keeps ROOT source tree clean, and is clearly separate. (I'm calling that Version 1). I can also add Travis tests pretty easily to that version (though also possible with the others). The first separate folder (Version 2) method was from a discussion with @lmoneta, and the merged folder method (Version 3) was from a request by @amadio. When I get back to CERN from Italy (Wednesday), can we schedule another meeting with interested parties to set up a plan? We need to pick one of the three options and focus (my) effort on that. My favorite is Version 1 so far. And, no, since you need to make a distributable *source* package, you can't copy all files to the build folder. You can copy all files to a `/standalone` folder, which is what Version 2 did.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1680#issuecomment-370486802:320,clear,clearly,320,https://root.cern,https://github.com/root-project/root/pull/1680#issuecomment-370486802,2,['clear'],['clearly']
Usability,I restarted the jobs to make sure the failure on Windows was a glitch. A test timedout for a reason which was not clear to me.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15106#issuecomment-2032409208:114,clear,clear,114,https://root.cern,https://github.com/root-project/root/pull/15106#issuecomment-2032409208,2,['clear'],['clear']
Usability,I saw much simpler example how MasterPage can be resized. https://answers.sap.com/questions/12009929/is-it-possible-to-expand-the-width-of-master-page-.html. It is just an single parameter which set width of master page - one can add button in the ToolHeader to switch between default and wide mode.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4646#issuecomment-575612246:11,simpl,simpler,11,https://root.cern,https://github.com/root-project/root/pull/4646#issuecomment-575612246,2,['simpl'],['simpler']
Usability,"I see https://github.com/root-project/root/pull/11311. Is missing the R__HAS_STD_SPAN, I would say to avoid more improper reporting, it should be made more clear when those header are imported that this is the intended behaviour. I would say you should add a ; ```; #if __cplusplus >= 202002L; ```. inside those code block if they are enabled due to this mismatched compilation version and report the error",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13042#issuecomment-1595270233:156,clear,clear,156,https://root.cern,https://github.com/root-project/root/issues/13042#issuecomment-1595270233,2,['clear'],['clear']
Usability,"I see some parameters in these header files are commented but not in the doxygen format. I can improve that to make the comments appear in the reference guide. But when the documentation is completely missing, an expert for these classes is needed. I think @lmoneta should be able to add the missing doc or ask somebody who knows about it to improve the documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8507#issuecomment-865994950:153,guid,guide,153,https://root.cern,https://github.com/root-project/root/issues/8507#issuecomment-865994950,2,['guid'],['guide']
Usability,"I see that the CI is still failing through `clang-tidy`, but I cannot find any fault of my own here, seems to be related to a call to the virtual `TMatrixT::Clear` in the `TMatrixT` destructor...; Any opinions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3922#issuecomment-500533392:157,Clear,Clear,157,https://root.cern,https://github.com/root-project/root/pull/3922#issuecomment-500533392,1,['Clear'],['Clear']
Usability,"I see that this is a bug leading unwanted behaviour for TTree itself. However, I *think* we should be able to apply a fix from the RDF side.; * The TTreeProcessorMT, and hence for RDF with EnableImplicitMT solution is very clear: in fact when we have friends, we will be creating the clusters globally, and hence we will be calling `GetFriendEntries` defined in TTreeProcessorMT.cxx. We can error out whenever there is a friend with less entries than the main chain. Clearly, the check would not require opening extra files. Additional benefit ==> this is checked before the event loop.; * For single threaded cases, it is not so obvious, but there are 2 steps that could be done:; 	* Teach the RLoopManager to always understand the fFriendInfo (which was introduced by the RDatasetSpec) from InteralTreeUtils.; 	* Once that is done, GetEntries(friend_chain_name) after the event loop ==> user pays the cost of (maybe erroring for) short friends in the end.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9137#issuecomment-1173061495:223,clear,clear,223,https://root.cern,https://github.com/root-project/root/issues/9137#issuecomment-1173061495,3,"['Clear', 'clear']","['Clearly', 'clear']"
Usability,"I see you also modified the primer. This guide as now 3 version. The one in the ROOT repo, the one on the web site and the Jupyter Notebook one which has its own repo. I think the idea will be to keep only one ie the Jupyter NB one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10055#issuecomment-1066504266:41,guid,guide,41,https://root.cern,https://github.com/root-project/root/pull/10055#issuecomment-1066504266,2,['guid'],['guide']
Usability,"I see you updated the old user's guide changing `documentation/users-guide/Cling.md` . The this guide is not supposed to be updated. It is frozen. You should changed the ""Manual"" on the web of the reference guide (doxygen).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10055#issuecomment-1060729822:33,guid,guide,33,https://root.cern,https://github.com/root-project/root/pull/10055#issuecomment-1060729822,8,['guid'],['guide']
Usability,"I see, ... so that's clearly a bug in that case, the 3D viewer should not change the axis attributes silently ...; I am in favour to remove that line ..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8618#issuecomment-875477436:21,clear,clearly,21,https://root.cern,https://github.com/root-project/root/issues/8618#issuecomment-875477436,2,['clear'],['clearly']
Usability,"I see, then how about the following. It's basically a rename of `RTypeErasedMergeables` to `RMergeableVariationsBase` so that the usage as a type-erased version of `RMergeableVariations<T>` is clear, plus it removes the duplication of `fValues`, `fNames` data members and it adds a converting constructor that substitutes the ""manual"" conversion that we currently do in `GetMergeableValue(RResultMap<T>)`: . ```cpp; class RMergeableVariationsBase : public RMergeableValueBase {; vector<string> fNames;; vector<unique_ptr<RMergeableValueBase>> fValues;; public:; RMergeableVariationsBase(vector<string> &&names, vector<unique_ptr<RMergeableValueBase> &&values);; };. template <typename T>; class RMergeableVariations : public RMergeableVariationsBase {; public:; RMergeableVariations(RMergeableVariationsBase &&b) : RMergeableVariationsBase(std::move(b.fNames), std::move(b.fValues)) {}; };. std::unique_ptr<RMergeableValueBase> RVariedAction::GetMergeableValue() const; {; // ...; return std::make_unique<RMergeableVariationsBase>(std::move(keys), std::move(values));; }; ```. That is not more code than we have now, and it should enable a much simpler `GetMergeableValue`:. ```cpp; template <typename T>; std::unique_ptr<RMergeableVariations<T>> GetMergeableValue(ROOT::RDF::Experimental::RResultMap<T> &rmap); {; if (!rmap.fAction->HasRun()); rmap.fLoopManager->Run(); // Prevents from using `const` specifier in parameter. auto mergeable = rmap.fAction->GetMergeableValue();; return std::make_unique<RMergeableVariations<T>>(std::move(*mergeable));; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9942#issuecomment-1061811239:193,clear,clear,193,https://root.cern,https://github.com/root-project/root/pull/9942#issuecomment-1061811239,4,"['clear', 'simpl']","['clear', 'simpler']"
Usability,I see. I'd like to see this automatically generated and linked from here https://root.cern.ch/root-user-guides-and-manuals .; Would it be a problem to convert all this to markdown (pandoc -s example4.tex -o example5.text)? @couet @lmoneta what do you think?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/391#issuecomment-284792803:104,guid,guides-and-manuals,104,https://root.cern,https://github.com/root-project/root/pull/391#issuecomment-284792803,1,['guid'],['guides-and-manuals']
Usability,"I see. Thank you! I subscribed to notifications there.; I don't care much about the authorship. I was confused by the current sites structure, and if when I visit the site next year all is clear, I will be glad! :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7282#issuecomment-786496515:189,clear,clear,189,https://root.cern,https://github.com/root-project/root/issues/7282#issuecomment-786496515,2,['clear'],['clear']
Usability,I should have addressed some of the comments here and incorporated the feedback offline.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1563#issuecomment-365898973:71,feedback,feedback,71,https://root.cern,https://github.com/root-project/root/pull/1563#issuecomment-365898973,2,['feedback'],['feedback']
Usability,"I should have been more specific mentioning TH1D maybe. ; - The x axis usually has time information. ; - Bin content are be filled with these Re/Im/Ph/Mag. I would like to get an outgoing object without such directory structure because this would spread many histograms inside my root file structure and I want to keep my object simple. Using such structure would make the retrieval from TFile a way more complex than just reading a TKey. Combining Re/Im would not help quickly visualizing. From TBrowser, I can usually open my class structure and find ´fName´ or string entries inside but this time I would like to find TH1. I think TTree is providing such feature as vector are usually represented as TH1.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13352#issuecomment-1661250419:329,simpl,simple,329,https://root.cern,https://github.com/root-project/root/issues/13352#issuecomment-1661250419,2,['simpl'],['simple']
Usability,"I still have to investigate if it is used in user code, but I would like to deprecate it at some point if we know if it's not used. Then it's also clear that we don't have to implement handling string values in the BatchMode.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10106#issuecomment-1066843499:147,clear,clear,147,https://root.cern,https://github.com/root-project/root/pull/10106#issuecomment-1066843499,2,['clear'],['clear']
Usability,"I submitted several corrections to the Guide on https://github.com/root-project/root/issues/7284, but that was closed - so probably this one should be closed too if you don't intend to update the User's Guide.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7279#issuecomment-786181786:39,Guid,Guide,39,https://root.cern,https://github.com/root-project/root/issues/7279#issuecomment-786181786,2,['Guid'],['Guide']
Usability,"I support this kind of simplifications: deprecating genreflex is an option. Before discussing that in detail, the advantages of the rootcling only approaches should be listed carefully. Users such as CMS and LHCb will have to migrate away of genreflex.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9448#issuecomment-1925410790:23,simpl,simplifications,23,https://root.cern,https://github.com/root-project/root/issues/9448#issuecomment-1925410790,2,['simpl'],['simplifications']
Usability,"I tested it locally and it seems to do the job now. If two processes get to the creation of the cache directory hierarchy precisely at the same time, it seems that there can still be a race there where one process fails to create the cache directory but it also doesn't see the full hierarchy already there. In that case there is no hard failure though: the process that fails to create the cache directory simply reads the file remotely rather than caching it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9479#issuecomment-1006504826:407,simpl,simply,407,https://root.cern,https://github.com/root-project/root/pull/9479#issuecomment-1006504826,2,['simpl'],['simply']
Usability,I think instead of `#url[link]{label}` we might also use a simpler syntax like in markdown. something like `[label](link)`. No need for a special `#url` keyword. Then it will be enough to look for the string `](http` to know that there is a text with some link.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16512#issuecomment-2390634640:59,simpl,simpler,59,https://root.cern,https://github.com/root-project/root/issues/16512#issuecomment-2390634640,2,['simpl'],['simpler']
Usability,"I think that adding this pythonization for specific classes should be enough in terms of usability. Adding a generic pythonization for all ROOT classes would possibly cause more harm than good. On the other hand, it's probably confusing if it does not behave such as the cling prompt?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2097#issuecomment-392477326:89,usab,usability,89,https://root.cern,https://github.com/root-project/root/pull/2097#issuecomment-392477326,2,['usab'],['usability']
Usability,"I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14034#issuecomment-1821703597:71,simpl,simple,71,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1821703597,2,['simpl'],['simple']
Usability,"I think the PR goes into the right direction. Please use just 1 simple event instead of 1000, because we are really testing only if the compression setting gets applied. The `ntuple_zip` unit tests are _not_ really relevant here -- they test the compression routines themselves and not if the correct compression settings were used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5179#issuecomment-620674511:64,simpl,simple,64,https://root.cern,https://github.com/root-project/root/pull/5179#issuecomment-620674511,2,['simpl'],['simple']
Usability,"I think the problem is just the name. ""Ptr"" makes people think of a normal non owning pointer. If it would be called ""RResult"", it would be pretty clear to me who owns the payload!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14766#issuecomment-2046793610:147,clear,clear,147,https://root.cern,https://github.com/root-project/root/issues/14766#issuecomment-2046793610,2,['clear'],['clear']
Usability,"I think the squashing of commits is simply a change with respect to what is being done today, it's not negative or a regression per se. I even could see an advantage in having one backport per commit. A good item to be discussed in the team I guess, but this action could be really help us.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14889#issuecomment-1983480977:36,simpl,simply,36,https://root.cern,https://github.com/root-project/root/issues/14889#issuecomment-1983480977,2,['simpl'],['simply']
Usability,"I think there is one thing that is clear:. * T*System::Abort should disable the signal handling before calling ::abort [rather than the caller of gSystem->Abort doing so]. What is not as clear is what should be the behavior for unexpected (which include failure of a 'regular' assert macro):. * Should it print a stack trace? (This may or may not be useful for an assert).; * When on the prompt, should it recover or stop the process? (probably stop the process but then again we don't stop the process for other 'bad' state: SigBus, SigSegmentationViolation, SigIllegalInstruction, SigFloatingException). Note: to print stack and still always abort, we just need to move the return introduce by the PR to after the call to StackTrack and before the call to HandleException/Exit. Note: to print stack and not exit when on the prompt, just tweaking T*System::Abort should be enough to quit for .qqqq and avoid the infinite recursions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5034#issuecomment-589272246:35,clear,clear,35,https://root.cern,https://github.com/root-project/root/pull/5034#issuecomment-589272246,4,['clear'],['clear']
Usability,"I think this is a clear sign we want this patch. ![image](https://github.com/root-project/root/assets/15638895/dc7f1386-c921-4796-8a92-172026517ba8). One could say that returning a string that ends with ""\n"" would be slightly more annoying for post-processing, but I really don't think that counterargument has enough weight",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13165#issuecomment-1621661045:18,clear,clear,18,https://root.cern,https://github.com/root-project/root/pull/13165#issuecomment-1621661045,2,['clear'],['clear']
Usability,"I think we can get away with something simpler where when IMT is on (or more precisely when TBB has been detected by cmake), we turn on a flag (`#define` in RConfigure.h) that change the way core/thread is build (and yes, in this optional mode, libThread would link against libTBB.so (or however it is spelt)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-780926697:39,simpl,simpler,39,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-780926697,2,['simpl'],['simpler']
Usability,"I think we can merge the PR. ; Maybe Omar, it is better to merge all commits of Anirudh in a single commit and the others in another one before merging it to have a simpler history",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6935#issuecomment-758049841:165,simpl,simpler,165,https://root.cern,https://github.com/root-project/root/pull/6935#issuecomment-758049841,2,['simpl'],['simpler']
Usability,"I think we gain by having in 6.28 to expose this to the users. This will fix issues happening with fits using the `G` option (external gradient) and in addition, will give us more feedback on using an external Hessian computation. This will be certainly useful. ; In addition, the PR, improves significantly the Minuit2/Fumili algorithm, especially for the case of binned likelihood fit. I think also this is worth having in 6.28.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11755#issuecomment-1357810874:180,feedback,feedback,180,https://root.cern,https://github.com/root-project/root/pull/11755#issuecomment-1357810874,2,['feedback'],['feedback']
Usability,"I tried the macro in the ref guide. It works nice. The formula shows nicely:. <img width=""996"" alt=""Screenshot 2021-04-09 at 16 07 57"" src=""https://user-images.githubusercontent.com/4697738/114192490-d5986d00-994d-11eb-9b78-76c062a039f0.png"">. To show better in the ref guide it is preferable to put the two plots vertically instead of horizontally. ; Therefore you should change the TCanvas and Divide lines to:. ```; TCanvas *c1 = new TCanvas(""c1"", ""Schroedinger's Hydrogen Atom"", 750, 1500);; c1->Divide(1, 2);; ```. That will be the last changes. After that we can merge it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7801#issuecomment-816710642:29,guid,guide,29,https://root.cern,https://github.com/root-project/root/pull/7801#issuecomment-816710642,4,['guid'],['guide']
Usability,"I tried to reproduce this issue with the following C++ script:; ```; void nan(){; auto g = new TGraph ();; g->AddPoint(0,TMath::QuietNaN());; g->AddPoint(1,TMath::QuietNaN());; g->AddPoint(2,TMath::QuietNaN());; g->AddPoint(3,TMath::QuietNaN());; g->AddPoint(4,TMath::QuietNaN());; g->Draw(""APL"");; }; ```; Like you it gives me a blank canvas but in parallel, I get the following messages in the terminal output:; ```; root [0] ; Processing nan.C...; Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1; Warning in <TCanvas::ResizePad>: Inf/NaN propagated to the pad. Check drawn objects.; Warning in <TCanvas::ResizePad>: c1 height changed from 0 to 10; ``` ; So it is pretty clear that there NaNs in the data. ; The message even invites the user to check the ""drawn objects"". I do not think we can do more than that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12296#issuecomment-1431275163:696,clear,clear,696,https://root.cern,https://github.com/root-project/root/issues/12296#issuecomment-1431275163,2,['clear'],['clear']
Usability,"I undo ... it cannot stay like that ....; ```; % ./stressGraphics; Create ./cernstaff.root; (TFile *) nullptr; **********************************************************************; * Starting Graphics - S T R E S S suite *; **********************************************************************; * Starting Basic Graphics - S T R E S S *; **********************************************************************; Test 1: TLine..................................................... OK; PDF output................................................ OK; GIF output................................................ OK; JPG output................................................ OK; PNG output................................................ OK; [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info); [/usr/lib/system/libsystem_kernel.dylib] fstat$INODE64 (no debug info); [/Users/couet/git/couet-root-bin/lib/libGpad.so] TCanvas::Constructor(char const*, char const*, int, int, int, int) (no debug info); [/Users/couet/git/couet-root-bin/lib/libGpad.so] TCanvas::TCanvas(char const*, char const*, int, int, int, int) (no debug info); [<unknown binary>] (no debug info); [<unknown binary>] (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] cling::Interpreter::EvaluateInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (no debug info); [/Users/couet/git/couet-root-bin/lib/libCling.so] cling::MetaParser::isXCom",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6537#issuecomment-704297485:2,undo,undo,2,https://root.cern,https://github.com/root-project/root/pull/6537#issuecomment-704297485,2,['undo'],['undo']
Usability,I updated the branch to simplify a bit the history and make a couple of additional improvements.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3612#issuecomment-479722816:24,simpl,simplify,24,https://root.cern,https://github.com/root-project/root/pull/3612#issuecomment-479722816,2,['simpl'],['simplify']
Usability,"I want too, but actually it make the TreeTable one row more than it should, and break the breadcrumbs; I sended a message on Slack to have help from SAP, but i still have no answer; As soon as i have free time, or an answer i will try to find a solution, and apply it back. But i believe that for the user experience, it is better to have the Splitter, more than the two scrollbars, and the nor usable breadcrumbs. This is a temporary fix until we can debug the SplitApp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4591#issuecomment-547359502:301,user experience,user experience,301,https://root.cern,https://github.com/root-project/root/pull/4591#issuecomment-547359502,4,"['usab', 'user experience']","['usable', 'user experience']"
Usability,"I was enabling SetClusterPrefetch as part of the attempt to reduce read_calls when processing our AODs. Indeed I now notice that it's enough to simply do:. ```C++; // Was affected by https://github.com/root-project/root/issues/8962; // Re-enabling this seems to cut the number of IOPS in half; tree->SetCacheSize(25000000);; //tree->SetClusterPrefetch(true);; for (auto& reader : mBranchReaders) {; tree->AddBranchToCache(reader->branch());; }; tree->StopCacheLearningPhase();; ```. to obtain the same result, so I am fine to simply disable it for now. Do I understand correctly that I still need this patch, though, in case there is more than one basket?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16640#issuecomment-2406804701:144,simpl,simply,144,https://root.cern,https://github.com/root-project/root/pull/16640#issuecomment-2406804701,4,['simpl'],['simply']
Usability,I was hoping to get a chance to review this PR and provide a patch to stitch to this commit for clearer history. The rest of this PR is here -- #7027,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7017#issuecomment-758699032:96,clear,clearer,96,https://root.cern,https://github.com/root-project/root/pull/7017#issuecomment-758699032,2,['clear'],['clearer']
Usability,"I was rather hoping that we could evolve `ROOT_GENERATE_DICTIONARY`, at least the version that we make available to users, so that it would be simpler to use.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8308#issuecomment-856211883:143,simpl,simpler,143,https://root.cern,https://github.com/root-project/root/issues/8308#issuecomment-856211883,2,['simpl'],['simpler']
Usability,"I was thinking of something like this:. https://eguiraud.web.cern.ch/eguiraud/decks/20200416_reusing_rdf_jitted_lambdas_ppp/#/4. but booking all the histos before calling `GetValue` on one of them. I.e. some dedicated test with several RDFs and where reuse across RDFs clearly happens (of course other tests might exercise it to some degree already). Perhaps after merging #5356 , then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5329#issuecomment-615311725:269,clear,clearly,269,https://root.cern,https://github.com/root-project/root/pull/5329#issuecomment-615311725,2,['clear'],['clearly']
Usability,I will commit a simple fix for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9189#issuecomment-964344546:16,simpl,simple,16,https://root.cern,https://github.com/root-project/root/issues/9189#issuecomment-964344546,2,['simpl'],['simple']
Usability,"I will make a push with the latest changes as soon as I solve the capacity-as-sentinel-for-ownership thing -- it's a bit tricky because the capacity is unsigned (so can't use -1 unless we change it to signed) and we can't use 0 because `clear()` happens to set the capacity and the size to 0 in the current implementation (and it's not easy to have `clear()` set the capacity to a more meaningful value without lowering a lot of the logic from `SmallVectorImpl` to `RVec`, as far as I can tell).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-851591863:237,clear,clear,237,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-851591863,4,['clear'],['clear']
Usability,I wonder if a simple compare and swap could be used in TSlotStack to avoid the need for a mutex.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3189#issuecomment-448442077:14,simpl,simple,14,https://root.cern,https://github.com/root-project/root/pull/3189#issuecomment-448442077,2,['simpl'],['simple']
Usability,"I wonder if this shouldn't be a contribution to VDT (https://github.com/dpiparo/vdt , which can be activated in ROOT with a simple ""-DVDT=ON"" and can be easily defaulted to ON given its size starting from 6.12), leaving aside the vectorclass. The implementation looks like autovectorisable with little effort.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1044#issuecomment-331526179:124,simpl,simple,124,https://root.cern,https://github.com/root-project/root/pull/1044#issuecomment-331526179,2,['simpl'],['simple']
Usability,"I wonder why the information is missing, it's a `RelWithDebInfo` build and no jitting involved :thinking: ; But I agree that combined with your knowledge about the code, it's clear where it comes from. It's not clear to me whether it's an issue or not. Definitely, it's confusing to see your machine blow up for no reason and I'm sure it's a pain to figure this out. What about a warning if you use histograms without a binning? But I don't see how we could do this so that the exploratory analysis in the shell isn't messed up with warnings all the time. Edit: And I would call the code above exploratory ;) It's a smallish sample in terms of HEP data and you just want to see the distribution of each column.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6676#issuecomment-716465521:175,clear,clear,175,https://root.cern,https://github.com/root-project/root/issues/6676#issuecomment-716465521,4,['clear'],['clear']
Usability,I would actually prefer the constructor overload. Unfortunately it's not yet clear to me how this could be done...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3424#issuecomment-463203379:77,clear,clear,77,https://root.cern,https://github.com/root-project/root/pull/3424#issuecomment-463203379,2,['clear'],['clear']
Usability,"I would feel *way* more confident if we had any test for this :-/ Would you be kind enough (and I really mean it...) to provide one? It's fairly simple, just copy `core/base/test/TNamedTests.cxx` to `core/base/test/TBitsTests.cxx` and use the usual `EXPECT_EQ` to check for the output to be what you'd expect. *Then* we can simplify things! :-) Let us know, please!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7988#issuecomment-825759330:145,simpl,simple,145,https://root.cern,https://github.com/root-project/root/pull/7988#issuecomment-825759330,4,['simpl'],"['simple', 'simplify']"
Usability,I would go for (b) it looks simpler .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7160#issuecomment-2041497684:28,simpl,simpler,28,https://root.cern,https://github.com/root-project/root/issues/7160#issuecomment-2041497684,2,['simpl'],['simpler']
Usability,"I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14987#issuecomment-2001914193:166,feedback,feedback,166,https://root.cern,https://github.com/root-project/root/issues/14987#issuecomment-2001914193,2,['feedback'],['feedback']
Usability,"I would really like if we can do something about this, as also `nixpkgs` uses by default the `build` directory in the sources for building :slightly_smiling_face:. Does anyone have feedback on my suggestion?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8031#issuecomment-2142432497:181,feedback,feedback,181,https://root.cern,https://github.com/root-project/root/issues/8031#issuecomment-2142432497,2,['feedback'],['feedback']
Usability,"I'd like to understand pro/cons a bit better. The cost is clear: we will break user code, and likely significant fractions. What's the benefit - I don't think we'll reduce compilation times dramatically: TBuffer without what's anyway included in TDirectory is small. Do you see a measurable build time reduction? I do value code hygiene, but the cost might be too high here, so we'll need more convincing arguments than usually.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5123#issuecomment-597497931:58,clear,clear,58,https://root.cern,https://github.com/root-project/root/pull/5123#issuecomment-597497931,2,['clear'],['clear']
Usability,I'll close this one and make a clean new one with clearly separated features compared to the `AsMatrix` PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1777#issuecomment-381989975:50,clear,clearly,50,https://root.cern,https://github.com/root-project/root/pull/1777#issuecomment-381989975,2,['clear'],['clearly']
Usability,"I'll just close this, for me it's clearly off-topic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11097#issuecomment-1404930474:34,clear,clearly,34,https://root.cern,https://github.com/root-project/root/pull/11097#issuecomment-1404930474,2,['clear'],['clearly']
Usability,I'll merge as is; please consider removing `fDefaultPageCont.clear();` from the `THttpServer` ctor in a subsequent PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1785#issuecomment-380829872:61,clear,clear,61,https://root.cern,https://github.com/root-project/root/pull/1785#issuecomment-380829872,2,['clear'],['clear']
Usability,I'll merge given the simplicity of the change. Thanks @pamputt !,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4034#issuecomment-509282452:21,simpl,simplicity,21,https://root.cern,https://github.com/root-project/root/pull/4034#issuecomment-509282452,2,['simpl'],['simplicity']
Usability,"I'm a little confused as the same tests seems to have been quoted as `passed` and `failed` in the same log. I struggle to find the exact definition of each test as well. I looked through the relevant files, but the structure is not clear to me. Also, last time when I spoke with @amadio about the future of ROOT, he said you guys discussed making sure people outside of CERN can contribute. Unfortunately, I had to use my CERN login to see the test logs. I also don't know how to replicate the tests in my environment. Do they depend on files hosted somewhere? Could you give me some docs to read so I can find my way around?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9271#issuecomment-967115318:232,clear,clear,232,https://root.cern,https://github.com/root-project/root/pull/9271#issuecomment-967115318,2,['clear'],['clear']
Usability,"I'm afraid the ""book everything first, use results later"" is the price to pay to run everything in a single event loop: we need to know what to run before we run it, and at the same time we have to run the event loop to produce the result if you do things with it. However, by the time you lose track of where things were defined because your analysis is too complex, you probably should restructure your code so that you don't keep everything in a single function. Analyses that produce hundreds or thousands of histograms typically have some bookkeeping logic, they don't keep all results at main scope. Some of the more complex RDF tutorials show some possible ways to do it, e.g. in Python we keep `RResultPtr<TH1D>`s in a dictionary. There are other possible designs, like e.g. continuations on futures, but I don't think they increase readability/clarity in general. Anyway, the empirical reply to the original question: we never got the feedback that the ""book first, use later"" programming model made users lose track of the results.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7107#issuecomment-778229985:944,feedback,feedback,944,https://root.cern,https://github.com/root-project/root/pull/7107#issuecomment-778229985,2,['feedback'],['feedback']
Usability,I'm also not 100% happy with the name. I put the `Make` in front since it is a factory and fits the STL language. Your proposal looks fine to me though it's still not completely clear (by the name) what it does.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3424#issuecomment-463195498:178,clear,clear,178,https://root.cern,https://github.com/root-project/root/pull/3424#issuecomment-463195498,2,['clear'],['clear']
Usability,"I'm quite baffled every time I come in contact with it, how you guys manage to survive with such a testing infrastructure. :confused: I did have a fork of [roottest](https://github.com/root-project/roottest) from a long time ago. https://github.com/krasznaa/roottest. What I didn't have was it being up to date with the main repository. Plus, did I see correctly in your copy-pasted error message that the CI complained about not finding a branch in my roottest fork with the same name as the branch that I opened this PR from? :confused: What the heck? Is it really expected that one would create a branch in both repositories to make a modification to ROOT?. After some deliberation I updated the PR as you can see. The setup that you guys have with `ROOTConfig.cmake` being generated twice, and one of them possibly being used already during the main configuration is... unique... (Just so that I stay PC...) I've seen similar configurations being used for header-only libraries in the past, but never for anything that needed an actual build before becoming usable. In any case, making `ROOTConfig.cmake` skip `find_dependency(Vdt)` if `VDT::VDT` is already available as a target, was the most robust thing that I could come up with...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11844#issuecomment-1339364132:1062,usab,usable,1062,https://root.cern,https://github.com/root-project/root/pull/11844#issuecomment-1339364132,2,['usab'],['usable']
Usability,"I'm saying only about the Manual, not the reference guide. пн, 15 мар. 2021 г., 17:54 Olivier Couet ***@***.***>:. > You would like to have the whole Reference Guide generated via Doxygen in; > pdf format ?; > Doxygen is able to generate Latex (then pdf) ... We can try but I am; > afraid that will be a monster file...; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/issues/7421#issuecomment-799484591>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAJGF4TWOCCX734TA6DZN5LTDYNTFANCNFSM4Y4OKGDA>; > .; >",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7421#issuecomment-799535019:52,guid,guide,52,https://root.cern,https://github.com/root-project/root/issues/7421#issuecomment-799535019,3,"['Guid', 'guid']","['Guide', 'guide']"
Usability,"I've added that patch and it does the trick. Thanks a lot! 😃 Next time I have to put together a debug build I'll try to include the sources used to make it easier to understand. > But that's not surprising as we have not released that yet. Or would you expect this patch to be part of this Conda build? It is in master and v6-26-00-patches, not in v6-24. Which ROOT version does that clang correspond to?. The conda nightly build is trying to export the patches from http://root.cern/git/clang.git. It's currently using the commit corresponding to `ROOT-patches-rrelease_90` but nothing more recent has been pushed there as far as I can tell. I thought I'd checked against `interpreter/llvm/src/tools/clang/` for missing patches but clearly I missed this line. Is there any better way I can try to find the patches?. Assuming not I'll try to see if I can come up with a better way of trying to use the root sources to check the required patches now that the LLVM 9 move has settled and the diffs are more manageable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9595#issuecomment-1022484732:733,clear,clearly,733,https://root.cern,https://github.com/root-project/root/issues/9595#issuecomment-1022484732,2,['clear'],['clearly']
Usability,"I've been able to get somewhere but now I need guidance. I created a `dict.modulemap` file:; ```; module dict {; header ""MyClass.h""; header ""OtherClass.h""; export *; }; ```; and the module-aware dictionary:; ```bash; $ ls; LinkDef.h MyClass.h OtherClass.h dict.modulemap; $ rootcling -cxxmodule -f dict.cpp MyClass.h OtherClass.h -moduleMapFile=dict.modulemap LinkDef.h; $ ls; LinkDef.h MyClass.h OtherClass.h dict.cpp dict.modulemap dict.pcm dict_rdict.pcm; $ g++ -shared -std=c++14 -fPIC -I$ROOTSYS/include dict.cpp -o libDict.so ; $ ls; LinkDef.h MyClass.h OtherClass.h dict.cpp dict.modulemap dict.pcm dict_rdict.pcm libDict.so; ```; but I cannot load the dictionary on the root shell:; ```; $ root; root [0] .L libDict.so ; Module dict not found.; ```; I put `$PWD` in `LD_LIBRARY_PATH` and `ROOT_INCLUDE_PATH` but the error is still there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10512#issuecomment-1149766446:47,guid,guidance,47,https://root.cern,https://github.com/root-project/root/issues/10512#issuecomment-1149766446,2,['guid'],['guidance']
Usability,"I've had similar issues with the Snap build, where ACliC remembers its build environment which doesn't exist in the runtime environment. As a remedy I've taken to patching `root/build/unix/compiledata.sh`, adding a segment which runs `sed` and clears up the unwanted extra include directories. Maybe something similar could work in your use case as a workaround. [Example here](https://github.com/MrCarroll/root-snap/blob/main/snap/local/patches/ROOT/ACliC.patch)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9243#issuecomment-963063640:244,clear,clears,244,https://root.cern,https://github.com/root-project/root/issues/9243#issuecomment-963063640,2,['clear'],['clears']
Usability,I've just pushed the requested changes. Solomonic decision between @Axel-Naumann 's and @pcanal 's suggestions: the soft teardown function is now called `ClearProxiedObjects` :smile: . Let's wait for a final confirmation from the builds and I'll merge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4687#issuecomment-565372198:154,Clear,ClearProxiedObjects,154,https://root.cern,https://github.com/root-project/root/pull/4687#issuecomment-565372198,1,['Clear'],['ClearProxiedObjects']
Usability,"I've seen those errors and I'll fix them. The only workaround for the time being is not to use `/permissive-` flag, unless you really need it, which is still not clear to me.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9607#issuecomment-1016287337:162,clear,clear,162,https://root.cern,https://github.com/root-project/root/issues/9607#issuecomment-1016287337,2,['clear'],['clear']
Usability,"I've tried with the following code. ```python; import cppyy. cppyy.cppdef(; '''; class Simple{; public:; Simple(int a, float b, float c, float d, const char *e = """", float f=1.f) {; std::cout << ""Simple(int a, float b, float c, float d, const char *e = \\""\\"", float f=1.f) with arguments:"" << std::endl;; std::cout << ""a: "" << a << std::endl;; std::cout << ""b: "" << b << std::endl;; std::cout << ""c: "" << c << std::endl;; std::cout << ""d: "" << d << std::endl;; std::cout << ""e: "" << e << std::endl;; std::cout << ""f: "" << f << std::endl;; }; Simple(float a, float b, float c,float d=1.f) {; std::cout << ""Simple(float a, float b, float c,float d=1.f) with arguments:"" << std::endl;; std::cout << ""a: "" << a << std::endl;; std::cout << ""b: "" << b << std::endl;; std::cout << ""c: "" << c << std::endl;; std::cout << ""d: "" << d << std::endl;; }; };. class Minimal{; public:; Minimal(int a, float b, float c=1.0f) {; std::cout << ""Minimal(int a, float b, float c=1.0f) with arguments:"" << std::endl;; std::cout << ""a: "" << a << std::endl;; std::cout << ""b: "" << b << std::endl;; std::cout << ""c: "" << c << std::endl;; }; Minimal(float a, float b) {; std::cout << ""Minimal(float a, float b) with arguments:"" << std::endl;; std::cout << ""a: "" << a << std::endl;; std::cout << ""b: "" << b << std::endl;; }; };; '''; ). a = int(1); b = float(2.2); c = float(3.3); d = float(4.4). simple = cppyy.gbl.Simple(a, b, c, d); minimal = cppyy.gbl.Minimal(a, b); ```. The constructors in `Simple` mimic the constructors of `TColor`. The `Minimal` class should show the same issue with less constructor arguments. Passing an `int` as first argument is not enough to distinguish between these two constructors; ```; Minimal(int a, float b, float c=1.0f); Minimal(float a, float b); ```; This is the result of the script above; ```; (cppyy-venv) vpadulan@fedorathinkpad-T550 [~/Projects/rootcode/ROOT-GITHUB-7790]: pip freeze; cppyy==1.9.5; cppyy-backend==1.14.3; cppyy-cling==6.21.6; CPyCppyy==1.12.4; (cppyy-venv) vpadul",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7790#issuecomment-828426447:87,Simpl,Simple,87,https://root.cern,https://github.com/root-project/root/issues/7790#issuecomment-828426447,5,['Simpl'],['Simple']
Usability,"IIUC a NullStmt would mean `if (true) {1;;}`. I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6644#issuecomment-713611104:80,simpl,simple,80,https://root.cern,https://github.com/root-project/root/issues/6644#issuecomment-713611104,2,['simpl'],['simple']
Usability,"IMO it's okay to remove `pyroot_experimental` without deprecation for 6.22: it was experimental until 6.22. It would certainly help users to check whether `pyroot_experimental` is set, and if so, issue an error message. A simple `if(pyroot_experimental) message(FATAL_ERROR ""pyroot_experimental is now called pyroot! Please reconfigure with -Dpyroot=On"")` will do.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5772#issuecomment-638212832:222,simpl,simple,222,https://root.cern,https://github.com/root-project/root/pull/5772#issuecomment-638212832,2,['simpl'],['simple']
Usability,"If it doesn't bother you too much to split, i'd prefer you do it :-); Indeed, I don't know git well. For example, to update my local repo once a patch has been merged, I must Google the commands to know how to do this. Last time, I didn't even succeed and finally remove my local repo and fork ""root"" again.; The basics of git are quite clear but between rebase, fetch, pull, branches, cherry-pick, I'm a bit lost.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1435#issuecomment-351146796:337,clear,clear,337,https://root.cern,https://github.com/root-project/root/pull/1435#issuecomment-351146796,2,['clear'],['clear']
Usability,"If it helps: I know at least that for instance the [JuliaPlots/Plots](https://github.com/JuliaPlots/Plots.jl) project simply uses a `.zenodo.json` file in their repo which should be automatically parsed, according to [REST API subsection](https://developers.zenodo.org/#add-metadata-to-your-github-repository-release), whenever a new release is created.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8706#issuecomment-914136123:118,simpl,simply,118,https://root.cern,https://github.com/root-project/root/issues/8706#issuecomment-914136123,2,['simpl'],['simply']
Usability,"If we enable ORCV2 asynchronous compilation, it is clear we have to enable threading support in LLVM. So the question is whether we do want to enable ORCV2 asynchronous compilation or not, some things to consider:; * cost to all or most (?) of the interpreter calls (which then would likely takes 2 locks instead of one); * risk of dead locks; now that the interpreter takes 2 locks, if there is any way that code that takes the LLVM lock calls code directly or indirectly (via user function or even dlopen) take the ROOT locks then they will be dead locks.; * risk of over-subscribing the CPU (i.e. see the many back and forth in the PPP between the way we setup resource sharing between the experiment framework and the implicit multi-threading). ; * size of the gain; given than most (but indeed not all) compilation are very small, is it worth the costs?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11699#issuecomment-1312791296:51,clear,clear,51,https://root.cern,https://github.com/root-project/root/issues/11699#issuecomment-1312791296,2,['clear'],['clear']
Usability,"If you are deleting an object that is contained in a `TCollection`, you must remove it from that collection, otherwise the collection has a dangling pointer (that it will use during certain operations, including `Clear` but could be any other operation, etc `ls()` ).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14504#issuecomment-1919669738:213,Clear,Clear,213,https://root.cern,https://github.com/root-project/root/issues/14504#issuecomment-1919669738,1,['Clear'],['Clear']
Usability,"If you like to have a look into this, I would be happy to guide you. But feel free to tell me if you have to do other stuff, then I'll take over. The array interface is added in `ROOT.py:243`, however no need to change something there. Following the code path, you can look for `AddArrayInterface` in `bindings/pyroot/src/Pythonize.cxx`. Still no need to fix something there ;) Finally, you end up in `STLVectorArrayInterface` and `RVecArrayInterface` in as well in `Pythonize.cxx`. There, the C++ object (a `std::vector` in your case) is read out and the `__array_interface__` dict is added to the Python object, which carries all information needed by numpy to adopt the memory (see [here](https://docs.scipy.org/doc/numpy/reference/arrays.interface.html)). In short: You would need to cover the case of `vector.size() == 0` in `STLVectorArrayInterface` properly. Following code tells me, that the size field is already set properly, but it seems that numpy fails with the `""data"": (0, False)` set in the `__array_interface__`. ```python; >>> import ROOT; >>> x = ROOT.std.vector(""float"")(); >>> x.__array_interface__; {'shape': (0L,), 'version': 3, 'data': (0, False), 'typestr': '<f4'}; ```. So what is the correct thing to do there that `numpy.asarray` returns an empty numpy array?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3528#issuecomment-472348941:58,guid,guide,58,https://root.cern,https://github.com/root-project/root/pull/3528#issuecomment-472348941,2,['guid'],['guide']
Usability,"If you run it with:. `valgrind --leak-check=full --suppressions=$ROOTSYS/etc/valgrind-root.supp root.exe -l -b -q test.cpp+`. you'll get:. ```; ==721499== Invalid read of size 4; ==721499== at 0x4AF2199: TList::Clear(char const*) (in /opt/root/lib/libCore.so.6.30.04); ==721499== by 0x4AF26D4: TList::~TList() (in /opt/root/lib/libCore.so.6.30.04); ==721499== by 0x4AF287C: TList::~TList() (in /opt/root/lib/libCore.so.6.30.04); ==721499== by 0x2729A8D9: deleteTCollections(TObject*) (in /tmp/tmp/test_cpp.so); ==721499== by 0x2729F039: ???; ==721499== by 0x6AA94F7: cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (in /opt/root/lib/libCling.so.6.30.04); ==721499== by 0x6A31E4B: cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (in /opt/root/lib/libCling.so.6.30.04); ==721499== by 0x6A32596: cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (in /opt/root/lib/libCling.so.6.30.04); ==721499== by 0x6A327B7: cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) (in /opt/root/lib/libCling.so.6.30.04); ==721499== by 0x6B09BC6: cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (in /opt/root/lib/libCling.so.6.30.04); ==721499== by 0x693813B: HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) (in /opt/root/lib/libCling.so.6.30.04); ==721499== by 0x694C6E7: TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) (in /opt/root/lib/libCling.so.6.30.04); ==721499== Address 0xf0ff6dc is 12 bytes inside a block of size 1,000 free'd; ==721499== at 0x484B8AF: operator delete(void*) (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so); ==721499== ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14504#issuecomment-1919235775:211,Clear,Clear,211,https://root.cern,https://github.com/root-project/root/issues/14504#issuecomment-1919235775,1,['Clear'],['Clear']
Usability,"If you try fitting the obtained slice (slice 21), you will see that in both Minuit and Minuit2 the fit did not work. ; Just run this simple code: ; ```; auto f = TFile::Open(""histo.root"", ""READ"");; auto hist = f->Get<TH2>(""dxyres_vs_eta"");. auto h20 = hist->ProjectionY(""h20"",20,20);; auto h21 = hist->ProjectionY(""h21"",21,21);; auto c1 = new TCanvas();; c1->Divide(1,2);; c1->cd(1);; h20->Fit(""gaus"");; c1->cd(2);; // second fit fails ; h21->Fit(""gaus"");; ```. If you run only the second fit, it works because some default steps sizes are used at the beginning. ; You will get better slice fits if using option `L` when fitting the slices:; ```; hist->FitSlicesY(nullptr, 10, 21, 0, ""LR"");; ```; and defining a restricted range for the fitted functions to avoid fitting the outlier events. Close the issue since it is not a bug.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13852#issuecomment-1777016344:133,simpl,simple,133,https://root.cern,https://github.com/root-project/root/issues/13852#issuecomment-1777016344,2,['simpl'],['simple']
Usability,"If you would provide a tar ball of the html pages, that would (hopefully) be changed from time to time. How do I know if I should re-download the manual or if I have the most up-to-date one? ; In my very first post when I opened this issue, I wrote about `wget`. So some recipes were known before, but anyway thanks for the links. The thing is that to download an archive is much easier than to use tools or recipes.; ""I will close this issue I guess."" - is it because you personally don't need this feature?; When there was User's Guide, it could be always downloaded as one pdf document (there was also an html archive of that). When you move to 'pure internet version', this is a revocation of an existing feature, and some users will not be happy with this. I think if no one except me needs this feature, than probably it is not needed. Maybe other people except me and you should be asked about their opinion on this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7421#issuecomment-865961497:532,Guid,Guide,532,https://root.cern,https://github.com/root-project/root/issues/7421#issuecomment-865961497,1,['Guid'],['Guide']
Usability,"In CMSSW; - we use `oneapi::tbb::global_control` to set the process' maximum number of threads usable by TBB; - we create a top-level `oneapi::tbb::task_arena` (with the same number of threads), and all data processing is run within one `task_arena::execute()` call; - every call to ROOT I/O is isolated with `oneapi::tbb::this_task_arena::isolate()` call. By adding (or using) a global task arena to ROOT, does this mean, if multiple `TFile`s are writing concurrently, can their tasks be intermingled? Our guess is that ROOT's global task arena would trump the use of `this_task_arena::isolate()`, and allow such intermingling, but we don't really know. We are concerned that by sharing one task arena for unrelated activities it would cause synchronization of those activities because of task stealing. (assuming the explicit arena would trump the `this_task_arena::isolate()` call)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14807#issuecomment-1965316725:95,usab,usable,95,https://root.cern,https://github.com/root-project/root/pull/14807#issuecomment-1965316725,2,['usab'],['usable']
Usability,"In all actual ABIs, pointers to non-member function are simply addresses, a raw pointer. The return type doesn't matter for the storage. For type-safety, correcting the function's return type to be `void* &` would be indeed an improvement. The cost and complexity of going through lambdas seems fairly high to me. Let's see what @pcanal thinks about this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3208#issuecomment-449357187:56,simpl,simply,56,https://root.cern,https://github.com/root-project/root/pull/3208#issuecomment-449357187,2,['simpl'],['simply']
Usability,"In any case the `zoombox` for 1D is managed in `TPad.cxx`. I de-activated the alpha mode on Mac to be in the same configuration as yourself. But even with your example I do not see any artefact. May be you can deactivate the zoombox in `TPad::ExecuteEventAxis` and see if the artefact remains ? By the way if you do a simple drawing of a 1D histogram and try to zoom it, do you also see the artefact ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9763#issuecomment-1026698105:318,simpl,simple,318,https://root.cern,https://github.com/root-project/root/issues/9763#issuecomment-1026698105,2,['simpl'],['simple']
Usability,"In general, I think this is a good change. Can you confirm that nothing we do in Windows is affected by this change? It is not clear to me what ""creating Windows installers automatically"" actually means.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16433#issuecomment-2354468531:127,clear,clear,127,https://root.cern,https://github.com/root-project/root/pull/16433#issuecomment-2354468531,2,['clear'],['clear']
Usability,In principle I agree with Philippe: the cost of checking out root.git and building only the minuit2 subset is minimal. But we're not going to make a deal breaker out of this: as long as our (esp maintenance) cost of integrating your approach is minimal we should just merge it. Guilherme will guide you through the implementation issues should there be any left.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1680#issuecomment-370741281:293,guid,guide,293,https://root.cern,https://github.com/root-project/root/pull/1680#issuecomment-370741281,2,['guid'],['guide']
Usability,"In principle, it is clear what needs to happen, but I would like some input from @pcanal how throwing exceptions in these older parts of ROOT can best be handled (for the newer parts we use `ROOT::Experimental::RException`, but we cannot use this here).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14552#issuecomment-1943897509:20,clear,clear,20,https://root.cern,https://github.com/root-project/root/issues/14552#issuecomment-1943897509,2,['clear'],['clear']
Usability,"In principle, the user's guide is frozen. We now rely on the [Manual](https://root.cern/manual/) and the [reference guide](https://root.cern/doc/master/).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12551#issuecomment-1485254013:25,guid,guide,25,https://root.cern,https://github.com/root-project/root/pull/12551#issuecomment-1485254013,4,['guid'],['guide']
Usability,"In reply to: https://github.com/root-project/root/pull/8703#issuecomment-920044106. > You mean keeping the average of the last $x$ MB written per column? . Not quite, I meant simply an overall average, i.e. simply keeping `total_number_of_bytes` and `total_number_of_compressed_bytes` for each column and then average compression ration is a simple division. But ... actually ... closer to the original proposal is simply the ""total_number_of_bytes_in_all_flushed_clusters"" and ""corresponding_compressed_size"" (i.e. a per RNtuple running total). However this makes me thing of another (potential more noticeable) instability. If there is 2 columns; column A with an constant/average compression ration of 100 and column B with a constant/average compression ration of 1 (or 1.1 :) ) but both columns are collections. If for most of the entries (for more proposal) or only the last cluster (for the PR's proposal), column A has a lot of data and column B has very little data, then the compression ration use for prediction will be 100 (ish). If suddenly the cardinality flip/flop and column A has very little data but column B has a lot of data, then the compression ration of that cluster will be 1 but it would still contains `100 * target_cluster_size_in_compressed_bytes`, namely in this case 100 times larger (on disk) than any other cluster. Obviously this is an extreme example but it points to the benefit of using `per column` compression ratio rather than overall compression ratio (whether it is whole-ntuple or last (few) clusters). The cost for implementation seems to be that after each `Fill`, each column would have to increment a (global-per-RNtuple) counter with `data_written / estimated_compression_ratio` which:; * for collection column should be a small over-head; * for single value column should be a large over-head. however conversely, an accurate estimate is ""only important"" for collection column, so maybe an hybrid solution is a workable compromise?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8703#issuecomment-920229853:175,simpl,simply,175,https://root.cern,https://github.com/root-project/root/pull/8703#issuecomment-920229853,8,['simpl'],"['simple', 'simply']"
Usability,"In the current C++ working paper:; [expr.prim.lambda]/10: ""A lambda-expression whose smallest enclosing scope is a block scope (3.3.3) is a local lambda expression; any other lambda-expression shall not have a capture-default or simple-capture in its lambda-introducer."". As we decl-extract lambdas we should forbid capture-defaults. But we decl-extract after Sema. So indeed - a post-processing step makes sense, but it should complain about *any* capture default. [expr.prim.lambda]/11: ""An entity that is designated by a simple-capture...and shall be *this ... or a variable with automatic storage duration"": this should be noticeable by Sema, except for transactions that declare both the variable and the capture in the same input. So here, too, we'll need a postprocessing step - but it's not as urgent. @marsupial - do you think you could widen the first check (i.e. forbid *any* capture default)?. And yes, we need https://github.com/root-project/cling/commit/9313dbca01b00f1399b14b256925b3f99f0be97b",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/631#issuecomment-307748102:229,simpl,simple-capture,229,https://root.cern,https://github.com/root-project/root/pull/631#issuecomment-307748102,2,['simpl'],['simple-capture']
Usability,"In the end, the reason is much simpler: my fix for the dictionary build is simply too narrow. In fixing `GetNormalizedName` but not, for example, the `PrintingPolicy` in `GetPartiallyDesugaredNameWithScopeHandling`, ROOT internally disagrees on normalized class names and therefore doesn't find the IO rules stored in a `map` with the class name as key. Should be fixed with the next push.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1137026344:31,simpl,simpler,31,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1137026344,4,['simpl'],"['simpler', 'simply']"
Usability,Indeed the ref-guide build for 6.24 did not start yet (looking for an executor) ; https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-v624/; so it should be fine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-1009992846:15,guid,guide,15,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-1009992846,2,['guid'],['guide']
Usability,"Indeed this has nothing to do with TRatioplot. It can be reproduced with the simple following macro:. ```; void lineonaxis(){; auto c1 = new TCanvas(""c1"", ""c1"",10,53,700,525);; gPad->DrawFrame(-5,-1.25,5,1.25);; TLine *line = new TLine(-5,-0.5,5,-0.5);; line->SetLineStyle(2);; line->Draw();; }; ```; Which, on my Mac, gives:; <img width=""648"" alt=""Screenshot 2024-02-13 at 13 21 33"" src=""https://github.com/root-project/root/assets/4697738/26ecd350-74f0-4529-b84b-decc8c210490"">; It is a precision issue. It might be that on an other machine it will not give the same result.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14546#issuecomment-1941397971:77,simpl,simple,77,https://root.cern,https://github.com/root-project/root/issues/14546#issuecomment-1941397971,2,['simpl'],['simple']
Usability,"Indeed, I should have updated the PR with a comment earlier. At least we can raise the error on the python side though, the call to the pythonization happens before the C++ constructor is called. Maybe the check can be something more specific like; ```python; url = ROOT.TUrl(filename); if url.GetProtocol() != ""file"":; raise ValueError(); ```; instead of the current more simplistic check",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11063#issuecomment-1198458818:373,simpl,simplistic,373,https://root.cern,https://github.com/root-project/root/pull/11063#issuecomment-1198458818,2,['simpl'],['simplistic']
Usability,"Indeed, as said on the forum it is quite simple to reproduce this option with the current ROOT. See the script and plot I posted on the forum. If that enough for you we can close this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9505#issuecomment-1092679466:41,simpl,simple,41,https://root.cern,https://github.com/root-project/root/issues/9505#issuecomment-1092679466,2,['simpl'],['simple']
Usability,"Indeed, but for that we would need to change the public interfaces of (at least) `TLatex` and `TMathText`.; So now my question is the following: do we simply fix the compilation warnings/errors on Windows, or do we want to make it working with all possible characters, requiring new interfaces with `char32_t`?. I'll let @couet comment on that (BTW, it doesn't work on Linux or Mac either).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13091#issuecomment-1614327543:151,simpl,simply,151,https://root.cern,https://github.com/root-project/root/issues/13091#issuecomment-1614327543,2,['simpl'],['simply']
Usability,"Indeed, nothing to do with TF2. An even simpler reproducer is:; ```; void w(); {; auto c1 = new TCanvas();; auto pad = new TPad(""p"",""p"", 0.5, 0 , 1., 1);; pad->Draw();. auto h0 = new TH2F(""h0"",""h0"", 10, 0.02, 15, 10, -8, 8);; h0->Draw();. // pad ->cd(); // uncomment this line an it will crash. auto h1 = new TH2F(""h1"",""h1"", 10, 0.01, 14, 10, -10, 10);; h1->Draw(""same"");; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9869#issuecomment-1036292700:40,simpl,simpler,40,https://root.cern,https://github.com/root-project/root/issues/9869#issuecomment-1036292700,2,['simpl'],['simpler']
Usability,"Indeed, the presence of the last optional parameter of the 'TSQLStatement ::SetBinary', which is called 'maxsize', looks very strange for me. If i set binary buffer (void* 'mem' variable) and set its size in bytes ('size' variable), what does the 'maxsize' variable mean? Isn't it obvious how much memory needs to be allocated if the 'size' parameter is specified?; 'maxsize' optional parameter may specify something else, but, unfortunately, i can't find meaning of the parameters in the current ROOT reference guide. Please, add this check, because the presence of the both 'size' and 'maxsize' variables is not obvious, at least, for me. So, i never used the 'maxsize' parameter. After the addition, i'll check one more. Other tests have passed well.; The fixes in older branches is not required (i can use own patches). But if it doesn't take a long time for you, then it would be valuable, because the last FairRoot version, we are based on, has ROOT 6.20.08.; Thank you. With respect, Konstantin.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7127#issuecomment-774529790:512,guid,guide,512,https://root.cern,https://github.com/root-project/root/issues/7127#issuecomment-774529790,2,['guid'],['guide']
Usability,"Indeed, we don't guarantee ABI stability for patch releases. Most people cope (it has never been a huge issue) and it gives us the freedom to keep the LHC experiments working at a reasonable cost ;-) Patch level for us simply means ""it does not have new features, only bug fixes"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7781#issuecomment-813669671:219,simpl,simply,219,https://root.cern,https://github.com/root-project/root/issues/7781#issuecomment-813669671,2,['simpl'],['simply']
Usability,Interesting for learning what would happen.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15438#issuecomment-2099260382:16,learn,learning,16,https://root.cern,https://github.com/root-project/root/pull/15438#issuecomment-2099260382,2,['learn'],['learning']
Usability,Is it clear what `ratioplot1->Close()` is supposed to mean?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14855#issuecomment-1974795728:6,clear,clear,6,https://root.cern,https://github.com/root-project/root/issues/14855#issuecomment-1974795728,2,['clear'],['clear']
Usability,"Is it possible to get the `QualType` for a template argument without parsing Clang's AST? If so, that would be much easier. I was able to simplify some of this code by implementing the template in the header, but an AST transformer is still needed to get the `QualType` and add it to the template specialization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16214#issuecomment-2295093885:138,simpl,simplify,138,https://root.cern,https://github.com/root-project/root/pull/16214#issuecomment-2295093885,2,['simpl'],['simplify']
Usability,"Is mangling supposed to address those characters too? Maybe there is something simple which could be done for names of objects in ROOT, for example keeping only letters and numbers and postponing the hash of the name? In the end we need this for autogenerated code, but maybe I am wrong.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15377#issuecomment-2084946546:79,simpl,simple,79,https://root.cern,https://github.com/root-project/root/pull/15377#issuecomment-2084946546,2,['simpl'],['simple']
Usability,"Is there a way to see the variable values in the core with gdb? I don't think that we can understand this without seeing them. A simple gethostname works properly, as expected.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-760382601:129,simpl,simple,129,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-760382601,2,['simpl'],['simple']
Usability,Is this a simple pythonisation or do we need something more?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7685#issuecomment-1925198788:10,simpl,simple,10,https://root.cern,https://github.com/root-project/root/issues/7685#issuecomment-1925198788,2,['simpl'],['simple']
Usability,"It always works when you try on your own machine, and then fails when a different version of CMake or a different configuration is used. That's a lesson usually learned the hard way with CMake :-). > Also, how the heck is a generated ROOTConfig.cmake file being used during the configuration of ROOT itself?. That's likely used by `roottest`, as it's actually a separate CMake project which builds against ROOT (and can also be built separately if needed). The error you see happens because `find_dependency(Vdt)` tries to read a header for Vdt (to figure out its version) which should be in the build directory (builtin_vdt==True), but is not there yet, because the build/install of Vdt as a builtin happens only at build time, not configuration time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11844#issuecomment-1339205080:161,learn,learned,161,https://root.cern,https://github.com/root-project/root/pull/11844#issuecomment-1339205080,2,['learn'],['learned']
Usability,It can be done if you have Internet. Earlier User's Guide was available for download. It's much easier to download a prepared file. Especially if it is together with other documentation.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7421#issuecomment-844279682:52,Guid,Guide,52,https://root.cern,https://github.com/root-project/root/issues/7421#issuecomment-844279682,1,['Guid'],['Guide']
Usability,It could be as simple as testing the full function with a new unit here https://github.com/root-project/root/blob/master/core/clingutils/test/TClingUtilsTests.cxx,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15386#issuecomment-2088090746:15,simpl,simple,15,https://root.cern,https://github.com/root-project/root/pull/15386#issuecomment-2088090746,2,['simpl'],['simple']
Usability,It does not hit the cache because the unloading clears the memory buffers behind the FileID. This means we have cache but it is unreachable after unloading by design.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2483#issuecomment-413987265:48,clear,clears,48,https://root.cern,https://github.com/root-project/root/pull/2483#issuecomment-413987265,2,['clear'],['clears']
Usability,It has not been updated since a long time ... and new feature like RDataFrame are not in it ....And yes we do not put any effort into it. See: https://root.cern/manual/. This is the top page of the ROOT documentation now. On the opposite the ref-guide (class doc) is constantly updated. Constructive issues and PR should be made on the [ROOT web site repository](https://github.com/root-project/web),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7279#issuecomment-785864167:246,guid,guide,246,https://root.cern,https://github.com/root-project/root/issues/7279#issuecomment-785864167,2,['guid'],['guide']
Usability,"It is a compressed qt help file, stored locally. Yes, it is potentially a very large file. (Could be enabled via cmake flag). It contains all the html info of the guide.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-901748882:163,guid,guide,163,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-901748882,2,['guid'],['guide']
Usability,It is already in mathmore. The license is simply not FOSS (read it carefully if you care).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13688#issuecomment-1728406175:42,simpl,simply,42,https://root.cern,https://github.com/root-project/root/pull/13688#issuecomment-1728406175,2,['simpl'],['simply']
Usability,It is clear ownership problem. @ferdymercury - you can try to fix it if you want.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14855#issuecomment-1970972594:6,clear,clear,6,https://root.cern,https://github.com/root-project/root/issues/14855#issuecomment-1970972594,2,['clear'],['clear']
Usability,It is great you add the support for overlapping range in DataRange. ; Can you also please convert the test you have above in a simple Google test that can be added in math/mathcore/test ? ; You can just replace the assert with EXPECT_EQ.; A simple example to look is this test: ; https://github.com/root-project/root/blob/master/hist/hist/test/test_TH1.cxx. Thank you for this contribution!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10101#issuecomment-1080810665:127,simpl,simple,127,https://root.cern,https://github.com/root-project/root/pull/10101#issuecomment-1080810665,4,['simpl'],['simple']
Usability,"It is more tricky than I thought. Actually I see the error ""sometimes"" on fresh builds only. That's not clear yet ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11614#issuecomment-1305640008:104,clear,clear,104,https://root.cern,https://github.com/root-project/root/pull/11614#issuecomment-1305640008,2,['clear'],['clear']
Usability,"It is old logic that `TBrowser` does not starts without `DISAPLAY` variable set or simply in batch mode.; One can solve this, but with some fine-tuning in ""normal"" `TBrowser`/`TBrowserImp` classes.; If @bellenot has nothing against it - I can propose PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10748#issuecomment-1159127875:83,simpl,simply,83,https://root.cern,https://github.com/root-project/root/issues/10748#issuecomment-1159127875,2,['simpl'],['simply']
Usability,It is really simple to check what gets linked in with a debugger if you have the setup done already. If I can get ssh access to a node somewhere I can do that.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12156#issuecomment-1665604004:13,simpl,simple,13,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1665604004,2,['simpl'],['simple']
Usability,It seems clear that the two name `RNTupleUnownedView` and `RNTupleOwnedView` are too ambiguous (no way to know who the subject of the '[un]owned' is (Is the the user or the system that owns (or not)). Furthermore I am confused by the question itself. A `view` is typically a 'small' object that does not own what it gives access to (e.g. `std::string_view` or its cousin `std::span`). So is `view` even the right term? Completely related can you remind me what information we are trying to pass to the user with the 2 distinct names (what do they need to do differently)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16363#issuecomment-2327424850:9,clear,clear,9,https://root.cern,https://github.com/root-project/root/pull/16363#issuecomment-2327424850,2,['clear'],['clear']
Usability,"It seems deeper problems exists. In my study, I need to sample a 3D multi-variate gaussian distribution. For comparison, I set correlation to zero, so that I can simply sample three independent variables. The results using unuran and the one using three indepent variables are incompatible, even with above mentioned dirty fix. Currently I switch to alternative methods, yet it might be useful to understand what is the problem. I think some unit test and integration test should be implemented.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10222#issuecomment-1079823051:162,simpl,simply,162,https://root.cern,https://github.com/root-project/root/issues/10222#issuecomment-1079823051,2,['simpl'],['simply']
Usability,"It seems this is not working because the part after the `?` is interpreted as a query string. However, I'm not sure when the `?` should be treated as a wildcard and when it should be treated as a query starter. Should `?` only be treated as _not_ a wildcard if the part after contains `=` characters for query parameters or a `#` for a tree name? In addition, some files can have `?` as part of the file name: what do we do in this case? Should we simply not allow `?` for wild carding anymore? This needs to be discussed before making changes. @pcanal what do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10239#issuecomment-1940943807:448,simpl,simply,448,https://root.cern,https://github.com/root-project/root/issues/10239#issuecomment-1940943807,2,['simpl'],['simply']
Usability,"It seems to be a doxygen issue. I submitted an issue, with a simple reproducer, in the doxygen repository: ; https://github.com/doxygen/doxygen/issues/8620",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8533#issuecomment-868348530:61,simpl,simple,61,https://root.cern,https://github.com/root-project/root/issues/8533#issuecomment-868348530,2,['simpl'],['simple']
Usability,"It solves a relatively different problem. It skips offset array generation in the case of ""arbitrary objects are serialized and all objects in the basket happen to have the same size"". This PR skips offset array generation of ""simple objects of all different sizes"". So, the approaches differ in which classes/types they apply to and under what cases. There does exist a common subset (simple types where all events have the same size); in those cases, they will result in mostly-identical output (the uncompressed basket from this PR will be a single byte larger). We measure an ~18% decrease when applied to CMS's NanoAOD compressed with LZ4.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1003#issuecomment-332277763:227,simpl,simple,227,https://root.cern,https://github.com/root-project/root/pull/1003#issuecomment-332277763,4,['simpl'],['simple']
Usability,"It turns out this is due to an integer underflow that is triggered by the machinery of `DisplayHelper`:. https://github.com/root-project/root/blob/3160daafc008d8080cb9b3c602f4134b521ca8ad/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx#L1334-L1337. The intended workflow is:; 1. Add the next row to be displayed to the `RDisplay` object. The `AddRow` method decreases an internal counter of how many entries are left to be displayed at https://github.com/root-project/root/blob/3160daafc008d8080cb9b3c602f4134b521ca8ad/tree/dataframe/inc/ROOT/RDF/RDisplay.hxx#L227; 2. Check whether there are no more entries to be displayed (`!fDisplayerHelper->HasNext()`).; 3. If so, signal the previous node that this node has finished its job through the `StopProcessing` method. There are a bunch of flaws in this workflow. Uncoditionally calling `AddRow` may trigger the integer underflow by calling `fEntries--` when `fEntries==0`. This can be seen quite simply with the following example; ```cpp; root [0] ROOT::RDataFrame d{1};; root [1] auto dd = d.Define(""b1"", [] { return 42; }).Display<int>({""b1""}, 0);; root [2] dd->Print(); +-----+----+; | Row | b1 | ; +-----+----+; | 0 | 42 | ; +-----+----+. ```; The row is printed even though the user asked for `0` entries to be displayed. The other problem, more subtle and the actual culprit of the reproducer above, is when there is more than just the `Display` operation in the computation graph. `DisplayHelper::Exec` is called once per entry to be processed, as this is the normal working condition in `RLoopManager::Run`. When there is only the `Display` operation, the moment there are no more entries to be displayed, `DisplayHelper` will tell `RLoopManager` that it has finished, thus triggering an early stop of the execution (e.g. if a tree has 100 entries but we only want to display 5). When there is more than one operation, i.e. more than one child of the `RLoopManager`, the call to `StopProcessing` coming from `DisplayHelper::Exec` is not enough t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11390#issuecomment-1253381156:944,simpl,simply,944,https://root.cern,https://github.com/root-project/root/issues/11390#issuecomment-1253381156,2,['simpl'],['simply']
Usability,It would be good to have some warning here or extension of the initial use case.; I am mainly running compiled root in these days.. Is there any specific reasons why it is only meant to be used in interactive in the first place while the fix looks so simple ?. @couet,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13708#issuecomment-1734508407:251,simpl,simple,251,https://root.cern,https://github.com/root-project/root/issues/13708#issuecomment-1734508407,2,['simpl'],['simple']
Usability,"It's actually an _array_ ds, not the arrow ds :smile: it's a simple datasource used for testing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8754#issuecomment-888908741:61,simpl,simple,61,https://root.cern,https://github.com/root-project/root/pull/8754#issuecomment-888908741,2,['simpl'],['simple']
Usability,"It's not an issue for adoption. The underlying issue is still there, though. ROOT still loads a bunch of unneeded PCM when simply opening a file, it's just the cost is half what it was before and the reproducer is the same as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-2304636324:123,simpl,simply,123,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-2304636324,2,['simpl'],['simply']
Usability,It's not clear to me what the actually issue with Jenkins is. It looks like a fluke in one of the jenkins components. Could you restart the test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13146#issuecomment-1620049875:9,clear,clear,9,https://root.cern,https://github.com/root-project/root/pull/13146#issuecomment-1620049875,2,['clear'],['clear']
Usability,"It's still one less patch needed for the conda packaging. Clearly there's a bigger rock to move, but this smaller one could be moved anyway perhaps?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15930#issuecomment-2205388408:58,Clear,Clearly,58,https://root.cern,https://github.com/root-project/root/pull/15930#issuecomment-2205388408,1,['Clear'],['Clearly']
Usability,"It's understood; Lorenzo will find a workaround for 6.28/00. We will still need to solve the underlying issue, but with lower urgency. The issue is with llvm-IR using non-unique symbol names for the function-local constants, and re-using the already emitted symbols in subsequent modules (due to cling's ""private"" => ""weak"" symbol rewriting). A simple workaround is to use different variable names for the function-local constants.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12164#issuecomment-1410380142:345,simpl,simple,345,https://root.cern,https://github.com/root-project/root/issues/12164#issuecomment-1410380142,2,['simpl'],['simple']
Usability,"It's your decision about how you organize your work, but maybe it would be better to simply suggest to users to. - submit bugs to github; - ask questions on the forum. Why I wrote that github is better for ""feedback"", is because its issues are integrated with push and pull releases, and they won't be lost (as forum reports can be), they will stay open until closed or fixed. . Maybe you can invent a better wording for that paragraph.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7334#issuecomment-789011675:85,simpl,simply,85,https://root.cern,https://github.com/root-project/root/pull/7334#issuecomment-789011675,4,"['feedback', 'simpl']","['feedback', 'simply']"
Usability,"Ivan and I took a look and it looks like the culprit is `cling` getting static initialization wrong (e.g. calling a static initializer multiple times instead of once, even in a single-thread program). Unfortunately I didn't manage to disentangle the issue from RDF. The simplest way to reproduce is to add this patch to ROOT master (47f66c57ca):. ```diff; diff --git a/tree/dataframe/inc/ROOT/RDF/GraphNode.hxx b/tree/dataframe/inc/ROOT/RDF/GraphNode.hxx; index 9548c4adf0..3e39c80f33 100644; --- a/tree/dataframe/inc/ROOT/RDF/GraphNode.hxx; +++ b/tree/dataframe/inc/ROOT/RDF/GraphNode.hxx; @@ -57,6 +57,7 @@ private:; static unsigned int &GetStaticGlobalCounter(); {; static unsigned int sGlobalCounter = 1;; + printf(""static global counter:%u\n"", sGlobalCounter);; return sGlobalCounter;; }. @@ -68,7 +69,11 @@ public:; ////////////////////////////////////////////////////////////////////////////; /// \brief Resets the counter.; /// This is not strictly needed but guarantees that two consecutive request to the graph return the same result.; - static void ClearCounter() { GraphNode::GetStaticGlobalCounter() = 1; }; + static void ClearCounter(); + {; + printf(""setting counter to 1\n"");; + GraphNode::GetStaticGlobalCounter() = 1;; + }. ////////////////////////////////////////////////////////////////////////////; /// \brief Appends a node on the head of the current node; ```. and execute the following code (adapted from Ivan's repro above):. ```cpp; // repro.cpp; #include <ROOT/RDFHelpers.hxx>; #include <ROOT/RDataFrame.hxx>. void repro() {; ROOT::RDataFrame rd1(1);; auto branch1_1 = rd1.Define(""one"", ""1"").Count();; auto branch1_2 = rd1.Define(""two"", ""2"").Count();; ROOT::RDF::SaveGraph(rd1);; }. #ifndef __CLING__; int main() { repro(); }; #endif; ```. Running through the interpreter:. ```; $ root -l -b -q repro.cpp. Processing repro.cpp...; setting counter to 1; static global counter:1; static global counter:1; static global counter:1 // one again!? this counter is always increased",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9474#issuecomment-998846312:270,simpl,simplest,270,https://root.cern,https://github.com/root-project/root/issues/9474#issuecomment-998846312,2,['simpl'],['simplest']
Usability,"Javier is testing this patch, so I marked as do-not-merge until I get positive feedback here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/899#issuecomment-325365214:79,feedback,feedback,79,https://root.cern,https://github.com/root-project/root/pull/899#issuecomment-325365214,2,['feedback'],['feedback']
Usability,Jenkins build on windows fails without clear reason - merging,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4169#issuecomment-519890102:39,clear,clear,39,https://root.cern,https://github.com/root-project/root/pull/4169#issuecomment-519890102,2,['clear'],['clear']
Usability,"Jokes apart, redoing the tutorial is easy. As a matter of fact, I'll add soon to the PR. Thanks @pcanal for the feedback!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1531#issuecomment-358971476:112,feedback,feedback,112,https://root.cern,https://github.com/root-project/root/pull/1531#issuecomment-358971476,2,['feedback'],['feedback']
Usability,"Jonas : thank you very much for your generous help. You are my hero for root/roofit. Everything is clear. Unfortunately, from this discussion, it seems that I found a mistake (in some specific cases) in the way roofit is computing the nll as provided by class RooFitResult and by RooAbsPdf->createNLL.; (since I am able to reproduce the value by hand if I do a *mistake on purpose* in the formula.). ->I will prepare the minimum possible program to try to prove it (maybe there is a cartesian explanation) and will create a new github entry.; Thank you",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7991#issuecomment-827087008:99,clear,clear,99,https://root.cern,https://github.com/root-project/root/issues/7991#issuecomment-827087008,2,['clear'],['clear']
Usability,"Just a quick head up!. Adding a virtual method break some of our use code.; The virtual method was not implemented in one of our class, what use to be a normal class is now a virtual class and that cannot be instantiated anymore. The first compilation problem seems to be solved simply by upgrading to the last release of GEANT3, it should not be a big issue, but I just wanted to point out this ""problem"". Cheers,; Simone",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3513#issuecomment-516427404:279,simpl,simply,279,https://root.cern,https://github.com/root-project/root/pull/3513#issuecomment-516427404,2,['simpl'],['simply']
Usability,"Just a small update,; I did a fresh build of ROOT, current master, with Python 3.11, on Fedora Linux 37. I tried your reproducer 100 times and could never trigger the segfault. Also this simpler reproducer never causes a segfault:; ```python; import ROOT; f = ROOT.TFile(""file1.root"", ""recreate""); f.Close(); f.Close(); ```; So apparently it is not Python 3.11 giving issues, maybe something else in your case, unclear.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11823#issuecomment-1337020095:187,simpl,simpler,187,https://root.cern,https://github.com/root-project/root/issues/11823#issuecomment-1337020095,2,['simpl'],['simpler']
Usability,"Just an idea: would it improve the situation if we kept the one name `RNTupleView` with a template parameter that distinguishes between owning and non-owning, but we make that template parameter an enum so that the meaning is clearly spelled out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16363#issuecomment-2337291204:226,clear,clearly,226,https://root.cern,https://github.com/root-project/root/pull/16363#issuecomment-2337291204,2,['clear'],['clearly']
Usability,"Just because I learned to not trust the lifetime of GitHub comments: this refers to the comment; ```c++; // FIXME: Uncomment and debug the various type mismatches.; ```; in a future version of `interpreter/cling/include/cling/Interpreter/Value.h`, around line 266.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12116#issuecomment-1405620021:15,learn,learned,15,https://root.cern,https://github.com/root-project/root/issues/12116#issuecomment-1405620021,2,['learn'],['learned']
Usability,Just coming back to the issue. It is not clear to me whether we can close it as clarified or if some feature is still needed. @ferdymercury could you chime in?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8582#issuecomment-1925302611:41,clear,clear,41,https://root.cern,https://github.com/root-project/root/issues/8582#issuecomment-1925302611,2,['clear'],['clear']
Usability,"Just for completeness, here is a simple reproducer of the problem:. ```c++; // compile with g++ -fabi-version=6 -o test test.cpp using GCC 13.2; #include <memory>. std::unique_ptr<int> foo() { return nullptr; }. int main() {}; ```; Here is again the error:; ```txt; In file included from /usr/include/c++/13.2.1/memory:78,; from test.C:1:; /usr/include/c++/13.2.1/bits/unique_ptr.h: In instantiation of ‘constexpr std::unique_ptr<_Tp, _Dp>::unique_ptr(std::nullptr_t) [with _Del = std::default_delete<int>; <template-parameter-2-2> = void; _Tp = int; _Dp = std::default_delete<int>; std::nullptr_t = std::nullptr_t]’:; test.C:3:37: required from here; /usr/include/c++/13.2.1/bits/unique_ptr.h:360:11: error: no matching function for call to ‘std::__uniq_ptr_data<int, std::default_delete<int>, true, true>::__uniq_ptr_data()’; 360 | : _M_t(); | ^~~~~~; /usr/include/c++/13.2.1/bits/unique_ptr.h:241:40: note: candidate: ‘template<class _Del> std::__uniq_ptr_data<int, std::default_delete<int>, true, true>::__uniq_ptr_data(std::__uniq_ptr_impl<int, std::default_delete<int> >::pointer, _Del&&) [inherited from std::__uniq_ptr_impl<int, std::default_delete<int> >]’; 241 | using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;; | ^~~~~~~~~~~~~~~; /usr/include/c++/13.2.1/bits/unique_ptr.h:241:40: note: template argument deduction/substitution failed:; /usr/include/c++/13.2.1/bits/unique_ptr.h:360:11: note: candidate expects 2 arguments, 0 provided; 360 | : _M_t(); | ^~~~~~; /usr/include/c++/13.2.1/bits/unique_ptr.h:241:40: note: candidate: ‘std::__uniq_ptr_data<int, std::default_delete<int>, true, true>::__uniq_ptr_data(std::__uniq_ptr_impl<int, std::default_delete<int> >::pointer) [inherited from std::__uniq_ptr_impl<int, std::default_delete<int> >]’; 241 | using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;; | ^~~~~~~~~~~~~~~; /usr/include/c++/13.2.1/bits/unique_ptr.h:241:40: note: candidate expects 1 argument, 0 provided; /usr/include/c++/13.2.1/bits/unique_ptr.h:242:7: note: candidate: ‘st",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10984#issuecomment-1739815648:33,simpl,simple,33,https://root.cern,https://github.com/root-project/root/issues/10984#issuecomment-1739815648,2,['simpl'],['simple']
Usability,Just rebased to see the situation on the macs more clearly.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14974#issuecomment-2010691407:51,clear,clearly,51,https://root.cern,https://github.com/root-project/root/pull/14974#issuecomment-2010691407,2,['clear'],['clearly']
Usability,"Just to confirm: compilation successful for me with the suggested edits to provide the libbsd root dir, which then also links the library. I do hardcode the filename in my suggestion, which I'm not sure will always work, but perhaps we don't need to perfect this if it solves the issue for CentOS 7 + a simple custom build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15242#issuecomment-2058569594:303,simpl,simple,303,https://root.cern,https://github.com/root-project/root/pull/15242#issuecomment-2058569594,2,['simpl'],['simple']
Usability,"Just to summarise @stwunsch , I think the only action remaining is to iron out the type of the return vector, either in C++ or with a simple promotion mechanism implemented in python.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1856#issuecomment-381551724:134,simpl,simple,134,https://root.cern,https://github.com/root-project/root/pull/1856#issuecomment-381551724,2,['simpl'],['simple']
Usability,Just undo-ed the update.; Hope that nothing breaks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9286#issuecomment-970839284:5,undo,undo-ed,5,https://root.cern,https://github.com/root-project/root/pull/9286#issuecomment-970839284,2,['undo'],['undo-ed']
Usability,"Just very simple macro:. ```; void *getGlobal(const char *name) ; {; auto gl = gROOT->GetListOfGlobals()->FindObject(name);; if (!gl) return nullptr; ; TGlobal *global = dynamic_cast<TGlobal *> (gl);; return global ? global->GetAddress() : nullptr;; }. void test() ; {; TCanvas c1;; printf(""gROOT %p %p\n"", gROOT, getGlobal(""gROOT""));; printf(""gPad %p %p\n"", gPad, getGlobal(""gPad""));; }; ```; In current ROOT master - gROOT prints identical code, gPad is **DIFFERENT**; This the provided patch gPad and gROOT printouts are identical.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3208#issuecomment-449373735:10,simpl,simple,10,https://root.cern,https://github.com/root-project/root/pull/3208#issuecomment-449373735,2,['simpl'],['simple']
Usability,"Ks/MacOSX.sdk/usr/include; /Library/Developer/CommandLineTools/usr/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks (framework directory); End of search list.; # 1 ""/dev/null""; # 1 ""<built-in>"" 1; # 1 ""<built-in>"" 3; # 409 ""<built-in>"" 3; # 1 ""<command line>"" 1; # 1 ""<built-in>"" 2; # 1 ""/dev/null"" 2. sftnight@macphsft18 ~ % clang++ -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: x86_64-apple-darwin23.6.0; Thread model: posix; InstalledDir: /Library/Developer/CommandLineTools/usr/bin; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/usr/bin/../include/c++/v1""; ""/Library/Developer/CommandLineTools/usr/bin/clang"" -cc1 -triple x86_64-apple-macosx14.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=all; -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=2 -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu penryn -tune-cpu generic -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/sftnight -resource-dir /Library/Developer/CommandLineTools/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1 -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include -internal-isystem /Library/Developer/CommandLineTools/usr/lib/clang/16/include -internal-externc-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Library/Developer/CommandLineTools/usr/include -Wno-reorder-init-list -Wno-impl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16494#issuecomment-2373214590:5299,clear,clear-ast-before-backend,5299,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590,2,['clear'],['clear-ast-before-backend']
Usability,Last question before we merge :) ... how confident are we that (simple) files with that option are indeed 'reproducible' (i.e. is there more field to handle?),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4253#issuecomment-525008067:64,simpl,simple,64,https://root.cern,https://github.com/root-project/root/pull/4253#issuecomment-525008067,2,['simpl'],['simple']
Usability,Learning from what the LLVM configuration is doing I believe I managed to make my code quite a bit better. :wink: So I'll be curious about any feedback on this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4561#issuecomment-546388568:143,feedback,feedback,143,https://root.cern,https://github.com/root-project/root/pull/4561#issuecomment-546388568,3,"['Learn', 'feedback']","['Learning', 'feedback']"
Usability,Let see with @pcanal what to do with the doc in the User's Guide . Should it be moved to the Reference Guide ? Ignored ? I am happy to help to do some editing but I do not have the expertise to decide what to do.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7216#issuecomment-1046999920:59,Guid,Guide,59,https://root.cern,https://github.com/root-project/root/issues/7216#issuecomment-1046999920,2,['Guid'],['Guide']
Usability,"Log in to Jenkins, hit the ❌ next to the progress bar for that build. Done that!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2886#issuecomment-434636682:41,progress bar,progress bar,41,https://root.cern,https://github.com/root-project/root/pull/2886#issuecomment-434636682,2,['progress bar'],['progress bar']
Usability,"Looks good from my point of view, I'll let Jakob have the final say. One point we should clarify at some point (but doesn't need to block this PR) is how subfield access plays with writing: It intuitively makes sense for reading as you can just have the same value multiple times in memory. But I guess we only want to take the top-level fields from the entry for writing? Should we forbid creating a (parallel) writer passing a model with registered subfields?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16693#issuecomment-2443511035:193,intuit,intuitively,193,https://root.cern,https://github.com/root-project/root/pull/16693#issuecomment-2443511035,2,['intuit'],['intuitively']
Usability,Looks like the problem is present since the beginning. ; Already initial commit https://github.com/root-project/root/commit/852600061bcacd9b255d44f6312c96b6b1e00a2d has it. I can provide simple fix which makes it properly.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13927#issuecomment-1780888955:187,simpl,simple,187,https://root.cern,https://github.com/root-project/root/issues/13927#issuecomment-1780888955,2,['simpl'],['simple']
Usability,MASSIVE thanks to @eguiraud and @pcanal for all the suggestions and inputs! I learned so much from this :smile:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7785#issuecomment-820202357:78,learn,learned,78,https://root.cern,https://github.com/root-project/root/pull/7785#issuecomment-820202357,2,['learn'],['learned']
Usability,Main changes are done - I fully remove RDrawingOpts and simplify class organizations around drawables. I need some more days to make I/O for RCanvas . I introduced RIOShared class for that. It is wrapper for shared_ptr.; There is method with collects all these objects from RCanvas and one could reassign shared_ptr after reading of RCanvas. This is the idea. Half of tutorials already works,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4352#issuecomment-531247017:56,simpl,simplify,56,https://root.cern,https://github.com/root-project/root/pull/4352#issuecomment-531247017,2,['simpl'],['simplify']
Usability,"Many of the tests in the list above were renamed in master, but they all succceed:; ```; 1027/1220 Test #1028: tutorial-v7-histops.cxx ............................................. Passed 6.00 sec; 1029/1220 Test #1031: tutorial-v7-simple.cxx .............................................. Passed 8.82 sec; 1033/1220 Test #1026: tutorial-v7-concurrentfill.cxx ...................................... Passed 20.39 sec; 1034/1220 Test #1036: tutorial-rcanvas-rframe.cxx ......................................... Passed 2.93 sec; 1035/1220 Test #1037: tutorial-rcanvas-rh1.cxx ............................................ Passed 2.91 sec; 1037/1220 Test #1038: tutorial-rcanvas-rh1_large.cxx ...................................... Passed 3.14 sec; 1039/1220 Test #1040: tutorial-rcanvas-rh2.cxx ............................................ Passed 4.41 sec; 1040/1220 Test #1041: tutorial-rcanvas-rh2_colz.cxx ....................................... Passed 4.62 sec; 1041/1220 Test #1042: tutorial-rcanvas-rh2_large.cxx ...................................... Passed 4.85 sec; 1042/1220 Test #1045: tutorial-rcanvas-rlegend.cxx ........................................ Passed 2.46 sec; 1047/1220 Test #1034: tutorial-rcanvas-rcanvas_mt.cxx ..................................... Passed 25.33 sec; 1051/1220 Test #1043: tutorial-rcanvas-rh3.cxx ............................................ Passed 13.34 sec; 1053/1220 Test #1044: tutorial-rcanvas-rh3_large.cxx ...................................... Passed 13.14 sec; 1059/1220 Test #1056: tutorial-rcanvas-subpads.cxx ........................................ Passed 2.22 sec; 1066/1220 Test #1029: tutorial-v7-perf.cxx ................................................ Passed 55.03 sec; 1199/1220 Test #1030: tutorial-v7-perfcomp.cxx ............................................ Passed 105.92 sec; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8073#issuecomment-1000999629:232,simpl,simple,232,https://root.cern,https://github.com/root-project/root/issues/8073#issuecomment-1000999629,2,['simpl'],['simple']
Usability,"Many thanks Danilo and Olivier for picking this up so quickly! The issue appears only when `TColorBug.root` is loaded in a new ROOT session. Sorry for not being clear about this in my original post. If I first run `createTestFile();` from Olivier's macro to create the .root file and then close ROOT and start a new ROOT session that only runs `readTestFile();`, `TColor::GetFreeColorIndex();`returns the index of the already defined `myColor`. So the problem seems to be related to how custom colors that are not yet existing in the ROOT session are restored from a .root file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16051#issuecomment-2256214014:161,clear,clear,161,https://root.cern,https://github.com/root-project/root/issues/16051#issuecomment-2256214014,2,['clear'],['clear']
Usability,"Marking this as ""improvement"" rather than ""bug"" because this is a known limitation. In fact, @pcanal I thought that opening a `TFile` in a thread and closing it from another was simply not supported? I.e. I thought issues were deeper than just a mismatched thread-local `gDirectory`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6939#issuecomment-742755857:178,simpl,simply,178,https://root.cern,https://github.com/root-project/root/issues/6939#issuecomment-742755857,2,['simpl'],['simply']
Usability,Marking this as low priority as there is a simple workaround. We might still want to add a configuration for this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7205#issuecomment-788053716:43,simpl,simple,43,https://root.cern,https://github.com/root-project/root/issues/7205#issuecomment-788053716,2,['simpl'],['simple']
Usability,Marseilles job logs are in:. [marseilles](https://bigpanda.cern.ch/filebrowser/?guid=00354dec-89f9-4687-bc9e-d0151ddff358&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000051.log.tgz&site=IN2P3-CPPM/SCORE&scope=panda&fileid=23156311480). and Cern jobs logs are in:; [Cern](https://bigpanda.cern.ch/filebrowser/?guid=52428b18-b810-4194-be8a-fb11e92bc4f8&lfn=panda.um.group.phys-higgs.user.schaffer.mc16_13TeV.500995.H4lMinitree_nominal.0.16e..201216_01.log.23578674.000050.log.tgz&site=CERN-T0/SCORE&scope=panda&fileid=23156311459),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-746412091:80,guid,guid,80,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-746412091,4,['guid'],['guid']
Usability,Master ref guide was rebuilt before qhelpgenerator was installed maybe?. ![image](https://user-images.githubusercontent.com/10653970/149124427-a8355b4c-2202-4da3-9f0e-cd220f3a1d60.png),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-1010898506:11,guid,guide,11,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-1010898506,2,['guid'],['guide']
Usability,"May I suggest that, instead of creating an issue, you do a Pull Request on the source file: https://github.com/root-project/root/blob/master/documentation/users-guide/Trees.md ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7284#issuecomment-785822857:161,guid,guide,161,https://root.cern,https://github.com/root-project/root/issues/7284#issuecomment-785822857,2,['guid'],['guide']
Usability,May be @bellenot might knows why the arrow keys are not responsive,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7184#issuecomment-778016535:56,responsiv,responsive,56,https://root.cern,https://github.com/root-project/root/pull/7184#issuecomment-778016535,2,['responsiv'],['responsive']
Usability,Maybe it can be made more clear but the message comes from [here](https://github.com/root-project/root/blob/bd200315c50ac1520f75f959a852c6d3333f8aa9/core/base/src/TApplication.cxx#L147). I guess this error can occur for many more reasons than a macro called `main.cpp`. So it will not be easy to make it clearer there. Maybe @Axel-Naumann or @pcanal can comment.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11707#issuecomment-1315426448:26,clear,clear,26,https://root.cern,https://github.com/root-project/root/issues/11707#issuecomment-1315426448,4,['clear'],"['clear', 'clearer']"
Usability,"Maybe this one as well:; ```diff; -TEST(RDFVary, RequireNVariationsIsConsistent); +TEST_P(RDFVary, RequireNVariationsIsConsistent); {; auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });; auto s = df.Vary(""x"", SimpleVariation, {}, /*wrong=*/3).Sum<int>(""x"");; @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent); std::runtime_error);; ; std::cerr.rdbuf(oldCerrStreamBuf);; - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");; + std::string msg;; + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;; + for (auto i = 0u; i < nRepetitions; ++i); + msg += ""RDataFrame::Run: event loop was interrupted\n"";; + EXPECT_EQ(strCerr.str(), msg);; }; ```; For the others I agree",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10715#issuecomment-1152042974:220,Simpl,SimpleVariation,220,https://root.cern,https://github.com/root-project/root/pull/10715#issuecomment-1152042974,1,['Simpl'],['SimpleVariation']
Usability,"Maybe to be clearer, I would expect the output to be:; ```; TypeError: none of the 2 overloaded methods succeeded. Full details:; void MyClass::MyMethod(const MyClass::MyObj& x, bool another) =>; TypeError: takes at least 2 arguments (1 given); void MyClass::MyMethod(const MyClass::MyObj& x = """") =>; RuntimeError: My exception; ```; I.e. the second method didn't fail because of a conversion type error, it failed because the method threw a runtime exception",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16405#issuecomment-2345639881:12,clear,clearer,12,https://root.cern,https://github.com/root-project/root/issues/16405#issuecomment-2345639881,2,['clear'],['clearer']
Usability,"Maybe we anyway should enable reading into `signed char` from a `kChar` column, if only for automatic schema evolution. Users should be able to change a member from `char` to `signed char`, and it may be the simplest to enable this through the column representations rather than a field translation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16136#issuecomment-2257823786:208,simpl,simplest,208,https://root.cern,https://github.com/root-project/root/pull/16136#issuecomment-2257823786,2,['simpl'],['simplest']
Usability,"Maybe we uncovered a problem with the TString move constructor? Any intuition, @pcanal?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15469#issuecomment-2147872231:68,intuit,intuition,68,https://root.cern,https://github.com/root-project/root/pull/15469#issuecomment-2147872231,2,['intuit'],['intuition']
Usability,Merged as #1945 adding 2 simple workarounds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1896#issuecomment-385179254:25,simpl,simple,25,https://root.cern,https://github.com/root-project/root/pull/1896#issuecomment-385179254,2,['simpl'],['simple']
Usability,"Merging so we have the improvements in tomorrow morning, thank you Stefan for the thorough review. More feedback is always welcome -- in case it comes in, I'll address it in future PRs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7388#issuecomment-795263440:104,feedback,feedback,104,https://root.cern,https://github.com/root-project/root/pull/7388#issuecomment-795263440,2,['feedback'],['feedback']
Usability,"Mmmh _get_friend_info might be a bit too simple, looks how it's done here: https://github.com/root-project/root/blob/eb5bcf0f0d79b0011ad4f2b8a38df0b6be4ee9a0/tree/treeplayer/src/TTreeProcessorMT.cxx#L374",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7584#issuecomment-802168332:41,simpl,simple,41,https://root.cern,https://github.com/root-project/root/issues/7584#issuecomment-802168332,2,['simpl'],['simple']
Usability,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`.; 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change; 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? ; 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13134#issuecomment-1637626198:756,clear,clear,756,https://root.cern,https://github.com/root-project/root/pull/13134#issuecomment-1637626198,2,['clear'],['clear']
Usability,"My personal preference is to store std::string instead of a hash, as it's simpler and hashing anyway doesn't give us any improvement in performance. About transaction, I'm testing something like what I asked but it gives me an error like this which seems very cryptic to me, have you ever seen this error before?; https://gist.github.com/yamaguchi1024/b137f5313dfca23abbe890a5c4440a7d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2434#issuecomment-411910183:74,simpl,simpler,74,https://root.cern,https://github.com/root-project/root/pull/2434#issuecomment-411910183,2,['simpl'],['simpler']
Usability,"My two cents about the naming; * `GenerateValueFor` doesn't work since the value is not being generated for the other instance, but for this one (AFAIU).; * `GenerateValueBy` sounds fine in principle since the `GenerateValue` call is called *by* the other instance. I have to admit that I personally do not get this immediately and I have to stop half a second to think about the meaning of the function name.; * `GenerateValueOn` also doesn't work because the value is being generated by the other instance, not on.; * `GenerateValueFrom` personally has a similar meaning to `GenerateValueBy` and is easier to get intuitively.; * The `GenerateValueFrom` naming works for `Generate` but not for `Append`. I.e. I don't like `AppendFrom` since that sounds like we are appending some value *from* the other instance *into* this one; * To me it looks like all these functions are performing a call of the same function name on another instance. Thus, personally I would go with a naming like `CallGenerateValueOn`, `CallAppendOn`, `CallReadOn` etc.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13317#issuecomment-1651710380:615,intuit,intuitively,615,https://root.cern,https://github.com/root-project/root/pull/13317#issuecomment-1651710380,2,['intuit'],['intuitively']
Usability,"My version of os/compiler/valgrind seems to work better and I got some useful information. For `root.exe -b -l -q callfuncbench.cxx+(1000)`. The new code is a big faster: `42,696,463,692` instead of `45,892,859,389`. Some of the calculation are shifted to `Value::Value`: `5,000,000,988` vs `3,100,001,703` (it grows by 2 billions when the overall goes down by 3 billions). The gains comes from the disappearance of `TClingCallFunc::InitRefAndExec` (minus 3.8 billions) and the simplifications of `std::function_handler (removed) and TClingCallFunc::exec` (minus 1.2 billions). So it is getting better and `Value::Value` is a potential source of further optimization (see related comment). [callgrind-callfund.tar.gz](https://github.com/root-project/root/files/9665974/callgrind-callfund.tar.gz)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11252#issuecomment-1261020879:478,simpl,simplifications,478,https://root.cern,https://github.com/root-project/root/pull/11252#issuecomment-1261020879,2,['simpl'],['simplifications']
Usability,Need a more involved fix than my simplistic attempt.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1880#issuecomment-463972985:33,simpl,simplistic,33,https://root.cern,https://github.com/root-project/root/pull/1880#issuecomment-463972985,2,['simpl'],['simplistic']
Usability,"Needs some more work as suggested by Philippe:; - [x] use namespace-scope functions with local statics instead of global channel variables (as agreed on by @eguiraud but I forgot...);; - [x] fwd declare that channel function and even its return type `RLogChannel` in the relevant headers, to reduce `#include` ""load"";; - [x] move ""ROOT"" prefix into channel ctor args (`RLogChannel(""ROOT.FitPanel"")`) to make it usable by non-ROOT code;. And #6931 which will go into a subsequent PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6875#issuecomment-740762392:411,usab,usable,411,https://root.cern,https://github.com/root-project/root/pull/6875#issuecomment-740762392,2,['usab'],['usable']
Usability,Neither svg no png/jpeg images can be produced by eve.; With some efforts one could try to implement png support - but in my mind it is not necessary. This issue was created to let run different tutorials in special testing mode - ; and simply checks that tutorials are still valid. Also there are several tutorials with loop like:; ```; while (gSystem->ProcessEvents()) {; // do something; // update canvas; }; ```; In special testing mode one could limit this loop by several seconds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6651#issuecomment-1923341069:237,simpl,simply,237,https://root.cern,https://github.com/root-project/root/issues/6651#issuecomment-1923341069,2,['simpl'],['simply']
Usability,"Next problem is that musl [apparently](https://www.gnu.org/software/gnulib/manual/html_node/fpu_005fcontrol_002eh.html) does not provide `fpu_control.h`. According to this [forum post](https://root-forum.cern.ch/t/compiling-error-conflicting-types-alpine-linux/28193/3), nothing from this file is in fact used and thus it should be possible to remove the include - based on the `fpu_control.h` [source code](https://code.woboq.org/userspace/glibc/sysdeps/x86/fpu_control.h.html) and a simple `grep`, this should hold for all ROOT components, except `math/mathcore/src/triangle.c`, which uses `_FPU_SETCW` at line 4888. I am not familiar with what `fpu_control.h` does (apparently it has something to do with float precision), but according to [this](https://sourceforge.net/p/jamvm/patches/6/), it should be replaceable by a standard `fenv.h` header file, which I suggest to do (I have not tested it yet, but I will).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9253#issuecomment-963066852:485,simpl,simple,485,https://root.cern,https://github.com/root-project/root/issues/9253#issuecomment-963066852,2,['simpl'],['simple']
Usability,Nice change. I proposed a simplification. The tests seem to fail because the change does what it is supposed to do and the reference would need to be adapted.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10928#issuecomment-1947173074:26,simpl,simplification,26,https://root.cern,https://github.com/root-project/root/issues/10928#issuecomment-1947173074,2,['simpl'],['simplification']
Usability,"No, I do not know. That's the bin center clearly. Why was it shifted? I do not know.; But it fixes the problem and other examples work too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10480#issuecomment-1112122353:41,clear,clearly,41,https://root.cern,https://github.com/root-project/root/pull/10480#issuecomment-1112122353,2,['clear'],['clearly']
Usability,"No, that will not work. As i said protoc is actually configured correctly already. The issue is that /opt/homebrew/include is prepended to the search path for headers. I managed to fix it by doing https://github.com/alisw/root/commit/526782cfe8b7a7fffa90ae0395521b01ae902cf7 which will make sure that my own protobuf comes earlier than the one from homebrew. I see in master protobuf will use a config file, so maybe I can simply patch it in my own build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14207#issuecomment-1851824221:423,simpl,simply,423,https://root.cern,https://github.com/root-project/root/issues/14207#issuecomment-1851824221,2,['simpl'],['simply']
Usability,"No, you misunderstood the problem! I am not complaining because of the missing splash screen. This is only the symptom with an easily to reproduce command. The problem is, that any graphics (histograms, plots etc. at the end of a long rot analysis simply do not show up when you forgot to issue the xhost + (using snap and wayland). And this is really annoying.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15723#issuecomment-2145555699:248,simpl,simply,248,https://root.cern,https://github.com/root-project/root/issues/15723#issuecomment-2145555699,2,['simpl'],['simply']
Usability,"Node has the disk full... Please try again later, as disk space is being cleared now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1023#issuecomment-330792382:73,clear,cleared,73,https://root.cern,https://github.com/root-project/root/pull/1023#issuecomment-330792382,2,['clear'],['cleared']
Usability,"Nope, I do not know if it is an issue on Windows. I think we could just make sure that the ROOT code does the same as:; https://github.com/gsass1/NTop/blob/3ceac499d7c3bfc5f7a073df6e0bd7aa1babf790/ntop.c#L907. See also https://learn.microsoft.com/en-us/windows/win32/api/sysinfoapi/nf-sysinfoapi-globalmemorystatusex",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7196#issuecomment-2301434115:227,learn,learn,227,https://root.cern,https://github.com/root-project/root/issues/7196#issuecomment-2301434115,2,['learn'],['learn']
Usability,"Not quite. The issues was seen as result differing on two different machine but being always the same on the same machine. The two machines have different number of core and thus the chunking was different even in the case where the user requested only a single core to be used on both machine. The related issue is, of course, the question of *why* the end result depends on the chunking and whether this indicates a severe flaw in the algorithm used or is 'simply' case of visible but 'normal' numerical error/uncertainty being propagated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2039#issuecomment-390711669:459,simpl,simply,459,https://root.cern,https://github.com/root-project/root/pull/2039#issuecomment-390711669,2,['simpl'],['simply']
Usability,"Not sure it is relevant but he said:. _Rearrange ""Provide your feedback""; I think github issues should go before the Forum in the list of options (if there are really two ways), because one can see closed and open issues (on the Forum I found several complaints about the links, but it's not clear whether they are open or closed without opening them)._",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7334#issuecomment-788975309:63,feedback,feedback,63,https://root.cern,https://github.com/root-project/root/pull/7334#issuecomment-788975309,4,"['clear', 'feedback']","['clear', 'feedback']"
Usability,"Note that I do not understand how we can define a canonical namespace in the context of libraries.; For example with two trivial libraries that contains solely what is described in one of those two simple headers:; ```; // header A.h for library A.so; namespace Generic {; void functionA(int) {};; }; ```; ```; // header B.h for library B.so; namespace Generic {; void functionB(int) {};; }; ```; which of those 'two' library should be loaded when 'autoloading [the] canonical namespace'. I.e. A priori autoloading namespaces is the wrong granularity and we should/can autoload things like classes, enum ... and (what we are currently missing) free standing functions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1547#issuecomment-387210735:198,simpl,simple,198,https://root.cern,https://github.com/root-project/root/pull/1547#issuecomment-387210735,2,['simpl'],['simple']
Usability,"Note that the original implementation is detailed in the documentation:; ```; /// and if not found; /// a direct try of libname will be made (in case it contained an; /// absolute path).; ```; Can you verify (by code inspection) if ```gSystem->DynamicPathName``` now return true for absolute path (even if it is not in the dynamic path)? . If so, I guess the function can indeed be simplified but the documentation needs to revise accordingly. The new code add 'GetPathInfo' and 'AccessPathName' calls to the path where DynamicPathName returned a positive answer. Can you verify that those check are not already done in DynamicPathName? (The previous implementation seemed to have assumed it was, it may still or may no longer be the case, we need to check).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2167#issuecomment-395495317:382,simpl,simplified,382,https://root.cern,https://github.com/root-project/root/pull/2167#issuecomment-395495317,2,['simpl'],['simplified']
Usability,"Note that we observed the same type of crash in some other places as well in ATLAS, which could also be handled by cleaning up the dictionaries of the affected libraries. So the error has an upside as well. (Though a simple error message from ROOT would've been more welcome. :stuck_out_tongue:). (I mainly just wrote this comment to get notifications about this issue's evolution... :wink:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7657#issuecomment-805575762:217,simpl,simple,217,https://root.cern,https://github.com/root-project/root/issues/7657#issuecomment-805575762,2,['simpl'],['simple']
Usability,Note: I plan on doing additional measurements with a CMSSW-produced file. Doing the PR now so @pcanal can start to provide advice / feedback.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/59#issuecomment-78283407:132,feedback,feedback,132,https://root.cern,https://github.com/root-project/root/pull/59#issuecomment-78283407,1,['feedback'],['feedback']
Usability,"Note: a similar issue. A given build after being left alone for a while and then updated and rebuild cease to properly autoload libPhysics based on usage of TVector3 (all of `TVector3 v;` `TVector3::Class()`, `TClass::GetClass(""TVector3"")` where failing complaining `TVector3` was not known. No amount of rebuild corrected the problem, nor was there any indication of why it would not find a properly formed library. but simply doing `rm lib/modules.idx` did :( ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7125#issuecomment-912860678:421,simpl,simply,421,https://root.cern,https://github.com/root-project/root/issues/7125#issuecomment-912860678,2,['simpl'],['simply']
Usability,Note:. Such big PR is not good because they are hard to debug in case of problem. The recent recent example with the PR testing IsBatch in TCanvas::Close prove it. It was easy to track down because it was a single simple PR. This faulty code is present in this big PR. I suggest you remove this big PR. We cannot be confident with it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6469#issuecomment-704312614:214,simpl,simple,214,https://root.cern,https://github.com/root-project/root/pull/6469#issuecomment-704312614,2,['simpl'],['simple']
Usability,"Notice that to trigger the issue is enough to have an header `bar.h`:. ```; #ifndef _STRUCT_TIMESPEC; #define _STRUCT_TIMESPEC 1. /* POSIX.1b structure for a time value. This is like a `struct timeval' but; * has nanoseconds instead of microseconds. */; struct timespec; {; int tv_sec; /* Seconds. */; int tv_nsec; /* Nanoseconds. */; };. #endif; ```. and simply include it with `#include ""bar.h""`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14272#issuecomment-1862392926:356,simpl,simply,356,https://root.cern,https://github.com/root-project/root/issues/14272#issuecomment-1862392926,2,['simpl'],['simply']
Usability,OK closing then - thanks for the feedback @mxxo and @eguiraud . @eguiraud let me know if there's some other action you'd like me to do!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8587#issuecomment-873050997:33,feedback,feedback,33,https://root.cern,https://github.com/root-project/root/pull/8587#issuecomment-873050997,2,['feedback'],['feedback']
Usability,"OK, I created an implementation of a non-blocking equivalent. I'm sure there are some bugs:. [This notebook](https://github.com/root-project/root/files/6205495/io-handler-fast.ipynb.txt) uses a thread-based trampoline to execute the various blocking waits without interrupting the kernel. The results are displayed asynchronously using the ZMQ event loop (used by the kernel), and the executing cell's context is temporarily restored to ensure results end up (visually) in the right place. Clearly this would need some more work to replace the existing contents of `JupyROOT.helpers.utils`, but I hope that it's a starting point for discussion",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7684#issuecomment-806870185:490,Clear,Clearly,490,https://root.cern,https://github.com/root-project/root/issues/7684#issuecomment-806870185,1,['Clear'],['Clearly']
Usability,"OK, I ran with XRD_LOGLEVEL=Dump, and you can see the response after. === stderr ===. saying:. Unable to process directory /alrb/.xrootd/client.plugins.d: [ERROR] OS Error: No such file or directory. Log file:. [xrootd_error_on_grid.pdf](https://github.com/root-project/root/files/5702981/xrootd_error_on_grid.pdf). The file:. root://marsedpm.in2p3.fr:1094//dpm/in2p3.fr/home/atlas/atlasdatadisk/rucio/mc16_13TeV/9c/ab/DAOD_HIGG2D1.23315577._000001.pool.root.1. of course opens correctly for a simple TOpen in any interactive ROOT session. see you, RD",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-746292691:494,simpl,simple,494,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-746292691,2,['simpl'],['simple']
Usability,"OK, I thought. > Another version of this will be reintroduced in llvm upstream. was clear enough. Thanks for the review!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8044#issuecomment-831916158:84,clear,clear,84,https://root.cern,https://github.com/root-project/root/pull/8044#issuecomment-831916158,2,['clear'],['clear']
Usability,"OK, interactively, this is what I do:. cd /afs/cern.ch/work/s/schaffer/public/work-21.xAOD.RD_devRel21_prod25_2/build; setupATLAS; lsetup ""asetup 21.2.139,AnalysisBase""; source ../build/x86_64-centos7-gcc8-opt/setup.sh; ../run (or to any directory which you can write in); runH4lAnalRun2 -i root://eosatlas.cern.ch:1094//eos/atlas/atlasdatadisk/rucio/mc16_13TeV/85/26/DAOD_HIGG2D1.21658940._000001.pool.root.1 -d mc16_13TeV.345706.Sherpa_222_NNPDF30NNLO_ggllll_130M4l.deriv.DAOD_HIGG2D1.e6213_s3126_r9364_p4191 -e 5000. -e 5000 is just to read 5k events. This is reading an input file, what we call a derived AOD, and writes out a root file with simple trees. the setupATLAS is defined by:. export ATLAS_LOCAL_ROOT_BASE=/cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase; alias setupATLAS='source ${ATLAS_LOCAL_ROOT_BASE}/user/atlasLocalSetup.sh'. But you'll need 'atlas' access, I presume. This is built with:. cmake ../source; make -jxx <as you like>. Not sure if this helps...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-757827313:646,simpl,simple,646,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-757827313,2,['simpl'],['simple']
Usability,"OK, so simply disabling the `LOG_CONFIGURE`, `LOG_BUILD`, `LOG_INSTALL` when using `CONFIGURE_COMMAND`, `BUILD_COMMNAD`, `INSTALL_COMMAND` seems to fix the issue (i.e. no `BUILD_JOB_SERVER_AWARE` involved), but then we have no log...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16733#issuecomment-2435320448:7,simpl,simply,7,https://root.cern,https://github.com/root-project/root/issues/16733#issuecomment-2435320448,2,['simpl'],['simply']
Usability,"OK, so your approach would be to get the ""obvious"" set (I cannot think of a better term) of overloads, and for now just ignore hidden friends? (ADL can be worked around on the caller side, *if* people know where to find the suitable name.). Hidden friends are very much appreciated in the standards committee, as they reduce the size of overload sets. You will then have to work around that on the cppyy side - I could imaging that to be possible, with some help from cling. Once you have identified a hidden friend overload you cannot spell it in a fully qualified way. Especially for operators we will have to switch to expression-based operator invocation (`a @ b`) rather than function-style invocation `operator@(a,b)`. As I said, that's what C++20 and later impose anyway. I will see that we implement the generic lookup you're after. I would still appreciate feedback on `op@` - I'd hate implementing something we cannot use in the end.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6393#issuecomment-697199710:866,feedback,feedback,866,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-697199710,2,['feedback'],['feedback']
Usability,"OK, thank you Manos for the answers. It is clear now",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6968#issuecomment-754547105:43,clear,clear,43,https://root.cern,https://github.com/root-project/root/pull/6968#issuecomment-754547105,2,['clear'],['clear']
Usability,"OK, thanks for the feedback",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14113#issuecomment-1891757919:19,feedback,feedback,19,https://root.cern,https://github.com/root-project/root/issues/14113#issuecomment-1891757919,2,['feedback'],['feedback']
Usability,"OK, thanks for the feedback. The certificate used to sign the binaries is the official CERN one. I'll check with IT but I doubt they will purchase any Windows approved certificate... Isn't the CERN certificate good enough for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15896#issuecomment-2213801755:19,feedback,feedback,19,https://root.cern,https://github.com/root-project/root/issues/15896#issuecomment-2213801755,2,['feedback'],['feedback']
Usability,Oh - what are the details of the job that improved? Was it simply reading & rewriting the file? Or part of a fixed workflow?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/194#issuecomment-232403882:59,simpl,simply,59,https://root.cern,https://github.com/root-project/root/pull/194#issuecomment-232403882,1,['simpl'],['simply']
Usability,"Oh I see - this was about the bug, not this PR. Well - that's a visible, existing, long-standing limitation. It won't be a blocker for 6.24 simply because I expect to not be able to fix it in time...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7687#issuecomment-809247589:140,simpl,simply,140,https://root.cern,https://github.com/root-project/root/pull/7687#issuecomment-809247589,2,['simpl'],['simply']
Usability,"Oh I was too fast: So the `BranchTypes` part of the template was simply not used? In case I undestand this correctly, is it possible to detect something like this at compile time?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5208#issuecomment-603090920:65,simpl,simply,65,https://root.cern,https://github.com/root-project/root/pull/5208#issuecomment-603090920,2,['simpl'],['simply']
Usability,"Oh. Missed GetCumulative. The thing that probably bothers me is the description of GetQuantiles or rather what is the use case of GetQuantiles with p==nullptr. When you say ""If p is null, it calculates F-1(F(bin_edges)) = bin_edges"", the bin_edges are already known (if it really calculates them inside, that is quite surprising). The really new thing (although maybe not a product, but side-effect) is the p. I understand that removing the default would break backward compatibility, so I am not advocating just removing the thing in the next release. It's just that if there is a default argument, normally it represents a frequent use case, so it brings attention while learning about a given method. Here it brings confusion (to me and to my student at least).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16784#issuecomment-2444638572:673,learn,learning,673,https://root.cern,https://github.com/root-project/root/issues/16784#issuecomment-2444638572,2,['learn'],['learning']
Usability,Ok I will.; Yesterday we made an issue to remember to check the TTree User's Guide,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7282#issuecomment-786467905:77,Guid,Guide,77,https://root.cern,https://github.com/root-project/root/issues/7282#issuecomment-786467905,1,['Guid'],['Guide']
Usability,"Ok, I did the apt install as you suggested (with the admin account) and I now get:; ```; $ qhelpgenerator; Missing input file name. Usage:. qhelpgenerator <file> [options]. -o <output-file> Generates a Qt compressed help; called <output-file> (*.qch) for the; Qt help project <file> (*.qhp).; Generates a Qt help collection; called <output-file> (*.qhc) for the; Qt help collection project <file> (*.qhcp).; If this option is not specified; a default name will be used; (*.qch for *.qhp and *.qhc for *.qhcp).; -c Checks whether all links in HTML files; point to files in this help project.; -s Suppresses status messages.; -v Displays the version of ; qhelpgenerator. ```; So I guess it is installed ... should I relaunch the ref guide build ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-1009987639:731,guid,guide,731,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-1009987639,2,['guid'],['guide']
Usability,"Ok, I found out what was wrong and fixed it, taking advantage of some suggestion I got in the upstream LLVM review. The issue was missing pointer stability due to the fact the resizing of the backend store could have incurred in copies later than previously expected. The new code uses a BumpPtrAllocator to allocate the pages of items, rather than resizing an std::vector, so it's guaranteed that the elements don't move once they have been allocated (at the cost of the allocated memory not being necessarity contiguous anymore). With such fix, I cannot reproduce the issue anymore when running standalone, with similar memory improvements when running my simple ""open ALICE AOD file"" test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13641#issuecomment-1723409634:658,simpl,simple,658,https://root.cern,https://github.com/root-project/root/pull/13641#issuecomment-1723409634,2,['simpl'],['simple']
Usability,"Ok, I found the issue why qhelpgenerator is failing, it is due to:. ```; /opt/root_src/documentation/doxygen/mainpage.md:4: warning: found subsubsection command outside of subsection context!; /opt/root_src/documentation/doxygen/mainpage.md:10: warning: found subsubsection command outside of subsection context!; /opt/root_src/documentation/doxygen/mainpage.md:18: warning: found subsubsection command outside of subsection context!; ```. If I change in `mainpage.md` to:; ```; \mainpage %ROOT Reference Documentation. # Introduction; Welcome to %ROOT!. This is the reference manual of the ROOT software tooklit.; You can find in the [reference documentation page](https://root.cern/reference/) pointers to reference manuals for all %ROOT versions. ## Other types of documentation:. - [ROOT Primer](https://root.cern/primer/).; - [ROOT Introductory Course](https://github.com/root-project/training/tree/master/BasicCourse).; - A rich set of %ROOT [tutorials and code examples](https://root.cern/doc/master/group__Tutorials.html) are offered to developers to exercise specific functionality.; - A general [Manual](https://root.cern/manual/) is provided for a more in depth explanation of concepts and functionality available in the %ROOT system.; - A number of topical [User Guides and Manuals](https://root.cern/topical/) for various components of the system. ## Provide your feedback; If you have suggestions about how to improve this documentation, you can let us know:. - With a [PR](https://github.com/root-project/root); - On the [ROOT Forum](https://root-forum.cern.ch); - On [our tracker](https://github.com/root-project/root/issues); ```; then `ROOT.qch` is correctly generated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-910397486:1275,Guid,Guides,1275,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-910397486,3,"['Guid', 'feedback']","['Guides', 'feedback']"
Usability,"Ok, I stand corrected. The fix for the issue is simple enough to go into the same PR. Commit pushed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2412#issuecomment-410034609:48,simpl,simple,48,https://root.cern,https://github.com/root-project/root/pull/2412#issuecomment-410034609,2,['simpl'],['simple']
Usability,"Ok, I tried to reproduce the situation with a simple C++ example:; ```c++; #include <iostream>; #include <string>; #include <memory>. struct A {; virtual std::string func() { return ""A""; }; };. struct B : public A {; std::string func() { return ""B""; }; std::string func(int) { return ""B""; }; };. struct C : public A {; std::string func(int=0) { return ""C""; }; };. int main() {. std::unique_ptr<A> a = std::make_unique<A>();; std::unique_ptr<A> b = std::make_unique<B>();; std::unique_ptr<A> c = std::make_unique<C>();. std::cout << a->func() << std::endl;; std::cout << b->func() << std::endl;; std::cout << c->func() << std::endl;; }; ```; Output:; ```txt; A; B; A; ```; Interesting. So if you have a method with default parameters, and the signature with the implicit defaults seems to override a base class method, it actually doesn't. So this is a bug in TProfile2D that needs to be fixed:. * https://github.com/root-project/root/pull/15693",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15688#issuecomment-2142184689:46,simpl,simple,46,https://root.cern,https://github.com/root-project/root/issues/15688#issuecomment-2142184689,2,['simpl'],['simple']
Usability,"Ok, I'll leave this to @dpiparo then. I think the changes are simple enough and can be safely merged, though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1046#issuecomment-331808979:62,simpl,simple,62,https://root.cern,https://github.com/root-project/root/pull/1046#issuecomment-331808979,2,['simpl'],['simple']
Usability,"Ok, cannot reproduce it with a simple TPaveLabel:; ```; root [0] auto p = new TPaveLabel(10.,0.,0.,10.,""test""); (TPaveLabel *) @0x7ffee68e8608; root [1] p->Draw(); Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1; root [2] ; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6344#issuecomment-692133143:31,simpl,simple,31,https://root.cern,https://github.com/root-project/root/issues/6344#issuecomment-692133143,2,['simpl'],['simple']
Usability,"Ok, got it. I commented that out and have been proceeding to test things out. I've hit an issue when trying to embed cling into my project and I've boiled it down to the simplest test case I can here: https://github.com/jeaye/cling-linkage-error-test-case. Is this expected behavior? If so, how can I have cling be able to work with all of the (mangled) symbols which are in my program? I'm trying to use cling as an embedded JIT in my own language's compiler, so the goal is to be generating code on the fly which works with the existing runtime in the compiler. I can move this to a separate ticket if that's preferred.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1192957714:170,simpl,simplest,170,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1192957714,2,['simpl'],['simplest']
Usability,"Ok, here a rather reproducible setup, without `root-config` magic. The libc++ with g++ is still failing for me. However, g++ needs an incredible 7 minutes to compile the 10k LOC version!. ```bash; $ # Environment; $ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-clang10-opt/setup.sh; $ which g++; /cvmfs/sft.cern.ch/lcg/releases/gcc/9.2.0-afc57/x86_64-centos7/bin/g++; $ which clang++; /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/bin/clang++. $ # clang++, libstdc++ vs libc++, all O0 (O1 takes too long); $ # Using 10k LOC, results are not as clear with 1k LOC; $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17; 35.35user 1.20system 0:36.88elapsed 99%CPU (0avgtext+0avgdata 1718068maxresident)k; $ /usr/bin/time clang++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -stdlib=libc++; 26.25user 0.83system 0:27.35elapsed 99%CPU (0avgtext+0avgdata 1211268maxresident)k. $ # clang++, libc++, cross-check with Axel's compiler commands (removed -fsyntax-only); $ /usr/bin/time clang++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17; 26.35user 1.15system 0:27.81elapsed 98%CPU (0avgtext+0avgdata 1202140maxresident)k. $ $ # g++, libstdc++ vs libc++, all O0, using same flags as clang++ above for the libc++ compilation; $ /usr/bin/time g++ -I$ROOTSYS/include -c compile_10k.cxx -std=c++17 -O0; 460.24user 4.10system 7:45.41elapsed 99%CPU (0avgtext+0avgdata 3733544maxresident)k; $ /usr/bin/time g++ -nostdinc++ -isystem /cvmfs/sft.cern.ch/lcg/releases/clang/10.0.0-62e61/x86_64-centos7/include/c++/v1 -I$ROOTSYS/include -c compile_10k.cxx -std=c++17; g++: internal compiler error: Segmentation fault signal terminated program cc1plus; Please submit a full bug report,; with preprocessed source if appropriate.; See <https://gcc.gnu.org/bugs/> for instructions.; 27.26user 2.31system 0:29.76elapsed 99%CPU (0avgtext+0avgdata 33810",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7604#issuecomment-804226765:592,clear,clear,592,https://root.cern,https://github.com/root-project/root/issues/7604#issuecomment-804226765,2,['clear'],['clear']
Usability,"Ok, if `libGL` already depends from `libAfterImage` - then it is fine. You may add simple gtest-based code directly for `libGL` - then it will be automatically tested on all platforms.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15812#issuecomment-2252647669:83,simpl,simple,83,https://root.cern,https://github.com/root-project/root/pull/15812#issuecomment-2252647669,2,['simpl'],['simple']
Usability,"Ok, if there's no clear way here, I will close this for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11147#issuecomment-1774992019:18,clear,clear,18,https://root.cern,https://github.com/root-project/root/pull/11147#issuecomment-1774992019,2,['clear'],['clear']
Usability,"Ok, let me know if you have other tests which you would like me to do. One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1628343236:261,simpl,simply,261,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1628343236,2,['simpl'],['simply']
Usability,"Ok, so, despite being a native speaker, I'll admit writing is not my forte. I tried to simplify what you wrote a bit, but please lmk what to change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12421#issuecomment-1458668358:87,simpl,simplify,87,https://root.cern,https://github.com/root-project/root/pull/12421#issuecomment-1458668358,2,['simpl'],['simplify']
Usability,"Ok, thank you! It is clear now",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10740#issuecomment-1153930628:21,clear,clear,21,https://root.cern,https://github.com/root-project/root/pull/10740#issuecomment-1153930628,2,['clear'],['clear']
Usability,"Ok, thanks for the explanations. I started to use ROOT near 2005, and I mostly used the User's Guide since then (sometimes consulting Class Reference). I found that there is probably no Manual in pdf (or other format for downloading), which is a pity. I'm not sure whether I shall make a separate improvement issue about that (I already made several ones). I also think that if it's decided that the User's Guide will no longer be used, its .md files should be deleted from active repository (and remain in old versions, if one really needs them). Its links should be removed from the site (and the old site should probably removed as well), and it should be stated that that User's Guide is outdated. Otherwise it would lead to confusion (among those who used the User's Guide) and desynchronization (though most API I see in the manual remains pretty the same).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7284#issuecomment-785880634:95,Guid,Guide,95,https://root.cern,https://github.com/root-project/root/issues/7284#issuecomment-785880634,4,['Guid'],['Guide']
Usability,"Ok, thanks for the reply. Maybe a note in the documentation could be added specifying that it only works if the signal has the shape of Clicked() or Pressed(), not with extra arguments ?: https://root.cern.ch/root/htmldoc/guides/users-guide/WritingGUI.html#event-processing-signals-and-slots",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7195#issuecomment-779853276:222,guid,guides,222,https://root.cern,https://github.com/root-project/root/issues/7195#issuecomment-779853276,4,['guid'],"['guide', 'guides']"
Usability,"Ok, then I still don't understand the issue. Yesterday I understood that it's *not* related to LLVM, but that ROOT's forward declaration is simply ""wrong"" for newer versions of `nlohmann/json` because it changed some template parameters...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11130#issuecomment-1216411826:140,simpl,simply,140,https://root.cern,https://github.com/root-project/root/issues/11130#issuecomment-1216411826,2,['simpl'],['simply']
Usability,"Okay, having (`---`) between the lines looks good. Now for the left-most column, naively I can simply count rows. Alternatively, I can store the length of the longest collection, say 3. And then my left column would contain [0,1,2,0,1,2,0,1,2,0...]. Which alternative would be more useful in your opinion?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9116#issuecomment-944081398:95,simpl,simply,95,https://root.cern,https://github.com/root-project/root/issues/9116#issuecomment-944081398,2,['simpl'],['simply']
Usability,"Okay, putting the ""right"" `gcc` into `$PATH` works, though I have to say this is *very* counter-intuitive...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12747#issuecomment-1532508987:96,intuit,intuitive,96,https://root.cern,https://github.com/root-project/root/issues/12747#issuecomment-1532508987,2,['intuit'],['intuitive']
Usability,"Okay. I used htmls in every possible SaveGraph ""bubble type"" (e.g. datasource/define/filter/actions for consistency). The actual reason to move to html is that in the action node, I want to use a smaller font to say that the action has run, e.g.:; ```; <BR/><FONT POINT-SIZE=\""10.0\"">Already Run</FONT>; ```. There are 2 possible solutions:. 1. Keep only the actions as an html, (so as in current master) this would give:; ![out](https://user-images.githubusercontent.com/46775299/185161238-f0dd3d47-9bc3-49ee-90c6-766b860d2a90.png). 2. Move all ""bubble types"" to plain text -- `Already Run` would appear slightly larger:; ![out2](https://user-images.githubusercontent.com/46775299/185161401-c014eb40-5423-4907-b3c0-4934e21f27c0.png). I am currently migrating to solution 2, as I think it is more consistent and still it is clear that the action has run (it is also in different color because it is run).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11173#issuecomment-1218093192:824,clear,clear,824,https://root.cern,https://github.com/root-project/root/issues/11173#issuecomment-1218093192,2,['clear'],['clear']
Usability,"Olivier, can you look over the PR? ; I tried to keep logic around `nostackb` - but it is not fully clear for me.; Changes already applied to master",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5898#issuecomment-647540602:99,clear,clear,99,https://root.cern,https://github.com/root-project/root/pull/5898#issuecomment-647540602,2,['clear'],['clear']
Usability,"On 14 Oct 2016, at 12:03, Stefan Wunsch <notifications@github.com<mailto:notifications@github.com>> wrote:. Do you understand why the PR is not marked as solved? I can't see any unmerged commits. I simply closed it by hand. Needs to be done by hand, since the merge is not done in github.; Thank you for closing it. Lorenzo. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHubhttps://github.com/root-mirror/root/pull/280#issuecomment-253759853, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AE-NdwgS8ChgjnuZXxwoOf9bUo_emT7qks5qz1OKgaJpZM4KUr3L.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/280#issuecomment-253760306:198,simpl,simply,198,https://root.cern,https://github.com/root-project/root/pull/280#issuecomment-253760306,1,['simpl'],['simply']
Usability,"On some other place IMT could be used as well:. ```diff; diff --git a/tree/dataframe/test/dataframe_vary.cxx b/tree/dataframe/test/dataframe_vary.cxx; index 92ac2c8c67..12451030af 100644; --- a/tree/dataframe/test/dataframe_vary.cxx; +++ b/tree/dataframe/test/dataframe_vary.cxx; @@ -31,7 +31,7 @@ auto SimpleVariation(); return ROOT::RVecI{-1, 2};; }; ; -TEST(RDFVary, RequireExistingColumn); +TEST_P(RDFVary, RequireExistingColumn); {; ROOT::RDataFrame df(10);; EXPECT_THROW(; @@ -45,7 +45,7 @@ TEST(RDFVary, RequireExistingColumn); std::runtime_error);; }; ; -TEST(RDFVary, VaryTwiceTheSameColumn); +TEST_P(RDFVary, VaryTwiceTheSameColumn); {; auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });; EXPECT_THROW(; @@ -75,7 +75,7 @@ TEST(RDFVary, VaryTwiceTheSameColumn); std::logic_error);; }; ; -TEST(RDFVary, RequireVariationsHaveConsistentType); +TEST_P(RDFVary, RequireVariationsHaveConsistentType); {; auto df1 = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });; // x is float, variation expression cannot return RVec<int>, must be RVec<float>; @@ -125,7 +125,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentType); // throwing exceptions from jitted code cause problems on windows and MacOS+M1; #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS); #if !(defined(R__MACOSX) && defined(__arm64__)); -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted); +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted); {; // non-jitted Define, jitted Vary with incompatible type; auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });; @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted); #endif; #endif; ; -TEST(RDFVary, RequireReturnTypeIsRVec); +TEST_P(RDFVary, RequireReturnTypeIsRVec); {; auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });; EXPECT_THROW(; @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec); std::runtime_error);; }; ; -TEST(RDFVary, RequireNVariationsIsConsistent); +TEST_P(RDFVary, RequireNVari",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10715#issuecomment-1150873429:303,Simpl,SimpleVariation,303,https://root.cern,https://github.com/root-project/root/pull/10715#issuecomment-1150873429,1,['Simpl'],['SimpleVariation']
Usability,"One of the project goals is to support setting up the workspace for likelihood fits purely from Python dictionaries, without using RooFit objects or JSON string literals. One good target for this is the creation of HistFactory models, which can be done by importing a full HS3 JSON as described here in this tutorial:; https://root.cern/doc/master/rf515__hfJSON_8py.html. With the PRs that were already merged, creating the HistFactory pdfs from dictionaries already works. But the dataset specification still must go over string literals, as shown in this simplified version of the tutorial:. ```python; # Simplified version of the HistFactory JSON IO tutorial:; # https://root.cern/doc/master/rf515__hfJSON_8py.html; # You can also find it in the tutorials/roofit folder of the ROOT repo. import ROOT. # Python dictionary specifying the model pdf; model_channel1 = {; ""axes"": [{""name"": ""obs_x_channel1"", ""max"": 2.0, ""min"": 1.0, ""nbins"": 2}],; ""samples"": [; {; ""data"": {""contents"": [20, 10]},; ""modifiers"": [; {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst1"", ""type"": ""normsys""},; {""name"": ""mu"", ""type"": ""normfactor""},; ],; ""name"": ""signal"",; },; {; ""data"": {""contents"": [100, 0], ""errors"": [5, 0]},; ""modifiers"": [; {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst2"", ""type"": ""normsys""},; {""name"": ""mcstat"", ""type"": ""staterror""},; ],; ""name"": ""background1"",; },; {; ""data"": {""contents"": [0, 100], ""errors"": [0, 10]},; ""modifiers"": [; {""data"": {""hi"": 1.05, ""lo"": 0.95}, ""name"": ""syst3"", ""type"": ""normsys""},; {""name"": ""mcstat"", ""type"": ""staterror""},; ],; ""name"": ""background2"",; },; ],; ""type"": ""histfactory_dist"",; }. # Python dictionary specifying the binned dataset; observed_channel1 = {; ""axes"": [{""name"": ""obs_x_channel1"", ""nbins"": 2, ""min"": 1, ""max"": 2}],; ""contents"": [122, 112],; ""type"": ""binned"",; }. # Creating an empty workspace; ws = ROOT.RooWorkspace(""workspace""). # Importing the HistFactory pdf from a dictionary specification already works!; ws[""model_channel1""] = model_channel1. #",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13185#issuecomment-1621628860:557,simpl,simplified,557,https://root.cern,https://github.com/root-project/root/issues/13185#issuecomment-1621628860,3,"['Simpl', 'simpl']","['Simplified', 'simplified']"
Usability,"One option is to move it to a users guide chapter.; Other option, copying relevant comment here by @guitargeek:. ```; This is still relevant. I have discussed with Lorenzo what we would have to do to close this issue:. The new users guide is the doxygen reference. The entry point to Minuit 2 is here:; https://root.cern.ch/doc/master/Minuit2Page.html. This doxygen page links to the old Minuit 2 users guide:; https://root.cern.ch/root/htmldoc/guides/minuit2/Minuit2.html. What needs to be done here is to move the old Minuit 2 guide (the source is somewhere in the ROOT repo) to the doxygen directly, and updating it by removing any information that is nowadays irrelevant (like how to build Minuit 2 with Autotools). The reason why we think that this is a meaningful update is that in Doxygen, it would generate automatically the useful links to the functions that are explained.; ```. Source is here: https://github.com/root-project/root/tree/master/documentation/minuit2",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14551#issuecomment-1948896479:36,guid,guide,36,https://root.cern,https://github.com/root-project/root/issues/14551#issuecomment-1948896479,10,['guid'],"['guide', 'guides']"
Usability,One other possibility would be to simply add a comment saying that fResolution is not used right now and could be used/implemented later.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/151#issuecomment-228779594:34,simpl,simply,34,https://root.cern,https://github.com/root-project/root/pull/151#issuecomment-228779594,1,['simpl'],['simply']
Usability,"One potential reason - huge latency for simple request of 4 bytes. Just submitting simple request:; ```; time curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-4,100-104"" --output -; ```. Gives me: `1.423 sec` total time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13018#issuecomment-1592003325:40,simpl,simple,40,https://root.cern,https://github.com/root-project/root/issues/13018#issuecomment-1592003325,4,['simpl'],['simple']
Usability,"One simple but maybe effective way to address this is the following strategy:. * if the `?` is followed exactly by `.root` or it is the last character in the string, then it's a wildcard; * Otherwise, it's a query, the most common usage is to start the beginning of a token to introduce the treename inside the file i.e. `filename?#treename` . @pcanal what do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10239#issuecomment-1958992264:4,simpl,simple,4,https://root.cern,https://github.com/root-project/root/issues/10239#issuecomment-1958992264,2,['simpl'],['simple']
Usability,"One solution for a general derivative function could be to simply pass ""Function->Derivative(x)"" in the second TF1. But there still needs to be a way to differentiate with respect to any variable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8735#issuecomment-887360425:59,simpl,simply,59,https://root.cern,https://github.com/root-project/root/issues/8735#issuecomment-887360425,2,['simpl'],['simply']
Usability,"One thing that needs to be addressed is that `ROOT::Double_v` is simply `double` when VecCore is disabled, so the way you are implementing it, the vectorized functions have the same signature as the scalar ones, therefore you get errors like this:; ```; TMath.cxx:846:37: error: call of overloaded ‘KolmogorovProb(Double_t&)’ is ambiguous; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2236#issuecomment-400722627:65,simpl,simply,65,https://root.cern,https://github.com/root-project/root/pull/2236#issuecomment-400722627,2,['simpl'],['simply']
Usability,"One trick would be to set: WARN_NO_PARAMDOC to YES in the Doxyfile, to find all undocumented params",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9673#issuecomment-1020020820:80,undo,undocumented,80,https://root.cern,https://github.com/root-project/root/pull/9673#issuecomment-1020020820,2,['undo'],['undocumented']
Usability,"One way to go about this would be to mimic the suggested usage of the TFile the TTree is attached to as per the `TTree::ChangeFile` [docs](https://root.cern/doc/master/classTTree.html#a4680b0dfd17292acc29ba9a8f33788a3) in TBufferMerger. . One of the main limitations I see is that TBufferMerger is [hardwired](https://github.com/root-project/root/blob/9822d0e2733cf802d8b2c3c7b6bc134296a171b8/io/io/src/TBufferMerger.cxx#L24-L43) to the initial TFile it is constructed with. Supposing we modify `TTree::ChangeFile` to check the tree is attached to a TBufferMergerFile, if it doesn't get deleted (like Philippe suggests in the gist comments) then we still have to find a way to change its name to not collide with the original one. If instead it still gets deleted then we have to create a new TBufferMergerFile and not a simple TFile, but we couldn't attach it to the TBufferMerger inside `TTree::ChangeFile`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6523#issuecomment-704257753:821,simpl,simple,821,https://root.cern,https://github.com/root-project/root/issues/6523#issuecomment-704257753,2,['simpl'],['simple']
Usability,Opened a new PR with simplified history [here](https://github.com/root-project/root/pull/2229). All comments have been addressed. Closing this one.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2117#issuecomment-399663992:21,simpl,simplified,21,https://root.cern,https://github.com/root-project/root/pull/2117#issuecomment-399663992,2,['simpl'],['simplified']
Usability,Opps. I still learning to to deal with PR of the mirror to be applied to the master. Thanks. I think it should be ok now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/141#issuecomment-227401007:14,learn,learning,14,https://root.cern,https://github.com/root-project/root/pull/141#issuecomment-227401007,1,['learn'],['learning']
Usability,"Our PR builds do an automatic rebase onto master. What you see is a (known...) temporary current failure in master. Should be fixed shortly, sorry about that! Please simply ignore the failure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5062#issuecomment-591456445:166,simpl,simply,166,https://root.cern,https://github.com/root-project/root/pull/5062#issuecomment-591456445,2,['simpl'],['simply']
Usability,"Ping @Axel-Naumann. Clearly I have nothing to do with these test failures, so what should I do next?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4688#issuecomment-565079915:20,Clear,Clearly,20,https://root.cern,https://github.com/root-project/root/pull/4688#issuecomment-565079915,1,['Clear'],['Clearly']
Usability,Please note that this is a double edge sword. On one hand it is simplifying the tutorials in a way that works well.; On the other hand it removes any demonstration (or did we keep at least one?) of how to use `R__LOAD_LIBRARY` that is necessary in case the library is (intentionally) not on the `LD_LIBRARY_PATH`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14684#issuecomment-1944897019:64,simpl,simplifying,64,https://root.cern,https://github.com/root-project/root/pull/14684#issuecomment-1944897019,2,['simpl'],['simplifying']
Usability,"Please see https://root.cern/doc/master/classTHistPainter.html#HP20a AXIS option is not listed for TH2Poly.; If I run your code example under ROOT 6.22/06 I get the attached figure; ![c1](https://user-images.githubusercontent.com/55505042/112357480-91467500-8c9d-11eb-9f04-4bbf630ecafe.png); As you can see, a frame is drawn around the bin. What happens in fact, and what is not seen, since the code example fills the histogram with a negative value, is that what is drawn is a scatter plot. If I extend the code as follows:; ```; TH2Poly* h2pol = new TH2Poly(""p2"",""p2"",0,4,0,4);; Double_t x[4] = {0.,0.,2.,2.};; Double_t y[4] = {0.,2.,2.,0.};; TGraph *g = new TGraph(4,x,y);; h2pol->AddBin(g);; h2pol->Fill(1.,1.,-3);. Double_t x2[4] = {1.,1.,3.,3.};; Double_t y2[4] = {2.,4.,4.,2.};; TGraph *g2 = new TGraph(4,x2,y2);; h2pol->AddBin(g2);; h2pol->Fill(2.,3.,3);; h2pol->Draw(""axis""); ```; I get the following picture which clearly demonstrates it; ![c2](https://user-images.githubusercontent.com/55505042/112357745-ceab0280-8c9d-11eb-8167-3b3b2cd603bb.png); So if I draw h2pol with ""AXIS"" option, it is simply ignored, and a scatter plot is drawn.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7673#issuecomment-806026334:924,clear,clearly,924,https://root.cern,https://github.com/root-project/root/issues/7673#issuecomment-806026334,4,"['clear', 'simpl']","['clearly', 'simply']"
Usability,"Please use https://root-forum.cern.ch to discuss issues. A GitHub bug report is most useful only once it's clear that it is indeed an issue with ROOT and that we know how to reproduce it. This here is *not* and issue with ROOT, at least it's all but obvious why it would be. The crash happens in `Fatima::ReadSensitive(G4Event const*)` or something called by it, and that's not ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11071#issuecomment-1199109958:107,clear,clear,107,https://root.cern,https://github.com/root-project/root/issues/11071#issuecomment-1199109958,2,['clear'],['clear']
Usability,"Possible reason for the problem, in Cling (also Clang) some headers are included automatically at startup to simplify the operation. In the case of CUDA, the order of the headers is really important because CUDA has to annotate the `stl` functions to be available on CPU and GPU (e.g. `int std::abs(int n)` -> `__device__ __host__ std::abs(int n))`. If the order is not correct, various things can happen (no GPU version available, redefinition errors, error messages that have nothing to do with the actual problem ...). A good starting point for bug hunting is to compare the startup process of vanilla cling and ROOT cling.; * A good starting point for Cling the is the function [`CIFactory::createCIImpl()`](https://github.com/root-project/root/blob/de3514c2a88f653584108d2be64e28f50a2b29da/interpreter/cling/lib/Interpreter/CIFactory.cpp#L1214); * In ROOT, some extra headers are injected (before?) in the [TCling](https://github.com/root-project/root/blob/a56901942dfefa6e7e2e7df397a60c9d1cda31a0/core/metacling/src/TCling.cxx#L1327) class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7518#issuecomment-808738232:109,simpl,simplify,109,https://root.cern,https://github.com/root-project/root/issues/7518#issuecomment-808738232,2,['simpl'],['simplify']
Usability,"Pretty much the same motivation of having new headers in ROOTSYS/include/ROOT. The upshot is that the third party codebase will become clearer of that `TList.h` is a ROOT thing; and more importantly we will define away a class of problems we have when installing ROOT. Right now on some systems we install everything in `/usr/include`, which is not a good practice unless one is libc.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16327#issuecomment-2320251654:135,clear,clearer,135,https://root.cern,https://github.com/root-project/root/issues/16327#issuecomment-2320251654,2,['clear'],['clearer']
Usability,"Problem here is that `Describe` defined in `tree/dataframe/inc/ROOT/RDF/RInterface.hxx` returns a string. The simplest solution is to call `print(df.Describe())` to format properly the string. ""Fixing"" the desired output would change the existing usage of `Describe()` - returned type change from string to void and printing inside of the Describe. This is what is going on:; ```python; def foo(): # returns string; return ""a\nb"". def bar(): # void; print(""a\nb""). foo() # this is our case, giving excplicitly ""a\nb""; bar() # this is good; print(foo()) # this is good; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8893#issuecomment-1006570773:110,simpl,simplest,110,https://root.cern,https://github.com/root-project/root/issues/8893#issuecomment-1006570773,2,['simpl'],['simplest']
Usability,"Rebased to fix conflicts, the last 3 commits are the only new ones. A type `RVecN` has been introduced which exposes the small buffer size as a template parameters, and `RVec` inherits publicly from it fixing the small buffer size to a reasonable value. For now all mathematical operators and helper functions still deal with `RVec`, simply switching everything to taking _and returning_ `RVecN` instead is a breaking change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-869834863:334,simpl,simply,334,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-869834863,2,['simpl'],['simply']
Usability,"Rebased to fix conflicts. Feedback from today's PPP: `#var`s should be treated like `rdfentry_` or like a function call, they should not appear in column lists and they should not be Snapshotted out if not through an alias/define.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7354#issuecomment-802137872:26,Feedback,Feedback,26,https://root.cern,https://github.com/root-project/root/pull/7354#issuecomment-802137872,1,['Feedback'],['Feedback']
Usability,"Regarding the efficiency, I don't know what's the proper way to benchmark the cumulative histogram generation. In the following simple benchmark targeting the `hpx` 1D histogram in `tutorials/hsimple.root`, the difference is not much, though `TH1::GetCumulativeIncExc` seems slightly faster. ```; [yuehshun@lxplus8s13 root-build]$ ./bin/root -l tutorials/hsimple.root; root [0]; Attaching file tutorials/hsimple.root as _file0...; (TFile *) 0x372cc00; root [1] std::chrono::time_point<std::chrono::high_resolution_clock> start = std::chrono::high_resolution_clock::now(); TH1 *hpxCumu = hpx->GetCumulative(); std::chrono::time_point<std::chrono::high_resolution_clock> stop = std::chrono::high_resolution_clock::now();; root [2] static_cast<std::chrono::duration<double>>(stop - start).count(); (double) 0.00026606600; root [3] .q; [yuehshun@lxplus8s13 root-build]$ cd ../root-build.incexc/; [yuehshun@lxplus8s13 root-build.incexc]$ ./bin/root -l tutorials/hsimple.root; root [0]; Attaching file tutorials/hsimple.root as _file0...; (TFile *) 0x3c458b0; root [1] std::chrono::time_point<std::chrono::high_resolution_clock> start = std::chrono::high_resolution_clock::now(); TH. 1 *hpxCumu = hpx->GetCumulativeIncExc(); std::chrono::time_poroot [2] static_cast<std::chrono::duration<double>>(stop - start).count(); (double) 0.00024825600; root [3] .q; [yuehshun@lxplus8s13 root-build.incexc]$ cd ../root-build; [yuehshun@lxplus8s13 root-build]$ ./bin/root -l tutorials/hsimple.root; root [0]; Attaching file tutorials/hsimple.root as _file0...; (TFile *) 0x2b9a7d0; root [1] std::chrono::time_point<std::chrono::high_resolution_clock> start = std::chrono::high_resolution_clock::now(); TH1 *hpxCumu = hpx->GetCumulative(); std::chrono::time_point<std::chrono::high_resolution_clock> stop = std::chrono::high_re; solution_clock::now();; root [2] static_cast<std::chrono::duration<double>>(stop - start).count(); (double) 0.00027867100; root [3] .q; [yuehshun@lxplus8s13 root-build]$ cd ../root-build.inc",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11949#issuecomment-1361867780:128,simpl,simple,128,https://root.cern,https://github.com/root-project/root/pull/11949#issuecomment-1361867780,2,['simpl'],['simple']
Usability,"Regarding the titular issue, I have been thinking about it for a bit and I don't think we can do much better than what @pieterdavid already implemented. Solutions considered:. 1. Implicitly converting `TClonesArrays` to `RVecs` would be a) backward-incompatible and b) a silent perf degradation, as it requires a copy. Moreover, if we did this I don't see a migration path that doesn't require that users revise all their TClonesArrays-related logic; 2. Adding a `TClonesArrays2RVec` helper function: it would require a copy (or it would have to return a clunky `RVec<T*>`). It is also trivial to implement for users that need it and don't mind the downsides.; 3. Adding a RDF toggle to tweak ""read TClonesArrays as RVecs"" or not: requires adding a bunch of extra logic to the column-reading mechanism for a feature that might end up being mostly unused (modern data models don't use TClonesArrays), and it would require the extra copy (i.e. silent performance degradation). The best seems to be 3, but feature toggles complicate internals and are typically not easy to discover (might end up mostly unused). It seems simpler to ask users to explicitly do the conversion in a `Redefine` if they need/want to. Sorry I could not come up with something nice :confused: . I will close this in a few days unless people have something against it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8644#issuecomment-883552286:1118,simpl,simpler,1118,https://root.cern,https://github.com/root-project/root/issues/8644#issuecomment-883552286,2,['simpl'],['simpler']
Usability,"Remaining points and questions arising from @hageboeck's review:. 1. https://github.com/root-project/root/pull/8700#discussion_r672508683 Should RooRealL have I/O? It is currently disabled by setting ClassDef version to 0.; 2. https://github.com/root-project/root/pull/8700#discussion_r672509759 RooFit naming convention puts underscores in front of member names. This is discouraged, since underscore prefix is reserved for C++ implementations. I introduced some new members with underscore suffix instead, which is also common practice e.g. in the Google C++ guidelines. I think this is not something we should spend too much time on now, but maybe good to keep in mind for the future.; 3. https://github.com/root-project/root/pull/8700#discussion_r672519457 The configuration parameters (GlobalObservables etc.): should we unify them or keep like this?; 4. https://github.com/root-project/root/pull/8700#discussion_r672538377 This should be checked by Wouter. In addition, some other remaining questions:; 1. `testRooRealL.getValRooAddition` fails because it doesn't know `RooFormulaVar`... I'm not sure what this means, but I vaguely remember that (I think) @hageboeck and @cburgard were talking about this, so I was hoping you may be able to help me out with fixing that test.; 2. In an ideal world I would have liked to add a serial implementation of the `LikelihoodGradientWrapper` class. Probably, we can reuse a lot of `RooGradMinimizerFcn` for this and it should be rather straightforward. However, this will take time. The advantage would be that we could add a test to this PR that covers all that is added, basically by just running a minimization. Note that I do have such a full-coverage test, but only for the MultiProcess minimization, where I implemented `LikelihoodGradientWrapper` in the parallel `LikelihoodGradientJob` class. So this test will come in ""PR 7"" (see overview). So, up for discussion, two choices: A: add (probably mostly useless except for testing this PR) ""Likelih",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8700#issuecomment-915217168:561,guid,guidelines,561,https://root.cern,https://github.com/root-project/root/pull/8700#issuecomment-915217168,2,['guid'],['guidelines']
Usability,"Result from `git-bisect` on LLVM/Clang between current `release/13.x` and `llvmorg-13-init`:; ```; git bisect start; # bad: [9d9efb1f67ff70e996b1cb7fa00e24b9121be226] [lld][CMake] Add LLD_DEFAULT_NOSTART_STOP_GC; git bisect bad 9d9efb1f67ff70e996b1cb7fa00e24b9121be226; # good: [5369517d20dd362a178a1b2d6c398d8898ee4620] Bump the trunk major version to 13; git bisect good 5369517d20dd362a178a1b2d6c398d8898ee4620; # bad: [711a473cd9e3c8e63ad3460d49fdab1545634dd2] Update testcase for D101333.; git bisect bad 711a473cd9e3c8e63ad3460d49fdab1545634dd2; # bad: [11b70b9e3a7458b5b78c30020b56e8ca563a4801] Revert ""[NPM][CGSCC] FunctionAnalysisManagerCGSCCProxy: do not clear immutable function passes""; git bisect bad 11b70b9e3a7458b5b78c30020b56e8ca563a4801; # good: [97ec8fa5bb07e3f5bf25ddcb216b545cd3d03b65] [Coverage] Store compilation dir separately in coverage mapping; git bisect good 97ec8fa5bb07e3f5bf25ddcb216b545cd3d03b65; # bad: [4096ae06f47af9db2c2550a2c34979edfbd91b8d] [lldb] Support DWARF-5 DW_FORM_line_strp (used by GCC); git bisect bad 4096ae06f47af9db2c2550a2c34979edfbd91b8d; # bad: [d65ddca83ff85c7345fe9a0f5a15750f01e38420] [ValueTracking] ComputeKnownBits - minimum leading/trailing zero bits in LSHR/SHL (PR44526); git bisect bad d65ddca83ff85c7345fe9a0f5a15750f01e38420; # good: [15a74b64dfa9bc1213cd582415f849b4dba51bad] [VPlan] Manage pairs of incoming (VPValue, VPBB) in VPWidenPHIRecipe.; git bisect good 15a74b64dfa9bc1213cd582415f849b4dba51bad; # good: [dd68f3cf2899c554cab7baf3ccdcd3f987d77736] [RISCV] Support insertion of misaligned subvectors; git bisect good dd68f3cf2899c554cab7baf3ccdcd3f987d77736; # good: [97a304cc8f949e40693d63b855b4b24bc81fa729] [scan-build-py] Add sarif-html support in scan-build-py; git bisect good 97a304cc8f949e40693d63b855b4b24bc81fa729; # bad: [0f279c7a5c34eaae797c325c18614def21eba921] Revert ""patch"" it wass my mistake inusing git; git bisect bad 0f279c7a5c34eaae797c325c18614def21eba921; # bad: [56d228a14e3631de157ae98dd61d21193e4502d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9547#issuecomment-1011201311:665,clear,clear,665,https://root.cern,https://github.com/root-project/root/issues/9547#issuecomment-1011201311,2,['clear'],['clear']
Usability,Revised and simplified in #1305 .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1227#issuecomment-343250194:12,simpl,simplified,12,https://root.cern,https://github.com/root-project/root/pull/1227#issuecomment-343250194,2,['simpl'],['simplified']
Usability,"Right - @smuzaffar was quite clear that we should separate build failures from test failures. But we now fail for build failures, too, so maybe including test failures in the failed state makes sense? Anyway, just pinging @smuzaffar for his recommendation + arguments before we decide what to do here!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12307#issuecomment-1542423864:29,clear,clear,29,https://root.cern,https://github.com/root-project/root/issues/12307#issuecomment-1542423864,2,['clear'],['clear']
Usability,"Right, I am making this request on behalf of ATLAS, who are writing this type of data member as part of the Event Header structure (in the GUIDs to be exact) which means it is in every data format ever produced (except maybe end-user flat ntuple files). And we have a single global EDM for everything, so changing the Header definition would create a schema difference between the new class and the old one in files. I am a bit afraid to go in that direction, it may create a mess. ; I will still check if some clever ROOT schema evolution may help here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11732#issuecomment-1318679697:139,GUID,GUIDs,139,https://root.cern,https://github.com/root-project/root/issues/11732#issuecomment-1318679697,1,['GUID'],['GUIDs']
Usability,"Right, clear now. Thanks! This can be closed",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10640#issuecomment-1137195752:7,clear,clear,7,https://root.cern,https://github.com/root-project/root/issues/10640#issuecomment-1137195752,2,['clear'],['clear']
Usability,"Right, good point, the name of the tree (or let's call it dataset) is useful!. Personally I find the markdown syntax too heavy. But if we find a majority for it, I'm happy to implement it ;). Edit: There's the problem for the dataset name that it's not given for all data sources and we would have to make a difference between TTree datasource and for example the simple one with the `RDataFrame(N)` constructor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7561#issuecomment-809409719:364,simpl,simple,364,https://root.cern,https://github.com/root-project/root/issues/7561#issuecomment-809409719,2,['simpl'],['simple']
Usability,"Right, of course the tests are correctly failing now where they still use `Offset` for the `NewStyle` likelihoods :). We should probably do two things to finish this PR:; 1. Add a test somewhere (I guess `testLikelihoodGradientJob.cxx` is as good a place as any) that fails when creating a likelihood with the two arguments together. The test can simply check whether the output of `createNLL` is `0`.; 2. Remove `Offset` from the `NewStyle` likelihood creation lines. _Side note:_ I think it would be much better if [`createNLL` just throws here](https://github.com/root-project/root/blob/master/roofit/roofitcore/src/RooAbsPdf.cxx#L1032) instead of returning zero and causing segfaults along the way. But this is probably an issue for a different PR. Would probably be good to run by Wouter to make sure there are no valid usecases of returning a `nullptr`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11650#issuecomment-1330379864:347,simpl,simply,347,https://root.cern,https://github.com/root-project/root/pull/11650#issuecomment-1330379864,2,['simpl'],['simply']
Usability,"Right, so this means this PR is adding a new method that allows to address the cases such as the one reported by the linked issue, but it's not a drop-in replacement, the user needs to actively know that the new method exists and use it. All clear now, thanks for the explanation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14671#issuecomment-1957093709:242,clear,clear,242,https://root.cern,https://github.com/root-project/root/pull/14671#issuecomment-1957093709,2,['clear'],['clear']
Usability,"RooFormula was overhauled, which seems to be the only place where regexes show up in diffs. I think there's two simple things we can do to trace it down in a second:; - You attach a debugger and set a breakpoint on exception throw.; - You post an example that the root team can run. In the end, it can probably be solved by escaping the relevant characters in the name of an object.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7115#issuecomment-777299090:112,simpl,simple,112,https://root.cern,https://github.com/root-project/root/issues/7115#issuecomment-777299090,2,['simpl'],['simple']
Usability,"ST printing, remove it, or keep it ""rotten"" as you put it? We have significant coverage of it, and we can witness that it's doing a good job. I have two answers (sorry!). My preference is for someone to step up and maintain it because, as you point out, it can perform useful work that people are already using today and so it should be actively maintained. However, I don't have the time to commit to it myself, and code reviewers have never traditionally required patch authors to spend much effort on -ast-print support, so this maintenance isn't likely to happen without someone dedicating effort to it. If nobody steps up to maintain it, my personal preference would be to remove the feature, but it'd definitely require a community RFC to do so -- that gives everyone an opportunity to speak up about why it's critical to keep it (and hopefully drums up a volunteer to maintain it with more regularity). It's not at all clear to me how the community would react to such an RFC, and it's also not clear to me whether we'd need to do OTHER work to prep for removing the functionality (e.g., if ObjC modernization rewriting relies on -ast-print being ""good enough"", we might want to also rip out ObjC moderanization rewriting at the same time, which is another RFC, and so on). FWIW, I'd be happy to be a reviewer for any reviews maintaining or improving `-ast-print` behavior in community (not trying to apply pressure!). > We'd be happy to keep this change minimal, e.g. escape only what needs to be escaped rather than going all in on showing the original spelling of the source code. I think for something that minimal, the cost / benefit ration would be about right. That's just my opinion; your opinion is what counts here!. In terms of the changes you need to make to keep -ast-print working for you, I guess I see two ways of going about it. You can either do just the `CreateImplicit()` modifications so that you can do special handling of raw string literals. That'd be the smallest chan",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10830#issuecomment-1171474521:1208,clear,clear,1208,https://root.cern,https://github.com/root-project/root/pull/10830#issuecomment-1171474521,4,['clear'],['clear']
Usability,See explanation about the User's Guide here: https://github.com/root-project/root/issues/7284,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7279#issuecomment-785885584:33,Guid,Guide,33,https://root.cern,https://github.com/root-project/root/issues/7279#issuecomment-785885584,1,['Guid'],['Guide']
Usability,"See the linked PR for a hack to fix the issue. Looking at the issue in a debug build, I could find out that cppyy is the culprit. The issue is that if you import ROOT in another process (and the import happens in a previously pickled function), then cppyy is not there and some random INCREF on the cppyy module segfaults because of accessing a nullptr. It's to be discussed how to fix this properly since the implicit contracts done by pickle are not clear to me.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6765#issuecomment-730306449:452,clear,clear,452,https://root.cern,https://github.com/root-project/root/issues/6765#issuecomment-730306449,2,['clear'],['clear']
Usability,"Seems to be, simple `// NOLINT` should do the job",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7412#issuecomment-794193604:13,simpl,simple,13,https://root.cern,https://github.com/root-project/root/issues/7412#issuecomment-794193604,2,['simpl'],['simple']
Usability,"Sergey, I have refactored GL.controller.js to have separate viewer classes for JSRoot and THREE (and for RenderCore). The changes here are completely incompatible. Can you please undo the GL.controller changes and then we put them back into the JSRoot painter after the refactoring is merged?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4966#issuecomment-584792756:179,undo,undo,179,https://root.cern,https://github.com/root-project/root/pull/4966#issuecomment-584792756,2,['undo'],['undo']
Usability,"Sergey, all good questions, thank you :). > 1. Do we need to include all these fonts into ROOT repository? Font files are big and used only via random generator in tutorial. No, we can remove most of them, rebase and force-push to the branch. > 2. How to deal with other fonts? Maybe one can include one default font in `ui5/eve7/` folder, one or two fonts as examples in tutorials and provide recipe where other fonts can be found?. Yes, we could do that. Font textures and metrics files are generated from TTF via https://github.com/osschar/sdf_atlas. It's a small tool, easy to build on linux -- so we could provide instructions for this and also a catalog/web-site with a bunch of pre-generated fonts. > 3. If I understand correct, `REveText` rendering will be only supported with RenderCore? That about three.js? Beside fonts support it is easy to implement text rendering there. Yes, I know ... they have a monster implementation(s) of fonts. Seeing that I went looking for something super simple and still good looking :). Now, this is a bit unfortunate ... but I don't think I have the bandwidth to keep Three fully supported. Also, the low-level, renderer- and shader-level support we are getting from RenderCore (in particular, for picking & rendering of instanced objects and the upcoming spline-based line rendering) is making it possible to support features and performance optimizations that I do not think would be doable in Three with the time budget we all have and the level of changes we can do in core Three (zero, unless we can hack over it locally). > 4. Is it possible to support other font formats - like TTF or OTF? ROOT already includes such fonts, is it an option?. This would be nice, sdf_atlas could be incorporated into root (it requires minimal GL support which we already have) -- and one could then generate the missing SDF fonts during the startup of a demo/application. License is free to use in whatever way, just keep the copyright notice. But it only supports TTF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15812#issuecomment-2161600927:996,simpl,simple,996,https://root.cern,https://github.com/root-project/root/pull/15812#issuecomment-2161600927,2,['simpl'],['simple']
Usability,"Should be cleared up. Using `depends_on :xcode if MacOS.version <= :catalina`, this gets the right paths and works. Will close here, and hopefully the PR will be merged soon in homebrew.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7881#issuecomment-900729941:10,clear,cleared,10,https://root.cern,https://github.com/root-project/root/issues/7881#issuecomment-900729941,2,['clear'],['cleared']
Usability,"Should be something as simple as:. ```; git clone our/llvm/fork; git clone cling; git checkout cling-latest; cmake -DLLVM_ENABLE_PROJECTS=clang -DCMAKE_BUILD_TYPE=Debug -DLLVM_TARGETS_TO_BUILD=""host;nvptx"" -DLLVM_EXTERNAL_PROJECTS=""cling"" -DLLVM_EXTERNAL_CLING_SOURCE_DIR=/path/to/where/we/cloned/cling ../llvm; make check-cling; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14972#issuecomment-1998169426:23,simpl,simple,23,https://root.cern,https://github.com/root-project/root/issues/14972#issuecomment-1998169426,2,['simpl'],['simple']
Usability,Should we also update: User's guide: documentation/users-guide/Trees.md ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6600#issuecomment-712221990:30,guid,guide,30,https://root.cern,https://github.com/root-project/root/pull/6600#issuecomment-712221990,4,['guid'],['guide']
Usability,"Simple repo:; ```C++; void repo() {; int i = 10000;; TTree t(""t"", ""title"");; t.Branch(""b"", &i, ""i/I"");; for (int e = 0; e < 50000000; ++e) {; t.Fill();; }; t.Draw(""b.i"");; std::cout << ((TH1*)gDirectory->FindObject(""htemp""))->GetMaximum() << '\n';; }; ```; Prints `1.67772e+07` and really shouldn't.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6671#issuecomment-791285746:0,Simpl,Simple,0,https://root.cern,https://github.com/root-project/root/issues/6671#issuecomment-791285746,1,['Simpl'],['Simple']
Usability,"Simpler reproducer:; ```; {; gStyle->SetOptStat(0);; gStyle->SetOptTitle(0);. auto C = new TCanvas();; C->Divide(2,1);. auto h15 = new TH1F(""h15"",""h15"", 3, 10, 15);; auto h25 = new TH1F(""h25"",""h25"", 5, 0, 25);. h15->Fill(11,.5);; h15->Fill(12,1.);; h15->Fill(14,.5);; h15->SetLineWidth(3);. h25->Fill(1,1);; h25->Fill(6,2);; h25->Fill(11,3);; h25->Fill(16,2);; h25->Fill(23,1);; h25->SetLineColor(2);; h25->SetLineWidth(3);; h25->SetMinimum(.05);. C->cd(1);; h25->Draw(""hist"");; h15->Draw(""hist same"");; gPad->SetLogy(1);; gPad->SetGridx(1);; gPad->SetGridy(1);. C->cd(2);; h25->Draw(""hist"");; h15->Draw(""hist same"");; gPad->SetGridx(1);; gPad->SetGridy(1);; }; ```; <img width=""673"" alt=""Screenshot 2023-03-07 at 16 52 02"" src=""https://user-images.githubusercontent.com/4697738/223475015-4d72384f-e7d0-4d1c-8428-c3addbcd7973.png"">",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12394#issuecomment-1458405064:0,Simpl,Simpler,0,https://root.cern,https://github.com/root-project/root/issues/12394#issuecomment-1458405064,1,['Simpl'],['Simpler']
Usability,Simply include `...fwd.h` in the `...h` header and you're guaranteed that they typedefs are consistent.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8224#issuecomment-865010365:0,Simpl,Simply,0,https://root.cern,https://github.com/root-project/root/pull/8224#issuecomment-865010365,1,['Simpl'],['Simply']
Usability,"Since the errors are true and valid, shouldn't we keep them? Or make them more clear as in `you are trying to access a system-protected file"" or something similar?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14865#issuecomment-1973061065:79,clear,clear,79,https://root.cern,https://github.com/root-project/root/pull/14865#issuecomment-1973061065,2,['clear'],['clear']
Usability,"Small update to give further context, the following seemingly similar but subtly different snippet works also for ROOT 6.32. ```python; import ROOT. def main():; ROOT.gInterpreter.ProcessLine(""const auto myvec = TVectorT<float>();""); print(ROOT.myvec). if __name__ == ""__main__"":; raise SystemExit(main()); ```. And it is clear that in this case ProcessLine tries much harder than Declare to automatically load libraries that might be necessary to evaluate the line. Also, the reproducer from the issue description fails with the same error in ROOT latest master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16601#issuecomment-2393259545:322,clear,clear,322,https://root.cern,https://github.com/root-project/root/issues/16601#issuecomment-2393259545,2,['clear'],['clear']
Usability,"So @jblomer naively asked ""what about ZLIB"", and it turns out to be equally wrong... I also added a test that at least catches the compression side of things. For the decompression, it's a bit harder because it's not clear how to check if the library read more bytes than it should have (without it running into errors because of decompression errors).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14523#issuecomment-1923740442:217,clear,clear,217,https://root.cern,https://github.com/root-project/root/pull/14523#issuecomment-1923740442,2,['clear'],['clear']
Usability,"So I finally managed to get back to this and try a few things and as a result in my tests I managed to go from 82 MB of overhead to 62 MB. See https://github.com/root-project/root/pull/13641 for the actual code. While there is still a few things to cleanup, I think what I have is fairly general and quite self contained change, so I would appreciate feedback and if people like it, instructions on how to proceed to make sure this ends up upstream. The solution is based on a newly introduced `PagedVector<T>` which allows registering callbacks which get invoked whenever the associated range is accessed the first time. At such point, the range is actually allocated and each element of the range is passed to the callback. Initially I developed a mechanism to be general enough to do complex initialisations of the elements, however I later realised this is not actually needed. In order to optimise the issue with the large vectors `TypesLoaded` and `DeclsLoaded` one only needs to have something which does the default construction of their elements for ranges which are small enough to avoid to large upfront allocations. The code which is currently there in root / clang is already smart enough to lazily initialise only the elements which are actually needed, so the whole issue is to find a good tradeoff between number of ranges and sparse enough ones. A few caveats:. - `PagedVector` is a bad name, I agree. Suggestions are welcome.; - At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test.; - In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc.; - There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. Comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1715921216:351,feedback,feedback,351,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1715921216,2,['feedback'],['feedback']
Usability,"So I produced the documentation locally, and compressed that (gz took less than 5 minutes, while xz around 20 minutes). File sizes are different:. > 701M rootdoc.tar.gz; 458M rootdoc.tar.xz. so the latter is 240Mb (35\%) less than the former. It seems that .xz is worthy to be offered for download. I'm pretty sure that is present in most recent distributions (it was in Fedora already several years ago when I used that). If we talk about usability, bandwidth is an important parameter too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7295#issuecomment-787148271:440,usab,usability,440,https://root.cern,https://github.com/root-project/root/issues/7295#issuecomment-787148271,2,['usab'],['usability']
Usability,So commenting that line cures the problem with your initial macro . Now I need to understand why that line was put there and why it changes the axis attributes of your histogram ! ... I invite @osschar to this discussion as he is the author of this code (https://github.com/root-project/root/blob/master/graf3d/gl/src/TGLAxisPainter.cxx#L574) . I am temped to simply comment the line but that's weird as fAxis is [a member of TGLAxisPainterBox](https://github.com/root-project/root/blob/aa21d63ca3a1f4cdb2b559e4cb1c2c2d7eb65f34/graf3d/gl/inc/TGLAxisPainter.h#L145) and that should not affect the axis of your TH2F ... That's a real puzzle ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8618#issuecomment-875425406:360,simpl,simply,360,https://root.cern,https://github.com/root-project/root/issues/8618#issuecomment-875425406,2,['simpl'],['simply']
Usability,"So indeed this other test does not work; ```python; import ROOT. ROOT.gInterpreter.Declare(r'''; struct A{; int mA{42};; A() {}; A(const A&) = delete;; template<typename T = int>; A(A &&) {}; };; int foo(A a = A{}) { return a.mA; }; '''). print(ROOT.foo()); ```; ```; input_line_36:18:45: error: call to deleted constructor of 'A'; new (ret) (int) (((int (&)(A))foo)(*(A*)args[0]));; ^~~~~~~~~~~~; input_line_35:5:5: note: 'A' has been explicitly marked deleted here; A(const A&) = delete;; ^; ```. Also, it seems to me that indeed in the case of a templated move constructor, the AST generated by clang simply does not report it in the class definition data, see [this example](https://godbolt.org/#z:OYLghAFBqd5QCxAYwPYBMCmBRdBLAF1QCcAaPECAMzwBtMA7AQwFtMQByARg9KtQYEAysib0QXACx8BBAKoBnTAAUAHpwAMvAFYTStJg1DIApACYAQuYukl9ZATwDKjdAGFUtAK4sGIAMykrgAyeAyYAHI%2BAEaYxCAA7KQADqgKhE4MHt6%2BASlpGQKh4VEssfFJdpgOmUIETMQE2T5%2BgVU1AnUNBMWRMXGJtvWNzbltwz1hfWUDCQCUtqhexMjsHAoExF4OANQAgiYJVhp7O2c7YQQ7LAdHkmaHACIm/sen53sQczuHVgnPJ3O%2BwgaAYG325gAbN8Xo8dlh6ARMC83kCkSxkgYkS83AQAJ7JRisTA7AAqP38cMuL2wJkBHwgpyhUJhRyedNuz1eHMuO34qEZOyYFLhtz%2Bj1ZFh2xEwBGWDCFADobiifv8ORwFrROABWXh%2BDhaUioThuazWHYKJYrEnmfw8UgETSahYAaxAZh1%2Bk4kn1zuNnF4ChAGkdzoWcFgSDQGLocXIlBjyTj8WQBiMXEhGiYCiUjT4dCRxGDEGi/uiYQaeM4DorzGIeIA8tFtNUndxeDG2IJGwxaNXDbwsNEvMA3GJaMGO6QsCxDMBxIOZ3gZTUAG6YKdGzCqapeJE13iXTDape0PDRYhVjxYf2bPAsQ8LKgGYAKABqeEwAHdG4SDQ6/CCCIYjsFIMiCIoKjqEuuhcPo84oOalj6BewaQAsqDJI4AhTrwqAbsQxB4Fg6FfLYJ5tpkLgMO4ngtBIZhBLRvSlOUICQvk6Q4Vk9G5FwTGpNxmSsf08Sce0PFdCMfF%2BAJFH2FJEyiTM4lDN0oxyUxGzdCp7HQosyyrBIWq6n6S4mhwOyqAAHJCAC0kKSDsabzjsmaKhonk7BAOZ5jxCjfBAuCECQPxmPacy8O2WhzG6HpeqevqkAaRqWUGIZhoOEYwIgIBLAQyT7gmIKoLG9DEBExKcLZDlOTswDIMg7n%2BIqZi8Jg%2BBEMR6B6EBwiiOI4H9VBaj%2BnBpDfleyRPt6HB6il/qWY2%2B5FVcqBUNZdmOc5rlGO5kKed5vm5nEAVBR45VxOFkXReG8VcIqCTPTqZhmAAnP4OrPe9NmZpxSXmWlga2JlMWaqQkZ5TmBAlUmKZVWwNXbfVe3AAdR0aD5flnZkgUdV1JAkX1sggUN0gjUoY2wXoknURAriaSAkihiEUxsQMX1cYUvE5H4LPczxemc16dOdBMTMC2LDDSZMJRiQEosS7JzOhjpjTC/EX0LJsm",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14426#issuecomment-1917903939:604,simpl,simply,604,https://root.cern,https://github.com/root-project/root/pull/14426#issuecomment-1917903939,2,['simpl'],['simply']
Usability,"So this problem has been known for 5 years :( https://github.com/root-project/root/pull/4320 but we manage to indeed lose track of it. That PR used the following more concise pattern:; ```; TView() {} // NOLINT: not allowed to use = default because of TObject::kIsOnHeap detection, see ROOT-10300; ```; where both the `NOLINT` is indeed useful to avoid spurious tool recommendation and the wording was clear but should probably be updated (`ROOT-10300` is a ticket number in the JIRA instance which is now read-only). It would be good to add some wording in the `TObject` documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15469#issuecomment-2150303383:402,clear,clear,402,https://root.cern,https://github.com/root-project/root/pull/15469#issuecomment-2150303383,2,['clear'],['clear']
Usability,"So what you need is `GENERATE_QHP` enabled in Doxyfile while generating the reference guide , right ? Have you tried it ? does the result doxygen produces is what you need ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-901257232:86,guid,guide,86,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-901257232,2,['guid'],['guide']
Usability,Solution: don't run PR builds while I reboot root.cern! I.e.: sorry! :-(. But shouldn't we wait until the PR builds are green? Simply restarting should help. Let me know!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3218#issuecomment-451901816:127,Simpl,Simply,127,https://root.cern,https://github.com/root-project/root/pull/3218#issuecomment-451901816,1,['Simpl'],['Simply']
Usability,"Some debug symbols seem to be missing so we don't have line number information, but this log is already enough to confirm my hypothesis above: 2.9 GB come from std::vector allocations performed by `RDF::FillHelper::Exec<ROOT::VecOps::RVec<float>, 0>`. The simplest workaround is to specify a binning for the histograms. I am not sure whether this is a common enough problem to warrant a fix in RDF if the fix involves thread synchronization or other potential performance pessimizations. Alternatively, if we can come up with a mutex-free algorithm to automatically select binnings that are compatible among threads that might be the best option -- some related discussion on this topic is [here](https://sft.its.cern.ch/jira/browse/ROOT-8883). Moving this to priority ""default"" since there is a workaround. EDIT: another workaround is to run on fewer events, which might be reasonable since this kind of usecase is typically part of an exploratory phase of the analysis.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6676#issuecomment-716447711:256,simpl,simplest,256,https://root.cern,https://github.com/root-project/root/issues/6676#issuecomment-716447711,2,['simpl'],['simplest']
Usability,"Some further debugging (but really just dumping notes from some experiments):; * The problem of `histhistdrawv7testUnit` can be simplified, in some approximation, to:; ```; root [0] TClass::GetClass(""ROOT::Experimental::RHist<1, double, ROOT::Experimental::RHistStatContent, ROOT::Experimental::RHistStatUncertainty>""); root.exe: /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/Decl.cpp:4120: unsigned int clang::FunctionDecl::getODRHash() const: Assertion `hasODRHash()' failed.; ```; * Even simpler, just trying to create an object of that template instantiation fails:; ```; root [0] ROOT::Experimental::RHist<1, double, ROOT::Experimental::RHistStatContent, ROOT::Experimental::RHistStatUncertainty> h;; root.exe: /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/Decl.cpp:4120: unsigned int clang::FunctionDecl::getODRHash() const: Assertion `hasODRHash()' failed.; ```; * Funnily enough, the `using RH1D = RHist<1, double, RHistStatContent, RHistStatUncertainty>` works just fine; same if I remove the second `STAT` template and only leave `RHistStatContent`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12062#issuecomment-1419006181:128,simpl,simplified,128,https://root.cern,https://github.com/root-project/root/pull/12062#issuecomment-1419006181,4,['simpl'],"['simpler', 'simplified']"
Usability,"Some measurements from `ntpl-perf01`; `ttreeTBufferMerger` is a simple program that writes 20000000 entries (2 branches) with each thread. The first timing is with `master`, then the first commit from this PR, and finally the second commit (removing the queue):; <details>; <summary>full data</summary>. ```; ntpl-perf01:/data/ssdext4/jonas/20231113; ttreeTBufferMerger 20000000 16; User time (seconds): 406.16; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:30.30; Maximum resident set size (kbytes): 3392068. ttreeTBufferMerger 20000000 16; User time (seconds): 404.52; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:30.24; Maximum resident set size (kbytes): 3631212. ttreeTBufferMerger 20000000 16; User time (seconds): 407.27; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:29.89; Maximum resident set size (kbytes): 2579396. ttreeTBufferMerger 20000000 128; User time (seconds): 6726.12; Elapsed (wall clock) time (h:mm:ss or m:ss): 2:11.26; Maximum resident set size (kbytes): 90232780. ttreeTBufferMerger 20000000 128; User time (seconds): 4558.00; Elapsed (wall clock) time (h:mm:ss or m:ss): 1:50.53; Maximum resident set size (kbytes): 34501092. ttreeTBufferMerger 20000000 128; User time (seconds): 4089.10; Elapsed (wall clock) time (h:mm:ss or m:ss): 1:40.39; Maximum resident set size (kbytes): 19870924. ntpl-perf01:/data/hddext4/jonas/20231113; ttreeTBufferMerger 20000000 16; User time (seconds): 406.02; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:59.20; Maximum resident set size (kbytes): 3479780. ttreeTBufferMerger 20000000 16; User time (seconds): 405.00; Elapsed (wall clock) time (h:mm:ss or m:ss): 1:00.22; Maximum resident set size (kbytes): 4285016. ttreeTBufferMerger 20000000 16; User time (seconds): 406.67; Elapsed (wall clock) time (h:mm:ss or m:ss): 1:00.26; Maximum resident set size (kbytes): 2565488. ttreeTBufferMerger 20000000 128; User time (seconds): 6967.42; Elapsed (wall clock) time (h:mm:ss or m:ss): 4:35.79; Maximum resident set size (kbytes): 892528",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14034#issuecomment-1808248792:64,simpl,simple,64,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1808248792,2,['simpl'],['simple']
Usability,"Some other fields try to get this right, for example `RRecordField`. We should investigate if we can make `std::vector<char>` allocate over-aligned memory areas. The other option is to forbid over-aligned types (and possibly simplify some other code).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16757#issuecomment-2440928601:225,simpl,simplify,225,https://root.cern,https://github.com/root-project/root/issues/16757#issuecomment-2440928601,2,['simpl'],['simplify']
Usability,Some time ago we adjust cmake files so that when building ROOT libraries we using headers from source directories and not headers from `$ROOTSYS/include`. This makes dependencies between ROOT components more clear. I just checked $ROOTSYS/include - there are 1476 files. And going this way we will double number of files.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16327#issuecomment-2346961309:208,clear,clear,208,https://root.cern,https://github.com/root-project/root/issues/16327#issuecomment-2346961309,2,['clear'],['clear']
Usability,"Something went wrong, it looks like you merged the master branch into your feature branch. We need to have one (or more) commit of yours on top of the master branch, like this:. ![image](https://user-images.githubusercontent.com/10999034/150794127-6b77d3bf-9a8d-4d8e-b697-134e1c51c426.png). Instead the current situation is:. ![image](https://user-images.githubusercontent.com/10999034/150794245-1d6abf5e-2011-43fa-b598-8bb4a55c4f35.png). Usually I use `git rebase --interactive` from the command line to fix these kind of issues, see e.g. https://www.sitepoint.com/git-interactive-rebase-guide/ . To display the state of the repository I use a custom git log command that basically runs `git log --graph --decorate --oneline --abbrev-commit`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9650#issuecomment-1020120699:589,guid,guide,589,https://root.cern,https://github.com/root-project/root/pull/9650#issuecomment-1020120699,2,['guid'],['guide']
Usability,"Sorry Olivier, I missed your reply. The loop was just to see if the offset of 4 pixels appeared always, or only if the canvas was big enough. Or also to see if the offset was proportional to canvas size or not. I am not creating PNGs in the snippet above, but rather looking at the graphics are size without borders, which is what the PNG should become later. I took the logic out of the ROOT documentation:. ```; To define precisely the graphics area size of a canvas in the interactive mode, the following four lines of code should be used:; {; Double_t w = 600;; Double_t h = 600;; auto c = new TCanvas(""c"", ""c"", w, h);; c->SetWindowSize(w + (w - c->GetWw()), h + (h - c->GetWh()));; }. and in the batch mode simply do:; c->SetCanvasSize(w,h);; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11004#issuecomment-1618360139:712,simpl,simply,712,https://root.cern,https://github.com/root-project/root/issues/11004#issuecomment-1618360139,2,['simpl'],['simply']
Usability,Sorry for my ignorance but this .qch file contains what ? I guess it cannot be the whole reference guide ? that would be a huge file ... Is it references to the guide on the web ? in that case I do not understand your statement in your first post when you said: _which is also great if you don't have internet connection_,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-901747042:99,guid,guide,99,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-901747042,4,['guid'],['guide']
Usability,"Sorry for my late reply. Thank you very much for your answer. . I think using TArayD is an improvement than using double pointers, but I don't see any reason why not using a more standard std::vector. ; I understand also for the interface your preference for an API similar to the current TGraphAsymmError. Thank you for explaining the meaning of SetDimensionEY, I think the name is not super clear, I would maybe just call it SetEY. ; One comment on the passed array, I think the pointers should be passed as cont , since they will not be modified. . One other comment I have , I will not have a method to Set the error dimension. I think it will be better instead a AddError method that will increment by one the dimension and add all the point errors. This I think it will be more useful",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3452#issuecomment-558161625:393,clear,clear,393,https://root.cern,https://github.com/root-project/root/pull/3452#issuecomment-558161625,2,['clear'],['clear']
Usability,Sorry for this late comment. I had some other urgent matters to deal with.; My general comment is that the line width is not part of of the marker attributes. Seems to me markers attributes should remain simple. Some markers are also filled polygon. Would you like to apply the fill style to them ? I guess not. I guess the best way to implement what you need is to define new marker types. We are not limited in number. If you want a star with bigger line width we can ad a new marker type. Any way the useful line width is limited and surely smaller than 10.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4721#issuecomment-573575527:204,simpl,simple,204,https://root.cern,https://github.com/root-project/root/pull/4721#issuecomment-573575527,2,['simpl'],['simple']
Usability,"Sorry guys I've been on holidays :-) good to see that this is solved :-). > ""You"" was Axel and Philippe + whoever is doing TXNetNG these days :); > Michal (main developer of XrdCl) and I assumed the crash happens because libXrdCl was already unloaded, see xrootd issue: [xrootd/xrootd#1487](https://github.com/xrootd/xrootd/issues/1487); > ; > Now, you say the library is still loaded ... then it's probably more likely that destruction ob XrdCl global objects has already happened or was in progress (I just learned c++ is rather relaxed about how this is allowed to happen).; > ; > @simonmichal ... what do you think?. we use a nifty counter to protect against static-destruction-order-fiasco so in principle if the `libXrdCl` has not been unloaded it should not crash",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8767#issuecomment-895029183:509,learn,learned,509,https://root.cern,https://github.com/root-project/root/issues/8767#issuecomment-895029183,2,['learn'],['learned']
Usability,Sorry to hear that. It would still be great to learn possible workaround to make my project step forward.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9240#issuecomment-964801950:47,learn,learn,47,https://root.cern,https://github.com/root-project/root/issues/9240#issuecomment-964801950,2,['learn'],['learn']
Usability,"Sorry too much info, too little bandwidth :sweat_smile: If I understand correctly:. - the `is_equal` redefinition is a real issue but unrelated to RVec 2.0 (thanks @wlav for pointing that out) and now tracked by #7678 ; - you have a patch that works around the cppyy bug with `operator[]`; - iteration is broken because `RVec::begin` returns a raw pointer. In principle `begin` can absolutely return a raw pointer (I _think_ LLVM's SmallVector was designed like that for simplicity, to avoid having to define a custom iterator type). But raw pointers make for fine iterators :smile: Seems like a bug in PyROOT?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-806477941:471,simpl,simplicity,471,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-806477941,2,['simpl'],['simplicity']
Usability,"Stacks with negative content generally don't function well. They are built by stacking bricks (1D histograms) or bins (1D histograms) on top of each other. If there's a negative brick in the middle, what should we do? This might need more explanation in the reference guide or even a protection to forbid histograms with negative minimum.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15740#issuecomment-2149906358:268,guid,guide,268,https://root.cern,https://github.com/root-project/root/issues/15740#issuecomment-2149906358,2,['guid'],['guide']
Usability,"Starting with the git clone --branch v6-22-00-patches https://github.com/root-project/root.git root_src branch, I identified the changes described above. However, on the RPi4 build I ran into the atomic problems. I used a simple fix to get around them. I used the standard cmake -DCMAKE_INSTALL_PREFIX=../install -DPYTHON_EXECUTABLE=/usr/bin/python3 ../root_src and when I ran into an unresolved issue, like this one:; TFile.cxx:(.text+0xb5ec): undefined reference to `__atomic_fetch_add_8'; collect2: error: ld returned 1 exit status; make[2]: *** [io/io/CMakeFiles/RIO.dir/build.make:585: lib/libRIO.so] Error 1; make[1]: *** [CMakeFiles/Makefile2:23297: io/io/CMakeFiles/RIO.dir/all] Error 2; make: *** [Makefile:152: all] Error 2; I went and added this library to the end of the line in the corresponding link.txt file:; /usr/lib/arm-linux-gnueabihf/libatomic.so.1; for these link.txt files under the build directory:; vi io/io/CMakeFiles/RIO.dir/link.txt; vi net/net/CMakeFiles/Net.dir/link.txt; vi tree/tree/CMakeFiles/Tree.dir/link.txt; vi net/netx/CMakeFiles/Netx.dir/link.txt; vi net/netxng/CMakeFiles/NetxNG.dir/link.txt; vi proof/proof/CMakeFiles/Proof.dir/link.txt; After each edit, I kept running cmake --build . -- install -j4 and eventually the build completed successfully.; Furthermore, I use ROOT with a jupyter notebook server I run on the RPi4 with systemd, so in place of; source /home/pi/root/install/bin/thisroot.sh (which I do use in the .bashrc for New Terminal), I added ; and EnvironmentFile variable EnvironmentFile=/home/pi/root/thisroot.conf; which contained:; JUPYTER_CONFIG_DIR=/home/pi/root/install/etc/notebook; MANPATH=/home/pi/root/install/man:/usr/local/man:/usr/local/share/man:/usr/share/man; SHLIB_PATH=/home/pi/root/install/lib; DYLD_LIBRARY_PATH=/home/pi/root/install/lib; CMAKE_PREFIX_PATH=/home/pi/root/install; PYTHONPATH=/home/pi/root/install/lib; LIBPATH=/home/pi/root/install/lib; JUPYTER_PATH=/home/pi/root/install/etc/notebook; ROOTSYS=/home/pi/root/i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4561#issuecomment-718133063:222,simpl,simple,222,https://root.cern,https://github.com/root-project/root/pull/4561#issuecomment-718133063,2,['simpl'],['simple']
Usability,"Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\utility(389,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\CodeGen\TailDuplication.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\CodeGen\LLVMCodeGen.vcxproj] ; - [2022-09-14T15:02:59.017Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/Support/CommandLine.h(1218,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\Utils\SizeOpts.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Transforms\Utils\LLVMTransformUtils.vcxproj] ; - [2022-09-14T15:02:59.017Z] C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\tuple(347,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\Utils\SimplifyLibCalls.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Transforms\Utils\LLVMTransformUtils.vcxproj] ; - [2022-09-14T15:02:59.017Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/Support/Casting.h(343,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ASTMatchers\ASTMatchFinder.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\lib\ASTMatchers\obj.clangASTMatchers.vcxproj] ; - [2022-09-14T15:02:59.017Z] C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\tuple(300,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\Scalar\PlaceSafepoints.c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11366#issuecomment-1246914758:2674,Simpl,SimplifyLibCalls,2674,https://root.cern,https://github.com/root-project/root/pull/11366#issuecomment-1246914758,1,['Simpl'],['SimplifyLibCalls']
Usability,"Super nice, thanks!. So `R__SUGGEST_CLASS` and `R__SUGGEST_FUNCTION` are now renamed to `R__SUGGEST_FASTER_...`? It's not always about speed, I actually prefer the original names. Can we spell the diagnostic as `it has a superior alternative` such that we do not need to distinguish class/ function anymore?. And the maybe simply `R__SUGGEST` or `R__USE_INSTEAD`?. (I wanted to write this down so I don't forget; it's likely more efficient to chat about this in person in January! 🎆 )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3100#issuecomment-449485576:323,simpl,simply,323,https://root.cern,https://github.com/root-project/root/pull/3100#issuecomment-449485576,2,['simpl'],['simply']
Usability,"Sure, no problem. But when you decide to learn a bit more advanced git, we can help. I will merge this sometime before the end of this week. Cheers,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1435#issuecomment-351153345:41,learn,learn,41,https://root.cern,https://github.com/root-project/root/pull/1435#issuecomment-351153345,2,['learn'],['learn']
Usability,"TCP_NODELAY, (char*)val, &optlen) == -1) {; | ^~~~~~~; | |; | int*; In file included from /builddir/root-6.24.06/core/unix/src/TUnixSystem.cxx:101:; /usr/include/sys/socket.h:348:50: note: initializing argument 5 of 'int getsockopt(int, int, int, void*, socklen_t*)'; 348 | int getsockopt (int, int, int, void *__restrict, socklen_t *__restrict);; | ^~~~~~~~~~~~~~~~~~~~~; ```; is the next error. The problem stems from the fact, that the condition for using `socklen_t` is (among others) glibc:; ```c; #if (defined(R__AIX) && !defined(_AIX43)) || \; (defined(R__SUNGCC3) && !defined(__arch64__)); # define USE_SIZE_T; #elif defined(R__GLIBC) || defined(R__FBSD) || \; (defined(R__SUNGCC3) && defined(__arch64__)) || \; defined(R__OBSD) || defined(MAC_OS_X_VERSION_10_4) || \; (defined(R__AIX) && defined(_AIX43)) || \; (defined(R__SOLARIS) && defined(_SOCKLEN_T)); # define USE_SOCKLEN_T; #endif; ```; [Here](https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xsh_chap02.html#tag_22_02_10_06) is some context:; > All socklen_t types were originally (in BSD UNIX) of type int. During the development of POSIX.1-2017, it was decided to change all buffer lengths to size_t, which appears at face value to make sense. When dual mode 32/64-bit systems came along, this choice unnecessarily complicated system interfaces because size_t (with long) was a different size under ILP32 and LP64 models. Reverting to int would have happened except that some implementations had already shipped 64-bit-only interfaces. The compromise was a type which could be defined to be any size by the implementation: socklen_t. I am not sure how to approach this, because the standardization of `socklen_t` seems fairly recent, but in the long run, avoiding this whole types dance altogether and simply using explicit `socklen_t` seems to make most sense and will make for a simpler code. I will appreciate any comments, especially regarding any compatibility issues this might cause - else I will add this to the PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9253#issuecomment-963600314:7333,simpl,simply,7333,https://root.cern,https://github.com/root-project/root/issues/9253#issuecomment-963600314,4,['simpl'],"['simpler', 'simply']"
Usability,TSVG (old code) is like TPDF or TPostScript is simply producing an SVG file from what is displayed it does not create a new color.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16348#issuecomment-2328279111:47,simpl,simply,47,https://root.cern,https://github.com/root-project/root/pull/16348#issuecomment-2328279111,2,['simpl'],['simply']
Usability,"T_P(RDFVary, VariationsForWithNoVariations); {; ROOT::RDataFrame df(10);; auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");; @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations); EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});; }; ; -TEST(RDFVary, GetVariations); +TEST_P(RDFVary, GetVariations); {; auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });; auto df2 = df.Vary(""x"", SimpleVariation, {}, 2); @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations); ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");; }; ; -TEST(RDataFrameInterface, VaryFriend); +TEST(RDFVary, VaryFriend); {; int x = 0;; TTree main(""main"", ""main"");; @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend); EXPECT_EQ(sum2vars[""var:0""], 43);; }; ; -TEST(RDFVary, ResultMapIteration); +TEST_P(RDFVary, ResultMapIteration); {; auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Vary(""x"", SimpleVariation, {}, 2);; auto s = df.Sum<int>(""x"");; @@ -327,7 +331,7 @@ TEST_P(RDFVary, VaryDefinePerSample); EXPECT_EQ(ss[""x:1""], 2 * 10);; }; ; -TEST(RDFVary, SaveGraph); +TEST_P(RDFVary, SaveGraph); {; ROOT::RDataFrame df(1);; auto c = df.Define(""x"", [] { return 0; }); @@ -622,7 +626,7 @@ TEST_P(RDFVary, DefineDependingOnVariations); EXPECT_EQ(sums[""yshift:low""], 410);; }; ; -TEST(RDFVary, VaryAndAlias); +TEST_P(RDFVary, VaryAndAlias); {; auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; }).Alias(""y"", ""x"").Vary(""x"", SimpleVariation, {}, 2);; auto s1 = df.Sum<int>(""y"");; @@ -1000,7 +1004,7 @@ struct MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {; }; };; ; -TEST(RDFVary, VaryBook); +TEST_P(RDFVary, VaryBook); {; auto d = ROOT::RDataFrame(10); .Define(""x"", [](ULong64_t e) { return int(e); }, {""rdfentry_""}); @@ -1385,7 +1389,7 @@ TEST_P(RDFVary, VaryProfiles); EXPECT_DOUBLE_EQ(h2s[""x:1""].GetMean(), 4.5);; }; ; -TEST(RDFVary, VaryReduce); +TEST_P(RDFVary, VaryReduce); {; auto",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10715#issuecomment-1150873429:3955,Simpl,SimpleVariation,3955,https://root.cern,https://github.com/root-project/root/pull/10715#issuecomment-1150873429,1,['Simpl'],['SimpleVariation']
Usability,"Templated constructors actually work since last week (except not yet on Mac due to a bug in TClingCallFunc; I needed them for shared_ptr), and yes they're a hack. Code is in repo, but not yet released. ADL will never work properly in full automatic mode, but is already covered most of the way. I'm having that discussion right now with a user who wants to turn Python tuples into std::tuples: the problem is underspecified on the Python side. So although it can be made to generally work, user-provided types are necessary to cover corner cases, e.g. by handing template arguments to std::make_tuple. Python's three-way comparison operator is only syntax, not semantics, so the spaceship would simply be broken down in Python's richcompare and the only real issue again is ROOT/meta giving wrong overloads. That said, I'm moving away from operator lookups: not only are the overloads often wrong, so I'm doing my own ADL, but also TClingCallFunc generates broken code on Mac and Windows. Rather, I want to use a generic comparison template and let SFINAE deal with it. The difference between removing std::, giving wrong overloads, etc. and string <-> decl is that the former is a problem b/c ROOT/meta gives the _wrong_ results. Strings are sometimes clunky, but perfectly fine if they are correct. Yes, letting clang parse names (as done for function template lookups already) is exactly what should happen. But the next step is to funnel the results to the Python mappings, not expose cppyy to decls or their intricate details. E.g. the converters and executor lookups should be a combination of strings and categories, just like it is now (except that the categories are derived from string parsing, like looking for ends_in('*')). Doing that selection based on decls as suggested here and in the e-mail thread with Gerhard makes no sense whatsoever: you'd have to maintain three times the same functionality. I would want something like this:. ```; opaque_handle h = what_is(parent, name); type_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3579#issuecomment-478718847:695,simpl,simply,695,https://root.cern,https://github.com/root-project/root/pull/3579#issuecomment-478718847,2,['simpl'],['simply']
Usability,Test failure in `alma9-clang` unrelated:; ```txt; TEST FAILURES:; 470:gtest-tree-dataframe-test-dataframe-simple; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16385#issuecomment-2337861300:106,simpl,simple,106,https://root.cern,https://github.com/root-project/root/pull/16385#issuecomment-2337861300,2,['simpl'],['simple']
Usability,"Test failures were due to a dirty build directory. I logged into the node, ran `cmake .`, and the headers were then found. If the headers are not found in other builds, please clear the build directory of the affected node(s), so that the roottest targets get recreated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/851#issuecomment-321595336:176,clear,clear,176,https://root.cern,https://github.com/root-project/root/pull/851#issuecomment-321595336,2,['clear'],['clear']
Usability,"Thank you @jalopezg-r00t :partying_face: I'll rebase the commits shortly and a bit indiscriminately. > I would just suggest testing it again on `olsky-03` or similar, when available. All clear on our (thankfully operational) HPE cluster with daos / libdaos 2.2.0.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11480#issuecomment-1312341311:187,clear,clear,187,https://root.cern,https://github.com/root-project/root/pull/11480#issuecomment-1312341311,2,['clear'],['clear']
Usability,Thank you @petruccs for opening this issue and the feedback. You are right that one needs to use`GetPaintedGraph` for this. I will improve the documentation and add a tutorial example.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10139#issuecomment-1072149923:51,feedback,feedback,51,https://root.cern,https://github.com/root-project/root/issues/10139#issuecomment-1072149923,2,['feedback'],['feedback']
Usability,Thank you Amadio for your feedback. I don't know what are the formatting pbs because I can't see travis results but I fixed conflicts.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1239#issuecomment-343641047:26,feedback,feedback,26,https://root.cern,https://github.com/root-project/root/pull/1239#issuecomment-343641047,2,['feedback'],['feedback']
Usability,"Thank you all for your input! It is clear that the changes in this PR do not improve the situation by any means. Interestingly, this PR has triggered three new failures for exactly these two tutorials. I don't see how the failures on Windows can be related to the changes of this PR, but they are slightly more informative than usual and they were never seen before in the CI. For the failure on Mac ARM, we are hitting https://github.com/root-project/cling/issues/370 which I wasn't even aware of 😄 . Yet another reason not to merge these changes 🙂 . ### Windows 64 bit. https://github.com/root-project/root/actions/runs/7693740131/job/20963073314?pr=14472. ```; Test #951: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Failed 2.06 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/ntuple/ntpl007_mtFill.C...; Warning in <[ROOT.NTuple] Warning C:\ROOT-CI\src\tree\ntuple\v7\src\RPageStorageFile.cxx:52 in __cdecl ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(class std::basic_string_view<char,struct std::char_traits<char> >,const class ROOT::Experimental::RNTupleWriteOptions &)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Fatal: (typedValue->size() % fItemSize) == 0 violated at line 1986 of `C:\ROOT-CI\src\tree\ntuple\v7\src\RField.cxx'; aborting; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Exit code 0xc0000374; ```. ```; 1258/2174 Test #960: tutorial-v7-concurrentfill.cxx ............................................................***Failed 6.42 sec; ; Processing C:/ROOT-CI/src/tutorials/v7/concurrentfill.cxx...; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: Access violation; ```. ### Windows 32bit . https://github.com/root-project/root/actions/runs/7693740131/job/20963073797?pr=14472. ```; 1242/2175 Test #950: tutorial-v7-ntuple-ntpl007_mtFill .........................................................***Fail",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14472#issuecomment-1915527940:36,clear,clear,36,https://root.cern,https://github.com/root-project/root/pull/14472#issuecomment-1915527940,2,['clear'],['clear']
Usability,Thank you everyone for your tips. I have learned a bunch of new concepts. The last two commits have added those changes. I am very grateful for the help I have been getting. Thank you everyone.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8225#issuecomment-858035785:41,learn,learned,41,https://root.cern,https://github.com/root-project/root/pull/8225#issuecomment-858035785,2,['learn'],['learned']
Usability,Thank you for all the help and patience guys. I'm learning a lot.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7024#issuecomment-760058242:50,learn,learning,50,https://root.cern,https://github.com/root-project/root/pull/7024#issuecomment-760058242,2,['learn'],['learning']
Usability,"Thank you for the additional information! We are setting up a big endian node here, which will make working on this issue simpler.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426#issuecomment-1470788474:122,simpl,simpler,122,https://root.cern,https://github.com/root-project/root/issues/12426#issuecomment-1470788474,2,['simpl'],['simpler']
Usability,"Thank you for the answer: I wish I had noticed `TParameter` years ago, since `RooInt` did the job but it was clearly not the semantically correct choice.; We'll give a chance to `TParameter` for the future, and try to surrogate `RooInt` (and `RooFloat`) in the new code.; I'll update and eventually close this issue when we see it works.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16380#issuecomment-2336431234:109,clear,clearly,109,https://root.cern,https://github.com/root-project/root/issues/16380#issuecomment-2336431234,2,['clear'],['clearly']
Usability,"Thank you for the bug report! Our 32bit CI is currently not running on the experimental namespace (including RNTuple). Let us fix that first, which will make it simpler to fix this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12427#issuecomment-1458084140:161,simpl,simpler,161,https://root.cern,https://github.com/root-project/root/issues/12427#issuecomment-1458084140,2,['simpl'],['simpler']
Usability,"Thank you for the comments @ashlaban and @amadio . Based on the feedback these are the steps I took. This PR was for the first evaluation of GSoC and I am closing it. New PR is #778. * Make a new branch from first commit and cherry pick my commits one by one, amending them and rewriting history such that commits are merged into 3 working commits.; * From now I'll always `rebase` before merging and make sure that commits build correctly. ; * Changing intendation to 3 spaces.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/693#issuecomment-315903251:64,feedback,feedback,64,https://root.cern,https://github.com/root-project/root/pull/693#issuecomment-315903251,1,['feedback'],['feedback']
Usability,Thank you for the feedback. I 'll try to implement something in the next days and open a PR. If you then could have a look will be great; Cheers,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7332#issuecomment-864851951:18,feedback,feedback,18,https://root.cern,https://github.com/root-project/root/issues/7332#issuecomment-864851951,2,['feedback'],['feedback']
Usability,Thank you for the fix! ; It appears that while forcing the use of `RooFoamGenerator` I simply skipped that code path...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12286#issuecomment-1425901083:87,simpl,simply,87,https://root.cern,https://github.com/root-project/root/issues/12286#issuecomment-1425901083,2,['simpl'],['simply']
Usability,"Thank you for the initiative!. You're also replacing `__MAKECINT__` with `__MAKECLING__`, but I'm not sure we should do this. In the guide, it reads that the `__MAKECINT__` macro is deprecated:; documentation/users-guide/Cling.md. Maybe @pcanal can confirm, but from that paragraph I understand that the replacement for `__MAKECING__` in `__ROOTCLING__`, and not `__MAKECLING__`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15513#issuecomment-2111282912:133,guid,guide,133,https://root.cern,https://github.com/root-project/root/pull/15513#issuecomment-2111282912,4,['guid'],['guide']
Usability,"Thank you for the quick response, @couet, your example code helps!; However, is this peculiarity mentioned in the ROOT documentation? This behavior was not so clear to me from the [TAttText documentation](https://root.cern.ch/doc/master/classTAttText.html), and it looks like setting the text color to white in my naïve way does work in some other contexts, e.g.:; ```; void jant2(){; auto c = new TCanvas(""c"",""c"",800,600);; auto pave = new TPaveText(0.25,0.25,0.75,0.75,""NDC"");; pave->SetTextColor(kWhite); // setting all text to white this time (not line-by-line changes); pave->AddText(""This line is in white."");; pave->AddText(""This line is also in white."");; pave->Draw();; c->Draw();; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6593#issuecomment-706268776:159,clear,clear,159,https://root.cern,https://github.com/root-project/root/issues/6593#issuecomment-706268776,2,['clear'],['clear']
Usability,"Thank you for this PR.; Since we include <cmath> I agree we should use `std::sqrt` instead simple `sqrt` that is defined in <math>. We should probably change other similar files in the genvector package. . For this PR, it would be nice if you cleanup the commit history and squash the commits in a single one to have a cleaner history; Thank you. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7909#issuecomment-822312306:91,simpl,simple,91,https://root.cern,https://github.com/root-project/root/pull/7909#issuecomment-822312306,2,['simpl'],['simple']
Usability,Thank you for your guidance Sergey! I'm glad this got done right :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15812#issuecomment-2255129356:19,guid,guidance,19,https://root.cern,https://github.com/root-project/root/pull/15812#issuecomment-2255129356,2,['guid'],['guidance']
Usability,"Thank you for your reminders, I will for sure follow the procedure once I am convinced this works fine for all ALICE usecases. Having a PR on the v6-28-00-patches branch merely simplifies sharing something which can be immediately used in the ALICE software stack. Could you please advise regarding the data structure to use? I could not find one that fits the needed sparseness.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13641#issuecomment-1719035285:177,simpl,simplifies,177,https://root.cern,https://github.com/root-project/root/pull/13641#issuecomment-1719035285,2,['simpl'],['simplifies']
Usability,"Thank you so much @eguiraud for the comments! I have addressed all of them and updated the commits accordingly, also splitting them in smaller commits to make intentions clearer. New tests are still missing, but I would appreciate if you could take another look. In particular, these changes hopefully streamline the code a bit:; * `rdf_uuid`: this was previously not well named, since we need something that contains both an identifier for the current RDataFrame instance and also one for the current (distributed) execution of that RDataFrame (e.g. to separate to consecutive triggers of the computation graph). I have added the type `ExecutionIdentifier` that holds both. This class is now used everywhere (in Ranges.py, HeadNode.py) and should improve readability.; * I merged `CloneResultPtr` and `CloneResultMap` into `CloneResultAndAction`. This helps making the logic in DistRDF more simple (i.e. is what allows the usage of `singledispatch` to distinguish different ways of cloning actions of the distributed computation graph).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12363#issuecomment-1581162133:170,clear,clearer,170,https://root.cern,https://github.com/root-project/root/pull/12363#issuecomment-1581162133,4,"['clear', 'simpl']","['clearer', 'simple']"
Usability,"Thank you very much! Great that is works now!. The fix also needs to be backported to the 6.26 branch, since the problem is also in that release cycle since 6.26.02. I would appreciate if at some point there would be another 6.26 patch release. In RooFit, the small bug fixes were already piling up:; https://github.com/root-project/root/issues/11534. And especially with this issue fixed, a new release could be worthwhile. We know that this bug broke some ATLAS RooFit workspaces already, so this fix has a clear benefit. I'll ask ATLAS whether it helps to have a patch release for 6.26 or if they moved on to 6.28 anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12783#issuecomment-1556797954:509,clear,clear,509,https://root.cern,https://github.com/root-project/root/issues/12783#issuecomment-1556797954,2,['clear'],['clear']
Usability,"Thank you very much! I'm sure there must be a way to do that. However, I think this must be a rather rare demand, so this should be some second-order feature...; But it may also be that it is already possible through command line/environment arguments - maybe someone who knows CMake could guide how to do that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12744#issuecomment-1549824735:290,guid,guide,290,https://root.cern,https://github.com/root-project/root/issues/12744#issuecomment-1549824735,2,['guid'],['guide']
Usability,"Thank you! I made the modification. Still not clear to me, why it is necessary. But this is not a (very) performance-critical path, so it's fine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14731#issuecomment-1948143634:46,clear,clear,46,https://root.cern,https://github.com/root-project/root/pull/14731#issuecomment-1948143634,2,['clear'],['clear']
Usability,"Thanks @bellenot ! I don't know what happened to [the PR build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81795/console), but I did not notice these failures, sorry about that. Can you please reduce the amount of ifdef'd code to:. ```cpp; #ifdef _WIN32; const std::string type = ""struct `private: virtual void __thiscall RDataFrameInterface_TypeUnknownToInterpreter_Test::TestBody(void)'::`2'::SimpleType"";; #else; const std::string type = ""RDataFrameInterface_TypeUnknownToInterpreter_Test::TestBody()::SimpleType"";; #endif; ```. and then simply use `type` in the error strings that we check?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5612#issuecomment-628129578:571,simpl,simply,571,https://root.cern,https://github.com/root-project/root/pull/5612#issuecomment-628129578,4,"['Simpl', 'simpl']","['SimpleType', 'simply']"
Usability,"Thanks @eguiraud for all your comments! I've updated the text, I believe it is now clearer and more to the point.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12121#issuecomment-1405524377:83,clear,clearer,83,https://root.cern,https://github.com/root-project/root/pull/12121#issuecomment-1405524377,2,['clear'],['clearer']
Usability,"Thanks @pfs . @couet it is not clear to me whether this copy constructor has been implemented or not from the conversation, but it should be pretty straightforward. Can you take care, or, if already done, close the issue directly? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13075#issuecomment-1926390637:31,clear,clear,31,https://root.cern,https://github.com/root-project/root/issues/13075#issuecomment-1926390637,2,['clear'],['clear']
Usability,"Thanks @vepadulano for the comment. I agree with your proposal. I went for an approach with addition of new options because I found `SetCompression{Algorithm,Level}` and assumed that it's desirable to have that level of flexibility. But I think since `SetCompressionSettings` takes care of both, the better user experience is to have single option with better documentation. Hence, I'll revert the changes from b5200e148be517112143fcb5e6d489dbc2d86dd4 and improve documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14714#issuecomment-1952406831:307,user experience,user experience,307,https://root.cern,https://github.com/root-project/root/pull/14714#issuecomment-1952406831,2,['user experience'],['user experience']
Usability,"Thanks Enric!. > it also removes the part about AsRNode (to be discussed). how will users find out about the feature now? . > to be discussed too what to do with the section ""Distributed execution in Python"", I think it deserves to be outside of the PyROOT box, but perhaps we could rename it to just ""Distributed execution"". good for me (EDIT: as long as we still clearly state that it's Python-only). > The doxygen entry for MakeNumpyDataFrame comes from the function with that name that implements the pythonization. If we don't want it to appear in the reference guide with that name, we could rename it to e.g. MakeNumpyDataFrameImpl. Or we can surround it with `\cond`/`\endcond` doxygen commands. I don't have a preference.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9611#issuecomment-1016215896:365,clear,clearly,365,https://root.cern,https://github.com/root-project/root/pull/9611#issuecomment-1016215896,4,"['clear', 'guid']","['clearly', 'guide']"
Usability,Thanks Jonas! We might have to call some ROOT clean-up routine that is usually called by the ROOT-injected exit handler to make sure TFiles are closed correctly and similar. @pcanal might know if there is a simple way to do that.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7075#issuecomment-764675439:207,simpl,simple,207,https://root.cern,https://github.com/root-project/root/pull/7075#issuecomment-764675439,2,['simpl'],['simple']
Usability,"Thanks Vincenzo! I think the most important change in this PR is that PyROOT does not register the `EndOfProcessCleanups` call with _Python's_ atexit mechanism anymore, but it uses the classic handlers mechanism that `TApplication` already uses. And that means that now PyROOT objects will de deleted before `EndOfProcessCleanups` is called, which is an important change in behavior but I think it is the intended/correct behavior. I am not sure we need the combo `std::call_once` + `std::once_flag` data member, a static counter seems simpler and it does the job (unless we expect that TApplication and PyROOT could try to register the handler _concurrently_, but I can't imagine how that would happen). With this said I'm the least qualified person to decide on whether we want to go with this or not, I'll leave it to the other reviewers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10753#issuecomment-1155283317:536,simpl,simpler,536,https://root.cern,https://github.com/root-project/root/pull/10753#issuecomment-1155283317,2,['simpl'],['simpler']
Usability,"Thanks a lot @pcanal for this improvement: experiments will appreciate. Given that we still run, with somewhat lower frequency than others, 6.26 builds and tests, would a simple test for 6.26 be of help in roottest?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15006#issuecomment-2010652089:171,simpl,simple,171,https://root.cern,https://github.com/root-project/root/pull/15006#issuecomment-2010652089,2,['simpl'],['simple']
Usability,"Thanks a lot for your comment!. > * sometimes I would have found useful to be able to pass python number anywhere a RooAbsReal is required, although I suspect this may require a pythonization for each pdf. Yes, I would like this too, but it's technically not easy to implement without changing the source for all PDFs. Maybe I will have an idea at some point as I learn more about PyROOT, but for now I have none. > * `RooSimultaneous` map constructor does not accept a python dictionary yet. That's a very good idea!. > * one thing that surprised me a couple of times at the beginning is that `RooAbsArg` does not keep its servers alive from the python GC so you actually need the same workarounds as in C++ (importing frequently to a workspace).; However, I suspect that if they did keep servers alive, server redirection would likely lead to desync between the C++ and python views of the graph. That's a pretty good idea too. I guess one can simply create new Python references to each server that are set as an attribute of the server, such that they are always kept alive. But you're right, server redirection would break this, unless there are Pythonizations for that one too.... So I still need to think if this is worth it, also considering that users can also use the RooWorkspace factory interface to create PDFs, which doesn't have this problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11421#issuecomment-1257762156:364,learn,learn,364,https://root.cern,https://github.com/root-project/root/issues/11421#issuecomment-1257762156,4,"['learn', 'simpl']","['learn', 'simply']"
Usability,"Thanks a lot for your feedback @pcanal, I have fixed up the code convention mistakes in https://github.com/root-project/root/pull/586/commits/99fbdcd4fe8b90ebfa29f7ec27cb1f47353ac62f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/586#issuecomment-303357716:22,feedback,feedback,22,https://root.cern,https://github.com/root-project/root/pull/586#issuecomment-303357716,1,['feedback'],['feedback']
Usability,"Thanks a lot, Vassil. It is still work in progress. It implies a lot of changes and I thought it better if I could receive feedback the earliest possible. There will be tests and I'll try to improve the documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/567#issuecomment-301234996:123,feedback,feedback,123,https://root.cern,https://github.com/root-project/root/pull/567#issuecomment-301234996,1,['feedback'],['feedback']
Usability,"Thanks everyone for the valuable feedback! I changed the behaviour of the feature to make it simpler to use correctly, and also added one or two perks:. * `OnParameterUpdate` (was `RegisterCallback`) now takes a callable that will be invoked once every specified number of entries on a partial result in _one_ of the worker threads. It will never be invoked concurrently; * `OnParameterUpdateSlot` takes a callable that will be invoked once every specified number of entries on a partial result in each of the worker threads. It will be invoked concurrently, and will also take as argument the ""processing slot"" number the partial result belongs to; * passing `0` as `everyNEvents` parameter to `OnParameterUpdate[Slot]` makes it so that the callback is invoked just once [per slot] before starting the event loop",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1037#issuecomment-331721438:33,feedback,feedback,33,https://root.cern,https://github.com/root-project/root/pull/1037#issuecomment-331721438,4,"['feedback', 'simpl']","['feedback', 'simpler']"
Usability,Thanks for all the feedback. A more comprehensive solution to avoid spurious lookups triggered by TClass::GetClass will be proposed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13341#issuecomment-1862225290:19,feedback,feedback,19,https://root.cern,https://github.com/root-project/root/pull/13341#issuecomment-1862225290,2,['feedback'],['feedback']
Usability,"Thanks for all the insights! We are still learning how to cope with all the different interfaces. It is possible that at some point all this extra configuration will be collected in a single place to make it easier for new users to activate from distributed RDataFrame directly. It would be amazing if you could try again your reproducer with the next nightlies if you have time, thank you so much :smile: !; Let's continue the discussion in private for other topics",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9429#issuecomment-993713171:42,learn,learning,42,https://root.cern,https://github.com/root-project/root/issues/9429#issuecomment-993713171,2,['learn'],['learning']
Usability,"Thanks for noting this problem. Note that the first new Error message is inaccurate. For example,; ```; gInterpreter->GenerateDictionary(""std::vector<TNamed*>"","""");; ```; works perfectly. And in my opinion the 2nd error message might be too noisy for this kind of error. Either way, my understanding of the problem is simply a missing nullptr checking which was apply to 'just' TCint.cxx at a time we had both TCint and TCintWithCling.cxx:; ```; commit 40ff05f286d494f930c00d81942b845f240a74f9; Author: Axel Naumann <Axel.Naumann@cern.ch>; Date: Thu Jan 19 09:46:31 2012 +0000. Fix Coverity 39060 (deref of 0 ptr); ; ; git-svn-id: http://root.cern.ch/svn/root/trunk@42716 27541ba8-7e3a-0410-8455-c3a389f83636. diff --git a/core/meta/src/TCint.cxx b/core/meta/src/TCint.cxx; index 311e2f2d99..b9babb70e6 100644; --- a/core/meta/src/TCint.cxx; +++ b/core/meta/src/TCint.cxx; @@ -1165,6 +1165,7 @@ Int_t TCint::GenerateDictionary(const char *classes, const char *includes /* = 0; // gInterpreter->GenerateDictionary(""myclass"",""myclass.h;myhelper.h"");; ; if (classes == 0 || classes[0] == 0) return 0;; + if (!includes) includes = """";; ; // Split the input list; std::vector<std::string> listClasses;; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1724#issuecomment-371907648:318,simpl,simply,318,https://root.cern,https://github.com/root-project/root/pull/1724#issuecomment-371907648,2,['simpl'],['simply']
Usability,"Thanks for opening this issue!. The training part of TMVA is not developed anymore, that's why this issue was not be addressed. Sorry for not giving any feedback and leaving it in limbo state for so long. See also: https://indico.cern.ch/event/1356068/contributions/5709442/attachments/2811744/4907885/ML4EP_Feedback.pdf. Quote from slide 4:; > We want to support experiments inference (C++) for cases that are difficult to; implement or require heavy dependencies.; We don’t want to compete with existing industry tools for training.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7092#issuecomment-2046133207:153,feedback,feedback,153,https://root.cern,https://github.com/root-project/root/issues/7092#issuecomment-2046133207,2,['feedback'],['feedback']
Usability,"Thanks for the attention to it. Maybe I was too enthusiastic in the context of displayed objects and interactive root sessions. I'm not an expert, but still learning. Th RDirectory looks interesting. Subroutines leaving global objects lying around still seems funny. It could be convenient for casual scripting. As an example of a main routine, and a subroutine that ""makes"" a TCanvas that persists after a .x, I'd be inclined to skin the cat this way:. ```; // my_subroutines.C; void my_subroutine(unique_ptr<TCanvas> &x) {; x.reset() // TCanvas requires the extra step, see note below.; x.reset(new TCanvas());; // .. do something with it.; }; ```. ```; //make_canvas.C; namespace root_global { ; unique_ptr<TCanvas> c1;; }. void make_canvas() {; // we decide at the top level to use a global here:; my_subroutine(root_global::c1);. //This one doesn't use a global and will die, our choice; unique_ptr<TCanvas> local_canvas;; my_subroutine(local_canvas);; }; ```; or if being a little more lazy, I'd likely use static instead of the namespace, but the root interpreter doesn't respect translation unit boundaries well. Really I'd use a class though in case I need to add more global things easily:. ```; //display.h. class display {; private:; unique_ptr<TCanvas> c1;; public:; void make_canvas() {; c1.reset(); ; c1.reset(new TCanvas());; }; };; ```; And use it like:; ```; //make_display.C; #include ""display.h"". namespace root_global { ; display my_display;; }. // main routine:; void make_display() { ; // This one will stick around; root_global::my_display.make_canvas();. // This one wont. ; display local_display;; local_display.make_canvas();; }; ```. There are two main differences compared to the PR. 1) I'm not letting the subroutine allocate heap objects that aren't handled explicitly by the caller. 2) I'm using standard C++ that even works fine right now in root 6. That's nice because it's easier to learn, recognize, understand, and apply elsewhere. Maybe it's a bonus that syntax f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7305#issuecomment-787621241:157,learn,learning,157,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-787621241,2,['learn'],['learning']
Usability,"Thanks for the clarification!. Speaking of needs, I still need https://github.com/root-project/root/pull/8546 for my project, which deals with huge amounts of integer waveforms, but after two years I closed it because I was getting no more feedback / responses. (I am happy to reopen it once there is someone able to review it.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9156#issuecomment-1813907124:240,feedback,feedback,240,https://root.cern,https://github.com/root-project/root/pull/9156#issuecomment-1813907124,2,['feedback'],['feedback']
Usability,"Thanks for the comment @linev . I clearly see your point and I got to admit I was not thinking much about compatibility when I wrote this feature although this is a crucial point for a toolkit like ROOT. About the default value for the constructor everything is totally fine.; About the redefined virtual functions, I am not 100% sure what is the best way to resolve the problem. Probably providing a default value for the new parameter like I did for TAttMarker::SaveMarkerAttributes will not be enough.; I was asking myself whether it is better to overload the virtual function with the additional parameter or to define a complete new function with a different name. Maybe you can give me an advice on how to resolve this problem since am not fully familiar with the concept of virtual functions and the consequences of a particular implementation. All the best,; Simon Spies",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4721#issuecomment-571182962:34,clear,clearly,34,https://root.cern,https://github.com/root-project/root/pull/4721#issuecomment-571182962,2,['clear'],['clearly']
Usability,"Thanks for the comment! I agree that it's not clear how meaningful `weightError` is for RooDataSet, but still the only two classes that derive from RooAbsData are RooDataHist and RooDataSet. Both of them reimplement `weightError` in a non-trivial way. Or are you thinking about some user classes that might inherit from `RooAbsData`? In that case they would not compile because not all purely virtual functions are implemented. But I'd argue that this a good thing, because then the user is made aware that `weightError` should be implemented with a dummy value. Actually, it can even be dangerous that we choose this dummy value ourselves (why zero and not `nan` for example?). I think purely virtual functions are safer than ""dummy functions"", and they are also more self-documenting because we know that every inheriting class will be overloading this function.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8137#issuecomment-838795380:46,clear,clear,46,https://root.cern,https://github.com/root-project/root/pull/8137#issuecomment-838795380,2,['clear'],['clear']
Usability,"Thanks for the comment. At this point this issue seems to conflate two things: ; 1. The dependencies of python tests. This should have been addressed by #16555 ; 2. The missing symbols. If 1. is confirmed to be solved, I would say that at least this issue ought to be closed and one about missing symbols opened. However, even if an issue dedicated to the missing symbols is opened, it's not clear, at least to me, how the problem can be reproduced. So far we have no indication of it in our CI: can it be due to a somewhat imprecise formulation of the python dependencies in the `requirements.txt` file that affects your platform?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16553#issuecomment-2384870116:392,clear,clear,392,https://root.cern,https://github.com/root-project/root/issues/16553#issuecomment-2384870116,2,['clear'],['clear']
Usability,"Thanks for the education, I just wrote down what I learned.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/564#issuecomment-300600704:51,learn,learned,51,https://root.cern,https://github.com/root-project/root/pull/564#issuecomment-300600704,1,['learn'],['learned']
Usability,Thanks for the feedback @will-cern ! The expert is now in the loop.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16244#issuecomment-2291348314:15,feedback,feedback,15,https://root.cern,https://github.com/root-project/root/issues/16244#issuecomment-2291348314,2,['feedback'],['feedback']
Usability,Thanks for the feedback Philippe and Danilo!; will modify it and send the corresponding tests,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/864#issuecomment-322990975:15,feedback,feedback,15,https://root.cern,https://github.com/root-project/root/pull/864#issuecomment-322990975,2,['feedback'],['feedback']
Usability,Thanks for the feedback!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7711#issuecomment-828443447:15,feedback,feedback,15,https://root.cern,https://github.com/root-project/root/pull/7711#issuecomment-828443447,2,['feedback'],['feedback']
Usability,Thanks for the feedback! Then it looks ready to me :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10366#issuecomment-1219758325:15,feedback,feedback,15,https://root.cern,https://github.com/root-project/root/pull/10366#issuecomment-1219758325,2,['feedback'],['feedback']
Usability,"Thanks for the feedback. Could the function be overriden ?; ```; TGraph::SaveAs(...); {; if (std::ends_with("".csv"")); {; //do something; }; else; {; TObject::SaveAs(...);; }; }; ```. Or alternatively, in TObject::SaveAs, do the following:. ```; if ends_with('.csv') and ClassName() == ""TGraph""); {; ... do something; }; else; {; ...do what does now; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9491#issuecomment-1058270647:15,feedback,feedback,15,https://root.cern,https://github.com/root-project/root/issues/9491#issuecomment-1058270647,2,['feedback'],['feedback']
Usability,Thanks for the feedback. I think I fixed them now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7237#issuecomment-784245202:15,feedback,feedback,15,https://root.cern,https://github.com/root-project/root/pull/7237#issuecomment-784245202,2,['feedback'],['feedback']
Usability,"Thanks for the feedback. Just as a suggestion, I think it would still be possible to migrate from that Makefile to a CMakeLists.txt. That way, one could configure via the command line what part of the docs to build, instead of having to modify the makeinput.sh script, which in turn modifies the git source directory, which brings us back to https://github.com/root-project/root/issues/8947",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8950#issuecomment-934484956:15,feedback,feedback,15,https://root.cern,https://github.com/root-project/root/issues/8950#issuecomment-934484956,2,['feedback'],['feedback']
Usability,Thanks for the feedback. Reverted now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10055#issuecomment-1060733471:15,feedback,feedback,15,https://root.cern,https://github.com/root-project/root/pull/10055#issuecomment-1060733471,2,['feedback'],['feedback']
Usability,"Thanks for the info. Since the behaviour is very counter intuitive, I would consider this a bug. I will soon have a fix. Progress on this is tracked here:; https://sft.its.cern.ch/jira/browse/ROOT-10259",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4167#issuecomment-519957336:57,intuit,intuitive,57,https://root.cern,https://github.com/root-project/root/pull/4167#issuecomment-519957336,2,['intuit'],['intuitive']
Usability,"Thanks for the patch, Advait!. My thoughts: If the function is added to ROOT as is, I'd implement it in the header and simply `return a==b`. The C/C++ cast from `bool` to `int` is effectively a Kronecker Delta. That said, I'm not sure if the function as such does in practice what users expect. Floating point values are hardly ever exactly equal, but usually one tests for them to be equal within +/ epsilon. I'll assign to @lmoneta.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8719#issuecomment-886443983:119,simpl,simply,119,https://root.cern,https://github.com/root-project/root/pull/8719#issuecomment-886443983,2,['simpl'],['simply']
Usability,"Thanks for the proposal backed up by a concrete potential solution. I like the idea of having something automated that in case of problems, simply does nothing. One thing that changes though is the squashing. ; This is something to discuss. In your opinion, @vgvassilev , what do we loose by automatically squashing commits intended for backports?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14889#issuecomment-1981051931:140,simpl,simply,140,https://root.cern,https://github.com/root-project/root/issues/14889#issuecomment-1981051931,2,['simpl'],['simply']
Usability,"Thanks for the quick feedback!. I've tried with `client.wait_for_workers(1)` before creating the RDF, but it doesn't have the expected effect: it just waits forever after printing `DEBUG:Starting job: 12241446.0` (debugging activated with `import logging; logging.basicConfig(format='%(levelname)s:%(message)s', level=logging.DEBUG)`). I can see the job in `condor_q` come and go, but the blocking call is never released for some reason (note that I'm not a Dask expert by any means). I'll try again once #9431 is merged; in particular I'm interested in using Dask's [adaptive worker management](https://jobqueue.dask.org/en/latest/advanced-tips-and-tricks.html#how-to-handle-job-queueing-system-walltime-killing-workers), so that the exact number of submitted jobs is not fixed a priori but automatically adapts to the workload...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9429#issuecomment-992593304:21,feedback,feedback,21,https://root.cern,https://github.com/root-project/root/issues/9429#issuecomment-992593304,2,['feedback'],['feedback']
Usability,"Thanks for the reply!; Yes, I have some Start-Stop-Pause TThread derived classes for my DAQ within a GUI, that I've been using since ROOT5. I only use one thread, apart from the GUI, so I do not really need something that has nWorkers for very parallel tasks. It's just the main GUI window (thread) and a DAQ running behind the scenes.; The CPP code of the class is posted here:; https://root-forum.cern.ch/t/trentrantrwlock-thread-lock-program-freezes/45116/11; In principle, I would be happy to replace with something more modern, but I would need some help with the migration or some 'tutorial' on how to change from TThread to other newer options. Note: I use this in a standalone CMake application, that runs with app.Run and ends with a CloseWindow() and a gApplication->Terminate(). Not sure if that changes the 'order' of deletion somehow. I will investigate further.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8297#issuecomment-852823982:51,Pause,Pause,51,https://root.cern,https://github.com/root-project/root/issues/8297#issuecomment-852823982,1,['Pause'],['Pause']
Usability,"Thanks for the review @dpiparo!. So far, the only failure is the one on ubuntu 2204 that was also seen before this PR:; https://github.com/root-project/root/pull/13775#issuecomment-1743080607. If there are no regressions in the CI output with respect to the other PR I linked, I will merge this PR and then follow up with more backports tomorrow based on the feedback from the nightlies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13777#issuecomment-1743507531:359,feedback,feedback,359,https://root.cern,https://github.com/root-project/root/pull/13777#issuecomment-1743507531,2,['feedback'],['feedback']
Usability,"Thanks for the review @eguiraud , regarding :. > the _extra_args relay logic could be documented a bit better (I'm not sure MethodTemplateWrapper's init method needs to take extra_args as argument, but MethodTemplateGetter's docs should mention that the extra_args are passed when constructing the wrapper_class instance. I think this is already clear enough in the docs of `__get__` in `MethodTemplateGetter`:; ```; Returns:; instance of MethodTemplateWrapper subclass: contains a handle to; the original implementation of the method template that is; bound to `instance` and, possibly, some extra arguments to be; used when receiving a call.; ```; also `_extra_args` is documented as:; ```; _extra_args (tuple): extra arguments to be used by the wrapper object; when receiving a call.; ```; And the extra args need to be passed when constructing the getter, so they can be passed to the wrapper (the user that is pythonizing a class only deals with the getter).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10341#issuecomment-1094750476:346,clear,clear,346,https://root.cern,https://github.com/root-project/root/pull/10341#issuecomment-1094750476,2,['clear'],['clear']
Usability,"Thanks for the review! No, there is no unit test for this IO rule, but I tested it locally. I don't think it's worth it to include a test for this simple IO rule, because such a test also always needs a file storing an object of the old class version, and I think it's not good to have too many binary files in the repository without strong reasons.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10909#issuecomment-1181836400:147,simpl,simple,147,https://root.cern,https://github.com/root-project/root/pull/10909#issuecomment-1181836400,2,['simpl'],['simple']
Usability,"Thanks for the review!. > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14074#issuecomment-1818475645:186,simpl,simplicity,186,https://root.cern,https://github.com/root-project/root/pull/14074#issuecomment-1818475645,4,['simpl'],"['simplicity', 'simplifying']"
Usability,"Thanks for the review!. The only tutorial for that feature silently gives wrong results: IMO this is a bugfix, not a new feature. Also considering that there are people who would clearly benefit from this being in 6.32 (analysis grand challenge).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15173#issuecomment-2044568142:179,clear,clearly,179,https://root.cern,https://github.com/root-project/root/pull/15173#issuecomment-2044568142,2,['clear'],['clearly']
Usability,"Thanks for these changes. I apologise for coming back to them so late. ; I would like to hear also what @pcanal has to say about the mechanics of the code, however the change seems a net improvement with respect to the current situation. I would like to start pointing out a few aspects of the PR which could be improved before merging (if consensus in the review is reached):; - There is one test failure, on all platforms but windows: do you need help to figure out why the test is failing?; - The number of commits seem to high, can they be squashed together into fewer commits (one commit) with clear commit messages?; - There is no test for the functionality: can one or more tests be added in roottest? If you need some examples, we can dig them out for you (in the `root/meta/` directory one should have plenty of examples)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14813#issuecomment-2038169206:599,clear,clear,599,https://root.cern,https://github.com/root-project/root/pull/14813#issuecomment-2038169206,2,['clear'],['clear']
Usability,"Thanks for this quick patch. We have observed similar issues also at other places of the code, when calling TClass::New(), but we always found simple workarounds there as well. Together with #6535 (where we have a patch as well) these were the *only* issues in the entire H1@HERA analysis packages when going from ROOT5.34 to ROOT6.20. albeit it was initially developed for ROOT2.25 and CINT. Congrats to the ROOT developers!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6670#issuecomment-714299930:143,simpl,simple,143,https://root.cern,https://github.com/root-project/root/issues/6670#issuecomment-714299930,2,['simpl'],['simple']
Usability,Thanks for you PR. I put it in. May be it would be nice to have small examples showing how to use these new features ? We could refer to them in the ref guide of THStack and TMultiGraph,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/371#issuecomment-282737620:153,guid,guide,153,https://root.cern,https://github.com/root-project/root/pull/371#issuecomment-282737620,1,['guid'],['guide']
Usability,"Thanks for your PR, @guiguem !. After a discussion within the team we decided not to apply it for the following reasons:; - RooFit is not even enabled by default. If we reconsider that ROOT should really be built with RooFit then we will revisit your PR (or something similar).; - it is fairly trivial to add `RooFit` to CMake's `find_package` https://root.cern.ch/how/integrate-root-my-project-cmake / to add a `-lRooFit` behind `root-config --libs`, so adding this to our build system doesn't appear to be a huge simplification for users. I hope this explanation reduces a bit the frustration that our decision might cause - we do appreciate your suggestion especially as it's a PR!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1002#issuecomment-330508193:515,simpl,simplification,515,https://root.cern,https://github.com/root-project/root/pull/1002#issuecomment-330508193,2,['simpl'],['simplification']
Usability,"Thanks for your proposal! We won't need `std::shared_ptr<std::vector<Double_t>>` as datatype; `std::vector<Double_t>` would be enough as this allows cheap move operations. Then again, so does `Double_t *`. Did you consider simply implementing a move operator for `TGraph`?. We must avoid all backward incompatible interface changes. I didn't look in detail but the amount of code changes here suggests that this isn't the case for this draft?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9610#issuecomment-1056797487:223,simpl,simply,223,https://root.cern,https://github.com/root-project/root/pull/9610#issuecomment-1056797487,2,['simpl'],['simply']
Usability,"Thanks for your report! I think much of this would cause churn without much benefit on the users' side: they would simply hate us for littering them with deprecation warnings that they just don't care about. Instead, we moved away from these types in new code (RDataFrame, RNTuple, etc); new tutorials are also just using standard types. I don't know whether anything but this will be constructive / productive enough. What are your thoughts?. I'd certainly like to use std features for the underlying types / values for what's in Rtypes as much as possible, instead of rolling out own. But that seems orthogonal.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12208#issuecomment-1413764933:115,simpl,simply,115,https://root.cern,https://github.com/root-project/root/issues/12208#issuecomment-1413764933,2,['simpl'],['simply']
Usability,"Thanks to @bellenot for providing the Windows part. I have squashed it into the main commit and added a `Co-Authored-By: Bertrand Bellenot @bellenot` line (hope, that's the best way to give credit?). > BTW, do we have any specific test for this?. If I should write tests (sounds like everything else is fine), I could need a small bit of guidance (could you point me at a test, that I could learn from / extend?). Also rebased.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7031#issuecomment-801033691:338,guid,guidance,338,https://root.cern,https://github.com/root-project/root/pull/7031#issuecomment-801033691,4,"['guid', 'learn']","['guidance', 'learn']"
Usability,"Thanks! An idea: the KHelpAbout in the browsers, it might be helpful to replace with a simple TGLabel containing gHelpAbout in a Tgtab e.g. or tgwindow",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15056#issuecomment-2042007736:87,simpl,simple,87,https://root.cern,https://github.com/root-project/root/pull/15056#issuecomment-2042007736,2,['simpl'],['simple']
Usability,"Thanks!. For the tab-completion, I checked and it looks it could be done in a more or less simple way I guess (pseudocode):. ```; fCommand->Connect(""TabPressed()"", ""TGCommandPlugin"", this, ""HandleTab()"");. void TGCommandPlugin::HandleTab(); {; const std::string line = fCommandBuf->GetString();; const size_t cur = fCursorIX; //; std::vector<string> result;; gInterpreter->CodeComplete(line, cur, result);; for(auto& res : result); {; //todo append to output window; }; }; ```; Note: inspired by TClingTabCompletion::Complete function.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7180#issuecomment-779807875:91,simpl,simple,91,https://root.cern,https://github.com/root-project/root/issues/7180#issuecomment-779807875,2,['simpl'],['simple']
Usability,Thanks!. The changes are clear enough that I dare merge them without bothering the code owners. :-),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6253#issuecomment-680846985:25,clear,clear,25,https://root.cern,https://github.com/root-project/root/pull/6253#issuecomment-680846985,2,['clear'],['clear']
Usability,"Thanks, @egpbos and @jspaaks ! Validation succeeds now. > suggest to add a GitHub Actions workflow. AFAICT we need this to be integrated with our release workflow. Once that's a GH Action we can also migrate the `CITATION.cff` generation and validation there. I *think* it's fairly hard to break the file given that it's generated by a script; I also dislike the pile of dependencies of `cffconvert` for a simple thing like validation, IMO it's too heavy to add it to the script producing `CITATION.cff`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8626#issuecomment-876311455:406,simpl,simple,406,https://root.cern,https://github.com/root-project/root/pull/8626#issuecomment-876311455,2,['simpl'],['simple']
Usability,"Thanks, @pcanal. I will move the code. Hopefully after that we can merge. I also had a request to test this “across the ocean”, so if you could try to compare before/after by running something simple using data at CERN (or let me know of a file publicly avaiable via XRootD in Fermilab or other location in the US), I would appreciate it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11644#issuecomment-1308989870:193,simpl,simple,193,https://root.cern,https://github.com/root-project/root/pull/11644#issuecomment-1308989870,2,['simpl'],['simple']
Usability,"Thanks, @vgvassilev!!! Once the problem was identified as the issue with those paths, a very nice and simple solution became obvious.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7881#issuecomment-900730523:102,simpl,simple,102,https://root.cern,https://github.com/root-project/root/issues/7881#issuecomment-900730523,2,['simpl'],['simple']
Usability,"Thanks, @vgvassilev. Just to be clear, since I didn't find branches named `llvm13`, you mean these?. * https://github.com/vgvassilev/llvm/tree/cling-patches-llvm13; * https://github.com/vgvassilev/clang/tree/cling-patches-llvm13; * https://github.com/vgvassilev/cling/tree/cling-patches-llvm13",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1186244868:32,clear,clear,32,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1186244868,2,['clear'],['clear']
Usability,"Thanks, Philippe. I added that information to the old thread on the forum. I also found what you were saying in the manual (so it is present somewhere in the documentation, though I usually read the reference guide).; About my initial feature request: I think this is a continuous wish of users to have a vector for ints (and other types) when you have a vector for doubles. So it's up to you whether you add this support or not (me personally no longer need that).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8517#issuecomment-867417636:209,guid,guide,209,https://root.cern,https://github.com/root-project/root/issues/8517#issuecomment-867417636,2,['guid'],['guide']
Usability,"Thanks. I do not understand. I proposed a simple reproducer that illustrates a bad user experience, very bad, that makes the system unusable. What is the strategy to fix this bug?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15474#issuecomment-2120092013:42,simpl,simple,42,https://root.cern,https://github.com/root-project/root/issues/15474#issuecomment-2120092013,4,"['simpl', 'user experience']","['simple', 'user experience']"
Usability,"Thanks. We have slightly different systems and configs; ```; System: Darwin-24.1.0; ROOT Platform: macosx; ROOT Architecture: macosxarm64; Processor: 8 core Apple M2 (arm64); Build type: Release; Install path: /install/; Compiler: AppleClang 16.0.0.16000026; C++ standard: 20; Compiler flags:; -- ; - C: -m64 -pipe -W -Wall -fsigned-char -fno-common -Qunused-arguments -pthread; - C (build type specific): -O3 -DNDEBUG; - C++: -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Wall -Woverloaded-virtual -fsigned-char -fno-common -Qunused-arguments -pthread -stdlib=libc++; - C++ (build type specific): -O3 -DNDEBUG; -- Linker flags:; - Executable: -mmacosx-version-min=15.1; - Module: ; - Shared: ; ```. For the moment, I cannot yet reproduce the issue on our devel/build nodes. As you saw, I added in the loop our Apple and graphics expert in the loop. Do you manage to start a browser when starting root in batch mode, i.e. `root -b` (as a test, of course it's not overly useful for the user experience)?; I can propose a temporary workaround to unblock you: could you try to boot root enabling web graphics (still experimental): `root --web`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16428#issuecomment-2350896986:1153,user experience,user experience,1153,https://root.cern,https://github.com/root-project/root/issues/16428#issuecomment-2350896986,2,['user experience'],['user experience']
Usability,"Thanks. Would such a PR be likely to be accepted? I programmed other things involving histograms two years ago and did not get further feedback / revision (https://github.com/root-project/root/pull/8546) on how to proceed, thus I am not sure if I should embark in new PRs at the moment, until the others are solved.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10660#issuecomment-1464032410:135,feedback,feedback,135,https://root.cern,https://github.com/root-project/root/issues/10660#issuecomment-1464032410,2,['feedback'],['feedback']
Usability,"Thanks. Yes, that's what would be needed. I didn't try it with ROOT but it works well with all my other Cmake projects. It generates a .qch file that one can then import as Help Guide within QtCreator; See https://www.creatis.insa-lyon.fr/~grenier/?p=273",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-901736698:178,Guid,Guide,178,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-901736698,1,['Guid'],['Guide']
Usability,"That are our coding conventions which can be enforced with clang-format and our configuration file which is located in the root top directory (.clang-format). Before proceeding with anything such as formatting, more doxygen documentation and the tutorial macro I would wait for @lmoneta and @couet to give you feedback. This will probably happen next week because of the Easter break.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/515#issuecomment-295371138:310,feedback,feedback,310,https://root.cern,https://github.com/root-project/root/pull/515#issuecomment-295371138,1,['feedback'],['feedback']
Usability,"That is a good point that I overlooked. The case I was thinking of instead was the question of distinct files opened by distinct threads whose objects might reference the file. [In the case you describe, it is not clear how much it matters which of the TFile instance with the same uuid is being used when following a reference (as they are semantically equivalent] [Actually it might matter for lifetime issues ... ;( ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10318#issuecomment-1090957110:214,clear,clear,214,https://root.cern,https://github.com/root-project/root/pull/10318#issuecomment-1090957110,2,['clear'],['clear']
Usability,"That is not quite surprising as the problem is likely to do with some type of schema evolution (particularly sensitive to this set of change are map/multimap where the key or value is an enum). In addition to having a simpler example, you could consider trying out https://github.com/root-project/root/pull/10230 which contains all the fixes I have been making (and is currently passing all but one of the tests I have/examples).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10282#issuecomment-1086030662:218,simpl,simpler,218,https://root.cern,https://github.com/root-project/root/issues/10282#issuecomment-1086030662,2,['simpl'],['simpler']
Usability,That was already discussed many time in the past. The problem is that doing that de pdf and ps files generated will be super huge and people will not realize it if they are running in batch. Some people had disk saturated. Col2 was explicitly created for that. So if we do what we suggest we do exactly what we wanted to avoid. All that is explained in de reference guide,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6822#issuecomment-728877631:366,guid,guide,366,https://root.cern,https://github.com/root-project/root/issues/6822#issuecomment-728877631,2,['guid'],['guide']
Usability,"That will be hard to respect, because that means unless we introduce a new `testsupport=OFF` configuration flag, gtest would always be a dependency of ROOT with `-fail-on-missing=ON` then. I don't see at the moment how I can respect all of these constraints:. 1. Keep configuration simple by not introducing new build flags; 2. Make `ROOT_ADD_GTEST` fully usable in downstream code even if ROOT was not built with unit tests; 3. Don't add `gtest` as an unavoidable build dependency of ROOT if you have `fail-on-missin=ON`; 4. Respect `fail-on-missing`. Which of these constraints should be relaxed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16612#issuecomment-2396463790:282,simpl,simple,282,https://root.cern,https://github.com/root-project/root/issues/16612#issuecomment-2396463790,4,"['simpl', 'usab']","['simple', 'usable']"
Usability,"That's a nice demo, @dpiparo, and how it's commonly done. Or you can just copy the collection, if it's not too expensive. As for the actual issue: it should be clear that reader views should not be sortable. We can't make this explicitly clear with `const` because ROOT and it's users are not very consistent with that keyword, as @Axel-Naumann said. So there is no solution here - ROOT and C++ just allow you to shoot yourself in the foot :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13314#issuecomment-2046122952:160,clear,clear,160,https://root.cern,https://github.com/root-project/root/issues/13314#issuecomment-2046122952,4,['clear'],['clear']
Usability,"That's an option. Inevitably, we will need some common infrastructure which is ROOT-specific for the root.git test and we will have to solve this sooner or later. For the particular tests we are refactoring, I'd like to keep them in root.git for the usual reasons such as they run fast and are part of the commit history which makes changes a lot clearer. In that case I will have to keep the code duplication or drop the checks for diagnostics.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5297#issuecomment-615066525:347,clear,clearer,347,https://root.cern,https://github.com/root-project/root/pull/5297#issuecomment-615066525,2,['clear'],['clearer']
Usability,That's great! Out of curiousity: How does the error message look like for `Filter('x = 0')`?\; And I don't think that this breaks any existing code. Writing back to the input arguments is clearly a super weird thing in RDF and would rely on implementation details that are not visible to the user.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6526#issuecomment-702072629:188,clear,clearly,188,https://root.cern,https://github.com/root-project/root/pull/6526#issuecomment-702072629,2,['clear'],['clearly']
Usability,"That's right, I could (and did) use a system libzmq, except to build the ppoll file, I need to include a few headers from the libzmq source which are not distributed with Linux packages. Previously, I had included those headers with RooFitZMQ. I ripped them out again, because with the built-in they became unnecessary. Edit: indeed, patching is probably not the right word, it's an addition, but it uses libzmq internal headers. Hope I'm making myself clear, sorry for the confusion.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8385#issuecomment-870471097:453,clear,clear,453,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-870471097,2,['clear'],['clear']
Usability,That's the user's guide... it is deprecated ... you should not use it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10722#issuecomment-1151073680:18,guid,guide,18,https://root.cern,https://github.com/root-project/root/issues/10722#issuecomment-1151073680,2,['guid'],['guide']
Usability,"The PR speeds up by factors (5x-7x) the simple reproducer of the issue we now have thanks to @sawenzel : ; ```.cpp; // Inspired by Alice production code, extracted from the surrounding context; #include ""TF1.h"". void Foo(int N) {; double am = 90;; double awidth = 1;; for (int i = 0; i < N; ++i) {; static TF1 rbw(""rbw"", ""pow([1],2)*pow([0],2)/(pow(x*x-[0]*[0],2)+pow(x*x*[1]/[0],2))"", -10, 10);; rbw.SetRange(am - 5 * awidth, am + 5 * awidth);; rbw.SetParameter(0, am);; rbw.SetParameter(1, awidth);; am = rbw.GetRandom();; if (am <-100000000) std::cout << am << std::endl; // to avoid compiler optimisations; }; }. int main(); {; Foo(1000);; return 0;; }; ```; The code is faster because the fast code path is taken in the PluginHandler because the right type is used in the GSLIntegratorPlugin (unsigned long, via the size_t typedef), and not just a compatible one (unsigned int).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15579#issuecomment-2161409421:40,simpl,simple,40,https://root.cern,https://github.com/root-project/root/issues/15579#issuecomment-2161409421,4,['simpl'],['simple']
Usability,"The R Users' Guide is generated by doxygen https://root.cern.ch/doc/master/md_bindings_r_doc_users-guide_ROOTR_Users_Guide.html; It is referenced in the INPUT string in Doxyfile only via ""../../bindings/r/"". So its name does not matter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5678#issuecomment-633394232:13,Guid,Guide,13,https://root.cern,https://github.com/root-project/root/pull/5678#issuecomment-633394232,1,['Guid'],['Guide']
Usability,"The ROOT user guide is consider as frozen and the ""d"" URL should not be considered. This ia a copy of the old web site.; The new web site is: https://root.cern",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7279#issuecomment-785834714:14,guid,guide,14,https://root.cern,https://github.com/root-project/root/issues/7279#issuecomment-785834714,2,['guid'],['guide']
Usability,The User's will not be update in the future. It is not referenced form the new web site. The base of the Doc is the Reference Guide now and the Manual Is an overview helping to navigate into it. Se the explanation here: https://root.cern/manual/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7284#issuecomment-785861664:126,Guid,Guide,126,https://root.cern,https://github.com/root-project/root/issues/7284#issuecomment-785861664,1,['Guid'],['Guide']
Usability,"The [documentation](https://cmake.org/cmake/help/latest/command/enable_language.html) says:. > Enable a language (CXX/C/Fortran/etc); >; >**enable_language(<lang> [OPTIONAL] )**; >This command enables support for the named language in CMake. This is the same as the; >project command but does not create any of the extra variables that are created by the; >project command. Example languages are CXX, C, Fortran.; >; >This command must be called in file scope, not in a function call. Furthermore, **it must; >be called in the highest directory common to all targets using the named language**; >directly for compiling sources or indirectly through link dependencies. It is simplest to; >enable all needed languages in the top-level directory of a project.; >; >The **OPTIONAL** keyword is a placeholder for future implementation and **does not currently work**. So, should we just add this logic directly into the top `CMakeLists.txt` file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/891#issuecomment-325334622:674,simpl,simplest,674,https://root.cern,https://github.com/root-project/root/pull/891#issuecomment-325334622,2,['simpl'],['simplest']
Usability,"The `#ifndef __CLING__` was really needed, you can easily double-check. About whether we should have `main`s in the tutorials: `git grep 'int main' $ROOTSYS/tutorials` tells me I'm not the first one to think it's useful :smile: If we want a general guideline on this I can bring up the topic at the next team meeting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6337#issuecomment-691140036:249,guid,guideline,249,https://root.cern,https://github.com/root-project/root/pull/6337#issuecomment-691140036,2,['guid'],['guideline']
Usability,The `Histo1D` case comes from a pythonization that replaces the original proxy method by a Python function. Perhaps the same pythonization could take care of forwarding to the original method when possible. What is not clear is why `Count` and `Report` do not print docs.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9023#issuecomment-925569986:219,clear,clear,219,https://root.cern,https://github.com/root-project/root/issues/9023#issuecomment-925569986,2,['clear'],['clear']
Usability,"The attached image shows a summary of differences on KNL with 128 threads. Notice how the wait time is significantly reduced from 1485.7s to 1105s. There are also 2936 less waits than before. CPU time of all threads is reduced by ~50s. These are not hugely visible in real runtime, because we are limited by I/O to the disk, essentially, but it would be clearly visible if I/O ceases to be the main bottleneck. The two figures on the bottom show that the time during which the threads run is shorter after the changes introduced in this PR. For reference, the running time without using VTune is about 40s. ![screenshot](https://user-images.githubusercontent.com/249404/27963876-988c7862-6336-11e7-9598-e48c4c760a5e.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964106-678b94b8-6337-11e7-9464-5cc1f4312bd1.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964127-7ed03c78-6337-11e7-8832-7c61643b4939.png)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/747#issuecomment-313710392:354,clear,clearly,354,https://root.cern,https://github.com/root-project/root/pull/747#issuecomment-313710392,1,['clear'],['clearly']
Usability,The best solution is to simply remove the ClassImp which are deprecated and offer very little value added. Another solution is to simply add an empty line about of the two ClassImp so that there are not on the same line number.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10948#issuecomment-1195998820:24,simpl,simply,24,https://root.cern,https://github.com/root-project/root/issues/10948#issuecomment-1195998820,4,['simpl'],['simply']
Usability,"The changes to the class still hold valid, I was held back by a strange behaviour in `clang-format`. Will resume work asap, thanks",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3962#issuecomment-509963855:106,resume,resume,106,https://root.cern,https://github.com/root-project/root/pull/3962#issuecomment-509963855,2,['resume'],['resume']
Usability,"The code has been cleaned, the requested changes done and the number of commits reduced and with better messages. This PR is far from being finished, but these latest changes should make following development easier and the addition of new vectorized implementations more clear.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/655#issuecomment-325232794:272,clear,clear,272,https://root.cern,https://github.com/root-project/root/pull/655#issuecomment-325232794,1,['clear'],['clear']
Usability,"The code in TTree is known to not be ""exception safe"" (it was written before exceptions were usable in practice), so it should never throw any exception . But also it should not interfere and should not change the return value of GetEntry. If I understood correctly and just catching the exception is changing the return value, could you confirm that it does so ""also"" in C++?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9154#issuecomment-951163261:93,usab,usable,93,https://root.cern,https://github.com/root-project/root/issues/9154#issuecomment-951163261,2,['usab'],['usable']
Usability,"The code inlining mechanism uses the doxygen command [`\include`](https://www.doxygen.nl/manual/commands.html#cmdinclude). This command does not allow to specify the type of code to be inlined (C++ or python) the only two options available are `doc` and `lineno`. I guess the ""code"" is considered as C/C++ that's why the highlighting is not correct for that python example. I'll try to find a solution. The simplest would have been an option `.py` like for the `\code` doxygen command (see help). I tried but it does not work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12851#issuecomment-1558888571:407,simpl,simplest,407,https://root.cern,https://github.com/root-project/root/issues/12851#issuecomment-1558888571,2,['simpl'],['simplest']
Usability,"The code looks fine to me. I don't think using vector::reserve is needed in this case. . It would be nice to test the performance in a complex fix which takes some time and uses heavily the cache, The tutorial are maybe too simple and the fitting is too fast. ; If you can maybe simplify your workspace and make a standalone running example would be great. ; Also, did you observe a substantial performance penalty when creating the std::vector in recalculateCache instead of having as a data member of the class ? . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/116#issuecomment-293337111:224,simpl,simple,224,https://root.cern,https://github.com/root-project/root/pull/116#issuecomment-293337111,2,['simpl'],"['simple', 'simplify']"
Usability,The command I'm running was simply `root` to get the interactive prompt. The full output of trying to run `1+2` is below:. ```log; $ root -b -q -x -e 1+2; input_line_1:1:2: fatal error: module 'libc' imported by AST file '/home/cburr/mambaforge/conda-bld/root_1609268594446/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh/lib/std.pcm' found in a different module map file (/home/cburr/mambaforge/conda-bld/root_1609268594446/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh/etc/cling/libc.modulemap) than when the importing AST file was built (/home/cburr/mambaforge/conda-bld/root_1609268594446/work/build-dir/etc/cling/libc.modulemap); #include <new>; ^; input_line_1:1:2: note: imported by module 'std' in '/home/cburr/mambaforge/conda-bld/root_1609268594446/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh/lib/std.pcm'; Warning in cling::IncrementalParser::CheckABICompatibility():; Failed to extract C++ standard library version.; 'at_quick_exit' not defined; <<< cling interactive line includer >>>: fatal error: module file '/home/cburr/mambaforge/conda-bld/root_1609268594446/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh/lib/libc.pcm' is out of date and needs to be rebuilt; Failed to load module libc; Failed to load module std; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-752250076:28,simpl,simply,28,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076,2,['simpl'],['simply']
Usability,The commit message seems pretty clear to me. Can you suggest something?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12276#issuecomment-1427114379:32,clear,clear,32,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1427114379,2,['clear'],['clear']
Usability,"The compilation error seems to be due to a mismatch between the toolchain that was used to compile ROOT and the toolchain you are using to compile your program (e.g. different glibc version). I don't know enough about nixOS to suggest a fix. The massif output shows little memory usage (`mem_heap_B=72938`). Can you try using `root.exe` instead of `root` as the command? By removing one layer of indirection we might help massif see things properly (but of course if we can run on a compiled program rather than through the interpreter it makes everything simpler). Cheers,; Enrico",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9087#issuecomment-951644988:556,simpl,simpler,556,https://root.cern,https://github.com/root-project/root/issues/9087#issuecomment-951644988,2,['simpl'],['simpler']
Usability,"The current idea is the following: . 1. For algorithms using only pdf: ; ```; TUnuranContDist dist(pdf); ; ```; 2. For algorithm using pdf + its derivative: ; ```; TUnuranContDist dist(pdf, &dpdf); ; ```; 3. For algorithms using pdf + derivative + pdf: ; ```; TUnuranContDist dist(pdf, &dpdf); ; dist.SetCdf(cdf);; ```; 4. For algorithms using only the cdf: ; ```; TUnuranContDist dist(); ; dist.SetCdf(cdf);; ```. I agree cases 3 and 4 are not very nice, also in case 4 one is forced to have the input functions cloned. ; I would prefer to not change the existing constructor for not breaking the backward compatibility. ; What about adding a constructor like this one: ; ```; TUnuranContDist dist(const ROOT::Math::IGenFunction * pdf, ; ROOT::Math::IGenFunction * dpdf, ; ROOT::Math::GenFunction * cpdf, bool isLogPdf = false, bool copyFunc = false); ; ```; and similar for the TF1 case ? . Thank you for the feedback !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8196#issuecomment-849462802:911,feedback,feedback,911,https://root.cern,https://github.com/root-project/root/issues/8196#issuecomment-849462802,2,['feedback'],['feedback']
Usability,"The direct reason of the failure seems to be that, at least when using SWAN, the ROOT installation is somehow ill-formed. This is a simpler reproducer that just uses Spark primitives to try to run the `root-config` command on the worker. ![image](https://github.com/root-project/root/assets/15638895/f53c6803-7e0d-44cc-80be-160f4065af9c). In all fairness, I don't understand the reason to call into that command in the first place, which happens [here](https://github.com/root-project/root/blob/07872d92719e3682213d732956a32f16be5eacf3/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/__init__.py#L47), so I will investigate if that is needed at all.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13798#issuecomment-1745696812:132,simpl,simpler,132,https://root.cern,https://github.com/root-project/root/issues/13798#issuecomment-1745696812,2,['simpl'],['simpler']
Usability,The documentation is correct but you should use the one corresponding to your ROOT version.; See at the top of https://root.cern.ch/doc/master/classRooCategory.html you can change the ROOT version.; Choose 6.18 and you will get the right documentation corresponding to ROOT 6.18. The ROOT reference guide has several occurrences : https://root.cern/reference/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6625#issuecomment-708509017:299,guid,guide,299,https://root.cern,https://github.com/root-project/root/issues/6625#issuecomment-708509017,2,['guid'],['guide']
Usability,"The fact that `wait_for_workers` waits forever looks to me like the Dask job is never actually started. You should double check that a simple Dask application with the same config but doing something else unrelated to RDF is working. Let's see, something like this should suffice (inspired by the dask [docs](https://examples.dask.org/delayed.html) and your reproducer):; ```python; import time; import random. from dask import delayed; from dask.distributed import Client; from dask_jobqueue import HTCondorCluster. cluster = HTCondorCluster(cores=1, processes=1, memory=""1GB"", disk=""0.1GB"", job_extra={""jobflavour"": ""espresso""}); cluster.scale(jobs=1); client = Client(cluster). # Try with and without this; client.wait_for_workers(1). def inc(x):; time.sleep(random.random()); return x + 1. def dec(x):; time.sleep(random.random()); return x - 1. def add(x, y):; time.sleep(random.random()); return x + y. inc = delayed(inc); dec = delayed(dec); add = delayed(add). x = inc(1); y = dec(2); z = add(x, y). print(f""Result is: {z.compute()}""); ```. Coming back to RDF, the `npartitions` parameter corresponds to how many distributed tasks will be sent to the Dask scheduler. Supposing you know something about how many resources you have or the layout of your ROOT dataset, you could set this manually in the RDataFrame constructor like; ```python; df = RDataFrame(""treename"",""filename.root"",daskclient=client,npartitions=NPARTITIONS); ``` ; A good parallelisation can often be obtained when the number of partitions is roughly 3x the amount of cores you can use.; UPDATE:. > in particular I'm interested in using Dask's adaptive worker management, so that the exact number of submitted jobs is not fixed a priori but automatically adapts to the workload... Sounds good, then the `npartitions` parameter could be adjusted based on how many TTree clusters you have in your dataset. Roughly one task every 4-5 clusters should be a good starting point.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9429#issuecomment-992602348:135,simpl,simple,135,https://root.cern,https://github.com/root-project/root/issues/9429#issuecomment-992602348,2,['simpl'],['simple']
Usability,The failing part is:; ```; /Users/ktf/src/sw/osx_arm64/AliEn-Runtime/v2-19-le-local1/include/ApMon.h:59:9: note: expanding this definition of '_POSIX_VERSION'; #define _POSIX_VERSION 200101L; ^; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:79:9: note: other definition of '_POSIX_VERSION'; #define _POSIX_VERSION 200112L; ^; ```; One of the two might be coming (indirectly) through a precompiled module (associated with a dictionary). It is not clear why `ApMon.h` does not include `unistd.h` in the first place.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12762#issuecomment-1535382726:520,clear,clear,520,https://root.cern,https://github.com/root-project/root/issues/12762#issuecomment-1535382726,2,['clear'],['clear']
Usability,The first large gap (just before 4s) seems longer in the 'after'. Do we know where the other threads are stopped (and what the running thread does) both in the before and the after. Do we know where (some of) the gaps are stopped in the main regime?. > TBufferMerger random number generation test on my machine (Core i7 6700). Is that with or without the lock removed (both test are needed to get a clear view).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1251#issuecomment-343556195:399,clear,clear,399,https://root.cern,https://github.com/root-project/root/pull/1251#issuecomment-343556195,2,['clear'],['clear']
Usability,The fix in simple: we should not use the keyword `\brief` it is not needed.; If That's ok wit you I can make a PR to remove it .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6433#issuecomment-700811492:11,simpl,simple,11,https://root.cern,https://github.com/root-project/root/issues/6433#issuecomment-700811492,2,['simpl'],['simple']
Usability,"The fix is 'simple':; ```; diff --git a/core/metacling/src/TCling.cxx b/core/metacling/src/TCling.cxx; index 7fe65825ea..656396ffcd 100644; --- a/core/metacling/src/TCling.cxx; +++ b/core/metacling/src/TCling.cxx; @@ -6646,9 +6646,13 @@ void TCling::RefreshClassInfo(TClass *cl, const clang::NamedDecl *def, bool alia; cl->ResetCaches();; TClass::RemoveClassDeclId(cci->GetDeclId());; if (def) {; - // It's a tag decl, not a namespace decl.; - cci->Init(*cci->GetType());; - TClass::AddClassToDeclIdMap(cci->GetDeclId(), cl);; + if (cci->GetType()) {; + // It's a tag decl, not a namespace decl.; + cci->Init(*cci->GetType());; + TClass::AddClassToDeclIdMap(cci->GetDeclId(), cl);; + } else {; + Error(""RefreshClassInfo"", ""Should not need to update the classInfo a non type decl: %s"", oldDef->getNameAsString().c_str());; + }; }; }; } else if (!cl->TestBit(TClass::kLoading) && !cl->fHasRootPcmInfo) {; ```; ```; root [0] namespace std { namespace Detail {} }; root [1] auto c = TClass::GetClass(""Detail""); (TClass *) 0x12ef3d7b0; root [2] namespace Detail {}; Error in <TInterpreter::RefreshClassInfo>: Should not need to update the classInfo a non type decl: Detail; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8828#issuecomment-2372486833:12,simpl,simple,12,https://root.cern,https://github.com/root-project/root/issues/8828#issuecomment-2372486833,2,['simpl'],['simple']
Usability,"The fix seems fine (we are indeed using `fail-on-missing` by default through the spack package). It is still not entirely clear in advance which features require connectivity, and which don't (or even what to do in advance in order to pre-populate the FetchContent locations). There is also confusion with the names of the features: `builtin_` would lead one to think it's provided with the source tree but it isn't, except for `builtin_openui5` where it is the opposite.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11603#issuecomment-2102644827:122,clear,clear,122,https://root.cern,https://github.com/root-project/root/issues/11603#issuecomment-2102644827,2,['clear'],['clear']
Usability,"The fix works in my standalone ROOT test. To test the integration with DD4hep and the LHCb detector, the simplest is to add it to the SFT nightlies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11272#issuecomment-1232170822:105,simpl,simplest,105,https://root.cern,https://github.com/root-project/root/issues/11272#issuecomment-1232170822,2,['simpl'],['simplest']
Usability,The following PR makes clear THTML is legacy code:; https://github.com/root-project/root/pull/7312,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7295#issuecomment-787793209:23,clear,clear,23,https://root.cern,https://github.com/root-project/root/issues/7295#issuecomment-787793209,2,['clear'],['clear']
Usability,"The following custom Streamer works around the issue:; ```; template <typename Flags>; inline void CalArray<Flags>::Streamer(TBuffer &R__b); {; // Stream an object of class CalArray<PadFlags>. if (R__b.IsReading()) {; UInt_t R__s, R__c;; Version_t R__v = R__b.ReadVersion(&R__s, &R__c);; if (R__v <= 3) {; {; UInt_t start, count;; Version_t vers = R__b.ReadVersion(&start, &count);. std::vector<int> R__stl;; R__stl.clear();; int R__n;; R__b >> R__n;; R__stl.reserve(R__n);; for (int R__i = 0; R__i < R__n; R__i++) {; Int_t readtemp;; R__b >> readtemp;; R__stl.push_back(readtemp);; }; R__b.CheckByteCount(start, count, ""stl collection of enums"");. mFlags.clear();; auto data = reinterpret_cast<unsigned short*>(R__stl.data());; constexpr size_t delta = sizeof(int)/sizeof(Flags);; for(int i = 0; i < R__n; ++i); mFlags.push_back(static_cast<PadFlags>( data[i] ));; }; int tmp;; R__b >> tmp;; mPadSubset = static_cast<PadSubset>(tmp);. R__b.CheckByteCount(R__s, R__c, CalArray::IsA());; } else {; R__b.ReadClassBuffer(CalArray<Flags>::Class(),this, R__v, R__s, R__c);; }; } else {; R__b.WriteClassBuffer(CalArray<Flags>::Class(),this);; }; }; ```; [Call to `ReadClassBuffer` was corrected to add missing parameters]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16312#issuecomment-2334928339:416,clear,clear,416,https://root.cern,https://github.com/root-project/root/issues/16312#issuecomment-2334928339,4,['clear'],['clear']
Usability,"The functionality of Cache is all there. The only issue remaining is caching a cached TDF (let's call this latter ""A"") without destroying the cache of the cached (meaning ""A""). This is a side effect of the optimisation in place to deliver data with zero-copies to transformations and actions requesting it. As for testing, checking the caching works with IMT on needs to be done. The extra mile would consist in checking statically that T does not have a copy constructor and react. How to react is not completely clear to me yet. There are two ways perhaps to solve this problem: 1. Act on the container, keeping in mind that the containers which form the cache must support random access for MT execution. 2. Act on the contained type, wrapping objects in some way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1056#issuecomment-332682497:514,clear,clear,514,https://root.cern,https://github.com/root-project/root/pull/1056#issuecomment-332682497,2,['clear'],['clear']
Usability,"The good news is that I have been able to reproduce your success with our build of 6.24/04 and 6.24/06. Unfortunately, I was also able to reproduce our failures with 6.28/00-rc1 in the same environment. I'd be grateful if you could turn your attention to investigating why the fix does not work for more recent ROOT source. BTW: in order to use Ninja, one needs simply to execute `setup ninja` before executing the CMake command.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861#issuecomment-1401209723:362,simpl,simply,362,https://root.cern,https://github.com/root-project/root/issues/10861#issuecomment-1401209723,2,['simpl'],['simply']
Usability,"The idea for this change comes from my own experiments with upgrading LLVM during my time as student worker (and I can't reliably tell if I wrote the code during paid hours or in my free time, hence the funny list of authorships). It would allow to drop one possibly contentious patch for Clang, so I wanted to get the change out for feedback. One thing I currently don't understand are two test failures in `gtest-math-mathcore-test-CladDerivatorTests` and `gtest-hist-hist-test-TFormulaGradientTests` - but only with the second commit that removes the then unneeded patch. I can make the tests pass again by adding back only the `WasReplaced` bit:; ```diff; diff --git a/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h b/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; index 403b88ac3a..5e1581f098 100644; --- a/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; +++ b/interpreter/llvm/src/tools/clang/include/clang/AST/Stmt.h; @@ -131,7 +131,8 @@ protected:; ; unsigned : NumStmtBits;; ; - unsigned NumStmts : 32 - NumStmtBits;; + unsigned WasReplaced : 1;; + unsigned NumStmts : 32 - (NumStmtBits + 1);; ; /// The location of the opening ""{"".; SourceLocation LBraceLoc;; @@ -1328,6 +1329,7 @@ public:; explicit CompoundStmt(SourceLocation Loc); : Stmt(CompoundStmtClass), RBraceLoc(Loc) {; CompoundStmtBits.NumStmts = 0;; + CompoundStmtBits.WasReplaced = 0;; CompoundStmtBits.LBraceLoc = Loc;; }; ; diff --git a/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp b/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; index 0a4d403106..cc8c6888b8 100644; --- a/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; +++ b/interpreter/llvm/src/tools/clang/lib/AST/Stmt.cpp; @@ -293,6 +293,7 @@ CompoundStmt::CompoundStmt(ArrayRef<Stmt *> Stmts, SourceLocation LB,; SourceLocation RB); : Stmt(CompoundStmtClass), RBraceLoc(RB) {; CompoundStmtBits.NumStmts = Stmts.size();; + CompoundStmtBits.WasReplaced = 0;; setStmts(Stmts);; CompoundStmtBits.LBraceLoc = LB;; }; @@ -316,6 +3",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7488#issuecomment-797417462:334,feedback,feedback,334,https://root.cern,https://github.com/root-project/root/pull/7488#issuecomment-797417462,2,['feedback'],['feedback']
Usability,"The idea of the TEmulatedTuple is as follow:; ```; // Handle the special case of 'tuple' where we ignore the real implementation; // details and just overlay a 'simpler'/'simplistic' version that is easy; // for the I/O to understand and handle.; ```; and whenever TClass needs interpreted information about a tuple, it will get/use the interpreted information about the equivalent TEmulatedTuple",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2093#issuecomment-392934264:161,simpl,simpler,161,https://root.cern,https://github.com/root-project/root/pull/2093#issuecomment-392934264,4,['simpl'],"['simpler', 'simplistic']"
Usability,"The issue in CMSSW is fixed now by just not doing a ranged fit, but in ROOT master this performance regression still needs to be fixed. Here is a simple reproducer for the problem, with the code extracted from the CMSSW source linked in the initial post:; ```c++; void script(); {; using namespace RooFit;. RooRealVar x(""x"", """", 0, 10);. RooRealVar mean(""mu"", """", 5.0, 0, 10);; RooRealVar width(""width"", """", 1.0, 0.1, 10);; RooRealVar sigma(""sigma"", """", 2.0, 0.1, 10);; RooVoigtian voigt(""voigt"", """", x, mean, width, sigma);. RooRealVar lambda(""lambda"", """", -0.01, -100., 1.);; RooExponential expo(""expo"", """", x, lambda);. RooRealVar b(""n_bkg"", """", 100., 0, 1000);; RooRealVar s(""n_sig"", """", 1000., 0, 10000);. RooAddPdf model(""model"", """", {voigt, expo}, {s, b});. std::unique_ptr<RooDataSet> data{model.generate(x)};. model.fitTo(*data, Range(0.0, 10.0), PrintLevel(-1));; }; ```. Most likely, this issue was caused by https://github.com/root-project/root/pull/11455. I set the priority to `high` now, because this is a regression that also affects experiment workflows and it needs to be fixed before the 6.28 release for sure! Therefore, this issue is also added to the 6.28 milestone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11637#issuecomment-1297108209:146,simpl,simple,146,https://root.cern,https://github.com/root-project/root/issues/11637#issuecomment-1297108209,2,['simpl'],['simple']
Usability,"The issue is also present in master. Simple C++ repro:. ```cpp; #include ""Math/Vector3D.h""; #include ""Math/Vector4D.h""; #include ""TChain.h""; #include ""ROOT/RVec.hxx""; #include ""ROOT/RDataFrame.hxx""; #include <vector>; #include <iostream>; using namespace ROOT::Math;; using namespace ROOT::VecOps;. int main(); {; ROOT::RDataFrame(1); .Define(""vec"", [] { return XYZVector(10, 10, 10); }); .Snapshot<XYZVector>(""Particle"", ""f1.root"", {""vec""});; ROOT::RDataFrame(1); .Define(""vec"", [] { return std::vector<XYZTVector>{XYZTVector(30, 30, 30, 30)}; }); .Snapshot(""Vertex"", ""f3.root"", {""vec""});. std::cout << ROOT::RDataFrame(""Vertex"", ""f3.root"").GetColumnType(""vec"") << std::endl;. TChain ch1(""Particle"");; ch1.Add(""f1.root"");; TChain ch3(""Vertex"");; ch3.Add(""f3.root"");; ch1.AddFriend(&ch3, ""vertex"");. std::cout << ROOT::RDataFrame(ch1).GetColumnType(""vertex.vec"") << std::endl;. return 0;; }; ```. This prints the wrong type (the type of the _other_ `vec` branch) in the second case. Calling `vertex.vec` something else, e.g. `vertex.vec2`, removes the ambiguity. Work in progress.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6944#issuecomment-747632478:37,Simpl,Simple,37,https://root.cern,https://github.com/root-project/root/issues/6944#issuecomment-747632478,1,['Simpl'],['Simple']
Usability,"The job was full RECO with 8 threads, reading raw data and writing RECO, AOD, MINIAOD and DQMIO. Details are in Slava's slides from yesterday, but it is a generic enough RECO job that it should show up in any standard RECO workflow writing AOD and MINIAOD. The effect on cmsRun timing was definitely exaggerated by having 8 threads, as the occasional long pauses from LZMA sometimes blocked the other threads too (the job time speedups I quoted were wall clock, not cpu).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/194#issuecomment-232409319:356,pause,pauses,356,https://root.cern,https://github.com/root-project/root/pull/194#issuecomment-232409319,1,['pause'],['pauses']
Usability,"The last comments from @pikacic and @eguiraud have been addressed, namely:; - Possibility to define pythonizor functions with either one parameter (class proxy) or two parameters (class proxy and fully-qualified name of the class).; - Support for immediate pythonizations of classes that have already been used at the time of the registration of a pythonization.; - Prevent confusion with `is_prefix=True` not matching classes in nested namespaces. Now a separate parameter for the namespace exists to make it clear that pythonizors are applied to a certain namespace (default is global namespace), e.g.:; ```python; @pythonization(""RVec<"", ns=""ROOT::VecOps"", is_prefix=True); def pythonizor_RVec(klass, name):; ...; ```. Note that multiple `@pythonization` decorators can be stacked if a pythonizor targets classes in multiple namespaces:; ```python; @pythonization(""A""); @pythonization(""B"", ns=""NS""); def pythonizor_for_A_and_NS_B(klass):; ...; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9128#issuecomment-982514902:510,clear,clear,510,https://root.cern,https://github.com/root-project/root/pull/9128#issuecomment-982514902,2,['clear'],['clear']
Usability,"The method has now following signature: `TTree.AsMatrix(columns=None, exclude=None, return_labels=False)`. `columns`: Can be a list with branch names, for `None` is `tree.GetListOfBranches()` taken.; `exclude` Can be a list with branch names, simply removed from `columns`; `return_labels`: If true a tuple with `(column_names, numpy_array)` is returned, otherwise only the array. The `return_labels` feature is to be discussed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1872#issuecomment-382732284:243,simpl,simply,243,https://root.cern,https://github.com/root-project/root/pull/1872#issuecomment-382732284,2,['simpl'],['simply']
Usability,"The original idea was to have to interface GetBulkEntries and GetEntriesSerialized where in the former the byte-swap is done by the routine and in the later the byte-swap is done by the user. (See SimpleReadFunc vs SimpleBulkReadFunc in https://github.com/root-project/root/blob/28f728b67b5409580ec0ba4d71fa9ab35683fb26/tree/tree/test/BulkApi.cxx). GetBulkEntries was updating the buffer associated with the TBasket in place and thus is no longer reusable (unless the leaf reading was non destructive .. for example for char). GetEntriesSerialized was not modifying the buffer and hence did not care about the destructiveness ... It looks like somewhere down the line (likely around the time we introduced the TBufferFile as the content passing mechanism) this distinction became moot (GetBulkEntries is discarding the basket anyway and in the lastest PR, I have to make a copy when it make not be done) .... . But then again, scanning through the git history, I am even more confused ... (why would TLeafF ever be considered non-destructive ...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6520#issuecomment-701717286:197,Simpl,SimpleReadFunc,197,https://root.cern,https://github.com/root-project/root/issues/6520#issuecomment-701717286,2,['Simpl'],"['SimpleBulkReadFunc', 'SimpleReadFunc']"
Usability,"The problem has been simplified to:; ```; {; double x = 6.25;; double y = 1.5625000232831;; double y1 = -y;; double y2 = y;; double yv = -0.5;. auto c1 = new TCanvas(""c1"", ""c1"", 0, 0, 700, 525);; c1->Range(-x, y1, x, y2);. TLine *line = new TLine();; line->DrawLine(-x, yv, x, yv) ->SetLineColor(kRed);. double r = 1./(y2-y1);; line->DrawLineNDC(0., r*(yv-y1),; 1., r*(yv-y1))->SetLineColor(kBlue);. }; ```; DrawlLine paint a red horizontal line at `yv = 0.5`. DrawLineNDC does the same in NDC coordinates. The 2 lines should overlap but they don't (by 1 pixel). Note that the values defined at the beginning of the macro are those that make the problem. As soon as you change, for instance, `y` the lines will overlap. Same if you change interactively the canvas size.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14546#issuecomment-1943627143:21,simpl,simplified,21,https://root.cern,https://github.com/root-project/root/issues/14546#issuecomment-1943627143,2,['simpl'],['simplified']
Usability,"The problem is in automatic reading the objects, probably for some missing library (as in this case the `TMath::Abs` definition). I think we had similar issues with TFormula/TF1 before. ; There is the simple workaround:; ```; auto legends = file->Get(""legends""); legends->Draw();; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12559#issuecomment-1494518922:201,simpl,simple,201,https://root.cern,https://github.com/root-project/root/issues/12559#issuecomment-1494518922,2,['simpl'],['simple']
Usability,"The problem is that RDF tries to open the file to check that it's valid. The logic for the file opening is at https://github.com/root-project/root/blob/962009b8c2057199c2229c3ef9938ac4d315d10a/tree/dataframe/src/RLoopManager.cxx#L1133 . In particular, because of the presence of the `?` token, the string is parsed as a glob. Now in many cases that would be harmless albeit a tiny overhead (it would just return the same file name to open), but in this particular case it triggers a faulty behaviour. The glob parsing attempts at traversing the remote xrootd directory (see [here](https://github.com/root-project/root/blob/962009b8c2057199c2229c3ef9938ac4d315d10a/tree/tree/src/InternalTreeUtils.cxx#L471)), but since the permission is just for the single file with the token and not for the entire directory, it leads to the `user access restricted` error you post above. Now, I believe the most sane course of action would be to refine the logic that checks whether the input file name is a glob. I could simply add a check for the `xrd.wantprot` token, but probably we want to have a more authoritative list of all the tokens that should make the file name not be parsed as a glob. This probably includes not only xrootd tokens but also anything https-related. Or we could adopt a different strategy for glob detection altogether. Thoughts @dpiparo @pcanal ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16475#issuecomment-2365248206:1007,simpl,simply,1007,https://root.cern,https://github.com/root-project/root/issues/16475#issuecomment-2365248206,2,['simpl'],['simply']
Usability,"The problem is that both shapes are composite, and TGeoCompositeShape does not currently support generating mesh points on segments. If you were to replace the pvPipeBottom with a simple tube the overlap would probably be detected, but of course you cannot do that. So you are hitting the boolean-boolean combination which is worst supported unfortunately by the geometry checker and can miss overlaps.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6556#issuecomment-705445777:180,simpl,simple,180,https://root.cern,https://github.com/root-project/root/issues/6556#issuecomment-705445777,2,['simpl'],['simple']
Usability,"The problem was not even AutoParsing, it was that we're failing to unload any function.; For example, this fails:; ```; root [0] struct Marker { ~Marker() { fprintf(stdout,""dest\n""); } };; root [1] .L lib/libEdm.so; root [2] .L lib/libStrip.so; root [3] Marker m1;; root [4] Marker m2;; root [5] Marker(); (Marker) @0x559ab2f03100; root [6] .undo 3; root [7] SiStripCluster *s; ; root [8] SiStripCluster obj; ; SiStripCluster; ROOT_prompt_8:1:16: error: variable has incomplete type 'SiStripCluster'; SiStripCluster obj;; ^; libStrip dictionary forward declarations' payload:5:132: note: forward declaration of 'SiStripCluster'; class __attribute__((annotate(R""ATTRDUMP(splitLevel@@@0)ATTRDUMP""))) __attribute__((annotate(""$clingAutoload$SiStripCluster.h""))) SiStripCluster;; ```. Some evil side effect is happening when a function is called..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2852#issuecomment-435986645:342,undo,undo,342,https://root.cern,https://github.com/root-project/root/pull/2852#issuecomment-435986645,2,['undo'],['undo']
Usability,"The problem with trying one after the other is that the number of combinations quickly goes through the roof. Consider that a python-side proxy can be freely converted from/to `T*`, `T**`, `T[]`, `T&`, `T&&`, and their `std::shared_ptr<>` and `std::unique_ptr<>` equivalents. So, that may mean 15 tries. If there are 3 arguments, the number of combinations is 455, faculty being what it is. Sure, I can make some educated guess to put the most likely candidates first, and that is basically when is currently going on. But a single lookupHelper call for template instantiation can already be too slow to be usable: e.g. for PCL they run (after the first 7-14s loading, which modules should fix) they are still of the order of 0.1s. (We have discussed that problem, too: contrary to normal Clang usage, Cling dumps everything in a single translation unit, vastly increasing the number of possible matches. Try going after `operator<<(std::ostream&)` or `operator==` in the global namespace, for example.). You mention int, but there are `int8_t`, `uint8_t` (these are often `char` varieties), `short`, `unsigned short`, `int16_t`, `uint16_t`, `int`, `unsigned int`, `long`, `unsigned long`, `long long`, and `unsigned long long` to try. Sure, let's do `str` to `const char*`, but that won't work for `std::string&`, and `std::string` usage is more common. But ah, what about `wchar_t`, `char16_t`, `char32_t`, `std::wstring`?. Collections, sure, but what if instead I have a tuple or list on the Python side and the template expects some STL container? Then it can not just be that STL container of say `T*`, but also the STL container of pointer any of the base classes, or worse, a mix thereof. And what if the tuple isn't actually targeting a container, but is an initalizer_list? There is often no (relevant) type information available at that point in Python, but many cases can still be resolved b/c the C++ side has some hints. For example `template<typename T, int N> void func(const std::array",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6393#issuecomment-696889449:607,usab,usable,607,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-696889449,2,['usab'],['usable']
Usability,"The py3 behavious is not a feature of this PR. You can add this to `Pythonize.cxx` and simply run `import ROOT`:. ```cpp; if ( name == ""TObject"" ) {; // support for the 'in' operator; Utility::AddToClass( pyclass, ""__contains__"", (PyCFunction) TObjectContains, METH_O );; PyObject_Print(PyObject_GetAttrString(pyclass, ""__contains__""), stdout, 0);; ...; }; ```. **py2:**; ```; >>> import ROOT; <unbound method TObject.__contains__>>>>; ```. **py3:**; ```; >>> import ROOT; <bound method __contains__ of <NULL>>>>> ; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1777#issuecomment-378181987:87,simpl,simply,87,https://root.cern,https://github.com/root-project/root/pull/1777#issuecomment-378181987,2,['simpl'],['simply']
Usability,"The same problem shows with web canvas (@linev ?) for instance with this simple macro:; ```; void lineonaxis(){; auto c1 = new TCanvas(""c1"", ""c1"", 0, 0, 700, 525);; c1->SetGridy();; TH1F *f = gPad->DrawFrame(-5, -1.25, 5, 1.25);; f->GetYaxis()->SetNdivisions(10);; f->GetXaxis()->SetNdivisions(0);. auto line = new TLine();; line->SetLineColor(kRed);; line->DrawLine(-5, -1., 5 , -1.);; line->DrawLine(-5, -0.5, 5 , -0.5);; line->DrawLine(-5, 0., 5 , 0.);; line->DrawLine(-5, 0.5, 5 , 0.5);; line->DrawLine(-5, 1., 5 , 1.);; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14546#issuecomment-1943905642:73,simpl,simple,73,https://root.cern,https://github.com/root-project/root/issues/14546#issuecomment-1943905642,2,['simpl'],['simple']
Usability,"The summary is simple (and still the same after applying [`38b0d88` (#16722)](https://github.com/root-project/root/pull/16722/commits/38b0d88d1d51fe914a6aff3645f03a483e31588a):. On first run in a clean directory with `BLAS` missing, we get:; ```; ctest -R gtest-tmva-pymva-TestRModelParserPyTorch; Test project /home/pcanal/root_working/build/quick-devel; Start 349: gtest-tmva-pymva-TestRModelParserPyTorch; 1/1 Test #349: gtest-tmva-pymva-TestRModelParserPyTorch ... Passed 16.11 sec. 100% tests passed, 0 tests failed out of 1. Total Test time (real) = 16.37 sec; ```; and if we immediately re-run we get:; ```; ctest -R gtest-tmva-pymva-TestRModelParserPyTorch; Test project /home/pcanal/root_working/build/quick-devel; Start 349: gtest-tmva-pymva-TestRModelParserPyTorch; 1/1 Test #349: gtest-tmva-pymva-TestRModelParserPyTorch ...***Failed 9.10 sec; ```; and the error is:; ```; [ RUN ] RModelParser_PyTorch.SEQUENTIAL_MODEL; IncrementalExecutor::executeFunction: symbol 'sgemm_' unresolved while linking [cling interface function]!; ```; indicates that on the 2nd runs, the test want symbols from the `BLAS` library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16719#issuecomment-2427294206:15,simpl,simple,15,https://root.cern,https://github.com/root-project/root/issues/16719#issuecomment-2427294206,2,['simpl'],['simple']
Usability,"The test failures report the file created during the test does not exist, but this node ran the test fine https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/124359/testReport/projectroot.tree.tree/test/gtest_tree_tree_test_entrylist_enterrange/ . Probably using the same filename for multiple tests leads to a recreation/deletion of the file that is then not usable by the new test?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8740#issuecomment-895859603:381,usab,usable,381,https://root.cern,https://github.com/root-project/root/pull/8740#issuecomment-895859603,2,['usab'],['usable']
Usability,"The test h2 shows how to generated animated gif from snapshots of the canvas without taking a lock (but by using the gThreadXAR mechanism ... which we probably need to (eventually) 'replace'). If there is no easy and/or clear translation of this example, I recommend we keep it until such a time where we have a clear replacement. Thanks,; Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1531#issuecomment-359073042:220,clear,clear,220,https://root.cern,https://github.com/root-project/root/pull/1531#issuecomment-359073042,4,['clear'],['clear']
Usability,"There is much easier solution - do not introduce boolean variables and make check in place like:. if ((where == ""local"") || (where == ""qt5"")). I just want to keep code more clear - first parsing of all options and then creating web output. ; I will provide better solution - if nor CEF neither Qt5 available, ""local"" option is error and should be indicated so. I will add appropriate commit soon",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1964#issuecomment-386075518:173,clear,clear,173,https://root.cern,https://github.com/root-project/root/pull/1964#issuecomment-386075518,2,['clear'],['clear']
Usability,"There is no change for the user, but for packaging it makes things easier. See also https://github.com/root-project/root/pull/15402. Actually this is still a draft PR,I first wanted to see if all platforms are happy with the C++ changes. The next step is to move the `JupyROOT` submodule to `ROOT.JupyROOT`. Also this will have no effect on the user, because the user never imports this module themselves: it is implicitly imported by `ROOT` in a notebook environment. The overall goal of these PRs is to have a single python module (`ROOT`) instead of the current 4 (ROOT, JsMVA, JupyROOT, and DistRDF). For packagers, and for Root as a Python package in general, that would make things clearer and easier: from installing root, you get the module `ROOT`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15404#issuecomment-2092457591:688,clear,clearer,688,https://root.cern,https://github.com/root-project/root/pull/15404#issuecomment-2092457591,2,['clear'],['clearer']
Usability,"There is still no fix for this yet, but I have changed the title to make clear that this problem is more general. Also there is the same issue in JIRA, that I'll now close because it is a duplicate of this GitHub issue:; https://sft.its.cern.ch/jira/browse/ROOT-9776. The proper fix would be in my opinion to tag the relevant functions in C++ with an attribute, and then have these considered by PyROOT to set the `_creates` attribute automatically.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11397#issuecomment-1432035579:73,clear,clear,73,https://root.cern,https://github.com/root-project/root/issues/11397#issuecomment-1432035579,2,['clear'],['clear']
Usability,There is very simple fix to make `TNetXNGFile::Close()` reentrant.; See PR: https://github.com/root-project/root/pull/13559,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13503#issuecomment-1697016701:14,simpl,simple,14,https://root.cern,https://github.com/root-project/root/issues/13503#issuecomment-1697016701,2,['simpl'],['simple']
Usability,"There is very simple solution. Specify for master page:; ```; enableScrolling=""false""; ```; Scrolling should be ok then",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4591#issuecomment-547390059:14,simpl,simple,14,https://root.cern,https://github.com/root-project/root/pull/4591#issuecomment-547390059,2,['simpl'],['simple']
Usability,"There was no followup here on the discussion on what should be in the manual and in the reference guide, but I think this discussion is not directly connected to removing this outdated statement about STL splitting from the users guide. So I would suggest to merge this PR as is, thanks @olantwin! If you want to follow up on adding this information to the reference guide (doxygen) or have other suggestions to improve the documentation, feel free to open more PRs :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12551#issuecomment-1882573439:98,guid,guide,98,https://root.cern,https://github.com/root-project/root/pull/12551#issuecomment-1882573439,6,['guid'],['guide']
Usability,"They do, but they are not at odd. libImt is presently the tool used via TROOT to get the status of the activation of ImplicitMT. That requires the load of libImt and the invocation of a function. This PR made of 1 commit simplifies the mechanism, avoiding to load libImt (and initialise the entire TROOT) in case only the activation status of ImplicitMT is required.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1127#issuecomment-334141079:221,simpl,simplifies,221,https://root.cern,https://github.com/root-project/root/pull/1127#issuecomment-334141079,2,['simpl'],['simplifies']
Usability,"This PR has been rebased and simplified to leverage the changes introduced by #11828. Accessing single pages that are remotely caged is now unsupported unless page buffering is enabled as a source option (which is by default the case). More details in the updated PR description. The change precludes storing the cage sizes in metadata or upper-bounding it in `RPageSourceDaos`, though it constrains that the entire page-group is requested and fetched - as the allocated buffer size for a cage depends on the sum of all the compressed sizes stored in the individual locators of requested pages belonging to that cage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11466#issuecomment-1359215581:29,simpl,simplified,29,https://root.cern,https://github.com/root-project/root/pull/11466#issuecomment-1359215581,2,['simpl'],['simplified']
Usability,"This PR is a 'downgrade' is code simplicity that should not be necessary. However the underlying fix is not ready (and won't until August), so we could temporarily merge this if need be.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15733#issuecomment-2194299016:33,simpl,simplicity,33,https://root.cern,https://github.com/root-project/root/pull/15733#issuecomment-2194299016,2,['simpl'],['simplicity']
Usability,This PR is now fine and can be merged. I will add now also a simple test for the new mod. operator,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/977#issuecomment-349961499:61,simpl,simple,61,https://root.cern,https://github.com/root-project/root/pull/977#issuecomment-349961499,2,['simpl'],['simple']
Usability,"This PR looks a big improvement in fixing #7890 and #7933. Here are some test results run on Ubuntu 20. - Test create/delete a RooArgSet, simple example shown in #7933. - with current mater (i.e. including #7904 and #7935): ; - Time to create/delete 10M RooArgSet : 125 sec; - Increase of Memory ~ 1 GB; - with master + this PR: ; - Time to create/delete 10M RooArgSet : 0.8 sec; - total memory increase + 25 Mb); - using 6.15 (before including current MemPoolForRooSets (-> #2866 ); - Time to create/delete 10M RooArgSet : 2.9 sec; - memory increase : 0 ; ; - Running RooStats toy generation + likelihood evaluation on Histfactory tutorial model using in totoal 300k toys: ; ```; StandardHypoTestInvDemo(""$ROOTSYS/tutorials/histfactory/results/example_combined_GaussExample_model.root"",""combined"",""ModelConfig"","""",""obsData"",0,0,true,2,0,5,100000); ```. - master : Time: 344 sec Memory : ~ 3.5 GB; - master + this PR : Time: 157 sec Memory: 570 Mb; - 6.15 Time: 197 sec Memory: 240 Mb; . Runing the master on MacOsX, I have observed a much smaller memory increase, but a much longer time spent with allocating/deallocating RooArgSet's when their total count increases.; This is not observed anymore after applying this PR. So in conclusion:. - this PR fixes the increase time spent in allocate/deallocate RooArgSet over time, which will slow down toys analysis when number of toys increase; - there is still some increase in memory usage, but it is much smaller than before.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7954#issuecomment-824721395:138,simpl,simple,138,https://root.cern,https://github.com/root-project/root/pull/7954#issuecomment-824721395,2,['simpl'],['simple']
Usability,This PR needs to have its history rewritten - possible simply squashing all commits.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13596#issuecomment-1705308623:55,simpl,simply,55,https://root.cern,https://github.com/root-project/root/pull/13596#issuecomment-1705308623,2,['simpl'],['simply']
Usability,"This PR solves the problem of documenting our python requirements and adding a test that checks if we satisfy them at runtime. #5938 solves three main problems (plus a couple smaller things): a bug in an RDF tutorial, a bug in the vetoing of tutorials, and it adds a nice-to-have, namely having a single test fail that's clearly called ""test-if-numba-is-there"" rather than having all numba tests red. If what I said above is in the ballpark of correct, there is no conflict with #5938. so I still think this PR could go in modulo the missing requirements -- consider my approval conditional to agreeing on what should go in requirements.txt (i'll stay out of the discussion about whether pandas should be in there or not :D)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5408#issuecomment-654947753:321,clear,clearly,321,https://root.cern,https://github.com/root-project/root/pull/5408#issuecomment-654947753,2,['clear'],['clearly']
Usability,"This broke the build on all EPEL-based distributions where the headers are in `/usr/include/xrootd`, but `XRootDConfig.cmake` reports `/usr/include`. I believe this is an error in how the `rpm` is packaged, but we cannot fix it immediately. Our CI was also very clear about this problem by failing on 5 platforms (!), 3x Fedora and 2x Alma Linux, which I would again like to point out must be always checked before merging! I'm reverting the second commit in https://github.com/root-project/root/pull/14170 to restore our builds and also help the LCG people.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13752#issuecomment-1838159186:262,clear,clear,262,https://root.cern,https://github.com/root-project/root/pull/13752#issuecomment-1838159186,2,['clear'],['clear']
Usability,"This broke the tests:; ```; 729: Processing /home/jhahnfel/ROOT/src/tutorials/graphs/scatter.C...; 729: In file included from input_line_10:1:; 729: /home/jhahnfel/ROOT/src/tutorials/graphs/scatter.C:39:43: error: use of undeclared identifier 'scat'; 729: TPaletteAxis *palette = (TPaletteAxis*)scat->GetGraph()->GetListOfFunctions()->FindObject(""palette"");; 729: ^; ```. Tutorials are executed as part of the CI and therefore should *never* be merged with `[skip-ci]`! The simple fix is in https://github.com/root-project/root/pull/15923.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15871#issuecomment-2188647929:474,simpl,simple,474,https://root.cern,https://github.com/root-project/root/pull/15871#issuecomment-2188647929,2,['simpl'],['simple']
Usability,"This bug Edward reports was described at the ROOT forum two years ago by me in [this thread](https://root-forum.cern.ch/t/integral-with-limits-under-frac/31891). The MWE from that thread of mine can be further simplified down to just three lines of code actually:; ```; void drawl(); {; TLatex l;; l.DrawLatex(0.5, 0.3, ""#frac{#int_{0} v dt}{2}"");; }; ```; This snippet crashes (when ran in 6.14/04) with the same; ```; *ERROR<TLatex>: Missing denominator for #frac; ==> #frac{@{#int_{0}} v dt}{2@}; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6851#issuecomment-731616986:210,simpl,simplified,210,https://root.cern,https://github.com/root-project/root/issues/6851#issuecomment-731616986,2,['simpl'],['simplified']
Usability,This change (removing TBuffer.h from TDirectory.h) has a very high probably of breaking user code. This is cleaner so unless @Axel-Naumann objects it should go in but we need to call it clearly in (the beginning of) the release notes (the other header moves should probably be called there too).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5123#issuecomment-597126662:186,clear,clearly,186,https://root.cern,https://github.com/root-project/root/pull/5123#issuecomment-597126662,2,['clear'],['clearly']
Usability,"This example would need to be modified before being put in tutorials:. 1. It should be formatted the proper way. See for instance [this one](https://github.com/root-project/root/blob/master/tutorials/graphics/arrows.C). The header should be formatted that way with a proper author name at the end.; 2. The description of the macro should be more than just a brief. May be some explanation about the site it refers to would help. In particular the download link should be to ScientificColourMaps7.zip I guess.; 3. You are using a TTree do read the .txt file. Why not, but that might be a bit ""too much"" just to read an ascii file of 3 columns. A standard C/C++ ASCII file reading is enough.; 4. The files have already 255 colors. So you do not need CreateGradientColorTable to interpolate the colors simply build the palette with the colors you read.; 5. Yes a static function in TColor would be also a possibiblity but the same comments apply.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8098#issuecomment-968998294:799,simpl,simply,799,https://root.cern,https://github.com/root-project/root/issues/8098#issuecomment-968998294,2,['simpl'],['simply']
Usability,"This is an interesting situation. The build on mac12arm/cxx20 did not fail, it's ""unstable"". All tests pass but there are warnings triggered by TBB. The version is simply too old (2019). On Mac13, cxx17 or cxx20, TBB does not even build. A PR is coming to propose a fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13720#issuecomment-1735428320:164,simpl,simply,164,https://root.cern,https://github.com/root-project/root/pull/13720#issuecomment-1735428320,2,['simpl'],['simply']
Usability,"This is another simple reproducible example: ; ```; #include <iostream>; #include <vector>. void Dummy(const std::vector<size_t> & targetShape) {; std::cout << ""target shape "";; for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";; std::cout << std::endl;; }. struct Test1 {; Test1() {; Dummy({ 1 , 2 , 3, 4 });; }; };. struct Test2 {; Test2() {; Dummy({ 5 , 6 , 7});; }. };",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12164#issuecomment-1410442720:16,simpl,simple,16,https://root.cern,https://github.com/root-project/root/issues/12164#issuecomment-1410442720,2,['simpl'],['simple']
Usability,"This is critical because we might load who knows what into the frameworks. But because the fix is rather intrusive, and the OP has a simple workaround, I'll *not* backport the fixes to our existing release branches.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7955#issuecomment-856839812:133,simpl,simple,133,https://root.cern,https://github.com/root-project/root/issues/7955#issuecomment-856839812,2,['simpl'],['simple']
Usability,"This is dealt with in cppyy with a patch to TCling at https://github.com/wlav/cppyy-backend/blob/25caf988cef1f2f76705c07b7262f076e8ed0e01/cling/src/core/metacling/src/TClingCallFunc.cxx#L468-L485 . Applying this patch as-is is not possible as it does not work on all platforms and is not generic enough (doesn't take into account the case of a templated move constructor). More in general, it is not yet clear to me that we want to force the implicit move in these cases. Python does not have the equivalent concepts of smart pointers, move semantics etc., so the line is quite blurry here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14425#issuecomment-1935515180:404,clear,clear,404,https://root.cern,https://github.com/root-project/root/issues/14425#issuecomment-1935515180,2,['clear'],['clear']
Usability,This is fixed by https://github.com/root-project/root/pull/7951 . Just wait the ref guide is rebuild. It is building now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7996#issuecomment-826896706:84,guid,guide,84,https://root.cern,https://github.com/root-project/root/issues/7996#issuecomment-826896706,2,['guid'],['guide']
Usability,This is indeed a good improvement. A few comments/opinions:; * The variable are used within `Cling` and thus should probably be prefixed by `CLING_` rather than `ROOT_`; * The setting used/necessary is complex and maybe we ought to provide a simpler mechanism (some thing similar to ; ```; export CLING_LDSYSPATH=`cling print_ld_syspath();`; ```; * The (pre-existing) duplication of the code/feature dealing with `ldsyspath` is less than optimal.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12613#issuecomment-1514918749:242,simpl,simpler,242,https://root.cern,https://github.com/root-project/root/pull/12613#issuecomment-1514918749,2,['simpl'],['simpler']
Usability,"This is kind of annoying, both locally and in Jenkins. Is it maybe as simple to solve as; ```diff; diff --git a/root/meta/MakeProject/CMakeLists.txt b/root/meta/MakeProject/CMakeLists.txt; index 308fa288..d090321f 100644; --- a/root/meta/MakeProject/CMakeLists.txt; +++ b/root/meta/MakeProject/CMakeLists.txt; @@ -1,4 +1,4 @@; -ROOTTEST_GENERATE_DICTIONARY(stl_makeproject_test stl_makeproject_test.h LINKDEF stl_makeproject_test_linkdef.h); +ROOTTEST_GENERATE_DICTIONARY(stl_makeproject_test stl_makeproject_test.h LINKDEF stl_makeproject_test_linkdef.h DEPENDS Hist) . if(ROOT_runtime_cxxmodules_FOUND); # FIXME: For C++ modules builds, module.modulemap is generated during configuration time; ```; ?. At least, this makes `ninja stl_makeproject_test` succeed on a freshly configured build for me :thinking:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9600#issuecomment-1018559183:70,simpl,simple,70,https://root.cern,https://github.com/root-project/root/issues/9600#issuecomment-1018559183,2,['simpl'],['simple']
Usability,"This is low priority, but I add more eyes to it: perhaps we can have a simple idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10535#issuecomment-1925606745:71,simpl,simple,71,https://root.cern,https://github.com/root-project/root/issues/10535#issuecomment-1925606745,2,['simpl'],['simple']
Usability,"This is not really a bug, the layout is simply not set to expand X & Y, The PR #7516 solves it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7435#issuecomment-799543441:40,simpl,simply,40,https://root.cern,https://github.com/root-project/root/issues/7435#issuecomment-799543441,2,['simpl'],['simply']
Usability,"This is really good stuff. ARM nodes are appearing on WLCG and testing on that platform will automatically improve the sw stacks of LHC experiments. The test failure needs some thinking but it does not seem a complex issue. If I may suggest this, I would also make sure that a clear indicator of the platform appears in the label of the build (""ARM"", ""Aarch""...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16526#issuecomment-2375944990:277,clear,clear,277,https://root.cern,https://github.com/root-project/root/pull/16526#issuecomment-2375944990,2,['clear'],['clear']
Usability,"This is significant change on top of original PR. Interface of THttpServer classes changed in several places.; 1. To make clear ownership, `std::shared_ptr<THttpCallArg>` is used to exchange these objects; between application code and THttpServer.; 2. Also use `std::shared_ptr<THttpWSEngine>` for keep clear ownership of helper objects, which are supporting different websockets kinds.; 3. Use std::string to store text or binary data, assigned to THttpCallArg. ; Before special binary storage with malloc/mfree was used. Used for content and post data.; 4. Declare several methods in http classes as deprecated. For each method there is replacement with similar functionality, but other arguments. I used ROOT 6.18 as boundary, but this can be changed; 5. Latest JSROOT",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1785#issuecomment-379734333:122,clear,clear,122,https://root.cern,https://github.com/root-project/root/pull/1785#issuecomment-379734333,4,['clear'],['clear']
Usability,"This is the manifestation of a known problem with the `std::string_view` converters, that can be reproduced without RDataFrame:; ```Python; import ROOT; import cppyy. cppyy.cppdef(""""""; void foo(std::string_view input) { std::cout << input << std::endl; }; """"""). my_string = cppyy.gbl.std.string(""test""). cppyy.gbl.foo(my_string); ```; You'll see that the output in ROOT 6.32 is empty, meaning the `string_view` is not correctly initialized. This causes the RDF code to crash. This problem was already fixed in upstream cppyy, and we have a PR open to apply these fixes:; https://github.com/root-project/root/pull/16212. However, the fix is breaking some other tests, so we can't apply them yet. Thanks for the report though, because this makes it clearer how #16212 needs to be prioritized. In the meantime, the workaround is to convert your `std::strings` into Python strings, because the conversion to `std::string_view` works for them:; ```python; for col in cols:; print(col); print( tmprdf.GetColumnType(str(col) )); ```; This workaround is also backwards compatible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16298#issuecomment-2306614607:747,clear,clearer,747,https://root.cern,https://github.com/root-project/root/issues/16298#issuecomment-2306614607,2,['clear'],['clearer']
Usability,"This issue was brought up for discussion within the team. As things currently stand, the benefits of introducing the uppercase version of these function in the `VecOps` namespace is not clear. The decision is to close this issue for now, if more users will identify this as a blocker for their use cases then we can reassess the decision. Thanks a lot @jolly-chen for taking the time to address this!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7697#issuecomment-1952800171:186,clear,clear,186,https://root.cern,https://github.com/root-project/root/issues/7697#issuecomment-1952800171,2,['clear'],['clear']
Usability,This looks like a nasty mix of runtime reflection information and IO (we use TEmulatedTuple to abstract from implementation details of the tuple class in the stl to perform IO in a simple way). @pcanal would you be able to suggest a path to improve the current situation?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8875#issuecomment-2076689182:181,simpl,simple,181,https://root.cern,https://github.com/root-project/root/issues/8875#issuecomment-2076689182,2,['simpl'],['simple']
Usability,This looks like an inconsistency in your build. I don't know how to reproduce this. If you have a step-by-step guide on how to end up with this breakage please let us know and re-open this ticket!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8178#issuecomment-848621017:111,guid,guide,111,https://root.cern,https://github.com/root-project/root/issues/8178#issuecomment-848621017,2,['guid'],['guide']
Usability,"This looks pretty good. One potential drawback (or maybe it is 'documented away') is that we now have 'more' possibility of the git tag and its RVersion.hxx to be out-of-sync. . Another thing that is not clear is whether (or not) we are losing the recording of the git commit in the ROOT banner:; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for macosx64 on Feb 03 2022, 23:36:26 |; | From heads/pairOffset@v6-25-02-395-g873cf57666 |; | With Apple clang version 12.0.0 (clang-1200.0.32.29) |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10077#issuecomment-1062072980:204,clear,clear,204,https://root.cern,https://github.com/root-project/root/pull/10077#issuecomment-1062072980,2,['clear'],['clear']
Usability,"This patch was found by at least 3 different people. For example, I found it using the ""perf"" tool (if I remeber correctly, it was using gcc 4.8.4 back then and added -fno-omit-frame-pointer for compilation). The improvement of course depends on the settings. I don't understand why it takes so long to accept this patch. It is obviously correct - since if you use dynamic_cast and then do NOT check for nullptr and happily dereference the result, you can as well use a static_cast - if the old code was correct, the new one is correct as well. And the other cases, where you can simply remove the cast, are obvioulsly correct as well. By the way, I am still waiting for the invitation for a meeting in -1 month, as was announced here: https://root.cern.ch/phpBB3/viewtopic.php?f=15&t=22880 - and please please consider my patches there as well. At least give feedback. This one with the casts is by far the easiest patch. And an unrelated thing: 2 days ago I added a patch for long branch names (trying it via jira to see it that is faster): https://sft.its.cern.ch/jira/projects/ROOT/issues/ROOT-8578 - it was assigned to Helge Voss, but I think that might not be correct. For me, Helge seems to be working on algorithms mainly, but the patch is a technicality in one TMVA file and one TTree file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/327#issuecomment-280571695:580,simpl,simply,580,https://root.cern,https://github.com/root-project/root/pull/327#issuecomment-280571695,2,"['feedback', 'simpl']","['feedback', 'simply']"
Usability,This seems fixed the symptoms. The real issue was fixed by introducing clearer separation of the way we compile some parts in core.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/722#issuecomment-312380227:71,clear,clearer,71,https://root.cern,https://github.com/root-project/root/pull/722#issuecomment-312380227,1,['clear'],['clearer']
Usability,This server/file has much more problems. ; Server uses more complex redirection rules with `x-accel-redirect` and `x-sendfile` headers.; Plus redirected filename uses URI coding.; Simple change of upper/lower case does not help. By default ROOT uses `TDavixFile` for http files reading and it ~~only~~ also fails on this file.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14429#issuecomment-1911770622:180,Simpl,Simple,180,https://root.cern,https://github.com/root-project/root/issues/14429#issuecomment-1911770622,1,['Simpl'],['Simple']
Usability,This was a nice exercise which demonstrated that fine grained parallelism can be exploited easily for reading individual branches. The amount of areas which need further investigation cannot be tackled at the moment. I therewith propose to keep this PR in mind in the future when it will be necessary to parallelise reading within an individual branch and take home the lessons learned during the development of this code.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1468#issuecomment-366987643:378,learn,learned,378,https://root.cern,https://github.com/root-project/root/pull/1468#issuecomment-366987643,2,['learn'],['learned']
Usability,"This works now fine on 6.28/04, it no longer crashes. ```; root -l; root [0] int x; (int) 0; root [1] .undo; root [2] x; (int) 0; root [3] .undo; root [4] .undo; root [5] x; input_line_12:2:3: error: use of undeclared identifier 'x'; (x); ^; Error in <HandleInterpreterException>: Error evaluating expression (x); Execution of your code was aborted.; root [6] x; input_line_14:2:3: error: use of undeclared identifier 'x'; (x); ^; Error in <HandleInterpreterException>: Error evaluating expression (x); Execution of your code was aborted.; root [7] int x; (int) 0; root [8] int x; (int) 0; root [9] x; (int) 0; root [10] x; (int) 0; root [11] x; (int) 0; root [12] x; (int) 0; root [13] .undo; root [14] x; (int) 0; root [15] .undo 5; root [16] x; input_line_23:2:3: error: use of undeclared identifier 'x'; (x); ^; Error in <HandleInterpreterException>: Error evaluating expression (x); Execution of your code was aborted.; root [17] .q; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10178#issuecomment-1812233608:103,undo,undo,103,https://root.cern,https://github.com/root-project/root/issues/10178#issuecomment-1812233608,10,['undo'],['undo']
Usability,Those `VecCore not found` bugs should be fixed by clearing the build directory. They are related to my own changes to avoid copying headers to the build directory.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/855#issuecomment-321843681:50,clear,clearing,50,https://root.cern,https://github.com/root-project/root/pull/855#issuecomment-321843681,2,['clear'],['clearing']
Usability,"Throw in a couple of `gSystem->ProcessEvents()`, maybe? :-) No idea whether that's enough to make it usable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1037#issuecomment-331253724:101,usab,usable,101,https://root.cern,https://github.com/root-project/root/pull/1037#issuecomment-331253724,2,['usab'],['usable']
Usability,To be clear - these changes **DOES NOT CHANGE** command provided to `rootcling`. Both `include_directories(` and `target_include_directories(libname ... )` will end up in rootcling command. ; For the moment it is just expression that we do not need them for dictionary.; All these changes only will have real effect after #5181.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5269#issuecomment-607160197:6,clear,clear,6,https://root.cern,https://github.com/root-project/root/pull/5269#issuecomment-607160197,2,['clear'],['clear']
Usability,"To be clear this was failing from the original LLVM update, not because of; https://github.com/root-project/cling/commit/aea1940093488a51f8f8a970f1b68facb3fab324 or https://github.com/root-project/cling/commit/70bf1a3e8b3760af657dd1f22b81195ee6b3adb6 ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/628#issuecomment-307480582:6,clear,clear,6,https://root.cern,https://github.com/root-project/root/pull/628#issuecomment-307480582,1,['clear'],['clear']
Usability,"To be clear, it seems to me that the following:. ```C++; diff --git a/tree/tree/src/TBranch.cxx b/tree/tree/src/TBranch.cxx; index c69a3a95e3..e80e45d8be 100644; --- a/tree/tree/src/TBranch.cxx; +++ b/tree/tree/src/TBranch.cxx; @@ -1403,6 +1403,7 @@ Int_t TBranch::GetBasketAndFirst(TBasket *&basket, Long64_t &first,; /// to perform bulk IO (reasonable type, single TLeaf, etc); the bulk IO may; /// still fail, depending on the contents of the individual TBaskets loaded.; Bool_t TBranch::SupportsBulkRead() const {; + return true;; return (fNleaves == 1) &&; (static_cast<TLeaf*>(fLeaves.UncheckedAt(0))->GetDeserializeType() != TLeaf::DeserializeType::kDestructive);; }; @@ -1432,7 +1433,7 @@ Int_t TBranch::GetBulkEntries(Long64_t entry, TBuffer &user_buf); // TODO: eventually support multiple leaves.; if (R__unlikely(fNleaves != 1)) return -1;; TLeaf *leaf = static_cast<TLeaf*>(fLeaves.UncheckedAt(0));; - if (R__unlikely(leaf->GetDeserializeType() == TLeaf::DeserializeType::kDestructive)) {return -1;}; +// if (R__unlikely(leaf->GetDeserializeType() == TLeaf::DeserializeType::kDestructive)) {return -1;}; ; // Remember which entry we are reading.; fReadEntry = entry;; @@ -1488,8 +1489,7 @@ Int_t TBranch::GetBulkEntries(Long64_t entry, TBuffer &user_buf); Int_t N = ((fNextBasketEntry < 0) ? fEntryNumber : fNextBasketEntry) - first;; //printf(""Requesting %d events; fNextBasketEntry=%lld; first=%lld.\n"", N, fNextBasketEntry, first);; if (R__unlikely(!leaf->ReadBasketFast(user_buf, N))) {; - Error(""GetBulkEntries"", ""Leaf failed to read.\n"");; - return -1;; + leaf->ReadBasket(user_buf);; }; user_buf.SetBufferOffset(bufbegin);; ```. works just fine with all the basic types.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6520#issuecomment-701704099:6,clear,clear,6,https://root.cern,https://github.com/root-project/root/issues/6520#issuecomment-701704099,2,['clear'],['clear']
Usability,"To be clear, this would just be a first step towards (partially enabled) modules on Windows",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12602#issuecomment-1787077863:6,clear,clear,6,https://root.cern,https://github.com/root-project/root/pull/12602#issuecomment-1787077863,2,['clear'],['clear']
Usability,"To be clear:. ```C++; 1 #include <TTree.h>; 2 #include <TBufferFile.h>; 3; 4 int foo() {; 5 // Otherwise, we keep with the current ROOT defaults.; 6 auto tree = new TTree(""T"", ""A ROOT tree."");; 7 short f = 1;; 8 tree->Branch(""myBranch"", &f, 32000, 1);; 9 for (Long64_t ev = 0; ev < 32000; ev++) {; 10 tree->Fill();; 11 }; 12 tree->Print();; 13; 14 TBufferFile branchbuf(TBuffer::kWrite, 32 * 1024);; 15 TBranch *branchF = tree->GetBranch(""myBranch"");; 16; 17 auto count = branchF->GetBulkRead().GetEntriesSerialized(0, branchbuf);; 18 return count;; 19 }; ```. does not work:. ```; Processing foo.cc...; ******************************************************************************; *Tree :T : A ROOT tree. *; *Entries : 32000 : Total = 65257 bytes File Size = 0 *; * : : Tree compression factor = 1.00 *; ******************************************************************************; *Br 0 :myBranch : myBranch/S *; *Entries : 32000 : Total Size= 64957 bytes All baskets in memory *; *Baskets : 2 : Basket Size= 32000 bytes Compression= 1.00 *; *............................................................................*; Error in <TBranch::GetEntriesSerialized>: Encountered a branch with destructive deserialization; failing. (int) -1; ```. However if I change `f` to be an `int` or a `float`, it does.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6520#issuecomment-703591130:6,clear,clear,6,https://root.cern,https://github.com/root-project/root/issues/6520#issuecomment-703591130,2,['clear'],['clear']
Usability,"To be more complete here is a reproducer:; ```; void ratioplot2() {; gStyle->SetOptStat(0);; auto c1 = new TCanvas(""c1"", ""fit residual simple"");; auto h1 = new TH1D(""h1"", ""h1"", 50, -5, 5);; h1->FillRandom(""gaus"", 2000);; h1->Fit(""gaus"", ""0"");; h1->GetXaxis()->SetTitle(""x"");; auto rp1 = new TRatioPlot(h1);; rp1->Draw();; rp1->GetLowerRefYaxis()->SetTitle(""ratio"");; rp1->GetLowerRefYaxis()->SetNdivisions(2); // the number of divisions is not changed on the Y axis lower plot.; rp1->GetUpperRefYaxis()->SetTitle(""entries"");; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9172#issuecomment-949697288:135,simpl,simple,135,https://root.cern,https://github.com/root-project/root/issues/9172#issuecomment-949697288,2,['simpl'],['simple']
Usability,To be reopened to clear clutter.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6665#issuecomment-713659494:18,clear,clear,18,https://root.cern,https://github.com/root-project/root/pull/6665#issuecomment-713659494,2,['clear'],['clear']
Usability,"To clear it up in detail. With the current implementation `v[idx]` is resolved to selecting the elements by the indices **only** if the idx is of type `RVec<size_t>`. In case it is implicitely casted, from `{0, 1, 2, ...}`, the type `RVec<size_t>` is the preferred type because it's an specific overload. See following examples:. ```cpp; using namespace ROOT::VecOps;; RVec<float> v = {1, 2, 3, 4};. // Take indices explicitely; // Select directly the overload operator[](const RVec<size_t>&); RVec<size_t> idx = {0, 1};; cout << v[idx] << endl;; // Returns: { 1, 2 }. // Take indices by implicit cast; // Resolves to RVec<size_t> because it's the ""strongest"" overload; cout << v[{0, 1}] << endl;; // Returns: { 1, 2 }. // Make selection; RVec<int> s1 = {1, 1, 0, 0};; cout << v[s1] << endl;; // Returns: { 1, 2 }; RVec<unsigned int> s2 = {1, 1, 0, 0};; cout << v[s2] << endl;; // Returns: { 1, 2 }; cout << v[v<3] << endl;; // Returns: { 1, 2 }; ```. @dpiparo @bluehood From my point of view, this is exactly the expected behaviour (TBD).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2621#issuecomment-421941066:3,clear,clear,3,https://root.cern,https://github.com/root-project/root/pull/2621#issuecomment-421941066,2,['clear'],['clear']
Usability,To do that - simply checkout roottest into the `root` source directory. The build directory will utilize that instead of downloading its own copy.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/84#issuecomment-174390878:13,simpl,simply,13,https://root.cern,https://github.com/root-project/root/pull/84#issuecomment-174390878,1,['simpl'],['simply']
Usability,"To separate those we have now, a simple way is to use this add-on: https://addons.mozilla.org/en-US/firefox/addon/grayscale-browsing/. It will show https://root.cern.ch/doc/master/classTColor.html in grayscale mode. ![image](https://user-images.githubusercontent.com/10653970/117177407-47d76280-add1-11eb-9081-9bac9d4b4bd5.png). You can immediately see that the color scale in rainbow is not continuous, which is then misleading for colour-blinded in a 2D plot (not so much in a 3D surf like this one). kCMYK is also not great because it's dark, then lighter, then half-dark again. Others like kAquamarine have almost no contrast, it would be almost impossible to see sth there. So that would be a quick way to separate them. The idea is that the grayscale should be as proportional as possible, and monotonously increasing or decreasing. Unless it is symmetrical, then it is fine to have white in the borders and black in the centre (for example for example an axis that goes between -40 degrees and + 40 degrees, the 0 has a meaning). I guess one could do something similar for just removing red, green or blue from the image using GIMP, but for the moment with just grayscale it would be already a step.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8098#issuecomment-832849033:33,simpl,simple,33,https://root.cern,https://github.com/root-project/root/issues/8098#issuecomment-832849033,2,['simpl'],['simple']
Usability,Trying to revive this PR: did we get feedback from ATLAS? @guitargeek,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16175#issuecomment-2309556326:37,feedback,feedback,37,https://root.cern,https://github.com/root-project/root/pull/16175#issuecomment-2309556326,2,['feedback'],['feedback']
Usability,"Two fixes here:; - `REQUIRED` flag in cmake function `find_python_module` did not work because of wrongly set variable; - If the module is not found, then the function prints the response of the `import <module>` python call. This pollutes probably the cmake output if the error message of python is not simply sth like 'no module found with this name' or the function is too often called on not available modules. It looks like this:. ```; -- Found py_keras: /usr/lib/python3.5/site-packages/keras ; -- Failed to find Python module theano: Traceback (most recent call last):; File ""<string>"", line 1, in <module>; ImportError: No module named 'theano'; -- Could NOT find py_theano (missing: PY_THEANO) ; -- Found py_tensorflow: /usr/lib/python3.5/site-packages/tensorflow; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/280#issuecomment-253640317:304,simpl,simply,304,https://root.cern,https://github.com/root-project/root/pull/280#issuecomment-253640317,1,['simpl'],['simply']
Usability,"Typically, disparate errors that are all kinda the same mean an error was set prior by some other operation and not cleared. What then happens is that the next (any) Python operation fails, setting its own error. This is something that's new:; ```; +Exception ignored in PyObject_HasAttr(); consider using PyObject_HasAttrWithError(), PyObject_GetOptionalAttr() or PyObject_GetAttr():; ```; and may help narrow it down.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16748#issuecomment-2442692217:116,clear,cleared,116,https://root.cern,https://github.com/root-project/root/pull/16748#issuecomment-2442692217,2,['clear'],['cleared']
Usability,"Unfortunately I am not being paid by CERN, and I am quite overloaded. I have to dedicate my effort to work on the projects I am being paid for. Of course, I can just live with the classes as they are written. I just thought it would be good to dedicate a bit of my time to give you just some feedback/ideas so that you understand how to improve my own user experience. Of course, I understand that my user experience might be different to that of the average user experience, and the ROOT priorities are others. But it is not me who must push for CERN reputation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14173#issuecomment-1852074907:292,feedback,feedback,292,https://root.cern,https://github.com/root-project/root/issues/14173#issuecomment-1852074907,8,"['feedback', 'user experience']","['feedback', 'user experience']"
Usability,Unfortunately simply removing `export std_config` as you suggest appears not to be sufficient with a build as described in https://github.com/root-project/root/issues/10861#issuecomment-1378895796. Trying to see if I can get more information...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861#issuecomment-1398569350:14,simpl,simply,14,https://root.cern,https://github.com/root-project/root/issues/10861#issuecomment-1398569350,2,['simpl'],['simply']
Usability,"Unrelated note. > auto view = ntuple->GetView<float>(""double"");; > modelA->MakeField<std::int32_t>(""int"", 42);. We strive/want to have the name of the column to be usable identifiers (so that they can be used in reading code as-if they actually were identifier (See TTree::Draw syntax and RDataFrame). Could you (likely in a separate/new PR) update the test/example to not use just the datatype as column names?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8227#issuecomment-846080791:164,usab,usable,164,https://root.cern,https://github.com/root-project/root/pull/8227#issuecomment-846080791,2,['usab'],['usable']
Usability,"Update:. After a very productive chat with @eguiraud we found out that this time `TTree::ChangeFile` is not trying to delete the `TBufferMergerFile`s attached to the `TBufferMerger`, but the `TFileMerger` attached to said `TBufferMerger`. The initial patch does not work since the `fOutputFile` member of `TFileMerger` is not a derivate of `TMemFile` and is the one that is getting changed in the process. The design of `TFileMerger` is of using `fOutputFile` as the file where all the data is merged, so of course it should never be deleted. A simple call to `TTree::SetMaxTreeSize()` with a very large size inside `ROOT::Internal::RDF::SnapshotHelperMT::Finalize()` solves the reproducer I attached in the last message.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6570#issuecomment-708403160:545,simpl,simple,545,https://root.cern,https://github.com/root-project/root/pull/6570#issuecomment-708403160,2,['simpl'],['simple']
Usability,"Updated. > It seems ok for me... I do not see how it could be more ""friendly""?. By *fiendly* I mean ""prevent damaging or changing the appearance of due to line break, especially when long strings are encountered"". In the original patch, it provided a general way (from `TVirtulaPS`) to specify different characters (aside from white spaces) to break the line at, and the option to drop the white space at which the line break happens to prevent additional white spaces from showing up in the image when cutting through a long sentence. In the updated patch, a customised `PrintFast` method is created inside `TSVG` that provides more customization (e.g. it's natural to cut between tags `><` in XML) in addition to features from the original patch, while keeping the `TVirtualPS` simple.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9518#issuecomment-1047616127:780,simpl,simple,780,https://root.cern,https://github.com/root-project/root/pull/9518#issuecomment-1047616127,2,['simpl'],['simple']
Usability,Usability. The drawing options are the more common entity to be accessed. I will add a DrawAndGetDrawable in a future revision.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1130#issuecomment-334249130:0,Usab,Usability,0,https://root.cern,https://github.com/root-project/root/pull/1130#issuecomment-334249130,1,['Usab'],['Usability']
Usability,"Using `.L` or `__attribute__((constructor))` or static initialization are good alternatives. However that does not improve usability of `.x` .; As mentioned in the first post, entry function still need renaming when file get renamed.; Also we get function redefinition error when `.x` or `.L` two scripts with same name. For example `dir0/test.C` and `dir1/dir2/test.C` (with completely different content) cannot both define their `test(...)` entry functions. They cannot be put into different namespaces either otherwise cling does not recognize them as entry functions. However, `__main__(...)` approach suffers from multiple definitions too. Unless cling unloads/drops symbol `__main__` after executing it (btw. In this case will static variables of `__main__` get destructed too?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11299#issuecomment-1235581331:123,usab,usability,123,https://root.cern,https://github.com/root-project/root/issues/11299#issuecomment-1235581331,2,['usab'],['usability']
Usability,"Very nice PR. Thank you very much for your contribution!; Could you also please provide a simple test, to be sure the transformation is doing the right thing ? ; Thank you",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4141#issuecomment-527153019:90,simpl,simple,90,https://root.cern,https://github.com/root-project/root/pull/4141#issuecomment-527153019,2,['simpl'],['simple']
Usability,"Very nice PR. The negation functionality will be a clear upgrade of the present infrastructure. For what concerns Filter and Map, I am in favour of keeping them but *maybe* it could be discussed what is their interplay with the ones provided by VecOps for TVecs (#1613). I am of course ready to revise the implementations in #1613.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1612#issuecomment-364567901:51,clear,clear,51,https://root.cern,https://github.com/root-project/root/pull/1612#issuecomment-364567901,2,['clear'],['clear']
Usability,Very nice! Interactive rebase is awesome once you learn how to use it! 👏,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8426#issuecomment-862436129:50,learn,learn,50,https://root.cern,https://github.com/root-project/root/pull/8426#issuecomment-862436129,2,['learn'],['learn']
Usability,"Voila! Here the new plot, without the `--full-dataset` flag we run on a preskimmed and reduced subset from our own xrootd space, which finishes in ~30s. ![ref](https://user-images.githubusercontent.com/6951222/89196380-6a222280-d5aa-11ea-90d9-fb69441dca5c.png). @hageboeck Happy with this setup? With that runtime I hope we can also keep it in the doxygen build to keep the setup simple.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6107#issuecomment-668071388:380,simpl,simple,380,https://root.cern,https://github.com/root-project/root/pull/6107#issuecomment-668071388,2,['simpl'],['simple']
Usability,"Was this mean to go to https://github.com/root-project/root/pull/2603 ? 'Cause this one is nice and simple. Look, you get *way* fewer comments from me if you don't create PRs with 1400 lines changed in 32 files! You asked for it :-). Much of these comments are also style/pattern comments; I hope that we can move to applying them in future code even more than seeing it fixed here. But yes, apologies for killing you ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2634#issuecomment-422505316:100,simpl,simple,100,https://root.cern,https://github.com/root-project/root/pull/2634#issuecomment-422505316,2,['simpl'],['simple']
Usability,"We also want a dedicated `GetDataSourceInfo`, because we have either `fDataSet->GetLabel()`, if there's a `fDataSource`, or a `TTree/TChain` type if there is a `df.GetTree` or it's a simple dataframe aka `RDataFrame(N)` if none if this is true. Coming in a separate PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7561#issuecomment-817717882:183,simpl,simple,183,https://root.cern,https://github.com/root-project/root/issues/7561#issuecomment-817717882,2,['simpl'],['simple']
Usability,"We are probably missing an I/O rule along the line of; ```; #pragma read sourceClass=""TNDArrayT<float>"" targetClass=""TNDArrayT<float>"" source=""Int_t fNumData; float *fData;"" target=""fData"" versions=""1"" code=""{ fData.clear(); for(int i = 0; i < onfile.fNumData; ++i) fData.push_back(onfile.fData[i]); }""; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10382#issuecomment-1096759521:216,clear,clear,216,https://root.cern,https://github.com/root-project/root/issues/10382#issuecomment-1096759521,2,['clear'],['clear']
Usability,"We are really grateful for this feedback. The initial RHist prototype benefited a lot from it and became an even better base for the work that came after (see, e.g. https://indico.cern.ch/event/1403741/#1-thoughts-on-efficient-parall). I am marking this item as ""Won't fix"", but it should really be ""Thank you!"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7971#issuecomment-2241265389:32,feedback,feedback,32,https://root.cern,https://github.com/root-project/root/issues/7971#issuecomment-2241265389,2,['feedback'],['feedback']
Usability,"We are still discussing the names. The current proposal is:; ```; using TFilePtr = std::unique_ptr<TFile>;. /// Open a file with `name` for reading.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr OpenForRead(std::string_view name, const Options_t &opts = Options_t());. /// Open an existing file with `name` for reading and writing. If a file with; /// that name does not exist, an invalid RFilePtr will be returned.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr OpenForUpdate(std::string_view name, const Options_t &opts = Options_t());. /// Open a file with `name` for reading and writing. Fail (return an invalid; /// `RFilePtr`) if a file with this name already exists.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr Create(std::string_view name, const Options_t &opts = Options_t());. /// Open a file with `name` for reading and writing. If a file with this name; /// already exists, delete it and create a new one. Else simply create a new file.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr Recreate(std::string_view name, const Options_t &opts = Options_t());; ```. In the meantime, you should indeed start getting familiar with the testing infrastructure. See io/io/test for some examples.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14017#issuecomment-1821818413:1044,simpl,simply,1044,https://root.cern,https://github.com/root-project/root/pull/14017#issuecomment-1821818413,2,['simpl'],['simply']
Usability,We completely agree and the above PR implements what you propose. Apologies for the long wait for such a simple thing!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9805#issuecomment-1600982681:105,simpl,simple,105,https://root.cern,https://github.com/root-project/root/issues/9805#issuecomment-1600982681,2,['simpl'],['simple']
Usability,"We decided in a TMVA meeting that we want to update the TMVA User's Guide, e.g., such as Simon did recently for the new DNN method. That's the reason for the latex code. As far as I know (and are able to use grep), there's not yet a pandoc integration for the TMVA User's guide such as done for the other docs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/391#issuecomment-284779477:272,guid,guide,272,https://root.cern,https://github.com/root-project/root/pull/391#issuecomment-284779477,1,['guid'],['guide']
Usability,We do not use cmake to build the reference guide. It is a separated Makefile.; Yes that file might be huge. How are managed the pictures ? they are somehow included in it ?; I will try what is suggested in your insa-lyon link,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-901752118:43,guid,guide,43,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-901752118,2,['guid'],['guide']
Usability,"We don't update existing ROOT releases. The fix will be in the next ROOT release, which is either 6.32.08 or 6.34.00. And thanks for the feedback! Good that you know about these options already.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16419#issuecomment-2377653005:137,feedback,feedback,137,https://root.cern,https://github.com/root-project/root/issues/16419#issuecomment-2377653005,2,['feedback'],['feedback']
Usability,We have a clear path to deal with this behaviour.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10556#issuecomment-1968330234:10,clear,clear,10,https://root.cern,https://github.com/root-project/root/issues/10556#issuecomment-1968330234,2,['clear'],['clear']
Usability,"We have this standard tutorial: https://root.cern/doc/master/canvas2_8C.html; Without your change, the axis titles appear as you see on the reference guide online.; With your change, all the titles disappear",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8235#issuecomment-847886843:150,guid,guide,150,https://root.cern,https://github.com/root-project/root/pull/8235#issuecomment-847886843,2,['guid'],['guide']
Usability,"We intentionally keep macros ""illegal C++"": we have a C++ interpreter and we should benefit from this, removing parts of C++ not needed for interactive use, *especially* for tutorials. We find this simplifies the tutorials. We have exceptions for tutorials where we believe many uses will be compiled. . Being able to compile the tutorials isn't a benefit in and by itself. This PR here came out of https://github.com/root-project/root/pull/10004 which claims ""Precompiles C++ script to potentially speedup (slightly) documentation building"". If that's indeed correct then that's a bug in cling. cling must be as fast as compiled code (if using the same optimizer, the same clang version as cling links against etc). So I'd like to better understand the motivation of this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10195#issuecomment-1075129814:198,simpl,simplifies,198,https://root.cern,https://github.com/root-project/root/pull/10195#issuecomment-1075129814,2,['simpl'],['simplifies']
Usability,"We really only want Google tests in root.git (I realize I did not word that clearly enough), so I will apply your test (thanks!) to our dedicated roottest.git repo. Could you split the test into a separate commit? That way I don't mess with your changes as much :-) Or if you don't mind me messing with your commits I can also split this myself - let me know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7031#issuecomment-804060890:76,clear,clearly,76,https://root.cern,https://github.com/root-project/root/pull/7031#issuecomment-804060890,2,['clear'],['clearly']
Usability,"Well not quite, it broke clean builds on the `master` branch on basically all platforms... Not clear why, investigating.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12149#issuecomment-1661811809:95,clear,clear,95,https://root.cern,https://github.com/root-project/root/pull/12149#issuecomment-1661811809,2,['clear'],['clear']
Usability,"Well, I do not think it is a graphics issue. Nothing is drawn simply because the number of entries is 0:; ```; root [0] auto h2 = new TH2I(""h2"", ""h2"", 10, 0, 1, 2, 0, 2);; root [1] h2->AddBinContent(16,5); root [2] h2->GetEntries(); (double) 0.0000000; ```; May be @lmoneta may know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14153#issuecomment-1833962747:62,simpl,simply,62,https://root.cern,https://github.com/root-project/root/issues/14153#issuecomment-1833962747,2,['simpl'],['simply']
Usability,"Well, I do not think we can rely on a given bash version just to get a pid .; Can we not have a more simple standard way to get a such identifier ?; or may be we can just have a counter ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9966#issuecomment-1081606634:101,simpl,simple,101,https://root.cern,https://github.com/root-project/root/pull/9966#issuecomment-1081606634,2,['simpl'],['simple']
Usability,"Well, I don't think it's a GUI issue at all, but more a design issue. Why not simply organize your histograms in directories (`TDirectory`)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13352#issuecomment-1657939361:78,simpl,simply,78,https://root.cern,https://github.com/root-project/root/issues/13352#issuecomment-1657939361,2,['simpl'],['simply']
Usability,"Well, actually it was less work than I thought.; I implemented now all the additions, changes and suggestions from @lmoneta. I used now std::vector everywhere it's features are useful. For the rest I stayed with using arrays to stay similar to all other TGraph objects. I moved the functions GetPointX, GetPointY, SetPointX, SetPointY and GetObjectInfo to the TGraph class because they apply to any TGraph object and only were in my custom class cause I could not implement them in TGraph without using a custom Root installation. I replaced the funtion SetNErrorDimensions by the functions AddYError and DeleteYError as proposed by @lmoneta. Since I think the meaning of ""dimension"" might not be 100% clear, I exchanged it to a term claryfing that it corresponds to different y errors. Besides that I implemented some further features and fixed a memory leak in the function PaintGraphMultiErrors in the TGraphPainter class. I also added a test macro testing the most critical features like streaming the class, adding / deleting points and y errors and the summation of y errors for fitting with different methods.; Furthermore, I added a small tutorial macro that shows how to use the basic functionalities of the class.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3452#issuecomment-559211358:702,clear,clear,702,https://root.cern,https://github.com/root-project/root/pull/3452#issuecomment-559211358,2,['clear'],['clear']
Usability,"Well, it was never needed as such ... it was just to make includes simpler and avoid ifdefs in every TGL file :) I'm just saying you had to change every file that used it and this is really not necessary.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4095#issuecomment-535595924:67,simpl,simpler,67,https://root.cern,https://github.com/root-project/root/pull/4095#issuecomment-535595924,2,['simpl'],['simpler']
Usability,"Well, it's a DY sample, so physically spoken we would expect the upper one (?) Let's say, it's not so clear what's going on :sweat_smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6671#issuecomment-712711356:102,clear,clear,102,https://root.cern,https://github.com/root-project/root/issues/6671#issuecomment-712711356,2,['clear'],['clear']
Usability,"Well, one thing that is clear is that this problem seems to be associated with specific sites. For my 'test' job:. [test job](https://bigpanda.cern.ch/task/23578674/). The sites that are successful either have local reading, or they use xrootd without problems. The latter are: ; SWT2_CPB; IN2P3-LPSC_LAKE; RAL. For the failures, these are all just xrootd problems, at sites:; IN2P3-CPPM; CERN-T0; TOKYO; BNL. So I would suspect some difference in the xrootd installation between these two sites. (I personally have no idea how to check this.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-747328346:24,clear,clear,24,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-747328346,2,['clear'],['clear']
Usability,"Well, sorry but since we are in the process of moving to a Web based GUI (using openUI5), and since this is quite simple to be implemented on the user side, I don't think we're going to create a new widget. But we'll discuss this and I'll come back to you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7156#issuecomment-776008358:114,simpl,simple,114,https://root.cern,https://github.com/root-project/root/issues/7156#issuecomment-776008358,2,['simpl'],['simple']
Usability,"Well, that argument would apply to 95 % percent of the classes in ROOT then :D Users that are adventurous to use this probably also know about C++ ownership. I personally don't think the added complexity and less clear ownership when using `shared_ptr` + `weak_ptr` is justified in this case. I think `shared_ptr` should only be used when there are really shared resources in the implementation details, not as a general solution to prevent the user from making memory management mistakes. As you say, it gives also mixed messages on how to manage the resources. Would you be okay with leaving it like this for now? We can always revisit this if need be...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12348#issuecomment-1439898961:213,clear,clear,213,https://root.cern,https://github.com/root-project/root/pull/12348#issuecomment-1439898961,2,['clear'],['clear']
Usability,"Well, there is simply no need of `gSystem->UnixPathName` all over the place...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1646#issuecomment-366686690:15,simpl,simply,15,https://root.cern,https://github.com/root-project/root/pull/1646#issuecomment-366686690,2,['simpl'],['simply']
Usability,"Well, this simple example works just fine for me on Windows and CentOS7:; ```; void testSignalSlot(); {; TGMainFrame *mainframe = new TGMainFrame(gClient->GetRoot(), 300, 170);; TGCheckButton *myTGCheckBox = new TGCheckButton(mainframe, new TGHotString(""Change Text""), -1);; mainframe->AddFrame(myTGCheckBox, new TGLayoutHints(kLHintsCenterX | kLHintsCenterY));; TGTextButton *myButton = new TGTextButton(mainframe, ""&Any Text"");; mainframe->AddFrame(myButton, new TGLayoutHints(kLHintsExpandX | kLHintsCenterY));; myTGCheckBox->Connect(""Clicked()"", ""TGTextButton"", myButton, ""ChangeText(=\""LEGOlegoemoryABCDEF\"")"");; mainframe->MapSubwindows();; mainframe->Layout();; mainframe->MapWindow();; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7195#issuecomment-779084167:11,simpl,simple,11,https://root.cern,https://github.com/root-project/root/issues/7195#issuecomment-779084167,2,['simpl'],['simple']
Usability,"Well, we have other PRs tagged [WIP] ... so I guess that's fine.. I just do no like the idea of having clearly faulty code in a PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6469#issuecomment-704322903:103,clear,clearly,103,https://root.cern,https://github.com/root-project/root/pull/6469#issuecomment-704322903,2,['clear'],['clearly']
Usability,What Cling is really crashing on is the definition of `art::ensurePointer` or more precisely any function definition with a `try`-`catch` block as body (which I just learned is valid C++...). The problem can be seen with; ```c++; .rawInput; void f() try { } catch (...) { }; ```; (on the ROOT prompt),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9664#issuecomment-1020964451:166,learn,learned,166,https://root.cern,https://github.com/root-project/root/issues/9664#issuecomment-1020964451,2,['learn'],['learned']
Usability,"What I did with definitions is a bit too simple. If you use `target_add_defintions` (only possible for imported interface targets in CMake 3.11+), CMake strips the `-D` if there is one. If you directly set the property, however, it's up to the user to strip it. I'm still interested in the result of this test build, but I'll need to fix the definitions addition before continuing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1959#issuecomment-385710986:41,simpl,simple,41,https://root.cern,https://github.com/root-project/root/pull/1959#issuecomment-385710986,2,['simpl'],['simple']
Usability,What about DrawCopy instead of DrawClone (keeping the simple cd) ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5680#issuecomment-633416576:54,simpl,simple,54,https://root.cern,https://github.com/root-project/root/pull/5680#issuecomment-633416576,2,['simpl'],['simple']
Usability,What about including [this](https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html#numerical-integration) in the reference guide on [this page](https://root.cern/doc/master/group__Integration.html) ?. @lmoneta what do you think ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7740#issuecomment-810160931:59,guid,guides,59,https://root.cern,https://github.com/root-project/root/issues/7740#issuecomment-810160931,6,['guid'],"['guide', 'guides']"
Usability,"What can be done here is rather simple. The bottleneck last time I checked is rootcling (dictionary generation). There are two reasons:; * cmake -- dictionary generation depends on LinkDef and header files and both artifacts are available from the beginning. However, the cmake build system does not have separate targets for dictionary generation and library generation. That leads to forcing rootcling to wait for the expensive linking step of each library. For example, instead of building `Y.pcm` once we are done with building `X.pcm` we wait for the linker to link `X.so`.; * rootcling is unnecessary slow -- the tool has grown organically and in many cases we make many iterations over the AST where we don't need them. Some of the larger scale ideas have been outlined here since years: https://github.com/root-project/root-evolution/pull/5 In fact, we don't need to get so much into the refactoring rootcling, attaching a profiler and seeing the bottlenecks should be easy. For example, iirc, we make several passes over the AST to harvest the selection rules instead of making a single pass.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6432#issuecomment-2001956688:32,simpl,simple,32,https://root.cern,https://github.com/root-project/root/issues/6432#issuecomment-2001956688,2,['simpl'],['simple']
Usability,"What simpler fix do you suggest? Currently `-Dbuiltin_zlib=ON` is broken. I would prefer to fix it first, because that's the real cause of the problem with AfterImage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1527#issuecomment-362516152:5,simpl,simpler,5,https://root.cern,https://github.com/root-project/root/pull/1527#issuecomment-362516152,2,['simpl'],['simpler']
Usability,What we learned from todays PPP:. - We probably want to call it better like `Describe` (done); - We have to document clearly that the output is subject to change and should not be parsed (done); - Add number of DF runs is useful (done); - We have to figure out what to show if there are hundreds of columns; - ~We should try to follow a markdown style formatting to make it look nice in jupyter and friends~ (IMHO: Too complex),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7561#issuecomment-807097352:8,learn,learned,8,https://root.cern,https://github.com/root-project/root/issues/7561#issuecomment-807097352,4,"['clear', 'learn']","['clearly', 'learned']"
Usability,"When I naively set `SetLowBottomMargin(gStyle->GetPadBottomMargin())` and `SetUpTopMargin(gStyle->GetPadTopMargin())` they end up being different than for a simple histogram, i.e. axis labels that should fit disappear. The below example also has `SetSeparationMargin(0)` but that does not change the outer margins. ![image](https://github.com/root-project/root/assets/12029880/e0917420-0de3-4723-8ab8-531a4c6ee48f). That is jsroot plot though, on the ""normal"" one the font size for the ratio plot is bigger and even more disappears at the bottom. :(. ![image](https://github.com/root-project/root/assets/12029880/47b9ecd1-b1d5-415a-be88-d99a03a97624). The left/right margins where easy to change and the most annoying ones visually imo, so that is what I did.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15893#issuecomment-2180723430:157,simpl,simple,157,https://root.cern,https://github.com/root-project/root/pull/15893#issuecomment-2180723430,2,['simpl'],['simple']
Usability,"When using the non-homebrew cmake, make sure you removed the previous CMakeCache.txt. As a brutal measure you can temporarily rename/ops/homebrew; that should also move it out of the way... Can you explain why you don't want to use homebrew's build of ROOT? This seems much simpler than building ROOT yourself - unless you want to help develop ROOT, of course! ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12648#issuecomment-1523186097:274,simpl,simpler,274,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1523186097,2,['simpl'],['simpler']
Usability,"While ROOT master is now building successfully for us, there are some downstream packages that suffer from this change. They can probably be fixed by exporting the ROOT_INCLUDE_PATH, but to better understand where things go wrong I made a very simple repeater. I think on any centos7 with the sft cvmfs this should work; ```; source /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Fri/CMake/3.20.0/x86_64-centos7-gcc10-dbg/CMake-env.sh; source /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Fri/ROOT/HEAD/x86_64-centos7-gcc10-dbg/ROOT-env.sh. git clone https://gitlab.cern.ch/sailer/root_repeater.git; cd root_repeater; mkdir build; cd build. cmake -D nlohmann_json_DIR=$JSONMCPP__HOME/lib64/cmake/nlohmann_json \; -D Python_ROOT_DIR=$PYTHON__HOME \; -D Vc_DIR=$VC__HOME/lib/cmake/Vc \; ..; make; ./RunTest; ```. Just linking an executable to ROOTTPython (https://gitlab.cern.ch/sailer/root_repeater/-/blob/master/CMakeLists.txt#L17); leads to an error like this; ```; ./RunTest ; <<< cling interactive line includer >>>: fatal error: module file '/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT-HEAD-build/lib/Vc.pcm' not found: module file not found; <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Fri/ROOT/HEAD/x86_64-centos7-gcc10-dbg/lib/MathCore.pcm'; Failed to load module MathCore; Failed to load module Hist; Failed to load module ROOTBrowsable; Failed to load module Unfold; Failed to load module RHTTPSniff; Failed to load module HistPainter; Failed to load module PyMVA; Failed to load module RHTTP; Failed to load module FitPanel; Failed to load module ProofDraw; Failed to load module Unuran; Failed to load module Quadp; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Fai",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9594#issuecomment-1029801305:244,simpl,simple,244,https://root.cern,https://github.com/root-project/root/issues/9594#issuecomment-1029801305,2,['simpl'],['simple']
Usability,"While benchmarking the change I discovered something fascinating.; This simple benchmark only tests retrieval of a custom column:; ```c++; TDataFrame d(1000000000ull);; d.Define(""ans"", [] { return 42; }); .Foreach([](int) {}, {""ans""});; ```. The relevant code path that changes between master and this PR is the following:; ```patch; T &TColumnValue<T>::Get(Long64_t entry); {; - if (!fReaderValues.empty()) {; - return *(fReaderValues.back()->Get());; - } else {; - fCustomColumns.back()->Update(fSlot, entry);; - return fIsDataSourceColumn ? **fDSValuePtrs.back() : *fCustomValuePtrs.back();; + switch (fColumnKind) {; + case EColumnKind::kTreeArray: /*dealt with in the other `Get` overload*/; + case EColumnKind::kTreeValue: return *(fReaderValues.back()->Get());; + case EColumnKind::kCustomColumn: fCustomColumns.back()->Update(fSlot, entry); return *fCustomValuePtrs.back();; + case EColumnKind::kDataSource: fCustomColumns.back()->Update(fSlot, entry); return **fDSValuePtrs.back();; }; +; ```; Looks _faster_ right?. On my workstation `perf stat` yields the following instruction counts and runtimes (single-thread executable compiled with `-g -O2`):; ```; # MASTER; 99,494,923,915 instructions:u; 9.844 seconds. # PR; 103,495,337,205 instructions:u; 11.049 seconds; ```. The `switch-case` is sensibly slower and results in more cpu instructions than the `if-else` over `std::vector::empty` on this artificial yet very representative benchmark. I thought this might have been a cache-friendliness issue and was almost ready to give up on this PR, but luckily plotting stacktraces showed that the culprit is inlining:. **MASTER**; ![image](https://user-images.githubusercontent.com/10999034/30910728-3b607ff4-a386-11e7-928e-6a404a485cf6.png). **PR**; ![image](https://user-images.githubusercontent.com/10999034/30910790-7f808562-a386-11e7-90f9-f1417c712f86.png). The `Get` method is not inlined when it contains the `switch-case`!; I will come up with a change that maintains inlining intact s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1060#issuecomment-332489724:72,simpl,simple,72,https://root.cern,https://github.com/root-project/root/pull/1060#issuecomment-332489724,2,['simpl'],['simple']
Usability,"While the current behaviour is clearly a bug and needs to be fixed, I would also appreciate a workaround that I could use right now. Maybe there is some function/static method to call to clean up the global caches (if that is indeed a problem of caching).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10577#issuecomment-1126366016:31,clear,clearly,31,https://root.cern,https://github.com/root-project/root/issues/10577#issuecomment-1126366016,2,['clear'],['clearly']
Usability,"While thinking about collisions and the index storage, one thought that crossed my mind is to template the index based on the index field type(s). I'm not sure if that's a good idea, one of the immediate question being ""do we want `RNTupleIndex<std::string>` and `RNTupleIndex<std::uint64_t>` to be different types?"" But still maybe something to consider, it might simplify the field value storage (if needed) and the entire hashing business...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15116#issuecomment-2242991029:365,simpl,simplify,365,https://root.cern,https://github.com/root-project/root/pull/15116#issuecomment-2242991029,2,['simpl'],['simplify']
Usability,Why don't you simply make one animated gif with the two canvases on top of each other ? it should be possible ? The tool you are using to make them does not allow this ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1839#issuecomment-383958682:14,simpl,simply,14,https://root.cern,https://github.com/root-project/root/pull/1839#issuecomment-383958682,2,['simpl'],['simply']
Usability,"Why not just leave the issue open? If anyone from the community finds the issue interesting - they can start working on it. However, I kindly propose enabling the ""Discussion"" functionality for the repository and then moving the issue to the ""Discussions"" under the ""Ideas"" built-in label. Having the issue closed is not clear for newcomers since they at first look at open issues to start work at, not closed issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15778#issuecomment-2154460609:321,clear,clear,321,https://root.cern,https://github.com/root-project/root/issues/15778#issuecomment-2154460609,2,['clear'],['clear']
Usability,"With `TObjString` is relatively simple - if it used in the code, include should be there. Very similar with `TObjArray`. When removing `TEnv.h`, I checked if `gEnv` there. When removing `TSystem.h` - if `gSystem` used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5069#issuecomment-592083756:32,simpl,simple,32,https://root.cern,https://github.com/root-project/root/pull/5069#issuecomment-592083756,2,['simpl'],['simple']
Usability,"With output variable you mean adding PARENT_SCOPE, or something else? This doesn't seem to require fixes in root test; ... but; So I make REFLEX_.. a function and then simply do ` set(gensrcdict ${dictionary}.cxx PARENT_SCOPE)` I get this error:. ```; CMake Error at /home/sailer/software/buildroot/RootMacros.cmake:183 (add_custom_command):; add_custom_command Wrong syntax. A TARGET or OUTPUT must be specified.; Call Stack (most recent call first):; /home/sailer/software/roottest/cmake/modules/RoottestMacros.cmake:349 (REFLEX_GENERATE_DICTIONARY); /home/sailer/software/roottest/root/meta/dictSelection/CMakeLists.txt:1 (ROOTTEST_GENERATE_REFLEX_DICTIONARY); ```. If I keep the first `set(gensrcdict...)` and add this ` set(gensrcdict ${dictionary}.cxx PARENT_SCOPE)` after the `add_custom_command` call I at least don't get any obvious cmake errors I can connect with these changes. Could you trigger the CI, please? I would like to know if these changes are at least working. To not have USES, one would check if `${dictionary}` is a target or not (I don't think this was a requirement before?) and then do what was done with the list given to USES before.; This can potentially affect existing uses of REFLEX_GENERATE_DICTIONARY. ```cmake; IF(TARGET ${dictionary}); LIST(APPEND include_dirs $<TARGET_PROPERTY:${dictionary},INCLUDE_DIRECTORIES>); LIST(APPEND definitions $<TARGET_PROPERTY:${dictionary},COMPILE_DEFINITIONS>); ENDIF(); ```; ```cmake; IF(TARGET ${dictionary}); target_sources(${dictionary} PRIVATE ${gensrcdict}); ENDIF(); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5019#issuecomment-587575128:168,simpl,simply,168,https://root.cern,https://github.com/root-project/root/pull/5019#issuecomment-587575128,2,['simpl'],['simply']
Usability,"With the following changes; ```; diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py; index 52d23a6fc3..790432eb3d 100644; --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py; +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py; @@ -79,6 +79,7 @@ def cleanup():; # Hard teardown: run part of the gROOT shutdown sequence.; # Running it here ensures that it is done before any ROOT libraries; # are off-loaded, with unspecified order of static object destruction.; + print(""Calling EndOfProcessCleanups from __init__.py""); backend.gROOT.EndOfProcessCleanups(); ; atexit.register(cleanup); diff --git a/core/base/src/TApplication.cxx b/core/base/src/TApplication.cxx; index 8bdaa03f8d..9a02160611 100644; --- a/core/base/src/TApplication.cxx; +++ b/core/base/src/TApplication.cxx; @@ -86,6 +86,7 @@ static void CallEndOfProcessCleanups(); // set gROOT in its end-of-life mode which prevents executing code, like; // autoloading libraries (!) that is pointless ...; if (gROOT) {; + std::cout << ""Calling EndOfProcessCleanups from TApplication\n"";; gROOT->SetBit(kInvalidObject);; gROOT->EndOfProcessCleanups();; }; ```. I get this; ```; $: python -c ""import ROOT""; Calling EndOfProcessCleanups from __init__.py; $: python -c ""import ROOT; ROOT.TH1F""; Calling EndOfProcessCleanups from __init__.py; Calling EndOfProcessCleanups from TApplication; ```. i.e. it looks to me that as long as anything is done in the PyROOT application other than simply importing the module, the second cleanup routine is called at the end of the process (after the Python one). Either one of these should probably not be called",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10743#issuecomment-1154462514:1528,simpl,simply,1528,https://root.cern,https://github.com/root-project/root/issues/10743#issuecomment-1154462514,2,['simpl'],['simply']
Usability,"Without a better place to put this (should I open a follow-up issue?):. > 1. Try to reproduce the problem with vanilla lli of LLVM 9 to check that this is not related to the way Cling incrementally JITs and executes. I can reproduce the problem with vanilla `lli -O0` of LLVM 9.0.1 for the following simple C program compiled to LLVM IR with `clang -S -emit-llvm print.c`:; ```c; #include <stdio.h>. int main() {; printf(""Hello from JIT\n"");; }; ```. Higher optimization levels (default is `-O2`) make the problem go away, as does `--global-isel=0`. So far, so consistent. > 2. Figure out exactly why GlobalISel emits different branch instructions, and whether this is a problem in the framework or of the generated IR.; > 3. Verify if the same happens with LLVM 11/12 (whatever Cling will move to next), and possibly fix the underlying issue in LLVM upstream's `main`. LLVM 11.1.0 does not show the problem with `lli -O0` by default due to https://github.com/llvm/llvm-project/commit/366ab0d086a457b085e3c9ba1c987d5499079cd6, but forcing `--global-isel=1` still fails. The commit message is light on details, but I'd say this confirms it's a framework problem of GlobalISel. I would guess that the problem persists in `main` (unless somebody fixed since the last release).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7419#issuecomment-799389082:300,simpl,simple,300,https://root.cern,https://github.com/root-project/root/pull/7419#issuecomment-799389082,2,['simpl'],['simple']
Usability,"Would that answer your concerns:; ```; cat T.C ; struct S {};. root -l -b; root [0] #undef TRY; root [1] .I /home/vagrant/workspace/root/src/interpreter/cling/include/; root [2] .I /home/vagrant/workspace/root/src/interpreter/llvm/src/include/; root [3] .I /home/vagrant/workspace/root/src/interpreter/llvm/src/tools/clang/include; root [4] .I /usr/lib/llvm-5.0/include; root [5] #include ""cling/Interpreter/Interpreter.h""; root [6] #include ""cling/Interpreter/LookupHelper.h""; root [7] cling::runtime::gCling->getLookupHelper().findType(""S"", cling::LookupHelper::NoDiagnostics).isNull(); (bool) true; root [8] #include ""T.C""; root [9] cling::runtime::gCling->getLookupHelper().findType(""S"", cling::LookupHelper::NoDiagnostics).isNull(); (bool) false; root [10] .undo 2; root [11] cling::runtime::gCling->getLookupHelper().findType(""S"", cling::LookupHelper::NoDiagnostics).isNull(); (bool) true; root [12] .q; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2483#issuecomment-413984860:763,undo,undo,763,https://root.cern,https://github.com/root-project/root/pull/2483#issuecomment-413984860,2,['undo'],['undo']
Usability,"Wow, love this!. Random unsolicited feedback: ROOT convention for commit messages is to use the imperative mood and start with a capital letter ([we are not alone](https://chris.beams.io/posts/git-commit/)), and it might be useful to split the changes in different commits per repo subdirectories (tree, roofit, hist, math...) in case parts of this need to be reverted later for whatever reason.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6007#issuecomment-656194773:36,feedback,feedback,36,https://root.cern,https://github.com/root-project/root/pull/6007#issuecomment-656194773,2,['feedback'],['feedback']
Usability,"Wow, you were fast in spotting this :smiley: I think there's a relatively simple fix, see https://github.com/root-project/root/pull/11148",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11128#issuecomment-1208232344:74,simpl,simple,74,https://root.cern,https://github.com/root-project/root/issues/11128#issuecomment-1208232344,2,['simpl'],['simple']
Usability,"X.sdk/System/Library/Frameworks (framework directory); End of search list.; # 1 ""/dev/null""; # 1 ""<built-in>"" 1; # 1 ""<built-in>"" 3; # 439 ""<built-in>"" 3; # 1 ""<command line>"" 1; # 1 ""<built-in>"" 2; # 1 ""/dev/null"" 2. $ clang++ -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin24.0.0; Thread model: posix; InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1""; ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang"" -cc1 -triple arm64-apple-macosx15.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/stognini -resource-dir /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -internal-isystem /Library",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16494#issuecomment-2374779123:6145,clear,clear-ast-before-backend,6145,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2374779123,2,['clear'],['clear-ast-before-backend']
Usability,"X.sdk/System/Library/Frameworks (framework directory); End of search list.; # 1 ""/dev/null""; # 1 ""<built-in>"" 1; # 1 ""<built-in>"" 3; # 439 ""<built-in>"" 3; # 1 ""<command line>"" 1; # 1 ""<built-in>"" 2; # 1 ""/dev/null"" 2. + clang++ -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin23.6.0; Thread model: posix; InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1""; ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang"" -cc1 -triple arm64-apple-macosx14.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/pcanal/root_working/builds/master.debug/src/tutorials/v7/ntuple -resource-dir /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16 -isysroot /Library/Developer/Comm",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16494#issuecomment-2375170248:6483,clear,clear-ast-before-backend,6483,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2375170248,2,['clear'],['clear-ast-before-backend']
Usability,"X.sdk/System/Library/Frameworks (framework directory); End of search list.; # 1 ""/dev/null""; # 1 ""<built-in>"" 1; # 1 ""<built-in>"" 3; # 439 ""<built-in>"" 3; # 1 ""<command line>"" 1; # 1 ""<built-in>"" 2; # 1 ""/dev/null"" 2. + clang++ -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin23.6.0; Thread model: posix; InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1""; ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang"" -cc1 -triple arm64-apple-macosx14.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/pcanal/root_working/builds/master.module -resource-dir /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOS",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16494#issuecomment-2377172429:6457,clear,clear-ast-before-backend,6457,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2377172429,2,['clear'],['clear-ast-before-backend']
Usability,"Yeah, I found it in the guide. Thanks a lot. Best Regards，; Long LI; --------------------------------------------------------------------------; Institute of Frontier and Interdisciplinary Science, Shandong University. Addr：NO.72 Binhaidadao,Jimo,Qindao,PRC; E-mail: longli@mail.sdu.edu.cn; Tel: +86 13176405608 ; . On 11/17/2020 16:28，Olivier Couet<notifications@github.com> wrote：. Col2 option is a bitmap Representation of the histogram to make the col option very fast when the histogram has many bins and the bin size is close to one pixel. But this bitmap graphics and ps and pdf are vector graphics. So col2 produces an empty plot. This is not a bug. This feature is explained in the THistPainter reference guide (look at it) in the COL Option section.; —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub, or unsubscribe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6822#issuecomment-728772136:24,guid,guide,24,https://root.cern,https://github.com/root-project/root/issues/6822#issuecomment-728772136,4,['guid'],['guide']
Usability,"Yeah, I wrote those docs :sweat_smile: but I am not sure they should say ""stored as 64 bit"". @pcanal I guess we can fix this test such that writing and reading back a `Long_t` leaf works correctly both on 32bit and 64bit architectures, but what happens when you write that data on a 64bit machine and read it on a 32bit machine or vice-versa?. @ellert in this test we really want to test `long int` support (see be6a62ee84317), so I think the appropriate fix would be to simply use a smaller value than the current `2^33` on 32bit machines, rather than switching to `long long`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10302#issuecomment-1091685848:471,simpl,simply,471,https://root.cern,https://github.com/root-project/root/pull/10302#issuecomment-1091685848,2,['simpl'],['simply']
Usability,"Yep, but it seems that this issue is still buggy in master. They suggest a workaround, but not sure... ```; QUICK FIXES FOR USERS:. If you personally encounter this ""Error in line 4595: Opening and ending tag; mismatch."", and you just want to fix that issue, then the solution is to; either make sure that all your enums are documented or that they are; appropriately hidden (nested in an undocumented class, or nested in a; filtered-out namespace (e.g., ""detail"")). This is what I did, it fixed all; my issues.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-1011076618:389,undo,undocumented,389,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-1011076618,2,['undo'],['undocumented']
Usability,Yes . may be it is the simplest. Will do.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1702#issuecomment-370835794:23,simpl,simplest,23,https://root.cern,https://github.com/root-project/root/pull/1702#issuecomment-370835794,2,['simpl'],['simplest']
Usability,Yes 63 can be calculated but in that case 113 will need to be set. Yes we can have a named constant but the comment on the ligne setting 63 is clear enough I guess.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1546#issuecomment-360156026:143,clear,clear,143,https://root.cern,https://github.com/root-project/root/pull/1546#issuecomment-360156026,2,['clear'],['clear']
Usability,Yes I do this mistake too from time to time :-) (reducing the number of input files in Doxyfile and forget to restore te right version before committing). You simply need to change Doxyfile to the correct version and push it again to this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3552#issuecomment-532091018:159,simpl,simply,159,https://root.cern,https://github.com/root-project/root/pull/3552#issuecomment-532091018,2,['simpl'],['simply']
Usability,Yes I made a typo. It is fixed now. The full information about TTree should be in the Reference Guide. We will not update the User's guide any more. It could be useful if you point stuff you find in the User's Guide but not in the Reference or in the Manual. That would help us to update both. By the way: Try to find something about RDataFrame in the user's Guide.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7284#issuecomment-785901630:96,Guid,Guide,96,https://root.cern,https://github.com/root-project/root/issues/7284#issuecomment-785901630,5,"['Guid', 'guid']","['Guide', 'guide']"
Usability,"Yes I would like some feedback on the use of std::vector so I can take care of that appropriately together with rebasing. If this strategy is agreed I can also clean up a bit more to avoid the redundant size counters, etc.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7499#issuecomment-828637952:22,feedback,feedback,22,https://root.cern,https://github.com/root-project/root/pull/7499#issuecomment-828637952,2,['feedback'],['feedback']
Usability,Yes but the list of folders does not follow the classes naming .... You may need more something like `-DENABLE_HIST` .... but then is the `hist` folder we have `hist` and `histpainter` subfolders which might be enabled separately ... and this is a simple example there is much more complex structures for which we need a precise picking which is done by `makeinput.sh`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8950#issuecomment-934499934:248,simpl,simple,248,https://root.cern,https://github.com/root-project/root/issues/8950#issuecomment-934499934,2,['simpl'],['simple']
Usability,"Yes but we do not need to have consecutive ranges and I think encoding the following way is clearer:; ""xy"" -> [0, 1000]; ""X"" -> [2000, 3000]; ""y"" -> [4000, 5000]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1553#issuecomment-360485266:92,clear,clearer,92,https://root.cern,https://github.com/root-project/root/pull/1553#issuecomment-360485266,2,['clear'],['clearer']
Usability,Yes that's what is said in the DrawClone documentation. But what about using simply Draw instead of DrawClone in these examples ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5680#issuecomment-633408762:77,simpl,simply,77,https://root.cern,https://github.com/root-project/root/pull/5680#issuecomment-633408762,2,['simpl'],['simply']
Usability,"Yes the first approach might be the simplest.; In your example you separate value with tabs. I thought `.csv` meant ""comma separated value"" therefore should we better do:; ```; outfile << x[i] << "","" << y[i] << std::endl;. ```; ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9491#issuecomment-1058992368:36,simpl,simplest,36,https://root.cern,https://github.com/root-project/root/issues/9491#issuecomment-1058992368,2,['simpl'],['simplest']
Usability,"Yes this is a way towards this. There are more steps (TFile, TKey and adding custom streamers for the TProto* classes and a few others) so not simple but likely straight-forward.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6532#issuecomment-721762456:143,simpl,simple,143,https://root.cern,https://github.com/root-project/root/pull/6532#issuecomment-721762456,2,['simpl'],['simple']
Usability,"Yes we are working on the manual. And please if you see something missing in Manual or in the reference guide which is no where else but in the Old User's Guide, let us know and we will make sure it appears somewhere. ; I guess we can close this issue now ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7284#issuecomment-785937049:104,guid,guide,104,https://root.cern,https://github.com/root-project/root/issues/7284#issuecomment-785937049,3,"['Guid', 'guid']","['Guide', 'guide']"
Usability,"Yes, @amadio , that was a nice intuition of yours. The comment also goes beyond this particular item and shows we really explored the topic in depth :) I am closing the issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7709#issuecomment-1833892432:31,intuit,intuition,31,https://root.cern,https://github.com/root-project/root/issues/7709#issuecomment-1833892432,2,['intuit'],['intuition']
Usability,"Yes, I know about rootbrowse. The TBrowser was just the simplest example I have. It's not the only custom command line option I'm using, I also use this to manipulate gStyle, load .so files, etc. . Of course I am fully aware that my complaint feels a lot like https://xkcd.com/1172/...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8850#issuecomment-1079234719:56,simpl,simplest,56,https://root.cern,https://github.com/root-project/root/issues/8850#issuecomment-1079234719,2,['simpl'],['simplest']
Usability,"Yes, I know, but since this is quite a high level change, I don't think I will introduce it in the `TGCommandPlugin` class. You should do that in your own application. For example, you can simply copy and paste what is done in `TRint.cxx`:; ```; // Goto into raw terminal input mode; char defhist[kMAXPATHLEN];; snprintf(defhist, sizeof(defhist), ""%s/.root_hist"", gSystem->HomeDirectory());; logon = gEnv->GetValue(""Rint.History"", defhist);; // In the code we had HistorySize and HistorySave, in the rootrc and doc; // we have HistSize and HistSave. Keep the doc as it is and check; // now also for HistSize and HistSave in case the user did not use; // the History versions; int hist_size = gEnv->GetValue(""Rint.HistorySize"", 500);; if (hist_size == 500); hist_size = gEnv->GetValue(""Rint.HistSize"", 500);; int hist_save = gEnv->GetValue(""Rint.HistorySave"", 400);; if (hist_save == 400); hist_save = gEnv->GetValue(""Rint.HistSave"", 400);; const char *envHist = gSystem->Getenv(""ROOT_HIST"");; if (envHist) {; hist_size = atoi(envHist);; envHist = strchr(envHist, ':');; if (envHist); hist_save = atoi(envHist+1);; }; Gl_histsize(hist_size, hist_save);; Gl_histinit((char *)logon);; ```; You can even specify your own history file, if you don't want to use the default.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7180#issuecomment-780840424:189,simpl,simply,189,https://root.cern,https://github.com/root-project/root/issues/7180#issuecomment-780840424,2,['simpl'],['simply']
Usability,"Yes, I noted that, but it looks like it's a shorter version of that in the User's Guide. I hope ""new"" doesn't mean that it will replace the existing manual (or, even worse, to create a second source of the same documentation)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7284#issuecomment-785858085:82,Guid,Guide,82,https://root.cern,https://github.com/root-project/root/issues/7284#issuecomment-785858085,1,['Guid'],['Guide']
Usability,"Yes, I see it with a simple 1D histogram, too, no need for secondary axes. But... Ok I found out the issue. I do see the artifact only if I call:; `c->SetFillStyle(0);`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9763#issuecomment-1026887078:21,simpl,simple,21,https://root.cern,https://github.com/root-project/root/issues/9763#issuecomment-1026887078,2,['simpl'],['simple']
Usability,"Yes, I see same problem in JSROOT. It is because we are using different coordinates inside frame for axes/grids/histogram drawings and for `TLine` which is drawn in the pad coordinates. Main problem here that left/top coordinates of the frame are rounded integer values. ; And then axis position calculated relative to this rounded values.; In this example vertical coordinate of the frame should be `52.5`, but rounded to `52` or `53`.; Drawing will be perfect when canvas vertical size is 500. I see no simple solution here. ; To fix problem we have to change fX1, fY1, fX2, fY2 members of the TPad every time canvas width or height is changing. More easy solution is to provide extra draw option for `TLine` (and similar classes) where coordinates calculated using frame functions. Then it automatically will be adjusted to the rounded position of the frame",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14546#issuecomment-1944053421:505,simpl,simple,505,https://root.cern,https://github.com/root-project/root/issues/14546#issuecomment-1944053421,2,['simpl'],['simple']
Usability,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it!. Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:; ```; That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context.; ```. does not call out; - that it's during dictionary generation; - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17); - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers); - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12276#issuecomment-1429251757:1664,simpl,simply,1664,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1429251757,2,['simpl'],['simply']
Usability,"Yes, but we meant it would be useful to add also a note or link to it in the Users Guide: https://root.cern.ch/root/htmldoc/guides/users-guide/Threads.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7216#issuecomment-1057548805:83,Guid,Guide,83,https://root.cern,https://github.com/root-project/root/issues/7216#issuecomment-1057548805,5,"['Guid', 'guid']","['Guide', 'guide', 'guides']"
Usability,"Yes, documentation is not there.; Many settings are not RBrowser specific, but applied for all web widgets: canvases, geometry viewer, eve7, browser, fit panel.; Major settings are mentioned here:; https://root.cern/doc/master/classROOT_1_1Experimental_1_1RWebWindowsManager.html ; See CreateServer and ShowWindow methods. Chrome and Firefox browser are required for batch mode.; For normal interactive mode any modern web browser should do the job.; But in fact, most of them are just modifications of chrome - beside firefox. ; To be clear - old `Internet Explorer` is not ""modern"" browser and therefore not supported.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10259#issuecomment-1090486006:536,clear,clear,536,https://root.cern,https://github.com/root-project/root/issues/10259#issuecomment-1090486006,2,['clear'],['clear']
Usability,"Yes, it is clearly a difference is setup. In the failing one the `BLAS` library is not installed (or not found) and the real problem is that this result in a very obscure and hard to understand failure:; ```; IncrementalExecutor::executeFunction: symbol 'saxpy_' unresolved while linking [cling interface function]!; IncrementalExecutor::executeFunction: symbol 'sgemm_' unresolved while linking [cling interface function]!; ```; Instead we should either; * fail to configure if BLAS is missing; or ; * disable the components that require BLAS when configuring whe BLAS is missing; or; * disable the test that require BLAS when BLAS is not there. and at the very least we should list somewhere (if not already done so, but I don't see it) that the `BLAS` library is required to successfully run the tests and some of the features.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16720#issuecomment-2425048725:11,clear,clearly,11,https://root.cern,https://github.com/root-project/root/issues/16720#issuecomment-2425048725,2,['clear'],['clearly']
Usability,"Yes, it is not supported up to now.; In #10344 I implement exactly this feature.; In the settings dialog one can specify flag ""Append to canvas"", which does exactly the same as ""same"" draw option. Thanks for providing useful feedback!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10265#issuecomment-1090470674:225,feedback,feedback,225,https://root.cern,https://github.com/root-project/root/issues/10265#issuecomment-1090470674,2,['feedback'],['feedback']
Usability,"Yes, it is same problem. Actually, solution is very simple and I implement it with JSROOT. ; One can copy it to the C++",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9364#issuecomment-1012969310:52,simpl,simple,52,https://root.cern,https://github.com/root-project/root/issues/9364#issuecomment-1012969310,2,['simpl'],['simple']
Usability,"Yes, of course! I will also copy it here:. The rationale behind this change is that the public methods will (in most cases) be directly used by end users, so there is no need to further propagate potential errors. It removes the need to `Unwrap` the importer object returned by `Create`, making it more intuitive to use. As a potential downside, this means that in case the importer is used in more elaborate call; chains this propagation is of course not possible anymore. A possible solution could be to have methods for both, although this will obviously add some bloat.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12565#issuecomment-1488072046:303,intuit,intuitive,303,https://root.cern,https://github.com/root-project/root/pull/12565#issuecomment-1488072046,2,['intuit'],['intuitive']
Usability,"Yes, of course, I can reproduce the error in regular C++ with something as simple as <https://godbolt.org/z/rnqWer3bj>:; ```cpp; #include <ranges>; using namespace std;; #include <range/v3/views.hpp>; ```; but I see 2 errors in this example:; - using std::ranges and ranges at the same time (not really an error, but a bit silly); - `using namespace std` before including `range/v3/views.hpp` (actually `using namespace std` should be considered an error by itself). The following code works:; ```cpp; #include <ranges>; #include <range/v3/views.hpp>; using namespace std;; ```; still a bit silly, but it works. So, I'm sorry, but I do not buy the comment that developers of libraries should always put `::` in front of every top level namespace. I believe it is fairy reasonable to assume that nobody does `using namespace std;` before including any header.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13001#issuecomment-1591318680:75,simpl,simple,75,https://root.cern,https://github.com/root-project/root/issues/13001#issuecomment-1591318680,2,['simpl'],['simple']
Usability,"Yes, that's a tricky part ... I hope your changes do not break anything. ... that's not clear just looking at the PR. Also I guess this way of handling the options comes from THisPainter. so to be consistent you might want to change it there too... but that's a much bigger thing .....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5898#issuecomment-647544231:88,clear,clear,88,https://root.cern,https://github.com/root-project/root/pull/5898#issuecomment-647544231,2,['clear'],['clear']
Usability,"Yes, that's to be expected because of the error in the command:; `qhelpgenerator index.qhp`. I checked locally and I am seeing the same error. It seems the index.qhp file is corrupted here because of a mismatch in section opening and closing tags:; ```. <toc>; <section title=""ROOT master"" ref=""index.html"">; <section title=""ROOT Reference Documentation"" ref=""index.html"">; <section title=""Introduction"" ref=""index.html#autotoc_md0"" />; <section title=""Manuals"" ref=""index.html#autotoc_md1"" />; <section title=""Tutorials and courses"" ref=""index.html#autotoc_md2"" />; <section title=""Provide your feedback"" ref=""index.html#autotoc_md3"" />; </section>; </section>; </section>; <section title=""Tutorials"" ref=""group__Tutorials.html"" />; ```; I guess I will have to file another bug report in doxygen :s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-1011056200:596,feedback,feedback,596,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-1011056200,2,['feedback'],['feedback']
Usability,"Yes, we will have to consistently undo a set of other changes, namely in the tmva cmake files and rootcling.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6999#issuecomment-758267044:34,undo,undo,34,https://root.cern,https://github.com/root-project/root/pull/6999#issuecomment-758267044,2,['undo'],['undo']
Usability,Yes. Issue is clarified. - I can see the classlist on the browser at home and in the office.; - I cannot see it at the pit .... but this all hints to a funny browser setup there. I have to investigate. Thanks a lot to all for the clarification and please take my apologies for ; creating noise about an issue which was clearly my fault!. Thanks a lot!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15906#issuecomment-2185817262:319,clear,clearly,319,https://root.cern,https://github.com/root-project/root/issues/15906#issuecomment-2185817262,2,['clear'],['clearly']
Usability,"Yes. The link goes into detail, but record arrays are essentially arrays of structs— contiguous in memory, rowwise across named, differently typed members. You can also specify per-member alignment, in case your operating system has weird alignment rules. The user can then refer to rows of the record array with integer slices and columns with strings in square brackets. Since the data are rectangular, these slices are accomplished through constant strides. I've often wondered what the big deal about Pandas was, since these are the features people describe as the benefits of Pandas, but they've been available in Numpy for years. I've since learned that Pandas additionally has smarter indexing than Numpy's position-based indexing, but that's not needed for something that's essentially a set, like a set of events. (Not needed until we aggregate somehow.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1872#issuecomment-384268662:647,learn,learned,647,https://root.cern,https://github.com/root-project/root/pull/1872#issuecomment-384268662,2,['learn'],['learned']
Usability,"You are night, we need to make sure that ROOT compiles if there is already ROOT on the system, or at least that you get a clear error. There is already an open issue about this, so I'll close this issue as duplicate:; https://github.com/root-project/root/issues/13101",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14337#issuecomment-2046073774:122,clear,clear,122,https://root.cern,https://github.com/root-project/root/issues/14337#issuecomment-2046073774,2,['clear'],['clear']
Usability,"You are right, extra boilerplate in the tutorials is not good. But This PR is not meant to me merged as is, I did it to explore why `ClearProxiedObjects()` is needed also for hard shutdown. And the set of code that I needed to add to the tutorials made to reason more or less clear: there is some issue with `TH1` specifically.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16671#issuecomment-2410483715:133,Clear,ClearProxiedObjects,133,https://root.cern,https://github.com/root-project/root/pull/16671#issuecomment-2410483715,3,"['Clear', 'clear']","['ClearProxiedObjects', 'clear']"
Usability,"You called it ""simple"", you tricked us into reviewing! :P",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5453#issuecomment-618903622:15,simpl,simple,15,https://root.cern,https://github.com/root-project/root/pull/5453#issuecomment-618903622,2,['simpl'],['simple']
Usability,You can simply disable `imt` (`-Dimt=OFF`) and `builtin_tbb` (-D`builtin_tbb=OFF`).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8742#issuecomment-888087500:8,simpl,simply,8,https://root.cern,https://github.com/root-project/root/issues/8742#issuecomment-888087500,2,['simpl'],['simply']
Usability,You can use `R` or `ATTRDUMP`. I just like the freedom we have of using more telling raw string delimiters than `R`. It's also not clear whether such a chance (from `ATTRDUMP` to `R`) is worth the churn.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10830#issuecomment-1168354018:131,clear,clear,131,https://root.cern,https://github.com/root-project/root/pull/10830#issuecomment-1168354018,2,['clear'],['clear']
Usability,You do not have any Draw() method for the TFeynmanEntry. You have a Add() method which will add the new object in the list of object in TFeynman. So you need to have a Tlist in TFeynman holding the list of all the TFeynman entry buildingthe diagram. The Draw method of TFeynman will simply do AppendPad and will pout the whole diagram in the list of primates of the current pad (gPad) . TFeynmanEntry will have a Paint and the Paint method of TFeynman will call all the Paint of the TFeynmanEntry in the TList ... Really it is the same structure as TLegend.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7820#issuecomment-819336796:283,simpl,simply,283,https://root.cern,https://github.com/root-project/root/pull/7820#issuecomment-819336796,2,['simpl'],['simply']
Usability,"You mean `gStyle->GetAxisMaxDigits()`?. I guess, one should understand why it happens.; How I can reproduce it?. As a workaround, I can add simple check in this function that it returns meaningful positive value from the range [0..100]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12513#issuecomment-1490325536:140,simpl,simple,140,https://root.cern,https://github.com/root-project/root/pull/12513#issuecomment-1490325536,2,['simpl'],['simple']
Usability,You mean as a progress bar? 'Cause I am *sure* that clang is making progress - I doubt that have a `if (opt == O2) sleep(120)` ;-),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2360#issuecomment-417276705:14,progress bar,progress bar,14,https://root.cern,https://github.com/root-project/root/pull/2360#issuecomment-417276705,2,['progress bar'],['progress bar']
Usability,"You probably mean ""are now in development phase"".; As of today, I see that ; 1) there is no better document than the User's guide (the chapter about trees there looks more comprehensive to me than in the manual).; 2) it is still available from the site, people may use that. ; 3) the manual has no pdf. For me it's very important, because I don't want to be online to read docs. I could use `wget`, but when I have a ready pdf, I chose the latter. I honestly think that User's Guide is well-written and useful. I think that to do small updates to that (at least to sync the pdf version with html) is better now, until the manual is finalized and is definitely better than the old guide.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7284#issuecomment-785897720:124,guid,guide,124,https://root.cern,https://github.com/root-project/root/issues/7284#issuecomment-785897720,5,"['Guid', 'guid']","['Guide', 'guide']"
Usability,You would like to have the whole Reference Guide generated via Doxygen in pdf format ? ; Doxygen is able to generate Latex (then pdf) ... We can try but I am afraid that will be a monster file...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7421#issuecomment-799484591:43,Guid,Guide,43,https://root.cern,https://github.com/root-project/root/issues/7421#issuecomment-799484591,1,['Guid'],['Guide']
Usability,You're very welcome! And thanks for the feedback!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15336#issuecomment-2159926070:40,feedback,feedback,40,https://root.cern,https://github.com/root-project/root/issues/15336#issuecomment-2159926070,2,['feedback'],['feedback']
Usability,Your comment is very valid. In the particular case you mentioned that would mean your TPaveLabel has wh ot ww = 0 ? so it won't be really useful. But I agree It should not crash. By chance do you have a simple reproducer ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6344#issuecomment-692111232:203,simpl,simple,203,https://root.cern,https://github.com/root-project/root/issues/6344#issuecomment-692111232,2,['simpl'],['simple']
Usability,Your fix is fine. ; I see that the arrows are not responsive on Mac also,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7184#issuecomment-778014086:50,responsiv,responsive,50,https://root.cern,https://github.com/root-project/root/pull/7184#issuecomment-778014086,2,['responsiv'],['responsive']
Usability,"ZN11__cling_N5015__cling_Un1Qu30EPv(i8*) local_unnamed_addr #0 {; %2 = load i8*, i8** bitcast (%""class.cling::Interpreter.0""** @_ZN5cling7runtime6gClingE to i8**), align 8, !tbaa !2; @@ -39,9 +39,9 @@; %5 = load i1 (%class.TSystem*, i8*, i32)**, i1 (%class.TSystem*, i8*, i32)*** %4, align 8, !tbaa !6; %6 = getelementptr inbounds i1 (%class.TSystem*, i8*, i32)*, i1 (%class.TSystem*, i8*, i32)** %5, i64 135; %7 = load i1 (%class.TSystem*, i8*, i32)*, i1 (%class.TSystem*, i8*, i32)** %6, align 8; - %8 = tail call zeroext i1 %7(%class.TSystem* %3, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i32 zeroext 0); + %8 = tail call zeroext i1 %7(%class.TSystem* %3, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i32 zeroext 0); %9 = zext i1 %8 to i64; - tail call void @_ZN5cling7runtime8internal15setValueNoAllocEPvS2_S2_cy(i8* %2, i8* %0, i8* nonnull inttoptr (i64 283833264 to i8*), i8 signext 1, i64 %9); + tail call void @_ZN5cling7runtime8internal15setValueNoAllocEPvS2_S2_cy(i8* %2, i8* %0, i8* nonnull inttoptr (i64 283832976 to i8*), i8 signext 1, i64 %9); ret void; }; ; @@ -65,4 +65,4 @@; !5 = !{!""Simple C++ TBAA""}; !6 = !{!7, !7, i64 0}; !7 = !{!""vtable pointer"", !5, i64 0}; -$8 = void; +$10 = void; ```. Please ignore this. The issue seems to be caused by the plugin manager which is trying to resolve a url. The crash is still present for `root.exe -l -b -e 'gSystem->AccessPathName(""httppp://KKKKK"",kFileExists)'` which just goes over the available plugins and asks if one could resolve the url. The current flow is that we first parse the string `gSystem->AccessPathName(""httppp://KKKKK"",kFileExists)` and start executing it. Then, at execution time, we realize that might be a url and start parsing and executing various file fetch plugins (davix, http...) and then upon execution of `etc/plugins/TSystem/P050_TWebSystem.C` we crash. The code of the plugin is nothing complicated:; ```c++; void P050_TWebSystem(); {; gPluginMgr->AddHand",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8072#issuecomment-982075814:1874,Simpl,Simple,1874,https://root.cern,https://github.com/root-project/root/issues/8072#issuecomment-982075814,1,['Simpl'],['Simple']
Usability,[The way it is implemented](https://root.cern.ch/doc/master/TF1_8cxx_source.html#l01408) makes it mandatory to have an active pad with the TF1 drawn in it. That's why you need to add these `gPad->Update()` if you really want to use this function (see my first example). My second reply does exactly the same thing as DrawIntegral without the `GetSelectedPad()`. That's the simpler/better way when you run compiled ROOT like you.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13708#issuecomment-1734857976:373,simpl,simpler,373,https://root.cern,https://github.com/root-project/root/issues/13708#issuecomment-1734857976,2,['simpl'],['simpler']
Usability,[conversionWithChecksum.tgz](https://github.com/root-project/root/files/14102267/conversionWithChecksum.tgz). contains the full example:. ```; root.exe -b -l -q writedata.C+; root.exe -b -l -q simpleread.C+ ; ```; ```; ***********************************; * Row * Instance * seg_split *; ***********************************; Error in <TBufferFile::CheckByteCount>: object of class vector<CSCSegment> read too few bytes: 4 instead of 24; * 0 * 0 * 0 *; ***********************************; Error in <TBufferFile::CheckByteCount>: object of class vector<MatchedCSCSegment> read too few bytes: 12 instead of 24; ***********************************; * Row * Instance * seg_unspl *; ***********************************; Error in <TBufferFile::CheckByteCount>: object of class vector<MatchedCSCSegment> read too few bytes: 12 instead of 24; Error in <TBufferFile::CheckByteCount>: object of class vector<MatchedCSCSegment> read too few bytes: 12 instead of 24; * 0 * 0 * 1 *; ***********************************. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14491#issuecomment-1917587621:193,simpl,simpleread,193,https://root.cern,https://github.com/root-project/root/issues/14491#issuecomment-1917587621,2,['simpl'],['simpleread']
Usability,[reproducer_9252.tar.gz](https://github.com/root-project/root/files/7488905/reproducer_9252.tar.gz). Adding a simple reproducer of the failing case. See README in the tar file for instruction.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9252#issuecomment-962218564:110,simpl,simple,110,https://root.cern,https://github.com/root-project/root/issues/9252#issuecomment-962218564,2,['simpl'],['simple']
Usability,"\VC\Tools\MSVC\14.32.31326\include\tuple(74,90): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\CodeGen\TargetLoweringObjectFileImpl.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\CodeGen\LLVMCodeGen.vcxproj] ; - [2022-09-14T15:02:59.017Z] C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility(1274,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\Utils\SimplifyCFG.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Transforms\Utils\LLVMTransformUtils.vcxproj] ; - [2022-09-14T15:02:59.017Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/ADT/SmallVector.h(841,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\Utils\SimplifyIndVar.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Transforms\Utils\LLVMTransformUtils.vcxproj] ; - [2022-09-14T15:02:59.017Z] C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\utility(389,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\CodeGen\TailDuplication.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\CodeGen\LLVMCodeGen.vcxproj] ; - [2022-09-14T15:02:59.017Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/Support/CommandLine.h(1218,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\Utils\SizeOpts.cpp) [C:\build\workspace\root-pullrequests-build\bui",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11366#issuecomment-1246914758:1382,Simpl,SimplifyIndVar,1382,https://root.cern,https://github.com/root-project/root/pull/11366#issuecomment-1246914758,1,['Simpl'],['SimplifyIndVar']
Usability,"\\""\\"", float f=1.f) with arguments:"" << std::endl;; std::cout << ""a: "" << a << std::endl;; std::cout << ""b: "" << b << std::endl;; std::cout << ""c: "" << c << std::endl;; std::cout << ""d: "" << d << std::endl;; std::cout << ""e: "" << e << std::endl;; std::cout << ""f: "" << f << std::endl;; }; Simple(float a, float b, float c,float d=1.f) {; std::cout << ""Simple(float a, float b, float c,float d=1.f) with arguments:"" << std::endl;; std::cout << ""a: "" << a << std::endl;; std::cout << ""b: "" << b << std::endl;; std::cout << ""c: "" << c << std::endl;; std::cout << ""d: "" << d << std::endl;; }; };. class Minimal{; public:; Minimal(int a, float b, float c=1.0f) {; std::cout << ""Minimal(int a, float b, float c=1.0f) with arguments:"" << std::endl;; std::cout << ""a: "" << a << std::endl;; std::cout << ""b: "" << b << std::endl;; std::cout << ""c: "" << c << std::endl;; }; Minimal(float a, float b) {; std::cout << ""Minimal(float a, float b) with arguments:"" << std::endl;; std::cout << ""a: "" << a << std::endl;; std::cout << ""b: "" << b << std::endl;; }; };; '''; ). a = int(1); b = float(2.2); c = float(3.3); d = float(4.4). simple = cppyy.gbl.Simple(a, b, c, d); minimal = cppyy.gbl.Minimal(a, b); ```. The constructors in `Simple` mimic the constructors of `TColor`. The `Minimal` class should show the same issue with less constructor arguments. Passing an `int` as first argument is not enough to distinguish between these two constructors; ```; Minimal(int a, float b, float c=1.0f); Minimal(float a, float b); ```; This is the result of the script above; ```; (cppyy-venv) vpadulan@fedorathinkpad-T550 [~/Projects/rootcode/ROOT-GITHUB-7790]: pip freeze; cppyy==1.9.5; cppyy-backend==1.14.3; cppyy-cling==6.21.6; CPyCppyy==1.12.4; (cppyy-venv) vpadulan@fedorathinkpad-T550 [~/Projects/rootcode/ROOT-GITHUB-7790]: python cppyy_simple_reproducer.py ; Simple(float a, float b, float c,float d=1.f) with arguments:; a: 1; b: 2.2; c: 3.3; d: 4.4; Minimal(float a, float b) with arguments:; a: 1; b: 2.2; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7790#issuecomment-828426447:1371,simpl,simple,1371,https://root.cern,https://github.com/root-project/root/issues/7790#issuecomment-828426447,5,"['Simpl', 'simpl']","['Simple', 'simple']"
Usability,"\include\llvm/CodeGen/MachineInstr.h(459,43): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\CodeGen\MachineFunction.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\CodeGen\LLVMCodeGen.vcxproj] ; - [2022-04-08T22:11:47.619Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\include\clang/AST/Decl.h(2878,59): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\Frontend\LayoutOverrideSource.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\lib\Frontend\obj.clangFrontend.vcxproj] ; - [2022-04-08T22:11:47.619Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/IR/Instructions.h(4611,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\Scalar\SimplifyCFGPass.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Transforms\Scalar\LLVMScalarOpts.vcxproj] ; - [2022-04-08T22:11:47.619Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\CodeGen\SelectionDAG\SelectionDAGBuilder.cpp(10480,1): fatal error C1060: compiler is out of heap space [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\CodeGen\SelectionDAG\LLVMSelectionDAG.vcxproj] ; - [2022-04-08T22:11:47.619Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/Support/Casting.h(229,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\IPO\WholeProgramDevirt.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Transforms\IPO\LLVMipo.vcxproj] . And 29 more",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10366#issuecomment-1093410595:3526,Simpl,SimplifyCFGPass,3526,https://root.cern,https://github.com/root-project/root/pull/10366#issuecomment-1093410595,1,['Simpl'],['SimplifyCFGPass']
Usability,"_One_ of the results will do something similar to a future (but not quite, because futures in C++ are associated with asynchronous execution). I still think that the average physicist will get as little insight in the semantics of the type from the denomination ""Handle"" as they get from ""Proxy"". Even ROOT has a `TFileOpenHandle` which does not have the semantics you describe.; There is a slice of our users which are not familiar with the experiment frameworks and/or do not use one. If you feel strongly that this is not the way to go and we need a name that clearly conveys both pointer semantics and the fact that the first access triggers the event loop, I think we'll need a discussion outside of this PR :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1855#issuecomment-381109118:563,clear,clearly,563,https://root.cern,https://github.com/root-project/root/pull/1855#issuecomment-381109118,2,['clear'],['clearly']
Usability,"_Should_ be fixed (and tested), let me know if you have any feedback (it would be great if you could pick that branch and check it fixes your usecase, or alternatively a nightly build tomorrow -- I plan to merge the fix today).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7143#issuecomment-775238821:60,feedback,feedback,60,https://root.cern,https://github.com/root-project/root/issues/7143#issuecomment-775238821,2,['feedback'],['feedback']
Usability,"__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) (./cling+0xace867); > > #10 0x0000000000b10d17 cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (./cling+0xb10d17); > > #11 0x0000000000bad161 cling::UserInterface::runInteractively(bool) (./cling+0xbad161); > > #12 0x00000000009d28b7 main (./cling+0x9d28b7); > > #13 0x00007f024c2b0840 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x20840); > > #14 0x0000000000a32349 _start (./cling+0xa32349); > > Stack dump:; > > 0.	Program arguments: ./cling -xcuda ; > > Segmentation fault (core dumped); > > ```; > ; > There is nothing obvious for me happening wrong in the `CIFactory.cpp`. Something likely changed in the cuda setup in llvm9. Let me know if we should make a joint debug session.; > ; > > But this is on my todo list for this week. I also see that this PR has some changes that your cling doesn't have, which is what my test is based on. So, my next step is to test the CUDA mode with the root version.; > ; > One way to test cling within ROOT would be to get this PR and then configure with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug -Dclingtest=On` and then type `make -j cling` and that should build the cling binary ready to use. The root PR does not solve my problem. I looked a little bit in the code with the gdb and found out, where the application crashes. In `IncrementalCUDADeviceCompiler::generatePTX()` the line `llvm::Module* module = m_PTX_interp->getLastTransaction()->getModule();` returns a `nullptr`. But this only happens, if I define a Cuda `__global__` kernel. If use a normal C++ statement, like `int i = 3;` or define a Cuda `__device__` function everything is fine. I'm not sure, if there more cases. @vgvassilev Do you have an idea? Maybe you saw something, which can help me, during your porting work. If not, it is not problem. Then, I simply have to spent more time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-776591942:3714,simpl,simply,3714,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-776591942,2,['simpl'],['simply']
Usability,"_range.h:43:45: warning: ‘*((void*)& CCR +16)’ may be used uninitialized in this function [-Wmaybe-uninitialized] ; - [2020-09-27T10:50:53.297Z] /mnt/build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/ADT/iterator_range.h:43:45: warning: ‘*((void*)& CCR +40)’ may be used uninitialized in this function [-Wmaybe-uninitialized] ; - [2020-09-27T10:50:55.844Z] /mnt/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/IncrementalJIT.h:108:74: warning: ‘llvm::orc::LegacyRTDyldObjectLinkingLayer::LegacyRTDyldObjectLinkingLayer(llvm::orc::ExecutionSession&, llvm::orc::LegacyRTDyldObjectLinkingLayer::ResourcesGetter, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyLoadedFtor, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyFinalizedFtor, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyFreedFtor)’ is deprecated [-Wdeprecated-declarations] ; - [2020-09-27T10:50:55.845Z] /mnt/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp:344:33: warning: ‘llvm::orc::LegacyIRCompileLayer&lt;BaseLayerT, CompileFtor&gt;::LegacyIRCompileLayer(BaseLayerT&, CompileFtor, llvm::orc::LegacyIRCompileLayer&lt;BaseLayerT, CompileFtor&gt;::NotifyCompiledCallback) [with BaseLayerT = cling::IncrementalJIT::RemovableObjectLinkingLayer; CompileFtor = llvm::orc::SimpleCompiler; llvm::orc::LegacyIRCompileLayer&lt;BaseLayerT, CompileFtor&gt;::NotifyCompiledCallback = std::function&lt;void(long unsigned int, std::unique_ptr&lt;llvm::Module&gt;)&gt;]’ is deprecated [-Wdeprecated-declarations] ; - [2020-09-27T10:50:55.845Z] /mnt/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp:344:33: warning: ‘llvm::orc::LazyEmittingLayer&lt;BaseLayerT&gt;::LazyEmittingLayer(BaseLayerT&) [with BaseLayerT = llvm::orc::LegacyIRCompileLayer&lt;cling::IncrementalJIT::RemovableObjectLinkingLayer, llvm::orc::SimpleCompiler&gt;]’ is deprecated [-Wdeprecated-declarations] . And 241 more",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-699619365:3249,Simpl,SimpleCompiler,3249,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-699619365,2,['Simpl'],['SimpleCompiler']
Usability,`curl -v https://github.com:443/root-project/root/raw/master/tutorials/dataframe/df017_vecOpsHEP.root -o file.root` show the problem. `github.com` server supports `HTTP 2` while `TWebFile` uses `HTTP 1.1`. Therefore `github.com` simply refuses first request with 400 error. Not sure if there is easy way to support `HTTP 2` with `TWebFile`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8890#issuecomment-911515928:229,simpl,simply,229,https://root.cern,https://github.com/root-project/root/issues/8890#issuecomment-911515928,2,['simpl'],['simply']
Usability,"`obj.ClassName()` is not only less verbose, but also doesn't require you to include `TClass.h`. Okay I see the point that one doesn't know if it is `obj.IsA()->GetName()` or `obj.Class()->GetName()`, but to be confused by this one needs to be a `TObject` expert why knows about the difference between `IsA()` and `Class()`. Without this prior knowledge, I think the behavior of `obj.ClassName()` to give the name of the derived class is very intuitive.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10670#issuecomment-1143539344:442,intuit,intuitive,442,https://root.cern,https://github.com/root-project/root/pull/10670#issuecomment-1143539344,2,['intuit'],['intuitive']
Usability,"`sysctl -n hw.logicalcpu` works. I still think that a simple ""`-j8` where ""8"" is the number of cores you have"" is easier to access for our readers. I don't think it's the readme's job to explain how to find one's number of cores. ""`-j8` where ""8"" is the number of cores you have"" is the change I suggested you to do. Would you agree to do that?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5079#issuecomment-597561877:54,simpl,simple,54,https://root.cern,https://github.com/root-project/root/pull/5079#issuecomment-597561877,2,['simpl'],['simple']
Usability,"a simpler reproducer:; ```; void HV_comp_red(){; Double_t biasVoltage[28] = {80., 70., 60., 50., 40., 30., 20., 10., 9., 8., 7., 6., 5., 4., 3., 2., 1., 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.08, 0.06};; Double_t mean0[28] = {0., -4.45, -3.81, -14.65, -11.81, -12.56, -12.25, -6.26, -9.40, -7.98, -7.14, -17.87, -12.26, -11.41, -13.35, -14.51, -7.51, -16.15, -12.67, -18.58, -8.76, -8.94, -13.75, -14.31, -12.76, -14.16, -8.24, -135.4};. auto graph0 = new TGraph(28, biasVoltage, mean0);. graph0->SetMarkerColor(2);; graph0->SetMarkerStyle(20);. TCanvas *canvas = new TCanvas(""c"", ""c"", 200,10,900,600);; canvas->SetLogx();; graph0->Draw(""a p rx"");; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11938#issuecomment-1372092925:2,simpl,simpler,2,https://root.cern,https://github.com/root-project/root/issues/11938#issuecomment-1372092925,2,['simpl'],['simpler']
Usability,"ac, and certainly easier than Linux varietals), so that's a choice. Neither has Mac for that matter: folks are free to update Xcode or not. Of course, you're saved here b/c even older Clang on Mac is pretty up-to-date with C++, but no such luck on Windows. On the other hand, modern MSVC is fine, but then Clang5 underpinning Cling can not parse the C++ library headers of MSVC 19 with C++17 enabled. So catch-22. Shipped PCMs also prevent developers from using OpenMP with Cling, but at least that can still be done in libraries, which can be linked without otherwise exposing OpenMP. However, the baked-in choice for _not_ having AVX means not only that Cling can not use it, but also causes binary incompatability with libraries that were compiled with AVX enabled (e.g. many/most Eigen-based codes). Then there is the version of C++ being fixed by the PCMs (and worse, in RConfig.h and the ""backported"" stringview classes, so it's not a simple matter of wiping the local PCMs and rebuilding), meaning C++11 is the only supported version unless you do a full recompile (and see the forum for how much fun that is). And if you look at the whole list of nightlies of the past couple of weeks, and not only at the carefully selected all-green one out of a sea of red that you posted above, you'll see that non-Linux platforms fail disproportionally often. (In fact one of the recent ""green"" releases is only green b/c MacOS 10.15 and Windows10 are switched off.) That tells me that most of your developers work on Linux, and rely on the nightlies to catch any portability issues. That's a very poor approach b/c your matrix is necessarily limited given the enormous number of possible combinations. (That's another way of saying it's carefully selected.). I don't actually know if all those Linux systems are SLC, but did note for example that the build failed on SuSE Tumbleweed with gcc9, b/c SuSE does not install TBB by default to go with that compiler, and the build was missing headers as a cons",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6393#issuecomment-707273510:1592,simpl,simple,1592,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-707273510,2,['simpl'],['simple']
Usability,"ack (most recent call first):; CMakeLists.txt:95 (include); This warning is for project developers. Use -Wno-dev to suppress it. CMake Warning (dev) at /usr/lib/llvm/15/lib/cmake/llvm/HandleLLVMOptions.cmake:1001 (option):; Policy CMP0077 is not set: option() honors normal variables. Run ""cmake; --help-policy CMP0077"" for policy details. Use the cmake_policy command to; set the policy and suppress this warning. For compatibility with older versions of CMake, option is clearing the; normal variable 'LLVM_ENABLE_RTTI'.; Call Stack (most recent call first):; CMakeLists.txt:95 (include); This warning is for project developers. Use -Wno-dev to suppress it. CMake Warning (dev) at /usr/share/cmake/Modules/CMakeDependentOption.cmake:75 (option):; Policy CMP0077 is not set: option() honors normal variables. Run ""cmake; --help-policy CMP0077"" for policy details. Use the cmake_policy command to; set the policy and suppress this warning. For compatibility with older versions of CMake, option is clearing the; normal variable 'LLVM_EXPORT_SYMBOLS_FOR_PLUGINS'.; Call Stack (most recent call first):; /usr/lib/llvm/15/lib/cmake/llvm/HandleLLVMOptions.cmake:1157 (CMAKE_DEPENDENT_OPTION); CMakeLists.txt:95 (include); This warning is for project developers. Use -Wno-dev to suppress it. -- Looking for os_signpost_interval_begin; -- Looking for os_signpost_interval_begin - not found; -- Found PythonInterp: /usr/bin/python (found version ""3.10.9""); -- Performing Test CXX_HAS_Wno_nested_anon_types; -- Performing Test CXX_HAS_Wno_nested_anon_types - Success; -- Performing Test CXX_HAS_Wno_covered_switch_default; -- Performing Test CXX_HAS_Wno_covered_switch_default - Success; -- Performing Test CXX_HAS_Wno_unused_local_typedef; -- Performing Test CXX_HAS_Wno_unused_local_typedef - Success; -- Cling version (from VERSION file): 1.0~dev; -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-pc-linux-gnu/11/include/g++-v11:/usr/lib/gcc/x86_64-pc-linux-gnu/11/include/g++-v11/x86_64-pc-linux",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11920#issuecomment-1370394653:7155,clear,clearing,7155,https://root.cern,https://github.com/root-project/root/issues/11920#issuecomment-1370394653,2,['clear'],['clearing']
Usability,"after some changes, this should be fine. I also added a new tutorial and simplified `double32.C`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3863#issuecomment-496032329:73,simpl,simplified,73,https://root.cern,https://github.com/root-project/root/pull/3863#issuecomment-496032329,2,['simpl'],['simplified']
Usability,"after very long pause (sorry), I've rerun my tests with dev3 LCG nightly slot and I see that performance is close to values from the start of December. Likely the the problem is solved and the issue can be closed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11927#issuecomment-1399911161:16,pause,pause,16,https://root.cern,https://github.com/root-project/root/issues/11927#issuecomment-1399911161,2,['pause'],['pause']
Usability,ah - i still didn't get it right... learning,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/584#issuecomment-302451433:36,learn,learning,36,https://root.cern,https://github.com/root-project/root/pull/584#issuecomment-302451433,1,['learn'],['learning']
Usability,"anager::runOnModule (this=0xf6a4b0, M=...) at /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/lib/IR/LegacyPassManager.cpp:1554; > #63 llvm::legacy::PassManagerImpl::run (this=<optimized out>, M=...) at /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/lib/IR/LegacyPassManager.cpp:542; > #64 0x00007fffeeaccbee in cling::IncrementalExecutor::emitModule (this=0x698d80, T=...) at /home/jhahnfel/ROOT/llvm13/src/interpreter/cling/lib/Interpreter/IncrementalExecutor.h:253; > #65 cling::IncrementalExecutor::runStaticInitializersOnce (this=0x698d80, T=...) at /home/jhahnfel/ROOT/llvm13/src/interpreter/cling/lib/Interpreter/IncrementalExecutor.cpp:251; > #66 0x00007fffeea63d43 in cling::Interpreter::executeTransaction (this=<optimized out>, T=...) at /home/jhahnfel/ROOT/llvm13/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1714; > #67 0x00007fffeea6da53 in cling::IncrementalParser::commitTransaction (this=0x4f6670, PRT=..., ClearDiagClient=<optimized out>) at /home/jhahnfel/ROOT/llvm13/src/interpreter/cling/lib/Interpreter/IncrementalParser.cpp:675; > #68 0x00007fffeea6e410 in cling::IncrementalParser::Compile (this=0x4f6670, input=..., Opts=...) at /home/jhahnfel/ROOT/llvm13/src/interpreter/cling/lib/Interpreter/IncrementalParser.cpp:846; > #69 0x00007fffeea62615 in cling::Interpreter::EvaluateInternal (this=0x4f17a0, input=..., CO=..., V=0x7fffffffcc70, wrapPoint=<optimized out>) at /home/jhahnfel/ROOT/llvm13/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1379; > #70 0x00007fffee95d98f in TCling::Calc (this=0x4f0e00, line=0x1c224b0 ""ROOT::Internal::RDF::JitFilterHelper(R_rdf::lambda0, new const char*[1]{\""a\""}, 1, \""\"", reinterpret_cast<std::weak_ptr<ROOT::Detail::RDF::RJittedFilter>*>(0x21269a0), reinterpret_cast<std::shared_ptr<ROO""..., error=0x7fffffffcd0c) at /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TCling.cxx:3556; > #71 0x00007ffff7fc97b3 in ROOT::Internal::RDF::InterpreterCalc(std::__cxx11::basic_string<char, std::char_traits<char>, std::",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1098026446:16196,Clear,ClearDiagClient,16196,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1098026446,1,['Clear'],['ClearDiagClient']
Usability,any feedback on this PR ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8265#issuecomment-946554582:4,feedback,feedback,4,https://root.cern,https://github.com/root-project/root/pull/8265#issuecomment-946554582,2,['feedback'],['feedback']
Usability,any further feedback on this one? (I think I am not changing code in any part),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9654#issuecomment-1074169606:12,feedback,feedback,12,https://root.cern,https://github.com/root-project/root/pull/9654#issuecomment-1074169606,2,['feedback'],['feedback']
Usability,"as for simple; using struct instead of class should focus on the issue; ```; struct xy_t{; double x;; double y;; ClassDef(xy_t,1);; };; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8295#issuecomment-851783548:7,simpl,simple,7,https://root.cern,https://github.com/root-project/root/issues/8295#issuecomment-851783548,2,['simpl'],['simple']
Usability,"as.SetLumi(1);; meas.AddConstantParam(""Lumi"");. RooStats::HistFactory::Channel chan1(""channel1"");; chan1.SetData("""","""");; RooStats::HistFactory::Sample sample1(""sample1"");; sample1.SetHistoName(""emu_OS_1b_Ma"");; sample1.SetHistoPath("""");; sample1.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");; sample1.SetNormalizeByTheory(false);; sample1.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);; sample1.AddNormFactor(""b"", 0.543, 0.5, 0.6);; sample1.AddOverallSys(""Dummy"",1,1);. RooStats::HistFactory::Sample sample2(""sample2"");; sample2.SetHistoName(""emu_OS_1b_Mb"");; sample2.SetHistoPath("""");; sample2.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");; sample2.SetNormalizeByTheory(false);; sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);; sample2.AddNormFactor(""minusONE"", -1, -1.1, -0.9);; sample2.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);; sample2.AddOverallSys(""Dummy"",1,1);. chan1.AddSample(sample1);; chan1.AddSample(sample2);. RooStats::HistFactory::Channel chan2(""channel2"");; chan2.SetData("""","""");; RooStats::HistFactory::Sample sample3(""sample3"");; sample3.SetHistoName(""emu_OS_2b_Mc"");; sample3.SetHistoPath("""");; sample3.SetInputFile(""BLIND_separate_tt_Z_29IFB_Apr_29_histos.root"");; sample3.SetNormalizeByTheory(false);; sample2.AddNormFactor(""signalStrength"", 1, 0.8, 1.2);; sample3.AddNormFactor(""b2"", 0.2950, 0.0, 1.0);; sample3.AddOverallSys(""Dummy"",1,1);; chan2.AddSample(sample3);. meas.AddPreprocessFunction(""b2"",""b*b"",""b[0.543,0.0,1.0]"");; meas.AddConstantParam(""minusONE"");; meas.AddChannel(chan1);; meas.AddChannel(chan2);; meas.CollectHistograms();; RooStats::HistFactory::MakeModelAndMeasurementFast(meas);; }; ```. The code and the input can be found here: `/afs/cern.ch/user/t/tdado/public/ROOT_issue_14225`. It is probably not the simplest example, but it is realistic (the histograms and the setup come from an actual measurement). Note that using only the first channel does _not_ lead to a crash. I hope this helps, let me know if I can do more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14225#issuecomment-1857543387:2007,simpl,simplest,2007,https://root.cern,https://github.com/root-project/root/issues/14225#issuecomment-1857543387,2,['simpl'],['simplest']
Usability,"ataframe/test/module.modulemap:3:33: error: cannot emit module dataframe_splitcoll_arrayview: size must be explicitly specified for missing header file ""TwoFloats.h"" ; - [2022-04-02T22:12:27.642Z] /data/sftnight/workspace/root-pullrequests-build/build/tree/dataframe/test/module.modulemap:3:33: error: cannot emit module dataframe_splitcoll_arrayview: size must be explicitly specified for missing header file ""TwoFloats.h"" ; - [2022-04-02T22:12:27.642Z] /data/sftnight/workspace/root-pullrequests-build/build/tree/dataframe/test/module.modulemap:3:33: error: cannot emit module dataframe_splitcoll_arrayview: size must be explicitly specified for missing header file ""TwoFloats.h"" ; - [2022-04-02T22:15:05.920Z] /data/sftnight/workspace/root-pullrequests-build/build/tree/dataframe/test/module.modulemap:10:37: error: cannot emit module dataframe_simple: size must be explicitly specified for missing header file ""MaxSlotHelper.h"" ; - [2022-04-02T22:15:05.920Z] /data/sftnight/workspace/root-pullrequests-build/build/tree/dataframe/test/module.modulemap:11:36: error: cannot emit module dataframe_simple: size must be explicitly specified for missing header file ""SimpleFiller.h"" ; - [2022-04-02T22:15:05.920Z] /data/sftnight/workspace/root-pullrequests-build/build/tree/dataframe/test/module.modulemap:11:36: error: cannot emit module dataframe_simple: size must be explicitly specified for missing header file ""SimpleFiller.h"" ; - [2022-04-02T22:15:05.920Z] /data/sftnight/workspace/root-pullrequests-build/build/tree/dataframe/test/module.modulemap:10:37: error: cannot emit module dataframe_simple: size must be explicitly specified for missing header file ""MaxSlotHelper.h"" . And 4 more. ### Warnings:; - [2022-04-02T22:10:33.417Z] Warning in &lt;CheckModuleValid&gt;: warning: Couldn't find in the following specified headers in the module Core: ; - [2022-04-02T22:10:58.306Z] Warning in &lt;CheckModuleValid&gt;: warning: Couldn't find in the following specified headers in the module Thread:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1086733507:7077,Simpl,SimpleFiller,7077,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1086733507,2,['Simpl'],['SimpleFiller']
Usability,"ation/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/base/inc -Iginclude -I/mnt/build/workspace/root-pullrequests-build/root/math/mathcore/inc -I/mnt/build/workspace/root-pullrequests-build/root/math/mathcore/v7/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/imt/inc -I/mnt/build/workspace/root-pullrequests-build/root/core/multiproc/inc -Iexternals/mnt/build/workspace/root-pullrequests-build/install/include -I/mnt/build/workspace/root-pullrequests-build/root/net/net/inc -I/mnt/build/workspace/root-pullrequests-build/root/io/io/inc -fdiagnostics-color=always -std=c++11 -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -fPIC -std=c++11 -MD -MT math/mathmore/CMakeFiles/MathMore.dir/src/GSLRndmEngines.cxx.o -MF math/mathmore/CMakeFiles/MathMore.dir/src/GSLRndmEngines.cxx.o.d -o math/mathmore/CMakeFiles/MathMore.dir/src/GSLRndmEngines.cxx.o -c /mnt/build/workspace/root-pullrequests-build/root/math/mathmore/src/GSLRndmEngines.cxx; > * [2021-03-01T16:00:58.827Z] /mnt/build/workspace/root-pullrequests-build/root/math/mathmore/src/GSLRndmEngines.cxx:225:68: error: ‘gsl_ran_multivariate_gaussian’ was not declared in this scope. Sorry that it took me a while to look at this. I had to create an Ubuntu 16.04 virtual machine for testing. . @lmoneta, unfortunately, this error happens because Ubuntu 16.04 ships GSL version 2.1, which hasn't gsl_ran_multivariate_gaussian. The multivariate Gaussian random number generation in GSL was only introduced in version 2.2.1. I bypass this with an `#ifdef` that will define the function if the GSL version is < 2.2 by simply copying it from a higher version of GSL. Hopefully, this doesn't break the GPL license under which GSL is distributed. I think that I could also replace the function call to `gsl_ran_multivariate_gaussian` with the wrapper's full implementation. I am open to comments. I don't have access to a windows machine now; I will do the same and use a virtual machine to test that part.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7186#issuecomment-801496369:2765,simpl,simply,2765,https://root.cern,https://github.com/root-project/root/pull/7186#issuecomment-801496369,2,['simpl'],['simply']
Usability,"b/Interpreter/IncrementalJIT.cpp; index e20543b..668bf0b 100644; --- a/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp; +++ b/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp; @@ -352,7 +352,7 @@ IncrementalJIT::IncrementalJIT(IncrementalExecutor& exe,; this->m_Resolver};; },; m_NotifyObjectLoaded, NotifyFinalizedT(*this)),; - m_CompileLayer(m_ObjectLayer, llvm::orc::SimpleCompiler(*m_TM)),; + m_CompileLayer(m_ObjectLayer, MySimpleCompiler(*m_TM)),; m_LazyEmitLayer(m_CompileLayer) {; ; m_CompileLayer.setNotifyCompiled(NCC);; diff --git a/interpreter/cling/lib/Interpreter/IncrementalJIT.h b/interpreter/cling/lib/Interpreter/IncrementalJIT.h; index df4360f..ac4c851 100644; --- a/interpreter/cling/lib/Interpreter/IncrementalJIT.h; +++ b/interpreter/cling/lib/Interpreter/IncrementalJIT.h; @@ -38,6 +38,37 @@ namespace cling {; class Azog;; class IncrementalExecutor;; ; + class MySimpleCompiler : public llvm::orc::SimpleCompiler {; + public:; + MySimpleCompiler(llvm::TargetMachine &TM, llvm::ObjectCache *ObjCache = nullptr); + : SimpleCompiler(TM, ObjCache) {}; + CompileResult operator()(llvm::Module &M) {; + auto R = SimpleCompiler::operator()(M);; + //auto Filename = ""output.o"";; + std::error_code EC;; + //llvm::raw_fd_ostream dest(Filename, EC, sys::fs::F_None);; + ; + static unsigned counter = 0;; + std::string FileStem;; + {; + llvm::raw_string_ostream FileStemStream(FileStem);; + FileStemStream << M.getModuleIdentifier() << ""."" << ++counter;; + }; + llvm::raw_fd_ostream ModuleStream(FileStem + "".ll"", EC, llvm::sys::fs::F_None);; + ModuleStream << M;; + llvm::raw_fd_ostream ObjectStream(FileStem + "".o"", EC, llvm::sys::fs::F_None);; + ObjectStream.write(R->getBufferStart(), R->getBufferSize());; +; +/* if (R) {; + M.dump();; + //printf(""MemBuf '%.*s'\n"", (int) R->getBufferSize(), R->getBufferStart());; + printf(""MemBuf '%s'\n"", R->getBuffer().data());; + // dump M and object file *R here.; + }*/; + return R;; + }; + };; +; class IncrementalJIT {; public:; usin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9380#issuecomment-985923087:1834,Simpl,SimpleCompiler,1834,https://root.cern,https://github.com/root-project/root/pull/9380#issuecomment-985923087,3,['Simpl'],['SimpleCompiler']
Usability,"bCling.so.6.30.04); ==721499== by 0x694CB7A: TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) (in /opt/root/lib/libCling.so.6.30.04); ==721499== Block was alloc'd at; ==721499== at 0x4849013: operator new(unsigned long) (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so); ==721499== by 0x4A95EDD: TStorage::ObjectAlloc(unsigned long) (in /opt/root/lib/libCore.so.6.30.04); ==721499== by 0x2729AAAE: test() (in /tmp/tmp/test_cpp.so); ==721499== by 0x2729F039: ???; ==721499== by 0x6AA94F7: cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (in /opt/root/lib/libCling.so.6.30.04); ==721499== by 0x6A31E4B: cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (in /opt/root/lib/libCling.so.6.30.04); ==721499== by 0x6A32596: cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (in /opt/root/lib/libCling.so.6.30.04); ==721499== by 0x6A327B7: cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) (in /opt/root/lib/libCling.so.6.30.04); ==721499== by 0x6B09BC6: cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (in /opt/root/lib/libCling.so.6.30.04); ==721499== by 0x693813B: HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) (in /opt/root/lib/libCling.so.6.30.04); ==721499== by 0x694C6E7: TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) (in /opt/root/lib/libCling.so.6.30.04); ==721499== by 0x694CB7A: TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) (in /opt/root/lib/libCling.so.6.30.04); ==721499== ; Error in <TList::Clear>: A list is accessing an object (0xf0ff6d0) already deleted (list name = TList); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14504#issuecomment-1919235775:5335,Clear,Clear,5335,https://root.cern,https://github.com/root-project/root/issues/14504#issuecomment-1919235775,1,['Clear'],['Clear']
Usability,"call zeroext i1 %9(%class.TSystem* %5, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i32 zeroext 0); %11 = zext i1 %10 to i64; tail call void @_ZN5cling7runtime8internal15setValueNoAllocEPvS2_S2_cy(i8* %2, i8* %0, i8* nonnull inttoptr (i64 283832976 to i8*), i8 signext 1, i64 %11); ret void; }. declare void @_ZN5cling7runtime8internal15setValueNoAllocEPvS2_S2_cy(i8*, i8*, i8*, i8 signext, i64) local_unnamed_addr #1. declare i8* @cling_runtime_internal_throwIfInvalidPointer(i8*, i8*, i8*) local_unnamed_addr #1. ; Function Attrs: nounwind; declare void @llvm.stackprotector(i8*, i8**) #2. attributes #0 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-frame-pointer-elim""=""false"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""ppc64le"" ""target-features""=""+altivec,+bpermd,+crypto,+direct-move,+extdiv,+htm,+power8-vector,+vsx,-power9-vector,-qpx"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }; attributes #1 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""less-precise-fpmad""=""false"" ""no-frame-pointer-elim""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""ppc64le"" ""target-features""=""+altivec,+bpermd,+crypto,+direct-move,+extdiv,+htm,+power8-vector,+vsx,-power9-vector,-qpx"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }; attributes #2 = { nounwind }. !llvm.module.flags = !{!0}; !llvm.ident = !{!1}. !0 = !{i32 1, !""wchar_size"", i32 4}; !1 = !{!""clang version 9.0.1 ""}; !2 = !{!3, !3, i64 0}; !3 = !{!""any pointer"", !4, i64 0}; !4 = !{!""omnipotent char"", !5, i64 0}; !5 = !{!""Simple C++ TBAA""}; !6 = !{!7, !7, i64 0}; !7 = !{!""vtable pointer"", !5, i64 0}; $5 = void; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8072#issuecomment-981977924:79790,Simpl,Simple,79790,https://root.cern,https://github.com/root-project/root/issues/8072#issuecomment-981977924,1,['Simpl'],['Simple']
Usability,"cc: @devajithvs, that might also simplify your migration efforts a little..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15398#issuecomment-2089926061:33,simpl,simplify,33,https://root.cern,https://github.com/root-project/root/pull/15398#issuecomment-2089926061,2,['simpl'],['simplify']
Usability,cfitsio seems to be installed on the machine building the ref guide. Therefore it should be fine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3112#issuecomment-444893572:62,guid,guide,62,https://root.cern,https://github.com/root-project/root/pull/3112#issuecomment-444893572,2,['guid'],['guide']
Usability,ch/root-jenkins/job/root-pullrequests-build/174396/console).; ### Errors:; - [2023-05-11T12:52:41.022Z] FAILED: core/CMakeFiles/G__Core.dir/G__Core.cxx.o ; - [2023-05-11T12:52:41.023Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/core/G__Core.cxx:11318:52: error: no type named 'TVirtualRWMutex' in the global namespace; did you mean simply 'TVirtualRWMutex'? ; - [2023-05-11T12:52:41.023Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/core/G__Core.cxx:11324:52: error: no type named 'TVirtualRWMutex' in the global namespace; did you mean simply 'TVirtualRWMutex'? ; - [2023-05-11T12:52:41.023Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/core/G__Core.cxx:11330:53: error: no type named 'TVirtualRWMutex' in the global namespace; did you mean simply 'TVirtualRWMutex'? ; - [2023-05-11T12:52:41.023Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/core/G__Core.cxx:11337:107: error: no type named 'TVirtualRWMutex' in the global namespace; did you mean simply 'TVirtualRWMutex'? ; - [2023-05-11T12:52:41.023Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/core/G__Core.cxx:11355:52: error: no type named 'TReadLockGuard' in the global namespace; did you mean simply 'TReadLockGuard'? ; - [2023-05-11T12:52:41.023Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/core/G__Core.cxx:11361:52: error: no type named 'TReadLockGuard' in the global namespace; did you mean simply 'TReadLockGuard'? ; - [2023-05-11T12:52:41.023Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/core/G__Core.cxx:11367:53: error: no type named 'TReadLockGuard' in the global namespace; did you mean simply 'TReadLockGuard'? ; - [2023-05-11T12:52:41.023Z] /Users/sftnight/build/workspace/root-pullrequests-build/build/core/G__Core.cxx:11374:107: error: no type named 'TReadLockGuard' in the global namespace; did you mean simply 'TReadLockGuard'? ; - [2023-05-11T12:52:41.023Z] /Users/sftnight/build/workspace/root-p,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11027#issuecomment-1543945512:1195,simpl,simply,1195,https://root.cern,https://github.com/root-project/root/pull/11027#issuecomment-1543945512,2,['simpl'],['simply']
Usability,"class TVirtualMonitoringReader public:TNamed //ABC for Reading Monitoring Information; (C++ compiled) class TObjectSpy public:TObject //Spy object pointer for deletion; (C++ compiled) class TObjectRefSpy public:TObject //Spy object reference for deletion; (C++ compiled) class TMethod public:TFunction //Dictionary for a class member function (method); (C++ compiled) class TQObject //Base class for object communication mechanism; (C++ compiled) class TFunction public:TDictionary //Dictionary for global function; (C++ compiled) class TPluginManager public:TObject //Manager for plugin handlers; (C++ compiled) class TPluginHandler public:TObject //Handler for plugin libraries; (C++ compiled) class TTask public:TNamed //Base class for tasks; (C++ compiled) class TQCommand public:TList public:TQObject //encapsulates the information for undo/redo a single action.; (C++ compiled) class TQUndoManager public:TQCommand //recorder of operations for undo and redo; (C++ compiled) class TSysEvtHandler public:TObject public:TQObject //ABC for handling system events; (C++ compiled) struct SysInfo_t //System information - OS, CPU, RAM.; (C++ compiled) struct CpuInfo_t //CPU load information.; (C++ compiled) struct MemInfo_t //Memory utilization information.; (C++ compiled) class TVirtualPad public:TObject public:TAttLine public:TAttFill public:TAttPad public:TQObject //Abstract base class for Pads and Canvases; (C++ compiled) class TPMERegexp protected:TPRegexp //Wrapper for Perl-like regular expression matching.; (C++ compiled) class TStringToken public:TString //String tokenizer using PCRE for finding next tokens.; (C++ compiled) class TClassGenerator public:TObject //interface for TClass generators; (C++ compiled) class TROOT public:TDirectory //Top level (or root) structure for all classes; (C++ compiled) class TVirtualStreamerInfo public:TNamed //Abstract Interface describing Streamer information for one class; (C++ compiled) class TStreamerElement public:TNamed //Base class for o",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10191#issuecomment-1084824531:2918,undo,undo,2918,https://root.cern,https://github.com/root-project/root/issues/10191#issuecomment-1084824531,2,['undo'],['undo']
Usability,"cling startup scripts are different from rootlogon.C and rootrc .; rootrc is a config file while .clingrc is a regular cling script. cling startup scripts are executed also in invocation of standalone cling binary (not from root interpreter). Question:; 1. Renaming `.cling_profile` and `.clingrc` with suffix `.C` ?; 2. Rename `.clingrc` to something else so that `.clingrc` can be reserved for cling config file in the future (if any)?; Making it a config file instead of a cling script aligns with rootrc but not with bashrc, zshrc.; 3. Drop `.clingrc` for now and keep `.cling_profile` only ? If a cling script can easily tell if it is in interactive mode then keeping only 1 script makes sense. Otherwise it is better to keep both to align with bash and other interpreter inspired by bash design. By easily telling I mean a macro like `CLING_INTERACTIVE` or something simple that does not access `gCling`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11262#issuecomment-1229254493:873,simpl,simple,873,https://root.cern,https://github.com/root-project/root/pull/11262#issuecomment-1229254493,2,['simpl'],['simple']
Usability,"cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-7b6638/42123/runTheMatrix-results/140.063_RunZeroBias2022D/step3_RunZeroBias2022D.log; ```#--------------------------------------------------------------------------; cling JIT session error: In graph cling-module-926-jitted-objectbuffer, section .text._ZNK4reco10HitPattern23numberOfLostTrackerHitsENS0_11HitCategoryE: relocation target ""_ZN4reco10HitPattern16missingHitFilterEt"" at address 0x4000968500f0 is out of range of Page21 fixup at 0x4001a7270114 (_ZNK4reco10HitPattern23numberOfLostTrackerHitsENS0_11HitCategoryE, 0x4001a727010c + 0x8); ----- Begin Fatal Exception 11-Oct-2024 15:08:51 CEST-----------------------; An exception of category 'FatalRootError' occurred while; [0] Processing Event run: 357735 lumi: 53 event: 87840020 stream: 0; [1] Running path 'dqmoffline_1_step'; [2] Prefetching for module NanoAODDQM/'nanoDQM'; [3] Prefetching for module SimplePATTauFlatTableProducer/'boostedTauTable'; [4] Prefetching for module PATObjectCrossLinker/'linkedObjects'; [5] Prefetching for module PATMuonRefSelector/'finalMuons'; [6] Prefetching for module PATMuonUserDataEmbedder/'slimmedMuonsWithUserData'; [7] Calling method for module EvaluateMuonMVAID/'muonMVAID'; Additional Info:; [a] Fatal Root Error: @SUB=TClingCallFunc::make_wrapper; Failed to compile; ==== SOURCE BEGIN ====; #pragma clang diagnostic push; #pragma clang diagnostic ignored ""-Wformat-security""; __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))); extern ""C"" void __cf_365(void* obj, int nargs, void** args, void* ret); {; if (ret) {; new (ret) (double) (((const reco::TrackBase*)obj)->validFraction());; return;; }; else {; (void)(((const reco::TrackBase*)obj)->validFraction());; return;; }; }; #pragma clang diagnostic pop; ==== SOURCE END ====. ----- End Fatal Exception -------------------------------------------------; Another exception was caught while trying to clean up files after the primary fatal exception. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16401#issuecomment-2407514028:1027,Simpl,SimplePATTauFlatTableProducer,1027,https://root.cern,https://github.com/root-project/root/pull/16401#issuecomment-2407514028,1,['Simpl'],['SimplePATTauFlatTableProducer']
Usability,comparing contains was more complex. I went to the simplest way for this simple test,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15897#issuecomment-2182075929:51,simpl,simplest,51,https://root.cern,https://github.com/root-project/root/pull/15897#issuecomment-2182075929,4,['simpl'],"['simple', 'simplest']"
Usability,"d also for the interface your preference for an API similar to the current TGraphAsymmError. The reason I really don't want to use std::vector here is the streaming of the class. I know that there are ways to stream STL containers, but I don't know how they really work and I refuse to make the functionality of my code rely on something I don't understand.; Furthermore, using ROOT objects provides the advantage that the streaming of the storage class is fully handled by the class itself and therefore there is no need to think about the correct way to stream it. I'm also not 100% sure whether STL containers can be streamed by an automatically built streamer but ROOT classes can be streamed by them for sure.; Last but not least I hold the opinion that ROOT classes should use other ROOT classes anywhere possible, cause we, the programmers, can always change ROOT classes if we need to, but we are not able to change C++ classes. > Thank you for explaining the meaning of SetDimensionEY, I think the name is not super clear, I would maybe just call it SetEY.; > One comment on the passed array, I think the pointers should be passed as cont , since they will not be modified. I fully agree on these points. > One other comment I have , I will not have a method to Set the error dimension. I think it will be better instead a AddError method that will increment by one the dimension and add all the point errors. This I think it will be more useful. This point I don't fully understand. To me it sounds like you propose to add a function like this:; ```; void TGraphMultiErrors::AddError(const Double_t *eyL = 0, const Double_t *eyH = 0); {; SetNErrorDimensions(fNErrorDimensions + 1);; if (eyL && eyH); SetDimensionEY(fNErrorDimensions - 1, eyL, eyH);; }; ```; This would definitly be an useful addition, but I would keep the SetNErrorDimensions function, because otherwise there would be no way to reduce the amount of error dimensions which could be problematic when you want to store the obj",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3452#issuecomment-558178093:1178,clear,clear,1178,https://root.cern,https://github.com/root-project/root/pull/3452#issuecomment-558178093,2,['clear'],['clear']
Usability,"d/141353/console).; ### Errors:; - [2022-04-02T22:06:39.010Z] /home/sftnight/build/workspace/root-pullrequests-build/build/tree/dataframe/test/module.modulemap:3:33: error: cannot emit module dataframe_splitcoll_arrayview: size must be explicitly specified for missing header file ""TwoFloats.h"" ; - [2022-04-02T22:06:39.010Z] /home/sftnight/build/workspace/root-pullrequests-build/build/tree/dataframe/test/module.modulemap:3:33: error: cannot emit module dataframe_splitcoll_arrayview: size must be explicitly specified for missing header file ""TwoFloats.h"" ; - [2022-04-02T22:08:03.499Z] /home/sftnight/build/workspace/root-pullrequests-build/build/tree/dataframe/test/module.modulemap:10:37: error: cannot emit module dataframe_simple: size must be explicitly specified for missing header file ""MaxSlotHelper.h"" ; - [2022-04-02T22:08:03.499Z] /home/sftnight/build/workspace/root-pullrequests-build/build/tree/dataframe/test/module.modulemap:11:36: error: cannot emit module dataframe_simple: size must be explicitly specified for missing header file ""SimpleFiller.h"" ; - [2022-04-02T22:08:03.499Z] /home/sftnight/build/workspace/root-pullrequests-build/build/tree/dataframe/test/module.modulemap:11:36: error: cannot emit module dataframe_simple: size must be explicitly specified for missing header file ""SimpleFiller.h"" ; - [2022-04-02T22:08:03.499Z] /home/sftnight/build/workspace/root-pullrequests-build/build/tree/dataframe/test/module.modulemap:10:37: error: cannot emit module dataframe_simple: size must be explicitly specified for missing header file ""MaxSlotHelper.h"" . ### Warnings:; - [2022-04-02T22:04:44.206Z] /home/sftnight/build/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp:186:21: warning: moving a local object in a return statement prevents copy elision [-Wpessimizing-move] ; - [2022-04-02T22:06:05.513Z] Warning in &lt;CheckModuleValid&gt;: warning: Couldn't find in the following specified headers in the module Core: ; - [2022-0",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1086732485:1284,Simpl,SimpleFiller,1284,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1086732485,1,['Simpl'],['SimpleFiller']
Usability,"d::MemoryManager> >::getSymbolMaterializer(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda()#1}>::_M_invoke(std::_Any_data const&) (std_function.h:283); ==92602== by 0x11884A77: std::function<llvm::Expected<unsigned long> ()>::operator()() const (std_function.h:687); ==92602== by 0x11882BAB: llvm::JITSymbol::getAddress() (JITSymbol.h:297); ==92602== by 0x118B14FB: llvm::orc::LazyEmittingLayer<llvm::orc::LegacyIRCompileLayer<cling::IncrementalJIT::RemovableObjectLinkingLayer, llvm::orc::SimpleCompiler> >::EmissionDeferredModule::find(llvm::StringRef, bool, llvm::orc::LegacyIRCompileLayer<cling::IncrementalJIT::RemovableObjectLinkingLayer, llvm::orc::SimpleCompiler>&)::{lambda()#1}::operator()() const (LazyEmittingLayer.h:68); ==92602== by 0x118BD5E7: std::_Function_handler<llvm::Expected<unsigned long> (), llvm::orc::LazyEmittingLayer<llvm::orc::LegacyIRCompileLayer<cling::IncrementalJIT::RemovableObjectLinkingLayer, llvm::orc::SimpleCompiler> >::EmissionDeferredModule::find(llvm::StringRef, bool, llvm::orc::LegacyIRCompileLayer<cling::IncrementalJIT::RemovableObjectLinkingLayer, llvm::orc::SimpleCompiler>&)::{lambda()#1}>::_M_invoke(std::_Any_data const&) (std_function.h:283); ==92602== by 0x11884A77: std::function<llvm::Expected<unsigned long> ()>::operator()() const (std_function.h:687); ==92602== by 0x11882BAB: llvm::JITSymbol::getAddress() (JITSymbol.h:297); ==92602== by 0x11883A8B: cling::IncrementalJIT::getSymbolAddress(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool) (IncrementalJIT.h:191); ==92602== by 0x1188809F: cling::IncrementalExecutor::ExecutionResult cling::IncrementalExecutor::jitInitOrWrapper<void (*)(void*)>(llvm::StringRef, void (*&)(void*)) const (IncrementalExecutor.h:287); ==92602== by 0x1188109F: cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (IncrementalExecutor.cpp:377); ==92602== by 0x116B01DB: cling::Interpreter::RunFunc",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9297#issuecomment-979895686:38938,Simpl,SimpleCompiler,38938,https://root.cern,https://github.com/root-project/root/issues/9297#issuecomment-979895686,2,['Simpl'],['SimpleCompiler']
Usability,"d::MemoryManager> >::getSymbolMaterializer(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda()#1}>::_M_invoke(std::_Any_data const&) (std_function.h:283); ==92602== by 0x11884A77: std::function<llvm::Expected<unsigned long> ()>::operator()() const (std_function.h:687); ==92602== by 0x11882BAB: llvm::JITSymbol::getAddress() (JITSymbol.h:297); ==92602== by 0x118B14FB: llvm::orc::LazyEmittingLayer<llvm::orc::LegacyIRCompileLayer<cling::IncrementalJIT::RemovableObjectLinkingLayer, llvm::orc::SimpleCompiler> >::EmissionDeferredModule::find(llvm::StringRef, bool, llvm::orc::LegacyIRCompileLayer<cling::IncrementalJIT::RemovableObjectLinkingLayer, llvm::orc::SimpleCompiler>&)::{lambda()#1}::operator()() const (LazyEmittingLayer.h:68); ==92602== by 0x118BD5E7: std::_Function_handler<llvm::Expected<unsigned long> (), llvm::orc::LazyEmittingLayer<llvm::orc::LegacyIRCompileLayer<cling::IncrementalJIT::RemovableObjectLinkingLayer, llvm::orc::SimpleCompiler> >::EmissionDeferredModule::find(llvm::StringRef, bool, llvm::orc::LegacyIRCompileLayer<cling::IncrementalJIT::RemovableObjectLinkingLayer, llvm::orc::SimpleCompiler>&)::{lambda()#1}>::_M_invoke(std::_Any_data const&) (std_function.h:283); ==92602== by 0x11884A77: std::function<llvm::Expected<unsigned long> ()>::operator()() const (std_function.h:687); ==92602== by 0x11882BAB: llvm::JITSymbol::getAddress() (JITSymbol.h:297); ==92602== by 0x118A0293: cling::IncrementalJIT::IncrementalJIT(cling::IncrementalExecutor&, std::unique_ptr<llvm::TargetMachine, std::default_delete<llvm::TargetMachine> >, std::function<void (unsigned long, std::unique_ptr<llvm::Module, std::default_delete<llvm::Module> >)>)::{lambda(std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>, llvm::DenseSet<llvm::orc::SymbolStringPtr, llvm::DenseMapInfo<llvm::orc::SymbolStringPtr> >)#2}::operator()(std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>, llvm::DenseSet<llvm::orc::SymbolStringPtr, llvm::DenseMapInfo<llvm::orc::",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9297#issuecomment-979895686:31958,Simpl,SimpleCompiler,31958,https://root.cern,https://github.com/root-project/root/issues/9297#issuecomment-979895686,2,['Simpl'],['SimpleCompiler']
Usability,"de/string.h:150:15 in libc.string.h hidden strxfrm 'size_t (char *__restrict, const char *__restrict, size_t) throw()' extern; | |-ParmVarDecl 0xb5ea258 <col:24, col:41> col:41 in libc.string.h hidden __dest 'char *__restrict'; | |-ParmVarDecl 0xb5ea2e0 <line:151:10, col:33> col:33 in libc.string.h hidden __src 'const char *__restrict'; | |-ParmVarDecl 0xb5ea360 <col:40, col:47> col:47 in libc.string.h hidden __n 'size_t':'unsigned long'; | |-NonNullAttr 0xb5ea5d0 </usr/include/sys/cdefs.h:285:44, /usr/include/string.h:152:27> 2; | `-BuiltinAttr 0xb5ea6e0 <<invalid sloc>> Implicit 788; |-CXXRecordDecl 0xb5ea710 </usr/include/xlocale.h:27:9, line:39:1> line:27:16 in libc.xlocale.h hidden struct __locale_struct definition; | |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal; | | |-DefaultConstructor exists trivial needs_implicit; | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param; | | |-MoveConstructor exists simple trivial needs_implicit; | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param; | | |-MoveAssignment exists simple trivial needs_implicit; | | `-Destructor simple irrelevant trivial needs_implicit; | |-CXXRecordDecl 0xb5ea850 <col:9, col:16> col:16 in libc.xlocale.h hidden implicit struct __locale_struct; | |-CXXRecordDecl 0xb5ea908 parent 0xb55c1c8 <line:30:3, col:10> col:10 in libc.xlocale.h hidden struct __locale_data; | |-FieldDecl 0xb5ebd48 <col:3, col:37> col:25 in libc.xlocale.h hidden __locales 'struct __locale_data *[13]'; | |-FieldDecl 0xb5ebdf8 <line:33:3, col:29> col:29 in libc.xlocale.h hidden __ctype_b 'const unsigned short *'; | |-FieldDecl 0xb5ebe68 <line:34:3, col:14> col:14 in libc.xlocale.h hidden __ctype_tolower 'const int *'; | |-FieldDecl 0xb5ebed8 <line:35:3, col:14> col:14 in libc.xlocale.h hidden __ctype_toupper 'const int *'; | `-FieldDecl 0xb5ebfd8 <line:38:3, col:25> col:15 in libc.xlocale.h hidden __na",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861#issuecomment-1377827282:11624,simpl,simple,11624,https://root.cern,https://github.com/root-project/root/issues/10861#issuecomment-1377827282,10,['simpl'],['simple']
Usability,"dear @guitargeek . It seems that my project has one more problem with new cppyy.; While I am trying to prepare ""easy"" reproducer, I need to ask you some advice/recipe.; The issue is with ""python""-RooAbsPdf. I need to have a RooAbdPdf class with the major; method implemented in python. Previously I have such solution, but with new cppyy; I've got two problems - first, and the drawing phase, there are error messages ; that servers are not redirected. ButI have ""correct"" fit results and the plot. ; And, the main problem is that at the end of the script the program stalls -; likely in ROOT finalization. ; It is not easy to make short, simple & easy reproducer, but I'll try to do it asap.; But, might be it is a known issue? ; What is the ""correct/recommended"" way for implementation of such ""hybrid"" pythonic RooAbdPdf?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15085#issuecomment-2029462023:639,simpl,simple,639,https://root.cern,https://github.com/root-project/root/issues/15085#issuecomment-2029462023,2,['simpl'],['simple']
Usability,"dk -> MacOSX15.0.sdk; drwxr-xr-x 7 root wheel 224 Apr 30 18:16 MacOSX14.5.sdk; lrwxr-xr-x 1 root wheel 14 Sep 16 20:47 MacOSX14.sdk -> MacOSX14.5.sdk; drwxr-xr-x 7 root wheel 224 Aug 21 11:15 MacOSX15.0.sdk; lrwxr-xr-x 1 root wheel 14 Sep 16 20:47 MacOSX15.sdk -> MacOSX15.0.sdk. $ clang++ -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin24.0.0; Thread model: posix; InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1""; ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang"" -cc1 -triple arm64-apple-macosx15.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/stognini -resource-dir /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16494#issuecomment-2374779123:1370,clear,clear-ast-before-backend,1370,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2374779123,2,['clear'],['clear-ast-before-backend']
Usability,"dk -> MacOSX15.0.sdk; drwxr-xr-x 7 root wheel 224 Sep 25 18:33 MacOSX14.5.sdk; lrwxr-xr-x 1 root wheel 14 Sep 25 18:29 MacOSX14.sdk -> MacOSX14.5.sdk; drwxr-xr-x 7 root wheel 224 Sep 25 18:31 MacOSX15.0.sdk; lrwxr-xr-x 1 root wheel 14 Sep 25 18:29 MacOSX15.sdk -> MacOSX15.0.sdk; + clang++ -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin23.6.0; Thread model: posix; InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin; ignoring nonexistent directory ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1""; ""/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang"" -cc1 -triple arm64-apple-macosx14.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/pcanal/root_working/builds/master.module -resource-dir /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/16 -isysroot /Applications/Xcode.app/Contents/Developer/Pla",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16494#issuecomment-2377172429:1638,clear,clear-ast-before-backend,1638,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2377172429,2,['clear'],['clear-ast-before-backend']
Usability,e Thread: . ### Failing tests:; - [projectroot.test.test_stressmathcore_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/154244/testReport/projectroot/test/test_stressmathcore_interpreted/); - [projectroot.roottest.cling.offset.roottest_cling_offset_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/154244/testReport/projectroot.roottest.cling/offset/roottest_cling_offset_interpreted/); - [projectroot.roottest.cling.other.roottest_cling_other_execValuePrint](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/154244/testReport/projectroot.roottest.cling/other/roottest_cling_other_execValuePrint/); - [projectroot.roottest.root.meta.dictSelection.roottest_root_meta_dictSelection_execAtlasTest2](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/154244/testReport/projectroot.roottest.root.meta/dictSelection/roottest_root_meta_dictSelection_execAtlasTest2/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/154244/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/154244/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.tree.reader.roottest_root_tree_reader_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/154244/testReport/projectroot.roottest.root.tree/reader/roottest_root_tree_reader_make/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/154244/testReport/projectroot.roottest.root.treeformula/stl/roottest_root_treeformula_stl_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1245798559:1554,simpl,simple,1554,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1245798559,4,['simpl'],['simple']
Usability,"e times instead of once, even in a single-thread program). Unfortunately I didn't manage to disentangle the issue from RDF. The simplest way to reproduce is to add this patch to ROOT master (47f66c57ca):. ```diff; diff --git a/tree/dataframe/inc/ROOT/RDF/GraphNode.hxx b/tree/dataframe/inc/ROOT/RDF/GraphNode.hxx; index 9548c4adf0..3e39c80f33 100644; --- a/tree/dataframe/inc/ROOT/RDF/GraphNode.hxx; +++ b/tree/dataframe/inc/ROOT/RDF/GraphNode.hxx; @@ -57,6 +57,7 @@ private:; static unsigned int &GetStaticGlobalCounter(); {; static unsigned int sGlobalCounter = 1;; + printf(""static global counter:%u\n"", sGlobalCounter);; return sGlobalCounter;; }. @@ -68,7 +69,11 @@ public:; ////////////////////////////////////////////////////////////////////////////; /// \brief Resets the counter.; /// This is not strictly needed but guarantees that two consecutive request to the graph return the same result.; - static void ClearCounter() { GraphNode::GetStaticGlobalCounter() = 1; }; + static void ClearCounter(); + {; + printf(""setting counter to 1\n"");; + GraphNode::GetStaticGlobalCounter() = 1;; + }. ////////////////////////////////////////////////////////////////////////////; /// \brief Appends a node on the head of the current node; ```. and execute the following code (adapted from Ivan's repro above):. ```cpp; // repro.cpp; #include <ROOT/RDFHelpers.hxx>; #include <ROOT/RDataFrame.hxx>. void repro() {; ROOT::RDataFrame rd1(1);; auto branch1_1 = rd1.Define(""one"", ""1"").Count();; auto branch1_2 = rd1.Define(""two"", ""2"").Count();; ROOT::RDF::SaveGraph(rd1);; }. #ifndef __CLING__; int main() { repro(); }; #endif; ```. Running through the interpreter:. ```; $ root -l -b -q repro.cpp. Processing repro.cpp...; setting counter to 1; static global counter:1; static global counter:1; static global counter:1 // one again!? this counter is always increased; static global counter:2; static global counter:3; static global counter:2 // two again!?; static global counter:4; ```. the output is wrong ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9474#issuecomment-998846312:1060,Clear,ClearCounter,1060,https://root.cern,https://github.com/root-project/root/issues/9474#issuecomment-998846312,2,['Clear'],['ClearCounter']
Usability,"e>	- Compare the interpreter's state with the one; 				 saved in a given file. .stats [name]		- Show stats for internal data structures; 				 'ast' abstract syntax tree stats; 				 'asttree [filter]' abstract syntax tree layout; 				 'decl' dump ast declarations; 				 'undo' show undo stack. .T <filePath> <comment>	- Generate autoload map. .trace <repr> <id>		- Dump trace of requested respresentation; 				 (see .stats arguments for <repr>). .help			- Shows this information (also .?). .q				- Exit the program. ROOT special commands.; ===============================================================================; .L <filename>[flags]: load the given file with optional flags like; + to compile or ++ to force recompile.; Type .? TSystem::CompileMacro for a list of all flags.; .(x|X) <filename>[flags](args) :; same as .L <filename>[flags] and runs then a function; with signature: ret_type filename(args).; .credits : show credits; .demo : launch GUI demo; .help Class::Member : open reference guide for that class member (or .?).; Specifying '::Member' is optional.; .help edit : show line editing shortcuts (or .?); .license : show license; .ls : list contents of current TDirectory; .pwd : show current TDirectory, pad and style; .quit (or .exit) : quit ROOT (long form of .q); .R [user@]host[:dir] [-l user] [-d dbg] [script] :; launch process in a remote host; .qqq : quit ROOT - mandatory; .qqqqq : exit process immediately; .qqqqqqq : abort process; .which [file] : show path of macro file; .![OS_command] : execute OS-specific shell command; .!root -? : print ROOT usage (CLI options); ```. ```; root [1] .? edit. ROOT terminal keyboard shortcuts (GNU-readline style).; ==============================================================================; Arrow_Left : move cursor left [Ctrl+B]; Arrow_Right : move cursor right [Ctrl+F] [Ctrl+G]; Home : move cursor to beginning of line [Ctrl+A]; End : move cursor to end of line [Ctrl+E]; Ctrl+Arrow_Left : jump to previous word [Esc,B] [Al",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10121#issuecomment-1084927674:3244,guid,guide,3244,https://root.cern,https://github.com/root-project/root/pull/10121#issuecomment-1084927674,2,['guid'],['guide']
Usability,"eady more comparable to 6.24. Here the results of `fit-noshapes`:; ## ROOT 6.28. ```txt; FVAL = -1581.9159109118475; Edm = 0.000441898404860980383; Nfcn = 187; Lumi	 = 0.937281	 +/- 0.041571	(limited); Nmu	 = 68079	 +/- 3149.09	(limited); RawRDst	 = 0.0394995	 +/- 0.00466377	(limited); alpha_BFD1	 = -1.56966	 +/- 0.268056	(limited); Info in <Minuit2>: Minuit2Minimizer::Hesse Using max-calls 2000; Info in <Minuit2>: Minuit2Minimizer::Hesse Hesse is valid - matrix is accurate; 0.000441626; Fit ran with status 0; Stat error on R(D*) is 0.004650; EDM at end was 0.000442; RooArgList:: = (Lumi,Nmu,RawRDst,alpha_BFD1); CURRENT NUISANCE PARAMETERS:; 0: Lumi			 = 0.937281 +/- 0.0414063; 1: Nmu			 = 68079 +/- 3136.33; 3: alpha_BFD1			 = -1.56966 +/- 0.267557; ```. ## ROOT 6.24; ```txt; FVAL = -1581.92046482683691; Edm = 1.80973200685341769e-07; Nfcn = 258; Lumi	 = 0.936911	 +/- 0.041654	(limited); Nmu	 = 63811.4	 +/- 402.673	(limited); RawRDst	 = 0.0394923	 +/- 0.00466481	(limited); alpha_BFD1	 = -1.56652	 +/- 0.266527	(limited); Info in <Minuit2>: Minuit2Minimizer::Hesse Using max-calls 2000; Info in <Minuit2>: Minuit2Minimizer::Hesse Hesse is valid - matrix is accurate; 1.8221e-07; Fit ran with status 0; Stat error on R(D*) is 0.004658; EDM at end was 0.000000; RooArgList:: = (Lumi,Nmu,RawRDst,alpha_BFD1); CURRENT NUISANCE PARAMETERS:; 0: Lumi			 = 0.936911 +/- 0.0416284; 1: Nmu			 = 63811.4 +/- 401.335; 3: alpha_BFD1			 = -1.56652 +/- 0.264945; ```. There are still some problems. The produced plots don't look correct, and the `Nmu` parameter has an error that is way off. This is a problem I already see with 6.26, and it is probably related to the reorganization of the HistFactory model RooFit representation:; https://github.com/root-project/root/pull/8167. Indeed, it could be related to the new `RooBinWidthFunction`. I can only continue the investigation next week on Wednesday, if you learn something new in the meantime @yipengsun and @CoffeeIntoScience please let me know!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12729#issuecomment-1527829256:3324,learn,learn,3324,https://root.cern,https://github.com/root-project/root/issues/12729#issuecomment-1527829256,2,['learn'],['learn']
Usability,"egion of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rpdutils/src/rpdutils.cxx:5203:14: warning: ‘char* strncpy(char*, const char*, size_t)’ specified bound depends on the length of the source argument [-Wstringop-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rpdutils/src/rpdutils.cxx:4757:26: warning: ‘char* strncpy(char*, const char*, size_t)’ output may be truncated copying 10 bytes from a string of length 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] . And 92 more. ### Failing tests:; - [projectroot.roottest.python.cmdLineUtils.roottest_python_cmdLineUtils_SimpleRootmv4CheckOutput](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/36231/testRe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2453#issuecomment-411309441:1734,clear,clearing,1734,https://root.cern,https://github.com/root-project/root/pull/2453#issuecomment-411309441,2,['clear'],['clearing']
Usability,"election::kNoUsingDecls, load=true); at /opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/atomic_base.h:837; #14 0x00007fffea9c2cce in TCling::InvalidateCachedDecl (this=0x555555b29730, Lists=..., D=0x55555b60ad18) at /home/jhahnfel/ROOT/src/core/metacling/src/TCling.cxx:6928; #15 0x00007fffea9a161f in TCling::UpdateListsOnUnloaded (this=0x555555b29730, T=...) at /home/jhahnfel/ROOT/src/core/metacling/src/TCling.cxx:6866; #16 0x00007fffeaacfd7c in cling::MultiplexInterpreterCallbacks::TransactionUnloaded (this=<optimized out>, T=...); at /home/jhahnfel/ROOT/src/interpreter/cling/lib/Interpreter/MultiplexInterpreterCallbacks.h:109; #17 0x00007fffeaacc901 in cling::Interpreter::unload (this=0x555555803e60, T=...) at /home/jhahnfel/ROOT/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1543; #18 0x00007fffeaad3f97 in cling::IncrementalParser::commitTransaction (this=0x555555c3bee0, PRT=..., ClearDiagClient=true); at /home/jhahnfel/ROOT/src/interpreter/cling/lib/Interpreter/IncrementalParser.cpp:609; #19 0x00007fffeaad4ab1 in cling::IncrementalParser::Compile (this=0x555555c3bee0, input=..., Opts=...) at /home/jhahnfel/ROOT/src/interpreter/cling/lib/Interpreter/IncrementalParser.cpp:849; #20 0x00007fffeaac91af in cling::Interpreter::DeclareInternal (this=this@entry=0x555555803e60,; input=""namespace __cppyy_internal {\nvoid init_tuple_string_unsigned_long_(tuple<string,unsigned long>*& self, const unsigned long& _1 = 0, const string& _0 = string{}) {\n self = new tuple<strin; g,unsigned lo""..., CO=..., T=T@entry=0x0) at /home/jhahnfel/ROOT/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1369; #21 0x00007fffeaac7599 in cling::Interpreter::declare (this=0x555555803e60,; input=""namespace __cppyy_internal {\nvoid init_tuple_string_unsigned_long_(tuple<string,unsigned long>*& self, const unsigned long& _1 = 0, const string& _0 = string{}) {\n self = new tuple<strin; g,unsigned lo""..., T=0x0) at /home/jhahnfel/ROOT/src/int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16338#issuecomment-2370776890:3211,Clear,ClearDiagClient,3211,https://root.cern,https://github.com/root-project/root/pull/16338#issuecomment-2370776890,1,['Clear'],['ClearDiagClient']
Usability,"er&lt;HIST&gt;::Exec(unsigned int, const Xs& ...)::&lt;lambda(const auto:2&)&gt; [with auto:2 = std::array&lt;bool, 3&gt;; Xs = {ROOT::VecOps::RVec&lt;int&gt;, ROOT::VecOps::RVec&lt;int&gt;, ROOT::VecOps::RVec&lt;int&gt;}; typename std::enable_if&lt;ROOT::Internal::RDF::Disjunction&lt;ROOT::Internal::RDF::IsDataContainer&lt;ValTypes&gt;...&gt;::value, int&gt;::type &lt;anonymous&gt; = 0; HIST = TProfile2D]’ ; - [2022-08-05T22:57:54.253Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:498:44: error: the value of ‘i’ is not usable in a constant expression ; - [2022-08-05T22:57:54.253Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:512:58: error: no matching function for call to ‘GetNthElement&lt;colidx&gt;(const ROOT::VecOps::RVec&lt;int&gt;&, const ROOT::VecOps::RVec&lt;int&gt;&, const ROOT::VecOps::RVec&lt;int&gt;&)’ ; - [2022-08-05T22:57:54.254Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:507:49: error: call to non-constexpr function ‘ROOT::Internal::RDF::FillHelper&lt;HIST&gt;::Exec(unsigned int, const Xs& ...)::&lt;lambda(const auto:2&)&gt; [with auto:2 = std::array&lt;bool, 2&gt;; Xs = {ROOT::VecOps::RVec&lt;int&gt;, ROOT::VecOps::RVec&lt;int&gt;}; typename std::enable_if&lt;ROOT::Internal::RDF::Disjunction&lt;ROOT::Internal::RDF::IsDataContainer&lt;ValTypes&gt;...&gt;::value, int&gt;::type &lt;anonymous&gt; = 0; HIST = TProfile]’ ; - [2022-08-05T22:57:54.254Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:498:44: error: the value of ‘i’ is not usable in a constant expression ; - [2022-08-05T22:57:54.254Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:512:58: error: no matching function for call to ‘GetNthElement&lt;colidx&gt;(const ROOT::VecOps::RVec&lt;int&gt;&, const ROOT::VecOps::RVec&lt;int&gt;&)’ . And 9 more",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11127#issuecomment-1207076516:3223,usab,usable,3223,https://root.cern,https://github.com/root-project/root/pull/11127#issuecomment-1207076516,2,['usab'],['usable']
Usability,"er::ConcreteLinkedObject<std::shared_ptr<llvm::RuntimeDyld::MemoryManager> >::getSymbolMaterializer(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda()#1}::operator()() const (RTDyldObjectLinkingLayer.h:276); ==92602== by 0x118CA4E7: std::_Function_handler<llvm::Expected<unsigned long> (), llvm::orc::LegacyRTDyldObjectLinkingLayer::ConcreteLinkedObject<std::shared_ptr<llvm::RuntimeDyld::MemoryManager> >::getSymbolMaterializer(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda()#1}>::_M_invoke(std::_Any_data const&) (std_function.h:283); ==92602== by 0x11884A77: std::function<llvm::Expected<unsigned long> ()>::operator()() const (std_function.h:687); ==92602== by 0x11882BAB: llvm::JITSymbol::getAddress() (JITSymbol.h:297); ==92602== by 0x118B14FB: llvm::orc::LazyEmittingLayer<llvm::orc::LegacyIRCompileLayer<cling::IncrementalJIT::RemovableObjectLinkingLayer, llvm::orc::SimpleCompiler> >::EmissionDeferredModule::find(llvm::StringRef, bool, llvm::orc::LegacyIRCompileLayer<cling::IncrementalJIT::RemovableObjectLinkingLayer, llvm::orc::SimpleCompiler>&)::{lambda()#1}::operator()() const (LazyEmittingLayer.h:68); ==92602== by 0x118BD5E7: std::_Function_handler<llvm::Expected<unsigned long> (), llvm::orc::LazyEmittingLayer<llvm::orc::LegacyIRCompileLayer<cling::IncrementalJIT::RemovableObjectLinkingLayer, llvm::orc::SimpleCompiler> >::EmissionDeferredModule::find(llvm::StringRef, bool, llvm::orc::LegacyIRCompileLayer<cling::IncrementalJIT::RemovableObjectLinkingLayer, llvm::orc::SimpleCompiler>&)::{lambda()#1}>::_M_invoke(std::_Any_data const&) (std_function.h:283); ==92602== by 0x11884A77: std::function<llvm::Expected<unsigned long> ()>::operator()() const (std_function.h:687); ==92602== by 0x11882BAB: llvm::JITSymbol::getAddress() (JITSymbol.h:297); ==92602== by 0x11883A8B: cling::IncrementalJIT::getSymbolAddress(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9297#issuecomment-979895686:38488,Simpl,SimpleCompiler,38488,https://root.cern,https://github.com/root-project/root/issues/9297#issuecomment-979895686,2,['Simpl'],['SimpleCompiler']
Usability,"er::ConcreteLinkedObject<std::shared_ptr<llvm::RuntimeDyld::MemoryManager> >::getSymbolMaterializer(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda()#1}::operator()() const (RTDyldObjectLinkingLayer.h:276); ==92602== by 0x118CA4E7: std::_Function_handler<llvm::Expected<unsigned long> (), llvm::orc::LegacyRTDyldObjectLinkingLayer::ConcreteLinkedObject<std::shared_ptr<llvm::RuntimeDyld::MemoryManager> >::getSymbolMaterializer(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda()#1}>::_M_invoke(std::_Any_data const&) (std_function.h:283); ==92602== by 0x11884A77: std::function<llvm::Expected<unsigned long> ()>::operator()() const (std_function.h:687); ==92602== by 0x11882BAB: llvm::JITSymbol::getAddress() (JITSymbol.h:297); ==92602== by 0x118B14FB: llvm::orc::LazyEmittingLayer<llvm::orc::LegacyIRCompileLayer<cling::IncrementalJIT::RemovableObjectLinkingLayer, llvm::orc::SimpleCompiler> >::EmissionDeferredModule::find(llvm::StringRef, bool, llvm::orc::LegacyIRCompileLayer<cling::IncrementalJIT::RemovableObjectLinkingLayer, llvm::orc::SimpleCompiler>&)::{lambda()#1}::operator()() const (LazyEmittingLayer.h:68); ==92602== by 0x118BD5E7: std::_Function_handler<llvm::Expected<unsigned long> (), llvm::orc::LazyEmittingLayer<llvm::orc::LegacyIRCompileLayer<cling::IncrementalJIT::RemovableObjectLinkingLayer, llvm::orc::SimpleCompiler> >::EmissionDeferredModule::find(llvm::StringRef, bool, llvm::orc::LegacyIRCompileLayer<cling::IncrementalJIT::RemovableObjectLinkingLayer, llvm::orc::SimpleCompiler>&)::{lambda()#1}>::_M_invoke(std::_Any_data const&) (std_function.h:283); ==92602== by 0x11884A77: std::function<llvm::Expected<unsigned long> ()>::operator()() const (std_function.h:687); ==92602== by 0x11882BAB: llvm::JITSymbol::getAddress() (JITSymbol.h:297); ==92602== by 0x118A0293: cling::IncrementalJIT::IncrementalJIT(cling::IncrementalExecutor&, std::unique_ptr<llvm::TargetMachine, std::default_dele",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9297#issuecomment-979895686:31508,Simpl,SimpleCompiler,31508,https://root.cern,https://github.com/root-project/root/issues/9297#issuecomment-979895686,2,['Simpl'],['SimpleCompiler']
Usability,est.cling.template.roottest_cling_template_runtemplatefriend](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146659/testReport/projectroot.roottest.cling/template/roottest_cling_template_runtemplatefriend/); - [projectroot.roottest.root.aclic.misc.roottest_root_aclic_misc_assertROOT7027](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146659/testReport/projectroot.roottest.root.aclic/misc/roottest_root_aclic_misc_assertROOT7027/); - [projectroot.roottest.root.aclic.load.roottest_root_aclic_load_reload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146659/testReport/projectroot.roottest.root.aclic/load/roottest_root_aclic_load_reload/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_missingBranches](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146659/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_missingBranches/); - [projectroot.roottest.python.cpp.roottest_python_cpp_advanced](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146659/testReport/projectroot.roottest.python/cpp/roottest_python_cpp_advanced/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146659/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.callfunc.roottest_root_meta_callfunc_assertUnload_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146659/testReport/projectroot.roottest.root.meta/callfunc/roottest_root_meta_callfunc_assertUnload_auto/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146659/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/). And 5 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1144980019:2778,simpl,simple,2778,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1144980019,4,['simpl'],['simple']
Usability,est.cling.template.roottest_cling_template_runtemplatefriend](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146675/testReport/projectroot.roottest.cling/template/roottest_cling_template_runtemplatefriend/); - [projectroot.roottest.root.aclic.misc.roottest_root_aclic_misc_assertROOT7027](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146675/testReport/projectroot.roottest.root.aclic/misc/roottest_root_aclic_misc_assertROOT7027/); - [projectroot.roottest.root.aclic.load.roottest_root_aclic_load_reload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146675/testReport/projectroot.roottest.root.aclic/load/roottest_root_aclic_load_reload/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_missingBranches](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146675/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_missingBranches/); - [projectroot.roottest.python.cpp.roottest_python_cpp_advanced](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146675/testReport/projectroot.roottest.python/cpp/roottest_python_cpp_advanced/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146675/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.callfunc.roottest_root_meta_callfunc_assertUnload_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146675/testReport/projectroot.roottest.root.meta/callfunc/roottest_root_meta_callfunc_assertUnload_auto/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146675/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/). And 5 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1145207749:2778,simpl,simple,2778,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1145207749,4,['simpl'],['simple']
Usability,"even as an implementation detail perhaps of a higher level more usable ; interface. I fully get the need to have a working win alpha for may, ; support all efforts to arrive there  and have 2 worries:; - The amount of ifdefs; - The (non) sturdiness of string manipulations. On 08.02.2018 11:33, Bertrand Bellenot wrote:; >; > Well, right, we could use gSystem->UnixPathname()...; >; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub ; > <https://github.com/root-project/root/pull/1609#issuecomment-364070384>, ; > or mute the thread ; > <https://github.com/notifications/unsubscribe-auth/AHfJPvBOt1y6pFQxmNRkG5_698E9UAFRks5tSs2NgaJpZM4R-HWn>.; >",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1609#issuecomment-364071818:64,usab,usable,64,https://root.cern,https://github.com/root-project/root/pull/1609#issuecomment-364071818,2,['usab'],['usable']
Usability,fantastic.; Maybe we can go for a subcategory or add Keras in the names? If not the name will not be clear about what the tutorials contain perhaps,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3773#issuecomment-489639066:101,clear,clear,101,https://root.cern,https://github.com/root-project/root/pull/3773#issuecomment-489639066,2,['clear'],['clear']
Usability,"fffffd9d0, cl=0x555558490b70, pointer=<optimized out>, onFileClass=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3499; #30 0x00007ffff778a22e in TClass::Streamer (onfile_class=0x0, b=..., obj=0x55555855a0c0, this=0x555558490b70); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:610; #31 TKey::ReadObjectAny (this=0x5555569f77a0, expectedClass=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TKey.cxx:1108; #32 0x00007ffff774aa1b in TDirectoryFile::GetObjectChecked (this=0x555556a15ce0, namecycle=<optimized out>, expectedClass=0x555558490b70); at /home/rembserj/spaces/master/root/src/root/io/io/src/TDirectoryFile.cxx:1111; #33 0x00005555555551f6 in TDirectory::Get<RooStats::HistFactory::Measurement> (this=0x555556a15ce0, namecycle=<optimized out>); at /home/rembserj/spaces/master/root/src/build/../install/include/root/TDirectory.h:207; #34 TDirectoryFile::Get<RooStats::HistFactory::Measurement> (this=0x555556a15ce0, namecycle=<optimized out>); at /home/rembserj/spaces/master/root/src/build/../install/include/root/TDirectoryFile.h:84; #35 repro () at repro.C:10; ```. So the crash is here (https://github.com/root-project/root/blob/master/io/io/src/TBufferFile.cxx#L245):; ```c++; if (nwh == 255) {; *this >> nbig;; obj->resize(nbig,'\0');; ReadFastArray((char*)obj->data(),nbig);; }; ```; I have put some debug printouts. When it crashes, `nbig` is `-1`, and resize() expects and unsigned int. The -1 becomes a very large unsigned number that exceeds the maximum allowed length of a `std::string`. To me that looks more like a problem with IO than with HistFactory (the memory layout of the `HistFactory::Measurement` classes hasn't changed from 6.26 to 6.28. Is that something that makes sense to you, @pcanal? What does this `nbig` stand for, and in which circumstances can this be `-1`?. Maybe in the best case, the fix would just be adding a simple `if(nbig >= 0)` before the call to `resize()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12967#issuecomment-1581261520:8592,simpl,simple,8592,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520,2,['simpl'],['simple']
Usability,"g target-based CMake, and I believe I have fixed the issue of ROOT picking up its own headers here:; https://github.com/root-project/root/pull/8709 (needs rebasing). This fixed it at least for many builtins. There still might be more builtins that have the same problem, but let's go one step at a time. I solved the VDT-related part a bit differently. If I rebased, the diff would approximately read (done manually, sorry for possible indentation errors):; ```diff; DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} COMPONENT extra-headers); set(vdt ON CACHE BOOL ""Enabled because builtin_vdt enabled (${vdt_description})"" FORCE); set_property(GLOBAL APPEND PROPERTY ROOT_BUILTIN_TARGETS VDT); - add_library(VDT::VDT STATIC IMPORTED GLOBAL); - set_target_properties(VDT::VDT; - PROPERTIES; - IMPORTED_LOCATION ""${VDT_LIBRARIES}""; - INTERFACE_INCLUDE_DIRECTORIES ""${VDT_INCLUDE_DIRS}""; + add_library(VDT IMPORTED SHARED); + add_dependencies(VDT BUILTIN_VDT); + set_target_properties(VDT PROPERTIES IMPORTED_LOCATION ""${VDT_LIBRARIES}""); + target_include_directories(VDT INTERFACE $<BUILD_INTERFACE:${VDT_INCLUDE_DIR}> $<INSTALL_INTERFACE:include/>); ); endif(); endif(); ```; Whether the target is declared global, static or shared, I'm not sure if it makes a big difference. I'm happy to call it `VDT::VDT`, though. I think the important part was to switch the include directories via generator expressions, and to use **SYSTEM** includes instead of includes in `FindVDT`. #11844 is missing the usage of the `VDT::VDT` target in RooFit and in tmva, but that would come into effect after a rebase of #8709. I guess therefore that we could proceed with merging #11844 if it's green, and then I rebase #8709, so I have to do the rebase work only once. Does that sound reasonable for @amadio, @krasznaa, @bellenot ?. ### Edit ; And to be clear, for `SearchInstalledSoftware` I would leave everything as proposed in Attila's commit but the change to `target_include_directories` with the two generator expressions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11797#issuecomment-1339660363:1848,clear,clear,1848,https://root.cern,https://github.com/root-project/root/issues/11797#issuecomment-1339660363,2,['clear'],['clear']
Usability,"gth of the source argument [-Wstringop-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rpdutils/src/rpdutils.cxx:4757:26: warning: ‘char* strncpy(char*, const char*, size_t)’ output may be truncated copying 10 bytes from a string of length 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/meta/src/TClass.cxx:686:14: warning: ‘char* strncpy(char*, const char*, size_t)’ specified bound depends on the length of the source argument [-Wstringop-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void*",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2176#issuecomment-409167887:1250,clear,clearing,1250,https://root.cern,https://github.com/root-project/root/pull/2176#issuecomment-409167887,14,['clear'],['clearing']
Usability,"gth,content-type,accept-ranges; Access-Control-Allow-Methods: HEAD,GET; Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7; Content-range: bytes 0-15/414239. root�mdR; --61c842e35204a0c7; Content-range: bytes 1000-1015/414239. 1ZGqP��; --61c842e35204a0c7--; ```. And here is result from cernbox:; ```; curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 ; HTTP/1.1 206 Partial Content; Access-Control-Allow-Origin: *; Content-Disposition: attachment; filename=""test_ntuples_200123.root""; Content-Length: 389; Content-Range: ; Content-Security-Policy: default-src 'none';; Content-Type: application/octet-stream; Date: Thu, 15 Jun 2023 09:15:48 GMT; Etag: ""329762575417868288:9d274a18""; Last-Modified: Wed, 24 May 2023 12:22:19 +0000; Oc-Etag: ""329762575417868288:9d274a18""; Oc-Fileid: eoshome-t!103034857; Server: nginx/1.20.1; Strict-Transport-Security: max-age=63072000; Vary: Origin; X-Content-Type-Options: nosniff; X-Download-Options: noopen; X-Frame-Options: SAMEORIGIN; X-Permitted-Cross-Domain-Policies: none; X-Robots-Tag: none; X-Xss-Protection: 1; mode=block. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb; Content-Range: bytes 0-15/4667337; Content-Type: application/octet-stream. root��dG7�; --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb; Content-Range: bytes 1000-1015/4667337; Content-Type: application/octet-stream. .�J.�f6��M�����m; --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb--; ```. That is wrong?; First of all content type must be: ""Content-Type: multipart/something""; In the same line one should have boundary like ""boundary=61c842e35204a0c7""; Such line is not present in cernbox response.; Without clearly specified ""boundary"" it is not possible to decode data afterwards. My conclusion - malformed http response and large latency make impossible to use cernbox http server.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13018#issuecomment-1592696000:2836,clear,clearly,2836,https://root.cern,https://github.com/root-project/root/issues/13018#issuecomment-1592696000,2,['clear'],['clearly']
Usability,"guess the behavior of TTaskGroup should mimic what TThreadExecutor does, e.g. it should use the task arena if it exists, and it should construct one if it doesn't. What's the rationale for doing things independently of ROOT's task arena? Does this mean users might see more cores used than they expect in some cases?. I believe this change only removes an unnecessary restriction on when `TTaskGroup` can be used (i.e. after looking through the implementation, I don't think having IMT globally enabled is a precondition for the use of `TTaskGroup` and test benchmarks using this implementation seem to perform the same). > 2. Are you ok with silently do nothing if R__IMT is undefined? Would it be better to print a warning?. Thank you, yes, a warning would probably be better. > 3. Can we also have a way to disable RNTuple's multi-threading even if implicit MT is enabled, like TTree has?. Yes, this makes sense to me. It will probably need a big warning in the docs about when to call it and/or some graceful shutdown logic. Even if this PR doesn't make it that method might be valuable by itself. > the rationale behind my question is that we should not have N different multi-threading behaviors for N components. I completely agree, it is very nice to be able to say ""if you want multithreading, call `EnableImplicitMT` and you're done"". > and we should play well with the TBB settings of frameworks such as CMSSW, but it's not clear to me how we do that now, actually. For the RNTuple NanoAOD project, we were hoping to plug in the CMSSW tbb instance with `RPageStorage::SetTaskScheduler` (for both page sink and source): https://github.com/root-project/root/blob/a9c61d56afd70b74425779f330a4ec2cc581bb0b/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx#L136. by implementing a derived `RTaskScheduler` on the CMSSW side so they have control over task isolation etc. ; https://github.com/root-project/root/blob/4118c0cb6db03998ae77f56f57cc372ac150c9df/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx#L66-L76",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8334#issuecomment-854977563:1492,clear,clear,1492,https://root.cern,https://github.com/root-project/root/pull/8334#issuecomment-854977563,2,['clear'],['clear']
Usability,"he app is not able to go forward. . As a summary of the problem, it shows up on the lines of m_vIntData and m_vIntDatSD, below:; ```; class CytStatInfo : public TObject {; private:; 	int m_iMachineSize;; 	int m_bMachineSizeSet;; 	double m_dMotorPos;; 	int m_iFIndex;; 	std::vector<int> m_vChNum;; 	std::vector<int> m_vNoEv;; 	std::vector<long long> m_vTsFirst;; 	std::vector<double> m_vVel;; 	std::vector<double> m_vOpPow;; 	std::vector<double> m_vPulseMag;; 	std::vector<double> m_vIntData[NUMBER_OF_COLORS];; 	std::vector<double> m_vIntDataSD[NUMBER_OF_COLORS];; 	std::vector<double> m_vPkRatio;; 	std::vector<int> m_vEvtErr;; 	std::vector<double> m_vEvRate;; 	std::vector<double> m_vGEV;; 	std::vector<int> m_vChEnbMask;. 	bool m_bAllChannelsEnabled;; ```. Here, NUMBER_OF_COLORS = 5. The generated _dict file in root 5 show, at one point (note the vector declaration), . ```; {; for (Int_t R__l = 0; R__l < 5; R__l++) {; vector<double> &R__stl = m_vIntData[R__l];; R__stl.clear();; int R__i, R__n;; R__b >> R__n;; R__stl.reserve(R__n);; for (R__i = 0; R__i < R__n; R__i++) {; double R__t;; R__b >> R__t;; R__stl.push_back(R__t);; }; }; }; ```. This seems to work well. But in root 6 it produces (note the [5] after vector<double>). ```; for (Int_t R__l = 0; R__l < 5; R__l++) {; vector<double>[5] &R__stl = m_vIntData[R__l];; R__stl.clear();; int R__i, R__n;; R__b >> R__n;; R__stl.reserve(R__n);; for (R__i = 0; R__i < R__n; R__i++) {; double R__t;; R__b >> R__t;; R__stl.push_back(R__t);; }; }; }. ```. this produces the compilation error:. ```; g++ -O -Wall -fPIC -pthread -std=c++14 -m64 -I/usr/include/root -I/home/vmecomp/Projects/Cytogate/CytCommon -I../../Include -I. -I/usr/include -I/home/vmecomp/Projects/Cytogate/Bus -I/home/vmecomp/Projects/Cytogate/Include -I/home/vmecomp/Projects/Cytogate/CytCommon -I/usr/include/root -c -o CytStatInfo_dict.o CytStatInfo_dict.C; CytStatInfo_dict.C: In member function ‘virtual void CytStatInfo::Streamer(TBuffer&)’:; CytStatInfo_dict.C:202:25: er",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12755#issuecomment-1534658132:1354,clear,clear,1354,https://root.cern,https://github.com/root-project/root/issues/12755#issuecomment-1534658132,2,['clear'],['clear']
Usability,https://github.com/root-project/root/pull/7033/files#diff-db4685eef4f677b824081ed3667b66c57d14b163edaef2b5d545b2a708ec1e15R217-R226; ```c++; #ifdef R__USE_IMT; std::unique_ptr<ROOT::TThreadExecutor> fThreadExecutor;; #else; #define fThreadExecutor fSequentialExecutor; #endif; #ifndef R__WIN32; std::unique_ptr<ROOT::TProcessExecutor> fProcessExecutor;; #else; #define fProcessExecutor fSequentialExecutor; #endif; ```. This is very non-intuitive because it only works for code that follows this declaration. Additionally I would guess these `define`s spill over to user code with potentially very confusing problems and error messages...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7033#issuecomment-759494622:437,intuit,intuitive,437,https://root.cern,https://github.com/root-project/root/pull/7033#issuecomment-759494622,2,['intuit'],['intuitive']
Usability,https://root.cern/root/htmldoc/guides/users-guide/Trees.html; \- probably should be in the documentation hierarchy.; https://root.cern/root/; \- an absolutely empty page (check other pages on that path though).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7282#issuecomment-785256156:31,guid,guides,31,https://root.cern,https://github.com/root-project/root/issues/7282#issuecomment-785256156,4,['guid'],"['guide', 'guides']"
Usability,"humm ... I see ... @etejedor (and likely me :) ) seems to have thought it was needed in 2016 (7dec9bd96090a5bedac1c8a17b8154d39b6ef865) ... . However indeed the doc is clear (even back then): "" so that each thread works with its own TFile and TTree objects"". So back to reading the protected code and the lock is actually protecting the global list of pids. ... so now trying to remember why we elected to have a lock local to TFile protects this global ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5288#issuecomment-608606454:168,clear,clear,168,https://root.cern,https://github.com/root-project/root/pull/5288#issuecomment-608606454,2,['clear'],['clear']
Usability,"i am struggling to reconcile the number. I see:; ```; TTree: 2.41 2.65 2.42 2.40 2.49 2.45; master TTreeReader: 4.41 4.72 4.79 4.66 4.75 4.81; ```; and; ```; indeed with the patch the number of calls to TBranch::GetEntry ; ```; Which would mean that master TTreeReader is still about twice as slow as TTree *but* with the same number of GetEntry (or at least the same time spent in GetEntry). Then visually inspecting the flamme graph, it is clear that master-TTreeReader takes more time, but I fails to see the magnitude of the overhead being about the same as the magnitude of the cost of GetEntry (which is necessary to explain the doubling) .... The number quoted for GetEntry:; ```; 8,189,455,484 ???:TBranch::GetEntry(long long, int) [/home/eguiraud/ROOT/pcanal_patch_build/lib/libTree.so] ; ```; where do they come from. what is the unit?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3216#issuecomment-455686354:442,clear,clear,442,https://root.cern,https://github.com/root-project/root/pull/3216#issuecomment-455686354,2,['clear'],['clear']
Usability,"if you need 1e-9 simply change it when you call Integral, that is what ""defined by eps"" means. You defined it, either by using the default value 1e-6 or by specifying this parameter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13005#issuecomment-1591002768:17,simpl,simply,17,https://root.cern,https://github.com/root-project/root/issues/13005#issuecomment-1591002768,2,['simpl'],['simply']
Usability,"iggerRun); +TEST_P(RDFVary, VariationsForDoesNotTriggerRun); {; ROOT::RDataFrame df(10);; auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");; @@ -242,7 +246,7 @@ TEST(RDFVary, VariationsForDoesNotTriggerRun); EXPECT_EQ(df.GetNRuns(), 0);; }; ; -TEST(RDFVary, VariationsForWithNoVariations); +TEST_P(RDFVary, VariationsForWithNoVariations); {; ROOT::RDataFrame df(10);; auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");; @@ -250,7 +254,7 @@ TEST(RDFVary, VariationsForWithNoVariations); EXPECT_EQ(hs.GetKeys(), std::vector<std::string>{""nominal""});; }; ; -TEST(RDFVary, GetVariations); +TEST_P(RDFVary, GetVariations); {; auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Define(""y"", [] { return 10; });; auto df2 = df.Vary(""x"", SimpleVariation, {}, 2); @@ -269,7 +273,7 @@ TEST(RDFVary, GetVariations); ""Variations {x:0, x:1} affect column x\nVariations {xy:0, xy:1} affect columns {x, y}\n"");; }; ; -TEST(RDataFrameInterface, VaryFriend); +TEST(RDFVary, VaryFriend); {; int x = 0;; TTree main(""main"", ""main"");; @@ -295,7 +299,7 @@ TEST(RDataFrameInterface, VaryFriend); EXPECT_EQ(sum2vars[""var:0""], 43);; }; ; -TEST(RDFVary, ResultMapIteration); +TEST_P(RDFVary, ResultMapIteration); {; auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 0; }).Vary(""x"", SimpleVariation, {}, 2);; auto s = df.Sum<int>(""x"");; @@ -327,7 +331,7 @@ TEST_P(RDFVary, VaryDefinePerSample); EXPECT_EQ(ss[""x:1""], 2 * 10);; }; ; -TEST(RDFVary, SaveGraph); +TEST_P(RDFVary, SaveGraph); {; ROOT::RDataFrame df(1);; auto c = df.Define(""x"", [] { return 0; }); @@ -622,7 +626,7 @@ TEST_P(RDFVary, DefineDependingOnVariations); EXPECT_EQ(sums[""yshift:low""], 410);; }; ; -TEST(RDFVary, VaryAndAlias); +TEST_P(RDFVary, VaryAndAlias); {; auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; }).Alias(""y"", ""x"").Vary(""x"", SimpleVariation, {}, 2);; auto s1 = df.Sum<int>(""y"");; @@ -1000,7 +1004,7 @@ struct MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {; }; };; ; -TEST(RDFVary, Var",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10715#issuecomment-1150873429:3424,Simpl,SimpleVariation,3424,https://root.cern,https://github.com/root-project/root/pull/10715#issuecomment-1150873429,1,['Simpl'],['SimpleVariation']
Usability,"igned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask; fenv.__control &= ~new_excepts;; fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;; }. inline int fedisableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // all previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask; fenv.__control |= new_excepts;; fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;; }. #else; inline int feenableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */; }. #endif; #endif. int main(int argc, char **argv) {; feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);; Float_t fHue=-1.0; ; Float_t fLight=-1.0;; Float_t fSaturation = -1.0;; Float_t r=212.467392f;; Float_t g=0.529984f;; Float_t b=94.476196f;; TColor::RGB2HLS(r ,g, b,fHue, fLight, fSaturation);; return 0;; }. ```; produces FPE on Mac+ ROOT 6.22. The problem is that TColor::RGB2HLS is a static function and when I try to take it of and compile standalone, everything works.; Have no idea what is happening.; My very wild speculation is that the build setup of the 6.22 release on Mac is bugged because of bugged clang or linker there.; But again, that is just a speculation. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6373#issuecomment-712188134:1769,clear,clear,1769,https://root.cern,https://github.com/root-project/root/issues/6373#issuecomment-712188134,2,['clear'],['clear']
Usability,ild/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_tprofile_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tprofile_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_ttree_read_imt_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_ttree_read_imt_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_th1f_fill_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_th1f_fill_build/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_libInitOrderDups_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_libInitOrderDups_build/); - [projectroot.roottest.root.meta.genreflex.ROOT-5709.roottest_root_meta_genreflex_ROOT_5709_Tau_libgen_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.meta.genreflex/ROOT-5709/roottest_root_meta_genreflex_ROOT_5709_Tau_libgen_build/); - [projectroot.roottest.root.multicore.roottest_root_multicore_testSetAddress_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_testSetAddress_build/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_testSelector_build](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/169780/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_testSelector_build/). And 155 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12415#issuecomment-1456017123:2626,simpl,simple,2626,https://root.cern,https://github.com/root-project/root/pull/12415#issuecomment-1456017123,4,['simpl'],['simple']
Usability,"include\tuple(332,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\CodeGen\SelectionDAG\StatepointLowering.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\CodeGen\SelectionDAG\LLVMSelectionDAG.vcxproj] ; - [2021-04-20T14:33:47.529Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/ADT/SmallVector.h(581,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\Frontend\FrontendAction.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\tools\clang\lib\Frontend\obj.clangFrontend.vcxproj] ; - [2021-04-20T14:33:47.529Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\tuple(564,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\Scalar\SimpleLoopUnswitch.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Transforms\Scalar\LLVMScalarOpts.vcxproj] ; - [2021-04-20T14:33:47.529Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/ADT/DenseMap.h(1237,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\Scalar\SeparateConstOffsetFromGEP.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm\src\lib\Transforms\Scalar\LLVMScalarOpts.vcxproj] ; - [2021-04-20T14:33:47.529Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\include\llvm/Analysis/ScalarEvolutionExpressions.h(576,29): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\lib\Transforms\Scalar\S",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7937#issuecomment-823327556:2866,Simpl,SimpleLoopUnswitch,2866,https://root.cern,https://github.com/root-project/root/pull/7937#issuecomment-823327556,1,['Simpl'],['SimpleLoopUnswitch']
Usability,"ing it, see if it fails, and if it doesn't fail declare it ""portable"" is exactly what causes folks to still cast pointers to long, for example. This would never happen if code was written with portability in mind from the get-go. But your closer exemplifies that even better: given the choice between *potential* scaling problems and *guaranteed* portability problems, you choose to accept the latter. Clearly, portability isn't high on your list. Portability is, however, very important. By providing a portable solution that works well within other environments, cppyy is now being used on large code bases in mathematics, chemistry, and biology. That work uncovers errors even deep inside Cling, because it is pushed harder and used differently than in the CINT-tamed HEP world. Here is a current problem I'm working on for example. Try it in ROOT master, and watch memory consumption grow with top or whatever:. ```; $ root -l -b; root [0] template <class T, class U> class __gmp_expr;; root [1] typedef struct{ } __mpz_struct;; root [2] typedef __gmp_expr<__mpz_struct[1],__mpz_struct[1]> mpz_class;; root [3] for (;;) gInterpreter->ClassInfo_IsEnum(""std::vector<mpz_class>::value_type""); ```. That leak occurs when `findScope` in the LookupHelper starts parsing whenever `quickFindDecl()` fails (it's nothing to do with `mpz_class` or `ClassInfo_IsEnum` per se, just that that's where it was first found). If `quickFindDecl()` succeeds, then no leak. Since this is an accumulation of internal state, it will _not_ be reported by valgrind as a leak. Use of `findScope` is pervasive, not just from Python, but also from I/O and in clingutils. So, you're sitting on a leak even in HEP (where, especially in the LHC experiments, memory is precious), but your standard test tools won't catch it. To discover these types of deep problems, you need portable software, as that allows it to be used by a wider audience, causing it to be better tested simply through the virtue of having more eyes on it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6393#issuecomment-707273510:4700,simpl,simply,4700,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-707273510,2,['simpl'],['simply']
Usability,"ing zero bits in LSHR/SHL (PR44526); git bisect bad d65ddca83ff85c7345fe9a0f5a15750f01e38420; # good: [15a74b64dfa9bc1213cd582415f849b4dba51bad] [VPlan] Manage pairs of incoming (VPValue, VPBB) in VPWidenPHIRecipe.; git bisect good 15a74b64dfa9bc1213cd582415f849b4dba51bad; # good: [dd68f3cf2899c554cab7baf3ccdcd3f987d77736] [RISCV] Support insertion of misaligned subvectors; git bisect good dd68f3cf2899c554cab7baf3ccdcd3f987d77736; # good: [97a304cc8f949e40693d63b855b4b24bc81fa729] [scan-build-py] Add sarif-html support in scan-build-py; git bisect good 97a304cc8f949e40693d63b855b4b24bc81fa729; # bad: [0f279c7a5c34eaae797c325c18614def21eba921] Revert ""patch"" it wass my mistake inusing git; git bisect bad 0f279c7a5c34eaae797c325c18614def21eba921; # bad: [56d228a14e3631de157ae98dd61d21193e4502d5] [SimplifyCFG] Update passingValueIsAlwaysUndefined to check more attributes; git bisect bad 56d228a14e3631de157ae98dd61d21193e4502d5; # good: [3adb89bb9f8e73c82787babb2f877fece7394770] [ThinLTO] Make cloneUsedGlobalVariables deterministic; git bisect good 3adb89bb9f8e73c82787babb2f877fece7394770; # good: [af4451eb4f38ce492ca38add91c8378f32b93eca] [NFC] Make TrailingObjects non-copyable/non-movable; git bisect good af4451eb4f38ce492ca38add91c8378f32b93eca; # good: [3c4cdd0b6a6fd760707be9b5dec32378ec55c549] [mlir] ExecutionEngine needs special handling for COFF binaries; git bisect good 3c4cdd0b6a6fd760707be9b5dec32378ec55c549; # good: [ab5b00ada9e77437ed2c76f73cfb8481bb9826a5] Revert ""[Driver][Windows] Support per-target runtimes dir layout for profile instr generate""; git bisect good ab5b00ada9e77437ed2c76f73cfb8481bb9826a5; # first bad commit: [56d228a14e3631de157ae98dd61d21193e4502d5] [SimplifyCFG] Update passingValueIsAlwaysUndefined to check more attributes; ```. ```; 56d228a14e3631de157ae98dd61d21193e4502d5 is the first bad commit; commit 56d228a14e3631de157ae98dd61d21193e4502d5; Author: Juneyoung Lee <aqjune@gmail.com>; Date: Tue Feb 23 11:46:59 2021 +0900. [SimplifyCFG]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9547#issuecomment-1011201311:2005,Simpl,SimplifyCFG,2005,https://root.cern,https://github.com/root-project/root/issues/9547#issuecomment-1011201311,2,['Simpl'],['SimplifyCFG']
Usability,"int, FTMesh*)’} to ‘GLUTesselatorFunction’ {aka ‘void (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/graf3d/ftgl/src/FTVectoriser.cxx:187:76: warning: cast between incompatible function types from ‘void (*)(void*, FTMesh*)’ to ‘GLUTesselatorFunction’ {aka ‘void (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/graf3d/ftgl/src/FTVectoriser.cxx:188:76: warning: cast between incompatible function types from ‘void (*)(FTGL_DOUBLE*, void**, GLfloat*, void**, FTMesh*)’ {aka ‘void (*)(double*, void**, float*, void**, FTMesh*)’} to ‘GLUTesselatorFunction’ {aka ‘void (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/graf3d/ftgl/src/FTVectoriser.cxx:189:76: warning: cast between incompatible function types from ‘void (*)(FTMesh*)’ to ‘GLUTesselatorFunction’ {aka ‘void (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/graf3d/ftgl/src/FTVectoriser.cxx:190:76: warning: cast between incompatible function types from ‘void (*)(GLenum, FTMesh*)’ {aka ‘void (*)(unsigned int, FTMesh*)’} to ‘GLUTesselatorFunction’ {aka ‘void (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] . And 193 more. ### Failing tests:; - [projectroot.roottest.cling.functionTemplate.roottest_cling_functionTemplate_testcint](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/43493/testReport/projectroot.roottest.cling/functionTemplate/roottest_cling_functionTemplate_testcint/); - [projectroot.roottest.root.multicore.roottest_root_multicore_processExecutorH1Test](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/43493/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_processExecutorH1Test/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2768#issuecomment-427830089:2647,clear,clearing,2647,https://root.cern,https://github.com/root-project/root/pull/2768#issuecomment-427830089,2,['clear'],['clearing']
Usability,it also makes things clearer when reading the tutorial code,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6102#issuecomment-666978548:21,clear,clearer,21,https://root.cern,https://github.com/root-project/root/pull/6102#issuecomment-666978548,2,['clear'],['clearer']
Usability,it could be also the the call to `gethostname` failed and there's simply garbage:; https://github.com/xrootd/xrootd/blob/master/src/XrdNet/XrdNetUtils.cc#L622. @Axel-Naumann : are there debug symbols on cvmfs? were the libs rebuild or installed from EPEL?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-760269958:66,simpl,simply,66,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-760269958,2,['simpl'],['simply']
Usability,"ith SO_LoadedLast.; >; > I would appreciate if we can coordinate next time such breaking; > changes before asking for a llvm review and land patches in these; > particularly sensitive areas.; >; > I explicitly added you to the list of reviewers for the original ; > patch, there is little more I can do than that. And more coordination ; > is exactly what I am trying to do now. If we cannot reach a conclusion ; > may I at least be added to review whatever your solution looks like?; >; > 1. I plan to remove the NDEBUG assert; >; > Already done in D33529; >; > 2. Make the std::vector<void*> a; > std::vector<llvm::PointerIntPair<void*, 1, bool>>; >; > How can you guarantee that the platform will deliver a pointer with ; > proper alignment for that?; >; > 3. I will change the search order to search for first the one; > that are not marked RTLD_GLOBAL.; >; > So any other client that wants to open thing's with RTLD_LOCAL will ; > then expose what they thought were private symbols to the JIT as a whole?; >; > One of the issues is that it is not clear to me is what exactly is; > your use case and this is why there are misunderstandings.; >; > I also don't understand why there are mis-understandings, but have ; > explained the use case a few times now and *3* will explicitly break ; > that as well as provide bizarre default behavior:; >; > libc++.so, libA.so; > libA.so defines an overload for global operator new/delete; >; > |DynamicLibrary::getPermanentLibrary(NULL) // Other code; > DynamicLibrary::getPermanentLibrary(""libA.so"") |; >; > In your scheme the JIT can pull operator new/delete from libA.so,; > and worse is that whether it pulls operator new/delete from; > libA.so is dependent on whether operator new/delete has been; > resolved in *// Other code* before libA.so has been loaded.; >; > The example can be expanded to RTTI information, exceptions, and a ; > host of other problems.; >; No, this would not break the case you mentioned. The case that will ; have a special be",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/744#issuecomment-313802370:2296,clear,clear,2296,https://root.cern,https://github.com/root-project/root/pull/744#issuecomment-313802370,1,['clear'],['clear']
Usability,jectroot.roottest.cling.template.roottest_cling_template_runtemplatefriend](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146424/testReport/projectroot.roottest.cling/template/roottest_cling_template_runtemplatefriend/); - [projectroot.roottest.python.cpp.roottest_python_cpp_advanced](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146424/testReport/projectroot.roottest.python/cpp/roottest_python_cpp_advanced/); - [projectroot.roottest.root.aclic.load.roottest_root_aclic_load_reload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146424/testReport/projectroot.roottest.root.aclic/load/roottest_root_aclic_load_reload/); - [projectroot.roottest.root.aclic.misc.roottest_root_aclic_misc_assertROOT7027](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146424/testReport/projectroot.roottest.root.aclic/misc/roottest_root_aclic_misc_assertROOT7027/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146424/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.callfunc.roottest_root_meta_callfunc_assertUnload_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146424/testReport/projectroot.roottest.root.meta/callfunc/roottest_root_meta_callfunc_assertUnload_auto/); - [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146424/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146424/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1143358479:2450,simpl,simple,2450,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1143358479,4,['simpl'],['simple']
Usability,jectroot.roottest.cling.template.roottest_cling_template_runtemplatefriend](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/147284/testReport/projectroot.roottest.cling/template/roottest_cling_template_runtemplatefriend/); - [projectroot.roottest.python.cpp.roottest_python_cpp_advanced](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/147284/testReport/projectroot.roottest.python/cpp/roottest_python_cpp_advanced/); - [projectroot.roottest.root.aclic.load.roottest_root_aclic_load_reload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/147284/testReport/projectroot.roottest.root.aclic/load/roottest_root_aclic_load_reload/); - [projectroot.roottest.root.aclic.misc.roottest_root_aclic_misc_assertROOT7027](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/147284/testReport/projectroot.roottest.root.aclic/misc/roottest_root_aclic_misc_assertROOT7027/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/147284/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.callfunc.roottest_root_meta_callfunc_assertUnload_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/147284/testReport/projectroot.roottest.root.meta/callfunc/roottest_root_meta_callfunc_assertUnload_auto/); - [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/147284/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/147284/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1153748598:2450,simpl,simple,2450,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1153748598,4,['simpl'],['simple']
Usability,jectroot.roottest.python.cpp.roottest_python_cpp_advanced](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146660/testReport/projectroot.roottest.python/cpp/roottest_python_cpp_advanced/); - [projectroot.roottest.root.aclic.load.roottest_root_aclic_load_reload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146660/testReport/projectroot.roottest.root.aclic/load/roottest_root_aclic_load_reload/); - [projectroot.roottest.root.aclic.misc.roottest_root_aclic_misc_assertROOT7027](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146660/testReport/projectroot.roottest.root.aclic/misc/roottest_root_aclic_misc_assertROOT7027/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146660/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.callfunc.roottest_root_meta_callfunc_assertUnload_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146660/testReport/projectroot.roottest.root.meta/callfunc/roottest_root_meta_callfunc_assertUnload_auto/); - [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146660/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/); - [projectroot.roottest.cling.template.roottest_cling_template_runtemplatefriend](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146660/testReport/projectroot.roottest.cling/template/roottest_cling_template_runtemplatefriend/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146660/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1144990827:2450,simpl,simple,2450,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1144990827,4,['simpl'],['simple']
Usability,"ke_canvas.C; namespace root_global { ; unique_ptr<TCanvas> c1;; }. void make_canvas() {; // we decide at the top level to use a global here:; my_subroutine(root_global::c1);. //This one doesn't use a global and will die, our choice; unique_ptr<TCanvas> local_canvas;; my_subroutine(local_canvas);; }; ```; or if being a little more lazy, I'd likely use static instead of the namespace, but the root interpreter doesn't respect translation unit boundaries well. Really I'd use a class though in case I need to add more global things easily:. ```; //display.h. class display {; private:; unique_ptr<TCanvas> c1;; public:; void make_canvas() {; c1.reset(); ; c1.reset(new TCanvas());; }; };; ```; And use it like:; ```; //make_display.C; #include ""display.h"". namespace root_global { ; display my_display;; }. // main routine:; void make_display() { ; // This one will stick around; root_global::my_display.make_canvas();. // This one wont. ; display local_display;; local_display.make_canvas();; }; ```. There are two main differences compared to the PR. 1) I'm not letting the subroutine allocate heap objects that aren't handled explicitly by the caller. 2) I'm using standard C++ that even works fine right now in root 6. That's nice because it's easier to learn, recognize, understand, and apply elsewhere. Maybe it's a bonus that syntax for creating the TCanvas is always the same and separated from syntax for keeping it. Maybe (1) can be done with RDirectory, and just isn't done in the PR example. I don't know enough about it. If the root objects all had some kind of empty non-displayed initial state, and their own reset() re-initializer, we wouldn't even need the unique_ptr. . Of course you could still end up calling make_display() as a subtroutine from another file, and if you do then it's still become a subroutine allocating ""its own"" heap objects. I just wouldn't, but with a little extra work for the usual extern declarations you could still access the memory elsewhere if you did.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7305#issuecomment-787621241:1918,learn,learn,1918,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-787621241,2,['learn'],['learn']
Usability,"large originally independent package are the (debatable) exceptions (roofit, tmva), otherwise we request for all files to have the same copyright and licenses. for simplicity and clarity. thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1712#issuecomment-371599798:164,simpl,simplicity,164,https://root.cern,https://github.com/root-project/root/pull/1712#issuecomment-371599798,2,['simpl'],['simplicity']
Usability,"ls using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; [RF][HS3] Consistent range for nominal alpha params with HistFactory; [RF][HS3] Remember simultaneous channel names when writing JSON; [RF][HS3] Avoid turning RooConstVar into RooRealVar in JSON roundtrip; [RF][HS3] Use `RooConstVar` for sigma parameters in HF constraints; [RF][HS3] Don't mix up free functions and class impl in JSON tool; [RF][HS3] Consistently have implicit fallback for HistFactory variables; [RF][HS3] Don't import datasets that are parts of a combined dataset; [RF][HS3] Some code simplification in `RooJSONFactoryWSTool`; [RF][HS3] Generate input file for testHS3HistFactory on the fly; [RF][HS3] Improvements to the HS3 HistFactory implementation; [RF] Use `std::vector` diretly in RooVectorDataStore::RealFullVector; [RF][HS3] Some refactoring for less lines of code; [RF][HS3] Ordering fixes; [RF][HS3] Achieved closure for ATLAS ttW workspace; [RF][HS3] Sorting distributions; [RF][HS3] Bugfixes for histfactory workspaces; [RF][HS3] Small renamings; [RF][HS3] Improved attribute handling, caught some typecast-errors; [RF][HS3] Bugfix for FlexibleInterpVar; [RF] Avoid unnecessary warnings in `FlexibleInterpVar::setInterpCode`; [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; [RF][HS3] Re-retrieve element after exporting dependants; [RF][HS3] Don't write `histfactory_dist` axes redundantly; [RF] Exclude RooHistError from IO; [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; [RF] Code-format `testRooDataHist.cxx`; [RF][HS3] Change analysis and likelihoods fields to match HS3 standard; [RF] Remove native buffers from `RooVectorDataStore::RealFullVector`; [RF] Modernize `RooVectorDataStore::RealF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12590#issuecomment-1491813664:2723,simpl,simplification,2723,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664,4,['simpl'],['simplification']
Usability,m () from /lib64/libc.so.6; #2 0x00007f6cdecce102 in TUnixSystem::StackTrace() () from /cvmfs/atlas-nightlies.cern.ch/repo/sw/21.0_Athena_x86_64-centos7-gcc62-opt/sw/lcg/releases/ROOT/6.08.06-d7e12/x86_64-centos7-gcc62-opt/lib/libCore.so; #3 0x00007f6cdecd061c in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/atlas-nightlies.cern.ch/repo/sw/21.0_Athena_x86_64-centos7-gcc62-opt/sw/lcg/releases/ROOT/6.08.06-d7e12/x86_64-centos7-gcc62-opt/lib/libCore.so; #4 <signal handler called>; #5 0x0000000001209080 in ?? (); #6 0x00007f6cdec52005 in TList::FindObject(TObject const*) const () from /cvmfs/atlas-nightlies.cern.ch/repo/sw/21.0_Athena_x86_64-centos7-gcc62-opt/sw/lcg/releases/ROOT/6.08.06-d7e12/x86_64-centos7-gcc62-opt/lib/libCore.so; #7 0x00007f6cdec5237c in TList::Clear(char const*) () from /cvmfs/atlas-nightlies.cern.ch/repo/sw/21.0_Athena_x86_64-centos7-gcc62-opt/sw/lcg/releases/ROOT/6.08.06-d7e12/x86_64-centos7-gcc62-opt/lib/libCore.so; #8 0x00007f6cdec50a01 in THashTable::Clear(char const*) () from /cvmfs/atlas-nightlies.cern.ch/repo/sw/21.0_Athena_x86_64-centos7-gcc62-opt/sw/lcg/releases/ROOT/6.08.06-d7e12/x86_64-centos7-gcc62-opt/lib/libCore.so; #9 0x00007f6cdec504dd in THashList::Clear(char const*) () from /cvmfs/atlas-nightlies.cern.ch/repo/sw/21.0_Athena_x86_64-centos7-gcc62-opt/sw/lcg/releases/ROOT/6.08.06-d7e12/x86_64-centos7-gcc62-opt/lib/libCore.so; #10 0x00007f6cdec9d1a7 in TListOfDataMembers::Unload() () from /cvmfs/atlas-nightlies.cern.ch/repo/sw/21.0_Athena_x86_64-centos7-gcc62-opt/sw/lcg/releases/ROOT/6.08.06-d7e12/x86_64-centos7-gcc62-opt/lib/libCore.so; #11 0x00007f6cdec7f2d0 in TClass::SetUnloaded() () from /cvmfs/atlas-nightlies.cern.ch/repo/sw/21.0_Athena_x86_64-centos7-gcc62-opt/sw/lcg/releases/ROOT/6.08.06-d7e12/x86_64-centos7-gcc62-opt/lib/libCore.so; #12 0x00007f6cdec4a574 in ROOT::RemoveClass(char const*) () from /cvmfs/atlas-nightlies.cern.ch/repo/sw/21.0_Athena_x86_64-centos7-gcc62-opt/sw/lcg/releases/ROOT/6.08.06-d7e12/x86_64-cento,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15964#issuecomment-2202499805:1641,Clear,Clear,1641,https://root.cern,https://github.com/root-project/root/issues/15964#issuecomment-2202499805,1,['Clear'],['Clear']
Usability,miliMinimize.h Minuit2/MnFunctionCross.h Minuit2/MnGlobalCorrelationCoeff.h Minuit2/MnHesse.h Minuit2/MnLineSearch.h Minuit2/MnMachinePrecision.h Minuit2/MnMatrix.h Minuit2/MnMigrad.h Minuit2/MnMinimize.h Minuit2/MnMinos.h Minuit2/MnParabola.h Minuit2/MnParabolaFactory.h Minuit2/MnParabolaPoint.h Minuit2/MnParameterScan.h Minuit2/MnPlot.h Minuit2/MnPosDef.h Minuit2/MnPrint.h Minuit2/MnRefCountedPointer.h Minuit2/MnReferenceCounter.h Minuit2/MnScan.h Minuit2/MnSeedGenerator.h Minuit2/MnSimplex.h Minuit2/MnStrategy.h Minuit2/MnTiny.h Minuit2/MnTraceObject.h Minuit2/MnUserCovariance.h Minuit2/MnUserFcn.h Minuit2/MnUserParameterState.h Minuit2/MnUserParameters.h Minuit2/MnUserTransformation.h Minuit2/MnVectorTransform.h Minuit2/ModularFunctionMinimizer.h Minuit2/NegativeG2LineSearch.h Minuit2/Numerical2PGradientCalculator.h Minuit2/ParametricFunction.h Minuit2/ScanBuilder.h Minuit2/ScanMinimizer.h Minuit2/SimplexBuilder.h Minuit2/SimplexMinimizer.h Minuit2/SimplexParameters.h Minuit2/SimplexSeedGenerator.h Minuit2/SinParameterTransformation.h Minuit2/SqrtLowParameterTransformation.h Minuit2/SqrtUpParameterTransformation.h Minuit2/StackAllocator.h Minuit2/VariableMetricBuilder.h Minuit2/VariableMetricEDMEstimator.h Minuit2/VariableMetricMinimizer.h Minuit2/VectorOuterProduct.h TMinuit2TraceObject.h /mnt/build/workspace/root-pullrequests-build/root/math/minuit2/inc/LinkDef.h ; - [2020-10-25T10:36:13.979Z] /mnt/build/workspace/root-pullrequests-build/build/include/Minuit2/MnPrint.h:130:69: error: use of undeclared identifier 't' ; - [2020-10-25T10:36:13.979Z] /mnt/build/workspace/root-pullrequests-build/build/include/Minuit2/MnPrint.h:132:24: error: no member named 'Warning' in 'ROOT::Minuit2::MnPrintLevel' ; - [2020-10-25T10:36:13.979Z] /mnt/build/workspace/root-pullrequests-build/build/include/Minuit2/MnPrint.h:133:71: error: use of undeclared identifier 't' ; - [2020-10-25T10:36:13.979Z] /mnt/build/workspace/root-pullrequests-build/build/include/Minuit2/MnPrint.h:137:68:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6705#issuecomment-716125314:5263,Simpl,SimplexSeedGenerator,5263,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-716125314,1,['Simpl'],['SimplexSeedGenerator']
Usability,"n RooFit JSON IO; [RF] Add test for a simultaneous model written and read from JSON; [RF] Skip the RooSimultaneous in JSON IO; [RF] Don't export `factory_tag` in JSON; [RF][HS3] Move the default variable values to the estimates section; [RF] RooFit JSON: no need to tag variables, just export them; [RF] Rename fields in JSON file to match new standard; [RF] Complete also the reading of likelihoods and analysis fields; [RF] Add likelihoods and analyses fields for HS3 v2; [RF] Decouple `RooDataHist` reading from rest of workspace in RooFitHS3; [RF] Some refactoring of RooFit HS3; [RF] New `domains` section in JSON to store variable ranges; Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252); [RF] Clearly mark `RooFit::CloneData()` as deprecated; [RF] Again code-format RooMinimizer; [RF] Avoid overhead of tracking evaluation error msgs when not needed; [RF] Implement safe way to set eval error logging in RooMinimizer; [RF] Use proper infinity checks in RooFit HS3; [RF] Avoid `sin` or `cos` of infinity in RooTruthModel integral code; [RF] RooTruthModel: local `xmin` and `xmax` to make code more readable; [RF] Define infinity as `std::numeric_limits<double>::infinity()`; [RF] Inline infinity constant and checks in `RooNumber`; [RF] Code-format RooNumber.h and RooNumber.cxx; [RF] Fill weight errors when importing RooDataHists to RooDataSet; [RF] Make it possible to directly import RooDataHist to RooDataSet; [RF] Reduce code duplication in RooDataSet constructor; [RF] Always create weight var in RooDataSet when importing weighted data; [RF] Implicitly create `WeightVar` for RooDataSet if it doesn't exist; [RF] Support also importing `RooDataHists` into RooDataSets; [RF] Avoid some code duplication in `RooDataSet` with importing slices; [RF] Split RooFuncWrapper into '.h' and '.cxx'.; [RF] Add observables as another parameter in RooFuncWrapper.; [RF] Test rough prototype of code generation in `testRooFuncWrapper`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12590#issuecomment-1491813664:8212,Clear,Clearly,8212,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664,1,['Clear'],['Clearly']
Usability,"ne. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:; ```c++; MnPrint::AddFilter(""MnHesse"");; ```; To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:; ```c++; MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");; ```; To only match the beginning of the prefix string, use ""^"". For example,; ```c++; MnPrint::AddFilter(""^MnHesse"");; ```; only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:; ```c++; MnPrint::AddFilter(""Gradient"");; ```; to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no perf",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6705#issuecomment-733046580:1116,Clear,ClearFilter,1116,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-733046580,1,['Clear'],['ClearFilter']
Usability,"ned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask; fenv.__control &= ~new_excepts;; fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;; }. inline int fedisableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // all previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask; fenv.__control |= new_excepts;; fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;; }. #else; inline int feenableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */; }. #endif; #endif. int main(int argc, char **argv) {; feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);; Float_t fHue=-1.0; ; Float_t fLight=-1.0;; Float_t fSaturation = -1.0;; Float_t r=212.467392f;; Float_t g=0.529984f;; Float_t b=94.476196f;; TColor::RGB2HLS(r ,g, b,fHue, fLight, fSaturation);; return 0;; }. ```; produces FPE on Mac+ ROOT 6.22. The problem is that TColor::RGB2HLS is a static function and when I try to take it of and compile standalone, everything works.; Have no idea what is happening.; My very wild speculation is that the build setup of the 6.22 release on ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6373#issuecomment-712188134:1437,clear,clear,1437,https://root.cern,https://github.com/root-project/root/issues/6373#issuecomment-712188134,2,['clear'],['clear']
Usability,"ned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask; fenv.__control &= ~new_excepts;; fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;; }. inline int fedisableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // all previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask; fenv.__control |= new_excepts;; fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;; }. #else; inline int feenableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */; }. #endif; #endif. int main(int argc, char **argv) {; feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);; TCanvas* C= new TCanvas(""canvas"",""canvas"",5,5);//fails; // TCanvas* C= new TCanvas(""canvas"",""canvas"",50,50);//works; C->cd();; Double_t w=20, h=20, xl=0, yb=20;; TBox* o=new TBox();; TPad* c= new TPad();; c->SetPad(0,0,1,1);; c->cd(1);; c->PlaceBox(o,w,h,xl,yb);; return 0;; }. ```. I see. ```; [@test]$ ./pad5.exe . *** Break *** floating point exception. ===========================================================; There was a crash.; This is the entire stack trace of all thr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6428#issuecomment-698590998:1364,clear,clear,1364,https://root.cern,https://github.com/root-project/root/issues/6428#issuecomment-698590998,2,['clear'],['clear']
Usability,"ned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask; fenv.__control &= ~new_excepts;; fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;; }. inline int fedisableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // all previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask; fenv.__control |= new_excepts;; fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;; }. #else; inline int feenableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */; }. #endif; #endif. int main(int argc, char **argv) {; feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);; TRandom* R1= new TRandom();; TRandom* R2= new TRandom();; TRandom* R3= new TRandom();; Float_t r1,g1,b1;; Float_t r2,g2,b2;; Float_t r3,g3,b3;; Float_t fHue1=-1.0f; ; Float_t fLight1=-1.0f;; Float_t fSaturation1 = -1.0f;; Float_t fHue2=-1.0f; ; Float_t fLight2=-1.0f;; Float_t fSaturation2 = -1.0f;; Float_t fHue3=-1.0f; ; Float_t fLight3=-1.0f;; Float_t fSaturation3 = -1.0f;; for (size_t i=0; i<1000000;i++); {; r1=16.0f*(1.0f-float(R1->Rndm()));; g1=16.0f*(1.0f-float(R1->Rndm",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6684#issuecomment-713684777:1367,clear,clear,1367,https://root.cern,https://github.com/root-project/root/pull/6684#issuecomment-713684777,2,['clear'],['clear']
Usability,"ned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask; fenv.__control &= ~new_excepts;; fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;; }. inline int fedisableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // all previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask; fenv.__control |= new_excepts;; fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;; }. #else; inline int feenableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts); {; #pragma STDC FENV_ACCESS ON; fexcept_t flags;; /* Save current exception flags. */; fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */; return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */; }. #endif; #endif. void FakeRGB2HLS(Float_t rr, Float_t gg, Float_t bb,; Float_t &hue, Float_t &light, Float_t &satur); {; Float_t rnorm, gnorm, bnorm, minval, maxval, msum, mdiff, r, g, b;; minval = maxval =0 ;; r = g = b = 0;; if (rr > 0) {; r = rr;; if (r > 1) r = 1;; }; if (gg > 0) {; g = gg;; if (g > 1) g = 1;; }; if (bb > 0) {; b = bb;; if (b > 1) b = 1;; }. minval = r;; if (g < minval) minval = g;; if (b < minval) minval = b;; maxval = r;; if (g > maxval) maxval = g;; if (b > maxval) maxval = b;. rnorm = gnorm = bnorm = 0;; mdiff = maxval - minval;; msum = maxval + minval;; pri",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6373#issuecomment-712842902:1352,clear,clear,1352,https://root.cern,https://github.com/root-project/root/issues/6373#issuecomment-712842902,2,['clear'],['clear']
Usability,"no.h' not found ; - [2022-12-21T14:38:19.707Z] /home/sftnight/build/workspace/root-pullrequests-build/build/etc/cling/Interpreter/DynamicLookupLifetimeHandler.h:56:7: error: use of undeclared identifier 'std' ; - [2022-12-21T14:38:19.708Z] /home/sftnight/build/workspace/root-pullrequests-build/build/etc/cling/std20.modulemap:438:12: error: header 'bits/chrono.h' not found ; - [2022-12-21T14:38:19.708Z] /home/sftnight/build/workspace/root-pullrequests-build/build/etc/cling/Interpreter/Value.h:93:41: error: use of undeclared identifier 'std' ; - [2022-12-21T14:38:19.708Z] /home/sftnight/build/workspace/root-pullrequests-build/build/etc/cling/Interpreter/Value.h:93:55: error: expected ',' or '&gt;' in template-parameter-list ; - [2022-12-21T14:38:19.708Z] /home/sftnight/build/workspace/root-pullrequests-build/build/etc/cling/Interpreter/Value.h:93:75: error: no type named 'value' in the global namespace; did you mean 'Value'? ; - [2022-12-21T14:38:19.708Z] /home/sftnight/build/workspace/root-pullrequests-build/build/etc/cling/Interpreter/Value.h:93:82: error: expected member name or ';' after declaration specifiers . And 30 more. ### Warnings:; - [2022-12-21T14:26:00.154Z] /home/sftnight/build/workspace/root-pullrequests-build/root/net/rpdutils/src/rpdutils.cxx:422:54: warning: using value of simple assignment with ‘volatile’-qualified left operand is deprecated [-Wvolatile] ; - [2022-12-21T14:26:23.830Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:4040:42: warning: bitwise operation between different enumeration types ‘TSystem::EAclicProperties’ and ‘TObject::&lt;unnamed enum&gt;’ is deprecated [-Wdeprecated-enum-enum-conversion] ; - [2022-12-21T14:26:23.830Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:4042:43: warning: bitwise operation between different enumeration types ‘TSystem::EAclicProperties’ and ‘TObject::&lt;unnamed enum&gt;’ is deprecated [-Wdeprecated-enum-enum-conversion]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11874#issuecomment-1361406497:2230,simpl,simple,2230,https://root.cern,https://github.com/root-project/root/pull/11874#issuecomment-1361406497,2,['simpl'],['simple']
Usability,"no.h' not found ; - [2022-12-28T08:32:45.548Z] /home/sftnight/build/workspace/root-pullrequests-build/build/etc/cling/Interpreter/DynamicLookupLifetimeHandler.h:56:7: error: use of undeclared identifier 'std' ; - [2022-12-28T08:32:45.548Z] /home/sftnight/build/workspace/root-pullrequests-build/build/etc/cling/std20.modulemap:438:12: error: header 'bits/chrono.h' not found ; - [2022-12-28T08:32:45.548Z] /home/sftnight/build/workspace/root-pullrequests-build/build/etc/cling/Interpreter/Value.h:93:41: error: use of undeclared identifier 'std' ; - [2022-12-28T08:32:45.548Z] /home/sftnight/build/workspace/root-pullrequests-build/build/etc/cling/Interpreter/Value.h:93:55: error: expected ',' or '&gt;' in template-parameter-list ; - [2022-12-28T08:32:45.548Z] /home/sftnight/build/workspace/root-pullrequests-build/build/etc/cling/Interpreter/Value.h:93:75: error: no type named 'value' in the global namespace; did you mean 'Value'? ; - [2022-12-28T08:32:45.548Z] /home/sftnight/build/workspace/root-pullrequests-build/build/etc/cling/Interpreter/Value.h:93:82: error: expected member name or ';' after declaration specifiers . And 30 more. ### Warnings:; - [2022-12-28T08:32:20.829Z] /home/sftnight/build/workspace/root-pullrequests-build/root/net/rpdutils/src/rpdutils.cxx:422:54: warning: using value of simple assignment with ‘volatile’-qualified left operand is deprecated [-Wvolatile] ; - [2022-12-28T08:32:21.099Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:4040:42: warning: bitwise operation between different enumeration types ‘TSystem::EAclicProperties’ and ‘TObject::&lt;unnamed enum&gt;’ is deprecated [-Wdeprecated-enum-enum-conversion] ; - [2022-12-28T08:32:21.099Z] /home/sftnight/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:4042:43: warning: bitwise operation between different enumeration types ‘TSystem::EAclicProperties’ and ‘TObject::&lt;unnamed enum&gt;’ is deprecated [-Wdeprecated-enum-enum-conversion]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11874#issuecomment-1366467620:2230,simpl,simple,2230,https://root.cern,https://github.com/root-project/root/pull/11874#issuecomment-1366467620,2,['simpl'],['simple']
Usability,"nt by valgrind when checked the reproducer in the commit message:; ```; Conditional jump or move depends on uninitialised value(s); at 0x402E09: TStorage::UpdateIsOnHeap(unsigned int const volatile&, unsigned int volatile&) (TStorage.h:132); by 0x501B33D: TDirectory::TDirectory() (in /usr/lib64/root/libCore.so.6.26.10); by 0x5816D81: TDirectoryFile::TDirectoryFile() (in /usr/lib64/root/libRIO.so.6.26.10); by 0x5833AF8: TFile::TFile(char const*, char const*, char const*, int) (in /usr/lib64/root/libRIO.so.6.26.10); by 0xE2D86A6: TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (in /usr/lib64/root/libCling.so.6.26.10); by 0xE2D9A17: TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,; allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) (in /usr/lib64/root/libCling.so.6.26.10); by 0x4FF098E: TROOT::InitInterpreter() (in /usr/lib64/root/libCore.so.6.26.10); by 0x4FF0C9E: ROOT::Internal::GetROOT2() (in /usr/lib64/root/libCore.so.6.26.10); by 0x510209C: ROOT::TGenericClassInfo::GetClass() (in /usr/lib64/root/libCore.so.6.26.10); by 0x90B67CA: TFoamCell::Class() (in /usr/lib64/root/libFoam.so.6.26.10); by 0x504BE7A: TRef::operator=(TObject*) (in /usr/lib64/root/libCore.so.6.26.10); by 0x90B126F: TFoamCell::Fill(int, TFoamCell*, TFoamCell*, TFoamCell*) (in /usr/lib64/root/libFoam.so.6.26.10); Uninitialised value was created by a stack allocation; at 0xE2D8106: TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (in /usr/lib64/root/libCling.so.6.26.10); ```. This made me think that maybe TRef is the problem, and indeed replacind the TRef with simple indices solved the problem. Is there something that you can make of that valgrind output maybe?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12061#issuecomment-1397463096:2188,simpl,simple,2188,https://root.cern,https://github.com/root-project/root/pull/12061#issuecomment-1397463096,2,['simpl'],['simple']
Usability,"o store these indexes in the trees when they are produced? If not, currently you have three possible solutions that I can think of:. - calculate the index from the value of `rdfentry_`, knowing how many entries are in each tree and their ordering inside the TChain; - store some unique identifier in each tree when it's produced (even a timestamp works, and although it's not elegant you don't have to worry about having that same value stored in each event because it will compress almost perfectly, occupying very little extra space on disk). With that unique identifier per tree you can build another tree that serves as a lookup table between id and index. It will have two branches, `id` and `index`, with the first taking the values of the ids of each tree and the second being an index from 0 to nTrees-1. Then you can use `TTree::BuildIndex` and `TChain::AddFriend` to add that lookup table tree as a friend of the original chain and thanks to `BuildIndex` the correct value of `index` will be returned for each event depending on the value of `id` in the original chain. More info at https://root.cern/manual/trees/#indexing-trees; - do a pass on each input tree to calculate whatever other quantities you need to calculate (let's call these trees `aux1`, `aux2` etc.), then make a TChain out of the original trees, another TChain out of the `aux` trees, and then add the second chain as a friend of the first (effectively creating a single large ""virtual"" TTree with everything in it). The simplest solution: with the upcoming `DefinePerSample` method you can solve this more easily, but the feature will only be merged in ROOT master in a few days ([PR here](https://github.com/root-project/root/pull/8841)). With `DefinePerSample` you could write something like this:. ```cpp; df.DefinePerSample(""index"", ""GetIndex(rdfsampleinfo_.AsString())""); ```. where `rdfsampleinfo_.AsString()` will be of the form `<filename>/<treename>`. I expect to merge this feature in master today or tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9030#issuecomment-929346153:1838,simpl,simplest,1838,https://root.cern,https://github.com/root-project/root/issues/9030#issuecomment-929346153,2,['simpl'],['simplest']
Usability,"o use instead of ""groups"" (dataset is probably best). I see there are these two schools of thought but I cannot grasp how much of the community leans towards one vs the other. Do you think we should poll the larger audience at some point, for this and probably other questions? One other option could be just accepting both ""datasets"" and ""samples"" as the top-level key in the JSON object. > Cover TTree but plan for RNTuple support (metadata should not care about file formats, your program does). Indeed, this point was more directed towards us developers rather than user-facing. Metadata will definitely be orthogonal to the data format. > Allowing them opens up many possibilities, including mixed modes and joins across rather heterogenous datasets. This is an interesting comment, something that I hadn't put too much thought into. I think that it is much related with the other comment regarding joins. Mixed modes sounds intriguing although I can't see a clear path for its implementation in the I/O layer, rather we may be better off doing this at the analysis tool layer directly. In general, the usecase of reading the output of some ML pipeline during the execution of the analysis is definitely something we want to address. For what concerns this specification, the easy part is just deciding for something more generic than ""treenames"" when specifying these other data formats; the trickier part is deciding how these other input data should be read. See the next comment for more discussion about this. > The more general term for this is a a join, and I think you should use that concept here rather than the precise concept of friends in TTree/RNtuple. Yes I agree we can describe adding more columns to the main dataset as a join, with the implicit but crucial clarification that it is a view on the join operation and not a concrete join operation that would involve copying the two operands. With this sense, a friend TTree is equivalent to a left join where both unique IDs corr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11624#issuecomment-1297411993:1316,clear,clear,1316,https://root.cern,https://github.com/root-project/root/issues/11624#issuecomment-1297411993,2,['clear'],['clear']
Usability,"ok, I have figured it out, it's because of; >0x01 	64 	Index64 	Mother columns of (nested) collections, counting is relative to the cluster; 0x02 	32 	Index32 	Mother columns of (nested) collections, counting is relative to the cluster. specifically, ""counting is relative to the cluster"" was not clear to me. But what it means is, if you have 2 pages of `Index64` for a column in this cluster, after ""de-split encoding"" you will get these two arrays:. ```julia; first page: [30, 4, 18, 14, 5, 8, 10, 7, 8, 18, ..., 22, 1, 16, 14, 14, 12, 4, 7, 15, 24]; first page after cumsum: [..., 81317, 81318, 81334, 81348, 81362, 81374, 81378, 81385, 81400, 81424]. second page: [81428, 13, 9, 7, 5, 20, 21, 4, 8, 6, ..., 128487, 128505, 128513, 128527, 128543, 128549, 128557, 128564, 128575, 128584]; ``` . you can see that the second page doesn't start with 4, instead, it starts with a huge number `81428`. I guess it means index pages are to be interpreted individually within the cluster.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14949#issuecomment-1999929430:297,clear,clear,297,https://root.cern,https://github.com/root-project/root/issues/14949#issuecomment-1999929430,2,['clear'],['clear']
Usability,"onda` libzmq build (which I was using in my dev setup) had a more favorable configuration than for instance most Linux native builds, especially because those native builds lack CMake configuration files. That latter fact made me decide to just make the built-in dependency the default; this way I wouldn't have to figure out how to best detect libzmq on each platform (or find / cobble together a good and freely licensed FindZeroMQ.cmake, but the general feeling around the ZeroMQ community is that this is a waste of effort, because the CMake config files that come along with libzmq itself already solve this finding problem; it's just unfortunate that the Linux distro's won't include them...). So in the end, because of time constraints, I made the choice to prioritize other things over putting a lot of effort into this dependency which will probably end up different in the near future anyway (because of the ppoll PR, which will make things a lot easier on the ROOT side). So, long story, I hope it is clear. Do you think that given this (temporary) situation, the choice for built-in only is acceptable?. Then about the RooFitZMQ option: agreed, I should add an option for that. The only catch is that this PR is part of a bigger series and the ""real"" end-product that should be optional in my opinion is RooFit::MultiProcess, so I wanted to wait with such an option until that PR (hopefully I'll be able to submit that one today). In this PR, RooFitZMQ is not used for anything and later on it will just be a library for RooFit::MultiProcess as well, so there would typically not really be a point for a user to want to build RooFitZMQ but not RooFit::MultiProcess. Do you think in this situation it makes sense to add the option for RooFitZMQ already or should I just do it for RooFit::MultiProcess? So, this option (say `-Droofit_multiprocess=ON`) would activate both RooFit::MultiProcess and RooFitZMQ, and also builtin_zeromq. I think that fail-on-missing is only relevant in case the",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8385#issuecomment-870411730:1875,clear,clear,1875,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-870411730,2,['clear'],['clear']
Usability,"onsistentType); // throwing exceptions from jitted code cause problems on windows and MacOS+M1; #if !defined(_MSC_VER) || defined(R__ENABLE_BROKEN_WIN_TESTS); #if !(defined(R__MACOSX) && defined(__arm64__)); -TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted); +TEST_P(RDFVary, RequireVariationsHaveConsistentTypeJitted); {; // non-jitted Define, jitted Vary with incompatible type; auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1.f; });; @@ -196,7 +196,7 @@ TEST(RDFVary, RequireVariationsHaveConsistentTypeJitted); #endif; #endif; ; -TEST(RDFVary, RequireReturnTypeIsRVec); +TEST_P(RDFVary, RequireReturnTypeIsRVec); {; auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });; EXPECT_THROW(; @@ -209,7 +209,7 @@ TEST(RDFVary, RequireReturnTypeIsRVec); std::runtime_error);; }; ; -TEST(RDFVary, RequireNVariationsIsConsistent); +TEST_P(RDFVary, RequireNVariationsIsConsistent); {; auto df = ROOT::RDataFrame(10).Define(""x"", [] { return 1; });; auto s = df.Vary(""x"", SimpleVariation, {}, /*wrong=*/3).Sum<int>(""x"");; @@ -231,10 +231,14 @@ TEST(RDFVary, RequireNVariationsIsConsistent); std::runtime_error);; ; std::cerr.rdbuf(oldCerrStreamBuf);; - EXPECT_EQ(strCerr.str(), ""RDataFrame::Run: event loop was interrupted\n"");; + std::string msg;; + const auto nRepetitions = GetParam() ? std::min(4u, std::thread::hardware_concurrency()) : 1u;; + for (auto i = 0u; i < nRepetitions; ++i); + msg += ""RDataFrame::Run: event loop was interrupted\n"";; + EXPECT_EQ(strCerr.str(), msg);; }; ; -TEST(RDFVary, VariationsForDoesNotTriggerRun); +TEST_P(RDFVary, VariationsForDoesNotTriggerRun); {; ROOT::RDataFrame df(10);; auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");; @@ -242,7 +246,7 @@ TEST(RDFVary, VariationsForDoesNotTriggerRun); EXPECT_EQ(df.GetNRuns(), 0);; }; ; -TEST(RDFVary, VariationsForWithNoVariations); +TEST_P(RDFVary, VariationsForWithNoVariations); {; ROOT::RDataFrame df(10);; auto h = df.Define(""x"", [] { return 1; }).Histo1D<int>(""x"");; @@ -250,7 +254,7 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10715#issuecomment-1150873429:2110,Simpl,SimpleVariation,2110,https://root.cern,https://github.com/root-project/root/pull/10715#issuecomment-1150873429,1,['Simpl'],['SimpleVariation']
Usability,oottest_cling_other_assertDirWithParen/); - [projectroot.roottest.cling.staticinit.ROOT-10426.roottest_cling_staticinit_ROOT_10426_ROOT_10426](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/149178/testReport/projectroot.roottest.cling.staticinit/ROOT-10426/roottest_cling_staticinit_ROOT_10426_ROOT_10426/); - [projectroot.roottest.python.cling.roottest_python_cling_api](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/149178/testReport/projectroot.roottest.python/cling/roottest_python_cling_api/); - [projectroot.roottest.python.cling.roottest_python_cling_class](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/149178/testReport/projectroot.roottest.python/cling/roottest_python_cling_class/); - [projectroot.roottest.python.cpp.roottest_python_cpp_advanced](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/149178/testReport/projectroot.roottest.python/cpp/roottest_python_cpp_advanced/); - [projectroot.roottest.root.meta.roottest_root_meta_execUnloading_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/149178/testReport/projectroot.roottest.root/meta/roottest_root_meta_execUnloading_auto/); - [projectroot.roottest.root.aclic.load.roottest_root_aclic_load_reload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/149178/testReport/projectroot.roottest.root.aclic/load/roottest_root_aclic_load_reload/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/149178/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.addresses.roottest_root_tree_addresses_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/149178/testReport/projectroot.roottest.root.tree/addresses/roottest_root_tree_addresses_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1175116758:2544,simpl,simple,2544,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1175116758,4,['simpl'],['simple']
Usability,or simply delete the testfile on the server :-),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8292#issuecomment-872039777:3,simpl,simply,3,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-872039777,2,['simpl'],['simply']
Usability,"ort`, `int16_t`, `uint16_t`, `int`, `unsigned int`, `long`, `unsigned long`, `long long`, and `unsigned long long` to try. Sure, let's do `str` to `const char*`, but that won't work for `std::string&`, and `std::string` usage is more common. But ah, what about `wchar_t`, `char16_t`, `char32_t`, `std::wstring`?. Collections, sure, but what if instead I have a tuple or list on the Python side and the template expects some STL container? Then it can not just be that STL container of say `T*`, but also the STL container of pointer any of the base classes, or worse, a mix thereof. And what if the tuple isn't actually targeting a container, but is an initalizer_list? There is often no (relevant) type information available at that point in Python, but many cases can still be resolved b/c the C++ side has some hints. For example `template<typename T, int N> void func(const std::array<T, N>&)` being given a Python tuple `(1, 2, 3)`. Absolutely clear what needs to be done for the conversion to work, but otherwise yet another case to add to the combinatorics. The above, current, situation is very much ""eeew"" and ""might not like the result."" It has also reached its breaking point, as you can see from the open bug reports and the constant hacking on workarounds. I appreciate that for the old PyROOT no-one actually seriously used templates, as folks avoided it in their interfaces b/c of non-support in the CINT world. The only client with moderately interesting templates would be RDataFrame. But in the real world, folks write modern C++ and template usage is much more pervasive. Just last week, I was looking at a massive series of variadically templated constructors: each peeled of an argument to eventually initialize a grand total of 3 data members. It was just a struct with an `unsigned int`, a `double`, and an `std::array<double, 3>`. The point of the whole set of constructors being that you can use initializer syntax with the data member in every order, either the ""naked"" types",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6393#issuecomment-696889449:2062,clear,clear,2062,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-696889449,2,['clear'],['clear']
Usability,"other compression algorithms already do this,. Indeed. The diffs was made less obvious because:; ZLIB decompression is already doing the right thing.; ZLIB and LZMA use a struct to pass the configuration rather than function argument so the code pattern is slight different.; ; > it seems that all existing code paths in TKey.cxx, TBufferXML.cxx, TMessage.cxx, and TBasket.cxx allocate a buffer that is slightly larger, so it's probably not an as critical problem . Right, the allocations is done:; ```; Int_t buflen = TMath::Max(512,fKeylen + fObjlen + 9*nbuffers + 28); //add 28 bytes in case object is placed in a deleted gap; ```; and used via; ```; char *bufcur = &fBuffer[fKeylen];; ```; so the only extra is `9*nbuffers + 28` which reduces the risk of writing the end since the size is larger than `fObjlen + kHeaderSize` but that leaves 2 additional question:; * why are those added?; * why doesn't RNTuple need it?. 01bb6965557fcc63d5d2e535b89f57e025922731 hints that the compression engine were seen as writing past the end ... it is plausible since the prior delta was ``9*nbuffers + 8` with `nbuffers==0` is common case. (in hindsight, this commit was not investigated long enough and needed a test). The `9*nbuffers` is meant to be for the keys and is now inaccurate (most algorithms have a 9 bytes header but for lz4 we have seemingly 73. This part is missing from the `RNTuple` usage. The consequences is that on data set that is not compressible `TTree` might use a bit more space (header + barely compressed size) vs `RNTuple` (uncompressed size which might be less than header + barely compressed size). This of course assume that the compression algorithm strictly respect the limit given (it would be a serious security risk if not). The `8` is commented as ""8 bytes in case object is placed in a deleted gap"" (the 20 was seemingly added to work-around the bug fixed here) ~and is not clear to me (the 'delete gap' is most likely talking about a space 'freed' inside a ROOT file.~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14523#issuecomment-1932803605:1968,clear,clear,1968,https://root.cern,https://github.com/root-project/root/pull/14523#issuecomment-1932803605,2,['clear'],['clear']
Usability,"ould they go to a new subpackage of RooFit?. All YML/JSON-related things would best go into something that can be switched on/off based on the availability of YML/JSON. Something like `roofit/YMLFactory`?; > code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting?. I didn't really check that. Maybe we do this when there's a bit less noise after splitting off the const-ness fixes and interface changes.; > build system: Is the way I encoded the optional dependency acceptable?. I don't know. @oshadura? @Axel-Naumann ?; > class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant?. As long as classes and function names say what these things do, you have quite some freedom. Maybe just check whether the surrounding code capitalises functions or not. > Please don't review yet:; > ; > lack of functionality - more things will be added over time; > individual violations of the style guide (e.g. missing spaces or newlines). Sure, NP. > Please specifically suggest where documenation should be added!; > Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code?. It would be good if every function and class had documentation. They are best placed in the implementation like in; https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html. Header-only functions can have small docstrings in the header. The class documentation should explain what the class does, maybe give examples of how to use it. The function documentation should at least say what the function does, what kind of inputs it needs, and what it outputs.; An a-bit-too-long example is:; https://root.cern.ch/doc/master/RooAbsPdf_8cxx_source.html#l01255. **EDIT**:; Oh, and the f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5151#issuecomment-598765709:1432,guid,guide,1432,https://root.cern,https://github.com/root-project/root/pull/5151#issuecomment-598765709,2,['guid'],['guide']
Usability,"ound than they should be maintained and improved occasionally. Of course maintenance takes resources. And I know that nobody ever has time to do it. But leaving everything as is in the face of possible improvements also has a cost that we pay be doing nothing. For this particular PR, if I jump into a header file, I do not know which methods are overriding something from a base class. But this knowledge helps me when reading new code. Now I pay the cost for having to look this information up in the inheritance hierarchy. In recent years we are lucky enough to even have automatic refactoring tools. They are far from perfect. But they are good. And applying them has very little cost for a moderate benefit. So I think at least those automatic refactorings should be applied to old code. Regular manual refactoring of production code would be even better, but I know I live in a dream world here ;). There is also the broken window theory, stating that code with bad quality encourages people working on it to also tolerate new code to be bad. I just started here in ROOT and I already heard from a few people that ROOT code is bad and I should have low expectations. So if we would improve the old code just a little we could also improve this mindset by a bit 👍 . So please consider to apply at least automatic refactorings!. > We cannot merge this as is. @bernhardmgruber what do you want to do with this? Can we close this, discuss, and then do what we converged on? I don't think this ""monster PR"" :-) will survive without conflicts for long, and it still needs a ton of work. @hageboeck mentioned somewhere to me that he would prefer to have smaller PRs just targeting subparts of ROOT, even if the changes are simple/automatic. I guess I could break up the PR into smaller pieces. And maybe just focus on the parts I am involved with the most. However, I would like to see clang-tidy checks enabled on the entire code at some point. So we can raise the quality bar just a little bit more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6007#issuecomment-669905387:2601,simpl,simple,2601,https://root.cern,https://github.com/root-project/root/pull/6007#issuecomment-669905387,2,['simpl'],['simple']
Usability,"our message seems to suggest that it's only with GCC11 headers); > ; > * the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`; > ; > ; > In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?); > ; > But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me). This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the experimental/string_view header file). I am not sure if pasting a diagnostic from a random system makes this clearer in any form. I agree with you this should have be 1 min review fixing an important failure that we introduced with the c++20 support and some of the new releases of maybe libstdc++. @pcanal I find pasting errors in the logs a bad practice, especially when it obfuscates the real fix. Can you suggest a commit message which adds enough information which makes me happy as well?. In general it is a bit unfortunate how the whole review went for this PR. This should been just a simple ""approve"" as I thought we needed a quick fix which I developed in between travels and a business trip... I suspect this would help me define urgent/important in similar circumstances in future...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12276#issuecomment-1430019305:1730,simpl,simply,1730,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430019305,6,"['clear', 'simpl']","['clearer', 'simple', 'simply']"
Usability,ovarianceSqueeze.h Minuit2/MnCross.h Minuit2/MnEigen.h Minuit2/MnFcn.h Minuit2/MnFumiliMinimize.h Minuit2/MnFunctionCross.h Minuit2/MnGlobalCorrelationCoeff.h Minuit2/MnHesse.h Minuit2/MnLineSearch.h Minuit2/MnMachinePrecision.h Minuit2/MnMatrix.h Minuit2/MnMigrad.h Minuit2/MnMinimize.h Minuit2/MnMinos.h Minuit2/MnParabola.h Minuit2/MnParabolaFactory.h Minuit2/MnParabolaPoint.h Minuit2/MnParameterScan.h Minuit2/MnPlot.h Minuit2/MnPosDef.h Minuit2/MnPrint.h Minuit2/MnRefCountedPointer.h Minuit2/MnReferenceCounter.h Minuit2/MnScan.h Minuit2/MnSeedGenerator.h Minuit2/MnSimplex.h Minuit2/MnStrategy.h Minuit2/MnTiny.h Minuit2/MnTraceObject.h Minuit2/MnUserCovariance.h Minuit2/MnUserFcn.h Minuit2/MnUserParameterState.h Minuit2/MnUserParameters.h Minuit2/MnUserTransformation.h Minuit2/MnVectorTransform.h Minuit2/ModularFunctionMinimizer.h Minuit2/NegativeG2LineSearch.h Minuit2/Numerical2PGradientCalculator.h Minuit2/ParametricFunction.h Minuit2/ScanBuilder.h Minuit2/ScanMinimizer.h Minuit2/SimplexBuilder.h Minuit2/SimplexMinimizer.h Minuit2/SimplexParameters.h Minuit2/SimplexSeedGenerator.h Minuit2/SinParameterTransformation.h Minuit2/SqrtLowParameterTransformation.h Minuit2/SqrtUpParameterTransformation.h Minuit2/StackAllocator.h Minuit2/VariableMetricBuilder.h Minuit2/VariableMetricEDMEstimator.h Minuit2/VariableMetricMinimizer.h Minuit2/VectorOuterProduct.h TMinuit2TraceObject.h /mnt/build/workspace/root-pullrequests-build/root/math/minuit2/inc/LinkDef.h ; - [2020-10-25T10:36:13.979Z] /mnt/build/workspace/root-pullrequests-build/build/include/Minuit2/MnPrint.h:130:69: error: use of undeclared identifier 't' ; - [2020-10-25T10:36:13.979Z] /mnt/build/workspace/root-pullrequests-build/build/include/Minuit2/MnPrint.h:132:24: error: no member named 'Warning' in 'ROOT::Minuit2::MnPrintLevel' ; - [2020-10-25T10:36:13.979Z] /mnt/build/workspace/root-pullrequests-build/build/include/Minuit2/MnPrint.h:133:71: error: use of undeclared identifier 't' ; - [2020-10-25T10:36:13.979Z] /,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6705#issuecomment-716125314:5183,Simpl,SimplexBuilder,5183,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-716125314,1,['Simpl'],['SimplexBuilder']
Usability,"qqqqqqq : abort process; .which [file] : show path of macro file; .![OS_command] : execute OS-specific shell command; .!root -? : print ROOT usage (CLI options); ```. ```; root [1] .? edit. ROOT terminal keyboard shortcuts (GNU-readline style).; ==============================================================================; Arrow_Left : move cursor left [Ctrl+B]; Arrow_Right : move cursor right [Ctrl+F] [Ctrl+G]; Home : move cursor to beginning of line [Ctrl+A]; End : move cursor to end of line [Ctrl+E]; Ctrl+Arrow_Left : jump to previous word [Esc,B] [Alt,B]; Ctrl+Arrow_Right : jump to next word [Esc,F] [Alt,F]; Backspace : delete previous character [Ctrl+H]; Del : delete next character [Ctrl+D]; Esc,Backspace : delete previous word [Ctrl+W] [Esc,Ctrl+H] [Alt+Backspace] [Esc,Del] [Esc,Ctrl+Del]; Ctrl+Del : delete next word [Esc,D] [Alt,D]; Ctrl+U : cut all characters between cursor and start of line; Ctrl+K : cut all characters between cursor and end of line; Ctrl+T : transpose characters; Esc,C : character to upper and jump to next word; Esc,L : word to lower case and jump to its end; Esc,U : word to upper case and jump to its end; Ctrl+Shift+C : copy clipboard content; Ctrl+Shift+V : paste clipboard content [Ctrl+Y] [Alt+Y]; Ins : toggle overwrite mode; Ctrl+_ : undo last keypress action; Tab : autocomplete command or print suggestions [Ctrl+I] [Esc,Tab]; Enter : execute command [Ctrl+J] [Ctrl+M]; Ctrl+L : clear prompt screen; Ctrl+D : quit ROOT (if empty line); Ctrl+C : send kSigInt interrupt signal; Ctrl+Z : send kSigStop pause job signal; Arrow_Down : navigate downwards in command history [Ctrl+N]; Arrow_Up : navigate upwards in command history [Ctrl+P]; Ctrl+R ; Ctrl+S : search command in your history by typing a string.; Use Backspace if you mistyped (but not arrows).; Press Ctrl+R (Ctrl+S) repeateadly to navigate matches in reverse (forward) order; Arrow_Right : after Ctrl+R (Ctrl+S), select current match of the history search; [Ctrl+O] [Enter] [Ctrl+J] [Ctr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10121#issuecomment-1084927674:4968,undo,undo,4968,https://root.cern,https://github.com/root-project/root/pull/10121#issuecomment-1084927674,6,"['clear', 'pause', 'undo']","['clear', 'pause', 'undo']"
Usability,"r TTree but plan for RNTuple support (metadata should not care about file formats, your program does); * Should support friend trees per group *** (see below); * Should support entry ranges per group (why? this makes little operational sense from the POV of an analyst); * No indexed friend trees (at least for now) *** (also); """"""; This specification of requirements mixes things that are describing the data (metadata) and and how to react to it (something in a program, not part of the schema). I believe a clean factorization along these lines is very important to creating a well-adopted schema if you intend to develop a standard. As to files - it is not very common but people do use parquet or hdf5 in analysis. Removing those formats as concepts to describe a dataset is rather limiting. Allowing them opens up many possibilities, including mixed modes and joins across rather heterogenous datasets. This can make things much easier in the case that, for instance, some random machine learning tool cannot output root files but can produce some other usefully structured data format. . *** - The more general term for this is a a join, and I think you should use that concept here rather than the precise concept of friends in TTree/RNtuple, which is limiting in scope for what is possible for dataset augmentation. Moreover, this allows the definition of left/right/inner/outer joins at the metadata level which is extremely useful for understanding how that additional data is intended to be used (are you just augmenting the number of columns in the dataset, are you x-referencing two datasets, etc.). It is then up to the system ingesting this data to implement the join specified by the user correctly (which can be tested for). For the second *** reference, this is also a restriction of your program, not the metadata, an error should be thrown by whatever is executing and cannot handle a case rather than restricting concepts for describing a dataset. Furthermore, going to joins as",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11624#issuecomment-1293743624:2368,learn,learning,2368,https://root.cern,https://github.com/root-project/root/issues/11624#issuecomment-1293743624,2,['learn'],['learning']
Usability,"rc::LegacyRTDyldObjectLinkingLayer::LegacyRTDyldObjectLinkingLayer(llvm::orc::ExecutionSession&, llvm::orc::LegacyRTDyldObjectLinkingLayer::ResourcesGetter, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyLoadedFtor, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyFinalizedFtor, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyFreedFtor)’ is deprecated (declared at /data/sftnight/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:356) [-Wdeprecated-declarations] ; - [2020-09-27T10:44:21.421Z] /data/sftnight/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp:344:33: warning: ‘llvm::orc::LegacyIRCompileLayer&lt;BaseLayerT, CompileFtor&gt;::LegacyIRCompileLayer(BaseLayerT&, CompileFtor, llvm::orc::LegacyIRCompileLayer&lt;BaseLayerT, CompileFtor&gt;::NotifyCompiledCallback) [with BaseLayerT = cling::IncrementalJIT::RemovableObjectLinkingLayer; CompileFtor = llvm::orc::SimpleCompiler; llvm::orc::LegacyIRCompileLayer&lt;BaseLayerT, CompileFtor&gt;::NotifyCompiledCallback = std::function&lt;void(long unsigned int, std::unique_ptr&lt;llvm::Module&gt;)&gt;]’ is deprecated (declared at /data/sftnight/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/IRCompileLayer.h:136) [-Wdeprecated-declarations] ; - [2020-09-27T10:44:21.421Z] /data/sftnight/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp:344:33: warning: ‘llvm::orc::LazyEmittingLayer&lt;BaseLayerT&gt;::LazyEmittingLayer(BaseLayerT&) [with BaseLayerT = llvm::orc::LegacyIRCompileLayer&lt;cling::IncrementalJIT::RemovableObjectLinkingLayer, llvm::orc::SimpleCompiler&gt;]’ is deprecated (declared at /data/sftnight/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/LazyEmittingLayer.h:265) [-Wdeprecated-declarations] ; - [2020-09-27T10:44:21.421Z] /data/sftnight/workspace/root-pullrequests-bu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-699618396:2830,Simpl,SimpleCompiler,2830,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-699618396,1,['Simpl'],['SimpleCompiler']
Usability,"re broken?. > I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like?. > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that?. > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole?. > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understandings, but have explained the use case a few times now and **3** will explicitly break that as well as provide bizarre default behavior:. > libc++.so, libA.so; > libA.so defines an overload for global operator new/delete; > ; > ```; > DynamicLibrary::getPermanentLibrary(NULL); > // Other code; > DynamicLibrary::getPermanentLibrary(""libA.so""); > ```; > In your scheme the JIT can pull operator new/delete from libA.so, and worse is that whether it pulls operator new/delete from libA.so is dependent on whether operator new/delete has been resolved in **// Other code** before libA.so has been loaded.; > . The example can be expanded to RTTI information, exceptions, and a host of other problems.; And even worse than that is that in your scheme there is no way of hiding symbols from the global scope, in fact it promotes everything that the user reasonably expected to be private ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/744#issuecomment-313799028:1894,clear,clear,1894,https://root.cern,https://github.com/root-project/root/pull/744#issuecomment-313799028,1,['clear'],['clear']
Usability,"rely on the nightlies to catch any portability issues. That's a very poor approach b/c your matrix is necessarily limited given the enormous number of possible combinations. (That's another way of saying it's carefully selected.). I don't actually know if all those Linux systems are SLC, but did note for example that the build failed on SuSE Tumbleweed with gcc9, b/c SuSE does not install TBB by default to go with that compiler, and the build was missing headers as a consequence. So I do strongly suspects a lot of conformity in distros there. As-is, this approach of trying it, see if it fails, and if it doesn't fail declare it ""portable"" is exactly what causes folks to still cast pointers to long, for example. This would never happen if code was written with portability in mind from the get-go. But your closer exemplifies that even better: given the choice between *potential* scaling problems and *guaranteed* portability problems, you choose to accept the latter. Clearly, portability isn't high on your list. Portability is, however, very important. By providing a portable solution that works well within other environments, cppyy is now being used on large code bases in mathematics, chemistry, and biology. That work uncovers errors even deep inside Cling, because it is pushed harder and used differently than in the CINT-tamed HEP world. Here is a current problem I'm working on for example. Try it in ROOT master, and watch memory consumption grow with top or whatever:. ```; $ root -l -b; root [0] template <class T, class U> class __gmp_expr;; root [1] typedef struct{ } __mpz_struct;; root [2] typedef __gmp_expr<__mpz_struct[1],__mpz_struct[1]> mpz_class;; root [3] for (;;) gInterpreter->ClassInfo_IsEnum(""std::vector<mpz_class>::value_type""); ```. That leak occurs when `findScope` in the LookupHelper starts parsing whenever `quickFindDecl()` fails (it's nothing to do with `mpz_class` or `ClassInfo_IsEnum` per se, just that that's where it was first found). If `quickFin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6393#issuecomment-707273510:3154,Clear,Clearly,3154,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-707273510,1,['Clear'],['Clearly']
Usability,"rformance-wise and functionality-wise would still work if for the duration of the trials, the state needed to do the matching is kept alive. That was mostly the idea with the code above, but is not how I would solve it today. So, to your points:. No, it does not need to be instantiated first. For example, if I know that a _potential_ match has a signature of `T*`, then I'm not going to ask it to match `T&`, so even before instantiation, the lookup has useful information. Right now, CPyCppyy loops over each, so will eventually match if all types are by-pointer or all are by reference, but that fails combinations. Another good case is knowing which arguments are based on template parameters and which are not, so that the non-template ones need not be varied. No, on the Python side it is fair game to provide the template arguments, and thus non-ADL happens, too. E.g. all int types are equivalent as far as Python is concerned, and although CPyCppyy will increase the template int argument if it has an argument value larger than will fit, it is not uncommon for Python users to simply fill in `int64_t` or whatever. In fact, as-is, if the prototype lookup, ie. argument dependent, fails, CPyCppyy will assume that we're dealing with the common case where all argument types are template parameters. (It's a human thing to make that order consistent, which is why it works quite often, but it is not a language requirement/guarantee.) It then asks for the full name in a non-ADL manner. ROOT/meta (lookupHelper, I think) does not even support friends, so no worries there. Whether you think it is ""eeew"" or not is irrelevant. That's highly a technical term. What is relevant is that just before the lookupHelper does a `BestViableFunction()` it has a `OverloadCandidateSet` and I can do a much better job finding my own match than can do Sema, b/c the rules to apply aren't exactly the C++ ones (the only ones that Sema knows). Unfortunately, I can't just return the set, as it's deep in the ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6393#issuecomment-696817778:1090,simpl,simply,1090,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-696817778,2,['simpl'],['simply']
Usability,"rguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons.; > ; > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ?. I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. The implementation does not require clang interfac",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6644#issuecomment-713756223:1182,simpl,simple,1182,https://root.cern,https://github.com/root-project/root/issues/6644#issuecomment-713756223,2,['simpl'],['simple']
Usability,"rn.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/151341/console).; ### Errors:; - [2022-08-05T22:57:53.738Z] FAILED: tree/dataframe/test/CMakeFiles/dataframe_vary.dir/dataframe_vary.cxx.o ; - [2022-08-05T22:57:53.995Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:507:49: error: call to non-constexpr function ‘ROOT::Internal::RDF::FillHelper&lt;HIST&gt;::Exec(unsigned int, const Xs& ...)::&lt;lambda(const auto:2&)&gt; [with auto:2 = std::array&lt;bool, 1&gt;; Xs = {ROOT::VecOps::RVec&lt;int&gt;}; typename std::enable_if&lt;ROOT::Internal::RDF::Disjunction&lt;ROOT::Internal::RDF::IsDataContainer&lt;ValTypes&gt;...&gt;::value, int&gt;::type &lt;anonymous&gt; = 0; HIST = TH1D]’ ; - [2022-08-05T22:57:53.995Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:498:44: error: the value of ‘i’ is not usable in a constant expression ; - [2022-08-05T22:57:53.995Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:512:58: error: no matching function for call to ‘GetNthElement&lt;colidx&gt;(const ROOT::VecOps::RVec&lt;int&gt;&)’ ; - [2022-08-05T22:57:54.253Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:507:49: error: call to non-constexpr function ‘ROOT::Internal::RDF::FillHelper&lt;HIST&gt;::Exec(unsigned int, const Xs& ...)::&lt;lambda(const auto:2&)&gt; [with auto:2 = std::array&lt;bool, 3&gt;; Xs = {ROOT::VecOps::RVec&lt;int&gt;, ROOT::VecOps::RVec&lt;int&gt;, ROOT::VecOps::RVec&lt;int&gt;}; typename std::enable_if&lt;ROOT::Internal::RDF::Disjunction&lt;ROOT::Internal::RDF::IsDataContainer&lt;ValTypes&gt;...&gt;::value, int&gt;::type &lt;anonymous&gt; = 0; HIST = TProfile2D]’ ; - [2022-08-05T22:57:54.253Z] /mnt/build/workspace/root-pullrequests-build/root/tree/dataframe/inc/ROOT/RDF/ActionHel",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11127#issuecomment-1207076516:1070,usab,usable,1070,https://root.cern,https://github.com/root-project/root/pull/11127#issuecomment-1207076516,2,['usab'],['usable']
Usability,roottest.python are actual errors (now).; roottest_cling_functionTemplate_testcint is likely fixed by fixing roottest.python.; roottest_cling_functionTemplate_cintrun needs simply an updated ref file.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3858#issuecomment-495648191:173,simpl,simply,173,https://root.cern,https://github.com/root-project/root/pull/3858#issuecomment-495648191,2,['simpl'],['simply']
Usability,"rotocols, etc. There is increasing amount of papers trying to address how we put C++ modules at scale (https://wg21.link/p2656, https://wg21.link/P2409, https://youtu.be/_LGR0U5Opdg?si=AbLazREvyl5PXVFG). Some papers/talks are more radical claiming that we cannot even roll out modules (as written in the standard) at such scale. . For modules to be useful and work reliably we know that we need to apply modularization bottom up. That means that before modularizing cmssw/art we need everything below starting from libc and libxml to become modular. That's something we observed during our modularization efforts in cmssw (see https://github.com/cms-sw/cmssw/issues/15248). The reasons we cannot make it yet default is discussed here: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627 and here https://github.com/root-project/root/pull/13000 Not surprisingly we have observed similar comments coming from modularization efforts in gcc and msvc. . Let's assume we live in an platonic world where all of the above is resolved. It still seems we will be able to use our dictionary system as it is because we will in the end have a build system that processes textual files to build them. There we could use any custom flavor of modules (or something better) that makes our I/O work. We can go one step further and claim that, even if we introduce strict interface encapsulation via C++ 20 modules, our I/O system would require to know more about the non-exported entities so that we can serialize and deserialize the private dependencies of the exported entities. That is, we will probably end up with a very similar system that we have today. I would personally like to tackle the engineering challenge as you have described. However I believe we are not there yet and any efforts into trying to adapt to a still volatile area would probably cause disturbances in our user base for not yet clear final goal. Does that address/answer the concerns you had when you opened that request?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13536#issuecomment-1693395998:3690,clear,clear,3690,https://root.cern,https://github.com/root-project/root/issues/13536#issuecomment-1693395998,2,['clear'],['clear']
Usability,"sdk; drwxr-xr-x 7 root wheel 224 8 Jun 2023 MacOSX12.3.sdk; lrwxr-xr-x 1 root wheel 14 8 Jun 2023 MacOSX12.sdk -> MacOSX12.3.sdk; drwxr-xr-x 7 root wheel 224 1 May 00:16 MacOSX14.5.sdk; lrwxr-xr-x 1 root wheel 14 17 Sep 17:17 MacOSX14.sdk -> MacOSX14.5.sdk; drwxr-xr-x 7 root wheel 224 21 Aug 17:15 MacOSX15.0.sdk; lrwxr-xr-x 1 root wheel 14 17 Sep 17:16 MacOSX15.sdk -> MacOSX15.0.sdk; sftnight@macphsft31 ~ % clang++ -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin24.0.0; Thread model: posix; InstalledDir: /Library/Developer/CommandLineTools/usr/bin; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/usr/bin/../include/c++/v1""; ""/Library/Developer/CommandLineTools/usr/bin/clang"" -cc1 -triple arm64-apple-macosx15.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/sftnight -resource-dir /Library/Developer/CommandLineTools/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -I/usr/local/include -internal-isystem /Library/Developer/CommandLine",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16494#issuecomment-2373214590:9756,clear,clear-ast-before-backend,9756,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590,2,['clear'],['clear-ast-before-backend']
Usability,"silev Let me clarify the disconnect. The title says ""Add **a** module for experimental/string_view""; The commit says:. That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context. The code says:; ```; module ""experimental/string_view"" {; export *; header ""experimental/algorithm""; }; ```; ; The commit content as-is seems completely unrelated to the commit log as far as I could tell (without doing research on the relationship between `range_base`, `string_view` and `algorithm`.; ; So I pondered whether the fix was the right fix for a problem I did not know anything about ... ; ; The right thing to do would have probably be have been to request a complete explanation of what the original problem was, what was the mechanism leading to the error and why this solution was the best solution. This was obviously much more than this seemingly simple fix required. So instead I thought to ask for a very low cost, straight forward solution: simply copy/pasting the error with no additional effort to explain in detail. > Can you suggest a commit message which adds enough information which makes me happy as well?. That requires to paraphrase the error and add a few more details. ```; That should fix a recent nightly failure with gcc11. The failure presented during dictionary generation in a C++14 and C++17 build and incorrectly complained about needing the 'cplusplus20' feature for the 'std.bits/ranges_base.h' module. The issue was triggered by an inclusion of `<bits/ranges_base.h>` from `string_view`. This issue exists on gcc11 and gcc12 (and I guess any gcc that made changes to libstdc++ and the experimental/string_view header file). . It seems the issue is solved by exporting `algorithm` as part of the `string_view` module.; ```. Actually, I still don't know why adding `algorithm` fixes a problem with `range_base.h`, so I can't add that to the commit ... maybe it is something like ""... by avoiding to use the module maps p",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12276#issuecomment-1430326540:1006,simpl,simply,1006,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1430326540,2,['simpl'],['simply']
Usability,sorry it was not clear to me that you were actually asking for this change. done.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5276#issuecomment-607694511:17,clear,clear,17,https://root.cern,https://github.com/root-project/root/pull/5276#issuecomment-607694511,2,['clear'],['clear']
Usability,"sr/include; /Library/Developer/CommandLineTools/usr/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks (framework directory); End of search list.; # 1 ""/dev/null""; # 1 ""<built-in>"" 1; # 1 ""<built-in>"" 3; # 439 ""<built-in>"" 3; # 1 ""<command line>"" 1; # 1 ""<built-in>"" 2; # 1 ""/dev/null"" 2. sftnight@macphsft31 ~ % clang++ -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin24.0.0; Thread model: posix; InstalledDir: /Library/Developer/CommandLineTools/usr/bin; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/usr/bin/../include/c++/v1""; ""/Library/Developer/CommandLineTools/usr/bin/clang"" -cc1 -triple arm64-apple-macosx15.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/sftnight -resource-dir /Library/Developer/CommandLineTools/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16494#issuecomment-2373214590:13822,clear,clear-ast-before-backend,13822,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590,2,['clear'],['clear-ast-before-backend']
Usability,"sr/include; /Library/Developer/CommandLineTools/usr/include; /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks (framework directory); End of search list.; # 1 ""/dev/null""; # 1 ""<built-in>"" 1; # 1 ""<built-in>"" 3; # 439 ""<built-in>"" 3; # 1 ""<command line>"" 1; # 1 ""<built-in>"" 2; # 1 ""/dev/null"" 2. sftnight@macphsft34 ~ % clang++ -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: arm64-apple-darwin24.1.0; Thread model: posix; InstalledDir: /Library/Developer/CommandLineTools/usr/bin; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/usr/bin/../include/c++/v1""; ""/Library/Developer/CommandLineTools/usr/bin/clang"" -cc1 -triple arm64-apple-macosx15.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=non-leaf -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=1 -fobjc-msgsend-selector-stubs -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu apple-m1 -target-feature +v8.5a -target-feature +aes -target-feature +crc -target-feature +dotprod -target-feature +fp-armv8 -target-feature +fp16fml -target-feature +lse -target-feature +ras -target-feature +rcpc -target-feature +rdm -target-feature +sha2 -target-feature +sha3 -target-feature +neon -target-feature +zcm -target-feature +zcz -target-feature +fullfp16 -target-abi darwinpcs -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/sftnight -resource-dir /Library/Developer/CommandLineTools/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16494#issuecomment-2373214590:22626,clear,clear-ast-before-backend,22626,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590,2,['clear'],['clear-ast-before-backend']
Usability,"st compilers with the same compiler ABI) to compile libA and libB (this is a common behavior), the compiler ABI condition is automatically met. On the other hand, the C++ standard library API is specified by ISO C++, and we can believe that the implementation of the standard library is compatible between different standards. So generally speaking, libA and libB are compatible even if they are compiled by different standards. However, in practice, the sequence of tokens of the same entity in the library may be different between different C++ standards, so the same symbol (such as a function) may correspond to different binaries, which indeed violates the ODR. However, as long as their behaviors are compatible, no matter which version of the linker is selected, there should be no serious problems. In other words, it can be considered that this is only a minor ODR violation, because it does not produce observable effects. The GCC document does not seem to clearly indicate whether compiling with mixed standards would work, but its [ABI policy](https://gcc.gnu.org/onlinedocs/libstdc++/manual/abi.html) seems to imply that this is feasible. In addition, this issue has also been [discussed on StackOverflow](https://stackoverflow.com/questions/46746878/is-it-safe-to-link-c17-c14-and-c11-objects), and the view is that it is feasible to do so. Back to our current issue, ideally, as long as there is no explicit ODR violation in the header file, the only thing left is to ensure ABI compatibility, which should be guaranteed by the compiler. It can be said that if the current `span` implementation of ROOT is compatible with the implementation of the standard library, the problem of mixed standards is not serious, but it is difficult to always guarantee. But as I said, if there is something like `cxx20::span` instead of crashing with the standard library, this issue can be solved from its source. The rest is just the ABI compatibility of this `cxx20::span`, which is guaranteed by t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11311#issuecomment-1254026839:1514,clear,clearly,1514,https://root.cern,https://github.com/root-project/root/pull/11311#issuecomment-1254026839,2,['clear'],['clearly']
Usability,"t in memory; pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes.; pick c25ea30332 Make some clang format changes; pick dae3241bee Fix whitespace; pick baa80f53a4 Fix memory leak; pick a8324c92ee Undo TBranch version change, thanks Philippe.; ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```; pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory; fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory; fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes.; fixup c25ea30332 Make some clang format changes; fixup dae3241bee Fix whitespace; fixup baa80f53a4 Fix memory leak; fixup a8324c92ee Undo TBranch version change, thanks Philippe.; ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```; commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2; Author: Peter van Gemmeren <gemmeren@anl.gov>; Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory; ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```; commit 891b51caa6089e13997e2d2e0aa25f869970e878; Author: Peter van Gemmeren <gemmeren@anl.gov>; Date: Tue Jul 18 17:47:58 2017 -0500. [TBranch] Add new option to help in keeping baskets in memory; ; Set MaxVirtualSize to a negative value causing one cluster of baskets; kept in memory.; ```. The final commit has all the changes combined, and a nice short message and separate long explanation. Let me know if you have an",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/796#issuecomment-317761739:1622,Undo,Undo,1622,https://root.cern,https://github.com/root-project/root/pull/796#issuecomment-317761739,1,['Undo'],['Undo']
Usability,"t my test is based on. So, my next step is to test the CUDA mode with the root version.; > > > ; > > > ; > > > One way to test cling within ROOT would be to get this PR and then configure with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug -Dclingtest=On` and then type `make -j cling` and that should build the cling binary ready to use.; > > ; > > ; > > The root PR does not solve my problem. I looked a little bit in the code with the gdb and found out, where the application crashes. In `IncrementalCUDADeviceCompiler::generatePTX()` the line `llvm::Module* module = m_PTX_interp->getLastTransaction()->getModule();` returns a `nullptr`. But this only happens, if I define a Cuda `__global__` kernel. If use a normal C++ statement, like `int i = 3;` or define a Cuda `__device__` function everything is fine. I'm not sure, if there more cases. @vgvassilev Do you have an idea? Maybe you saw something, which can help me, during your porting work. If not, it is not problem. Then, I simply have to spent more time.; > ; > I found the problem and a possible fix. The problem happens in the Interpreter instance for the device code. In the function `IncrementalExecutor::runStaticInitializersOnce()`, there is the line `llvm::orc::VModuleKey K = emitModule(T.takeModule(), T.getCompilationOpts().OptLevel);`, which removes the `llvm::Module` from the transaction. Because `generatePTX()` is called afterwards, `getLastTransaction->getModule` returns a `nullptr`. At the moment, I don't know, why the device compiler creates a static initializer on the device site. On the host site, it is necessary to register the CUDA kernel. At the moment, my solution is a if-guard in `Interpreter::executeTransaction()`:; > ; > ```c++; > if(!m_Opts.CompilerOpts.CUDADevice); > ExeRes = m_Executor->runStaticInitializersOnce(T);; > ```; > ; > I need to verify, if this is a good solution. That's what I was about to say, now the JIT takes the ownership of the `llvm::Module` and then, once it is done JITing, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-777250984:3891,simpl,simply,3891,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-777250984,2,['simpl'],['simply']
Usability,t/ROOT-10426/roottest_cling_staticinit_ROOT_10426_ROOT_10426/); - [projectroot.roottest.python.cling.roottest_python_cling_api](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/149180/testReport/projectroot.roottest.python/cling/roottest_python_cling_api/); - [projectroot.roottest.python.cling.roottest_python_cling_class](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/149180/testReport/projectroot.roottest.python/cling/roottest_python_cling_class/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_missingBranches](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/149180/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_missingBranches/); - [projectroot.roottest.cling.other.roottest_cling_other_checkMissingSymbolExitCode](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/149180/testReport/projectroot.roottest.cling/other/roottest_cling_other_checkMissingSymbolExitCode/); - [projectroot.roottest.cling.other.roottest_cling_other_assertDirWithParen](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/149180/testReport/projectroot.roottest.cling/other/roottest_cling_other_assertDirWithParen/); - [projectroot.roottest.python.cpp.roottest_python_cpp_advanced](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/149180/testReport/projectroot.roottest.python/cpp/roottest_python_cpp_advanced/); - [projectroot.roottest.root.meta.roottest_root_meta_execUnloading_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/149180/testReport/projectroot.roottest.root/meta/roottest_root_meta_execUnloading_auto/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/149180/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1175163072:2815,simpl,simple,2815,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1175163072,4,['simpl'],['simple']
Usability,"t@macphsft18 ~ % ls -l /Library/Developer/CommandLineTools/SDKs/; total 0; lrwxr-xr-x 1 root wheel 14 19 Sep 13:58 MacOSX.sdk -> MacOSX15.0.sdk; drwxr-xr-x 7 root wheel 224 1 May 00:16 MacOSX14.5.sdk; lrwxr-xr-x 1 root wheel 14 19 Sep 13:57 MacOSX14.sdk -> MacOSX14.5.sdk; drwxr-xr-x 7 root wheel 224 21 Aug 17:15 MacOSX15.0.sdk; lrwxr-xr-x 1 root wheel 14 19 Sep 13:56 MacOSX15.sdk -> MacOSX15.0.sdk; sftnight@macphsft18 ~ % clang++ -x c++ /dev/null -E -v; Apple clang version 16.0.0 (clang-1600.0.26.3); Target: x86_64-apple-darwin23.6.0; Thread model: posix; InstalledDir: /Library/Developer/CommandLineTools/usr/bin; ignoring nonexistent directory ""/Library/Developer/CommandLineTools/usr/bin/../include/c++/v1""; ""/Library/Developer/CommandLineTools/usr/bin/clang"" -cc1 -triple x86_64-apple-macosx14.0.0 -Wundef-prefix=TARGET_OS_ -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -Werror=implicit-function-declaration -E -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name null -mrelocation-model pic -pic-level 2 -mframe-pointer=all; -fno-strict-return -ffp-contract=on -fno-rounding-math -funwind-tables=2 -target-sdk-version=15.0 -fvisibility-inlines-hidden-static-local-var -fno-modulemap-allow-subdirectory-search -target-cpu penryn -tune-cpu generic -debugger-tuning=lldb -target-linker-version 1115.7.3 -v -fcoverage-compilation-dir=/Users/sftnight -resource-dir /Library/Developer/CommandLineTools/usr/lib/clang/16 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -I/usr/local/include -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1 -internal-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/local/include -internal-isystem /Library/Developer/CommandLineTools/usr/lib/clang/16/include -internal-externc-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -internal-externc-isystem /Library/Developer/CommandLineTools/usr/include -Wno-reorde",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16494#issuecomment-2373214590:1663,clear,clear-ast-before-backend,1663,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2373214590,2,['clear'],['clear-ast-before-backend']
Usability,t](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/79381/console).; ### Errors:; - error: refs/heads/pcanal-v6-18-00-patches does not point to a valid object! ; - error: refs/heads/pcanal-v6-18-00-patches does not point to a valid object! ; - error: refs/heads/pcanal-v6-18-00-patches does not point to a valid object! ; - error: refs/heads/pcanal-v6-18-00-patches does not point to a valid object! ; - error: refs/heads/pcanal-v6-18-00-patches does not point to a valid object! ; - error: refs/heads/pcanal-v6-18-00-patches does not point to a valid object! ; - error: refs/heads/pcanal-v6-18-00-patches does not point to a valid object! ; - error: refs/heads/pcanal-v6-18-00-patches does not point to a valid object! . ### Failing tests:; - [projectroot.runtutorials.tutorial_roofit_rf104_classfactory_py](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/79381/testReport/projectroot/runtutorials/tutorial_roofit_rf104_classfactory_py/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/79381/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/79381/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeproxy.roottest_root_treeproxy_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/79381/testReport/projectroot.roottest.root/treeproxy/roottest_root_treeproxy_make/); - [projectroot.roottest.root.meta.MakeProject.roottest_root_meta_MakeProject_runatlasaod](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/79381/testReport/projectroot.roottest.root.meta/MakeProject/roottest_root_meta_MakeProject_runatlasaod/); - [projectroot.roottest.root.meta.MakeProject.roottest_root_meta_MakeProject,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5030#issuecomment-589606883:1047,simpl,simple,1047,https://root.cern,https://github.com/root-project/root/pull/5030#issuecomment-589606883,2,['simpl'],['simple']
Usability,"te expects some STL container? Then it can not just be that STL container of say `T*`, but also the STL container of pointer any of the base classes, or worse, a mix thereof. And what if the tuple isn't actually targeting a container, but is an initalizer_list? There is often no (relevant) type information available at that point in Python, but many cases can still be resolved b/c the C++ side has some hints. For example `template<typename T, int N> void func(const std::array<T, N>&)` being given a Python tuple `(1, 2, 3)`. Absolutely clear what needs to be done for the conversion to work, but otherwise yet another case to add to the combinatorics. The above, current, situation is very much ""eeew"" and ""might not like the result."" It has also reached its breaking point, as you can see from the open bug reports and the constant hacking on workarounds. I appreciate that for the old PyROOT no-one actually seriously used templates, as folks avoided it in their interfaces b/c of non-support in the CINT world. The only client with moderately interesting templates would be RDataFrame. But in the real world, folks write modern C++ and template usage is much more pervasive. Just last week, I was looking at a massive series of variadically templated constructors: each peeled of an argument to eventually initialize a grand total of 3 data members. It was just a struct with an `unsigned int`, a `double`, and an `std::array<double, 3>`. The point of the whole set of constructors being that you can use initializer syntax with the data member in every order, either the ""naked"" types or with casts of explicitly named typedefs. Oh, it works _now_, with yet another workaround, but it actually crashed `lookupHelper` (segfault and die; and it's not the only one; I have a few more for Vassil, e.g. lookup in an unnamed namespace also crashes deep, deep inside Cling/Clang). So, I consider that another strong argument against ""trying"": anything beyond the usual basic stuff simply segfaults.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6393#issuecomment-696889449:3504,simpl,simply,3504,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-696889449,2,['simpl'],['simply']
Usability,"ter (similar to how `TApplication` ignores `argc` and `argv` if `numOptions==-1`), but that is certainly not a design pattern leading to modern, readable code, so better not spread it more ;-). ; `failOnUnknownArgs` sounds like a great choice of name, it clarifies the intent clearly. . > It would be wonderful to have that as unit test in `core/rint/test` [...]. It seems this does already exist, and has a unit test checking that errors are producted by `TRint` if unrecognitzed options are encountered ;-). Still, it seems I lack sufficient experience with `gtest`, since I don't understand why (for example) `TRint` with unsupported arguments does not `Terminate()` the test — so it's unclear to me how to write a test checking that it does not actually try to `Terminate()` when provided with a to-be-added `failOnUnknownArgs = false`. . In pseudo-steps, I think possible changes / additions to the existing test in `core/rint/test/TRintTests.cxx` to cover the use case as completely as possible could be:; 1. The existing test should be changed to set `failOnUnknownArgs = true` (after that is implemented). ; 2. A second test could be added, not setting `failOnUnknownArgs` (i.e. the default of `false` is used). This test then needs to check that no `stderr` is produced, and `Terminate()` is not called (here I'm unsure how to do these with `gtest`). ; 3. A third test could try to do the following, for complete coverage of the use case:; i. Create a `TRint (let's name it `myApp for simplicity here)`, passing in supported and unsupported options. ; ii. Check the unsupported options are accessible via `myApp->Argv()`. ; iii. Call `myApp`->Run(kTRUE)`, inject `.q` via `stdin` and test that the execution flow returns to after that line. . Does that sound reasonable? ; Since I am slightly at a loss on how to solve these ideas within `gtest`, I would be fine with going the back and forth approach (learning more `gtest` along the way so I can better contribute tests in the future) ;-).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10090#issuecomment-1064634456:1939,simpl,simplicity,1939,https://root.cern,https://github.com/root-project/root/issues/10090#issuecomment-1064634456,4,"['learn', 'simpl']","['learning', 'simplicity']"
Usability,"th it.; }; ```; ```cpp; //make_th1.C; #include <ROOT/RDirectory.hxx> // one extra line ;); #ifdef __CINT__; // shared_ptr<TH1> mc_global_x,mc_global_y,mc_global_z; // but saved one line here...; #endif. void make_th1() {; shared_ptr<TH1> x,y,z;; my_subroutine(x);; my_subroutine(y);; my_subroutine(z);. // and the last we do is leave globals on the heap for interactive user if needed:; #ifdef __CINT__ // I wouldn't leave the globals in compiled code. ; RDirectory::Heap().Add(""test1"",x); // this line is ""extra"" compared to PR, but puts caller in control.; RDirectory::Heap().Add(""test2"",y); // but using RDirectory requires 3 lines now ;); RDirectory::Heap().Add(""test3"",z); // ; #endif; }; ```; I'm ok with this. I like vanilla better, but I got a clean ownership model up until the end here, and made the globals right before exiting, almost like a return statement. If I want to put this in a compiled batch code that loops over this 50 times, pauses 1 second, and displays 3 things each time, I'd just add a loop with sleeps, and Bob's your uncle without even modifying the underlying implementation to get three instances. But this RDirectory version shown here and the C++ global version here are certainly not different in that respect. The C++ globals actually win on line count here if you like this code structure better (I do). I'd argue if one needs the extern header declarations to pass things around in compiled code, he should ask if he's doing it wrong, and that's not an usual sentiment. The whole point is I think to make things visible from the interpreter or other things spawned from it. That's surely why we got here, and if C++ globals makes it tedious to access them everywhere in compiled code, I call that a bonus. . On the other hand I don't like this ; example2: ; ```cpp; {; // my_subroutines.C; unique_ptr<TH1> x // used in my_subroutine. void my_subroutine() {; x.reset(); ; x.reset(new TH1F());; // .. do something with it.; }; ```; except for maybe quick temporary",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7305#issuecomment-791104038:2146,pause,pauses,2146,https://root.cern,https://github.com/root-project/root/pull/7305#issuecomment-791104038,2,['pause'],['pauses']
Usability,"th of the source argument [-Wstringop-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rpdutils/src/rpdutils.cxx:4757:26: warning: ‘char* strncpy(char*, const char*, size_t)’ output may be truncated copying 10 bytes from a string of length 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1776:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::Gl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/774#issuecomment-410732358:1474,clear,clearing,1474,https://root.cern,https://github.com/root-project/root/pull/774#issuecomment-410732358,243,['clear'],['clearing']
Usability,"th of the source argument [-Wstringop-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rpdutils/src/rpdutils.cxx:4757:26: warning: ‘char* strncpy(char*, const char*, size_t)’ output may be truncated copying 10 bytes from a string of length 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TVirtualGL.cxx:31:85: warning: cast between incompatible function types from ‘TGLManager*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1770:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1774:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2691#issuecomment-424741755:1474,clear,clearing,1474,https://root.cern,https://github.com/root-project/root/pull/2691#issuecomment-424741755,4,['clear'],['clearing']
Usability,"th of the source argument [-Wstringop-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rpdutils/src/rpdutils.cxx:4757:26: warning: ‘char* strncpy(char*, const char*, size_t)’ output may be truncated copying 10 bytes from a string of length 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1149:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1769:96: warning: cast between incompatible function types from ‘TVirtualPad*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1773:94: warning: cast between incompatible function types from ‘TVirtualX*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TROOT.cxx:1775:95: warning: cast between incompatible function types from ‘TDirectory*& (*)()’ to ‘TGlobalMappedFunction::Gl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2519#issuecomment-415844036:1474,clear,clearing,1474,https://root.cern,https://github.com/root-project/root/pull/2519#issuecomment-415844036,6,['clear'],['clearing']
Usability,thank you @jblomer for being so responsive to comments!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2322#issuecomment-417241965:32,responsiv,responsive,32,https://root.cern,https://github.com/root-project/root/pull/2322#issuecomment-417241965,2,['responsiv'],['responsive']
Usability,"that will be a challenge. We see this after we package ROOT in an RPM. I can try to setup something but not on lxplus and it will take time. . Meanwhile, could you tell me if there is a way to force ROOT to look for the modulemap.module in a given place ? ; Why would ROOT not find the modulemap installed in an item of `ROOT_INCLUDE_PATH` ? . I can reproduce the issue on a local setup by simply deleting the `module.modulemap`. So it is really just ROOT not finding the module.modulemap.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15318#issuecomment-2152689664:390,simpl,simply,390,https://root.cern,https://github.com/root-project/root/issues/15318#issuecomment-2152689664,2,['simpl'],['simply']
Usability,"this=0x7fa202db6d00 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:99; #9 0x00007fa202aa1194 in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:36; #10 <signal handler called>; #11 0x00005630924075b0 in ?? (); #12 0x00007fa1e65ad3d9 in operator() (__closure=0x7ffe8194d453, obj=0x563091644350) at /opt/root_src/graf2d/gpad/src/TRatioPlot.cxx:116; #13 0x00007fa1e65ad44e in TRatioPlot::~TRatioPlot (this=0x563092404020, __in_chrg=<optimized out>) at /opt/root_src/graf2d/gpad/src/TRatioPlot.cxx:119; #14 0x00007fa1e65ad6b8 in TRatioPlot::~TRatioPlot (this=0x563092404020, __in_chrg=<optimized out>) at /opt/root_src/graf2d/gpad/src/TRatioPlot.cxx:139; #15 0x00007fa2029d267d in TCollection::GarbageCollect (obj=0x563092404020) at /opt/root_src/core/cont/src/TCollection.cxx:736; #16 0x00007fa2029daf97 in TList::Clear (this=0x5630923e3c00, option=0x7fa1e65ce0fc """") at /opt/root_src/core/cont/src/TList.cxx:449; #17 0x00007fa1e657ad87 in TPad::Close (this=0x563090edf1c0) at /opt/root_src/graf2d/gpad/src/TPad.cxx:981; #18 0x00007fa1e65522b0 in TCanvas::Close (this=0x563090edf1c0, option=0x7fa20211a000 """") at /opt/root_src/graf2d/gpad/src/TCanvas.cxx:802; #19 0x00007fa1faab4788 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so; #20 0x00007fa1faa3787c in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so; #21 0x00007fa1faa37fc7 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/user/build/build-root-Desktop-Debug/lib/libCling.so; #22 0x00007fa1faa381e8 in cling::Interpr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14855#issuecomment-1970869205:2246,Clear,Clear,2246,https://root.cern,https://github.com/root-project/root/issues/14855#issuecomment-1970869205,1,['Clear'],['Clear']
Usability,"to be clear, as I said above, the profile changed, however the total sum for cling initialisation is still at 70MB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1630736477:6,clear,clear,6,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1630736477,2,['clear'],['clear']
Usability,ts-build/164079/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_snapshot/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_nested_rvec_snapshot](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164079/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_nested_rvec_snapshot/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_misc](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164079/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_misc/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_regression_multipletriggerrun](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164079/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_regression_multipletriggerrun/); - [projectroot.roottest.root.io.stdarray.roottest_root_io_stdarray_modelCheckValues](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164079/testReport/projectroot.roottest.root.io/stdarray/roottest_root_io_stdarray_modelCheckValues/); - [projectroot.roottest.root.meta.dictSelection.roottest_root_meta_dictSelection_execAtlasTest2](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164079/testReport/projectroot.roottest.root.meta/dictSelection/roottest_root_meta_dictSelection_execAtlasTest2/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164079/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.fastcloning.roottest_root_tree_fastcloning_execCheckClusterRange](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164079/testReport/projectroot.roottest.root.tree/fastcloning/roottest_root_tree_fastcloning_execCheckClusterRange/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12018#issuecomment-1380875995:2127,simpl,simple,2127,https://root.cern,https://github.com/root-project/root/pull/12018#issuecomment-1380875995,4,['simpl'],['simple']
Usability,ts-build/build/core/G__Core.cxx:11318:52: error: no type named 'TVirtualRWMutex' in the global namespace; did you mean simply 'TVirtualRWMutex'? ; - [2023-05-11T12:18:54.761Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/build/core/G__Core.cxx:11324:52: error: no type named 'TVirtualRWMutex' in the global namespace; did you mean simply 'TVirtualRWMutex'? ; - [2023-05-11T12:18:54.761Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/build/core/G__Core.cxx:11330:53: error: no type named 'TVirtualRWMutex' in the global namespace; did you mean simply 'TVirtualRWMutex'? ; - [2023-05-11T12:18:54.761Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/build/core/G__Core.cxx:11337:107: error: no type named 'TVirtualRWMutex' in the global namespace; did you mean simply 'TVirtualRWMutex'? ; - [2023-05-11T12:18:54.761Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/build/core/G__Core.cxx:11355:52: error: no type named 'TReadLockGuard' in the global namespace; did you mean simply 'TReadLockGuard'? ; - [2023-05-11T12:18:54.761Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/build/core/G__Core.cxx:11361:52: error: no type named 'TReadLockGuard' in the global namespace; did you mean simply 'TReadLockGuard'? ; - [2023-05-11T12:18:54.761Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/build/core/G__Core.cxx:11367:53: error: no type named 'TReadLockGuard' in the global namespace; did you mean simply 'TReadLockGuard'? ; - [2023-05-11T12:18:54.761Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/build/core/G__Core.cxx:11374:107: error: no type named 'TReadLockGuard' in the global namespace; did you mean simply 'TReadLockGuard'? ; - [2023-05-11T12:18:54.761Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/build/core/G__Core.cxx:11392:52: error: no type named 'TWriteLockGuard' in the global namespace; did you mean simply 'TWriteLockGuard'? . And 11 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11027#issuecomment-1543894216:1465,simpl,simply,1465,https://root.cern,https://github.com/root-project/root/pull/11027#issuecomment-1543894216,10,['simpl'],['simply']
Usability,ttest.cling.template.roottest_cling_template_runtemplatefriend](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146495/testReport/projectroot.roottest.cling/template/roottest_cling_template_runtemplatefriend/); - [projectroot.roottest.python.cpp.roottest_python_cpp_advanced](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146495/testReport/projectroot.roottest.python/cpp/roottest_python_cpp_advanced/); - [projectroot.roottest.root.aclic.load.roottest_root_aclic_load_reload](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146495/testReport/projectroot.roottest.root.aclic/load/roottest_root_aclic_load_reload/); - [projectroot.roottest.root.aclic.misc.roottest_root_aclic_misc_assertROOT7027](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146495/testReport/projectroot.roottest.root.aclic/misc/roottest_root_aclic_misc_assertROOT7027/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146495/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.callfunc.roottest_root_meta_callfunc_assertUnload_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146495/testReport/projectroot.roottest.root.meta/callfunc/roottest_root_meta_callfunc_assertUnload_auto/); - [projectroot.roottest.root.meta.cmsUnload.roottest_root_meta_cmsUnload_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146495/testReport/projectroot.roottest.root.meta/cmsUnload/roottest_root_meta_cmsUnload_make/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/146495/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/). And 1 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1143554468:2450,simpl,simple,2450,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1143554468,4,['simpl'],['simple']
Usability,ttest.root.meta.roottest_root_meta_runnamespace_auto](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root/meta/roottest_root_meta_runnamespace_auto/); - [projectroot.roottest.root.io.clones.roottest_root_io_clones_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/clones/roottest_root_io_clones_make/); - [projectroot.roottest.root.io.datamodelevolution.roottest_root_io_datamodelevolution_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/datamodelevolution/roottest_root_io_datamodelevolution_make/); - [projectroot.roottest.root.io.interface.roottest_root_io_interface_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.io/interface/roottest_root_io_interface_make/); - [projectroot.roottest.root.meta.ROOT-7462.roottest_root_meta_ROOT_7462_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.meta/ROOT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execDuplicate](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execDuplicate/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/118086/testReport/projectroot.roottest.root.treeformula/stl/roottest_root_treeformula_stl_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8204#issuecomment-844253147:2029,simpl,simple,2029,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-844253147,4,['simpl'],['simple']
Usability,uests-build/174395/console).; ### Errors:; - [2023-05-11T12:18:54.188Z] FAILED: core/CMakeFiles/G__Core.dir/G__Core.cxx.o ; - [2023-05-11T12:18:54.761Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/build/core/G__Core.cxx:11318:52: error: no type named 'TVirtualRWMutex' in the global namespace; did you mean simply 'TVirtualRWMutex'? ; - [2023-05-11T12:18:54.761Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/build/core/G__Core.cxx:11324:52: error: no type named 'TVirtualRWMutex' in the global namespace; did you mean simply 'TVirtualRWMutex'? ; - [2023-05-11T12:18:54.761Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/build/core/G__Core.cxx:11330:53: error: no type named 'TVirtualRWMutex' in the global namespace; did you mean simply 'TVirtualRWMutex'? ; - [2023-05-11T12:18:54.761Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/build/core/G__Core.cxx:11337:107: error: no type named 'TVirtualRWMutex' in the global namespace; did you mean simply 'TVirtualRWMutex'? ; - [2023-05-11T12:18:54.761Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/build/core/G__Core.cxx:11355:52: error: no type named 'TReadLockGuard' in the global namespace; did you mean simply 'TReadLockGuard'? ; - [2023-05-11T12:18:54.761Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/build/core/G__Core.cxx:11361:52: error: no type named 'TReadLockGuard' in the global namespace; did you mean simply 'TReadLockGuard'? ; - [2023-05-11T12:18:54.761Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/build/core/G__Core.cxx:11367:53: error: no type named 'TReadLockGuard' in the global namespace; did you mean simply 'TReadLockGuard'? ; - [2023-05-11T12:18:54.761Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/build/core/G__Core.cxx:11374:107: error: no type named 'TReadLockGuard' in the global namespace; did you mean simply 'TReadLockGuard'? ; - [2023-05-11T12:18:54.761Z] /Users,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11027#issuecomment-1543894216:1235,simpl,simply,1235,https://root.cern,https://github.com/root-project/root/pull/11027#issuecomment-1543894216,2,['simpl'],['simply']
Usability,"uild/67064/console).; ### Warnings:; - /mnt/build/workspace/root-pullrequests-build/root/core/clingutils/test/TClingUtilsTests.cxx:39:47: warning: ignoring return value of ‘int symlink(const char*, const char*)’, declared with attribute warn_unused_result [-Wunused-result] ; - /mnt/build/workspace/root-pullrequests-build/root/core/clingutils/test/TClingUtilsTests.cxx:40:61: warning: ignoring return value of ‘int symlink(const char*, const char*)’, declared with attribute warn_unused_result [-Wunused-result] ; - /mnt/build/workspace/root-pullrequests-build/root/core/clingutils/test/TClingUtilsTests.cxx:43:64: warning: ignoring return value of ‘int symlink(const char*, const char*)’, declared with attribute warn_unused_result [-Wunused-result] ; - /mnt/build/workspace/root-pullrequests-build/root/core/clingutils/test/TClingUtilsTests.cxx:44:78: warning: ignoring return value of ‘int symlink(const char*, const char*)’, declared with attribute warn_unused_result [-Wunused-result] ; - /mnt/build/workspace/root-pullrequests-build/root/core/clingutils/test/TClingUtilsTests.cxx:46:64: warning: ignoring return value of ‘int symlink(const char*, const char*)’, declared with attribute warn_unused_result [-Wunused-result] ; - /mnt/build/workspace/root-pullrequests-build/root/core/clingutils/test/TClingUtilsTests.cxx:47:78: warning: ignoring return value of ‘int symlink(const char*, const char*)’, declared with attribute warn_unused_result [-Wunused-result] ; - /mnt/build/workspace/root-pullrequests-build/root/core/clingutils/test/TClingUtilsTests.cxx:49:85: warning: ignoring return value of ‘int symlink(const char*, const char*)’, declared with attribute warn_unused_result [-Wunused-result] . ### Failing tests:; - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/67064/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4338#issuecomment-527804099:1883,simpl,simple,1883,https://root.cern,https://github.com/root-project/root/pull/4338#issuecomment-527804099,4,['simpl'],['simple']
Usability,"ullrequests-build/root/net/rpdutils/src/rpdutils.cxx:4757:26: warning: ‘char* strncpy(char*, const char*, size_t)’ output may be truncated copying 10 bytes from a string of length 10 [-Wstringop-truncation] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:490:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing between 2147483648 and 2147483647 bytes at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 4294967295] [-Wrestrict] ; - /mnt/build/workspace/root-pullrequests-build/root/net/rootd/src/rootd.cxx:761:21: warning: ‘%lu’ directive writing between 1 and 20 bytes into a region of size between 0 and 8191 [-Wformat-overflow=] ; - include/ROOT/RConcurrentHashColl.hxx:39:19: warning: variable ‘d’ set but not used [-Wunused-but-set-variable] ; - /mnt/build/workspace/root-pullrequests-build/root/proof/proofd/src/XrdProofdProtocol.cxx:527:45: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘class XrdSecEntity’; use assignment or value-initialization instead [-Wclass-memaccess] ; - include/ROOT/RConcurrentHashColl.hxx:39:19: warning: variable ‘d’ set but not used [-Wunused-but-set-variable] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TVirtualGL.cxx:31:85: warning: cast between incompatible function types from ‘TGLManager*& (*)()’ to ‘TGlobalMappedFunction::GlobalFunc_t’ {aka ‘void* (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/core/base/src/TSystem.cxx:1148:14: warning: ‘char* strncat(char*, const char*, size_t)’ accessing 1 byte at offsets 0 and [-2147483647, 2147483648] may overlap 1 byte at offset [0, 2147483649] [-Wrestrict] . And 387 more. ### Failing tests:; - [projectroot.roottest.cling.functionTemplate.roottest_cling_functionTemplate_testcint](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/42551/testReport/projectroot.roottest.cling/functionTemplate/roottest_cling_functionTemplate_testcint/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2715#issuecomment-425565118:1589,clear,clearing,1589,https://root.cern,https://github.com/root-project/root/pull/2715#issuecomment-425565118,2,['clear'],['clearing']
Usability,"und containers (or C++ objects in general), the right question to ask is whether they implement the iterator protocol. E.g. an `std::list` is a sequence and can be iterated over, but not through indexing, as it's not random-access. For `std::map` the same issues exist as for Python, but of course with no special-case exception made in `PySequence_Check` and `std::map<int, T>` is a particular hot mess. Then there's the fact that `operator[](T)` can be redefined in both C++ and Python to mean whatever ... Note that an iterator protocol check would be for `hasattr(obj, '__iter__')` and not `iter(obj)`, as the latter would succeed b/c of that index-based `iterator` mentioned. I'm not really convinced by the `is_sequence()` method proposed, as it would currently fail for this:; ```; import cppyy. cppyy.cppdef(""""""\; struct MyStruct {};; MyStruct* fff = nullptr;; """"""). def is_sequence(obj):; try:; obj[0]; return True; except TypeError as e:; print(e); return False. print(is_sequence(cppyy.gbl.fff)); ```; which prints `True` as all data members are presumed both `*` and `[]`. This should perhaps also be extended to function return types, but returning arrays that way seems to be much less common in practice. Or at least, I've never had that request. Regardless, the problem remains that C++ is simply ambiguous here and I even think it would be fair to assume that `obj[0]` is only every done if `obj` is in fact an array. (Currently not the case, but why not.). Maybe `__getitem__` can be refined to only appear after lookup through `__getattr__`, i.e. to make it fully instance-specific. The result might be confusing as it would still have to be permissive to cover all cases. However, if the check for `__getitem__` is then performed on the class, instead of on the object, it would give you the old behavior back. (I know that that's not how `PySequence_Check` is supposed to work here, but as already explained, it's not the thing that gives the correct answer in all cases anyhow.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15161#issuecomment-2057616934:1473,simpl,simply,1473,https://root.cern,https://github.com/root-project/root/issues/15161#issuecomment-2057616934,2,['simpl'],['simply']
Usability,"urn main; ```; Then calling `df = Dask.RDataFrame(chain, daskclient=connection, npartitions=nparts)`. 1. Is it intentional not to use a spec instead?; 2. From the breakpoint I printed the contents of file and tree names and they looked all file:; ```py; (Pdb) p FILENAMES; ['distrdf_check_friend_trees_alignment_dask_file_1.root', 'distrdf_check_friend_trees_alignment_dask_file_2.root', 'distrdf_check_friend_trees_alignment_dask_file_3.root', 'distrdf_check_friend_trees_alignment_dask_file_4.root', 'distrdf_check_friend_trees_alignment_dask_file_5.root', 'distrdf_check_friend_trees_alignment_dask_file_6.root']; (Pdb) p TREENAMES; ['distrdf_check_friend_trees_alignment_dask_tree_1.root', 'distrdf_check_friend_trees_alignment_dask_tree_2.root', 'distrdf_check_friend_trees_alignment_dask_tree_3.root', 'distrdf_check_friend_trees_alignment_dask_tree_4.root', 'distrdf_check_friend_trees_alignment_dask_tree_5.root', 'distrdf_check_friend_trees_alignment_dask_tree_6.root']; ```; 3. Locally this test fails for me on `s1val = s1.GetValue()`. From pdb I get this stack strace:; ```py; ... > rdf_node = rdf_operation(*in_task_op.args, **in_task_op.kwargs); E cppyy.ll.SegmentationViolation: Template method resolution failed:; E ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Sum(basic_string_view<char,char_traits<char> > columnName = """", double& initValue = RDFDetail::SumReturnType_t<RInferredType>{}) =>; E SegmentationViolation: segfault in C++; program state was reset; E ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Sum(basic_string_view<char,char_traits<char> > columnName = """", double& initValue = RDFDetail::SumReturnType_t<RInferredType>{}) =>; E SegmentationViolation: segfault in C++; program state was reset. ../../../../rb/lib/DistRDF/ComputationGraphGenerator.py:134: SegmentationViolation; ```; This is also what jenkins complains about. I don't clearly see what is wrong. Investigating ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11526#issuecomment-1340908063:2957,clear,clearly,2957,https://root.cern,https://github.com/root-project/root/pull/11526#issuecomment-1340908063,2,['clear'],['clearly']
Usability,"uto Filename = ""output.o"";; + std::error_code EC;; + //llvm::raw_fd_ostream dest(Filename, EC, sys::fs::F_None);; + ; + static unsigned counter = 0;; + std::string FileStem;; + {; + llvm::raw_string_ostream FileStemStream(FileStem);; + FileStemStream << M.getModuleIdentifier() << ""."" << ++counter;; + }; + llvm::raw_fd_ostream ModuleStream(FileStem + "".ll"", EC, llvm::sys::fs::F_None);; + ModuleStream << M;; + llvm::raw_fd_ostream ObjectStream(FileStem + "".o"", EC, llvm::sys::fs::F_None);; + ObjectStream.write(R->getBufferStart(), R->getBufferSize());; +; +/* if (R) {; + M.dump();; + //printf(""MemBuf '%.*s'\n"", (int) R->getBufferSize(), R->getBufferStart());; + printf(""MemBuf '%s'\n"", R->getBuffer().data());; + // dump M and object file *R here.; + }*/; + return R;; + }; + };; +; class IncrementalJIT {; public:; using SymbolMapT = llvm::StringMap<llvm::JITTargetAddress>;; @@ -131,9 +162,24 @@ private:; SymbolMapT& m_SymbolMap;; };; ; +/* class MySimpleCompiler : public llvm::orc::SimpleCompiler {; + public:; + MySimpleCompiler(llvm::TargetMachine &TM, llvm::ObjectCache *ObjCache = nullptr); + : SimpleCompiler(TM, ObjCache) {}; + CompileResult operator()(llvm::Module &M) {; + auto R = SimpleCompiler::operator()(M);; + if (R) {; + M.dump();; + printf(""MemBuf '%.*s'"", (int) R->getBufferSize(), R->getBufferStart());; + // dump M and object file *R here.; + }; + return R;; + }; + };*/; +; typedef RemovableObjectLinkingLayer ObjectLayerT;; typedef llvm::orc::LegacyIRCompileLayer<ObjectLayerT,; - llvm::orc::SimpleCompiler> CompileLayerT;; + MySimpleCompiler> CompileLayerT;; typedef llvm::orc::LazyEmittingLayer<CompileLayerT> LazyEmitLayerT;; ; std::unique_ptr<llvm::TargetMachine> m_TM;; diff --git a/interpreter/cling/lib/Interpreter/Interpreter.cpp b/interpreter/cling/lib/Interpreter/Interpreter.cpp; index 544d946..d10eaea 100644; --- a/interpreter/cling/lib/Interpreter/Interpreter.cpp; +++ b/interpreter/cling/lib/Interpreter/Interpreter.cpp; @@ -251,10 +251,9 @@ namespace cl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9380#issuecomment-985923087:3071,Simpl,SimpleCompiler,3071,https://root.cern,https://github.com/root-project/root/pull/9380#issuecomment-985923087,3,['Simpl'],['SimpleCompiler']
Usability,"utorial time... You basically have 2 ways in my mind to solve this nicely.; 1. Switch to using the `VDT::VDT` library during the build.; - For this you need to introduce a global imported library for `builtin_vdt`. Something like:. ```diff; diff --git a/cmake/modules/SearchInstalledSoftware.cmake b/cmake/modules/SearchInstalledSoftware.cmake; index 7947fddfc0..7ad5fd91af 100644; --- a/cmake/modules/SearchInstalledSoftware.cmake; +++ b/cmake/modules/SearchInstalledSoftware.cmake; @@ -1678,6 +1678,12 @@ if(vdt OR builtin_vdt); DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} COMPONENT extra-headers); set(vdt ON CACHE BOOL ""Enabled because builtin_vdt enabled (${vdt_description})"" FORCE); set_property(GLOBAL APPEND PROPERTY ROOT_BUILTIN_TARGETS VDT); + add_library(VDT::VDT UNKNOWN IMPORTED GLOBAL); + set_target_properties(VDT::VDT; + PROPERTIES; + IMPORTED_LOCATION ""${VDT_LIBRARIES}""; + INTERFACE_INCLUDE_DIRECTORIES ""${VDT_INCLUDE_DIRS}""; + ); endif(); endif(); ```. - At this point you could simplify the build configuration to:. ```diff; diff --git a/math/vecops/CMakeLists.txt b/math/vecops/CMakeLists.txt; index 09fde3eb40..e15b5ea186 100644; --- a/math/vecops/CMakeLists.txt; +++ b/math/vecops/CMakeLists.txt; @@ -8,10 +8,6 @@; # CMakeLists.txt file for building ROOT math/vecops package; ############################################################################; ; -if(builtin_vdt); - link_directories(${CMAKE_LIBRARY_OUTPUT_DIRECTORY}); -endif(); -; ROOT_STANDARD_LIBRARY_PACKAGE(ROOTVecOps; HEADERS; ROOT/RVec.hxx; @@ -24,13 +20,7 @@ ROOT_STANDARD_LIBRARY_PACKAGE(ROOTVecOps; ); ; if(builtin_vdt OR vdt); - target_include_directories(ROOTVecOps PRIVATE ${VDT_INCLUDE_DIRS} INTERFACE $<BUILD_INTERFACE:${VDT_INCLUDE_DIRS}>); -endif(); -; -if(builtin_vdt); - target_link_libraries(ROOTVecOps PRIVATE ${VDT_LIBRARIES}); -elseif(vdt); - target_link_libraries(ROOTVecOps PUBLIC ${VDT_LIBRARIES}); + target_link_libraries(ROOTVecOps PUBLIC VDT::VDT); endif(); ; if(MSVC); ```. - Finally, you w",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11797#issuecomment-1339057027:1008,simpl,simplify,1008,https://root.cern,https://github.com/root-project/root/issues/11797#issuecomment-1339057027,2,['simpl'],['simplify']
Usability,"vassilev is right about the global statements being a non-critical change and wouldn't be accepted upstream. And I am sure when he said that, he didn't mean that Vincenzo's efforts were wasteful. Finally, AFAIU Vincenzo thinks that global statements are unnecessary because the code acts in the same way whether you keep them or not. I have a few counterpoints to this:. 1. It gives programmers an idea about where the variable was initialized before use. Modifying the code provided by Vincenzo:. ```python; cache = {}. def foo():; .....; .... Many lines of code ...; .....; cache[""foo""] = 1. .....; .... Many lines of code ...; ..... def bar():; .....; .... Many lines of code ...; .....; cache[""bar""] = 2; ```. I hope you can see it becomes difficult to understand where did cache come from. A `global cache` statement at the top of the function or before its use clarifies the intent. 2. Removing the `global` statement doesn't affect the scope of the variable. It is purely meant to [guide Python for the code block it is used in.](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement). 3. ROOT already uses `global` keyword in [JupyROOT](https://github.com/root-project/root/blame/a90d76b7798dc4332425d29794089fceaebccb60/bindings/jupyroot/python/JupyROOT/helpers/utils.py#L126 ). So unless ""we should never use `global`"" is a new convention being followed in ROOT, I believe it doesn't seem to track. 4. As seen in this [SO answer](https://stackoverflow.com/a/4693392), Python used to differentiate between having a global statement or not. And even though the answer is more than ten years old, I experienced this firsthand when I started using Python (about four years back). So even though Python changed how it treats the variable binding in the newer versions, I would say it doesn't harm us by keeping them and might benefit us in the future. If these counterpoints do not convince you, I will remove the global statements in the PR. :). Sorry for the long comment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11096#issuecomment-1603484912:1540,guid,guide,1540,https://root.cern,https://github.com/root-project/root/pull/11096#issuecomment-1603484912,2,['guid'],['guide']
Usability,"w users can register a drawing of a result histogram in the same way in single- and multi-thread analysis, like this:. ```c++; // Draw partial result on canvas every 500 events; TCanvas c(""c"", ""Running event loop..."");; h.OnPartialResult(100, [&c](TH1D &h_) {; c.cd();; h_.Draw();; c.Update();; });; ```; @Axel-Naumann users can open a `TBrowser` and check result updates while the event loop is running quite easily:; ```c++; // create ""TDFResults"" directory in TBrowser; TBrowser b(""b"", ""event loop peeper"");; TMemFile m(""TDFResults"", ""RECREATE"");. // add partial result to the ""TDFResults""; m.Browse(&b); // it would be cool if we could change the current directory in the TBrowser to `TDFResults` here; h.OnPartialResult(decltype(h)::kOnce, [&m](TH1D &h_) { m.Add(&h_); });. // call ProcessEvents every once in a while during the event loop to allow users to navigate the TBrowser; h.OnPartialResult(50, [](TH1D &hist) { gSystem->ProcessEvents(); });; ```; @peremato here is how one would implement a thread-safe progress bar for a TDF multi-thread analysis; ```c++; // Update progress bar every 100 events; std::string progress;; std::mutex bar_mutex;; c.OnPartialResultSlot(nEvents / 100, [&progress, &bar_mutex](unsigned int, ULong64_t &c_) {; std::lock_guard<std::mutex> lg(bar_mutex);; progress.push_back('#');; std::cout << ""\r["" << std::left << std::setw(100) << progress << ']' << std::flush;; });; ```. Here are the corresponding self-contained, fully working code examples:; [draw_partial_result.txt](https://github.com/root-project/root/files/1327464/draw_partial_result.txt); [inspect_analysis.txt](https://github.com/root-project/root/files/1327466/inspect_analysis.txt); [progress_bar.txt](https://github.com/root-project/root/files/1327469/progress_bar.txt); (for some reason github does not allow files with `.cpp` extension :man_shrugging: ). For common-enough callbacks one can always imagine to provide helper functions of course.; I like this feature a lot. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1037#issuecomment-331722007:1027,progress bar,progress bar,1027,https://root.cern,https://github.com/root-project/root/pull/1037#issuecomment-331722007,4,['progress bar'],['progress bar']
Usability,yes i will learn a bit about Root and get back to this issue; Thankyou for the guidance.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9546#issuecomment-1010928254:11,learn,learn,11,https://root.cern,https://github.com/root-project/root/pull/9546#issuecomment-1010928254,4,"['guid', 'learn']","['guidance', 'learn']"
Usability,"you should see the warnings regarding the comparisons of `unsigned long` and `int` as well on your system. can you check? the tests for all builds seem to be fine. is it possible for you to access [cdash.cern.ch](cdash.cern.ch)?. as well, please rebase and squash your commits in a single commit with a meaningful message. last change: please put a `[TMVA]` tag at the begin of your commit message so that it's clear what you've worked on in the commit history.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2309#issuecomment-404080279:411,clear,clear,411,https://root.cern,https://github.com/root-project/root/pull/2309#issuecomment-404080279,2,['clear'],['clear']
Usability,"ystery to me at the moment. I recommend that it is actually investigated and understood as this 'seeming random behavior' is likely to be 'use of undefined behavior in the code (somewhere)' or (less likely) the correct behavior but we are completely misunderstanding what's going on under the hood. > It seems to me that failure is the right behavior. It is not :) . I am sure we can agree that an 'undo X' should return the state to a point as if the last X cling related actions had not happened. I.e. the simplified example:. ```; struct Marker { ~Marker() { fprintf(stdout,""dest\n""); } };; .L lib/libStrip.so ; Marker m2;; gInterpreter->AutoParse(""SiStripCluster"");; .undo 2; SiStripCluster obj;; ```. should actually have the same result (assuming no side effect for Marker::Marker) as. ```; struct Marker { ~Marker() { fprintf(stdout,""dest\n""); } };; .L lib/libStrip.so ; SiStripCluster obj;; ```. and it does not (when modules are turned on) ... possibly because the implicit AutoParse (that is triggered by the use of the symbol SiStripCluster) is no longer possible, in the module case, after the first execution (for example because the first execution of the AutoParse is switching some flag, like I already read this part of the pcm file, that is not 'reset'/'reverted' by the undo. > @pcanal, can you remember what exactly we were testing there?. It is testing both that in this setup the undo is not running into an infinite loop and that we correctly support an (implicit or explicit) AutoParse followed by undo followed by an implicit AutoParse. See the related commit:; ```; commit b6296198c2735101051daa33af89fe8ae641991e (fix_cms); Author: Philippe Canal <pcanal@fnal.gov>; Date: Wed Oct 21 21:59:31 2015 -0500. Allow redoing autoparsing undo by a transaction rollback.; ; For each autoparse record to under which transaction it is being done. If this transaction is; rolled back, make sure to clear the caches that noted that this autoparsing had be done.; ```. Cheers,; Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2852#issuecomment-434478365:1631,undo,undo,1631,https://root.cern,https://github.com/root-project/root/pull/2852#issuecomment-434478365,10,"['clear', 'undo']","['clear', 'undo']"
Usability,zations.test.pyunittests_pyroot_import_load_libs](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164000/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_import_load_libs/); - [projectroot.roottest.cling.offset.roottest_cling_offset_interpreted](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164000/testReport/projectroot.roottest.cling/offset/roottest_cling_offset_interpreted/); - [projectroot.roottest.cling.other.roottest_cling_other_execValuePrint](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164000/testReport/projectroot.roottest.cling/other/roottest_cling_other_execValuePrint/); - [projectroot.roottest.root.meta.dictSelection.roottest_root_meta_dictSelection_execAtlasTest2](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164000/testReport/projectroot.roottest.root.meta/dictSelection/roottest_root_meta_dictSelection_execAtlasTest2/); - [projectroot.roottest.root.selector.simple.roottest_root_selector_simple_runtestLoadingSelector](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164000/testReport/projectroot.roottest.root.selector/simple/roottest_root_selector_simple_runtestLoadingSelector/); - [projectroot.roottest.root.tree.reader.roottest_root_tree_reader_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164000/testReport/projectroot.roottest.root.tree/reader/roottest_root_tree_reader_make/); - [projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164000/testReport/projectroot.roottest.root.tree/selector/roottest_root_tree_selector_make/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164000/testReport/projectroot.roottest.root.treeformula/stl/roottest_root_treeformula_stl_make/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12018#issuecomment-1380358995:1511,simpl,simple,1511,https://root.cern,https://github.com/root-project/root/pull/12018#issuecomment-1380358995,4,['simpl'],['simple']
Usability,"ze (this=0x8ea890, JD=...) at /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/LLJIT.cpp:215; > #12 0x00007fffeeace5f9 in llvm::orc::LLJIT::initialize (this=0x8eb360, JD=...) at /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/LLJIT.h:155; > #13 0x00007fffeeaccc6c in cling::IncrementalJIT::runCtors (this=0xfffffffffffffe00) at /home/jhahnfel/ROOT/llvm13/src/interpreter/cling/lib/Interpreter/IncrementalJIT.h:74; > #14 cling::IncrementalExecutor::runStaticInitializersOnce (this=0x698d80, T=...) at /home/jhahnfel/ROOT/llvm13/src/interpreter/cling/lib/Interpreter/IncrementalExecutor.cpp:260; > #15 0x00007fffeea63d43 in cling::Interpreter::executeTransaction (this=<optimized out>, T=...) at /home/jhahnfel/ROOT/llvm13/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1714; > #16 0x00007fffeea6da53 in cling::IncrementalParser::commitTransaction (this=0x4f6670, PRT=..., ClearDiagClient=<optimized out>) at /home/jhahnfel/ROOT/llvm13/src/interpreter/cling/lib/Interpreter/IncrementalParser.cpp:675; > #17 0x00007fffeea5dd71 in cling::Interpreter::PushTransactionRAII::pop (this=0x7fffffffb0c0) at /home/jhahnfel/ROOT/llvm13/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:116; > #18 cling::Interpreter::PushTransactionRAII::~PushTransactionRAII (this=0x7fffffffb0c0) at /home/jhahnfel/ROOT/llvm13/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:106; > #19 0x00007fffee9f9d90 in ClingMemberIterInternal::DCIter::DCIter (this=0x7fffffffb140, DC=<optimized out>, interp=<optimized out>) at /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TClingMemberIter.cxx:33; > #20 0x00007fffee9f649b in TClingMemberIter::TClingMemberIter (this=0x7fffffffb128, interp=0x0, DC=0x80) at /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TClingMemberIter.h:145; > #21 TClingDataMemberIter::TClingDataMemberIter (this=0x7fffffffb128, interp=0x0, DC=0x80, selection=TDictionary::EMemberSelection::kAlsoUsingDecls) at /home/jhahnfel/ROOT/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1098026446:4433,Clear,ClearDiagClient,4433,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1098026446,1,['Clear'],['ClearDiagClient']
Usability,"‘llvm::orc::LegacyIRCompileLayer&lt;BaseLayerT, CompileFtor&gt;::LegacyIRCompileLayer(BaseLayerT&, CompileFtor, llvm::orc::LegacyIRCompileLayer&lt;BaseLayerT, CompileFtor&gt;::NotifyCompiledCallback) [with BaseLayerT = cling::IncrementalJIT::RemovableObjectLinkingLayer; CompileFtor = llvm::orc::SimpleCompiler; llvm::orc::LegacyIRCompileLayer&lt;BaseLayerT, CompileFtor&gt;::NotifyCompiledCallback = std::function&lt;void(long unsigned int, std::unique_ptr&lt;llvm::Module&gt;)&gt;]’ is deprecated (declared at /data/sftnight/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/IRCompileLayer.h:136) [-Wdeprecated-declarations] ; - [2020-09-27T10:44:21.421Z] /data/sftnight/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp:344:33: warning: ‘llvm::orc::LazyEmittingLayer&lt;BaseLayerT&gt;::LazyEmittingLayer(BaseLayerT&) [with BaseLayerT = llvm::orc::LegacyIRCompileLayer&lt;cling::IncrementalJIT::RemovableObjectLinkingLayer, llvm::orc::SimpleCompiler&gt;]’ is deprecated (declared at /data/sftnight/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/LazyEmittingLayer.h:265) [-Wdeprecated-declarations] ; - [2020-09-27T10:44:21.421Z] /data/sftnight/workspace/root-pullrequests-build/root/interpreter/cling/lib/Interpreter/IncrementalJIT.h:108:74: warning: ‘llvm::orc::LegacyRTDyldObjectLinkingLayer::LegacyRTDyldObjectLinkingLayer(llvm::orc::ExecutionSession&, llvm::orc::LegacyRTDyldObjectLinkingLayer::ResourcesGetter, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyLoadedFtor, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyFinalizedFtor, llvm::orc::LegacyRTDyldObjectLinkingLayer::NotifyFreedFtor)’ is deprecated (declared at /data/sftnight/workspace/root-pullrequests-build/root/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:356) [-Wdeprecated-declarations] ; - [2020-09-27T10:44:21.421Z] /data/sftnight/workspace/root-pullreque",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-699618396:3556,Simpl,SimpleCompiler,3556,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-699618396,1,['Simpl'],['SimpleCompiler']
Usability,"──────────────────── registers ────; $rax : 0xd0000000d ; $rbx : 0x00000003aed770 → 0x007fffd6f29030 → 0x007ffff583b790 → <TObject::DoError(int,+0> push r15; $rcx : 0x007fffd8004400 → 0x0000000000000000; $rdx : 0xffffffff ; $rsp : 0x007fffdf211020 → 0x0000001900000002; $rbp : 0x00000004729d00 → 0x007fffde172a90 → 0x007ffff583b790 → <TObject::DoError(int,+0> push r15; $rsi : 0x0 ; $rdi : 0x000000043c5a70 → 0x00000d0000000d (""\r""?); $rip : 0x007fffddef621d → <TCanvas::Resize(char+0> call QWORD PTR [rax+0x208]; $r8 : 0x007fffd801d870 → 0x0000000000000000; $r9 : 0x007fffd80044b0 → 0x007fffd801d870 → 0x0000000000000000; $r10 : 0x19000200800015 ; $r11 : 0x0 ; $r12 : 0x0000000402a3a0 → 0x007ffff2e17250 → 0x007ffff2bfaf50 → <ROOT::TRWMutexImp<std::mutex,+0> mov rax, QWORD PTR [rip+0x21e681] # 0x7ffff2e195d8; $r13 : 0x000000043c5a70 → 0x00000d0000000d (""\r""?); $r14 : 0x3 ; $r15 : 0x0000000339ea90 → 0x00007fff00000001; $eflags: [ZERO carry PARITY adjust sign trap INTERRUPT direction overflow RESUME virtualx86 identification]; $cs: 0x33 $ss: 0x2b $ds: 0x00 $es: 0x00 $fs: 0x00 $gs: 0x00 ; ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── stack ────; 0x007fffdf211020│+0x0000: 0x0000001900000002	 ← $rsp; 0x007fffdf211028│+0x0008: 0x0000000402a3a0 → 0x007ffff2e17250 → 0x007ffff2bfaf50 → <ROOT::TRWMutexImp<std::mutex,+0> mov rax, QWORD PTR [rip+0x21e681] # 0x7ffff2e195d8; 0x007fffdf211030│+0x0010: 0x0000000463e910 → 0x007fffd6f60388 → 0x007ffff583b790 → <TObject::DoError(int,+0> push r15; 0x007fffdf211038│+0x0018: 0x007fffdf211150 → 0x0000000000000a (""\n""?); 0x007fffdf211040│+0x0020: 0x007fffdf211080 → 0x007ffff5c8abf0 → 0x007ffff583b790 → <TObject::DoError(int,+0> push r15; 0x007fffdf211048│+0x0028: 0x007fffd6c2bae8 → <TRootCanvas::HandleContainerConfigure(Event_t*)+40> mov rdi, QWORD PTR [rbp+0x198]; 0x007fffdf211050│+0x0030: 0x007fffdf211080 → 0x007ffff5c8abf0 → 0x007ffff583b790 → <TObject::DoError(in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12496#issuecomment-1564113510:2572,RESUME,RESUME,2572,https://root.cern,https://github.com/root-project/root/issues/12496#issuecomment-1564113510,1,['RESUME'],['RESUME']
