quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Availability,"For multi-colored point clouds, you would have to pass a list of PointClouds or functions generating PointClouds.; How about making `color` a `Tensor` instead?; Then merging clouds boils down to concatenating points, values and colors. Plotting also becomes simpler with less possible errors.; I just pushed support for string tensors: 382b481fe40bab4cd4a54bf55b018122b818b5e2",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/pull/25#issuecomment-770234551:187,down,down,187,,https://github.com/tum-pbs/PhiFlow/pull/25#issuecomment-770234551,2,"['down', 'error']","['down', 'errors']"
Availability,"Hi Nikolai,. Thanks for your feedback!; Unfortunately we don't have anyone with a lot of experience in PyTorch in our group, so we don't yet have advanced tests. I'll look into the error shortly and post a fix. Best,; Philipp",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/14#issuecomment-607752895:181,error,error,181,,https://github.com/tum-pbs/PhiFlow/issues/14#issuecomment-607752895,1,['error'],['error']
Availability,"Hi, thanks for the feedback!. You can do a couple of things. * Use [`math.print_gradient()`](https://tum-pbs.github.io/PhiFlow/phi/math/index.html#phi.math.print_gradient) to see what the gradient is at different stages of your graph.; * Use a [`math.SolveTape()`](https://tum-pbs.github.io/PhiFlow/phi/math/index.html#phi.math.SolveTape) to record the linear solves from the backward pass.; * Use [`phi.set_logging_level()`](https://tum-pbs.github.io/PhiFlow/phi/#phi.set_logging_level) to enable debug prints. Hope that helps! Let me know if the error persists.",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/129#issuecomment-1643677805:548,error,error,548,,https://github.com/tum-pbs/PhiFlow/issues/129#issuecomment-1643677805,1,['error'],['error']
Availability,"I can run the *Higher-order Fluid Simulations* notebook in Colab without error. You are talking about this cell, right?; ```python; v0 = StaggeredGrid(0, **DOMAIN); p0 = CenteredGrid(0, **DOMAIN); multi_step = lambda *x, **kwargs: iterate(rk4_step, 25, *x, **kwargs); v_trj, p_trj = iterate(multi_step, batch(time=2), v0, p0, dt=0.005, range=trange); vis.plot(field.curl(v_trj.with_extrapolation(0)), animate='time'); ```; That cell should show a progress bar. Does that show up?. Could you try running; ```bash; !pip uninstall phiflow phiml; !pip install phiflow; ```; and restarting your runtime?",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/145#issuecomment-1823557821:73,error,error,73,,https://github.com/tum-pbs/PhiFlow/issues/145#issuecomment-1823557821,1,['error'],['error']
Availability,"Sorry to put it in comment of this issue but I haven't found an email adress to send you my python file.; For the bug to occur, simply comment l.33 and uncomment l.35 or l.36. ; The thrown error is the one I copied in the first message. My PhiFlow version : ; phiflow @ git+https://github.com/tum-pbs/PhiFlow@128d0809675b0be370c37d260ad19dae64a7d22e; My backend : JAX",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/110#issuecomment-1441940306:189,error,error,189,,https://github.com/tum-pbs/PhiFlow/issues/110#issuecomment-1441940306,1,['error'],['error']
Availability,"Thank you for testing the latest version!; The error is in the line `buoyancy_force = smoke * (0, 0.5) >> velocity` where the scalar `smoke` field is converted to a vector field. In 3D, it needs 3 components, e.g. `smoke * (0, 0, 0.5)`.; I'll make the error message clearer. In Google Colab, the fixed version seems to freeze but it runs fine on my machine. Can you confirm this?",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/37#issuecomment-874340175:47,error,error,47,,https://github.com/tum-pbs/PhiFlow/issues/37#issuecomment-874340175,2,['error'],['error']
Availability,"Thank you for your feedback!. 1. The `@` operator is being phased out in 2.3. You can already replace it by `arg1.at(arg2)`. I'll revisit the documentation of the geometry masks.; 2. Good idea, I've pushed this to `2.3-develop`. It will now also accept single Geometry or Obstacle values.; 3. Obstacles specifically are only used by the `fluid` module. Other modules use `Geometry`. Obstacles extend Geometry by a velocity vector and rotation speed which only makes sense in fluid-like settings. If you run into any other strange behavior or missing documentation, let me know!",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/103#issuecomment-1411096142:172,mask,masks,172,,https://github.com/tum-pbs/PhiFlow/issues/103#issuecomment-1411096142,1,['mask'],['masks']
Availability,"code.html) in the PBDL book, i.e. build a NN that takes in ```x``` and ```t``` as inputs and returns ```u```. As a first step, I thought of getting a Phiflow only simulation running, then adding a NN later. To that end, I'm trying to get a Phiflow only simulation going with the following code:. ```; from phi.flow import *; import numpy as np; import matplotlib.pyplot as plt; import copy. def simulate(x, p, dt=.1):; return x + p * dt, p + field.laplace(x) * dt. #Initial Condition; sigma = 0.5; c = 1. #Domain Specification; x_length = 5.; dx = 0.1; nx = int(x_length / dx). #Time Specification; t_length = 200; dt = 0.1; nt = int(t_length / dt). #Initial conditions; initial_cond = np.zeros(nx); for x in range(nx):; initial_cond[x] = np.exp(-0.5*((x*dx - x_length/2)/sigma)**2) ; initial_cond[0] = 0; initial_cond[-1] = 0. initial_cond_phi = math.tensor(initial_cond, spatial('x') ) # convert to phiflow tensor. height = CenteredGrid(SoftGeometryMask(Sphere(x=int(nx/2), y=int(nx/2), radius=5)), extrapolation.PERIODIC, x=nx, y=nx); momentum = height * 0. x_hist = [initial_cond_phi]; p_hist = [momentum]; for i in range(5):; x, p = simulate(x_hist[-1], p_hist[-1], dt=.1); x_hist.append(x); p_hist.append(p); ; wave_hist = [wave.values.numpy('x') for wave in wave_hist]. fig, axs = plt.subplots(2, 2); axs[0, 0].plot(wave_hist[0]); axs[0, 1].plot(wave_hist[1]); axs[1, 0].plot(wave_hist[2]); axs[1, 1].plot(wave_hist[-1]). axs[0, 0].set_title(""Initial Condition""); axs[0, 1].set_title(""T = "" + str(int(nt/4)*dx)); axs[1, 0].set_title(""T = "" + str(3*int(nt/4)*dx)); axs[1, 1].set_title(""T = "" + str(t_length)). plt.tight_layout(); plt.show(); ```. However, I am getting the following error: `TypeError: 'NoneType' object cannot be interpreted as an integer`. I'm guessing I'm mixing something up when it comes to the initial conditions. Would you be able to help put me on the right path? Also, would you be able to explain how you transformed the second-order PDE to a first-order PDE?. Thanks.",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/59#issuecomment-1127631065:3347,error,error,3347,,https://github.com/tum-pbs/PhiFlow/issues/59#issuecomment-1127631065,1,['error'],['error']
Deployability,".py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-cGhpL2ZpZWxkL19faW5pdF9fLnB5) | `100.00% <ø> (ø)` | |; | [phi/math/backend/\_optim.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-cGhpL21hdGgvYmFja2VuZC9fb3B0aW0ucHk=) | `96.55% <ø> (ø)` | |; | [phi/physics/advect.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-cGhpL3BoeXNpY3MvYWR2ZWN0LnB5) | `98.48% <ø> (+80.57%)` | :arrow_up: |; | [phi/torch/\_\_init\_\_.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-cGhpL3RvcmNoL19faW5pdF9fLnB5) | `100.00% <ø> (ø)` | |; | [tests/commit/math/test\_\_track.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-dGVzdHMvY29tbWl0L21hdGgvdGVzdF9fdHJhY2sucHk=) | `96.15% <ø> (ø)` | |; | [tests/commit/physics/test\_legacy.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-dGVzdHMvY29tbWl0L3BoeXNpY3MvdGVzdF9sZWdhY3kucHk=) | `100.00% <ø> (ø)` | |; | [phi/physics/\_fluid\_legacy.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-cGhpL3BoeXNpY3MvX2ZsdWlkX2xlZ2FjeS5weQ==) | `80.26% <33.33%> (-14.82%)` | :arrow_down: |; | [phi/field/\_mask.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-cGhpL2ZpZWxkL19tYXNrLnB5) | `87.09% <50.00%> (-1.37%)` | :arrow_down: |; | ... and [133 more](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29?src=pr&el=footer). Last update [6423fe0...f181f15](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/pull/29#issuecomment-789888293:3182,update,update,3182,,https://github.com/tum-pbs/PhiFlow/pull/29#issuecomment-789888293,1,['update'],['update']
Deployability,"Hey, that's a great idea! We might integrate this with the `Mesh` class from Φ-Flow which allows for cells (polygons) with arbitrarily many points. Here is some example code to create a 2D triangle:. ```python; from phi.flow import *. points = [(0, 0), (1, 0), (0, 1)]; polygons = [(0, 1, 2)]; boundaries = {'outer': [(0, 1), (1, 2), (2, 0)]}; mesh = geom.mesh_from_numpy(points, polygons, boundaries); show(mesh); ```. Having a simple interface with shapely would be neat. What functions specifically would you need?",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/174#issuecomment-2334255759:35,integrat,integrate,35,,https://github.com/tum-pbs/PhiFlow/issues/174#issuecomment-2334255759,1,['integrat'],['integrate']
Deployability,"I can run the *Higher-order Fluid Simulations* notebook in Colab without error. You are talking about this cell, right?; ```python; v0 = StaggeredGrid(0, **DOMAIN); p0 = CenteredGrid(0, **DOMAIN); multi_step = lambda *x, **kwargs: iterate(rk4_step, 25, *x, **kwargs); v_trj, p_trj = iterate(multi_step, batch(time=2), v0, p0, dt=0.005, range=trange); vis.plot(field.curl(v_trj.with_extrapolation(0)), animate='time'); ```; That cell should show a progress bar. Does that show up?. Could you try running; ```bash; !pip uninstall phiflow phiml; !pip install phiflow; ```; and restarting your runtime?",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/145#issuecomment-1823557821:548,install,install,548,,https://github.com/tum-pbs/PhiFlow/issues/145#issuecomment-1823557821,1,['install'],['install']
Deployability,I've pushed a fix to `2.3-develop`. Your original version should now work after removing the line `fluid.masked_laplace.tracers.clear()`.; Install 2.3-develop by running; ```; $ pip install --upgrade git+https://github.com/tum-pbs/PhiFlow@2.3-develop; ```,MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/106#issuecomment-1425806449:182,install,install,182,,https://github.com/tum-pbs/PhiFlow/issues/106#issuecomment-1425806449,2,"['install', 'upgrade']","['install', 'upgrade']"
Deployability,"Interesting. Thanks for the update @holl- ; I am learning that I should be probably tracking the 2.2 branch. ; Side question: Would it be wise to track the 2.2-dev or 2.2.0 branches?. FWIW, interactive jupyter notebook graphics have never seemed like they were worth the effort to me (I'm not saying they are not valuable, but rather that the effort is very high); if I get my problem solved I'll try to submit a pull request to document your advice",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/67#issuecomment-1173219145:28,update,update,28,,https://github.com/tum-pbs/PhiFlow/issues/67#issuecomment-1173219145,1,['update'],['update']
Deployability,You could try the following:; * Run your script inside Google colab where `ffmpeg` is pre-installed.; * Test a simple matplotlib to mp4 demo script from their documentation,MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/133#issuecomment-1673443410:90,install,installed,90,,https://github.com/tum-pbs/PhiFlow/issues/133#issuecomment-1673443410,1,['install'],['installed']
Deployability,"io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-cGhpL190cm91Ymxlc2hvb3QucHk=) | `61.05% <ø> (ø)` | |; | [phi/field/\_\_init\_\_.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-cGhpL2ZpZWxkL19faW5pdF9fLnB5) | `100.00% <ø> (ø)` | |; | [phi/jax/\_\_init\_\_.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-cGhpL2pheC9fX2luaXRfXy5weQ==) | `100.00% <ø> (ø)` | |; | [phi/math/backend/\_\_init\_\_.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-cGhpL21hdGgvYmFja2VuZC9fX2luaXRfXy5weQ==) | `100.00% <ø> (ø)` | |; | [tests/commit/math/test\_\_functions.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-dGVzdHMvY29tbWl0L21hdGgvdGVzdF9fZnVuY3Rpb25zLnB5) | `99.79% <ø> (+0.30%)` | :arrow_up: |; | [tests/commit/math/test\_\_nd.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-dGVzdHMvY29tbWl0L21hdGgvdGVzdF9fbmQucHk=) | `100.00% <ø> (+16.39%)` | :arrow_up: |; | [tests/commit/math/test\_\_shape.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-dGVzdHMvY29tbWl0L21hdGgvdGVzdF9fc2hhcGUucHk=) | `100.00% <ø> (ø)` | |; | [tests/commit/math/test\_\_trace.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-dGVzdHMvY29tbWl0L21hdGgvdGVzdF9fdHJhY2UucHk=) | `100.00% <ø> (ø)` | |; | ... and [110 more](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31?src=pr&el=footer). Last update [f181f15...dfdb433](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/pull/31#issuecomment-801031364:3193,update,update,3193,,https://github.com/tum-pbs/PhiFlow/pull/31#issuecomment-801031364,1,['update'],['update']
Deployability,"nts&utm_term=None)](https://codecov.io/gh/tum-pbs/PhiFlow/pull/47?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None). ```diff; @@ Coverage Diff @@; ## master #47 +/- ##; =======================================; Coverage 86.34% 86.34% ; =======================================; Files 104 104 ; Lines 12417 12419 +2 ; =======================================; + Hits 10721 10723 +2 ; Misses 1696 1696 ; ```. | [Impacted Files](https://codecov.io/gh/tum-pbs/PhiFlow/pull/47?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |; |---|---|---|; | [phi/torch/\_torch\_backend.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/47/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-cGhpL3RvcmNoL190b3JjaF9iYWNrZW5kLnB5) | `90.98% <100.00%> (+0.02%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/tum-pbs/PhiFlow/pull/47?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/tum-pbs/PhiFlow/pull/47?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None). Last update [c080b72...8208c38](https://codecov.io/gh/tum-pbs/PhiFlow/pull/47?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None).",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/pull/47#issuecomment-961776449:2500,update,update,2500,,https://github.com/tum-pbs/PhiFlow/pull/47#issuecomment-961776449,1,['update'],['update']
Deployability,"ull/31/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-cGhpL21hdGgvYmFja2VuZC9fcHJvZmlsZS5weQ==) | `81.48% <ø> (-2.40%)` | :arrow_down: |; | [phi/math/extrapolation.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-cGhpL21hdGgvZXh0cmFwb2xhdGlvbi5weQ==) | `86.79% <ø> (+4.34%)` | :arrow_up: |; | [phi/physics/\_boundaries.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-cGhpL3BoeXNpY3MvX2JvdW5kYXJpZXMucHk=) | `85.29% <ø> (-4.00%)` | :arrow_down: |; | ... and [158 more](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None). Last update [cc87c58...7f5349f](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None).",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/pull/31#issuecomment-823029108:5179,update,update,5179,,https://github.com/tum-pbs/PhiFlow/pull/31#issuecomment-823029108,1,['update'],['update']
Deployability,"v.io/gh/tum-pbs/PhiFlow/pull/43/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-cGhpL21hdGgvX3RlbnNvcnMucHk=) | `85.81% <66.27%> (-1.75%)` | :arrow_down: |; | [phi/\_troubleshoot.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/43/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-cGhpL190cm91Ymxlc2hvb3QucHk=) | `47.10% <66.66%> (+1.44%)` | :arrow_up: |; | [phi/field/\_field.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/43/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-cGhpL2ZpZWxkL19maWVsZC5weQ==) | `89.69% <66.66%> (-1.67%)` | :arrow_down: |; | ... and [77 more](https://codecov.io/gh/tum-pbs/PhiFlow/pull/43/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/tum-pbs/PhiFlow/pull/43?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/tum-pbs/PhiFlow/pull/43?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None). Last update [b6186fd...58f43eb](https://codecov.io/gh/tum-pbs/PhiFlow/pull/43?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None).",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/pull/43#issuecomment-924793166:5182,update,update,5182,,https://github.com/tum-pbs/PhiFlow/pull/43#issuecomment-924793166,1,['update'],['update']
Energy Efficiency,"Have a look at the [FLIP demo](https://github.com/tum-pbs/PhiFlow/blob/master/demos/flip_liquid.py) which uses particles.; There is currently no efficient way to handle neighbor search for particles but we are working on it. If you don't need more than say 20k particles, you can compute the full distance matrix. See the [solar system demo](https://tum-pbs.github.io/PhiFlow/Planets_Tutorial.html) for simple particle-particle interactions.",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/77#issuecomment-1233560714:145,efficient,efficient,145,,https://github.com/tum-pbs/PhiFlow/issues/77#issuecomment-1233560714,1,['efficient'],['efficient']
Energy Efficiency,"That makes sense. I'm happy to approve the merge as soon as this behavior is documented since it is both new in this version and not intuitive, but powerful once understood.",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/pull/10#issuecomment-586942227:148,power,powerful,148,,https://github.com/tum-pbs/PhiFlow/pull/10#issuecomment-586942227,1,['power'],['powerful']
Integrability,"As a workaround, you could simply define; ```python; def transpose(x, order='y,x'):; return wrap(x.native(order), x.shape[order]); ```",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/150#issuecomment-1890973574:92,wrap,wrap,92,,https://github.com/tum-pbs/PhiFlow/issues/150#issuecomment-1890973574,1,['wrap'],['wrap']
Integrability,"Hey, that's a great idea! We might integrate this with the `Mesh` class from Φ-Flow which allows for cells (polygons) with arbitrarily many points. Here is some example code to create a 2D triangle:. ```python; from phi.flow import *. points = [(0, 0), (1, 0), (0, 1)]; polygons = [(0, 1, 2)]; boundaries = {'outer': [(0, 1), (1, 2), (2, 0)]}; mesh = geom.mesh_from_numpy(points, polygons, boundaries); show(mesh); ```. Having a simple interface with shapely would be neat. What functions specifically would you need?",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/174#issuecomment-2334255759:35,integrat,integrate,35,,https://github.com/tum-pbs/PhiFlow/issues/174#issuecomment-2334255759,2,"['integrat', 'interface']","['integrate', 'interface']"
Integrability,"Sorry to put it in comment of this issue but I haven't found an email adress to send you my python file.; For the bug to occur, simply comment l.33 and uncomment l.35 or l.36. ; The thrown error is the one I copied in the first message. My PhiFlow version : ; phiflow @ git+https://github.com/tum-pbs/PhiFlow@128d0809675b0be370c37d260ad19dae64a7d22e; My backend : JAX",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/110#issuecomment-1441940306:228,message,message,228,,https://github.com/tum-pbs/PhiFlow/issues/110#issuecomment-1441940306,1,['message'],['message']
Integrability,"Thank you for testing the latest version!; The error is in the line `buoyancy_force = smoke * (0, 0.5) >> velocity` where the scalar `smoke` field is converted to a vector field. In 3D, it needs 3 components, e.g. `smoke * (0, 0, 0.5)`.; I'll make the error message clearer. In Google Colab, the fixed version seems to freeze but it runs fine on my machine. Can you confirm this?",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/37#issuecomment-874340175:258,message,message,258,,https://github.com/tum-pbs/PhiFlow/issues/37#issuecomment-874340175,1,['message'],['message']
Integrability,"The following class implements an extrapolation that switches between `in_ext` and `out_ext` depending on whether `flow` points outwards or inwards at the boundaries. ```python; from typing import Tuple. from phi.flow import *; from phiml.math import extrapolation, Tensor, shape; from phiml.math.extrapolation import Extrapolation. class InOutConditionalExtrapolation(Extrapolation):. def __init__(self, flow: Tensor, in_ext, out_ext):; in_ext = extrapolation.as_extrapolation(in_ext); out_ext = extrapolation.as_extrapolation(out_ext); super().__init__(in_ext.pad_rank); assert 'vector' in shape(flow); self.flow = flow; self.in_ext = in_ext; self.out_ext = out_ext. def to_dict(self) -> dict:; raise NotImplementedError. def spatial_gradient(self) -> 'Extrapolation':; return InOutConditionalExtrapolation(self.flow, self.in_ext.spatial_gradient(), self.out_ext.spatial_gradient()). def valid_outer_faces(self, dim) -> Tuple[bool, bool]:; true_lower, true_upper = self.in_ext.valid_outer_faces(dim); false_lower, false_upper = self.out_ext.valid_outer_faces(dim); return true_lower or false_lower, true_upper or false_upper. @property; def is_flexible(self) -> bool:; return self.in_ext.is_flexible or self.out_ext.is_flexible. def pad_values(self, value: Tensor, width: int, dim: str, upper_edge: bool, already_padded: dict = None, **kwargs) -> Tensor:; edge_normal = self.flow[{dim: -1 if upper_edge else 0, 'vector': dim}]; if already_padded:; edge_normal = ZERO_GRADIENT.pad(edge_normal, already_padded); if not upper_edge:; edge_normal *= -1; is_out = edge_normal >= 0; res_in = self.in_ext.pad_values(value, width, dim, upper_edge, **kwargs); res_out = self.out_ext.pad_values(value, width, dim, upper_edge, **kwargs); return math.where(is_out, res_out, res_in). def pad(self, value: Tensor, widths: dict, **kwargs) -> Tensor:; from phiml.math._trace import ShiftLinTracer; if isinstance(value, ShiftLinTracer):; out_mask = self._outflow_mask(widths); padded_in = self.in_ext.pad(value, width",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/138#issuecomment-1700960001:93,depend,depending,93,,https://github.com/tum-pbs/PhiFlow/issues/138#issuecomment-1700960001,1,['depend'],['depending']
Modifiability,"Great, thanks! I actually did it half-manually: finding them using `ast` and solving them with regex + manual checking. I slightly underestimated the scale of the refactor... I think these kinds of replacements could be done quite effectively if there was some automatic code styling applied!. @holl- Would you be positive about using applying linter and codeformatter like `black`/`flake8`? I think `ruff` is a really neat all-in-one and fast implementation maintaining these style guides. I'm happy to contribute it, and we can surely change all the parameters to something that contributors find pleasing. It would autorun on git commit.",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/pull/122#issuecomment-1513825690:163,refactor,refactor,163,,https://github.com/tum-pbs/PhiFlow/pull/122#issuecomment-1513825690,1,['refactor'],['refactor']
Modifiability,"Thank you for your feedback!. 1. The `@` operator is being phased out in 2.3. You can already replace it by `arg1.at(arg2)`. I'll revisit the documentation of the geometry masks.; 2. Good idea, I've pushed this to `2.3-develop`. It will now also accept single Geometry or Obstacle values.; 3. Obstacles specifically are only used by the `fluid` module. Other modules use `Geometry`. Obstacles extend Geometry by a velocity vector and rotation speed which only makes sense in fluid-like settings. If you run into any other strange behavior or missing documentation, let me know!",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/103#issuecomment-1411096142:393,extend,extend,393,,https://github.com/tum-pbs/PhiFlow/issues/103#issuecomment-1411096142,1,['extend'],['extend']
Testability, | |; |---|---|---|; | [demos/profile\_navier\_stokes.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-ZGVtb3MvcHJvZmlsZV9uYXZpZXJfc3Rva2VzLnB5) | `100.00% <ø> (ø)` | |; | [phi/\_\_init\_\_.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-cGhpL19faW5pdF9fLnB5) | `85.71% <ø> (+23.80%)` | :arrow_up: |; | [phi/\_troubleshoot.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-cGhpL190cm91Ymxlc2hvb3QucHk=) | `61.05% <ø> (ø)` | |; | [phi/field/\_\_init\_\_.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-cGhpL2ZpZWxkL19faW5pdF9fLnB5) | `100.00% <ø> (ø)` | |; | [phi/jax/\_\_init\_\_.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-cGhpL2pheC9fX2luaXRfXy5weQ==) | `100.00% <ø> (ø)` | |; | [phi/math/backend/\_\_init\_\_.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-cGhpL21hdGgvYmFja2VuZC9fX2luaXRfXy5weQ==) | `100.00% <ø> (ø)` | |; | [tests/commit/math/test\_\_functions.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-dGVzdHMvY29tbWl0L21hdGgvdGVzdF9fZnVuY3Rpb25zLnB5) | `99.79% <ø> (+0.30%)` | :arrow_up: |; | [tests/commit/math/test\_\_nd.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-dGVzdHMvY29tbWl0L21hdGgvdGVzdF9fbmQucHk=) | `100.00% <ø> (+16.39%)` | :arrow_up: |; | [tests/commit/math/test\_\_shape.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-dGVzdHMvY29tbWl0L21hdGgvdGVzdF9fc2hhcGUucHk=) | `100.00% <ø> (ø)` | |; | [tests/commit/math/test\_\_trace.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-dGVzdHMvY29tbWl0L21hdGgvdGVzdF9fdHJhY2UucHk=) | `100.00% <ø> (ø)` | |; | ... and [110 more](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31?src=pr&el=continue).; > **Legend** - [Click here to learn ,MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/pull/31#issuecomment-801031364:1963,test,tests,1963,,https://github.com/tum-pbs/PhiFlow/pull/31#issuecomment-801031364,2,['test'],"['test', 'tests']"
Testability,"Hi Nikolai,. Thanks for your feedback!; Unfortunately we don't have anyone with a lot of experience in PyTorch in our group, so we don't yet have advanced tests. I'll look into the error shortly and post a fix. Best,; Philipp",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/14#issuecomment-607752895:155,test,tests,155,,https://github.com/tum-pbs/PhiFlow/issues/14#issuecomment-607752895,1,['test'],['tests']
Testability,"Thank you for testing the latest version!; The error is in the line `buoyancy_force = smoke * (0, 0.5) >> velocity` where the scalar `smoke` field is converted to a vector field. In 3D, it needs 3 components, e.g. `smoke * (0, 0, 0.5)`.; I'll make the error message clearer. In Google Colab, the fixed version seems to freeze but it runs fine on my machine. Can you confirm this?",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/37#issuecomment-874340175:14,test,testing,14,,https://github.com/tum-pbs/PhiFlow/issues/37#issuecomment-874340175,1,['test'],['testing']
Testability,"The following class implements an extrapolation that switches between `in_ext` and `out_ext` depending on whether `flow` points outwards or inwards at the boundaries. ```python; from typing import Tuple. from phi.flow import *; from phiml.math import extrapolation, Tensor, shape; from phiml.math.extrapolation import Extrapolation. class InOutConditionalExtrapolation(Extrapolation):. def __init__(self, flow: Tensor, in_ext, out_ext):; in_ext = extrapolation.as_extrapolation(in_ext); out_ext = extrapolation.as_extrapolation(out_ext); super().__init__(in_ext.pad_rank); assert 'vector' in shape(flow); self.flow = flow; self.in_ext = in_ext; self.out_ext = out_ext. def to_dict(self) -> dict:; raise NotImplementedError. def spatial_gradient(self) -> 'Extrapolation':; return InOutConditionalExtrapolation(self.flow, self.in_ext.spatial_gradient(), self.out_ext.spatial_gradient()). def valid_outer_faces(self, dim) -> Tuple[bool, bool]:; true_lower, true_upper = self.in_ext.valid_outer_faces(dim); false_lower, false_upper = self.out_ext.valid_outer_faces(dim); return true_lower or false_lower, true_upper or false_upper. @property; def is_flexible(self) -> bool:; return self.in_ext.is_flexible or self.out_ext.is_flexible. def pad_values(self, value: Tensor, width: int, dim: str, upper_edge: bool, already_padded: dict = None, **kwargs) -> Tensor:; edge_normal = self.flow[{dim: -1 if upper_edge else 0, 'vector': dim}]; if already_padded:; edge_normal = ZERO_GRADIENT.pad(edge_normal, already_padded); if not upper_edge:; edge_normal *= -1; is_out = edge_normal >= 0; res_in = self.in_ext.pad_values(value, width, dim, upper_edge, **kwargs); res_out = self.out_ext.pad_values(value, width, dim, upper_edge, **kwargs); return math.where(is_out, res_out, res_in). def pad(self, value: Tensor, widths: dict, **kwargs) -> Tensor:; from phiml.math._trace import ShiftLinTracer; if isinstance(value, ShiftLinTracer):; out_mask = self._outflow_mask(widths); padded_in = self.in_ext.pad(value, width",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/138#issuecomment-1700960001:573,assert,assert,573,,https://github.com/tum-pbs/PhiFlow/issues/138#issuecomment-1700960001,1,['assert'],['assert']
Testability,"\_dash/dash\_plotting.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-cGhpL2FwcC9fZGFzaC9kYXNoX3Bsb3R0aW5nLnB5) | `8.11% <0.00%> (ø)` | |; | [phi/field/\_\_init\_\_.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-cGhpL2ZpZWxkL19faW5pdF9fLnB5) | `100.00% <ø> (ø)` | |; | [phi/math/backend/\_optim.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-cGhpL21hdGgvYmFja2VuZC9fb3B0aW0ucHk=) | `96.55% <ø> (ø)` | |; | [phi/physics/advect.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-cGhpL3BoeXNpY3MvYWR2ZWN0LnB5) | `98.48% <ø> (+80.57%)` | :arrow_up: |; | [phi/torch/\_\_init\_\_.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-cGhpL3RvcmNoL19faW5pdF9fLnB5) | `100.00% <ø> (ø)` | |; | [tests/commit/math/test\_\_track.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-dGVzdHMvY29tbWl0L21hdGgvdGVzdF9fdHJhY2sucHk=) | `96.15% <ø> (ø)` | |; | [tests/commit/physics/test\_legacy.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-dGVzdHMvY29tbWl0L3BoeXNpY3MvdGVzdF9sZWdhY3kucHk=) | `100.00% <ø> (ø)` | |; | [phi/physics/\_fluid\_legacy.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-cGhpL3BoeXNpY3MvX2ZsdWlkX2xlZ2FjeS5weQ==) | `80.26% <33.33%> (-14.82%)` | :arrow_down: |; | [phi/field/\_mask.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-cGhpL2ZpZWxkL19tYXNrLnB5) | `87.09% <50.00%> (-1.37%)` | :arrow_down: |; | ... and [133 more](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29?src=pr&",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/pull/29#issuecomment-789888293:2158,test,tests,2158,,https://github.com/tum-pbs/PhiFlow/pull/29#issuecomment-789888293,2,['test'],"['test', 'tests']"
Testability,"ecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-cGhpL190cm91Ymxlc2hvb3QucHk=) | `61.05% <ø> (ø)` | |; | [phi/field/\_\_init\_\_.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-cGhpL2ZpZWxkL19faW5pdF9fLnB5) | `100.00% <ø> (ø)` | |; | [phi/jax/\_\_init\_\_.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-cGhpL2pheC9fX2luaXRfXy5weQ==) | `100.00% <ø> (ø)` | |; | [phi/math/backend/\_\_init\_\_.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-cGhpL21hdGgvYmFja2VuZC9fX2luaXRfXy5weQ==) | `100.00% <ø> (ø)` | |; | [tests/commit/math/test\_\_functions.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-dGVzdHMvY29tbWl0L21hdGgvdGVzdF9fZnVuY3Rpb25zLnB5) | `99.79% <ø> (+0.30%)` | :arrow_up: |; | [tests/commit/math/test\_\_nd.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-dGVzdHMvY29tbWl0L21hdGgvdGVzdF9fbmQucHk=) | `100.00% <ø> (+16.39%)` | :arrow_up: |; | [tests/commit/math/test\_\_shape.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-dGVzdHMvY29tbWl0L21hdGgvdGVzdF9fc2hhcGUucHk=) | `100.00% <ø> (ø)` | |; | [tests/commit/math/test\_\_trace.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-dGVzdHMvY29tbWl0L21hdGgvdGVzdF9fdHJhY2UucHk=) | `100.00% <ø> (ø)` | |; | ... and [110 more](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31?src=pr&el=footer). Last update [f181f15...dfdb433](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-commen",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/pull/31#issuecomment-801031364:2358,test,tests,2358,,https://github.com/tum-pbs/PhiFlow/pull/31#issuecomment-801031364,2,['test'],"['test', 'tests']"
Testability,"im, width in widths.items():; values = []; if width[False] > 0:; edge_normal = self.flow[{dim: 0, 'vector': dim}]; edge_normal = ZERO_GRADIENT.pad(edge_normal, already_padded); values.append(expand(edge_normal < 0, shape(self.flow)[dim].with_size(width[False]))); values.append(result); if width[True] > 0:; edge_normal = self.flow[{dim: -1, 'vector': dim}]; edge_normal = ZERO_GRADIENT.pad(edge_normal, already_padded); values.append(expand(edge_normal > 0, shape(self.flow)[dim].with_size(width[True]))); result = concat(values, dim); already_padded[dim] = width; return result. def __abs__(self):; return InOutConditionalExtrapolation(self.flow, abs(self.in_ext), abs(self.out_ext)). def __neg__(self):; return InOutConditionalExtrapolation(self.flow, -self.in_ext, -self.out_ext). def __add__(self, other):; return InOutConditionalExtrapolation(self.flow, self.in_ext + other, self.out_ext + other). def __radd__(self, other):; return InOutConditionalExtrapolation(self.flow, other + self.in_ext, other + self.out_ext). def __sub__(self, other):; return InOutConditionalExtrapolation(self.flow, self.in_ext - other, self.out_ext - other). def __rsub__(self, other):; return InOutConditionalExtrapolation(self.flow, other - self.in_ext, other - self.out_ext). def __mul__(self, other):; return InOutConditionalExtrapolation(self.flow, self.in_ext * other, self.out_ext * other). def __rmul__(self, other):; return InOutConditionalExtrapolation(self.flow, other * self.in_ext, other * self.out_ext). def __truediv__(self, other):; return InOutConditionalExtrapolation(self.flow, self.in_ext / other, self.out_ext / other). def __rtruediv__(self, other):; return InOutConditionalExtrapolation(self.flow, other / self.in_ext, other / self.out_ext); ```. Here is a simple test script:. ```python; v = CenteredGrid(Noise(vector='x,y'), x=32, y=32); scalar = CenteredGrid(2, InOutConditionalExtrapolation(v.values, 0, 1), x=32, y=32); padded = field.pad(scalar, 10); show(v, padded, overlay='args'); ```",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/138#issuecomment-1700960001:4071,test,test,4071,,https://github.com/tum-pbs/PhiFlow/issues/138#issuecomment-1700960001,1,['test'],['test']
Testability,"io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-cGhpL190cm91Ymxlc2hvb3QucHk=) | `61.05% <ø> (ø)` | |; | [phi/field/\_\_init\_\_.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-cGhpL2ZpZWxkL19faW5pdF9fLnB5) | `100.00% <ø> (ø)` | |; | [phi/jax/\_\_init\_\_.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-cGhpL2pheC9fX2luaXRfXy5weQ==) | `100.00% <ø> (ø)` | |; | [phi/math/backend/\_\_init\_\_.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-cGhpL21hdGgvYmFja2VuZC9fX2luaXRfXy5weQ==) | `100.00% <ø> (ø)` | |; | [tests/commit/math/test\_\_functions.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-dGVzdHMvY29tbWl0L21hdGgvdGVzdF9fZnVuY3Rpb25zLnB5) | `99.79% <ø> (+0.30%)` | :arrow_up: |; | [tests/commit/math/test\_\_nd.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-dGVzdHMvY29tbWl0L21hdGgvdGVzdF9fbmQucHk=) | `100.00% <ø> (+16.39%)` | :arrow_up: |; | [tests/commit/math/test\_\_shape.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-dGVzdHMvY29tbWl0L21hdGgvdGVzdF9fc2hhcGUucHk=) | `100.00% <ø> (ø)` | |; | [tests/commit/math/test\_\_trace.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-dGVzdHMvY29tbWl0L21hdGgvdGVzdF9fdHJhY2UucHk=) | `100.00% <ø> (ø)` | |; | ... and [110 more](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31?src=pr&el=footer). Last update [f181f15...dfdb433](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/pull/31#issuecomment-801031364:2539,test,tests,2539,,https://github.com/tum-pbs/PhiFlow/pull/31#issuecomment-801031364,2,['test'],"['test', 'tests']"
Testability,"phi/\_\_init\_\_.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-cGhpL19faW5pdF9fLnB5) | `85.71% <ø> (+23.80%)` | :arrow_up: |; | [phi/\_troubleshoot.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-cGhpL190cm91Ymxlc2hvb3QucHk=) | `61.05% <ø> (ø)` | |; | [phi/field/\_\_init\_\_.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-cGhpL2ZpZWxkL19faW5pdF9fLnB5) | `100.00% <ø> (ø)` | |; | [phi/jax/\_\_init\_\_.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-cGhpL2pheC9fX2luaXRfXy5weQ==) | `100.00% <ø> (ø)` | |; | [phi/math/backend/\_\_init\_\_.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-cGhpL21hdGgvYmFja2VuZC9fX2luaXRfXy5weQ==) | `100.00% <ø> (ø)` | |; | [tests/commit/math/test\_\_functions.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-dGVzdHMvY29tbWl0L21hdGgvdGVzdF9fZnVuY3Rpb25zLnB5) | `99.79% <ø> (+0.30%)` | :arrow_up: |; | [tests/commit/math/test\_\_nd.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-dGVzdHMvY29tbWl0L21hdGgvdGVzdF9fbmQucHk=) | `100.00% <ø> (+16.39%)` | :arrow_up: |; | [tests/commit/math/test\_\_shape.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-dGVzdHMvY29tbWl0L21hdGgvdGVzdF9fc2hhcGUucHk=) | `100.00% <ø> (ø)` | |; | [tests/commit/math/test\_\_trace.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-dGVzdHMvY29tbWl0L21hdGgvdGVzdF9fdHJhY2UucHk=) | `100.00% <ø> (ø)` | |; | ... and [110 more](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31?",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/pull/31#issuecomment-801031364:2167,test,tests,2167,,https://github.com/tum-pbs/PhiFlow/pull/31#issuecomment-801031364,2,['test'],"['test', 'tests']"
Testability,|---|---|---|; | [phi/app/\_app.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-cGhpL2FwcC9fYXBwLnB5) | `76.11% <ø> (+37.72%)` | :arrow_up: |; | [phi/app/\_dash/dash\_plotting.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-cGhpL2FwcC9fZGFzaC9kYXNoX3Bsb3R0aW5nLnB5) | `8.11% <0.00%> (ø)` | |; | [phi/field/\_\_init\_\_.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-cGhpL2ZpZWxkL19faW5pdF9fLnB5) | `100.00% <ø> (ø)` | |; | [phi/math/backend/\_optim.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-cGhpL21hdGgvYmFja2VuZC9fb3B0aW0ucHk=) | `96.55% <ø> (ø)` | |; | [phi/physics/advect.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-cGhpL3BoeXNpY3MvYWR2ZWN0LnB5) | `98.48% <ø> (+80.57%)` | :arrow_up: |; | [phi/torch/\_\_init\_\_.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-cGhpL3RvcmNoL19faW5pdF9fLnB5) | `100.00% <ø> (ø)` | |; | [tests/commit/math/test\_\_track.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-dGVzdHMvY29tbWl0L21hdGgvdGVzdF9fdHJhY2sucHk=) | `96.15% <ø> (ø)` | |; | [tests/commit/physics/test\_legacy.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-dGVzdHMvY29tbWl0L3BoeXNpY3MvdGVzdF9sZWdhY3kucHk=) | `100.00% <ø> (ø)` | |; | [phi/physics/\_fluid\_legacy.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-cGhpL3BoeXNpY3MvX2ZsdWlkX2xlZ2FjeS5weQ==) | `80.26% <33.33%> (-14.82%)` | :arrow_down: |; | [phi/field/\_mask.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-cGhpL2ZpZWxkL19tYXNrLnB5) | `87.09% <50.00%> (-1.37%)` | :arrow_down: |; | ... and [133 more](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codec,MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/pull/29#issuecomment-789888293:1978,test,tests,1978,,https://github.com/tum-pbs/PhiFlow/pull/29#issuecomment-789888293,2,['test'],"['test', 'tests']"
Usability,".py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-cGhpL2ZpZWxkL19faW5pdF9fLnB5) | `100.00% <ø> (ø)` | |; | [phi/math/backend/\_optim.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-cGhpL21hdGgvYmFja2VuZC9fb3B0aW0ucHk=) | `96.55% <ø> (ø)` | |; | [phi/physics/advect.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-cGhpL3BoeXNpY3MvYWR2ZWN0LnB5) | `98.48% <ø> (+80.57%)` | :arrow_up: |; | [phi/torch/\_\_init\_\_.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-cGhpL3RvcmNoL19faW5pdF9fLnB5) | `100.00% <ø> (ø)` | |; | [tests/commit/math/test\_\_track.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-dGVzdHMvY29tbWl0L21hdGgvdGVzdF9fdHJhY2sucHk=) | `96.15% <ø> (ø)` | |; | [tests/commit/physics/test\_legacy.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-dGVzdHMvY29tbWl0L3BoeXNpY3MvdGVzdF9sZWdhY3kucHk=) | `100.00% <ø> (ø)` | |; | [phi/physics/\_fluid\_legacy.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-cGhpL3BoeXNpY3MvX2ZsdWlkX2xlZ2FjeS5weQ==) | `80.26% <33.33%> (-14.82%)` | :arrow_down: |; | [phi/field/\_mask.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree#diff-cGhpL2ZpZWxkL19tYXNrLnB5) | `87.09% <50.00%> (-1.37%)` | :arrow_down: |; | ... and [133 more](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29?src=pr&el=footer). Last update [6423fe0...f181f15](https://codecov.io/gh/tum-pbs/PhiFlow/pull/29?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/pull/29#issuecomment-789888293:2954,learn,learn,2954,,https://github.com/tum-pbs/PhiFlow/pull/29#issuecomment-789888293,1,['learn'],['learn']
Usability,"> burgers_sim.py is now too simple, maybe set some key word properties so they are more illustrative on what can be done when changing them. There are not a whole lot of parameters you can change. The viscosity is the only one that's not set, I think. The demo explicitly adds the `Burgers` physics which should make exploring the code rather straightforward. > Put renamings as separate commits to make them clearly visible in the history: Fan->Acceleator, CollectiveState->StateCollection, etc. I agree. I normally call these commits `Rename X to Y` but for the Fan, it's called `Deprecate 'Fan' in favor of 'Accelerator'`.",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/pull/5#issuecomment-578719554:28,simpl,simple,28,,https://github.com/tum-pbs/PhiFlow/pull/5#issuecomment-578719554,2,"['clear', 'simpl']","['clearly', 'simple']"
Usability,"Aha, that fixed it! So I have a follow up question with staggered_grid, it's outputting a 65^3 grid [in my case it's 64^3 for density] . I assume the extra cell is covering the overlaps once you resample to a uniform grid. I'm curious if it's always going to be dim+1, or if there's something simple I'm overlooking. I can always resample again to 64^3 but wondering if there's a better way to make sure I can export my densities and velocities from sims at the same resolution.",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/38#issuecomment-921080448:293,simpl,simple,293,,https://github.com/tum-pbs/PhiFlow/issues/38#issuecomment-921080448,1,['simpl'],['simple']
Usability,"As a workaround, you could simply define; ```python; def transpose(x, order='y,x'):; return wrap(x.native(order), x.shape[order]); ```",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/150#issuecomment-1890973574:27,simpl,simply,27,,https://github.com/tum-pbs/PhiFlow/issues/150#issuecomment-1890973574,1,['simpl'],['simply']
Usability,"For multi-colored point clouds, you would have to pass a list of PointClouds or functions generating PointClouds.; How about making `color` a `Tensor` instead?; Then merging clouds boils down to concatenating points, values and colors. Plotting also becomes simpler with less possible errors.; I just pushed support for string tensors: 382b481fe40bab4cd4a54bf55b018122b818b5e2",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/pull/25#issuecomment-770234551:258,simpl,simpler,258,,https://github.com/tum-pbs/PhiFlow/pull/25#issuecomment-770234551,1,['simpl'],['simpler']
Usability,"Great, thanks! I actually did it half-manually: finding them using `ast` and solving them with regex + manual checking. I slightly underestimated the scale of the refactor... I think these kinds of replacements could be done quite effectively if there was some automatic code styling applied!. @holl- Would you be positive about using applying linter and codeformatter like `black`/`flake8`? I think `ruff` is a really neat all-in-one and fast implementation maintaining these style guides. I'm happy to contribute it, and we can surely change all the parameters to something that contributors find pleasing. It would autorun on git commit.",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/pull/122#issuecomment-1513825690:483,guid,guides,483,,https://github.com/tum-pbs/PhiFlow/pull/122#issuecomment-1513825690,1,['guid'],['guides']
Usability,"Have a look at the [FLIP demo](https://github.com/tum-pbs/PhiFlow/blob/master/demos/flip_liquid.py) which uses particles.; There is currently no efficient way to handle neighbor search for particles but we are working on it. If you don't need more than say 20k particles, you can compute the full distance matrix. See the [solar system demo](https://tum-pbs.github.io/PhiFlow/Planets_Tutorial.html) for simple particle-particle interactions.",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/77#issuecomment-1233560714:403,simpl,simple,403,,https://github.com/tum-pbs/PhiFlow/issues/77#issuecomment-1233560714,1,['simpl'],['simple']
Usability,"Hey, that's a great idea! We might integrate this with the `Mesh` class from Φ-Flow which allows for cells (polygons) with arbitrarily many points. Here is some example code to create a 2D triangle:. ```python; from phi.flow import *. points = [(0, 0), (1, 0), (0, 1)]; polygons = [(0, 1, 2)]; boundaries = {'outer': [(0, 1), (1, 2), (2, 0)]}; mesh = geom.mesh_from_numpy(points, polygons, boundaries); show(mesh); ```. Having a simple interface with shapely would be neat. What functions specifically would you need?",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/174#issuecomment-2334255759:429,simpl,simple,429,,https://github.com/tum-pbs/PhiFlow/issues/174#issuecomment-2334255759,1,['simpl'],['simple']
Usability,"Hi Nikolai,. Thanks for your feedback!; Unfortunately we don't have anyone with a lot of experience in PyTorch in our group, so we don't yet have advanced tests. I'll look into the error shortly and post a fix. Best,; Philipp",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/14#issuecomment-607752895:29,feedback,feedback,29,,https://github.com/tum-pbs/PhiFlow/issues/14#issuecomment-607752895,1,['feedback'],['feedback']
Usability,"Hi, thanks for the feedback!. You can do a couple of things. * Use [`math.print_gradient()`](https://tum-pbs.github.io/PhiFlow/phi/math/index.html#phi.math.print_gradient) to see what the gradient is at different stages of your graph.; * Use a [`math.SolveTape()`](https://tum-pbs.github.io/PhiFlow/phi/math/index.html#phi.math.SolveTape) to record the linear solves from the backward pass.; * Use [`phi.set_logging_level()`](https://tum-pbs.github.io/PhiFlow/phi/#phi.set_logging_level) to enable debug prints. Hope that helps! Let me know if the error persists.",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/129#issuecomment-1643677805:19,feedback,feedback,19,,https://github.com/tum-pbs/PhiFlow/issues/129#issuecomment-1643677805,1,['feedback'],['feedback']
Usability,"Hi,. thanks for your help. I am trying to learn how to use Phiflow and haven't done calculus for a while, so sorry if some of questions might seem trivial. I am trying to set up a simulation for a 1D wave equation using Neumann boundary conditions, with a Gaussian bell as initial starting conditions. My code for a normal finite element simulation is as follows:. ```; import numpy as np; import matplotlib.pyplot as plt; import copy. #Initial Condition; sigma = 0.5; c = 1. #Domain Specification; x_length = 5.; dx = 0.1; nx = int(x_length / dx). #Time Specification; t_length = 250; dt = 0.1; nt = int(t_length / dt). #Arrays for calculating solution; u_n_plus_1 = np.zeros(nx); u_n = np.zeros(nx); u_n_minus_1 = np.zeros(nx). #Initial conditions; for x in range(len(u_n)):; u_n[x] = np.exp(-0.5*((x*dx - x_length/2)/sigma)**2); u_n[0] = 0; u_n[-1] = 0. u_n_minus_1 = copy.deepcopy(u_n). u_n_hist = []; u_n_hist.append(u_n). ## Time Stepping; for t in range(1, nt):; for x in range(1, nx-1):; u_n_plus_1[x] = 2*u_n[x] - u_n_minus_1[x] + (c * dt / dx)**2 * (u_n[x+1] - 2*u_n[x] + u_n[x-1]). u_n_minus_1 = copy.deepcopy(u_n); u_n = copy.deepcopy(u_n_plus_1). u_n_hist.append(u_n). fig, axs = plt.subplots(2, 2); axs[0, 0].plot(u_n_hist[0]); axs[0, 1].plot(u_n_hist[int(nt/4)]); axs[1, 0].plot(u_n_hist[int(3*nt/4)]); axs[1, 1].plot(u_n_hist[-1]). axs[0, 0].set_title(""Initial Condition""); axs[0, 1].set_title(""T = "" + str(int(nt/4)*dx)); axs[1, 0].set_title(""T = "" + str(3*int(nt/4)*dx)); axs[1, 1].set_title(""T = "" + str(t_length)). plt.tight_layout(); plt.show(); ```. Now, I'm trying to replicate [this](https://physicsbaseddeeplearning.org/physicalloss-code.html) in the PBDL book, i.e. build a NN that takes in ```x``` and ```t``` as inputs and returns ```u```. As a first step, I thought of getting a Phiflow only simulation running, then adding a NN later. To that end, I'm trying to get a Phiflow only simulation going with the following code:. ```; from phi.flow import *; import numpy as np",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/59#issuecomment-1127631065:42,learn,learn,42,,https://github.com/tum-pbs/PhiFlow/issues/59#issuecomment-1127631065,1,['learn'],['learn']
Usability,"I can run the *Higher-order Fluid Simulations* notebook in Colab without error. You are talking about this cell, right?; ```python; v0 = StaggeredGrid(0, **DOMAIN); p0 = CenteredGrid(0, **DOMAIN); multi_step = lambda *x, **kwargs: iterate(rk4_step, 25, *x, **kwargs); v_trj, p_trj = iterate(multi_step, batch(time=2), v0, p0, dt=0.005, range=trange); vis.plot(field.curl(v_trj.with_extrapolation(0)), animate='time'); ```; That cell should show a progress bar. Does that show up?. Could you try running; ```bash; !pip uninstall phiflow phiml; !pip install phiflow; ```; and restarting your runtime?",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/145#issuecomment-1823557821:447,progress bar,progress bar,447,,https://github.com/tum-pbs/PhiFlow/issues/145#issuecomment-1823557821,1,['progress bar'],['progress bar']
Usability,I've pushed a fix to `2.3-develop`. Your original version should now work after removing the line `fluid.masked_laplace.tracers.clear()`.; Install 2.3-develop by running; ```; $ pip install --upgrade git+https://github.com/tum-pbs/PhiFlow@2.3-develop; ```,MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/106#issuecomment-1425806449:128,clear,clear,128,,https://github.com/tum-pbs/PhiFlow/issues/106#issuecomment-1425806449,1,['clear'],['clear']
Usability,"Interesting. Thanks for the update @holl- ; I am learning that I should be probably tracking the 2.2 branch. ; Side question: Would it be wise to track the 2.2-dev or 2.2.0 branches?. FWIW, interactive jupyter notebook graphics have never seemed like they were worth the effort to me (I'm not saying they are not valuable, but rather that the effort is very high); if I get my problem solved I'll try to submit a pull request to document your advice",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/67#issuecomment-1173219145:49,learn,learning,49,,https://github.com/tum-pbs/PhiFlow/issues/67#issuecomment-1173219145,1,['learn'],['learning']
Usability,It looks like the `step` function is being traced every time because the `velocity` boundary varies each time. I'll look into it. A simple workaround would be to pass the boundary condition value as a tensor and set the boundary condition inside the function.,MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/154#issuecomment-1935073236:132,simpl,simple,132,,https://github.com/tum-pbs/PhiFlow/issues/154#issuecomment-1935073236,1,['simpl'],['simple']
Usability,"Most of the code should already adhere to the guidelines but we [explicitly make exceptions](https://github.com/tum-pbs/PhiFlow/blob/master/CONTRIBUTING.md#style-guide) with some rules. Is there anything in particular that you would change?. Generally, I think it would be a good idea to add a tool like `ruff` to auto-run but I don't want it to screw up the formatting we have. This should go into `2.4-develop`, though.",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/pull/122#issuecomment-1514625829:46,guid,guidelines,46,,https://github.com/tum-pbs/PhiFlow/pull/122#issuecomment-1514625829,2,['guid'],"['guide', 'guidelines']"
Usability,"Sorry to put it in comment of this issue but I haven't found an email adress to send you my python file.; For the bug to occur, simply comment l.33 and uncomment l.35 or l.36. ; The thrown error is the one I copied in the first message. My PhiFlow version : ; phiflow @ git+https://github.com/tum-pbs/PhiFlow@128d0809675b0be370c37d260ad19dae64a7d22e; My backend : JAX",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/110#issuecomment-1441940306:128,simpl,simply,128,,https://github.com/tum-pbs/PhiFlow/issues/110#issuecomment-1441940306,1,['simpl'],['simply']
Usability,"Thank you for testing the latest version!; The error is in the line `buoyancy_force = smoke * (0, 0.5) >> velocity` where the scalar `smoke` field is converted to a vector field. In 3D, it needs 3 components, e.g. `smoke * (0, 0, 0.5)`.; I'll make the error message clearer. In Google Colab, the fixed version seems to freeze but it runs fine on my machine. Can you confirm this?",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/37#issuecomment-874340175:266,clear,clearer,266,,https://github.com/tum-pbs/PhiFlow/issues/37#issuecomment-874340175,1,['clear'],['clearer']
Usability,"Thank you for your feedback!. 1. The `@` operator is being phased out in 2.3. You can already replace it by `arg1.at(arg2)`. I'll revisit the documentation of the geometry masks.; 2. Good idea, I've pushed this to `2.3-develop`. It will now also accept single Geometry or Obstacle values.; 3. Obstacles specifically are only used by the `fluid` module. Other modules use `Geometry`. Obstacles extend Geometry by a velocity vector and rotation speed which only makes sense in fluid-like settings. If you run into any other strange behavior or missing documentation, let me know!",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/103#issuecomment-1411096142:19,feedback,feedback,19,,https://github.com/tum-pbs/PhiFlow/issues/103#issuecomment-1411096142,1,['feedback'],['feedback']
Usability,"Thank you very much for your reply. Your explanation was clear, and I will try your suggestion. By the way, I was wondering if you could recommend any documentation or resources for me to learn more about this type of usage. The document is quite brief and doesn't provide enough information for me to solve problems like this in the future. For instance, if I need to set a complex boundary condition, I wouldn't have thought to use the method you suggested. The only approach I found in the document was to use extrapolation.combine_sides in the pipe.py example.",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/121#issuecomment-1509902854:57,clear,clear,57,,https://github.com/tum-pbs/PhiFlow/issues/121#issuecomment-1509902854,2,"['clear', 'learn']","['clear', 'learn']"
Usability,"That makes sense. I'm happy to approve the merge as soon as this behavior is documented since it is both new in this version and not intuitive, but powerful once understood.",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/pull/10#issuecomment-586942227:133,intuit,intuitive,133,,https://github.com/tum-pbs/PhiFlow/pull/10#issuecomment-586942227,1,['intuit'],['intuitive']
Usability,"The reason for the order switch was external forces. Without them the order doesn't make much of a difference but in the presence of non-smooth forces, semi-Lagrangian advection without prior diffusion can cause artifacts. A different advection scheme might not have this problem. If the reversed order suits your case better, feel free to create a custom Physics class or simply call `diffuse` and `advect` in the order you like.",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/24#issuecomment-753984963:373,simpl,simply,373,,https://github.com/tum-pbs/PhiFlow/issues/24#issuecomment-753984963,1,['simpl'],['simply']
Usability,"Unfortunately this does not compile:; ; Traceback (most recent call last):; File ""/home/flow_control/moving_obstacle.py"", line 15, in <module>; velocity, pressure = step(velocity, object); File ""/usr/local/lib/python3.8/dist-packages/phi/math/_functional.py"", line 194, in __call__; self.traces[key] = self._jit_compile(key); File ""/usr/local/lib/python3.8/dist-packages/phi/math/_functional.py"", line 171, in _jit_compile; PHI_LOGGER.debug(f""Φ-jit: '{f_name(self.f)}' called with new key. shapes={[s.volume for s in in_key.shapes]}, args={in_key.tree}""); File ""/usr/local/lib/python3.8/dist-packages/phi/geom/_box.py"", line 298, in __repr__; if self.shape.non_channel.volume == 1:; AttributeError: 'NoneType' object has no attribute 'non_channel' . ```; from phi.tf.flow import *. DOMAIN = dict(x=30, y=30); DT = 0.1; object = Box(x=(5, 11), y=(10, 16)). @math.jit_compile; def step(velocity, object_geometry):; obstacle = Obstacle(object_geometry, velocity=[1., 0], angular_velocity=tensor(0, )); velocity = advect.mac_cormack(velocity, velocity, DT); velocity, pressure = fluid.make_incompressible(velocity, (obstacle,)); return velocity, pressure. velocity = StaggeredGrid(0, extrapolation.ZERO, **DOMAIN); velocity, pressure = step(velocity, object); obstacle_mask = HardGeometryMask(object) @ pressure. def move_obstacle(geometry):; if (geometry.center[0]) > 35:; new_geometry = Box(x=(-6, 0), y=(10, 16)); else:; new_geometry = geometry.shifted([1. * DT, 0]); return new_geometry. for _ in view(velocity, obstacle_mask, play=True, namespace=globals(), port=6006).range():; object = move_obstacle(object); velocity, pressure = step(velocity, object); fluid.masked_laplace.tracers.clear() # we will need to retrace because the matrix changes each step. This is not needed when JIT-compiling the physics.; obstacle_mask = HardGeometryMask(object) @ pressure; ```",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/106#issuecomment-1425282469:1686,clear,clear,1686,,https://github.com/tum-pbs/PhiFlow/issues/106#issuecomment-1425282469,1,['clear'],['clear']
Usability,"What about seeding the Noise? Maybe I'm looking to generate random inflows of velocity - can you show a simple example of one? Adding randomized ones together is trivial enough, but not sure if there's some shortcuts to deal w/velocity inflows. Like can I create noise spheres to act as emitters on the velocity field?",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/41#issuecomment-929676154:104,simpl,simple,104,,https://github.com/tum-pbs/PhiFlow/issues/41#issuecomment-929676154,1,['simpl'],['simple']
Usability,"You can use the GPU even without the custom CUDA kernels. If you get either TensorFlow, PyTorch or Jax to recognize the GPU, you can simply select that backend using the corresponding `phi.<backend>.flow` import and you're good to go. You can check whether the GPU is recognized using; ```python; import phi; phi.verify(); ```",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/119#issuecomment-1505181376:133,simpl,simply,133,,https://github.com/tum-pbs/PhiFlow/issues/119#issuecomment-1505181376,1,['simpl'],['simply']
Usability,You could try the following:; * Run your script inside Google colab where `ffmpeg` is pre-installed.; * Test a simple matplotlib to mp4 demo script from their documentation,MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/133#issuecomment-1673443410:111,simpl,simple,111,,https://github.com/tum-pbs/PhiFlow/issues/133#issuecomment-1673443410,1,['simpl'],['simple']
Usability,"im, width in widths.items():; values = []; if width[False] > 0:; edge_normal = self.flow[{dim: 0, 'vector': dim}]; edge_normal = ZERO_GRADIENT.pad(edge_normal, already_padded); values.append(expand(edge_normal < 0, shape(self.flow)[dim].with_size(width[False]))); values.append(result); if width[True] > 0:; edge_normal = self.flow[{dim: -1, 'vector': dim}]; edge_normal = ZERO_GRADIENT.pad(edge_normal, already_padded); values.append(expand(edge_normal > 0, shape(self.flow)[dim].with_size(width[True]))); result = concat(values, dim); already_padded[dim] = width; return result. def __abs__(self):; return InOutConditionalExtrapolation(self.flow, abs(self.in_ext), abs(self.out_ext)). def __neg__(self):; return InOutConditionalExtrapolation(self.flow, -self.in_ext, -self.out_ext). def __add__(self, other):; return InOutConditionalExtrapolation(self.flow, self.in_ext + other, self.out_ext + other). def __radd__(self, other):; return InOutConditionalExtrapolation(self.flow, other + self.in_ext, other + self.out_ext). def __sub__(self, other):; return InOutConditionalExtrapolation(self.flow, self.in_ext - other, self.out_ext - other). def __rsub__(self, other):; return InOutConditionalExtrapolation(self.flow, other - self.in_ext, other - self.out_ext). def __mul__(self, other):; return InOutConditionalExtrapolation(self.flow, self.in_ext * other, self.out_ext * other). def __rmul__(self, other):; return InOutConditionalExtrapolation(self.flow, other * self.in_ext, other * self.out_ext). def __truediv__(self, other):; return InOutConditionalExtrapolation(self.flow, self.in_ext / other, self.out_ext / other). def __rtruediv__(self, other):; return InOutConditionalExtrapolation(self.flow, other / self.in_ext, other / self.out_ext); ```. Here is a simple test script:. ```python; v = CenteredGrid(Noise(vector='x,y'), x=32, y=32); scalar = CenteredGrid(2, InOutConditionalExtrapolation(v.values, 0, 1), x=32, y=32); padded = field.pad(scalar, 10); show(v, padded, overlay='args'); ```",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/issues/138#issuecomment-1700960001:4064,simpl,simple,4064,,https://github.com/tum-pbs/PhiFlow/issues/138#issuecomment-1700960001,1,['simpl'],['simple']
Usability,"io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-cGhpL190cm91Ymxlc2hvb3QucHk=) | `61.05% <ø> (ø)` | |; | [phi/field/\_\_init\_\_.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-cGhpL2ZpZWxkL19faW5pdF9fLnB5) | `100.00% <ø> (ø)` | |; | [phi/jax/\_\_init\_\_.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-cGhpL2pheC9fX2luaXRfXy5weQ==) | `100.00% <ø> (ø)` | |; | [phi/math/backend/\_\_init\_\_.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-cGhpL21hdGgvYmFja2VuZC9fX2luaXRfXy5weQ==) | `100.00% <ø> (ø)` | |; | [tests/commit/math/test\_\_functions.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-dGVzdHMvY29tbWl0L21hdGgvdGVzdF9fZnVuY3Rpb25zLnB5) | `99.79% <ø> (+0.30%)` | :arrow_up: |; | [tests/commit/math/test\_\_nd.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-dGVzdHMvY29tbWl0L21hdGgvdGVzdF9fbmQucHk=) | `100.00% <ø> (+16.39%)` | :arrow_up: |; | [tests/commit/math/test\_\_shape.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-dGVzdHMvY29tbWl0L21hdGgvdGVzdF9fc2hhcGUucHk=) | `100.00% <ø> (ø)` | |; | [tests/commit/math/test\_\_trace.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree#diff-dGVzdHMvY29tbWl0L21hdGgvdGVzdF9fdHJhY2UucHk=) | `100.00% <ø> (ø)` | |; | ... and [110 more](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31?src=pr&el=footer). Last update [f181f15...dfdb433](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/pull/31#issuecomment-801031364:2965,learn,learn,2965,,https://github.com/tum-pbs/PhiFlow/pull/31#issuecomment-801031364,1,['learn'],['learn']
Usability,"nts&utm_term=None)](https://codecov.io/gh/tum-pbs/PhiFlow/pull/47?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None). ```diff; @@ Coverage Diff @@; ## master #47 +/- ##; =======================================; Coverage 86.34% 86.34% ; =======================================; Files 104 104 ; Lines 12417 12419 +2 ; =======================================; + Hits 10721 10723 +2 ; Misses 1696 1696 ; ```. | [Impacted Files](https://codecov.io/gh/tum-pbs/PhiFlow/pull/47?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |; |---|---|---|; | [phi/torch/\_torch\_backend.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/47/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-cGhpL3RvcmNoL190b3JjaF9iYWNrZW5kLnB5) | `90.98% <100.00%> (+0.02%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/tum-pbs/PhiFlow/pull/47?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/tum-pbs/PhiFlow/pull/47?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None). Last update [c080b72...8208c38](https://codecov.io/gh/tum-pbs/PhiFlow/pull/47?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None).",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/pull/47#issuecomment-961776449:2078,learn,learn,2078,,https://github.com/tum-pbs/PhiFlow/pull/47#issuecomment-961776449,1,['learn'],['learn']
Usability,"ull/31/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-cGhpL21hdGgvYmFja2VuZC9fcHJvZmlsZS5weQ==) | `81.48% <ø> (-2.40%)` | :arrow_down: |; | [phi/math/extrapolation.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-cGhpL21hdGgvZXh0cmFwb2xhdGlvbi5weQ==) | `86.79% <ø> (+4.34%)` | :arrow_up: |; | [phi/physics/\_boundaries.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-cGhpL3BoeXNpY3MvX2JvdW5kYXJpZXMucHk=) | `85.29% <ø> (-4.00%)` | :arrow_down: |; | ... and [158 more](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None). Last update [cc87c58...7f5349f](https://codecov.io/gh/tum-pbs/PhiFlow/pull/31?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None).",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/pull/31#issuecomment-823029108:4757,learn,learn,4757,,https://github.com/tum-pbs/PhiFlow/pull/31#issuecomment-823029108,1,['learn'],['learn']
Usability,"v.io/gh/tum-pbs/PhiFlow/pull/43/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-cGhpL21hdGgvX3RlbnNvcnMucHk=) | `85.81% <66.27%> (-1.75%)` | :arrow_down: |; | [phi/\_troubleshoot.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/43/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-cGhpL190cm91Ymxlc2hvb3QucHk=) | `47.10% <66.66%> (+1.44%)` | :arrow_up: |; | [phi/field/\_field.py](https://codecov.io/gh/tum-pbs/PhiFlow/pull/43/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-cGhpL2ZpZWxkL19maWVsZC5weQ==) | `89.69% <66.66%> (-1.67%)` | :arrow_down: |; | ... and [77 more](https://codecov.io/gh/tum-pbs/PhiFlow/pull/43/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/tum-pbs/PhiFlow/pull/43?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/tum-pbs/PhiFlow/pull/43?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None). Last update [b6186fd...58f43eb](https://codecov.io/gh/tum-pbs/PhiFlow/pull/43?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None).",MatchSource.ISSUE_COMMENT,tum-pbs,PhiFlow,3.1.0,https://github.com/tum-pbs/PhiFlow/pull/43#issuecomment-924793166:4760,learn,learn,4760,,https://github.com/tum-pbs/PhiFlow/pull/43#issuecomment-924793166,1,['learn'],['learn']
