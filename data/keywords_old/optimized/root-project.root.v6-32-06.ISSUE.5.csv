quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Energy Efficiency,"Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup.; ; This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1632:409,adapt,adapted,409,https://root.cern,https://github.com/root-project/root/pull/1632,2,"['adapt', 'reduce']","['adapted', 'reduce']"
Energy Efficiency,Enable an ATLAS use case where the reading pattern is to read one specific entry of one specific field into a previously allocated memory location. Using the RNTupleView ensures only that field is actually read from disk. @Nowakus FYI,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14849:121,allocate,allocated,121,https://root.cern,https://github.com/root-project/root/pull/14849,1,['allocate'],['allocated']
Energy Efficiency,Exceptions thrown in an event loop are caught to print a message. This catch block is leveraged to finalize all scheduled actions in order to properly deallocate memory where needed and save the partial results which are obtained. # This Pull request:; Is work in progress and lacks a test battery; ## Changes or fixes:; Allows to finalize actions scheduled in a RDF analysis in case an exception is thrown during the event loop. ## Checklist:. - [V] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #10484,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13546:112,schedul,scheduled,112,https://root.cern,https://github.com/root-project/root/pull/13546,3,"['battery', 'schedul']","['battery', 'scheduled']"
Energy Efficiency,"Extension of the DNN implementation with weighting of training samples according to event weights for all backends (Reference, CPU, Cuda). Adapted and extended tests to cover new functionality. . Also removes one previously unused file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/738:139,Adapt,Adapted,139,https://root.cern,https://github.com/root-project/root/pull/738,1,['Adapt'],['Adapted']
Energy Efficiency,"First introduced by #5083, a mechanism was put in place to build PyROOT for both Python 2 and Python 3. As Python 2 is not supported anymore by ROOT, this patch can be reverted. This helps to get again closer with upstream cppyy and CPyCppyy, avoids setting environment variables when importing ROOT, and reduces overhead in importing the ROOT module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14703:305,reduce,reduces,305,https://root.cern,https://github.com/root-project/root/pull/14703,1,['reduce'],['reduces']
Energy Efficiency,Fix RLogger interface in CEF and Qt5 adapters,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6959:37,adapt,adapters,37,https://root.cern,https://github.com/root-project/root/pull/6959,1,['adapt'],['adapters']
Energy Efficiency,"Fix ROOT-10837 (and technically it is a completion of the fix for ROOT-9393).; See allow commit f8897bb49c2fc81e875a7fd70dec9f1f714e6398 and 6ad1a98455bec01ccfce6ea9ddde62154bedf1a4. Seen with CMS NanoAOD files: https://root-forum.cern.ch/t/merge-nanoaod-root-files/39707/13; When the files have several array branches using the same ""leaf count"" branch and the maximum array size increase from file to file, only the memory allocated for the ""first"" array is extended. This results in memory error for the other arrays.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5844:425,allocate,allocated,425,https://root.cern,https://github.com/root-project/root/pull/5844,1,['allocate'],['allocated']
Energy Efficiency,Fix TList initialization and Merge() in Reduce,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/294:40,Reduce,Reduce,40,https://root.cern,https://github.com/root-project/root/pull/294,1,['Reduce'],['Reduce']
Energy Efficiency,"Fix a memory leak (only present in master, not in 6.10) that was hitting non-jitted actions. The shared_ptr-on-the-heap trick is only needed for jitted actions,; but we were using it for all of them -- forgetting to delete the; shared_ptr in the non-jitted case. Now only the code path with jitting makes use of the heap-allocated; shared_ptr, removing the leak.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/756:321,allocate,allocated,321,https://root.cern,https://github.com/root-project/root/pull/756,1,['allocate'],['allocated']
Energy Efficiency,"Fix allocated memory size in TBufferXML, TBufferSQL2 methods",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7521:4,allocate,allocated,4,https://root.cern,https://github.com/root-project/root/pull/7521,1,['allocate'],['allocated']
Energy Efficiency,Fix unwind info relocation with large code model on PowerPC and AArch64 [v6.20],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7608:52,Power,PowerPC,52,https://root.cern,https://github.com/root-project/root/pull/7608,1,['Power'],['PowerPC']
Energy Efficiency,Fix unwind info relocation with large code model on PowerPC and AArch64 [v6.22],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7607:52,Power,PowerPC,52,https://root.cern,https://github.com/root-project/root/pull/7607,1,['Power'],['PowerPC']
Energy Efficiency,"Fixes #6345 . This PR changes the way base-class protected methods are handled in the; Dispatcher class in cross inheritance. Instead of exposing them with a ""using""; declaration in the Dispatcher class, they are redeclared and the call is forwarded; to the base class. This prevents the issues described in #6345 , when:; - There is more than one protected overload of a method; - There is a protected and a private overload of a method. Adapted from cppyy's:; https://bitbucket.org/wlav/cpycppyy/commits/1f158f4ad7cbe9951f43d24a217e60c009dd046c. for the case of just one base class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6994:439,Adapt,Adapted,439,https://root.cern,https://github.com/root-project/root/pull/6994,1,['Adapt'],['Adapted']
Energy Efficiency,Fixes #6376. The previous way of calculating the offset was causing a corruption in a multi-inheritance case (described in #6376). Adapted from:; https://bitbucket.org/wlav/cpycppyy/commits/7d9eb4a170ff9e3da9569232ba76ef59c9ee72fd; since CPPConstructor.cxx has changed since last update.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6434:131,Adapt,Adapted,131,https://root.cern,https://github.com/root-project/root/pull/6434,1,['Adapt'],['Adapted']
Energy Efficiency,"Fixes #6470 . Fix how the inheritance hierarchy is constructed when there's more; than one level of cross-inheritance, for example C++ class ->; Py class 1 -> Py class 2. In the example, the C++ Dispatcher class; of Py class 2 should inherit from the Dispatcher class of Py class 1,; and not directly from the base C++ class. This was causing an; undesired behaviour in the resolution of some virtual calls, as; shown in the reproducer of 6470. This PR is an adaptation of the code that is in upstream; cppyy, but it does not incorporate yet all the changes for; multiple cross-inheritance (i.e. a Python class that inherits; from more than one C++ class). Multiple cross-inheritance was; anyway not supported in old PyROOT, and its current implementation; in cppyy does not seem to support the inheritance from both a pure; Python class and a C++ class at the same time (even via the use; of cppyy.multi), and that case was supported in the old PyROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7022:459,adapt,adaptation,459,https://root.cern,https://github.com/root-project/root/pull/7022,1,['adapt'],['adaptation']
Energy Efficiency,"Fixes the nightly failure. I could not have anticipated this, because the PR tests of the PR that caused the regression were just fine:; https://github.com/root-project/root/actions/runs/8426692299. It seems the build configuration of the scheduled builds in inconsistent with the PR builds: it misses `mathmore=ON`. Follows up on https://github.com/root-project/root/pull/14743.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15058:239,schedul,scheduled,239,https://root.cern,https://github.com/root-project/root/pull/15058,1,['schedul'],['scheduled']
Energy Efficiency,"Following the changes for Win64, adapt the example in the documentation to use the proper `Longptr_t` type. Thanks @Sergey Linev",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8411:33,adapt,adapt,33,https://root.cern,https://github.com/root-project/root/pull/8411,1,['adapt'],['adapt']
Energy Efficiency,"For example:. class Rho: public TObject; {; public:; Float_t Rho; // rho energy density; Float_t Edges[2]; // pseudorapidity range edges. ClassDef(Rho, 1); };. This leads to a compilation error when doing. THashConsistencyHolder<name>. and lead to. error: template argument for template type parameter must be a type. because in that context the data member hid the class name; So we now do. THashConsistencyHolder<decltype(*this)>",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1207:73,energy,energy,73,https://root.cern,https://github.com/root-project/root/pull/1207,1,['energy'],['energy']
Energy Efficiency,"For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected; * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr); * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5603:743,power,powerful,743,https://root.cern,https://github.com/root-project/root/pull/5603,1,['power'],['powerful']
Energy Efficiency,"For the file backend only, map identical pages within a cluster to the same locator. That effectively de-duplicates identical pages on disk (not in memory though). . As a result, reading code has to be able to deal with pages that don't necessarily reference pair-wise distinct byte ranges. This is difficult to combine with the DAOS caging feature. Same page merging needs explicit support from the backend and is turned off for the DAOS backend. For the nanoAOD and ATLAS OpenData samples, same page merging reduces the file size by about 3.5%.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15961:510,reduce,reduces,510,https://root.cern,https://github.com/root-project/root/pull/15961,1,['reduce'],['reduces']
Energy Efficiency,"From a high-level perspective, this PR does two things:; * It converts the LCG state back to RANLUX numbers to avoid a bias in the generated numbers as reported by Martin Lüscher. This comes from the fact that the modulus `m = 2 ** 576 - 2 ** 240 + 1` is not a power of 2, so just treating the LCG state as a pool of entropy means that the upper `576 - 240 = 336` bits have a higher probability of being 0 than 1.; * Extract only 48 bits instead of 52 bits per random number. This restores the connection to the theoretical properties derived from understanding the original subtract-with-borrow recursion as a dynamical system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8293:261,power,power,261,https://root.cern,https://github.com/root-project/root/pull/8293,1,['power'],['power']
Energy Efficiency,"Fully exclude source directory from include paths - for dictionary generation and for objects compilation. Significantly reduce list of dirs in CXX flags.; Makes dependency files very clear - `${CMAKE_BINARY_DIR}/include` used in 99%, rest are special includes from `res/` subfolders.; Tested with and without cxx modules",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5170:121,reduce,reduce,121,https://root.cern,https://github.com/root-project/root/pull/5170,1,['reduce'],['reduce']
Energy Efficiency,Further improvements to reduce lock contention,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919:24,reduce,reduce,24,https://root.cern,https://github.com/root-project/root/pull/6919,1,['reduce'],['reduce']
Energy Efficiency,Further reduce code duplication of the NLL and chi-square minimization paths.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13662:8,reduce,reduce,8,https://root.cern,https://github.com/root-project/root/pull/13662,1,['reduce'],['reduce']
Energy Efficiency,"Further reduction in lock contention when using RDataFrame with a large number of threads and/or files, by migrating one hot spot in TBufferFile to use read-write locks instead of only write locks. On a small test with 256 threads the reduced lock contention reduces wall time from 25 minutes to 19 seconds, and increases CPU usage from 400% to 4000%. This PR also fixes an uninitialised variable potentially affecting the global read-write lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7105:235,reduce,reduced,235,https://root.cern,https://github.com/root-project/root/pull/7105,2,['reduce'],"['reduced', 'reduces']"
Energy Efficiency,HeaderSearch consumes considerable wallclock time and memory for ATLAS; this should reduce it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3437:84,reduce,reduce,84,https://root.cern,https://github.com/root-project/root/pull/3437,1,['reduce'],['reduce']
Energy Efficiency,"Hello, . I would like to report that the `hadd` command is consuming a large amount of RAM when hadding input files that have several TDirectories. ; The memory is increasing linearly as the directories are processed by the hadd command. . I think (I did not tested it fully), by looking at the `TFileMerger` class it seems the `target` directory is not deleted after having called ; ```c++; target->SaveSelf(kTRUE);; ```; I guess the issue is coming from that . **This becomes a real issue as if you have a lot of histograms stored in different directories (which is the case of our analysis) then the hadding command is killed on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: ; [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue ; Compilation and execution (it takes ~10 min to create the file) ; ```bash; g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs); ./createFile.exe; ``` ; --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms ; ; * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**; Compilation and execution ; ```bash; g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs); ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root ; ```; NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files ; ; A comparison with ; ```; hadd -f myOtherFile.root myFile.root ; ``` . Gives (see screen shots below): ; * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during the whole processing of directories) ; * `fasterCustomHadd` the RAM used is only **`~",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13531:757,consumption,consumption,757,https://root.cern,https://github.com/root-project/root/issues/13531,2,"['consumption', 'reduce']","['consumption', 'reduced']"
Energy Efficiency,"Hello, . When displaying several 3D objects the same canvas there is a problem, ; it was reported in old versions of ROOT ; https://root-forum.cern.ch/t/multiple-tgraph2d-in-a-single-plot/7409; and seems to be still there in the most recent versions. From my understanding, when two 3D objects do not have the same range hence axis when displaying them on the same canvas ROOT does not adapt them. ; Below is an example of something going wrong, I plot the parabola `x^2 + y^2` and as you can see on the plot the parabola takes negative values which is not possible. . <img width=""400"" alt=""frame_parabola"" src=""https://user-images.githubusercontent.com/29270790/99190276-e9a4bd80-2765-11eb-97e5-016d018dd6c6.png"">. This wrong display is because I plotted the TGraph2D on top of a frame with `z` values going from -10 to 10. ; But same would happen displaying two TGraph2D with different range I think as reported in the root forum. . Below is the code to reproduce the error, I execute it doing `root -l test_tgraph2d.cpp+`; ```C++; #include ""TStyle.h"" ; #include ""TH1.h""; #include ""TH2.h""; #include ""TH3F.h"" . #include ""TGraph.h"" ; #include ""TGraph2D.h"" ; #include ""TCanvas.h"" ; #include ""TView3D.h""; #include ""TAxis3D.h"" . #include<iostream> ; #include<vector> . double f( const double & x, const double & y); {; //return 1/(1+std::exp(-x)) * 1/(1+std::exp(-y)) ; . return x*x + y*y ; ; }. std::vector<double> linspace(; const double & vmin , ; const double & vmax , ; const unsigned int & npoints); {; // regular linspace ; double dx = (vmax - vmin)/double(npoints-1.) ; ; std::vector<double> vlinspace = {} ; ; for (unsigned int i = 0 ; i < npoints ; i++); {; vlinspace.push_back( vmin + double(i) * dx ) ; ; }. return vlinspace ;; }. void test_tgraph2d(); {; std::vector<double> ; vect_x , ; vect_y ;. vect_x = linspace(0.,10,100) ; ; vect_y = linspace(0.,10,100) ; . // nominal ; TGraph2D * gr = new TGraph2D( vect_x.size() * vect_y.size() ) ; ; gr->SetDirectory(0) ; . unsigned int iPoints= 0 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6811:386,adapt,adapt,386,https://root.cern,https://github.com/root-project/root/issues/6811,1,['adapt'],['adapt']
Energy Efficiency,"Hello,. I implemented the classes TLeafF16 and TLeafD32 which allow to store floating point values using the truncation methods from TBuffer. As the names imply one is meant for the Float16_t type and the other one for the Double32_t type. The letters to be used in the leaflist are the small letters f and d which sounds reasonable to me since the capital letters F and D are being used for the regular Float_t and Double_t datatypes. Furthermore a range for the datatypes can be specified using the syntax from the TStreamerElement::GetRange() function. To avaid conflicts with the declaration of array branches the range specifier has to be attached to the data type letter instead of the variable name. I tested the implementation locally and it is working very well. The file size is being significantly reduced using the Float16_t or Double32_t implementation instead of the usual ones. I think this is quite useful since even the precision of Float_t sometimes overshoots the requirements and occupies an unnecessarily large amount of memory. All the best,; Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3463:809,reduce,reduced,809,https://root.cern,https://github.com/root-project/root/pull/3463,1,['reduce'],['reduced']
Energy Efficiency,"Hello,. by default I use a display depth of 30 set e.g. via `/etc/X11/xorg.conf.d/90-monitor.conf`; ```; Section ""Monitor""; 	Identifier	""Internal Display""; 	[…]; EndSection. Section ""Screen""; 	Identifier	""Screen0""; 	Device		""…""; 	Monitor		""Internal Display""; 	DefaultDepth	30; EndSection; ```; Then, doing the following:; ```; $ root; root [0] TH1 *t = new TH1I(""test"", ""test"", 2, -.5, 1.5); (TH1 *) 0x…; root [1] t->Fill(1); (int) 2; root [2] t->Draw(); Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1; ```; In the window, that opens, I would expect to see axis labels, a stat box etc. This is not the case. If I save the histogram, the labels are visible. The labels are also visible, if I do not set the display depth to 30 (but instead X11 uses a default depth of 24). Could ROOT be fixed, to also handle different display depths then 24 gracefully?. Best regards.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8086:85,monitor,monitor,85,https://root.cern,https://github.com/root-project/root/issues/8086,3,"['Monitor', 'monitor']","['Monitor', 'monitor']"
Energy Efficiency,"Hello,. the bug this PR is adressing could be seen by random failures of the test gtest-hist-hist-test-TGraphMultiErrorsTests:; - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74654/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/; - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74449/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/; - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/73886/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. I have to apologize for this bug. It was caused by using an attribute to allocate an array before its value had been updated. All the best,; Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4780:651,allocate,allocate,651,https://root.cern,https://github.com/root-project/root/pull/4780,1,['allocate'],['allocate']
Energy Efficiency,"Here, HistFactory is streamlined a bit. The models are restructured from this:; [HFTest4_old.pdf](https://github.com/root-project/root/files/6466419/HFTest4_old.pdf). To this:; [HFTest4.pdf](https://github.com/root-project/root/files/6466420/HFTest4.pdf). The main difference is that first, all binned parts of the calculation are executed (in batches), and then all scale factors are applied to the fully interpolated binned distributions. This reduces the number of function calls and allows for non-uniform binning (ROOT-4958), since the bin width correction is not applied as the last step, but during the binned calculations. Further, prototypes of batch evaluations functions were added for all objects in HistFactory calculations. There are some possibilities for optimisations:; - [ ] ParamHistFunc::evaluateSpan always recalculates all indices; - [ ] RooBinIntegrator doesn't support multi-dimensional batch evaluations; - [ ] Auto-vectorisation should be checked, especially for performance-critical things like the piecewise interpolation; - [ ] Profiling with an example like in `testHistfactory` but with more bins should be done.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8167:446,reduce,reduces,446,https://root.cern,https://github.com/root-project/root/pull/8167,1,['reduce'],['reduces']
Energy Efficiency,Huge RAM consumption of the hadd command for input files with several directories,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13531:9,consumption,consumption,9,https://root.cern,https://github.com/root-project/root/issues/13531,1,['consumption'],['consumption']
Energy Efficiency,"I added an example that demonstrates how TH2F can be used for Quantum Mechanics. . In this example I plot the Amplitude (psi squared) of a Hydrogen Atom in the energy level n = 2, l = 0, m = 0. . This allows you to see where you are most- and least likely to find the Electron. . I accidentally added another file that does not belong here, so I reverted that commit. I hope that's not a problem.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7801:160,energy,energy,160,https://root.cern,https://github.com/root-project/root/pull/7801,1,['energy'],['energy']
Energy Efficiency,"I noticed that `roofit_legacy_eval_backend` variable in CMake was not; cached, and therefore it didn't propagate to the RooFit test; subdirectories. This meant several unit tests were not executed. This commit is fixing that. Furthermore, another commit in this PR reduces the time of the tutorial tests by reducing the number of toys in the RooStats tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14919:265,reduce,reduces,265,https://root.cern,https://github.com/root-project/root/pull/14919,1,['reduce'],['reduces']
Energy Efficiency,"I've preskimmed the files for df103, which is now reduced from 12GB to 51MB. The fast mode is enabled by default for the tutorials, though we can still run the full version in the benchmarks. The difference is simply the postfix `_skimmed` in the filepath.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5950:50,reduce,reduced,50,https://root.cern,https://github.com/root-project/root/pull/5950,1,['reduce'],['reduced']
Energy Efficiency,"INS1_13blocked_rangeIjEENS1_25parallel_for_body_wrapperISt8functionIFvjEEjEEKNS1_16auto_partitionerEE7executeERNS1_14execution_dataE]+0x498): undefined reference to `tbb::detail::r1::execution_slot(tbb::detail::d1::execution_data const*)'; /usr/bin/ld: TThreadExecutor.cxx:(.text._ZN3tbb6detail2d19start_forINS1_13blocked_rangeIjEENS1_25parallel_for_body_wrapperISt8functionIFvjEEjEEKNS1_16auto_partitionerEE7executeERNS1_14execution_dataE[_ZN3tbb6detail2d19start_forINS1_13blocked_rangeIjEENS1_25parallel_for_body_wrapperISt8functionIFvjEEjEEKNS1_16auto_partitionerEE7executeERNS1_14execution_dataE]+0x507): undefined reference to `tbb::detail::r1::allocate(tbb::detail::d1::small_object_pool*&, unsigned long, tbb::detail::d1::execution_data const&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text._ZN3tbb6detail2d19start_forINS1_13blocked_rangeIjEENS1_25parallel_for_body_wrapperISt8functionIFvjEEjEEKNS1_16auto_partitionerEE7executeERNS1_14execution_dataE[_ZN3tbb6detail2d19start_forINS1_13blocked_rangeIjEENS1_25parallel_for_body_wrapperISt8functionIFvjEEjEEKNS1_16auto_partitionerEE7executeERNS1_14execution_dataE]+0x58e): undefined reference to `tbb::detail::r1::allocate(tbb::detail::d1::small_object_pool*&, unsigned long, tbb::detail::d1::execution_data const&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text._ZN3tbb6detail2d19start_forINS1_13blocked_rangeIjEENS1_25parallel_for_body_wrapperISt8functionIFvjEEjEEKNS1_16auto_partitionerEE7executeERNS1_14execution_dataE[_ZN3tbb6detail2d19start_forINS1_13blocked_rangeIjEENS1_25parallel_for_body_wrapperISt8functionIFvjEEjEEKNS1_16auto_partitionerEE7executeERNS1_14execution_dataE]+0x5bc): undefined reference to `tbb::detail::r1::spawn(tbb::detail::d1::task&, tbb::detail::d1::task_group_context&)'; collect2: error: ld returned 1 exit status; make[2]: *** [core/imt/CMakeFiles/Imt.dir/build.make:201: lib/libImt.so] Error 1; make[1]: *** [CMakeFiles/Makefile2:33286: core/imt/CMakeFiles/Imt.dir/all] Error 2; make: *** [Makefile:156: all] Error 2; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11931:38304,allocate,allocate,38304,https://root.cern,https://github.com/root-project/root/issues/11931,1,['allocate'],['allocate']
Energy Efficiency,"If IMT is enabled, TThreadedObject should allocate as many slots as threads the pool has been set with. This PR will be updated with another default value for fgMaxSlots once PR https://github.com/root-project/root/pull/1018 has been agreed upon and merged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1019:42,allocate,allocate,42,https://root.cern,https://github.com/root-project/root/pull/1019,1,['allocate'],['allocate']
Energy Efficiency,"If a dictionary's headers are in the PCH, they get #includes at; startup. There is no need for forward declarations (to be parsed; at library load time) nor payloads (to be parsed at autoparsing time). This should reduce the effect we see with recursive parsing, and; speed up ROOT (e.g. but not only the startup).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1929:214,reduce,reduce,214,https://root.cern,https://github.com/root-project/root/pull/1929,1,['reduce'],['reduce']
Energy Efficiency,"If a node of the computation graph needs JITting, it will allocate objects on the heap which are only freed if the JITting happens. In case the computation graph is never triggered, previously the code to be JITted was not run. Fix it by making sure that at destruction time an RDataFrame calls the JIT compilation through its RLoopManager. Also, move to a better read/write locking with the more modern ROOT::gCoreMutex. Fixes https://github.com/root-project/root/issues/15399",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15400:58,allocate,allocate,58,https://root.cern,https://github.com/root-project/root/pull/15400,1,['allocate'],['allocate']
Energy Efficiency,"If an arena in the MemPoolForRooSets is not referenced anymore, it; should delete the memory it has allocated. This addresses GitHub issue https://github.com/root-project/root/issues/7933.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7935:100,allocate,allocated,100,https://root.cern,https://github.com/root-project/root/pull/7935,1,['allocate'],['allocated']
Energy Efficiency,"If browser executable were detected by cmake,; add `test-stressgraphics-chrome` and `test-stressgraphics-firefox` test. Analyze produced images by blocks - first run N tests and then check image sizes.; In web mode this allows to really use batch mode when up to 80 images produced with single browser call.; This reduce test execution time from 110 to 52 seconds, or even 43 seconds with firefox. Calculate web rootmark based on realtime - while most time spent in the browser execution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16610:314,reduce,reduce,314,https://root.cern,https://github.com/root-project/root/pull/16610,2,['reduce'],['reduce']
Energy Efficiency,"If fFormula already allocated, it should be released",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4899:20,allocate,allocated,20,https://root.cern,https://github.com/root-project/root/pull/4899,1,['allocate'],['allocated']
Energy Efficiency,"Implement parallel page compression using `RPageSinkBuf`. When it's time to commit the cluster, the buffered pages are passed to the task scheduler to be compressed. Each page is given a `RNTupleCompressor` which both handles the compression and serves as the compression scratch buffer. `RNTupleCompressor` was adjusted to take a user-provided size to avoid wasting memory for small pages (16MB was the fixed size).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8077:138,schedul,scheduler,138,https://root.cern,https://github.com/root-project/root/pull/8077,1,['schedul'],['scheduler']
Energy Efficiency,"Implement proper handling of canvas window size and canvas drawing area size. By default web browser with given window size/position will be started. Depending from context menu,; status line, other layout components drawing area will be reduced to some value and always adjust to that area. With the call `TCanvas::SetCanvasSize(width,height)` one can fix drawing area to exact value, which does not change with web browser resize. One can toggle state either with context menu or by calling ``c1->SetCanvasSize(0,0)`. All browser window position/size changes are reflected in the TCanvas members. Provide JSROOT with new resize logic, also includes support of TLatex in 3D plots",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13268:238,reduce,reduced,238,https://root.cern,https://github.com/root-project/root/pull/13268,1,['reduce'],['reduced']
Energy Efficiency,"Implement two improvements to the RNTuple RDF scheduler for the multi-threaded case:. 1. Files of a chain are opened in batches the background: while a batch of files (batch size == number of slots) is processed, the next batch is opened.; 2. For the tail scheduling (multiple slots sharing the same files), the clones of the page source pointing to the same file do not need to re-read meta-data (anchor, header, footer) again. The patch results in a speed improvement of about 10% for AGC, EOS cached, 32 cores.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15952:46,schedul,scheduler,46,https://root.cern,https://github.com/root-project/root/pull/15952,2,['schedul'],"['scheduler', 'scheduling']"
Energy Efficiency,"In 2003, in a possibly-misguided attempt to make compression faster, the entire contents of the built-in custom compression codec were converted from compilation targets to header files. This code, which is about 90% identical to `zlib`, had continuous additions throughout the years, including the code to invoke non-`zlib` based compression. With this patch, we have:. - `ZDeflate.c`/`ZInflate.c`/`ZTrees.c`/`Bits.c`/`ZIP.h`: Code related to the old compression functions.; - `Bits.h`: headers necessary to actually use the old compression functions.; - `RZip.{cxx,h}`: Modern headers that anything outside this package should use in order to invoke the C-style library functions.; - `Compression.h`: Enums defining the different compression levels. Additionally, we now force external callers to utilize the proper enum for the compression type (`ROOT::ECompressionAlgorithm`) instead of the type-erased `int`. Note that a lot of the resulting code does not follow coding conventions as I attempted to reduce the amount of code-churn related to this commit. `clang-format` checks are expected to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1223:1005,reduce,reduce,1005,https://root.cern,https://github.com/root-project/root/pull/1223,1,['reduce'],['reduce']
Energy Efficiency,"In a basic [toy experiment example from CMS](https://cms-analysis.github.io/HiggsAnalysis-CombinedLimit/part5/longexercise/#advanced-section-b-computing-limits-with-toys) one can see that [RooProdPdf::factorizeProduct](https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/combine_example_2_old/59) function takes a significant fraction of the runtime, most of which is spent in `RooArgSet::~RooArgSet()`. In this PR, the factorizeProduct method is rewritten with `std::vector`s that are kept alive during the whole loop over pdfs such that memory allocation is avoided in this performance-critical code. A more sustainable solution would be to reuse the model for every toy such that `factorizeProduct` is only called once, but since a lot of RooFit-based code probably doesn't do this I think it's worth speeding up this function. Igprof reports for the CMS combine toy experiment example:; * [without this PR](https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/combine_example_2_old); * [with this PR](https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/combine_example_2_new)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7907:621,sustainab,sustainable,621,https://root.cern,https://github.com/root-project/root/pull/7907,1,['sustainab'],['sustainable']
Energy Efficiency,"In old versions of RooFormula, one could mutate the internal formula; object from the outside. This was unsafe. Therefore, the visibility of; formula() was reduced.; It can, however, be beneficial to have at least read access. Therefore,; a const overload of the function was provided to give users access.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6250:156,reduce,reduced,156,https://root.cern,https://github.com/root-project/root/pull/6250,1,['reduce'],['reduced']
Energy Efficiency,"In quite a few places in RooFit, TFile objects were manually allocated; but not deleted afterwards.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11092:61,allocate,allocated,61,https://root.cern,https://github.com/root-project/root/pull/11092,1,['allocate'],['allocated']
Energy Efficiency,"In tests on an Apple M1 after the upgrade to LLVM 9, this new instruction selection framework emits branches / calls that expect all code to be reachable in +/- 128 MB. This cannot be guaranteed during JIT, which generates code into allocated pages on the heap and could span the entire address space of the process.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7419:233,allocate,allocated,233,https://root.cern,https://github.com/root-project/root/pull/7419,1,['allocate'],['allocated']
Energy Efficiency,"In the RooDecay case, the evalCerf function called internally in; RooGaussModel passes a purely imaginary argument to; `RooMath::faddeeva_fast`. In this case, the Faddeeva function is equal; to a scaled complementary error function, which can be evaluated more; efficiently using `std::erfc`. The speedup can be seen in the stressRooFit tests that involve the; RooDecay, for example:; `Test 22 : Full per-event error p.d.f. F(t|dt)G(dt)`; The test can be run individually to verify this speedup:. ```; `./stressRooFit -n 22`; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9925:262,efficient,efficiently,262,https://root.cern,https://github.com/root-project/root/pull/9925,1,['efficient'],['efficiently']
Energy Efficiency,"In the current implementation of `RooDataSet::reduceEng`, the dataset; itself was queried to get the weight variable used in the reduced; dataset. This didn't work with the `RooCompositeDataStore`, because a; dataset with this data store doesn't have a weight variable, as these; are encapsulated in the components of the composite store. Hence,; reducing a weighted dataset with a RooCompositeDataStore yields an; unweighted dataset, which is a bug. To fix this problem, this commit implements a separate reduction logic; for the RooCompositeDataStore: the components are now reduced; individually, instead of naively creating a RooCompositeDataStore from a; RooVectorDataStore/RooTreeDataStore. To avoid further code branches in; RooDataSet, a new virtual function `RooAbsDataStore::reduce` is; introduced. The first two commits update the data reduction implementation details such the bugfix is easier to implement (see commit messages for more details). This closes https://github.com/root-project/root/issues/6951.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10397:46,reduce,reduceEng,46,https://root.cern,https://github.com/root-project/root/pull/10397,4,['reduce'],"['reduce', 'reduceEng', 'reduced']"
Energy Efficiency,"In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:; ```; Direct leak of 16 byte(s) in 1 object(s) allocated from:; #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599); #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370; #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108; ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15477:61,allocate,allocated,61,https://root.cern,https://github.com/root-project/root/pull/15477,3,['allocate'],['allocated']
Energy Efficiency,"In this PR I implement the skeleton of the batch compute library as well as the new class RooFitDriver, which manages all the computations that need to be done in a fit and redirects them to the RooBatchCompute library. RooFitDriver: scans the computation graph for the dependencies, handles the memory needed for the computations, schedules the order of the computations (in the future it will also schedule multi-threaded computations). In other words it ""drives"" the computation library. RooBatchCompute: the library responsible for performing the actual computations. Each instance of it (eg RooBatchCompute_AVX, RooBatchCompute_CUDA etc) has architecture-specific code. To use it, one (a PDF or another RooAbsReal class) should call rbc::dispatch() and provide the enum name of the computing function to be used, the array in which the output should be store, the number of events and an rbc::DataMap object which holds the values for every parameter and observable in the fit model.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8240:332,schedul,schedules,332,https://root.cern,https://github.com/root-project/root/pull/8240,2,['schedul'],"['schedule', 'schedules']"
Energy Efficiency,"Instantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/too",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462:3650,green,greenc,3650,https://root.cern,https://github.com/root-project/root/pull/5462,1,['green'],['greenc']
Energy Efficiency,"Instead of handling each individual file from `tutorials/` or `etc/` or `js/` subdirectory, ; just invoke `cmake -E copy_directory <src> <dst>` command. ; It ignores all files diffs and just copy them. ; Necessary to correctly handle incremental builds. Significantly reduce number of `cmake` invocations - compared with #9804.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9834:268,reduce,reduce,268,https://root.cern,https://github.com/root-project/root/pull/9834,1,['reduce'],['reduce']
Energy Efficiency,"Instead of passing a dynamically allocated array, pass an initializer list that the compiler can put on the stack. By removing the calls to new, this also helps the exploding compile times discussed in #9312.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9329:33,allocate,allocated,33,https://root.cern,https://github.com/root-project/root/pull/9329,1,['allocate'],['allocated']
Energy Efficiency,"Internal logic has been adapted to support the case in which TTreeProcessorMT; is acting on a TChain and the trees in the TChain do not all have the same name.; Importantly, the fTreeName data-member changed name to fTreeNames and is now a; vector of strings rather than a single string. This fixes ROOT-10178.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5270:24,adapt,adapted,24,https://root.cern,https://github.com/root-project/root/pull/5270,1,['adapt'],['adapted']
Energy Efficiency,"Issue spotted by @eguiraud [here](https://github.com/root-project/root/pull/9760#discussion_r796863943). The classes `Graph` and `GraphAsymmErrors` action helpers inside `tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx` allocate memory with `new`, but never deallocate it. Note that `HIST` also allocates with `new` but inside its `Finalize()` method, it takes care of deallocation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10484:218,allocate,allocate,218,https://root.cern,https://github.com/root-project/root/issues/10484,2,['allocate'],"['allocate', 'allocates']"
Energy Efficiency,"It seems that VecCore is a wrapper over Vc, however ROOT uses Vc in the context; of VecCore but also standalone. Adapt CMake to only try to load the Vc module when the Vc option is on as VecCore; might have not exposed Vc... This change improves root-project/root@f2ac9b349f",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9572:113,Adapt,Adapt,113,https://root.cern,https://github.com/root-project/root/pull/9572,1,['Adapt'],['Adapt']
Energy Efficiency,"It uses RBrowser and RBrowsable functionality to select some files or input new file SaveAs.; Provide sync and async modes. Actual ui5 coding should be implemented by @Falcort . Now RFileDialog starts its own window, later adapter will be provided to use RFileDialog inside other widgets - like RCanvas or RBrowser. Provide simple tutorial macro.; For meaningful async mode I add `RDirectory::Remove(name)` method (@Axel-Naumann)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4607:223,adapt,adapter,223,https://root.cern,https://github.com/root-project/root/pull/4607,1,['adapt'],['adapter']
Energy Efficiency,"It will be central method to paint any primitive on specified pad. To support all kinds of old implementations in TObject class Paint() method will be implemented as:; ```; void TObject::Paint(Option_t *opt); {; if (gPad) ; PaintOn(gPad);; }; ```. Main trick will be painting of pad primitives. There one can use semi-standard method to detect ; if custom `Paint()` method implemented for the object. If yes - such old `Paint()` will be invoked.; ```; if ((void *) (obj->*(&TObject::Paint)) != (void *) (&TObject::Paint)); obj->Paint(lnk->GetOption());; else; obj->PaintOn(this, lnk->GetOption());; ```. If class converted into new scheme - `Paint()` method **MUST** be re removed and replaced by new `PaintOn()`. This is very important to support sub-classes of classes like `TLine` or `TBox`. `TLine::PaintOn()` implemented from very beginning, but `SubClass::Paint()` will exists. Calling scheme will be: `SubClass::Paint()` -> `TObject::Paint()` -> `TLine::PaintOn()`. Step-by-step in all ROOT classes one will implement `PaintOn()` methods - without breaking any existing code.; PR shows example with several ""simple"" classes how it can be done. . During ROOT code modifications graphics continues to work as before. ; But contentiously usage of `gPad` will be reduced.; Main goal - `gPad` should not be touched when painting ROOT classes. ; Only to support arbitrary user classes one will keep `TObject::PaintOn()` as shown. After code conversion is completed, one can declare ; special methods which are using `gPad` (like `TLine::PaintLineNDC()`) deprecated and ; advertise use of new methods (like `TLine::PaintLineNDCOn()`). Ultimate goal - painting of main ROOT classes do not touch `gPad` and thus will be really thread-safe. Interactive methods (like moving stats box around) will still rely on `gPad`, ; but this pointer will not be touched during any re-painting and will remain consistent.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15937:1266,reduce,reduced,1266,https://root.cern,https://github.com/root-project/root/pull/15937,1,['reduce'],['reduced']
Energy Efficiency,"It would be good to provide a tutorial how we (RNTuple developers) envision the APIs to be used by experiment frameworks. Relevant classes and methods that come to mind:; * Creation of (bare) `RNTupleModel` and `RFieldToken`s (for parallel writing, see also https://github.com/root-project/root/issues/16236); * Creation of (multiple) `RNTupleWriter` / `RNTupleParallelWriter` when `Append`ing to a single `TFile`; * For parallel writing, creation of `RNTupleFillContext` per thread or another granularity; * Creation of (potentially multiple) `REntry`s and using `BindRawPtr()` to fill objects; * Using `FillNoFlush()`, `RNTupleFillStatus::ShouldFlushCluster()`, `FlushColumns()` (see https://github.com/root-project/root/issues/16241) and `CommitCluster()` to reduce the time in critical sections",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16290:762,reduce,reduce,762,https://root.cern,https://github.com/root-project/root/issues/16290,1,['reduce'],['reduce']
Energy Efficiency,"Just opening the PR to discuss the problem:; Jitting many `Define` (or `Filter`) calls currently incurs in major runtime and memory consumption penalties. This is because repeated calls to `Calc` or `ProcessLine` have a significant overhead w.r.t. a single call that jits the same code in a single go. Jitting all `Define` calls together (and together with all jitted actions) greatly reduces runtime and memory consumption. **Current issue:**; in code such as. ```c++; d.Define(""x"", ""42"").Min(""x""); ```. the `Min` action has no way to know the type of `x` because the lambda that produces `x` has not been jitted yet. Maybe we could defer even the creation of the strings to jit for the actions to _after_ we have jitted all the `Define`s, but this will require more thinking and more refactoring.; EDIT: the same goes for jitted `Snapshot`s, the formation of the string to jit must be deferred to after we have jitted and executed all `Define`s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1313:132,consumption,consumption,132,https://root.cern,https://github.com/root-project/root/pull/1313,3,"['consumption', 'reduce']","['consumption', 'reduces']"
Energy Efficiency,"LZMA by default creates very large hash tables for its dictionaries, e.g., at compression level 4, the hash table is 4Mi 4 byte entries, 16 MiB total. The hash table has to be zeroed before use so it is allocated via calloc(), which means all the pages have to be allocated, mapped and written. ROOT baskets are often much smaller than the default LZMA dictionaries; for small baskets, the large dictionary has very little compression benefit, while zeroing the hash table can be more expensive than the actual compression operation. Since R__zipLZMA() is actually being used to compress a buffer of known size, not a stream, we can use the size of the buffer to estimate an appropriate size for the dictionary. This PR uses a slightly more advanced part of the LZMA API to set the dictionary size to 1/4 the size of the input buffer, if that is smaller than the default size from the selected preset compression level. In tests with CMS data, this results in less than 1% increase in the output size and (in one test job) a 25% reduction in job total run time, with LZMA compression time reduced by 80% (all of that time that was being spent in memset() zeroing the hash table). I also tested this with the ""Event"" test program with Brian's changes from #59. With the same test parameters as Brian (""./Event 4000 6 99 1 1000 2""), I get. ZLIB level-6: 14.4 MB/s; Original LZMA level-6: 2.3 MB/s; Modified LZMA level-6: 3.0 MB/s. With 100 tracks per event (and hence smaller baskets) the improvement is from 2.2 MB/s to 3.9 MB/s. This change should be fully transparent and backwards compatible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/194:203,allocate,allocated,203,https://root.cern,https://github.com/root-project/root/pull/194,3,"['allocate', 'reduce']","['allocated', 'reduced']"
Energy Efficiency,"Let configure different parameter in the THttpServer and in the threads layout to minimize as much as possible; round-trip packet time. After all tunings round-trip time can be reduced from 30ms to 1.4ms. . Introduce `tutorials/webgui/ping/` example, which demonstrate and let test all possible tuning parameters independently. Once code adjusted to headless mode, one potentially can include it into stress tests during ROOT nightly/PR builds.; It is very simple, but powerful test of JSROOT/THttpServer/RWebWindow code integrity. Thanks to @osschar and @alja for initial idea.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7777:177,reduce,reduced,177,https://root.cern,https://github.com/root-project/root/pull/7777,2,"['power', 'reduce']","['powerful', 'reduced']"
Energy Efficiency,Let significantly reduce size of includes used by EVE7,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7810:18,reduce,reduce,18,https://root.cern,https://github.com/root-project/root/pull/7810,1,['reduce'],['reduce']
Energy Efficiency,"Make CutRange() also considers the variables not selected by electVars(); in RooAbsData::reduce(). If CutRange() does consider the unselected variables or not was not; specified in the documentation so far, but now it is clearly stated. This change supports the workflow where a dataset contains additional; observables not used by the fit model, but you still want to use these; variables to select a subset of the data via the `Range()` command; argument to `RooAbsPdf::fitTo()`. Closes JIRA ticket ROOT-8040:; https://sft.its.cern.ch/jira/browse/ROOT-8040. @will-cern FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11821:89,reduce,reduce,89,https://root.cern,https://github.com/root-project/root/pull/11821,1,['reduce'],['reduce']
Energy Efficiency,Make now the possibility to select the architecture of MethodDL at runtime; Use for the evaluation of the network only CPU or Standard architecture and not GPU that is not efficient on a per/event base; Add support for copying weights between different architectures,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2071:172,efficient,efficient,172,https://root.cern,https://github.com/root-project/root/pull/2071,2,['efficient'],['efficient']
Energy Efficiency,"Making the decision on the scheduling mode based on `IsImpliciMTEnabled` would mean forcing users to run `EnableImplicitMT` every time they want to submit distributed graphs concurrently. If the user has already chosen to run a distributed RDataFrame application, RunGraphs should just submit all the computations concurrently to the distributed scheduler. The ""sequential"" mode of operation can still be achieved by e.g. calling `GetValue` on distributed proxies in a for loop.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13344:27,schedul,scheduling,27,https://root.cern,https://github.com/root-project/root/pull/13344,2,['schedul'],"['scheduler', 'scheduling']"
Energy Efficiency,"Many improvements in CEF:; - support POST requests, let transfer arbitrary data from client to server; - replace text-based cefQuery messaging by longpoll, required for binary transfer; - assign X11 error handler to avoid application abort in case of minor X11 warnings; - use single-process mode in batch to reduce number of running processes. Provide special handling of batch mode for Chrome and Firefox:; - both support `--headless` mode completely without X ; - very simple workaround to stop browser after 30 s with `timeout 30 chromium ...` command; - let configure custom shell commands via `.rootrc` parameters. Changes in http and webgui libraries:; - ""hide"" TCivetweb, TFastCgi, THttpWSEngine classes from end-user (@Axel-Naumann); - remove some comments from civetweb.c (@amadio); - use std::copy() instead of memcpy() for std::string (@Axel-Naumann); - introduce simple key identification of clients, let recognize which client starts by TWebWindow::Show(); - simplify cmake files, separate v7 code in FitPanel",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1886:309,reduce,reduce,309,https://root.cern,https://github.com/root-project/root/pull/1886,1,['reduce'],['reduce']
Energy Efficiency,Measurements with the parallel writer show a regression of compression bandwidth with large page sizes of up to 1 MiB because they do not fit into the L2 cache anymore. Reduce the default to be more cache friendly and restore scaling when fully using all cores of a machine.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16453:169,Reduce,Reduce,169,https://root.cern,https://github.com/root-project/root/pull/16453,1,['Reduce'],['Reduce']
Energy Efficiency,Memory leak for objects allocated in ctor of user defined class during I/O,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16375:24,allocate,allocated,24,https://root.cern,https://github.com/root-project/root/issues/16375,1,['allocate'],['allocated']
Energy Efficiency,"Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description).; It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:; ```c++; // runNumIntValidation.C. #include <RooFormulaVar.h>; #include <RooNumIntConfig.h>; #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label); {; RooRealVar x{""x"", ""x"", 0, 10};; RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;; RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {; cfg.method2D().setLabel(label.c_str());; }; if (ndim == 1) {; cfg.method1D().setLabel(label.c_str());; }. RooArgSet iset{x};; if (ndim > 1); iset.add(y);; std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};; double val = integ->getVal();; std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;; }. void runNumIntValidation(); {; RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};; std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {; testIntegrationMethod(1, label);; }. for (auto const &label : methods2d) {; testIntegrationMethod(2, label);; }; }; ```. The output with this PR is the same as with ROOT master:; ```; RooIntegrator1D:; 488.294986988088. RooSegmentedIntegrator1D:; 488.294680086881. RooAda",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13384:268,reduce,reduces,268,https://root.cern,https://github.com/root-project/root/pull/13384,1,['reduce'],['reduces']
Energy Efficiency,"Minuit migrad minimization: 1. the setup phase where the initial gradient is calculated and 2. the line search phases. To make the above possible, a few bugs had to be fixed:; - `RooAbsL` classes have `evaluatePartition` which allows you to specify the range of events and components over which to evaluate the likelihood. This had some bugs: the extended term and possible subsidiary components were added for each partition, leading to N duplicates (for N partitions). Commits 3db2e0dd36478813cfb534451f459348e8d90da9 and c2a8bc9df029f65ee575e140825af6c509860538.; - As a result of this fix, which reorders some terms in the sum, the LikelihoodGradientJob test was failing for a specific case due to increased floating point differences. We would like to add back in an option for retaining bit-wise exact same results in the future, but since the minimization still converges to the same value within the desired precision, for now we leave it like this, since the user can still pick the old ways if they prefer their exact old results. Commit b7f7fa7b705e2dfb767187dce3f6a32275f30d9e.; - `LikelihoodJob` had a bug where it didn't reset its `result` sum variable to zero before doing a new sum. Commits 042e1577d8c303d532016537e7467d6e2fbfcd9c and 44197a2a64f77b47587e5ee200d360c4514b8098. Finally, I made a mini optimization in `LikelihoodJob` by using `publish_from_master_to_workers` more efficiently, which reduces communication overhead slightly (and makes the code a bit cleaner). Also in commit 567b7988d56b6c1db6102d857b523fc2da607dbc. Note that although this is a bit of a big PR, the commits are factored out into the above list of changes, so I hope this makes it easy to review. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). Documentation not yet updated, I will check if this is necessary (I didn't think so, because it doesn't actually add much to the user interface, all the classes were already there, they just didn't work before like this).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10966:1739,efficient,efficiently,1739,https://root.cern,https://github.com/root-project/root/pull/10966,2,"['efficient', 'reduce']","['efficiently', 'reduces']"
Energy Efficiency,"Most ROOT developers and users seem to agree that autonomously toggling features at configuration time based on the environment is not good. The feature set that ROOT is built with is then not deterministic. In past cases, this already resulted in accidentally missing test coverage because features were switched off after environment changes. That's why for the CI, we are always building with the `fail-on-missing-option`. However, this is not only a problem in testing, but everytime ROOT is built. That's why this commit suggests to make `fail-on-missing` the default, and warn the users of potential future deprecation of this flag in the release notes. An interesting point is also that the `fail-on-missing` code path in `SearchInstalledSoftware.cmake` is much simpler, which also helps to reduce the margin for error. See also:; https://github.com/root-project/root/issues/14188#issuecomment-1844965943",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14311:798,reduce,reduce,798,https://root.cern,https://github.com/root-project/root/pull/14311,1,['reduce'],['reduce']
Energy Efficiency,Most leaks are due to wrong management of allocated `char*` buffers via StrDup - thats how I detect them. Better to be applied after #4874,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4887:42,allocate,allocated,42,https://root.cern,https://github.com/root-project/root/pull/4887,1,['allocate'],['allocated']
Energy Efficiency,"Most people prefer Minuit2 nowadays, especially RooFit users, as some of; the more complicated fits don't converge with the old Minuit; implementation. Some RooFit tests are adapted to pass also when using Minuit2 as the minimizer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13661:174,adapt,adapted,174,https://root.cern,https://github.com/root-project/root/pull/13661,1,['adapt'],['adapted']
Energy Efficiency,"Move the fRoofit classes depending on GSL in a new library libRooFitMore. The classes are: . - AdaptiveGauss and GausKronrod 1D integrator from Roofitcore; - Legendre, non-central chi2 and SphArmonic pdf",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4536:95,Adapt,AdaptiveGauss,95,https://root.cern,https://github.com/root-project/root/pull/4536,1,['Adapt'],['AdaptiveGauss']
Energy Efficiency,"Moves from fixed page sizes on write to adaptive page sizes, following the original idea of @hahnjo . The new mechanism is explained in the tuning.md document in the PR. The PR also bumps the target compressed cluster size to 150MB. We may want to reduce that still. Evaluation of the new method is currently ongoing and the PR description will be amended with the results. EDIT: [Comparison](https://docs.google.com/spreadsheets/d/1maJhgvgVU8RkX7QXd7B3QiTBfKuYbTbvgkoHzBUOurY/edit?usp=sharing) of current write performance vs adaptive page sizes with 50MB, 100MB, 150MB target cluster size. To me it seems that there is not a good argument to go to 150 MB clusters. There may be an argument for 100 MB clusters. For the moment, I'll remove the commit that changes the default settings from the PR. An additional flavor, `adaptive / exp`, is included in the table to test the effect of flushing _foreign columns_. In the experimental mode, columns only flush themselves, which simplifies the `RWritePageMemoryManager` and avoids the upcall from the sink to the column. There is a small positive effect of foreign flushes on the file size in the nanoAOD sample. The effect is more visible for the number of pages. The memory consumption is slightly smaller without foreign column flushes. I'll see if I can construct an example that shows better the advantage of foreign column flushes (or not). As expected, the memory savings become visible for large EDMs (e.g., nanoAOD in this set of samples).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16311:40,adapt,adaptive,40,https://root.cern,https://github.com/root-project/root/pull/16311,5,"['adapt', 'consumption', 'reduce']","['adaptive', 'consumption', 'reduce']"
Energy Efficiency,Muhammad Alhroob (using ChatGPT) demonstrated that this can considerably reduce the runtime cost for TRandom3. Marking the class `final` seems a good compromise between performance and backward incompatibility: the compiler will diagnose if people inherit from TRandom3. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/12547.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12964:73,reduce,reduce,73,https://root.cern,https://github.com/root-project/root/pull/12964,1,['reduce'],['reduce']
Energy Efficiency,"My try to add some pythonization to `fitTo`. For reference see [#7217](https://github.com/root-project/root/issues/7217#issuecomment-785392761). Instead of passing, for example, ; ```; pdf.fitTo(data, ROOT.RooFit.Range(""sideband"")); ```; one could now also do ; ```; pdf.fitTo(data, Range=""sideband""); ```; etc. The code takes the kwargs and turns them into `RooFit` `CmdArg`s. Currently this requires the keyword to be equal to the `CmdArg` (cf. [here](https://root.cern.ch/doc/master/classRooAbsPdf.html#a8f802a3a93467d5b7b089e3ccaec0fa8)). ; However, the `__cast` function in `_rooabspdf.py` can be adapted such that other variants may be accepted, like e.g. `range` instead of `Range`. I am not sure about some details of the implementation:; - Should the `__cast` function be kept although it is not doing anything for the moment?; - Are the test appropriate?; - I tested the features locally with a different version.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7314:602,adapt,adapted,602,https://root.cern,https://github.com/root-project/root/pull/7314,1,['adapt'],['adapted']
Energy Efficiency,No longer strip/ignore std in ResolveTypedef. Adapt reference file.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4458:46,Adapt,Adapt,46,https://root.cern,https://github.com/root-project/root/pull/4458,1,['Adapt'],['Adapt']
Energy Efficiency,"Now JSROOT.TGeoPainter can be used with THttpServer for ""monitoring"" of; geometry object. Exactly like a histogram, TGeoManager can be regularly; received and dsiplayed. Also tracks can be monitored together; Provide tutorial macro",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4056:57,monitor,monitoring,57,https://root.cern,https://github.com/root-project/root/pull/4056,2,['monitor'],"['monitored', 'monitoring']"
Energy Efficiency,"Now that we have an efficient hash-assisted `find` mechanism to find by name, it can be used in `RooArgSet` to optimize `containsInstance` (as we are certain there is only one parameter with a given name). This reduces the writing of large workspaces to file (such as ATLAS Higgs combination) by a significant factor (not precisely measured, but at least 5).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9417:20,efficient,efficient,20,https://root.cern,https://github.com/root-project/root/pull/9417,2,"['efficient', 'reduce']","['efficient', 'reduces']"
Energy Efficiency,"OD static (TString) [clazy-non-pod-global-static]; /opt/root_src/gui/gui/src/TGTextEntry.cxx:1608:10: warning: Value stored to 'charWidth' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'charWidth' is never read in /opt/root_src/gui/gui/src/TGTextEntry.cxx:1608; /opt/root_src/gui/gui/src/TGTextEntry.cxx:1619:10: warning: Value stored to 'charWidth' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'charWidth' is never read in /opt/root_src/gui/gui/src/TGTextEntry.cxx:1619; /opt/root_src/gui/gui/src/TGTextView.cxx:1003:15: warning: Although the value stored to 'temp_len' is used in the enclosing expression, the value is never actually read from 'temp_len' [clang-analyzer-deadcode.DeadStores]; 1: Although the value stored to 'temp_len' is used in the enclosing expression, the value is never actually read from 'temp_len' in /opt/root_src/gui/gui/src/TGTextView.cxx:1003; /opt/root_src/gui/gui/src/TGTextView.cxx:1016:16: warning: Use of zero-allocated memory [clang-analyzer-cplusplus.NewDelete]; 1: Assuming the condition is false in /opt/root_src/gui/gui/src/TGTextView.cxx:986; 2: Taking false branch in /opt/root_src/gui/gui/src/TGTextView.cxx:986; 3: Assuming the condition is false in /opt/root_src/gui/gui/src/TGTextView.cxx:996; 4: Loop condition is false. Execution continues on line 999 in /opt/root_src/gui/gui/src/TGTextView.cxx:996; 5: Memory is allocated in /opt/root_src/gui/gui/src/TGTextView.cxx:1002; 6: Loop condition is false. Execution continues on line 1016 in /opt/root_src/gui/gui/src/TGTextView.cxx:1004; 7: Use of zero-allocated memory in /opt/root_src/gui/gui/src/TGTextView.cxx:1016; /opt/root_src/gui/gui/src/TGTextView.cxx:1027:10: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'st",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:58806,allocate,allocated,58806,https://root.cern,https://github.com/root-project/root/issues/7533,1,['allocate'],['allocated']
Energy Efficiency,OSX and homebrew in particular creates many symlinks for its libraries. We should resolve to the realpath before scanning for symbols. This patch should reduce the test failues on the experimental runtime_modules support on Mac. Patch by Alexander Penev(@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4696:153,reduce,reduce,153,https://root.cern,https://github.com/root-project/root/pull/4696,1,['reduce'],['reduce']
Energy Efficiency,On the MacOS same unix sockets cannot be opened twice for listening - ; when using with `netcat` or `socat`; Therefore start `nc -k -l -U $socketfile > $socketfile.log` to redirect; socket output into the plain file permanently. ; And then monitor this file content - line by line. Use `trap` command to cleanup all temporary files afterwards. And from ROOT side need to send `\n` to ensure new lines in produced log file. This changes required to be able use `rootssh` from the MacOS,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16819:240,monitor,monitor,240,https://root.cern,https://github.com/root-project/root/pull/16819,1,['monitor'],['monitor']
Energy Efficiency,Option to reduce startup syscalls via environment caching,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12613:10,reduce,reduce,10,https://root.cern,https://github.com/root-project/root/pull/12613,1,['reduce'],['reduce']
Energy Efficiency,"Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:; ```; Commit to a primary definition for a class when we load its first; member. Previously, we wouldn't do this if the first member loaded is within a; definition that's added to a class via an update record, which happens; when template instantiation adds a class definition to a declaration; that was imported from an AST file. This would lead to classes having member functions whose getParent; returned a class declaration that wasn't the primary definition, which; in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because; the setup required to get us into the broken state is very subtle, but; have confirmed that this fixes it.; ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:; ```; Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed.; ```; which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13370:659,reduce,reduced,659,https://root.cern,https://github.com/root-project/root/pull/13370,1,['reduce'],['reduced']
Energy Efficiency,Over the years we have been working towards controlling very well the way we build the PCH in order to reduce a lot of subtle problems. We have understood that inverting the responsibility to the infrastructure producing the PCH is better in terms of reliability. This patch unteaches cling to match its compiler instance to a given PCH. This helps when migrating to clang-repl where we could rely much more on the clang Driver to set up the compiler instance. cc: @davidlange6,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11922:103,reduce,reduce,103,https://root.cern,https://github.com/root-project/root/pull/11922,1,['reduce'],['reduce']
Energy Efficiency,"Overall goals:; - fix currently broken dependencies, e.g. touch a header in histfactory does not regenerate its dictionary;; - simplify G__Core CMake setup;; - remove unnecessary dictionaries;; - reduce dependencies / occasions to rebuild dictionaries, e.g. touch hist/hist/src/TH1.cxx and the dictionaries of libraries depending on libHist were rebuild, and so was the PCH. I see an issue with runtime_cxxmodules; let's see what Jenkins says!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3371:196,reduce,reduce,196,https://root.cern,https://github.com/root-project/root/pull/3371,1,['reduce'],['reduce']
Energy Efficiency,PR1239 with reduced clang-format,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1330:12,reduce,reduced,12,https://root.cern,https://github.com/root-project/root/pull/1330,1,['reduce'],['reduced']
Energy Efficiency,"Part of the RooProdPdf modernization with the intention of eventually; deprecating the RooLinkedList. This change reduces the size of a RooProdPdf from 1600 to 1496 bytes. A manual schema evolution rule to test the reading of older RooProdPdfs; is implemented in the `LinkDef.h`. The schma evolution is tested by; the stressRooFit tests, which are reading some RooProdPdfs from the; reference files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8595:114,reduce,reduces,114,https://root.cern,https://github.com/root-project/root/pull/8595,1,['reduce'],['reduces']
Energy Efficiency,Part of the ongoing campaign to turn the experimental PyROOT builds green.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3330:68,green,green,68,https://root.cern,https://github.com/root-project/root/pull/3330,1,['green'],['green']
Energy Efficiency,Part of the plan of work 2024. The first two commits are final bugfixes to get all-green tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14742:83,green,green,83,https://root.cern,https://github.com/root-project/root/pull/14742,1,['green'],['green']
Energy Efficiency,"PartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (t",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462:2203,green,greenc,2203,https://root.cern,https://github.com/root-project/root/pull/5462,1,['green'],['greenc']
Energy Efficiency,"People know that they can use `TF1::SetParameters()` to set the; parameter values of a TF1. For example, when you have two parameters:; ```C++; TF1 myexpo(""myexp"", ""[coef] * std::exp(-[rate] * x)"", 0, 10);; myexpo.SetParameters(1.0, 0.5);; ```. When people get rid of all parameters except for one, they therefore; automatically assume that this will work:. ```C++; TF1 myexpo(""myexp"", ""std::exp(-[rate] * x)"", 0, 10);; myexpo.SetParameters(0.5);; ```. However, it doesn't work because `SetParameters` requires at least two; arguments. This commit suggests to fix that and generalize the function; to take only one parameter as well. This reduces the surprises people have when interacting with a TF1 and; therefore improves the user experience for first-time ROOT users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11052:639,reduce,reduces,639,https://root.cern,https://github.com/root-project/root/pull/11052,1,['reduce'],['reduces']
Energy Efficiency,"People use RooFormula a lot via RooGenericPdf and RooFormulaVar!; Performance matters here. This commit avoids non-static `std::regex` in; `RooFormula::processFormula`, because constructing these on the fly can; become a bottleneck. This is a non-intrusive performance optimization that reduces the time spent for CMS workflows like the HZZ global fit by up to 5 %. Example profiles:; * HZZ multi-dim fit before this PR: https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/hzz_1/74; * HZZ multi-dim fit after this PR: https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/hzz_3/1815. `RooFormula::processFormula` is now more than ten times faster.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10205:287,reduce,reduces,287,https://root.cern,https://github.com/root-project/root/pull/10205,1,['reduce'],['reduces']
Energy Efficiency,Potential leak of memory pointed to by 'sliceValsLow' in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1168; /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1168:25: warning: Potential leak of memory pointed to by 'sliceValsLowRef' [clang-analyzer-cplusplus.NewDeleteLeaks]; 1: Taking false branch in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1040; 2: Memory is allocated in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1093; 3: Assuming 'etaBin' is > 'nEtaBins' in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1098; 4: Loop condition is false. Execution jumps to the end of the function in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1098; 5: Potential leak of memory pointed to by 'sliceValsLowRef' in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1168; /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1168:25: warning: Potential leak of memory pointed to by 'sliceValsUp' [clang-analyzer-cplusplus.NewDeleteLeaks]; 1: Taking false branch in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1040; 2: Memory is allocated in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1090; 3: Assuming 'etaBin' is > 'nEtaBins' in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1098; 4: Loop condition is false. Execution jumps to the end of the function in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1098; 5: Potential leak of memory pointed to by 'sliceValsUp' in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1168; /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1168:25: warning: Potential leak of memory pointed to by 'sliceValsUpRef' [clang-analyzer-cplusplus.NewDeleteLeaks]; 1: Taking false branch in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1040; 2: Memory is allocated in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1092; 3: Assuming 'etaBin' is > 'nEtaBins' in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1098; 4: Loop condition is false. Execution jumps to the end of the function in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1098; 5: Potential leak of memory pointed to by 'sliceValsUpRef' in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1168; ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7531:33443,allocate,allocated,33443,https://root.cern,https://github.com/root-project/root/issues/7531,1,['allocate'],['allocated']
Energy Efficiency,PowerShell version of 'thisroot.bat',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6815:0,Power,PowerShell,0,https://root.cern,https://github.com/root-project/root/issues/6815,1,['Power'],['PowerShell']
Energy Efficiency,"PyROOT is wrongly interpreting the signature of; `RooLinkedList::Add(RooAbsArg *arg)` as the RooLinkedList taking ownership of the RooAbsArg. This results in a memory leak because nobody feels responsible for deleting the arg. This can be fixed by setting the memory policy of the method to ""strict"" and not to ""heuristic"" in the pythonizations. This pythonization might become unnecessary in the future if it is decided to set the global memory policy to ""strict"" in _facade.py. Reproducer of the original problem: the first code snippet in this forum post:; https://root-forum.cern.ch/t/memory-leak-in-fits/56249. This PR is only a hot-fix to the problem. The more sustainable solution will be provided by another PR that disables the heuristic memory management:; https://github.com/root-project/root/pull/13593",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13594:667,sustainab,sustainable,667,https://root.cern,https://github.com/root-project/root/pull/13594,1,['sustainab'],['sustainable']
Energy Efficiency,"RNTuple support for schema evolution is scheduled for Q2 2022. We should, at least, take care of the following changes in class definitions:; - Addition of a data member; - Removal of a data member; - An existing member changes its datatype. Also, we should support some form of manual schema evolution (similar to the existing I/O rules in ROOT). This issue can be used for further discussion / dumping ideas related to the design or implementation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10019:40,schedul,scheduled,40,https://root.cern,https://github.com/root-project/root/issues/10019,1,['schedul'],['scheduled']
Energy Efficiency,ROOT I/O changes to reduce wait time on global lock,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/747:20,reduce,reduce,20,https://root.cern,https://github.com/root-project/root/pull/747,1,['reduce'],['reduce']
Energy Efficiency,"ROOT has several features which interact with libraries and require implicit header inclusion. This can be triggered by reading or writing data on disk, or user actions at the prompt. Often, the headers are immutable and reparsing is redundant. C++ Modules are designed to minimize the reparsing of the same header content by providing an efficient on-disk representation of C++ Code. More information about the C++ modules technology can be found at README/README.CXXMODULES.md. This undertaking was successful due to the efforts of many people. Especially, Raphael Isemann (@Teemperor), Oksana Shadura(@oshadura) and Yuka Takahashi (@yamaguchi1024). We are grateful to Liz Sexton-Kennedy, Peter Elmer (@pelmer), Brian Bockelman(@bbockelm) and Ken Bloom for putting (wo)manpower into the project and supporting it. This work has been supported by an Intel Parallel Computing Center grant, by U.S.National Science Foundation grants PHY-1450377, ACI-1450323 and PHY-1624356, and by the U.S. Department of Energy, Office of Science. Special thanks to Axel Naumann (@Axel-Naumann) and Philippe Canal (@pcanal) for helping and supporting the technical efforts over the years. We are thankful to Shahzad Malik Muzaffar (@smuzaffar), David Lange (@davidlange6) and Mircho Rodozov (@mrodozov) from the CMSSW development team, CERN/EP-SFT and the ROOT team.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4395:339,efficient,efficient,339,https://root.cern,https://github.com/root-project/root/pull/4395,2,"['Energy', 'efficient']","['Energy', 'efficient']"
Energy Efficiency,"RPageSinkBuf calls `ReservePage()` as part of a `CommitPageImpl()` call. This memory is release in `CommitClusterImpl()` by calling `ReleasePage()` accordingly. However, if `CommitClusterImpl()` is never invoked (e.g., because the 'small cluster' check failed in RNTuple.cxx:336), this memory is leaked.; This patch fixes that by making `RColumnBuf` adopt the pages. `DrainBufferedPages()` gives back the ownership to the caller, who is then responsible of calling `ReleasePage()`. FWIW, this bug was found while hunting the issues seen in the CI for the `RNTuple.SmallClusters` test. ## Checklist:; - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13022:368,Drain,DrainBufferedPages,368,https://root.cern,https://github.com/root-project/root/pull/13022,1,['Drain'],['DrainBufferedPages']
Energy Efficiency,"Rather than constructing a new RVec (as a view over the new; array data) at every event and swapping with the old one,; directly change the address of the old RVec. This provides a ~10% performance improvement for a synthetic; version of the dimuon tutorial adapted to only read (uncompressed); data.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11232:258,adapt,adapted,258,https://root.cern,https://github.com/root-project/root/pull/11232,1,['adapt'],['adapted']
Energy Efficiency,"Rather than non-const reference. This has two advantages:; - passing fundamental types by value is slightly more efficient; - passing by const value helps avoiding typos such as `if (x = 0)`. This fixes ROOT-11009. Reviewers, what do you think? Can this break any currently valid code?. - [x] add test",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6526:113,efficient,efficient,113,https://root.cern,https://github.com/root-project/root/pull/6526,1,['efficient'],['efficient']
Energy Efficiency,"Rather than reading from the file the value of kIsOnHeap, preserve the value that was; calculated at object creation time (i.e. in the current execution). For example, for; an embedded object (inside an object created on the heap or stack), the bit always; need to be off (i.e. it can never be explicitly deleted)# This Pull request:. When reading back the ""heap status"" is determine by how the; read-into object was allocated, so there is no need to record; that information. When reading back, the kNotDeleted is always on, (and should; always be on when writing :) ), so there is no need to record it. Recording '0' for both allow for (slightly) better compression. Fix https://github.com/root-project/root/issues/12438",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12439:417,allocate,allocated,417,https://root.cern,https://github.com/root-project/root/pull/12439,1,['allocate'],['allocated']
Energy Efficiency,"Re-implement the RooNormSetCache with the appropriate STL containers. In particular, it now uses `std::set` and `std::deque` instead of `std::map` and `std::vector`, which was not efficient for the round-robin replacement. This change was motivated because it could happen in the past that the round-robin replacement was dereferencing invalid iterators.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13196:180,efficient,efficient,180,https://root.cern,https://github.com/root-project/root/pull/13196,1,['efficient'],['efficient']
Energy Efficiency,Reduce ExcludeModules: Removed RInterface,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3757:0,Reduce,Reduce,0,https://root.cern,https://github.com/root-project/root/pull/3757,1,['Reduce'],['Reduce']
Energy Efficiency,Reduce LZMA dictionary size for small baskets,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/194:0,Reduce,Reduce,0,https://root.cern,https://github.com/root-project/root/pull/194,1,['Reduce'],['Reduce']
Energy Efficiency,Reduce TBasket high water mark use. Fix ROOT-10927.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6034:0,Reduce,Reduce,0,https://root.cern,https://github.com/root-project/root/pull/6034,1,['Reduce'],['Reduce']
Energy Efficiency,Reduce again the minimal version of cmake,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1271:0,Reduce,Reduce,0,https://root.cern,https://github.com/root-project/root/pull/1271,1,['Reduce'],['Reduce']
Energy Efficiency,"Reduce amount of code, special treatments and the need for casting in RooFit by providing a type-safe proxy template that acts a bit like smart pointers. **For reviewers**:; The central part of this PR is the file `RooProxy.h`. Many other changes are just a fallout from unifying all proxy classes in this one. A `RooProxy<T>` is like a smart pointer to `T`, but it does additional important stuff in the base class.; Previously, RooFit proxies were storing only base class pointers forcing users of these proxies to cast whenever they wanted to do something. The weak point of the new thing is backward compatibility. Legacy root files and legacy RooFit classes act like a `RooProxy<RooAbsArg>`, a pointer to a very basic class. If the template argument was chosen properly, one wouldn't need any special functions because one can just use the newly provided `proxy->` to type-safely dereference the proxy, but that only works for new code. To support old code (e.g. outside of RooFit), there's four overloads of the function `lvptr`, which is supposed to cast the pointer to the payload into a type deriving from one of the ""LValue"" classes `RooAbsRealLValue` or `RooAbsCategoryLValue`. That's safe if the template argument derives from those, but it's unsafe for all other (=legacy) proxies. I tagged the unsafe conversion functions with `R__SUGGEST_ALTERNATIVE` to give users a way to move away from unsafe casts, but I'm unsure if one should just `static_cast` as RooFit was doing in the past (= no change of runtime behaviour) or `dynamic_cast` for better type safety. Opinions?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4969:0,Reduce,Reduce,0,https://root.cern,https://github.com/root-project/root/pull/4969,1,['Reduce'],['Reduce']
Energy Efficiency,"Reduce calls to enable autoloading, reduce cxxmodules work at shutdown",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3774:0,Reduce,Reduce,0,https://root.cern,https://github.com/root-project/root/pull/3774,2,"['Reduce', 'reduce']","['Reduce', 'reduce']"
Energy Efficiency,Reduce contention on some atomics in core/meta and io,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6062:0,Reduce,Reduce,0,https://root.cern,https://github.com/root-project/root/pull/6062,1,['Reduce'],['Reduce']
Energy Efficiency,"Reduce depdendencies, move few modules out of the boost_modules_wrapper.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6052:0,Reduce,Reduce,0,https://root.cern,https://github.com/root-project/root/pull/6052,1,['Reduce'],['Reduce']
Energy Efficiency,"Reduce duration of DF unit tests, eliminating jitting in favor of compilation where possible and optimizing obvious parameters, all without loosing any coverage. # This Pull request:. ## Changes or fixes:; The df battery of unit tests now runs a few minutes faster than before. ## Checklist:. - [v] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13621:0,Reduce,Reduce,0,https://root.cern,https://github.com/root-project/root/pull/13621,2,"['Reduce', 'battery']","['Reduce', 'battery']"
Energy Efficiency,Reduce extra char -> llvm::StringRef conversions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1642:0,Reduce,Reduce,0,https://root.cern,https://github.com/root-project/root/pull/1642,1,['Reduce'],['Reduce']
Energy Efficiency,Reduce in half the TTreeReader overhead,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3216:0,Reduce,Reduce,0,https://root.cern,https://github.com/root-project/root/pull/3216,1,['Reduce'],['Reduce']
Energy Efficiency,Reduce memory allocation size for compression buffer,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14651:0,Reduce,Reduce,0,https://root.cern,https://github.com/root-project/root/issues/14651,1,['Reduce'],['Reduce']
Energy Efficiency,Reduce need for recursive jitting (related to ROOT-10426),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4625:0,Reduce,Reduce,0,https://root.cern,https://github.com/root-project/root/pull/4625,1,['Reduce'],['Reduce']
Energy Efficiency,Reduce precision errors for Mean and StdDev #7395,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9546:0,Reduce,Reduce,0,https://root.cern,https://github.com/root-project/root/pull/9546,1,['Reduce'],['Reduce']
Energy Efficiency,Reduce severity warning for DNN with weights.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/617:0,Reduce,Reduce,0,https://root.cern,https://github.com/root-project/root/pull/617,1,['Reduce'],['Reduce']
Energy Efficiency,Reduce the amount of memory which is allocated by the minimizer in the standard DNN algorithm.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/262:0,Reduce,Reduce,0,https://root.cern,https://github.com/root-project/root/pull/262,2,"['Reduce', 'allocate']","['Reduce', 'allocated']"
Energy Efficiency,Reduce the headers and adapt it to boost 1.72,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6049:0,Reduce,Reduce,0,https://root.cern,https://github.com/root-project/root/pull/6049,2,"['Reduce', 'adapt']","['Reduce', 'adapt']"
Energy Efficiency,Reduce the memory footprint of the computation graph,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15264:0,Reduce,Reduce,0,https://root.cern,https://github.com/root-project/root/pull/15264,1,['Reduce'],['Reduce']
Energy Efficiency,Reduce the needed memory for compilation,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1516:0,Reduce,Reduce,0,https://root.cern,https://github.com/root-project/root/pull/1516,1,['Reduce'],['Reduce']
Energy Efficiency,Reduce the size difference between title and text in issue template,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6444:0,Reduce,Reduce,0,https://root.cern,https://github.com/root-project/root/pull/6444,1,['Reduce'],['Reduce']
Energy Efficiency,Reduce usage of TVirtualX.h in other includes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5072:0,Reduce,Reduce,0,https://root.cern,https://github.com/root-project/root/pull/5072,1,['Reduce'],['Reduce']
Energy Efficiency,Reduce usage of core includes in sources and partially in header files,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5069:0,Reduce,Reduce,0,https://root.cern,https://github.com/root-project/root/pull/5069,2,['Reduce'],['Reduce']
Energy Efficiency,Reduce usage of core/meta includes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4534:0,Reduce,Reduce,0,https://root.cern,https://github.com/root-project/root/pull/4534,1,['Reduce'],['Reduce']
Energy Efficiency,Reduce usage of locks by TPluginHandler,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11631:0,Reduce,Reduce,0,https://root.cern,https://github.com/root-project/root/pull/11631,1,['Reduce'],['Reduce']
Energy Efficiency,"Reduce usage of unsafe `Form()` function, especially in Thread.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11744:0,Reduce,Reduce,0,https://root.cern,https://github.com/root-project/root/pull/11744,1,['Reduce'],['Reduce']
Energy Efficiency,"Reduce(Op, 0) is nicer than Reduce(Op, """", 0).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/757:0,Reduce,Reduce,0,https://root.cern,https://github.com/root-project/root/pull/757,2,['Reduce'],['Reduce']
Energy Efficiency,Reduce/improve includes usage in ROOT header files,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5535:0,Reduce,Reduce,0,https://root.cern,https://github.com/root-project/root/pull/5535,1,['Reduce'],['Reduce']
Energy Efficiency,Reduced ExcludeModules,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3635:0,Reduce,Reduced,0,https://root.cern,https://github.com/root-project/root/pull/3635,1,['Reduce'],['Reduced']
Energy Efficiency,Reduced ExcludeModules by one,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3580:0,Reduce,Reduced,0,https://root.cern,https://github.com/root-project/root/pull/3580,1,['Reduce'],['Reduced']
Energy Efficiency,"Reduces the amount of resources (population size, cycles, steps, etc.) required for TMVA tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/435:0,Reduce,Reduces,0,https://root.cern,https://github.com/root-project/root/pull/435,1,['Reduce'],['Reduces']
Energy Efficiency,Refactor TFormula::Eval() to reduce code duplication,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7804:29,reduce,reduce,29,https://root.cern,https://github.com/root-project/root/pull/7804,1,['reduce'],['reduce']
Energy Efficiency,"Remove definitions for weak symbols that can be referenced from the process. Idea by @hahnjo !. Should fix relocation issues on M1 as reported by @FonsRademakers . For hsimple.C, this reduces the amount of emitted symbols from 57 to 43.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8804:184,reduce,reduces,184,https://root.cern,https://github.com/root-project/root/pull/8804,1,['reduce'],['reduces']
Energy Efficiency,"Remove some headers from `std_darwin.modulemap` and backport https://github.com/llvm/llvm-project/commit/09ec0004eee2d9929d25cf519956cc470ffb33dd to fix the build of `std.pcm`. ---. This fixes the build but still has five failing tests:; ```; The following tests FAILED:; 206 - gtest-math-mathcore-test-CladDerivatorTests (Failed); 232 - gtest-roofit-histfactory-test-testHistFactory (Failed); 235 - gtest-roofit-hs3-test-testRooFitHS3 (Failed); 267 - gtest-roofit-roofitcore-test-testRooFuncWrapper (Failed); 1729 - roottest-root-io-compression-make (Failed); ```. There seem to be at least two problems: an `UNREACHABLE executed`; ```; builtin functions are handled elsewhere; UNREACHABLE executed at /Users/sftnight/jonas/root.src/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:2036!; ```. and Clad not being able to differentiate `__builtin_pow`:; ```; [ RUN ] CladDerivator.power; In module 'std' imported from input_line_1:1:; /Library/Developer/CommandLineTools/SDKs/MacOSX15.0.sdk/usr/include/c++/v1/__math/exponential_functions.h:162:55: warning: Unsupported declaration; using __result_type = typename __promote<_A1, _A2>::type;; ^; /Library/Developer/CommandLineTools/SDKs/MacOSX15.0.sdk/usr/include/c++/v1/__math/exponential_functions.h:153:10: warning: function '__builtin_pow' was not differentiated because clad failed to d; ifferentiate it and no suitable overload was found in namespace 'custom_derivatives', and function may not be eligible for numerical differentiation.; return __builtin_pow(__x, __y);; ^; /Users/sftnight/jonas/root.src/math/mathcore/test/CladDerivatorTests.cxx:43: Failure; Expected equality of these values:; 48; value->GetAsDouble(); Which is: 0; [ FAILED ] CladDerivator.power (6 ms); ```. I'm still investigating, starting with the first.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15900:892,power,power,892,https://root.cern,https://github.com/root-project/root/pull/15900,2,['power'],['power']
Energy Efficiency,Removes MarkovChain interfaces that are one-time used in `MCMCInterval` . Now obtain the reduced markov chain data (also as Hist ) by calling `reduce` on the RooDataSet (which can be directly accessed through `MarkovChain::GetAsConstDataSet`). . Updates all `reduce` and `reduceEng`methods to const across `RooAbsData` and other RooFit classes with overrides.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16334:89,reduce,reduced,89,https://root.cern,https://github.com/root-project/root/pull/16334,4,['reduce'],"['reduce', 'reduceEng', 'reduced']"
Energy Efficiency,Replacing the use of non-standard variable arrays with heap-allocated arrays in TDavixFile.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16519:60,allocate,allocated,60,https://root.cern,https://github.com/root-project/root/pull/16519,1,['allocate'],['allocated']
Energy Efficiency,Resolve tbb scheduler conflicts,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/326:12,schedul,scheduler,12,https://root.cern,https://github.com/root-project/root/pull/326,1,['schedul'],['scheduler']
Energy Efficiency,"Revert ""Reduced ExcludeModules by one""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3589:8,Reduce,Reduced,8,https://root.cern,https://github.com/root-project/root/pull/3589,1,['Reduce'],['Reduced']
Energy Efficiency,"RooFit uses doubles everywhere else, so if importing a model from JSON; should give the same biswise results as creating the model in the; workspace factory language, `double` needs to be used in the JSON; interface too. There is also another commit that fixes a typo, and another commit that adds an easy way to fill lists via the JSON interface in order to reduce the number of lines of code needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12223:359,reduce,reduce,359,https://root.cern,https://github.com/root-project/root/pull/12223,1,['reduce'],['reduce']
Energy Efficiency,"Roofit was using TInterpreter::Next, which was actually calling; TClingTypedefInfo::InternalNext. This function is iterating each decls; and is not efficient. Measured performance of this patch on stressRooFit; testcase and it didn't have a significant different but not making roofit; slower as well.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1713:148,efficient,efficient,148,https://root.cern,https://github.com/root-project/root/pull/1713,2,['efficient'],['efficient']
Energy Efficiency,Rootcling always decided to take the most expensive path and make a; lookup even in the cases where it already has found the declaration; it looks for. This patch speeds up visibly rootcling dictionary generation time; and reduces the pcm size from 340MB to 165MB on my machine. It also; reduces the rss memory usage from 350MB to 250MB for ROOT with; runtime_cxxmodules. Patch by Axel Naumann(@Axel-Naumann) and me!,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2421:223,reduce,reduces,223,https://root.cern,https://github.com/root-project/root/pull/2421,2,['reduce'],['reduces']
Energy Efficiency,Rootcling builds a set of modules implicitly based on #including of a header; contained in the nominated module. The build system has no way to track such; dependencies and even if it could there would be no rule to execute to; regenerate the outdated module. This patch extends rootcling to also keep track of the implicitly generated; modules and delete them (to regenerate them). A more sustainable solution is to; request each module to be built explicitly which requires a bit of refactoring; in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4219:390,sustainab,sustainable,390,https://root.cern,https://github.com/root-project/root/pull/4219,1,['sustainab'],['sustainable']
Energy Efficiency,Rule scheduling,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2688:5,schedul,scheduling,5,https://root.cern,https://github.com/root-project/root/pull/2688,3,['schedul'],['scheduling']
Energy Efficiency,Run tutorials with a maximum of 4 threads to avoid MT problems on some machines. Disable also OpenMP when running in MT in ROOT. Reduce also by a factor of 5 the number of input events,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12310:129,Reduce,Reduce,129,https://root.cern,https://github.com/root-project/root/pull/12310,1,['Reduce'],['Reduce']
Energy Efficiency,"SaveGraph mainly relied on static structures. Removed static maps, which were used to check if a define/filter/range node were already on the computation graph.; Solution is to pass a (non-static) map, which is created at each call of SaveGraph. Get rid of the static id initializer.; The size of the map of visited nodes is used to assign unique ids.; Now, also the action nodes are in the visited map.; The visited map is now only one and has signature std::unordered_map<void *, std::shared_ptr<GraphNode>> - in this manner, different type of nodes can use the same map. Tests were adapted accordingly. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9536:585,adapt,adapted,585,https://root.cern,https://github.com/root-project/root/pull/9536,1,['adapt'],['adapted']
Energy Efficiency,"Schedule nightly builds from 1 am onwards, spaced by 15 minutes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15523:0,Schedul,Schedule,0,https://root.cern,https://github.com/root-project/root/pull/15523,1,['Schedul'],['Schedule']
Energy Efficiency,"See discussion at https://github.com/root-project/root/pull/7286. This set of improvements to TBufferMerger (and more) was inspired by the terrible performance of the parallel merging (and fast merging in general) in the case where the TTree has a very large number of branches (1000+). Where in the original version a TBufferMerger with a file with 1000+ branches and only 50s and ran with any number of threads would take more than 3m (did not wait until the end) the new version takes 11s with 1 thread, 8s with 6 threads and 22s with 6 thread when increased to 500 events. (using the CMS file ../data//250202_181_RECO.root). This PR includes:. * Skipping the boxing/compressing/uncompressing/unboxing cycle if the TBufferMerger is available (not already merging) when the thread is writing its TMemFile. * Skipping SetBranchAddress and SetMakeClass in when doing fast cloning (where that information is not used anyway). * Replacing calling to the slow TObjArray::GetEntries (which counts the slot used) by calling GetEntriesFast. * Speeding up the GetMother implementation (caching parent's address sooner when reading, use that information in GetMother). * In fast cloning, delay writing the output until the last input is processed (instead of writing the output after each input),. * Optimization of fast cloning handing of empty write basket. It also contains a couple of bug fixes (RNtuple merging forgetting to merge the result of the objects in the file, iofeatures incorrectly cloned). Also made TBufferMerger::GetQueueSize actually thread safe (it is necessary to use it to stop the producer from adding more data if the queue is too full). Also improved TClass::GetBaseClassOffset parallelism (benefit parallel boxing/unboxing) and reduced/removed contention see in the mechanism use to determine the actual object type at run-time (TIsAProxy).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7339:1747,reduce,reduced,1747,https://root.cern,https://github.com/root-project/root/pull/7339,1,['reduce'],['reduced']
Energy Efficiency,"See https://root-forum.cern.ch/t/open-gui-failed-on-latest-macos-13-3-1/54474. ```; root [0] new TBrowser; root.exe(29254,0x16d62f000) malloc: *** error for object 0x600002e1a980: pointer being freed was not allocated; root.exe(29254,0x16d62f000) malloc: *** set a breakpoint in malloc_error_break to debug; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12750:208,allocate,allocated,208,https://root.cern,https://github.com/root-project/root/issues/12750,1,['allocate'],['allocated']
Energy Efficiency,"Significant revamp of FillBuffer. The new scheme insures a much more stable and efficient behavior in case of low; memory given by the user compared to the size of the buffer or 'odd' basket; layout. The basket collection is now done in 4 phases:. 1. One basket per branch, basket must contains the request entry and is not yet loaded or used,; 2. Even out by adding baskets so that all branches reach the same entry (or close); 3. Add the remaining branches from the current cluster.; 4. Add the basket from the begining of the clsuter to the current entry (if any). then repeat the 4 steps for the next cluster. The iteration is stopped as soon as the cache is 'full' as defined by these; rules:. - During step 1 of the first cluster, continue up to 4 times the user requested; cache size; - During steps 2 to 4 of the first cluster, continue up to 2 times the user; requested cache sizep; - During steps 2 to 4, the 'first' basket of a branch is accepted up to 4 times; the user requested cache size (i.e as if it had been selected during the 1st; step); - During the other clusters, continue up to the user requested cache size. A basket if rejected/skipped if its individual size is larger than the user; requested cache size. In addition, upon seeing a cache miss, FillBuffer now detects if all the basket; in the cache have already been used (read from the cache) in which case we can\; discard them and load the next set of baskets. As a side effect, we now keep a record of which baskets are in the cache and; which of those baskets have been used. The TTreePerfStats now keep a complete; log of all the basket that are:; - loaded in the main cache (and how many times); - loaded in the 'misss' cache (and how many times); - used; - read directly (complete cache miss); This will be helpful in understanding situation of over-read or slow operations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1960:80,efficient,efficient,80,https://root.cern,https://github.com/root-project/root/pull/1960,1,['efficient'],['efficient']
Energy Efficiency,Significantly speed up the tear down of hadd and its reduce memory use,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4525:53,reduce,reduce,53,https://root.cern,https://github.com/root-project/root/pull/4525,1,['reduce'],['reduce']
Energy Efficiency,"Since RooDataSet and RooArgSet use their own operator new, IsOnHeap was; returning false. Now, memory is allocated using TStorage, which; correctly sets the kIsOnHeap bit if necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5865:105,allocate,allocated,105,https://root.cern,https://github.com/root-project/root/pull/5865,2,['allocate'],['allocated']
Energy Efficiency,"Since all df10* tutorials use IMT(hardware concurrency), it's; inefficient to run them in parallel. This regularly brings us into; timeouts in the nightlies.; To avoid this, those tutorials are now locking the resource; ""multithreaded"", which means that they don't run in parallel. Other; tests that don't have this resource lock still run, though. To reduce; congestion, the RDF tutorials now claim that they use 4 CPUs. That's in; general not true, on an e.g. 8-core machine, CMake will run an IMT=8; with 4 single-threaded ctest, leading to an oversubscription of 1.5; instead of the 2 or more we had before. Backported from 668e0444d17e2",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6280:352,reduce,reduce,352,https://root.cern,https://github.com/root-project/root/pull/6280,1,['reduce'],['reduce']
Energy Efficiency,"Skip CI for the moment, i need to test it a bit more. Naming is probably not ideal. Introduce a new R__NEW_TBB macro to address the change in interface in TBB 2021 and adapt the forward declaration of task_arena accordingly. Deals with the problem @mrodozov reported in issue https://github.com/root-project/root/issues/6933 and by @krasznaa in PR https://github.com/root-project/root/pull/6174 (in whose conversation I first noticed the problem and then immediately forgot about what the real issue was and focused on the code, apologies for that). *Note*: This does not solve the ideal situation in which we can live not forward declaring `tbb::task_arena` and keep tbb hidden from the public interfaces, but patches ROOT to work with the new OneAPI and TBB versions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7059:168,adapt,adapt,168,https://root.cern,https://github.com/root-project/root/pull/7059,1,['adapt'],['adapt']
Energy Efficiency,"Some libraries are layered can depend on other libraries on a private paths. That is, libA can depend on libB which is neither on the LD_LIBRARY_PATH nor on a known system path. The posix linker injects ""variables"" such as @rpath which is expanded at link time to resolve the libraries on a relative path. Prior to this patch, cling's Dyld-based symbol resolution could not trace down such cases causing failures in symbol resolution when a symbol is only defined in libB (a private library). This patch implements the basic posix linker substitutions allowing cling's Dyld-based symbol resolution implementation to follow more closely the linker rules. ## Performance. |platform|test|master|PRv1|PRv2| mem master|mem PRv2|; |:--------|:---|:---------:|:-----------:|:-----------:|:-----------:|:-----------:|; |ubu20|roottest-python-pythonizations|6.5|6.55|6.65|342076|347168|; |ubu20|roottest-cling|112.8|114.53|181.26|411048|416036|; |ubu20|roottest-python|148.5|136.26|144.72|394292|397120|; |ubu20|roottest-root-hist|16.78|17.35|15.45|465156|235084|; |ubu20|roottest-root-math|28.28|27.89|27.40|424072|371256|; |ubu20|roottest-root-tree|462.84|510.59|465.79|796512|797992|; |ubu20|roottest-root-treeformula|117.53|129.16|114.44|261184|260168|; |ubu20|root-io-stdarray|66.90|67.89|65.71|263424|255120|; |ubu20|roottest-root-treeformula|117.55|129.10|; |osx 10.15|roottest-python-pythonizations|17.25|16.06|; |osx 10.15|roottest-cling|346.06|343.46|; |osx 10.15|roottest-root-hist|36.06|36.22|; |osx 10.15|roottest-root-math|49.78|52.42|; |osx 10.15|root-io-stdarray|119.32|118.73|. That PR should reduce the number of `stat` calls improving #7774. Kudos Alexander Penev (@alexander-penev).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6969:1601,reduce,reduce,1601,https://root.cern,https://github.com/root-project/root/pull/6969,1,['reduce'],['reduce']
Energy Efficiency,"Sone changes are made to both the Python and C++ version of the; `rf212_plottingInRanges_blinding` tutorial:. * move around the `-----` that denote section headers to fix the; notebook formatting; * rename `exp` to `expo` to avoid an ambiguity error because of; `std::expr` in C++ tutorial notebook; * use `std::unique_ptr` to avoid leaking of datasets. In particular, the call to `fitTo` includes now the; `Range(""left,right"")` command argument. Otherthise, the fit would also; try to make the model adapt to the empty bins in the blinded region,; giving a wrong fit result (it can be easily seen that the fit was wrong; before by increasing the number of events in the toy dataset to 100k). To avoid that the plotting takes the (now correct) fit range as; `NormRange()` and we can't show what happens if the normalization range; is not set, the `fitrange` string attribute is reset after fitting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10955:501,adapt,adapt,501,https://root.cern,https://github.com/root-project/root/pull/10955,1,['adapt'],['adapt']
Energy Efficiency,"Splits signed and unsigned integers in different column types. For signed integers, add zigzag encoding. Zigzag encoding maps x to 2x if x is positive and to -2x-1 otherwise. So a series of small negative and positive numbers becomes a series of slightly larger but still small positive integers, which is then beneficial for split encoding and compression (more leading zeros; small negative numbers have many leading 1s in two's complement representation). For a charge column, this can make a substantial difference, e.g. compression factor 6 vs 23 with zstd on an LHCb ntuple. Overall, the fraction of data stored in small ints is typically small. On the RNTuple standard benchmarks, the gains are at the 1% level.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12978:465,charge,charge,465,https://root.cern,https://github.com/root-project/root/pull/12978,1,['charge'],['charge']
Energy Efficiency,"Sporadic test failures are caused by the randomness of the test input.; (For some inputs the training does not converge). This patch ""fixes""; this by removing the randomness from the input to the tests. One source of randomness still remains, the dataloader shuffles the; batches internally, relying on a source of randomness that is not; reachable from the outside. However, the variability in test output is _significantly_ reduced.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2251:426,reduce,reduced,426,https://root.cern,https://github.com/root-project/root/pull/2251,1,['reduce'],['reduced']
Energy Efficiency,Starting to include the changes needed to set the minimum supported c++ standard to 17. Once all the changes are recognized properly and the CI is green I will take care of improving the commit history.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13243:147,green,green,147,https://root.cern,https://github.com/root-project/root/pull/13243,1,['green'],['green']
Energy Efficiency,Stores]; 1: Value stored to 'event' during its initialization is never read in /opt/root_src/tmva/tmva/src/DNN/Architectures/Reference/TensorDataLoader.cxx:236; /opt/root_src/tmva/tmva/src/DataInputHandler.cxx:89:8: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Passing value via 1st parameter 'tree' in /opt/root_src/tmva/tmva/src/DataInputHandler.cxx:126; 2: Calling 'DataInputHandler::AddTree' in /opt/root_src/tmva/tmva/src/DataInputHandler.cxx:126; 3: Assuming 'tree' is null in /opt/root_src/tmva/tmva/src/DataInputHandler.cxx:88; 4: Taking true branch in /opt/root_src/tmva/tmva/src/DataInputHandler.cxx:88; 5: Called C++ object pointer is null in /opt/root_src/tmva/tmva/src/DataInputHandler.cxx:89; /opt/root_src/tmva/tmva/src/DataLoader.cxx:182:83: warning: Potential leak of memory pointed to by 'handler' [clang-analyzer-cplusplus.NewDeleteLeaks]; 1: Taking false branch in /opt/root_src/tmva/tmva/src/DataLoader.cxx:150; 2: Memory is allocated in /opt/root_src/tmva/tmva/src/DataLoader.cxx:164; 3: Assuming the condition is false in /opt/root_src/tmva/tmva/src/DataLoader.cxx:166; 4: Taking false branch in /opt/root_src/tmva/tmva/src/DataLoader.cxx:166; 5: Potential leak of memory pointed to by 'handler' in /opt/root_src/tmva/tmva/src/DataLoader.cxx:182; /opt/root_src/tmva/tmva/src/DataLoader.cxx:362:36: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Passing value via 1st parameter 'tree' in /opt/root_src/tmva/tmva/src/DataLoader.cxx:477; 2: Calling 'DataLoader::AddTree' in /opt/root_src/tmva/tmva/src/DataLoader.cxx:477; 3: Assuming 'tree' is null in /opt/root_src/tmva/tmva/src/DataLoader.cxx:353; 4: Taking true branch in /opt/root_src/tmva/tmva/src/DataLoader.cxx:353; 5: Assuming field 'fAnalysisType' is not equal to kNoAnalysisType in /opt/root_src/tmva/tmva/src/DataLoader.cxx:359; 6: Left side of '&&' is false in /opt/root_src/tmva/tmva/src/DataLoader.cxx:359; 7: Called C++ object pointer is n,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:32428,allocate,allocated,32428,https://root.cern,https://github.com/root-project/root/issues/7526,1,['allocate'],['allocated']
Energy Efficiency,StreamerInfo.cxx:3630:7: warning: Value stored to 'clname' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'clname' is never read in /opt/root_src/io/io/src/TStreamerInfo.cxx:3630; /opt/root_src/io/io/src/TStreamerInfo.cxx:4006:4: warning: Value stored to 'ninc' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'ninc' is never read in /opt/root_src/io/io/src/TStreamerInfo.cxx:4006; /opt/root_src/io/io/src/TStreamerInfo.cxx:4011:10: warning: Value stored to 'ninc' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'ninc' is never read in /opt/root_src/io/io/src/TStreamerInfo.cxx:4011; /opt/root_src/io/io/src/TStreamerInfoActions.cxx:3464:8: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]; 1: Taking false branch in /opt/root_src/io/io/src/TStreamerInfoActions.cxx:3246; 2: Control jumps to 'case 215:' at line 3434 in /opt/root_src/io/io/src/TStreamerInfoActions.cxx:3248; 3: Memory is allocated in /opt/root_src/io/io/src/TStreamerInfoActions.cxx:3435; 4: Execution continues on line 3464 in /opt/root_src/io/io/src/TStreamerInfoActions.cxx:3436; 5: Potential memory leak in /opt/root_src/io/io/src/TStreamerInfoActions.cxx:3464; /opt/root_src/io/io/src/TStreamerInfoActions.cxx:3958:10: warning: Value stored to 'asize' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'asize' is never read in /opt/root_src/io/io/src/TStreamerInfoActions.cxx:3958; /opt/root_src/io/io/src/TStreamerInfoActions.cxx:4063:13: warning: Value stored to 'asize' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'asize' is never read in /opt/root_src/io/io/src/TStreamerInfoActions.cxx:4063; /opt/root_src/io/sql/src/TBufferSQL2.cxx:1871:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:118356,allocate,allocated,118356,https://root.cern,https://github.com/root-project/root/issues/7431,1,['allocate'],['allocated']
Energy Efficiency,T.cxx:1740; 16: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/math/matrix/src/TMatrixT.cxx:1742; /opt/root_src/math/matrix/src/TMatrixT.cxx:1761:7: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Taking false branch in /opt/root_src/math/matrix/src/TMatrixT.cxx:97; 2: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:120; 3: Loop condition is false. Exiting loop in /opt/root_src/math/matrix/src/TMatrixT.cxx:97; 4: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:119; 5: Calling 'TMatrixT::Allocate' in /opt/root_src/math/matrix/src/TMatrixT.cxx:98; 6: Null pointer value stored to field 'fElements' in /opt/root_src/math/matrix/src/TMatrixT.cxx:472; 7: Assuming 'no_rows' is < 0 in /opt/root_src/math/matrix/src/TMatrixT.cxx:479; 8: Left side of '||' is true in /opt/root_src/math/matrix/src/TMatrixT.cxx:479; 9: Returning from 'TMatrixT::Allocate' in /opt/root_src/math/matrix/src/TMatrixT.cxx:98; 10: Calling 'TMatrixT::operator=' in /opt/root_src/math/matrix/src/TMatrixT.cxx:99; 11: Assuming 'gMatrixCheck' is 0 in /opt/root_src/math/matrix/src/TMatrixT.cxx:1754; 12: Left side of '&&' is false in /opt/root_src/math/matrix/src/TMatrixT.cxx:1754; 13: Assuming the condition is true in /opt/root_src/math/matrix/src/TMatrixT.cxx:1759; 14: Taking true branch in /opt/root_src/math/matrix/src/TMatrixT.cxx:1759; 15: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/math/matrix/src/TMatrixT.cxx:1761; /opt/root_src/math/matrix/src/TMatrixT.cxx:1782:7: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Taking false branch in /opt/root_src/math/matrix/src/TMatrixT.cxx:108; 2: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:120; 3: Loop condition is false. Exiting loop in /opt/root_src/math/matrix/src/TMatrixT.cxx:108; 4: expan,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7458:136372,Allocate,Allocate,136372,https://root.cern,https://github.com/root-project/root/issues/7458,1,['Allocate'],['Allocate']
Energy Efficiency,T.h:272; 42: Taking false branch in /opt/root_src/math/matrix/inc/TMatrixT.h:272; 43: Assuming 'acoln' is < field 'fNcols' in /opt/root_src/math/matrix/inc/TMatrixT.h:276; 44: Left side of '||' is false in /opt/root_src/math/matrix/inc/TMatrixT.h:276; 45: 'acoln' is >= 0 in /opt/root_src/math/matrix/inc/TMatrixT.h:276; 46: Taking false branch in /opt/root_src/math/matrix/inc/TMatrixT.h:276; 47: Returning null reference in /opt/root_src/math/matrix/inc/TMatrixT.h:280; /opt/root_src/math/matrix/inc/TVectorT.h:86:59: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Calling 'TVectorT::Allocate' in /opt/root_src/math/matrix/src/TVectorT.cxx:207; 2: Null pointer value stored to field 'fElements' in /opt/root_src/math/matrix/src/TVectorT.cxx:156; 3: Assuming 'nrows' is < 0 in /opt/root_src/math/matrix/src/TVectorT.cxx:158; 4: Taking true branch in /opt/root_src/math/matrix/src/TVectorT.cxx:158; 5: Returning from 'TVectorT::Allocate' in /opt/root_src/math/matrix/src/TVectorT.cxx:207; 6: Calling 'TVectorT::SetElements' in /opt/root_src/math/matrix/src/TVectorT.cxx:208; 7: Taking false branch in /opt/root_src/math/matrix/inc/TVectorT.h:85; 8: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:120; 9: Loop condition is false. Exiting loop in /opt/root_src/math/matrix/inc/TVectorT.h:85; 10: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:119; 11: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/math/matrix/inc/TVectorT.h:86; /opt/root_src/math/matrix/src/TDecompBK.cxx:178:10: warning: Value stored to 'kp' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'kp' is never read in /opt/root_src/math/matrix/src/TDecompBK.cxx:178; /opt/root_src/math/matrix/src/TDecompLU.cxx:887:7: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]; 1: Assuming 'det' is null in /opt/root_src/math/mat,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7458:128296,Allocate,Allocate,128296,https://root.cern,https://github.com/root-project/root/issues/7458,1,['Allocate'],['Allocate']
Energy Efficiency,TBB moved to CMake-only in version 2021 and builtin TBB needs to be adapted for the future,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7063:68,adapt,adapted,68,https://root.cern,https://github.com/root-project/root/issues/7063,1,['adapt'],['adapted']
Energy Efficiency,"TColor::GetColor(r,g,b) uses 5bit threshold by; default to create new colors. This differs; from normal X11 with 8bit colors. As a result,; images produced in batch and in interactive; session may differ - see greyscale.C macro. Make default 8bit resolution for colors, and; reduce it only if detecting such display.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14063:275,reduce,reduce,275,https://root.cern,https://github.com/root-project/root/pull/14063,1,['reduce'],['reduce']
Energy Efficiency,"TMVA, DNN, reduce memory allocation in minimizer",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/262:11,reduce,reduce,11,https://root.cern,https://github.com/root-project/root/pull/262,1,['reduce'],['reduce']
Energy Efficiency,TMessage: do not access not-allocated buffer ROOT-10340,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4551:28,allocate,allocated,28,https://root.cern,https://github.com/root-project/root/pull/4551,1,['allocate'],['allocated']
Energy Efficiency,"TNamedBranchProxy did not implement a Hash method.; Therefore when adding TNamedBranchProxy instances to the THashList dedicated to their bookkeping in TTreeReader TObject::Hash was used.; Unfortunately when trying to find the TNamedBranchProxies, their name was used and the hash was built differently by THashList (based on the name).; In order to fix this the following steps were taken.; - THashList was replaced by an unordered_map with names as keys and unique_ptr<TNamedBranchProxy> as values. The unique_ptr is used to automatically manage ownership.; - The methods of TTreeReader were adapted to use this new container as well as the code in TTreeReaderValue and TTreeReaderArray. A real usecase from CMS where the mass of the W boson is studied shows a significant speedup (30%).; The code uses TDataFrame and several nodes are created which read from the same branch in an input tree which holds weights in a collection.; This configuration stressed the performance degradation pattern fixed by this commit as it triggered multiple times the deserialisation of the ""weights branch"". Thanks to Elisabetta Manca and Lorenzo Bianchini for providing the bug report and initial reproducer. These changes will need to be backported at least to ROOT 6.12",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1768:594,adapt,adapted,594,https://root.cern,https://github.com/root-project/root/pull/1768,1,['adapt'],['adapted']
Energy Efficiency,TString.cxx:1916; 25: Taking false branch in /opt/root_src/core/base/src/TString.cxx:1916; 26: Calling constructor for 'TString' in /opt/root_src/core/base/src/TString.cxx:1922; 27: 'cs' is non-null in /opt/root_src/core/base/src/TString.cxx:105; 28: Taking true branch in /opt/root_src/core/base/src/TString.cxx:105; 29: Calling 'TString::Init' in /opt/root_src/core/base/src/TString.cxx:107; 30: 'capacity' is >= 0 in /opt/root_src/core/base/src/TString.cxx:249; 31: Taking false branch in /opt/root_src/core/base/src/TString.cxx:249; 32: 'nchar' is >= 0 in /opt/root_src/core/base/src/TString.cxx:253; 33: Taking false branch in /opt/root_src/core/base/src/TString.cxx:253; 34: Taking false branch in /opt/root_src/core/base/src/TString.cxx:257; 35: 'capacity' is >= kMinCap in /opt/root_src/core/base/src/TString.cxx:265; 36: Taking false branch in /opt/root_src/core/base/src/TString.cxx:265; 37: Memory is allocated in /opt/root_src/core/base/src/TString.cxx:270; 38: Returned allocated memory in /opt/root_src/core/base/src/TString.cxx:107; 39: Returning from constructor for 'TString' in /opt/root_src/core/base/src/TString.cxx:1922; 40: Loop condition is false. Execution continues on line 1932 in /opt/root_src/core/base/src/TString.cxx:1926; 41: Potential leak of memory pointed to by 'str_ref0.fRep..fLong.fData' in /opt/root_src/core/base/src/TString.cxx:1933; /opt/root_src/core/base/src/TString.cxx:2173:8: warning: Potential leak of memory pointed to by field 'fData' [clang-analyzer-cplusplus.NewDeleteLeaks]; 1: Assuming 'base_in' is >= 2 in /opt/root_src/core/base/src/TString.cxx:2151; 2: Left side of '||' is false in /opt/root_src/core/base/src/TString.cxx:2151; 3: Assuming 'base_in' is <= 36 in /opt/root_src/core/base/src/TString.cxx:2151; 4: Left side of '||' is false in /opt/root_src/core/base/src/TString.cxx:2151; 5: Assuming 'base_out' is >= 2 in /opt/root_src/core/base/src/TString.cxx:2151; 6: Left side of '||' is false in /opt/root_src/core/base/src/TString.cxx:215,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7412:136306,allocate,allocated,136306,https://root.cern,https://github.com/root-project/root/issues/7412,1,['allocate'],['allocated']
Energy Efficiency,"Thanks to @cwiel for pointing out the issue. I've refactored the code and reduced code duplication massively. The bug is fixed by writing a pointer unequal zero in the array interface since numpy does not take this as exception. Actually, it does not matter at all what is written in the `""data""` field of the array interface since it is never accessed. Edit: Added a backport for experimental pyroot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3535:74,reduce,reduced,74,https://root.cern,https://github.com/root-project/root/pull/3535,1,['reduce'],['reduced']
Energy Efficiency,The DataLoader had a number of extraneous includes and friends. Removing them also reduces compilation time!,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3319:83,reduce,reduces,83,https://root.cern,https://github.com/root-project/root/pull/3319,1,['reduce'],['reduces']
Energy Efficiency,"The G__matchfilename() implements a file comparison check used; specifically for loading/unloading of the libraries and the source code.; On UNIX-like systems the basic filename comparison is supplemented an; additional file match condition is based on comparing file attributes; returned by the stat() syscall. On a typical load/unload call, the; G__matchfilename() is iterated over items of G__srcfile, which produces; a number of stat() calls that is quadratic in number of loaded files. In our specific case we observe an occasional poor performance on AFS; network filesystem. The suggested change introduces a cache for the; stat() calls that should allow to reduce the number of calls to scale; linearly. # This Pull request:. ## Changes or fixes:. Fixes downstream issue star-bnl/star-sw#115. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9010:665,reduce,reduce,665,https://root.cern,https://github.com/root-project/root/pull/9010,1,['reduce'],['reduce']
Energy Efficiency,"The MemPoolForRooSets has two problems:. 1. Scaling issues: increasing memory and CPU consumption with; increasing number of arenas, becuase trying to allocate a new; non-overlapping arena often fails. 2. Amplification of memory leaks in user code:; If one of the elements in the arena leaks, the whole arena will; leak. Since each arena has 6000 elements, this means a leak of a; RooArgSet will be ampilfied by a factor 6000 in the worst case. This commit proposes a solution to the scaling/performance issues and; the leak amplification. Explained for the example for RooArgSet, the idea is to use each arena; 120 times because this is the size of RooArgSet in bytes. This can be; done while still having unique adresses for each RooArgSet:. 1. Keep a gap of 120 bytes between each RooArgSet; 2. When an address was used before, add one byte and in can be used; again. So at the cost of allocating 2x more memory per arena, we can reuse each; arena 120 times. Now, the good thing is that the interval of creating/deleting; RooArgSets is usually higher than 6000. So when reusing an arena; multiple times, they will eventually be filled only by leaking; RooArgSets if there is a leak. Meaning the leak amplification effect; should be gone. This was checked with the CMS Higgs combine toy fit example from the; Higgs combine tutorial. Without this commit, there is a GB-level leak; that can be clearly observed with `top`, but with this commit the leak; becomes negligible again. The PR is still kind of a draft PR. I will check with the bot if this solution works on all platforms and then continue improving the code. This should be backported together with https://github.com/root-project/root/pull/7935. This should finally fix https://github.com/root-project/root/issues/7933. Profile of the CMS toy experiment example with a ROOT Debug build:; * [without this PR](https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/combine_example_2_old); * [with this PR](https://rembserj.web.cern.c",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7954:86,consumption,consumption,86,https://root.cern,https://github.com/root-project/root/pull/7954,2,"['allocate', 'consumption']","['allocate', 'consumption']"
Energy Efficiency,"The Oracle interface was deprecated in ROOT 6.30 and scheduled for removal in 6.32. As we are now in the 6.32 development cycle, everything related to `oracle` can be removed. See also 1c74d59d.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14828:53,schedul,scheduled,53,https://root.cern,https://github.com/root-project/root/pull/14828,1,['schedul'],['scheduled']
Energy Efficiency,The POSIX does not contains /dev/random [1]. Moreover the /dev/random; might not have write permissions. The better way is to use an another; solution which is based on the msync system call [2]. Also this solution; reduces the number of context switching. [1] -- https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap10.html; [2] -- https://pubs.opengroup.org/onlinepubs/009695399/functions/msync.html,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4136:216,reduce,reduces,216,https://root.cern,https://github.com/root-project/root/pull/4136,1,['reduce'],['reduces']
Energy Efficiency,"The PiecewiseInterpolation class is used in the context of HistFactory models, where is is always used the same way: all RooAbsReals in _lowSet, _histSet, and also nominal are 1D RooHistFuncs with with same structure. Therefore, we can make a big optimization: we get the bin index ony once here in the generated code for PiecewiseInterpolation. Then, we also rearrange the histogram data in such a way that we can always pass the same arrays to the free function that implements the interpolation, just with a dynamic offset calculated from the bin index. This change is covered by the `testHistFactory` unit test. Together with the change suggested in the other draft PR, where the generated code is split up into separate functions for each channel, this PR addresses the plan of work item ""Reduce JITting time for AD in RooFit"". Different from that optimization, this one doesn't depend on the upcoming Clad 1.5, so it can be merged without upgrading Clad.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15543:794,Reduce,Reduce,794,https://root.cern,https://github.com/root-project/root/pull/15543,1,['Reduce'],['Reduce']
Energy Efficiency,"The Pythia 6 interface was deprecated in ROOT 6.30 and scheduled for removal in 6.32. As we are now in the 6.32 development cycle, everything related to `pythia6` can be removed. See also 1c74d59d.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14823:55,schedul,scheduled,55,https://root.cern,https://github.com/root-project/root/pull/14823,1,['schedul'],['scheduled']
Energy Efficiency,The RNTupleReader should destruct its page source before it destructs; the task scheduler. In particular it must never set the page source's; task scheduler to nullptr because the page source might still use the; task scheduler for decompression. Fixes #7076,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7194:80,schedul,scheduler,80,https://root.cern,https://github.com/root-project/root/pull/7194,3,['schedul'],['scheduler']
Energy Efficiency,"The RPageSourceFile's use of RRawFile should not use the raw file's block cache layer for the page reads. The page source knows exactly which byte ranges are required. It makes itself I/O scheduling decisions (e.g., coalescing, vector reads) to optimize the read pattern. For opening the file, getting the RNTuple anchor and meta-data, however, we keep the buffered reads.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15257:188,schedul,scheduling,188,https://root.cern,https://github.com/root-project/root/pull/15257,1,['schedul'],['scheduling']
Energy Efficiency,"The RooFitDriver mutates the RooAbsArgs it evaluates by setting a; specific index token to quickly look up cached information for a given; RooAbsArg. Because of this, it's not possible to evaluate two computation graphs; that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is; often happens that different likelihoods based on the same model are; instantiated. The key to the solution in this commit is the insight that for each; likelihood, almost the full compute graph is cloned anyway, *except* for; the parameters. Therefore, the solution proposed in this commit is to; not set the data tokens for the parameters and not fill the data map; with their values. Instead, when querying their values, they are just; retrieved from the object itself. This is possible because parameters; are always scalar, and the RooAbsReal can already cache scalar members; in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12925:1097,green,green,1097,https://root.cern,https://github.com/root-project/root/pull/12925,1,['green'],['green']
Energy Efficiency,"The RooMinimizerFcn constructor used the `RooAbsArg::getParameters`; function that returns an owning pointer, but missed to delete that; pointer afterwards, causing a memory leak until this commit. This PR is another step in reducing the memory consumption increase reported in https://github.com/root-project/root/issues/9196.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9296:245,consumption,consumption,245,https://root.cern,https://github.com/root-project/root/pull/9296,1,['consumption'],['consumption']
Energy Efficiency,"The RooPoisson is implemented with TMath::Poisson, which is normalized; if x covers the full definition range of the Poisson distribution, which; is zero to infinity. By correctly reporting this self-normalization in; that case, the creation of a dummy integral object that returns one is; avoided. The reduced overhead results in a significant speedup of; HistFactory fits with gamma constraints between 10 and 15 % in the hf001; tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:; ```; ----------------------------------------------------------------------------------------------; Benchmark Time CPU Iterations; ----------------------------------------------------------------------------------------------; hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391; hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762; hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156; hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423; ```. and after this PR:; ```; ----------------------------------------------------------------------------------------------; Benchmark Time CPU Iterations; ----------------------------------------------------------------------------------------------; hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744; hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786; hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835; hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10836:303,reduce,reduced,303,https://root.cern,https://github.com/root-project/root/pull/10836,1,['reduce'],['reduced']
Energy Efficiency,"The THistRange class define a generic bin range region which can be used to efficiently iterate over bins.; It is used to create a THBinIterator class which can used to iterate over bins; without using for loops over axis or simple global bin iterations.; Example for computing histogram integral in a given range: . ```; auto hist = new TH1D(""h1"",""h1"",100,-5,5);; hist->FillRandom(""gaus""); ; hist->GetXaxis()->SetRange(40,60); ; THistRange r(hist); ; double integral = 0; ; for (auto & bin : r) { integral += hist->GetBinContent(bin); }; std::cout << ""integral "" << integral << std::endl;; ```. Add also a test program which measures the ieration time. When iterating over a multi-dimensional histogram (e.g. 3 d) the new iteration can be up to 10 times faster.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6795:76,efficient,efficiently,76,https://root.cern,https://github.com/root-project/root/pull/6795,1,['efficient'],['efficiently']
Energy Efficiency,"The `RooAbsReal::getPropagatedError()` function was using some of the; most expensive operations in RooFit for larger computation graphs:; cloning the model, and figuring out parameters and observables. This was done for no apparent reason, as the `RooAbsReal` is not mutated; by `getPropagaterError`. Parameter values are slightly changed for; reevaluation, but they are reset right after. A final call to `getVal()`; is enough to reset the original state, which is much more efficient than; cloning everything. This change was motivated by the following forum post:; https://root-forum.cern.ch/t/getpropagatederror-method-taking-too-long-to-run/50392",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10762:477,efficient,efficient,477,https://root.cern,https://github.com/root-project/root/pull/10762,1,['efficient'],['efficient']
Energy Efficiency,"The `RooGenFunction` was only a lightweight adaptor that exports a RooAbsReal as a `ROOT::Math::IGenFunction`. The same can be easily achieved with the generic `ROOT::Math::Functor1D`, so in the spirit of not duplicating interfaces, the `RooGenFunction` is removed. The same goes for the `RooMultiGenFunction`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11981:44,adapt,adaptor,44,https://root.cern,https://github.com/root-project/root/pull/11981,1,['adapt'],['adaptor']
Energy Efficiency,"The `RooVectorDataStore` had two different buffers to store the row data in: the so-called ""attached buffers"" and the ""native buffers"". The problem is that when external buffers are attached, the call to `RooVectorDataStore::get()` is not loading the native buffers anymore, which is breaking some code that assumes this, like `RooVectorDataStore::loadValues`, which is used in `RooDataSet::reduce`. This breaks the reduction of datasets with externally attached buffers, which breaks the copy constructor of the `RooNLLVar`. This commit suggests to always load both the native and attached buffers if `RooVectorDataStore::get()` is called. This has almost no performance overhead and is much safeter. Since this change fixes the copy constructor of the `RooNLLVar`, which is used when plotting the NLL, this commit fixes this JIRA ticket: https://sft.its.cern.ch/jira/browse/ROOT-9752. A unit test that covers the problem reported in the JIRA ticket is also added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11477:391,reduce,reduce,391,https://root.cern,https://github.com/root-project/root/pull/11477,1,['reduce'],['reduce']
Energy Efficiency,"The `computeCategoryOldStyle` function in the RooMultiCategory class; gave wrong results in case the multi-category uses categories where the; ordinal number of the category doesn't match the category index. Since the `computeCategoryOldStyle` function was still used for; assertions in debug mode, this caused unnecessary assertion failures as; reported on the forum:. https://root-forum.cern.ch/t/roorealvar-setbinning-with-name-in-pyroot/51069. The code in the forum, together with some added printouts in; `RooMultiCategory::evaluate()` clearly demonstrated that the old-style; implementation is wrong. As the new implementation is already tested for a few releases now, the; most sustainable way to fix the wrong assertion failure is to simply; remove the comparison with the old-style interfaces in debug builds. Since after this change, the `RooMultiCatIter` is only used for the deprecated; `RooSuperCategory::MakeIterator()`, this PR also suggests to remove that; deprecated function together with the `RooMultiCatIter`. This is kind of a followup to https://github.com/root-project/root/pull/5502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11117:685,sustainab,sustainable,685,https://root.cern,https://github.com/root-project/root/pull/11117,1,['sustainab'],['sustainable']
Energy Efficiency,"The changes in this PR address this forum post...; https://root-forum.cern.ch/t/chi2fito-with-yvar-does-not-support-range-option/56369; ...and follows up on the discussion here:; https://github.com/root-project/root/pull/13638. Short summaries of the commits, more detail in the commit descriptions:; 1. Following up on #1455, the multi-range chi2 creation logic is removed from `createChi2()`, because for a few months already this can be dealt with in the test statistics base classes; 2. Avoid separate RooXYChi2Var constructors for pdfs and functions: instead of having separate constructors for RooAbsPdf and RooAbsReal, it's better and less code duplication to have one RooAbsReal constructor and dynamically check if it got a RooAbsPdf; 3. Support `NumCPU()` and `Range()` in createChi2() for RooDataSets; 4. Bugfix in `RooDataSet::reduce()` by also copying the stored errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13651:839,reduce,reduce,839,https://root.cern,https://github.com/root-project/root/pull/13651,1,['reduce'],['reduce']
Energy Efficiency,The changes in this commit achieve two things:. 1. Reduce set of indirectly included headers in other RooFit libraries; by including new `RooBatchComputeTypes.h` instead of; `RooBatchCompute.h` if only the typedefs in the RooBatchCompute; namespace are used. 2. Make sure that no dummy definitions of `__device__` or `__host__` in; case no NVidia compiler is used can leak to user code via; `roobatchcompute` header files.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9446:51,Reduce,Reduce,51,https://root.cern,https://github.com/root-project/root/pull/9446,1,['Reduce'],['Reduce']
Energy Efficiency,"The cluster pool now not only schedules loading of the compressed pages but also their prompt decompression. All the pages that have been loaded are now pushed into a follow-up pipeline step for decompression and pushing into the page pool. This is done with multiple threads. Compared to unwrapping pages on demand, we might now decompress pages from which we never read (because they get completely skipped by the analysis). The RNTuple benchmarks suggest, however, that this happens quite rarely (<1%).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6106:30,schedul,schedules,30,https://root.cern,https://github.com/root-project/root/pull/6106,1,['schedul'],['schedules']
Energy Efficiency,"The ctor of `GSLMCIntegrator` creates a `GSLRngWrapper` instance on the heap and calls its `Allocate()` member function which in turn allocates memory for a GSL random number generator via `gsl_rng_alloc()`. When the `GSLMCIntegrator` instance goes out of scope, its dtor is invoked which deletes the `GSLRngWrapper` pointer and thus invokes its dtor as well. However, `~GSLRngWrapper()` frees the allocated memory only if `fOwn` pointer is set to true, which is only set so in the assignment operator, but not in the `Allocate()` member function. Therefore, the `GSLMCIntegrator` class is leaking memory. This poses a problem, when doing a large number of integrations inside a for loop. The leak was discovered by running valgrind and inspecting the code. Minimal example:; ```cpp; #include <Math/GSLMCIntegrator.h> // ROOT::Math::GSLMCIntegrator. /* built with:. g++ -ggdb3 -Og `root-config --cflags` mcintegrator.cpp -o mcintegrator \; `root-config --libs` -lMathMore. */. int; main(); {; for(unsigned i = 0; i < 20000; ++i); {; ROOT::Math::GSLMCIntegrator vegas(""vegas"", 0., 1.e-1, 10);; }; return 0;; }; ```. Before fix:; ```; valgrind --tool=memcheck --leak-check=full --show-leak-kinds=definite \; --undef-value-errors=no ./mcintegrator. ==12320== Memcheck, a memory error detector; ==12320== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==12320== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info; ==12320== Command: ./mcintegrator; ==12320==; ==12320==; ==12320== HEAP SUMMARY:; ==12320== in use at exit: 100,655,858 bytes in 44,260 blocks; ==12320== total heap usage: 67,782 allocs, 23,522 frees, 101,539,078 bytes allocated; ==12320==; ==12320== 99,089,984 (319,984 direct, 98,770,000 indirect) bytes in 19,999 blocks are definitely lost in loss record 3,515 of 3,515; ==12320== at 0x4C2BE7F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so); ==12320== by 0xAD090F2: gsl_rng_alloc (in /usr/lib/libgsl.so.23.0.0); ==12320== by 0x8223765: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/928:92,Allocate,Allocate,92,https://root.cern,https://github.com/root-project/root/pull/928,4,"['Allocate', 'allocate']","['Allocate', 'allocated', 'allocates']"
Energy Efficiency,"The current code goes through different codepaths depending on the platform. One of the codepaths relies on a non-standard extension (variable-length arrays) and the other manually allocates and frees a char array.; Using a std::string, while losing a bit of performance on Linux/Mac, simplifies and unifies the codepaths and avoids using non-standard C++ (which in turns enable building with -Werror).; The perf hit is most likely negligible, especially given the use of dynamic_cast in the same block.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16476:181,allocate,allocates,181,https://root.cern,https://github.com/root-project/root/pull/16476,1,['allocate'],['allocates']
Energy Efficiency,"The current implementation of `optimize_npartitions` of the Dask backend; queries information about the workers from the Dask client object. The; information is stored in the `client.scheduler_info()` return value; which is a dictionary that can have the key `workers`. Supposedly, when this key exists it means the Dask client has the needed; information. This is not always true. In certain scenarios, for example; when waiting for a batch system to return the available workers to the; dask client, the `workers` key will be present but its value will be an; empty dictionary. This is because the scheduler doesn't already know; which nodes of the cluster will become workers (this can be mitigated by; calling the `client.wait_for_workers` function beforehand). This commit makes the check a bit stronger, getting the value of the; dictionary key `workers` and then checking if that value actually; contains something. fixes #9429",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9431:600,schedul,scheduler,600,https://root.cern,https://github.com/root-project/root/pull/9431,1,['schedul'],['scheduler']
Energy Efficiency,"The current variant-based design of ROOT 7 histogram axes has a number of problems, ranging from inflexibility (users can't add new axis types) to [exponential compilation times](https://sft.its.cern.ch/jira/browse/ROOT-10532). As a first step towards resolving these problems, this PR moves RAxis closer to an inheritance-based design. Along the way, this PR also... - Completely revamps the RAxis test suite with much greater test coverage (which uncovered [ROOT-10555](https://sft.its.cern.ch/jira/browse/ROOT-10555) as a topic of future discussion).; - Reduces the amount of work needed to implement a new RAxis type.; - Resolves [ROOT-10401](https://sft.its.cern.ch/jira/browse/ROOT-10401), [ROOT-10402](https://sft.its.cern.ch/jira/browse/ROOT-10402), [ROOT-10404](https://sft.its.cern.ch/jira/browse/ROOT-10404), [ROOT-10405](https://sft.its.cern.ch/jira/browse/ROOT-10405), [ROOT-10554](https://sft.its.cern.ch/jira/browse/ROOT-10554), and many more minor issues uncovered during testing for which I didn't bother creating a Jira ticket.; - Is a step towards resolving [ROOT-10532](https://sft.its.cern.ch/jira/browse/ROOT-10532). Due to the amount of changes, I would advise using a commit-wise review approach. While the PR's history is not 100% perfect, it is sufficiently well squashed to lend itself to such an approach.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4933:557,Reduce,Reduces,557,https://root.cern,https://github.com/root-project/root/pull/4933,1,['Reduce'],['Reduces']
Energy Efficiency,"The existing implementation in RooBatchCompute for polynomials was not; adequate, because it couldn't deal with coefficients that are different; for each event. This PR is re-implementing the support for RooPolynomial, and also; re-uses the same code for the `RooPolyVar`, which is identical to the; `RooPolynomial` apart from the base class. Also, this PR is removing the old `RooAbsReal::evaluateSpan()` family of functions that was used for the BatchMode before ROOT 6.26. Furthermore, this PR also reduces the use of the `RunContext` class that was connected to the old BatchMode implementation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12675:502,reduce,reduces,502,https://root.cern,https://github.com/root-project/root/pull/12675,1,['reduce'],['reduces']
Energy Efficiency,"The export of RooWorkspace contents to CINT didn't work anymore since; ROOT 6, and the code associated to it should be removed to reduce; maintanance burden.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11145:130,reduce,reduce,130,https://root.cern,https://github.com/root-project/root/pull/11145,1,['reduce'],['reduce']
Energy Efficiency,"The fill pattern sector made a crash on Mac with Cocoa.; The problem was mentioned here: https://root-forum.cern.ch/t/fillcolor-bug-in-root-6-22/43599/2; The fix was found by Timur:; «Filling with patterns is based on callbacks, and those callbacks need an extra information from ROOT, which; is passed as a parameter. Previously, we had this information as a stack-allocated object whose address we were passing. Starting from macOS 11/SDK 10.16, the rendering callback may be triggered when stack-allocated object had already exited its scope and finished its lifetime. Another change we need now — PatternContext also has to care about ‘fImage’ — retain and release then needed, simple non-owning reference is not working anymore.»",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7264:366,allocate,allocated,366,https://root.cern,https://github.com/root-project/root/pull/7264,2,['allocate'],['allocated']
Energy Efficiency,The getNameAsString interface causes a lot of temporary allocations.; The analysis if a decl is a cling-style wrapper can work only on a; simple declarations on the global scope. This patch filters out complex declarations (eg in namespaces) and; checks only the identifier content. The patch reduces the memory footprint difference shown in root-project/root#3012.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3593:293,reduce,reduces,293,https://root.cern,https://github.com/root-project/root/pull/3593,1,['reduce'],['reduces']
Energy Efficiency,"The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it.; ; Kudos Arpitha Raghunandan (@arpi-r)!. We still need some performance measurements but the preliminary results are promising. Performance; ===. Methodology; ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:; 1) root master without modules (modulesoff); 2) root master with modules (moduleson); 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation; ---; A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4016:38,efficient,efficient,38,https://root.cern,https://github.com/root-project/root/pull/4016,3,['efficient'],['efficient']
Energy Efficiency,"The goal of the class is to be an (almost) drop in replacement for SmallVector and std::vector when those are presized and filled later, as it happens in SourceManager and ASTReader. By doing so, sparsely accessed PagedVector can profit from reduced memory footprint. Co-authored-by: Jonas Hahnfeld <jonas.hahnfeld@cern.ch>. (cherry picked from commit 9c7bac05ea52cea6757f083fec8e2b794f8b79d6, backport of https://github.com/root-project/root/pull/13808)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14411:242,reduce,reduced,242,https://root.cern,https://github.com/root-project/root/pull/14411,1,['reduce'],['reduced']
Energy Efficiency,"The goal of the class is to be an (almost) drop in replacement for SmallVector and std::vector when those are presized and filled later, as it happens in SourceManager and ASTReader. By splitting the actual vector in pages of the same size and allocating the pages only when they are needed, using this containers reduces the memory usage by a factor 4 for the cases relevant to the ALICE experiment ROOT / cling usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13808:314,reduce,reduces,314,https://root.cern,https://github.com/root-project/root/pull/13808,1,['reduce'],['reduces']
Energy Efficiency,"The improvement at https://github.com/root-project/root/pull/10318 which stresses file opening in multi-thread RDF reported:; ```; With 256 threads (on partly loaded machine, but still representative):. Baseline:; Percent of CPU this job got: 1557%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:49.89. +this PR; Percent of CPU this job got: 14271%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.11; ```; This 'surprising' increase of CPU time by a factor 9 leading to only a factor 2 improvement in elapsed time is due to the bottleneck migrating from the ([re]moved mutex) to the (many) spin locks. The test can be tweaked (increase number of files, reduce number of entries per file) to stress the file opening more. On ntpl-perf01.cern.ch (single AMD EPYC 7702P 64-Core Processor), the test as is use close to 94% of all cpus and only a little system time:; ```; User time (seconds): 7250.76; System time (seconds): 3.58; Percent of CPU this job got: 12019%; ```; However tweaking to 390000 files of a 1000 entries, we get:; ```; User time (seconds): 450.77; System time (seconds): 438.39; Percent of CPU this job got: 7039%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.63; ```. Some are straight-forward to avoid:. ```; // Avoid lock internal to linux date/time:; diff --git a/io/io/src/TKey.cxx b/io/io/src/TKey.cxx; index e604af2980..f349bd8710 100644; --- a/io/io/src/TKey.cxx; +++ b/io/io/src/TKey.cxx; @@ -99,7 +99,7 @@ TKey::TKey() : TNamed(), fDatime((UInt_t)0); ////////////////////////////////////////////////////////////////////////////////; /// TKey default constructor.; ; -TKey::TKey(TDirectory* motherDir) : TNamed(), fDatime((UInt_t)0); +TKey::TKey(TDirectory* motherDir) : TNamed(), fDatime((UInt_t)0, (UInt_t)0); {; Build(motherDir, """", 0);; ; ```; Some require some thoughts:; ```; Try to avoid bottlenecking on recording TContext with gROOT when reading objects out files.; diff --git a/tree/dataframe/src/RLoopManager.cxx b/tree/dataframe/src/RLoopManager.cxx; inde",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12761:657,reduce,reduce,657,https://root.cern,https://github.com/root-project/root/issues/12761,1,['reduce'],['reduce']
Energy Efficiency,"The inconsistent types were also observed on 32-bit Linux. In ROOT, this was hotfixed by adding a check for 32-bit Linux in the; preprecessor check, but this required including `RConfig.h`. I don't; think this is desirable. A better and more direct check for the underlying problem case is to; check if `long int` and `int` have the same size. This is part of the effort to reduce the differences between PyROOT and; upstream CPyCppyy. I opened the same PR for upstream CPyCppyy, so there is no need to; create a patch file for that if the upstream PR gets merged. One of the; existing patches can actually be removed then. Related commits:; * https://github.com/wlav/CPyCppyy/commit/8a72866b423ad153403aed356e0cc25d763a5894; * https://github.com/root-project/root/commit/02251b5dac0f5ea957bf8be7c8c360bd31c8d45f",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14655:374,reduce,reduce,374,https://root.cern,https://github.com/root-project/root/pull/14655,1,['reduce'],['reduce']
Energy Efficiency,"The last chunk of partial results of MapReduce with std::vectors had the; size of all other chunks. This is dangerous, since the default vector; values might cause unexpected results of the Reduce function. Test added to verify the correctness.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10427:190,Reduce,Reduce,190,https://root.cern,https://github.com/root-project/root/pull/10427,1,['Reduce'],['Reduce']
Energy Efficiency,"The logic that determined the offset hiding of not was coded inside the `RooNLLVarNew` evaluation function so far. This caused trouble, because a change in the global `RooAbsReal::hideOffset()` state did not mark the NLL as dirty. Therefore, it was unpredictable if the offset was actually hidden or not. This commit suggests an improved logic:. * Reducer nodes like the NLL always register a value and an offset to the `EvalContext`. * The evaluator decides whether to subtract the offset or not. * A change in `hideOffset()` makes the evaluator wrapper set all reducer nodes to dirty. A new unit test to cover this was also implemented. FYI, @will-cern",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15081:348,Reduce,Reducer,348,https://root.cern,https://github.com/root-project/root/pull/15081,2,"['Reduce', 'reduce']","['Reducer', 'reducer']"
Energy Efficiency,"The longtime-deprecated `RooStats::HistFactory::EstimateSummary` class; is removed, including the functions that use it. The information that it; was meant to store is managed by the; `RooStats::HistFactory::Measurement` object since many years. As printed out by the HistFactory in a warning message for a long time; already, setting the `Const` attribute to the `<NormFactor>` tag is; deprecated and it will be ignored. Instead, add; `<ParamSetting Const=""True""> myparam </ParamSetting>`; to your top-level XML's `<Measurement>` entry.; ; This deprecation implied that the constant parameter flag in the; `RooStats:HistFactory::NormFactor` class had no effect as well. To avoid; ambiguity in the future, the possibility to set and retrieve this flag with; `NormFactor::SetConst()` and `NormFactor::GetConst()` was removed, and the; aforementioned deprecated warning is not printed anymore. Closes #8059. FYI @gartrog and @cburgard, if as ATLAS Higgs factory power users you have; something against this change please let me know!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10766:960,power,power,960,https://root.cern,https://github.com/root-project/root/pull/10766,1,['power'],['power']
Energy Efficiency,"The marker size in Quartz was using fixed value 1, ignoring that the size must be scaled for retina displays. # This Pull request:; Propagates the scaled marker size to the CGContextFillRect method in charge of the actual drawing. ## Changes or fixes:; Fixes (among others) the wrong ray-tracing output mentioned in #12035. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12055:201,charge,charge,201,https://root.cern,https://github.com/root-project/root/pull/12055,1,['charge'],['charge']
Energy Efficiency,"The new release includes some improvements in Reverse mode:; * Reduce the quadratic cloning complexity to linear.; * Support variable reassignments pontentially depending on control flow.; * Support operators `+=`, `-=`, `*=`, `/=`, `,`, `++`, `--`.; * Allow assignments to array subscripts.; * Support nested assignments in expressions `a = b * ((c ? d : e) = f = g);`; * Enable differentiation of for-loops. See more at: https://github.com/vgvassilev/clad/blob/v0.6/docs/ReleaseNotes.md. This patch enables us to upgrade to llvm9. Clad supports from clang5 to clang9.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5282:63,Reduce,Reduce,63,https://root.cern,https://github.com/root-project/root/pull/5282,1,['Reduce'],['Reduce']
Energy Efficiency,The new release includes some improvements in both Forward and; Reverse mode:; * Better correctness of C++ constructs -- handle scopes properly; allow proper; variable shadowing; and preserve namespaces.; * Efficient evaluation in forward mode.; * Reduced cloning complexity.; * Handle more C++ constructs -- variable reassignments and for loops. See more at: https://github.com/vgvassilev/clad/blob/v0.3/docs/ReleaseNotes.md,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2714:207,Efficient,Efficient,207,https://root.cern,https://github.com/root-project/root/pull/2714,2,"['Efficient', 'Reduce']","['Efficient', 'Reduced']"
Energy Efficiency,"The new release includes some improvements in both Forward and; Reverse mode:; * Support `x += y`, `x -= y`, `x *= y`, `x /= y`, `x++`, `x--`, `++x`, `--x`; in forward mode.; * Reduce emission of unused expressions; * Add a special `#pragma clad ON/OFF/DEFAULT` to annotate regions which; contain derivatives; * Various small optimizations. See more at: https://github.com/vgvassilev/clad/blob/v0.4/docs/ReleaseNotes.md",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2918:177,Reduce,Reduce,177,https://root.cern,https://github.com/root-project/root/pull/2918,1,['Reduce'],['Reduce']
Energy Efficiency,"The number of cores available in the Dask cluster object, i.e. those; that are already known to the scheduler, can be retrieved from the; client object through the `ncores()` method. In some cases, the scheduler has no information about the worker; nodes when the user first creates it. Most notably, when connecting; to batch resources with e.g. an HTCondorCluster. In this case, the; number of cores is actually known only when the resource manager; starts the requested jobs and this can happen much later in the; application. In these cases, we can infer the number of cores that; will be available from the specification that was passed by the user; to when creating the cluster object. This is stored in dictionary; attributes of the cluster itself. In order to dispatch the logic on the types of clusters that; connect to batch computing resources, we have to import also the; dask_jobqueue module, which effectively becomes another runtime; dependency when using the Dask backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10747:100,schedul,scheduler,100,https://root.cern,https://github.com/root-project/root/pull/10747,2,['schedul'],['scheduler']
Energy Efficiency,"The number of thread blocks in kernel calls should not be excessively large, it's sufficient if it's in the order of the number of streaming multiprocessors. In particular, this circumvents a problem with the NLL reduction kernels with grid sizes larger than 512. With this change, there are potentially less threads than events when summing likelihoods, so in the NLL reduction kernels, each thread also has to reduce a few elements in a loop. Closes #13603.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13628:412,reduce,reduce,412,https://root.cern,https://github.com/root-project/root/pull/13628,1,['reduce'],['reduce']
Energy Efficiency,"The operations done by the LookupHelper are costly in both memory and; performance. Almost every operation requires memory allocation and parsing; of often non-trivial C++ code. Unfortunately, the LookupHelper is used very intensively by rootcling and; ROOT. The callers usually do not use any caching mechanisms and redo the; expensive operations over and over even though the answer is known to be; the same as before. For instance, building the dictionary of shows:. ```; MathCore:; Cached entries: 217; Total parse requests: 54051; Cache hits: 53834; TreePlayer:; Cached entries: 183; Total parse requests: 57697; Cache hits: 57514; ```. This patch introduces the first set of caching functionality. In; particular, each LookupHelper::find* function allocates a memory buffer; which is then stored in the clang::SourceManager. We hash the buffer; content and keep a mapping between a hash and FileID and next time we; encounter the same content we do not allocate a new FileID but reuse the; old one. We see decrease in memory footprint by 7% for non-cxxmodules ROOT. For cxxmodules we see significant reduction of the pcm sizes (by half); which translates into rss improvements:. ```; master before:; cpu time = 0.291462 seconds; sys time = 0.064409 seconds; res memory = 345.816 Mbytes; vir memory = 573.508 Mbytes; master after:; cpu time = 0.235828 seconds; sys time = 0.098327 seconds; res memory = 260.012 Mbytes; vir memory = 377.945 Mbytes; ```. Patch by Yuka Takahashi and me.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2483:754,allocate,allocates,754,https://root.cern,https://github.com/root-project/root/pull/2483,2,['allocate'],"['allocate', 'allocates']"
Energy Efficiency,"The problem has been reported in https://root-forum.cern.ch/t/significantly-increased-memory-consumption-of-standardhypotestinvdemo-c-in-6-20-06-compared-to-6-14-04/44405. When running the FrequentistCalculator scan in RooStats with the StandardHypoTestInvDemo.C a large memory increase is observed after 6.14. ; To reproduce is enough to use the workspace created from the `example.xml` of the histfactory tutorial. Do for example : ; ``` ; /usr/bin/time --verbose root.exe -l -b -q ""StandardHypoTestInvDemo.C(\""example_combined_GaussExample_model.root\"")""; ```. Running bisect the cause of this memory increase is this PR: ; #2866",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7890:93,consumption,consumption-of-standardhypotestinvdemo-c-in-,93,https://root.cern,https://github.com/root-project/root/issues/7890,1,['consumption'],['consumption-of-standardhypotestinvdemo-c-in-']
Energy Efficiency,The rule were actually still executed on the proper object and; in the right order. However when we had. - a top level object with a rule for one of its transient member; - that top level object also having a data member that is an STL collection. then the fOnfileObject (type TVirtualArray) was inadvertently resized; by the top node of the STL object (i.e 'type 4' branch) to the size of; the collection. Before the improvement to the rule scheduling the ordering of operations; was:; 1 - a - resize the top level object's fOnfileObject to 1; 2 - b - read the input for the transient member into the fOnfileObject; 3 - c - execute the rule using the input/fOnfileObject and updating the transient member; 4 - d - resize the top level object's fOnfileObject to size of sub-collection. The last stage provoke a reallocation of the element of fOnfileObject (thus; losing the input but only 'after' it has been used. With the new rule scheduling the order becomes. 1 - a - resize the top level object's fOnfileObject to 1; 2 - b - read the input for the transient member into the fOnfileObject; 3 - d - resize the top level object's fOnfileObject to size of sub-collection; 4 - c - execute the rule using the input/fOnfileObject and updating the transient member. and now the consequence of the inadvertent resize becomes visible.; i.e. for each entry where the sub-collection 'grows' the transient member; value will be invalid. [Note: in the example provided with ROOT-9701 the; sub-collection 'grows' by one at each entry],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2731:442,schedul,scheduling,442,https://root.cern,https://github.com/root-project/root/pull/2731,6,['schedul'],['scheduling']
Energy Efficiency,The tutorial runs now very fast in ~20s! The output is slightly different since the statistics is reduced by a factor of 10:. **Old**. ![](https://root.cern/doc/master/pict1_df105_WBosonAnalysis.py.png). **New**. ![df105_WBosonAnalysis](https://user-images.githubusercontent.com/6951222/89209409-892aaf80-d5be-11ea-879c-3fc8f321630d.png),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6112:98,reduce,reduced,98,https://root.cern,https://github.com/root-project/root/pull/6112,1,['reduce'],['reduced']
Energy Efficiency,The tutorial was sometimes timing out on some nodes. To reduce the workload running the MLP has been skipped and the number of trees in the BDT is cut by a factor 4. On my machine running time went from 77s to 10s.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2525:56,reduce,reduce,56,https://root.cern,https://github.com/root-project/root/pull/2525,1,['reduce'],['reduce']
Energy Efficiency,"There are some codes compiled at the start up time. For example,; - #include \""cling/Interpreter/RuntimeUniverse.h\""; - #include \""cling/Interpreter/DynamicLookupRuntimeUniverse.h\""; - namespace cling { class Interpreter; namespace runtime { Interpreter* gCling }}}; - PrintValue; These are passed to Cling as string and initialized at the start up time. So I think it makes sense to reduce top-level global variables, #includes and eagerly deserializations. 1. Global variables; If we break at emitModule, we can get a list of global variables and functions which are actually deserialized. These include functions, variables, STL classes and all the functions derives from them. I tried to change them to for example constexpr, so that it's processed at compile time.; 2. Eagerly Deserialized decls; Thanks to @Axel 's hint and tip, we could minimize eagerly deserialized decls deserialized in ASTReader::PassInterestingDeclsToConsumer. We already removed most of eagerly deserialized decls (Some are remaining to be removed, some are hard to remove and some don't cost a lot). So far, we got 9.2% of cpu time improvement, 15% real time improvement and 8.8% of memory improvement at start up time in release build. I took an average, but the variation of the real-time was very big. - root.exe -q -l; - master; cpu time = 0.09186914285714286 sec (average of 7 times); real time = 0.18371428571428572 sec (average of 7 times); res memory = 142.008 Mbytes. - HEAD; cpu time = 0.08337842857142856 sec; real time = 0.15685714285714286 sec; res memory = 129.508 Mbytes. - hsimple.C; Improved by 13% of cpu time and 8.5% of memory; - master; cpu time = 0.0954708 sec (average); res memory = 142.891 Mbytes. - HEAD; cpu time = 0.0833258 sec; res memory = 130.73 Mbytes. With modules; - Improvement by 17.7% in cputime and 2% in memory on root.exe -q -l; (For memory, small improvement is because most of the memory is taken by LoadModules); - With this patch, release modules is 11.2% slower in cpu time an",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1790:384,reduce,reduce,384,https://root.cern,https://github.com/root-project/root/pull/1790,1,['reduce'],['reduce']
Energy Efficiency,"There are three ways to get the code of latest-stable:; a) git clone as suggested by https://root.cern/install/: 1.4GiB; b) git clone with --depth=20: 673MiB; c) unpacking the zip file download from github: 477MiB. I think for 99% of the users, option a offers no benefits over option b. If you are testing or writing feature branches, it might not be worth figuring out how to fetch only the relevant parts (--shallow-exclude?). And if you were writing a paper on the history of ROOT, you will want the full version history. . Option c has some serious downsides as well. github just calls the directory root-latest-stable, which is a lot less specific than what you would get from a versioned tarball. (Apparently, the version is in build/version_number). Furthermore, lack of a git repository is bad for anyone who might change stuff locally -- reunpacking the zip file and running diff -r is a lot less fun than using git diff. . I would thus argue that option b is the way to go by default: it reduces the space requirements by some 53% while also retaining the ability to make changes and easily contribute them, should the need arise. . Of course, many users will not care about space requirements as any --human-readable output not containing by the Si prefix P is considered small fries anyhow. But for grad students working on their own laptops, or anyone fetching root with limited bandwidth, the difference might still matter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10238:999,reduce,reduces,999,https://root.cern,https://github.com/root-project/root/issues/10238,1,['reduce'],['reduces']
Energy Efficiency,"There are two overloads of TGTextLine::GetText(). One that allocates a new string and returns it, and one that just returns the object's line buffer. The method used in TGText::AsString() just returns the line buffer, so the return value should not be deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7461:59,allocate,allocates,59,https://root.cern,https://github.com/root-project/root/pull/7461,1,['allocate'],['allocates']
Energy Efficiency,"There can be multiple attributes in the forward declaration, see the added test in [`roottest/cling/dict/enum`](https://github.com/root-project/roottest/pull/986) (reduced from a case reported by CMS in https://github.com/cms-sw/cmssw/issues/42234), so we have to look for the last closing parentheses.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13319:164,reduce,reduced,164,https://root.cern,https://github.com/root-project/root/pull/13319,1,['reduce'],['reduced']
Energy Efficiency,"There can be multiple attributes in the forward declaration, see the added test in `roottest/cling/dict/enum` (reduced from a case reported by CMS in https://github.com/cms-sw/cmssw/issues/42234), so we have to look for the last closing parentheses. (cherry picked from commit 9d2f7612a6e88d3a7148b19e131402349bac509b, backport of https://github.com/root-project/root/pull/13319)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13326:111,reduce,reduced,111,https://root.cern,https://github.com/root-project/root/pull/13326,2,['reduce'],['reduced']
Energy Efficiency,"There is an infinite loop in; `PyROOT::TMemoryRegulator::ClearProxiedObjects()`:. ```C++; while (!fObjectMap.empty()) {; auto elem = fObjectMap.begin();; auto cppobj = elem->first;; auto klassid = elem->second;; auto pyclass = CreateScopeProxy(klassid);; auto pyobj = (CPPInstance *)MemoryRegulator::RetrievePyObject(cppobj, pyclass);. if (pyobj && (pyobj->fFlags & CPPInstance::kIsOwner)) {; ...; } else {; // Non-owning proxy, just unregister to clean tables.; // The proxy deletion by Python will have no effect on C++, so all good; MemoryRegulator::UnregisterPyObject(pyobj, pyclass);; }; }; ```. In the second code branch, the object is not removed from the `fObjMap`,; if `UnregisterPyObject` doesn't call the unregister hook because it; quits early. This can happen if there is not C++ object corresponding to; the regulated python object, causing an infinite loop because; `fObjectMap` never gets empty. Although this seems like an obvious logic error, this was only noticed; after the cppyy upgrade. Probably the code path was not hit before. Addresses; https://github.com/root-project/root/issues/15085#issuecomment-2031363812. This PR also includes a second refactoring commit to reduce the amount of C++ code in PyROOT. **This could maybe also fix the problem with the distributed RDataFrame test timeouts!**",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15106:1191,reduce,reduce,1191,https://root.cern,https://github.com/root-project/root/pull/15106,1,['reduce'],['reduce']
Energy Efficiency,"There was a problem in the `IntegralEvaluator` class in the FitUtils.h; in case veccore and vc is used. To evaluate the integral, some input; doubles `x` need to be transferred each of them into a different; `ROOT::Double_v` to call the underlying function. However, the `ROOT::Double_v` can't load just a single double. Calling; the `Load()` function should be done with a pointer to a `double *`; arrary that is large enough to hold as many doubles as the; `ROOT::Double_v` for SIMD instructions. If you use pointers to single doubles anyway, then you get rightly and; out-of-bounds warning. This commits suggests to get gid of this problem by first transferring; the doubles to the beginning of temporary buffers of the right size, and; then passing these buffers to `vecCore::Load()`. Furthermore, I suggest to merge the two code paths of 1D and ND; functions into one. The difference was that the ND path allocated the; `Double_v`s on the heap in a STD vector, and the 1D path used just an; single `Double_v` on the stack, probably for performance reasons. This commit suggests to use the stack also for the ND code path using; stack arrays, so the 1D path would not be a special case anymore. Also, the `<Math/Util.h>` header can not be compiled with CUDA if `vc` is enabled, so there is a second commit in this PR to avoid that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13772:910,allocate,allocated,910,https://root.cern,https://github.com/root-project/root/pull/13772,1,['allocate'],['allocated']
Energy Efficiency,"These changes are based on an analysis with VTune that showed that most waiting happened around `TClass::LoadClassInfo()`. Returning early without taking the lock when the information is already loaded yields very significant performance improvements. Images with each thread activity before and after the optimizations are attached. The x-axis represents time, light green means a thread is active, and dark green and brown mean running. Before changes:; ![before](https://user-images.githubusercontent.com/249404/27340439-be419240-55da-11e7-9cba-d881cfdd3104.png). After changes:; ![after](https://user-images.githubusercontent.com/249404/27340446-c57cf018-55da-11e7-9ef2-bbe30b30092f.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/666:368,green,green,368,https://root.cern,https://github.com/root-project/root/pull/666,2,['green'],['green']
Energy Efficiency,"These changes reduce the average time per number from around 29ns to less than 10ns on a Ryzen 9 3900 using GCC 8.3.1. Using GCC 7.5.0, it now takes around 13ns per number instead of 17ns. With Clang 9.0.1 each random number now takes less than 9ns. For comparison, the implementation from https://github.com/sibidanov/ranluxpp/ (with assembly versions for the multiplication and modulo operation) also comes in at around 9ns.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6844:14,reduce,reduce,14,https://root.cern,https://github.com/root-project/root/pull/6844,1,['reduce'],['reduce']
Energy Efficiency,This PR addresses:; - Bug fix to plotting datasets horizontal error bars; - Bug fix to obtaining datasets of reduced pdfs (i.e. get the corresponding reduced dataset); - Beginning to add some documentation for xRooNode; - Adds a cling interpreter method for xRooNode to print the names of the child nodes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14900:109,reduce,reduced,109,https://root.cern,https://github.com/root-project/root/pull/14900,2,['reduce'],['reduced']
Energy Efficiency,"This PR adds a new data source for `RDataFrame` that is able to provide data from SQlite `SELECT` queries. It will be useful for cvmfs, where we have file catalogs and monitoring information in sqlite files. For instance, one can do. auto rdf = ROOT::RDF::MakeSqliteDataFrame(""catalog.sqlite"", ""select * from catalog"");; auto h = rdf.Define(""lname"", ""name.length()"").Histo1D(""lname"");. to show the distribution of file name sizes. There are probably more use cases, for instance sqlite export of conditions data. This is work in progress, I'm posting it for early comments and feedback. My open points are. - Unit and integration tests are yet to be done; - The data source work single-threaded only at the moment. I initially thought it might be enough to return only a single row in `GetEntryRanges()` to make it thread-safe but that's apparently not enough. So I'm now thinking to wrap `SetEntry()` and `GetEntryRanges()` in a mutex.; - The code is not reusing `TSQLiteServer`. It felt like it requires stretching the `TSQLServer` interface in perhaps unwanted ways, for saving only a handful of direct sqlite API calls. On the other hand, with (probably quite a bit) more work it might be possible to have a more general data source that works on any SQL result set.; - Determining column types in SQlite is tricky as it is dynamically typed and in principle each row can have different column types. If a table column is queried as is, I can use the default/declared column type. For expressions, I'll use the type of the first row of the result set. Still it can result in a column to be of type `NULL` where subsequent rows actually have meaningful values. My guess is that the current heuristic is practical enough, and of course the user can formulate the `SELECT` query to avoid ambiguity.; - It would not be impossible to add support for remote reading of sqlite files. To do so, one can add a custom implementation of an sqlite virtual file system to have data pouring in directly from HTT",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2322:168,monitor,monitoring,168,https://root.cern,https://github.com/root-project/root/pull/2322,1,['monitor'],['monitoring']
Energy Efficiency,"This PR adds back 'virtual' destructor declarations for classes derived from ROOT::Math::VirtualIntegrator which themselves contain virtual functions. These were present until recently, and their absence causes undefined behavior, typically a memory leak. Fast merging would be appreciated if possible. The current code causes a severe memory leak when running the Nieves charged-current quasielastic model in the GENIE neutrino event generator (https://github.com/GENIE-MC/Generator).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14093:372,charge,charged-current,372,https://root.cern,https://github.com/root-project/root/pull/14093,1,['charge'],['charged-current']
Energy Efficiency,"This PR adds the following fixes and improvements to `RNTupleInspector::GetPageSizeDistribution`:; * When the provided column type is not present in the RNTuple being inspected, an empty histogram is returned.; * When a provided column ID is not present in the RNTuple being inspected, an exception is thrown.; * Default axis titles have been added.; * An overloaded method to provide multiple column IDs at once has been added. The method taking only one ID has been adapted to use this overload.; * The option to provide multiple column types at once has been added. Here, a `THStack` is returned rather than a `TH1D`. The method taking only one type has been adapted to use this overload. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14323:468,adapt,adapted,468,https://root.cern,https://github.com/root-project/root/pull/14323,2,['adapt'],['adapted']
Energy Efficiency,"This PR aims to provide solution to https://github.com/root-project/root/issues/7702. * A new constructor of the `RLoopManager` is provided which accepts the new structure `RDatasetSpec`.; * Within the `RDatasetSpec` it is possible to specify multiple tree and file names, hence the `RLoopManager` can internally construct `TChains`.; * `RDatasetSpec` also handles friend chains/trees, e.g. horizontal concatenation of column; * `RDatasetSpec` accepts entry range argument; * Teach `RunTreeProcessorMT` efficiently handle the range, e.g. allow range in MT executions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10716:503,efficient,efficiently,503,https://root.cern,https://github.com/root-project/root/pull/10716,1,['efficient'],['efficiently']
Energy Efficiency,This PR aims to reduce code duplication in `TFormula` class by replacing 4 overloaded `Eval` functions by one variadic template function.; We can also add an extra check to ensure all arguments passed to the template function are of arithmetic type. Please tell if I should add this extra check.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7804:16,reduce,reduce,16,https://root.cern,https://github.com/root-project/root/pull/7804,1,['reduce'],['reduce']
Energy Efficiency,"This PR applies several improvements to the RooAddPdf class:. 1. Avoid code duplication of `updateCoefficients()` with RooAddModel; 2. Reduce footprint of cache object by using `std::vector` and avoid creating dummy RooRealVars; 3. Avoid redundant computation of raw coefficient values in BatchMode, which fixes performance problems in important fits like the ATLAS Higgs combination. More details can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11161:135,Reduce,Reduce,135,https://root.cern,https://github.com/root-project/root/pull/11161,1,['Reduce'],['Reduce']
Energy Efficiency,"This PR change contains:; - Registering DeserializationListener to ASTReader and get callbacks; when decls are deserialized.; We inherited ASTDeserializationListener in DeclCollector and register; DeserializationListener to our ASTReader at DeclCollector setup time.; In the callback(DeclRead), we get owning modules from decls and store; the information in Transaction. - Load libraies for deserialized decls; Before executeTransaction(where linking happens) we put our callback; beforeEmittingModuleForTransaction in InterpreterCallbacks. This loads; libraries when it wasn't in its first run, and store modules if it's; in its first run. This is because Interpreter is not yet initialized; at first run but we need to use Interpreter services when loading; libraries. I think this is the last piece of semantic change related to runtime; cxxmodules. This also enables us to reduce dependency on rootmap files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1882:877,reduce,reduce,877,https://root.cern,https://github.com/root-project/root/pull/1882,1,['reduce'],['reduce']
Energy Efficiency,"This PR fixes allows to use external gradient (for example computed with CLAD in TFormula) in the GSLMultiFit algorithm. ; A fix is applied also in TF1::GradientPar where in case of CLAD gradient a vector is allocated for storing the gradient. Using an external pointer, for example coming from GSL has shown to be problematic.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10531:208,allocate,allocated,208,https://root.cern,https://github.com/root-project/root/pull/10531,1,['allocate'],['allocated']
Energy Efficiency,"This PR fixes the jira item, refactors the code of the models in order to simplify and reduce code duplication and extends significantly the test coverage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1759:87,reduce,reduce,87,https://root.cern,https://github.com/root-project/root/pull/1759,1,['reduce'],['reduce']
Energy Efficiency,"This PR fixes; - https://github.com/root-project/root/issues/7808. This is happening because in when the parentheses operator overload `TKDE::operator()(Double_t x)` calls ReInit `(const_cast<TKDE*>(this))->ReInit()` it returns before setting the fKernel in the case of new data. One approach is to call SetKernel here:. ```cpp; if (fNewData) {; InitFromNewData();; SetKernel();; return;; }; ```; or call it at the end of InitFromNewData(). When that happens, the fKernel is no longer null but this error is reproducible with both iterative options -; With Adaptive we get **NaN** and Fixed we get **inf**. This is because the weight calculation is using the nSum that is 0 when binning is not used; Inversing that gives the infinity in the Iteration:Fixed case. This fix:; - adds the call to SetBinCountData() in InitFromNewData(); - recreates the kernel fun pointer (previously fKernel ends up a `nullptr`); - calculating nSum as fNEvents if not binning in TKDE::TKernel::operator(). Results:. ```cpp; auto kde = new TKDE(0, nullptr, 0, 5, ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", 1);; for (unsigned int i = 0; i < 100; i++) { kde->Fill(gRandom->Gaus(2,1)); }; std::cout<<kde->GetValue(2)<<""\n""; ; ```. Gives ; 0.487581",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14740:557,Adapt,Adaptive,557,https://root.cern,https://github.com/root-project/root/pull/14740,2,['Adapt'],['Adaptive']
Energy Efficiency,"This PR implements an iterator over an `NTuple's` field descriptors (i.e. field metadata). It is a building block for the upcoming NTuple merger algorithm by allowing comparison between two `NTuples`. This PR is a slimmed down version of PR #5768. . **Edit**: Users can optionally sort the NTuple iterator range, (e.g. field names by alphabetical order) with arbitrary comparison functions (see e05a85b). . <details>; <summary>Notes on previous sort approach</summary>; <br>; We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. ; I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5848:725,adapt,adapter,725,https://root.cern,https://github.com/root-project/root/pull/5848,1,['adapt'],['adapter']
Energy Efficiency,"This PR introduces the functionality offered by `ROOT::RDF::RunGraphs` in distributed RDataFrame. Some things may still need polishing or discussion.; - [x] Implement function for the Spark backend; - [x] Implement generic function available in the distributed module; - [x] Add test for the Spark backend; - [ ] Discuss whether we should keep the logic that all actions should be triggered by the same type of distributed backend (i.e. a user can submit N Spark jobs concurrently, but not N Spark jobs and M Dask jobs from the same call to RunGraphs); - [ ] Discuss default value of `concurrent_runs` parameter, i.e. number of jobs submitted concurrently from the client to the scheduler.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8972:679,schedul,scheduler,679,https://root.cern,https://github.com/root-project/root/pull/8972,1,['schedul'],['scheduler']
Energy Efficiency,"This PR introduces: ; * Add SetRGBA function with a float alpha argument.; * Change Color1 to green. So that Box1 border could be observed.; * Change Color2 opacity to 0.7, and Box2 border width to 10. So that the change in Box2 border style could be observed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5830:94,green,green,94,https://root.cern,https://github.com/root-project/root/pull/5830,1,['green'],['green']
Energy Efficiency,"This PR is a follow-up on https://github.com/root-project/root/pull/15746. Make it possible to build RooFit CUDA evaluation library standalone to use in existing ROOT release, as discussed on the forum:; https://root-forum.cern.ch/t/installing-root-with-cuda-support-in-a-conda-environment/59208/5. To try it out:; * Build the content of `roofit/batchcompute` in this repository, replacing the CMakeLists.txt file with the code listing below:; * Build the project. You should now have a `libRooBatchCompute_CUDA.so` file. Make sure it's in the `LD_LIBRARY_PATH`; * Your fits should now work with `EvalBackend(""cuda"")` (see also the [RooAbsPdf](https://root.cern.ch/doc/master/classRooAbsPdf.html#a24b1afec4fd149e08967eac4285800de) documentation about this). ```cmake; # Adapt to your system; set (CMAKE_CUDA_ARCHITECTURES ""native"" CACHE STRING """" FORCE); set (CMAKE_CUDA_HOST_COMPILER /usr/bin/g++-13 CACHE STRING """" FORCE); set (CMAKE_CUDA_COMPILER ""/opt/cuda/bin/nvcc"" CACHE STRING """" FORCE). find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}). cmake_minimum_required(VERSION 3.14); project(batchcompute-cuda LANGUAGES CUDA). # in the src directory, put all files from roofit/batchcompute/src and roofit/batchcompute/res; add_library(RooBatchCompute_CUDA SHARED src/RooBatchCompute.cu src/ComputeFunctions.cu src/CudaInterface.cu); target_include_directories(RooBatchCompute_CUDA PRIVATE src res). target_compile_options(RooBatchCompute_CUDA PRIVATE -lineinfo --expt-relaxed-constexpr); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15775:770,Adapt,Adapt,770,https://root.cern,https://github.com/root-project/root/pull/15775,1,['Adapt'],['Adapt']
Energy Efficiency,"This PR is a work-in-progress. Submitting mainly to get feedback and test on all platforms (it compiles and tests run on my machines). `TDataFrame.hxx` neared the 2000 lines, so I decided to bite the bullet and disentangle it in logically separated parts. `TDataFrame`'s functionality is now divided as follows:. - `TDataFrame.{hxx,cxx}`: class `TDataFrame`; - `TDataFrameInterface.{hxx,cxx}`: class `TDataFrameInterface`; - `TDFNodes.{hxx,cxx}`: class `TDataFrameImpl`, `TDataFrameAction{,Base}`, `TDataFrameBranch{,Base}`, `TDataFrameFilter{,Base}`; - `TActionResultProxy.hxx`: class `TActionResultProxy`; - `TDFOperations.{hxx,cxx}`: all `*Operation` classes; - `TDFTraitsUtils.hxx` -> `TDFUtils.{hxx,cxx}`: all helper functions and meta-helpers. I also ran `clang-format` and `include-what-you-use` on these files to improve coding style and useless/misplaced includes. I plan to squash all commits into just two/three (one for splitting, one for formatting, one for the includes) if/when the changes will be green-lit. **Open issues**; - [x] `TActionResultProxy::TriggerRun` is still in `TDataFrame.hxx` because it depends on TDataFrameImpl. Moving it into `TActionResultProxy.hxx` would cause a circular include dependency; - [x] `ColumnName2ColumnTypeName` is in `TDataFrameInterface.{hxx,cxx}`, but being an helper function it should actually be in `TDFUtils.hxx`. This would cause a circular include dependency with `TDFNodes.hxx` due to `TDataFrameImpl`; - [x] same for `CallCreateAction`, but the circular dependency is with `TActionResultProxy`. This function is much less general than the former though, so maybe it could stay in `TDataFrameInterface.{hxx,cxx}`; - [x] `TSlotStack` is now declared and defined at namespace scope in `TDFNodes.cxx`. Declaration and definitions should be split, the class itself should probably be nested inside `TDataFrameImpl`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/423:1013,green,green-lit,1013,https://root.cern,https://github.com/root-project/root/pull/423,1,['green'],['green-lit']
Energy Efficiency,"This PR is on top of #1777 and adds the method `TTree.AsMatrix(columns)` as pythonization, which returns the content of the tree as numpy array powered by `TDataFrame` and the memory adption with the `__array_interface__`. TODO:; - ~~Infere the final datatype of the numpy array in a clever way (currently `double` is the default). Implicit type conversion is done by the lambda passed to `TDataFrame` in the backend.~~ Done in python, with tests.; - ~~More error-handling?~~ Can't think of any more checks.; - ~~More tests? Corner-cases missed?~~ Ideas? Any corner-cases missed?; - ~~What about not supported datatypes? Currently implemented for `float`, `double`, `int`, `unsigned int`, `long`, `unsigned long`. This is dependent on the memory adption feature of #1777 for `std.vector`.~~ Added proper error-handling.; - ~~Apply `clang-format`~~ ~~ Let's travis do this.; - ~~Shall we provide a `TTree.AsMatrix()` without given columns, which defaults to all columns? -> Most likely: Yes (but with proper error-handling!) -> White-listing branch types?~~ Done.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1856:144,power,powered,144,https://root.cern,https://github.com/root-project/root/pull/1856,1,['power'],['powered']
Energy Efficiency,"This PR is related to #1010 . I could be more efficient to cancel the tasks immediately than wait for unnecessary tasks to be finished. Especially when cache is invalid, unzipping task has to continue running return function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1180:46,efficient,efficient,46,https://root.cern,https://github.com/root-project/root/pull/1180,1,['efficient'],['efficient']
Energy Efficiency,"This PR makes it easier to construct valid `RFieldDescriptors`. **Edit:** The initial version of this PR removed the move-only semantics on field descriptors. Instead, I added a `Clone` method for field descriptors. . <details>; <summary>Discarded rationale for reintroducing copy constructor for field descriptors</summary>; <br>; We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. ; I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). It also removes move-only semantics on `RFieldDescriptor` (my eventual intent is to remove move-only semantics on all `Descriptors`). `RFieldDescriptor` is made up of value-types only, so there are no resources to worry about. . For merging `NTuples`, we need to copy many descriptors (possibly with some small adjustments). ; With move-only semantics, we'd have to implement a `Clone` method for `RFieldDescriptor`. ; This is disadvantageous compared to relying on value semantics. `Clone`, while conceptually simple, is additional code to maintain.; * If we ever add fields to the class, Clone could be buggy (missing the added field); In contrast, the copy constructor will never miss any fields. ; * Move-only object lifetimes are non-trivial to reason about, we increase the risk of introducing UB by relying on a moved-from object, etc. . Regarding performance concerns (`RFieldDescriptor` has a vector member), I think C++ helps us here with Return Value Optimization and copy elision (simplified example here: https://godbolt.org/z/FwmKaD). . The high-level changes are: ; * define default values for a field descriptor; * remove move-only restriction on `RFieldDescriptor`; * implement a builder class for `RFieldD",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5934:581,adapt,adapter,581,https://root.cern,https://github.com/root-project/root/pull/5934,1,['adapt'],['adapter']
Energy Efficiency,"This PR makes sure that member function templates are added to the dictionary of class proxies, so that they are found when the user is trying to access them. For instance:. ```python; import ROOT. ROOT.gInterpreter.Declare(""""""; struct TestClass {; template<class T> void templatedMember(const T& value) { }; };; """"""). t = ROOT.TestClass(); t.templatedMember('int')(1); ```; The example also works if there are non-templated overloads and the user tries to instantiate the templated one, thanks to https://github.com/root-project/root/pull/3226. The re-injection of the pythonization of `GetObject` in `TDirectoryFile` is now necessary because, as a result of these changes, `GetObject` will be added to the dictionary of `TDirectoryFile` as a `TemplateProxy`. If we want the pythonization to prevail, we need to inject it (it will replace the `TemplateProxy`, just like in `TDirectory`). `TFile` will inherit that pythonization too, so we keep the current behaviour and all tests green. An extension of the PyROOT tests for templates is coming in another PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3237:981,green,green,981,https://root.cern,https://github.com/root-project/root/pull/3237,1,['green'],['green']
Energy Efficiency,This PR provides some optimisation for Cuda. In particular: . - optimise update weights/gradient of SGD and ADAM/ ; - We avoid now creating temporary matrices in SGD ; - For ADAM it is more efficient defining three new updates functions which will blenched on the GPU. This also avoid creating temporaries . These changes speed-up by almost a factor of 2 the code in GPU for dense layer when using ADAM and restore the previous performances for SGD. - optimise also computation of convolutional weight gradients. ; In this case we can just simply use the ScaleAdd function. A speed up of ~ 20% is obtained . This PR also adds a commit that remove the computation of correlation matrix in case of large number of variables,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2502:190,efficient,efficient,190,https://root.cern,https://github.com/root-project/root/pull/2502,1,['efficient'],['efficient']
Energy Efficiency,"This PR provides some refactoring around the `RNTupleProcessor`. Most notably, the `RNTupleProcessor` class has been changed into an abstract class only providing the generic interfaces. A subclass, `RNTupleChainProcessor` has been added to take care of the internal machinery for vertically concatenated (""chained"") ntuples. The rationale behind this refactoring is that in this way, we can also provide an `RNTupleJoinProcessor` subclass which takes care of horizontal concatenations, using the same class design. Once this has been added, the `RNTupleProcessor` base class could be used to take care of combinations of chain- and join-based processors and the scheduling thereof.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16592:663,schedul,scheduling,663,https://root.cern,https://github.com/root-project/root/pull/16592,1,['schedul'],['scheduling']
Energy Efficiency,"This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):; * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;; * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1218:395,reduce,reduced,395,https://root.cern,https://github.com/root-project/root/pull/1218,1,['reduce'],['reduced']
Energy Efficiency,"This PR superseedes PR 1821. The code to check if the function is valid looking at TClass and gROOT->GetListOfGlobalFunctions is not needed.; This, as pointed in PR 1821 makes the code more efficient",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2017:190,efficient,efficient,190,https://root.cern,https://github.com/root-project/root/pull/2017,1,['efficient'],['efficient']
Energy Efficiency,"This PR updates Cppyy and adapts experimental PyROOT to the changes. It also re-enables a few tests. The following PRs merged and issues fixed in Cppyy are incorporated by this update:. https://bitbucket.org/wlav/cpycppyy/pull-requests/24/fixes-for-memoryregulator-recursiveremove; https://bitbucket.org/wlav/cpycppyy/pull-requests/25/proposal-for-setting-hooks-for-custom. https://bitbucket.org/wlav/cppyy/issues/113/assignment-to-c-global-from-python-does; https://bitbucket.org/wlav/cppyy/issues/115/instantiation-for-c-float-picked-when; https://bitbucket.org/wlav/cppyy/issues/121/dir-does-not-return-auto-instantiated; https://bitbucket.org/wlav/cppyy/issues/131/problem-constructing-object-of-templated; https://bitbucket.org/wlav/cppyy/issues/138/crash-when-deleting-an-object-of-a-python; https://bitbucket.org/wlav/cppyy/issues/139/wrong-overload-picked-when-passing-object. There is still one more pending issue, introduced recently in Cppyy, which affects a few tests:; https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated; Those tests have been disabled temporarily. Once a bug fix is available it will be ported right away to experimental PyROOT's Cppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4264:26,adapt,adapts,26,https://root.cern,https://github.com/root-project/root/pull/4264,1,['adapt'],['adapts']
Energy Efficiency,"This PR:; - Generalises the DataSetFactory::RandomGenerator class and moves it to TMVA::Tools.; - Replaces use of the old class with the new one.; - Adds test cases for the new class. This could be taken a step further and be put in a separate header in ROOT proper alongside its friends `ROOT::Math::TRandomEngine<Engine>`, `TRandom : public ROOT::Math::TRandomEngine`, `ROOT::Math::StdEngine<Engine>`, and `TRandomGen<Engine> : public TRandom`.; These classes define the TRandom interface and adapts foreign interfaced to that of TRandom. This PR provides an interface for going in the other direction. One could then imagine renaming this class to `TRandomAsStdEngine` and move it outside of TMVA for all to benefit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1628:495,adapt,adapts,495,https://root.cern,https://github.com/root-project/root/pull/1628,1,['adapt'],['adapts']
Energy Efficiency,"This adds two improvements (split into two commits) to the standalone Minuit2 build. First, warnings are reduced using the new syntax coming out in CMake 3.12, with a fallback for 3.1-3.11 versions. The other fix is a protection added to the target names ""Math"" and ""Common""; in CMake when this is built with `add_subdirectory`, these target names may clash with the master project or other `add_subdirectory` usages. The protection only kicks in if building as a subdirectory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2029:105,reduce,reduced,105,https://root.cern,https://github.com/root-project/root/pull/2029,1,['reduce'],['reduced']
Energy Efficiency,This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:; * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily; * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available; * Reduce scope of interpreter locks in several places where the lock is taken before necessary; * Add locks where unprotected use of `gInterpreter` is made; * Improve code clarity and performance of `TTree::Fill()`; * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/709:372,Reduce,Reduce,372,https://root.cern,https://github.com/root-project/root/pull/709,1,['Reduce'],['Reduce']
Energy Efficiency,This change aims to reduce contention when creating TBufferMergerFiles,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2248:20,reduce,reduce,20,https://root.cern,https://github.com/root-project/root/pull/2248,1,['reduce'],['reduce']
Energy Efficiency,"This commit changes the way in which the input dataset is split in logical ranges of entries. It also changes the subsequent creation of an RDataFrame instance inside a distributed task.; For a TTree based dataset, this happens through the creation of a TChain that represents the subset of the original dataset that contains the entries in the range. Before this commit:; For the TTree based case, the entries of the range are global with respect to the TChain created inside the distributed task.; `TChain.SetCacheEntryRange` is called with the start and end entries of the range to make sure we don't read more than needed; An RDataFrame is created with the chain as argument. The `Range` operation is used to select only the entries of the TChain in the current task that are inside the input entry range. After this commit:; For the TTree based case, the input range will report global entries with respect to the TChain of the task. But it will also report local entries with respect to each single file of the TChain in the current task.; A global TEntryList is created and filled with one sub-TEntryList per file in the chain. This allows to do a preselection directly in the TChain of the entries that should be processed or not.; `SetCacheEntryRange` is still called to ensure we don't read more than needed (hence the need to still keep global entries in the range object); The TChain (with the TEntryList) is passed as argument to an RDataFrame constructor. ## TODOs. - [x] ~add some check against using multiple times the same filename, to prevent hitting https://github.com/root-project/root/issues/8505~ No longer needed after #8660 ; - [x] Old tests adapted to new logic; - [x] Added one new test to check against reading the wrong number of entries depending on the number of partitions (a result of using TEntryList with multiple times the same treename and filename)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8646:1666,adapt,adapted,1666,https://root.cern,https://github.com/root-project/root/pull/8646,1,['adapt'],['adapted']
Energy Efficiency,"This commit improves the functionality of TTimeStamp class by adding 4 methods to calculate Greenwich/local mean/apparent sidereal time. Calculation was referenced from. Aoki et. al. Astron. Astrophys. 105, 359-362 (1982), http://adsabs.harvard.edu/abs/1982A%26A...105..359A. and. http://aa.usno.navy.mil/faq/docs/GAST.php. In the future, it would be helpful to add a class that pulls the UTC-UT1 offset times from the below repository for enhanced accuracy:. ftp://ftp.iers.org/products/eop/bulletinb/format_2009/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/41:92,Green,Greenwich,92,https://root.cern,https://github.com/root-project/root/pull/41,1,['Green'],['Greenwich']
Energy Efficiency,"This commit provides a rewrite of key functions of TGeoParallelWorld, achieving: . (a) faster initialization; (b) faster execution of the Safety function (from ~O(N) to ~O(1)) ; (c) faster or equal execution of FindNode/FindBoundary functions (~log(N)) ; (d) less memory consumption (better memory scalability). The development for this commit was motivated from a use case in ALICE, in which the parallel world ""scene"" can be very large (~100K volumes). In this case, TGeoVoxelFinder takes very long; to construct and consumes a very large amount of memory (GBs). In addition, the evaluation of the Safety function dominates the Geant simulation time. The improvements in this commit are mainly achieved through:. * The use of a boundary volume hierarchy (BVH) as the base acceleration entity, replacing TGeoVoxelFinder.; BVH are the standard in industry/computer-graphics, for what concerns ray-object intersection tasks. The BVH is constructed from axis-aligned bounding boxes and employed in the FindBoundary/FindNode implementations. * The use of a 3D voxel grid (TGeoVoxelGrid) structure, able to store properties ""local"" or in the vicinity of a cartesian coordinate P. This structure allows to reduce the (typical) algorithmic complexity for ""Safety"" queries to ~O(1) (with a constant factor determined by the voxel size). Filling of the 3D voxel grid cache for Safety is done on-the-fly (using the BVH once). * (Optional) Additional caching of ""last-call"" safety values for really quick return when the value is still valid at the next call. Ideas for these improvements come from prior work in related libraries such as VecGeom. -----. Implementation details:. * The implementation is, for now (until fully tested), provided in a backward compatible manner:. - By default, nothing changes; - Users have to activate the BVH mode by setting an environment variable TGEO_PW_USEBVH; - Users may hence compare the 2 modes. * Functions for Safety, FindNode, FindBoundary dispatch to some internal i",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16442:271,consumption,consumption,271,https://root.cern,https://github.com/root-project/root/pull/16442,1,['consumption'],['consumption']
Energy Efficiency,"This commit provides an (optional) optimization to reduce the cost of safety evaluations associated with TGeoParallelWorld. The approach consists in the introduction of additional cache-state in TGeoNavigator. This state remembers the last location for which TGeoParallelWorld::Safety was evaluated, together with the corresponding value returned. Since TGeoNavigator follows the evolution of tracks step-by-step, we have some sort of history-locality. This means that the cache-state has a high-probability of being relevant for multiple track locations in a row. The optimization proposed here is orthogonal to other improvements. It adds on top of algorithmic improvements within TGeoParallelWorld (bounding volume hierarchies, see separate PR), gaining a few extra percent in speed. By default, the new feature is not enabled by default for backward compatibility. Once fully verified, we can make it the default mode. That said, in ALICE simulations, the caching did not modify stepping behaviour and yielded identical results compared to not doing the caching. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16470:51,reduce,reduce,51,https://root.cern,https://github.com/root-project/root/pull/16470,1,['reduce'],['reduce']
Energy Efficiency,"This commit reduces ExcludeModules, which reduces dependency on rootmap files. These modules contain global variables which conflict with users' code such as PI and ERROR. This commit also undefines them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3635:12,reduce,reduces,12,https://root.cern,https://github.com/root-project/root/pull/3635,2,['reduce'],['reduces']
Energy Efficiency,"This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in; RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in; `RooAbsOptTestStatistic` to mask histogram entries out of the variable; range in case of a subrange fit. The reasons why `cacheValidEntries` and; the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is; creating a clone of the dataset with the subrange only using; `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For; the RooDataHist, `valid()` tells you ""if bin `i` is considered; valid within the current range definitions of all observables""; (according to the documentation). For the RooDataSet, it always; returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the; `mutable` state of the RooDataHist, which can cause trouble if one; updates the observable range but then forgets to call; `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`; was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep; it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful; way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9168:684,reduce,reduce,684,https://root.cern,https://github.com/root-project/root/pull/9168,1,['reduce'],['reduce']
Energy Efficiency,This fixes the following failure of the test-stresshistofit-interpreted test:. 151: Processing C:/Users/sftnight/git/master/test/stressHistoFit.cxx...; 151: In file included from input_line_10:1:; 151: C:\Users\sftnight\git\master\test\stressHistoFit.cxx:117:9: warning: 'FOREGROUND_BLUE' macro redefined [-Wmacro-redefined]; 151: #define FOREGROUND_BLUE 1; 151: ^; 151: C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\um\consoleapi2.h:35:9: note: previous definition is here; 151: #define FOREGROUND_BLUE 0x0001 // text color contains blue.; 151: ^; 151: In file included from input_line_10:1:; 151: C:\Users\sftnight\git\master\test\stressHistoFit.cxx:118:9: warning: 'FOREGROUND_GREEN' macro redefined [-Wmacro-redefined]; 151: #define FOREGROUND_GREEN 2; 151: ^; 151: C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\um\consoleapi2.h:36:9: note: previous definition is here; 151: #define FOREGROUND_GREEN 0x0002 // text color contains green.; 151: ^; 151: In file included from input_line_10:1:; 151: C:\Users\sftnight\git\master\test\stressHistoFit.cxx:119:9: warning: 'FOREGROUND_RED' macro redefined [-Wmacro-redefined]; 151: #define FOREGROUND_RED 4; 151: ^; 151: C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\um\consoleapi2.h:37:9: note: previous definition is here; 151: #define FOREGROUND_RED 0x0004 // text color contains red.; 151: ^; 151: In file included from input_line_10:1:; 151: C:\Users\sftnight\git\master\test\stressHistoFit.cxx:120:9: warning: 'FOREGROUND_INTENSITY' macro redefined [-Wmacro-redefined]; 151: #define FOREGROUND_INTENSITY 8; 151: ^; 151: C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\um\consoleapi2.h:38:9: note: previous definition is here; 151: #define FOREGROUND_INTENSITY 0x0008 // text color is intensified.; 151: ^; 151: In file included from input_line_10:1:; 151: C:\Users\sftnight\git\master\test\stressHistoFit.cxx:124:19: error: functions that differ only in their return type cannot be overloaded; 1,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3312:962,green,green,962,https://root.cern,https://github.com/root-project/root/pull/3312,1,['green'],['green']
Energy Efficiency,"This implements a proof of concept of a new histogram auto binning mode designed to produced mergeable histograms when run in multi-threaded / multi-process mode. The algorithm chooses powers of 2 to chose the boundaries, ranges and number of bins. The idea is described in the following document: https://docs.google.com/document/d/1TEntRbVnRzZRLio8JhND51FTNqqTAvu0ngnhLGneahg/edit?usp=sharing. A method to adjust the final looking of the histogram is also included in the patch. Two multicore tutorials illustrate the usage: mt303_fillHistosAutobin.C and mt301_fillHistos.C .",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1227:185,power,powers,185,https://root.cern,https://github.com/root-project/root/pull/1227,1,['power'],['powers']
Energy Efficiency,"This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:; https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt; 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`; 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore; cf653869f7 [RF] Don't bar xroofit behind `root7` anymore; e5a67bc647 [RF] More type safety and better memory management with CUDA interface; bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute; 529ba82432 [RF] RAII management of CUDA events and streams; cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays; 77299a2c34 [RF] Reduce public headers of `roobatchcompute`; 8b0a768f0c [RF] Refactor CUDA code in RooFit; 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra; a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors; e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude; 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction; 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`; bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`; 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`; 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`; e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx; 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr; 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions; 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf; 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface; e11a5e4d8c [RF] Improve `RooNumInt",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13295:909,Reduce,Reduce,909,https://root.cern,https://github.com/root-project/root/pull/13295,1,['Reduce'],['Reduce']
Energy Efficiency,"This is a direct fixup to commit https://github.com/root-project/root/commit/faa42a17e3614efbd97a91194243157b77e74fde. That commit tried to make; it possible to use also variable clones as integration variables, but it; failed to cover the case where the integration variable is only an; indirect server of the integrated function. This was because; `valueClients()` used for the graph traversal was still called on the; clone, not the variable in the actual computation graph of the; integrated function. This commit fixes this by passing the correct variable to; `unmarkDepValueClients` to begin with. A unit test for this case is also implemented. As such, this PR is part of the series of PRs that redesigned the; RooRealIntegral client-server interface:. * https://github.com/root-project/root/pull/11597; * https://github.com/root-project/root/pull/11619; * https://github.com/root-project/root/pull/11662. A second commit in this PR makes less tests in RooFitCore depend on RooFit,; using the RooWorkspace factory. This reduces the time of increamental builds; where one changes the RooFit library, because the RooFitCore tests don't need; to be rebuilt.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11783:1027,reduce,reduces,1027,https://root.cern,https://github.com/root-project/root/pull/11783,1,['reduce'],['reduces']
Energy Efficiency,"This is a follow up on https://github.com/root-project/root/pull/8694, implementing the requests made in the PR review. More details in the commit messages. Turning some observables into parameters in the GradMinimizer.BranchingPDF test should not reduce the coverage of the test, because for the minimizer the model actually gets more complex where there are more parameters.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8940:248,reduce,reduce,248,https://root.cern,https://github.com/root-project/root/pull/8940,1,['reduce'],['reduce']
Energy Efficiency,"This is a generalization of Reduce that takes two lambdas:; - the accumulator lambda has signature `U(U,T)` or `void(U&,T)` where; U is the type of the accumulator, and T is the type of the column; to be accumulated into U; - the merge lambda has signature `U(U,U)` and ""puts together"" the; accumulators of each thread",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1454:28,Reduce,Reduce,28,https://root.cern,https://github.com/root-project/root/pull/1454,1,['Reduce'],['Reduce']
Energy Efficiency,"This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header; - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch; - [x] Implement the basic outline of the MethodPyTorch Class.; - [x] Implement the DeclareOptions methods.; - [x] Implement ProcessOptions methods.; - [x] Implement SetupTorchModel method.; - [x] Implement train methods. (Done); - [x] Implement simple basic structure for training; - [x] Add ability to load code from users; - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders; - [x] Use default (optional optimizer SGD); - [x] Add savebest model; - [x] Add scheduler; - [x] Implement Validation; - [x] Add model prediction function loading ability; - [x] Implement user code ability; - [x] Implement helper function. ## Tests; - [x] Add testPyTorchClassification.C; - [x] Add generatePyTorchModelClassification.py; - [x] Load, Train model and test all the parameter arguments; - [x] Verify response after model prediction function is added.; - [x] Add testPyTorchMulticlass.C; - [x] Add generatePyTorchModelMulticlass.py; - [x] Load, Train model and test all the parameter arguments; - [x] Verify response after model prediction function is added.; - [x] Add testPyTorchRegression.C; - [x] Add generatePyTorchModelRegression.py; - [x] Load, Train model and test all the parameter arguments; - [x] Verify response after model prediction function is added. ## GPU; - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials; These are implemented in #6273. ## Documentation; - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5757:860,schedul,scheduler,860,https://root.cern,https://github.com/root-project/root/pull/5757,1,['schedul'],['scheduler']
Energy Efficiency,"This is a refactored version of part of PR #709. The figure attached below shows an example of the difference in wait time, as measured by VTune for parallel filling of a TTree with random numbers. The number of waits on `LoadClassInfo()` is reduced from 451 to just 8 (one wait per thread). ![screenshot](https://user-images.githubusercontent.com/249404/27913555-cbd6b592-6260-11e7-87af-7a11f376b71a.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/747:242,reduce,reduced,242,https://root.cern,https://github.com/root-project/root/pull/747,1,['reduce'],['reduced']
Energy Efficiency,"This is a simple fix to reduce imbalance in multi-thread event-loops; with no data-source: previously we spawned one task per worker thread. Expected to break `test_emptysource`, which is fixed by [PR 96](https://github.com/root-project/roottest/pull/96) in roottest.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1104:24,reduce,reduce,24,https://root.cern,https://github.com/root-project/root/pull/1104,1,['reduce'],['reduce']
Energy Efficiency,"This is an adaptation of commit 6627da727b88ef70b74b7d87f274e0a21a9cea45 Fixes https://github.com/root-project/root/issues/13698, a problem with the new C++ headers from the new macOS SDK. # This Pull request:; Unfortunately the directory structure of our llvm changed, and it was not possible to cherry-pick. ## Changes or fixes:. ## Checklist:. - [v] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #13698",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13722:11,adapt,adaptation,11,https://root.cern,https://github.com/root-project/root/pull/13722,1,['adapt'],['adaptation']
Energy Efficiency,"This is done to avoid this compiler warning that I get when compiling; ROOT with gcc:. ```; core/base/inc/TStorage.h:131:37: warning: declaration of ‘static void TStorage::UpdateIsOnHeap(const volatile UInt_t&, volatile UInt_t&)’ with attribute ‘noinline’ follows inline declaration [-Wattributes]; 131 | R__NEVER_INLINE void TStorage::UpdateIsOnHeap(volatile const UInt_t &uniqueID, volatile UInt_t &bits) {; | ^~~~~~~~; core/base/inc/TStorage.h:91:20: note: previous declaration of ‘static void TStorage::UpdateIsOnHeap(const volatile UInt_t&, volatile UInt_t&)’ here; 91 | static void UpdateIsOnHeap(volatile const UInt_t &uniqueID, volatile UInt_t &bits);; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10500:285,Watt,Wattributes,285,https://root.cern,https://github.com/root-project/root/pull/10500,1,['Watt'],['Wattributes']
Energy Efficiency,This is done to reduce the feature divergence between PyROOT and C++ ROOT. Also improves code performance and robustness.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16707:16,reduce,reduce,16,https://root.cern,https://github.com/root-project/root/pull/16707,1,['reduce'],['reduce']
Energy Efficiency,"This is first attempt to provide support of custom classes in web-based canvas; For now one has to register list of such classes and provide JavaScript code where painters are implemented. . Similar approach can be implemented in the future for ROOT7 RCanvas.; Probably, such custom JS code can be ""embed"" directly into C++ code making maintenance much easier. Update JSROOT with many improvements for TGeo monitoring",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4094:407,monitor,monitoring,407,https://root.cern,https://github.com/root-project/root/pull/4094,1,['monitor'],['monitoring']
Energy Efficiency,"This is first step to make Web GUI code running in multiple threads.; There are many threads introduced and many communication patterns are supported. 1. Provide special thread, which handle all http requests of THttpServer.; This thread serves JavaScript/HTML files and redirects websocket requests to recipients.; Try to reduce access to global ROOT structures from that thread - only list of classes for the moment is used. Potentially many THttpServer instances with such thread can run fully independent. 2. Let run websocket handlers (THttpWSHandler) in separate threads. ; Requires correct locking of shared resources. 3. Support special threads for sending data via websocket from server to clients. ; When many clients are connected to the same TWebWindow, slowest client can ; break down performance. With use of such specialized thread problem can be solved. 4. Implement all necessary locks and protections to use many TWebWindows in different user threads. ; Provide TWebWindow::Run(double) method, which allows to run window code in any user thread. . Introduce tutorials/v7/draw_mt.cxx macro, which shows how three RCanvas instances can run; in three independent thread and regularly updated. Of course, default behavior should work - all functionality runs in main thread. ; Means THttpServer requests processing, websockets processing, RCanvas handling - ; everything runs in main application thread. Simple, but not scalable. This is very preliminary code , I still plan to change/extend some API.; Any comments comments are welcome",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2487:323,reduce,reduce,323,https://root.cern,https://github.com/root-project/root/pull/2487,1,['reduce'],['reduce']
Energy Efficiency,"This is part of the ongoing effort to reduce the public interface of RooFit. Also remove the unnecessary base classes (`TNamed`, `RooPrintable`). The; only thing what was used from them was the `ClassName()` functionality; from `TClass()`, but this can easily be replaced with a single new; virtual function `generatorName()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11905:38,reduce,reduce,38,https://root.cern,https://github.com/root-project/root/pull/11905,1,['reduce'],['reduce']
Energy Efficiency,This is related to https://github.com/root-project/root/issues/12783 (the symptom descriptions) and https://github.com/root-project/root/pull/12846 (the underlying fix) and as a side effect of being more efficient works around the issue (which is related to updating a file).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12848:204,efficient,efficient,204,https://root.cern,https://github.com/root-project/root/pull/12848,3,['efficient'],['efficient']
Energy Efficiency,"This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to).; * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different.; - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time...; - [ ] Performance optimizations to reduce the impact of comparing axis binning, including...; * [ ] Not comparing every axis bin border when the axes are equidistant; * [ ] Reducing reliance on virtual function calls, especially in loops; * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...); - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5725:928,reduce,reduce,928,https://root.cern,https://github.com/root-project/root/pull/5725,1,['reduce'],['reduce']
Energy Efficiency,"This is to reduce the amount of code generated for every separate; RInterface instantiation. The PR should not otherwise modify any logic or functionality. I hoped this would reduce compile times of RDF-heavy code, but on an artificial benchmark the changes have little to no effect. This might be a good refactoring to have nonetheless. What do people think?. In order to minimize conflicts with other PRs, this must be merged after:. - https://github.com/root-project/root/pull/11314; - https://github.com/root-project/root/pull/11307; - https://github.com/root-project/root/pull/11306; - https://github.com/root-project/root/pull/11149",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11121:11,reduce,reduce,11,https://root.cern,https://github.com/root-project/root/pull/11121,2,['reduce'],['reduce']
Energy Efficiency,"This memory leak was reported in https://github.com/root-project/root/issues/7890#issuecomment-820445272. Both `termIntDeps` and `termIntNoNormDeps` are only used again a few lines below the lines with the change, and they are only passed to an owning collection *after* newly allocated memory gets assigned to them again.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7976:277,allocate,allocated,277,https://root.cern,https://github.com/root-project/root/pull/7976,1,['allocate'],['allocated']
Energy Efficiency,This patch affords trimming of redundant Jupyter notebook information contained within TCanvas .JSON objects. Specifically this includes the removing the list of TColors which reduces the size of a benchmark notebook (a compiled test notebook of Root Primer graphics) by up to 80% upon preliminary tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/760:176,reduce,reduces,176,https://root.cern,https://github.com/root-project/root/pull/760,1,['reduce'],['reduces']
Energy Efficiency,"This patch consolidates the symbol resolution facilities throughout TCling into; a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:; * Symlink resolution -- it implements a memory efficient representation of; the full path to shared objects allowing search at constant time O(1). This; also fixes issues when resolving symbols from OSX where the system libraries; contain multiple levels of symlinks.; * Bloom filter optimization -- it uses a stohastic data structure which gives; a definitive answer if a symbol is not in the set. The implementation checks; the .gnu.hash section in ELF which is the GNU implementation of a bloom; filter and uses it. If the symbol is not in the bloom filter, the; implementation builds its own and uses it. The measured performance of the; bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on; top of the .gnu.hash filter gives 1-2% better performance.; The advantage for the custom bloom filter is that it works on all; implementations which do not support .gnu.hash (windows and osx). It is also; customizable if we want to further reduce the false positive rates; (currently at p=2%).; * Hash table optimization -- we build a hash table which contains all symbols; for a given library. This allows us to avoid the fallback symbol iteration; if multiple symbols from the same library are requested. The hash table; optimization targets to optimize the case where the bloom filter tells us; the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me!. Performance Report; ===. |platform|test|PCH-time|Module-time|Module-PR-time|; |:--------|:---|:---------:|:-----------:|:---------------|; |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|; |osx 10.14| roottest-cling| 589,67|452,97|307,34|; |osx 10.14| roottest-python| 377,69|475,78|311,5|; |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|; |osx 10.14| roottest-root-math| 106,18|140,41|73,96|",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4717:232,efficient,efficient,232,https://root.cern,https://github.com/root-project/root/pull/4717,1,['efficient'],['efficient']
Energy Efficiency,"This patch reduces loaded libraries to half, nearly the same amount of pch's.; ; What I did is:; 1. Change DeclCollector and Transaction to collect clang::Decls, not; clang::Modules so that we still have decls information after finishing; deserialization.; 2. In TClingCallbacks, we check if the decl is ""isUsed()"" or not. If; not, we don't want to load corresponding libararies. ```; w/o; yuka@yukadesk:~/module-release$ lsof -p 25477 | grep so | wc -l; 88; with; yuka@yukadesk:~/module-release$ lsof -p 23676 | grep so | wc -l ; 37. PCH; yuka@yukadesk:~/root-release$ lsof -p 9664 | grep so | wc -l; 32. w/o; Processing tutorials/hsimple.C...; hsimple : Real Time = 0.08 seconds Cpu Time = 0.07 seconds; (TFile *) 0x5563018a1d30; Processing /home/yuka/CERN/ROOT/memory.C...; cpu time = 1.524314 seconds; sys time = 0.157075 seconds; res memory = 546.867 Mbytes; vir memory = 895.184 Mbytes. with; Processing tutorials/hsimple.C...; hsimple : Real Time = 0.05 seconds Cpu Time = 0.05 seconds; (TFile *) 0x55c8a399bfa0; Processing /home/yuka/CERN/ROOT/memory.C...; cpu time = 0.371789 seconds; sys time = 0.069116 seconds; res memory = 273.5 Mbytes; vir memory = 461.43 Mbytes. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2009:11,reduce,reduces,11,https://root.cern,https://github.com/root-project/root/pull/2009,1,['reduce'],['reduces']
Energy Efficiency,This patch reduces the code bloat in TClingCallFunc trying to make the code more readable. cc: @sudo-panda,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10850:11,reduce,reduces,11,https://root.cern,https://github.com/root-project/root/pull/10850,1,['reduce'],['reduces']
Energy Efficiency,This patch reduces the duplicate content in the GenVector.pcm thus reducing; the amount of decl merging.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2881:11,reduce,reduces,11,https://root.cern,https://github.com/root-project/root/pull/2881,1,['reduce'],['reduces']
Energy Efficiency,This patch works around compatibility issues between libcxx and glibc. It should fix the set up of the FNAL ART framework. Thanks to Chris Green (@chissg) this patch should resolve ROOT-10677.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5423:139,Green,Green,139,https://root.cern,https://github.com/root-project/root/pull/5423,1,['Green'],['Green']
Energy Efficiency,This patch works around compatibility issues between libcxx and glibc. It should fix the set up of the FNAL ART framework. Thanks to Chris Green this patch should resolve ROOT-10677. Depends on #5423,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5424:139,Green,Green,139,https://root.cern,https://github.com/root-project/root/pull/5424,1,['Green'],['Green']
Energy Efficiency,This prevent having up to 400 Powershell instances when building ROOT (every time `root-config --has-whatever` is called),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12575:30,Power,Powershell,30,https://root.cern,https://github.com/root-project/root/pull/12575,1,['Power'],['Powershell']
Energy Efficiency,"This proposed new Strategy in minuit2 is the same migrad behaviour as Strategy=2 but with the following changes to the Hesse calculation:; * The step and g2 tolerances have been zeroed so that the 7 cycles are forced in the diagonal-term calculation. This was found to be necessary in cases where asimov datasets were used for the minimization and there were very few iterations for the approximate covariance to be determined from. ; * Central finite difference is used for mixed partial derivatives. This requires 3 extra function evaluations per derivative, but is necessary in the case of minima where there is high curvature (in the case of high stats) and the forward finite difference (default) behaviour leads incorrectly to a non-positive-definite covariance matrix; * Return the uncorrected covariance matrix, even if it is not positive definite. This useful for checking just how far from positive-definiteness the matrix is by being able to examine the eigenvalues. . Additionally, a lower bound on the precision allowed for the spread of eigenvalues of the ""hessian"" correlation matrix (computing a correlation matrix with the hessian as if it was a covariance matrix) was reduced from 1e-6 to 1e-12 (see MnHesse.cxx) ... it is not clear why 1e-6 was the lower bound previously, but current machine precision can beat that (I get locally 1e-8). I left a comment about whether this lower bound should be made configurable or not... This new strategy was tested with a model with high statistics (almost 50 million events) where the migrad minimization was successful but the hessian was being forced positive definite. With this new Strategy 3 the hessian is accurate and positive definite in all cases tested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13109:1186,reduce,reduced,1186,https://root.cern,https://github.com/root-project/root/pull/13109,1,['reduce'],['reduced']
Energy Efficiency,"This pull request introduces a structure (`RDaosKey`) to represent a blob's location within DAOS containers (comprising object ID, distribution key and attribute key) and adds a new mapping between ntuple pages to DAOS. The new mapping ( `kOidPerCluster` ) allocates one object per cluster and determines the distribution key from the column ID - with each page addressable by its own attribute key - , thus perpetuating the adjacency of values in the same cluster and column in the distributed store. I.e., neighboring values that are likely to be fetched together are coalesced to the same physical device in DAOS. The original mapping remains available as `kOidPerPage`, where each page is uniquely allocated its own object. In future, other mappings may be easily added by modifying the templated function `GetPageDaosKey` with that use case. RW calls in `RPageStorageDaos` use the mapping set in `kDefaultDaosMapping`, which is `kOidPerCluster`. ## Changes or fixes:; - Introduces `RDaosKey` as an abstract representation of a blob's location in DAOS comprising object ID, distribution key and attribute key.; - Mapping strategies are listed in the enumerator `EDaosMapping`, currently with values `kOidPerPage`, `kOidPerCluster`. ; - The function `GetPageDaosKey` determines the correct `RDaosKey` from page metadata in accordance with the strategy given by the templated argument of type `EDaosMapping`.; - The variable `kDefaultDaosMapping`, set to `kOidPerCluster`, holds the mapping for `RPageStorageDaos` RW calls.; - RNTuple page metadata (anchor, header, footer) blobs are mapped to a single object with three attribute keys, while a dedicated object is allocated to hold the pagelists (one for each cluster group). ## Checklist:. - [x] tested changes locally and on openlab cluster: passes unit tests, LHCb dataset on DAOS 2.0; - [x] updated the docs (if necessary). This PR partially fixes #8080 by introducing the new mapping that stores ""page groups"" as sharing the same object and di",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10927:257,allocate,allocates,257,https://root.cern,https://github.com/root-project/root/pull/10927,2,['allocate'],"['allocated', 'allocates']"
Energy Efficiency,"This pull request is the result of work done by David Clark as a summer intern at Argonne:; To prepare for multi-threaded workflows, a preloading and retaining clusters feature is introduced. This change will prevent additional reads from occurring when reading events out of sequence.; ; By setting the `MaxVirtualSize` of the tree to a negative value, entire clusters will be loaded into memory and previous clusters will be retained - the absolute value of `MaxVirtualSize` indicates how many additional clusters will be kept in memory.; ; If `TTree MaxVirtualSize` is set to a negative value, `GetEntry()` will load the entire cluster into memory, not just the first basket. `GetBasket()` is modified to call a new function `GetFreshCluster()` if `MaxVirtualSize` is negative. This function is responsible for returning a new basket and clearing out clusters from memory. Because clusters can have varying numbers of baskets, `GetFreshCluster()` reuses the first basket and clear the rest of the baskets. Reusing all baskets may be more efficient, but adds significant complexity and would not affect the typical case where each cluster only contains a single basket (all the baskets will be reused here).; ; To test the performance of the change, I read 1000 entries (about 1 GB) from a tree of randomly generated data consisting of 2000 branches. Every read had a 2.5% chance of reading 10 entries back or a 2.5% chance of reading 10 entries forward from the current entry. - Without the change enables there were 1.5 GB read in 31102 read calls. ; - With MaxVirtualSize set to -1, there were 1.1 GB read in 90 read calls.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/796:1041,efficient,efficient,1041,https://root.cern,https://github.com/root-project/root/pull/796,1,['efficient'],['efficient']
Energy Efficiency,"This pull request makes `UnsealPage()` a no-op for the page zero. To this end, the prototype of `RPageSource::UnsealPage()` had to be changed to return an `RPage`, per previous conversation. The buffer for the returned page is usually allocated using the `RPageAllocatorHeap`, and thus `RPageAllocatorHeap::DeletePage()` should be called to delete the returned object. Note that storage backends may still provide their own page unsealing code, e.g. for custom memory allocation. ## Checklist:; - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #12958.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13208:235,allocate,allocated,235,https://root.cern,https://github.com/root-project/root/pull/13208,1,['allocate'],['allocated']
Energy Efficiency,"This pull request provides a page allocator that caches previous allocations up to a certain limit. The cache is thread-local and defaults to 16 pages per thread (~1MiB per thread for default-sized pages). This PR is largely based on the concepts in #8634. Reuse of memory allocations in `RPageAllocatorCache` not only reduces calls to the global allocator but also heap fragmentation. The global allocator is thread-safe albeit locked; thus, to also reduce contention, the cache in `RPageAllocatorCache` is thread-local.; Given the small size of the (per-thread) cache, the internal structure is a simple `std::deque`. Anything more complex is not justified at the moment of this writing. . **NOTE:** Performance evaluation (specially for the multi-threaded case) should be inserted here tomorrow. ## Changes or fixes:; - Add `RPageAllocatorCache`: this templated allocator returns pages that have at least the required capacity. `DeletePage()` does not immediately deallocate memory; instead, pages are returned to a thread-local cache, dropping the smallest allocated buffer if the cache is full. If a previous page cannot be recycled, the underlying allocator `AllocT` (`RPageAllocatorHeap` by default) is used to allocate memory.; - Change the signature of `RPageSource::UnsealPage()`: `SealPage()`, the counterpart of `UnsealPage()` takes an RPage and returns an RSealedPage. Make the interface of `UnsealPage()` symmetric and return an RPage.; - Make `UnsealPage()` use `RPageAllocatorCache` by default.; - Remove stray `RPageAllocator{File,Daos}` classes. ## Checklist:; - [X] tested changes locally; - [X] updated the docs (if necessary). This PR supersedes #8634.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12279:319,reduce,reduces,319,https://root.cern,https://github.com/root-project/root/pull/12279,4,"['allocate', 'reduce']","['allocate', 'allocated', 'reduce', 'reduces']"
Energy Efficiency,"This pull request slighly improves RClusterPool to reduce contention (due to `fLockXxxQueue` being held) in I/O and unzip; threads. To this end, each thread keeps its local buffer of elements to be processed. On wakeup, the local copy is swapped with `fXxxQueue`, which not only reduces contention but also reduces the overall number of allocations, as the internal storage of both copies is reused. The local copy should be cleared before the `std::swap()` in the next iteration. Also, the unzip thread is just notified once after all the elements are pushed into the queue. ## Checklist:; - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12044:51,reduce,reduce,51,https://root.cern,https://github.com/root-project/root/pull/12044,3,['reduce'],"['reduce', 'reduces']"
Energy Efficiency,"This pull requests adds additional functionality to RDF Define in c++ in order to facilitate new features via pythonization. New features in c++:; - more flexibility in template arguments in order to allow argument and return types to be specified independently of the callable type (this means types don't have to match exactly and implicit conversions between float and double, etc are possible); (Specification of Define result type independent from inferred function return type may facilitate future optimizations related to suppressing dynamic memory allocation.); - support for callables with overloaded operator() as long as argument types are explicitly specified; - reduced copying/moving of callable. New features from pythonization of Define:; - support for free functions, static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot.; - support for expression strings, and a complete lambda expression passed as a string; - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available); - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous); - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++; ```cpp; float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>; T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {; public:; float operator() (float x) { return x*x; }; double operator() (double x) { return x*x; }. template<typename T>; T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>; T squared(T x) { r",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9174:676,reduce,reduced,676,https://root.cern,https://github.com/root-project/root/pull/9174,1,['reduce'],['reduced']
Energy Efficiency,This reduces dependency on rootmap files,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3757:5,reduce,reduces,5,https://root.cern,https://github.com/root-project/root/pull/3757,1,['reduce'],['reduces']
Energy Efficiency,This reduces pcm size by 5.5 Mbytes; ```; `--> du lib/*.pcm | awk -F ' ' '{sum += $1} END {print sum}'; 340380; `--> du lib/*.pcm | awk -F ' ' '{sum += $1} END {print sum}'; 334932; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2411:5,reduce,reduces,5,https://root.cern,https://github.com/root-project/root/pull/2411,1,['reduce'],['reduces']
Energy Efficiency,This reduces run times of workspace transformations by factor ~7 for ATLAS workflows with heavy searching.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5739:5,reduce,reduces,5,https://root.cern,https://github.com/root-project/root/pull/5739,1,['reduce'],['reduces']
Energy Efficiency,This reduces the amount of potential undefined behavior. Fixes #15090. Related to https://github.com/cms-sw/cmssw/issues/33084,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15113:5,reduce,reduces,5,https://root.cern,https://github.com/root-project/root/pull/15113,1,['reduce'],['reduces']
Energy Efficiency,This reduces the different specializations of TDFInterface that have to be instantiated to three.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/347:5,reduce,reduces,5,https://root.cern,https://github.com/root-project/root/pull/347,1,['reduce'],['reduces']
Energy Efficiency,This reduces the duplications in all modules reducing the overall; modules size by 1MB.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2005:5,reduce,reduces,5,https://root.cern,https://github.com/root-project/root/pull/2005,1,['reduce'],['reduces']
Energy Efficiency,"This reduces the time required by jitting dramatically in many common scenarios, as we do not need a different template specialization of types that are expensive to instantiate for each Define or Filter expression. Performance measurements available [here](https://indico.cern.ch/event/909884/)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5329:5,reduce,reduces,5,https://root.cern,https://github.com/root-project/root/pull/5329,1,['reduce'],['reduces']
Energy Efficiency,"This reduces the time to run Hesse in the ATLAS Higgs benchmark from; 123 s to 92 seconds. Given that some models take hours for this, this is a significant; improvement for the user experience. Further improvement is possible by analyzing the computation graph a bit; more to find more independent parameters (e.g., the different gammas for; stat uncertainties from different bins).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16394:5,reduce,reduces,5,https://root.cern,https://github.com/root-project/root/pull/16394,1,['reduce'],['reduces']
Energy Efficiency,This reduces the usage of non-public CPyCppyy internals in PyROOT.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14466:5,reduce,reduces,5,https://root.cern,https://github.com/root-project/root/pull/14466,1,['reduce'],['reduces']
Energy Efficiency,This reduces the usage of non-public CPyCppyy internals in PyROOT. For more context: the pythonization of `TDirectoryFile::Get()` was; introduced with commit https://github.com/guitargeek/root/commit/c7249bf690f505d2fdc73bccf41aa6a89d70c19b from PR https://github.com/root-project/root/pull/4156.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14465:5,reduce,reduces,5,https://root.cern,https://github.com/root-project/root/pull/14465,1,['reduce'],['reduces']
Energy Efficiency,This reduces the usage of the CPyCppyy internals.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14415:5,reduce,reduces,5,https://root.cern,https://github.com/root-project/root/pull/14415,1,['reduce'],['reduces']
Energy Efficiency,"This results in more modular code that is also safer: the `ROOT::Fit::Fitter` has no access to the RooAbsMinimizerFcn anymore, only to the member that is a lightweight adapter. This means the `RooAbsMinimizerFcn` also doesn't get cloned unexpectedly, so we don't need extra checks in the RooMinimizer to account for that!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12348:168,adapt,adapter,168,https://root.cern,https://github.com/root-project/root/pull/12348,1,['adapt'],['adapter']
Energy Efficiency,"This reverts commit 2a265a3a, which caused failures in the nightlies even though the CI in #16274 was green.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16278:102,green,green,102,https://root.cern,https://github.com/root-project/root/pull/16278,1,['green'],['green']
Energy Efficiency,"This set of improvements to TBufferMerger (and more) was inspired by the terrible performance of the parallel merging (and fast merging in general) in the case where the TTree has a very large number of branches (1000+). Where in the original version a TBufferMerger with a file with 1000+ branches and only 50s and ran with any number of threads would take more than 3m (did not wait until the end) the new version takes 11s with 1 thread, 8s with 6 threads and 22s with 6 thread when increased to 500 events. (using the CMS file ../data//250202_181_RECO.root). This PR includes:. * skipping the boxing/compressing/uncompressing/unboxing cycle if the TBufferMerger is available (not already merging) when the thread is writing its TMemFile. * skipping SetBranchAddress and SetMakeClass in when doing fast cloning (where that information is not used anyway). * Replacing calling to the slow TObjArray::GetEntries (which *counts* the slot used) by calling GetEntriesFast. * Speeding up the GetMother implementation (caching parent's address sooner when reading, use that information in GetMother). * In fast cloning, delay writing the output until the last input is processed (instead of writing the output after each input),. * Optimization of fast cloning handing of empty write basket. It also contains a couple of bug fixes (RNtuple merging forgetting to merge the result of the objects in the file, iofeatures incorrectly cloned). Also made TBufferMerger::GetQueueSize actually thread safe (it is necessary to use it to stop the producer from adding more data if the queue is too full). Also improved TClass::GetBaseClassOffset parallelism (benefit parallel boxing/unboxing) and reduced/removed contention see in the mechanism use to determine the actual object type at run-time (TIsAProxy).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7286:1683,reduce,reduced,1683,https://root.cern,https://github.com/root-project/root/pull/7286,1,['reduce'],['reduced']
Energy Efficiency,This should reduce the amount of modules we load for namespace lookups at the cost of being more fragile. Improves the memory of hsimple.c from 145864 to 118696 and skips loading of 15 redundant modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6190:12,reduce,reduce,12,https://root.cern,https://github.com/root-project/root/pull/6190,1,['reduce'],['reduce']
Energy Efficiency,This should reduce the amount of patches we have in clang making the PCH; relocatable.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/893:12,reduce,reduce,12,https://root.cern,https://github.com/root-project/root/pull/893,1,['reduce'],['reduce']
Energy Efficiency,This should reduce the textual duplicates in all C++ modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4490:12,reduce,reduce,12,https://root.cern,https://github.com/root-project/root/pull/4490,1,['reduce'],['reduce']
Energy Efficiency,This should solve some problems with TDF jitting.; To be removed when TDataFrame moves out of libTreePlayer. The change is fairly trivial. Will merge if the jenkins builds are reasonably green.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1888:187,green,green,187,https://root.cern,https://github.com/root-project/root/pull/1888,1,['green'],['green']
Energy Efficiency,To be merged if nightlies are green tonight :),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2223:30,green,green,30,https://root.cern,https://github.com/root-project/root/pull/2223,1,['green'],['green']
Energy Efficiency,Typical problem - direct copy of self-allocated memory which will lead to error in destructor; Also adjust some assign operators where `Copy` can be used.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10908:38,allocate,allocated,38,https://root.cern,https://github.com/root-project/root/pull/10908,1,['allocate'],['allocated']
Energy Efficiency,"UE);; }; ```. Likely disabling template instantiation inside SetClassInfo in this use case. ```; art: /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837: void clang::ClassTemplateSpecializationDecl::setInstantiationOf(clang::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462:1881,green,greenc,1881,https://root.cern,https://github.com/root-project/root/pull/5462,1,['green'],['greenc']
Energy Efficiency,"Use `=delete` specifier for copy/assign methods which were marked as ""not implemented"". Remove copy/assign operator for following classes:; * TVirtualGeoTrack; * TGeoTrack; * TGeoUniformMagField; * TGeoPolygon; * TGeoBuilder; * TGeoPhysicalNode; * TGeoStateInfo; * TGeoManager. In most these classes copy constructor was copying pointer on internal allocated memory.; Means it was clearly errors and cannot be used this way. Also implement TGeoBoolNode::AssignPoints() method.; Used in all `GetNpoints` methods to set points arrays.; Plus modernize TGeoBoolNode classes - uses `override` specifier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5058:349,allocate,allocated,349,https://root.cern,https://github.com/root-project/root/pull/5058,1,['allocate'],['allocated']
Energy Efficiency,"Use `std::span` instead of `std::vector const&` for function parameters in Minuit2. The motivation is that `std::span` is more general. If the function takes a `std::vector const&`, the inputs are forced to be allocated on the heap. So if one wants to call functions with constant size or even scalar input, that would cause a large overhead. This overhead can be avoided when generalizing with `std::span`. The standalone Minuit2 build files were also changed to consider the; `std::span` backport to C++17 that is already in ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15037:210,allocate,allocated,210,https://root.cern,https://github.com/root-project/root/pull/15037,1,['allocate'],['allocated']
Energy Efficiency,"Use larger vectors and access them more sparsely if needed (e.g.; threads now access one every 16 elements in hot std::vector<int>; on systems where a cache line is 64 bytes). In some edge cases in which the analysis workload is light and/or many; threads (48, 64) are involved, this patch reduces runtimes by factors.; The increase in memory usage should be little relative to the memory; required e.g. by jitting or by per-thread histograms.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8007:290,reduce,reduces,290,https://root.cern,https://github.com/root-project/root/pull/8007,1,['reduce'],['reduces']
Energy Efficiency,"Use the correct syntax for the `START` command, which is:; ```; START ""title"" [/D path] [options] ""command"" [parameters]; ```; This prevent the following error with the `.forum bug` command:; ```; root [0] .forum bug; The system cannot accept the START command parameter ""https://root-forum.cern.ch/new-topic?category=ROOT&tags=bug&body=___%0A_Please read [tips for efficient and successful posting](https:%2F%2Froot-forum.cern.ch%2Ft%2Ftips-for-efficient-and-successful-posting%2F28292) and [posting code](https:%2F%2Froot-forum.cern.ch%2Ft%2Fposting-code-read-this-first%2F28293)_%0A%0A%23%23%23 Describe the bug%0A<!--%0AA clear and concise description of what the wrong behavior is.%0A-->%0A%23%23%23 Expected behavior%0A<!--%0AA clear and concise description of what you expected to happen.%0A-->%0A%0A%23%23%23 To Reproduce%0A<!--%0ASteps to reproduce the behavior:%0A1. Your code that triggers the issue: at least a part%3B ideally something we can run ourselves.%0A2. Don't forget to attach the required input files!%0A3. How to run your code and %2F or build it, e.g. %60root myMacro.C%60, ...%0A-->%0A%0A%23%23%23 Setup%0A%60%60%60%0AROOT v6.29%2F01%0ABuilt for win32 on Jun 26 2023, 07:55:07%0AFrom heads%2Fmaster@v6-29-01-1740-ga5471d735c%0AWith MSVC 19.29.30146.0%0ABinary directory: C:\Users\bellenot\build\x86\release\bin%0A%60%60%60%0A%0A<!--%0APlease specify also how you obtained ROOT, such as %60dnf install%60 %2F binary download %2F you built it yourself.%0A-->%0A%0A%23%23%23 Additional context%0A<!--%0AAdd any other context about the problem here.%0A-->&"".; root [1]; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13106:366,efficient,efficient,366,https://root.cern,https://github.com/root-project/root/pull/13106,4,['efficient'],"['efficient', 'efficient-and-successful-posting']"
Energy Efficiency,"Var mean_res(""#mean_{gauss}"", ""mean_res"", 4.47);; 	RooRealVar sigma_res(""#sigma_{gauss}"", ""sigma_res"", 0.05);; 	RooGaussian sig(""gs_res"", ""gs_res"", x, mean_res, sigma_res);. 	// background; 	RooRealVar argpar(""shape"", ""argus shape parameter"", -7);; 	RooRealVar power(""power"", ""argus power parameter"", 0.75);; 	RooArgusBG bkg(""bkg"", Form(""Background ARGUS, m_{0} = %.3f"", m0), x, RooConst(m0), argpar, power);. 	// generating distribution; 	RooRealVar nsig(""nsig"", ""signal number"", bratio);; 	RooRealVar nbg(""nbg"", ""bg number"", 1.-bratio); ; 	RooAddPdf mcdist(""distribution"", ""BW+a"", RooArgList(sig, bkg), RooArgList(nsig, nbg));. 	// signal used in model; 	RooRealVar fitmean_res(""#mean_{gauss}"", ""mean_res"", 4.2, 4., 5.);; 	RooRealVar fitsigma_res(""#sigma_{gauss}"", ""sigma_res"", 0.1, 0., 1.);; 	RooGaussian fitsig(""gs_res"", ""gs_res"", x, fitmean_res, fitsigma_res);; 	; 	// background used in model; 	RooRealVar fitargpar(""shape"", ""fit argus shape parameter"", -6.5, -8, -6);; 	RooRealVar fitpower(""power"", ""fit argus power parameter"", 0.5, 0, 1);; 	RooArgusBG fitbkg(""fitbkg"", ""Fit Background ARGUS"", x, RooConst(m0), fitargpar, fitpower);; 	RooRealVar fitnsig(""nsig"", ""signal number"", 0.6 * nevents, 0, 1.2 * nevents);; 	RooRealVar fitnbg(""nbg"", ""bg number"", 0.4 * nevents, 0, 1.2 * nevents);. 	// fitting model; 	RooAddPdf model(""model"", ""BW+a fitted"", RooArgList(fitsig, fitbkg), RooArgList(fitnsig, fitnbg));. 	RooMCStudy* mcstudy =; 		new RooMCStudy(mcdist, x, FitModel(model), Binned(kFALSE), Silence(), Extended(kFALSE),; 			FitOptions(Extended(kFALSE), PrintEvalErrors(-1), Save(kTRUE)));. 	RooDLLSignificanceMCSModule sigModule(""nsig"", 0);; 	mcstudy->addModule(sigModule);. 	mcstudy->generateAndFit(100, nevents, kTRUE);. 	std::cout << mcstudy->fitParDataSet() << std::endl;; }; ```. which results in . ```; [#0] ERROR:InputArguments -- RooDataSet::merge(fitParData_model_distribution) ERROR: datasets have different size; RooDataSet::fitParData_model_distribution[#mean_{gauss},#sigma_{gaus",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6949:1958,power,power,1958,https://root.cern,https://github.com/root-project/root/issues/6949,2,['power'],['power']
Energy Efficiency,WIP: Reduce scope of interpreter lock in TClass::GetListOfBases(),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/957:5,Reduce,Reduce,5,https://root.cern,https://github.com/root-project/root/pull/957,1,['Reduce'],['Reduce']
Energy Efficiency,"We *know* C++20 is failing the test suite, make the builds green by adding C++20 support to a PR rather than master. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12837:59,green,green,59,https://root.cern,https://github.com/root-project/root/pull/12837,1,['green'],['green']
Energy Efficiency,"We don't use the PCH with modules, so we don't need to build it.; Should also really reduce building times with modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1246:85,reduce,reduce,85,https://root.cern,https://github.com/root-project/root/pull/1246,1,['reduce'],['reduce']
Energy Efficiency,"We now register all RDefine nodes, incuding varied defines, with; RLoopManager, which is in charge of calling InitSlot on all; registered nodes, so we do not need to propagate the InitSlot call; from RVariation or RDefine to other RDefines.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10812:92,charge,charge,92,https://root.cern,https://github.com/root-project/root/pull/10812,1,['charge'],['charge']
Energy Efficiency,"We use a conformant BLAS implementation to satisfy the cblas; dependencies of MathMore coming from GSL in preference to GSL's provided; libgslcblas. GSL explicitly makes this possible by segregating its BLAS; implementation, and by not having an explicit link from libgsl.so to; libgslcblas.so. Allowing a non-GSL BLAS enables:. 1. the use of (much) more efficient implementations by mathmore / GSL; functions;. 2. consistency with other uses of BLAS within ROOT (e.g. TMVA).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6950:355,efficient,efficient,355,https://root.cern,https://github.com/root-project/root/pull/6950,1,['efficient'],['efficient']
Energy Efficiency,"When called repeatedly via TTree::GetBranch, the string allocations in; GetFullName have a notable runtime cost.; Here, the allocation is reduced to a single one in every branch. See here for a performance analysis where repeated invocations produced significant overhead.; ![image](https://user-images.githubusercontent.com/16205615/186901068-80db73be-e32a-47e5-8986-4dfe8d5e8dae.png). This seems to matter most if the branches have mothers, because in this case, the string composition kicks in. @pcanal; - Do you know if there's a test that covers this case?; - Do you agree that this brings down TString allocations?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11255:138,reduce,reduced,138,https://root.cern,https://github.com/root-project/root/pull/11255,1,['reduce'],['reduced']
Energy Efficiency,"When calling TOracleStatement::GetBinary() function, memory was; allocated with `malloc(len)` operator, but released with `delete [] buf`; Definitely wrong. Nobody was using it before - or clib was doing; something wrong. Adjust Oracle/MySQL/SQLite/ODBC/PgSQL classes to c++11.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4927:65,allocate,allocated,65,https://root.cern,https://github.com/root-project/root/pull/4927,1,['allocate'],['allocated']
Energy Efficiency,"When cmake flag `-Ddev=ON` specified, R__LESS_INCLUDES macro is defined. It can be used in different places to reduce/remove includes and replace them by forward declarations - if necessary. Old includes can remain for a while - otherwise lot of user codes can be broken suddenly. Code example:; ```; #ifdef R__LESS_INCLUDES; class TBranch;; class TBuffer;; class TList;; #else; #include ""TBranch.h""; #include ""TBuffer.h""; #include ""TList.h""; #endif; ```. Main changes:; * Classes `TBuffer` and `TDatime` not used in TDirectory.h, can be removed; * Also TList.h can be replaced by forward declarations in TDirectory.h; * Several includes in TClass.h are not used, but lot of code depends on it; * In TTree.h includes TBranch.h, TList.h, TBuffer.h replaced by forward declarations. Main advantage - one really see which includes are really required and not relies on the fact, that some basic includes like TSystem.h or TDirectory.h provides includes for different containers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5123:111,reduce,reduce,111,https://root.cern,https://github.com/root-project/root/pull/5123,1,['reduce'],['reduce']
Energy Efficiency,"When filling histograms without limits in parallel a problem to be addressed is how to make sure that the ranges are compatible for the final merging.; This PR proposes a technique based on a static reference list of TAxis, kept as a static in TH1, filled/used by the different threads. The first thread calculates the TAxis ranges and saves it into the list, the others use it. The list is protected by a RW lock .; The logic is implemented in TH1::BufferEmpty and holds for TH{1,2,3}, the specificity of each TH{1,2,3} being moved to a set of new member functions called by TH1::BufferEmpty. The change in TH1Merger is required to calculate the axis and dump the internal buffers when the internal buffersize has not yet been reached. This treatment can perhaps be improved to get the same result of the single thread case. The patch also implements the hook for a call back function to implement the same functionality in the case of multi-processing. A patch with adaptation to multiproc will follow. The tutorial mt301_fillHistAutoBin.C illustrates the usage with TThreadedObject . NB: many of the changes in TH1.h come from clang-format-{3.8, 3.9, 4.0}",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/902:968,adapt,adaptation,968,https://root.cern,https://github.com/root-project/root/pull/902,1,['adapt'],['adaptation']
Energy Efficiency,"When histogram object too large (more than 10^6 bins), its JSON representation can be huge.; At the same time graphics cannot display so much individual bins.; Therefore introduce `Optimize()` mode, when histogram can be rebinned before sending to the client; Allows to efficiently display histogram with arbitrary number of bins - the only limitation is memory and; efficiency of rebin algorithm (which is straight forward). For all drawing options of `RH1`, `RH2`, `RH3` optimized drawing mode is supported now.; For the moment default value is off - mean one should explicitly enable it when drawing histogram. Provide tutorial macros: `draw_rh1_large.cxx`, `draw_rh2_large.cxx`, `draw_rh3_large.cxx`; Ensure that they runs in compiled mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5980:270,efficient,efficiently,270,https://root.cern,https://github.com/root-project/root/pull/5980,1,['efficient'],['efficiently']
Energy Efficiency,"When performing multi-thread reads of ROOT files, we need to pick the number; of TBB tasks among which we will divide the dataset. Our heuristic is ""try to produce around `T = N/ntrees` tasks per tree per; worker thread"": we don't know the number of clusters in each tree before; we open the files, so we don't know the total number of clusters upfront.; Instead we set a ""desired value"" of T tasks per tree and per thread, and; then when each thread opens a file it tries to make T tasks out of it (if; the file turns out to be too small, it might end up producing _less_ tasks than; desired. If we are processing `M > N` small files, we might end up producing; _more_ tasks per worker than N). N is a free parameter, and it represents the desired total number of; tasks per worker. If N is too low, parallelism will be too coarse-grained; and we might get imbalance/tails with bad parallelization.; The higher N is, the more CPU time we spend in task setup/teardown. Empirically, I believe we have set N too high (before this patch we set; it to 24). We often see runtime improvements in benchmarks by setting it; to a lower value, e.g. 10.; Again from experience, N == 10 should be a high-enough value to avoid; load imbalance between threads while it significantly reduces the amount; of tasks spawned (and the overhead that comes with it).; Therefore this patch sets N to 10. More discussion:; - https://mattermost.web.cern.ch/root/pl/8ay6my4pwbru7kzqs97f8xcdre; - https://docs.oneapi.com/versions/latest/onetbb/tbb_userguide/Task-Based_Programming.html",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8565:1269,reduce,reduces,1269,https://root.cern,https://github.com/root-project/root/pull/8565,1,['reduce'],['reduces']
Energy Efficiency,"When running on machines with few cores, enabling multithreading can; give you fewer cores than requested. For most of the tests this does; not matter. However, some tests verify the number of threads used.; This commit adapts those tests for this situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8068:220,adapt,adapts,220,https://root.cern,https://github.com/root-project/root/pull/8068,1,['adapt'],['adapts']
Energy Efficiency,"When using source bilds, all necessary source includes; will be provided via dependencies. When using installed root,; anyway ${CMAKE_BINARY_DIR}/include has to be used. Reduce usage of `find_package(ROOT)` method. ; If was misused to produce variables like `ROOT_asimage_FOUND` or `ROOT_vc_FOUND`; Now only kept at the place where it can be really used outside ROOT.; Plus two historical files in `test/` and `tutorials/` are mostly unchanged while too many such variables are used",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5577:170,Reduce,Reduce,170,https://root.cern,https://github.com/root-project/root/pull/5577,1,['Reduce'],['Reduce']
Energy Efficiency,"When we want to autoload contents from namespaces we end up in; Sema::LookupQualifiedName; then we issue a callback to; FindExternallyVisibleName which forwards to LookupObject. Lookup object; takes a DeclContext as an argument. This argument is always the primary; lookup context (which for a NamespaceDecl is the original namespace. Regular autoloading does not consider this (or has chosen not to) because; this reduces the amount of autoloads. Such autoloads can happen when; resolving template specializations when computing a decl's linkage by; clang's CodeGen. This in turn loads unexpected libraries such as RooFit; when trying to resolve all template specializations of __to_raw_pointer; (located in &lt;memory&gt;), including the one taking a HistFactory::Data*.; The amount of deserializations might be reduced by applying [D29951](https://reviews.llvm.org/D29951). That way we end up needlessly loading RooFit and showing it's weird; banner, potentially breaking a lot of tests. This behavior can be considered as broken because we hide information; about possible redeclarations which can affect the linkage computation or; other checks in codegen. If we fix the bug we will probably explode; ROOT's memory footprint and make the gap between standard ROOT and ROOT; with modules even bigger. Since it is not clear how much work and issue resolving is required for; standard ROOT, we can probably only live with the workaround of the missing; concept: moving entities in namespaces whose autoloading requires declarations; to be in the PCH. For instance, ROOT::Experimental::TDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1337:415,reduce,reduces,415,https://root.cern,https://github.com/root-project/root/pull/1337,2,['reduce'],"['reduced', 'reduces']"
Energy Efficiency,"When wrong-formatted TMessage is received, length of buffer may be 0.; As result, buffer may not be allocated at all.; One should avoid that in such case memory is accessed",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4551:100,allocate,allocated,100,https://root.cern,https://github.com/root-project/root/pull/4551,1,['allocate'],['allocated']
Energy Efficiency,"While many widgets will access JSROOT, try to always access JSROOT version from top server location; One cannot simply use src=""/jsrootsys/scripts/JSRoot.core.js"" while it does not work with FastCGI.; Therefore one have to use relative paths like ""../../jsrootsys/scripts/JSRoot.core.js"".; More efficiently will use browser cache",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7124:295,efficient,efficiently,295,https://root.cern,https://github.com/root-project/root/pull/7124,1,['efficient'],['efficiently']
Energy Efficiency,"While profiling the AGC running on local dask, we found that TChain::GetListOfBranches() allocated a large amount of memory. The reason is that when the function is called, TChain does a LoadTree(0), which results in the tree allocating a new TTreeCache. This piles up during the execution of the python tasks and results in a large memory overhead.; Since we don't really need the cache when only querying the branch list, this commit introduces a new private LoadTreeWithOptions() function that allows the TChain to internally disable the tree's cache (setting the cache size to 0) before performing the LoadTree. The original cache size is then restored.; This saves about 350 MB of memory during the AGC execution for no visible downside.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16063:89,allocate,allocated,89,https://root.cern,https://github.com/root-project/root/pull/16063,1,['allocate'],['allocated']
Energy Efficiency,"With a task scheduler, `RPageSinkBuf::CommitPage` copies the uncompressed page; https://github.com/root-project/root/blob/226e4c00e5dc4b7aaf881bad810a0c78c8a14185/tree/ntuple/v7/src/RPageSinkBuf.cxx#L167-L170; for asynchronous compression. However, the uncompressed page is only released in `FlushClusterImpl` which leads to significant memory overhead for high compression factors (such as CMS miniAOD). In principle, the uncompressed buffer can be released directly after compression, which is only a bit tricky because it requires the allocator to be thread-safe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16753:12,schedul,scheduler,12,https://root.cern,https://github.com/root-project/root/issues/16753,1,['schedul'],['scheduler']
Energy Efficiency,"With multiple concurrent `RNTupleFillContext`s, the order of clusters is generally indeterminate and entries are only partially ordered. With staged cluster committing, this restriction can be partially lifted by splitting a cluster commit into two phases:; 1. Once full, or when manually triggered, all fields are committed which triggers flushing of all columns. All pages are compressed and staged via the page sink. The result is a `RStagedCluster` that records all information for the second phase. This step can be repeated multiple times as entries are filled into the context.; 2. When appropriate for the application, all staged clusters can be committed, which logically appends them to the RNTuple. This is implemented in a single critical section, which guarantees that the clusters and their entries are consecutive. Moreover, by synchronizing the second phase between multiple contexts, the application can enforce a total ordering of all contained entries at reasonable resource consumption: During the first phase, all write buffers are flushed and will be reused for the following cluster. The metadata stored in `RStagedCluster` should require only minimal memory, which will accumulate while staging more clusters. Staged cluster committing is expected to be slightly slower than the default mode, but should still scale well as the second phase only updates the metadata which is a lightweight operation compared to preparing and filling entries, compressing pages, and writing them to disk. A noteworthy disadvantage is that staged cluster committing will lead to non-linear files, where sequentially iterating over clusters may require seeking to distant file offsets. The impact resulting from this will depend on the storage technology and the read pattern. Closes #16326",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16343:994,consumption,consumption,994,https://root.cern,https://github.com/root-project/root/pull/16343,1,['consumption'],['consumption']
Energy Efficiency,"With the example below, we get:. ```; Error in <TTreeReaderArrayBase::GetBranchContentDataType()>: The branch h.fData.fPx contains a data type 9 for which the dictionary cannot be retrieved.; ```. This was seen during investigations by CMSSW team of leveraging `Double32_t` and `Float16_t` to reduce data size. Cheers,; Philippe. ```; #include ""TTree.h""; #include ""TTreeReader.h""; #include ""TTreeReaderArray.h"". struct Inside {; Double32_t fPx;; double fPy;; };. struct Holder {; std::vector<Double32_t> fValues;; std::vector<Inside> fData;; };. #ifdef __ROOTCLING__; #pragma link C++ class Inside+;; #pragma link C++ class Holder+;; #pragma link C++ class std::vector<Inside>+;; #pragma link C++ class std::vector<Double32_t>+;; #endif. void exec(); {; auto t = new TTree(""t"",""t"");; Holder h;; t->Branch(""h."", &h);; t->Fill();; t->Print();; TTreeReader r(t);; //TTreeReaderArray<Double32_t> arr1(r, ""h.fValues"");; TTreeReaderArray<Double32_t> arr2(r, ""h.fData.fPx"");; TTreeReaderArray<Double32_t> arr3(r, ""h.fData.fPy"");; r.Next();; // arr1.GetSize();; arr2.GetSize();; arr3.GetSize();; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11260:293,reduce,reduce,293,https://root.cern,https://github.com/root-project/root/issues/11260,1,['reduce'],['reduce']
Energy Efficiency,"With the helpers for column creation introduced by #16116, memory consumption during compilation significantly increases (from ~200MB to ~600MB using clang) due to the fact that templated field types, and therefore all possible column representations are automatically instantiated. This commit prevents this automatic instantiation from happening by `extern`-alizing all `RSimpleField` template specializations and only instantiating them in `RField.cxx`, bringing down memory consumption to ~230MB.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16284:66,consumption,consumption,66,https://root.cern,https://github.com/root-project/root/pull/16284,2,['consumption'],['consumption']
Energy Efficiency,"With the upgrade, BackendPasses was modifying a TargetMachine that was not used by SimpleCompiler. Change that by; - using a SimpleCompiler that uses IncrementalJIT::TM;; - moving the TM creation to IncrementalJIT, and giving access to it. This reduces the runtime of https://github.com/root-project/root/issues/11927 to; - before llvm upgrade: 2.69s; - llvm13, without this commit: ???; - llvm13, with this commit: 2.89s i.e, a slow-down of 7% (that is likely caused by the different emission mechanism of Orc-v2; to be confirmed...). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11945:245,reduce,reduces,245,https://root.cern,https://github.com/root-project/root/pull/11945,1,['reduce'],['reduces']
Energy Efficiency,"With the upgrade, BackendPasses was modifying a TargetMachine that was not used by SimpleCompiler. Change that by; - using a SimpleCompiler that uses IncrementalJIT::TM;; - moving the TM creation to IncrementalJIT, and giving access to it. This reduces the runtime of https://github.com/root-project/root/issues/11927 to; - before llvm upgrade: 2.69s; - llvm13, without this commit: ???; - llvm13, with this commit: 2.89s i.e, a slow-down of 7% (that is likely caused by the different emission mechanism of Orc-v2; to be confirmed...). (cherry picked from commit d3793f2bb8c5948f4c64947c7f76fb0b0e1a3567). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12096:245,reduce,reduces,245,https://root.cern,https://github.com/root-project/root/pull/12096,1,['reduce'],['reduces']
Energy Efficiency,"With this change, the method invocation request is received directly from civetweb server thread. The changes are executed through REveManager thread execution thread that processes. The REveManger::DoRedraw() method bacame depreciated. It is now possible to apply changes without a client interface after the connection is created. This example is implemented in autoplay of events in tutorials/eve7/event_demo.C. Other changes:; * Fix memory leaks in the client; * Reduce calls of TSystem::ProcessLine; * Add structure to transfer server messages to client log (REveLog).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8114:467,Reduce,Reduce,467,https://root.cern,https://github.com/root-project/root/pull/8114,1,['Reduce'],['Reduce']
Energy Efficiency,"Without a task scheduler, seal in `CommitPage`. This avoids a page allocation and, in most cases, a copy of the uncompressed buffer (unless the element type is mappable and compression is disabled, in which case the sealed page would otherwise alias the page buffer). It also ensures that `CommitCluster` can vector-commit all sealed pages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14193:15,schedul,scheduler,15,https://root.cern,https://github.com/root-project/root/pull/14193,1,['schedul'],['scheduler']
Energy Efficiency,"[1965517:tpc-tracker]: ==1965517== by 0xF36DE4B: TBufferFile::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) (TBufferFile.cxx:3661); [1965517:tpc-tracker]: ==1965517== by 0xF376CEB: TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) (TBufferFile.cxx:3598); [1965517:tpc-tracker]: ==1965517== by 0xF3F4633: Streamer (TClass.h:614); [1965517:tpc-tracker]: ==1965517== by 0xF3F4633: TKey::ReadObjectAny(TClass const*) (TKey.cxx:1120); [1965517:tpc-tracker]: ==1965517== by 0xF3B82E3: TDirectoryFile::GetObjectChecked(char const*, TClass const*) (TDirectoryFile.cxx:1111); [1965517:tpc-tracker]: ==1965517== Address 0x153fbb80 is 0 bytes after a block of size 1,440 alloc'd; [1965517:tpc-tracker]: ==1965517== at 0x4868908: operator new(unsigned long) (vg_replace_malloc.c:483); [1965517:tpc-tracker]: ==1965517== by 0x60E5D1F: allocate (new_allocator.h:137); [1965517:tpc-tracker]: ==1965517== by 0x60E5D1F: allocate (allocator.h:188); [1965517:tpc-tracker]: ==1965517== by 0x60E5D1F: allocate (alloc_traits.h:464); [1965517:tpc-tracker]: ==1965517== by 0x60E5D1F: _M_allocate (stl_vector.h:378); [1965517:tpc-tracker]: ==1965517== by 0x60E5D1F: _M_allocate (stl_vector.h:375); [1965517:tpc-tracker]: ==1965517== by 0x60E5D1F: std::vector<o2::tpc::PadFlags, std::allocator<o2::tpc::PadFlags> >::_M_default_append(unsigned long) (vector.tcc:650); [1965517:tpc-tracker]: ==1965517== by 0xF3E5797: void TGenCollectionStreamer::ReadBufferVectorPrimitives<int>(TBuffer&, void*, TClass const*) (TGenCollectionStreamer.cxx:1176); [1965517:tpc-tracker]: ==1965517== by 0xF36EC7B: Streamer (TClass.h:614); [1965517:tpc-tracker]: ==1965517== by 0xF36EC7B: TBufferFile::ReadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) (TBufferFile.cxx:1616); [1965517:tpc-tracker]: ==1965517== by 0xF58C84B: int TStreamerInfo::ReadBuffer<char**>(TBuffer&, char** const&, TStreamerInfo::TCompInfo* const*, int, int, int, int, int) (TStreamerInfoReadBuffer.cxx:1297); [196",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16312:6479,allocate,allocate,6479,https://root.cern,https://github.com/root-project/root/issues/16312,1,['allocate'],['allocate']
Energy Efficiency,[CI] Add a resource lock to GPU tests to reduce contention,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16803:41,reduce,reduce,41,https://root.cern,https://github.com/root-project/root/pull/16803,1,['reduce'],['reduce']
Energy Efficiency,[CI] Build is green even if tests are failing,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12307:14,green,green,14,https://root.cern,https://github.com/root-project/root/issues/12307,1,['green'],['green']
Energy Efficiency,[DF] Adapt LinkDef to change in namespace for RRootDS,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5659:5,Adapt,Adapt,5,https://root.cern,https://github.com/root-project/root/pull/5659,1,['Adapt'],['Adapt']
Energy Efficiency,[DF] Always delete heap-allocated arrays passed to jitted code,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10063:24,allocate,allocated,24,https://root.cern,https://github.com/root-project/root/pull/10063,1,['allocate'],['allocated']
Energy Efficiency,[DF] Always delete heap-allocated arrays passed to jitted code (v6.26),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10064:24,allocate,allocated,24,https://root.cern,https://github.com/root-project/root/pull/10064,1,['allocate'],['allocated']
Energy Efficiency,[DF] Fix ROOT-9555: Compilation fails for Reduce on a bool column due to std::vector<bool>,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2373:42,Reduce,Reduce,42,https://root.cern,https://github.com/root-project/root/pull/2373,1,['Reduce'],['Reduce']
Energy Efficiency,[DF] Fix ROOT-9555: Compilation fails for Reduce on a bool column due to std::vector<bool> in v6.14,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2374:42,Reduce,Reduce,42,https://root.cern,https://github.com/root-project/root/pull/2374,1,['Reduce'],['Reduce']
Energy Efficiency,[DF] Improve RDisplay documentation and reduce size of its public interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2868:40,reduce,reduce,40,https://root.cern,https://github.com/root-project/root/pull/2868,1,['reduce'],['reduce']
Energy Efficiency,[DF] Lazily import numpy in distributed reduce step.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7769:40,reduce,reduce,40,https://root.cern,https://github.com/root-project/root/pull/7769,1,['reduce'],['reduce']
Energy Efficiency,[DF] Make sure the Dask scheduler has information about the workers,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9431:24,schedul,scheduler,24,https://root.cern,https://github.com/root-project/root/pull/9431,1,['schedul'],['scheduler']
Energy Efficiency,[DF] Reduce amount of jitting in dataframe_simple test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11502:5,Reduce,Reduce,5,https://root.cern,https://github.com/root-project/root/pull/11502,1,['Reduce'],['Reduce']
Energy Efficiency,[DF] Reduce amount of templates used for column readers,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6310:5,Reduce,Reduce,5,https://root.cern,https://github.com/root-project/root/pull/6310,1,['Reduce'],['Reduce']
Energy Efficiency,[DF] Reduce jitting times in large computation graphs,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7651:5,Reduce,Reduce,5,https://root.cern,https://github.com/root-project/root/pull/7651,1,['Reduce'],['Reduce']
Energy Efficiency,[DF] Reduce jitting times in large computation graphs (v6.24),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7795:5,Reduce,Reduce,5,https://root.cern,https://github.com/root-project/root/pull/7795,1,['Reduce'],['Reduce']
Energy Efficiency,"[DF] Reduce number of inclusions, match columns with stl regex",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3077:5,Reduce,Reduce,5,https://root.cern,https://github.com/root-project/root/pull/3077,1,['Reduce'],['Reduce']
Energy Efficiency,[DF] Reduce precision errors for `Mean` and `StdDev`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7395:5,Reduce,Reduce,5,https://root.cern,https://github.com/root-project/root/issues/7395,1,['Reduce'],['Reduce']
Energy Efficiency,[DF] Reduce runtimes of kahan tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11711:5,Reduce,Reduce,5,https://root.cern,https://github.com/root-project/root/pull/11711,1,['Reduce'],['Reduce']
Energy Efficiency,[DF] Slightly reduce Define jitting times,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5208:14,reduce,reduce,14,https://root.cern,https://github.com/root-project/root/pull/5208,1,['reduce'],['reduce']
Energy Efficiency,[GSOC][TMVA][SOFIE] Reduce ONNX Operators implemented with the corresponding unit tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11258:20,Reduce,Reduce,20,https://root.cern,https://github.com/root-project/root/pull/11258,1,['Reduce'],['Reduce']
Energy Efficiency,[Math] Reduce to the minimum the usage of R__LOAD_LIBRARY in tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1734:7,Reduce,Reduce,7,https://root.cern,https://github.com/root-project/root/pull/1734,1,['Reduce'],['Reduce']
Energy Efficiency,[Minuit2] Reduce boilerplate code by removing redundant overloads,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16443:10,Reduce,Reduce,10,https://root.cern,https://github.com/root-project/root/pull/16443,1,['Reduce'],['Reduce']
Energy Efficiency,[NFC] Better documentation of TDataFrame::Reduce,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1453:42,Reduce,Reduce,42,https://root.cern,https://github.com/root-project/root/pull/1453,1,['Reduce'],['Reduce']
Energy Efficiency,"[NFC][Doc][RDF] Add ""Efficient analysis in Python"" section",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5454:21,Efficient,Efficient,21,https://root.cern,https://github.com/root-project/root/pull/5454,1,['Efficient'],['Efficient']
Energy Efficiency,[PyROOT] Importing ROOT in JupyterLab reduces kernel performance,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7684:38,reduce,reduces,38,https://root.cern,https://github.com/root-project/root/issues/7684,1,['reduce'],['reduces']
Energy Efficiency,[PyROOT][7179] Reduce range of mapping __getitem__ to __call__,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7209:15,Reduce,Reduce,15,https://root.cern,https://github.com/root-project/root/pull/7209,1,['Reduce'],['Reduce']
Energy Efficiency,[RF] Adapt `RooWorkspace::factory` to take std::string directly,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10731:5,Adapt,Adapt,5,https://root.cern,https://github.com/root-project/root/pull/10731,1,['Adapt'],['Adapt']
Energy Efficiency,"[RF] Deprecate RooMinuit class (adapter between RooFit and minuit, got replaced by the more general RooMinimizer)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8609:32,adapt,adapter,32,https://root.cern,https://github.com/root-project/root/pull/8609,1,['adapt'],['adapter']
Energy Efficiency,[RF] Implement `reduce()` also for concrete RooAbsData classes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15444:16,reduce,reduce,16,https://root.cern,https://github.com/root-project/root/pull/15444,1,['reduce'],['reduce']
Energy Efficiency,[RF] Make `CutRange()` also consider unselected vars in `RooAbsData::reduce()`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11821:69,reduce,reduce,69,https://root.cern,https://github.com/root-project/root/pull/11821,1,['reduce'],['reduce']
Energy Efficiency,[RF] Reduce global statics,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3639:5,Reduce,Reduce,5,https://root.cern,https://github.com/root-project/root/pull/3639,1,['Reduce'],['Reduce']
Energy Efficiency,[RF] Reduce memory consumption of MemPoolForRooSets,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7954:5,Reduce,Reduce,5,https://root.cern,https://github.com/root-project/root/pull/7954,2,"['Reduce', 'consumption']","['Reduce', 'consumption']"
Energy Efficiency,[RF] Reduce verbosity of HistFactory.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3913:5,Reduce,Reduce,5,https://root.cern,https://github.com/root-project/root/pull/3913,1,['Reduce'],['Reduce']
Energy Efficiency,[RF] Reduce visibility of public function in RooAddPdf.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3511:5,Reduce,Reduce,5,https://root.cern,https://github.com/root-project/root/pull/3511,1,['Reduce'],['Reduce']
Energy Efficiency,[RF] Refactor RooAddHelpers for easier adaptation to code generation later,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12546:39,adapt,adaptation,39,https://root.cern,https://github.com/root-project/root/pull/12546,1,['adapt'],['adaptation']
Energy Efficiency,[RF] Remove deprecaded code scheduled for removal in 6.34 and other cleanups,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16320:28,schedul,scheduled,28,https://root.cern,https://github.com/root-project/root/pull/16320,1,['schedul'],['scheduled']
Energy Efficiency,[RF] Replace some manually-allocated C-style arrays with `std::vector`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11114:27,allocate,allocated,27,https://root.cern,https://github.com/root-project/root/pull/11114,1,['allocate'],['allocated']
Energy Efficiency,[RF] RooCurve: Reduce last x by relative value,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12808:15,Reduce,Reduce,15,https://root.cern,https://github.com/root-project/root/pull/12808,1,['Reduce'],['Reduce']
Energy Efficiency,[RF] RooDataSet columns added with addColumns method not copied correctly in reduce,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8787:77,reduce,reduce,77,https://root.cern,https://github.com/root-project/root/issues/8787,1,['reduce'],['reduce']
Energy Efficiency,[ROOT-10936] Adapt TMVA to support cuDNN 8,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6058:13,Adapt,Adapt,13,https://root.cern,https://github.com/root-project/root/pull/6058,1,['Adapt'],['Adapt']
Energy Efficiency,[TDF] Add Reduce to docs,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/358:10,Reduce,Reduce,10,https://root.cern,https://github.com/root-project/root/pull/358,1,['Reduce'],['Reduce']
Energy Efficiency,[TDF] Add convenience overload for Reduce.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/757:35,Reduce,Reduce,35,https://root.cern,https://github.com/root-project/root/pull/757,1,['Reduce'],['Reduce']
Energy Efficiency,[TDF] Remove ambiguous Reduce overload,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1473:23,Reduce,Reduce,23,https://root.cern,https://github.com/root-project/root/pull/1473,1,['Reduce'],['Reduce']
Energy Efficiency,"[TDF] Simplify logic, reduce instructions in column value reading",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1060:22,reduce,reduce,22,https://root.cern,https://github.com/root-project/root/pull/1060,1,['reduce'],['reduce']
Energy Efficiency,[TDF] add Reduce action,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/357:10,Reduce,Reduce,10,https://root.cern,https://github.com/root-project/root/pull/357,1,['Reduce'],['Reduce']
Energy Efficiency,[TMVA] Reduce work done in CV regression tutorial,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2525:7,Reduce,Reduce,7,https://root.cern,https://github.com/root-project/root/pull/2525,1,['Reduce'],['Reduce']
Energy Efficiency,[TMVA][CMake] Remove failing keras test from macos battery,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13765:51,battery,battery,51,https://root.cern,https://github.com/root-project/root/pull/13765,1,['battery'],['battery']
Energy Efficiency,[TTreeProcessorMT] Reduce the number of tasks generated,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8565:19,Reduce,Reduce,19,https://root.cern,https://github.com/root-project/root/pull/8565,1,['Reduce'],['Reduce']
Energy Efficiency,[Testing] Significantly reduce duration of legacy tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13762:24,reduce,reduce,24,https://root.cern,https://github.com/root-project/root/pull/13762,1,['reduce'],['reduce']
Energy Efficiency,[VecOps] Pre-allocate vectors of the appropriate size in Combinations,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9378:13,allocate,allocate,13,https://root.cern,https://github.com/root-project/root/pull/9378,1,['allocate'],['allocate']
Energy Efficiency,[WIP] Adapt ROOT::Fit::Fitter to work with templated gradient functions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/890:6,Adapt,Adapt,6,https://root.cern,https://github.com/root-project/root/pull/890,1,['Adapt'],['Adapt']
Energy Efficiency,[ci] Also publish test results for scheduled builds,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14961:35,schedul,scheduled,35,https://root.cern,https://github.com/root-project/root/pull/14961,1,['schedul'],['scheduled']
Energy Efficiency,[ci] Remove scheduled daily builds and move nightly builds after image build,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15456:12,schedul,scheduled,12,https://root.cern,https://github.com/root-project/root/pull/15456,1,['schedul'],['scheduled']
Energy Efficiency,[cling] Adapt the cling-demo to the new cling::Value interface.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12228:8,Adapt,Adapt,8,https://root.cern,https://github.com/root-project/root/pull/12228,1,['Adapt'],['Adapt']
Energy Efficiency,[cmake] Adapt to ZeroMQ 4.3.5 being now released,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14003:8,Adapt,Adapt,8,https://root.cern,https://github.com/root-project/root/pull/14003,1,['Adapt'],['Adapt']
Energy Efficiency,[cmake] Reduce the copy-paste boilerplate code in setting up gtest,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/687:8,Reduce,Reduce,8,https://root.cern,https://github.com/root-project/root/pull/687,1,['Reduce'],['Reduce']
Energy Efficiency,[cmake] Reduce the redundant dependencies to onepcm.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1188:8,Reduce,Reduce,8,https://root.cern,https://github.com/root-project/root/pull/1188,1,['Reduce'],['Reduce']
Energy Efficiency,[core] Reduce lock contention in TUrl::GetSpecialProtocols().,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6857:7,Reduce,Reduce,7,https://root.cern,https://github.com/root-project/root/pull/6857,1,['Reduce'],['Reduce']
Energy Efficiency,[core] Reduce symbol search only to when autoloading is enabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14287:7,Reduce,Reduce,7,https://root.cern,https://github.com/root-project/root/pull/14287,1,['Reduce'],['Reduce']
Energy Efficiency,[cxxmodules] Reduce amout of loaded libraries,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2009:13,Reduce,Reduce,13,https://root.cern,https://github.com/root-project/root/pull/2009,1,['Reduce'],['Reduce']
Energy Efficiency,[cxxmodules] Reduce duplications in SMatrix.pcm,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3006:13,Reduce,Reduce,13,https://root.cern,https://github.com/root-project/root/pull/3006,1,['Reduce'],['Reduce']
Energy Efficiency,[cxxmodules] Reduce extra deserializations.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1409:13,Reduce,Reduce,13,https://root.cern,https://github.com/root-project/root/pull/1409,1,['Reduce'],['Reduce']
Energy Efficiency,[cxxmodules] Reduce libc duplicate headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2827:13,Reduce,Reduce,13,https://root.cern,https://github.com/root-project/root/pull/2827,1,['Reduce'],['Reduce']
Energy Efficiency,[cxxmodules] Reduce pcm file duplications.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2503:13,Reduce,Reduce,13,https://root.cern,https://github.com/root-project/root/pull/2503,1,['Reduce'],['Reduce']
Energy Efficiency,[cxxmodules] Reduce pcm size by not embedding all used files,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2411:13,Reduce,Reduce,13,https://root.cern,https://github.com/root-project/root/pull/2411,1,['Reduce'],['Reduce']
Energy Efficiency,[cxxmodules] Reduce the amount of header duplications in the modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10498:13,Reduce,Reduce,13,https://root.cern,https://github.com/root-project/root/pull/10498,1,['Reduce'],['Reduce']
Energy Efficiency,[cxxmodules] Reduce the amount of header duplications in the modules. [v6.24],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10596:13,Reduce,Reduce,13,https://root.cern,https://github.com/root-project/root/pull/10596,1,['Reduce'],['Reduce']
Energy Efficiency,[cxxmodules] Reduce the amount of header duplications in the modules. [v6.26],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10591:13,Reduce,Reduce,13,https://root.cern,https://github.com/root-project/root/pull/10591,1,['Reduce'],['Reduce']
Energy Efficiency,[cxxmodules] Reduce the pcm duplicates.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2504:13,Reduce,Reduce,13,https://root.cern,https://github.com/root-project/root/pull/2504,1,['Reduce'],['Reduce']
Energy Efficiency,[df] Delete allocated node before throwing error,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15477:12,allocate,allocated,12,https://root.cern,https://github.com/root-project/root/pull/15477,1,['allocate'],['allocated']
Energy Efficiency,[df] Force only one RNTuple name in distributed scheduling,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14895:48,schedul,scheduling,48,https://root.cern,https://github.com/root-project/root/pull/14895,1,['schedul'],['scheduling']
Energy Efficiency,[hist] Reduce relative tolerance in an assert in test_tprofile2poly.cxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14107:7,Reduce,Reduce,7,https://root.cern,https://github.com/root-project/root/pull/14107,1,['Reduce'],['Reduce']
Energy Efficiency,[http] enables monitoring of TGeo objects in THttpServer,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4056:15,monitor,monitoring,15,https://root.cern,https://github.com/root-project/root/pull/4056,1,['monitor'],['monitoring']
Energy Efficiency,[mathcore] Delete obscure conditions in class for adaptive quadrature integration in multi-dimensions (AdaptiveIntegratorMultiDim),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11826:50,adapt,adaptive,50,https://root.cern,https://github.com/root-project/root/pull/11826,2,"['Adapt', 'adapt']","['AdaptiveIntegratorMultiDim', 'adaptive']"
Energy Efficiency,"[ntuple,daos] Adapt I/O backend to DAOSv2 API",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10720:14,Adapt,Adapt,14,https://root.cern,https://github.com/root-project/root/pull/10720,1,['Adapt'],['Adapt']
Energy Efficiency,[ntuple] Adaptive page sizes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16311:9,Adapt,Adaptive,9,https://root.cern,https://github.com/root-project/root/pull/16311,1,['Adapt'],['Adaptive']
Energy Efficiency,[ntuple] Improve RDF MT scheduling,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15952:24,schedul,scheduling,24,https://root.cern,https://github.com/root-project/root/pull/15952,1,['schedul'],['scheduling']
Energy Efficiency,[ntuple] Introduce an I/O scheduler,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5377:26,schedul,scheduler,26,https://root.cern,https://github.com/root-project/root/pull/5377,1,['schedul'],['scheduler']
Energy Efficiency,[ntuple] Reduce default maximum page size to 128 KiB,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16453:9,Reduce,Reduce,9,https://root.cern,https://github.com/root-project/root/pull/16453,1,['Reduce'],['Reduce']
Energy Efficiency,[ntuple] Reduce memory usage of `RPageSinkBuf`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16781:9,Reduce,Reduce,9,https://root.cern,https://github.com/root-project/root/pull/16781,1,['Reduce'],['Reduce']
Energy Efficiency,[ntuple] Several fixes to the I/O scheduler,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9096:34,schedul,scheduler,34,https://root.cern,https://github.com/root-project/root/pull/9096,1,['schedul'],['scheduler']
Energy Efficiency,[ntuple] reduce memory allocations in BindRawPtr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14731:9,reduce,reduce,9,https://root.cern,https://github.com/root-project/root/pull/14731,1,['reduce'],['reduce']
Energy Efficiency,[ntuple] reduce number of open files in RDF source,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15428:9,reduce,reduce,9,https://root.cern,https://github.com/root-project/root/pull/15428,1,['reduce'],['reduce']
Energy Efficiency,[pch][cxxmodules] D41416: Reduce deserializations template specializations,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1526:26,Reduce,Reduce,26,https://root.cern,https://github.com/root-project/root/pull/1526,1,['Reduce'],['Reduce']
Energy Efficiency,[rootcling] Reduce code duplication and make includes more explicit.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5196:12,Reduce,Reduce,12,https://root.cern,https://github.com/root-project/root/pull/5196,1,['Reduce'],['Reduce']
Energy Efficiency,[skip-CI][ci] Modify scheduled build time for old branches,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14992:21,schedul,scheduled,21,https://root.cern,https://github.com/root-project/root/pull/14992,1,['schedul'],['scheduled']
Energy Efficiency,[skip-ci] [DF] Lazily import numpy in distributed reduce step,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7771:50,reduce,reduce,50,https://root.cern,https://github.com/root-project/root/pull/7771,1,['reduce'],['reduce']
Energy Efficiency,[skip-ci] adapt to changes in TBB interfaces,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7059:10,adapt,adapt,10,https://root.cern,https://github.com/root-project/root/pull/7059,1,['adapt'],['adapt']
Energy Efficiency,"[skip-ci]; # This Pull request:. Adds a lot of changes to address; https://github.com/root-project/root/issues/12270; https://github.com/root-project/root/pull/12201#issuecomment-1417627970. ## Changes or fixes:. - Runs tests on CI (has to be done in the same job for now, at least on PR builds); - Disables use of OpenStack credentials in PR builds; - Loads OpenStack credentials from GitHub secrets on non-PR builds (i.e. valid secrets are no longer stored on runners); - Reduces verbosity in the config files; - Reduces permissions of the build workflow. It can now only read repository (when PR commenting is getting implemented it has to run in a separate workflow anyways); - Re-enables output buffering to improve performance, at the cost of stderr being redirected to stdout. Currently runs tests on **every** type of job, could look into ways to skip it under certain conditions. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12275:474,Reduce,Reduces,474,https://root.cern,https://github.com/root-project/root/pull/12275,2,['Reduce'],['Reduces']
Energy Efficiency,[skip-ci]; In notebook this script generates:; ```; Error in <TXMLEngine::ParseFile>: Unexpected end of xml file; ```; This patch deactivate the notebook generation as this error seems to be the last one preventing to have; the ref guide build green.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10483:244,green,green,244,https://root.cern,https://github.com/root-project/root/pull/10483,1,['green'],['green']
Energy Efficiency,[skip-ci][ci] Add scheduled builds for 6.32,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15126:18,schedul,scheduled,18,https://root.cern,https://github.com/root-project/root/pull/15126,1,['schedul'],['scheduled']
Energy Efficiency,[skip-ci][ci] New schedule for nightly builds,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15523:18,schedul,schedule,18,https://root.cern,https://github.com/root-project/root/pull/15523,1,['schedul'],['schedule']
Energy Efficiency,[tcling] Refactor code in separate routines and reduce include for modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3865:48,reduce,reduce,48,https://root.cern,https://github.com/root-project/root/pull/3865,1,['reduce'],['reduce']
Energy Efficiency,[tree] Reduce string allocations in TBranch*::GetFullName.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11255:7,Reduce,Reduce,7,https://root.cern,https://github.com/root-project/root/pull/11255,1,['Reduce'],['Reduce']
Energy Efficiency,"[tutorials] No need to heap-allocate TRandom, TDatimes; thanks, Maarten!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3660:28,allocate,allocate,28,https://root.cern,https://github.com/root-project/root/pull/3660,1,['allocate'],['allocate']
Energy Efficiency,[v6.28] Reduce usage of locks by TPluginHandler,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12923:8,Reduce,Reduce,8,https://root.cern,https://github.com/root-project/root/pull/12923,1,['Reduce'],['Reduce']
Energy Efficiency,[v628] Allocate TypesLoaded and DeclsLoaded lazily,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13641:7,Allocate,Allocate,7,https://root.cern,https://github.com/root-project/root/pull/13641,1,['Allocate'],['Allocate']
Energy Efficiency,"[webgui] Fix CEF handler, reduce debug output",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15521:26,reduce,reduce,26,https://root.cern,https://github.com/root-project/root/pull/15521,1,['reduce'],['reduce']
Energy Efficiency,"[webgui] Fix CEF handler, reduce debug output[6.32]",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15522:26,reduce,reduce,26,https://root.cern,https://github.com/root-project/root/pull/15522,1,['reduce'],['reduce']
Energy Efficiency,"]*[10]*[11]*[12]"");. f.SetParNames(""a"", ""b"", ""c"", ""d""); // works perfectly; g.SetParNames(""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"", ""k"", ""l"", ""m""); // error; ```. and also, if we assign names to all parameters using `TFormula::SetParName(Int_t, const char*)` and then call `TFormula::SetParNames()`, then it will only reset upto 11th parameter, parameters after that will have their assigned names. Same issues exists with `TFormula::SetParameters()`. #### Why do I think `TFormula::SetParNames()` and `TFormula::SetParameters()` are unintuitive . Consider this example:. ```c++; TFormula f(""f"", ""x*[0]*[1]*[2]*[3]"");; f.SetParName(3, ""lastParameter"");; // Parameters names: p0, p1, p2, lastParameter; f.SetParNames(""a"", ""b"");; // Parameters names: a, b, p2, p3; ```; User generally would not expect that `TFormula::SetParNames()` will change name of parameters that he/she did not specify, and will thus expect parameters names at the end of this snippet to be: `a, b, p2, lastParameter`. Same issue exists with `TFormula::SetParameters()`. Thus, I would like to modify `TFormula::SetParNames()` and `TFormula::SetParameters()` such that they do not reset the parameter names and values respectively. . ### Optional: share how it could be improved; <!--; If you already have an idea what we could improve, then please tell us.; -->; Both `TFormula::SetParNames()` and `TFormula::SetParameters()` can be improved by replacing current implementation by variadic template function, this will remove the constraint of having fix number of arguments. It will also reduce the code duplication in both of these functions. It is also trivial to disable the resetting of parameters to their default values and names using variadic template function. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; Root version: 6.25/01; Operating system: Ubuntu 20.04; How you obtained ROOT: built it from source",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7805:2443,reduce,reduce,2443,https://root.cern,https://github.com/root-project/root/issues/7805,1,['reduce'],['reduce']
Energy Efficiency,"__gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > > >, tbb::detail::d1::lambda_reduce_body<tbb::detail::d1::blocked_range<__gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > > >, double, ROOT::Internal::ParallelReduceHelper<double>(std::vector<double, std::allocator<double> > const&, std::function<double (double, double)> const&)::{lambda(tbb::detail::d1::blocked_range<__gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > > > const&, double)#1}, std::function<double (double, double)> >, tbb::detail::d1::auto_partitioner const>::execute(tbb::detail::d1::execution_data&)':; TThreadExecutor.cxx:(.text+0x1554): undefined reference to `tbb::detail::r1::allocate(tbb::detail::d1::small_object_pool*&, unsigned long, tbb::detail::d1::execution_data const&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x15fd): undefined reference to `tbb::detail::r1::allocate(tbb::detail::d1::small_object_pool*&, unsigned long, tbb::detail::d1::execution_data const&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x1635): undefined reference to `tbb::detail::r1::spawn(tbb::detail::d1::task&, tbb::detail::d1::task_group_context&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x178f): undefined reference to `tbb::detail::r1::deallocate(tbb::detail::d1::small_object_pool&, void*, unsigned long, tbb::detail::d1::execution_data const&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x1a47): undefined reference to `tbb::detail::r1::is_group_execution_cancelled(tbb::detail::d1::task_group_context&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x1a9c): undefined reference to `tbb::detail::r1::execution_slot(tbb::detail::d1::execution_data const*)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x1aad): undefined reference to `tbb::detail::r1::execution_slot(tbb::detail::d1::execution_data const*)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x1aca): undefined reference to `tbb::detail::r1::execution_slot(tbb::detail::d1",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11931:19630,allocate,allocate,19630,https://root.cern,https://github.com/root-project/root/issues/11931,1,['allocate'],['allocate']
Energy Efficiency,"_ptr<REntry>(new REntry(fModelId));; for (const auto &f : fFieldZero->GetSubFields()) {; - entry->AddValue(f->CreateValue());; + if (auto *collectionField = dynamic_cast<RCollectionField *>(f)) {; + entry->AddValue(f->BindValue(std::shared_ptr<void>(collectionField->fCollectionWriter->GetOffsetPtr(), [](void *) {})));; + } else {; + entry->AddValue(f->CreateValue());; + }; }; return entry;; }; ```; This makes the example work with a single non-default `REntry`, but highlights another problem: There is a 1:1 association of the `RCollectionNTupleWriter` to the `RCollectionField`, which prevents multiple `REntry`'s from working:; <details>; <summary>Full code example</summary>. ```c++; #include <ROOT/REntry.hxx>; #include <ROOT/RNTuple.hxx>; #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;; using ROOT::Experimental::RNTupleModel;; using ROOT::Experimental::RNTupleReader;; using ROOT::Experimental::RNTupleWriter;. static void write() {; auto particleModel = RNTupleModel::CreateBare();; particleModel->MakeField<float>(""energy"");. particleModel->Freeze();; auto particleEntry1 = particleModel->CreateEntry();; auto energy1 = particleEntry1->GetPtr<float>(""energy"");; auto particleEntry2 = particleModel->CreateEntry();; auto energy2 = particleEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();; auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");; auto entry1 = writer->CreateEntry();; auto entry2 = writer->CreateEntry();. *energy1 = 1.0;; particles->Fill(*particleEntry1);. *energy2 = 1.0;; particles->Fill(*particleEntry2);. *energy2 = 2.0;; particles->Fill(*particleEntry2);. *energy2 = 3.0;; particles->Fill(*particleEntry2);. *energy1 = 2.0;; particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;; particles->Fill(*particleEntry1);. writer->Fill(*entry1);; }. void collection_entry_multiple() {; write",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14642:4080,energy,energy,4080,https://root.cern,https://github.com/root-project/root/issues/14642,1,['energy'],['energy']
Energy Efficiency,_src/graf3d/eve7/glu/memalloc.h:41; 32: Returning; memory was released via 2nd parameter in /opt/root_src/graf3d/eve7/glu/sweep.c:280; 33: Returning; memory was released via 2nd parameter in /opt/root_src/graf3d/eve7/glu/sweep.c:316; 34: Execution continues on line 336 in /opt/root_src/graf3d/eve7/glu/sweep.c:317; 35: Returning; memory was released via 2nd parameter in /opt/root_src/graf3d/eve7/glu/sweep.c:1105; 36: Assuming 'eTopLeft' is equal to field 'Onext' in /opt/root_src/graf3d/eve7/glu/sweep.c:1112; 37: Taking true branch in /opt/root_src/graf3d/eve7/glu/sweep.c:1112; 38: Calling 'ConnectRightVertex' in /opt/root_src/graf3d/eve7/glu/sweep.c:1114; 39: Use of memory after it is freed in /opt/root_src/graf3d/eve7/glu/sweep.c:885; /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1168:25: warning: Potential leak of memory pointed to by 'sliceVal' [clang-analyzer-cplusplus.NewDeleteLeaks]; 1: Taking true branch in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1040; 2: Memory is allocated in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1043; 3: Assuming 'phiBin' is > 'nPhiBins' in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1046; 4: Loop condition is false. Execution jumps to the end of the function in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1046; 5: Potential leak of memory pointed to by 'sliceVal' in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1168; /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1168:25: warning: Potential leak of memory pointed to by 'sliceValRef' [clang-analyzer-cplusplus.NewDeleteLeaks]; 1: Taking true branch in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1040; 2: Memory is allocated in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1044; 3: Assuming 'phiBin' is > 'nPhiBins' in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1046; 4: Loop condition is false. Execution jumps to the end of the function in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1046; 5: Potential leak of memory pointed to by 'sliceValRef' in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1168; /opt/root_,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7531:30929,allocate,allocated,30929,https://root.cern,https://github.com/root-project/root/issues/7531,1,['allocate'],['allocated']
Energy Efficiency,_src/tree/tree/src/TBranchObject.cxx:208; 3: Taking false branch in /opt/root_src/tree/tree/src/TBranchObject.cxx:208; 4: Assuming 'nbranches' is not equal to 0 in /opt/root_src/tree/tree/src/TBranchObject.cxx:214; 5: Taking true branch in /opt/root_src/tree/tree/src/TBranchObject.cxx:214; 6: Assuming field 'fAddress' is equal to null in /opt/root_src/tree/tree/src/TBranchObject.cxx:215; 7: Taking true branch in /opt/root_src/tree/tree/src/TBranchObject.cxx:215; 8: Calling 'TBranchObject::SetupAddresses' in /opt/root_src/tree/tree/src/TBranchObject.cxx:216; 9: Field 'fAddress' is equal to null in /opt/root_src/tree/tree/src/TBranchObject.cxx:596; 10: Taking true branch in /opt/root_src/tree/tree/src/TBranchObject.cxx:596; 11: Taking true branch in /opt/root_src/tree/tree/src/TBranchObject.cxx:598; 12: Assuming 'cl' is non-null in /opt/root_src/tree/tree/src/TBranchObject.cxx:600; 13: Taking true branch in /opt/root_src/tree/tree/src/TBranchObject.cxx:600; 14: Memory is allocated in /opt/root_src/tree/tree/src/TBranchObject.cxx:601; 15: Potential leak of memory pointed to by 'voidobj' in /opt/root_src/tree/tree/src/TBranchObject.cxx:610; /opt/root_src/tree/tree/src/TBranchSTL.cxx:305:10: warning: Value stored to 'elBranch' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'elBranch' is never read in /opt/root_src/tree/tree/src/TBranchSTL.cxx:305; /opt/root_src/tree/tree/src/TBufferSQL.cxx:292:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/tree/tree/src/TBufferSQL.cxx:292; /opt/root_src/tree/tree/src/TBufferSQL,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7429:42942,allocate,allocated,42942,https://root.cern,https://github.com/root-project/root/issues/7429,1,['allocate'],['allocated']
Energy Efficiency,"_x86-64/GCC-Toolchain/v12.2.0-alice1-5/include/c++/12.2.0/bits/unique_ptr.h:191; #19 0x00007fa76afa4b02 in TCling::ProcessLineSynch (this=0x16e7bc0, line=0x16e8930 "".X /home/tdietel/alice/data/ole/./sortbug.C+"", error=0x7fff0771f04c); at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/metacling/src/TCling.cxx:3554; #20 0x00007fa7711777e7 in TApplication::ExecuteFile (file=<optimized out>, error=0x7fff0771f04c, keep=<optimized out>) at /jenkins/workspace/build-any-ib; /sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/base/src/TApplication.cxx:1661; #21 0x00007fa77172040c in TRint::ProcessLineNr (this=0x16b4f60, filestem=<optimized out>, line=0x7fff0771f060 "".x sortbug.C+"", error=0x7fff0771f04c) at /; jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:820; #22 0x00007fa771721fc6 in TRint::Run (this=this; entry=0x16b4f60, retrn=retrn; entry=false) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-04/core/rint/src/TRint.cxx:461; #23 0x00000000004011dd in main (argc=<optimized out>, argv=0x7fff077211e8) at /jenkins/workspace/build-any-ib/sw/20156516/1/SOURCES/ROOT/v6-28-04/v6-28-0; 4/main/src/rmain.cxx:84; ```. I assume the bug can be triggered with other data sets in plain ROOT. If needed, I could try to strip things down, but I don't know if this is the most efficient use of my time. ### ROOT version; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.28/04 https://root.cern |; | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jul 10 2023, 10:38:00 |; | From tags/v6-28-04@v6-28-04 |; | With c++ (GCC) 12.2.0 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```. ### Installation method. Built with alibuild. ### Operating system. CentOS 7, Ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13314:9872,efficient,efficient,9872,https://root.cern,https://github.com/root-project/root/issues/13314,1,['efficient'],['efficient']
Energy Efficiency,"`Nonzero` simply goes through the input vector and checks whether an element is zero or not. The time complexity is `O(N)`. `Intersect` goes through the vector `v1` and searches each element in the vector `v2`. The approach is sorting `v2` first and loop trivially over `v1`. The resulting time complexity is `O(N1*log(N2))`. A common use-case is shown below:. ```cpp; using namespace ROOT::VecOps;. // user data, e.g., in NanoAOD format; RVec<int> Muon_charge = {1, -1, 1};; RVec<float> Muon_pt = {20.0, 30.0, 10.0};; RVec<float> Muon_eta = {1.0, -2.0, 0.5};. // make first selection based on Muon charge; auto idx_mask = Nonzero(Muon_charge>0);. // get indices that sort Muon pt with descending values and pass the previous selection; auto idx_sorted = Reverse(Argsort(Muon_pt));; auto idx_selection = Intersect(idx_sorted, idx_mask);. // get Muon eta of positive Muons sorted by pt; auto values = Take(Muon_eta, idx_selection);; // Returns: { 1, 0.5 }; ```. This scenario is very common in processing of NanoAOD files. The naming matches the numpy API with [`numpy.nonzero`](https://docs.scipy.org/doc/numpy/reference/generated/numpy.nonzero.html) and [`numpy.intersect1d`](https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.intersect1d.html). **TODO:**. - [x] Write a tutorial when we agreed on the functionality.; - [x] Change the API for `Sorted` and `Reversed` to `Sort` and `Reverse` before merging this.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2620:599,charge,charge,599,https://root.cern,https://github.com/root-project/root/pull/2620,1,['charge'],['charge']
Energy Efficiency,"`RColumnReaderBase` is now a non-template class, and only its `Get`; method is templated over the type of the value to retrieve. This alternative design has two main advantages:; - it simplifies `RAction` greatly, removing the need for the special; `RTypeErasedColumnReader` type: now all column readers are type erased; in the sense that a `RColumnReaderBase*` does not contain the type of; the column that will be read; - it makes it possible to pass `RColumnReaderBase` through interfaces; that type-erase column types, which is important to better integrate; RDF and RDataSource: in the future, `RDataSource` implementations will; be able to return specialized column readers to RDF rather than raw; pointers to the datasource values. There should be no visible difference in event loop runtimes: a virtual; call to `SomeColumnReader<T>::Get` has been substituted with a direct,; inlined call to `RColumnReaderBase::Get<T>` which in turn executes a; virtual call to `SomeColumnReader<T>::GetImpl`. Compile times and jitting times should benefit from the reduced amount; of templates.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6310:1058,reduce,reduced,1058,https://root.cern,https://github.com/root-project/root/pull/6310,1,['reduce'],['reduced']
Energy Efficiency,"`RDF::Mean()` uses plain doubles. That's better than float, but far from stable. When you run with IMT, it's actually more accurate than without, because less numbers go into one accumulator, and each running sum remains smaller. So IMT/NoIMT can break your tests (even different TBB scheduling does). It was creating problems already in this simple test (note that the precision threshold for testing the mean is pretty bad, 1.E-2):; https://github.com/root-project/root/blob/7e1c74b764a60f811e898c3f6b55c0234b2b307d/roofit/RDataFrameHelpers/test/testActionHelpers.cxx#L28-L33. Maybe it's worth to increase the precision of; https://github.com/root-project/root/blob/7e1c74b764a60f811e898c3f6b55c0234b2b307d/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx#L917. with a Kahan or Neumaier sum. Same for StdDev, maybe go for Knuth's algo or the parallel weighted variance.; https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance. For Kahan, you can use; https://root.cern.ch/doc/master/classROOT_1_1Math_1_1KahanSum.html",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7395:284,schedul,scheduling,284,https://root.cern,https://github.com/root-project/root/issues/7395,1,['schedul'],['scheduling']
Energy Efficiency,"`RPageSinkBuf::CommitPage` currently allocates a sealed page buffer with the same size as the uncompressed page:; https://github.com/root-project/root/blob/226e4c00e5dc4b7aaf881bad810a0c78c8a14185/tree/ntuple/v7/src/RPageSinkBuf.cxx#L148. Instead the code should seal / compress the page into a temporary buffer, at which point the exact compressed size is known and the contents can be copied into an appropriately sized allocation. This saves (significant) memory depending on the compression factor, while the extra `memcpy` should not be visible compared to the compression itself.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16752:37,allocate,allocates,37,https://root.cern,https://github.com/root-project/root/issues/16752,1,['allocate'],['allocates']
Energy Efficiency,"`RPageSinkBuf` internally clones the model, which also allocates the column page buffers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16106:55,allocate,allocates,55,https://root.cern,https://github.com/root-project/root/pull/16106,1,['allocate'],['allocates']
Energy Efficiency,"`Reduce(F f, const T &redIdentity)`; and; `Reduce(F f, std::string_view column)`; can clash. The first `Reduce` overload has been removed. A separate PR to roottest fixes `test_reduce` by adapting to this change.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1473:1,Reduce,Reduce,1,https://root.cern,https://github.com/root-project/root/pull/1473,4,"['Reduce', 'adapt']","['Reduce', 'adapting']"
Energy Efficiency,"``; I guess the issue is coming from that . **This becomes a real issue as if you have a lot of histograms stored in different directories (which is the case of our analysis) then the hadding command is killed on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: ; [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue ; Compilation and execution (it takes ~10 min to create the file) ; ```bash; g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs); ./createFile.exe; ``` ; --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms ; ; * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**; Compilation and execution ; ```bash; g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs); ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root ; ```; NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files ; ; A comparison with ; ```; hadd -f myOtherFile.root myFile.root ; ``` . Gives (see screen shots below): ; * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during the whole processing of directories) ; * `fasterCustomHadd` the RAM used is only **`~205-210 MB`** and remains constant from the start to the end of the hadd. ; ; Many thanks in advance for the fix! . ### `hadd` RAM consumption ; ![hadd_RAM](https://github.com/root-project/root/assets/29270790/6096548f-23c8-4de8-9445-43db76f5d95b). ### `fasterCustomHadd` RAM consumption ; ![fasterCustomHadd_RAM](https://github.com/root-project/root/assets/29270790/7d45dbe5-5b46-40fc-a1e0-450d6df0c070). ### ROOT ver",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13531:1414,consumption,consumption,1414,https://root.cern,https://github.com/root-project/root/issues/13531,1,['consumption'],['consumption']
Energy Efficiency,```; /opt/root_src/core/foundation/src/TClassEdit.cxx:1466:13: warning: Value stored to 'mod_start_of_type' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'mod_start_of_type' is never read in /opt/root_src/core/foundation/src/TClassEdit.cxx:1466; ```; ```; /opt/root_src/core/meta/src/TClass.cxx:6687:1: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]; 1: Memory is allocated in /opt/root_src/core/meta/src/TClass.cxx:6686; 2: Potential memory leak in /opt/root_src/core/meta/src/TClass.cxx:6687; ```; ```; /opt/root_src/core/meta/src/TDataMember.cxx:681:13: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]; 1: Assuming field 'fOptions' is null in /opt/root_src/core/meta/src/TDataMember.cxx:816; 2: Taking true branch in /opt/root_src/core/meta/src/TDataMember.cxx:816; 3: Calling 'TDataMember::ExtractOptionsFromComment' in /opt/root_src/core/meta/src/TDataMember.cxx:817; 4: Field 'fOptions' is null in /opt/root_src/core/meta/src/TDataMember.cxx:607; 5: Taking false branch in /opt/root_src/core/meta/src/TDataMember.cxx:607; 6: Assuming 'optTitle' is non-null in /opt/root_src/core/meta/src/TDataMember.cxx:611; 7: Taking false branch in /opt/root_src/core/meta/src/TDataMember.cxx:611; 8: Assuming 'ptr1' is not equal to null in /opt/root_src/core/meta/src/TDataMember.cxx:644; 9: Taking false branch in /opt/root_src/core/meta/src/TDataMember.cxx:644; 10: Assuming 'ptr1' is not equal to null in /opt/root_src/core/meta/src/TDataMember.cxx:649; 11: Taking false branch in /opt/root_src/core/meta/src/TDataMember.cxx:649; 12: '?' condition is false in /opt/root_src/core/meta/src/TDataMember.cxx:666; 13: Assuming 'ptr1' is non-null in /opt/root_src/core/meta/src/TDataMember.cxx:667; 14: Taking true branch in /opt/root_src/core/meta/src/TDataMember.cxx:667; 15: Memory is allocated in /opt/root_src/core/meta/src/TDataMember.cxx:669; 16: Loop condition is true. Execution continues on line 666 in /opt/root_src/core/met,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7426:415,allocate,allocated,415,https://root.cern,https://github.com/root-project/root/issues/7426,1,['allocate'],['allocated']
Energy Efficiency,```; /opt/root_src/rootx/src/rootx.cxx:148:17: warning: Potential leak of memory pointed to by 'env' [clang-analyzer-cplusplus.NewDeleteLeaks]; 1: Calling 'SetRootSys' in /opt/root_src/rootx/src/rootx.cxx:297; 2: Assuming 'exepath' is non-null in /opt/root_src/rootx/src/rootx.cxx:133; 3: Left side of '&&' is true in /opt/root_src/rootx/src/rootx.cxx:133; 4: Assuming the condition is true in /opt/root_src/rootx/src/rootx.cxx:133; 5: Taking true branch in /opt/root_src/rootx/src/rootx.cxx:133; 6: Assuming 's' is non-null in /opt/root_src/rootx/src/rootx.cxx:138; 7: Taking true branch in /opt/root_src/rootx/src/rootx.cxx:138; 8: Assuming 's' is non-null in /opt/root_src/rootx/src/rootx.cxx:140; 9: Taking true branch in /opt/root_src/rootx/src/rootx.cxx:140; 10: Memory is allocated in /opt/root_src/rootx/src/rootx.cxx:143; 11: Potential leak of memory pointed to by 'env' in /opt/root_src/rootx/src/rootx.cxx:148; /opt/root_src/rootx/src/rootx.cxx:213:1: warning: Potential leak of memory pointed to by 'msg' [clang-analyzer-cplusplus.NewDeleteLeaks]; 1: Assuming the condition is false in /opt/root_src/rootx/src/rootx.cxx:299; 2: Taking false branch in /opt/root_src/rootx/src/rootx.cxx:299; 3: Assuming 'i' is >= 'argc' in /opt/root_src/rootx/src/rootx.cxx:313; 4: Loop condition is false. Execution continues on line 328 in /opt/root_src/rootx/src/rootx.cxx:313; 5: 'notebook' is <= 0 in /opt/root_src/rootx/src/rootx.cxx:328; 6: Taking false branch in /opt/root_src/rootx/src/rootx.cxx:328; 7: Assuming the condition is false in /opt/root_src/rootx/src/rootx.cxx:358; 8: Taking false branch in /opt/root_src/rootx/src/rootx.cxx:358; 9: 'batch' is false in /opt/root_src/rootx/src/rootx.cxx:362; 10: Taking false branch in /opt/root_src/rootx/src/rootx.cxx:362; 11: 'about' is false in /opt/root_src/rootx/src/rootx.cxx:364; 12: Taking false branch in /opt/root_src/rootx/src/rootx.cxx:364; 13: 'batch' is false in /opt/root_src/rootx/src/rootx.cxx:369; 14: Taking true branch in /opt/root,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7527:779,allocate,allocated,779,https://root.cern,https://github.com/root-project/root/issues/7527,1,['allocate'],['allocated']
Energy Efficiency,```; /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:469:33: warning: Use of zero-allocated memory [clang-analyzer-cplusplus.NewDelete]; 1: Assuming field 'fModelIsSetup' is true in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:400; 2: Taking false branch in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:400; 3: 'i' is < 'nTrainingEvents' in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:416; 4: Loop condition is true. Entering loop body in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:416; 5: Assuming 'j' is >= field 'fNVars' in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:419; 6: Loop condition is false. Execution continues on line 425 in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:419; 7: Assuming the condition is false in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:425; 8: Left side of '||' is false in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:425; 9: Assuming the condition is false in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:425; 10: Taking false branch in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:425; 11: Assuming the condition is true in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:431; 12: Taking true branch in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:431; 13: Assuming 'j' is >= field 'fNOutputs' in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:432; 14: Loop condition is false. Execution continues on line 439 in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:432; 15: Assuming 'i' is >= 'nTrainingEvents' in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:416; 16: Loop condition is false. Execution continues on line 442 in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:416; 17: Memory is allocated in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:460; 18: 'i' is < 'nValEvents' in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:464; 19: Loop condition is true. Entering loop body in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:464; 20: Assuming 'j' is < field 'fNVars' in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:468; 21: Loo,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:81,allocate,allocated,81,https://root.cern,https://github.com/root-project/root/issues/7526,1,['allocate'],['allocated']
Energy Efficiency,"`from ROOT import *` leads to a segmentation violation when used with Python 3.6. One could try fixing it instead of disabling it but the code which is used to install the lookup handler in the module `RootModule::SetRootLazyLookup` depends on internal CPython implementation details of the dict class which are not part of the public API. As a consequence keeping this alive will lead to very; fragile code, require continuous effort to adapt to internal changes and cause a lot of #ifdef handling. (as a matter of fact, Python 3.7 would probably already require new changes to this code already). . Also there's a statement in the bug report that `from ROOT import *` is broken in Python 3 so I don't understand why it's not disabled as it will only confuse users: https://sft.its.cern.ch/jira/browse/ROOT-8931. As such I would propose to instead have a clear error message that `from ROOT import *` does not work. This pr adds an `ImportError` which is easy to handle but cannot be just ignored by the user.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/825:438,adapt,adapt,438,https://root.cern,https://github.com/root-project/root/pull/825,1,['adapt'],['adapt']
Energy Efficiency,"`std::make_unique<unsigned char[]>()` has the side effect of zero- initializing the allocated buffer. In the replaced cases, all bytes in the buffer are overwritten after the allocation. Overhead of this initialization has been measured to be around 5-7% in a tight loop that allocates and uses 100k 64KiB buffers. One occurrence in [`UnsealPage()`](https://github.com/root-project/root/blob/master/tree/ntuple/v7/src/RPageStorage.cxx#L153) is not changed by this PR, as that case is addressed in PR #13208. This commit uses `std::unique_ptr<unsigned char[]>(new unsigned char[N])` instead for the cases in which that overhead matters. C++20 offers [`std::make_unique_for_overwrite<T>()`](https://en.cppreference.com/w/cpp/memory/unique_ptr/make_unique), which might be used in the future instead. ## Checklist:; - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13214:84,allocate,allocated,84,https://root.cern,https://github.com/root-project/root/pull/13214,2,['allocate'],"['allocated', 'allocates']"
Energy Efficiency,"a/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=t",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462:3889,green,greenc,3889,https://root.cern,https://github.com/root-project/root/pull/5462,1,['green'],['greenc']
Energy Efficiency,"aSet sometimes causes a merge error which is difficult to avoid.; Caused by RooMCStudy::_fitParData and RooAbsMCStudyModule data being different sizes. ### Expected behavior; RooMCStudy and RooAbsMCStudyModule data merging correctly,; OR; A way to consistently make the datasets the same size. ### To Reproduce; Run included macro. ```. #include ""RooRealVar.h""; #include ""RooGaussian.h""; #include ""RooConstVar.h""; #include ""RooAddPdf.h""; #include ""RooMCStudy.h""; #include ""RooFFTConvPdf.h""; #include ""RooArgusBG.h""; #include ""RooDLLSignificanceMCSModule.h"". using namespace RooFit;; const double xmin = 4.3, xmax = 4.55, bratio = 0.3, m0 = 4.482;; const int nevents = 100;. void min_mcsign_error() {; 	RooRealVar x(""mresp"", ""x"", 4.3, 4.55);. 	// signal; 	RooRealVar mean_res(""#mean_{gauss}"", ""mean_res"", 4.47);; 	RooRealVar sigma_res(""#sigma_{gauss}"", ""sigma_res"", 0.05);; 	RooGaussian sig(""gs_res"", ""gs_res"", x, mean_res, sigma_res);. 	// background; 	RooRealVar argpar(""shape"", ""argus shape parameter"", -7);; 	RooRealVar power(""power"", ""argus power parameter"", 0.75);; 	RooArgusBG bkg(""bkg"", Form(""Background ARGUS, m_{0} = %.3f"", m0), x, RooConst(m0), argpar, power);. 	// generating distribution; 	RooRealVar nsig(""nsig"", ""signal number"", bratio);; 	RooRealVar nbg(""nbg"", ""bg number"", 1.-bratio); ; 	RooAddPdf mcdist(""distribution"", ""BW+a"", RooArgList(sig, bkg), RooArgList(nsig, nbg));. 	// signal used in model; 	RooRealVar fitmean_res(""#mean_{gauss}"", ""mean_res"", 4.2, 4., 5.);; 	RooRealVar fitsigma_res(""#sigma_{gauss}"", ""sigma_res"", 0.1, 0., 1.);; 	RooGaussian fitsig(""gs_res"", ""gs_res"", x, fitmean_res, fitsigma_res);; 	; 	// background used in model; 	RooRealVar fitargpar(""shape"", ""fit argus shape parameter"", -6.5, -8, -6);; 	RooRealVar fitpower(""power"", ""fit argus power parameter"", 0.5, 0, 1);; 	RooArgusBG fitbkg(""fitbkg"", ""Fit Background ARGUS"", x, RooConst(m0), fitargpar, fitpower);; 	RooRealVar fitnsig(""nsig"", ""signal number"", 0.6 * nevents, 0, 1.2 * nevents);; 	RooRealVar fitnb",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6949:1221,power,power,1221,https://root.cern,https://github.com/root-project/root/issues/6949,3,['power'],['power']
Energy Efficiency,aSetInfo.cxx:485; 6: Taking true branch in /opt/root_src/tmva/tmva/src/DataSetInfo.cxx:485; 7: Called C++ object pointer is null in /opt/root_src/tmva/tmva/src/DataSetInfo.cxx:487; /opt/root_src/tmva/tmva/src/DataSetManager.cxx:91:11: warning: Forming reference to null pointer [clang-analyzer-core.NonNullParamChecker]; 1: Assuming 'dsi' is non-null in /opt/root_src/tmva/tmva/src/DataSetManager.cxx:86; 2: Taking false branch in /opt/root_src/tmva/tmva/src/DataSetManager.cxx:86; 3: Assuming field 'fDataInput' is null in /opt/root_src/tmva/tmva/src/DataSetManager.cxx:87; 4: Taking true branch in /opt/root_src/tmva/tmva/src/DataSetManager.cxx:87; 5: Assuming field 'fDatasetFactory' is non-null in /opt/root_src/tmva/tmva/src/DataSetManager.cxx:90; 6: Taking false branch in /opt/root_src/tmva/tmva/src/DataSetManager.cxx:90; 7: Forming reference to null pointer in /opt/root_src/tmva/tmva/src/DataSetManager.cxx:91; /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1558:29: warning: Use of zero-allocated memory [clang-analyzer-cplusplus.NewDelete]; 1: 'ivar' is <= field 'fNvars' in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1383; 2: Loop condition is true. Entering loop body in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1383; 3: Assuming 'ivar' is > field 'fNvars' in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1383; 4: Loop condition is false. Execution continues on line 1388 in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1383; 5: Assuming field 'fRandomisedTree' is false in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1401; 6: Taking false branch in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1401; 7: Loop condition is false. Execution continues on line 1412 in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1406; 8: Assuming field 'fUseFisherCuts' is false in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1416; 9: Taking false branch in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1416; 10: Field 'fUseFisherCuts' is false in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1475; 1,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:35048,allocate,allocated,35048,https://root.cern,https://github.com/root-project/root/issues/7526,1,['allocate'],['allocated']
Energy Efficiency,"ace */; public:; Position(float x, float y, float z);; // get Cartesian coordinates; float x();; float y();; float z();; // get spherical coordinates; float r();; float phi();; float theta();; // get pseudorapidity; float eta();; };. class Hit : public Position { /* localized detector signal */; public:; Hit(float energy, float x, float y, float z);; // get energy and transverse energy; float e();; float et();; };; ```. * Now, consider 3 stages of evolution for Position:. 1. Simplest implementation is to have Cartesian coordinates as private attributes;. 2. The users find that they most often use radius and azimuth, hence decide to store spherical coordinates instead of (x,y,z);. 3. Actually, colliders use eta more often than theta, so that the internal state is now given by (r, phi, eta). * In parallel and independently, Hit also evolves:. a. Simplest implementation is to have only the energy as private member;. b. Because the number of requests for the transverse energy is very high, the users want to optimize the speed by keeping Et as private member;. c. Well, it happens that disk space is short and e() is rarely called, so that it makes sense to reduce the size of the Hit class by dropping the energy member and computing the energy just when calling the method e(). They also found that the detector parameters used to store data in version b are wrong, so that one needs to scale the energy by 1.3 only for version b (a and c are correct). Could you please provide a working example in which data are saved and fetched with different combinations of (1, 2, 3)x(a, b, c) (at least with 1a, 2b, 3c)?. * The next step is to consider collections of objects:. i) define. ```cpp; class Track { /* particle trajectory */. private:; std::vector< Hit > m_hits;. };; ```. ii) Because the crazy developers of Hit decided to make such class variable size, one needs to store a vector of pointers instead of objects:. ```cpp; class Track { /* particle trajectory */. private:; std::vecto",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14540:1239,energy,energy,1239,https://root.cern,https://github.com/root-project/root/issues/14540,1,['energy'],['energy']
Energy Efficiency,all edges; e4555770c7 [tmva][sofie-gnn] Add support for LayerNormalization and registering additional functions; b6ac312508 [tmva][sofie-gnn] Test LHCb toy model with SOFIE-GNN; 5455f90c3a [tmva][sofie-gnn] Python in-memory parse function and tests; d925d6a805 [tmva][sofie-gnn] Introducing RModel_GraphIndependent; 2df806aa32 [tmva][sofie-gnn] Introducing RFunctions for SOFIE-GNN; 1ca9b4c240 [tmva][sofie-gnn] Introducing SOFIE-GNN; 6cb0d0a957 [TMVA] Don't use the same file name (`TMVA.root`) everywhere (#13576); 4fe2f6ef61 [pymva] Refactor TestRModelParserPyTorch to use RSofieReader; e53fcb7b6a [tmva][sofie] Fix formattting in RModel; f93775a9dc [tmva][sofie] Add options to append generated C++ code and weights; 4f0450b46e [tmva] fix bug in reshape operator when it is used as the first operator of the model; 8fa423de1a [TMVA/SOFIE] Save weights in ROOT binary files (#13423); 91d7dc9cee [tmva] use SetDirectory(nullptr); 34c4a497c5 [tmva] reduce usage of `Form` method; df8ab656e3 [tmvagui] avoid usage of Form function; 5bf591928a [tmva] avoid Form usage in tests; a18373ec99 [tmva] fix wrong Form usage in remaining classes; c251183d62 [tmva] reduce usage of Form; a50b03c9b7 [tmva] fix multiple places where Form is wrongly used twice is same call; 20fa3a3b4d [tmva] fix wrong Form usage is several next classes; 9eba38ba7a [tmva] fix wrong usage of Form in several classes; 9b3e9dc4e0 [tmva] replace Form by TString::Format in several classes; a6c9608215 [tmva] avoid Form usage in Classification.cxx; 50bd755c37 [tmva] fix Form usage in MethodTMlpANN; befd36fdb1 Fix yet another assertion failure on Windows; fb94e0b032 [tmva] Fix RTensor::ExpandDims(); 99378cfba9 Fix Lenght typos (#13281); 8786fa4392 Added cpp files for RBatchGenerator; 3f55b20888 feat: added tutorial links; c432106115 feat: include link for sofie onnx parser; cf5449bd63 fix: email id for communication; 4f8a5972df docs: Update SOFIE documentation; cdb4a81f87 Error function implemented successfully with the corr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13783:2245,reduce,reduce,2245,https://root.cern,https://github.com/root-project/root/pull/13783,2,['reduce'],['reduce']
Energy Efficiency,"already been compiled and loaded; Info in <ACLiC>: it will be regenerated and reloaded!; Info in <TUnixSystem::ACLiC>: creating shared library /home/blue/Scratchpad/df/optimized_template_helper/generatedcode_cpp.so; In module 'ROOTDataFrame':; /home/blue/miniconda3/envs/cern-root/include/ROOT/RResultPtr.hxx:99:73: error: no member named 'value' in 'ROOT::TypeTraits::HasBeginAndEnd<int>'; template <typename V, bool hasBeginEnd = TTraits::HasBeginAndEnd<V>::value>; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^; /home/blue/miniconda3/envs/cern-root/include/ROOT/RResultPtr.hxx:180:13: note: in instantiation of default argument for 'RIterationHelper<int>' required here; typename RIterationHelper<T>::Iterator_t begin(); ^~~~~~~~~~~~~~~~~~~; ./generatedcode.cpp:5:29: note: in instantiation of template class 'ROOT::RDF::RResultPtr<int>' requested here; ROOT::RDF::RResultPtr<int> ptr;; ^; In module 'ROOTDataFrame':; /home/blue/miniconda3/envs/cern-root/include/ROOT/RResultPtr.hxx:99:73: error: no member named 'value' in 'ROOT::TypeTraits::HasBeginAndEnd<int>'; template <typename V, bool hasBeginEnd = TTraits::HasBeginAndEnd<V>::value>; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^; /home/blue/miniconda3/envs/cern-root/include/ROOT/RResultPtr.hxx:189:13: note: in instantiation of default argument for 'RIterationHelper<int>' required here; typename RIterationHelper<T>::Iterator_t end(); ^~~~~~~~~~~~~~~~~~~; ./generatedcode.cpp:5:29: note: in instantiation of template class 'ROOT::RDF::RResultPtr<int>' requested here; ROOT::RDF::RResultPtr<int> ptr;; ^; TInterpreter::TCling::RegisterModule:0: RuntimeWarning: Problems declaring payload for module generatedcode_cpp_ACLiC_dict.; ```. I could not reduce the repro further. I am not sure whether this is a scenario that is supposed to work, but I _think_ so because making minor, apparently harmless changes to the repro fixes it (e.g. removing the parameter of `Foo` or deleting the first line of its body). Feel free to close if such a usecase is simply not supported.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7199:2559,reduce,reduce,2559,https://root.cern,https://github.com/root-project/root/issues/7199,1,['reduce'],['reduce']
Energy Efficiency,alse branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:2881; 44: Assuming 'len' is not equal to 0 in /opt/root_src/net/auth/src/TAuthenticate.cxx:2884; 45: Taking false branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:2884; 46: Assuming the condition is false in /opt/root_src/net/auth/src/TAuthenticate.cxx:2887; 47: Taking false branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:2887; 48: Assuming the condition is false in /opt/root_src/net/auth/src/TAuthenticate.cxx:2891; 49: Taking false branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:2891; 50: 'key' is equal to 0 in /opt/root_src/net/auth/src/TAuthenticate.cxx:2893; 51: Taking true branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:2893; 52: 'dec' is equal to 1 in /opt/root_src/net/auth/src/TAuthenticate.cxx:2894; 53: Taking true branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:2894; 54: Memory is allocated in /opt/root_src/net/auth/src/TAuthenticate.cxx:2903; 55: Returned allocated memory via 4th parameter in /opt/root_src/net/auth/src/TAuthenticate.cxx:1615; 56: Taking false branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:1615; 57: Assuming 'slen' is 0 in /opt/root_src/net/auth/src/TAuthenticate.cxx:1622; 58: Taking false branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:1622; 59: Potential leak of memory pointed to by 'tmpsalt' in /opt/root_src/net/auth/src/TAuthenticate.cxx:1648; /opt/root_src/net/auth/src/TAuthenticate.cxx:2925:10: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Assuming the condition is false in /opt/root_src/net/auth/src/TAuthenticate.cxx:4153; 2: Taking false branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:4153; 3: Assuming 'kind' is equal to kROOTD_RSAKEY in /opt/root_src/net/auth/src/TAuthenticate.cxx:4162; 4: Taking true branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:4162; 5: Assuming the condition is true in /opt/root_src/net/auth/src/TAuthenticate.cxx:4164; 6: Ta,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:8326,allocate,allocated,8326,https://root.cern,https://github.com/root-project/root/issues/7528,1,['allocate'],['allocated']
Energy Efficiency,alse branch in /opt/root_src/tree/tree/src/TTreeCacheUnzip.cxx:553; 39: Assuming the condition is false in /opt/root_src/tree/tree/src/TTreeCacheUnzip.cxx:555; 40: Taking false branch in /opt/root_src/tree/tree/src/TTreeCacheUnzip.cxx:555; 41: Assuming 'readbuf' is > 0 in /opt/root_src/tree/tree/src/TTreeCacheUnzip.cxx:563; 42: Taking false branch in /opt/root_src/tree/tree/src/TTreeCacheUnzip.cxx:563; 43: Assuming the condition is false in /opt/root_src/tree/tree/src/TTreeCacheUnzip.cxx:571; 44: '?' condition is false in /opt/root_src/tree/tree/src/TTreeCacheUnzip.cxx:571; 45: Assuming the condition is false in /opt/root_src/tree/tree/src/TTreeCacheUnzip.cxx:576; 46: Taking false branch in /opt/root_src/tree/tree/src/TTreeCacheUnzip.cxx:576; 47: Calling 'TTreeCacheUnzip::UnzipBuffer' in /opt/root_src/tree/tree/src/TTreeCacheUnzip.cxx:587; 48: Taking true branch in /opt/root_src/tree/tree/src/TTreeCacheUnzip.cxx:860; 49: Assuming the condition is false in /opt/root_src/tree/tree/src/TTreeCacheUnzip.cxx:864; 50: Left side of '&&' is false in /opt/root_src/tree/tree/src/TTreeCacheUnzip.cxx:864; 51: Memory is allocated in /opt/root_src/tree/tree/src/TTreeCacheUnzip.cxx:870; 52: Assuming the condition is false in /opt/root_src/tree/tree/src/TTreeCacheUnzip.cxx:879; 53: Left side of '&&' is false in /opt/root_src/tree/tree/src/TTreeCacheUnzip.cxx:880; 54: Left side of '||' is false in /opt/root_src/tree/tree/src/TTreeCacheUnzip.cxx:883; 55: 'oldCase' is false in /opt/root_src/tree/tree/src/TTreeCacheUnzip.cxx:883; 56: Taking false branch in /opt/root_src/tree/tree/src/TTreeCacheUnzip.cxx:883; 57: Returned allocated memory via 1st parameter in /opt/root_src/tree/tree/src/TTreeCacheUnzip.cxx:587; 58: Assuming 'loclen' is <= 0 in /opt/root_src/tree/tree/src/TTreeCacheUnzip.cxx:588; 59: Left side of '&&' is false in /opt/root_src/tree/tree/src/TTreeCacheUnzip.cxx:588; 60: Potential leak of memory pointed to by 'ptr' in /opt/root_src/tree/tree/src/TTreeCacheUnzip.cxx:597; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7429:78378,allocate,allocated,78378,https://root.cern,https://github.com/root-project/root/issues/7429,2,['allocate'],['allocated']
Energy Efficiency,alse in /opt/root_src/graf2d/x11/src/Rotated.cxx:1010; 69: Taking false branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:1010; 70: Field 'fXimage' is not equal to null in /opt/root_src/graf2d/x11/src/Rotated.cxx:1014; 71: Taking false branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:1014; 72: Assuming 'angle' is equal to 0 in /opt/root_src/graf2d/x11/src/Rotated.cxx:1031; 73: Left side of '||' is true in /opt/root_src/graf2d/x11/src/Rotated.cxx:1031; 74: 'imageIn' is non-null in /opt/root_src/graf2d/x11/src/Rotated.cxx:1058; 75: Taking true branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:1058; 76: Assuming 'j' is >= field 'fRowsOut' in /opt/root_src/graf2d/x11/src/Rotated.cxx:1059; 77: Loop condition is false. Execution continues on line 1084 in /opt/root_src/graf2d/x11/src/Rotated.cxx:1059; 78: Assuming the condition is false in /opt/root_src/graf2d/x11/src/Rotated.cxx:1087; 79: Taking false branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:1087; 80: Returned allocated memory in /opt/root_src/graf2d/x11/src/Rotated.cxx:746; 81: 'item' is non-null in /opt/root_src/graf2d/x11/src/Rotated.cxx:747; 82: Taking false branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:747; 83: 'font_name' is equal to null in /opt/root_src/graf2d/x11/src/Rotated.cxx:754; 84: Taking false branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:754; 85: 'font_name' is null in /opt/root_src/graf2d/x11/src/Rotated.cxx:771; 86: Taking false branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:771; 87: Returned allocated memory in /opt/root_src/graf2d/x11/src/Rotated.cxx:366; 88: 'item' is not equal to null in /opt/root_src/graf2d/x11/src/Rotated.cxx:367; 89: Taking false branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:367; 90: 'align' is not equal to TLEFT in /opt/root_src/graf2d/x11/src/Rotated.cxx:378; 91: Left side of '||' is false in /opt/root_src/graf2d/x11/src/Rotated.cxx:378; 92: 'align' is not equal to TCENTRE in /opt/root_src/graf2d/x11/src/Rotated.cxx:378; 93: Left side of '||' is,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7432:88383,allocate,allocated,88383,https://root.cern,https://github.com/root-project/root/issues/7432,1,['allocate'],['allocated']
Energy Efficiency,and adapt the size of the block for TBufferMergerFile,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3306:4,adapt,adapt,4,https://root.cern,https://github.com/root-project/root/pull/3306,1,['adapt'],['adapt']
Energy Efficiency,"ang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/inte",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462:3276,green,greenc,3276,https://root.cern,https://github.com/root-project/root/pull/5462,1,['green'],['greenc']
Energy Efficiency,ap' in /opt/root_src/core/base/inc/TObject.h:265; 6: Calling 'TStorage::FilledByObjectAlloc' in /opt/root_src/core/base/inc/TStorage.h:132; 7: The left operand of '==' is a garbage value in /opt/root_src/core/base/inc/TStorage.h:119; /opt/root_src/core/base/inc/TString.h:242:67: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]; 1: Calling 'TString::FormImp' in /opt/root_src/core/base/src/TString.cxx:2336; 2: Calling 'TString::Clobber' in /opt/root_src/core/base/src/TString.cxx:2266; 3: Assuming the condition is false in /opt/root_src/core/base/src/TString.cxx:1206; 4: Taking false branch in /opt/root_src/core/base/src/TString.cxx:1206; 5: Assuming 'nc' is >= kMinCap in /opt/root_src/core/base/src/TString.cxx:1211; 6: Taking false branch in /opt/root_src/core/base/src/TString.cxx:1211; 7: Assuming the condition is true in /opt/root_src/core/base/src/TString.cxx:1217; 8: Taking true branch in /opt/root_src/core/base/src/TString.cxx:1217; 9: Memory is allocated in /opt/root_src/core/base/src/TString.cxx:1218; 10: Returned allocated memory in /opt/root_src/core/base/src/TString.cxx:2266; 11: Assuming the condition is true in /opt/root_src/core/base/src/TString.cxx:2276; 12: Left side of '||' is true in /opt/root_src/core/base/src/TString.cxx:2276; 13: Taking true branch in /opt/root_src/core/base/src/TString.cxx:2277; 14: Calling 'TString::Clobber' in /opt/root_src/core/base/src/TString.cxx:2281; 15: Assuming the condition is false in /opt/root_src/core/base/src/TString.cxx:1206; 16: Taking false branch in /opt/root_src/core/base/src/TString.cxx:1206; 17: Assuming 'nc' is >= kMinCap in /opt/root_src/core/base/src/TString.cxx:1211; 18: Taking false branch in /opt/root_src/core/base/src/TString.cxx:1211; 19: Assuming the condition is true in /opt/root_src/core/base/src/TString.cxx:1217; 20: Taking true branch in /opt/root_src/core/base/src/TString.cxx:1217; 21: Calling 'TString::SetLongPointer' in /opt/root_src/core/base/src/TString.cxx:1221; 22: P,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7412:90919,allocate,allocated,90919,https://root.cern,https://github.com/root-project/root/issues/7412,1,['allocate'],['allocated']
Energy Efficiency,"as it turnes out the `...class.C` files generated by the TMVA MLP are not thread safe (`fWeights` is a constant array of contant pointers to beginnings of double arrays, and the contents therein vary at runtime inside the GetMvaValue__ method). So the quick hack here is to replace the class member of dynamically allocated arrays by fixed sized arrays in the function scope. # QUASICODE OLD. ```; class mlp {; private:; double *fweights[3]; mlp() {; fweights[0] = new double[5];; fweights[1] = new double[10];; fweights[2] = new double[1];; }; ~mlp() {; delete fweights[0];; delete fweights[1];; delete fweights[2];; }; getmvavalue( std::vector<double> input) const {; fweights[0] = input;; fweights[1] = some_function(fweights[0]);; fweights[2] = some_other_function(fweights[1]);; return fweights[2][0];; }; ```. # QUASICODE NEW. ```; class mlp {; private:; mlp() {; }; ~mlp() {; }; getmvavalue( std::vector<double> input) const {. double fweights0[5];; double fweights1[10];; double fweights2[1];; fweights0 = input;; fweights1 = some_function(fweights0);; fweights2 = some_other_function(fweights1);; return fweights2[0];; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/572:314,allocate,allocated,314,https://root.cern,https://github.com/root-project/root/pull/572,1,['allocate'],['allocated']
Energy Efficiency,atrix/src/TMatrixT.cxx:145; 12: Assuming 'gMatrixCheck' is 0 in /opt/root_src/math/matrix/src/TMatrixT.cxx:1735; 13: Left side of '&&' is false in /opt/root_src/math/matrix/src/TMatrixT.cxx:1735; 14: Assuming the condition is true in /opt/root_src/math/matrix/src/TMatrixT.cxx:1740; 15: Taking true branch in /opt/root_src/math/matrix/src/TMatrixT.cxx:1740; 16: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/math/matrix/src/TMatrixT.cxx:1742; /opt/root_src/math/matrix/src/TMatrixT.cxx:1761:7: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Taking false branch in /opt/root_src/math/matrix/src/TMatrixT.cxx:97; 2: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:120; 3: Loop condition is false. Exiting loop in /opt/root_src/math/matrix/src/TMatrixT.cxx:97; 4: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:119; 5: Calling 'TMatrixT::Allocate' in /opt/root_src/math/matrix/src/TMatrixT.cxx:98; 6: Null pointer value stored to field 'fElements' in /opt/root_src/math/matrix/src/TMatrixT.cxx:472; 7: Assuming 'no_rows' is < 0 in /opt/root_src/math/matrix/src/TMatrixT.cxx:479; 8: Left side of '||' is true in /opt/root_src/math/matrix/src/TMatrixT.cxx:479; 9: Returning from 'TMatrixT::Allocate' in /opt/root_src/math/matrix/src/TMatrixT.cxx:98; 10: Calling 'TMatrixT::operator=' in /opt/root_src/math/matrix/src/TMatrixT.cxx:99; 11: Assuming 'gMatrixCheck' is 0 in /opt/root_src/math/matrix/src/TMatrixT.cxx:1754; 12: Left side of '&&' is false in /opt/root_src/math/matrix/src/TMatrixT.cxx:1754; 13: Assuming the condition is true in /opt/root_src/math/matrix/src/TMatrixT.cxx:1759; 14: Taking true branch in /opt/root_src/math/matrix/src/TMatrixT.cxx:1759; 15: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/math/matrix/src/TMatrixT.cxx:1761; /opt/root_src/math/matrix/src/TMatrixT.cxx:1782:7: warning: Null pointer pa,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7458:136022,Allocate,Allocate,136022,https://root.cern,https://github.com/root-project/root/issues/7458,1,['Allocate'],['Allocate']
Energy Efficiency,"bFile::HttpTerminator' in /opt/root_src/net/net/src/TWebFile.cxx:1274; 8: Assuming 'start' is null in /opt/root_src/net/net/src/TWebFile.cxx:1354; 9: Taking false branch in /opt/root_src/net/net/src/TWebFile.cxx:1354; 10: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/net/net/src/TWebFile.cxx:1355; /opt/root_src/net/rpdutils/src/net.cxx:314:15: warning: Potential leak of memory pointed to by 'tmpbuf' [clang-analyzer-cplusplus.NewDeleteLeaks]; 1: Calling 'NetRecv' in /opt/root_src/net/rpdutils/src/net.cxx:341; 2: Calling 'NetRecvAllocate' in /opt/root_src/net/rpdutils/src/net.cxx:313; 3: Taking false branch in /opt/root_src/net/rpdutils/src/net.cxx:290; 4: 'len' is >= 0 in /opt/root_src/net/rpdutils/src/net.cxx:294; 5: Taking false branch in /opt/root_src/net/rpdutils/src/net.cxx:294; 6: Assuming 'len' is not equal to 0 in /opt/root_src/net/rpdutils/src/net.cxx:296; 7: Taking true branch in /opt/root_src/net/rpdutils/src/net.cxx:296; 8: Memory is allocated in /opt/root_src/net/rpdutils/src/net.cxx:297; 9: Returned allocated memory in /opt/root_src/net/rpdutils/src/net.cxx:313; 10: Taking true branch in /opt/root_src/net/rpdutils/src/net.cxx:313; 11: Potential leak of memory pointed to by 'tmpbuf' in /opt/root_src/net/rpdutils/src/net.cxx:314; /opt/root_src/net/rpdutils/src/net.cxx:541:4: warning: Value stored to 'port1' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'port1' is never read in /opt/root_src/net/rpdutils/src/net.cxx:541; /opt/root_src/net/rpdutils/src/rpdutils.cxx:668:15: warning: Although the value stored to 'nr' is used in the enclosing expression, the value is never actually read from 'nr' [clang-analyzer-deadcode.DeadStores]; 1: Although the value stored to 'nr' is used in the enclosing expression, the value is never actually read from 'nr' in /opt/root_src/net/rpdutils/src/rpdutils.cxx:668; /opt/root_src/net/rpdutils/src/rpdutils.cxx:743:21: warning: Although the value stored to 'nr' is used in the ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:86387,allocate,allocated,86387,https://root.cern,https://github.com/root-project/root/issues/7528,1,['allocate'],['allocated']
Energy Efficiency,"bject_pool&, void*, unsigned long, tbb::detail::d1::execution_data const&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x11e2): undefined reference to `tbb::detail::r1::is_group_execution_cancelled(tbb::detail::d1::task_group_context&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x123c): undefined reference to `tbb::detail::r1::execution_slot(tbb::detail::d1::execution_data const*)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x124d): undefined reference to `tbb::detail::r1::execution_slot(tbb::detail::d1::execution_data const*)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x126a): undefined reference to `tbb::detail::r1::execution_slot(tbb::detail::d1::execution_data const*)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x12e8): undefined reference to `tbb::detail::r1::allocate(tbb::detail::d1::small_object_pool*&, unsigned long, tbb::detail::d1::execution_data const&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x138d): undefined reference to `tbb::detail::r1::allocate(tbb::detail::d1::small_object_pool*&, unsigned long, tbb::detail::d1::execution_data const&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x13c5): undefined reference to `tbb::detail::r1::spawn(tbb::detail::d1::task&, tbb::detail::d1::task_group_context&)'; /usr/bin/ld: CMakeFiles/Imt.dir/src/TThreadExecutor.cxx.o: in function `tbb::detail::d1::start_reduce<tbb::detail::d1::blocked_range<__gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > > >, tbb::detail::d1::lambda_reduce_body<tbb::detail::d1::blocked_range<__gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > > >, double, ROOT::Internal::ParallelReduceHelper<double>(std::vector<double, std::allocator<double> > const&, std::function<double (double, double)> const&)::{lambda(tbb::detail::d1::blocked_range<__gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > > > const&, double)#1}, std::function<double (double, double)> >, tbb::detail::d1::auto_partitioner const",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11931:18272,allocate,allocate,18272,https://root.cern,https://github.com/root-project/root/issues/11931,1,['allocate'],['allocate']
Energy Efficiency,"bject_pool&, void*, unsigned long, tbb::detail::d1::execution_data const&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x1a47): undefined reference to `tbb::detail::r1::is_group_execution_cancelled(tbb::detail::d1::task_group_context&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x1a9c): undefined reference to `tbb::detail::r1::execution_slot(tbb::detail::d1::execution_data const*)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x1aad): undefined reference to `tbb::detail::r1::execution_slot(tbb::detail::d1::execution_data const*)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x1aca): undefined reference to `tbb::detail::r1::execution_slot(tbb::detail::d1::execution_data const*)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x1b47): undefined reference to `tbb::detail::r1::allocate(tbb::detail::d1::small_object_pool*&, unsigned long, tbb::detail::d1::execution_data const&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x1bec): undefined reference to `tbb::detail::r1::allocate(tbb::detail::d1::small_object_pool*&, unsigned long, tbb::detail::d1::execution_data const&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x1c24): undefined reference to `tbb::detail::r1::spawn(tbb::detail::d1::task&, tbb::detail::d1::task_group_context&)'; /usr/bin/ld: CMakeFiles/Imt.dir/src/TThreadExecutor.cxx.o: in function `ROOT::TThreadExecutor::ParallelFor(unsigned int, unsigned int, unsigned int, std::function<void (unsigned int)> const&)':; TThreadExecutor.cxx:(.text+0x1f73): undefined reference to `tbb::detail::r1::global_control_active_value(int)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x1fc9): undefined reference to `tbb::detail::r1::execute(tbb::detail::d1::task_arena_base&, tbb::detail::d1::delegate_base&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x1ff3): undefined reference to `tbb::detail::r1::global_control_active_value(int)'; /usr/bin/ld: CMakeFiles/Imt.dir/src/TThreadExecutor.cxx.o: in function `ROOT::TThreadExecutor::ParallelReduce(std::vector<double, std::allocator<double> > const&, std::functio",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11931:20980,allocate,allocate,20980,https://root.cern,https://github.com/root-project/root/issues/11931,1,['allocate'],['allocate']
Energy Efficiency,by delegating the schedule trigger to one file per branch.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14875:18,schedul,schedule,18,https://root.cern,https://github.com/root-project/root/pull/14875,1,['schedul'],['schedule']
Energy Efficiency,"c/BDT_Reg.cxx:309; 20: Taking false branch in /opt/root_src/tmva/tmvagui/src/BDT_Reg.cxx:309; 21: 6th function call argument is an uninitialized value in /opt/root_src/tmva/tmvagui/src/BDT_Reg.cxx:312; /opt/root_src/tmva/tmvagui/src/likelihoodrefs.cxx:54:16: warning: Value stored to 'newCanvas' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'newCanvas' is never read in /opt/root_src/tmva/tmvagui/src/likelihoodrefs.cxx:54; /opt/root_src/tmva/tmvagui/src/likelihoodrefs.cxx:170:1: warning: Potential leak of memory pointed to by 'c' [clang-analyzer-cplusplus.NewDeleteLeaks]; 1: Assuming 'ninst' is not equal to 0 in /opt/root_src/tmva/tmvagui/src/likelihoodrefs.cxx:184; 2: Taking false branch in /opt/root_src/tmva/tmvagui/src/likelihoodrefs.cxx:184; 3: Loop condition is true. Entering loop body in /opt/root_src/tmva/tmvagui/src/likelihoodrefs.cxx:192; 4: Calling 'likelihoodrefs' in /opt/root_src/tmva/tmvagui/src/likelihoodrefs.cxx:194; 5: Memory is allocated in /opt/root_src/tmva/tmvagui/src/likelihoodrefs.cxx:19; 6: Loop condition is false. Execution continues on line 247 in /opt/root_src/tmva/tmvagui/src/likelihoodrefs.cxx:30; 7: Potential leak of memory pointed to by 'c' in /opt/root_src/tmva/tmvagui/src/likelihoodrefs.cxx:170; /opt/root_src/tmva/tmvagui/src/network.cxx:53:10: warning: Value stored to 'iyc' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'iyc' during its initialization is never read in /opt/root_src/tmva/tmvagui/src/network.cxx:53; /opt/root_src/tmva/tmvagui/src/network.cxx:54:25: warning: Although the value stored to 'iyc' is used in the enclosing expression, the value is never actually read from 'iyc' [clang-analyzer-deadcode.DeadStores]; 1: Although the value stored to 'iyc' is used in the enclosing expression, the value is never actually read from 'iyc' in /opt/root_src/tmva/tmvagui/src/network.cxx:54; /opt/root_src/tmva/tmvagui/src/regression_averagedevs.cxx:19:18: warning: V",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:141786,allocate,allocated,141786,https://root.cern,https://github.com/root-project/root/issues/7526,1,['allocate'],['allocated']
Energy Efficiency,"c/TMath.h:1373; /opt/root_src/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:142:4: warning: Value stored to 'nfnevl' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'nfnevl' is never read in /opt/root_src/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:142; /opt/root_src/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:143:4: warning: Value stored to 'relerr' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'relerr' is never read in /opt/root_src/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:143; /opt/root_src/math/mathcore/src/GaussIntegrator.cxx:68:4: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]; 1: Calling 'IntegrandTransform::Clone' in /opt/root_src/math/mathcore/src/GaussIntegrator.cxx:68; 2: Field 'fInfiniteInterval' is false in /opt/root_src/math/mathcore/src/GaussIntegrator.cxx:248; 3: '?' condition is false in /opt/root_src/math/mathcore/src/GaussIntegrator.cxx:248; 4: Memory is allocated in /opt/root_src/math/mathcore/src/GaussIntegrator.cxx:248; 5: Returned allocated memory in /opt/root_src/math/mathcore/src/GaussIntegrator.cxx:68; 6: Potential memory leak in /opt/root_src/math/mathcore/src/GaussIntegrator.cxx:68; /opt/root_src/math/mathcore/src/GaussIntegrator.cxx:235:12: warning: Although the value stored to 'result' is used in the enclosing expression, the value is never actually read from 'result' [clang-analyzer-deadcode.DeadStores]; 1: Although the value stored to 'result' is used in the enclosing expression, the value is never actually read from 'result' in /opt/root_src/math/mathcore/src/GaussIntegrator.cxx:235; /opt/root_src/math/mathcore/src/GoFTest.cxx:603:7: warning: Value stored to 'maij' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'maij' is never read in /opt/root_src/math/mathcore/src/GoFTest.cxx:603; /opt/root_src/math/mathcore/src/SpecFuncCephes.cxx:216:10: warning: Value stored to 'sgngam' is never read [clang-analyzer-deadcode.DeadS",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7458:19772,allocate,allocated,19772,https://root.cern,https://github.com/root-project/root/issues/7458,1,['allocate'],['allocated']
Energy Efficiency,c/math/mathcore/inc/TMath.h:1347; 20: 'n' is <= 'kWorkMax' in /opt/root_src/math/mathcore/inc/TMath.h:1351; 21: Taking false branch in /opt/root_src/math/mathcore/inc/TMath.h:1351; 22: 'ii' is >= 'n' in /opt/root_src/math/mathcore/inc/TMath.h:1357; 23: Loop condition is false. Execution continues on line 1360 in /opt/root_src/math/mathcore/inc/TMath.h:1357; 24: Loop condition is true. Entering loop body in /opt/root_src/math/mathcore/inc/TMath.h:1363; 25: Assuming the condition is false in /opt/root_src/math/mathcore/inc/TMath.h:1364; 26: Taking false branch in /opt/root_src/math/mathcore/inc/TMath.h:1364; 27: Assigned value is garbage or undefined in /opt/root_src/math/mathcore/inc/TMath.h:1373; /opt/root_src/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:142:4: warning: Value stored to 'nfnevl' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'nfnevl' is never read in /opt/root_src/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:142; /opt/root_src/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:143:4: warning: Value stored to 'relerr' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'relerr' is never read in /opt/root_src/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:143; /opt/root_src/math/mathcore/src/GaussIntegrator.cxx:68:4: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]; 1: Calling 'IntegrandTransform::Clone' in /opt/root_src/math/mathcore/src/GaussIntegrator.cxx:68; 2: Field 'fInfiniteInterval' is false in /opt/root_src/math/mathcore/src/GaussIntegrator.cxx:248; 3: '?' condition is false in /opt/root_src/math/mathcore/src/GaussIntegrator.cxx:248; 4: Memory is allocated in /opt/root_src/math/mathcore/src/GaussIntegrator.cxx:248; 5: Returned allocated memory in /opt/root_src/math/mathcore/src/GaussIntegrator.cxx:68; 6: Potential memory leak in /opt/root_src/math/mathcore/src/GaussIntegrator.cxx:68; /opt/root_src/math/mathcore/src/GaussIntegrator.cxx:235:12: warning: Although the value,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7458:19108,Adapt,AdaptiveIntegratorMultiDim,19108,https://root.cern,https://github.com/root-project/root/issues/7458,1,['Adapt'],['AdaptiveIntegratorMultiDim']
Energy Efficiency,"c/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00007fffe26b2ba8 in TClingClassInfo::TClingClassInfo (this=0x3e04b90, interp=0x77e5d0, name=0x6a1ad0 ""art::Wrapper<art::Assns<string,int,void> >"") at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TClingClassInfo.cxx:95. #21 0x00007fffe26cacba in TCling::SetClassInfo (this=0x77bdf0, cl=0x3983b80, reload=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TCling.cxx:3785. #22 0x00007ffff74d245f in TClass::SetUnloaded (this=0x3983b80) at /scratch/greenc/test-products/root/v6_20_04/sou",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462:5997,green,greenc,5997,https://root.cern,https://github.com/root-project/root/pull/5462,1,['green'],['greenc']
Energy Efficiency,"ce, the EIGC allows its (External) user to use Minuit2 ""Internal"" parameter space, i.e. the parameter space that may be bounded into some range using transformation functions. This allowed us to exactly (floating point bit-wise) replicate the Minuit2 gradient calculation outside of Minuit2 itself, allowing us to parallelize this gradient calculation process exactly without having to worry about breaking Minuit2. The replication, `NumericalDerivatorMinuit2`, was based on earlier work by @lmoneta who already had separated out the bulk of the gradient calculation code from Minuit2.; 2. To make this all work, we also had to upgrade precision of the transformation functions to long double instead of double, otherwise round off errors would still persist and ruin any chances of exact bit-wise equality.; 2. In `mathcore`: Some additions to `IFunction` were made to allow Minuit2 to probe functions for their ability to generate gradients and second derivatives. Similar additions were made to function adapter classes in Minuit2.; 3. In RooFit:; 1. Most RooMinimizerFcn functionality was moved into an abstract base class RooAbsMinimizerFcn, which in turn forms the base class of the new RooMinimizerFcn, but also of the added RooGradMinimizerFcn (serial, but gradient external to Minuit2) and MinuitFcnGrad (with parallel MultiProcess back-end) classes.; 2. The RooRealMPFE based classes can make use of an added parameter `CPUAffinity`. In Unix systems (not macOS), this makes the MPFE based parallelization a lot faster by pinning processes to physical CPU cores.; 3. To accomodate the new minimization frameworks, RooMinimizer was changed quite a bit as well. It is still backwards compatible, but the new functionality can be accessed through a new `create` template factory function. This template function allows users to pass in their own calculation back-ends, e.g. for calculating on GPUs or in autograd enabled frameworks. The commit history also contains the proof of concept version",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8294:2341,adapt,adapter,2341,https://root.cern,https://github.com/root-project/root/pull/8294,1,['adapt'],['adapter']
Energy Efficiency,"chIMTHelper*) root/tree/tree/src/TBranch.cxx:891; #4 0x7fcd22016bfa in TBranchElement::FillImpl(ROOT::Internal::TBranchIMTHelper*) root/tree/tree/src/TBranchElement.cxx:1265; #5 0x7fcd22016441 in TBranchElement::FillImpl(ROOT::Internal::TBranchIMTHelper*) root/tree/tree/src/TBranchElement.cxx:1290; #6 0x7fcd22016441 in TBranchElement::FillImpl(ROOT::Internal::TBranchIMTHelper*) root/tree/tree/src/TBranchElement.cxx:1290; #7 0x7fcd221d81a7 in TTree::Fill() root/tree/tree/src/TTree.cxx:4586; #8 0x4025f7 in main mwe.C:17; #9 0x7fcd1f9b3bf6 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21bf6); #10 0x402239 in _start (mwe+0x402239). 0x606000112a68 is located 8 bytes inside of 64-byte region [0x606000112a60,0x606000112aa0); freed by thread T0 here:; #0 0x7fcd250835c7 in operator delete(void*) ([...]/lib/libasan.so.6+0xae5c7); #1 0x402501 in main mwe.C:13; #2 0x7fcd1f9b3bf6 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21bf6). previously allocated by thread T0 here:; #0 0x7fcd25082bf7 in operator new(unsigned long) ([...]/lib/libasan.so.6+0xadbf7); #1 0x7fcd247f9b81 in TStorage::ObjectAlloc(unsigned long) root/core/base/src/TStorage.cxx:330; #2 0x402948 in TObject::operator new(unsigned long) [...]/root/include/TObject.h:167; #3 0x40241e in main mwe.C:10; #4 0x7fcd1f9b3bf6 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21bf6). SUMMARY: AddressSanitizer: heap-use-after-free root/io/io/src/TStreamerInfoActions.cxx:252 in int TStreamerInfoActions::WriteBasicType<unsigned int>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*); Shadow bytes around the buggy address:; 0x0c0c8001a4f0: fd fd fd fd fa fa fa fa fd fd fd fd fd fd fd fd; 0x0c0c8001a500: fa fa fa fa 00 00 00 00 00 00 00 00 fa fa fa fa; 0x0c0c8001a510: fd fd fd fd fd fd fd fd fa fa fa fa fd fd fd fd; 0x0c0c8001a520: fd fd fd fd fa fa fa fa fd fd fd fd fd fd fd fa; 0x0c0c8001a530: fa fa fa fa fd fd fd fd fd fd fd fa fa fa fa fa; =>0x0c0c8001a540: fd fd fd fd fd fd fd fa fa fa fa f",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8027:2553,allocate,allocated,2553,https://root.cern,https://github.com/root-project/root/issues/8027,1,['allocate'],['allocated']
Energy Efficiency,"cialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvis",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462:3045,green,greenc,3045,https://root.cern,https://github.com/root-project/root/pull/5462,1,['green'],['greenc']
Energy Efficiency,"cin is not seekable. Temporary stringstream is created to store cin. This patch fixes the error. But I am afraid using intermediate stringstream is not an efficient way, especially it costs a lot of memory if the input file is large. Any suggestion? @bbockelm",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/84:155,efficient,efficient,155,https://root.cern,https://github.com/root-project/root/pull/84,1,['efficient'],['efficient']
Energy Efficiency,clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'jp' is never read in /opt/root_src/math/matrix/src/TDecompSparse.cxx:1036; /opt/root_src/math/matrix/src/TDecompSparse.cxx:2433:4: warning: Value stored to 'ipos' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'ipos' is never read in /opt/root_src/math/matrix/src/TDecompSparse.cxx:2433; /opt/root_src/math/matrix/src/TMatrixT.cxx:1742:7: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Taking false branch in /opt/root_src/math/matrix/src/TMatrixT.cxx:121; 2: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:120; 3: Loop condition is false. Exiting loop in /opt/root_src/math/matrix/src/TMatrixT.cxx:121; 4: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:119; 5: Control jumps to 'case kInverted:' at line 141 in /opt/root_src/math/matrix/src/TMatrixT.cxx:123; 6: Calling 'TMatrixT::Allocate' in /opt/root_src/math/matrix/src/TMatrixT.cxx:143; 7: Null pointer value stored to field 'fElements' in /opt/root_src/math/matrix/src/TMatrixT.cxx:472; 8: Assuming 'no_rows' is < 0 in /opt/root_src/math/matrix/src/TMatrixT.cxx:479; 9: Left side of '||' is true in /opt/root_src/math/matrix/src/TMatrixT.cxx:479; 10: Returning from 'TMatrixT::Allocate' in /opt/root_src/math/matrix/src/TMatrixT.cxx:143; 11: Calling copy assignment operator for 'TMatrixT<double>' in /opt/root_src/math/matrix/src/TMatrixT.cxx:145; 12: Assuming 'gMatrixCheck' is 0 in /opt/root_src/math/matrix/src/TMatrixT.cxx:1735; 13: Left side of '&&' is false in /opt/root_src/math/matrix/src/TMatrixT.cxx:1735; 14: Assuming the condition is true in /opt/root_src/math/matrix/src/TMatrixT.cxx:1740; 15: Taking true branch in /opt/root_src/math/matrix/src/TMatrixT.cxx:1740; 16: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/math/matrix/src/TMatrixT.cxx:1742; /opt/root_src/math/matrix/src/TMatrixT.cxx:1,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7458:134537,Allocate,Allocate,134537,https://root.cern,https://github.com/root-project/root/issues/7458,1,['Allocate'],['Allocate']
Energy Efficiency,clang-format some files + add some typedefs to `ntuple_test.hxx` to reduce namespace noise in the tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16237:68,reduce,reduce,68,https://root.cern,https://github.com/root-project/root/pull/16237,1,['reduce'],['reduce']
Energy Efficiency,"clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteTyp",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462:4579,green,greenc,4579,https://root.cern,https://github.com/root-project/root/pull/5462,1,['green'],['greenc']
Energy Efficiency,"code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; ```Python; import ROOT. x = ROOT.RooRealVar('x', '', 0, 1); y = ROOT.RooRealVar('y', '', 0, 1). mu = ROOT.RooRealVar(""mu"", """", 0.5, 0, 1); gx = ROOT.RooGaussian(""gx"", """", x, mu, ROOT.RooFit.RooConst(0.2)); gy = ROOT.RooGaussian(""gy"", """", y, mu, ROOT.RooFit.RooConst(0.2)); g = ROOT.RooProdPdf(""g"", '', [gx, gy]). # works; condg1 = ROOT.RooProdPdf(""g"", '', {gx}, Conditional = (gy, {y})); condg2 = ROOT.RooProdPdf(""g"", '', {gx}, Conditional = ({gy}, y)); condg3 = ROOT.RooProdPdf(""g"", '', {gx}, Conditional = ({gy}, {y})). data = g.generate({x,y}, NumEvents = 10000). # often segfaults, valgrind reports problems; g.fitTo(data, Minos = {mu}, PrintLevel = -1). # both of these work; g.fitTo(data, ROOT.RooFit.Minos({mu}), PrintLevel = -1); g.fitTo(data, Minos = ROOT.RooArgSet(mu), PrintLevel = -1). # works; constr = ROOT.RooGaussian('c', '', mu, ROOT.RooFit.RooConst(0.5), ROOT.RooFit.RooConst(0.01)); g.fitTo(data, ExternalConstraints = {constr}, PrintLevel = -1). # works; gWithConstr = ROOT.RooProdPdf('gWC', '', [g, constr]); gWithConstr.fitTo(data, Constrain = {mu}, PrintLevel = -1). frame = x.frame(). # works; g.plotOn(frame, Components = {g}). # segfault/valgrind errors; g.plotOn(frame, Slice = {y}). # segfault/valgrind errors; g.plotOn(frame, Project = {y}). fitres = g.fitTo(data, PrintLevel = -1, Save = True); g.plotOn(frame, VisualizeError = (fitres, {x})). # valgrind reports problems; g.paramOn(frame, Parameters = {mu}). # segfault; datax = data.reduce(SelectVars = {x}); ```. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; ROOT 6.26.07 from LCG dev4; ROOT master from LCG dev3. ### Additional context; <!--; Add any other context about the problem here.; -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11421:3241,reduce,reduce,3241,https://root.cern,https://github.com/root-project/root/issues/11421,1,['reduce'],['reduce']
Energy Efficiency,compSparse.cxx:2433; /opt/root_src/math/matrix/src/TMatrixT.cxx:1742:7: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Taking false branch in /opt/root_src/math/matrix/src/TMatrixT.cxx:121; 2: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:120; 3: Loop condition is false. Exiting loop in /opt/root_src/math/matrix/src/TMatrixT.cxx:121; 4: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:119; 5: Control jumps to 'case kInverted:' at line 141 in /opt/root_src/math/matrix/src/TMatrixT.cxx:123; 6: Calling 'TMatrixT::Allocate' in /opt/root_src/math/matrix/src/TMatrixT.cxx:143; 7: Null pointer value stored to field 'fElements' in /opt/root_src/math/matrix/src/TMatrixT.cxx:472; 8: Assuming 'no_rows' is < 0 in /opt/root_src/math/matrix/src/TMatrixT.cxx:479; 9: Left side of '||' is true in /opt/root_src/math/matrix/src/TMatrixT.cxx:479; 10: Returning from 'TMatrixT::Allocate' in /opt/root_src/math/matrix/src/TMatrixT.cxx:143; 11: Calling copy assignment operator for 'TMatrixT<double>' in /opt/root_src/math/matrix/src/TMatrixT.cxx:145; 12: Assuming 'gMatrixCheck' is 0 in /opt/root_src/math/matrix/src/TMatrixT.cxx:1735; 13: Left side of '&&' is false in /opt/root_src/math/matrix/src/TMatrixT.cxx:1735; 14: Assuming the condition is true in /opt/root_src/math/matrix/src/TMatrixT.cxx:1740; 15: Taking true branch in /opt/root_src/math/matrix/src/TMatrixT.cxx:1740; 16: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/math/matrix/src/TMatrixT.cxx:1742; /opt/root_src/math/matrix/src/TMatrixT.cxx:1761:7: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Taking false branch in /opt/root_src/math/matrix/src/TMatrixT.cxx:97; 2: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:120; 3: Loop condition is false. Exiting loop in /opt/root_src/math/matrix/src,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7458:134889,Allocate,Allocate,134889,https://root.cern,https://github.com/root-project/root/issues/7458,1,['Allocate'],['Allocate']
Energy Efficiency,condition is false. Execution continues on line 341 in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:315; 17: Memory is allocated in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:360; 18: 'i' is < 'nValEvents' in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:363; 19: Loop condition is true. Entering loop body in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:363; 20: Assuming 'j' is >= field 'fNVars' in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:367; 21: Loop condition is false. Execution continues on line 371 in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:367; 22: Assuming the condition is true in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:371; 23: Left side of '||' is true in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:371; 24: Assuming 'j' is >= field 'fNOutputs' in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:372; 25: Loop condition is false. Execution continues on line 375 in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:372; 26: Use of zero-allocated memory in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:375; /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:379:39: warning: Use of zero-allocated memory [clang-analyzer-cplusplus.NewDelete]; 1: Assuming field 'fModelIsSetup' is true in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:298; 2: Taking false branch in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:298; 3: 'i' is < 'nTrainingEvents' in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:315; 4: Loop condition is true. Entering loop body in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:315; 5: Assuming 'j' is >= field 'fNVars' in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:318; 6: Loop condition is false. Execution continues on line 324 in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:318; 7: Assuming the condition is false in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:324; 8: Left side of '||' is false in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:324; 9: Assuming the condition is false in /opt/root_src/tmva/pymva/src/Method,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:17491,allocate,allocated,17491,https://root.cern,https://github.com/root-project/root/issues/7526,1,['allocate'],['allocated']
Energy Efficiency,condition is false. Execution continues on line 442 in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:416; 17: Memory is allocated in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:461; 18: 'i' is < 'nValEvents' in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:464; 19: Loop condition is true. Entering loop body in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:464; 20: Assuming 'j' is >= field 'fNVars' in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:468; 21: Loop condition is false. Execution continues on line 472 in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:468; 22: Assuming the condition is true in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:472; 23: Left side of '||' is true in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:472; 24: Assuming 'j' is >= field 'fNOutputs' in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:473; 25: Loop condition is false. Execution continues on line 476 in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:473; 26: Use of zero-allocated memory in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:476; /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:480:39: warning: Use of zero-allocated memory [clang-analyzer-cplusplus.NewDelete]; 1: Assuming field 'fModelIsSetup' is true in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:400; 2: Taking false branch in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:400; 3: 'i' is < 'nTrainingEvents' in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:416; 4: Loop condition is true. Entering loop body in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:416; 5: Assuming 'j' is >= field 'fNVars' in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:419; 6: Loop condition is false. Execution continues on line 425 in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:419; 7: Assuming the condition is false in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:425; 8: Left side of '||' is false in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:425; 9: Assuming the condition is false in /opt/root_src/tmva/pymva/src/Method,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:7259,allocate,allocated,7259,https://root.cern,https://github.com/root-project/root/issues/7526,1,['allocate'],['allocated']
Energy Efficiency,"ctionIFvjEEjEEKNS1_16auto_partitionerEE8finalizeERKNS1_14execution_dataE[_ZN3tbb6detail2d19start_forINS1_13blocked_rangeIjEENS1_25parallel_for_body_wrapperISt8functionIFvjEEjEEKNS1_16auto_partitionerEE8finalizeERKNS1_14execution_dataE]+0x76): undefined reference to `tbb::detail::r1::deallocate(tbb::detail::d1::small_object_pool&, void*, unsigned long, tbb::detail::d1::execution_data const&)'; /usr/bin/ld: CMakeFiles/Imt.dir/src/TThreadExecutor.cxx.o: in function `tbb::detail::d1::start_for<tbb::detail::d1::blocked_range<unsigned int>, tbb::detail::d1::parallel_for_body_wrapper<std::function<void (unsigned int)>, unsigned int>, tbb::detail::d1::auto_partitioner const>::execute(tbb::detail::d1::execution_data&)':; TThreadExecutor.cxx:(.text._ZN3tbb6detail2d19start_forINS1_13blocked_rangeIjEENS1_25parallel_for_body_wrapperISt8functionIFvjEEjEEKNS1_16auto_partitionerEE7executeERNS1_14execution_dataE[_ZN3tbb6detail2d19start_forINS1_13blocked_rangeIjEENS1_25parallel_for_body_wrapperISt8functionIFvjEEjEEKNS1_16auto_partitionerEE7executeERNS1_14execution_dataE]+0xb5): undefined reference to `tbb::detail::r1::allocate(tbb::detail::d1::small_object_pool*&, unsigned long, tbb::detail::d1::execution_data const&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text._ZN3tbb6detail2d19start_forINS1_13blocked_rangeIjEENS1_25parallel_for_body_wrapperISt8functionIFvjEEjEEKNS1_16auto_partitionerEE7executeERNS1_14execution_dataE[_ZN3tbb6detail2d19start_forINS1_13blocked_rangeIjEENS1_25parallel_for_body_wrapperISt8functionIFvjEEjEEKNS1_16auto_partitionerEE7executeERNS1_14execution_dataE]+0x146): undefined reference to `tbb::detail::r1::allocate(tbb::detail::d1::small_object_pool*&, unsigned long, tbb::detail::d1::execution_data const&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text._ZN3tbb6detail2d19start_forINS1_13blocked_rangeIjEENS1_25parallel_for_body_wrapperISt8functionIFvjEEjEEKNS1_16auto_partitionerEE7executeERNS1_14execution_dataE[_ZN3tbb6detail2d19start_forINS1_13blocked_rangeIjEENS1_25paralle",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11931:34402,allocate,allocate,34402,https://root.cern,https://github.com/root-project/root/issues/11931,1,['allocate'],['allocate']
Energy Efficiency,cxx:1058; 75: Taking true branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:1058; 76: Assuming 'j' is >= field 'fRowsOut' in /opt/root_src/graf2d/x11/src/Rotated.cxx:1059; 77: Loop condition is false. Execution continues on line 1084 in /opt/root_src/graf2d/x11/src/Rotated.cxx:1059; 78: Assuming the condition is false in /opt/root_src/graf2d/x11/src/Rotated.cxx:1087; 79: Taking false branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:1087; 80: Returned allocated memory in /opt/root_src/graf2d/x11/src/Rotated.cxx:746; 81: 'item' is non-null in /opt/root_src/graf2d/x11/src/Rotated.cxx:747; 82: Taking false branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:747; 83: 'font_name' is equal to null in /opt/root_src/graf2d/x11/src/Rotated.cxx:754; 84: Taking false branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:754; 85: 'font_name' is null in /opt/root_src/graf2d/x11/src/Rotated.cxx:771; 86: Taking false branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:771; 87: Returned allocated memory in /opt/root_src/graf2d/x11/src/Rotated.cxx:366; 88: 'item' is not equal to null in /opt/root_src/graf2d/x11/src/Rotated.cxx:367; 89: Taking false branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:367; 90: 'align' is not equal to TLEFT in /opt/root_src/graf2d/x11/src/Rotated.cxx:378; 91: Left side of '||' is false in /opt/root_src/graf2d/x11/src/Rotated.cxx:378; 92: 'align' is not equal to TCENTRE in /opt/root_src/graf2d/x11/src/Rotated.cxx:378; 93: Left side of '||' is false in /opt/root_src/graf2d/x11/src/Rotated.cxx:378; 94: 'align' is not equal to TRIGHT in /opt/root_src/graf2d/x11/src/Rotated.cxx:378; 95: Taking false branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:378; 96: 'align' is not equal to MLEFT in /opt/root_src/graf2d/x11/src/Rotated.cxx:380; 97: Left side of '||' is false in /opt/root_src/graf2d/x11/src/Rotated.cxx:380; 98: 'align' is not equal to MCENTRE in /opt/root_src/graf2d/x11/src/Rotated.cxx:380; 99: Left side of '||' is false in /opt/root_src/graf2d/x11/src/Ro,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7432:88908,allocate,allocated,88908,https://root.cern,https://github.com/root-project/root/issues/7432,1,['allocate'],['allocated']
Energy Efficiency,d to 'nrows' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'nrows' is never read in /opt/root_src/gui/gui/src/TGTable.cxx:1399; /opt/root_src/gui/gui/src/TGTable.cxx:1508:4: warning: Value stored to 'pos' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'pos' is never read in /opt/root_src/gui/gui/src/TGTable.cxx:1508; /opt/root_src/gui/gui/src/TGText.cxx:171:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGText.cxx:171; /opt/root_src/gui/gui/src/TGText.cxx:196:22: warning: Use of zero-allocated memory [clang-analyzer-cplusplus.NewDelete]; 1: Calling 'TGText::InsText' in /opt/root_src/gui/gui/src/TGText.cxx:922; 2: Field 'fY' is <= field 'fRowCount' in /opt/root_src/gui/gui/src/TGText.cxx:801; 3: Taking false branch in /opt/root_src/gui/gui/src/TGText.cxx:801; 4: Field 'fY' is equal to field 'fRowCount' in /opt/root_src/gui/gui/src/TGText.cxx:810; 5: Taking true branch in /opt/root_src/gui/gui/src/TGText.cxx:810; 6: Assuming 'start_src.fY' is equal to 'end_src.fY' in /opt/root_src/gui/gui/src/TGText.cxx:824; 7: Taking true branch in /opt/root_src/gui/gui/src/TGText.cxx:824; 8: 'len' is > 0 in /opt/root_src/gui/gui/src/TGText.cxx:830; 9: Taking true branch in /opt/root_src/gui/gui/src/TGText.cxx:830; 10: Calling 'TGText::GetLine' in /opt/root_src/gui/gui/src/TGText.cxx:831; 11: Assuming the condition is true in /opt/root_src/gui/gui/src/TGText.cxx:1000; 12: Taking true branch in /opt/root_src/gui/gui/src/TGText.cxx:1000; 13: Calling 'TGTextLine::GetText' in /opt/root_src/g,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:53778,allocate,allocated,53778,https://root.cern,https://github.com/root-project/root/issues/7533,1,['allocate'],['allocated']
Energy Efficiency,"d(Foo*)>*)args[0]);; ^; input_line_28:5:33: error: expected expression; ((void (&)(function<void(Foo*)>))apply)(*(function<void(Foo*)>*)args[0]);; ^; input_line_28:5:29: error: use of undeclared identifier 'Foo'; ((void (&)(function<void(Foo*)>))apply)(*(function<void(Foo*)>*)args[0]);; ^; input_line_28:5:33: error: expected expression; ((void (&)(function<void(Foo*)>))apply)(*(function<void(Foo*)>*)args[0]);; ^; input_line_28:5:37: error: address of overloaded function 'apply' does not match required type 'void (int)'; ((void (&)(function<void(Foo*)>))apply)(*(function<void(Foo*)>*)args[0]);; ^~~~~; input_line_24:12:6: note: candidate function has type mismatch at 1st parameter (expected 'int' but has 'std::function<void (foo::Foo *)>'); void apply(std::function<void(foo::Foo*)> f) {; ^; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/tuple:1423:26: note: candidate template ignored: failed template argument deduction; constexpr decltype(auto) apply(_Fn && __f, _Tuple && __t); ^; input_line_28:5:60: error: use of undeclared identifier 'Foo'; ((void (&)(function<void(Foo*)>))apply)(*(function<void(Foo*)>*)args[0]);; ^; input_line_28:5:64: error: expected expression; ((void (&)(function<void(Foo*)>))apply)(*(function<void(Foo*)>*)args[0]);; ^; input_line_28:5:66: error: type name requires a specifier or qualifier; ((void (&)(function<void(Foo*)>))apply)(*(function<void(Foo*)>*)args[0]);; ^; ```; If I drop the `foo` namespace then it works fine. ### Setup; ROOT 6.22 or 6.24 with cppyy 1.6.2. Same behavior through conda-forge, homebrew, and cmssw. ### Additional context; If I install cppyy 2.3.1 through conda-forge, the code works. On the other hand, if I install cppyy 1.6.2 through pip (conda did not work) then a random integer is returned 😱 (probably reading junk memory).; So this might be a cppyy issue that is already resolved. If so, what is the upgrade schedule for ROOT+cppyy? Also, any idea for a workaround?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10680:2647,schedul,schedule,2647,https://root.cern,https://github.com/root-project/root/issues/10680,1,['schedul'],['schedule']
Energy Efficiency,"ding of the Doxygen documentation within a normal build. Right now, it has to be done manually in the source directory. ### Optional: share how it could be improved; In addition, cmake Options can be easily used to 'tune' the input files, see https://aliceo2group.github.io/advanced/doxygen.html, rather than manually having to edit the Doxyfile as indicated in https://root.cern/for_developers/doxygen/#how-to-generate-the-doxygen-documentation. Some flags like:; ```; BUILD_DOCS [OFF]; BUILD_DOCS_CORE [ON]; BUILD_DOCS_GRAF2D [OFF]; BUILD_DOCS_QHP [OFF]; ...; ```; with the configurable QHP generation, see, https://github.com/root-project/root/issues/8781. and then calling:. `doxygen_add_docs(...)` with all the variables correctly set to generate the proper Doxyfile. This requires some (one-time) manual copy work from the actual Doxyfile to the CMakeLists.txt, but it will look clean in the end. This is how ALICE experiment is doing it, take a look:; https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22. Alternatively, one could just modify-on-the-fly the preexisting Doxyfile file as follows:. ```; set(doxyfile_in ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile); set(doxyfile ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile); configure_file(${doxyfile_in} ${doxyfile} @ONLY); add_custom_command(; OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/doxygen.stamp; DEPENDS ${doxyfile} ${HEADER_FILES}; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}; COMMAND sed ""s;INPUT =;INPUT = ${MY_NEW_INPUT_FILES}"" ${doxyfile} | ${DOXYGEN_EXECUTABLE} -; COMMAND cmake -E touch ${CMAKE_CURRENT_BINARY_DIR}/doxygen.stamp; COMMENT ""Generating API documentation with Doxygen""; VERBATIM); ```. ### To Reproduce; https://root.cern/for_developers/doxygen/#how-to-generate-the-doxygen-documentation. ### Setup; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.25/01 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8950:1181,Monitor,Monitoring,1181,https://root.cern,https://github.com/root-project/root/issues/8950,1,['Monitor'],['Monitoring']
Energy Efficiency,"direct-xrootd@v6-09-01-24773-gd85df4c5e9 |; | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");; root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");; root [2] f1->GetName(); (const char *) ""Run2012BC_DoubleMuParked_Muons.root""; root [3] f2->GetName(); (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root""; root [4] .q; $; ```; and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:; ```diff; void df102_NanoAODDimuonAnalysis(const char* filename); {; // Enable multi-threading; ROOT::EnableImplicitMT();; ; - // std::cout << ""Using filename: "" << filename << std::endl;; + auto f = TFile::Open(filename);; + auto t = f->Get<TTree>(""Events"");; ; - ROOT::RDataFrame df(""Events"", filename);; + ROOT::RDataFrame df(*t);; ```. I got the following:. ```sh; $ time ./dimuon file://Run2012BC_DoubleMuParked_Muons.root ; Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created; Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %; Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %; 13.34; $ time ./dimuon Run2012BC_DoubleMuParked_Muons.root ; Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created; Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %; Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %; 8.81; $; ```. **Note:** With the final version of the patch, instead of using `file://`, which now does not disable the redirection anymore, one should add `TFile.CrossProtocolRedirects: no` to their `rootrc` configuration file in order to disable this feature (I checked that it works).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11644:2277,charge,charge,2277,https://root.cern,https://github.com/root-project/root/pull/11644,2,['charge'],['charge']
Energy Efficiency,"e best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | ; ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |; TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |; TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |; TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |; TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |; TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming?. - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:; - [ ] Adapt ROOT Fitting; - [x] Change the policies to kSequential, kMultiThread and KMultiProcess; - [ ] Moving it out of the Internal namespace; - [x] Refactoring the switch statements if possible; - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6327:3006,Adapt,Adapt,3006,https://root.cern,https://github.com/root-project/root/pull/6327,2,['Adapt'],['Adapt']
Energy Efficiency,"e cache; ```; TBB_BINARY_DIR ; TBB_INCLUDE_DIR /usr/include ; TBB_LIBRARY /usr/local/lib/libtbb.so; TBB_LIBRARY_DEBUG TBB_LIBRARY_DEBUG-NOTFOUND ; TBB_LIBRARY_RELEASE /usr/local/lib/libtbb.so; TBB_ROOT_DIR /usr; ```. ### make output:; ```; [ 51%] Linking CXX shared library ../../lib/libImt.so; /usr/bin/ld: CMakeFiles/Imt.dir/src/TTaskGroup.cxx.o: in function `ROOT::Experimental::TTaskGroup::TTaskGroup()':; TTaskGroup.cxx:(.text+0x6b): undefined reference to `tbb::detail::r1::initialize(tbb::detail::d1::task_group_context&)'; /usr/bin/ld: CMakeFiles/Imt.dir/src/TTaskGroup.cxx.o: in function `ROOT::Experimental::TTaskGroup::Cancel()':; TTaskGroup.cxx:(.text+0xfa): undefined reference to `tbb::detail::r1::cancel_group_execution(tbb::detail::d1::task_group_context&)'; /usr/bin/ld: CMakeFiles/Imt.dir/src/TTaskGroup.cxx.o: in function `ROOT::Experimental::TTaskGroup::Run(std::function<void ()> const&)':; TTaskGroup.cxx:(.text+0x173): undefined reference to `tbb::detail::r1::allocate(tbb::detail::d1::small_object_pool*&, unsigned long)'; /usr/bin/ld: TTaskGroup.cxx:(.text+0x214): undefined reference to `tbb::detail::r1::notify_waiters(unsigned long)'; /usr/bin/ld: CMakeFiles/Imt.dir/src/TTaskGroup.cxx.o: in function `ROOT::Experimental::TTaskGroup::Wait()':; TTaskGroup.cxx:(.text+0x255): undefined reference to `tbb::detail::r1::wait(tbb::detail::d1::wait_context&, tbb::detail::d1::task_group_context&)'; /usr/bin/ld: TTaskGroup.cxx:(.text+0x25d): undefined reference to `tbb::detail::r1::is_group_execution_cancelled(tbb::detail::d1::task_group_context&)'; /usr/bin/ld: TTaskGroup.cxx:(.text+0x265): undefined reference to `tbb::detail::r1::reset(tbb::detail::d1::task_group_context&)'; /usr/bin/ld: CMakeFiles/Imt.dir/src/TTaskGroup.cxx.o: in function `ROOT::Experimental::TTaskGroup::~TTaskGroup()':; TTaskGroup.cxx:(.text+0x2cf): undefined reference to `tbb::detail::r1::is_group_execution_cancelled(tbb::detail::d1::task_group_context&)'; /usr/bin/ld: TTaskGroup.cxx:(.text+0x2db)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11931:1892,allocate,allocate,1892,https://root.cern,https://github.com/root-project/root/issues/11931,1,['allocate'],['allocate']
Energy Efficiency,e condition is true in /opt/root_src/core/base/src/TString.cxx:2248; 7: Taking true branch in /opt/root_src/core/base/src/TString.cxx:2248; 8: Calling constructor for 'TString' in /opt/root_src/core/base/src/TString.cxx:2249; 9: '?' condition is false in /opt/root_src/core/base/src/TString.cxx:207; 10: Calling 'TString::Init' in /opt/root_src/core/base/src/TString.cxx:208; 11: 'capacity' is >= 0 in /opt/root_src/core/base/src/TString.cxx:249; 12: Taking false branch in /opt/root_src/core/base/src/TString.cxx:249; 13: 'nchar' is >= 0 in /opt/root_src/core/base/src/TString.cxx:253; 14: Taking false branch in /opt/root_src/core/base/src/TString.cxx:253; 15: Assuming the condition is false in /opt/root_src/core/base/src/TString.cxx:257; 16: Taking false branch in /opt/root_src/core/base/src/TString.cxx:257; 17: Assuming 'capacity' is >= kMinCap in /opt/root_src/core/base/src/TString.cxx:265; 18: Taking false branch in /opt/root_src/core/base/src/TString.cxx:265; 19: Memory is allocated in /opt/root_src/core/base/src/TString.cxx:270; 20: Returned allocated memory in /opt/root_src/core/base/src/TString.cxx:208; 21: Returning from constructor for 'TString' in /opt/root_src/core/base/src/TString.cxx:2249; 22: Potential leak of memory pointed to by 'tok.fRep..fLong.fData' in /opt/root_src/core/base/src/TString.cxx:2253; /opt/root_src/core/base/src/TString.cxx:2314:4: warning: va_end() is called on an uninitialized va_list [clang-analyzer-valist.Uninitialized]; 1: expanded from macro 'va_end' in /usr/lib/gcc/x86_64-linux-gnu/9/include/stdarg.h:48; 2: Initialized va_list in /opt/root_src/core/base/src/TString.cxx:2312; 3: expanded from macro 'va_start' in /usr/lib/gcc/x86_64-linux-gnu/9/include/stdarg.h:47; 4: Calling 'TString::FormImp' in /opt/root_src/core/base/src/TString.cxx:2313; 5: Assuming the condition is true in /opt/root_src/core/base/src/TString.cxx:2276; 6: Left side of '||' is true in /opt/root_src/core/base/src/TString.cxx:2276; 7: Taking true branch in /opt/root,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7412:145653,allocate,allocated,145653,https://root.cern,https://github.com/root-project/root/issues/7412,1,['allocate'],['allocated']
Energy Efficiency,e in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1475; 12: Memory is allocated in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1487; 13: Loop condition is false. Execution continues on line 1503 in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1490; 14: Loop condition is false. Execution continues on line 1542 in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1503; 15: Calling 'Executor::Map' in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1576; 16: Taking false branch in /opt/root_src/tmva/tmva/inc/TMVA/Executor.h:140; 17: Calling 'TExecutorCRTP::Map' in /opt/root_src/tmva/tmva/inc/TMVA/Executor.h:141; 18: Calling 'TSequentialExecutor::MapImpl' in /opt/root_src/core/base/inc/ROOT/TExecutorCRTP.hxx:193; 19: Calling 'operator()' in /opt/root_src/core/base/inc/ROOT/TSequentialExecutor.hxx:164; 20: Assuming the condition is true in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1545; 21: Taking true branch in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1545; 22: Use of zero-allocated memory in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1558; /opt/root_src/tmva/tmva/src/DecisionTree.cxx:2698:11: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Assuming 'current' is non-null in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:2693; 2: Taking false branch in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:2693; 3: Assuming the condition is true in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:2698; 4: Loop condition is true. Entering loop body in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:2698; 5: Assuming the condition is false in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:2699; 6: '?' condition is false in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:2699; 7: Value assigned to 'current' in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:2699; 8: Assuming 'current' is null in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:2702; 9: Taking true branch in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:2702; 10: Called C++ object pointer is null in /opt,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:37064,allocate,allocated,37064,https://root.cern,https://github.com/root-project/root/issues/7526,1,['allocate'],['allocated']
Energy Efficiency,"e of RNTuple. The default should work well in the majority of cases but can be adjusted if needed. The idea is to give target sizes for clusters and pages (measured in bytes). RNTuple will try make good decisions and approximate the target sizes. The PR replaces previous defaults for cluster size and page size given in number of entries and number of elements resp. ## Changes or fixes:; The PR sets three new defaults:; - Target size for compressed clusters of 50MB. In general, larger clusters provide room for more and larger pages and should improve compression ratio and speed. However, clusters also need to be buffered during write and (partially) during read, so larger cluster increase the memory footprint.; - Maximum size for uncompressed clusters of 512MiB. Prevents very compressible clusters from growing too large. That is mostly a problem for writing.; - Target size for uncompressed pages of 64KiB. In general, larger pages give better compression ratios. Smaller pages, however, reduce the memory footprint. When reading, every active column requires at least one page buffer. For the number of read requests, the page size does not matter because pages of the same column are written consecutively and therefore read in one go. Given the three settings, writing works as follows: when the current cluster is larger than the maximum uncompressed size, it will be flushed unconditionally. When the current cluster size reaches the estimate for the compressed cluster size, it will be flushed, too. The estimated compression ratio for the first cluster is 0.5 if compression is used, and 1 otherwise. The following clusters use the compression ratio of the last cluster as estimate. Pages are filled until the target size and then flushed. If a column has enough elements to fill at least half a page, there is a mechanism to prevent undersized tail pages: writing uses two page buffers in turns and flushes the previous buffer only once the next buffer is at least at 50%. If the cl",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8703:1079,reduce,reduce,1079,https://root.cern,https://github.com/root-project/root/pull/8703,1,['reduce'],['reduce']
Energy Efficiency,"e provided `runit` script to configure, build, and execute the tests. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->. 1. Problem verified on 6.24/06 and 6.25/02.; 2. SLF7.; 3. ROOT was compiled for UPS, configured using FNAL/art standard options. See attached ROOT build logs for details. ### Additional context; <!--; Add any other context about the problem here.; -->. The showstopper issue appears to be that when looking for information about `gallery::Event` (defined in an ""old-style"" dictionary rather than a C++ module), it mistakenly identifies the TMVA module as providing `Event` and never loads the dictionary containing the definition for `gallery::Event`. This issue does not occur if we look for the aliased `gallery::GalleryEvent` instead, nor if `runtime_cxxmodules=OFF`. In addition, when `runtime_cxxmodules=ON`—even for the ""good"" case—I get many messages of the form:; ```Console; Error in <TCling::RegisterRdictForLoadPCM>: Rdict '/scratch/greenc/products/root/v6_25_02/Linux64bit+3.10-2.17-e20-p399-debug/lib/libNet_rdict.pcm' is both in Module extension and in File system.; ```. This may be due to the presence of `dev=ON`, `asserts=ON`, `CMAKE_BUILD_TYPE=Debug`, `LLVM_BUILD_TYPE=Debug` or `LLVM_ENABLE_ASSERTIONS=ON`, but regardless: is this a real error, or indicative of another (or the same) bug, or should this be ignored by the art infrastructure which would otherwise convert it to a fatal exception?. ### Attached files:. * [build_root-v6_25_02-e20-p399-debug.log.gz](https://github.com/root-project/root/files/7872239/build_root-v6_25_02-e20-p399-debug.log.gz); * [build_root-v6_25_02-e20-p399-debug-runtime_cxxmodules.log.gz](https://github.com/root-project/root/files/7872240/build_root-v6_25_02-e20-p399-debug-runtime_cxxmodules.log.gz); * [runtime_cxxmodules-reproducer.tar.gz](https://github.com/root-project/root/files/7872241/runtime_cxxmodules-reproducer",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9583:2236,green,greenc,2236,https://root.cern,https://github.com/root-project/root/issues/9583,1,['green'],['greenc']
Energy Efficiency,eSpace.cxx:110; 5: Assuming the condition is false in /opt/root_src/math/physics/src/TGenPhaseSpace.cxx:120; 6: Loop condition is false. Execution continues on line 128 in /opt/root_src/math/physics/src/TGenPhaseSpace.cxx:120; 7: The left operand of '*' is a garbage value in /opt/root_src/math/physics/src/TGenPhaseSpace.cxx:128; /opt/root_src/math/physics/src/TRobustEstimator.cxx:661:13: warning: Use of zero-allocated memory [clang-analyzer-cplusplus.NewDelete]; 1: Assuming 'hh' is equal to 0 in /opt/root_src/math/physics/src/TRobustEstimator.cxx:610; 2: Taking true branch in /opt/root_src/math/physics/src/TRobustEstimator.cxx:610; 3: Memory is allocated in /opt/root_src/math/physics/src/TRobustEstimator.cxx:626; 4: Loop condition is false. Execution continues on line 629 in /opt/root_src/math/physics/src/TRobustEstimator.cxx:627; 5: Loop condition is false. Execution continues on line 661 in /opt/root_src/math/physics/src/TRobustEstimator.cxx:629; 6: Use of zero-allocated memory in /opt/root_src/math/physics/src/TRobustEstimator.cxx:661; /opt/root_src/math/physics/src/TRobustEstimator.cxx:922:7: warning: Value stored to 'repeat' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'repeat' is never read in /opt/root_src/math/physics/src/TRobustEstimator.cxx:922; /opt/root_src/math/physics/src/TRobustEstimator.cxx:1303:16: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]; 1: Assuming 'i' is >= 'nmerged' in /opt/root_src/math/physics/src/TRobustEstimator.cxx:971; 2: Loop condition is false. Execution continues on line 978 in /opt/root_src/math/physics/src/TRobustEstimator.cxx:971; 3: Calling 'TRobustEstimator::KOrdStat' in /opt/root_src/math/physics/src/TRobustEstimator.cxx:978; 4: Assuming 'work' is null in /opt/root_src/math/physics/src/TRobustEstimator.cxx:1277; 5: Taking false branch in /opt/root_src/math/physics/src/TRobustEstimator.cxx:1277; 6: 'ntotal' is <= 'kWorkMax' in /opt/root_src/math/physics/sr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7458:228595,allocate,allocated,228595,https://root.cern,https://github.com/root-project/root/issues/7458,1,['allocate'],['allocated']
Energy Efficiency,"ec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::Visi",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462:2812,green,greenc,2812,https://root.cern,https://github.com/root-project/root/pull/5462,1,['green'],['greenc']
Energy Efficiency,ecisionTree.cxx:1383; 2: Loop condition is true. Entering loop body in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1383; 3: Assuming 'ivar' is > field 'fNvars' in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1383; 4: Loop condition is false. Execution continues on line 1388 in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1383; 5: Assuming field 'fRandomisedTree' is false in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1401; 6: Taking false branch in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1401; 7: Loop condition is false. Execution continues on line 1412 in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1406; 8: Assuming field 'fUseFisherCuts' is false in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1416; 9: Taking false branch in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1416; 10: Field 'fUseFisherCuts' is false in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1475; 11: Left side of '&&' is false in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1475; 12: Memory is allocated in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1487; 13: Loop condition is false. Execution continues on line 1503 in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1490; 14: Loop condition is false. Execution continues on line 1542 in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1503; 15: Calling 'Executor::Map' in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1576; 16: Taking false branch in /opt/root_src/tmva/tmva/inc/TMVA/Executor.h:140; 17: Calling 'TExecutorCRTP::Map' in /opt/root_src/tmva/tmva/inc/TMVA/Executor.h:141; 18: Calling 'TSequentialExecutor::MapImpl' in /opt/root_src/core/base/inc/ROOT/TExecutorCRTP.hxx:193; 19: Calling 'operator()' in /opt/root_src/core/base/inc/ROOT/TSequentialExecutor.hxx:164; 20: Assuming the condition is true in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1545; 21: Taking true branch in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1545; 22: Use of zero-allocated memory in /opt/root_src/tmva/tmva/src/DecisionTree.cxx:1558; /opt/root_src/tmva/tmva/src/Dec,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:36151,allocate,allocated,36151,https://root.cern,https://github.com/root-project/root/issues/7526,1,['allocate'],['allocated']
Energy Efficiency,"ee object, `kFlushAtCluster`, one can enter the ""one basket per event cluster"" mode. This forces baskets to line up with event clusters, at the cost of extra memory use. This new mode simplifies the basket layout within the file, reducing the amount of time handling special cases for the bulk IO mode. Because the baskets *must* grow to the size of an event cluster, we do not invoke `OptimizeBaskets` when one-basket-per-cluster mode is enabled. As this mode is expected to cause increased memory usage (the memory utilized by the `TTree` is more strongly tied to the variations in event size), we combine this with a technique borrowed from a CMS patchset to more aggressively shrink basket sizes after very large objects. The new basket shrinking algorithm will trigger whenever the basket is flushed. If the actual object size in the last clusters is significantly below the buffer size, then the basket will be shrunk. Given this tradeoff, I do not currently see this being enabled by default. The ideal ratio of `(basket buffer size)/(occupied buffer size)` is controlled by a new tunable in the `TTree`, defaulting to 1.1. A lower setting reduces overall memory usage at the cost of extra allocations; a higher setting increases aggregate memory usage. In writing out a 10k event CMS file (total CPU time is 32 minutes):. - Base case (without this patch):; - 888MB RSS; - 30 reallocations (shrinking of baskets due to low occupancy).; - 0.173ms taken for reallocation.; - New shrinking algorithm (this patch with defaults):; - 866MB RSS; - 4434 reallocations; - 97.0ms; - One basket per cluster mode with new shrinking algorithm:; - 902MB RSS; - 2882 reallocations; - 93.6ms. The CPU-time cost of the reallocation is 0.005% of total runtime (considering the file has to be read also, maybe 0.01% of output time?). This patch purposely leaves in the code that measures reallocation time in order to allow others to experiment; the intent is to disable / remove the code before a final release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/774:1178,reduce,reduces,1178,https://root.cern,https://github.com/root-project/root/pull/774,1,['reduce'],['reduces']
Energy Efficiency,"eenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462:5190,green,greenc,5190,https://root.cern,https://github.com/root-project/root/pull/5462,1,['green'],['greenc']
Energy Efficiency,"el 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes?. This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance?. The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compil",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6421:3136,Reduce,Reduced,3136,https://root.cern,https://github.com/root-project/root/issues/6421,1,['Reduce'],['Reduced']
Energy Efficiency,"ementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0; #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0; #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17; #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7; #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16; #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4; #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555); #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89); <snip/>; ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempt",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861:5709,green,greenc,5709,https://root.cern,https://github.com/root-project/root/issues/10861,1,['green'],['greenc']
Energy Efficiency,"ementation. The degradation is caused by tbb function:. tbb::internal::custom_scheduler<tbb::internal::IntelSchedulerTraits>::receive_or_steal_task(long&). I suspect the reason is because #785 in the following function:. https://github.com/zzxuanyuan/root/blob/15cceff19b48dfe4a4b0c69c1ec07ea75bd1ccb5/tree/tree/src/TTreeCacheUnzip.cxx#L708. CreateTasks() explicitly creates 2 tasks (empty_task and MappingTask; and set_ref_count(2) means 2 tasks in total). The scheduler might make a better decision here since it knows there will be only one task except empty_task running in future. On the other hand, TTaskGroup uses tbb::task_group which calls the following function:. https://github.com/01org/tbb/blob/b9805bacadd4d0474fd3358cf0c7153042ce50c3/include/tbb/task_group.h#L108. task_group_base() also first creates a empty_task. However, it only creates 1 task(itself) by setting reference count as 1 (set_ref_count(1)). When it invoke another task by calling . https://github.com/01org/tbb/blob/b9805bacadd4d0474fd3358cf0c7153042ce50c3/include/tbb/task_group.h#L103. allocate_additional_child() will create a new task as child and increment reference count by 1. I guess accumulating tasks on-the-fly might degrade the performance since the tbb scheduler could spend more time on finding tasks to work on. In a short, I think explicitly defining the total number of tasks and task graph should have better performance (more efficient for scheduler I guess) than adding more tasks to task_group as the program runs. There are two alternative approaches that might improve the performance. ; 1. Since we have already know we will only have one task (except empty_task) to add into the task_group, we could revise TTaskGroup interface and notify it what task is going to run in advance.; 2. We could get rid of TTaskGroup in my current implemention and synchronously map baskets to different tasks. If we do not mind a little performance drops, the current implementation should be fine. Thanks,. Zhe",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1010:1451,schedul,scheduler,1451,https://root.cern,https://github.com/root-project/root/pull/1010,3,"['efficient', 'schedul']","['efficient', 'scheduler']"
Energy Efficiency,"er. The new dyld is responsible for:; * Symlink resolution -- it implements a memory efficient representation of; the full path to shared objects allowing search at constant time O(1). This; also fixes issues when resolving symbols from OSX where the system libraries; contain multiple levels of symlinks.; * Bloom filter optimization -- it uses a stohastic data structure which gives; a definitive answer if a symbol is not in the set. The implementation checks; the .gnu.hash section in ELF which is the GNU implementation of a bloom; filter and uses it. If the symbol is not in the bloom filter, the; implementation builds its own and uses it. The measured performance of the; bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on; top of the .gnu.hash filter gives 1-2% better performance.; The advantage for the custom bloom filter is that it works on all; implementations which do not support .gnu.hash (windows and osx). It is also; customizable if we want to further reduce the false positive rates; (currently at p=2%).; * Hash table optimization -- we build a hash table which contains all symbols; for a given library. This allows us to avoid the fallback symbol iteration; if multiple symbols from the same library are requested. The hash table; optimization targets to optimize the case where the bloom filter tells us; the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me!. Performance Report; ===. |platform|test|PCH-time|Module-time|Module-PR-time|; |:--------|:---|:---------:|:-----------:|:---------------|; |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|; |osx 10.14| roottest-cling| 589,67|452,97|307,34|; |osx 10.14| roottest-python| 377,69|475,78|311,5|; |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|; |osx 10.14| roottest-root-math| 106,18|140,41|73,96|; |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|; |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|; |osx 10.15| root-io-stdarray| ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4717:1145,reduce,reduce,1145,https://root.cern,https://github.com/root-project/root/pull/4717,1,['reduce'],['reduce']
Energy Efficiency,"ery strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp ; ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);; auto mapFunction = [](unsigned i){return 1u;};; auto reductionFunction = [](const std::vector<unsigned> &v) {; return std::accumulate(v.begin(), v.end(), 0u);; };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSeq<unsigned>(20), reductionFunction);; ```. **TLDR;** This PR changes the behaviour of existing executors and introduces; new ones:. * TExecutor: changes its functionality to be a general Executor, while; TExecutorBaseImpl takes the role of the previous TExecutor. TExecutor; now acts as a general interface to the executors. The executor it will; resolve to is specified by a execution policy parameter in its; constructor. * TExecutorBaseImpl: Plays the previous role of TExecutor. * TSequentialExecutor: provides a sequential implementation of the; executor model, defined by TExecutorBaseImpl. This PR is not finished, but I'm opening it for discussion. Things left:; - [x] Change kSerial to kSequential. - [x] Move Execution Policies to ROOT::Internal. - [x] Adapt Fitting functions to use the new TExecutor instead of if statements. A test can be found here: https://github.com/root-project/roottest/pull/106",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1312:2720,Adapt,Adapt,2720,https://root.cern,https://github.com/root-project/root/pull/1312,1,['Adapt'],['Adapt']
Energy Efficiency,"example usage:. ```c++; ROOT::Experimental::TDataFrame d(""reduceTree"", &f, {""i""});; auto r = d.Reduce([](int a, int b) { return a + b; }, {""i""}); // sum all branch values; auto rDefBranch = d.Filter([]() { return true; }); .Reduce([](int a, int b) { return a*b; }, {}, 1); // multiply all branch values. ```. A PR with a unit test has been submitted to the roottest repo.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/357:58,reduce,reduceTree,58,https://root.cern,https://github.com/root-project/root/pull/357,3,"['Reduce', 'reduce']","['Reduce', 'reduceTree']"
Energy Efficiency,"ference to `tbb::detail::r1::max_concurrency(tbb::detail::d1::task_arena_base const*)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x5c7): undefined reference to `tbb::detail::r1::execute_and_wait(tbb::detail::d1::task&, tbb::detail::d1::task_group_context&, tbb::detail::d1::wait_context&, tbb::detail::d1::task_group_context&)'; /usr/bin/ld: CMakeFiles/Imt.dir/src/TThreadExecutor.cxx.o: in function `tbb::detail::d1::task_arena_function<ROOT::Internal::ParallelReduceHelper<double>(std::vector<double, std::allocator<double> > const&, std::function<double (double, double)> const&)::{lambda()#2}, double>::operator()() const':; TThreadExecutor.cxx:(.text+0x674): undefined reference to `tbb::detail::r1::initialize(tbb::detail::d1::task_group_context&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x686): undefined reference to `tbb::detail::r1::destroy(tbb::detail::d1::task_group_context&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x6f3): undefined reference to `tbb::detail::r1::allocate(tbb::detail::d1::small_object_pool*&, unsigned long)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x73a): undefined reference to `tbb::detail::r1::max_concurrency(tbb::detail::d1::task_arena_base const*)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x787): undefined reference to `tbb::detail::r1::execute_and_wait(tbb::detail::d1::task&, tbb::detail::d1::task_group_context&, tbb::detail::d1::wait_context&, tbb::detail::d1::task_group_context&)'; /usr/bin/ld: CMakeFiles/Imt.dir/src/TThreadExecutor.cxx.o: in function `tbb::detail::d1::start_reduce<tbb::detail::d1::blocked_range<__gnu_cxx::__normal_iterator<float const*, std::vector<float, std::allocator<float> > > >, tbb::detail::d1::lambda_reduce_body<tbb::detail::d1::blocked_range<__gnu_cxx::__normal_iterator<float const*, std::vector<float, std::allocator<float> > > >, float, ROOT::Internal::ParallelReduceHelper<float>(std::vector<float, std::allocator<float> > const&, std::function<float (float, float)> const&)::{lambda(tbb::detail::d1::blocked_range<",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11931:11478,allocate,allocate,11478,https://root.cern,https://github.com/root-project/root/issues/11931,1,['allocate'],['allocate']
Energy Efficiency,"finally working. This patch enables ROOT to preload all modules at startup time. In my; environment, this patch fixes 14 tests for runtime cxxmodules. Preloading all the modules has several advantages. 1. We do not have to; rely on rootmap files which don't support some features (namespaces and; templates) 2. Lookup would be faster because we don't have to do; trampoline via rootmap files. The only disadvantage of preloading all the modules is the startup time performance.; `root.exe -q -l memory.C`; This is a release build without modules:; ```; cpu time = 0.091694 seconds; sys time = 0.026187 seconds; res memory = 133.008 Mbytes; vir memory = 217.742 Mbytes; ```; This is a release build with modules, with this patch:; ```; cpu time = 0.234134 seconds; sys time = 0.066774 seconds; res memory = 275.301 Mbytes; vir memory = 491.832 Mbytes; ```; As you can see, preloading all the modules makes both time and memory 2; to 3 times worse **at a startup time**. **Edit** : With hsimple.C; `root.exe -l -b tutorials/hsimple.C -q ~/CERN/ROOT/memory.C`; Release build without modules:; ```; Processing tutorials/hsimple.C... ; hsimple : Real Time = 0.04 seconds Cpu Time = 0.05 seconds ; (TFile *) 0x555ae2a9d560 ; Processing /home/yuka/CERN/ROOT/memory.C... ; cpu time = 0.173591 seconds ; sys time = 0.011835 seconds ; res memory = 135.32 Mbytes ; vir memory = 209.664 Mbytes ; ```; Release build with modules, with this patch:; ```; Processing tutorials/hsimple.C...; hsimple : Real Time = 0.04 seconds Cpu Time = 0.04 seconds; (TFile *) 0x55d1b036d230; Processing /home/yuka/CERN/ROOT/memory.C...; cpu time = 0.290742 seconds; sys time = 0.043851 seconds; res memory = 256.844 Mbytes; vir memory = 438.484 Mbytes; ```. However, it is a matter of course that we get slower startup time if we; try to load all the modules at startup time, not on-demand. I haven't had a good benchmark for this but, in theory, it reduces execution time instead as we're anyway loading modules after the startup.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1814:2131,reduce,reduces,2131,https://root.cern,https://github.com/root-project/root/pull/1814,1,['reduce'],['reduces']
Energy Efficiency,functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/io/sql/src/TBufferSQL2.cxx:1871; /opt/root_src/io/sql/src/TBufferSQL2.cxx:1894:21: warning: Use of zero-allocated memory [clang-analyzer-cplusplus.NewDelete]; 1: Assuming field 'fIOVersion' is < 2 in /opt/root_src/io/sql/src/TBufferSQL2.cxx:1879; 2: Taking true branch in /opt/root_src/io/sql/src/TBufferSQL2.cxx:1879; 3: Assuming 'nwh' is not equal to 0 in /opt/root_src/io/sql/src/TBufferSQL2.cxx:1885; 4: Taking false branch in /opt/root_src/io/sql/src/TBufferSQL2.cxx:1885; 5: Assuming 'nwh' is equal to 255 in /opt/root_src/io/sql/src/TBufferSQL2.cxx:1888; 6: Taking true branch in /opt/root_src/io/sql/src/TBufferSQL2.cxx:1888; 7: Memory is allocated in /opt/root_src/io/sql/src/TBufferSQL2.cxx:1893; 8: Use of zero-allocated memory in /opt/root_src/io/sql/src/TBufferSQL2.cxx:1894; /opt/root_src/io/sql/src/TSQLFile.cxx:386:7: warning: Value stored to 'recreate' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'recreate' is never read in /opt/root_src/io/sql/src/TSQLFile.cxx:386; /opt/root_src/io/xml/src/TBufferXML.cxx:764:41: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Assuming the condition is false in /opt/root_src/io/xml/src/TBufferXML.cxx:2390; 2: Taking false branch in /opt/root_src/io/xml/src/TBufferXML.cxx:2390; 3: Assuming 'gDebug' is > 1 in /opt/root_src/io/xml/src/TBufferXML.cxx:2402; 4: Taking true branch in /opt/root_src/io/xml/src/TBufferXML.cxx:2402; 5: Assuming 'cl' is null in /opt/root_src/io/xml/src/TBufferXML.cxx:2403; 6: '?' condition is false in /opt/root_src/io/xml/src/TBufferXML.cxx:2403; 7: Calling 'TBuffer::IsReading' in /opt/root_src/io/xml/src/TBuffer,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:120270,allocate,allocated,120270,https://root.cern,https://github.com/root-project/root/issues/7431,1,['allocate'],['allocated']
Energy Efficiency,"g at any time may be lower than the limit due to demand on the CPU. 3. The 'Real Time' is similar to 'CPU Time / number of threads' AND 'Compressed Throughput' is lower than expected for your storage medium:; This would imply that your CPU threads aren't decompressing data as fast as your storage medium can provide it, and so decompression is the bottleneck. The best way to decrease your runtime would be to utilise a system with a faster CPU, or make use use of more threads when running, or use a compression algorithm with a higher decompression rate such as LZ4, possibly at the cost of some extra file size. A note on caching:. If your data is stored on a local disk, the system may cache some/all of the file in memory after it is first read. If this is realistic of how your analysis will run - then there is no concern. However, if you expect to only read files once in a while - and as such the files are unlikely to be in the cache - consider clearing the cache before running rootreadspeed. On Linux this can be done by running `echo 3 > /proc/sys/vm/drop_caches` as a superuser or a specific file can be dropped from the cache with `dd of=<FILENAME> oflag=nocache conv=notrunc,fdatasync count=0 > /dev/null 2>&1`. Known overhead of TTreeReader, RDataFrame:. rootreadspeed is designed to read all data present in the specified branches, trees and files at the highest possible speed. When the application bottleneck is not in the computations performed by analysis logic, higher-level interfaces built on top of TTree such as TTreeReader and RDataFrame are known to add a significant runtime overhead with respect to the runtimes reported by rootreadspeed (up to a factor 2). In realistic analysis applications it has been observed that a large part of that overhead is compensated by the ability of TTreeReader and RDataFrame to read branch values selectively, based on event cuts, and this overhead will be reduced significantly when using RDataFrame in conjunction with RNTuple.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14039:6451,reduce,reduced,6451,https://root.cern,https://github.com/root-project/root/pull/14039,1,['reduce'],['reduced']
Energy Efficiency,"g::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0; #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0; #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17; #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7; #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16; #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4; #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555); #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89); <snip/>; ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error on master (https://github.com/root-project/root/tree/7b7983fa8ab9e1a4af98776f7f80bea1f9b2b0b0).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861:6060,green,greenc,6060,https://root.cern,https://github.com/root-project/root/issues/10861,1,['green'],['greenc']
Energy Efficiency,"g; `RNTupleView` advertises a defaulted move constructor, but unconditionally frees state in it's destructor causing a double free in the destructor of the second instance. This is caused by the call to `fField.DestroyValue(fValue);` in the dtor. `fValue` is copyable and moveable since the copy special member functions are not deleted, but contains pointers to allocated memory which are not duplicated during copies or transferred during a move (with leaving the moved from pointer `nullptr`) and thus shared between two instances of `RNTupleView`. Although the documentation of `RFieldValue`, the type of `fValue`, claims that the class owns no memory, the class receives a heap allocated value during the call chain of the constructor initialization list of `RNTupleView`: `fValue(fField.GenerateValue())`. Since the ownership model is convoluted to me, I cannot propose an easy fix. From the perspective of `RNTupleView`, `RFieldValue` would need a user-defined move ctor transferrign ownership of the heap-allocated pointer and `RNTupleView`'s dtor needs to be able to detect and handle a moved-from state. But the former is against the documented intent of the class, so I need to leave this to the designers of those classes :). ### Expected behavior; The move ctor of `RNTupleView` should let the dtors of both `RNTupleView` instances finish correctly. ### To Reproduce. Example:; ```c++; auto ntuple = RE::RNTupleReader::Open(RE::RNTupleModel::Create(), ""DecayTree"", ""B2HHH~none.ntuple"");; {; auto viewH1IsMuon = ntuple->GetView<int>(""H1_isMuon"");; {; auto copy{std::move(viewH1IsMuon)};; } // dtor for copy, frees shared state; } // dtor for viewH1IsMuon, double free; ```. I assume the problem does not depend on the input file, so it can probably be reproduced in a smaller setup. ### Setup; ```; bgruber@graviola:$ root --version; ROOT Version: 6.29/01; Built for linuxx8664gcc on Jan 16 2023, 14:47:00; From remotes/origin/HEAD@v6-29-01-212-gc8ad008463; ```; Built with g++-12 on Ubunt",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12136:1032,allocate,allocated,1032,https://root.cern,https://github.com/root-project/root/issues/12136,1,['allocate'],['allocated']
Energy Efficiency,"gDirectory is now backed by an atomic thread local pointer so that the thread deleting a TFile can update other thread's gDirectory.; TDirectory now has a `std::vector<std::atomic<TDirectory*>*>` to keep track of the gDirectory's thread local pointing to the TDirectory.; TDirectory::TContext was already thread safe.; gDirectory is a macro that now actualy 'return' a TDirectoryAtomicAdapter which provides an adaption from std::atomic<TDirectory*> to the; outstanding usage (i.e. behave somewhat like a TDirectory*).; TDirectory::CurrentDirectory now returns a reference to a `std::atomic<TDirectory*>`. Note: due to the actual (but intended to be unnoticeable) change in the type of gDirectory, there is no plan to backport this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6952:411,adapt,adaption,411,https://root.cern,https://github.com/root-project/root/pull/6952,1,['adapt'],['adaption']
Energy Efficiency,"get a report with many warnings. - Some of them look unimportant; - Some of them could be auto-fixed by Clang; - Some of them look like real errors.; ; For example, in the file clingwrapper.cxx, obj is not deleted if WrapperCall returns false, which seems to lead to a leak:. ```; Cppyy::TCppObject_t Cppyy::CallO(TCppMethod_t method,; TCppObject_t self, size_t nargs, void* args, TCppType_t result_type); {; TClassRef& cr = type_from_handle(result_type);; void* obj = ::operator new(gInterpreter->ClassInfo_Size(cr->GetClassInfo()));; if (WrapperCall(method, nargs, args, self, obj)); return (TCppObject_t)obj;; return (TCppObject_t)0;; }; ```. ```; /opt/root_src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:889:26: warning: Potential leak of memory pointed to by 'obj' [clang-analyzer-cplusplus.NewDeleteLeaks]; 1: Calling 'CallO' in /opt/root_src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:2290; 2: Memory is allocated in /opt/root_src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:886; 3: Taking false branch in /opt/root_src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:887; 4: Potential leak of memory pointed to by 'obj' in /opt/root_src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:889; ```. My question is: how should I report them? In separate issues for each CMake subdirectory? All in the same Ticket? Or do the devs prefer to run it by themselves for easier check?. Concerning things as ""0 as nullptr"", would you accept a PR that fixes all of these across ROOT at the same time, see here https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-nullptr.html, or you prefer to keep with the old convention of using 0 ?. ### To Reproduce; - Install QtCreator; - Click on File, Import File or Project, click on the main CMakeLists.txt of the ROOT source git repository.; - Build; - Tool, Run Clang & Tidy Analyzer. ### Setup; 1. ROOT 6.23/01; 2. Ubuntu 18; 3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7400:1105,allocate,allocated,1105,https://root.cern,https://github.com/root-project/root/issues/7400,1,['allocate'],['allocated']
Energy Efficiency,"get energy and transverse energy; float e();; float et();; };; ```. * Now, consider 3 stages of evolution for Position:. 1. Simplest implementation is to have Cartesian coordinates as private attributes;. 2. The users find that they most often use radius and azimuth, hence decide to store spherical coordinates instead of (x,y,z);. 3. Actually, colliders use eta more often than theta, so that the internal state is now given by (r, phi, eta). * In parallel and independently, Hit also evolves:. a. Simplest implementation is to have only the energy as private member;. b. Because the number of requests for the transverse energy is very high, the users want to optimize the speed by keeping Et as private member;. c. Well, it happens that disk space is short and e() is rarely called, so that it makes sense to reduce the size of the Hit class by dropping the energy member and computing the energy just when calling the method e(). They also found that the detector parameters used to store data in version b are wrong, so that one needs to scale the energy by 1.3 only for version b (a and c are correct). Could you please provide a working example in which data are saved and fetched with different combinations of (1, 2, 3)x(a, b, c) (at least with 1a, 2b, 3c)?. * The next step is to consider collections of objects:. i) define. ```cpp; class Track { /* particle trajectory */. private:; std::vector< Hit > m_hits;. };; ```. ii) Because the crazy developers of Hit decided to make such class variable size, one needs to store a vector of pointers instead of objects:. ```cpp; class Track { /* particle trajectory */. private:; std::vector< Hit* > m_hits;. };; ```. iii) Disk space is very short! We cannot waste the single 32-bits word used by the STL vector... ```cpp; class Track { /* particle trajectory */. private:; unsigned int m_Nhits;; Hit* m_hits; //[m_Nhits]. };; ```. Please, provide some working example that shows how to write and read all these 3 evolutions of Track (you may use",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14540:1669,energy,energy,1669,https://root.cern,https://github.com/root-project/root/issues/14540,1,['energy'],['energy']
Energy Efficiency,"gs . ***********************************************************************************. # Previous behaviour; Previous to this PR, the number of threads was limited during the lifetime of the tbb scheduler, kept alive by TPoolManager as a ```std::shared_ptr``` as long as references to it existed, to the value set on its initialization. ```cpp; //We initialize the scheduler with 4 threads; ROOT::EnableIMT(4);; { ; //The scheduler is active, so the value passed to TThreadExecutor; //is overriden with the number of threads the scheduler has been; //initialized with (4); TThreadExecutor executor(9);; }; ROOT::DisableIMT();. //The scheduler is not alive at this point, ; //so we initialize it with 2 threads; ROOT::EnableIMT(2);; ROOT::TThreadExecutor executor(8);; ROOT::DisableIMT();. executor.MapReduce(...); //Runs on two threads!. ROOT::EnableIMT(3);; //Still two threads! TThreadExecutor instance was keeping the scheduler alive; ```; This also implies that given two co-existent instances of TThreadExecutor initialized with a different number of threads, the first one to be initialized forces on the second one the number of threads to work with. ```cpp; ROOT::TThreadExecutor executor(4);; ROOT::TThreadExecutor executor2(8); //will run limited to two threads!!; ```; This setup was useful [to avoid undefined behaviours between the implicit and explicit parallelism modes of ROOT](https://indico.cern.ch/event/607814/contributions/2466931/attachments/1409778/2155811/TScheduler.pdf). . # New behaviour; With this PR, we can separate this two modes of execution. We support the co-existance of several TThreadExecutors, each handling a different number of threads, by initializing the scheduler with the [default number of threads](tbb::task_scheduler_init::default_num_threads) and using a ```tbb::task_arena``` per TThreadExecutor to work with a subset of them instead. ```cpp. //Each of the executor manages its own tbb::task_arena,; //which allows the co-existance of TThreadExecut",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2389:1539,schedul,scheduler,1539,https://root.cern,https://github.com/root-project/root/pull/2389,1,['schedul'],['scheduler']
Energy Efficiency,h analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/io/xml/src/TBufferXML.cxx:2535; /opt/root_src/io/xml/src/TBufferXML.cxx:2558:21: warning: Use of zero-allocated memory [clang-analyzer-cplusplus.NewDelete]; 1: Assuming the condition is true in /opt/root_src/io/xml/src/TBufferXML.cxx:2543; 2: Taking true branch in /opt/root_src/io/xml/src/TBufferXML.cxx:2543; 3: Assuming 'nwh' is not equal to 0 in /opt/root_src/io/xml/src/TBufferXML.cxx:2549; 4: Taking false branch in /opt/root_src/io/xml/src/TBufferXML.cxx:2549; 5: Assuming 'nwh' is equal to 255 in /opt/root_src/io/xml/src/TBufferXML.cxx:2552; 6: Taking true branch in /opt/root_src/io/xml/src/TBufferXML.cxx:2552; 7: Memory is allocated in /opt/root_src/io/xml/src/TBufferXML.cxx:2557; 8: Use of zero-allocated memory in /opt/root_src/io/xml/src/TBufferXML.cxx:2558; /opt/root_src/io/xml/src/TXMLEngine.cxx:134:10: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Assuming 'res' is not equal to null in /opt/root_src/io/xml/src/TXMLEngine.cxx:1449; 2: Left side of '||' is false in /opt/root_src/io/xml/src/TXMLEngine.cxx:1449; 3: Assuming 'xmlnode' is not equal to null in /opt/root_src/io/xml/src/TXMLEngine.cxx:1449; 4: Taking false branch in /opt/root_src/io/xml/src/TXMLEngine.cxx:1449; 5: Calling constructor for 'TXMLOutputStream' in /opt/root_src/io/xml/src/TXMLEngine.cxx:1452; 6: Null pointer value stored to 'out.fOut' in /opt/root_src/io/xml/src/TXMLEngine.cxx:89; 7: Returning from constructor for 'TXMLOutputStream' in /opt/root_src/io/xml/src/TXMLEngine.cxx:1452; 8: Calling 'TXMLEngine::SaveNode' in /opt/root_src/io/xml/src/TXMLEngine.cxx:1454; 9: 'xmlnode' is not equal to null in /opt/r,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:128551,allocate,allocated,128551,https://root.cern,https://github.com/root-project/root/issues/7431,1,['allocate'],['allocated']
Energy Efficiency,"had issues with dictionary operations; sometimes failing with clang assertions. When this happens, it is; of course only in the debug build; in the optimized build,; everything seems to work fine. The problem; is related to the ordering in which dictionaries are loaded --- we can; usually make the crashes go away by forcing a particular dictionary; loading order. This appears to be related to the traits-like class that we use to specify; the inheritance relations for our DataVector class. Schematically, it looks; like this:. ```; struct NoBase {};. template <class T>; struct DataVectorBase; {; typedef NoBase Base;; };. // Specialized derived version.; template <class T, class BASE = typename DataVectorBase<T>::Base>; class DataVector : public BASE {...};. // Base class version.; template <class T>; class DataVector<T, NoBase> {...};; ```. where user classes then specialize the DataVectorBase class; (in practice, done via a macro). I've now finally bit the bullet and reduced one example of this such that; it does not depend on ATLAS software. The test case is attached. If github still isn't allowing be to attach; archives, i've also put a copy on lxplus at ~ssnyder/public/fwddict-crash.tar. The set up is against a nightly debug build of 6.28-patches:. ```; $ . ./setup; $ echo $ROOTSYS; /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Sat/ROOT/v6-28-00-patches/x86_64-el9-gcc13-dbg; $ ./build.sh ; $ python -i test.py; python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/Sema/SemaLookup.cpp:2165: bool clang::Sema::LookupQualifiedName(clang::LookupResult&, clang::DeclContext*, bool): Assertion `(!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext() || cast<TagDecl>(LookupCtx)->isCompleteDefinition() || cast<TagDecl>(LookupCtx)->isBeingDefined()) && ""Declaration context must already be complete!""' failed.; *** Break *** abort; ```. The test script here is loading dicti",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14186:1091,reduce,reduced,1091,https://root.cern,https://github.com/root-project/root/issues/14186,1,['reduce'],['reduced']
Energy Efficiency,"he category class. **For reviewers**:; Although there is a lot of noise, that's mostly getting rid of unnecessary classes. The user-facing interfaces are stable (to be proven by the fact that all the rest of RooFit still compiles, and that tutorials run).; This is the chance to modernise/improve the `RooCategory` interface. It would be nice if you could specifically look at `RooCategory.h`, maybe in conjunction with the modernised tutorial on how they can be used in the future:; https://github.com/hageboeck/root/blob/cleanupCategories/tutorials/roofit/rf404_categories.C. More details what happened:; - Replace RooCatType by an integer.; - Replace names saved in each instance of RooCatType by a map in; RooAbsCategory that maps state numbers to strings. This saves 64 bytes; + the size of TObject for each event, and makes loading strings in each; event unnecessary.; - Convert RooVectorDataStore from saving RooCatType to integers of; category states.; - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Provide new interfaces for categories to work without RooCatType.; - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since; derived category classes might need to recompute their shapes if one; of their input categories change.; - Add function to define multiple category states at once with; initialiser lists. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen.; - Stop including RooCatType when R__LESS_INCLUDES is set.; - Flag legacy interface with R__SUGGEST_ALTERNATIVE.; - Create RooCatType instances on-demand in case users continue to use; the legacy interface. - Consolidate RooMultiCategory and RooSuperCategory. These share almost; all the code, so RooSuperCategory will now use a RooMultiCategory for; state definition and retrieval. The only additional functionality for; RooSuperCategory is that it can assign states to its subcategories. - Replace ineffective assert(0) by throws.; - Deprecate RooCategorySh",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5219:1507,reduce,reduce,1507,https://root.cern,https://github.com/root-project/root/pull/5219,1,['reduce'],['reduce']
Energy Efficiency,"hi -. We're seeing a problem with the pythonization of std::vector::operator==; with root 6.28.00 (at least with the version being built in dev4). This was originally reported in the ATLAS context as ATEAM-885,; but i have reduced it here to a standalone reproducer in the attached; archive. The included setup script should be appriate for lxplus7.; Run:. $ . ./setup; $ ./build.sh; $ python test.py. and it gives the errors:. IncrementalExecutor::executeFunction: symbol '_ZNSt7__equalILb0EE5equalIPK4TestS4_EEbT_S5_T0_' unresolved while linking symbol '__cf_13'!; You are probably missing the definition of bool std::__equal<false>::equal<Test const*, Test const*>(Test const*, Test const*, Test const*); Maybe you need to load the corresponding shared library?. thanks,; sss. [pythonization-bug2.zip](https://github.com/root-project/root/files/10867231/pythonization-bug2.zip)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12406:223,reduce,reduced,223,https://root.cern,https://github.com/root-project/root/issues/12406,1,['reduce'],['reduced']
Energy Efficiency,"https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2956/testReport/projectroot.roottest.python/distrdf/roottest_python_distrdf_spark_test_reducer_merge/. This kind of warning is apparently common in Python unittests that use socket, both with [pyspark](https://stackoverflow.com/questions/49361286/unittesting-with-pyspark-unclosed-socket-warnings) and [others](https://stackoverflow.com/questions/14938716/socket-resourcewarning-using-urllib-in-python-3). The reason they are shown is that in Python3 the unittest module has been updated to use the ""default"" level of warnings filters, as mentioned [in the docs](https://docs.python.org/3.5/library/warnings.html#updating-code-for-new-versions-of-python). For the particular case of `pyspark`, these warnings are actually present in any application that uses the same ""default"" level:; ```py; $: cat sparktest.py ; import pyspark; import warnings. warnings.simplefilter(""default"", ResourceWarning). sc = pyspark.SparkContext.getOrCreate(). sc.parallelize([1,2,3,4,5]).map(lambda x: 1).reduce(lambda x,y: x+y); ```. ```bash; $: python sparktest.py ; 21/08/30 11:04:59 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).; /usr/lib64/python3.8/socket.py:740: ResourceWarning: unclosed <socket.socket fd=7, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6, laddr=('127.0.0.1', 35374), raddr=('127.0.0.1', 36167)>; self._sock = None; ResourceWarning: Enable tracemalloc to get the object allocation traceback; ```. This commit adds an extra call in the setup part of unittests that use pyspark, to ignore these warnings. The default level for the warnings is restored after the tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8938:1206,reduce,reduce,1206,https://root.cern,https://github.com/root-project/root/pull/8938,1,['reduce'],['reduce']
Energy Efficiency,https://sft.its.cern.ch/jira/browse/ROOT-7818; https://sft.its.cern.ch/jira/browse/ROOT-7721; https://sft.its.cern.ch/jira/browse/ROOT-7654; https://sft.its.cern.ch/jira/browse/ROOT-7319; https://sft.its.cern.ch/jira/browse/ROOT-7285; Possibly more... Adapted from:; http://pkgs.fedoraproject.org/cgit/llvm.git/tree/0001-add-gcc-abi_tag-support.patch,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/124:252,Adapt,Adapted,252,https://root.cern,https://github.com/root-project/root/pull/124,1,['Adapt'],['Adapted']
Energy Efficiency,i.e. allocate enough memory for the data!,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1999:5,allocate,allocate,5,https://root.cern,https://github.com/root-project/root/pull/1999,1,['allocate'],['allocate']
Energy Efficiency,"iate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00007fffe26b2ba8 in TClingClassInfo::TClingClassInfo (this=0x3e04b90, interp=0x77e5d0, name=0x6a1ad0 ""art::Wrapper<art::Assns<string,int,void> >"") at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TClingClassInfo.cxx:95. #2",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462:5677,green,greenc,5677,https://root.cern,https://github.com/root-project/root/pull/5462,1,['green'],['greenc']
Energy Efficiency,"ield *>(f)) {; + entry->AddValue(f->BindValue(std::shared_ptr<void>(collectionField->fCollectionWriter->GetOffsetPtr(), [](void *) {})));; + } else {; + entry->AddValue(f->CreateValue());; + }; }; return entry;; }; ```; This makes the example work with a single non-default `REntry`, but highlights another problem: There is a 1:1 association of the `RCollectionNTupleWriter` to the `RCollectionField`, which prevents multiple `REntry`'s from working:; <details>; <summary>Full code example</summary>. ```c++; #include <ROOT/REntry.hxx>; #include <ROOT/RNTuple.hxx>; #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;; using ROOT::Experimental::RNTupleModel;; using ROOT::Experimental::RNTupleReader;; using ROOT::Experimental::RNTupleWriter;. static void write() {; auto particleModel = RNTupleModel::CreateBare();; particleModel->MakeField<float>(""energy"");. particleModel->Freeze();; auto particleEntry1 = particleModel->CreateEntry();; auto energy1 = particleEntry1->GetPtr<float>(""energy"");; auto particleEntry2 = particleModel->CreateEntry();; auto energy2 = particleEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();; auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");; auto entry1 = writer->CreateEntry();; auto entry2 = writer->CreateEntry();. *energy1 = 1.0;; particles->Fill(*particleEntry1);. *energy2 = 1.0;; particles->Fill(*particleEntry2);. *energy2 = 2.0;; particles->Fill(*particleEntry2);. *energy2 = 3.0;; particles->Fill(*particleEntry2);. *energy1 = 2.0;; particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;; particles->Fill(*particleEntry1);. writer->Fill(*entry1);; }. void collection_entry_multiple() {; write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");; reader->Show(0);; reader->Show(1);; }. int main() {; collection_entry_multiple();; return 0;; }; ```; </d",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14642:4216,energy,energy,4216,https://root.cern,https://github.com/root-project/root/issues/14642,2,['energy'],['energy']
Energy Efficiency,"il::d1::blocked_range<__gnu_cxx::__normal_iterator<float const*, std::vector<float, std::allocator<float> > > >, tbb::detail::d1::lambda_reduce_body<tbb::detail::d1::blocked_range<__gnu_cxx::__normal_iterator<float const*, std::vector<float, std::allocator<float> > > >, float, ROOT::Internal::ParallelReduceHelper<float>(std::vector<float, std::allocator<float> > const&, std::function<float (float, float)> const&)::{lambda(tbb::detail::d1::blocked_range<__gnu_cxx::__normal_iterator<float const*, std::vector<float, std::allocator<float> > > > const&, float)#1}, std::function<float (float, float)> >, tbb::detail::d1::auto_partitioner const>::execute(tbb::detail::d1::execution_data&)':; TThreadExecutor.cxx:(.text+0xce4): undefined reference to `tbb::detail::r1::allocate(tbb::detail::d1::small_object_pool*&, unsigned long, tbb::detail::d1::execution_data const&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0xd8d): undefined reference to `tbb::detail::r1::allocate(tbb::detail::d1::small_object_pool*&, unsigned long, tbb::detail::d1::execution_data const&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0xdc5): undefined reference to `tbb::detail::r1::spawn(tbb::detail::d1::task&, tbb::detail::d1::task_group_context&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0xf22): undefined reference to `tbb::detail::r1::deallocate(tbb::detail::d1::small_object_pool&, void*, unsigned long, tbb::detail::d1::execution_data const&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x11e2): undefined reference to `tbb::detail::r1::is_group_execution_cancelled(tbb::detail::d1::task_group_context&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x123c): undefined reference to `tbb::detail::r1::execution_slot(tbb::detail::d1::execution_data const*)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x124d): undefined reference to `tbb::detail::r1::execution_slot(tbb::detail::d1::execution_data const*)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x126a): undefined reference to `tbb::detail::r1::execution_slot(tbb::detail::d1::e",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11931:16924,allocate,allocate,16924,https://root.cern,https://github.com/root-project/root/issues/11931,1,['allocate'],['allocate']
Energy Efficiency,"in addition, adapt tests accordingly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1497:13,adapt,adapt,13,https://root.cern,https://github.com/root-project/root/pull/1497,1,['adapt'],['adapt']
Energy Efficiency,in order to reduce the deserialisations which happen at ROOT startup.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1791:12,reduce,reduce,12,https://root.cern,https://github.com/root-project/root/pull/1791,1,['reduce'],['reduce']
Energy Efficiency,"in the context of this synchronization. - https://github.com/wlav/CPyCppyy/pull/11; - https://github.com/wlav/CPyCppyy/pull/12; - https://github.com/wlav/CPyCppyy/pull/14; - https://github.com/wlav/CPyCppyy/pull/16 *(was in PyROOT before)*; - https://github.com/wlav/CPyCppyy/pull/17 *(was in PyROOT before)*; - https://github.com/wlav/cppyy-backend/pull/20 *(was in PyROOT before)*; - https://github.com/wlav/CPyCppyy/pull/18; - https://github.com/wlav/CPyCppyy/pull/19; - https://github.com/wlav/CPyCppyy/pull/21; - https://github.com/wlav/CPyCppyy/pull/22; - https://github.com/wlav/CPyCppyy/pull/23. ## Performance validation. To validate the performance, I ran the [Python tests in roottest](https://github.com/root-project/roottest/tree/master/python) and the [PyROOT pythonization tests](https://github.com/root-project/root/tree/master/bindings/pyroot/pythonizations/test) and compared runtimes with and without the cppyy upgrade. The total runtime of these tests reduced by about 4 % from 208 s to 287 s, so the performance impact of this PR is marginal. The runtime comparison for each test can be found in [cppyy_upgrade_test_runtimes.txt](https://github.com/root-project/root/files/14623432/cppyy_upgrade_test_runtimes.txt).; The worst observed performance penalty is 24 %. However, significant speedups are observed in some of the longer tests. For convenience, the 20 tests with the longest runtime are listed here:; ```; title no_cppyy_upgrade cppyy_upgrade ratio; python-regression-regression 32.61 34.30 1.051825; pyroot-pyz-rdataframe-asnumpy 14.30 14.61 1.021678; pyroot-pyz-rdataframe-makenumpy 13.66 9.65 0.706442; python-function-function 12.27 11.08 0.903015; python-cpp-cpp 12.03 11.26 0.935993; python-cpp-advanced 11.55 10.83 0.937662; pyroot-pyz-rdataframe-histo-profile 11.24 7.37 0.655694; python-basic-basic 10.11 9.95 0.984174; python-stl-stl 8.35 7.87 0.942515; pyroot-pyz-rtensor 6.94 2.32 0.334294; python-ttree-ttree 6.15 5.70 0.926829; python-basic-datatype 5.87 5.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14507:3077,reduce,reduced,3077,https://root.cern,https://github.com/root-project/root/pull/14507,1,['reduce'],['reduced']
Energy Efficiency,"ing since moving to ROOT 6.32 on AlmaLinux 9.4. It worked fine with 6.20.04 running on Centos7. The library for accessing the TTree information was created using MakeProject. . ### Reproducer. This is the python code that crashes; ```; #!/usr/bin/env python3; import os; import ROOT; import argparse. parser = argparse.ArgumentParser(description='Analyse events.'); parser.add_argument(""inputfile""); parser.add_argument(""-o"",""--outputfile"",default=""Output.root"",help=""Name of output file""); args = parser.parse_args(). READEVENTANALYSISLIBRARY=ROOT.gSystem.Getenv(""READEVENTANALYSISLIBRARY"");; ROOT.gSystem.Load(READEVENTANALYSISLIBRARY);. globalRecon = ROOT.TChain(""ReconDir/Global""); globalRecon.AddFile(args.inputfile). OutputFile = ROOT.TFile(args.outputfile,""RECREATE"",""ND280 Analysis""); hTrackMomenta = ROOT.TH1F(""TrackMomenta"", ""Charged Track Momentum"", 100, 0, 1000.0). entries = globalRecon.GetEntries(); for entry in range(entries):; 	print("" entry = ""+str(entry)); 	ientry = globalRecon.LoadTree(entry); 	if ientry < 0:; 		break; 	nb = globalRecon.GetEntry(entry); 	if nb<=0:; 		continue; 	; 	for	pid in globalRecon.PIDs :; 		if(pid.Charge != 0) :; 			print("" charge is ""+str(pid.Charge)); 		#	hTrackMomenta.Fill(pid.FrontMomentum); OutputFile.Write(); OutputFile.Close(); ```. The crash traceback suggest this as the line causing the crash:. #7 0x00007fe963a68e9a in TBranchElement::ReadLeavesClones(TBuffer&) () from /home/aleph/ajf/t2k/root/lib/libTree.so; #8 0x00007fe963a60899 in TBranch::GetEntry(long long, int) () from /home/aleph/ajf/t2k/root/lib/libTree.so; #9 0x00007fe963a7326b in TBranchElement::GetEntry(long long, int) () from /home/aleph/ajf/t2k/root/lib/libTree.so; #10 0x00007fe963ad7300 in TTree::GetEntry(long long, int) () from /home/aleph/ajf/t2k/root/lib/libTree.so. ### ROOT version. 6.32.00 . ### Installation method. prebuilt binary root_v6.32.00.Linux-almalinux9.4-x86_64-gcc11.4.tar.gz. ### Operating system. AlmaLinux 9.4. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16725:1407,Charge,Charge,1407,https://root.cern,https://github.com/root-project/root/issues/16725,3,"['Charge', 'charge']","['Charge', 'charge']"
Energy Efficiency,ing true branch in /opt/root_src/core/base/src/TString.cxx:2248; 8: Calling constructor for 'TString' in /opt/root_src/core/base/src/TString.cxx:2249; 9: '?' condition is false in /opt/root_src/core/base/src/TString.cxx:207; 10: Calling 'TString::Init' in /opt/root_src/core/base/src/TString.cxx:208; 11: 'capacity' is >= 0 in /opt/root_src/core/base/src/TString.cxx:249; 12: Taking false branch in /opt/root_src/core/base/src/TString.cxx:249; 13: 'nchar' is >= 0 in /opt/root_src/core/base/src/TString.cxx:253; 14: Taking false branch in /opt/root_src/core/base/src/TString.cxx:253; 15: Assuming the condition is false in /opt/root_src/core/base/src/TString.cxx:257; 16: Taking false branch in /opt/root_src/core/base/src/TString.cxx:257; 17: Assuming 'capacity' is >= kMinCap in /opt/root_src/core/base/src/TString.cxx:265; 18: Taking false branch in /opt/root_src/core/base/src/TString.cxx:265; 19: Memory is allocated in /opt/root_src/core/base/src/TString.cxx:270; 20: Returned allocated memory in /opt/root_src/core/base/src/TString.cxx:208; 21: Returning from constructor for 'TString' in /opt/root_src/core/base/src/TString.cxx:2249; 22: Potential leak of memory pointed to by 'tok.fRep..fLong.fData' in /opt/root_src/core/base/src/TString.cxx:2253; /opt/root_src/core/base/src/TString.cxx:2314:4: warning: va_end() is called on an uninitialized va_list [clang-analyzer-valist.Uninitialized]; 1: expanded from macro 'va_end' in /usr/lib/gcc/x86_64-linux-gnu/9/include/stdarg.h:48; 2: Initialized va_list in /opt/root_src/core/base/src/TString.cxx:2312; 3: expanded from macro 'va_start' in /usr/lib/gcc/x86_64-linux-gnu/9/include/stdarg.h:47; 4: Calling 'TString::FormImp' in /opt/root_src/core/base/src/TString.cxx:2313; 5: Assuming the condition is true in /opt/root_src/core/base/src/TString.cxx:2276; 6: Left side of '||' is true in /opt/root_src/core/base/src/TString.cxx:2276; 7: Taking true branch in /opt/root_src/core/base/src/TString.cxx:2277; 8: Ended va_list in /opt/root_src/core,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7412:145724,allocate,allocated,145724,https://root.cern,https://github.com/root-project/root/issues/7412,1,['allocate'],['allocated']
Energy Efficiency,"is loaded on purpose, please add it to the whitelist.; ```; Note that z3 is a library used by LLVM. It may be that because I have other versions of LLVM/Clang in the system, z3 got installed and picked up by the builtin LLVM from the ROOT build. Ideally, this sort of behavior of automatically picking whatever is installed on the system should be avoided, as it can cause problems, so I recommend looking into the configuration of the builtin LLVM more closely and either disabling z3 if not used, or adding it to the dependencies of ROOT and enabling by force. - Test tutorial-v7-ntuple-ntpl005_introspection failure is related to uring support, is that tested in nightlies? It could also be a permissions issue that I don't have configured properly, I don't know.; ```sh; Start 995: tutorial-v7-ntuple-ntpl005_introspection; 7/18 Test #995: tutorial-v7-ntuple-ntpl005_introspection ...........***Failed 1.57 sec; ...; terminate called after throwing an instance of 'std::runtime_error'; what(): Fatal Error: failed to allocate memory for the smallest possible io_uring instance. 'memlock' memory has been exhausted for this user; CMake Error at /srv/root/build/RootTestDriver.cmake:237 (message):; error code: Subprocess aborted; ```; - The dataframe tests all fail with something like this; ```sh; Processing /srv/root/src/roottest/root/dataframe/test_ctors.C+...; Info in <TUnixSystem::ACLiC>: creating shared library /srv/root/build/roottest/root/dataframe/test_ctors_C.so; /usr/lib/gcc/x86_64-pc-linux-gnu/8.4.0/../../../../x86_64-pc-linux-gnu/bin/ld: /srv/root/build/roottest/root/dataframe/par: _ZTISt16invalid_argument: invalid version 7 (max 0); /usr/lib/gcc/x86_64-pc-linux-gnu/8.4.0/../../../../x86_64-pc-linux-gnu/bin/ld: /srv/root/build/roottest/root/dataframe/par: error adding symbols: bad value; collect2: error: ld returned 1 exit status; ```; Could it be a mismatch between Clang and GCC ABIs? Or maybe an issue with my linker? (I am using binutils version 2.35.2). Please let me ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936:4127,allocate,allocate,4127,https://root.cern,https://github.com/root-project/root/issues/7936,1,['allocate'],['allocate']
Energy Efficiency,"ised (through pickle), and all its children are serialised with it (and their children, recursively). This behaviour leads to recursion limits hit by pickle after a certain amount of operations is requested, I could reproduce it with 200 operations:. ```python; import ROOT; RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. from dask.distributed import Client, LocalCluster. def many_defines(df):; # Maximum recursion depth exceeded at 200 iterations; for i in range(200):; df = df.Define(f""col_{i}"", f""{i}""). print(f""Total entries: {df.Count().GetValue()}""). if __name__ == ""__main__"":; cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=True); client = Client(cluster); df = RDataFrame(100, daskclient=client); many_defines(df); ```; Which raises the following; ```; _pickle.PicklingError: Could not pickle object as excessively deep recursion required.; ```. # Update. Fixing just the serialisation issue of the reproducer above unveiled another limitation of the current implementation. The distrdf graph locally needs to be pruned before being sent to the distributed scheduler. The pruning algorithm is also a recursive function, which by default have a limit of 1000 calls in Python. The reproducer above, when run with `990` Define nodes in the `many_defines` function, returns; ```; $: python test_many_defines.py; File ""/home/vpadulan/programs/rootproject/rootbuild/distrdf-percentage-ranges-distrdf-debug/lib/DistRDF/Node.py"", line 177, in graph_prune; if not n.graph_prune():; [Previous line repeated 988 more times]; RecursionError: maximum recursion depth exceeded; ```. ### Expected behavior. No error, as with local RDF:. ```python; import ROOT. def many_defines(df):; for i in range(1000):; df = df.Define(f""col_{i}"", f""{i}""); print(f""Total entries: {df.Count().GetValue()}""). if __name__ == ""__main__"":; df = ROOT.RDataFrame(100); many_defines(df); ```; ```; $: python rdf_many_defines.py ; Total entries: 100; ```. ### Setup; Fedora 35; ROOT >= 6.26",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10449:1376,schedul,scheduler,1376,https://root.cern,https://github.com/root-project/root/issues/10449,1,['schedul'],['scheduler']
Energy Efficiency,"ization -- we build a hash table which contains all symbols; for a given library. This allows us to avoid the fallback symbol iteration; if multiple symbols from the same library are requested. The hash table; optimization targets to optimize the case where the bloom filter tells us; the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me!. Performance Report; ===. |platform|test|PCH-time|Module-time|Module-PR-time|; |:--------|:---|:---------:|:-----------:|:---------------|; |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|; |osx 10.14| roottest-cling| 589,67|452,97|307,34|; |osx 10.14| roottest-python| 377,69|475,78|311,5|; |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|; |osx 10.14| roottest-root-math| 106,18|140,41|73,96|; |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|; |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|; |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|; |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:; |platform|test|PCH-time|Module-time|Module-PR-time|; |:--------|:---|:---------:|:-----------:|:---------------|; |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|; |osx 10.14| roottest-cling| 88,96|118,94|100,1|; |osx 10.14| roottest-python| 107,57|60,93|100,88|; |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|; |osx 10.14| roottest-root-math| 8,33|21,23|9,27|; |osx 10.14| roottest-root-tree| 555|840,89|510,97|; |osx 10.14| roottest-root-treeformula | 235,44|402,82|228,91|. We think in `-j8` we lose the advantage of the new PR because the PCH had the rootmaps read in memory and restarting the processes allowed the kernel efficiently reuse that memory. Whereas, the modules and this PR scans the libraries from disk and builds in-memory optimization data structures. Reading from disk seems to be the bottleneck (not verified) but if that's an issue in future we can write out the index making subsequent runs at *almost* zero cost.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4717:2908,efficient,efficiently,2908,https://root.cern,https://github.com/root-project/root/pull/4717,1,['efficient'],['efficiently']
Energy Efficiency,"keTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0; #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0; #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17; #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7; #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16; #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4; #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555); #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89); <snip/>; ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error on master (https://github.com/root-project/root/tree/7b7983fa8ab9e1a4af98776f7",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861:5843,green,greenc,5843,https://root.cern,https://github.com/root-project/root/issues/10861,1,['green'],['greenc']
Energy Efficiency,l/src/TXMLEngine.cxx:1906; 11: Assuming the condition is false in /opt/root_src/io/xml/src/TXMLEngine.cxx:1946; 12: Taking false branch in /opt/root_src/io/xml/src/TXMLEngine.cxx:1946; 13: Assuming the condition is false in /opt/root_src/io/xml/src/TXMLEngine.cxx:2102; 14: Taking false branch in /opt/root_src/io/xml/src/TXMLEngine.cxx:2102; 15: Assuming the condition is false in /opt/root_src/io/xml/src/TXMLEngine.cxx:2110; 16: Taking false branch in /opt/root_src/io/xml/src/TXMLEngine.cxx:2110; 17: Assuming 'len' is > 0 in /opt/root_src/io/xml/src/TXMLEngine.cxx:2113; 18: Taking false branch in /opt/root_src/io/xml/src/TXMLEngine.cxx:2113; 19: Calling 'TXMLEngine::AllocateNode' in /opt/root_src/io/xml/src/TXMLEngine.cxx:2115; 20: Memory is allocated in /opt/root_src/io/xml/src/TXMLEngine.cxx:1515; 21: Assuming 'parent' is equal to null in /opt/root_src/io/xml/src/TXMLEngine.cxx:1525; 22: Taking false branch in /opt/root_src/io/xml/src/TXMLEngine.cxx:1525; 23: Returned allocated memory in /opt/root_src/io/xml/src/TXMLEngine.cxx:2115; 24: Assuming 'colon' is equal to null in /opt/root_src/io/xml/src/TXMLEngine.cxx:2124; 25: Left side of '&&' is false in /opt/root_src/io/xml/src/TXMLEngine.cxx:2124; 26: Taking false branch in /opt/root_src/io/xml/src/TXMLEngine.cxx:2130; 27: Assuming the condition is true in /opt/root_src/io/xml/src/TXMLEngine.cxx:2134; 28: Taking true branch in /opt/root_src/io/xml/src/TXMLEngine.cxx:2134; 29: Potential leak of memory pointed to by 'node' in /opt/root_src/io/xml/src/TXMLEngine.cxx:2135; /opt/root_src/io/xml/src/TXMLFile.cxx:203:7: warning: Value stored to 'recreate' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'recreate' is never read in /opt/root_src/io/xml/src/TXMLFile.cxx:203; /opt/root_src/io/xml/src/TXMLPlayer.cxx:394:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length argumen,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:132507,allocate,allocated,132507,https://root.cern,https://github.com/root-project/root/issues/7431,1,['allocate'],['allocated']
Energy Efficiency,"leEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();; auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");; auto entry1 = writer->CreateEntry();; auto entry2 = writer->CreateEntry();. *energy1 = 1.0;; particles->Fill(*particleEntry1);. *energy2 = 1.0;; particles->Fill(*particleEntry2);. *energy2 = 2.0;; particles->Fill(*particleEntry2);. *energy2 = 3.0;; particles->Fill(*particleEntry2);. *energy1 = 2.0;; particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;; particles->Fill(*particleEntry1);. writer->Fill(*entry1);; }. void collection_entry_multiple() {; write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");; reader->Show(0);; reader->Show(1);; }. int main() {; collection_entry_multiple();; return 0;; }; ```; </details>; yields. ```; {; ""particles"": [{""energy"": 1}, {""energy"": 1}, {""energy"": 2}, {""energy"": 3}, {""energy"": 2}]; }; {; ""particles"": [{""energy"": 3}]; }; ```; while the expected output would be `[{""energy"": 1}, {""energy"": 2}, {""energy"": 3}]` twice. Moreover, thinking about parallel writing, there will be an additional complication: `RCollectionField::CloneImpl` doesn't clone the `fCollectionWriter`, so there is only a single instance across all cloned models:; https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RField.cxx#L3301. Again, this could be solved conceptually by remembering the original `collectionModel` passed to `RNTupleModel::MakeCollection` and deep-cloning the collection writer (modulo it still being associated to an `RField` instead of an `REntry`), but this imposes another problem: The user would have to get the cloned collection writer out of the cloned `RCollectionField` and create entries for its `collectionModel`. Even right now, the latter is only possible before passing the model to `MakeCollection`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14642:5254,energy,energy,5254,https://root.cern,https://github.com/root-project/root/issues/14642,9,['energy'],['energy']
Energy Efficiency,"lect(TObject*) /home/jhahnfel/ROOT/src/core/cont/src/TCollection.cxx:736:4; 418: #5 0x7f1c620480aa in TList::Delete(char const*) /home/jhahnfel/ROOT/src/core/cont/src/TList.cxx:537:13; 418: #6 0x7f1c6203423b in THashList::Delete(char const*) /home/jhahnfel/ROOT/src/core/cont/src/THashList.cxx:215:14; 418: #7 0x7f1c6312616e in TDirectoryFile::Close(char const*) /home/jhahnfel/ROOT/src/io/io/src/TDirectoryFile.cxx:572:27; 418: #8 0x7f1c6317a52b in TFile::Close(char const*) /home/jhahnfel/ROOT/src/io/io/src/TFile.cxx:942:20; 418: #9 0x7f1c631788ad in TFile::~TFile() /home/jhahnfel/ROOT/src/io/io/src/TFile.cxx:527:4; 418: #10 0x7f1c63179ae8 in TFile::~TFile() /home/jhahnfel/ROOT/src/io/io/src/TFile.cxx:526:1; 418: #11 0x53554a in BulkApiMultipleTest_stdRead_Test::TestBody() /home/jhahnfel/ROOT/src/tree/tree/test/BulkApiMultiple.cxx:305:4. [...]. 418: previously allocated by thread T0 here:; 418: #0 0x530e28 in operator new(unsigned long) (/home/jhahnfel/ROOT/build-clang-asan-debug/tree/tree/test/testBulkApiMultiple+0x530e28); 418: #1 0x7f1c61f3a2d4 in TStorage::ObjectAlloc(unsigned long) /home/jhahnfel/ROOT/src/core/base/src/TStorage.cxx:330:19; 418: #2 0x559734 in TObject::operator new(unsigned long) /home/jhahnfel/ROOT/src/core/base/inc/TObject.h:167:46; 418: #3 0x7f1c66d6373e in ROOT::new_TTree(void*) /home/jhahnfel/ROOT/build-clang-asan-debug/tree/tree/G__Tree.cxx:4183:36; 418: #4 0x7f1c6214d5f9 in TClass::NewObject(TClass::ENewType, bool) const /home/jhahnfel/ROOT/src/core/meta/src/TClass.cxx:4956:14; 418: #5 0x7f1c6214d23a in TClass::New(TClass::ENewType, bool) const /home/jhahnfel/ROOT/src/core/meta/src/TClass.cxx:4933:15; 418: #6 0x7f1c6322497b in TKey::ReadObjectAny(TClass const*) /home/jhahnfel/ROOT/src/io/io/src/TKey.cxx:1077:21; 418: #7 0x7f1c6312be65 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/jhahnfel/ROOT/src/io/io/src/TDirectoryFile.cxx:1098:25; 418: #8 0x7f1c674d4205 in void TDirectory::GetObject<TTree>(char const*, TTree*&) /ho",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10012:2328,allocate,allocated,2328,https://root.cern,https://github.com/root-project/root/issues/10012,1,['allocate'],['allocated']
Energy Efficiency,ledByObjectAlloc' in /opt/root_src/core/base/inc/TStorage.h:132; 7: The left operand of '==' is a garbage value in /opt/root_src/core/base/inc/TStorage.h:119; /opt/root_src/core/base/inc/TString.h:242:67: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]; 1: Calling 'TString::FormImp' in /opt/root_src/core/base/src/TString.cxx:2336; 2: Calling 'TString::Clobber' in /opt/root_src/core/base/src/TString.cxx:2266; 3: Assuming the condition is false in /opt/root_src/core/base/src/TString.cxx:1206; 4: Taking false branch in /opt/root_src/core/base/src/TString.cxx:1206; 5: Assuming 'nc' is >= kMinCap in /opt/root_src/core/base/src/TString.cxx:1211; 6: Taking false branch in /opt/root_src/core/base/src/TString.cxx:1211; 7: Assuming the condition is true in /opt/root_src/core/base/src/TString.cxx:1217; 8: Taking true branch in /opt/root_src/core/base/src/TString.cxx:1217; 9: Memory is allocated in /opt/root_src/core/base/src/TString.cxx:1218; 10: Returned allocated memory in /opt/root_src/core/base/src/TString.cxx:2266; 11: Assuming the condition is true in /opt/root_src/core/base/src/TString.cxx:2276; 12: Left side of '||' is true in /opt/root_src/core/base/src/TString.cxx:2276; 13: Taking true branch in /opt/root_src/core/base/src/TString.cxx:2277; 14: Calling 'TString::Clobber' in /opt/root_src/core/base/src/TString.cxx:2281; 15: Assuming the condition is false in /opt/root_src/core/base/src/TString.cxx:1206; 16: Taking false branch in /opt/root_src/core/base/src/TString.cxx:1206; 17: Assuming 'nc' is >= kMinCap in /opt/root_src/core/base/src/TString.cxx:1211; 18: Taking false branch in /opt/root_src/core/base/src/TString.cxx:1211; 19: Assuming the condition is true in /opt/root_src/core/base/src/TString.cxx:1217; 20: Taking true branch in /opt/root_src/core/base/src/TString.cxx:1217; 21: Calling 'TString::SetLongPointer' in /opt/root_src/core/base/src/TString.cxx:1221; 22: Potential memory leak in /opt/root_src/core/base/inc/TString.h:242; /opt/root,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7412:90991,allocate,allocated,90991,https://root.cern,https://github.com/root-project/root/issues/7412,1,['allocate'],['allocated']
Energy Efficiency,"les when I write this small report). If it's really easier for you, the next time I can try to make a push release with the corrections. The good thing that I noted is that there are some fixes in the recent html pages compared to the pdf User's Guide of 2018, so I refer to this page when I cite the mistakes:; https://root.cern/root/htmldoc/guides/users-guide/Trees.html. 14.3; is the use the TTree::Show method; \- to use; 14.4; the branches and the leaves, is TTree::Print.; \- no need for a comma; 14.6; boxes"".; \- no need for the quote.; witch is marked; \- which is marked; exposed expression; \- I think that would sound better as ""set expression"" or another adjective.; Below them there are two text widgets; \- possible, but I think 'there' is redundant here.; for specifying; \- to specify; \-\- I think this text should be checked by a native speaker for articles and other issues.; When the “Rec” box is checked, the Draw and Scan commands; \- no need for quotes around Rec (or add them around Draw and Scan); 14.7; This picture shows the TTree class:; \- should be rewritten with a reference to the picture. On the pdf manual the picture is on a separate page, away from this line!; 14.7.3; save all branch buffers every n byte.; \- bytes.; 14.7.4; When a TTree is memory resident, you set it up so that it retains retain only the last few entries.; \- retains; For example, this can be very useful for monitoring purpose.; \- just for monitoring, remove 'purpose'. Maybe rewrite this phrase.; 14.7.6; The function TTree::GetUserInfo() allows adding any object defined by a user to the tree that is not depending on the entry number.; \- allows to add to the tree any user\-defined object that doesn't depend on... (actually didn't read the complete Chapter). 14.23; The performance depends not only of the processor type, but also of the disk devices (local, NFS, AFS, etc.).; \- Performance depends not only on the processor type, but also on storage devices (local, NFS, AFS, etc.).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7284:1692,monitor,monitoring,1692,https://root.cern,https://github.com/root-project/root/issues/7284,2,['monitor'],['monitoring']
Energy Efficiency,"les"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. *energy = 1.0;; particles->Fill();; writer->Fill();; }. void collection_entry_default() {; write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");; reader->Show(0);; }. int main() {; collection_entry_default();; return 0;; }; ```. This works reasonably as expected, with the following output:; ```; {; ""particles"": [{""energy"": 1}]; }; ```. However, a user may want to create non-default entries, ie `auto entry = writer->CreateEntry();` and then calling `writer->Fill(*entry);`. <details>; <summary>Full code example</summary>. ```c++; #include <ROOT/REntry.hxx>; #include <ROOT/RNTuple.hxx>; #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;; using ROOT::Experimental::RNTupleModel;; using ROOT::Experimental::RNTupleReader;; using ROOT::Experimental::RNTupleWriter;. static void write() {; auto particleModel = RNTupleModel::Create();; auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::CreateBare();; auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");; auto entry = writer->CreateEntry();. *energy = 1.0;; particles->Fill();; writer->Fill(*entry);; }. void collection_entry() {; write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");; reader->Show(0);; }. int main() {; collection_entry();; return 0;; }; ```. </details>. This doesn't work right now, even for a single entry as in the code example above; when opening the ntuple, the code crashes:; ```; terminate called after throwing an instance of 'std::bad_alloc'; what(): std::bad_alloc; Aborted (core dumped); ```. This is because `RNTupleModel::CreateEntry()` calls; https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RNTupleModel.cxx#L363-L",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14642:1551,energy,energy,1551,https://root.cern,https://github.com/root-project/root/issues/14642,2,['energy'],['energy']
Energy Efficiency,"llable` decorator. In addition, you can now give the wrapped function a custom name:. ```python; @ROOT.DeclareCallable([""float""], ""float"", ""my_name""); def f(x):; return 2.0 * x. ROOT.ROOT.my_name(21) # Returns 42; ```. **DEPRECATED:**. Add workflow to invoke Python callables from C++. The mechanism builds with cling a C++ wrapper class around Python callables and publishs them to the user. See following example for the basic mechanism. ```python; import ROOT. # Because C++ is strongly typed, we have to declare the types of the inputs and the output; @ROOT.DeclareCppCallable([""float""], ""float""); def func(x):; return 2.0 * x. print(func(1.0)) # Prints 2.0; print(ROOT.PyROOT.func(1.0)) # Prints 2.0; ROOT.gInterpreter.ProcessLine(""cout << PyROOT::func(1.0) << endl;"") # Prints 2.0; ```. This allows us to run Python code in wrapped C++ workflow, e.g. for `RDataFrame`:. ```python; import ROOT; import numpy. @ROOT.DeclareCppCallable([""unsigned int""], ""float""); def func(x):; return numpy.power(x, 2). df = ROOT.RDataFrame(4).Define(""x"", ""rdfentry_"").Define(""y"", ""PyROOT::func(x)""); npy = df.AsNumpy(); print(npy[""x""]) # Prints [0, 1, 2, 3]; print(npy[""y""]) # Prints [0.0, 1.0, 4.0, 9.0]; ```. Finally, the approach is fully compatible with any custom C++ types you may have. ```python; import ROOT. ROOT.gInterpreter.Declare(""""""; struct Foo {; static const int foo = 42;; };; """"""). @ROOT.DeclareCppCallable([""Foo""], """"); def func(x):; print(x.foo). ROOT.gInterpreter.ProcessLine(""Foo x; PyROOT::func(x);"") # Prints 42; ```; There are still some things to check before merging:. - [ ] Double check reference counting; - [ ] C++ wrapper takes (lvalue) references, what happens with rvalues? What is the universal thingy?; - [ ] We put the C++ callable in the `PyROOT::` namespace. This is fine? It can be everything, even the global namespace. What is a sane solution here?; - [ ] How many copies we are doing finally? What is the performance?; - [ ] What happens in MT scenarios? Put in a test c",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3488:3269,power,power,3269,https://root.cern,https://github.com/root-project/root/pull/3488,1,['power'],['power']
Energy Efficiency,"locked_range<unsigned int>, tbb::detail::d1::parallel_for_body_wrapper<std::function<void (unsigned int)>, unsigned int>, tbb::detail::d1::auto_partitioner const>::execute(tbb::detail::d1::execution_data&)':; TThreadExecutor.cxx:(.text._ZN3tbb6detail2d19start_forINS1_13blocked_rangeIjEENS1_25parallel_for_body_wrapperISt8functionIFvjEEjEEKNS1_16auto_partitionerEE7executeERNS1_14execution_dataE[_ZN3tbb6detail2d19start_forINS1_13blocked_rangeIjEENS1_25parallel_for_body_wrapperISt8functionIFvjEEjEEKNS1_16auto_partitionerEE7executeERNS1_14execution_dataE]+0xb5): undefined reference to `tbb::detail::r1::allocate(tbb::detail::d1::small_object_pool*&, unsigned long, tbb::detail::d1::execution_data const&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text._ZN3tbb6detail2d19start_forINS1_13blocked_rangeIjEENS1_25parallel_for_body_wrapperISt8functionIFvjEEjEEKNS1_16auto_partitionerEE7executeERNS1_14execution_dataE[_ZN3tbb6detail2d19start_forINS1_13blocked_rangeIjEENS1_25parallel_for_body_wrapperISt8functionIFvjEEjEEKNS1_16auto_partitionerEE7executeERNS1_14execution_dataE]+0x146): undefined reference to `tbb::detail::r1::allocate(tbb::detail::d1::small_object_pool*&, unsigned long, tbb::detail::d1::execution_data const&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text._ZN3tbb6detail2d19start_forINS1_13blocked_rangeIjEENS1_25parallel_for_body_wrapperISt8functionIFvjEEjEEKNS1_16auto_partitionerEE7executeERNS1_14execution_dataE[_ZN3tbb6detail2d19start_forINS1_13blocked_rangeIjEENS1_25parallel_for_body_wrapperISt8functionIFvjEEjEEKNS1_16auto_partitionerEE7executeERNS1_14execution_dataE]+0x174): undefined reference to `tbb::detail::r1::spawn(tbb::detail::d1::task&, tbb::detail::d1::task_group_context&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text._ZN3tbb6detail2d19start_forINS1_13blocked_rangeIjEENS1_25parallel_for_body_wrapperISt8functionIFvjEEjEEKNS1_16auto_partitionerEE7executeERNS1_14execution_dataE[_ZN3tbb6detail2d19start_forINS1_13blocked_rangeIjEENS1_25parallel_for_body_wrapperISt8functionIFvj",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11931:34916,allocate,allocate,34916,https://root.cern,https://github.com/root-project/root/issues/11931,1,['allocate'],['allocate']
Energy Efficiency,"loop. The leak was discovered by running valgrind and inspecting the code. Minimal example:; ```cpp; #include <Math/GSLMCIntegrator.h> // ROOT::Math::GSLMCIntegrator. /* built with:. g++ -ggdb3 -Og `root-config --cflags` mcintegrator.cpp -o mcintegrator \; `root-config --libs` -lMathMore. */. int; main(); {; for(unsigned i = 0; i < 20000; ++i); {; ROOT::Math::GSLMCIntegrator vegas(""vegas"", 0., 1.e-1, 10);; }; return 0;; }; ```. Before fix:; ```; valgrind --tool=memcheck --leak-check=full --show-leak-kinds=definite \; --undef-value-errors=no ./mcintegrator. ==12320== Memcheck, a memory error detector; ==12320== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==12320== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info; ==12320== Command: ./mcintegrator; ==12320==; ==12320==; ==12320== HEAP SUMMARY:; ==12320== in use at exit: 100,655,858 bytes in 44,260 blocks; ==12320== total heap usage: 67,782 allocs, 23,522 frees, 101,539,078 bytes allocated; ==12320==; ==12320== 99,089,984 (319,984 direct, 98,770,000 indirect) bytes in 19,999 blocks are definitely lost in loss record 3,515 of 3,515; ==12320== at 0x4C2BE7F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so); ==12320== by 0xAD090F2: gsl_rng_alloc (in /usr/lib/libgsl.so.23.0.0); ==12320== by 0x8223765: Allocate (GSLRngWrapper.h:99); ==12320== by 0x8223765: ROOT::Math::GSLMCIntegrator::GSLMCIntegrator(char const*, double, double, unsigned int) (GSLMCIntegrator.cxx:117); ==12320== by 0x108BF5: main (mcintegrator.cpp:8); ==12320==; ==12320== LEAK SUMMARY:; ==12320== definitely lost: 319,984 bytes in 19,999 blocks; ==12320== indirectly lost: 98,770,000 bytes in 19,754 blocks; ==12320== possibly lost: 1,225,000 bytes in 245 blocks; ==12320== still reachable: 340,874 bytes in 4,262 blocks; ==12320== suppressed: 0 bytes in 0 blocks; ==12320== Reachable blocks (those to which a pointer was found) are not shown.; ==12320== To see them, rerun with: --leak-check=full --show-leak-kin",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/928:1663,allocate,allocated,1663,https://root.cern,https://github.com/root-project/root/pull/928,1,['allocate'],['allocated']
Energy Efficiency,mathcore/src/triangle.c:14972; 162: Dereference of null pointer (loaded from variable 'vpointlist') in /opt/root_src/math/mathcore/src/triangle.c:14976; /opt/root_src/math/mathcore/src/triangle.c:15380:3: warning: Value stored to 'worstaspect' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'worstaspect' is never read in /opt/root_src/math/mathcore/src/triangle.c:15380; /opt/root_src/math/matrix/inc/TMatrixT.h:280:4: warning: Returning null reference [clang-analyzer-core.uninitialized.UndefReturn]; 1: Taking false branch in /opt/root_src/math/matrix/src/TMatrixT.cxx:121; 2: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:120; 3: Loop condition is false. Exiting loop in /opt/root_src/math/matrix/src/TMatrixT.cxx:121; 4: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:119; 5: Control jumps to 'case kTransposed:' at line 135 in /opt/root_src/math/matrix/src/TMatrixT.cxx:123; 6: Calling 'TMatrixT::Allocate' in /opt/root_src/math/matrix/src/TMatrixT.cxx:136; 7: Assuming 'no_rows' is >= 0 in /opt/root_src/math/matrix/src/TMatrixT.cxx:479; 8: Left side of '||' is false in /opt/root_src/math/matrix/src/TMatrixT.cxx:479; 9: Assuming 'no_cols' is >= 0 in /opt/root_src/math/matrix/src/TMatrixT.cxx:479; 10: Taking false branch in /opt/root_src/math/matrix/src/TMatrixT.cxx:479; 11: Assuming the condition is false in /opt/root_src/math/matrix/src/TMatrixT.cxx:494; 12: Taking false branch in /opt/root_src/math/matrix/src/TMatrixT.cxx:494; 13: Assuming field 'fNelems' is <= 0 in /opt/root_src/math/matrix/src/TMatrixT.cxx:501; 14: Taking false branch in /opt/root_src/math/matrix/src/TMatrixT.cxx:501; 15: Null pointer value stored to field 'fElements' in /opt/root_src/math/matrix/src/TMatrixT.cxx:506; 16: Returning from 'TMatrixT::Allocate' in /opt/root_src/math/matrix/src/TMatrixT.cxx:136; 17: Calling 'TMatrixT::Transpose' in /opt/root_src/math/matrix/src/TMatrixT.cxx:138; 18: Taking false branch in /o,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7458:124250,Allocate,Allocate,124250,https://root.cern,https://github.com/root-project/root/issues/7458,1,['Allocate'],['Allocate']
Energy Efficiency,"ms to be dependent on NRVO. Crash seems to be avoided either by _(i)_ commenting out; ```c++; histograms.push_back(h);; ```; ; or _(ii)_ changing the `return` statement as follows; ```diff; - return histograms;; + return {h};; ```. ### To Reproduce; The issue can be reproduced with the following code in ArchLinux x86_64 with ROOT master:; ```c++; vector<ROOT::RDF::RResultPtr<TH1D>> pointer_not_allocated_error(){; // Create a data frame with 100 rows; ROOT::RDataFrame rdf(100);. // Define a new column `x` that contains random numbers and create a histogram; ROOT::RDF::RResultPtr<TH1D> h = rdf.Define(""x"", [](){ return gRandom->Rndm(); }).Histo1D(""x"");. // Add the histogram to a vector; vector<ROOT::RDF::RResultPtr<TH1D>> histograms;; histograms.push_back(h);. // Attempt to throw an error; throw std::runtime_error(""intended error throw for debugging"");. return histograms;; }; ```. ### Additional context; For additional context see https://root-forum.cern.ch/t/pointer-not-allocated-when-adding-rresultptr-to-vector/51831/2. Interesting part of the gdb backtrace follows (thanks @eguiraud!):; ```; >>> bt; #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at pthread_kill.c:44; #1 0x00007ffff72a1503 in __pthread_kill_internal (signo=6, threadid=<optimized out>) at pthread_kill.c:78; #2 0x00007ffff7251958 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26; #3 0x00007ffff723b53d in __GI_abort () at abort.c:79; #4 0x00007ffff729563e in __libc_message (action=action@entry=do_abort, fmt=fmt@entry=0x7ffff73b4432 ""%s\n"") at ../sysdeps/posix/libc_fatal.c:155; #5 0x00007ffff72ab22c in malloc_printerr (str=str@entry=0x7ffff73b6ff8 ""free(): double free detected in tcache 2"") at malloc.c:5660; #6 0x00007ffff72ad587 in _int_free (av=0x7ffff73f1ba0 <main_arena>, p=0x55555e7134c0, have_lock=have_lock@entry=0) at malloc.c:4469; #7 0x00007ffff72af9f3 in __GI___libc_free (mem=<optimized out>) at malloc.c:3385; #8 0x00007ffff18d",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11494:1419,allocate,allocated-when-adding-rresultptr-to-vector,1419,https://root.cern,https://github.com/root-project/root/issues/11494,1,['allocate'],['allocated-when-adding-rresultptr-to-vector']
Energy Efficiency,"multithreading execution modes in ROOT and allows the co-existance of several TThreadExecutor instances, each one executing on a different number of threads. . It doesn't change any other behaviour in the eyes of the user. TO DO:. - [ ] Decide on explicit-implicit MT execution modes' interactions; - [ ] Rename TPoolManager; - [ ] Decide if allowing change of the number of threads when calling several times EnableImplicitMT(x) with a varying x without an intermediate call to DisableImplicitMT(); - [ ] Add warnings . ***********************************************************************************. # Previous behaviour; Previous to this PR, the number of threads was limited during the lifetime of the tbb scheduler, kept alive by TPoolManager as a ```std::shared_ptr``` as long as references to it existed, to the value set on its initialization. ```cpp; //We initialize the scheduler with 4 threads; ROOT::EnableIMT(4);; { ; //The scheduler is active, so the value passed to TThreadExecutor; //is overriden with the number of threads the scheduler has been; //initialized with (4); TThreadExecutor executor(9);; }; ROOT::DisableIMT();. //The scheduler is not alive at this point, ; //so we initialize it with 2 threads; ROOT::EnableIMT(2);; ROOT::TThreadExecutor executor(8);; ROOT::DisableIMT();. executor.MapReduce(...); //Runs on two threads!. ROOT::EnableIMT(3);; //Still two threads! TThreadExecutor instance was keeping the scheduler alive; ```; This also implies that given two co-existent instances of TThreadExecutor initialized with a different number of threads, the first one to be initialized forces on the second one the number of threads to work with. ```cpp; ROOT::TThreadExecutor executor(4);; ROOT::TThreadExecutor executor2(8); //will run limited to two threads!!; ```; This setup was useful [to avoid undefined behaviours between the implicit and explicit parallelism modes of ROOT](https://indico.cern.ch/event/607814/contributions/2466931/attachments/1409778/2155811/T",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2389:983,schedul,scheduler,983,https://root.cern,https://github.com/root-project/root/pull/2389,3,['schedul'],['scheduler']
Energy Efficiency,"n the; dataset gets deleted. This can happen in particular if the SPlots object; created an owning clone of the dataset, attaches the pdf, and then goes; out of scope. This commit suggests to not attach the pdf to the dataset, as it is not; necessary. When looping over the dataset and evaluating the pdf later,; the pdf variables get synced with the dataset variables anyway. This was; done via `RooStats::SetParameters`, which is just a wrapper around; `RooAbsCollection::assign()`. I suggest to use `assign()` directly to make; more explicit to the reader what happens. It was verified that SPlot still works correctly, by looking at the output of; the `roostats/rs301_splot.C` tutorial, which is unaffected by this PR. Closes Jira issue [ROOT-8018](https://sft.its.cern.ch/jira/browse/ROOT-8018). A simpler reproducer of the problem based on the notebook in the Jira; issue is this one:. ```Python; import ROOT. bdt = ROOT.RooRealVar(""BDT"", ""some awesome BDT"", 0.0, 1.0); mass = ROOT.RooRealVar(""mass"", ""invariant mass"", 5100.0, 5300, ""MeV/c^{2}""). sigyield = ROOT.RooRealVar(""sigyield"", ""signal yield"", 100, 0, 100000); bkgyield = ROOT.RooRealVar(""bkgyield"", ""background yield"", 900, 0, 100000). bmassPDF = ROOT.RooGaussian(; ""bmass"",; ""B mass shape"",; mass,; ROOT.RooFit.RooConst(5200.0),; ROOT.RooFit.RooConst(20.0),; ); bkgmPDF = ROOT.RooExponential(; ""bkgmass"", ""bkg mass shape"", mass, ROOT.RooFit.RooConst(-1.0 / 200.0); ); combmPDF = ROOT.RooAddPdf(; ""fullmasspdf"",; ""full mass pdf"",; ROOT.RooArgList(bmassPDF, bkgmPDF),; ROOT.RooArgList(sigyield, bkgyield),; ). toydata = combmPDF.generate(ROOT.RooArgSet(bdt, mass), 10000); ROOT.SetOwnership(toydata, True). set1 = ROOT.RooArgList(sigyield, bkgyield); set2 = ROOT.RooArgList(). def make_splot(toydata):; smalldata = toydata.reduce(ROOT.RooFit.Cut(""BDT>0.0"")); ROOT.SetOwnership(smalldata, True). splot = ROOT.RooStats.SPlot(; ""splot"", ""splot"", smalldata, combmPDF, set1, set2, True, True; ). make_splot(toydata); make_splot(toydata); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10811:1990,reduce,reduce,1990,https://root.cern,https://github.com/root-project/root/pull/10811,1,['reduce'],['reduce']
Energy Efficiency,"nating with default action of signal 6 (SIGABRT); ==22765== at 0x546E18B: raise (raise.c:51); ==22765== by 0x544D92D: abort (abort.c:100); ==22765== by 0x4E9E0A8: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29); ==22765== by 0x4EA9505: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29); ==22765== by 0x4EA9570: std::terminate() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29); ==22765== by 0x4EA97F4: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.29); ==22765== by 0x6C99676: cling_runtime_internal_throwIfInvalidPointer.cold (in /build/vvassilev/root-release-master/lib/libCling.so); ==22765== by 0x4DFF3CC: ???; ==22765== by 0x1FFEFFBB3F: ???; ==22765== by 0xB60A6A5548AF56FF: ???; ==22765== by 0x6E83C9F: ??? (in /build/vvassilev/root-release-master/lib/libCling.so); ==22765== by 0x4DEB03F: ???; ==22765== ; ==22765== HEAP SUMMARY:; ==22765== in use at exit: 66,909,576 bytes in 172,570 blocks; ==22765== total heap usage: 645,966 allocs, 473,396 frees, 231,012,668 bytes allocated; ==22765== ; ==22765== LEAK SUMMARY:; ==22765== definitely lost: 0 bytes in 0 blocks; ==22765== indirectly lost: 0 bytes in 0 blocks; ==22765== possibly lost: 7,728 bytes in 66 blocks; ==22765== still reachable: 66,622,884 bytes in 169,043 blocks; ==22765== of which reachable via heuristic:; ==22765== stdstring : 111 bytes in 1 blocks; ==22765== multipleinheritance: 7,776 bytes in 10 blocks; ==22765== suppressed: 278,964 bytes in 3,461 blocks; ==22765== Rerun with --leak-check=full to see details of leaked memory; ==22765== ; ==22765== Use --track-origins=yes to see where uninitialised values come from; ==22765== For lists of detected and suppressed errors, rerun with: -s; ==22765== ERROR SUMMARY: 237 errors from 1 contexts (suppressed: 185 from 20); Aborted (core dumped); ```. That seems an important issue to fix. We should also probably run valgrind on all the tests to get a feeling of where we stand. And, yes I know it can take days or weeks but I think it is worth it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11385:7955,allocate,allocated,7955,https://root.cern,https://github.com/root-project/root/issues/11385,1,['allocate'],['allocated']
Energy Efficiency,"ng false branch in /opt/root_src/net/http/src/TCivetweb.cxx:231; 5: Assuming 'serv' is non-null in /opt/root_src/net/http/src/TCivetweb.cxx:234; 6: Taking false branch in /opt/root_src/net/http/src/TCivetweb.cxx:234; 7: Calling 'make_shared<THttpCallArg, >' in /opt/root_src/net/http/src/TCivetweb.cxx:237; 8: Calling 'allocate_shared<THttpCallArg, std::allocator<THttpCallArg>, >' in /usr/include/c++/9/bits/shared_ptr.h:717; 9: Calling constructor for 'shared_ptr<THttpCallArg>' in /usr/include/c++/9/bits/shared_ptr.h:701; 10: Calling constructor for '__shared_ptr<THttpCallArg, __gnu_cxx::_S_atomic>' in /usr/include/c++/9/bits/shared_ptr.h:359; 11: Calling constructor for '__shared_count<__gnu_cxx::_S_atomic>' in /usr/include/c++/9/bits/shared_ptr_base.h:1344; 12: Calling '__allocate_guarded<std::allocator<std::_Sp_counted_ptr_inplace<THttpCallArg, std::allocator<THttpCallArg>, __gnu_cxx::_S_atomic>>>' in /usr/include/c++/9/bits/shared_ptr_base.h:677; 13: Calling 'allocator_traits::allocate' in /usr/include/c++/9/bits/allocated_ptr.h:97; 14: Calling 'new_allocator::allocate' in /usr/include/c++/9/bits/alloc_traits.h:444; 15: Taking false branch in /usr/include/c++/9/ext/new_allocator.h:104; 16: Uninitialized value stored to field 'fUniqueID' in /usr/include/c++/9/ext/new_allocator.h:114; 17: Returning from 'new_allocator::allocate' in /usr/include/c++/9/bits/alloc_traits.h:444; 18: Returning from 'allocator_traits::allocate' in /usr/include/c++/9/bits/allocated_ptr.h:97; 19: Calling constructor for '__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<THttpCallArg, std::allocator<THttpCallArg>, __gnu_cxx::_S_atomic>>>' in /usr/include/c++/9/bits/allocated_ptr.h:97; 20: Returning from constructor for '__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<THttpCallArg, std::allocator<THttpCallArg>, __gnu_cxx::_S_atomic>>>' in /usr/include/c++/9/bits/allocated_ptr.h:97; 21: Returning from '__allocate_guarded<std::allocator<std::_Sp_counted_ptr_inplace<THttpCal",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7412:51420,allocate,allocate,51420,https://root.cern,https://github.com/root-project/root/issues/7412,1,['allocate'],['allocate']
Energy Efficiency,"non-null in /opt/root_src/net/http/src/TCivetweb.cxx:234; 6: Taking false branch in /opt/root_src/net/http/src/TCivetweb.cxx:234; 7: Calling 'make_shared<THttpCallArg, >' in /opt/root_src/net/http/src/TCivetweb.cxx:237; 8: Calling 'allocate_shared<THttpCallArg, std::allocator<THttpCallArg>, >' in /usr/include/c++/9/bits/shared_ptr.h:717; 9: Calling constructor for 'shared_ptr<THttpCallArg>' in /usr/include/c++/9/bits/shared_ptr.h:701; 10: Calling constructor for '__shared_ptr<THttpCallArg, __gnu_cxx::_S_atomic>' in /usr/include/c++/9/bits/shared_ptr.h:359; 11: Calling constructor for '__shared_count<__gnu_cxx::_S_atomic>' in /usr/include/c++/9/bits/shared_ptr_base.h:1344; 12: Calling '__allocate_guarded<std::allocator<std::_Sp_counted_ptr_inplace<THttpCallArg, std::allocator<THttpCallArg>, __gnu_cxx::_S_atomic>>>' in /usr/include/c++/9/bits/shared_ptr_base.h:677; 13: Calling 'allocator_traits::allocate' in /usr/include/c++/9/bits/allocated_ptr.h:97; 14: Calling 'new_allocator::allocate' in /usr/include/c++/9/bits/alloc_traits.h:444; 15: Taking false branch in /usr/include/c++/9/ext/new_allocator.h:104; 16: Uninitialized value stored to field 'fUniqueID' in /usr/include/c++/9/ext/new_allocator.h:114; 17: Returning from 'new_allocator::allocate' in /usr/include/c++/9/bits/alloc_traits.h:444; 18: Returning from 'allocator_traits::allocate' in /usr/include/c++/9/bits/allocated_ptr.h:97; 19: Calling constructor for '__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<THttpCallArg, std::allocator<THttpCallArg>, __gnu_cxx::_S_atomic>>>' in /usr/include/c++/9/bits/allocated_ptr.h:97; 20: Returning from constructor for '__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<THttpCallArg, std::allocator<THttpCallArg>, __gnu_cxx::_S_atomic>>>' in /usr/include/c++/9/bits/allocated_ptr.h:97; 21: Returning from '__allocate_guarded<std::allocator<std::_Sp_counted_ptr_inplace<THttpCallArg, std::allocator<THttpCallArg>, __gnu_cxx::_S_atomic>>>' in /usr/include/c++/9/bit",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7412:51505,allocate,allocate,51505,https://root.cern,https://github.com/root-project/root/issues/7412,1,['allocate'],['allocate']
Energy Efficiency,null in /opt/root_src/math/mathcore/inc/TMath.h:1347; 19: Taking false branch in /opt/root_src/math/mathcore/inc/TMath.h:1347; 20: 'n' is <= 'kWorkMax' in /opt/root_src/math/mathcore/inc/TMath.h:1351; 21: Taking false branch in /opt/root_src/math/mathcore/inc/TMath.h:1351; 22: 'ii' is >= 'n' in /opt/root_src/math/mathcore/inc/TMath.h:1357; 23: Loop condition is false. Execution continues on line 1360 in /opt/root_src/math/mathcore/inc/TMath.h:1357; 24: Loop condition is true. Entering loop body in /opt/root_src/math/mathcore/inc/TMath.h:1363; 25: Assuming the condition is false in /opt/root_src/math/mathcore/inc/TMath.h:1364; 26: Taking false branch in /opt/root_src/math/mathcore/inc/TMath.h:1364; 27: Assigned value is garbage or undefined in /opt/root_src/math/mathcore/inc/TMath.h:1373; /opt/root_src/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:142:4: warning: Value stored to 'nfnevl' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'nfnevl' is never read in /opt/root_src/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:142; /opt/root_src/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:143:4: warning: Value stored to 'relerr' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'relerr' is never read in /opt/root_src/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:143; /opt/root_src/math/mathcore/src/GaussIntegrator.cxx:68:4: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]; 1: Calling 'IntegrandTransform::Clone' in /opt/root_src/math/mathcore/src/GaussIntegrator.cxx:68; 2: Field 'fInfiniteInterval' is false in /opt/root_src/math/mathcore/src/GaussIntegrator.cxx:248; 3: '?' condition is false in /opt/root_src/math/mathcore/src/GaussIntegrator.cxx:248; 4: Memory is allocated in /opt/root_src/math/mathcore/src/GaussIntegrator.cxx:248; 5: Returned allocated memory in /opt/root_src/math/mathcore/src/GaussIntegrator.cxx:68; 6: Potential memory leak in /opt/root_src/math/mathcore/src/GaussIntegrator.cxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7458:19040,Adapt,AdaptiveIntegratorMultiDim,19040,https://root.cern,https://github.com/root-project/root/issues/7458,1,['Adapt'],['AdaptiveIntegratorMultiDim']
Energy Efficiency,"o `tbb::detail::r1::isolate_within_arena(tbb::detail::d1::delegate_base&, long)'; /usr/bin/ld: CMakeFiles/Imt.dir/src/TThreadExecutor.cxx.o: in function `tbb::detail::d1::start_reduce<tbb::detail::d1::blocked_range<__gnu_cxx::__normal_iterator<float const*, std::vector<float, std::allocator<float> > > >, tbb::detail::d1::lambda_reduce_body<tbb::detail::d1::blocked_range<__gnu_cxx::__normal_iterator<float const*, std::vector<float, std::allocator<float> > > >, float, ROOT::Internal::ParallelReduceHelper<float>(std::vector<float, std::allocator<float> > const&, std::function<float (float, float)> const&)::{lambda(tbb::detail::d1::blocked_range<__gnu_cxx::__normal_iterator<float const*, std::vector<float, std::allocator<float> > > > const&, float)#1}, std::function<float (float, float)> >, tbb::detail::d1::auto_partitioner const>::execute(tbb::detail::d1::execution_data&)':; TThreadExecutor.cxx:(.text+0xce4): undefined reference to `tbb::detail::r1::allocate(tbb::detail::d1::small_object_pool*&, unsigned long, tbb::detail::d1::execution_data const&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0xd8d): undefined reference to `tbb::detail::r1::allocate(tbb::detail::d1::small_object_pool*&, unsigned long, tbb::detail::d1::execution_data const&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0xdc5): undefined reference to `tbb::detail::r1::spawn(tbb::detail::d1::task&, tbb::detail::d1::task_group_context&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0xf22): undefined reference to `tbb::detail::r1::deallocate(tbb::detail::d1::small_object_pool&, void*, unsigned long, tbb::detail::d1::execution_data const&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x11e2): undefined reference to `tbb::detail::r1::is_group_execution_cancelled(tbb::detail::d1::task_group_context&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x123c): undefined reference to `tbb::detail::r1::execution_slot(tbb::detail::d1::execution_data const*)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x124d): undefined reference to `tbb:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11931:16731,allocate,allocate,16731,https://root.cern,https://github.com/root-project/root/issues/11931,1,['allocate'],['allocate']
Energy Efficiency,"o the binary specification (see list of individual changes below). ## Changes or fixes:; - **FIX** discrepancy between non-disk locators specification and implementation: [specifications.md, Section ""Locators and Envelope Links""](https://github.com/root-project/root/blob/master/tree/ntuple/v7/doc/specifications.md#locators-and-envelope-links) stated that on non-disk locators, the 24LSb of _Size_ specify the size of the locator (and not only the size of the payload). However, _Size_ stored only the size of the payload.; - Use a `std::variant<...>` to represent type-specific information stored in the locator.; - Separate serialization of non-simple locators (i.e. those having the `T` bit set to 1). Serialization for those types is provided by `{Serialize,Deserialize}LocatorPayloadXxx()`.; - For non-disk locators (i.e., those with `T == 1`), add a _Reserved_ 8bit field that can be used by concrete backends to store 8bits of additional information per locator.; To accommodate that, _Size_ has been reduced to 16 bits, i.e. the maximum size of a locator is now 64kB, which is still enough.; - Explicitly store the locator type in a dedicated member in the `RNTupleLocator` structure. This makes it possible to have different type values even if the payload structure is identical, i.e. use the same alternative in the `fPosition` variant.; **NOTE:** given the reorder of members, `sizeof(RNTupleLocator)` is preserved before and after the changes in this branch, at least in x86_64 and libstdc++.; - Reassign the first representable value for the _Type_ (0x01) for URI string locators. This makes the entire contiguous range [0x02, 0x7f] assignable for concrete backends.; **NOTE:** given that URI locators were so far unused in produced files, the change should not break existing ntuples.; - Provide a new locator payload format: `RNTupleLocatorObject64`. This structure groups common data for object stores using 64bit location information.; In some cases, for locators referencing pages,",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11828:1151,reduce,reduced,1151,https://root.cern,https://github.com/root-project/root/pull/11828,1,['reduce'],['reduced']
Energy Efficiency,oChecker.cxx:1202; 31: Taking true branch in /opt/root_src/geom/geompainter/src/TGeoChecker.cxx:1202; 32: Execution continues on line 1193 in /opt/root_src/geom/geompainter/src/TGeoChecker.cxx:1205; 33: 'id' is < 'ncheck' in /opt/root_src/geom/geompainter/src/TGeoChecker.cxx:1193; 34: Loop condition is true. Entering loop body in /opt/root_src/geom/geompainter/src/TGeoChecker.cxx:1193; 35: Taking false branch in /opt/root_src/geom/geompainter/src/TGeoChecker.cxx:1197; 36: Assuming 'incrt' is true in /opt/root_src/geom/geompainter/src/TGeoChecker.cxx:1201; 37: Taking false branch in /opt/root_src/geom/geompainter/src/TGeoChecker.cxx:1201; 38: 'in' is true in /opt/root_src/geom/geompainter/src/TGeoChecker.cxx:1202; 39: Taking false branch in /opt/root_src/geom/geompainter/src/TGeoChecker.cxx:1202; 40: 'novlps' is 0 in /opt/root_src/geom/geompainter/src/TGeoChecker.cxx:1212; 41: Taking true branch in /opt/root_src/geom/geompainter/src/TGeoChecker.cxx:1212; 42: Memory is allocated in /opt/root_src/geom/geompainter/src/TGeoChecker.cxx:1213; 43: Assuming 'nodeovlp' is non-null in /opt/root_src/geom/geompainter/src/TGeoChecker.cxx:1217; 44: Taking false branch in /opt/root_src/geom/geompainter/src/TGeoChecker.cxx:1217; 45: Assuming the condition is false in /opt/root_src/geom/geompainter/src/TGeoChecker.cxx:1246; 46: Taking false branch in /opt/root_src/geom/geompainter/src/TGeoChecker.cxx:1246; 47: Assuming the condition is false in /opt/root_src/geom/geompainter/src/TGeoChecker.cxx:1247; 48: Taking false branch in /opt/root_src/geom/geompainter/src/TGeoChecker.cxx:1247; 49: Assuming 'id' is < 'ncheck' in /opt/root_src/geom/geompainter/src/TGeoChecker.cxx:1193; 50: Loop condition is true. Entering loop body in /opt/root_src/geom/geompainter/src/TGeoChecker.cxx:1193; 51: Taking false branch in /opt/root_src/geom/geompainter/src/TGeoChecker.cxx:1197; 52: Assuming 'incrt' is true in /opt/root_src/geom/geompainter/src/TGeoChecker.cxx:1201; 53: Taking false branch in /opt/root,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:87141,allocate,allocated,87141,https://root.cern,https://github.com/root-project/root/issues/7428,1,['allocate'],['allocated']
Energy Efficiency,"oc_append(_Args&& ...) [with _Args = {char}; _Tp = char; _Alloc = std::allocator<char>]’ at /usr/include/c++/14/bits/vector.tcc:688:7,; inlined from ‘constexpr std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...) [with _Args = {char}; _Tp = char; _Alloc = std::allocator<char>]’ at /usr/include/c++/14/bits/vector.tcc:123:21,; inlined from ‘constexpr void std::vector<_Tp, _Alloc>::push_back(value_type&&) [with _Tp = char; _Alloc = std::allocator<char>]’ at /usr/include/c++/14/bits/stl_vector.h:1301:21,; inlined from ‘void ROOT::Minuit2::MnPlot::operator()(double, double, const std::vector<std::pair<double, double> >&) const’ at git/webgui/math/minuit2/src/MnPlot.cxx:51:18:; /usr/include/c++/14/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on pointer ‘<unknown>’ with nonzero offset [1, 576460752303423489] [-Wfree-nonheap-object]; 172 | _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));; | ^; In member function ‘_Tp* std::__new_allocator<_Tp>::allocate(size_type, const void*) [with _Tp = char]’,; inlined from ‘constexpr _Tp* std::allocator< <template-parameter-1-1> >::allocate(std::size_t) [with _Tp = char]’ at /usr/include/c++/14/bits/allocator.h:196:40,; inlined from ‘static constexpr _Tp* std::allocator_traits<std::allocator<_Up> >::allocate(allocator_type&, size_type) [with _Tp = char]’ at /usr/include/c++/14/bits/alloc_traits.h:478:28,; inlined from ‘constexpr std::_Vector_base<_Tp, _Alloc>::pointer std::_Vector_base<_Tp, _Alloc>::_M_allocate(std::size_t) [with _Tp = char; _Alloc = std::allocator<char>]’ at /usr/include/c++/14/bits/stl_vector.h:380:33,; inlined from ‘constexpr void std::vector<_Tp, _Alloc>::reserve(size_type) [with _Tp = char; _Alloc = std::allocator<char>]’ at /usr/include/c++/14/bits/vector.tcc:79:33,; inlined from ‘void ROOT::Minuit2::MnPlot::operator()(double, double, const std::vector<std::pair<double, double> >&) const’ at git/webgui/math/minuit2/src/MnPlot.c",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16359:2177,allocate,allocate,2177,https://root.cern,https://github.com/root-project/root/pull/16359,2,['allocate'],['allocate']
Energy Efficiency,"olormap aims to solve problems that people with **color vision deficiency** have with the common colormaps. For more details see:. Nuñez J, Anderton C, and Renslow R. _Optimizing colormaps with consideration for color vision deficiency to enable accurate interpretation of scientific data._. https://arxiv.org/abs/1712.01662. The colormap stops have been interpolated from the (256 stops) Fiji/ImageJ version [1] and cut down to the 9 stops that ROOT uses (using the scipy Akima interpolator). Alternatively, the official* (18 stop) version committed to plotly.py [2] could be used, which would mean a slight deviation from the other palettes (see code below). In the plot produced by the palette tutorial the difference between the 9 and 18 stops seems negligible, hence sticking to the ROOT default values seems appropriate. Double_t cstps[18] = {0.0, 0.0588235294118, 0.117647058824, 0.176470588235, 0.235294117647, 0.294117647059, 0.352941176471, 0.411764705882, 0.470588235294, 0.529411764706, 0.588235294118, 0.647058823529, 0.705882352941, 0.764705882353, 0.823529411765, 0.882352941176, 0.941176470588, 1.0};; Double_t red[18] = { 0./255., 0./255., 0./255., 39./255., 60./255., 76./255., 91./255., 104./255., 117./255., 131./255., 146./255., 161./255., 176./255., 192./255., 209./255., 225./255., 243./255., 255./255.};; Double_t green[18] = { 32./255., 42./255., 52./255., 63./255., 74./255., 85./255., 95./255., 106./255., 117./255., 129./255., 140./255., 152./255., 165./255., 177./255., 191./255., 204./255., 219./255., 233./255.};; Double_t blue[18] = { 76./255., 102./255., 110./255., 108./255., 107./255., 107./255., 109./255., 112./255., 117./255., 120./255., 120./255., 118./255., 114./255., 109./255., 102./255., 92./255., 79./255., 69./255.};; Idx = TColor::CreateGradientColorTable(18, cstps, red, green, blue, 255, alpha); . *Meaning committed by the original author. [1] https://github.com/fiji/fiji/blob/master/luts/cividis.txt; [2] https://github.com/plotly/plotly.py/pull/883",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1546:1429,green,green,1429,https://root.cern,https://github.com/root-project/root/pull/1546,2,['green'],['green']
Energy Efficiency,"onstructor for 'shared_ptr<THttpCallArg>' in /usr/include/c++/9/bits/shared_ptr.h:701; 10: Calling constructor for '__shared_ptr<THttpCallArg, __gnu_cxx::_S_atomic>' in /usr/include/c++/9/bits/shared_ptr.h:359; 11: Calling constructor for '__shared_count<__gnu_cxx::_S_atomic>' in /usr/include/c++/9/bits/shared_ptr_base.h:1344; 12: Calling '__allocate_guarded<std::allocator<std::_Sp_counted_ptr_inplace<THttpCallArg, std::allocator<THttpCallArg>, __gnu_cxx::_S_atomic>>>' in /usr/include/c++/9/bits/shared_ptr_base.h:677; 13: Calling 'allocator_traits::allocate' in /usr/include/c++/9/bits/allocated_ptr.h:97; 14: Calling 'new_allocator::allocate' in /usr/include/c++/9/bits/alloc_traits.h:444; 15: Taking false branch in /usr/include/c++/9/ext/new_allocator.h:104; 16: Uninitialized value stored to field 'fUniqueID' in /usr/include/c++/9/ext/new_allocator.h:114; 17: Returning from 'new_allocator::allocate' in /usr/include/c++/9/bits/alloc_traits.h:444; 18: Returning from 'allocator_traits::allocate' in /usr/include/c++/9/bits/allocated_ptr.h:97; 19: Calling constructor for '__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<THttpCallArg, std::allocator<THttpCallArg>, __gnu_cxx::_S_atomic>>>' in /usr/include/c++/9/bits/allocated_ptr.h:97; 20: Returning from constructor for '__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<THttpCallArg, std::allocator<THttpCallArg>, __gnu_cxx::_S_atomic>>>' in /usr/include/c++/9/bits/allocated_ptr.h:97; 21: Returning from '__allocate_guarded<std::allocator<std::_Sp_counted_ptr_inplace<THttpCallArg, std::allocator<THttpCallArg>, __gnu_cxx::_S_atomic>>>' in /usr/include/c++/9/bits/shared_ptr_base.h:677; 22: Calling '__allocated_ptr::get' in /usr/include/c++/9/bits/shared_ptr_base.h:678; 23: Calling '__to_address<std::_Sp_counted_ptr_inplace<THttpCallArg, std::allocator<THttpCallArg>, __gnu_cxx::_S_atomic>>' in /usr/include/c++/9/bits/allocated_ptr.h:85; 24: Returning from '__to_address<std::_Sp_counted_ptr_inplace<THttpCallA",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7412:51862,allocate,allocate,51862,https://root.cern,https://github.com/root-project/root/issues/7412,1,['allocate'],['allocate']
Energy Efficiency,"orINS1_13blocked_rangeIjEENS1_25parallel_for_body_wrapperISt8functionIFvjEEjEEKNS1_16auto_partitionerEE7executeERNS1_14execution_dataE]+0x478): undefined reference to `tbb::detail::r1::execution_slot(tbb::detail::d1::execution_data const*)'; /usr/bin/ld: TThreadExecutor.cxx:(.text._ZN3tbb6detail2d19start_forINS1_13blocked_rangeIjEENS1_25parallel_for_body_wrapperISt8functionIFvjEEjEEKNS1_16auto_partitionerEE7executeERNS1_14execution_dataE[_ZN3tbb6detail2d19start_forINS1_13blocked_rangeIjEENS1_25parallel_for_body_wrapperISt8functionIFvjEEjEEKNS1_16auto_partitionerEE7executeERNS1_14execution_dataE]+0x498): undefined reference to `tbb::detail::r1::execution_slot(tbb::detail::d1::execution_data const*)'; /usr/bin/ld: TThreadExecutor.cxx:(.text._ZN3tbb6detail2d19start_forINS1_13blocked_rangeIjEENS1_25parallel_for_body_wrapperISt8functionIFvjEEjEEKNS1_16auto_partitionerEE7executeERNS1_14execution_dataE[_ZN3tbb6detail2d19start_forINS1_13blocked_rangeIjEENS1_25parallel_for_body_wrapperISt8functionIFvjEEjEEKNS1_16auto_partitionerEE7executeERNS1_14execution_dataE]+0x507): undefined reference to `tbb::detail::r1::allocate(tbb::detail::d1::small_object_pool*&, unsigned long, tbb::detail::d1::execution_data const&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text._ZN3tbb6detail2d19start_forINS1_13blocked_rangeIjEENS1_25parallel_for_body_wrapperISt8functionIFvjEEjEEKNS1_16auto_partitionerEE7executeERNS1_14execution_dataE[_ZN3tbb6detail2d19start_forINS1_13blocked_rangeIjEENS1_25parallel_for_body_wrapperISt8functionIFvjEEjEEKNS1_16auto_partitionerEE7executeERNS1_14execution_dataE]+0x58e): undefined reference to `tbb::detail::r1::allocate(tbb::detail::d1::small_object_pool*&, unsigned long, tbb::detail::d1::execution_data const&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text._ZN3tbb6detail2d19start_forINS1_13blocked_rangeIjEENS1_25parallel_for_body_wrapperISt8functionIFvjEEjEEKNS1_16auto_partitionerEE7executeERNS1_14execution_dataE[_ZN3tbb6detail2d19start_forINS1_13blocked_rangeIjEENS1_25paralle",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11931:37790,allocate,allocate,37790,https://root.cern,https://github.com/root-project/root/issues/11931,1,['allocate'],['allocate']
Energy Efficiency,ore/dictgen/src/rootcling_impl.cxx:485; 9: Taking true branch in /opt/root_src/core/dictgen/src/rootcling_impl.cxx:485; 10: Taking true branch in /opt/root_src/core/dictgen/src/rootcling_impl.cxx:488; 11: 's' is non-null in /opt/root_src/core/dictgen/src/rootcling_impl.cxx:497; 12: Left side of '&&' is true in /opt/root_src/core/dictgen/src/rootcling_impl.cxx:497; 13: Loop condition is true. Entering loop body in /opt/root_src/core/dictgen/src/rootcling_impl.cxx:497; 14: Assuming 's' is null in /opt/root_src/core/dictgen/src/rootcling_impl.cxx:497; 15: Left side of '&&' is false in /opt/root_src/core/dictgen/src/rootcling_impl.cxx:497; 16: 's' is null in /opt/root_src/core/dictgen/src/rootcling_impl.cxx:501; 17: Taking false branch in /opt/root_src/core/dictgen/src/rootcling_impl.cxx:501; 18: 'gBuildingROOT' is true in /opt/root_src/core/dictgen/src/rootcling_impl.cxx:508; 19: Taking false branch in /opt/root_src/core/dictgen/src/rootcling_impl.cxx:508; 20: Memory is allocated in /opt/root_src/core/dictgen/src/rootcling_impl.cxx:514; 21: Assuming 'gDriverConfig' is null in /opt/root_src/core/dictgen/src/rootcling_impl.cxx:517; 22: Taking false branch in /opt/root_src/core/dictgen/src/rootcling_impl.cxx:517; 23: Potential leak of memory pointed to by 'env' in /opt/root_src/core/dictgen/src/rootcling_impl.cxx:528; /opt/root_src/core/dictgen/src/rootcling_impl.cxx:861:8: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Assuming the object is a 'CXXRecordDecl' in /opt/root_src/core/dictgen/src/rootcling_impl.cxx:1382; 2: 'clxx' is not equal to null in /opt/root_src/core/dictgen/src/rootcling_impl.cxx:1383; 3: Taking false branch in /opt/root_src/core/dictgen/src/rootcling_impl.cxx:1383; 4: Assuming the condition is false in /opt/root_src/core/dictgen/src/rootcling_impl.cxx:1392; 5: Taking false branch in /opt/root_src/core/dictgen/src/rootcling_impl.cxx:1392; 6: Assuming 'add_template_keyword' is false in /opt/root_src/core/dictgen/src,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7425:34869,allocate,allocated,34869,https://root.cern,https://github.com/root-project/root/issues/7425,1,['allocate'],['allocated']
Energy Efficiency,ore/foundation/inc/TError.h:119; 5: Control jumps to 'case kTransposed:' at line 135 in /opt/root_src/math/matrix/src/TMatrixT.cxx:123; 6: Calling 'TMatrixT::Allocate' in /opt/root_src/math/matrix/src/TMatrixT.cxx:136; 7: Assuming 'no_rows' is >= 0 in /opt/root_src/math/matrix/src/TMatrixT.cxx:479; 8: Left side of '||' is false in /opt/root_src/math/matrix/src/TMatrixT.cxx:479; 9: Assuming 'no_cols' is >= 0 in /opt/root_src/math/matrix/src/TMatrixT.cxx:479; 10: Taking false branch in /opt/root_src/math/matrix/src/TMatrixT.cxx:479; 11: Assuming the condition is false in /opt/root_src/math/matrix/src/TMatrixT.cxx:494; 12: Taking false branch in /opt/root_src/math/matrix/src/TMatrixT.cxx:494; 13: Assuming field 'fNelems' is <= 0 in /opt/root_src/math/matrix/src/TMatrixT.cxx:501; 14: Taking false branch in /opt/root_src/math/matrix/src/TMatrixT.cxx:501; 15: Null pointer value stored to field 'fElements' in /opt/root_src/math/matrix/src/TMatrixT.cxx:506; 16: Returning from 'TMatrixT::Allocate' in /opt/root_src/math/matrix/src/TMatrixT.cxx:136; 17: Calling 'TMatrixT::Transpose' in /opt/root_src/math/matrix/src/TMatrixT.cxx:138; 18: Taking false branch in /opt/root_src/math/matrix/src/TMatrixT.cxx:1472; 19: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:120; 20: Loop condition is false. Exiting loop in /opt/root_src/math/matrix/src/TMatrixT.cxx:1472; 21: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:119; 22: Taking false branch in /opt/root_src/math/matrix/src/TMatrixT.cxx:1473; 23: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:120; 24: Loop condition is false. Exiting loop in /opt/root_src/math/matrix/src/TMatrixT.cxx:1473; 25: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:119; 26: Assuming the condition is true in /opt/root_src/math/matrix/src/TMatrixT.cxx:1475; 27: Taking true branch in /opt/root_src/math/matrix/src/TMatrixT.cxx:1475; 28: Assumin,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7458:125086,Allocate,Allocate,125086,https://root.cern,https://github.com/root-project/root/issues/7458,1,['Allocate'],['Allocate']
Energy Efficiency,ot_src/math/matrix/src/TVectorT.cxx:296; 15: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:120; 16: Loop condition is false. Exiting loop in /opt/root_src/math/matrix/src/TVectorT.cxx:296; 17: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:119; 18: Field 'fIsOwner' is true in /opt/root_src/math/matrix/src/TVectorT.cxx:297; 19: Taking false branch in /opt/root_src/math/matrix/src/TVectorT.cxx:297; 20: Assuming field 'fNrows' is <= 0 in /opt/root_src/math/matrix/src/TVectorT.cxx:304; 21: Taking false branch in /opt/root_src/math/matrix/src/TVectorT.cxx:304; 22: Calling 'TVectorT::Allocate' in /opt/root_src/math/matrix/src/TVectorT.cxx:339; 23: Null pointer value stored to field 'fElements' in /opt/root_src/math/matrix/src/TVectorT.cxx:156; 24: Assuming 'nrows' is < 0 in /opt/root_src/math/matrix/src/TVectorT.cxx:158; 25: Taking true branch in /opt/root_src/math/matrix/src/TVectorT.cxx:158; 26: Returning from 'TVectorT::Allocate' in /opt/root_src/math/matrix/src/TVectorT.cxx:339; 27: Returning from 'TVectorT::ResizeTo' in /opt/root_src/math/matrix/src/TVectorT.cxx:1049; 28: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/math/matrix/src/TVectorT.cxx:1051; /opt/root_src/math/minuit/src/TFitter.cxx:164:10: warning: Value stored to 'igrad' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'igrad' is never read in /opt/root_src/math/minuit/src/TFitter.cxx:164; /opt/root_src/math/minuit/src/TFitter.cxx:182:7: warning: Value stored to 'igrad' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'igrad' is never read in /opt/root_src/math/minuit/src/TFitter.cxx:182; /opt/root_src/math/minuit/src/TFitter.cxx:483:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7458:157015,Allocate,Allocate,157015,https://root.cern,https://github.com/root-project/root/issues/7458,1,['Allocate'],['Allocate']
Energy Efficiency,ot_src/math/matrix/src/TVectorT.cxx:296; 15: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:120; 16: Loop condition is false. Exiting loop in /opt/root_src/math/matrix/src/TVectorT.cxx:296; 17: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:119; 18: Field 'fIsOwner' is true in /opt/root_src/math/matrix/src/TVectorT.cxx:297; 19: Taking false branch in /opt/root_src/math/matrix/src/TVectorT.cxx:297; 20: Assuming field 'fNrows' is <= 0 in /opt/root_src/math/matrix/src/TVectorT.cxx:304; 21: Taking false branch in /opt/root_src/math/matrix/src/TVectorT.cxx:304; 22: Calling 'TVectorT::Allocate' in /opt/root_src/math/matrix/src/TVectorT.cxx:339; 23: Null pointer value stored to field 'fElements' in /opt/root_src/math/matrix/src/TVectorT.cxx:156; 24: Assuming 'nrows' is < 0 in /opt/root_src/math/matrix/src/TVectorT.cxx:158; 25: Taking true branch in /opt/root_src/math/matrix/src/TVectorT.cxx:158; 26: Returning from 'TVectorT::Allocate' in /opt/root_src/math/matrix/src/TVectorT.cxx:339; 27: Returning from 'TVectorT::ResizeTo' in /opt/root_src/math/matrix/src/TVectorT.cxx:982; 28: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/math/matrix/src/TVectorT.cxx:984; /opt/root_src/math/matrix/src/TVectorT.cxx:1051:4: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Assuming 'gMatrixCheck' is 0 in /opt/root_src/math/matrix/src/TVectorT.cxx:1021; 2: Taking false branch in /opt/root_src/math/matrix/src/TVectorT.cxx:1021; 3: Assuming the condition is true in /opt/root_src/math/matrix/src/TVectorT.cxx:1030; 4: Left side of '||' is true in /opt/root_src/math/matrix/src/TVectorT.cxx:1030; 5: 'doResize' is true in /opt/root_src/math/matrix/src/TVectorT.cxx:1031; 6: Left side of '&&' is true in /opt/root_src/math/matrix/src/TVectorT.cxx:1031; 7: Assuming field 'fIsOwner' is true in /opt/root_src/math/matrix/src/TVectorT.cxx:1031; 8: Taking fal,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7458:154516,Allocate,Allocate,154516,https://root.cern,https://github.com/root-project/root/issues/7458,1,['Allocate'],['Allocate']
Energy Efficiency,"ote, that the problem appears if; ```; TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->SetUnloaded();; ```; is called right before main; so it is not due to Cling/Clang being partially tore down. Also calling; ```; TClass::GetClass(""""art::Wrapper<art::Assns<string,int,void> >"")->GetClassInfo();; ```; works properly. This indicates that thes parts of SetUnloaded are ""triggering"" the problem:. ```; InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);. // Make sure SetClassInfo, re-calculated the state.; fState = kForwardDeclared;. delete fIsA; fIsA = 0;; // Disable the autoloader while calling SetClassInfo, to prevent; // the library from being reloaded!; {; TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);; TInterpreter::SuspendAutoParsing autoParseRaii(gCling);; gInterpreter->SetClassInfo(this,kTRUE);; }; ```. Likely disabling template instantiation inside SetClassInfo in this use case. ```; art: /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837: void clang::ClassTemplateSpecializationDecl::setInstantiationOf(clang::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462:1010,green,greenc,1010,https://root.cern,https://github.com/root-project/root/pull/5462,1,['green'],['greenc']
Energy Efficiency,"oth packed into an object* in each row of the dataset, only the index is stored, and the; mapping from index to state name is stored in the category instance. Since all the category classes were happily using the RooCatType, several; parts had to be touched to convert everything to using integers. This feature; has been cooking since March, and the interface for category classes was; discussed in the PPP, but nevertheless, have a double look at the above-mentioned; headers. In more detail:; - Replace RooCatType by an integer.; - Replace names saved in each row of dataset with RooCatType by a map in; RooAbsCategory that maps state names to numbers. This saves 64 bytes; + the size of TObject for each event, and makes loading strings in each; event unnecessary.; - Provide legacy iterator for iterating through states instances of; RooCatType, which will be created on the fly.; - Make RooVectorDataStore store integers instead of RooCatType instances.; - With this, also reduce the amount of unnecessary members in RooVectorDataStore.; - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:; - Provide new interfaces for categories to work without RooCatType.; - Add bracket operator and constructor arguments to define multiple; category states at once or using category[""stateName""] = 1.; - Mark legacy interfaces exposing RooCatType as deprecated in doxygen.; - Stop including RooCatType when R__LESS_INCLUDES is set.; - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE.; - Don't create RooCatType instances, unless users continue to use; the legacy interface.; - Provide functions hasIndex() and hasLabel() to check validity of; index/label.; - Provide function states() with direct access to map of category names; to category numbers.; - Add functions getCurrent{Index|Label} to make clear that they access; class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since; derived category classes might need to recomput",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5502:1675,reduce,reduce,1675,https://root.cern,https://github.com/root-project/root/pull/5502,1,['reduce'],['reduce']
Energy Efficiency,"p_len' is used in the enclosing expression, the value is never actually read from 'temp_len' [clang-analyzer-deadcode.DeadStores]; 1: Although the value stored to 'temp_len' is used in the enclosing expression, the value is never actually read from 'temp_len' in /opt/root_src/gui/gui/src/TGTextView.cxx:1003; /opt/root_src/gui/gui/src/TGTextView.cxx:1016:16: warning: Use of zero-allocated memory [clang-analyzer-cplusplus.NewDelete]; 1: Assuming the condition is false in /opt/root_src/gui/gui/src/TGTextView.cxx:986; 2: Taking false branch in /opt/root_src/gui/gui/src/TGTextView.cxx:986; 3: Assuming the condition is false in /opt/root_src/gui/gui/src/TGTextView.cxx:996; 4: Loop condition is false. Execution continues on line 999 in /opt/root_src/gui/gui/src/TGTextView.cxx:996; 5: Memory is allocated in /opt/root_src/gui/gui/src/TGTextView.cxx:1002; 6: Loop condition is false. Execution continues on line 1016 in /opt/root_src/gui/gui/src/TGTextView.cxx:1004; 7: Use of zero-allocated memory in /opt/root_src/gui/gui/src/TGTextView.cxx:1016; /opt/root_src/gui/gui/src/TGTextView.cxx:1027:10: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGTextView.cxx:1027; /opt/root_src/gui/gui/src/TRootApplication.cxx:83:12: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Calling 'TRootApplication::GetOptions' in /opt/root_src/gui/gui/src/TRootApplication.cxx:41; 2: Assuming 'argc' is non-null in /opt/root_src/gui/gui/src/TRootApplication.cxx:79; 3: Taking false branch in /opt/ro",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:59409,allocate,allocated,59409,https://root.cern,https://github.com/root-project/root/issues/7533,1,['allocate'],['allocated']
Energy Efficiency,"pawn(tbb::detail::d1::task&, tbb::detail::d1::task_group_context&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x178f): undefined reference to `tbb::detail::r1::deallocate(tbb::detail::d1::small_object_pool&, void*, unsigned long, tbb::detail::d1::execution_data const&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x1a47): undefined reference to `tbb::detail::r1::is_group_execution_cancelled(tbb::detail::d1::task_group_context&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x1a9c): undefined reference to `tbb::detail::r1::execution_slot(tbb::detail::d1::execution_data const*)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x1aad): undefined reference to `tbb::detail::r1::execution_slot(tbb::detail::d1::execution_data const*)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x1aca): undefined reference to `tbb::detail::r1::execution_slot(tbb::detail::d1::execution_data const*)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x1b47): undefined reference to `tbb::detail::r1::allocate(tbb::detail::d1::small_object_pool*&, unsigned long, tbb::detail::d1::execution_data const&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x1bec): undefined reference to `tbb::detail::r1::allocate(tbb::detail::d1::small_object_pool*&, unsigned long, tbb::detail::d1::execution_data const&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x1c24): undefined reference to `tbb::detail::r1::spawn(tbb::detail::d1::task&, tbb::detail::d1::task_group_context&)'; /usr/bin/ld: CMakeFiles/Imt.dir/src/TThreadExecutor.cxx.o: in function `ROOT::TThreadExecutor::ParallelFor(unsigned int, unsigned int, unsigned int, std::function<void (unsigned int)> const&)':; TThreadExecutor.cxx:(.text+0x1f73): undefined reference to `tbb::detail::r1::global_control_active_value(int)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x1fc9): undefined reference to `tbb::detail::r1::execute(tbb::detail::d1::task_arena_base&, tbb::detail::d1::delegate_base&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x1ff3): undefined reference to `tbb::detail::r1::global_control_a",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11931:20786,allocate,allocate,20786,https://root.cern,https://github.com/root-project/root/issues/11931,1,['allocate'],['allocate']
Energy Efficiency,"place in the existing memory buffers). For example - primitives and lists of primitives are supported; anything needing references are not. Despite the fact many of ROOT's very useful deserialization features are not supported, the limited feature set covers a range of analysis use cases. In particular, the current version of CMS's proposed NanoAOD format can be read solely via bulk APIs. Where the bulk IO APIs are applicable, we see an order-magnitude improvement in event rates for some use cases (including CMS NanoAOD). The speedup becomes more noticeable as the data read from the event is smaller (meaning the traditional ROOT IO overheads are larger). Somewhere in the neighborhood of 5KB objects read per event is the point where bulk IO APIs should be noticeably faster. This PR provides three interfaces:. * A raw, low-level interface. The user can invoke the bulk IO APIs directly and get a buffer of primitive types, serialized or deserialized. It is not envisioned this is used by users, but by API writers.; * A TTreeReader-like interface, TTreeReaderFast. This is meant to be used by users; it utilizes the low-level interface to retrieve the serialized buffer and templated code will inline the deserializing as part of iterating through the tree. The speed here is gained by the fact only a single pass in memory is needed to deserialize and apply user code, rather than two.; * The intent is that this interface can be extended in the future and used by TDataFrame, provided we can make TDataFrame sufficiently fast.; * A Python-based numpy export interface. This exposes the (possibly serialized) memory directly as numpy arrays, allowing for efficient access to ROOT-serialized objects from the Python language.; * The numpy interface is low-level for Python; we intend to further explore the ideal high-level interface through projects such as https://github.com/diana-hep/plur. (With many thanks to @jpivarski for driving this work home with his work on a python interface!)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2519:2177,efficient,efficient,2177,https://root.cern,https://github.com/root-project/root/pull/2519,1,['efficient'],['efficient']
Energy Efficiency,pt/root_src/core/base/src/TString.cxx:2151; 9: Calling copy constructor for 'TString' in /opt/root_src/core/base/src/TString.cxx:2156; 10: Assuming the condition is false in /opt/root_src/core/base/src/TString.cxx:173; 11: Taking false branch in /opt/root_src/core/base/src/TString.cxx:173; 12: Calling 'TString::Init' in /opt/root_src/core/base/src/TString.cxx:177; 13: Assuming 'capacity' is >= 0 in /opt/root_src/core/base/src/TString.cxx:249; 14: Taking false branch in /opt/root_src/core/base/src/TString.cxx:249; 15: 'nchar' is >= 0 in /opt/root_src/core/base/src/TString.cxx:253; 16: Taking false branch in /opt/root_src/core/base/src/TString.cxx:253; 17: Assuming the condition is false in /opt/root_src/core/base/src/TString.cxx:257; 18: Taking false branch in /opt/root_src/core/base/src/TString.cxx:257; 19: Assuming 'capacity' is >= kMinCap in /opt/root_src/core/base/src/TString.cxx:265; 20: Taking false branch in /opt/root_src/core/base/src/TString.cxx:265; 21: Memory is allocated in /opt/root_src/core/base/src/TString.cxx:270; 22: Returned allocated memory in /opt/root_src/core/base/src/TString.cxx:177; 23: Returning from copy constructor for 'TString' in /opt/root_src/core/base/src/TString.cxx:2156; 24: Assuming the condition is true in /opt/root_src/core/base/src/TString.cxx:2158; 25: Taking true branch in /opt/root_src/core/base/src/TString.cxx:2158; 26: Calling 'TString::Remove' in /opt/root_src/core/base/src/TString.cxx:2160; 27: Calling 'TString::Replace' in /opt/root_src/core/base/inc/TString.h:677; 28: 'pos' is > 'kNPOS' in /opt/root_src/core/base/src/TString.cxx:1002; 29: Left side of '||' is false in /opt/root_src/core/base/src/TString.cxx:1002; 30: 'pos' is <= 'len' in /opt/root_src/core/base/src/TString.cxx:1002; 31: Taking false branch in /opt/root_src/core/base/src/TString.cxx:1002; 32: 'n1' is >= 0 in /opt/root_src/core/base/src/TString.cxx:1007; 33: Taking false branch in /opt/root_src/core/base/src/TString.cxx:1007; 34: 'n2' is >= 0 in /opt/root_s,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7412:124226,allocate,allocated,124226,https://root.cern,https://github.com/root-project/root/issues/7412,1,['allocate'],['allocated']
Energy Efficiency,pt/root_src/math/physics/src/TGenPhaseSpace.cxx:103; 2: Taking false branch in /opt/root_src/math/physics/src/TGenPhaseSpace.cxx:103; 3: Assuming 'n' is >= field 'fNt' in /opt/root_src/math/physics/src/TGenPhaseSpace.cxx:110; 4: Loop condition is false. Execution continues on line 118 in /opt/root_src/math/physics/src/TGenPhaseSpace.cxx:110; 5: Assuming the condition is false in /opt/root_src/math/physics/src/TGenPhaseSpace.cxx:120; 6: Loop condition is false. Execution continues on line 128 in /opt/root_src/math/physics/src/TGenPhaseSpace.cxx:120; 7: The left operand of '*' is a garbage value in /opt/root_src/math/physics/src/TGenPhaseSpace.cxx:128; /opt/root_src/math/physics/src/TRobustEstimator.cxx:661:13: warning: Use of zero-allocated memory [clang-analyzer-cplusplus.NewDelete]; 1: Assuming 'hh' is equal to 0 in /opt/root_src/math/physics/src/TRobustEstimator.cxx:610; 2: Taking true branch in /opt/root_src/math/physics/src/TRobustEstimator.cxx:610; 3: Memory is allocated in /opt/root_src/math/physics/src/TRobustEstimator.cxx:626; 4: Loop condition is false. Execution continues on line 629 in /opt/root_src/math/physics/src/TRobustEstimator.cxx:627; 5: Loop condition is false. Execution continues on line 661 in /opt/root_src/math/physics/src/TRobustEstimator.cxx:629; 6: Use of zero-allocated memory in /opt/root_src/math/physics/src/TRobustEstimator.cxx:661; /opt/root_src/math/physics/src/TRobustEstimator.cxx:922:7: warning: Value stored to 'repeat' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'repeat' is never read in /opt/root_src/math/physics/src/TRobustEstimator.cxx:922; /opt/root_src/math/physics/src/TRobustEstimator.cxx:1303:16: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]; 1: Assuming 'i' is >= 'nmerged' in /opt/root_src/math/physics/src/TRobustEstimator.cxx:971; 2: Loop condition is false. Execution continues on line 978 in /opt/root_src/math/physics/src/TRobustEstimator.cxx:971; 3: Cal,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7458:228270,allocate,allocated,228270,https://root.cern,https://github.com/root-project/root/issues/7458,1,['allocate'],['allocated']
Energy Efficiency,"r element access; - `PushProxy()`, `PopProxy()`: for selecting the target object. A usage example can be seen [here](https://github.com/root-project/root/pull/11525/files#diff-81832cd72f5d9af1508fd153abdf63b6406256248f1d1440f966e82e628da141). ## Changes or fixes:; - Added class `RCollectionClassField`, representing a field of a user-defined class that behaves as a collection that is compliant with the `TVirtualCollectionProxy` interface.; Given that the `RField<T>` primary template definition (that used if no specialization matches) uses `RClassField` to store members of a class, we rely on an additional helper type (`IsCollectionProxy<T>`) to annotate that a particular class has an associated collection proxy (see example below).; ```c++; // Alternatively, this can be specified via a member type in the user-defined class; see the documentation; template <>; struct IsCollectionProxy<ProxiedCollection> : std::true_type {};. auto model = RNTupleModel::Create();; auto fieldKlass = model->MakeField<MyClass>(""fieldKlass""); // Regular class; auto fieldCollection = model->MakeField<ProxiedCollection>(""fieldCollection""); // Class with associated collection proxy; ```; **This tag is not required when using the type-erased interface** (i.e., `RFieldBase::Create()`), as the use of a collection proxy can be determined at run time via `TClass`.; - `RCollectionClassField::ReadGlobalImpl()`: reduce the number of virtual calls to `TVirtualCollectionProxy::Insert()` by reading and inserting a block of elements at once. The size of the buffer that holds the elements is set by `RCollectionClassField::kReadChunkSize` (in bytes).; - Provide implementation and tests for `RPrintValueVisitor::VisitCollectionClassField()`; - Add unit tests for collections of fundamental types, compound types, vector of a collection proxy, and nested collection proxies.; - Update `doc/specifications.md`. ## Checklist:; - [X] tested changes locally; - [X] updated the docs (if necessary). This PR fixes #11523.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11525:2415,reduce,reduce,2415,https://root.cern,https://github.com/root-project/root/pull/11525,1,['reduce'],['reduce']
Energy Efficiency,"r.cpp:0:0; #29 0x0000000001c40f00 clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) Parser.cpp:0:0; #30 0x000000000152a89e cling::IncrementalParser::ParseInternal(llvm::StringRef) IncrementalParser.cpp:0:0; #31 0x0000000001529c34 cling::IncrementalParser::Initialize(llvm::SmallVectorImpl<llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0; #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0; #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17; #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7; #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16; #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4; #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555); #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89); <snip/>; ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `lib",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861:5397,green,greenc,5397,https://root.cern,https://github.com/root-project/root/issues/10861,1,['green'],['greenc']
Energy Efficiency,"r]: ==1965517== by 0xF36DE4B: operator() (TStreamerInfoActions.h:123); [1965517:tpc-tracker]: ==1965517== by 0xF36DE4B: ApplySequence (TBufferFile.cxx:3670); [1965517:tpc-tracker]: ==1965517== by 0xF36DE4B: TBufferFile::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) (TBufferFile.cxx:3661); [1965517:tpc-tracker]: ==1965517== by 0xF376CEB: TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) (TBufferFile.cxx:3598); [1965517:tpc-tracker]: ==1965517== by 0xF3F4633: Streamer (TClass.h:614); [1965517:tpc-tracker]: ==1965517== by 0xF3F4633: TKey::ReadObjectAny(TClass const*) (TKey.cxx:1120); [1965517:tpc-tracker]: ==1965517== by 0xF3B82E3: TDirectoryFile::GetObjectChecked(char const*, TClass const*) (TDirectoryFile.cxx:1111); [1965517:tpc-tracker]: ==1965517== Address 0x153fbb80 is 0 bytes after a block of size 1,440 alloc'd; [1965517:tpc-tracker]: ==1965517== at 0x4868908: operator new(unsigned long) (vg_replace_malloc.c:483); [1965517:tpc-tracker]: ==1965517== by 0x60E5D1F: allocate (new_allocator.h:137); [1965517:tpc-tracker]: ==1965517== by 0x60E5D1F: allocate (allocator.h:188); [1965517:tpc-tracker]: ==1965517== by 0x60E5D1F: allocate (alloc_traits.h:464); [1965517:tpc-tracker]: ==1965517== by 0x60E5D1F: _M_allocate (stl_vector.h:378); [1965517:tpc-tracker]: ==1965517== by 0x60E5D1F: _M_allocate (stl_vector.h:375); [1965517:tpc-tracker]: ==1965517== by 0x60E5D1F: std::vector<o2::tpc::PadFlags, std::allocator<o2::tpc::PadFlags> >::_M_default_append(unsigned long) (vector.tcc:650); [1965517:tpc-tracker]: ==1965517== by 0xF3E5797: void TGenCollectionStreamer::ReadBufferVectorPrimitives<int>(TBuffer&, void*, TClass const*) (TGenCollectionStreamer.cxx:1176); [1965517:tpc-tracker]: ==1965517== by 0xF36EC7B: Streamer (TClass.h:614); [1965517:tpc-tracker]: ==1965517== by 0xF36EC7B: TBufferFile::ReadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) (TBufferFile.cxx:1616); [1965517:tpc-tracker]: ==1965517== by 0xF58C84B: int T",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16312:6321,allocate,allocate,6321,https://root.cern,https://github.com/root-project/root/issues/16312,1,['allocate'],['allocate']
Energy Efficiency,"r]: ==1965517== by 0xF36DE4B: operator() (TStreamerInfoActions.h:123); [1965517:tpc-tracker]: ==1965517== by 0xF36DE4B: ApplySequence (TBufferFile.cxx:3670); [1965517:tpc-tracker]: ==1965517== by 0xF36DE4B: TBufferFile::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) (TBufferFile.cxx:3661); [1965517:tpc-tracker]: ==1965517== by 0xF376CEB: TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) (TBufferFile.cxx:3598); [1965517:tpc-tracker]: ==1965517== by 0xF3F4633: Streamer (TClass.h:614); [1965517:tpc-tracker]: ==1965517== by 0xF3F4633: TKey::ReadObjectAny(TClass const*) (TKey.cxx:1120); [1965517:tpc-tracker]: ==1965517== by 0xF3B82E3: TDirectoryFile::GetObjectChecked(char const*, TClass const*) (TDirectoryFile.cxx:1111); [1965517:tpc-tracker]: ==1965517== Address 0x153fbb81 is 1 bytes after a block of size 1,440 alloc'd; [1965517:tpc-tracker]: ==1965517== at 0x4868908: operator new(unsigned long) (vg_replace_malloc.c:483); [1965517:tpc-tracker]: ==1965517== by 0x60E5D1F: allocate (new_allocator.h:137); [1965517:tpc-tracker]: ==1965517== by 0x60E5D1F: allocate (allocator.h:188); [1965517:tpc-tracker]: ==1965517== by 0x60E5D1F: allocate (alloc_traits.h:464); [1965517:tpc-tracker]: ==1965517== by 0x60E5D1F: _M_allocate (stl_vector.h:378); [1965517:tpc-tracker]: ==1965517== by 0x60E5D1F: _M_allocate (stl_vector.h:375); [1965517:tpc-tracker]: ==1965517== by 0x60E5D1F: std::vector<o2::tpc::PadFlags, std::allocator<o2::tpc::PadFlags> >::_M_default_append(unsigned long) (vector.tcc:650); [1965517:tpc-tracker]: ==1965517== by 0xF3E5797: void TGenCollectionStreamer::ReadBufferVectorPrimitives<int>(TBuffer&, void*, TClass const*) (TGenCollectionStreamer.cxx:1176); [1965517:tpc-tracker]: ==1965517== by 0xF36EC7B: Streamer (TClass.h:614); ```. ### Reproducer. I do not have one which does not involve running ALICE reconstruction on ARM. ### ROOT version. 6.32.02. ### Installation method. aliBuild. ### Operating system. ALMA Linux 9 on ARM64 (Ampere A",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16312:12162,allocate,allocate,12162,https://root.cern,https://github.com/root-project/root/issues/16312,1,['allocate'],['allocate']
Energy Efficiency,ranch in /opt/root_src/core/base/src/TString.cxx:105; 29: Calling 'TString::Init' in /opt/root_src/core/base/src/TString.cxx:107; 30: 'capacity' is >= 0 in /opt/root_src/core/base/src/TString.cxx:249; 31: Taking false branch in /opt/root_src/core/base/src/TString.cxx:249; 32: 'nchar' is >= 0 in /opt/root_src/core/base/src/TString.cxx:253; 33: Taking false branch in /opt/root_src/core/base/src/TString.cxx:253; 34: Assuming the condition is false in /opt/root_src/core/base/src/TString.cxx:257; 35: Taking false branch in /opt/root_src/core/base/src/TString.cxx:257; 36: Assuming 'capacity' is >= kMinCap in /opt/root_src/core/base/src/TString.cxx:265; 37: Taking false branch in /opt/root_src/core/base/src/TString.cxx:265; 38: Memory is allocated in /opt/root_src/core/base/src/TString.cxx:270; 39: Returned allocated memory in /opt/root_src/core/base/src/TString.cxx:107; 40: Returning from constructor for 'TString' in /opt/root_src/core/base/src/TString.cxx:2140; 41: Returned allocated memory in /opt/root_src/core/base/src/TString.cxx:2172; 42: Potential leak of memory pointed to by field 'fData' in /opt/root_src/core/base/src/TString.cxx:2173; /opt/root_src/core/base/src/TString.cxx:2191:12: warning: Potential leak of memory pointed to by field 'fData' [clang-analyzer-cplusplus.NewDeleteLeaks]; 1: Assuming 'base_in' is >= 2 in /opt/root_src/core/base/src/TString.cxx:2151; 2: Left side of '||' is false in /opt/root_src/core/base/src/TString.cxx:2151; 3: Assuming 'base_in' is <= 36 in /opt/root_src/core/base/src/TString.cxx:2151; 4: Left side of '||' is false in /opt/root_src/core/base/src/TString.cxx:2151; 5: Assuming 'base_out' is >= 2 in /opt/root_src/core/base/src/TString.cxx:2151; 6: Left side of '||' is false in /opt/root_src/core/base/src/TString.cxx:2151; 7: Assuming 'base_out' is <= 36 in /opt/root_src/core/base/src/TString.cxx:2151; 8: Taking false branch in /opt/root_src/core/base/src/TString.cxx:2151; 9: Assuming the condition is false in /opt/root_src/core/base/,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7412:139974,allocate,allocated,139974,https://root.cern,https://github.com/root-project/root/issues/7412,1,['allocate'],['allocated']
Energy Efficiency,ranch in /opt/root_src/core/base/src/TString.cxx:105; 33: Calling 'TString::Init' in /opt/root_src/core/base/src/TString.cxx:107; 34: 'capacity' is >= 0 in /opt/root_src/core/base/src/TString.cxx:249; 35: Taking false branch in /opt/root_src/core/base/src/TString.cxx:249; 36: 'nchar' is >= 0 in /opt/root_src/core/base/src/TString.cxx:253; 37: Taking false branch in /opt/root_src/core/base/src/TString.cxx:253; 38: Assuming the condition is false in /opt/root_src/core/base/src/TString.cxx:257; 39: Taking false branch in /opt/root_src/core/base/src/TString.cxx:257; 40: Assuming 'capacity' is >= kMinCap in /opt/root_src/core/base/src/TString.cxx:265; 41: Taking false branch in /opt/root_src/core/base/src/TString.cxx:265; 42: Memory is allocated in /opt/root_src/core/base/src/TString.cxx:270; 43: Returned allocated memory in /opt/root_src/core/base/src/TString.cxx:107; 44: Returning from constructor for 'TString' in /opt/root_src/core/base/src/TString.cxx:2140; 45: Returned allocated memory in /opt/root_src/core/base/src/TString.cxx:2189; 46: 'isSigned' is false in /opt/root_src/core/base/src/TString.cxx:2190; 47: Taking false branch in /opt/root_src/core/base/src/TString.cxx:2190; 48: Potential leak of memory pointed to by field 'fData' in /opt/root_src/core/base/src/TString.cxx:2191; /opt/root_src/core/base/src/TString.cxx:2253:15: warning: Potential leak of memory pointed to by 'tok.fRep..fLong.fData' [clang-analyzer-cplusplus.NewDeleteLeaks]; 1: Assuming the condition is false in /opt/root_src/core/base/src/TString.cxx:2222; 2: Loop condition is false. Execution continues on line 2232 in /opt/root_src/core/base/src/TString.cxx:2222; 3: 'nrDiff' is <= 1 in /opt/root_src/core/base/src/TString.cxx:2234; 4: Taking false branch in /opt/root_src/core/base/src/TString.cxx:2234; 5: Loop condition is true. Entering loop body in /opt/root_src/core/base/src/TString.cxx:2243; 6: Assuming the condition is true in /opt/root_src/core/base/src/TString.cxx:2248; 7: Taking true branch ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7412:143740,allocate,allocated,143740,https://root.cern,https://github.com/root-project/root/issues/7412,1,['allocate'],['allocated']
Energy Efficiency,rc/io/xml/src/TXMLEngine.cxx:1816; 8: Taking false branch in /opt/root_src/io/xml/src/TXMLEngine.cxx:1902; 9: Assuming the condition is false in /opt/root_src/io/xml/src/TXMLEngine.cxx:1906; 10: Taking false branch in /opt/root_src/io/xml/src/TXMLEngine.cxx:1906; 11: Assuming the condition is false in /opt/root_src/io/xml/src/TXMLEngine.cxx:1946; 12: Taking false branch in /opt/root_src/io/xml/src/TXMLEngine.cxx:1946; 13: Assuming the condition is false in /opt/root_src/io/xml/src/TXMLEngine.cxx:2102; 14: Taking false branch in /opt/root_src/io/xml/src/TXMLEngine.cxx:2102; 15: Assuming the condition is false in /opt/root_src/io/xml/src/TXMLEngine.cxx:2110; 16: Taking false branch in /opt/root_src/io/xml/src/TXMLEngine.cxx:2110; 17: Assuming 'len' is > 0 in /opt/root_src/io/xml/src/TXMLEngine.cxx:2113; 18: Taking false branch in /opt/root_src/io/xml/src/TXMLEngine.cxx:2113; 19: Calling 'TXMLEngine::AllocateNode' in /opt/root_src/io/xml/src/TXMLEngine.cxx:2115; 20: Memory is allocated in /opt/root_src/io/xml/src/TXMLEngine.cxx:1515; 21: Assuming 'parent' is equal to null in /opt/root_src/io/xml/src/TXMLEngine.cxx:1525; 22: Taking false branch in /opt/root_src/io/xml/src/TXMLEngine.cxx:1525; 23: Returned allocated memory in /opt/root_src/io/xml/src/TXMLEngine.cxx:2115; 24: Assuming 'colon' is equal to null in /opt/root_src/io/xml/src/TXMLEngine.cxx:2124; 25: Left side of '&&' is false in /opt/root_src/io/xml/src/TXMLEngine.cxx:2124; 26: Taking false branch in /opt/root_src/io/xml/src/TXMLEngine.cxx:2130; 27: Assuming the condition is true in /opt/root_src/io/xml/src/TXMLEngine.cxx:2134; 28: Taking true branch in /opt/root_src/io/xml/src/TXMLEngine.cxx:2134; 29: Potential leak of memory pointed to by 'node' in /opt/root_src/io/xml/src/TXMLEngine.cxx:2135; /opt/root_src/io/xml/src/TXMLFile.cxx:203:7: warning: Value stored to 'recreate' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'recreate' is never read in /opt/root_src/io/xml/src/TXMLFile.cxx:2,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:132274,allocate,allocated,132274,https://root.cern,https://github.com/root-project/root/issues/7431,1,['allocate'],['allocated']
Energy Efficiency,"reamerInfoActions.h:123); [1965517:tpc-tracker]: ==1965517== by 0xF36DE4B: ApplySequence (TBufferFile.cxx:3670); [1965517:tpc-tracker]: ==1965517== by 0xF36DE4B: TBufferFile::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) (TBufferFile.cxx:3661); [1965517:tpc-tracker]: ==1965517== by 0xF376CEB: TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) (TBufferFile.cxx:3598); [1965517:tpc-tracker]: ==1965517== by 0xF3F4633: Streamer (TClass.h:614); [1965517:tpc-tracker]: ==1965517== by 0xF3F4633: TKey::ReadObjectAny(TClass const*) (TKey.cxx:1120); [1965517:tpc-tracker]: ==1965517== by 0xF3B82E3: TDirectoryFile::GetObjectChecked(char const*, TClass const*) (TDirectoryFile.cxx:1111); [1965517:tpc-tracker]: ==1965517== Address 0x153fbb81 is 1 bytes after a block of size 1,440 alloc'd; [1965517:tpc-tracker]: ==1965517== at 0x4868908: operator new(unsigned long) (vg_replace_malloc.c:483); [1965517:tpc-tracker]: ==1965517== by 0x60E5D1F: allocate (new_allocator.h:137); [1965517:tpc-tracker]: ==1965517== by 0x60E5D1F: allocate (allocator.h:188); [1965517:tpc-tracker]: ==1965517== by 0x60E5D1F: allocate (alloc_traits.h:464); [1965517:tpc-tracker]: ==1965517== by 0x60E5D1F: _M_allocate (stl_vector.h:378); [1965517:tpc-tracker]: ==1965517== by 0x60E5D1F: _M_allocate (stl_vector.h:375); [1965517:tpc-tracker]: ==1965517== by 0x60E5D1F: std::vector<o2::tpc::PadFlags, std::allocator<o2::tpc::PadFlags> >::_M_default_append(unsigned long) (vector.tcc:650); [1965517:tpc-tracker]: ==1965517== by 0xF3E5797: void TGenCollectionStreamer::ReadBufferVectorPrimitives<int>(TBuffer&, void*, TClass const*) (TGenCollectionStreamer.cxx:1176); [1965517:tpc-tracker]: ==1965517== by 0xF36EC7B: Streamer (TClass.h:614); ```. ### Reproducer. I do not have one which does not involve running ALICE reconstruction on ARM. ### ROOT version. 6.32.02. ### Installation method. aliBuild. ### Operating system. ALMA Linux 9 on ARM64 (Ampere Altra). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16312:12243,allocate,allocate,12243,https://root.cern,https://github.com/root-project/root/issues/16312,2,['allocate'],['allocate']
Energy Efficiency,"rg, std::allocator<THttpCallArg>, >' in /usr/include/c++/9/bits/shared_ptr.h:717; 9: Calling constructor for 'shared_ptr<THttpCallArg>' in /usr/include/c++/9/bits/shared_ptr.h:701; 10: Calling constructor for '__shared_ptr<THttpCallArg, __gnu_cxx::_S_atomic>' in /usr/include/c++/9/bits/shared_ptr.h:359; 11: Calling constructor for '__shared_count<__gnu_cxx::_S_atomic>' in /usr/include/c++/9/bits/shared_ptr_base.h:1344; 12: Calling '__allocate_guarded<std::allocator<std::_Sp_counted_ptr_inplace<THttpCallArg, std::allocator<THttpCallArg>, __gnu_cxx::_S_atomic>>>' in /usr/include/c++/9/bits/shared_ptr_base.h:677; 13: Calling 'allocator_traits::allocate' in /usr/include/c++/9/bits/allocated_ptr.h:97; 14: Calling 'new_allocator::allocate' in /usr/include/c++/9/bits/alloc_traits.h:444; 15: Taking false branch in /usr/include/c++/9/ext/new_allocator.h:104; 16: Uninitialized value stored to field 'fUniqueID' in /usr/include/c++/9/ext/new_allocator.h:114; 17: Returning from 'new_allocator::allocate' in /usr/include/c++/9/bits/alloc_traits.h:444; 18: Returning from 'allocator_traits::allocate' in /usr/include/c++/9/bits/allocated_ptr.h:97; 19: Calling constructor for '__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<THttpCallArg, std::allocator<THttpCallArg>, __gnu_cxx::_S_atomic>>>' in /usr/include/c++/9/bits/allocated_ptr.h:97; 20: Returning from constructor for '__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<THttpCallArg, std::allocator<THttpCallArg>, __gnu_cxx::_S_atomic>>>' in /usr/include/c++/9/bits/allocated_ptr.h:97; 21: Returning from '__allocate_guarded<std::allocator<std::_Sp_counted_ptr_inplace<THttpCallArg, std::allocator<THttpCallArg>, __gnu_cxx::_S_atomic>>>' in /usr/include/c++/9/bits/shared_ptr_base.h:677; 22: Calling '__allocated_ptr::get' in /usr/include/c++/9/bits/shared_ptr_base.h:678; 23: Calling '__to_address<std::_Sp_counted_ptr_inplace<THttpCallArg, std::allocator<THttpCallArg>, __gnu_cxx::_S_atomic>>' in /usr/include/c++/9/bit",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7412:51767,allocate,allocate,51767,https://root.cern,https://github.com/root-project/root/issues/7412,1,['allocate'],['allocate']
Energy Efficiency,root -a shows splash screen cut between two display monitors,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14819:52,monitor,monitors,52,https://root.cern,https://github.com/root-project/root/issues/14819,1,['monitor'],['monitors']
Energy Efficiency,"root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00007fffe26b2ba8 in TClingClassInfo::TClingClassInfo (this=0x3e04b90, interp=0x77e5d0, name=0x6a1ad0 ""art::Wrapper<art::Assns<string,int,void> >"") at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TClingClassInfo.cxx:95. #21 0x00007fffe26cacba in TCling::SetClassInfo (this=0x77bdf0, cl=0x3983b80, reload=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TCling.cxx:3785. #22 0x00007ffff74d245f in TClass::SetUnloaded (this=0x3983b80) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/meta/src/TClass.cxx:6081. #23 0x00000000004025f5 in main (argc=3, argv=0x7fffffff68f8) at /scratch/greenc/build/mrb-art-devel/e20-debug/build_slf7.x86_64/art/art/Framework/Art/art.cc:26. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462:6319,green,greenc,6319,https://root.cern,https://github.com/root-project/root/pull/5462,5,['green'],['greenc']
Energy Efficiency,root_src/tmva/pymva/src/MethodPyKeras.cxx:432; 14: Loop condition is false. Execution continues on line 439 in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:432; 15: Assuming 'i' is >= 'nTrainingEvents' in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:416; 16: Loop condition is false. Execution continues on line 442 in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:416; 17: Memory is allocated in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:460; 18: 'i' is < 'nValEvents' in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:464; 19: Loop condition is true. Entering loop body in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:464; 20: Assuming 'j' is < field 'fNVars' in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:468; 21: Loop condition is true. Entering loop body in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:468; 22: Use of zero-allocated memory in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:469; /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:474:39: warning: Use of zero-allocated memory [clang-analyzer-cplusplus.NewDelete]; 1: Assuming field 'fModelIsSetup' is true in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:400; 2: Taking false branch in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:400; 3: 'i' is < 'nTrainingEvents' in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:416; 4: Loop condition is true. Entering loop body in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:416; 5: Assuming 'j' is >= field 'fNVars' in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:419; 6: Loop condition is false. Execution continues on line 425 in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:419; 7: Assuming the condition is false in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:425; 8: Left side of '||' is false in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:425; 9: Assuming the condition is false in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:425; 10: Taking false branch in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:425; 11: Assuming the condition is true in ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:2260,allocate,allocated,2260,https://root.cern,https://github.com/root-project/root/issues/7526,1,['allocate'],['allocated']
Energy Efficiency,root_src/tmva/pymva/src/MethodPyTorch.cxx:331; 14: Loop condition is false. Execution continues on line 338 in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:331; 15: Assuming 'i' is >= 'nTrainingEvents' in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:315; 16: Loop condition is false. Execution continues on line 341 in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:315; 17: Memory is allocated in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:359; 18: 'i' is < 'nValEvents' in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:363; 19: Loop condition is true. Entering loop body in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:363; 20: Assuming 'j' is < field 'fNVars' in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:367; 21: Loop condition is true. Entering loop body in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:367; 22: Use of zero-allocated memory in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:368; /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:373:39: warning: Use of zero-allocated memory [clang-analyzer-cplusplus.NewDelete]; 1: Assuming field 'fModelIsSetup' is true in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:298; 2: Taking false branch in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:298; 3: 'i' is < 'nTrainingEvents' in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:315; 4: Loop condition is true. Entering loop body in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:315; 5: Assuming 'j' is >= field 'fNVars' in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:318; 6: Loop condition is false. Execution continues on line 324 in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:318; 7: Assuming the condition is false in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:324; 8: Left side of '||' is false in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:324; 9: Assuming the condition is false in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:324; 10: Taking false branch in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:324; 11: Assuming the condition is true in ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:12492,allocate,allocated,12492,https://root.cern,https://github.com/root-project/root/issues/7526,1,['allocate'],['allocated']
Energy Efficiency,"rror message shows ""The items cannot be built in parallel."" but I have tried build single parallel still hit this error); Error:; ```; CustomBuild:; ""The build of 'F:\gitP\root-project\root\build_x86_asan2\CMakeFiles\ecd3d997f4f89e0243288555110c5833\onepcm.rule' depends on 'F:\GITP\ROOT-PROJECT\ROOT\BUILD_X86_ASAN2\ETC\ALLDICT.CXX.PCH' which is produced by the build of 'F:\gitP\root-project\root\build_x86_asan2\CMakeFiles\1b80de060c1a00976f83382f69cf2b7f\allDict.cxx.pch.rule'. The items cannot be built in parallel.""; Generating etc/allDict.cxx.pch; ; Generating PCH for core core\clingutils core\imt core\rint core\thread graf2d\asimage graf2d\gpad graf2d\gpadv7 graf2d\graf graf2d\postscript graf2d\primitivesv7 graf2d\win32gdk graf3d\g3d graf3d\gl gui\fitpanel gui\fitpanelv7 gui\gui hist\hist hist\histdrawv7 hist\histpainter hist\histv7 hist\spectrum hist\spectrumpainter io\io math\genetic math\genvector math\mathcore math\matrix math\minuit math\minuit2 math\physics math\smatrix math\vecops net\net roofit\RDataFrameHelpers roofit\roofit roofit\roofitcore roofit\roostats tmva\sofie tmva\tmva tmva\tmvagui tree\dataframe tree\ntuple tree\tree tree\treeplayer tree\treeviewer; ; =================================================================; ==6948==ERROR: AddressSanitizer: allocator is out of memory trying to allocate 0x203ffff bytes; #0 0x6684e141 (C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\bin\HostX64\x86\clang_rt.asan_dynamic-i386.dll+0x1003e141); #1 0x693e0308 in llvm::safe_realloc(void *, unsigned int) (F:\gitP\root-project\root\build_x86_asan2\bin\libCling.dll+0x11970308); #2 0x6c13ed37 in llvm::SmallVectorBase::grow_pod(void *, unsigned int, unsigned int) (F:\gitP\root-project\root\build_x86_asan2\bin\libCling.dll+0x146ced37); #3 0x67bb3ed6 in llvm::SmallVectorImpl<char>::append<char const *, void>(char const *, char const *) (F:\gitP\root-project\root\build_x86_asan2\bin\libCling.dll+0x10143ed6); #4 0x67ddd547 in l",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9445:1689,allocate,allocate,1689,https://root.cern,https://github.com/root-project/root/issues/9445,1,['allocate'],['allocate']
Energy Efficiency,"s TThreadExecutor::Map; x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map; x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map; ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | ; ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |; TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |; TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |; TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |; TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |; TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming?. - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6327:1701,Reduce,Reduce,1701,https://root.cern,https://github.com/root-project/root/pull/6327,1,['Reduce'],['Reduce']
Energy Efficiency,s allocated in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:461; 18: 'i' is < 'nValEvents' in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:464; 19: Loop condition is true. Entering loop body in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:464; 20: Assuming 'j' is >= field 'fNVars' in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:468; 21: Loop condition is false. Execution continues on line 472 in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:468; 22: Assuming the condition is true in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:472; 23: Left side of '||' is true in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:472; 24: Assuming 'j' is < field 'fNOutputs' in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:473; 25: Loop condition is true. Entering loop body in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:473; 26: Use of zero-allocated memory in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:474; /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:476:48: warning: Use of zero-allocated memory [clang-analyzer-cplusplus.NewDelete]; 1: Assuming field 'fModelIsSetup' is true in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:400; 2: Taking false branch in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:400; 3: 'i' is < 'nTrainingEvents' in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:416; 4: Loop condition is true. Entering loop body in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:416; 5: Assuming 'j' is >= field 'fNVars' in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:419; 6: Loop condition is false. Execution continues on line 425 in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:419; 7: Assuming the condition is false in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:425; 8: Left side of '||' is false in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:425; 9: Assuming the condition is false in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:425; 10: Taking false branch in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:425; 11: Assuming the condition is true in ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:4826,allocate,allocated,4826,https://root.cern,https://github.com/root-project/root/issues/7526,1,['allocate'],['allocated']
Energy Efficiency,s allocated in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:360; 18: 'i' is < 'nValEvents' in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:363; 19: Loop condition is true. Entering loop body in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:363; 20: Assuming 'j' is >= field 'fNVars' in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:367; 21: Loop condition is false. Execution continues on line 371 in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:367; 22: Assuming the condition is true in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:371; 23: Left side of '||' is true in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:371; 24: Assuming 'j' is < field 'fNOutputs' in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:372; 25: Loop condition is true. Entering loop body in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:372; 26: Use of zero-allocated memory in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:373; /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:375:48: warning: Use of zero-allocated memory [clang-analyzer-cplusplus.NewDelete]; 1: Assuming field 'fModelIsSetup' is true in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:298; 2: Taking false branch in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:298; 3: 'i' is < 'nTrainingEvents' in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:315; 4: Loop condition is true. Entering loop body in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:315; 5: Assuming 'j' is >= field 'fNVars' in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:318; 6: Loop condition is false. Execution continues on line 324 in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:318; 7: Assuming the condition is false in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:324; 8: Left side of '||' is false in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:324; 9: Assuming the condition is false in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:324; 10: Taking false branch in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:324; 11: Assuming the condition is true in ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:15058,allocate,allocated,15058,https://root.cern,https://github.com/root-project/root/issues/7526,1,['allocate'],['allocated']
Energy Efficiency,"s);; 	; 	// background used in model; 	RooRealVar fitargpar(""shape"", ""fit argus shape parameter"", -6.5, -8, -6);; 	RooRealVar fitpower(""power"", ""fit argus power parameter"", 0.5, 0, 1);; 	RooArgusBG fitbkg(""fitbkg"", ""Fit Background ARGUS"", x, RooConst(m0), fitargpar, fitpower);; 	RooRealVar fitnsig(""nsig"", ""signal number"", 0.6 * nevents, 0, 1.2 * nevents);; 	RooRealVar fitnbg(""nbg"", ""bg number"", 0.4 * nevents, 0, 1.2 * nevents);. 	// fitting model; 	RooAddPdf model(""model"", ""BW+a fitted"", RooArgList(fitsig, fitbkg), RooArgList(fitnsig, fitnbg));. 	RooMCStudy* mcstudy =; 		new RooMCStudy(mcdist, x, FitModel(model), Binned(kFALSE), Silence(), Extended(kFALSE),; 			FitOptions(Extended(kFALSE), PrintEvalErrors(-1), Save(kTRUE)));. 	RooDLLSignificanceMCSModule sigModule(""nsig"", 0);; 	mcstudy->addModule(sigModule);. 	mcstudy->generateAndFit(100, nevents, kTRUE);. 	std::cout << mcstudy->fitParDataSet() << std::endl;; }; ```. which results in . ```; [#0] ERROR:InputArguments -- RooDataSet::merge(fitParData_model_distribution) ERROR: datasets have different size; RooDataSet::fitParData_model_distribution[#mean_{gauss},#sigma_{gauss},nbg,nsig,power,shape,NLL,ngen,#mean_{gauss}err,#mean_{gauss}pull,#sigma_{gauss}err,#sigma_{gauss}pull,nbgerr,nbgpull,nsigerr,nsigpull,powererr,powerpull,shapeerr,shapepull] = 84 entries; ```. ### Setup; ROOT 6.22/02; WSL v2 with Ubuntu 20.04 ; Binay download (built for linuxx8664gcc). ### Additional context; RooDLLSignificanceMCSModule::finalizeRun() states that ` If a RooDataSet is returned, it must have a length equal to the number of toy experiments performed and will merged with the fitpar dataset of RooMCStudy. `, however that is not true.; If some of the toy experiments performed did not converge, the RooMCStudy dataset size is lower than the number of experiments. At the same time, there is no way (that i could find) to access the fit result status of current run from RooAbsMCStudyModule, making it hard to consistently avoid the merge error",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6949:2972,power,power,2972,https://root.cern,https://github.com/root-project/root/issues/6949,3,['power'],"['power', 'powererr', 'powerpull']"
Energy Efficiency,"s. ### Expected behavior; RooMCStudy and RooAbsMCStudyModule data merging correctly,; OR; A way to consistently make the datasets the same size. ### To Reproduce; Run included macro. ```. #include ""RooRealVar.h""; #include ""RooGaussian.h""; #include ""RooConstVar.h""; #include ""RooAddPdf.h""; #include ""RooMCStudy.h""; #include ""RooFFTConvPdf.h""; #include ""RooArgusBG.h""; #include ""RooDLLSignificanceMCSModule.h"". using namespace RooFit;; const double xmin = 4.3, xmax = 4.55, bratio = 0.3, m0 = 4.482;; const int nevents = 100;. void min_mcsign_error() {; 	RooRealVar x(""mresp"", ""x"", 4.3, 4.55);. 	// signal; 	RooRealVar mean_res(""#mean_{gauss}"", ""mean_res"", 4.47);; 	RooRealVar sigma_res(""#sigma_{gauss}"", ""sigma_res"", 0.05);; 	RooGaussian sig(""gs_res"", ""gs_res"", x, mean_res, sigma_res);. 	// background; 	RooRealVar argpar(""shape"", ""argus shape parameter"", -7);; 	RooRealVar power(""power"", ""argus power parameter"", 0.75);; 	RooArgusBG bkg(""bkg"", Form(""Background ARGUS, m_{0} = %.3f"", m0), x, RooConst(m0), argpar, power);. 	// generating distribution; 	RooRealVar nsig(""nsig"", ""signal number"", bratio);; 	RooRealVar nbg(""nbg"", ""bg number"", 1.-bratio); ; 	RooAddPdf mcdist(""distribution"", ""BW+a"", RooArgList(sig, bkg), RooArgList(nsig, nbg));. 	// signal used in model; 	RooRealVar fitmean_res(""#mean_{gauss}"", ""mean_res"", 4.2, 4., 5.);; 	RooRealVar fitsigma_res(""#sigma_{gauss}"", ""sigma_res"", 0.1, 0., 1.);; 	RooGaussian fitsig(""gs_res"", ""gs_res"", x, fitmean_res, fitsigma_res);; 	; 	// background used in model; 	RooRealVar fitargpar(""shape"", ""fit argus shape parameter"", -6.5, -8, -6);; 	RooRealVar fitpower(""power"", ""fit argus power parameter"", 0.5, 0, 1);; 	RooArgusBG fitbkg(""fitbkg"", ""Fit Background ARGUS"", x, RooConst(m0), fitargpar, fitpower);; 	RooRealVar fitnsig(""nsig"", ""signal number"", 0.6 * nevents, 0, 1.2 * nevents);; 	RooRealVar fitnbg(""nbg"", ""bg number"", 0.4 * nevents, 0, 1.2 * nevents);. 	// fitting model; 	RooAddPdf model(""model"", ""BW+a fitted"", RooArgList(fitsig, fitbkg), RooAr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6949:1361,power,power,1361,https://root.cern,https://github.com/root-project/root/issues/6949,1,['power'],['power']
Energy Efficiency,"scheduler with the [default number of threads](tbb::task_scheduler_init::default_num_threads) and using a ```tbb::task_arena``` per TThreadExecutor to work with a subset of them instead. ```cpp. //Each of the executor manages its own tbb::task_arena,; //which allows the co-existance of TThreadExecutors; //handling different number of threads.; TThreadExecutor executor1(8); //will run on 8 threads; TThreadExecutor executor2(4); //will run on 4 threads. //IMT keeps a different task Arena too!; ROOT::EnableIMT(4); //4 threads will be used in IMT operations; //executor3 will be initialized with 4 threads for backward; //compatibility. Should we not allow this interaction? ; //Should it be initialized with the default number of threads?; TThreadExecutor executor3; //Implicit constructor. Initialized with 4 threads.; ROOT::DisableIMT();. ROOT::EnableIMT(2); //2 threads will be used in IMT operations; ROOT::TThreadExecutor executor(8); //Explicit number of threads. ; // Will execute on 8 threads.; ROOT::EnableIMT(4); //2 threads will be used in IMT operations; //Doesn't change until disabled! ; //Should we allow it instead?; ROOT::DisableIMT();; ```. We still destroy the scheduler when not in use, and TPoolManager only reason to exist is to manage it's lifetime (needs a name change):. ```cpp; {; //TThreadExecutor holds a shared_ptr to the tbb::task_scheduler; TThreadExecutor executor1(8); //will run on 8 threads; }. //executor1 went out of scope and was destroyed together with the scheduler.; //No scheduler active at this point. ROOT::EnableIMT(4);. //""IMT"" holds holds a shared_ptr to the tbb::task_scheduler. Scheduler alive here.; // DisableIMT() will destroy the IMT reference to the scheduler. The reference count of; // the scheduler reaches zero and it gets destroyed.; ROOT::DisableIMT();. ROOT::EnableIMT(4);; TThreadExecutor executor3; //Implicit constructor. Initialized with 4 threads.; ROOT::DisableIMT();. //The scheduler is still alive here because of executor3; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2389:3498,schedul,scheduler,3498,https://root.cern,https://github.com/root-project/root/pull/2389,7,"['Schedul', 'schedul']","['Scheduler', 'scheduler']"
Energy Efficiency,"signed i = 0; i < 20000; ++i); {; ROOT::Math::GSLMCIntegrator vegas(""vegas"", 0., 1.e-1, 10);; }; return 0;; }; ```. Before fix:; ```; valgrind --tool=memcheck --leak-check=full --show-leak-kinds=definite \; --undef-value-errors=no ./mcintegrator. ==12320== Memcheck, a memory error detector; ==12320== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==12320== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info; ==12320== Command: ./mcintegrator; ==12320==; ==12320==; ==12320== HEAP SUMMARY:; ==12320== in use at exit: 100,655,858 bytes in 44,260 blocks; ==12320== total heap usage: 67,782 allocs, 23,522 frees, 101,539,078 bytes allocated; ==12320==; ==12320== 99,089,984 (319,984 direct, 98,770,000 indirect) bytes in 19,999 blocks are definitely lost in loss record 3,515 of 3,515; ==12320== at 0x4C2BE7F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so); ==12320== by 0xAD090F2: gsl_rng_alloc (in /usr/lib/libgsl.so.23.0.0); ==12320== by 0x8223765: Allocate (GSLRngWrapper.h:99); ==12320== by 0x8223765: ROOT::Math::GSLMCIntegrator::GSLMCIntegrator(char const*, double, double, unsigned int) (GSLMCIntegrator.cxx:117); ==12320== by 0x108BF5: main (mcintegrator.cpp:8); ==12320==; ==12320== LEAK SUMMARY:; ==12320== definitely lost: 319,984 bytes in 19,999 blocks; ==12320== indirectly lost: 98,770,000 bytes in 19,754 blocks; ==12320== possibly lost: 1,225,000 bytes in 245 blocks; ==12320== still reachable: 340,874 bytes in 4,262 blocks; ==12320== suppressed: 0 bytes in 0 blocks; ==12320== Reachable blocks (those to which a pointer was found) are not shown.; ==12320== To see them, rerun with: --leak-check=full --show-leak-kinds=all; ==12320==; ==12320== For counts of detected and suppressed errors, rerun with: -v; ==12320== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0); ```. After fix:; ```; valgrind --tool=memcheck --leak-check=full --show-leak-kinds=definite \; --undef-value-errors=no ./mcintegrator. ==14294== Memche",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/928:2001,Allocate,Allocate,2001,https://root.cern,https://github.com/root-project/root/pull/928,1,['Allocate'],['Allocate']
Energy Efficiency,"so bug.; ``` c++; root [2] unsigned int c; (unsigned int) 0; root [3] d=c; Error in <TRint::HandleTermInput()>: std::runtime_error caught: >>> Interpreter compilation error:; expected relocatable expression. root [4] unsigned char e=5; (unsigned char) '0x05'; root [5] f=e; Error in <TRint::HandleTermInput()>: std::runtime_error caught: >>> Interpreter compilation error:; expected relocatable expression; ```. <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. ### Setup; splash screen; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.22/02 https://root.cern |; | (c) 1995-2020, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Aug 17 2020, 12:46:52 |; | From tags/v6-22-02@v6-22-02 |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```; ROOT 6.22/02 on CentOS7 x86_64, at CVMFS; ```; /cvmfs/sft.cern.ch/lcg/app/releases/ROOT/6.22.02/x86_64-centos7-gcc48-opt; ```; and ; ROOT 6.20/06 on CentOS7/gcc x86_64, installed by system admin in my server; ROOT 6.22/02 on windows/MSVC x86_64, binary download. ##### did not tested on current HEAD. strangely, older version, like ROOT5.34/09 or ROOT 5.34/36 on linuxx8664gcc, has no such problem. ```c++; ROOT 5.34/36 (v5-34-36@v5-34-36, Apr 05 2016, 10:25:45 on linuxx8664gcc). CINT/ROOT C/C++ Interpreter version 5.18.00, July 2, 2010; root [0] unsigned long a=5; root [1] b=a; Warning: Automatic variable b is allocated (tmpfile):1:; (unsigned long)5; ```; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->. ### Additional context; <!--; Add any other context about the problem here.; -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6812:2738,allocate,allocated,2738,https://root.cern,https://github.com/root-project/root/issues/6812,1,['allocate'],['allocated']
Energy Efficiency,"spawn(tbb::detail::d1::task&, tbb::detail::d1::task_group_context&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0xf22): undefined reference to `tbb::detail::r1::deallocate(tbb::detail::d1::small_object_pool&, void*, unsigned long, tbb::detail::d1::execution_data const&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x11e2): undefined reference to `tbb::detail::r1::is_group_execution_cancelled(tbb::detail::d1::task_group_context&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x123c): undefined reference to `tbb::detail::r1::execution_slot(tbb::detail::d1::execution_data const*)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x124d): undefined reference to `tbb::detail::r1::execution_slot(tbb::detail::d1::execution_data const*)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x126a): undefined reference to `tbb::detail::r1::execution_slot(tbb::detail::d1::execution_data const*)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x12e8): undefined reference to `tbb::detail::r1::allocate(tbb::detail::d1::small_object_pool*&, unsigned long, tbb::detail::d1::execution_data const&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x138d): undefined reference to `tbb::detail::r1::allocate(tbb::detail::d1::small_object_pool*&, unsigned long, tbb::detail::d1::execution_data const&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x13c5): undefined reference to `tbb::detail::r1::spawn(tbb::detail::d1::task&, tbb::detail::d1::task_group_context&)'; /usr/bin/ld: CMakeFiles/Imt.dir/src/TThreadExecutor.cxx.o: in function `tbb::detail::d1::start_reduce<tbb::detail::d1::blocked_range<__gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > > >, tbb::detail::d1::lambda_reduce_body<tbb::detail::d1::blocked_range<__gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > > >, double, ROOT::Internal::ParallelReduceHelper<double>(std::vector<double, std::allocator<double> > const&, std::function<double (double, double)> const&)::{lambda(tbb::detail::d1::blocked_range<",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11931:18078,allocate,allocate,18078,https://root.cern,https://github.com/root-project/root/issues/11931,1,['allocate'],['allocate']
Energy Efficiency,suming 'gDebug' is <= 3 in /opt/root_src/net/auth/src/TAuthenticate.cxx:2881; 43: Taking false branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:2881; 44: Assuming 'len' is not equal to 0 in /opt/root_src/net/auth/src/TAuthenticate.cxx:2884; 45: Taking false branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:2884; 46: Assuming the condition is false in /opt/root_src/net/auth/src/TAuthenticate.cxx:2887; 47: Taking false branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:2887; 48: Assuming the condition is false in /opt/root_src/net/auth/src/TAuthenticate.cxx:2891; 49: Taking false branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:2891; 50: 'key' is equal to 0 in /opt/root_src/net/auth/src/TAuthenticate.cxx:2893; 51: Taking true branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:2893; 52: 'dec' is equal to 1 in /opt/root_src/net/auth/src/TAuthenticate.cxx:2894; 53: Taking true branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:2894; 54: Memory is allocated in /opt/root_src/net/auth/src/TAuthenticate.cxx:2903; 55: Returned allocated memory via 4th parameter in /opt/root_src/net/auth/src/TAuthenticate.cxx:1615; 56: Taking false branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:1615; 57: Assuming 'slen' is 0 in /opt/root_src/net/auth/src/TAuthenticate.cxx:1622; 58: Taking false branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:1622; 59: Potential leak of memory pointed to by 'tmpsalt' in /opt/root_src/net/auth/src/TAuthenticate.cxx:1648; /opt/root_src/net/auth/src/TAuthenticate.cxx:2925:10: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Assuming the condition is false in /opt/root_src/net/auth/src/TAuthenticate.cxx:4153; 2: Taking false branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:4153; 3: Assuming 'kind' is equal to kROOTD_RSAKEY in /opt/root_src/net/auth/src/TAuthenticate.cxx:4162; 4: Taking true branch in /opt/root_src/net/auth/src/TAuthenticate.cxx:4162; 5: ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7528:8249,allocate,allocated,8249,https://root.cern,https://github.com/root-project/root/issues/7528,1,['allocate'],['allocated']
Energy Efficiency,suming 'i1' is null in /opt/root_src/graf2d/x11/src/Rotated.cxx:703; 18: Left side of '&&' is false in /opt/root_src/graf2d/x11/src/Rotated.cxx:703; 19: 'item' is null in /opt/root_src/graf2d/x11/src/Rotated.cxx:738; 20: Taking false branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:738; 21: 'item' is null in /opt/root_src/graf2d/x11/src/Rotated.cxx:740; 22: Taking true branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:740; 23: 'gRotatedDebug' is 0 in /opt/root_src/graf2d/x11/src/Rotated.cxx:741; 24: expanded from macro 'DEBUG_PRINT1' in /opt/root_src/graf2d/x11/src/Rotated.cxx:96; 25: Taking false branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:741; 26: expanded from macro 'DEBUG_PRINT1' in /opt/root_src/graf2d/x11/src/Rotated.cxx:96; 27: 'item' is null in /opt/root_src/graf2d/x11/src/Rotated.cxx:744; 28: Taking true branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:744; 29: Calling 'XRotCreateTextItem' in /opt/root_src/graf2d/x11/src/Rotated.cxx:746; 30: Memory is allocated in /opt/root_src/graf2d/x11/src/Rotated.cxx:827; 31: Assuming 'item' is non-null in /opt/root_src/graf2d/x11/src/Rotated.cxx:828; 32: Taking false branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:828; 33: Assuming 'align' is equal to NONE in /opt/root_src/graf2d/x11/src/Rotated.cxx:832; 34: Taking false branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:832; 35: 'align' is equal to NONE in /opt/root_src/graf2d/x11/src/Rotated.cxx:838; 36: Taking true branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:838; 37: 'str1' is not equal to null in /opt/root_src/graf2d/x11/src/Rotated.cxx:845; 38: Taking false branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:845; 39: Assuming 'str3' is non-null in /opt/root_src/graf2d/x11/src/Rotated.cxx:851; 40: Taking false branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:851; 41: Assuming 'str3' is equal to null in /opt/root_src/graf2d/x11/src/Rotated.cxx:865; 42: Taking false branch in /opt/root_src/graf2d/x11/src/Rotated.cxx:865; 43: Loop condition is fa,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7432:84359,allocate,allocated,84359,https://root.cern,https://github.com/root-project/root/issues/7432,1,['allocate'],['allocated']
Energy Efficiency,"t = new TH1F(""background1_statUncert"", ""statUncert"", 2,1,2);. // run with 1 pb; data->SetBinContent(1,122);; data->SetBinContent(2,112);. signal->SetBinContent(1,20);; signal->SetBinContent(2,10);. background1->SetBinContent(1,100);; background2->SetBinContent(2,100);. // A small statistical uncertainty; statUncert->SetBinContent(1, .05); // 5% uncertainty; statUncert->SetBinContent(2, .05); // 5% uncertainty. example->Write();; example->Close();; }. void broken_weights(){; create_test_input();; create_test_ws();; TFile f(""results/example_UsingC_combined_meas_model.root"",""READ"");; RooWorkspace* w = (RooWorkspace*)f.Get(""combined"");; RooStats::ModelConfig mc = *(static_cast<RooStats::ModelConfig*>(w -> obj(""ModelConfig"")));; RooSimultaneous* simPdf = dynamic_cast<RooSimultaneous*>((mc.GetPdf()));; RooAbsPdf *pdf = mc.GetPdf();; RooArgSet obsSet = *(mc.GetObservables());; RooDataSet* data = static_cast<RooDataSet*>(w->data(""obsData""));; RooDataSet* toyData = pdf->generate(obsSet, RooFit::Extended());; RooCategory* channelCat = (RooCategory*) (&simPdf->indexCat());; TIterator* iter = channelCat->typeIterator() ;; RooCatType* tt = NULL;; for(int i=0; i<1; ++i){; data->get(i);; toyData->get(i);; // FIXME: weights are broken in this reduced dataset; RooAbsData *datatmp = toyData->reduce(Form(""channelCat==channelCat::channel1""));; datatmp->get(i);; std::cout << ""data weight: "" << data->weight() << "" toyData weight: "" << toyData->weight() << "" reduced toyData weight: "" << datatmp->weight() << std::endl;; }; }; ```; This results in; ```; data weight: 122 toyData weight: 99 reduced toyData weight: 1; ```; while weights not equal to 1 are expected. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; ROOT Version: 6.20/06; Built for linuxx8664gcc on Jun 10 2020, 06:10:57; From tags/v6-20-06@v6-20-06. ### Additional context; <!--; Add any other context about the problem here.; -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6951:5044,reduce,reduced,5044,https://root.cern,https://github.com/root-project/root/issues/6951,4,['reduce'],"['reduce', 'reduced']"
Energy Efficiency,"t introduces a structure (`RDaosKey`) to represent a blob's location within DAOS containers (comprising object ID, distribution key and attribute key) and adds a new mapping between ntuple pages to DAOS. The new mapping ( `kOidPerCluster` ) allocates one object per cluster and determines the distribution key from the column ID - with each page addressable by its own attribute key - , thus perpetuating the adjacency of values in the same cluster and column in the distributed store. I.e., neighboring values that are likely to be fetched together are coalesced to the same physical device in DAOS. The original mapping remains available as `kOidPerPage`, where each page is uniquely allocated its own object. In future, other mappings may be easily added by modifying the templated function `GetPageDaosKey` with that use case. RW calls in `RPageStorageDaos` use the mapping set in `kDefaultDaosMapping`, which is `kOidPerCluster`. ## Changes or fixes:; - Introduces `RDaosKey` as an abstract representation of a blob's location in DAOS comprising object ID, distribution key and attribute key.; - Mapping strategies are listed in the enumerator `EDaosMapping`, currently with values `kOidPerPage`, `kOidPerCluster`. ; - The function `GetPageDaosKey` determines the correct `RDaosKey` from page metadata in accordance with the strategy given by the templated argument of type `EDaosMapping`.; - The variable `kDefaultDaosMapping`, set to `kOidPerCluster`, holds the mapping for `RPageStorageDaos` RW calls.; - RNTuple page metadata (anchor, header, footer) blobs are mapped to a single object with three attribute keys, while a dedicated object is allocated to hold the pagelists (one for each cluster group). ## Checklist:. - [x] tested changes locally and on openlab cluster: passes unit tests, LHCb dataset on DAOS 2.0; - [x] updated the docs (if necessary). This PR partially fixes #8080 by introducing the new mapping that stores ""page groups"" as sharing the same object and distribution key.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10927:1667,allocate,allocated,1667,https://root.cern,https://github.com/root-project/root/pull/10927,1,['allocate'],['allocated']
Energy Efficiency,"t main() {; collection_entry_default();; return 0;; }; ```. This works reasonably as expected, with the following output:; ```; {; ""particles"": [{""energy"": 1}]; }; ```. However, a user may want to create non-default entries, ie `auto entry = writer->CreateEntry();` and then calling `writer->Fill(*entry);`. <details>; <summary>Full code example</summary>. ```c++; #include <ROOT/REntry.hxx>; #include <ROOT/RNTuple.hxx>; #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;; using ROOT::Experimental::RNTupleModel;; using ROOT::Experimental::RNTupleReader;; using ROOT::Experimental::RNTupleWriter;. static void write() {; auto particleModel = RNTupleModel::Create();; auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::CreateBare();; auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");; auto entry = writer->CreateEntry();. *energy = 1.0;; particles->Fill();; writer->Fill(*entry);; }. void collection_entry() {; write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");; reader->Show(0);; }. int main() {; collection_entry();; return 0;; }; ```. </details>. This doesn't work right now, even for a single entry as in the code example above; when opening the ntuple, the code crashes:; ```; terminate called after throwing an instance of 'std::bad_alloc'; what(): std::bad_alloc; Aborted (core dumped); ```. This is because `RNTupleModel::CreateEntry()` calls; https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RNTupleModel.cxx#L363-L365; for all top-level field. Conceptually it's possible to fix by applying the same logic as `RNTupleModel::MakeCollection`, something like; ```diff; diff --git a/tree/ntuple/v7/src/RNTupleModel.cxx b/tree/ntuple/v7/src/RNTupleModel.cxx; index c652608bf1..ed02338e2b 100644; --- a/tree/ntuple/v7/src/RNTupleModel.cxx; +++",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14642:1857,energy,energy,1857,https://root.cern,https://github.com/root-project/root/issues/14642,1,['energy'],['energy']
Energy Efficiency,"t of unavailable class TObject, offset=1171537962 pointer will be 0; Error in <TExMap::Remove>: key 586225820 not found at 447; Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0; Error in <TExMap::Remove>: key 423978783 not found at 84; Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0; Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0; Error in <TExMap::Remove>: key 839042239 not found at 12; Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0; Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551; Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation; root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed.; Corrupt value: 0x0; root.exe(60607,0x102138580) malloc: *** set a breakpoint in malloc_error_break to debug; ```. ### Expected behavior. The tree should be written to file without failures. ### To Reproduce. I have prepared a rather minimal example: https://cernbox.cern.ch/s/jhiOyKZJN89I3Hq ; It is based on the [RooFit example](https://root.cern/doc/master/rs301__splot_8C.html) because my actual use case is saving the result of the sPlot into a TTree, but the sPlot is not the issue here. . ### Setup. 1. ROOT version: 6.28/02; 2. Operating system: MacOS (but the same happens on lxplus); 3. How you obtained ROOT: macports (but the same happens on lxplus). ### Additional context. I would be glad to learn if there is a more efficient way of saving RooDataSet into a TTree. I tried to find if there is a RooDataSet conversion to RDataFrame but found only the inverse operation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12710:3247,efficient,efficient,3247,https://root.cern,https://github.com/root-project/root/issues/12710,1,['efficient'],['efficient']
Energy Efficiency,t/root_src/io/xml/src/TBufferXML.cxx:984; 63: Assuming the condition is false in /opt/root_src/io/xml/src/TBufferXML.cxx:1203; 64: Taking false branch in /opt/root_src/io/xml/src/TBufferXML.cxx:1203; 65: '?' condition is false in /opt/root_src/io/xml/src/TBufferXML.cxx:1207; 66: Dereference of null pointer in /opt/root_src/io/xml/src/TBufferXML.cxx:1207; /opt/root_src/io/xml/src/TBufferXML.cxx:2535:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/io/xml/src/TBufferXML.cxx:2535; /opt/root_src/io/xml/src/TBufferXML.cxx:2558:21: warning: Use of zero-allocated memory [clang-analyzer-cplusplus.NewDelete]; 1: Assuming the condition is true in /opt/root_src/io/xml/src/TBufferXML.cxx:2543; 2: Taking true branch in /opt/root_src/io/xml/src/TBufferXML.cxx:2543; 3: Assuming 'nwh' is not equal to 0 in /opt/root_src/io/xml/src/TBufferXML.cxx:2549; 4: Taking false branch in /opt/root_src/io/xml/src/TBufferXML.cxx:2549; 5: Assuming 'nwh' is equal to 255 in /opt/root_src/io/xml/src/TBufferXML.cxx:2552; 6: Taking true branch in /opt/root_src/io/xml/src/TBufferXML.cxx:2552; 7: Memory is allocated in /opt/root_src/io/xml/src/TBufferXML.cxx:2557; 8: Use of zero-allocated memory in /opt/root_src/io/xml/src/TBufferXML.cxx:2558; /opt/root_src/io/xml/src/TXMLEngine.cxx:134:10: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Assuming 'res' is not equal to null in /opt/root_src/io/xml/src/TXMLEngine.cxx:1449; 2: Left side of '||' is false in /opt/root_src/io/xml/src/TXMLEngine.cxx:1449; 3: Assuming 'xmlnode' is not equal t,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:128018,allocate,allocated,128018,https://root.cern,https://github.com/root-project/root/issues/7431,1,['allocate'],['allocated']
Energy Efficiency,t/root_src/io/xml/src/TXMLEngine.cxx:1816; 7: Taking false branch in /opt/root_src/io/xml/src/TXMLEngine.cxx:1816; 8: Taking false branch in /opt/root_src/io/xml/src/TXMLEngine.cxx:1902; 9: Assuming the condition is false in /opt/root_src/io/xml/src/TXMLEngine.cxx:1906; 10: Taking false branch in /opt/root_src/io/xml/src/TXMLEngine.cxx:1906; 11: Assuming the condition is false in /opt/root_src/io/xml/src/TXMLEngine.cxx:1946; 12: Taking false branch in /opt/root_src/io/xml/src/TXMLEngine.cxx:1946; 13: Assuming the condition is false in /opt/root_src/io/xml/src/TXMLEngine.cxx:2102; 14: Taking false branch in /opt/root_src/io/xml/src/TXMLEngine.cxx:2102; 15: Assuming the condition is false in /opt/root_src/io/xml/src/TXMLEngine.cxx:2110; 16: Taking false branch in /opt/root_src/io/xml/src/TXMLEngine.cxx:2110; 17: Assuming 'len' is > 0 in /opt/root_src/io/xml/src/TXMLEngine.cxx:2113; 18: Taking false branch in /opt/root_src/io/xml/src/TXMLEngine.cxx:2113; 19: Calling 'TXMLEngine::AllocateNode' in /opt/root_src/io/xml/src/TXMLEngine.cxx:2115; 20: Memory is allocated in /opt/root_src/io/xml/src/TXMLEngine.cxx:1515; 21: Assuming 'parent' is equal to null in /opt/root_src/io/xml/src/TXMLEngine.cxx:1525; 22: Taking false branch in /opt/root_src/io/xml/src/TXMLEngine.cxx:1525; 23: Returned allocated memory in /opt/root_src/io/xml/src/TXMLEngine.cxx:2115; 24: Assuming 'colon' is equal to null in /opt/root_src/io/xml/src/TXMLEngine.cxx:2124; 25: Left side of '&&' is false in /opt/root_src/io/xml/src/TXMLEngine.cxx:2124; 26: Taking false branch in /opt/root_src/io/xml/src/TXMLEngine.cxx:2130; 27: Assuming the condition is true in /opt/root_src/io/xml/src/TXMLEngine.cxx:2134; 28: Taking true branch in /opt/root_src/io/xml/src/TXMLEngine.cxx:2134; 29: Potential leak of memory pointed to by 'node' in /opt/root_src/io/xml/src/TXMLEngine.cxx:2135; /opt/root_src/io/xml/src/TXMLFile.cxx:203:7: warning: Value stored to 'recreate' is never read [clang-analyzer-deadcode.DeadStores]; 1: Va,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:132197,Allocate,AllocateNode,132197,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Allocate'],['AllocateNode']
Energy Efficiency,t_src/tmva/pymva/src/MethodPyKeras.cxx:464; 20: Assuming 'j' is >= field 'fNVars' in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:468; 21: Loop condition is false. Execution continues on line 472 in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:468; 22: Assuming the condition is false in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:472; 23: Left side of '||' is false in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:472; 24: Assuming the condition is false in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:472; 25: Taking false branch in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:472; 26: Assuming the condition is true in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:478; 27: Taking true branch in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:478; 28: Assuming 'j' is < field 'fNOutputs' in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:479; 29: Loop condition is true. Entering loop body in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:479; 30: Use of zero-allocated memory in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:480; /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:368:33: warning: Use of zero-allocated memory [clang-analyzer-cplusplus.NewDelete]; 1: Assuming field 'fModelIsSetup' is true in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:298; 2: Taking false branch in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:298; 3: 'i' is < 'nTrainingEvents' in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:315; 4: Loop condition is true. Entering loop body in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:315; 5: Assuming 'j' is >= field 'fNVars' in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:318; 6: Loop condition is false. Execution continues on line 324 in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:318; 7: Assuming the condition is false in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:324; 8: Left side of '||' is false in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:324; 9: Assuming the condition is false in /opt/root_src/tmva/pymva/src/Method,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:10165,allocate,allocated,10165,https://root.cern,https://github.com/root-project/root/issues/7526,1,['allocate'],['allocated']
Energy Efficiency,t_src/tmva/pymva/src/MethodPyTorch.cxx:363; 20: Assuming 'j' is >= field 'fNVars' in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:367; 21: Loop condition is false. Execution continues on line 371 in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:367; 22: Assuming the condition is false in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:371; 23: Left side of '||' is false in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:371; 24: Assuming the condition is false in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:371; 25: Taking false branch in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:371; 26: Assuming the condition is true in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:377; 27: Taking true branch in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:377; 28: Assuming 'j' is < field 'fNOutputs' in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:378; 29: Loop condition is true. Entering loop body in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:378; 30: Use of zero-allocated memory in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:379; /opt/root_src/tmva/tmva/inc/TMVA/BinaryTree.h:83:39: warning: Use of memory after it is freed [clang-analyzer-cplusplus.NewDelete]; 1: Calling 'BinaryTree::Read' in /opt/root_src/tmva/tmva/src/BinaryTree.cxx:206; 2: Assuming 'currentNode' is not equal to null in /opt/root_src/tmva/tmva/src/BinaryTree.cxx:174; 3: Taking false branch in /opt/root_src/tmva/tmva/src/BinaryTree.cxx:174; 4: Loop condition is true. Entering loop body in /opt/root_src/tmva/tmva/src/BinaryTree.cxx:179; 5: Assuming the condition is true in /opt/root_src/tmva/tmva/src/BinaryTree.cxx:180; 6: Taking true branch in /opt/root_src/tmva/tmva/src/BinaryTree.cxx:180; 7: Memory is released in /opt/root_src/tmva/tmva/src/BinaryTree.cxx:181; 8: Calling 'BinaryTree::SetTotalTreeDepth' in /opt/root_src/tmva/tmva/src/BinaryTree.cxx:182; 9: 'n' is equal to NULL in /opt/root_src/tmva/tmva/src/BinaryTree.cxx:215; 10: Taking true branch in /opt/root_src/tmva/tmva/src/BinaryTree.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:20397,allocate,allocated,20397,https://root.cern,https://github.com/root-project/root/issues/7526,1,['allocate'],['allocated']
Energy Efficiency,"td::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15; #10 0x7f8823177c7c in (anonymous namespace)::TriggerDictionaryInitialization_libHist_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15989:7; #11 0x7f8822d01f29 in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15997:7; #12 0x7f8822d01f29 in __cxx_global_var_init.284 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15999:5; #13 0x7f8822d01f29 in _GLOBAL__sub_I_G__Hist.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx; #14 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. previously allocated by thread T1 here:; #0 0x511128 in operator new(unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511128) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e); #1 0x7f8857aacabe in TStorage::ObjectAlloc(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TStorage.cxx:292:19; #2 0x7f8857c82ee9 in TObject::operator new(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TObject.h:181:46; #3 0x7f8857c82ee9 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:11; #4 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17; #5 0x7f885",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12715:11443,allocate,allocated,11443,https://root.cern,https://github.com/root-project/root/issues/12715,1,['allocate'],['allocated']
Energy Efficiency,that run only with the schedule trigger.; It makes sense to merge only after asan is fixed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15856:23,schedul,schedule,23,https://root.cern,https://github.com/root-project/root/pull/15856,1,['schedul'],['schedule']
Energy Efficiency,the condition is false in /opt/root_src/core/base/src/TString.cxx:1916; 25: Taking false branch in /opt/root_src/core/base/src/TString.cxx:1916; 26: Calling copy constructor for 'TString' in /opt/root_src/core/base/src/TString.cxx:1923; 27: Assuming the condition is false in /opt/root_src/core/base/src/TString.cxx:173; 28: Taking false branch in /opt/root_src/core/base/src/TString.cxx:173; 29: Calling 'TString::Init' in /opt/root_src/core/base/src/TString.cxx:177; 30: 'capacity' is >= 0 in /opt/root_src/core/base/src/TString.cxx:249; 31: Taking false branch in /opt/root_src/core/base/src/TString.cxx:249; 32: 'nchar' is >= 0 in /opt/root_src/core/base/src/TString.cxx:253; 33: Taking false branch in /opt/root_src/core/base/src/TString.cxx:253; 34: Taking false branch in /opt/root_src/core/base/src/TString.cxx:257; 35: 'capacity' is >= kMinCap in /opt/root_src/core/base/src/TString.cxx:265; 36: Taking false branch in /opt/root_src/core/base/src/TString.cxx:265; 37: Memory is allocated in /opt/root_src/core/base/src/TString.cxx:270; 38: Returned allocated memory in /opt/root_src/core/base/src/TString.cxx:177; 39: Returning from copy constructor for 'TString' in /opt/root_src/core/base/src/TString.cxx:1923; 40: Loop condition is false. Execution continues on line 1932 in /opt/root_src/core/base/src/TString.cxx:1926; 41: Potential leak of memory pointed to by 'str_ref.fRep..fLong.fData' in /opt/root_src/core/base/src/TString.cxx:1933; /opt/root_src/core/base/src/TString.cxx:1933:1: warning: Potential leak of memory pointed to by 'str_ref0.fRep..fLong.fData' [clang-analyzer-cplusplus.NewDeleteLeaks]; 1: Assuming 'base_in' is >= 2 in /opt/root_src/core/base/src/TString.cxx:2151; 2: Left side of '||' is false in /opt/root_src/core/base/src/TString.cxx:2151; 3: Assuming 'base_in' is <= 36 in /opt/root_src/core/base/src/TString.cxx:2151; 4: Left side of '||' is false in /opt/root_src/core/base/src/TString.cxx:2151; 5: Assuming 'base_out' is >= 2 in /opt/root_src/core/base/src/,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7412:132825,allocate,allocated,132825,https://root.cern,https://github.com/root-project/root/issues/7412,1,['allocate'],['allocated']
Energy Efficiency,"the goal of this commit is to avoid too many allocations/deallocations in two cases:; 1. sophisticated expressions manipulating RVec<T> instances: churn kicks in due to temporaries; 2. RDataFrame runs with Defines returning RVec<T>s which are saved within custom columns via a copy. For every event, the old value is deallocated and the new one allocated. This change implements a thread local stack of buffers in the RAdoptAllocator.; If the allocation is smaller than RAdoptAllocator<T>::fgBuffersSize, before allocating; a fresh region of memory through the stl allocator, a pop from the aforementioned stack is tried.; At deallocation time, the memory taken from the stak, is put back in the stack.; In some sense, this is an optimisation for short (defined by RAdoptAllocator<T>::fgBuffersSize) RVec<T>s.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3467:345,allocate,allocated,345,https://root.cern,https://github.com/root-project/root/pull/3467,1,['allocate'],['allocated']
Energy Efficiency,"the limited feature set covers a range of analysis use cases. In particular, the current version of CMS's proposed NanoAOD format can be read solely via bulk APIs. Where the bulk IO APIs are applicable, we see an order-magnitude improvement in event rates for some use cases (including CMS NanoAOD). The speedup becomes more noticeable as the data read from the event is smaller (meaning the traditional ROOT IO overheads are larger). Somewhere in the neighborhood of 5KB objects read per event is the point where bulk IO APIs should be noticeably faster. This PR provides three interfaces:; - A raw, low-level interface. The user can invoke the bulk IO APIs directly and get a buffer of primitive types, serialized or deserialized. It is not envisioned this is used by users, but by API writers.; - A `TTreeReader`-like interface, `TTreeReaderFast`. This is meant to be used by users; it utilizes the low-level interface to retrieve the serialized buffer and templated code will inline the deserializing as part of iterating through the tree. The speed here is gained by the fact only a single pass in memory is needed to deserialize *and* apply user code, rather than two.; - The intent is that this interface can be extended in the future and used by `TDataFrame`, provided we can make `TDataFrame` sufficiently fast.; - A Python-based `numpy` export interface. This exposes the (possibly serialized) memory directly as numpy arrays, allowing for efficient access to ROOT-serialized objects from the Python language.; - The `numpy` interface is low-level for Python; we intend to further explore the ideal high-level interface through projects such as https://github.com/diana-hep/plur. So indeed, lot's of experimental / internal interface work here - but we felt that (a) a sufficient amount depends on this and (b) we've demonstrated enough utility that it was time to start talking about merging. (With many thanks to @jpivarski for driving this work home with his work on a python interface!)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/943:2045,efficient,efficient,2045,https://root.cern,https://github.com/root-project/root/pull/943,1,['efficient'],['efficient']
Energy Efficiency,"this PR aims to reduce the contention in TClass::GetBaseClassOffset.; Zero is returned as offset value if the class that the TClass instance represents; and all of its ancestors has no multiple inheritance.; This information can be checked without accessing the interpreter, and therewith; acquiring the global lock, because it now originally resides in the dictionaries.; The information is put in the dictionaries by rootcling, which explores the; inheritance chain *at build time*. The expectation is to reduce *considerably* contention due to accesses to the interpreter and caches of offsets in the TClassInfo instances. Potentially, this mechanism can be upgraded inserting in the dictionaries; not only the aforementioned information, but also the offsets to all the; bases.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2319:16,reduce,reduce,16,https://root.cern,https://github.com/root-project/root/pull/2319,2,['reduce'],['reduce']
Energy Efficiency,"this is a repeat of https://root-forum.cern.ch/t/std-bitset-streamer-endianness-issue/41529. ---. hi there,. I was adding support for reading/writing `std::bitset<N>` to [groot](https://go-hep.org/x/hep/groot) when I noticed the following behaviour:. ```; $> cat ./Event.h; #ifndef MYEVT_H; #define MYEVT_H 1. #include <bitset>. struct Event {; 	std::bitset<16> Bs;; };. #endif // MYEVT_H. $> cat ./run.C; #include ""Event.h"". void run() {; 	gSystem->Load(""./libEvent.so"");. 	auto f = TFile::Open(""std-bitset.root"", ""RECREATE"");; 	auto t = new TTree(""tree"", ""tree"");. 	int bufsize = 32000;; 	int splitlvl = 99;. 	Event e;; 	e.Bs = std::bitset<16>(""0001010111101010"");. 	t->Branch(""evt"", &e, bufsize, splitlvl);. 	t->Fill();; 	f->Write();; 	f->Close();. 	exit(0);; }. $> root -b -q ./run.C; ```. reading back the file with `groot`, I see the following bit patterns:. ```; $> root-dump testdata/std-bitset.root ; >>> file[testdata/std-bitset.root]; key[000]: tree;1 ""tree"" (TTree); [000][evt]: {[0 1 0 1 0 1 1 1 1 0 1 0 1 0 0 0]}; ```. _ie:_ it seems endianness of the bitset isn't handled when writing the bitset (and it's whatever it happens to be on the writing machine).; (I was expecting: `[0 0 0 1 0 1 0 1 1 1 1 0 1 0 1 0]` as the on-disk bytes). or are `bitset<N>` values always little-endian encoded?. I was also a bit surprised to see a `std::bitset<N>` to take (N+4)bytes on disk (instead of ""just"" N**bits** +4bytes, or, even, just N**bits**). is there an underlying reason I am missing here? (it's also quite possible I am completely mistaken, of course). thx,; -s; ___; _Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_. ROOT Version: 6.22/02; Built for linuxx8664gcc on Aug 17 2020, 12:46:52; From tags/v6-22-02@v6-22-02; ___",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6412:1603,efficient,efficient,1603,https://root.cern,https://github.com/root-project/root/issues/6412,2,['efficient'],"['efficient', 'efficient-and-successful-posting']"
Energy Efficiency,thisroot.sh: refactor with shellcheck; thisroot.fish: `dirname` -> `path dirname` to reduce deps,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11557:85,reduce,reduce,85,https://root.cern,https://github.com/root-project/root/pull/11557,1,['reduce'],['reduce']
Energy Efficiency,"tion=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00007f",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462:5424,green,greenc,5424,https://root.cern,https://github.com/root-project/root/pull/5462,1,['green'],['greenc']
Energy Efficiency,"tps://github.com/root-project/root/pull/13269 (to support LLVM 16, cf. https://github.com/vgvassilev/clad/pull/589); * [x] https://github.com/root-project/root/pull/13238; * [x] https://github.com/root-project/root/pull/13310; * [x] https://github.com/root-project/roottest/pull/989; * [x] https://github.com/root-project/root/pull/13335; * [x] https://github.com/root-project/roottest/pull/994; * [x] https://github.com/root-project/root/pull/13366; * [x] https://github.com/root-project/root/pull/13448; * [x] https://github.com/root-project/root/pull/13477; * [x] https://github.com/root-project/root/pull/13482; * [x] https://github.com/root-project/root/pull/13782 and / or https://github.com/root-project/root/pull/13785; * [x] https://github.com/root-project/root/pull/13565 (or at least the last commit to remove `isInstantiatedInPCH`); * [x] https://github.com/root-project/root/pull/14110. Things to check:; * [x] Builds on all platforms; * [x] Passes all ROOT tests on all platforms; * [x] Passes Cling test suite (at least on Linux); * [x] Check increase in resource consumption:; * [x] Build directory in `Release` configuration; * [x] Install directory in `Release` configuration; * [x] Size of module files in particular; * [x] Memory requirement; * [x] CPU requirement (time to run all tests). #### Comparison of resource consumption on AlmaLinux 8, GCC 8.5.0, `CMAKE_BUILD_TYPE=Release`. | | `master` | `llvm16` |; | --- | --- | --- |; | `build` (slightly older version) | 1706284 KB = 1.7 GB | 1766156 KB = 1.7 GB |; | `build` (with `testing` + `roottest`, before `ctest`) | 2286436 KB = 2.2 GB | 2366928 KB = 2.3 GB |; | `install` | 704236 KB = 688 MB | 701032 KB = 685 MB |; | `lib/*.pcm` | 312624 KB = 306 MB | 309560 = 303 MB |; | Memory for `./bin/root.exe -q` | 204020 kbytes | 214672 kbytes |; | Memory for `./bin/root.exe -q -e ""std::vector<int> v""` | 235580 kybtes | 251304 kbytes |; | CPU (first `ctest -j12`) | 1284s | 1293s |; | CPU (second `ctest -j12`) | 914s | 911s |",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13273:1273,consumption,consumption,1273,https://root.cern,https://github.com/root-project/root/pull/13273,2,['consumption'],['consumption']
Energy Efficiency,trix/src/TMatrixT.cxx:99; 11: Assuming 'gMatrixCheck' is 0 in /opt/root_src/math/matrix/src/TMatrixT.cxx:1754; 12: Left side of '&&' is false in /opt/root_src/math/matrix/src/TMatrixT.cxx:1754; 13: Assuming the condition is true in /opt/root_src/math/matrix/src/TMatrixT.cxx:1759; 14: Taking true branch in /opt/root_src/math/matrix/src/TMatrixT.cxx:1759; 15: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/math/matrix/src/TMatrixT.cxx:1761; /opt/root_src/math/matrix/src/TMatrixT.cxx:1782:7: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Taking false branch in /opt/root_src/math/matrix/src/TMatrixT.cxx:108; 2: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:120; 3: Loop condition is false. Exiting loop in /opt/root_src/math/matrix/src/TMatrixT.cxx:108; 4: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:119; 5: Calling 'TMatrixT::Allocate' in /opt/root_src/math/matrix/src/TMatrixT.cxx:109; 6: Null pointer value stored to field 'fElements' in /opt/root_src/math/matrix/src/TMatrixT.cxx:472; 7: Assuming 'no_rows' is < 0 in /opt/root_src/math/matrix/src/TMatrixT.cxx:479; 8: Left side of '||' is true in /opt/root_src/math/matrix/src/TMatrixT.cxx:479; 9: Returning from 'TMatrixT::Allocate' in /opt/root_src/math/matrix/src/TMatrixT.cxx:109; 10: Calling 'TMatrixT::operator=' in /opt/root_src/math/matrix/src/TMatrixT.cxx:110; 11: Assuming 'gMatrixCheck' is 0 in /opt/root_src/math/matrix/src/TMatrixT.cxx:1773; 12: Left side of '&&' is false in /opt/root_src/math/matrix/src/TMatrixT.cxx:1773; 13: Assuming the condition is false in /opt/root_src/math/matrix/src/TMatrixT.cxx:1774; 14: Left side of '||' is false in /opt/root_src/math/matrix/src/TMatrixT.cxx:1773; 15: Assuming the condition is false in /opt/root_src/math/matrix/src/TMatrixT.cxx:1775; 16: Left side of '||' is false in /opt/root_src/math/matrix/src/TMatrixT.cxx:1773; 17: A,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7458:137479,Allocate,Allocate,137479,https://root.cern,https://github.com/root-project/root/issues/7458,1,['Allocate'],['Allocate']
Energy Efficiency,"using namespace RooFit;. void rf801_mcstudy(); {; RooRealVar x(""x"", ""x"", 0, 10);; x.setBins(40);. RooRealVar mean(""mean"", """", 5, 0, 10);; RooRealVar sigma(""sg"", """", 0.5);; RooGaussian pdf(""pdf"", """", x, mean, sigma);. RooMCStudy *mcstudy = new RooMCStudy(pdf, x, Binned(kTRUE), Silence(true), Extended(true), FitOptions(Save(kTRUE), PrintEvalErrors(0)));; //RooMCStudy *mcstudy = new RooMCStudy(pdf, x, Binned(kFALSE), Silence(true), Extended(true), FitOptions(Save(kTRUE), PrintEvalErrors(0)); mcstudy->generateAndFit(1000, 1000);; }; ```; ![image](https://user-images.githubusercontent.com/14037062/147851308-1eb033f3-94ea-4e53-a88b-f7e017a278aa.png). which is not ideal, here a progress bar would be better, it would prevent the screen from been filled. However, having a 10 fits step seems reasonable. . On the other hand, when running the fit with unbinned data (uncomment the line in the code above), I see:. ![image](https://user-images.githubusercontent.com/14037062/147851372-3197ea2f-d44c-4cd7-ae03-e92389ddb6a3.png). which is a terrible design. It completely fills the monitor with 1000 lines of useless information. The only way that I found to silence this is doing something like:. ```python; msg = ROOT.RooMsgService.instance(); str_z=msg.getStream(0); str_z.minLevel = ROOT.RooFit.WARNING; ```; which also turns off the `PROGRESS` message telling me how many toys have been run. So either I make it hide everything or I get 1000 messages. ### Optional: share how it could be improved; If I would have time I would:. 1. Make the `now generating` message a `DEBUG` one.; 2. Use a progress bar for the `run` message. ### To Reproduce; You can just run the code I put above. ### Setup; 1. ROOT version: 6.24/06; 2. Operating system: Linux manjaro 5.15.7-1-MANJARO; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself: Manjaro package manager, probably related to pacman. ### Additional context; <!--; Add any other context about the problem here.; -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9489:1251,monitor,monitor,1251,https://root.cern,https://github.com/root-project/root/issues/9489,1,['monitor'],['monitor']
Energy Efficiency,v6.20 version of #7563 plus the same fix for PowerPC (see also #7607),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7608:45,Power,PowerPC,45,https://root.cern,https://github.com/root-project/root/pull/7608,1,['Power'],['PowerPC']
Energy Efficiency,v6.22 version of #7563 plus the same fix for PowerPC,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7607:45,Power,PowerPC,45,https://root.cern,https://github.com/root-project/root/pull/7607,1,['Power'],['PowerPC']
Energy Efficiency,v614: Additional fix for rule scheduling in TBranchElement,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2488:30,schedul,scheduling,30,https://root.cern,https://github.com/root-project/root/pull/2488,1,['schedul'],['scheduling']
Energy Efficiency,value 1073741823 is assigned to 'mid' in /opt/root_src/math/physics/src/TRobustEstimator.cxx:1302; 14: Assigned value is garbage or undefined in /opt/root_src/math/physics/src/TRobustEstimator.cxx:1303; /opt/root_src/math/splot/src/TSPlot.cxx:959:23: warning: Value stored to 'loaded' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'loaded' is never read in /opt/root_src/math/splot/src/TSPlot.cxx:959; /opt/root_src/math/splot/src/TSPlot.cxx:966:13: warning: Value stored to 'loaded' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'loaded' is never read in /opt/root_src/math/splot/src/TSPlot.cxx:966; /opt/root_src/core/cont/inc/TBits.h; /opt/root_src/math/fumili/src/TFumili.cxx; /opt/root_src/math/genvector/src/3DConversions.cxx; /opt/root_src/math/genvector/src/AxisAngleXother.cxx; /opt/root_src/math/mathcore/inc/Fit/FitData.h; /opt/root_src/math/mathcore/inc/Fit/FitUtil.h; /opt/root_src/math/mathcore/inc/TMath.h; /opt/root_src/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx; /opt/root_src/math/mathcore/src/GaussIntegrator.cxx; /opt/root_src/math/mathcore/src/GoFTest.cxx; /opt/root_src/math/mathcore/src/SpecFuncCephes.cxx; /opt/root_src/math/mathcore/src/SpecFuncCephesInv.cxx; /opt/root_src/math/mathcore/src/TKDTree.cxx; /opt/root_src/math/mathcore/src/TKDTreeBinning.cxx; /opt/root_src/math/mathcore/src/TMath.cxx; /opt/root_src/math/mathcore/src/triangle.c; /opt/root_src/math/matrix/inc/TMatrixT.h; /opt/root_src/math/matrix/inc/TVectorT.h; /opt/root_src/math/matrix/src/TDecompBK.cxx; /opt/root_src/math/matrix/src/TDecompLU.cxx; /opt/root_src/math/matrix/src/TDecompSparse.cxx; /opt/root_src/math/matrix/src/TMatrixT.cxx; /opt/root_src/math/matrix/src/TMatrixTSparse.cxx; /opt/root_src/math/matrix/src/TMatrixTSym.cxx; /opt/root_src/math/matrix/src/TVectorT.cxx; /opt/root_src/math/minuit/src/TFitter.cxx; /opt/root_src/math/minuit/src/TLinearFitter.cxx; /opt/root_src/math/minuit/src/TMinuit.cxx; /opt/root_src/math/minuit/src/TM,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7458:231238,Adapt,AdaptiveIntegratorMultiDim,231238,https://root.cern,https://github.com/root-project/root/issues/7458,1,['Adapt'],['AdaptiveIntegratorMultiDim']
Energy Efficiency,"warning: Value stored to 'nfnevl' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'nfnevl' is never read in /opt/root_src/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:142; /opt/root_src/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:143:4: warning: Value stored to 'relerr' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'relerr' is never read in /opt/root_src/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:143; /opt/root_src/math/mathcore/src/GaussIntegrator.cxx:68:4: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]; 1: Calling 'IntegrandTransform::Clone' in /opt/root_src/math/mathcore/src/GaussIntegrator.cxx:68; 2: Field 'fInfiniteInterval' is false in /opt/root_src/math/mathcore/src/GaussIntegrator.cxx:248; 3: '?' condition is false in /opt/root_src/math/mathcore/src/GaussIntegrator.cxx:248; 4: Memory is allocated in /opt/root_src/math/mathcore/src/GaussIntegrator.cxx:248; 5: Returned allocated memory in /opt/root_src/math/mathcore/src/GaussIntegrator.cxx:68; 6: Potential memory leak in /opt/root_src/math/mathcore/src/GaussIntegrator.cxx:68; /opt/root_src/math/mathcore/src/GaussIntegrator.cxx:235:12: warning: Although the value stored to 'result' is used in the enclosing expression, the value is never actually read from 'result' [clang-analyzer-deadcode.DeadStores]; 1: Although the value stored to 'result' is used in the enclosing expression, the value is never actually read from 'result' in /opt/root_src/math/mathcore/src/GaussIntegrator.cxx:235; /opt/root_src/math/mathcore/src/GoFTest.cxx:603:7: warning: Value stored to 'maij' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'maij' is never read in /opt/root_src/math/mathcore/src/GoFTest.cxx:603; /opt/root_src/math/mathcore/src/SpecFuncCephes.cxx:216:10: warning: Value stored to 'sgngam' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'sgngam' is never read in /opt/root_src/math/mathcore/src/S",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7458:19854,allocate,allocated,19854,https://root.cern,https://github.com/root-project/root/issues/7458,1,['allocate'],['allocated']
Energy Efficiency,"we have lots of proper usage now, and it would need to be adapted; to current TBB not offering task_scheduler_init anymore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7852:58,adapt,adapted,58,https://root.cern,https://github.com/root-project/root/pull/7852,1,['adapt'],['adapted']
Energy Efficiency,"we have lots of proper usage now, and it would need to be adapted; to current TBB not offering task_scheduler_init anymore. (cherry picked from commit 1bb8f9a02f56afb67c836f969d6a9b4a68eb45ab)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7855:58,adapt,adapted,58,https://root.cern,https://github.com/root-project/root/pull/7855,1,['adapt'],['adapted']
Energy Efficiency,"when reading a TFile containing a TTree containing a TClonesArray. It appears to crash the second time it accesses the TClonesArray. This has started happening since moving to ROOT 6.32 on AlmaLinux 9.4. It worked fine with 6.20.04 running on Centos7. The library for accessing the TTree information was created using MakeProject. . ### Reproducer. This is the python code that crashes; ```; #!/usr/bin/env python3; import os; import ROOT; import argparse. parser = argparse.ArgumentParser(description='Analyse events.'); parser.add_argument(""inputfile""); parser.add_argument(""-o"",""--outputfile"",default=""Output.root"",help=""Name of output file""); args = parser.parse_args(). READEVENTANALYSISLIBRARY=ROOT.gSystem.Getenv(""READEVENTANALYSISLIBRARY"");; ROOT.gSystem.Load(READEVENTANALYSISLIBRARY);. globalRecon = ROOT.TChain(""ReconDir/Global""); globalRecon.AddFile(args.inputfile). OutputFile = ROOT.TFile(args.outputfile,""RECREATE"",""ND280 Analysis""); hTrackMomenta = ROOT.TH1F(""TrackMomenta"", ""Charged Track Momentum"", 100, 0, 1000.0). entries = globalRecon.GetEntries(); for entry in range(entries):; 	print("" entry = ""+str(entry)); 	ientry = globalRecon.LoadTree(entry); 	if ientry < 0:; 		break; 	nb = globalRecon.GetEntry(entry); 	if nb<=0:; 		continue; 	; 	for	pid in globalRecon.PIDs :; 		if(pid.Charge != 0) :; 			print("" charge is ""+str(pid.Charge)); 		#	hTrackMomenta.Fill(pid.FrontMomentum); OutputFile.Write(); OutputFile.Close(); ```. The crash traceback suggest this as the line causing the crash:. #7 0x00007fe963a68e9a in TBranchElement::ReadLeavesClones(TBuffer&) () from /home/aleph/ajf/t2k/root/lib/libTree.so; #8 0x00007fe963a60899 in TBranch::GetEntry(long long, int) () from /home/aleph/ajf/t2k/root/lib/libTree.so; #9 0x00007fe963a7326b in TBranchElement::GetEntry(long long, int) () from /home/aleph/ajf/t2k/root/lib/libTree.so; #10 0x00007fe963ad7300 in TTree::GetEntry(long long, int) () from /home/aleph/ajf/t2k/root/lib/libTree.so. ### ROOT version. 6.32.00 . ### Installatio",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16725:1099,Charge,Charged,1099,https://root.cern,https://github.com/root-project/root/issues/16725,1,['Charge'],['Charged']
Energy Efficiency,when running GitHub actions. This is done in order to monitor how much time each individual step of the workflows is taking.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15801:54,monitor,monitor,54,https://root.cern,https://github.com/root-project/root/pull/15801,1,['monitor'],['monitor']
Energy Efficiency,"wing code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```; cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \; -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \; -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \; -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_64-ubuntu2004-gcc9-opt \; -DCMAKE_INSTALL_PREFIX=~/software/root/6.20.08/x86_64-ubuntu2004-gcc9-opt ../root-6.20.08/; ninja; ```. ## Setup. As mentioned earlier, I used ROOT 6.20/08 for this particular test. But the behaviour has been like this since forever. I performed the build on Ubuntu 20.04 with GCC 9, but that should make little difference to the overall behaviour. ## Additional context. N/A",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6432:2730,power,powerful,2730,https://root.cern,https://github.com/root-project/root/issues/6432,1,['power'],['powerful']
Energy Efficiency,"x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/so",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462:4206,green,greenc,4206,https://root.cern,https://github.com/root-project/root/pull/5462,1,['green'],['greenc']
Energy Efficiency,x:1912; 24: Assuming the condition is false in /opt/root_src/core/base/src/TString.cxx:1916; 25: Taking false branch in /opt/root_src/core/base/src/TString.cxx:1916; 26: Calling constructor for 'TString' in /opt/root_src/core/base/src/TString.cxx:1922; 27: 'cs' is non-null in /opt/root_src/core/base/src/TString.cxx:105; 28: Taking true branch in /opt/root_src/core/base/src/TString.cxx:105; 29: Calling 'TString::Init' in /opt/root_src/core/base/src/TString.cxx:107; 30: 'capacity' is >= 0 in /opt/root_src/core/base/src/TString.cxx:249; 31: Taking false branch in /opt/root_src/core/base/src/TString.cxx:249; 32: 'nchar' is >= 0 in /opt/root_src/core/base/src/TString.cxx:253; 33: Taking false branch in /opt/root_src/core/base/src/TString.cxx:253; 34: Taking false branch in /opt/root_src/core/base/src/TString.cxx:257; 35: 'capacity' is >= kMinCap in /opt/root_src/core/base/src/TString.cxx:265; 36: Taking false branch in /opt/root_src/core/base/src/TString.cxx:265; 37: Memory is allocated in /opt/root_src/core/base/src/TString.cxx:270; 38: Returned allocated memory in /opt/root_src/core/base/src/TString.cxx:107; 39: Returning from constructor for 'TString' in /opt/root_src/core/base/src/TString.cxx:1922; 40: Loop condition is false. Execution continues on line 1932 in /opt/root_src/core/base/src/TString.cxx:1926; 41: Potential leak of memory pointed to by 'str_ref0.fRep..fLong.fData' in /opt/root_src/core/base/src/TString.cxx:1933; /opt/root_src/core/base/src/TString.cxx:2173:8: warning: Potential leak of memory pointed to by field 'fData' [clang-analyzer-cplusplus.NewDeleteLeaks]; 1: Assuming 'base_in' is >= 2 in /opt/root_src/core/base/src/TString.cxx:2151; 2: Left side of '||' is false in /opt/root_src/core/base/src/TString.cxx:2151; 3: Assuming 'base_in' is <= 36 in /opt/root_src/core/base/src/TString.cxx:2151; 4: Left side of '||' is false in /opt/root_src/core/base/src/TString.cxx:2151; 5: Assuming 'base_out' is >= 2 in /opt/root_src/core/base/src/TString.cxx:2151; 6,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7412:136235,allocate,allocated,136235,https://root.cern,https://github.com/root-project/root/issues/7412,1,['allocate'],['allocated']
Energy Efficiency,x:330; 12: Taking true branch in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:330; 13: Assuming 'j' is >= field 'fNOutputs' in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:331; 14: Loop condition is false. Execution continues on line 338 in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:331; 15: Assuming 'i' is >= 'nTrainingEvents' in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:315; 16: Loop condition is false. Execution continues on line 341 in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:315; 17: Memory is allocated in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:359; 18: 'i' is < 'nValEvents' in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:363; 19: Loop condition is true. Entering loop body in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:363; 20: Assuming 'j' is < field 'fNVars' in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:367; 21: Loop condition is true. Entering loop body in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:367; 22: Use of zero-allocated memory in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:368; /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:373:39: warning: Use of zero-allocated memory [clang-analyzer-cplusplus.NewDelete]; 1: Assuming field 'fModelIsSetup' is true in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:298; 2: Taking false branch in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:298; 3: 'i' is < 'nTrainingEvents' in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:315; 4: Loop condition is true. Entering loop body in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:315; 5: Assuming 'j' is >= field 'fNVars' in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:318; 6: Loop condition is false. Execution continues on line 324 in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:318; 7: Assuming the condition is false in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:324; 8: Left side of '||' is false in /opt/root_src/tmva/pymva/src/MethodPyTorch.cxx:324; 9: Assuming the condition is false in /opt/root_src/tmva/pymva/src/Method,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:12344,allocate,allocated,12344,https://root.cern,https://github.com/root-project/root/issues/7526,1,['allocate'],['allocated']
Energy Efficiency,x:431; 12: Taking true branch in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:431; 13: Assuming 'j' is >= field 'fNOutputs' in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:432; 14: Loop condition is false. Execution continues on line 439 in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:432; 15: Assuming 'i' is >= 'nTrainingEvents' in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:416; 16: Loop condition is false. Execution continues on line 442 in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:416; 17: Memory is allocated in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:460; 18: 'i' is < 'nValEvents' in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:464; 19: Loop condition is true. Entering loop body in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:464; 20: Assuming 'j' is < field 'fNVars' in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:468; 21: Loop condition is true. Entering loop body in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:468; 22: Use of zero-allocated memory in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:469; /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:474:39: warning: Use of zero-allocated memory [clang-analyzer-cplusplus.NewDelete]; 1: Assuming field 'fModelIsSetup' is true in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:400; 2: Taking false branch in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:400; 3: 'i' is < 'nTrainingEvents' in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:416; 4: Loop condition is true. Entering loop body in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:416; 5: Assuming 'j' is >= field 'fNVars' in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:419; 6: Loop condition is false. Execution continues on line 425 in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:419; 7: Assuming the condition is false in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:425; 8: Left side of '||' is false in /opt/root_src/tmva/pymva/src/MethodPyKeras.cxx:425; 9: Assuming the condition is false in /opt/root_src/tmva/pymva/src/Method,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:2112,allocate,allocated,2112,https://root.cern,https://github.com/root-project/root/issues/7526,1,['allocate'],['allocated']
Energy Efficiency,x:810; 5: Taking true branch in /opt/root_src/gui/gui/src/TGText.cxx:810; 6: Assuming 'start_src.fY' is equal to 'end_src.fY' in /opt/root_src/gui/gui/src/TGText.cxx:824; 7: Taking true branch in /opt/root_src/gui/gui/src/TGText.cxx:824; 8: 'len' is > 0 in /opt/root_src/gui/gui/src/TGText.cxx:830; 9: Taking true branch in /opt/root_src/gui/gui/src/TGText.cxx:830; 10: Calling 'TGText::GetLine' in /opt/root_src/gui/gui/src/TGText.cxx:831; 11: Assuming the condition is true in /opt/root_src/gui/gui/src/TGText.cxx:1000; 12: Taking true branch in /opt/root_src/gui/gui/src/TGText.cxx:1000; 13: Calling 'TGTextLine::GetText' in /opt/root_src/gui/gui/src/TGText.cxx:1001; 14: Assuming 'pos' is < field 'fLength' in /opt/root_src/gui/gui/src/TGText.cxx:187; 15: Taking false branch in /opt/root_src/gui/gui/src/TGText.cxx:187; 16: Assuming the condition is false in /opt/root_src/gui/gui/src/TGText.cxx:191; 17: Taking false branch in /opt/root_src/gui/gui/src/TGText.cxx:191; 18: Memory is allocated in /opt/root_src/gui/gui/src/TGText.cxx:195; 19: Use of zero-allocated memory in /opt/root_src/gui/gui/src/TGText.cxx:196; /opt/root_src/gui/gui/src/TGText.cxx:630:13: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/gui/gui/src/TGText.cxx:630; /opt/root_src/gui/gui/src/TGText.cxx:671:13: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]; 1: Call to,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7533:55129,allocate,allocated,55129,https://root.cern,https://github.com/root-project/root/issues/7533,1,['allocate'],['allocated']
Energy Efficiency,xx:1046; 5: Potential leak of memory pointed to by 'sliceVal' in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1168; /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1168:25: warning: Potential leak of memory pointed to by 'sliceValRef' [clang-analyzer-cplusplus.NewDeleteLeaks]; 1: Taking true branch in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1040; 2: Memory is allocated in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1044; 3: Assuming 'phiBin' is > 'nPhiBins' in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1046; 4: Loop condition is false. Execution jumps to the end of the function in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1046; 5: Potential leak of memory pointed to by 'sliceValRef' in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1168; /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1168:25: warning: Potential leak of memory pointed to by 'sliceValsLow' [clang-analyzer-cplusplus.NewDeleteLeaks]; 1: Taking false branch in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1040; 2: Memory is allocated in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1091; 3: Assuming 'etaBin' is > 'nEtaBins' in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1098; 4: Loop condition is false. Execution jumps to the end of the function in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1098; 5: Potential leak of memory pointed to by 'sliceValsLow' in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1168; /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1168:25: warning: Potential leak of memory pointed to by 'sliceValsLowRef' [clang-analyzer-cplusplus.NewDeleteLeaks]; 1: Taking false branch in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1040; 2: Memory is allocated in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1093; 3: Assuming 'etaBin' is > 'nEtaBins' in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1098; 4: Loop condition is false. Execution jumps to the end of the function in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:1098; 5: Potential leak of memory pointed to by 'sliceValsLowRef' in /opt/root_src/graf3d/eve7/src/REveCalo.cxx:116,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7531:32180,allocate,allocated,32180,https://root.cern,https://github.com/root-project/root/issues/7531,1,['allocate'],['allocated']
Energy Efficiency,xx:1759; 15: Null pointer passed to 1st parameter expecting 'nonnull' in /opt/root_src/math/matrix/src/TMatrixT.cxx:1761; /opt/root_src/math/matrix/src/TMatrixT.cxx:1782:7: warning: Null pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker]; 1: Taking false branch in /opt/root_src/math/matrix/src/TMatrixT.cxx:108; 2: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:120; 3: Loop condition is false. Exiting loop in /opt/root_src/math/matrix/src/TMatrixT.cxx:108; 4: expanded from macro 'R__ASSERT' in /opt/root_src/core/foundation/inc/TError.h:119; 5: Calling 'TMatrixT::Allocate' in /opt/root_src/math/matrix/src/TMatrixT.cxx:109; 6: Null pointer value stored to field 'fElements' in /opt/root_src/math/matrix/src/TMatrixT.cxx:472; 7: Assuming 'no_rows' is < 0 in /opt/root_src/math/matrix/src/TMatrixT.cxx:479; 8: Left side of '||' is true in /opt/root_src/math/matrix/src/TMatrixT.cxx:479; 9: Returning from 'TMatrixT::Allocate' in /opt/root_src/math/matrix/src/TMatrixT.cxx:109; 10: Calling 'TMatrixT::operator=' in /opt/root_src/math/matrix/src/TMatrixT.cxx:110; 11: Assuming 'gMatrixCheck' is 0 in /opt/root_src/math/matrix/src/TMatrixT.cxx:1773; 12: Left side of '&&' is false in /opt/root_src/math/matrix/src/TMatrixT.cxx:1773; 13: Assuming the condition is false in /opt/root_src/math/matrix/src/TMatrixT.cxx:1774; 14: Left side of '||' is false in /opt/root_src/math/matrix/src/TMatrixT.cxx:1773; 15: Assuming the condition is false in /opt/root_src/math/matrix/src/TMatrixT.cxx:1775; 16: Left side of '||' is false in /opt/root_src/math/matrix/src/TMatrixT.cxx:1773; 17: Assuming the condition is false in /opt/root_src/math/matrix/src/TMatrixT.cxx:1775; 18: Taking false branch in /opt/root_src/math/matrix/src/TMatrixT.cxx:1773; 19: Assuming the condition is true in /opt/root_src/math/matrix/src/TMatrixT.cxx:1780; 20: Taking true branch in /opt/root_src/math/matrix/src/TMatrixT.cxx:1780; 21: Null pointer passed t,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7458:137830,Allocate,Allocate,137830,https://root.cern,https://github.com/root-project/root/issues/7458,1,['Allocate'],['Allocate']
Energy Efficiency,"yzer-security.insecureAPI.strcpy]; 1: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 in /opt/root_src/io/sql/src/TBufferSQL2.cxx:1871; /opt/root_src/io/sql/src/TBufferSQL2.cxx:1894:21: warning: Use of zero-allocated memory [clang-analyzer-cplusplus.NewDelete]; 1: Assuming field 'fIOVersion' is < 2 in /opt/root_src/io/sql/src/TBufferSQL2.cxx:1879; 2: Taking true branch in /opt/root_src/io/sql/src/TBufferSQL2.cxx:1879; 3: Assuming 'nwh' is not equal to 0 in /opt/root_src/io/sql/src/TBufferSQL2.cxx:1885; 4: Taking false branch in /opt/root_src/io/sql/src/TBufferSQL2.cxx:1885; 5: Assuming 'nwh' is equal to 255 in /opt/root_src/io/sql/src/TBufferSQL2.cxx:1888; 6: Taking true branch in /opt/root_src/io/sql/src/TBufferSQL2.cxx:1888; 7: Memory is allocated in /opt/root_src/io/sql/src/TBufferSQL2.cxx:1893; 8: Use of zero-allocated memory in /opt/root_src/io/sql/src/TBufferSQL2.cxx:1894; /opt/root_src/io/sql/src/TSQLFile.cxx:386:7: warning: Value stored to 'recreate' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'recreate' is never read in /opt/root_src/io/sql/src/TSQLFile.cxx:386; /opt/root_src/io/xml/src/TBufferXML.cxx:764:41: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Assuming the condition is false in /opt/root_src/io/xml/src/TBufferXML.cxx:2390; 2: Taking false branch in /opt/root_src/io/xml/src/TBufferXML.cxx:2390; 3: Assuming 'gDebug' is > 1 in /opt/root_src/io/xml/src/TBufferXML.cxx:2402; 4: Taking true branch in /opt/root_src/io/xml/src/TBufferXML.cxx:2402; 5: Assuming 'cl' is null in /opt/root_src/io/xml/src/TBufferXML.cxx:2403; 6: '?' condition is false in /opt/root_src/io/xml/src/TBufferXML.cxx:2403; 7: Calling 'TBuffer::IsReading' in /opt/root_src/io/xml/src/TBufferXML.cxx:2404; 8: Returning zero, which participates in a condition later in /",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:120345,allocate,allocated,120345,https://root.cern,https://github.com/root-project/root/issues/7431,1,['allocate'],['allocated']
Energy Efficiency,"}, std::function<float (float, float)> > > >(tbb::detail::d1::node*, tbb::detail::d1::execution_data const&)':; TThreadExecutor.cxx:(.text+0x19b): undefined reference to `tbb::detail::r1::deallocate(tbb::detail::d1::small_object_pool&, void*, unsigned long, tbb::detail::d1::execution_data const&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x1c3): undefined reference to `tbb::detail::r1::is_group_execution_cancelled(tbb::detail::d1::task_group_context&)'; /usr/bin/ld: CMakeFiles/Imt.dir/src/TThreadExecutor.cxx.o: in function `tbb::detail::d1::task_arena_function<ROOT::TThreadExecutor::ParallelFor(unsigned int, unsigned int, unsigned int, std::function<void (unsigned int)> const&)::{lambda()#1}::operator()() const::{lambda()#1}, void>::operator()() const':; TThreadExecutor.cxx:(.text+0x31a): undefined reference to `tbb::detail::r1::initialize(tbb::detail::d1::task_group_context&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x332): undefined reference to `tbb::detail::r1::allocate(tbb::detail::d1::small_object_pool*&, unsigned long)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x39a): undefined reference to `tbb::detail::r1::max_concurrency(tbb::detail::d1::task_arena_base const*)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x3ff): undefined reference to `tbb::detail::r1::execute_and_wait(tbb::detail::d1::task&, tbb::detail::d1::task_group_context&, tbb::detail::d1::wait_context&, tbb::detail::d1::task_group_context&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x407): undefined reference to `tbb::detail::r1::destroy(tbb::detail::d1::task_group_context&)'; /usr/bin/ld: TThreadExecutor.cxx:(.text+0x416): undefined reference to `tbb::detail::r1::throw_exception(tbb::detail::d0::exception_id)'; /usr/bin/ld: CMakeFiles/Imt.dir/src/TThreadExecutor.cxx.o: in function `tbb::detail::d1::task_arena_function<ROOT::Internal::ParallelReduceHelper<float>(std::vector<float, std::allocator<float> > const&, std::function<float (float, float)> const&)::{lambda()#2}, float>::operator()() const':; ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11931:9000,allocate,allocate,9000,https://root.cern,https://github.com/root-project/root/issues/11931,1,['allocate'],['allocate']
Energy Efficiency,~~This PR should turn green when [ROOT-9790](https://sft.its.cern.ch/jira/browse/ROOT-9790) is resolved.~~ A temporary workaround for greedy jitting of `Cache` and `Snapshot` has been added.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3602:22,green,green,22,https://root.cern,https://github.com/root-project/root/pull/3602,1,['green'],['green']
Energy Efficiency,"… spectrum and adjust final plot. The files are taken form publiceos!. The final plot looks like this:. ![x](https://user-images.githubusercontent.com/6951222/47027878-93b95200-d168-11e8-96d8-790d5a024e7e.png). **Edit:**. I've restuctured the tutorial a little and simplified the cuts. Now, it's very clear without index magic and much more condense! The simplification comes from requiring *exactly* two muons for each events. We loose a little statistics but the analysis is now easier to understand. I leave the complicated stuff to the upcoming Higgs analysis tutorial ;) The plot looks now like this:. ![x](https://user-images.githubusercontent.com/6951222/47138237-21a45280-d2b9-11e8-809c-044751d2b112.png). And I've added a cut-flow report! ->. ```; Events with exactly two muons: pass=33370298 all=66128870 -- 50.463 %; Muons with opposite charge: pass=25794885 all=33370298 -- 77.299 %; ```. Runtime depends heavily on the xrootd connection. From my experience about 1 to 3 minutes with files read remotely and about 20s with files read from local disk.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2803:848,charge,charge,848,https://root.cern,https://github.com/root-project/root/pull/2803,1,['charge'],['charge']
Energy Efficiency,"…ference types."". This patch reduces deserializing of lazy template specializations from the PCH as it reduces the hash collisions (now we distinguish between pointer and reference types).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1810:29,reduce,reduces,29,https://root.cern,https://github.com/root-project/root/pull/1810,2,['reduce'],['reduces']
Energy Efficiency,"…pector. Currently, irrelevant value is returned if compressed size exceeds the range of int, since std::accumulate is initialized with plain 0. The proposed version uses std::reduce where (implicit) zero-initialization is done with the iterator value type. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #16124",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16113:176,reduce,reduce,176,https://root.cern,https://github.com/root-project/root/pull/16113,1,['reduce'],['reduce']
Energy Efficiency,…totype. Picked and adapted from Cppyy: try to get the requested method with; GetMethodWithPrototype with prototypes that consider reference; parameters too.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4304:20,adapt,adapted,20,https://root.cern,https://github.com/root-project/root/pull/4304,1,['adapt'],['adapted']
Energy Efficiency,"…ue,Array}. when they are attached to the same branch.; TNamedBranchProxy did not implement a Hash method.; Therefore when adding TNamedBranchProxy instances to the THashList dedicated to their bookkeping in TTreeReader TObject::Hash was used.; Unfortunately when trying to find the TNamedBranchProxies, their name was used and the hash was built differently by THashList (based on the name).; In order to fix this the following steps were taken.; - THashList was replaced by an unordered_map with names as keys and unique_ptr<TNamedBranchProxy> as values. The unique_ptr is used to automatically manage ownership.; - The key is not the name of the branch as known by the branch any more but rather the name the user inputs in the constructor of the TTreeReader{Array,Value}.; - An exception is thrown in debug mode if the system tries to push in the TTreeReader collection of proxy with a name held by a proxy in that collection.; - The methods of TTreeReader were adapted to use this new container as well as the code in TTreeReaderValue and TTreeReaderArray. A real usecase from CMS where the mass of the W boson is studied shows a significant speedup (30%).; The code uses TDataFrame and several nodes are created which read from the same branch in an input tree which holds weights in a collection.; This configuration stressed the performance degradation pattern fixed by this commit as it triggered multiple times the deserialisation of the ""weights branch"". Thanks to Elisabetta Manca and Lorenzo Bianchini for providing the bug report and initial reproducer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1784:966,adapt,adapted,966,https://root.cern,https://github.com/root-project/root/pull/1784,2,['adapt'],['adapted']
Integrability,"	6.38354e-16	t=0.05; 	new:	1.77284e-16	2.12771e-16	4.25564e-16	6.38325e-16	6.38354e-16	t=0.04; 	ROOT:	1.44538e-16	2.12768e-16	4.25551e-16	4.25569e-16	6.38354e-16	t=0.06; Integrating Polynomial 4th order, relEps = 1e-08; 	 	mean 	median 	q95 	q99 	max; 	old:	1.40424e-16	2.12764e-16	4.25528e-16	4.25528e-16	6.38292e-16	t=0.06; 	new:	1.7536e-16	2.12764e-16	4.25528e-16	6.38292e-16	6.38292e-16	t=0.02; 	ROOT:	1.45531e-16	2.12764e-16	4.25528e-16	4.25528e-16	6.38292e-16	t=0.03; [ OK ] Roo1DIntegrator.ConvergenceSettings_pol4 (501 ms); [ RUN ] Roo1DIntegrator.ConvergenceSettings_breitWig; Integrating Breit-Wigner distribution, relEps = 0.001; 	 	mean 	median 	q95 	q99 	max; 	old:	0.0303175	0.0209141	0.0827284	0.116045	0.125775	t=0.05; 	new:	0.00084728	0.000305644	0.00479046	0.0129056	0.125775	t=0.02; 	ROOT:	1.69943e-06	6.01714e-12	2.93861e-09	6.96465e-08	0.125775	t=0.25; Old integrator reached poor precision: 0.0303175 +/- 0.0273059 instead of 0.001; Integrating Breit-Wigner distribution, relEps = 1e-06; 	 	mean 	median 	q95 	q99 	max; 	old:	3.37556e-06	3.37556e-06	3.39334e-06	3.39492e-06	3.39532e-06	t=0.18; 	new:	2.27034e-08	2.27035e-08	2.28213e-08	2.28318e-08	3.39532e-06	t=0.18; 	ROOT:	1.98411e-16	2.29224e-16	4.58502e-16	4.58676e-16	3.39532e-06	t=0.16; Integrating Breit-Wigner distribution, relEps = 1e-08; 	 	mean 	median 	q95 	q99 	max; 	old:	2.28344e-08	2.28344e-08	2.28344e-08	2.28344e-08	2.28344e-08	t=0.3; 	new:	1.21223e-10	1.21223e-10	1.21223e-10	1.21223e-10	2.28344e-08	t=0.25; 	ROOT:	2.1239e-16	2.29339e-16	4.58677e-16	5.73346e-16	2.28344e-08	t=0.2; [ OK ] Roo1DIntegrator.ConvergenceSettings_breitWig (1691 ms); [ RUN ] Roo1DIntegrator.ConvergenceSettings_Erf; Integrating Gaussian distribution, relEps = 0.001; 	 	mean 	median 	q95 	q99 	max; 	old:	7.08849e-07	1.10954e-07	3.73492e-06	5.0379e-06	5.42401e-06	t=0.04; 	new:	1.1389e-09	4.99603e-11	6.97092e-09	1.01533e-08	5.42401e-06	t=0.07; 	ROOT:	1.64064e-16	1.47929e-16	3.92701e-16	5.06943e-16	5.42401e-06	t=0.03; Integrating ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6632:2801,Integrat,Integrating,2801,https://root.cern,https://github.com/root-project/root/pull/6632,1,['Integrat'],['Integrating']
Integrability," 	q95 	q99 	max; 	old:	1.62946e-08	1.62946e-08	1.62946e-08	1.62946e-08	1.62946e-08	t=1.26; 	new:	3.98296e-10	3.98296e-10	3.98297e-10	3.98297e-10	1.62946e-08	t=1.48; 	ROOT:	7.94604e-14	7.95337e-14	7.96915e-14	7.98493e-14	1.62946e-08	t=0.38; [ OK ] Roo1DIntegrator.ConvergenceSettings_log (4402 ms); [ RUN ] Roo1DIntegrator.ConvergenceSettings_pol4; Integrating Polynomial 4th order, relEps = 0.001; 	 	mean 	median 	q95 	q99 	max; 	old:	3.01835e-16	1.45346e-16	5.65891e-16	2.22915e-15	1.15949e-13	t=0.04; 	new:	3.3408e-16	1.84038e-16	6.31068e-16	2.24297e-15	1.15949e-13	t=0.05; 	ROOT:	3.09356e-16	1.56283e-16	5.63307e-16	2.02418e-15	1.15949e-13	t=0.05; Integrating Polynomial 4th order, relEps = 1e-06; 	 	mean 	median 	q95 	q99 	max; 	old:	1.40432e-16	2.12767e-16	4.25546e-16	4.25569e-16	6.38354e-16	t=0.05; 	new:	1.77284e-16	2.12771e-16	4.25564e-16	6.38325e-16	6.38354e-16	t=0.04; 	ROOT:	1.44538e-16	2.12768e-16	4.25551e-16	4.25569e-16	6.38354e-16	t=0.06; Integrating Polynomial 4th order, relEps = 1e-08; 	 	mean 	median 	q95 	q99 	max; 	old:	1.40424e-16	2.12764e-16	4.25528e-16	4.25528e-16	6.38292e-16	t=0.06; 	new:	1.7536e-16	2.12764e-16	4.25528e-16	6.38292e-16	6.38292e-16	t=0.02; 	ROOT:	1.45531e-16	2.12764e-16	4.25528e-16	4.25528e-16	6.38292e-16	t=0.03; [ OK ] Roo1DIntegrator.ConvergenceSettings_pol4 (501 ms); [ RUN ] Roo1DIntegrator.ConvergenceSettings_breitWig; Integrating Breit-Wigner distribution, relEps = 0.001; 	 	mean 	median 	q95 	q99 	max; 	old:	0.0303175	0.0209141	0.0827284	0.116045	0.125775	t=0.05; 	new:	0.00084728	0.000305644	0.00479046	0.0129056	0.125775	t=0.02; 	ROOT:	1.69943e-06	6.01714e-12	2.93861e-09	6.96465e-08	0.125775	t=0.25; Old integrator reached poor precision: 0.0303175 +/- 0.0273059 instead of 0.001; Integrating Breit-Wigner distribution, relEps = 1e-06; 	 	mean 	median 	q95 	q99 	max; 	old:	3.37556e-06	3.37556e-06	3.39334e-06	3.39492e-06	3.39532e-06	t=0.18; 	new:	2.27034e-08	2.27035e-08	2.28213e-08	2.28318e-08	3.39532e-06	t=0.18; 	ROOT:	1.98411e-16	2.29",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6632:2016,Integrat,Integrating,2016,https://root.cern,https://github.com/root-project/root/pull/6632,1,['Integrat'],['Integrating']
Integrability," /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5); | ^; /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here; 278 | common/pawc/paw(nwpaw); | ^; /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used; [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C; /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C; [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C; /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoord.C; [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C; /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoordtrans.C; [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C; /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/printSizes.C; lto1: some warnings being treated as errors; lto-wrapper: fatal error: /usr/bin/x86_64-pc-linux-gnu-gfortran returned 1 exit status; compilation terminated.; /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../x86_64-pc-linux-gnu/bin/ld: error: lto-wrapper failed; collect2: error: ld returned 1 exit status; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11657:5633,wrap,wrapper,5633,https://root.cern,https://github.com/root-project/root/issues/11657,2,['wrap'],['wrapper']
Integrability," 0, 5};; x.setBins(25);; y.setBins(25);. RooRealVar x0(""x0"", ""x0"", 2.5, -5., 5.);; RooRealVar sigma(""sigma"", ""sigma"", 0.02, 1.E-4, 1.);; RooRealVar alpha(""a"", ""a"", 1., 1.E-6, 100.);; RooRealVar n(""n"", ""n"", 1., 1.E-6, 100.);; RooCrystalBall crystalBall(""cb1"", ""cb1"", x, x0, sigma, alpha, n);; RooCBShape cbShape(""cb2"", ""cb2"", x, x0, sigma, alpha, n);. // This one is not exact, and it fact should not be implemented.; // It is unnecessary because it forwards to the generator of the underlying Pdf; RooBinSamplingPdf binSamplingPdf(""binSamplingPdf"", ""binSamplingPdf"", x, crystalBall);. RooDataHist templHist{""templHist"", ""templHist"", x};; templHist.set(x.getBin(), 100.0, -1.0);. RooDataSet templData{""templData"", ""templData"", x};; for (int i = 0; i < x.numBins(); ++i) {; x.setBin(i);; templData.add(x);; }; x.setVal(2.5);. // no interpolation; RooHistFunc histFunc{""histFunc"", ""histFunc"", x, templHist, 0};; RooHistPdf histPdf{""histPdf"", ""histPdf"", x, templHist, 0};. RooWrapperPdf wrapperPdf{""wrapperPdf"", ""wrapperPdf"", histFunc};. RooKeysPdf keysPdf{""keysPdf"", ""keysPdf"", x, templData};. RooArgSet normSet0{}; // check empty normalization set; RooArgSet normSet1{x}; // check ""usual"" normalization set; RooArgSet normSet2{x, y}; // it should also handle extra disconnected observables. // init caches; wrapperPdf.getVal(normSet1);. auto test = [&](RooAbsReal const &func, RooArgSet const &nset) {; int maxValCode = func.getMaxVal(nset);; double maxVal = NAN;; if (maxValCode != 0); maxVal = func.maxVal(maxValCode);; std::cout << func.ClassName() << nset << "": "" << func.getVal(nset) << "" "" << maxVal << std::endl;; };. for (auto &normSet : {normSet0, normSet1, normSet2}) {; std::cout << std::endl;. test(histFunc, normSet);; test(histPdf, normSet);; test(keysPdf, normSet);; test(crystalBall, normSet);; test(cbShape, normSet);; test(wrapperPdf, normSet);; test(binSamplingPdf, normSet);; // still missing: RooFFTConvPdf, RooSPHarmonic, and RooLegendre; }; ```. The output is:; ```; RooHistFunc()",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12317:1248,wrap,wrapperPdf,1248,https://root.cern,https://github.com/root-project/root/issues/12317,3,['wrap'],['wrapperPdf']
Integrability," 1, in <module>; import torch; ModuleNotFoundError: No module named 'torch'; ```; ```; RDataFrame::Run: event loop was interrupted; Traceback (most recent call last):; File ""/github/home/ROOT-CI/src/tutorials/dataframe/df102_NanoAODDimuonAnalysis.py"", line 50, in <module>; h.SetTitle(""""); ^^^^^^^^^^; cppyy.gbl.std.bad_alloc: TH1D& ROOT::RDF::RResultPtr<TH1D>::operator*() =>; bad_alloc: std::bad_alloc; CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```; ```; Traceback (most recent call last):; File ""/github/home/ROOT-CI/src/tutorials/dataframe/df104_HiggsToTwoPhotons.py"", line 87, in <module>; ROOT.RDF.RunGraphs([hists[s] for s in [""ggH"", ""VBF"", ""data""]]); cppyy.gbl.std.bad_alloc: unsigned int ROOT::RDF::RunGraphs(vector<ROOT::RDF::RResultHandle>) =>; bad_alloc: std::bad_alloc; CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```; ```; -- END TEST OUTPUT --; -- BEGIN TEST ERROR --; sh: 1: ipython3: not found; Traceback (most recent call last):; File ""/github/home/ROOT-CI/roottest/python/JupyROOT/nbdiff.py"", line 197, in <module>; retCode = canReproduceNotebook(nbFileName, kernelName, needsCompare); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; ```; ```; Exception occurred during processing of request from ('127.0.0.1', 53110); FTraceback (most recent call last):; File ""/usr/lib/python3.12/socketserver.py"", line 318, in _handle_request_noblock; self.process_request(request, client_address); ```. ### Reproducer. Grab the image:; ```; $ docker run --security-opt label=disable -it registry.cern.ch/root-ci/ubuntu2404:buildready; ```; Then:; ``` ; (; rm -rf /github/home/ROOT-CI; mkdir -p /github/home/ROOT-CI; ); (; curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/ubuntu2404/master/RelWithDebInfo/3f796869dae3bde0bfafc4ef8051339eb5ca133c/2024-08-12.tar.gz; ); (; cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/art",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16242:3764,message,message,3764,https://root.cern,https://github.com/root-project/root/issues/16242,1,['message'],['message']
Integrability, 394/1231 Test #371: gtest-tree-dataframe-test-dataframe-utils ........................... Passed 1.38 sec; Start 372: gtest-tree-dataframe-test-dataframe-report; 395/1231 Test #370: gtest-tree-dataframe-test-dataframe-regression ...................... Passed 12.11 sec; Start 373: gtest-tree-dataframe-test-dataframe-splitcoll-arrayview; 396/1231 Test #372: gtest-tree-dataframe-test-dataframe-report .......................... Passed 0.79 sec; Start 374: gtest-tree-dataframe-test-dataframe-redefine; 397/1231 Test #373: gtest-tree-dataframe-test-dataframe-splitcoll-arrayview ............. Passed 1.07 sec; Start 375: gtest-tree-dataframe-test-dataframe-definepersample; 398/1231 Test #374: gtest-tree-dataframe-test-dataframe-redefine ........................ Passed 3.63 sec; Start 376: gtest-tree-dataframe-test-dataframe-simple; 399/1231 Test #375: gtest-tree-dataframe-test-dataframe-definepersample ................. Passed 3.06 sec; Start 377: gtest-tree-dataframe-test-dataframe-helpers; 400/1231 Test #368: gtest-tree-dataframe-test-dataframe-interface ....................... Passed 21.83 sec; Start 378: gtest-tree-dataframe-test-dataframe-vecops; 401/1231 Test #378: gtest-tree-dataframe-test-dataframe-vecops .......................... Passed 3.95 sec; Start 379: gtest-tree-dataframe-test-dataframe-snapshot; 402/1231 Test #377: gtest-tree-dataframe-test-dataframe-helpers ......................... Passed 8.48 sec; Start 380: gtest-tree-dataframe-test-dataframe-display; 403/1231 Test #365: gtest-tree-dataframe-test-dataframe-cache ........................... Passed 44.39 sec; Start 381: gtest-tree-dataframe-test-dataframe-ranges; Start 382: gtest-tree-dataframe-test-dataframe-leaves; 405/1231 Test #381: gtest-tree-dataframe-test-dataframe-ranges .......................... Passed 2.10 sec; Start 383: gtest-tree-dataframe-test-dataframe-resptr; 406/1231 Test #383: gtest-tree-dataframe-test-dataframe-resptr .......................... Passed 0.61 sec; Start 384: gtest-tree-dat,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:2699,interface,interface,2699,https://root.cern,https://github.com/root-project/root/pull/10300,1,['interface'],['interface']
Integrability," ; ```c++; #include <iostream>; #include <fstream>; #include<TRandom.h>. float input_lambda(float width){; return -6.347e-07*width*width+0.0015*width+1.835;; }. void exampleND(){; auto myy = new RooRealVar(""myy"", ""myy"", 110., 155.);; myy->setBins(450.);. auto w = new RooWorkspace(""w"");. auto hist_1 = new TH1F(""hist_1_125"",""hist_1_125"", 450, 110., 155.);; for(double i=0; i<10000; i++){hist_1->Fill(gRandom->Gaus(125., input_lambda(1.)));}; auto hist_400 = new TH1F(""hist_400_125"",""hist_400_125"", 450, 110., 155.);; for(double i=0; i<10000; i++){hist_400->Fill(gRandom->Gaus(125., input_lambda(400.)));}; hist_1->Scale(1./hist_1->Integral());; hist_400->Scale(1./hist_400->Integral());. auto data_sig_1 = new RooDataHist(""data_sig_1"", ""data_sig_1"", RooArgList(*myy), hist_1);; auto data_sig_400 = new RooDataHist(""data_sig_400"", ""data_sig_400"", RooArgList(*myy), hist_400);. auto hist_pdf_1 = new RooHistPdf(""hist_pdf_1"", ""hist_pdf_1"", RooArgList(*myy), *data_sig_1);; auto hist_pdf_400 = new RooHistPdf(""hist_pdf_400"", ""hist_pdf_400"", RooArgList(*myy), *data_sig_400);. std::vector<float> Lambda_list = {1., 400.};; auto Lambda = RooRealVar(""lambda"", ""lambda"", 1., 400.);; auto paramVec = TVectorD(2);; for (int j = 0; j < 2; ++j){; 	paramVec[j] = Lambda_list[j];; }. auto morph_ND = new RooMomentMorphND(""morph_ND"",""morph_ND"", Lambda, RooArgList(*myy), RooArgList(*hist_pdf_1, *hist_pdf_400), paramVec, RooMomentMorphND::Linear);. w->import(*morph_ND);; w->Print();; w->writeToFile(""test_workspace.root"");; }; ```; If you run the code, you will see the the error occurs at line 40, where I see the error message cites the issue as being related to the ""_referenceGrid"" not able to be saved. . The output seen is:; ```; Warning in <TStreamerInfo::Build>: RooMomentMorphND: RooMomentMorphND::Grid has no streamer or dictionary, data member ""_referenceGrid"" will not be saved. *** Break *** segmentation violation; __boot(); import os; ```. ### Setup; For the record, I am using ROOT Version: 6.24/06",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11876:2055,message,message,2055,https://root.cern,https://github.com/root-project/root/issues/11876,1,['message'],['message']
Integrability," Build Type: 'Release' (flags = '-O3 -DNDEBUG'); -- Compiler Flags: -std=c++17 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Wall -Woverloaded-virtual -fsigned-char -fno-common -Qunused-arguments -pthread -stdlib=libc++ -O3 -DNDEBUG; -- ROOT default compression algorithm: zlib; -- PyROOT will be built for version 3.12.0; -- Looking for ZLib; -- Building freetype version 2.12.1 included in ROOT itself; -- Looking for PCRE; -- Looking for LZMA; -- Looking for ZSTD; -- Looking for LZ4; -- Building AfterImage library included in ROOT itself; -- Looking for GSL; -- Looking for OpenGL; -- Looking for LibXml2; -- Looking for MySQL; -- Looking for SQLite; -- Looking for FFTW3; -- Looking for XROOTD; -- Found Xrootd version num: 5.5.0 (setting -DROOTXRDVERS=500050000); -- libXrdMain not found: xproofd will be a wrapper around xrootd; -- libXrdClient not found: use built-in; -- include_dirs: /Users/marcomeyer/Software/xrootd/5.5.0/include/xrootd;/Users/marcomeyer/Software/root/src/proof/xrdinc; -- libraries: /Users/marcomeyer/Software/xrootd/5.5.0/lib/libXrdUtils.dylib;/Users/marcomeyer/Software/xrootd/5.5.0/lib/libXrdCl.dylib; -- Checking for module 'davix>=0.6.4'; -- Found davix, version 0.8.4; -- Cannot select cudnn without selecting cuda or tmva-gpu. Option is ignored; -- Looking for BLAS for optional parts of TMVA; -- Building LLVM in 'Release' mode.; -- Could NOT find Z3: Found unsuitable version ""0.0.0"", but required is at least ""4.7.1"" (found Z3_LIBRARIES-NOTFOUND); -- Found libtool - /Library/Developer/CommandLineTools/usr/bin/libtool; -- Native target ARM is not selected; lli will not JIT code; -- Threads disabled.; -- Doxygen disabled.; -- Go bindings disabled.; -- Found ld64 - /Library/Developer/CommandLineTools/usr/bin/ld; -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH) ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14337:2008,wrap,wrapper,2008,https://root.cern,https://github.com/root-project/root/issues/14337,1,['wrap'],['wrapper']
Integrability," ColumnNames_t &bl, std::shared_ptr<PrevDataFrame> pd,; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/bin/../lib/gcc/x86_64-conda-linux-gnu/7.5.0/../../../../x86_64-conda-linux-gnu/include/c++/7.5.0/bits/unique_ptr.h:821:34: note: in instantiation of member function 'ROOT::Internal::RDF::RAction<ROOT::Internal::RDF::FillParHelper<TH1D>, ROOT::Detail::RDF::RNodeBase, ROOT::TypeTraits::TypeList<ROOT::VecOps::RVec<bool> > >::RAction' requested here; { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/InterfaceUtils.hxx:153:19: note: in instantiation of function template specialization 'std::make_unique<ROOT::Internal::RDF::RAction<ROOT::Internal::RDF::FillParHelper<TH1D>, ROOT::Detail::RDF::RNodeBase, ROOT::TypeTraits::TypeList<ROOT::VecOps::RVec<bool> > >, ROOT::Internal::RDF::FillParHelper<TH1D>, const std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > &, std::shared_ptr<ROOT::Detail::RDF::RNodeBase>, ROOT::Internal::RDF::RBookedCustomColumns>' requested here; return std::make_unique<Action_t>(Helper_t(h, nSlots), bl, std::move(prevNode), std::move(customColumns));; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/InterfaceUtils.hxx:458:21: note: in instantiation of function template specialization 'ROOT::Internal::RDF::BuildAction<ROOT::VecOps::RVec<bool> , ROOT::Detail::RDF::RNodeBase>' requested here; auto actionPtr = BuildAction<BranchTypes...>(bl, std::move(rOnHeap), nSlots, std::move(prevNodePtr), ActionTag{},; ^; input_line_35:2:23: note: in instantiation of function template specialization 'ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, ROOT::VecOps::RVec<bool> , ROOT::Detail::RDF::RNodeBase, TH1D>' requested here; ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::H",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6675:2939,Interface,InterfaceUtils,2939,https://root.cern,https://github.com/root-project/root/issues/6675,1,['Interface'],['InterfaceUtils']
Integrability," NOT find CFITSIO (missing: CFITSIO_LIBRARY CFITSIO_INCLUDE_DIR); -- CFITSIO not found. You can enable the option 'builtin_cfitsio' to build the library internally'; -- For the time being switching off 'fitsio' option; -- Looking for XROOTD; -- XROOTD not found, enabling 'builtin_xrootd' option; -- Downloading and building XROOTD version 5.4.2; -- Could NOT find GFAL (missing: GFAL_INCLUDE_DIR SRM_IFCE_INCLUDE_DIR GFAL_LIBRARY); -- GFAL library not found. Set variable GFAL_DIR to point to your gfal installation; and the variable SRM_IFCE_DIR to the srm_ifce installation; -- For the time being switching OFF 'gfal' option; -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY); -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation; -- For the time being switching ON 'builtin_ftgl' option; -- Checking for module 'davix>=0.6.4'; -- Package 'davix', required by 'virtual:world', not found; -- Looking for uuid_generate_random in uuid; -- Looking for uuid_generate_random in uuid - found; -- Found libuuid: /usr/include; -- Davix dependencies not found, switching OFF 'davix' option.; -- Looking for TBB; -- Found TBB: /usr (Required is at least version ""2018""); -- Looking for VDT; -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""); -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH; -- Switching ON 'builtin_vdt' option; -- Cannot select cudnn without selecting cuda or tmva-gpu. Option is ignored; -- Looking for BLAS for optional parts of TMVA; -- Looking for sgemm_; -- Looking for sgemm_ - not found; -- Looking for sgemm_; -- Looking for sgemm_ - found; -- Found BLAS: /usr/lib/libblas.so; -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB; -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success; -- Building LLVM in 'Release' mode.; -- The ASM compiler identification is GNU; -- Found assembler: /usr/bin/cc; -- Could NOT find Z3: Found unsuitable version ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10528:7469,depend,dependencies,7469,https://root.cern,https://github.com/root-project/root/issues/10528,1,['depend'],['dependencies']
Integrability," No constructor could take the source type, or constructor overload resolution was ambiguous [C:\Users\bellenot\build\x64\release\interpreter\llvm\src\utils\TableGen\GlobalISel\LLVMTableGenGlobalISel.vcxproj]; C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\format(3521,19): message : or 'std::string std::format<const std::unique_ptr<llvm::GIMatchDagPredicate,std::default_delete<llvm::GIMatchDagPredicate>>*>(const std::basic_format_string<char,const std::unique_ptr<llvm::GIMatchDagPredicate,std::default_delete<llvm::GIMatchDagPredicate>> *>,const std::unique_ptr<llvm::GIMatchDagPredicate,std::default_delete<llvm::GIMatchDagPredicate>>*&&)' [found using argument-dependent lookup] [C:\Users\bellenot\build\x64\release\interpreter\llvm\src\utils\TableGen\GlobalISel\LLVMTableGenGlobalISel.vcxproj]; C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\format(3536,20): message : or 'std::wstring std::format(const std::locale &,const std::basic_format_string<wchar_t,type_identity<_Args>::type...>,_Types &&...)' [C:\Users\bellenot\build\x64\release\interpreter\llvm\src\utils\TableGen\GlobalISel\LLVMTableGenGlobalISel.vcxproj]; interpreter\llvm\src\utils\TableGen\GlobalISel\GIMatchDag.cpp(85,18): message : 'initializing': cannot convert from 'const char [5]' to 'const std::locale &' [C:\Users\bellenot\build\x64\release\interpreter\llvm\src\utils\TableGen\GlobalISel\LLVMTableGenGlobalISel.vcxproj]; interpreter\llvm\src\utils\TableGen\GlobalISel\GIMatchDag.cpp(85,18): message : Reason: cannot convert from 'const char [5]' to 'const std::locale' [C:\Users\bellenot\build\x64\release\interpreter\llvm\src\utils\TableGen\GlobalISel\LLVMTableGenGlobalISel.vcxproj]; interpreter\llvm\src\utils\TableGen\GlobalISel\GIMatchDag.cpp(85,18): message : Constructor for class 'std::locale' is declared 'explicit' [C:\Users\bellenot\build\x64\release\interpreter\llvm\src\utils\TableGen\GlobalISel\LLVMTableGenGlobalISel.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12523:9278,message,message,9278,https://root.cern,https://github.com/root-project/root/pull/12523,1,['message'],['message']
Integrability," TNode::CheckOverlaps => TGeoVolume::CheckOverlaps => TGeoPainter::CheckOverlaps => TGeoChecker::CheckOverlaps | => TGeoChecker::MakeCheckOverlap; | => TGeoChecker::CheckOverlapsBySampling; ```. However [the line using this parameter in the sampling case (l.1271) is commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1271).; It was commented in https://github.com/root-project/root/commit/406af49ee13e135d7c2f1268370ea83e0a99c729 and the commit message does not mention this change explicitly (maybe a consequence of the introduction of the usage of `Voxels`?). The [corresponding line for the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volume.; Having/restoring the possibility to ignore the ""really small"" overlaps would cure our problem with a single parameter. Proposed solutions:; - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**).; => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04; - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------; Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased.; However for a given number the list of overlaps ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14675:1611,integrat,integrated,1611,https://root.cern,https://github.com/root-project/root/issues/14675,1,['integrat'],['integrated']
Integrability," When configuring ROOT with builtin_afterimage, building libAfterImage fails with the following errors:. ```; /bin/sh: line 30: -m: command not found; /bin/sh: line 30: -m: command not found; /bin/sh: line 30: -m: command not found; /bin/sh: line 30: -m: command not found; /bin/sh: line 30: -m: command not found; /bin/sh: line 30: -m: command not found; /bin/sh: line 30: -m: command not found; /bin/sh: line 30: -m: command not found; /bin/sh: line 30: -m: command not found; /bin/sh: line 30: -m: command not found; /bin/sh: line 30: -m: command not found; /bin/sh: line 30: -m: command not found; /bin/sh: line 30: -m: command not found; /bin/sh: line 30: -m: command not found; /bin/sh: line 30: -m: command not found; /bin/sh: line 30: -m: command not found; /bin/sh: line 30: -m: command not found; /bin/sh: line 30: -m: command not found; /bin/sh: line 30: -m: command not found; /bin/sh: line 30: -m: command not found; /bin/sh: line 30: -m: command not found; /bin/sh: line 30: -m: command not found; /bin/sh: line 30: -m: command not found; /bin/sh: line 30: -m: command not found; gmake[3]: m: No such file or directory; /bin/sh: line 2: -m: command not found; gmake[3]: *** [Makefile:145: install.static] Error 127; ```. The error message seems to indicate that the `${INSTALL}` makefile variable expands to nothing rather than to `install` as it should, but I do have `install` available on my system. This happens both on Fedora and Arch. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. Probably just start a Docker container with Arch or Fedora 33 and try to build ROOT with builtin_libafterimage. ### Additional context; <!--; Add any other context about the problem here.; -->. Installing a system version of libafterimage works around the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7345:1702,message,message,1702,https://root.cern,https://github.com/root-project/root/issues/7345,1,['message'],['message']
Integrability," ] Implement batch eval for Chi2 test stat; - [x] Implement recovery from disallowed regions for batch eval (https://github.com/root-project/root/pull/6401); - [x] Implement getWeightBatch() and getBatches() for RooDataHist; - [ ] Implement getBatch for RooTreeDataStore?; - [ ] Don't clear all intermediate values in batch fits between fit cycles. Only the ones that changed.; - [ ] Disable recalculateCache etc belonging to Lvl2 optimisation.; - [ ] Use batch evaluation & inverted CDF for toys; - [ ] Continue to improve interface with variadic templates; - [ ] Profile and optimise new Batch interface; - [ ] Modernise proxyList member of RooSimultaneous; - [ ] Investigate if retrieving batch data with category states is better for batch evaluations. (vs. splitting composite datasets into components, and creating one NLL for each.); - [ ] Continue modernisation of RooSimultaneous. Requires rebasing and fixing an index bug in https://github.com/hageboeck/root/tree/updateRooSimultaneous; - [ ] Implement analytical integration of RooJohnson.; - [ ] Correct interface of RooAbsData and derived classes to use e.g. `std::size_t` for indexing events. `int` doesn't make sense.; - [ ] Always have a debug version of RooFit around with `-DROOFIT_CHECK_CACHED_VALUES`.; - [ ] Use analytic integrals in RooBinSamplingPdf when available.; - [ ] Check that different integrator settings are honoured in RooBinSamplingPdf.; - [ ] https://sft.its.cern.ch/jira/browse/ROOT-8304; - [ ] Implement evaluateSpan() in classes relevant for HistFactory fits.; - [ ] Throw Gaussian & Poisson constraints into dedicated fast class.; - [ ] Switch on FastEvaluations topic in RooFit message streams, and use it to trace down PDFs that don't implement the faster interface.; - [ ] #7210, slowly augment PDFs with checks of the definition range of parameters. This prevents evaluation errors and can stabilise fits.; - [ ] #7217, pythonisations for RooFit; - [ ] Vectorized generation of events. Unless specialised g",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6557:1027,integrat,integration,1027,https://root.cern,https://github.com/root-project/root/issues/6557,1,['integrat'],['integration']
Integrability," a segfault for non-debug builds):. ```cpp; #include <TTree.h>; #include <TFile.h>; #include <TApplication.h>. int main(); {; //TApplication app(""app"", nullptr, nullptr);; TFile *outputFile = new TFile(""output.root"", ""RECREATE"");. TTree *tree = new TTree(""tree"", ""treeliberated tree"");; outputFile->Write();. tree->StartViewer();. //app.Run();; outputFile->Close();; }; ```. ```; #8 0x00007fd6cf22b8c2 in TGCompositeFrame::TGCompositeFrame (this=0x56036dc34a10, p=0x0, w=10, h=10, options=3, back=0) at ../../../root_dbg/gui/gui/src/TGFrame.cxx:853; #9 0x00007fd6cf22d4cc in TGMainFrame::TGMainFrame (this=0x56036dc34a10, p=0x0, w=10, h=10, options=2) at ../../../root_dbg/gui/gui/src/TGFrame.cxx:1430; #10 0x00007fd6d64b9a6c in TTreeViewer::TTreeViewer (this=0x56036dc34a10, tree=0x56036d05df80) at ../../../root_dbg/tree/treeviewer/src/TTreeViewer.cxx:349; #11 0x00007fd6d809e059 in ?? (); #12 0x000056036c1be340 in ?? (); #13 0x000056036c1be340 in ?? (); #14 0x000056036dc34a10 in ?? (); #15 0x000056036dc34a10 in ?? (); #16 0x00007fff775fd220 in ?? (); #17 0x00007fff775fd3d8 in ?? (); #18 0x00007fff775fdc20 in ?? (); #19 0x00007fff775fd3f8 in ?? (); #20 0x00000001775fd3e0 in ?? (); #21 0x0000000000000000 in ?? (); ```. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. The crash is due to a nullptr dereference in `TGCompositeFrame::TGCompositeFrame` (`fParent` is null), which in turn is caused by a failed check in `TGWindow::TGWindow` at `TGWindow.cxx:54`:. ```; if (!p && gClient) {; p = gClient->GetRoot();; }; ```. In the condition above, if the user created no `TApplication`, `gClient` is false-y. Rather than crash and burning, we could detect the situation and produce a helpful error message. ### Additional context; <!--; Add any other context about the problem here.; -->. At least [one user](https://root-forum.cern.ch/t/break-segmentation-violation-for-a-compiled-program/42022/12) could have used a better error message :smile:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6743:1941,message,message,1941,https://root.cern,https://github.com/root-project/root/issues/6743,2,['message'],['message']
Integrability," a886646; # Apply unrelated patch (see below); sed 's/^ \([^s].*\.cxx\)/ src\/\1/g' hist/hist/CMakeLists.txt; # Configure and build (took 10 hours); cmake -Broot-build -Sroot -Dasimage=OFF -Dclad=OFF -Ddataframe=OFF -Ddavix=OFF -Dfftw3=OFF -Dgdml=off -Dhttp=off -Dimt=OFF -Dmathmore=OFF -Dminuit2=OFF -Dmlp=OFF -Dopengl=OFF -Dpyroot=OFF -Dpythia8=OFF -Droofit=OFF -Dwebgui=OFF -Droot7=OFF -Dspectrum=OFF -Dsqlite=OFF -Dssl=OFF -Dtmva=OFF -Dtmva-cpu=OFF -Dvdt=OFF -Dx11=OFF -Dxml=OFF -Dxrootd=OFF -DCMAKE_INSTALL_PREFIX=root-install; make -Croot-build -j7 install; # Reset ROOT to next commit, which introduced the problem ; git -C root reset --hard e9d264e; # Apply unrelated patch (see below); sed 's/^ \([^s].*\.cxx\)/ src\/\1/g' hist/hist/CMakeLists.txt; make -Croot-build -j7 install; # This last command fails; ```. ### ROOT version. https://github.com/root-project/root/commit/e9d264eb545be5f7c3df9733fe8adb9d4dac1163, i.e. `v6-27-02~243^2~17`. ### Installation method. git clone, cmake, make. ### Operating system. Linux Ubuntu 23.04. ### Additional context. ## Why would you want to do that???. A valid question is why one would want to build ROOT inside a qemu/docker environment where a foreign architecture is emulated? Well, just for this PR in fact, to make it self-contained and (somewhat) debuggable. You can also build a container natively on ARM, upload to docker, and atempt to run ROOT inside that container on a qemu/docker arm64 emulation, with the same results. ## Still, why would you want to do that???. We have provided ARM containers for our users at the Electron-Ion Collider for a while now. In the absence of ARM nodes on our container build cluster, we build these using emulation. Aside from a rare major dependency recompile, this works well enough. As of ROOT v6.28 we have had to stop providing ARM images for our users because the C++20 feature of the upgrade was more important than the continued ARM support. Nevertheless, we would like to bring back ARM support.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13845:5722,depend,dependency,5722,https://root.cern,https://github.com/root-project/root/issues/13845,1,['depend'],['dependency']
Integrability," and execute function [file](w/o extension); Xk [file] : keep [file] it already loaded else load it. and execute function [file](w/o extension); E <[file]>: open editor and evaluate {statements} in the file; Load/Unload: L [file] : load [file]; Lk [file] : keep [file] if already loaded, else load it; La [file] : reload all files loaded after [file]; U [file] : unload [file]; C [1|0] : copy source to $TMPDIR (on/off); undo : undo previous declarations; lang : local language (EUC,SJIS,EUROPEAN,UNKNOWN); preproc : toggle preprocessing of interpreted files; Monitor: g <[var]> : list global variable; l <[var]> : list local variable; proto <[scope]::>[func] : show function prototype; class <[name]> : show class definition (one level); Class <[name]> : show class definition (all level); typedef <name> : show typedefs; function : show interpreted functions; macro : show macro functions; template : show templates; include : show include paths; file : show loaded files; where : show current file position; security : show security level; refcount : reference count control on/off; garbage : show garbage collection buffer; Garbage : Do garbage collection; cover [file] : save trace coverage; return [val] : return undefined symbol value; Run: S : step over function/loop; s : step into function/loop; i : ignore and step over; c <[line]>: continue <to [line]>; e : step out from function; f [file] : select file to debug; b [line] : set break point; db [line] : delete break point; a [assert]: break only if assertion is true; O [0~4] : Set bytecode compiler mode; debug : bytecode status display on/off; asmstep : bytecode step mode on/off; status : show bytecode exec flags; dasm : disassembler; except : toggle exception catching; Quit: q : quit cint; qqq : quit cint - mandatory; qqqqq : exit process immediately; qqqqqqq : abort process; save : call emergency routine to save important data. ROOT special commands.; ===========================================================================",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10191:5190,rout,routine,5190,https://root.cern,https://github.com/root-project/root/issues/10191,1,['rout'],['routine']
Integrability," bug. When running the tests after compiling root 6.24.00 many of the root7 tests fail:; ```; The following tests FAILED:; 	972 - tutorial-v7-concurrentfill.cxx (Failed); 	973 - tutorial-v7-draw.cxx (Failed); 	975 - tutorial-v7-draw_frame.cxx (Failed); 	976 - tutorial-v7-draw_legend.cxx (Failed); 	977 - tutorial-v7-draw_mt.cxx (Failed); 	979 - tutorial-v7-draw_rh1.cxx (Failed); 	980 - tutorial-v7-draw_rh1_large.cxx (Failed); 	981 - tutorial-v7-draw_rh2.cxx (Failed); 	982 - tutorial-v7-draw_rh2_colz.cxx (Failed); 	983 - tutorial-v7-draw_rh2_large.cxx (Failed); 	984 - tutorial-v7-draw_rh3.cxx (Failed); 	985 - tutorial-v7-draw_rh3_large.cxx (Failed); 	986 - tutorial-v7-draw_subpads.cxx (Failed); 	989 - tutorial-v7-histops.cxx (Failed); 	996 - tutorial-v7-perf.cxx (Failed); 	997 - tutorial-v7-perfcomp.cxx (Failed); 	998 - tutorial-v7-simple.cxx (Failed); Errors while running CTest; ```; The error is the same for all of them:; ```; 973/1121 Test #972: tutorial-v7-concurrentfill.cxx ......................................***Failed 3.25 sec; Processing /builddir/build/BUILD/root-6.24.00/tutorials/v7/concurrentfill.cxx...; root.exe: /builddir/build/BUILD/root-6.24.00/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReaderDecl.cpp:976: void clang::ASTDeclReader::VisitFunctionDecl(clang::FunctionDecl*): Assertion `Reader.getContext().getLangOpts().Modules && ""already deserialized this template specialization""' failed.; CMake Error at /builddir/build/BUILD/root-6.24.00/x86_64-redhat-linux-gnu/RootTestDriver.cmake:237 (message):; error code: Subprocess aborted; ```; This happens both with gcc 10 on Fedora 33 (defaults to C++ 14) and gcc 11 on Fedora 34 (defaults to C++ 17). ### Expected behavior; Successful tests. ### To Reproduce; Steps to reproduce the behavior:; 1. Build root with -Droot7:BOOL=ON; 2. Run make test. ### Setup; 1. ROOT version: 6.24.00; 2. Operating system: Fedora Linux 33 and 34; 3. Failures during ""make test"" run during RPM package build (%check section)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8073:1553,message,message,1553,https://root.cern,https://github.com/root-project/root/issues/8073,1,['message'],['message']
Integrability," by 0x498B90B: _PyEval_EvalFrameDefault.cold (generated_cases.c.h:256); ==2728568== by 0x4AE8B35: PyEval_EvalCode (ceval.c:578); ==2728568== by 0x4B0EDB9: run_eval_code_obj (pythonrun.c:1722); ==2728568== by 0x4B0947D: run_mod (pythonrun.c:1743); ==2728568== by 0x4B2D492: pyrun_file (pythonrun.c:1643); ==2728568== by 0x4B2C689: _PyRun_SimpleFileObject (pythonrun.c:433); ==2728568== by 0x4B2C3BE: _PyRun_AnyFileObject (pythonrun.c:78); ==2728568== by 0x4B1B291: UnknownInlinedFun (main.c:360); ==2728568== by 0x4B1B291: UnknownInlinedFun (main.c:379); ==2728568== by 0x4B1B291: UnknownInlinedFun (main.c:629); ==2728568== by 0x4B1B291: Py_RunMain (main.c:709); ==2728568== by 0x4AD100B: Py_BytesMain (main.c:763); ==2728568== by 0x4EE3149: (below main) (libc_start_call_main.h:58); ==2728568== Address 0x1d0d4290 is 0 bytes inside a block of size 1 alloc'd; ==2728568== at 0x4842F95: operator new(unsigned long) (vg_replace_malloc.c:483); ==2728568== by 0x3735A021: ???; ==2728568== by 0x13803C9D: WrapperCall(long, unsigned long, void*, void*, void*) (clingwrapper.cxx:802); ==2728568== by 0x138042CD: Cppyy::CallConstructor(long, unsigned long, unsigned long, void*) (clingwrapper.cxx:895); ==2728568== by 0x317DEB68: GILCallConstructor(long, unsigned long, CPyCppyy::CallContext*) (Executors.cxx:99); ==2728568== by 0x317E2622: CPyCppyy::(anonymous namespace)::ConstructorExecutor::Execute(long, void*, CPyCppyy::CallContext*) (Executors.cxx:767); ==2728568== by 0x317BBCB5: CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (CPPMethod.cxx:123); ==2728568== by 0x317BC401: CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (CPPMethod.cxx:203); ==2728568== by 0x317BB389: CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (CPPMethod.cxx:956); ==2728568== by 0x317A99C7: CPyCppyy::CPPConstructor::Call(CPyCppyy::CPPInstance*&, _object* const*, unsigned long, _object*, CPyCppyy::CallContext*) (CPPConstructor.cxx:133); ```. See also the ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16014:1713,Wrap,WrapperCall,1713,https://root.cern,https://github.com/root-project/root/pull/16014,1,['Wrap'],['WrapperCall']
Integrability," can be used internally by `RooMinimizer` to speed up fitting with `migrad`. The way to use them is to use the new `RooMinimizer` constructor that takes a (pointer to a) `RooAbsL` likelihood class that was introduced in previous PR #8700. This PR is the seventh and final part of a split and clean-up of #8294. ## Changes or fixes:; - Adds `LikelihoodJob` and `LikelihoodGradientJob` under the `RooFit::TestStatistics` namespace.; - Adds the `LikelihoodGradientJob` test case, which also covers the rest of the `TestStatistics` framework, as promised in https://github.com/root-project/root/pull/8700#issue-947741252.; - Adds two `KahanSum` constructors that allow for initialization of the full internal state. This is necessary for serializing and rematerializing `KahanSum`s so they can be sent over ZeroMQ sockets.; - `RooMinimizer` templated constructors and create factory functions were removed. These are replaced with enum class flags that allow the user to choose the type of `RooAbsMinimizerFcn` (this was already in place) and the `Likelihood(Gradient)Wrapper` implementations to use, i.e. the classes introduced in this PR. Similar changes were made in `MinuitFcnGrad`, which is now also template-free.; - `RooMinimizer`'s (now) two constructors use two helper functions now to avoid code duplication.; - There were some mistakes in the build setup of `RooFitZMQ` and `RooFit::MultiProcess` that only came to light now when building these classes that depend on `RooFit::MultiProcess`. These are fixed.; - A few functions had to be added to `LikelihoodGradientWrapper` and `MinuitFcnGrad` for passing along previous gradient, second derivative and step size information from Minuit2 to RooFit and back, i.e. using the functionality introduced in #8694. ## Checklist:. - [x] tested changes locally; - [x] update the docs (if necessary); - [x] unify copyright/license headers with previous commits; - [x] includes: correct order (matching header, RooFit, ROOT, std) and ROOT includes in quo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9349:1332,Wrap,Wrapper,1332,https://root.cern,https://github.com/root-project/root/pull/9349,1,['Wrap'],['Wrapper']
Integrability," cbShape(""cb2"", ""cb2"", x, x0, sigma, alpha, n);. // This one is not exact, and it fact should not be implemented.; // It is unnecessary because it forwards to the generator of the underlying Pdf; RooBinSamplingPdf binSamplingPdf(""binSamplingPdf"", ""binSamplingPdf"", x, crystalBall);. RooDataHist templHist{""templHist"", ""templHist"", x};; templHist.set(x.getBin(), 100.0, -1.0);. RooDataSet templData{""templData"", ""templData"", x};; for (int i = 0; i < x.numBins(); ++i) {; x.setBin(i);; templData.add(x);; }; x.setVal(2.5);. // no interpolation; RooHistFunc histFunc{""histFunc"", ""histFunc"", x, templHist, 0};; RooHistPdf histPdf{""histPdf"", ""histPdf"", x, templHist, 0};. RooWrapperPdf wrapperPdf{""wrapperPdf"", ""wrapperPdf"", histFunc};. RooKeysPdf keysPdf{""keysPdf"", ""keysPdf"", x, templData};. RooArgSet normSet0{}; // check empty normalization set; RooArgSet normSet1{x}; // check ""usual"" normalization set; RooArgSet normSet2{x, y}; // it should also handle extra disconnected observables. // init caches; wrapperPdf.getVal(normSet1);. auto test = [&](RooAbsReal const &func, RooArgSet const &nset) {; int maxValCode = func.getMaxVal(nset);; double maxVal = NAN;; if (maxValCode != 0); maxVal = func.maxVal(maxValCode);; std::cout << func.ClassName() << nset << "": "" << func.getVal(nset) << "" "" << maxVal << std::endl;; };. for (auto &normSet : {normSet0, normSet1, normSet2}) {; std::cout << std::endl;. test(histFunc, normSet);; test(histPdf, normSet);; test(keysPdf, normSet);; test(crystalBall, normSet);; test(cbShape, normSet);; test(wrapperPdf, normSet);; test(binSamplingPdf, normSet);; // still missing: RooFFTConvPdf, RooSPHarmonic, and RooLegendre; }; ```. The output is:; ```; RooHistFunc(): 100 nan; RooHistPdf(): 500 nan; RooKeysPdf(): 0.201299 nan; RooCrystalBall(): 1 nan; RooCBShape(): 1 nan; RooWrapperPdf(): 100 nan; RooBinSamplingPdf(): 0.308511 nan. RooHistFunc(x): 100 105; RooHistPdf(x): 5 105; RooKeysPdf(x): 0.218569 0.205937; RooCrystalBall(x): 9.92564 9.92564; RooCBShape(x): ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12317:1570,wrap,wrapperPdf,1570,https://root.cern,https://github.com/root-project/root/issues/12317,1,['wrap'],['wrapperPdf']
Integrability," commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/root-project/root/network/alerts). </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11863:1567,depend,dependabot,1567,https://root.cern,https://github.com/root-project/root/pull/11863,36,"['Depend', 'depend']","['Dependabot', 'dependabot', 'dependency']"
Integrability," dependency public.; 4483b01b7f [RF] Add initial interface and implementation for code-squashing.; f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer; 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; bf4990c5d4 [RF] Exclude RooHistError from IO; 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; f355c3ced4 [RF] Code-format `testRooDataHist.cxx`; 3fd99f7679 [RF] Enable AD code-gen test for RooFit.; a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext; 1367091202 [RF] Code modernization of RooAbsReal; 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper.; cf88615b6e [RF] Improve code in `MinuitFcnGrad`; 17bac5528b [RF] Code improvements in tests for new TestStatistics; afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations; 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method; 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252); 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`; 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'.; 5964158260 [RF] Add observables as another parameter in RooFuncWrapper.; cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`; 333e857cc6 Add AD based derivatives for RooFuncWrapper.; 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C.; 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit.; f457ca57c",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13295:8677,interface,interface,8677,https://root.cern,https://github.com/root-project/root/pull/13295,1,['interface'],['interface']
Integrability," dependency public.; 4483b01b7f [RF] Add initial interface and implementation for code-squashing.; f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer; 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; bf4990c5d4 [RF] Exclude RooHistError from IO; 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; f355c3ced4 [RF] Code-format `testRooDataHist.cxx`; 3fd99f7679 [RF] Enable AD code-gen test for RooFit.; a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext; 1367091202 [RF] Code modernization of RooAbsReal; 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper.; cf88615b6e [RF] Improve code in `MinuitFcnGrad`; 17bac5528b [RF] Code improvements in tests for new TestStatistics; afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations; 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method; 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252); 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`; 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'.; 5964158260 [RF] Add observables as another parameter in RooFuncWrapper.; cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`; 333e857cc6 Add AD based derivatives for RooFuncWrapper.; 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C.; fe8738ab41 [RF] Make it possible to switch to `ryml` backend after build",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12681:3387,interface,interface,3387,https://root.cern,https://github.com/root-project/root/pull/12681,8,['interface'],['interface']
Integrability," every computer; program, no matter how complicated, executes a sequence of elementary; arithmetic operations (addition, subtraction, multiplication, division, etc.); and elementary functions (exp, log, sin, cos, etc.). By applying the chain; rule repeatedly to these operations, derivatives of arbitrary order can; be computed automatically, accurately to working precision, and using at; most a small constant factor more arithmetic operations than the original; program. AD is an alternative technique to symbolic and numerical differentiation.; These classical methods run into problems: symbolic differentiation leads; to inefficient code (unless done carefully) and faces the difficulty of; converting a computer program into a single expression, while numerical; differentiation can introduce round-off errors in the discretization; process and cancellation. Both classical methods have problems with; calculating higher derivatives, where the complexity and errors increase.; Finally, both classical methods are slow at computing the partial; derivatives of a function with respect to many inputs, as is needed for; gradient-based optimization algorithms. Automatic differentiation solves; all of these problems, at the expense of introducing more software; dependencies. This patch allows ROOT to interoperate with clad. Namely, users can ask; the interpreter to produce a derivative or a gradient to a known function. An illustrative example code for first order derivative:. root [0] #include ""Math/CladDerivator.h""; root [1] double my_pow2(double x) { return x*x; }; root [2] auto derivative_meta_obj = clad::differentiate(my_pow2, /*wrt 1-st argument*/0);; root [3] derivative_meta_obj.dump();; The code is: double my_pow2_darg0(double x) {; return (1. * x + x * 1.);; }; root [5] derivative_meta_obj.execute(1) // no iterations, at the cost of function call.; (double) 2.0000000. Learn more about clad at https://github.com/vgvassilev/clad. Patch by Aleksandr Efremov(@efremale) and me!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2378:1702,depend,dependencies,1702,https://root.cern,https://github.com/root-project/root/pull/2378,1,['depend'],['dependencies']
Integrability," failure:; * Fedora 39; * C++20; * ROOT built in Release mode (-O3); * The test `dataframe-vecops`, which needs to be run via ctest and using gtest infrastructure; * The test being compiled in release mode too. The failure is:; ```; 730/2406 Test #393: gtest-tree-dataframe-test-dataframe-vecops ........................................................***Failed 5.01 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; [==========] Running 4 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 4 tests from RDFAndVecOps; [ RUN ] RDFAndVecOps.ReadStdVectorAsRVec; [ OK ] RDFAndVecOps.ReadStdVectorAsRVec (4678 ms); [ RUN ] RDFAndVecOps.DefineRVec; [ OK ] RDFAndVecOps.DefineRVec (0 ms); [ RUN ] RDFAndVecOps.SnapshotRVec; [ OK ] RDFAndVecOps.SnapshotRVec (6 ms); [ RUN ] RDFAndVecOps.RVecBool; double free or corruption (out); CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ```. And gdb says:; ```; 0 0x00007f25d4eae834 in __pthread_kill_implementation () from /lib64/libc.so.6; 1 0x00007f25d4e5c8ee in raise () from /lib64/libc.so.6; 2 0x00007f25d4e448ff in abort () from /lib64/libc.so.6; 3 0x00007f25d4e457d0 in __libc_message.cold () from /lib64/libc.so.6; 4 0x00007f25d4eb87a5 in malloc_printerr () from /lib64/libc.so.6; 5 0x00007f25d4eba840 in _int_free_merge_chunk () from /lib64/libc.so.6; 6 0x00007f25d4ebd3de in free () from /lib64/libc.so.6; 7 0x00007f25d6c5efa8 in TList::Delete(char const*) () from /github/home/ROOT-CI/build/lib/libCore.so; 8 0x00007f25d6c56566 in THashList::Delete(char const*) () from /github/home/ROOT-CI/build/lib/libCore.so; 9 0x00007f25d67235b5 in TDirectoryFile::Close(char const*) () from /github/home/ROOT-CI/build/lib/libRIO.so; 10 0x00007f25d6741406 in TFile::Close(char const*) () from /github/home/ROOT-CI/build/lib/libRIO.so; 11 0x00000000004324e1 in MakeTreeWithBools(std::__cxx11::basic_string<char, s",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14803:1041,message,message,1041,https://root.cern,https://github.com/root-project/root/pull/14803,1,['message'],['message']
Integrability," file name"" << std::endl;; std::cout << "" -h, --help Print this help message"" << std::endl;; std::cout << "" -v, --verbose Verbose output"" << std::endl;; }. bool verbose = false;; std::string outputFile = ""ntuple.root"";; std::string inputFile;. void debug(const std::string& message); {; if (verbose) {; std::cout << message << std::endl;; }; }. void log(const std::string& message); {; std::cout << message << std::endl;; }. void error(const std::string& message); {; std::cerr << message << std::endl;; exit(1);; }. int main(int argc, char* argv[]); {; // Use getopt_long to parse the command line; // the first positional argument is the input file.; // -o is the output file; // -h is the help message; // -v is the verbose flag; static struct option long_options[] = {; {""output-file"", required_argument, nullptr, 'o'},; {""help"", no_argument, nullptr, 'h'},; {""verbose"", no_argument, nullptr, 'v'},; {nullptr, 0, nullptr, 0}};; int option_index = 0;; while (true) {; int c = getopt_long(argc, argv, ""o:hv"", long_options, &option_index);; // If the help flag is set, print the help message and exit; if (c == 'h') {; print_help();; return 0;; }; // If the verbose flag is set, print the verbose message; else if (c == 'v') {; verbose = true;; }; // If the output file is set, print the output file name; else if (c == 'o') {; outputFile = optarg;. } else if (c == -1) {; break;; } else if (c == '?') {; print_help();; return 1;; } else {; print_help();; return 1;; }; }; if (optind < argc) {; inputFile = argv[optind];; }; debug(""Output file: "" + outputFile);; if (inputFile.empty()) {; error(""Missing input file"");; }; debug(""Input file: "" + inputFile);. // Open the input file using ROOT, iterate over all the TFolders starting with DF_ and; // convert the TTrees inside such folder an RNTuple in the output file in the same folder. TFile* in = TFile::Open(inputFile.c_str(), ""READ"");; if (!in) {; error(""Cannot open input file"");; }; TFile* out = TFile::Open(outputFile.c_str(), ""RECREATE"");; if",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13996:9521,message,message,9521,https://root.cern,https://github.com/root-project/root/issues/13996,3,['message'],['message']
Integrability," guess SrvAuthenticate is defined in DaemonUtils.[h|cxx] and refers to the libSrvAuth !; ```; $ grep srvauthenticate -i -R ../src; ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;; ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);; ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);; ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);; ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate; ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");; ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");; ```. Additionally, https://root.cern/doc/master/authserv_8C.html is not working due to this. Knowing that there are all these ./src/net/net/ useful classes about remote connections.. why is that TSocket is being deprecated ? https://github.com/root-project/root/commit/8ef5d04e0102290cc2457c5a7cc40fc9874fa006 . This is incredibly useful feature.. same for all other basic communication protocol developped in `./net/net/` directory. ```; $ grep srvauthenticate -i -R ../src; ../src/net/net/src/TServerSocket.cxx:TVirtualMutex *gSrvAuthenticateMutex = 0;; ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);; ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);; ../src/net/net/src/TServerSocket.cxx: R__LOCKGUARD2(gSrvAuthenticateMutex);; ../src/net/net/src/TServerSocket.cxx: // Locate SrvAuthenticate; ../src/net/net/src/TServerSocket.cxx: Func_t f = gSystem->DynFindSymbol(srvlib,""SrvAuthenticate"");; ../src/net/net/src/TServerSocket.cxx: Error(""Authenticate"", ""can't find SrvAuthenticate"");; ```. ### Reproducer. https://root.cern/doc/master/authserv_8C.html; https://root.cern/doc/master/authclient_8C.html. ### ROOT version. 2023/08/01. ### Installation method. build form source. ### Operating system. macos. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13387:1396,protocol,protocol,1396,https://root.cern,https://github.com/root-project/root/issues/13387,1,['protocol'],['protocol']
Integrability," in <TInterpreter::AutoParse>: Error parsing payload code for class TUnuranContDist with content:; 151:; 151: #line 1 ""libUnuran dictionary payload""; 151:; 151: #ifndef HAVE_CONFIG_H; 151: #define HAVE_CONFIG_H 1; 151: #endif; 151:; 151: #define _BACKWARD_BACKWARD_WARNING_H; 151: #include ""TUnuran.h""; 151: #include ""TUnuranBaseDist.h""; 151: #include ""TUnuranContDist.h""; 151: #include ""TUnuranDiscrDist.h""; 151: #include ""TUnuranEmpDist.h""; 151: #include ""TUnuranMultiContDist.h""; 151: #include ""TUnuranSampler.h""; 151:; 151: #undef _BACKWARD_BACKWARD_WARNING_H; 151:; 151: Error in <TInterpreter::AutoParse>: Error parsing payload code for class TUnuranDiscrDist with content:; 151:; 151: #line 1 ""libUnuran dictionary payload""; 151:; 151: #ifndef HAVE_CONFIG_H; 151: #define HAVE_CONFIG_H 1; 151: #endif; 151:; 151: #define _BACKWARD_BACKWARD_WARNING_H; 151: #include ""TUnuran.h""; 151: #include ""TUnuranBaseDist.h""; 151: #include ""TUnuranContDist.h""; 151: #include ""TUnuranDiscrDist.h""; 151: #include ""TUnuranEmpDist.h""; 151: #include ""TUnuranMultiContDist.h""; 151: #include ""TUnuranSampler.h""; 151:; 151: #undef _BACKWARD_BACKWARD_WARNING_H; 151:; 151: Error in <TInterpreter::AutoParse>: Error parsing payload code for class TUnuranEmpDist with content:; 151:; 151: #line 1 ""libUnuran dictionary payload""; 151:; 151: #ifndef HAVE_CONFIG_H; 151: #define HAVE_CONFIG_H 1; 151: #endif; 151:; 151: #define _BACKWARD_BACKWARD_WARNING_H; 151: #include ""TUnuran.h""; 151: #include ""TUnuranBaseDist.h""; 151: #include ""TUnuranContDist.h""; 151: #include ""TUnuranDiscrDist.h""; 151: #include ""TUnuranEmpDist.h""; 151: #include ""TUnuranMultiContDist.h""; 151: #include ""TUnuranSampler.h""; 151:; 151: #undef _BACKWARD_BACKWARD_WARNING_H; 151:; 151: CMake Error at C:/Users/sftnight/git/master/cmake/modules/RootTestDriver.cmake:232 (message):; 151: error code: 1; 151:; 151:; 2/2 Test #151: test-stresshistofit-interpreted ...***Failed Error regular expression found in output. Regex=[FAILED|Error in] 10.55 sec",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3312:4072,message,message,4072,https://root.cern,https://github.com/root-project/root/pull/3312,1,['message'],['message']
Integrability," issues. - [x] Checked for duplicates. ### Description. The latest master of ROOT doesn't compile with pytorch 2.0.1 installed. The error message is the following:; ```; Torch Version: 2.0.1; RecursiveScriptModule(; original_name=Model; (fc1): RecursiveScriptModule(original_name=Linear); (fc2): RecursiveScriptModule(original_name=Linear); (relu): RecursiveScriptModule(original_name=ReLU); (sigmoid): RecursiveScriptModule(original_name=Sigmoid); ); RecursiveScriptModule(; original_name=Model; (fc1): RecursiveScriptModule(original_name=Linear); (fc2): RecursiveScriptModule(original_name=Linear); (relu): RecursiveScriptModule(original_name=ReLU); (sigmoid): RecursiveScriptModule(original_name=Sigmoid); ); <string>:1: FutureWarning: 'torch.onnx.symbolic_helper._set_onnx_shape_inference' is deprecated in version 1.13 and will be removed in 2.0. Please remove its usage and avoid setting internal variables directly. Python error message:; Traceback (most recent call last):; File ""<string>"", line 6, in <module>; File ""<string>"", line 6, in <dictcomp>; TypeError: 'torch._C.Node' object is not subscriptable; terminate called after throwing an instance of 'std::runtime_error'; what(): ; Failed to run python code: for i in graph[0].nodes():; globals().update(locals()); nodeData={}; nodeData['nodeType']=i.kind(); nodeAttributeNames=[x for x in i.attributeNames()]; nodeAttributes={j:i[j] for j in nodeAttributeNames}; nodeData['nodeAttributes']=nodeAttributes; nodeInputs=[x for x in i.inputs()]; nodeInputNames=[x.debugName() for x in nodeInputs]; nodeData['nodeInputs']=nodeInputNames; nodeOutputs=[x for x in i.outputs()]; nodeOutputNames=[x.debugName() for x in nodeOutputs]; nodeData['nodeOutputs']=nodeOutputNames; nodeDType=[x.type().scalarType() for x in nodeOutputs]; nodeData['nodeDType']=nodeDType; modelData.append(nodeData); Subprocess aborted; make[2]: *** [tmva/pymva/test/CMakeFiles/SofieCompileModels_PyTorch.dir/build.make:70: SofieCompileModels_PyTorch] Error 1; make[1]: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13155:955,message,message,955,https://root.cern,https://github.com/root-project/root/issues/13155,1,['message'],['message']
Integrability, logger; tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service; tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger; tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! mes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9792:2042,message,message,2042,https://root.cern,https://github.com/root-project/root/issues/9792,1,['message'],['message']
Integrability, message logger; tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service; tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogge,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9792:1341,message,message,1341,https://root.cern,https://github.com/root-project/root/issues/9792,1,['message'],['message']
Integrability," need to be rebased anyway), but as a way to get a preliminary review of this code. Purpose: HistFactory and RooWorkspace should be able to import and export their contents from and to text files, using a common JSON/YAML syntax. Method: The code has been written in such a way as to. - Minimize the amount of changes to existing code; - Make it as easy as possible for users to add new serializers/deserializers for new or existing classes; - Provide a clean interface as much as possible. Dependencies: The code requires a JSON/YML parser and emitter.; ROOT already includes the nlohmann JSON module, which is used as a default for the interface.; However, for development, I have been using the rapidyml package, which also supports reading and writing of YML files. As the code for this already exists, I have kept this in as an optional dependency. When available, it replaces the nlohmann interface and then also provides YML reading and writing capabilities, while the default is limited to JSON. Please review:. - general coding style; - packaging: Should these new files continue to live in RooStats, or should they go to a new subpackage of RooFit?; - code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting?; - build system: Is the way I encoded the optional dependency acceptable?; - class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant?. Please don't review yet:; - lack of functionality - more things will be added over time; - individual violations of the style guide (e.g. missing spaces or newlines) . Please specifically suggest where documenation should be added!; Does every function need a docstring, or just the ones announced in header files? Do these docstrings need to exist also for the Interface class added, and also for the implementations of that, or only for the RooFit-side of the code?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5151:1535,depend,dependency,1535,https://root.cern,https://github.com/root-project/root/pull/5151,2,"['Interface', 'depend']","['Interface', 'dependency']"
Integrability," not found; ```. From this I conclude that those tests (in particular `TMVA_SOFIE_RDataFrame.C` and `tutorials/tmva/TMVA_SOFIE_GNN_Application.C`) are missing a dependencies that failed in the first run. Note `tutorial-tmva-TMVA_SOFIE_Keras_HiggsModel` and `tutorial-tmva-TMVA_SOFIE_RDataFrame-py` are indeed needing `TMVA_Higgs_Classification.C` to run first (it says so in the output! :) ). `tutorial-tmva-TMVA_SOFIE_RSofieReader` is asking for `Higgs_trained_model.h5`. `gtest-tmva-pymva-test-TestRModelParserKeras` is missing the symbol `sgemm_` (see below). However when rerunning (where this time somehow there was no resource related failures), I still got several failures:; ```; 346:gtest-tmva-pymva-test-TestRModelParserPyTorch; 350:gtest-tmva-pymva-test-TestRModelParserKeras; 984:tutorial-tmva-TMVA_SOFIE_GNN_Application; 988:tutorial-tmva-TMVA_SOFIE_RDataFrame; 990:tutorial-tmva-TMVA_SOFIE_RSofieReader; ```; all due to:; ```; IncrementalExecutor::executeFunction: symbol 'sgemm_' unresolved while linking [cling interface function]!; ```; or both; ```; IncrementalExecutor::executeFunction: symbol 'saxpy_' unresolved while linking [cling interface function]!; IncrementalExecutor::executeFunction: symbol 'sgemm_' unresolved while linking [cling interface function]!; ```; Which may be due to either a badly formed result of the failing run (1) or due to an external package that does not have the correct version number?. ### Reproducer. ```; ctest -j 32 # and get lots of out of resource failures; ctest --rerun-failed; ctest -j 32; ```. ### ROOT version. master	. ### Installation method. hand build. ### Operating system. Alma9. ### Additional context. ```; jupyter-pcanal-rootdevel:quick-devel pcanal$ bin/root-config --features; cxx17 asimage builtin_clang builtin_cling builtin_gtest builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_tbb builtin_vdt builtin_xxhash builtin_zlib builtin_zstd clad dataframe davix gdml http imt pyroot roofit root",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16553:2738,interface,interface,2738,https://root.cern,https://github.com/root-project/root/issues/16553,3,['interface'],['interface']
Integrability," notice that for most types, the listed values are the minimum/maximum value that type can take, for example:; ```const UInt_t kMaxUInt = UInt_t(~0);```; (NB: on a system where ``sizeof(int)==2``, the compiler is (afaik) free to interpret 0 as int, whose complement will then be disappointingly small.); Under this interpretation, I want to cast doubt on ; ```; const Int_t kMaxUChar = 256;; const Int_t kMaxUShort = 65534;; ```; While there were some promising publications of computer scientists claiming to have succeeded in storing 256 in an unsigned char, later attempts to reproduce that research found that the bit sequence was indistinguishable from zero. The general consensus among computer scientists today is that the highest value which can be stored in a uint8_t is in fact 255. On the other hand, a few years later initially doubtful claims that 65535 could be stored in an unsigned short *were* replicated. Today, big tech (e.g. GAFAM) routinely store that value in their 16 bit numbers and even smaller startups are picking up on the trend. ``</sarcasm>``. (Also, while the kMaxUShort error is rendered harmless by the bitshift in kMaxShort, the kMaxUChar error means that kMinChar and kMaxChar are wrong. In fact, Char_t(kMinChar)>Char_t(kMaxChar) is true. However, nine out of ten math professors agree that the maximum of a set of values should be at least as large as the minimum of that set. ``[[citation needed]]``). These issues have been present in the codebase since at least ROOT5, so fixing them would break backwards compatibility. My suggestion is a different one. C++14 introduces an attribute called ``[[deprecated]]``. ```; [[deprecated(""kMaxUChar has a misleading value and should not be used.""; "" Please use std::numeric_limits<unsigned char>::max()"")]] ; const Int_t kMaxUChar = 256;; ```. And while we are at it, let's be honest: Most users are already somewhat aware that there is a C++ ecosystem outside the safe-ish space that is ROOT. The fallout of vendor-spe",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12208:1917,rout,routinely,1917,https://root.cern,https://github.com/root-project/root/issues/12208,1,['rout'],['routinely']
Integrability," objects in an invalid state. See for; example this code:. ```c++; RooRealVar x(""x"", ""x"", -10, 10);; RooRealVar mean(""mean"", ""mean of gaussian"", 1, -10, 10);; RooRealVar sigma(""sigma"", ""width of gaussian"", 1, 0.1, 10);. RooGaussian gauss(""gauss"", ""gaussian PDF"", x, mean, sigma);. RooRealVar mean2(mean);. gauss.replaceServer(mean, mean2, true, false);; gauss.Print(""v"");. std::cout << ""x : "" << &gauss.getX() << std::endl;; std::cout << ""mean : "" << &gauss.getMean() << std::endl;; std::cout << ""sigma: "" << &gauss.getSigma() << std::endl;; ```. Here, the proxy for `mean` will still point to the original `mean`, but; the server was redirected to the copy `mean2`. This is dangerous, and; desyncing of the proxy and server list are actually the underlying; reason for a set of RooFit problems. The safter `RooAbsArg::redirectServers()` should always be used,; becauese that one is also updating the proxies. Therefore, the; `replaceServer()` interface is now marked as dangerous everywhere; possible: in a printout when you use it, in the docs, and with the; `R__SUGGEST_ALTERNATIVE` macro. Internally, the `replaceServer()` was also used in `redirectServers()`.; But this was also causing problems: `replaceServer()` always adds the; new server at the end of the server list, which means the list gets; reordered. This can confuse usercode that rely on the server list being; ordered (yes, that's not a good idea anyway, but there are many codes; that do this). This reordering can also be seein in the example code; above. Therefore, the `redirectServers()` function is now rewritten to replace; the server without changing its position in the server list. This also; means that the original server list doesn't need to be copied, as not; iterators are invalidated. Furthermore, the `redirectServers()` is more optimized now. Before, it; redundantly figured out whether a server was a value and/or shape; server. Now, this is figured out only once when removing the original; server from the clien",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12040:1043,interface,interface,1043,https://root.cern,https://github.com/root-project/root/pull/12040,1,['interface'],['interface']
Integrability," of a split and clean-up of #8294. ## Changes or fixes:; - Adds `LikelihoodJob` and `LikelihoodGradientJob` under the `RooFit::TestStatistics` namespace.; - Adds the `LikelihoodGradientJob` test case, which also covers the rest of the `TestStatistics` framework, as promised in https://github.com/root-project/root/pull/8700#issue-947741252.; - Adds two `KahanSum` constructors that allow for initialization of the full internal state. This is necessary for serializing and rematerializing `KahanSum`s so they can be sent over ZeroMQ sockets.; - `RooMinimizer` templated constructors and create factory functions were removed. These are replaced with enum class flags that allow the user to choose the type of `RooAbsMinimizerFcn` (this was already in place) and the `Likelihood(Gradient)Wrapper` implementations to use, i.e. the classes introduced in this PR. Similar changes were made in `MinuitFcnGrad`, which is now also template-free.; - `RooMinimizer`'s (now) two constructors use two helper functions now to avoid code duplication.; - There were some mistakes in the build setup of `RooFitZMQ` and `RooFit::MultiProcess` that only came to light now when building these classes that depend on `RooFit::MultiProcess`. These are fixed.; - A few functions had to be added to `LikelihoodGradientWrapper` and `MinuitFcnGrad` for passing along previous gradient, second derivative and step size information from Minuit2 to RooFit and back, i.e. using the functionality introduced in #8694. ## Checklist:. - [x] tested changes locally; - [x] update the docs (if necessary); - [x] unify copyright/license headers with previous commits; - [x] includes: correct order (matching header, RooFit, ROOT, std) and ROOT includes in quotation marks; - [x] refactor member names: underscore suffix; - [x] remove commented out code and TODOs and other junk; - [x] clang-tidy up; - [ ] rebase into two commits (one for `KahanSum` and one for the rest); - [x] make Readme.md for developers with some examples to run",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9349:1733,depend,depend,1733,https://root.cern,https://github.com/root-project/root/pull/9349,1,['depend'],['depend']
Integrability," of code duplication that would only get worse with the further parametrzation. To clear this up, we could implement one modern and fully parametrized crystal ball shape with a clear name like **RooCrystalBall** that can serve as a drop-in replacement for both RooCBShape and RooDSCBShape as well as cover the usecase of the asymmetric Gaussian core. Such a class and a rigurous test is implemented in https://github.com/root-project/root/pull/7257, which can serve as a starting point for this development. In addition to the commit suggested in the PR, there are a few more things that could be done to make RooCrystalBall the new standard:. * Write documentation.; * Implement batch computation interface.; * Maybe even deprecate the old shapes somehow. They probably need to be kept for backwards compatibility, but they could be put in RooFitMore and the user gets a nudge to use the new shape if it is used. Probably we should also look at the crystal ball implementation in Higgs combine to see if we can take some of the improvements upstream:; * [RooDoubleCBFast.h](https://github.com/cms-analysis/HiggsAnalysis-CombinedLimit/blob/102x/interface/RooDoubleCBFast.h); * [RooDoubleCBFast.cc](https://github.com/cms-analysis/HiggsAnalysis-CombinedLimit/blob/102x/src/RooDoubleCBFast.cc). More things to consider:; * The RooDSCB shape was **only merged last summer in https://github.com/root-project/root/pull/6172 and it has not made it into any release so far!** So we have the opportunity to safely change it/replace it for 6.24 without disturbing users of previous ROOT versions.; * Some people also use a custom [RooSDSCBShape](https://github.com/root-project/root/issues/7249). It presumably stands for ""single double sided crystal ball"" and it has just a non-Gaussian tail on the **right** (compared to RooCBShape which has it on the left). So the single-tail constructor of the new RooCrystalBall also takes an additional flag to indicate where the tail is, with the left side as default.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7258:2269,interface,interface,2269,https://root.cern,https://github.com/root-project/root/issues/7258,1,['interface'],['interface']
Integrability," of what you expected to happen.; -->. Similar behaviour for `python2` and `python3` is expected ; b ut it works for `python2` and fails for `python3`; ; ## To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. to reproduce see this very simple gist ; https://gist.github.com/VanyaBelyaev/278074969f2f940f180885be35f04db9 . It has been tested with different LCG releases from LCG_94 to LCG_97a; and it always works for `pytjon2` and fails for `python3`. for `python3` one gets an error; ```; Traceback (most recent call last):; File ""./test_dill.py"", line 13, in <module>; hh = dill.loads ( dill.dumps ( h ) ); File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 294, in dumps; dump(obj, file, protocol, byref, fmode, recurse)#, strictio); File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 287, in dump; pik.dump(obj); File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 437, in dump; self.save(obj); File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 549, in save; self.save_reduce(obj=obj, *rv); File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 637, in save_reduce; save(func); File ""/cvmfs/sft.cern.ch/lcg/releases/LCG_97python3/Python/3.7.6/x86_64-centos7-gcc9-opt/lib/python3.7/pickle.py"", line 504, in save; f(self, obj) # Call unbound method with explicit self; File ""/cvmfs/sft.cern.ch/lcg/views/LCG_97python3/x86_64-centos7-gcc9-opt/lib/python3.7/site-packages/dill/_dill.py"", line 1064, in save_builtin_method; pick",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6370:1620,protocol,protocol,1620,https://root.cern,https://github.com/root-project/root/issues/6370,1,['protocol'],['protocol']
Integrability," provide as fast access as possible in the case where the user is using relatively simple datatypes and the objects can be deserialized ""non-destructively"" (i.e., in-place in the existing memory buffers). For example - primitives and lists of primitives are supported; anything needing references are not. Despite the fact many of ROOT's very useful deserialization features are not supported, the limited feature set covers a range of analysis use cases. In particular, the current version of CMS's proposed NanoAOD format can be read solely via bulk APIs. Where the bulk IO APIs are applicable, we see an order-magnitude improvement in event rates for some use cases (including CMS NanoAOD). The speedup becomes more noticeable as the data read from the event is smaller (meaning the traditional ROOT IO overheads are larger). Somewhere in the neighborhood of 5KB objects read per event is the point where bulk IO APIs should be noticeably faster. This PR provides three interfaces:. * A raw, low-level interface. The user can invoke the bulk IO APIs directly and get a buffer of primitive types, serialized or deserialized. It is not envisioned this is used by users, but by API writers.; * A TTreeReader-like interface, TTreeReaderFast. This is meant to be used by users; it utilizes the low-level interface to retrieve the serialized buffer and templated code will inline the deserializing as part of iterating through the tree. The speed here is gained by the fact only a single pass in memory is needed to deserialize and apply user code, rather than two.; * The intent is that this interface can be extended in the future and used by TDataFrame, provided we can make TDataFrame sufficiently fast.; * A Python-based numpy export interface. This exposes the (possibly serialized) memory directly as numpy arrays, allowing for efficient access to ROOT-serialized objects from the Python language.; * The numpy interface is low-level for Python; we intend to further explore the ideal high-level ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2519:1350,interface,interface,1350,https://root.cern,https://github.com/root-project/root/pull/2519,1,['interface'],['interface']
Integrability," rather than manually having to edit the Doxyfile as indicated in https://root.cern/for_developers/doxygen/#how-to-generate-the-doxygen-documentation. Some flags like:; ```; BUILD_DOCS [OFF]; BUILD_DOCS_CORE [ON]; BUILD_DOCS_GRAF2D [OFF]; BUILD_DOCS_QHP [OFF]; ...; ```; with the configurable QHP generation, see, https://github.com/root-project/root/issues/8781. and then calling:. `doxygen_add_docs(...)` with all the variables correctly set to generate the proper Doxyfile. This requires some (one-time) manual copy work from the actual Doxyfile to the CMakeLists.txt, but it will look clean in the end. This is how ALICE experiment is doing it, take a look:; https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22. Alternatively, one could just modify-on-the-fly the preexisting Doxyfile file as follows:. ```; set(doxyfile_in ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile); set(doxyfile ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile); configure_file(${doxyfile_in} ${doxyfile} @ONLY); add_custom_command(; OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/doxygen.stamp; DEPENDS ${doxyfile} ${HEADER_FILES}; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}; COMMAND sed ""s;INPUT =;INPUT = ${MY_NEW_INPUT_FILES}"" ${doxyfile} | ${DOXYGEN_EXECUTABLE} -; COMMAND cmake -E touch ${CMAKE_CURRENT_BINARY_DIR}/doxygen.stamp; COMMENT ""Generating API documentation with Doxygen""; VERBATIM); ```. ### To Reproduce; https://root.cern/for_developers/doxygen/#how-to-generate-the-doxygen-documentation. ### Setup; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.25/01 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on May 17 2021, 10:49:42 |; | From heads/master@v6-25-01-861-g5ea261143f |; | With |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```. ### Additional context; https://github.com/root-project/root/issues/8781",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8950:1549,DEPEND,DEPENDS,1549,https://root.cern,https://github.com/root-project/root/issues/8950,1,['DEPEND'],['DEPENDS']
Integrability," realfilename = safemalloc( dirname_len+filename_len+1 );; ^; ./asim_afterbase.h:220:24: note: expanded from macro 'safemalloc'; #define safemalloc(s) malloc(s); ^; export.c:159:18: note: include the header <stdlib.h> or explicitly provide a declaration for 'malloc'; ./asim_afterbase.h:220:24: note: expanded from macro 'safemalloc'; #define safemalloc(s) malloc(s); ^; export.c:177:2: error: call to undeclared library function 'free' with type 'void (void *)'; ISO C99 and later do not support implicit function declarations [-Wimplicit-function-declaration]; free( realfilename );; ^; export.c:177:2: note: include the header <stdlib.h> or explicitly provide a declaration for 'free'; export.c:404:11: error: call to undeclared library function 'calloc' with type 'void *(unsigned long, unsigned long)'; ISO C99 and later do not support implicit function declarations [-Wimplicit-function-declaration]; curr = calloc(*size, 1);; ^; export.c:404:11: note: include the header <stdlib.h> or explicitly provide a declaration for 'calloc'; export.c:676:19: error: call to undeclared library function 'realloc' with type 'void *(void *, unsigned long)'; ISO C99 and later do not support implicit function declarations [-Wimplicit-function-declaration]; buff->buffer = realloc( buff->buffer, buff->allocated_size );; ^; export.c:676:19: note: include the header <stdlib.h> or explicitly provide a declaration for 'realloc'; 4 errors generated.; make[3]: *** [Makefile:346: export.o] Error 1; make[3]: *** Waiting for unfinished jobs....; ~. ```. In this PR I'm removing an undef that I think it shouldn't be there; if that variable is not defined then stdlib.h is never included when compiling `export.c` (see [HAVE_STDLIB_H check](https://github.com/root-project/root/blob/master/graf2d/asimage/src/libAfterImage/export.c#L71)). Including `stdlib.h` is what the error message tells you to do and fixes the build for me. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15044:2205,message,message,2205,https://root.cern,https://github.com/root-project/root/pull/15044,1,['message'],['message']
Integrability," regions for batch eval (https://github.com/root-project/root/pull/6401); - [x] Implement getWeightBatch() and getBatches() for RooDataHist; - [ ] Implement getBatch for RooTreeDataStore?; - [ ] Don't clear all intermediate values in batch fits between fit cycles. Only the ones that changed.; - [ ] Disable recalculateCache etc belonging to Lvl2 optimisation.; - [ ] Use batch evaluation & inverted CDF for toys; - [ ] Continue to improve interface with variadic templates; - [ ] Profile and optimise new Batch interface; - [ ] Modernise proxyList member of RooSimultaneous; - [ ] Investigate if retrieving batch data with category states is better for batch evaluations. (vs. splitting composite datasets into components, and creating one NLL for each.); - [ ] Continue modernisation of RooSimultaneous. Requires rebasing and fixing an index bug in https://github.com/hageboeck/root/tree/updateRooSimultaneous; - [ ] Implement analytical integration of RooJohnson.; - [ ] Correct interface of RooAbsData and derived classes to use e.g. `std::size_t` for indexing events. `int` doesn't make sense.; - [ ] Always have a debug version of RooFit around with `-DROOFIT_CHECK_CACHED_VALUES`.; - [ ] Use analytic integrals in RooBinSamplingPdf when available.; - [ ] Check that different integrator settings are honoured in RooBinSamplingPdf.; - [ ] https://sft.its.cern.ch/jira/browse/ROOT-8304; - [ ] Implement evaluateSpan() in classes relevant for HistFactory fits.; - [ ] Throw Gaussian & Poisson constraints into dedicated fast class.; - [ ] Switch on FastEvaluations topic in RooFit message streams, and use it to trace down PDFs that don't implement the faster interface.; - [ ] #7210, slowly augment PDFs with checks of the definition range of parameters. This prevents evaluation errors and can stabilise fits.; - [ ] #7217, pythonisations for RooFit; - [ ] Vectorized generation of events. Unless specialised generator functions are implemented, RooFit employs accept/reject sampling. Since this",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6557:1069,interface,interface,1069,https://root.cern,https://github.com/root-project/root/issues/6557,1,['interface'],['interface']
Integrability," std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, bool> > >::_M_insert_range_unique<const std::pair<const std::__cxx11::basic_string<char>, bool> *>' requested here; { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }; ^; /home/blue/Scratchpad/work/forum_rvec_crash_2/repro_modules_crash.C:2:31: note: in instantiation of member function 'std::map<std::__cxx11::basic_string<char>, bool, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, bool> > >::map' requested here; std::map<std::string, bool> m{{""foo"", true}, {""bar"", false}};; ^; /usr/lib/gcc/x86_64-pc-linux-gnu/11.2.0/../../../../include/c++/11.2.0/bits/stl_tree.h:315:7: note: previous definition is here; operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT; ^; ```. Note 1: A `Release` build seems to work fine. I can reproduce the problem on CentOS 8 Stream with a self-built GCC 11.1.0. When testing with self-built versions of GCC 11.2.0, 10.2.0, and 9.3.0, I get a probably related crash `ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/Decl.cpp:3857: unsigned int clang::FunctionDecl::getODRHash() const: Assertion 'hasODRHash()' failed.` where the `FunctionDecl` is the constructor of `std::_Rb_tree_iterator`. Note 2: The system-default GCC 8.5.0 and a self-built GCC 8.4.0 are both fine. The only ""relevant"" change that I see for `_Rb_tree_iterator` in GCC 9 is the move from (member) `bool operator==` to `friend bool operator==`, which matches the error message quite nicely. Finally, I was able to reproduce the assertion in a Docker container of `ubuntu:latest` (Ubuntu 22.04.4 LTS at the time of writing), after installing; ```; # apt update; # apt upgrade; # apt install --no-install-recommends ca-certificates cmake gcc g++ git libc6-dev libz-dev make ninja-build patch python3 uuid-dev; ```; and then configuring as `cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -Dx11=OFF ../root.src/`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10291:3010,message,message,3010,https://root.cern,https://github.com/root-project/root/issues/10291,1,['message'],['message']
Integrability," such that they are; separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new; object that exposes the full intenal computation graph that is cached by; the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute; graph, and there was also a third pass to figure out dependencies and; normalization sets in the graph, and some more recursive passes the; attach new servers. This all became very compilcated and hard to debug, as the separate; passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general; way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the; newly-proposed function; `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set; is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing; the RooProdPdfs can be implemented in the overload for this function of; the specific class. There is even an overload for the RooSimultaneous; now, which contains all the logic of making the RooSimultaenous ready; for the NLL creation. There are still some rough edges in the new interface, but it is already; a big step forward that will make debugging much easier because it's now; much less compilcated to understand how the computation graph is set up; by the BatchMode. Also, this makes the speed of NLL creation with the BatchMode on par; with the speed of `createNLL()` without BatchMode. Finally, this is also the groundwork for some future RooFit; developments, like the analytical convolution support for the GPU. To; implement this, it will also be beneficial to compile the analytical; convolution classes for a given normalization set, which can now be done; in an easy modular way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12079:1794,interface,interface,1794,https://root.cern,https://github.com/root-project/root/pull/12079,1,['interface'],['interface']
Integrability," the above-mentioned; headers. In more detail:; - Replace RooCatType by an integer.; - Replace names saved in each row of dataset with RooCatType by a map in; RooAbsCategory that maps state names to numbers. This saves 64 bytes; + the size of TObject for each event, and makes loading strings in each; event unnecessary.; - Provide legacy iterator for iterating through states instances of; RooCatType, which will be created on the fly.; - Make RooVectorDataStore store integers instead of RooCatType instances.; - With this, also reduce the amount of unnecessary members in RooVectorDataStore.; - Outline functions that polluted the header of RooVectorDataStore. Updates for category interfaces:; - Provide new interfaces for categories to work without RooCatType.; - Add bracket operator and constructor arguments to define multiple; category states at once or using category[""stateName""] = 1.; - Mark legacy interfaces exposing RooCatType as deprecated in doxygen.; - Stop including RooCatType when R__LESS_INCLUDES is set.; - Flag legacy interfaces with R__SUGGEST_ALTERNATIVE.; - Don't create RooCatType instances, unless users continue to use; the legacy interface.; - Provide functions hasIndex() and hasLabel() to check validity of; index/label.; - Provide function states() with direct access to map of category names; to category numbers.; - Add functions getCurrent{Index|Label} to make clear that they access; class state. - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since; derived category classes might need to recompute their shapes if one; of their input categories change. Changes in special category classes:; - Consolidate RooMultiCategory and RooSuperCategory. These share almost; all the code, so RooSuperCategory will now use a RooMultiCategory for; state definition and retrieval. The only additional functionality for; RooSuperCategory is that it can assign states to its subcategories.; - Clean up header of RooMappedCategory. Outline as much as possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5502:2186,interface,interfaces,2186,https://root.cern,https://github.com/root-project/root/pull/5502,2,['interface'],"['interface', 'interfaces']"
Integrability," the possibility to ignore the ""really small"" overlaps would cure our problem with a single parameter. Proposed solutions:; - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**).; => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04; - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------; Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased.; However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time).; The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested.; So it could be that something is not so stable in the sequence of random points:; - first volume getting always mostly the same points independent of the number of samples ; - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time to test and confirm it later. ### Reproducer. Files in archive: examine_mcbm_beam_2019_03.geo.root, check_overlaps.C, root_overlaps_samp_thr.patch; [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch; ```diff; diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx; index fc93cc8b82..0e77517729 100644; --- a/geom/geompainter/src/TGeoChecker.cxx; +++ b/geom/geompainter/src/TGeoChecker.cxx; @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoCheck",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14675:2985,depend,depending,2985,https://root.cern,https://github.com/root-project/root/issues/14675,1,['depend'],['depending']
Integrability," their concrete type, or convert the TClonesArray to a type-aware container (for reference: first brought up in https://root-forum.cern.ch/t/reading-tclonesarray-in-jitted-rdf/45784, thanks to @eguiraud for explaining why my naive code did not work). ### Optional: share how it could be improved. The type information is stored, so an automatic conversion could be done. ### To Reproduce. ```python; import ROOT as gbl; gbl.gSystem.Load(""/afs/cern.ch/user/p/piedavid/public/delphes_bamboo/DelphesIO/libDelphesIO.so""); gbl.Electron; f = gbl.TFile.Open(""/afs/cern.ch/user/a/atalierc/public/snowmass/delphes_lhe_file_47_14TeV.lhe.root""); tree = f.Get(""Delphes""); df = gbl.ROOT.RDataFrame(tree); df.Define(""leadElPT"", ""Electron[0]->PT""); ```; where the last statement needs this to work (the typedef to distinguish the column and type name):; ```python; gbl.gInterpreter.Declare(""using delphes_electron = Electron;""); df.Define(""leadElPT1"", ""static_cast<delphes_electron*>(Electron[0])->PT""); ```; but for integration in an analysis framework, converting the container is more convenient. What I came up with is this:; ```C++; #include <TObjArray.h>; #include <ROOT/RVec.hxx>. namespace rdfhelpers {; template<typename OBJ>; ROOT::VecOps::RVec<OBJ*> objArrayToRVec(const TObjArray& arr) {; ROOT::VecOps::RVec<OBJ*> out{reinterpret_cast<OBJ**>(arr.GetObjectRef()), static_cast<std::size_t>(arr.GetEntries())};; auto it = *dynamic_cast<TObjArrayIter*>(arr.MakeIterator());; std::size_t i = 0;; while ( ( i != out.size() ) && ( out[i] == *it ) ) {; it.Next();; ++i;; }; if ( i != out.size() ) { // not equal to contiguous array, copy pointers; it.Reset();; const auto n = out.size();; out = ROOT::VecOps::RVec<OBJ*>();; out.reserve(n);; do {; out.push_back(static_cast<OBJ*>(*it));; } while ( it.Next() );; }; return out;; }; };; ```; then I can add a set of defines and use those containers instead:; ```python; df = df.Define(""myElectrons"", ""rdfhelpers::objArrayToRVec<delphes_electron>(Electron)""); df.Def",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8644:1213,integrat,integration,1213,https://root.cern,https://github.com/root-project/root/issues/8644,1,['integrat'],['integration']
Integrability," to correct the result.; If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; ```python; import ROOT; from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1); y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)); y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both; # still, the issue is visible regardless; D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame; dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integral works); # but not in the y projection; # if the pdf supported 2D integrals, there would be no numerical integrals at all; integral = D2.createIntegral({y}, NormSet = {x,y}); print('Projection is', integral, flush = True). # numerical integral over y2 in the 2D normalization (expected, like above); # numerical integral in the y projection (unwanted); frame = x.frame(); dt.plotOn(frame); D2.plotOn(frame); ```. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; ROOT master from LCG dev3. ### Additional context; <!--; Add any other context about the problem here.; --",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12646:1638,integrat,integrate,1638,https://root.cern,https://github.com/root-project/root/issues/12646,1,['integrat'],['integrate']
Integrability," with nvc++ from NVIDIA's nvhpc project (ver 21.9), as I get runtime segfaults when I build a project with nvc++ and link it against root built with gcc 9.3.0. However, building root fails during cmake (3.21.3) with; ```; CMake Warning at cmake/modules/CheckCompiler.cmake:12 (message):; Unsupported compiler: NVHPC.; Call Stack (most recent call first):; CMakeLists.txt:130 (include). nvc++-Error-Unknown switch: -; CMake Error at cmake/modules/CheckCompiler.cmake:129 (if):; if given arguments:. ""STRGREATER"" ""201703L"". Unknown arguments specified; Call Stack (most recent call first):; CMakeLists.txt:130 (include); ```. so it looks like nvc++ doesn't know about the `__cplusplus` macro. If I hack around this, cmake finishes, but then the compilation dies with ; ```; [ 27%] Building CXX object interpreter/llvm/src/lib/Support/CMakeFiles/LLVMSupport.dir/GraphWriter.cpp.o; ""/bld4/atlas/root/src_6.24/interpreter/llvm/src/lib/Support/ErrorHandling.cpp"", line 116: error: the global scope has no ""write""; ssize_t written = ::write(2, MessageStr.data(), MessageStr.size());; ^; ```; and; ```; NVC++-F-0000-Internal compiler error. get_call_sptr(): indirect call not via LDA/ACON 154 (/bld4/atlas/root/src_6.24/interpreter/llvm/src/lib/DebugInfo/DWARF/DWARFContext.cpp: 193); NVC++/x86-64 Linux 21.9-0: compilation aborted; make[2]: *** [interpreter/llvm/src/lib/DebugInfo/DWARF/CMakeFiles/LLVMDebugInfoDWARF.dir/DWARFContext.cpp.o] Error 2; make[2]: *** Waiting for unfinished jobs....; [ 52%] Built target obj.clang-tblgen; make[1]: *** [interpreter/llvm/src/lib/DebugInfo/DWARF/CMakeFiles/LLVMDebugInfoDWARF.dir/all] Error 2; CMake Error at /bld4/atlas/root/bld.v6-24-06_nvhpc_c17/TBB-prefix/src/TBB-stamp/TBB-build-Release.cmake:49 (message):; Command failed: 2. 'make' 'cpp0x=1' 'CXXFLAGS= -mno-rtm' 'CPLUS=/opt/nvidia/hpc_sdk/Linux_x86_64/21.9/compilers/bin/nvc++' 'CONLY=/opt/nvidia/hpc_sdk/Linux_x86_64/21.9/compilers/bin/nvc' 'LDFLAGS='; ```. Has anyone tried/succeeded building root with n",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9036:1072,Message,MessageStr,1072,https://root.cern,https://github.com/root-project/root/issues/9036,1,['Message'],['MessageStr']
Integrability," write_thnsparse_l(); {; std::unique_ptr<TFile> file{TFile::Open(""hist.root"", ""RECREATE"")};; Int_t bins[2] = {10, 20};; Double_t xmin[2] = {0., -5.};; Double_t xmax[2] = {10., 5.};; THnSparseL hist{""hist"", ""hist"", 2, bins, xmin, xmax};; file->WriteObject(&hist, ""hist"");; }; ```; Try to read it with ROOT 6.32.00 (or `master`):; ```bash; root hist.root -e 'hist'; ```; You'll get this error:; ```txt; Error in <TClingCallFunc::make_ctor_wrapper>: Failed to compile; ==== SOURCE BEGIN ====; __attribute__((used)) extern ""C"" void __ctor_0(void** ret, void* arena, unsigned long nary); {; if (!arena) {; if (!nary) {; *ret = new THnSparseT<TArrayL>;; }; else {; *ret = new THnSparseT<TArrayL>[nary];; }; }; else {; if (!nary) {; *ret = new (arena) THnSparseT<TArrayL>;; }; else {; *ret = new (arena) THnSparseT<TArrayL>[nary];; }; }; }. ==== SOURCE END ====; Error in <TClingCallFunc::ExecDefaultConstructor>: Called with no wrapper, not implemented!; Error in <TClingClassInfo::New()>: Call of default constructor failed to return an object for class: THnSparseT<TArrayL>; Error in <TClass::New>: cannot create object of class THnSparseT<TArrayL>; Error in <TKey::ReadObj>: Cannot create new object of class THnSparseT<TArrayL>; IncrementalExecutor::executeFunction: symbol '_ZN10THnSparseTI7TArrayLE5ClassEv' unresolved while linking [cling interface function]!; You are probably missing the definition of THnSparseT<TArrayL>::Class(); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZN10THnSparseTI7TArrayLE8StreamerER7TBuffer' unresolved while linking [cling interface function]!; You are probably missing the definition of THnSparseT<TArrayL>::Streamer(TBuffer&); Maybe you need to load the corresponding shared library?; ```. ### ROOT version. ROOT 6.32.00 upwards. ### Additional context. Thanks do @philippe554 for catching this! This issue is important for project HighLO because we're using `THnSparseL` as a container for reduced data.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15874:1178,wrap,wrapper,1178,https://root.cern,https://github.com/root-project/root/issues/15874,3,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,![progress](https://github.com/root-project/root/assets/4936580/98687f37-f747-4f2c-ab8a-0f3b0375107d); 1. Introduce progress handlers for browsables objects; 2. Provide progress information when performing `TTree::Draw`; 3. Display such progress on the client side in the warning dialog - while waiting on result of double click; 4. Use `TVirtualMonitoringWriter` handle to hook inside `TTree::Draw` processing loop; 5. Execute long operations (like tree draw) outside of websocket data handler to let receive other messages; 6. Fix cleanup problem of widgets in RBrowser - JSROOT elements were not destroyed properly,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13236:516,message,messages,516,https://root.cern,https://github.com/root-project/root/pull/13236,1,['message'],['messages']
Integrability,"""><code>5b7cd33</code></a> 3.0.6</li>; <li><a href=""https://github.com/isaacs/minimatch/commit/20b4b562830680867feb75f9c635aca08e5c86ff""><code>20b4b56</code></a> [fix] revert all breaking syntax changes</li>; <li><a href=""https://github.com/isaacs/minimatch/commit/2ff038852ec03e85e60e0eb333005c680ac8a543""><code>2ff0388</code></a> document, expose, and test 'partial:true' option</li>; <li>Additional commits viewable in <a href=""https://github.com/isaacs/minimatch/compare/v3.0.4...v3.1.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=minimatch&package-manager=npm_and_yarn&previous-version=3.0.4&new-version=3.1.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11864:2289,depend,dependabot,2289,https://root.cern,https://github.com/root-project/root/pull/11864,1,['depend'],['dependabot']
Integrability,"""if (gR) { ... }"" will not work as a check whether the global interface object is freed. gR - the pointer to the TRInterface object - is assigned by new. Only one instance of this class can be created. There is no explicit delete of this global object, but it is destroyed when the program exits. But this destruction of remaining object when the program ends does not reset the gR pointer to NULL, so using ""if (gR) { ... }"" as a test to check whether the object is destroyed or not will not work. I think this PR implements the intended behaviour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/476:62,interface,interface,62,https://root.cern,https://github.com/root-project/root/pull/476,1,['interface'],['interface']
Integrability,"""overloadedFreePtsq"", ROOT.squared). #will fail because argument name determination from overloads is ambiguous; d = d.Define(""overloadedFreePtsq"", ROOT.squared2). #templated free function; d = d.Define(""templatedFreeNmuonsSq"", ROOT.squared[""int""], [""nMuons""]). #static class member; d = d.Define(""staticPtsq"", ROOT.Callable.mul, [""Muon_pt"", ""Muon_pt""]). #class member; d = d.Define(""overloadedMemberPtsq"", ROOT.Callable().squared, [""Muon_pt""]). #templated class member; d = d.Define(""templatedMemberNmuonsSq"", ROOT.Callable().squared[""int""], [""nMuons""]). #overloaded operator(); d = d.Define(""overloadedCallPtsq"", ROOT.Callable(), [""Muon_pt""]). #string expression; d = d.Define(""lambdaPtsq"", ""Muon_pt*Muon_pt""). #complete lambda expression (direct jitting without parsing); d = d.Define(""lambdaPtsq"", ""[](float x) { return x*x; }"", [""Muon_pt""]). #complete lambda expression with inferred column names and argument types (direct jitting without parsing, argument names determined from cling after jitting); d = d.Define(""lambdaAutoPtsq"", ""[](auto Muon_pt) { return Muon_pt*Muon_pt; }""); ```. A few remaining issues here:; - ""Warning: failed - offset calculation between TList and TViewPubFunctions"" in some cases (related to extracting argument names through cling machinery). - cppyy gives limited or obscure errors on template instantiation. In this case the templates are instantiated in code compiled by TClingCallFunc::compile_wrapper() which apparently has different verbosity than TCling::Declare (jitting through this route also does not forcibly disable the null pointer check like Declare does, and possibly other subtleties); In particular there's one nasty case which is fairly common and produces totally incomprehensible errors compared to compiling the same code in gcc (or even with TCling::Declare), where an incorrect number of columns is passed to Declare compare to the callable. All of the above functionality can be easily extended to Filter once we're happy with the direction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9174:3880,rout,route,3880,https://root.cern,https://github.com/root-project/root/pull/9174,1,['rout'],['route']
Integrability,# Backport. This will backport the following commits from `master` to `v6-32-00-patches`:; - [[RF][CMake] Use PUBLIC (not INTERFACE) for adding &#x60;res&#x60; to include dirs](https://github.com/root-project/root/pull/15664); - [[RF][CMake] Add missing dependencies](https://github.com/root-project/root/pull/15664). <!--- Backport version: 9.5.1 -->. ### Questions ?; Please refer to the [Backport tool documentation](https://github.com/sorenlouv/backport),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15675:122,INTERFACE,INTERFACE,122,https://root.cern,https://github.com/root-project/root/pull/15675,2,"['INTERFACE', 'depend']","['INTERFACE', 'dependencies']"
Integrability,"# Goal. This PR implements `Im2Col` in CUDA in (what I consider) an optimal way in terms of performance. I achieve that by assigning one thread per output element. This means that threads do not share their write address and therefore no synchronization is required. They do share read address which is of course thread safe. I complement the new functionality with a complete testing suite to assert correctness. # Extra tasks. The tests within the `CNN` module suffer from extensive code duplication as the `Reference` and `CPU` versions do exactly the same thing (the CUDA one's would just worsen the issue). Instead I refactored the `Im2Col` one's using templated arguments: As a result the tests are now defined only once and called independently from each architecture using templates. This approach is also followed in the `DNN` module. If time allows, I plan to refactor all tests within the `CNN` module in a similar manner.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2118:238,synchroniz,synchronization,238,https://root.cern,https://github.com/root-project/root/pull/2118,1,['synchroniz'],['synchronization']
Integrability,"# Problem Outline:; Precondition. On the **training (classification)** stage user adds array of variables to the `TMVA::DataLoader` object with a new method introduced in ROOT 6.20:; ```; TMVA::DataLoader *loader = new TMVA::DataLoader(...); loader->AddVariablesArray(""vars"", nBins);; ```. On the next stage - **classification application** user creates `TMVA::Reader` object and adds an array of variables to it:; ```; TMVA::Reader* reader = new TMVA::Reader(...);; std::vector<float> fValues(nBins);; reader->DataInfo().AddVariablesArray(""vars"", nBins, """", """", 0, 0, 'F', kFALSE, &fValues[0]);; ```. Pointer to the first element of the `&fValues[0]` passed to the `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Inside `AddVariablesArray()` pointer is **not incremented** in the loop where variables are defined. This provides faulty `reader->EvaluateMVA` output. # This Pull Request:; Modifies `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Depending on the variable type `char varType`, `void * external` pointer is incremented in the loop. This provides correct TMVA evaluation. ## Changes or fixes:; Please refer to the commit details. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10780:989,Depend,Depending,989,https://root.cern,https://github.com/root-project/root/pull/10780,1,['Depend'],['Depending']
Integrability,"# Problem:. `TThreadExecutor` expects that `TSeq`-s always start with 0 and have step 1. Otherwise, it will give wrong result for `Foreach`, `MapReduce`, `Map` of the `TThreadExecutor`. With current master, the following snipet produces 0 and depending on compiler can also give `munmap_chunk(): invalid pointer` followed by `SIGABRT`:; ```C++; #include ""ROOT/TThreadExecutor.hxx""; #include ""ROOT/TSeq.hxx""; #include <iostream>. int main(){; auto func = [&](long int x)->long int { return x; };; auto redfunc = [](const std::vector<long int> &v){return std::accumulate(v.begin(), v.end(), 0l);};; ROOT::TThreadExecutor t(1);; std::cout << t.MapReduce(func, ROOT::TSeq<long int>(2, 4), redfunc) << '\n'; // expected result: 2 + 3 = 5; return 0;; }; ```; Moreover, when range is specified there is seg fault produced. # Partial Solution:. Looking with `gdb` I saw that in the reduction step, there is a call inside `TThreadExecutor.hxx:270`:; ```C++; unsigned start = *args.begin();; unsigned end = *args.end();; unsigned seqStep = args.step();. using retType = decltype(func(start));; std::vector<retType> reslist(args.size());; ; auto lambda = [&](unsigned int i); {; reslist[i] = func(i);; };; ParallelFor(start, end, seqStep, lambda);; ``` ; This assumes that the TSeq always starts with 0 and has step size 1. . To properly handle TSeq for MapReduce need to have:; ```C++; auto lambda = [&](unsigned int i); {; reslist[i] = func(args[i]);; };; ParallelFor(0U, args.size(), 1, lambda); // this calls tbb::parallel_for(start, end, step, f); // tbb::parallel_for expects as args: 1.starting idx, 2. end index, 3. step size, 4. func; // docs: https://spec.oneapi.io/versions/1.1-rev-1/elements/oneTBB/source/algorithms/functions/parallel_for_func.html; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10404:243,depend,depending,243,https://root.cern,https://github.com/root-project/root/issues/10404,1,['depend'],['depending']
Integrability,"# This PR is not meant to be merged but for documentation purposes. Implementation of fast inference for Decision Trees.; @stwunsch will make another PR to integrate properly into the root system.; ## Getting started; Required additional librairies; - ROOT; - for running tests you need Google Tests; - for running benchs, you need Google Benchs and XGBoost. ### Run tests ; Update the makefile in the tests folder, then execute `make clean && make && ./testAll.exe`; At the end of this text is a setup file for a new installation of ubuntu 18.04. ### Code structure; Here below we show the structure of the repository with the files of interest.; .; ├── bench.py; ├── bench.sh; ├── build/; ├── data/; ├── experiments/; │ ├── arrayBdtPreds.cxx; │ ├── data/; │ ├── generate_data.py; │ ├── makefile; │ ├── readme.md; │ ├── run_all.sh; │ └── setup.h; ├── figures/; ├── generated_files/; ├── include/; │ ├── BranchedTree.hxx; │ ├── BranchlessTree.hxx; │ ├── CodeGeneratorsJIT.hxx; │ ├── ForestHelpers.hxx; │ ├── json.hpp; │ ├── RForestInference.hxx; │ └── TreeHelpers.hxx; ├── makefile_bench.make; ├── README.md; ├── run.sh; ├── src/; │ └── benchmark.cxx; ├── tests/; │ ├── build/; │ ├── data/; │ │ ├── events.csv; │ │ ├── model.json; │ │ ├── model.rabbit; │ │ ├── multiclass_events.csv; │ │ ├── multiclass_model.json; │ │ ├── multiclass_model.rabbit; │ │ ├── multiclass_python_groundtruths.csv; │ │ ├── multiclass_python_predictions.csv; │ │ ├── multiclass_python_scores.csv; │ │ ├── python_predictions.csv; │ │ ├── regression_events.csv; │ │ ├── regression_model.json; │ │ ├── regression_model.rabbit; │ │ ├── regression_python_groundtruths.csv; │ │ ├── regression_python_predictions.csv; │ │ ├── regression_python_scores.csv; │ ├── forestBDTest.hxx; │ ├── helpersBDTest.hxx; │ ├── makefile; │ ├── readme.md; │ ├── RegressionBDTest.hxx; │ ├── run_all.sh; │ ├── testAll.cxx; ├── train_classifiers_examples.py; └── utils.py. ### Setup script for ubuntu 18.04; It sets up a new machine, installing everythi",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4351:156,integrat,integrate,156,https://root.cern,https://github.com/root-project/root/pull/4351,1,['integrat'],['integrate']
Integrability,# This Pull request: ; Adds the typedefs Float16_t and Double32_t to the builtin types in TDataType. ## Changes or fixes:; The change is required to read tree branches of those types using TTreeReader and TTreeReaderValue<Float16_t> / TTreeReaderValue<Double32_t>. Otherwise attempting to read such branches results in an error message that no dictonary for Float16_t / Double32_t exists. ## Checklist:; - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9008:328,message,message,328,https://root.cern,https://github.com/root-project/root/pull/9008,1,['message'],['message']
Integrability,# This Pull request: ; Adds the typedefs Float16_t and Double32_t to the builtin types in TDataType.; It is directly related to #9008 which adds the same changes to the patch-branch. ## Changes or fixes:; The change is required to read tree branches of those types using TTreeReader and TTreeReaderValue<Float16_t> / TTreeReaderValue<Double32_t>. Otherwise attempting to read such branches results in an error message that no dictonary for Float16_t / Double32_t exists. ## Checklist:; - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9009:410,message,message,410,https://root.cern,https://github.com/root-project/root/pull/9009,1,['message'],['message']
Integrability,# This Pull request: ; tutorial/tree/dictionary C++ stand-alone application can not be compiled when the cmake project is generated for xcode. The solution is to explicitly tell cmake that the shared library depends on the ROOT dictionary. ## Changes or fixes: ; New line in the CMakeLists specifying the dependency . ## Checklist:. - [ x] tested changes locally; - [ ] updated the docs (not needed). This PR fixes https://github.com/root-project/root/issues/14595,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14619:208,depend,depends,208,https://root.cern,https://github.com/root-project/root/pull/14619,2,['depend'],"['dependency', 'depends']"
Integrability,# This Pull request: Added new dependent arguments to the argument parser. ## Changes or fixes: Cannot call llvm tar and binary at the same time and cannot call llvm tar and llvm url at the same time. ## Checklist:. - [X] tested changes locally; - [NA] updated the docs (if necessary). This PR fixes issue mentioned in #406 (https://github.com/root-project/cling/issues/406),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10937:31,depend,dependent,31,https://root.cern,https://github.com/root-project/root/pull/10937,2,['depend'],['dependent']
Integrability,"# This Pull request: [RDFD][Fix #7205] Print() now indicates non-fitting columns. ## Changes or fixes:. In case of tables of many columns, Print() now have a right-most; column of dots (...). Moreover, the user will be notified with an; info message as well. Print() guarantees that at least 1 column of the table is displayed; (regardless the width of the first column). The default maximum allowed width of the table is increased to 100; (from 80). New tests written to check the behaviour of wide tables. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #7205",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9124:242,message,message,242,https://root.cern,https://github.com/root-project/root/pull/9124,1,['message'],['message']
Integrability,# This Pull request: [RNTuple] Addition of the evil storage layer. ## Changes or fixes:; - Add modifications to `RRawFile` to enable failures (bit flips and short reads) to be injected into the `ReadAt` and `ReadV` methods.; - Add I/O error unit test file `ntuple_ioerrors`. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13434:176,inject,injected,176,https://root.cern,https://github.com/root-project/root/pull/13434,1,['inject'],['injected']
Integrability,"# This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14683:49,depend,dependabot,49,https://root.cern,https://github.com/root-project/root/pull/14683,2,['depend'],['dependabot']
Integrability,"# This Pull request:. ## Changes or fixes:. Adds `','.join(strings)` capabilities to `TString.h`.; Right now it is as a variadic argument, but it could be expanded to std::array, std::vector or even TObjArray. ## Checklist:. - [x] tested changes locally; - [X] updated the docs (if necessary). This PR depends on https://github.com/root-project/root/pull/13243",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13299:302,depend,depends,302,https://root.cern,https://github.com/root-project/root/pull/13299,1,['depend'],['depends']
Integrability,# This Pull request:. ## Changes or fixes:. Adds deprecation messages to classes that are no longer recommended. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/14582; Fixes https://its.cern.ch/jira/browse/ROOT-8594,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14754:61,message,messages,61,https://root.cern,https://github.com/root-project/root/pull/14754,1,['message'],['messages']
Integrability,"# This Pull request:. ## Changes or fixes:. Fixes https://its.cern.ch/jira/browse/ROOT-8256. With the change, you would get error messages of this type:. `Error in <TTreeFormula::TTreeFormula>: The length of the formula (1035) exceeds the maximum allowed (1024)`. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15274:130,message,messages,130,https://root.cern,https://github.com/root-project/root/pull/15274,1,['message'],['messages']
Integrability,"# This Pull request:. ## Changes or fixes:. From the Rcpp changelog:. * inst/include/Rcpp/: Added variadic templates to be used instead of; the generated code in `Rcpp/generated` and `Rcpp/module` when; compiling with C++11 or later. This PR adapts ROOT's R interface code to this change,. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16075:258,interface,interface,258,https://root.cern,https://github.com/root-project/root/pull/16075,1,['interface'],['interface']
Integrability,"# This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:; - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed.; - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master; - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14603:70,message,message,70,https://root.cern,https://github.com/root-project/root/pull/14603,2,['message'],['message']
Integrability,"# This Pull request:. ## Changes or fixes:. Removes `.pyc` files that are checked into source. PYC files are Python version dependent, and are automatically generated from `.py` files. From the structure, I'm guessing these are Python 2.x auto-generated files. There's a small chance they could have been intentional, but I don't know why they would be. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10249:124,depend,dependent,124,https://root.cern,https://github.com/root-project/root/pull/10249,1,['depend'],['dependent']
Integrability,# This Pull request:. ## Changes or fixes:. See the commit messages for details. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10306:59,message,messages,59,https://root.cern,https://github.com/root-project/root/pull/10306,1,['message'],['messages']
Integrability,"# This Pull request:. ## Changes or fixes:. Since the possibillity to use an external libAfterImage was removed, the built-in version needs some fixes.; See commit messages for details. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15191:164,message,messages,164,https://root.cern,https://github.com/root-project/root/pull/15191,1,['message'],['messages']
Integrability,"# This Pull request:. ## Changes or fixes:. Some minor interface changes to reflect better the underlying TestStatistics classes and how we intend to bring it to users in the upcoming release. . The 'NewStyle' name was changed to 'ModularL' to reflect the fact that these new test statistics are modular. Note that we are undecided on 'ModularL' versus just 'Modular', so if you have a strong opinion on this feel free to change it. Some of the functionality included in the added named arguments is not implemented yet, this is because we plan to add the respective backend for these new features in the near future. Therefore these named arguments were added under RooFit::Experimental namespace. Do we also need to add these not yet functioning arguments already to the RooMinimizer config struct, since we plan to add them in the near future?. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11906:55,interface,interface,55,https://root.cern,https://github.com/root-project/root/pull/11906,1,['interface'],['interface']
Integrability,"# This Pull request:. ## Changes or fixes:. This MR contains mostly two classes: ; - `RooFit::MultiProcess::ProcessTimer` which keeps a set of potentially overlapping timers per process that can be started and stopped by referring to their identifier string. Timings are written out in json format. Some extra functionality is added to write out at a specified interval.; - `RooFit::MultiProcess::HeatmapAnalyzer` which translates the timings output in log format by the process timer to a heatmap which it can return in the form of a TH2I with the correctly labeled x and y axes. Some extra functionality is available for inspecting the log files and retrieving its metadata. Tests are included for both classes. Note that also the interface to enable timing logging is included in the `RooMinimizer::Config` object which can be given to the RooMinimizer and on RooAbsPdf::fitTo. The variable that centrally controls whether timings are logged or not is `RooMinimizer::Config::logTimings_`. . Also, an initial timing setup is included, with some `ProcessTimer::start_timer` and `ProcessTimer::end_timer` calls throughout the `RooFit::TestStatistics` code. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11791:733,interface,interface,733,https://root.cern,https://github.com/root-project/root/pull/11791,1,['interface'],['interface']
Integrability,"# This Pull request:. ## Changes or fixes:. This allows to build the documentation as part of the normal ROOT build and sets the basis for integrating it into the GitHub CI. And to test new PullRequests so that they do not break the existing documentation nor do add new warnings to it. You can still build the documentation as an external project, like is done now. ## Status. Draft, still work to do on the notebook / tutorial part. ## History. This supersedes the old PR https://github.com/root-project/root/pull/9966 that I just closed. The goals were:. - [x] Migrate old Makefile to modern CMake. See https://github.com/root-project/root/issues/9090; - [x] Allow building the documentation from a git source repository with read-only permissions. I.e. try to not pollute the sources within the process. This follows the Make to CMake migration philosophy. See https://github.com/root-project/root/issues/8947; - [x] As done by [ALICE](https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22), use a 'dynamic' Doxyfile declaration, that only specifies what needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:; - [ ] https://github.com/root-project/root/issues/9953 in combination with https://github.com/ammaraskar/gcc-problem-matcher; - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999; - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process.; - [x] Make the doxygen documentation thread-safe; - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15160:139,integrat,integrating,139,https://root.cern,https://github.com/root-project/root/pull/15160,1,['integrat'],['integrating']
Integrability,"# This Pull request:. ## Changes or fixes:. When the external application (depending on ROOT) uses C++20, adding this C++ feature test can reduce the possibility of compilation failure. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11311:75,depend,depending,75,https://root.cern,https://github.com/root-project/root/pull/11311,1,['depend'],['depending']
Integrability,# This Pull request:. ## Changes or fixes:. `root.exe -a`; returns right now a non-understandable error message. ## Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14816:104,message,message,104,https://root.cern,https://github.com/root-project/root/pull/14816,1,['message'],['message']
Integrability,"# This Pull request:. ## Changes or fixes:; Each of the four commits contains an independent improvement that I made while working on something else (error handling). They are not necessary, but I think they are useful nonetheless, so here they are. 1. MultiProcess::Messenger worker to master messages implemented slightly more efficiently.; 2. Implemented full TestStatistics::RooAbsL::constOptimizeTestStatistic; these features are used rarely in Higgs fits, I think, but they are nonetheless features in non-MP RooFit fits that I now added for feature parity.; 3. Extend RooAbsL test suite with comparisons to the non-MP RooFit fits (RooNLLVar) that they were intended to reimplement.; 4. Extend NaNPacker test suite with some simple arithmetic demonstrations / sanity checks. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15499:294,message,messages,294,https://root.cern,https://github.com/root-project/root/pull/15499,1,['message'],['messages']
Integrability,"# This Pull request:. ## Changes or fixes:; Made the static function `TH1::CheckConsistency` public and changed the return type to `Bool_t`.; The exceptions types it throws were also made public, so that user code could catch them. ## Checklist:. - [X] tested changes locally. ## Motivation; At the moment `TH1::CheckConsistency` is called internally by `TH1::Add`, and prints error messages in case of failure, but continues the execution.; Making it public allows user code to manually check the consistency to catch errors and stop the program.; This is especially useful for programs that make hundreds of `Add`s, out of which only a few fail, and the error messages may be lost in logs and go unnoticed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13748:383,message,messages,383,https://root.cern,https://github.com/root-project/root/pull/13748,2,['message'],['messages']
Integrability,# This Pull request:. ## Changes or fixes:; Replaced somewhat cryptic 'assert failed' message with the actual I/O error message explaining what went wrong in RNTupleWriter::RFileSimple::Write(). ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #14487,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14677:86,message,message,86,https://root.cern,https://github.com/root-project/root/pull/14677,2,['message'],['message']
Integrability,"# This Pull request:. ## Changes or fixes:; The actual calculation of the Hessian / covariance matrix done by MnHesse was contained to a single function. Since the only needed internal state was the `MnStrategy` object, it was easy to turn this calculation function into a static member function. The implementation of the ""internal interface"" (previously the calculation function) now forwards its call to a static class member `std::function` object. By default, this object is set to be the now-static calculation function. However, this `std::function` object is public, so users can easily replace it with any Hessian calculator function they prefer. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11113:333,interface,interface,333,https://root.cern,https://github.com/root-project/root/pull/11113,1,['interface'],['interface']
Integrability,"# This Pull request:. ## Changes or fixes:; ```; [ RUN ] RooTruthModel.IntegrateSubrange; [#1] INFO:Eval -- RooRealVar::setRange(dt) new range named 'integral' created with bounds [2,2]; /builddir/build/BUILD/root-6.30.02/roofit/roofitcore/test/testRooTruthModel.cxx:38: Failure; Expected equality of these values:; integ->getVal(); Which is: -2.8822093e-17; 0.0; Which is: 0; [ FAILED ] RooTruthModel.IntegrateSubrange (194 ms); ```. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14164:71,Integrat,IntegrateSubrange,71,https://root.cern,https://github.com/root-project/root/pull/14164,2,['Integrat'],['IntegrateSubrange']
Integrability,"# This Pull request:. ## Changes or fixes:; warns of overflow with an error message. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). See https://root-forum.cern.ch/t/break-segmentation-violation-while-using-geometry-package/53087/7. Side note: To allow for Long64_t, a complete rewrite of all variables' data types would be needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12028:76,message,message,76,https://root.cern,https://github.com/root-project/root/pull/12028,1,['message'],['message']
Integrability,"# This Pull request:. - Adds new Constructor interfaces to RooCmdArg; - Adds new printouts to RooCmdArg. ## Changes or fixes:. RooCmdArg is a bit of an old-style piece of code that doesn't really work well with python.; Also, when talking among statistics code developers, it's commonplace to have to ""exchange"" fit arguments between codes (""what arguments to you pass to make it converge?"").; For this purpose, it's very convenient to:; - be able to print the command arguments in a human-readable format, and; - directly use these printouts to copy&paste them into some other piece of code to make comparison studies. The changes in this PR make this possible with little effort. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16349:45,interface,interfaces,45,https://root.cern,https://github.com/root-project/root/pull/16349,1,['interface'],['interfaces']
Integrability,# This Pull request:. - Simplifies the `\legacy` interface. It has now only one parameter.; - The text has been rephrased.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9108:49,interface,interface,49,https://root.cern,https://github.com/root-project/root/pull/9108,1,['interface'],['interface']
Integrability,"# This Pull request:. A follow up to #13219 ; It improves the RField API that is used to create, destroy, and bind objects being read from disk or being written to disk. A follow-up PR will make several public RField interfaces non-public, among the reading and appending. ## Changes or fixes:. - Replace `RFieldValue` by `RFieldBase::RValue`. The new class can be owning or non-owning and takes care of destroying its wrapped object if it is owning.; - Make `RFieldBase::DestroyValue` protected and use raw pointers in its interface; - Reuse base class `DestroyValue` in derived classes; - Make `GenerateValue(void *)` overload protected and with a `void` return value; - Remove unused templated version of `GenerateValue` from field classes; - Rename `CaptureValue` to `BindValue` and make it non-virtual. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13264:217,interface,interfaces,217,https://root.cern,https://github.com/root-project/root/pull/13264,3,"['interface', 'wrap']","['interface', 'interfaces', 'wrapped']"
Integrability,"# This Pull request:. Added some instrospection methods to TestStatistics Likelihood classes and also added corresponding tests. In particular added GetName() and GetInfo(). GetName() follows the same interface as the other RooFit classes in order to stay consistent. GetInfo() returns an std::string which allows for the added flexibility of concatenating more information about the class. Also added getComponents() to RooSumL in order to retrieve the vector of components from the sum likelihood. Note I am not completely happy about the implementation of the naming, in particular with the fact that the name needs to be supplied to the constructor of the RooAbsL class. Another option would be to override the GetName() and GetInfo() functions in each of the child classes explicitly with the same implementation, in which case we could have a unique name_ variable in each of the child classes and no need for the modification to the constructors. Let me know if this is preferred. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10043:201,interface,interface,201,https://root.cern,https://github.com/root-project/root/pull/10043,1,['interface'],['interface']
Integrability,# This Pull request:. Adds RNTuple support for `std::atomic<T>`. The inner type `T` has to be an I/O supported type. On-disk representation is identical between atomic `T` and plain `T` except for an extra marker field for the atomic wrapper. CMS MiniAOD use atomic types. ## Checklist:. - [X] tested changes locally; - [X] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13897:234,wrap,wrapper,234,https://root.cern,https://github.com/root-project/root/pull/13897,1,['wrap'],['wrapper']
Integrability,# This Pull request:. Adds more options to generate asimov datasets by; - allowing to generate asimov datasets for RooMultiVarGaussian; - adding a new constructor to RooExtendPdf that allows to more easily extend pdfs to fixed nEvents; - improving error messages emitted by AsymptoticsCalculator when creating error messages. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12034:254,message,messages,254,https://root.cern,https://github.com/root-project/root/pull/12034,2,['message'],['messages']
Integrability,"# This Pull request:. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods.; - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer, these setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor.; - Adds tests to test the aforementioned new functionality; - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11549:31,interface,interface,31,https://root.cern,https://github.com/root-project/root/pull/11549,1,['interface'],['interface']
Integrability,# This Pull request:. Adds support for the `std::byte` type. Vectors of bytes can be used to represent BLOBs in RNTuple. The unit test shows an example where a `TMemFile` is stored in such a vector. A follow-up PR should provide a convenient interface to store BLOBs. ## Checklist:. - [X] tested changes locally; - [X] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13806:242,interface,interface,242,https://root.cern,https://github.com/root-project/root/pull/13806,1,['interface'],['interface']
Integrability,"# This Pull request:. Allow to populate ROOT using FetchContent. Only compilation has been tested and further work should be done to allow to used the fetched ROOT. snippet:; ```cmake; cmake_minimum_required(VERSION 3.16). project(test). set(FETCHCONTENT_QUIET false); include(FetchContent); FetchContent_Declare(MyRoot GIT_REPOSITORY https://github.com/flagarde/root.git GIT_TAG FetchContent); #FetchContent_MakeAvailable(MyRoot); # Check if population has already been performed; FetchContent_GetProperties(MyRoot); if(NOT myroot_POPULATED); # Fetch the content using previously declared details; FetchContent_Populate(MyRoot). # Set custom variables, policies, etc.; # ... # Bring the populated content into the build; add_subdirectory(${myroot_SOURCE_DIR} ${myroot_BINARY_DIR}); endif(); ```. ## Changes or fixes: . Mainly some CMake variables. ## Checklist:. - [X] tested changes locally; - [X] updated the docs (if necessary). This PR fixes :. It's a rework on #9516 . This PR should not change anything for users compiling ROOT as standalone project. However until now, it is not possible to directly include ROOT in an other project using FetchContent. This PR is focusing on the CMake configuration, generation steps and in the compilation process. No work has been done yet to let upstream project to find ROOT and to use it. I made a try on the last point but I think it is better to split the task in more steps. Usage of FetchContent is more and more used to create ""standalone"" project downloading and compiling all its dependencies. In the other PR tries some people and official maintainers have raised their interest on this feature.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15105:1534,depend,dependencies,1534,https://root.cern,https://github.com/root-project/root/pull/15105,1,['depend'],['dependencies']
Integrability,"# This Pull request:. Explicitly set `Vdt_ROOT` when `builtin_vdt` was used for the build. This way, a default location would be provided for VDT, which the user could still override if they wanted to. ## Changes or fixes:. This fixes the issue reported in #14163. Following up from the changes introduced in #11844. Note that this fix requires CMake 3.12+, with [CMP0074](https://cmake.org/cmake/help/latest/policy/CMP0074.html#policy:CMP0074) set to `NEW`. :thinking: Supporting older CMake versions, or that policy set to `OLD` would also be possible, but would require a lot more lines of code. (`FindVdt.cmake` would need to learn about a new hint variable itself.). Still, if people here feel very strongly about it, it would be possible to go that route as well. :thinking: . ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary) (N/A). This PR fixes: #14163",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14178:755,rout,route,755,https://root.cern,https://github.com/root-project/root/pull/14178,1,['rout'],['route']
Integrability,# This Pull request:. Implements writing page checksums and checksum verification on read.; Page checksums are written on `SealPage`. They are verified on `LoadSealedPage()` and on `UnsealPage()`. Note that the page size stored in locators does not change. Pages flagged as having a checksum are serialized with additional trailing 8 bytes. Still some commit cleanup todo. Depends on #15767,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15789:373,Depend,Depends,373,https://root.cern,https://github.com/root-project/root/pull/15789,1,['Depend'],['Depends']
Integrability,"# This Pull request:. Improves exception handling of RooWorkspace for non-existing objects. ## Changes or fixes:. Adding a non-existing object to RooWorkspace prints an error message but doesn't terminate the program, which might lead to segmentation faults. The fix prints the error message and then throws a runtime error to handle such cases. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes [JIRA: ROOT-7922](https://sft.its.cern.ch/jira/browse/ROOT-7922)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12860:175,message,message,175,https://root.cern,https://github.com/root-project/root/pull/12860,2,['message'],['message']
Integrability,# This Pull request:. Improves some of the error messages by adding explicit checks for binning consistency to the HS3 HistFactory implementation. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13098:49,message,messages,49,https://root.cern,https://github.com/root-project/root/pull/13098,1,['message'],['messages']
Integrability,"# This Pull request:. Introduce GraphAsymmErrors member in ActionHelpers.hxx similar to Graph.; GraphAsymmErrors creates a TGraphAsymmErrors, hence 6 arguments need to; be passed to it.; Appropriate structures in InterfaceUtils.hxx and RInterface.hxx are added. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9760:213,Interface,InterfaceUtils,213,https://root.cern,https://github.com/root-project/root/pull/9760,1,['Interface'],['InterfaceUtils']
Integrability,"# This Pull request:. Modifies Minuit2 interface to pass initial error/covariance matrix or second derivatives (G2) vector. ## Changes or fixes:. This PR exploits existing code in `MnSeedGenerator` and introduces some improvements, namely:; 1. Check whether provided matrix has positive diagonal (G2 must be positive) and larger than working precision `Eps`; if it is not the case, numerical computation is carried out.; 2. Disable `NegativeG2LineSearch` whenever point 1 is satisfied. Furthermore, this PR provides an interface to pass the error/covariance matrix or second derivatives (G2) vector via `ROOT::Math::Minimizer`. The user can provide either the error/covariance matrix in compressed format (column-major upper triangular part), OR the g2 vector, see the code snippet below. The matrix or second derivatives must take into account only variable parameters, implying that all fixed parameters must be declared before providing initial values. ```; ROOT::Math::Minimizer* minimum = ROOT::Math::Factory::CreateMinimizer(minName, algoName);. minimum->SetVariable(0,""x"",0.,0.);; minimum->SetVariable(1,""y"",0.,0.);. int nrow = 2;; std::vector<double> cov(nrow*(nrow+1)/2);; std::vector<double> d2(nrow);. for(int i = 0; i < nrow; i++) {; d2[i] = 0.1*(i+1);; for(int j = i;j< nrow;j++); cov[i + j * (j + 1) / 2] = (i==j) ? 0.1*(i+1) : 0.;; }. minimum->SetCovariance(cov,nrow);; // OR; //minimum->SetCovarianceDiag(d2,nrow);; ```. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16437:39,interface,interface,39,https://root.cern,https://github.com/root-project/root/pull/16437,2,['interface'],['interface']
Integrability,"# This Pull request:. Moves GetTopLevelBranchNames from the RDF Internals namespace to the Internal TreeUtils namespace, as it does not rely on RDF and creates unnecessary dependencies. ## Changes or fixes:; - Move GetTopLevelBranch names and its implementation from `/tree/dataframe` to `/tree/tree`. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes N/A",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11144:172,depend,dependencies,172,https://root.cern,https://github.com/root-project/root/pull/11144,1,['depend'],['dependencies']
Integrability,"# This Pull request:. Overwrites #11549. Adds new interface features to `RooAbsPdf::fitTo()` and `RooMinimizer::Minimize()` to use new (parallel) teststatistics based classes. . ## Changes or fixes:. - Adds new Parallelize() and NewStyle() named arguments to RooAbsPdf::fitTo() to respectively determine parallelisation configuration and whether to use new style likelihoods.; - Adds a configuration struct to the RooMinimizer that is the single source of truth on RooMinimizer config parameters, including the new parallelisation parameters. This struct can be given to the RooMinimizer constructor, whereas previously all configuration was done after the creation of the constructor through setters on the RooMinimizer. These setters also maintain their original functionality. Note that the parallelisation parameters can *only* be given in the RooMinimizer constructor.; - Adds tests to test the aforementioned new functionality; - Also, since I made a lot of changes to the file, this PR also includes an entire reformat of the RooMinimizer.cxx and RooMinimizer.h with clang-format.; - Finally, this PR includes also makes the setters to the static _theFitter attribute on the RooMinimizer static. Note there is some weird behaviour with this still, on which I comment in the code. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11577:50,interface,interface,50,https://root.cern,https://github.com/root-project/root/pull/11577,1,['interface'],['interface']
Integrability,# This Pull request:. Removes the dependency on arrow/testing for dataframe tests. ## Changes or fixes:. Copies over the various ArrayFromVector / ASSERT_OK helpers dropping the arrow:: namespace for them. ## Checklist:. - [X] tested changes locally; - [X] updated the docs (if necessary). This PR fixes #13516.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13523:34,depend,dependency,34,https://root.cern,https://github.com/root-project/root/pull/13523,1,['depend'],['dependency']
Integrability,"# This Pull request:. Simplified/fixed how VDT would be used. Did this by making `ROOTVecOps`, `RooBatchCompute` and `TMVA` link against `VDT::VDT` in all circumstances (as long as VDT is being used). Regardless of whether VDT is used as a ""builtin"" or as an ""external"". At the same time made `ROOTVecOps` and `RooBatchCompute` depend on `VDT::VDT` publicly, as they actually do. ## Changes or fixes:. - Made sure that an imported `VDT::VDT` library would be set up when `builtin_vdt` is being used.; - Simplified how `ROOTVecOps`, `RooBatchCompute` and `TMVA` would just (publicly) link against `VDT::VDT` if either `vdt` or `builtin_vdt` is `TRUE`. Instead of the spaghetti of options that it had before.; - Made sure that all of those targets would explicitly depend on the `VDT` target if `builtin_vdt` is set to `TRUE`.; - Made sure that VDT would be searched for when calling `find_package(ROOT)` in client code. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #11797.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11844:328,depend,depend,328,https://root.cern,https://github.com/root-project/root/pull/11844,2,['depend'],['depend']
Integrability,# This Pull request:. This PR contains a few hotfixes to the HS3 implementation. ## Changes or fixes:. - attempting to export a forbidden variable name now triggers an error message; - export-keys-based exporters now use RooAbsProxy instead of RooRealProxy to allow also non-function-type and non-list-type proxies to be exported successfully.; - added a unit test for import and export of RooBernstein to cover the import/export issues for export-keys-based exporters.; - invalid category names will now be fixed upon export such that they don't lead to invalid data names; - FlexibleInterpVars with unequal numbers of variables and high/low variations will now be cut-off on minimum length upon export.; - HistFactory ShapeSys and staterror will now export and import the parameter names instead of auto-generating them. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13813:174,message,message,174,https://root.cern,https://github.com/root-project/root/pull/13813,1,['message'],['message']
Integrability,"# This Pull request:. This PR implements the correct copy constructors for the FitData classes and, when the user provides to teh Fitter, a reference to a Fit data classes, the data are copied. ; An interface using a `shared_ptr` to the data exists to avoid copying. . This PR fixes #11154",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11209:199,interface,interface,199,https://root.cern,https://github.com/root-project/root/pull/11209,1,['interface'],['interface']
Integrability,# This Pull request:. This PR refactors the iterator implementation for the JSON interface to avoid performance issues with reading workspaces from JSON. ## Changes or fixes:. Reading JSON files is much faster now. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9728:81,interface,interface,81,https://root.cern,https://github.com/root-project/root/pull/9728,1,['interface'],['interface']
Integrability,# This Pull request:. add some missing dependency for headers and libraries when building the executable sofiec as part of the tests of TMVA-sofie,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8799:39,depend,dependency,39,https://root.cern,https://github.com/root-project/root/pull/8799,1,['depend'],['dependency']
Integrability,"# This Pull request:; - Remove default argument for creating GDML positions. The default arguments always define lengths in ""cm"",; which is wrong for Geant4 units (mm). Instead the digested units string fDefault_lunit is used, which ; has the correct value depending on the chosen system of units. ## Changes or fixes:; Creating correct GDML files understood by Geant4. ## Checklist:. - [ x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11887:257,depend,depending,257,https://root.cern,https://github.com/root-project/root/pull/11887,1,['depend'],['depending']
Integrability,"# This Pull request:; ; Add factory interface for the RooLagrangianMorphFunc in `RooFactoryWSTool.cxx`. The interface case be used ; along the following lines,; ```; ws.factory( “lagrangianmorph::func($filename(‘inputs.root’),  $couplings({cHq3[-10,10],SM[1]},  $NewPhysics(cHq3=1,SM=0)),  $folders({‘input1’,’input2’,’input3’})”); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9444:36,interface,interface,36,https://root.cern,https://github.com/root-project/root/pull/9444,2,['interface'],['interface']
Integrability,# This Pull request:; Added RNTupleTTreeChecker and RNTupleTTreeCheckerCLI to ROOT. ## Changes or fixes:; - Added RNTupleTTreeChecker class for comparing TTree and RNTuple structures.; - Added RNTupleTTreeCheckerCLI for command-line interface to interact with RNTupleTTreeChecker.; - Included necessary header and source files. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). ## Details:. tree/ntupleutil/; - RNTupleTTreeChecker.cxx: Implementation of the RNTupleTTreeChecker class.; - RNTupleTTreeCheckerCLI.cxx: Implementation of the command line interface.; - inc/ROOT/RNTupleTTreeChecker.hxx: Header file for the RNTupleTTreeChecker class.; - inc/ROOT/RNTupleTTreeCheckerCLI.hxx: Header file for the RNTupleTTreeChecker CLI class.; - modified CMakeLists to include above files. main/; - src/rntuplevsttree.cxx: Main entry point for CLI.; - Modified CMakeLists to include rntuplevsttree.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15904:233,interface,interface,233,https://root.cern,https://github.com/root-project/root/pull/15904,2,['interface'],['interface']
Integrability,# This Pull request:; Addition of FOAM tutorials into Python. ## Checklist:. - [ yes ] tested changes locally; - [ yes ] updated the docs (if necessary); - [ yes ] synchronized forked with master(latest-stable),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15574:164,synchroniz,synchronized,164,https://root.cern,https://github.com/root-project/root/pull/15574,1,['synchroniz'],['synchronized']
Integrability,# This Pull request:; Addition of Unique Pointer for TFile::Open -> Creation of Interface and implementation for the same. ## Changes or fixes:; Enables utilization of Unique Pointer for TFile::Open. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14017:80,Interface,Interface,80,https://root.cern,https://github.com/root-project/root/pull/14017,1,['Interface'],['Interface']
Integrability,"# This Pull request:; Adds a Complete translation of the Geometry-Tutorials into python. ## Changes or fixes:; It runs, it re-reruns, and it gets out of IPython without crashing memory.; The Root-Objects have been cautiously removed once they have been created by pyroot, this helps to run the scripts again-and-again without crashing memory, since ROOT hasn't the ownership of the Objects anymore.; Enjoy the pygeom tutorials, if so. ## Checklist:. - [ yes] tested changes locally; - [ yes] updated the docs (if necessary); - [ yes] synchronized forked with master(latest-stable). This PR fixes # . It doesn't fix anything but adds alternatives approach to use pyroot with; the Geometry Package.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15573:534,synchroniz,synchronized,534,https://root.cern,https://github.com/root-project/root/pull/15573,1,['synchroniz'],['synchronized']
Integrability,"# This Pull request:; Adds an optional safety parameter to : `TGeoManager::CheckPoint(Double_t x, Double_t y, Double_t z, Option_t *option, Double_t safety)`; ## Changes or fixes:; Backward-compatible interface change, allowing the user to inspect if a given distance is safe (not touching the volume surfaces neighbouring a point). ```cpp; gGeoManager->CheckPoint(4.00457, -62.4337, 4.46698);; === Check current point : (4.00457, -62.4337, 4.46698) ===; - path : /TOP_1; Safety radius : 35.433700; ```. ![root_arb8](https://github.com/root-project/root/assets/18400453/133e7f2e-a20b-4c89-b4c7-5587ba50df84). ```cpp; gGeoManager->CheckPoint(4.00457, -62.4337, 4.46698, """", 31.067 /*user-defined*/); === Check current point : (4.00457, -62.4337, 4.46698) ===; - path : /TOP_1; Safety radius : 31.067000; ```; ![surface](https://github.com/root-project/root/assets/18400453/425f7b02-24e2-486c-b8a4-0da323d7dd1a). ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary) Updated the class reference. This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14851:201,interface,interface,201,https://root.cern,https://github.com/root-project/root/pull/14851,1,['interface'],['interface']
Integrability,# This Pull request:; Adds the Physics Tutorial into Python. ## Checklist:. - [ yes ] tested changes locally; - [ yes ] updated the docs (if necessary); - [ yes ] synchronized forked with master(latest-stable),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15576:163,synchroniz,synchronized,163,https://root.cern,https://github.com/root-project/root/pull/15576,1,['synchroniz'],['synchronized']
Integrability,"# This Pull request:; Adds the rootreadspeed executable to the ROOT package. It allows for testing throughputs when reading .root files under various configurations. ## Changes or fixes:; - Integrates the source code into ROOT (under `tree/readspeed`); - Adds the `rootreadspeed` executable, runnable once ROOT has been installed; - Adds a new test suite for the readspeed application. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes - N/A",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11102:190,Integrat,Integrates,190,https://root.cern,https://github.com/root-project/root/pull/11102,1,['Integrat'],['Integrates']
Integrability,"# This Pull request:; Continue Adrian's work: This draft PR for testing the doxygen generation GitHub action with our self-hosted runners.; Uses our existing Makefile setup. Initial PR #16046. ## Status; Succeeded with building only docs for `core`.; The workflow first builds `root` without tests and then makes the Doxygen documentation. It also uploads it to GitHub as an artifact. ## Checklist:; - [x] **Test with build from scratch and all documentation folders**; - [x] Install latest version of `doxygen`, `qhelpgenerator` and other required packages in image at https://github.com/root-project/root-ci-images; - [ ] Upload result to website/S3; - [ ] Nightlies for different releases; - [ ] OPTIMIZATION: use build from existing build workflows instead of building again in this workflow. We could for example add a job in `root-master.yml` that only builds documentation after the `run_nightlies` job. Github actions support defining dependencies between jobs: https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow#defining-prerequisite-jobs. This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16724:943,depend,dependencies,943,https://root.cern,https://github.com/root-project/root/pull/16724,1,['depend'],['dependencies']
Integrability,"# This Pull request:; Continue Jollys work: This draft PR for testing the doxygen generation github action with our self-hosted runners.; Uses our existing Makefile setup. Initial PR #15337. ## Status; Succeeded with building only docs for `core`.; The workflow first builds `root` without tests and then makes the doxygen documentation. It also uploads it to GitHub as an artifact. ## Checklist:; - [x] **Test with build from scratch and all documentation folders**; - [x] Install latest version of `doxygen`, `qhelpgenerator` and other required packages in image at https://github.com/root-project/root-ci-images; - [ ] Upload result to website/S3; - [ ] Nightlies for different releases; - [ ] OPTIMIZATION: use build from existing build workflows instead of building again in this workflow. We could for example add a job in `root-master.yml` that only builds documentation after the `run_nightlies` job. Github actions supports defining dependencies between jobs: https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow#defining-prerequisite-jobs. This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16046:942,depend,dependencies,942,https://root.cern,https://github.com/root-project/root/pull/16046,1,['depend'],['dependencies']
Integrability,# This Pull request:; Development of the Instance Normalization operator for the Google Summer of Code 2021 project [Inference Code Generation for Batch Normalization](https://hepsoftwarefoundation.org/gsoc/2021/proposal_TMVAOperatorBatchnorm.html).; Depends on #8882. ## Checklist:. - [ x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8885:251,Depend,Depends,251,https://root.cern,https://github.com/root-project/root/pull/8885,1,['Depend'],['Depends']
Integrability,"# This Pull request:; Fixes a bug that occurred spuriously when exiting the ROOT interpreter after using `MultiProcess::Job` objects, which left child processes alive. ## Changes or fixes:; As explained in the comments added in the code in the commit in this PR, the `zmqSvc().close_context()` was called at the wrong moment, namely in the `Messenger` destructor. When this was called at program exit, it caused dereferencing of a destroyed (and in the meantime randomly overwritten) singleton pointer, which caused a segfault on some systems. This bug probably went unnoticed before because it is a case of ""static destruction order fiasco"", which makes it build command, OS and probably weather dependent. This also makes the `RooMinimizer::cleanup()` calls after tests unnecessary; they were used as a workaround for the above problem, because by manually destroying all `Job`s (which were held alive inside `RooMinimizer::_theFitter`, which is deleted by `RooMinimizer::cleanup`), the `JobManager` was also destroyed (when all Jobs are destroyed, the JobManager self-destructs as well) before the `ZeroMQSvc` singleton is destroyed by the exiting of the program (in the phase of destroying static state), so the ""random"" destruction order problem mentioned above did not occur. Thanks to @Zeff020 for discovering the bug. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9399:697,depend,dependent,697,https://root.cern,https://github.com/root-project/root/pull/9399,1,['depend'],['dependent']
Integrability,"# This Pull request:; Fixes some small issues with debug printout during integration or generation. ## Changes or fixes:; The first commit changes the debug printout in `RooRealIntegral::evaluate`. `_mode` here is the analytical integral code, `_intOperMode` is the variable that can be `Hybrid`, `Analytic` or `PassThrough` (like in the switch-case above). The second commit adds `printMultiline` to `RooEffGenContext`. This is used when requesting verbose printout during dataset generation, which is supposed to recursively print all gen contexts. Before this change, having a `RooEffProd` inside the model stopped the recursive printout. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12178:73,integrat,integration,73,https://root.cern,https://github.com/root-project/root/pull/12178,1,['integrat'],['integration']
Integrability,"# This Pull request:; Fixes validity of exported gdml file when the exported node is not the top geometry node. Adds error messages on gdml import errors, and deletes geometry manager in such case. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #9310",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10044:123,message,messages,123,https://root.cern,https://github.com/root-project/root/pull/10044,1,['message'],['messages']
Integrability,# This Pull request:; In EveManager::ImportSceneChangeJson remove REveElements objects which indices have been marked as deleted on the server. . ## Changes or fixes:; Error messages in delete of server elements on importSceneChangeJson. ## Checklist:. - [x ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8571:174,message,messages,174,https://root.cern,https://github.com/root-project/root/pull/8571,1,['message'],['messages']
Integrability,"# This Pull request:; Make changes in the class AdaptiveIntegratorMultiDim.; ## Changes or fixes:; Delete obscure conditions on evaluating integration status. The mentioned conditions are absent in the original RadMul algorithm. The problem with these conditions is in that they compare some arbitrary hard-coded constants with the absolute value of the integrated function. This lead to incorrect integration of some complicated function. Moreover, if one multiply integrand by some arbitrary factor and then divide the integral by it, then time and accuracy integration will change, but it shouldn't be so. For example, if integrated function return result of order 10^-38, then sometimes integration gives nonsense result with very low number of integrated function calls. The parameter RelAccuracy is not accounted for by the algorithm in this case (return result with some lower accuracy). But if the return value of integrated function multiply by 10^38 and then multiply the result of integration by 10^-38 then the integration gives the correct result with appropriate number of integrand calls. The parameter RelAccuracy then does work in this case. All this is because of mentioned hard-coded constants. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11826:139,integrat,integration,139,https://root.cern,https://github.com/root-project/root/pull/11826,10,['integrat'],"['integrated', 'integration']"
Integrability,"# This Pull request:; Move call to set the export precision to the lowest level of WriteGDML. ## Changes or fixes:; At the lower level interface setting the precision was impossible,. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11894:135,interface,interface,135,https://root.cern,https://github.com/root-project/root/pull/11894,1,['interface'],['interface']
Integrability,# This Pull request:; Moves the RSlotStack implementation from tree/dataframe/ to core/imt/. ## Changes or fixes:; Makes RSlotStack useable without requiring the whole of RDataFrame as a dependency. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes # N/A,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11249:187,depend,dependency,187,https://root.cern,https://github.com/root-project/root/pull/11249,1,['depend'],['dependency']
Integrability,"# This Pull request:; ProgressHelper is a class that offers callback functions for RDataFrame,; and can compute and print event statistics and a progress bar. With a change like this:; ```diff; --- a/tutorials/dataframe/df102_NanoAODDimuonAnalysis.C; +++ b/tutorials/dataframe/df102_NanoAODDimuonAnalysis.C; @@ -28,6 +28,7 @@; #include ""TLatex.h""; #include ""Math/Vector4D.h""; #include ""TStyle.h""; +#include ""ROOT/RDFHelpers.hxx""; ; using namespace ROOT::VecOps;; ; @@ -52,6 +53,9 @@ void df102_NanoAODDimuonAnalysis(); // Request cut-flow report; auto report = df_mass.Report();; ; + ROOT::RDF::ProgressHelper progress(10000, ROOT::RDF::CountEvents(""Events"", ""root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root""));; + h.OnPartialResultSlot(10000, [&progress](unsigned int slot, TH1D& histo){ progress(slot, histo); });; +; // Produce plot; gStyle->SetOptStat(0); gStyle->SetTextFont(42);; auto c = new TCanvas(""c"", """", 800, 700);; ```. one gets:; `bin/root -q ~/code/root-src/tutorials/dataframe/df102_NanoAODDimuonAnalysis.C+O`; ![image](https://user-images.githubusercontent.com/16205615/125669114-03ebfeb1-96e4-4dcc-afd9-b6690aafb4a1.png). ## TODO; - [ ] Write helpers that integrate this into the head node of RDF, preferably with a single line of code.; - [ ] *Optional*: Finalise callbacks for RDF, since a carriage return is always missing. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8675:1242,integrat,integrate,1242,https://root.cern,https://github.com/root-project/root/pull/8675,1,['integrat'],['integrate']
Integrability,"# This Pull request:; Solve the problem with a segfault in the tests. ## Changes or fixes:; * Changed the routines to eval R code in several methods on TRInterface.; * Fixed link to the documentation (ROOT-R Users Guide). ## Checklist:. - [X] tested changes locally; - [X] updated the docs (if necessary). This PR fixes # ; https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-v6-24-00-patches/93/LABEL=ROOT-centos7,SPEC=noimt,V=6-24/testReport/projectroot.roottest.root/core/roottest_root_core_execStatusBitsCheck/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8822:106,rout,routines,106,https://root.cern,https://github.com/root-project/root/pull/8822,1,['rout'],['routines']
Integrability,# This Pull request:; Synchronizes all changes dome in the materials. ## Changes or fixes:. ## Checklist:. - [ x] tested changes locally; - [ ] updated the docs (if necessary). This PR is requested in #11272,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11386:22,Synchroniz,Synchronizes,22,https://root.cern,https://github.com/root-project/root/pull/11386,1,['Synchroniz'],['Synchronizes']
Integrability,"# This Pull request:; This draft PR for testing the doxygen generation github action with our self-hosted runners.; Uses our existing Makefile setup. ## Status; Succeeded with building only docs for `core`.; The workflow first builds `root` without tests and then makes the doxygen documentation. ## Checklist:; - [x] **Test with build from scratch and all documentation folders**; - [ ] Install latest version of `doxygen`, `qhelpgenerator` and other required packages in image at https://github.com/root-project/root-ci-images; - [ ] Upload result to website/S3; - [ ] Nightlies for different releases; - [ ] OPTIMIZATION: use build from existing build workflows instead of building again in this workflow. We could for example add a job in `root-master.yml` that only builds documentation after the `run_nightlies` job. Github actions supports defining dependencies between jobs: https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow#defining-prerequisite-jobs",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15337:856,depend,dependencies,856,https://root.cern,https://github.com/root-project/root/pull/15337,1,['depend'],['dependencies']
Integrability,"# This Pull request:; This is a follow up of https://github.com/root-project/root/pull/13748, which was modified by ; @guitargeek to fix the unnecessary use of exceptions. ## Changes or fixes:; Made the static function `TH1::CheckConsistency` public, and changed its return type to `Int_t`.; Since the meaning of the returned integer is actually part of `EInconsistencyBits`, I made the `enum` public as well (but left the return value type to `Int_t`). This is done in a separate commit in case it is decided to keep the `enum` itself as an implementation detail. ## Motivation; At the moment `TH1::CheckConsistency` is called internally by `TH1::Add`, and error messages are print in case of failure, but continues the execution. Making it public allows user code to manually check the consistency to catch errors and stop the program. This is especially useful for programs that make hundreds of `Add`s, out of which only a few fail, and the error messages may be lost in logs and go unnoticed. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14077:664,message,messages,664,https://root.cern,https://github.com/root-project/root/pull/14077,2,['message'],['messages']
Integrability,# This Pull request:; Translated Matrix-Tutorials into Python. ## Checklist:. - [ yes ] tested changes locally; - [ yes ] updated the docs (if necessary); - [ yes ] synchronized forked with master(latest-stable),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15575:165,synchroniz,synchronized,165,https://root.cern,https://github.com/root-project/root/pull/15575,1,['synchroniz'],['synchronized']
Integrability,"# This Pull request:; Translates the tutorials of the `root/tutorials/v7` into Python language.; Some of them have C++ wrappers(simple extension module) to achieve their functionality and match ; the behavior of its corresponding C++ version.; As suggested by cppyy documentation, first they(the wrappers) are compiled, then they are loaded in the Python script. ## Checklist:; - [yes] tested changes locally; - [yes] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16657:119,wrap,wrappers,119,https://root.cern,https://github.com/root-project/root/pull/16657,2,['wrap'],['wrappers']
Integrability,"# This Pull request:; adds an option to CreateModel: `fForwardCompatible`. If true, the model will be created successfully even if the RNTuple contains unknown column types, and all fields that recursively contain one will be skipped and won't appear in the model. ## Notes:; Depends on #16627; #16602 will be rebased on this. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16631:276,Depend,Depends,276,https://root.cern,https://github.com/root-project/root/pull/16631,1,['Depend'],['Depends']
Integrability,"# This Pull request:; adds the `-Ddev=on` flag on the debian CI machine. It's a ""test run"" to see if we can later enable it on more (potentially all) build machines. Here's what the flag does:; - enables asserts; - (Linux|BSD) enables -Werror; - (Linux|BSD) does not relink if a dependent .so has changed (CMAKE_LINK_DEPENDS_NO_SHARED On); - (Linux|BSD) splits debug info (-gsplit-dwarf); - (Linux|BSD) uses lld if available; - defines USE_LESS_INCLUDES",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15853:279,depend,dependent,279,https://root.cern,https://github.com/root-project/root/pull/15853,1,['depend'],['dependent']
Integrability,"# This Pull request:; by @hahnjo suggestion, since we are exposing a type-erased virtual interface for `RColumnElement` through `RColumnElementBase`, we can hide all the concrete definitions into a cxx file.; This has the benefit of reducing the compile time of any translation unit that includes `RColumnElementBase.hxx` significantly, as the compiler won't have to instantiate all the combination matrix of `RColumnElement<CppT, ColumnType>` every time.; It also let us have better control on exactly which types of `RColumnElement` we allow to instantiate by explicitly listing them into a proxy enum. ## Changes or fixes:; - renamed `RColumnElement.hxx` to `RColumnElementBase.hxx`; - moved all concrete definitions from `RColumnElementBase.hxx` to `src/RColumnElement.hxx`. This is a private header file that is included by `RColumnElement.cxx` and by `ntuple_endian.cxx`. The reason to separate this from `RColumnElement.cxx` is that `ntuple_endian.cxx` needs to simulate a big-endian machine by defining `R__LITTLE_ENDIAN 0`, which changes the definitions of some `RColumnElement`s. To avoid including the whole `RColumnElement.cxx` in the test, we decided to split the definitions into a file that can be included independently by the test. It's not a perfect solution (the test executable ends up with mismatching instantiations of RColumnElement since it links to libROOTNTuple.so) but it's technically not worse than before. We still might want to think of alternative solutions.; - introduces an enum `EColumnCppType` that lists all the allowed c++ in-memory types for RColumnElement. This is used internally to map the templated `RColumnElementBase::Generate` to a non-templated function that can be implemented in the cxx file. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16299:89,interface,interface,89,https://root.cern,https://github.com/root-project/root/pull/16299,1,['interface'],['interface']
Integrability,"# This Pull request:; depends on https://github.com/root-project/root/pull/15553. The interesting file to look at is `ntuple_compat.cxx`. Adding some RNTuple compat tests where we handcraft an on-disk representation for a RNTuple (and its wrapping TKey) and we try to read it back to verify it works.; The reason to do this is that we can then mess around with the binary representation to simulate both a corrupted payload and a future version of RNTuple, which allows to test forward compatibility. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15618:22,depend,depends,22,https://root.cern,https://github.com/root-project/root/pull/15618,2,"['depend', 'wrap']","['depends', 'wrapping']"
Integrability,# This Pull request:; gives RNTupleMerger the capability of changing the source RNTuples' compression while doing the merging. This can also be used to change the compression of a single RNTuple. Depends on #15954 . ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15992:196,Depend,Depends,196,https://root.cern,https://github.com/root-project/root/pull/15992,1,['Depend'],['Depends']
Integrability,"# This Pull request:; is the first half of #15714. It deprecates `ECompressionAlgorithm` in favor of `RCompressionSetting::EAlgorithm` and fixes the code to use the new enum.; This PR should be much safer and less problematic to merge than #15714, so we can start with this and later discuss about changing the `RCompressionSetting` enums to enum classes. Depends on #15820 . ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15821:356,Depend,Depends,356,https://root.cern,https://github.com/root-project/root/pull/15821,1,['Depend'],['Depends']
Integrability,"# This Pull request:; refactors RNTupleMerger to properly support late model extension.; The ""Union"" merging mode is added, allowing the merger to late-model-extend the destination to include all the fields of the input ntuples (instead of ignoring unknown fields / complaining when models don't match).; Likewise, the ""Strict"" merging mode is added that checks that all inputs have the exact same structure.; By default, the old behavior (named ""Filter"") is used. To better compare the RNTuples structures, the merging logic is now more properly considering the fields of each input, rather than just the columns as it was previously. This also allows for more descriptive messages to the user if some mismatch is found. NOTE: the `RNTupleMerger::Merge` function now returns a RResult instead of throwing exceptions on error. ## TODO; - the new merging modes should be exposed to hadd. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16080:674,message,messages,674,https://root.cern,https://github.com/root-project/root/pull/16080,1,['message'],['messages']
Integrability,"# This Pull request:; uses `RNTuple::fMaxKeySize` to split any payload larger than that into multiple chunks, each backed by a TKey. These keys are then read back as a single object. Depends on #15869. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15776:183,Depend,Depends,183,https://root.cern,https://github.com/root-project/root/pull/15776,1,['Depend'],['Depends']
Integrability,"# Udate cppyy. *Sister PR in `roottest`: https://github.com/root-project/roottest/pull/1071*. ## Summary. Synchronizes the [CPyCppyy](https://github.com/wlav/CPyCppyy) CPython extension and [cppyy](https://github.com/wlav/cppyy) Python library with upstream to fix bugs, add features, and avoid duplicate maintenance efforts. ## Behavior changes. ### No implicit conversion from fixed-sized char buffers to null-terminated string. If you have a `char` buffer with constant size, people might use it for different things. For example, to store null-terminated short strings in a TTree. Therefore, the current PyROOT converts such buffers to Python strings. However, that means it's impossible to get the full buffer if it contains zeros, which can be useful if the buffer doesn't contain a string but for example some status bytes. Therefore, the used is not required to *explicitly convert the buffer to a Python string* with the `as_string()` method. Demo:; ```python; import ROOT. ROOT.gInterpreter.Declare("""""". struct Struct {; char char_buffer[5] {};; };. void fill_char_buffer(Struct & st); {; std::string foo{""foo""};; std::memcpy(st.char_buffer, foo.data(), foo.size());; }. """"""); struct = ROOT.Struct(); ROOT.fill_char_buffer(struct); char_buffer = struct.char_buffer. # With thew new cppyy, you get access to the lower level buffer instead:; print(""struct.char_buffer : "", char_buffer). # However, you can turn the buffer into a string very easily with as_string():; print(""struct.char_buffer.as_string(): "", char_buffer.as_string()); ```; The output:; ```txt; struct.char_buffer : <cppyy.LowLevelView object at 0x74c7a2682fb0>; struct.char_buffer.as_string(): foo; ```. ## Associated GitHub issues. This will close the following GitHub issue:; * https://github.com/root-project/root/issues/12718; * https://github.com/root-project/root/issues/7686; * https://github.com/root-project/root/issues/11924; * https://github.com/root-project/root/issues/12230; * https://github.com/root-project/roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14507:106,Synchroniz,Synchronizes,106,https://root.cern,https://github.com/root-project/root/pull/14507,1,['Synchroniz'],['Synchronizes']
Integrability,"## Changes or fixes:; Let `a_t` be a c++ class, and we have done `using std::ostream;`.; In standalone cling cmd prompt, all of the below function definitions fail to be parsed and compiled(incrementally).; ```; ::a_t& ::a_t::operator()(int k) {return *this; }; const a_t& a_t::operator[](int k) const {return *this; }; a_t::a_t() = default;; a_t::~a_t() = delete;; ::a_t& ::a_t::operator()(int k) {return *this; }; std::ostream& operator>>(std::ostream& os, const a_t& a) {return (os << a.str << '\n');}; ostream& operator>>(std::ostream& os, const a_t& a) {return (os << a.str << '\n');}; const std::ostream& operator """" _tt(unsigned long long t) {return std::cout << ""tt is "" << t << '\n'; }; ::a_t& operator>=(a_t &lhs, int t) {return lhs; }; a_t& operator<=(::a_t &lhs, int t) {return lhs; }; const a_t& operator<(a_t &lhs, int t) {return lhs; }; const ::a_t& operator>(a_t &lhs, int t) {return lhs; }; ```; They get ""error: function definition is not allowed here"" due to `cling::utils::getWrapPoint()` wrongly determines to wrap function definition inside wrapper function `__cling_Un1Qu3...` . The root cause is that `MinimalPPLexer::IsClassOrFunction()` does not parse them as function definitions. This pullrequest enables `MinimalPPLexer::IsClassOrFunction()` to parse these kinds of func def but there are probably more edge cases of standard c++ func def not being recognized by `MinimalPPLexer::IsClassOrFunction()`. ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes ""error: function definition is not allowed here"" ( https://github.com/root-project/cling/issues/184 ).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11265:1031,wrap,wrap,1031,https://root.cern,https://github.com/root-project/root/pull/11265,2,['wrap'],"['wrap', 'wrapper']"
Integrability,"## Changes or fixes:; added/modified MinInt, MaxInt, IntRndm.; added test of Integer interface. ## Checklist:. - [ x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12410:85,interface,interface,85,https://root.cern,https://github.com/root-project/root/pull/12410,1,['interface'],['interface']
Integrability,"## Changes:. This PR introduces a major refactoring of the `RooAbs(Opt)TestStatistic`-`RooNLLVar` inheritance tree into:. 1. statistics-based classes on the one hand;; 2. calculation/evaluation/optimization based classes on the other hand. The likelihood is the central unit on the statistics side. The `RooAbsL` class is implemented for four kinds of likelihoods: binned, unbinned, ""subsidiary"" (an optimization for numerical stability that gathers components like global observables) and ""sum"" (over multiple components of the other types). These classes provide ways to compute their components in parallelizable chunks that can be used by the calculator classes as they see fit. On top of the likelihood classes, we also provide for convenience a set of likelihood builders. The calculator ""`...Wrapper`"" classes are abstract interfaces. These can be implemented for different kinds of algorithms, or with different kinds of optimization ""back-ends"" in mind. In an upcoming PR, we will introduce the fork-based multi-processing implementation based on `RooFit::MultiProcess`. Other possible implementations could use the GPU or external tools like TensorFlow. The coupling of all these classes to `RooMinimizer` is made via the `MinuitFcnGrad` class, which owns the `...Wrappers` that calculate the likelihood components. ## Todo:. There are still a couple of things that require attention, which I hope the reviewers can help me with:. 1. I have a Kahan summation helper class. This should probably be replaced with the new Kahan summation class in ROOT itself, but I didn't get to this yet. Maybe it is not urgent to do now, up for discussion.; 2. `likelihood_builders.cxx` is still missing the top level entry point function. This should be quite a simple function: it should just check whether the pdf is binned, unbinned or sum and has subsidiary terms. All the building blocks are already present, so it is just a matter of building it, but didn't get to it yet.; 3. `optional_parameter_type",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8700:799,Wrap,Wrapper,799,https://root.cern,https://github.com/root-project/root/pull/8700,2,"['Wrap', 'interface']","['Wrapper', 'interfaces']"
Integrability,"## Describe the bug. Templated ctors cannot be called on Windows because demangling of the constructor *template* (!) fails - likely because there is no mangling standard for the template. See https://github.com/root-project/root/blob/master/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1693. ## Expected behavior. Template ctor should be called. ## To Reproduce. @hageboeck has it. ## Setup. Master, with MSVC. ## Additional context. Instead of demangling and looking for '<' we could add a new interface: `TFunction::`-is-this-a-template.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6393:522,interface,interface,522,https://root.cern,https://github.com/root-project/root/issues/6393,1,['interface'],['interface']
Integrability,"## Describe the bug; As discussed in the [ROOT forum](https://root-forum.cern.ch/t/root-memstat-doesnt-work/41455):; WIthout the memstat feature, `root.exe` still offers the `-memstat` option but produced failures like; ```; input_line_11:2:6: error: unknown type name 'TMemStat'; new TMemStat("""",100000,5000000);; ```. ## Expected behavior; If memstat is not part of the build, the memstat option should not be offered or there should be a clearer error message. ## To Reproduce; Steps to reproduce the behavior:; 1. Compile with `cmake -Dmemstat=off`; 2. Run `root -l`. ## Setup; 1. Master; 2. Arch Linux; 3. Built from sources",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6410:455,message,message,455,https://root.cern,https://github.com/root-project/root/issues/6410,1,['message'],['message']
Integrability,"## Description; Development of the functionality for parsing a PyTorch PT file to ROOT format using the Fast Inference System SOFIE for the **ROOT Storage of Deep Learning Models** Project of *Google Summer of Code'21*. Project Link: https://summerofcode.withgoogle.com/projects/#5424575602491392. ## Progress; - [x] Parser function for extracting the model information and weights and instantiate a RModel Object; - [x] Support for PyTorch nn.Module, nn.Sequential, nn.ModuleList containers.; - [x] Supports Linear, ReLU and Transpose Layers/operations.; - [x] Header file for the function; - [x] Function implementation . ## Interface; The parser requires the shape and data type of the input tensors. Shape is a mandatory parameter, whereas the function defaults to Float data-type for the input tensors, if not explicitly mentioned.; ; **Example usage**; ```; std::vector<size_t> s1{120,1};; std::vector<std::vector<size_t>> inputShape{s1};; auto model = TMVA::Experimental::SOFIE::PyTorch::Parse(""trained_model_dense.pt"",inputShape);; ```; ; ## Checklist:; - [x] tested changes locally; - [x] Parser. ## Tests ; - [x] Emit Files for generating header files; - [x] Tests for Parser; - [x] CMake Configuration for tests . ## Documentation; - [x] Doxygen Docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8684:627,Interface,Interface,627,https://root.cern,https://github.com/root-project/root/pull/8684,1,['Interface'],['Interface']
Integrability,"## Description; Development of the functionality for parsing and converting a Keras H5 file to ROOT format using the Fast Inference System SOFIE for the **ROOT Storage of Deep Learning Models** Project of *Google Summer of Code'21*. Project Link: https://summerofcode.withgoogle.com/projects/#5424575602491392. ## Progress; - [x] Restructured SOFIE to avoid dependency conflicts between different Python libraries; - [x] Parser function for extracting the model information and weights and instantiate a RModel Object ; - [x] Support for Keras Sequential API Models ; - [x] Support for Keras Functional API Models ; - [x] Supports Dense (with relu activation),ReLU and Permute Layers ; - [ ] ~~Support for Keras Subclassing Models~~ (Currently not supported by Root); - [x] Header file for the function ; - [x] Function implementation ; ; ## Checklist:; - [x] tested changes locally; - [x] Parser. ## Tests; - [x] Emit Files for generating header files; - [x] Tests for Parser; - [x] CMake Configuration for tests. ## Documentation ; - [x] Doxygen Docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8430:358,depend,dependency,358,https://root.cern,https://github.com/root-project/root/pull/8430,1,['depend'],['dependency']
Integrability,"## Description; This PR restructures SOFIE by separating the RModelParser_ONNX to a different directory which depends on Protobuf. . Keeping the RModelParser_ONNX in a different directory prevents any clash or segmentation violation which may happen while using the Converters for translating external models like Keras into RModel, as they can have dependency issues with Protobuf. ## Checklist:; - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8594:110,depend,depends,110,https://root.cern,https://github.com/root-project/root/pull/8594,2,['depend'],"['dependency', 'depends']"
Integrability,"## Expected behavior; <!--; -->; build process completes. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; standard cmake build process, as described in the guide. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; ROOT v6-26-10 (@4dddea35); FreeBSD 13.2 RELEASE (clang 14.0.5), required dependencies installed from ports. ### Additional context; <!--; Add any other context about the problem here.; -->. a port exists v6-28-02 (development/root), installs in binary form (so somebody got it to compile, did not have too much time to test it thoroughly). In my case, however, the port also does not compile, craps out somewhere else. plus it hauls in too many dependencies so it is less than ideal.; I imagine getting it to work on FreeBSD would not end at fixing this issue here. The fbsd port maintainer has some patches which might help, but I have also seen that e.g. procfs is deprecated in new releases and libprocstat has to be used, etc, etc.; With that being said, it would be extremely nice to get ROOT to work on FreeBSD...; thanks,. ```; [ 52%] Built target rootcling_stage1; [ 52%] Generating G__Core.cxx, ../lib/Core.pcm; #0 0x000000000446e3d5 llvm::sys::PrintStackTrace(llvm::raw_ostream&) Signals.cpp:0:0; #1 0x000000000446c646 llvm::sys::RunSignalHandlers() Signals.cpp:0:0; #2 0x000000000446eba6 SignalHandler(int) Signals.cpp:0:0; #3 0x0000000826961b60 (/lib/libthr.so.3+0x19b60); #4 0x000000082696111f (/lib/libthr.so.3+0x1911f); #5 0x00007ffffffff8a3 ([vdso]+0x2d3); #6 0x000000082da5f7b4 strlen (/lib/libc.so.7+0x1587b4); #7 0x00000000016482c9 std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::basic_string<",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12787:1420,depend,dependencies,1420,https://root.cern,https://github.com/root-project/root/issues/12787,1,['depend'],['dependencies']
Integrability,## Explain what you would like to see improved; The current crash message of root applications contains; ```; You may get help by asking at the ROOT forum http://root.cern.ch/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at http://root.cern.ch/bugs; ```. ## Optional: share how it could be improved; The message could be updated to point the users to https://github.com/root-project/root. ## To Reproduce; Crash root in any way. ## Setup; Any,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6540:66,message,message,66,https://root.cern,https://github.com/root-project/root/issues/6540,2,['message'],['message']
Integrability,"## Explain what you would like to see improved; When using [pullHist](https://root.cern.ch/doc/master/classRooPlot.html#a0d3911db1f4e0ba5cfcf9e182eea3ed0), don't take curve at bin centre, but integrate curve over the bin. That should fix the following pull plot:; | Wrong | Correct |; | ---- | ---- |; | ![oneToy_old](https://user-images.githubusercontent.com/16205615/108328256-acb8ee80-71cc-11eb-9eb1-f3edb2a3b855.png) | ![oneToy_new](https://user-images.githubusercontent.com/16205615/108328286-b5112980-71cc-11eb-9fa0-67ccba717d9b.png) |. ### Optional: share how it could be improved; - Alter this part of the function:; https://github.com/root-project/root/blob/478d84e4035c74d55511a01372e2bd0b7c8b60a7/roofit/roofitcore/src/RooHist.cxx#L777-L787; - Instead of interpolating the curve to the middle of the bin, find the bin edges from RooHist using the x errors. (Note that RooHist inherits from [TGraphAsymErrors](https://root.cern.ch/doc/master/classTGraphAsymmErrors.html)).; - Then, find the corresponding points on the PDF curve.; - Then, [integrate](https://root.cern.ch/doc/master/classTGraph.html#a06b6dfc69d4fe9336ade71a47864f974) the PDF curve from the first to the last point from above step. ### Code to produce such a plot; From [here](https://github.com/hageboeck/rootNotebooks/blob/master/BinSamplingPdf.ipynb); ```c++; RooRealVar x(""x"", ""x"", -10, 10);; x.setBins(20);; RooRealVar m(""m"", ""mean"", 1.5, -10, 10);; RooRealVar s(""s"", ""sigma"", 0.5, -10, 10);; RooGaussian gaus(""gaus"", ""Gaussian distribution"", x, m, s);. RooDataSet* dataset = gaus.generate(x, 10000);; RooDataHist binnedDataset(""binnedData"", ""BinnedData"", x, *dataset);. TCanvas c(""c"", ""Pull demo"", 1200, 800);; c.Divide(2,2);. c.cd(1);; auto frame = x.frame();; dataset->plotOn(frame);; gaus.plotOn(frame);; frame->Draw();. c.cd(3);; auto pulls = frame->pullHist();; pulls->Draw(""P"");; c.Draw();; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7239:192,integrat,integrate,192,https://root.cern,https://github.com/root-project/root/issues/7239,2,['integrat'],['integrate']
Integrability,"## Is your feature request related to a problem? Please describe. ROOT compilation requires hours of compilation time (up to 10 hours on virtual machines such as CI bots, and I hasn't seen compilation time less than an hour by now). ROOT takes hundreds of megabytes (600 - 800?) of space and requires a number of dependencies. This both greatly affects image sizes (e.g. docker) which, in turn, affects many areas such as automated testing, CI, transferring to farm nodes, even using in cloud resources and binder. . If one dares to build ROOT with it dependencies in something like Spack or other kind build scripts which take root dependencies into account and work on older system (which is a standard in HENP community) it just takes forever. Even If one uses something like Conda with precompiled ROOT binaries it quickly eats couple of gigabytes of space and still takes time. . Yet **many application require just a minimal ROOT IO** with saving data to files in ROOT format. Even without reflection, generating dictionaries and etc. - flat root files with `vector<value>` as the max complexity. . ## Describe the solution you'd like. In the ideal world I would be glad to have really modular ROOT build where I could choose that I want to have just a basic IO and get root installation witch is done in minutes and resulting binaries would be just megabytes in size. . ## Describe alternatives you've considered. - Surprisingly one can achieve such behavior with uproot. The only caveat is that you have to call python from C++ which is slow and feels perverse. Still compilation time of the whole python is much less and for sure python is preinstalled on all linux systems. . - Geant4 has some C++ library for writing root files and one even can find it on github ([It is diana_hep. Isn't it?](https://github.com/diana-hep/inexlib_rio)) but it doesn't allow to save something like arrays or something like `vector<double>`. I'm talking about at least some basic IO but not that basic. uproot",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6471:313,depend,dependencies,313,https://root.cern,https://github.com/root-project/root/issues/6471,3,['depend'],['dependencies']
Integrability,"## Profiler for inspecting C++ models generated with SOFIE; Added a new class called `RModelProfiler` that allows to generate an hardcoded C++ header that automatically measures the time that each operator took during one or more runs of the `infer` function. In other words it profiles the model by means of _code instrumentation_. ### Under the hood; `RModelProfiler` is a friend class of `RModel` that initializes a private reference to an existing `RModel` object.; When the code is generated through `RModelProfiler::Generate()` (rewritten to inject profiling code in between operators), the latter access the private member `fGC`, thus generating the model directly into the `RModel` object.; In the generated code, profiling info such as time (microseconds) are saved in `::profiler_results`. ### Affine changes; - Added public member `std::string name` in `ROperator` (e.g. Gemm_1, ..).; - Changed `make_ROperator()` so that is assigns `name` of the operator with the one it had within the original ONNX model.; - Added an example of how to use the profiler in `README.md`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8957:548,inject,inject,548,https://root.cern,https://github.com/root-project/root/pull/8957,1,['inject'],['inject']
Integrability,"## SOFIE-SYCL; SOFIE-SYCL extends SOFIE functionality so that SYCL inference code can be generated for Intel GPUs using Intel oneAPI libraries for the BLAS routines. This functionality is already enabled by default when -Dtmva-sofie=On. The inference code should be compiled with a SYCL compiler and linked against the Intel oneAPI MKL library. Currently, the only SYCL Implementation supported is IntelDPCPP. The correctness of the SYCL implementations of the ONNX Operators has been tested with the SOFIE gtests. Also, missing gtests for BatchNormalization, Slice, Transpose have been added. In addition, the transpose convolution for 3d (ConvTranspose3d) operator that was not supported before has been added for both C++ and SYCL inference code, as well as the respective gtest.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13550:156,rout,routines,156,https://root.cern,https://github.com/root-project/root/pull/13550,1,['rout'],['routines']
Integrability,"## The problem. In the [bindings/pyroot/pythonizations/CMakeLists.txt](https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/CMakeLists.txt) file, the following code is used to compile the Python sources. ```cmake; # Compile .py files; foreach(py_source ${py_sources}); install(CODE ""execute_process(COMMAND ${python_executable} -m py_compile ${localruntimedir}/${py_source})""); install(CODE ""execute_process(COMMAND ${python_executable} -O -m py_compile ${localruntimedir}/${py_source})""); endforeach(); ```. However, with this `execute_process` trick, there is no error code checking, so it often happens that the compilation actually fails with Python 2 because the Pythonizations use features that are only available in Python 3!. I notice this when trying to replace this ""install-to-build-directory"" trick with proper CMake targets, kind of like this:. ```cmake; # Compile .py files; foreach(py_source ${py_sources}); add_custom_command(TARGET ${libname}; COMMAND ${python_executable} -m py_compile ${localruntimedir}/${py_source}; COMMAND ${python_executable} -O -m py_compile ${localruntimedir}/${py_source}; DEPENDS ${localruntimedir}/${py_source}; COMMENT ""Compiling ${py_source} for ${libname}""); endforeach(); ```. With `add_custom_command`, failures in compiling the Python sources causes the build to fail (as it should be I think). ## What needs to be done to fix this issue. * Have CMakes error out when Python compilation fails by using `add_custom_command`; * Make the Pythonization sources compatible with Python 2...; * ... except for the sources that should [only be used for Python 3](https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/CMakeLists.txt#L17). For these, the compilation should be done only with Python 3 (logic to do this needs to be added to the CMakeLists.txt)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11437:1143,DEPEND,DEPENDS,1143,https://root.cern,https://github.com/root-project/root/issues/11437,1,['DEPEND'],['DEPENDS']
Integrability,## This PR introduces new functionality in REve to draw and browse TGeo geometry; * Use JSROOT tessellation to draw TGeo geometry in 3D REve Viewer. Support Three.js and RenderCore renderers.; * Introduce REveGeoTopNode to draw TGeo geometry with given path and visibility level.; * Integrate JSROOT geo hierarchy browser in REveGeo table. ### Test macro demonstrating geometry table and ReveGeoTopNode. The macro is located in `tutorials/eve7/eveGeoBrowser.C`; ![Screenshot from 2024-10-31 15-26-59](https://github.com/user-attachments/assets/b973c2ef-06b3-445c-80a5-a89aea9ec43b). ### Test macro demonstrating two REveGeoTopNodes without geometery table. The test macro is located in `tutorials/eve7geoTopNode.C`; ![Screenshot from 2024-10-31 15-30-55](https://github.com/user-attachments/assets/94d2dee0-0a97-4396-921a-bb7dd4494553),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16806:283,Integrat,Integrate,283,https://root.cern,https://github.com/root-project/root/pull/16806,1,['Integrat'],['Integrate']
Integrability,"## This Pull request:. Development of the ConvTranspose operator for TMVA/SOFIE. Depends on #11382. ## Checklist:. - [x] tested changes locally; - [x] tests for 1d, 2d and 3d ConvTranspose",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11309:81,Depend,Depends,81,https://root.cern,https://github.com/root-project/root/pull/11309,1,['Depend'],['Depends']
Integrability,"## This Pull request:. This is to follow-up on the mistake I did when performing the rebase for the [previous PR](https://github.com/root-project/root/pull/9665). ; Stating the PR message for clarity. The pull request add the tutorials for the lagrangian ; morphing class and also add an example for the factory interface. The are some accompanying ; fixes as listed below.; Please take a look and let me know if this looks good !. ## This Pull request:. - Add two tutorials `rf711_lagrangianmorph` and `rf712_lagrangianmorphfit` to demonstrate ; the usage of the `RooLagrangianMorphFunc` class; - The PR also includes an update to `rf512_wsfactory_oper` showing an example for the new; options of `taylorexpand` and `lagrangianmorph`; ; ## Changes or fixes:; - formatting of `tutorials/roofit/rf710_roopoly.py`; - The attribute for new physics couplings in the `RooLagrangianMorphFunc` class is changed ; from `NP` to `NewPhysics` to avoid confusion with other abbreviations; - The `lagrangianmorph` factory interface is update to accept arguments in any order. ## Checklist:. - [x] tested changes locally. Cheers,; Rahul",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9680:180,message,message,180,https://root.cern,https://github.com/root-project/root/pull/9680,3,"['interface', 'message']","['interface', 'message']"
Integrability,## This Pull request:; Development of the Gated Recurrent Unit operator for the Google Summer of Code project [Inference Code Generation for Recurrent Neural Networks](https://summerofcode.withgoogle.com/projects/#5885532631990272).; Depends on #8800 and #8881. ## Checklist:. - [ x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8847:234,Depend,Depends,234,https://root.cern,https://github.com/root-project/root/pull/8847,1,['Depend'],['Depends']
Integrability,## This Pull request:; Development of the Long Short-term Memory operator for the Google Summer of Code project [Inference Code Generation for Recurrent Neural Networks](https://summerofcode.withgoogle.com/projects/#5885532631990272).; Depends on #8800 and #8881. ## Checklist:. - [ x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8846:236,Depend,Depends,236,https://root.cern,https://github.com/root-project/root/pull/8846,1,['Depend'],['Depends']
Integrability,## This Pull request:; Development of the Recurrent Neural Network operator for the Google Summer of Code project [Inference Code Generation for Recurrent Neural Networks](https://summerofcode.withgoogle.com/projects/#5885532631990272).; Depends on #8800 and #8881. ## Checklist:. - [ x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8825:238,Depend,Depends,238,https://root.cern,https://github.com/root-project/root/pull/8825,1,['Depend'],['Depends']
Integrability,## This Pull request:; Use the member functions GetBlasRoutines and GetStdLibs in the operators to specify the blas routines and the standard library headers needed to compile and run the generated code. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11639:116,rout,routines,116,https://root.cern,https://github.com/root-project/root/pull/11639,1,['rout'],['routines']
Integrability,"## To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. The first line executed is invalid C++ code, and cling rightly complains. The second line is valid code, but cling does not seem to be able to compile it after the previous compilation failure. Opening a new ROOT prompt and directly inserting the valid code works fine. ```; ~ root -l; root [0] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"");; ROOT_prompt_0:1:53: error: no matching member function for call to 'Snapshot'; /*** snip ***/; root [1] ROOT::RDataFrame(10).Define(""x"", [] { return 42; }).Snapshot<int>(""t"", ""f.root"", {""x""});; IncrementalExecutor::executeFunction: symbol '_ZStanSt12memory_orderSt23__memory_order_modifier' unresolved while linking [cling interface function]!; You are probably missing the definition of std::operator&(std::memory_order, std::__memory_order_modifier); Maybe you need to load the corresponding shared library?; ```. ## Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->. ROOT master@3ae45ea5f9, RelWithDebInfo.; I could not reproduce with master@dcac6e1bf0, Debug build type.; The 6.22.02 conda package also seems to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6439:983,interface,interface,983,https://root.cern,https://github.com/root-project/root/issues/6439,1,['interface'],['interface']
Integrability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Describe the bug. In an ongoing development we have an external pulled into a header (SYCL related); that header has a static variable. JITting that header triggers static initialization which need the library to be loaded to resolve the symbol. That library doesn't get loaded when generating module.idx causing a missing symbol. (We had a similar case with Vc in the past, IIRC.). ### What is the expected behaviour?. No error message when generating `module.idx`. ### How to reproduce?. This can be reproduced with a modified ROOT:; ```diff; diff --git a/tree/dataframe/inc/ROOT/RDataFrame.hxx b/tree/dataframe/inc/ROOT/RDataFrame.hxx; index 7a094cc01f..d74c69aa2b 100644; --- a/tree/dataframe/inc/ROOT/RDataFrame.hxx; +++ b/tree/dataframe/inc/ROOT/RDataFrame.hxx; @@ -73,4 +73,6 @@ namespace cling {; std::string printValue(ROOT::RDataFrame *tdf);; } // ns cling; ; +static ROOT::RDataFrame thisWillBeBadForTheModulesIdx(17);; +; #endif // ROOT_RDATAFRAME; ```. This causes; ```; [522/527] Generating lib/modules.idx; [runStaticInitializersOnce]: Failed to materialize symbols: { (main, { __cxx_global_var_initcling_module_1_.2, __cxx_global_var_initcling_module_1_, _ZL29thisWillBeBadForTheModulesIdx, _ZN4ROOT8InternalL13gVersionCheckE, $.cling-module-1.__inits.0, _ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv, _ZNSt10shared_ptrIN4ROOT6Detail3RDF12RLoopManagerEED2Ev, _ZNSt12__shared_ptrIN4ROOT6Detail3RDF12RLoopManagerELN9__gnu_cxx12_Lock_policyE2EED2Ev, _ZN4ROOT10RDataFrameD2Ev, _ZN4ROOT3RDF10RInterfaceINS_6Detail3RDF12RLoopManagerEvED2Ev, _ZN4ROOT10RDataFrameD1Ev, _ZN4ROOT3RDF14RInterfaceBaseD2Ev, _ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE19_M_release_last_useEv, _GLOBAL__sub_I_cling_module_1, _ZNSt10shared_ptrIN4ROOT6Detail3RDF12RLoopManagerEED1Ev, _ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED2Ev, _ZStL8__ioinit, __cxx_global_var_initcling_module_1_.1, _ZNSt16_Sp_counted_baseI",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12988:491,message,message,491,https://root.cern,https://github.com/root-project/root/issues/12988,1,['message'],['message']
Integrability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Describe the bug. https://github.com/root-project/root/blob/master/core/foundation/inc/ROOT/span.hxx#L153. Manipulating in any way the std namespace should not be done, this is why namespace exists in the first place, to separate things. In this case this will collide with https://en.cppreference.com/w/cpp/container/span. ### What is the expected behaviour?. If you want / need to use a span adaptor and you can not use c++20 do not inject in the std namespace but use another one, this is why namespace exists!. ### How to reproduce?. https://github.com/root-project/root/blob/master/core/foundation/inc/ROOT/span.hxx#L153 is violating c++ guidelines. ### ROOT version. master. ### How did you install ROOT?. irrelevant. ### Which operating system are you using?. irrelevant. ### Additional context. https://github.com/root-project/root/blob/master/core/foundation/inc/ROOT/span.hxx#L153 is violating c++ guidelines",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13042:497,inject,inject,497,https://root.cern,https://github.com/root-project/root/issues/13042,1,['inject'],['inject']
Integrability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. As seen in https://lcgapp-services.cern.ch/root-jenkins/job/roottest-pullrequests-build/14222/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_dependency_versions/. this test fails because of missing access to `scikit-learn` and `xgboost`. Are those hard requirement of ROOT? . If they are, why does the configuration succeed?. If they are not, why does the test fail?. ### Reproducer. ```; test_versions (dependency_versions.DependencyVersions); Test the versions of the installed packages versus the ... Attempting requirement 'numpy>=1.4.1'; Attempting requirement 'scikit-learn'; Attempting requirement 'xgboost'; Attempting requirement 'numba>=0.47.0; python_version < ""3.11""'; Attempting requirement 'numba>=0.57.0; python_version >= ""3.11"" and python_version < ""3.12""'; Attempting requirement 'cffi>=1.9.1'; Attempting requirement 'notebook>=4.4.1'; Attempting requirement 'metakernel>=0.20.0'; Ignore dependency pyspark>=2.4; Ignore dependency dask>=2022.08.1; python_version >= ""3.8""; Ignore dependency distributed>=2022.08.1; python_version >= ""3.8"". Full path to requirements.txt: /home/sftnight/build/workspace/roottest-pullrequests-build/root/requirements.txt; Details about not matched dependencies:; - The 'scikit-learn' distribution was not found and is required by the application; - The 'xgboost' distribution was not found and is required by the application; ERROR; ```. ### ROOT version. master. ### Installation method. Jenkins/CI. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15212:530,Depend,DependencyVersions,530,https://root.cern,https://github.com/root-project/root/issues/15212,5,"['Depend', 'depend']","['DependencyVersions', 'dependencies', 'dependency']"
Integrability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Building from source with:; ```; cmake -Droofit_multiprocess=ON -DCMAKE_INSTALL_PREFIX=../root_install/ ../root_src/; cmake --build . --target install -j6; ```. Results in; ```; CMake Error at /home/tomas/ROOT/build/TBB-prefix/src/TBB-stamp/TBB-build-Release.cmake:37 (message):; Command failed: 2. '/usr/bin/cmake' '--build' '.'. See also. /home/tomas/ROOT/build/TBB-prefix/src/TBB-stamp/TBB-build-*.log. -- stdout output is:; [ 3%] Building CXX object src/tbb/CMakeFiles/tbb.dir/address_waiter.cpp.o. -- stderr output is:; gmake[4]: *** read jobs pipe: Bad file descriptor. Stop.; gmake[4]: *** Waiting for unfinished jobs....; gmake[5]: *** read jobs pipe: Bad file descriptor. Stop.; gmake[5]: *** Waiting for unfinished jobs....; In file included from /usr/include/c++/14/atomic:50,; from /home/tomas/ROOT/build/TBB-prefix/src/TBB/src/tbb/../../include/oneapi/tbb/detail/_utils.h:22,; from /home/tomas/ROOT/build/TBB-prefix/src/TBB/src/tbb/address_waiter.cpp:17:; In member function ‘void std::__atomic_base<_IntTp>::store(__int_type, std::memory_order) [with _ITp = bool]’,; inlined from ‘void std::atomic<bool>::store(bool, std::memory_order)’ at /usr/include/c++/14/atomic:109:20,; inlined from ‘void tbb::detail::r1::concurrent_monitor_base<Context>::abort_all_relaxed() [with Context = tbb::detail::r1::address_context]’ at /home/tomas/ROOT/build/TBB-prefix/src/TBB/src/tbb/concurrent_monitor.h:430:53,; inlined from ‘void tbb::detail::r1::concurrent_monitor_base<Context>::abort_all() [with Context = tbb::detail::r1::address_context]’ at /home/tomas/ROOT/build/TBB-prefix/src/TBB/src/tbb/concurrent_monitor.h:413:26,; inlined from ‘void tbb::detail::r1::concurrent_monitor_base<Context>::destroy() [with Context = tbb::detail::r1::address_context]’ at /home/tomas/ROOT/build/TBB-prefix/src/TBB/src/tbb/concurrent_monitor.h:446:24,; inlined from ‘void tbb::detail::r1::clear_address_waiter_table()’ at /home/tomas/R",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16654:344,message,message,344,https://root.cern,https://github.com/root-project/root/issues/16654,1,['message'],['message']
Integrability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Dear Rooters,. Indeed I used the TMapFile together with TApplication to realize the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message; *****************************************************************************; Error in <TMapFile::TMapFile> : no memory mapped file capability available; Use rootn.exe or link application against ""-lNew""; *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP; [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below.; 1. Unzip the file into a local directory ; 2. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13511:492,message,message,492,https://root.cern,https://github.com/root-project/root/issues/13511,1,['message'],['message']
Integrability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Following up on an issue which was buried in https://github.com/root-project/root/pull/12449#issuecomment-1464946488. In current nightlies this test case behaves slightly differently, but still not correctly. It fails with sensible error messages on the first attempt, but then ""succeeds"" on the second attempt. I would expect it to fail with the same errors again if the state were really fully rolled back. ### Reproducer. test.h; ```; template <typename T>; class Helper {. public:. Helper() {}. std::size_t operator() () const {; const std::size_t res = 0;; res = T{0, 0}.size();; return res;; }. };. template <typename H>; std::size_t call_helper(const H &helper) {; return helper();; }; ```. testdeclare.py; ```; import ROOT. ret = ROOT.gInterpreter.Declare('#include ""test.h""'); print(""header include ret"", ret). print(""creating helper""); helper = ROOT.Helper[ROOT.std.vector[""double""]](). bad_template = ""template std::size_t call_helper<Helper<std::vector<double>>>(const Helper<std::vector<double>>&);"". for i in range(2):; print(f""declare attempt {i}""); ret = ROOT.gInterpreter.Declare(bad_template); print(""ret"", ret); ```. output:; ```; header include ret True; creating helper; declare attempt 0; In file included from input_line_34:1:; ./test.h:10:9: error: cannot assign to variable 'res' with const-qualified type 'const std::size_t' (aka 'const unsigned long'); res = T{0, 0}.size();; ~~~ ^; ./test.h:18:10: note: in instantiation of member function 'Helper<std::vector<double, std::allocator<double> > >::operator()' requested here; return helper();; ^; ./test.h:9:23: note: variable 'res' declared const here; const std::size_t res = 0;; ~~~~~~~~~~~~~~~~~~^~~~~~~; ret False; declare attempt 1; ret True; ```. ### ROOT version. ```; ------------------------------------------------------------------; | Welcome to ROOT 6.33.01 https://root.cern |; | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Ra",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16577:313,message,messages,313,https://root.cern,https://github.com/root-project/root/issues/16577,1,['message'],['messages']
Integrability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. From https://its.cern.ch/jira/browse/ROOT-10797. Dear ROOT developers. I was not able to start ROOT 6.20 on a machine running standard CentOS 7. Opt version of ROOT produced seg fault without any hint what could be wrong, debug version of ROOT complained that SystemDir was missing, but did not say which directory exactly. Error messages from ROOT 6.18 were more informative: it complained about missing header file ctype.h. Finally problem was solved by installing glibc-headers rpm, which was not installed initially, since we didn't plan to compile anything on this machine. In future it would be nice to have clear error message that ROOT can not start because certain file is missing, especially if it's not missing shared library which can be checked by ""ldd"". see details in. [https://root-forum.cern.ch/t/can-not-start-root-6-20-02-from-lcg-97-systemdir-is-missing/39594].  . With best regards. Sanya.  . ### Reproducer. As per the description. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14571:405,message,messages,405,https://root.cern,https://github.com/root-project/root/issues/14571,2,['message'],"['message', 'messages']"
Integrability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hello @guitargeek @cburgard !. My student @mathyuu is trying to use the JSON functionality for some combination workflow, and at first we are making sure we can ""round-trip"" existing workspaces. There are problems importing JSON files that were produced by the export functionality. More specifically, when importing ""generic functions"", aka RooFormulas, the parser used to get the names of the dependent variables is extremely brittle and cannot handle numbers in scientific notation in all cases... and to be honest, reading the code, what surprises me is that it can at all work in some cases. Can't you rely on the built-in parsers for `RooFormula` instead, for instance ?. The issue is in `extractArguments` function. BTW, if you fix the bug, can you take the opportunity to change the output from `vector<string>` to `set<string>` ? There are warnings printed down the line with a difference between what the function ""claims to use"" and what it ""is in use"", that all come from variables that appear several times in the formula. See below for reproducer. ### Reproducer. Here is a copy of the function:. ``` C++; #include <vector>; #include <algorithm>; #include <string>; #include <iostream>; #include <cctype>. std::vector<std::string> extractArguments(std::string expr); {; // Get rid of whitespaces; expr.erase(std::remove_if(expr.begin(), expr.end(), [](unsigned char c) { return std::isspace(c); }), expr.end());. std::vector<std::string> arguments;; size_t startidx = expr.size();; for (size_t i = 0; i < expr.size(); ++i) {; if (startidx >= expr.size()) {; if (isalpha(expr[i])) {; startidx = i;; }; } else {; if (!isdigit(expr[i]) && !isalpha(expr[i]) && expr[i] != '_') {; if (expr[i] == '(') {; startidx = expr.size();; continue;; }; std::string arg(expr.substr(startidx, i - startidx));; startidx = expr.size();; arguments.push_back(arg);; }; }; }; if (startidx < expr.size()) {; arguments.push_back(expr.su",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14637:470,depend,dependent,470,https://root.cern,https://github.com/root-project/root/issues/14637,1,['depend'],['dependent']
Integrability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hello,. I am facing an issue that I cannot fix. ; Can you advice ? Is there a way to make DataFrame it more verbose maybe ?; ```; Install the project...; -- Install configuration: ""Debug""; In module 'ROOTDataFrame':; /Users/marcomeyer/Software/root/20230831/include/ROOT/RDF/InterfaceUtils.hxx:312:4: error: static_assert failed due to requirement 'std::is_convertible<void, bool>::value' ""filter expression returns a type that is not convertible to bool""; static_assert(std::is_convertible<FilterRet_t, bool>::value,; ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; /Users/marcomeyer/Software/root/20230831/include/ROOT/RDF/InterfaceUtils.hxx:450:4: note: in instantiation of function template specialization 'ROOT::Internal::RDF::CheckFilter<void ()>' requested here; CheckFilter(f);; ^; input_line_49:2:23: note: in instantiation of function template specialization 'ROOT::Internal::RDF::JitFilterHelper<void (&)(), ROOT::Detail::RDF::RNodeBase>' requested here; ROOT::Internal::RDF::JitFilterHelper(R_rdf::func0, new const char*[0]{}, 0, """", reinterpret_cast<std::weak_ptr<ROOT::Detail::RDF::RJittedFilter>*>(0x600002a21600), reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x600002a209c0),reinterpret_cast<ROOT::Internal::RDF::RColumnRegister*>(0x600000bb80a0));; ^; In module 'ROOTDataFrame':; /Users/marcomeyer/Software/root/20230831/include/ROOT/RDF/RFilter.hxx:112:14: error: cannot initialize return object of type 'bool' with an rvalue of type 'void'; return fFilter(fValues[slot][S]->template Get<ColTypes>(entry)...);; ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; /Users/marcomeyer/Software/root/20230831/include/ROOT/RDF/RFilter.hxx:99:27: note: in instantiation of function template specialization 'ROOT::Detail::RDF::RFilter<void (*)(), ROOT::Detail::RDF::RNodeBase>::CheckFilterHelper<>' requested here; auto passed = CheckFilterHelper(slot, entry, ColumnTypes_t{}, TypeInd_t",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13656:350,Interface,InterfaceUtils,350,https://root.cern,https://github.com/root-project/root/issues/13656,2,['Interface'],['InterfaceUtils']
Integrability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hi ROOT team,. We ran into some trouble last night with the ROOT ""HEAD"" builds that have CUDA enabled in our LCG nightlies. The builds failed on these platforms: x86_64-centos7-gcc11-opt, x86_64-centos8-gcc11-opt, and el9-gcc11-opt. These are the ones we use for this configuration. @bellenot: asked me to let you know, so here's the ticket. Here's the error message we got:. ```; Error: Module 'RooFitCuda.pcm' failed to load.; ```; and this:; ```; make[5]: *** [roofit/roofitcore/CMakeFiles/G__RooFitCore.dir/build.make:519: roofit/roofitcore/G__RooFitCore.cxx] Error 1; make[5]: Target 'roofit/roofitcore/CMakeFiles/G__RooFitCore.dir/depend' not remade because of errors.; make[4]: *** [CMakeFiles/Makefile2:44521: roofit/roofitcore/CMakeFiles/G__RooFitCore.dir/all] Error 2; ```. you can find the full build logs here:. http://cdash.cern.ch/upload/d526fd513d6f4007d95aa0eeb56dfc0627929bf1/ROOT-HEAD-build.log. Thanks for looking into this, and let me know if you need anything else!. Cheers,; Dmitri. ### Reproducer. No reproducer. ### ROOT version. HEAD. ### Installation method. build from sources. ### Operating system. Linux, centos7. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13415:434,message,message,434,https://root.cern,https://github.com/root-project/root/issues/13415,2,"['depend', 'message']","['depend', 'message']"
Integrability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. I found that putting a RooBinSamplingPdf that wraps an extended pdf inside a RooAddPdf (that is in 'no-coefficient' mode, so that it is also extended), you cannot construct the NLL for this. The reason I think is that the RooBinSamplingPdf class does not forward the createExpectedEventsFunc call to the underlying pdf. Will submit a fix in just a moment. ### Reproducer. Here's a minimal reproducer:; ```; RooWorkspace w;; w.factory(""RooAddPdf::apdf(RooBinSamplingPdf::p(x,RooExtendPdf::epdf(EXPR::pdf('x',x[0,10]),e[100])))"");; RooDataSet d(""data"",""data"",*w.var(""x""));; w.pdf(""apdf"")->createNLL(d);; ```; Produces:; ```; [#1] INFO:Minimization -- p.d.f. provides expected number of events, including extended term in likelihood.; [#1] INFO:Fitting -- RooAbsPdf::fitTo(apdf) fixing normalization set for coefficient determination to observables in data; [#0] ERROR:InputArguments -- The pdf ""p"" of type RooBinSamplingPdf did not overload RooAbsPdf::createExpectedEventsFunc()!. *** Break *** segmentation violation; ```. ### ROOT version. 6.34. ### Installation method. source. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16796:121,wrap,wraps,121,https://root.cern,https://github.com/root-project/root/issues/16796,1,['wrap'],['wraps']
Integrability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. I've been using RooFit for my binned chi2 fits (with chi2FitTo). I use the `lb-conda` LHCb wrapper for python. Lately it seems that the `lb-conda` has updated and with the new version, my fits stopped working.; The old version of ROOT I was using is 6.28/04 (python 3.11.4), and the new one is 6.30/04 (python 3.11.8). The new version finds a different minimum, returns status `MINIMIZE=-1 HESSE=302` and zero errors. The old version returns `MINIMIZE=1 HESSE=1 ` and meaningful errors.; I set ROOT.RooFit.Minimizer(""Minuit2"",""migrad"") option for both. I didn't manage to reproduce the error in other conditions, so I packed my workspace in a reproducible example, found in my public lxplus area (`/afs/cern.ch/work/v/vyeroshe/public/test.root`). ### Reproducer. ```; import ROOT as r. file = r.TFile(""/afs/cern.ch/work/v/vyeroshe/public/test.root""); workspace = file.Get(""w_test""). hist = workspace.data(""jpsi_ppbar_mass""); pdf = workspace.pdf(""model_Low""). result = pdf.chi2FitTo(hist, r.RooFit.Save(),r.RooFit.Minimizer(""Minuit2"",""migrad"")); result.Print(); ```. ### ROOT version. ```; ------------------------------------------------------------------; | Welcome to ROOT 6.30/04 https://root.cern |; | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Feb 06 2024, 23:27:10 |; | From heads/master@tags/v6-30-04 |; | With |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. ```. ### Installation method. lb-conda. ### Operating system. CentOS Linux 7. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15196:166,wrap,wrapper,166,https://root.cern,https://github.com/root-project/root/issues/15196,1,['wrap'],['wrapper']
Integrability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. If the build directory is named (for example): `master.c++20` we get (zillions of times the lines):; ```; CMake Error at cmake/modules/RootMacros.cmake:336 (list):; list sub-command FILTER, mode REGEX failed to compile regex; ""^/Users/pcanal/root_working/builds/master.c++20/ginclude"".; Call Stack (most recent call first):; cmake/modules/RootMacros.cmake:1361 (ROOT_GENERATE_DICTIONARY); core/clingutils/CMakeLists.txt:69 (ROOT_STANDARD_LIBRARY_PACKAGE). ```. We should either fix this or make the error messages clearer (i.e detect the case early and fail clearly)>. ### Reproducer. Use a wild card (eg `+`) in the build directory name. ### ROOT version. master. ### Installation method. source. ### Operating system. linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13731:580,message,messages,580,https://root.cern,https://github.com/root-project/root/issues/13731,1,['message'],['messages']
Integrability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Since recently we have been seeing that on ROOT master a simple workspace with a single `RooStats::HistFactory::FlexibleInterpVar` component fails already just on evaluation, whereas it works in ROOT 6.28.04. The workspace is attached, and the code to reproduce the error included in the reproducer. ### Reproducer. 1. *unzip workspace*; 2. `root -l failWS_release.root`; 3. `fail->Print()`; 4. See: ""message : function value is NAN"". Please find here the workspace:; [failWS_release.zip](https://github.com/root-project/root/files/12750467/failWS_release.zip). ### ROOT version. Current ROOT master gives the error. ROOT 6.28.04 does not. ### Installation method. build from source. ### Operating system. Linux centos7. ### Additional context. The PR that introduced the problem:; https://github.com/root-project/root/pull/13067",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13749:476,message,message,476,https://root.cern,https://github.com/root-project/root/issues/13749,1,['message'],['message']
Integrability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The RDataFrame execution order for branches of the computation graph is bottom-up: actions request values to the upstream readers traversing them one by one in reverse order w.r.t. their insertion. This logic seems to be flipped when the action is JITted. In a simple example with two `Define`d columns and one `Graph`, the order of execution of the `Define`s changes depending on whether the action needs to infer the column types or not. Correc order (bottom-up); ```; ./repro_graph_compiled.out ; Info in <[ROOT.RDF] Info /home/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:852 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Starting event loop number 0.; Info in <[ROOT.RDF] Info /home/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:811 in void ROOT::Detail::RDF::RLoopManager::Jit()>: Nothing to jit and execute.; Defining 'b2': address: 0x7ffe1477198c, value: 42; Defining 'b1': address: 0x7ffe1477198c, value: 10; Info in <[ROOT.RDF] Info /home/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:889 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 6.10352e-05s elapsed).; graph: X: 10,Y:42; Info in <[ROOT.RDF] Info /home/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:811 in void ROOT::Detail::RDF::RLoopManager::Jit()>: Nothing to jit and execute.; ```. Wrong order; ```; ./repro_graph_jitted.out ; Info in <[ROOT.RDF] Info /home/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:852 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Starting event loop number 0.; Info in <[ROOT.RDF] Info /home/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:825 in void ROOT::Detail::RDF::RLoopManager::Jit()>: Just-in-time compilation phase completed in 1.388524 seconds.; Defining 'b1': address: 0x7ffd017cb8dc, value: 42;",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15686:443,depend,depending,443,https://root.cern,https://github.com/root-project/root/issues/15686,1,['depend'],['depending']
Integrability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The TMVA rreader is not multithread safe. I created a message on the root forum here: https://root-forum.cern.ch/t/tmva-rreader-not-multithread-safe/59662. In the end I think it boils down to moving the lock [here](https://github.com/root-project/root/blob/master/tmva/tmva/inc/TMVA/RReader.hxx#L245) a few lines up, before setting the variables. As a workaround we put a lock before the compute call and that solves the problem. ### Reproducer. see https://root-forum.cern.ch/t/tmva-rreader-not-multithread-safe/59662. ### ROOT version. 6.30 (but still in master). ### Installation method. pre build. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16600:129,message,message,129,https://root.cern,https://github.com/root-project/root/issues/16600,1,['message'],['message']
Integrability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The failure seen in the asan job for the `gtest-tree-dataframe-test-dataframe-interface` test is due to the reproducer attached. It seems trying to JIT a function with a very long return expression is causing issues. Unfortunately asan just reports a segfault with no stacktrace, but I was able to get a (very long) stacktrace with gdb and the reproducer, see the attachment. Note that the reproducer is completely detached from RDataFrame and just calls the interpreter. [gdb_ginterpreter_declare_manyargs.txt](https://github.com/user-attachments/files/15794771/gdb_ginterpreter_declare_manyargs.txt). ### Reproducer. ```cpp; #include <TInterpreter.h>. int main(){; gInterpreter->Declare(R""(; namespace R_rdf {; auto func0(const int var0){return var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + var0 + var0 + var0+var0 + va",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15818:153,interface,interface,153,https://root.cern,https://github.com/root-project/root/issues/15818,1,['interface'],['interface']
Integrability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The function `TClass::GetClassInfo()` is not thread safe because `TObject::TestBit` is not thread safe. The function `TClass::GetClassInfo()` is used routinely outside of the global interpreter lock, e.g. https://github.com/root-project/root/blob/dcebd46c6dec4028f68f1b7bf8e37d64558f1e56/core/meta/src/TListOfDataMembers.cxx#L408. https://github.com/root-project/root/blob/dcebd46c6dec4028f68f1b7bf8e37d64558f1e56/core/meta/src/TListOfFunctions.cxx#L376C26-L376C38. As CMS is experiencing problems where the list of functions returned from TClass will infrequently be empty when we are running multi-threaded, it is possible this race condition is the cause. ### Reproducer. Visual inspection shows the problem. We have not been able to make a small reproducer for the thread problem we are seeing. ### ROOT version. 6.30. ### Installation method. build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15090:225,rout,routinely,225,https://root.cern,https://github.com/root-project/root/issues/15090,1,['rout'],['routinely']
Integrability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. The legacy backend can be used with models with categorical parameters (minimization can proceed if it is held constant). ; The new cpu backend appears to not include the categorical param in its list of variables (from `getVariables()`) and also just crashes when you try to evaluate the function. ### Reproducer. ```; {; // create a one-channel on-bin model, with two samples in the channel, which are each scaled by a factor; // that depends on the state of a category; xRooNode w(""RooWorkspace"",""combined"",""my workspace"");; w[""simPdf/chan1""]->SetXaxis(1,0,1);; w[""simPdf/chan1/bkg1""]->SetBinContent(1,5);; w[""simPdf/chan1/bkg2""]->SetBinContent(1,10);; w[""simPdf/chan1/bkg1""]->Multiply(""fac1('myCat==0?1:0',myCat[a,b])"",""func"");; w[""simPdf/chan1/bkg2""]->Multiply(""fac2('myCat==0?0:1',myCat)"",""func"");; w[""simPdf/chan1""]->SetBinData(1,12);. w.pars()[""myCat""]->get<RooAbsArg>()->setAttribute(""Constant""); // how I would hold the param constant. auto nll = w[""simPdf""]->nll(""obsData"",{RooFit::EvalBackend(""cpu"")});; nll->getVariables()->Print(); // in cpu mode ""myCat"" doesn't appear here!!; nll->getVariables()->setCatLabel(""myCat"",""a"");. cout << nll->getVal() << endl; // this crashes for cpu mode. }; ```. ### ROOT version. 6.32 , master. ### Installation method. source. ### Operating system. all?. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15701:512,depend,depends,512,https://root.cern,https://github.com/root-project/root/issues/15701,1,['depend'],['depends']
Integrability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We have our own packaging of root via fpm which relocates our builds which happen in some folder in /tmp to and rpm which installs in /opt/o2. This was working fine in v6.28.00 however when switching to v6-30-01 we have a bunch of errors along the lines of:. ```; Module Net not found.; Error in <TCling::LoadPCM>: ROOT PCM /opt/o2/lib/libNet_rdict.pcm file does not exist; Module MultiProc not found.; Module Imt not found.; Module MathCore not found.; Error in <TCling::LoadPCM>: ROOT PCM /opt/o2/lib/libMathCore_rdict.pcm file does not exist; Error in <TClass::LoadClassInfo>: no interpreter information for class TSignalHandler is available even though it has a TClass initialization routine.; Error in <TClass::LoadClassInfo>: no interpreter information for class TFileHandler is available even though it has a TClass initialization routine.; ```. when starting root on the command line. By doing a strace, we figured out that this derives from root not being able to find `module.modulemap` which is present in `/opt/o2/include`, yet it is not considered. We are able to workaround the issue by simply copying module.modulemap in the current directory, which is apparently in the search path, however that is clearly not a viable solution in a deployed environment. What mechanism is used by default to lookup `module.modulemap`? We would be fine if we could work it around via some environment variable or systemrc tweak. ### Reproducer. Build root in one folder and relocate it to a different one. ### ROOT version. v6-30-01. v6-28-01 works fine. ### Installation method. alibuild, fpm. ### Operating system. el8. ### Additional context. This is preventing ALICE DAQ to use the latest ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15318:763,rout,routine,763,https://root.cern,https://github.com/root-project/root/issues/15318,2,['rout'],['routine']
Integrability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When I use the `RooFFTConvPdf` function to convolved two pdf, there is an error infomation:; ```; Error in <TVirtualFFT::FFT>: handler not found; Error in <TVirtualFFT::FFT>: handler not found; Error in <TVirtualFFT::FFT>: handler not found; [#0] FATAL:Eval -- RooFFTConvPdf::fillCacheSlice(sigpdfCannot get a handle to fftw. Maybe ROOT was built without it?; terminate called after throwing an instance of 'std::runtime_error'; what(): Cannot get a handle to fftw.; ```. But I have already installed all the dependencies include `libfftw3-dev`. And I also try the same script under the ROOT 6.28/06, it works well. ### Reproducer. A part of script:; ```; auto h1a = new TH1D(""h1a"", ""h1a"", nbins1, xlow1, xup1);; t2->Draw(""x>>h1a"");. RooDataHist exmch1a(""exmch1a"", ""exmch1a"", x, h1a, 1.0);. RooHistPdf exmcpdf(""exmcpdf"", ""exmcpdf"", x, exmch1a, 0);. RooRealVar mean_gauss(""mean_gauss"", ""mean_gauss"", 0.0, -10000.0, 10000.0);; RooRealVar width_gauss(""width_gauss"", ""width_gauss"", 0.0, 0.0, 1000.0);; RooGaussModel gausspdf(""gausspdf"", ""gausspdf"", x, mean_gauss, width_gauss);. RooFFTConvPdf sigpdf(""sigpdf"", ""sigpdf"", x, exmcpdf, gausspdf);; ```. I'm sorry I can't provide the rest of the script. I run this script with the following command; ```; root fit.cxx; ```. ### ROOT version. ROOT 6.30/02. ### Installation method. pre-compiled binary. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14162:584,depend,dependencies,584,https://root.cern,https://github.com/root-project/root/issues/14162,1,['depend'],['dependencies']
Integrability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When a class is schema evoled (see reproducer) using a renaming rules. At least on line 1258 of `StreamerInfoReadBuffer.cxx`:; ```; subinfo = (TStreamerInfo*)newProxy->GetValueClass()->GetConversionStreamerInfo( oldProxy->GetValueClass(), vClVersion );; ```. is not properly handling the case whether the classes are unversion and thus the search ought to be done using the checksum rather than the class version. ### Reproducer. ```; template <typename T>; struct Wrapper; {; bool present = true;; T obj;; };. struct MatchedCSCSegment; {; float someValue = 0.0;. MatchedCSCSegment(float in = 0.0) : someValue{in} {}. // The simeple update fails if the class version is not set.; ClassDef(MatchedCSCSegment, 5);; };. struct CSCSegment; {; float someValue;. operator MatchedCSCSegment(); {; return MatchedCSCSegment{someValue};; }. #ifdef OLD_VERSION; std::vector<CSCSegment> theDuplicateSegments;; ClassDef(CSCSegment, 3);; #else; std::vector<MatchedCSCSegment> theDuplicateSegments;. ClassDef(CSCSegment, 4);; #endif; };; ```; and rule:; ```; #pragma read sourceClass=""CSCSegment"" targetClass=""MatchedCSCSegment""; ```. ### ROOT version. master. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14491:540,Wrap,Wrapper,540,https://root.cern,https://github.com/root-project/root/issues/14491,1,['Wrap'],['Wrapper']
Integrability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When jitting code with errors in some cases, the failure leads to a segfault in cling. I didn't manage a very minimal reproducer, so here's the actual code which provoked this. (including an Eigen dependency, where the include of the Eigen headers seems to be relevant to provoking the crash). ### Reproducer. test.h; ```#ifndef WREMNANTS_EtaPtCorrelatedEfficiency_h; #define WREMNANTS_EtaPtCorrelatedEfficiency_h. #include ""TROOT.h""; #include ""TH2D.h""; #include ""TH3D.h""; #include ""TFile.h""; #include ""TMath.h"". #include <eigen3/Eigen/Dense>; // #include <eigen3/Eigen/Eigenvalues>; //#include <stdlib.h>; //#include <stdio.h>; #include <cstdlib> ; #include <cstdio>; #include <cmath>; #include <iostream>; #include <string>; #include <fstream>; #include <cassert>. namespace wrem {. // ================================================; // Some functions to be used for EtaPtCorrelatedEfficiency; // ================================================; // TODO:; // put functions in another header file; // write a base class to make all functions derive from, at least for polynomials; // write a generic class for polynomials; class pol3_custom {; public:; pol3_custom() {};; pol3_custom(const double& xMin, const double& xRange) {; xMinNorm_ = xMin;; xRangeNorm_ = xRange;; };; double operator() (std::vector<double> &x, std::vector<double> &p) {; double xscaled = (x[0] - xMinNorm_) / xRangeNorm_;; return p[0] + p[1]*xscaled + p[2]*std::pow(xscaled,2) + p[3]*std::pow(xscaled,3);; }; void setPolynomialArgument(const double& xMin, const double& xRange) {; xMinNorm_ = xMin;; xRangeNorm_ = xRange;; }; int getNparams() { return nparams_; }; protected:; // to normalize polynomial argument; int nparams_ = 4;; double xMinNorm_ = 0.0;; double xRangeNorm_ = 1.0;; };. class pol4_custom {; public:; pol4_custom() {};; pol4_custom(const double& xMin, const double& xRange) {; xMinNorm_ = xMin;; xRangeNorm_ = xRange;; };; double ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16578:272,depend,dependency,272,https://root.cern,https://github.com/root-project/root/issues/16578,1,['depend'],['dependency']
Integrability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When linking a dependent product (happens to be Celeritas but apriori it could be anything) against ROOT build with a builtin TBB, the link fails with:; ```; /work1/celeritas/pcanal/geant-public/gcc12/install/opt/lib/libImt.so: undefined reference to `tbb::interface7::internal::isolate_within_arena(tbb::interface7::internal::delegate_base&, long)'; /work1/celeritas/pcanal/geant-public/gcc12/install/opt/lib/libImt.so: undefined reference to `tbb::interface7::internal::task_arena_base::internal_max_concurrency(tbb::interface7::task_arena const*)'; /work1/celeritas/pcanal/geant-public/gcc12/install/opt/lib/libImt.so: undefined reference to `tbb::interface9::global_control::active_value(int)'; /work1/celeritas/pcanal/geant-public/gcc12/install/opt/lib/libImt.so: undefined reference to `tbb::interface7::internal::task_arena_base::internal_terminate()'; /work1/celeritas/pcanal/geant-public/gcc12/install/opt/lib/libImt.so: undefined reference to `tbb::interface7::internal::task_arena_base::internal_initialize()'; /work1/celeritas/pcanal/geant-public/gcc12/install/opt/lib/libImt.so: undefined reference to `tbb::interface7::internal::task_arena_base::internal_execute(tbb::interface7::internal::delegate_base&) const; ```. Notes. * Adding the `libtbb` installed by ROOT explicitly solves the problem.; * doing `ldd` on `libImt` prints the expected path for `libtbb`; * re-doing the failing link with `LD_LIBRARY_PATH` containing the directory where the builtin `libtbb` is solved the problem; * redoing the failing link adding to `-Wl,-rpath-link,` the directory where the builtin `libtbb` is solved the problem ; * The main difference is that when linking `libImt` with builtin the link line uses `-ltbb` while when linking against an external `tbb` it list the full pathname of the library (while the ROOT library use a relative path). So the problem is might be either that; * we use `-ltbb` for the buitin; * the ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13079:90,depend,dependent,90,https://root.cern,https://github.com/root-project/root/issues/13079,1,['depend'],['dependent']
Integrability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When you have a Gaussian where the sigma depends on the observable, the pdf values will be wrong. This can be fixed by forcing numeric integration of the Gaussian. So apparently, RooFit has some problem figuring out that numeric integrals are necessary here. ### Reproducer. ```c++; RooRealVar x{""x"", ""x"", 100., 1000.};; RooFormulaVar res{""res"", ""0.07 * x + 2.0"", {x}};; RooGaussian model{""sig"", ""sig"", x, 200, res};. std::unique_ptr<RooAbsReal> integ1{model.createIntegral(x)};; integ1->Print();. model.forceNumInt(true);. std::unique_ptr<RooAbsReal> integ2{model.createIntegral(x)};; integ2->Print();. ```; Output:; ```txt; RooRealIntegral::sig_Int[x][ Int sigd[Ana](x) ] = 101.518; RooRealIntegral::sig_Int[x][ Int sig d[Num](x) ] = [#1] INFO:NumericIntegration -- RooRealIntegral::init(sig_Int[x]) using numeric integrator RooIntegrator1D to calculate Int(x); 129.761; ```. ### ROOT version. `master`. ### Installation method. Building from source. ### Operating system. Arch Linux. ### Additional context. Inspired by the following forum post:; https://root-forum.cern.ch/t/fit-multiple-peaks-with-shared-parameters/57725/3?u=jonas. Could be related to [ROOT-3079](https://sft.its.cern.ch/jira/browse/ROOT-3079).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14320:116,depend,depends,116,https://root.cern,https://github.com/root-project/root/issues/14320,3,"['depend', 'integrat']","['depends', 'integration', 'integrator']"
Integrability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description. cmake -Dminimal=ON .... leads to:; ```; CMake Deprecation Warning at cmake/modules/RootBuildOptions.cmake:421 (message):; >>> Option 'builtin_afterimage' is deprecated: in the future it will always; be set to ON. In the next release of ROOT, you will no longer be able to; disable this feature. Please contact root-dev@cern.ch should you still; need disabling it.; Call Stack (most recent call first):; CMakeLists.txt:117 (include); ```; i.e this message should probably not appear when X11/Cocoa are disabled. ### Reproducer. see description	. ### ROOT version. master	. ### Installation method. local build. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15027:186,message,message,186,https://root.cern,https://github.com/root-project/root/issues/15027,2,['message'],['message']
Integrability,### Check duplicate issues. - [ ] Checked for duplicates. ### Description. last version `07d2b27d192bd20bea8421da7b1c6c381376cfb2`; build on macos ; cmake ; ```; cmake version 3.29.3. CMake suite maintained and supported by Kitware (kitware.com/cmake).; ```; ```; CMake Error at CMakeLists.txt:20 (message):; ROOT must be built out-of-source.; Please see README/INSTALL for more information.; ```. ### Reproducer. mkdir build; cmake ../root. ### ROOT version. last commit `07d2b27d192bd20bea8421da7b1c6c381376cfb2`. ### Installation method. build from source. ### Operating system. macos 14.4. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15549:298,message,message,298,https://root.cern,https://github.com/root-project/root/issues/15549,1,['message'],['message']
Integrability,"### Check duplicate issues. - [ ] Checked for duplicates. ### Description; From https://its.cern.ch/jira/browse/ROOT-2927. Dear ROOT,. I am attaching to this message a ROOT file that contains a sparse matrix, and a vector. Trying to solve the equation formed by the two causes a segfault. The steps to reproduce the problem are the following:. ```cpp; $ root \-l matrix_fail.root; root [0]; Attaching file matrix_fail.root as _file0...; root [1] M; (class TMatrixTSparse&amp;lt;double&amp;gt;*)0xbed850; root [2] x; (class TVectorT&amp;lt;double&amp;gt;*)0xbedcb0; root [3] TDecompSparse solver(*M,0); root [4] Bool_t ok; root [5] TVectorD xx = solver.Solve(*x, ok). *** Break *** segmentation violation; ```. The problem is due to this particular instance of the data: if you change one of the values of the x vector for example, you won't observe the segfault. I have tried this in two different linux distributions (SL5 and ubuntu karmic) and two different ROOT versions (5.24 and 5.18), both 64 bits. ### Reproducer. As per the description. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. Find input file in the Jira issue",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14554:158,message,message,158,https://root.cern,https://github.com/root-project/root/issues/14554,1,['message'],['message']
Integrability,"### Check duplicate issues. - [X] Checked for duplicates. ### Describe the bug. It is not possible to operate on a HistFactory Measurement object in a workspace created with ROOT 6.26 by using ROOT 6.28. Attempting to do so results in the following:; ```; Error in <TRint::HandleTermInput()>: std::length_error caught: basic_string::_M_replace_aux; ```. The opposite scenario (workspace created in 6.28, using 6.26 to read it) also causes issues. This means that there is essentially some trial&error when handling unknown workspaces to find a suitable ROOT version. ### What is the expected behaviour?. Unclear to me whether this breaking change is expected or not, but the error message is not particularly clear in case this is expected. ### How to reproduce?. Create HistFactory workspace in ROOT 6.26 (or use this example https://cernbox.cern.ch/s/uRaTglosZypwm81, created from xmls via `hist2workspace` using 6.26/08), here called `workspace_example.root`:. ```bash; root@2cd219ab253b:~/data# root --version; ROOT Version: 6.28/04; Built for linuxx8664gcc on May 24 2023, 17:37:00; From tags/v6-28-04@v6-28-04; root@2cd219ab253b:~/data# root -l workspace_example.root; root [0]; Attaching file workspace_example.root as _file0...; (TFile *) 0x402fde6770; root [1] minimal_example->PrintXML(); Error in <TRint::HandleTermInput()>: std::length_error caught: basic_string::_M_replace_aux; ```. ### ROOT version. 6.28/04. ### How did you install ROOT?. custom build, container via https://gitlab.cern.ch/atlas-amglab/atlstats. ### Which operating system are you using?. N/A. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12967:681,message,message,681,https://root.cern,https://github.com/root-project/root/issues/12967,1,['message'],['message']
Integrability,"### Check duplicate issues. - [X] Checked for duplicates. ### Describe the bug. With `ROOT::IsImplicitMTEnabled() == false`, `TVirtualFitter::GetFitter()` should return the fitter used in a previous fit operation. With ROOT 6.28.04 (and older versions too) compiled form source on the latest macOS/Xcode this doesn't seem to be the case anymore. The `GetFitter()` call returns `nullptr` despite a previous successful call to a fit routine. As a result, various tests that employ fits fail/crash, for example the ""test-stresshistogram"" test. ### What is the expected behaviour?. After a call to a fit function, e.g.`h1->Fit(...)` (see below) , expect `TVirtualFitter::GetFitter() != nullptr` to be true. ### How to reproduce?. This snippet (taken from the test-stresshistogram source),; ```; ROOT::DisableImplicitMT();; double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }; TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);; TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);; gaus->SetParameters(1,0,1);; h1->FillRandom(""gaus1d"",10000);; auto res = h1->Fit(gaus,""L0S"");; cout << TVirtualFitter::GetFitter() << endl;; ```; run either interactively or in compiled code, should print a non-zero number, which it does on older platforms. But it prints `0x0` with the latest ROOT/macOS/Xcode (details below). ### ROOT version. 6.28.04, 6.26.10. ### How did you install ROOT?. Custom build from source. ### Which operating system are you using?. macOS 13.4, Xcode 14.3.1; macOS 12.6.5, Xcode 14.2. ### Additional context. It works with ROOT 6.28.04 on macOS 11.7.7 (Intel) with Xcode 13.2.1. It fails with the exact same ROOT, compiled with the exact same configuration, on macOS 13.4 (Intel) with Xcode 14.3.1. Details:; ```; $ root-config --cflags; -stdlib=libc++ -pthread -std=c++17 -m64 -I/Users/ole/Develop/BUILD/ROOT/6.28.04/include; $ root-config --features; cxx17 asimage builtin_afterimage builtin_clang builtin_cling builtin_freetype builtin_glew builtin_gte",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13041:431,rout,routine,431,https://root.cern,https://github.com/root-project/root/issues/13041,1,['rout'],['routine']
Integrability,### Check duplicate issues. - [X] Checked for duplicates. ### Description. -- Building Cling as part of ROOT; -- Cling version (from VERSION file): ROOT_1.0~dev; CMake Error at interpreter/llvm-project/llvm/cmake/modules/LLVM-Config.cmake:138 (message):; Target host is not in the set of libraries.; Call Stack (most recent call first):; interpreter/llvm-project/llvm/cmake/modules/LLVM-Config.cmake:256 (llvm_expand_pseudo_components); interpreter/llvm-project/llvm/cmake/modules/AddLLVM.cmake:641 (llvm_map_components_to_libnames); interpreter/cling/CMakeLists.txt:426 (llvm_add_library); interpreter/cling/lib/Interpreter/CMakeLists.txt:60 (add_cling_library). ### Reproducer. cmake ../../src/root -DCMAKE_CXX_STANDARD=17 -DCMAKE_BUILD_TYPE=RelWithDebInfo. ### ROOT version. recent master @fee23275. ### Installation method. source. ### Operating system. FreeBSD 13.2p4. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13865:244,message,message,244,https://root.cern,https://github.com/root-project/root/issues/13865,1,['message'],['message']
Integrability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. /tmp/user/spack-stage/spack-stage-root-6.32.04-2rp3usgipgbdq7rwb7pcpfc2iut72ltg/spack-src/core/meta/src/TClass.cxx: In member function 'virtual void TDumpMembers::Inspect(TClass*, const char*, const char*, const void*, Bool_t)': ; /tmp/user/spack-stage/spack-stage-root-6.32.04-2rp3usgipgbdq7rwb7pcpfc2iut72ltg/spack-src/core/meta/src/TClass.cxx:701:20: warning: 'char* strncpy(char*, const char*, size_t)' specified bound depends on the length of the source argument [-Wstringop-truncation] ; 701 | strncpy(line + kvalue, *ppointer, std::min( i, kline - kvalue)); ; | ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ; /tmp/user/spack-stage/spack-stage-root-6.32.04-2rp3usgipgbdq7rwb7pcpfc2iut72ltg/spack-src/core/meta/src/TClass.cxx:691:20: note: length computed here ; 691 | i = strlen(*ppointer); . ### Reproducer. compile 6.32.04 using GCC 14. ### ROOT version. 6.32.04. ### Installation method. spack build from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16384:498,depend,depends,498,https://root.cern,https://github.com/root-project/root/issues/16384,1,['depend'],['depends']
Integrability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. As of https://github.com/root-project/root/commit/e9d264eb545be5f7c3df9733fe8adb9d4dac1163, building ROOT inside a docker container for arm64 architectures on a x86_64 host system using qemu emulation fails on the hsimple.C test:; ```; Consolidate compiler generated dependencies of target GeomBuilder; make[2]: Entering directory '/mnt/root-build-ubuntu'; make[2]: Leaving directory '/mnt/root-build-ubuntu'; [100%] Generating etc/allDict.cxx.pch; make[2]: Entering directory '/mnt/root-build-ubuntu'; [100%] Linking CXX shared library ../../lib/libGeomBuilder.so. Generating PCH for core core/clingutils core/imt core/multiproc core/rint core/thread graf2d/gpad graf2d/graf graf2d/postscript graf3d/g3d gui/fitpanel gui/gui hist/hist hist/histpainter io/io math/genvector math/mathcore math/matrix math/minuit math/physics math/smatrix math/vecops net/net tree/tree tree/treeplayer tree/treeviewer. make[2]: Leaving directory '/mnt/root-build-ubuntu'; [100%] Built target GeomBuilder; make[2]: Leaving directory '/mnt/root-build-ubuntu'; [100%] Built target onepcm; make[2]: Entering directory '/mnt/root-build-ubuntu'; make[2]: Leaving directory '/mnt/root-build-ubuntu'; make[2]: Entering directory '/mnt/root-build-ubuntu'; [100%] Generating tutorials/hsimple.root. Processing hsimple.C... *** Break *** segmentation violation; Generating stack trace...; 0x000000550424be2c in <unknown> from /mnt/root-build-ubuntu/lib/libCling.so; 0x000000550424c598 in <unknown> from /mnt/root-build-ubuntu/lib/libCling.so; 0x000000550432bef4 in <unknown> from /mnt/root-build-ubuntu/lib/libCling.so; 0x0000005504338200 in <unknown> from /mnt/root-build-ubuntu/lib/libCling.so; 0x000000550433a1d4 in <unknown> from /mnt/root-build-ubuntu/lib/libCling.so; 0x00000055043253ec in <unknown> from /mnt/root-build-ubuntu/lib/libCling.so; 0x000000550415c38c in <unknown> from /mnt/root-build-ubuntu/lib/libCling.so; 0x0000005504174cf4 in TClin",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13845:342,depend,dependencies,342,https://root.cern,https://github.com/root-project/root/issues/13845,1,['depend'],['dependencies']
Integrability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. As reported in https://root-forum.cern.ch/t/mem-leak-even-with-suppression-file/60330/16?u=pcanal; A valgrind run of the example given there issues:; ```; ==75628== Conditional jump or move depends on uninitialised value(s); ==75628== at 0xD52162A: llvm::AttrBuilder::addStackAlignmentAttr(llvm::MaybeAlign) (in /export/home/jb242989/root_v6.32.02_deb/lib/libCling.so.6.32.02); ==75628== by 0x98FF5A8: clang::CodeGen::CodeGenModule::ConstructAttributeList(llvm::StringRef, clang::CodeGen::CGFunctionInfo const&, clang::CodeGen::CGCalleeInfo, llvm::AttributeList&, unsigned int&, bool, bool) (in /export/home/jb242989/root_v6.32.02_deb/lib/libCling.so.6.32.02); ==75628== by 0x969A787: clang::CodeGen::CodeGenModule::SetLLVMFunctionAttributes(clang::GlobalDecl, clang::CodeGen::CGFunctionInfo const&, llvm::Function*, bool) (in /export/home/jb242989/root_v6.32.02_deb/lib/libCling.so.6.32.02); ==75628== by 0x96C7EFD: clang::CodeGen::CodeGenModule::SetFunctionAttributes(clang::GlobalDecl, llvm::Function*, bool, bool) (in /export/home/jb242989/root_v6.32.02_deb/lib/libCling.so.6.32.02); ==75628== by 0x96CA59B: clang::CodeGen::CodeGenModule::GetOrCreateLLVMFunction(llvm::StringRef, llvm::Type*, clang::GlobalDecl, bool, bool, bool, llvm::AttributeList, clang::CodeGen::ForDefinition_t) (in /export/home/jb242989/root_v6.32.02_deb/lib/libCling.so.6.32.02); ==75628== by 0x96CBC9C: clang::CodeGen::CodeGenModule::GetAddrOfFunction(clang::GlobalDecl, llvm::Type*, bool, bool, clang::CodeGen::ForDefinition_t) (in /export/home/jb242989/root_v6.32.02_deb/lib/libCling.so.6.32.02); ==75628== by 0x96CC257: clang::CodeGen::CodeGenModule::EmitGlobalFunctionDefinition(clang::GlobalDecl, llvm::GlobalValue*) (in /export/home/jb242989/root_v6.32.02_deb/lib/libCling.so.6.32.02); ==75628== by 0x96C89EC: clang::CodeGen::CodeGenModule::EmitGlobalDefinition(clang::GlobalDecl, llvm::GlobalValue*) (in /export/home/jb242989/root_v6.32.02_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16123:265,depend,depends,265,https://root.cern,https://github.com/root-project/root/issues/16123,1,['depend'],['depends']
Integrability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Bug found by Attilah here: https://github.com/root-project/root-docker/issues/64#issuecomment-1859787405. The only place where gsl is included publicly in ROOT is in TMVA:; ```; grep -r gsl/ /opt/root/*; `include/TMVA/DNN/Architectures/Cpu/Blas.h:#include ""gsl/gsl_cblas.h""`; ```; So cmake should link publicly to that library to make it a dependency, rather than privately. ### Reproducer. https://github.com/root-project/root-docker/issues/64. ### ROOT version. ```; ROOT v6.30/02; Built for linuxx8664gcc on Nov 27 2023, 19:50:38; From tags/v6-30-02@; With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0; Binary directory: /opt/root/bin; ```. ### Installation method. docker. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14263:415,depend,dependency,415,https://root.cern,https://github.com/root-project/root/issues/14263,1,['depend'],['dependency']
Integrability,### Check duplicate issues. - [X] Checked for duplicates. ### Description. Building ROOT on macOS 14 with Xcode 15 fails to configure when trying to build LLVM with the following error:. ```; CMake Error: File /Users/pagessin/dev/ci-dependencies/build_all_cpp20_15p0/root/src/root/interpreter/llvm/src/llvm.spec.in does not exist; ```. ### Reproducer. - Checkout ROOT; - Run cmake. ### ROOT version. 6.30.0 and 6.30.02. ### Installation method. build from source. ### Operating system. macOS 14 / Xcode 15. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14169:233,depend,dependencies,233,https://root.cern,https://github.com/root-project/root/issues/14169,1,['depend'],['dependencies']
Integrability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. CMake complains. ```console; $ cmake ../root; CMake Error at CMakeLists.txt:20 (message):; ROOT must be built out-of-source.; Please see README/INSTALL for more information. -- Configuring incomplete, errors occurred!; ```. and exit with status 1 even when building out-of-source as instructed by `README/INSTALL`. ### Reproducer. 1. Run. ```sh; ssh <username>@lxplus8.cern.ch; git clone https://github.com/root-project/root.git; mkdir root-build.foo; cd root-build.foo; cmake ../root; ```. 2. See the error described above. ### ROOT version. Git branch: master; Git revision: 2ee691da61ca51e4dd857ac8c88f778948fb49a7. ### Installation method. Out-of-tree build using CMake 3. ### Operating system. LXPLUS8 (CentOS Stream 8, x86_64-linux). ### Additional context. * CMake version 3.20.2; * `/etc/os-release` content. ```; NAME=""Red Hat Enterprise Linux""; VERSION=""8.9 (Ootpa)""; ID=""rhel""; ID_LIKE=""fedora""; VERSION_ID=""8.9""; PLATFORM_ID=""platform:el8""; PRETTY_NAME=""Red Hat Enterprise Linux 8.9 (Ootpa)""; ANSI_COLOR=""0;31""; CPE_NAME=""cpe:/o:redhat:enterprise_linux:8::baseos""; HOME_URL=""https://www.redhat.com/""; DOCUMENTATION_URL=""https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8""; BUG_REPORT_URL=""https://bugzilla.redhat.com/"". REDHAT_BUGZILLA_PRODUCT=""Red Hat Enterprise Linux 8""; REDHAT_BUGZILLA_PRODUCT_VERSION=8.9; REDHAT_SUPPORT_PRODUCT=""Red Hat Enterprise Linux""; REDHAT_SUPPORT_PRODUCT_VERSION=""8.9""; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14159:155,message,message,155,https://root.cern,https://github.com/root-project/root/issues/14159,1,['message'],['message']
Integrability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Calling `ROOT::Experimental::RNTupleWriter::Recreate` with a path to a full disk results in an assert in RMiniFile.cxx about `fileStream` being bad. A more useful error message would be appreciated. ### Reproducer. Should happen anytime you write to a full disk. ### ROOT version. ------------------------------------------------------------------; | Welcome to ROOT 6.31/01 https://root.cern |; | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jan 21 2024, 23:43:23 |; | From heads/master@tags/v6-31-01 |; | With g++ (GCC) 12.3.1 20230527 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. ### Installation method. CMSSW release. ### Operating system. Linux alma 8. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14487:244,message,message,244,https://root.cern,https://github.com/root-project/root/issues/14487,1,['message'],['message']
Integrability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Can not compile root after xcode update: clang-1500.3.9.4. ```; #include <vector>; ^; Error: Building module 'std_vector' implicitly. If 'std_vector' requires a ; dictionary please specify build dependency: 'G__Core.cxx' depends on 'std_vector'.; Otherwise, specify '-mByproduct std_vector' to disable this diagnostic.; In file included from input_line_7:16:; In file included from /usr/local/root/root_build/include/ROOT/TExecutorCRTP.hxx:15:; In file included from /usr/local/root/root_build/include/ROOT/TSeq.hxx:15:; /usr/local/root/root_build/include/TError.h:37:10: remark: building module 'std_functional' as '/usr/local/root/root_build/lib/std_functional.pcm' [-Rmodule-build]; #include <functional>; ^; Error: Building module 'std_functional' implicitly. If 'std_functional' requires a ; dictionary please specify build dependency: 'G__Core.cxx' depends on 'std_functional'.; Otherwise, specify '-mByproduct std_functional' to disable this diagnostic.; ```. ### Reproducer. cmake --build . -- install -j. ### ROOT version. v-6-31-01, and also a similar error with the master branch. ### Installation method. build from the source. ### Operating system. MacOS 14.3.1. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14902:270,depend,dependency,270,https://root.cern,https://github.com/root-project/root/issues/14902,4,['depend'],"['dependency', 'depends']"
Integrability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Depending on the mixture of 4-vector types and the order of operations the result can change, e.g.; lv1 - lv2 != -lv2 + lv1; See reproducer for all combinations. ### Reproducer. ```python; import ROOT. lv1 = ROOT.Math.PxPyPzEVector(0, 0, 1, 1); lv2 = ROOT.Math.PxPyPzMVector(lv1). print(lv1 - lv2); # (0,0,0,0); print(lv2 - lv1); # (0,0,0,0); print(-lv1 + lv2); # (0,0,0,0); print(-lv2 + lv1); # (0,0,0,2); ```; but I am relatively sure that it will also happen in c++. ### ROOT version. ```; ROOT Version: 6.33.01; Built for linuxx8664gcc on Jun 12 2024, 23:54:24; From heads/master@v6-31-01-2329-g4fe33d2d91; ```. ### Installation method. LCG dev3. ### Operating system. Alma9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15842:75,Depend,Depending,75,https://root.cern,https://github.com/root-project/root/issues/15842,1,['Depend'],['Depending']
Integrability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Double call to `TNetXNGFile::Close()` leads to a segfault, which is not the case for `TFile::Close()` in general. This leads to bugs when integrating software together like https://github.com/AIDASoft/DD4hep/issues/1156. ### Reproducer. ```c++; TFile *_file0 = TFile::Open(""root://dtn-eic.jlab.org//work/eic2/EPIC/Tutorials/pythia8NCDIS_10x100_minQ2=1_beamEffects_xAngle=-0.025_hiDiv.hepmc3.tree.root"");; _file0->Close();; _file0->Close();; ```. ### ROOT version. ROOT 6.26/06; xrootd-5.4.3. ### Installation method. from nixpkgs. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13503:213,integrat,integrating,213,https://root.cern,https://github.com/root-project/root/issues/13503,1,['integrat'],['integrating']
Integrability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Ever since integrating with ROOT, my cmake project cannot find a dependency using `find_package()`. It seems that `ROOTConfig.cmake` [reconfigures](https://github.com/root-project/root/blob/v6-32-00/cmake/scripts/ROOTConfig.cmake.in#L148) the value of `CMAKE_FIND_LIBRARY_PREFIXES` in order to find ROOT libraries with the `lib` prefix. However, the original value is never put back. Later on, this breaks e.g. `find_library(ZLIB)`, which relies on the existence of a file called `zlib.lib` (not `libzlib.lib`). This was discussed in [another issue](https://github.com/microsoft/vcpkg/issues/39099). ### Reproducer. 1. Create a hello world C++ project with cmake build system.; 2. Add dependency on ROOT using `find_package(ROOT CONFIG REQUIRED)`.; 3. Add dependency on ZLIB using `find_package(ZLIB REQUIRED)`.; 4. Attempt to configure the project with cmake. Expected result: the project configures successfully and can be built.; Actual result: the configuration fails, see [the issue referenced earlier](https://github.com/microsoft/vcpkg/issues/39099) for detailed logs. ### ROOT version. My build environment uses ROOT v6.26.10, but I confirmed that the bug is present in v6.32.00 as well. ### Installation method. pre-built binary. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15727:86,integrat,integrating,86,https://root.cern,https://github.com/root-project/root/issues/15727,4,"['depend', 'integrat']","['dependency', 'integrating']"
Integrability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. For my project I use LCG nightly builds (dev3 slot) of ROOT and from this morning I see numerous messages of this kind . ```Warning in <TBufferFile::WriteObjectAny>: since RooNLLVar has no public constructor; 	which can be called without argument, objects of this class; 	can not be read with the current library. You will need to; 	add a default constructor before attempting to read it.; ```. ### Reproducer. ROOT master from LCG dev3 nightly builds . ### ROOT version. ROOT master from LCG dev3 nightly builds . ### Installation method. LCG dev3 nightly build. ### Operating system. centos7 . ### Additional context. Same warning messages I see also for other classes like `RooRealMPFE`. Also I see numerous messages ; ```; Warning in <TBufferFile::CheckObject>: reference to object of unavailable class RooAbsArg, offset=983040 pointer will be 0; Error in <TBufferFile::CheckByteCount>: object of class vector<RooAbsArg*> read too few bytes: 227437 instead of 235302; Error in <TClass::New>: cannot create object of class RooNLLVar; Error in <TBufferFile::ReadObject>: could not create object of class RooNLLVar; Error in <TExMap::Remove>: key 463722250 not found at 1407; ```; but likely they are induced by the same problem of removed default constructors,",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13280:172,message,messages,172,https://root.cern,https://github.com/root-project/root/issues/13280,3,['message'],['messages']
Integrability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hello, . I have used the latest version of ROOT through docker container.; The VDT related variables are not found in cmake although it is built internally. ```; -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") ; CMake Error at /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):; Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY); Call Stack (most recent call first):; /usr/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE); /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args); /usr/share/cmake-3.22/Modules/CMakeFindDependencyMacro.cmake:47 (find_package); /opt/root/cmake/ROOTConfig.cmake:132 (find_dependency); cmake/Req/LoadROOT.cmake:5 (find_package); CMakeLists.txt:83 (include); -- Configuring incomplete, errors occurred!; ```. ### Reproducer. docker run -it rootproject/root:latest. Then run a cmake using: find_package(ROOT REQUIRED). ### ROOT version. 6.30. ### Installation method. docker. ### Operating system. ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14195:468,message,message,468,https://root.cern,https://github.com/root-project/root/issues/14195,1,['message'],['message']
Integrability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Hi, build craps out as seen below. Reasonably standard build, the only difference from (my) usual is that I have no preinstalled xrootd, no idea if that is related. I've seen similar issues on 13.2-RELEASE. Something makes it think it is seeing llvm2 (system has 16, not sure what root builds - 14? 15?). ```; [ 51%] Performing configure step for 'clad'; CMake Error at /home/mkrzewic/build/root/interpreter/cling/tools/plugins/clad/clad-prefix/src/clad-stamp/clad-configure-Release.cmake:37 (message):; Command failed: 1. '/usr/local/bin/cmake' '-G' 'Unix Makefiles' '-DCMAKE_BUILD_TYPE=Release' '-DCMAKE_C_COMPILER=/usr/bin/cc' '-DCMAKE_C_FLAGS= -pipe -Wall -W -pthread -fPIC' '-DCMAKE_CXX_COMPILER=/usr/bin/c++' '-DCMAKE_CXX_FLAGS= -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-semantic-interposition -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fPIC -fno-rtti' '-DCMAKE_INSTALL_PREFIX=/home/mkrzewic/build/root/etc/cling//plugins' '-DLLVM_DIR=/home/mkrzewic/build/root/interpreter/llvm-project/llvm' '-DCLANG_INCLUDE_DIRS=/home/mkrzewic/src/root/interpreter/llvm-project/clang/include' '/home/mkrzewic/build/root/interpreter/llvm-project/llvm/tools/clang//include' '-DCMAKE_CXX_STANDARD=17' '-DClang_DIR=/home/mkrzewic/build/root/interpreter/llvm-project/llvm/tools/clang/' '-DClang_CONFIG_EXTRA_PATH_HINTS=' '-DLLVM_FORCE_USE_OLD_TOOLCHAIN=ON' '-DCLAD_BUILD_STATIC_ONLY=ON' '-GUnix Makefiles' '-S' '/home/mkrzewic/build/root/interpreter/cling/tools/plugins/clad/clad-prefix/src/clad' '-B' '/home/mkrzewic/build/root/interpreter/cling/tools/plugins/clad/clad-prefix/src/clad-buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14492:568,message,message,568,https://root.cern,https://github.com/root-project/root/issues/14492,1,['message'],['message']
Integrability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. If the input numpy arrays to `RooDataSet.from_numpy` are not c-contiguous, then the resulting dataset will have messed up values. ### Reproducer. ```python; import itertools; import numpy as np. import ROOT. obs_1 = ROOT.RooRealVar('obs_1' , 'obs_1', 70, 70, 190); obs_1.setBins(30); obs_2 = ROOT.RooRealVar('obs_2' , 'obs_2', 100, 100, 180); obs_2.setBins(80). val_obs_1 = []; val_obs_2 = []; for i in range(obs_1.numBins()):; obs_1.setBin(i); val_obs_1.append(obs_1.getVal()); for i in range(obs_2.numBins()):; obs_2.setBin(i); val_obs_2.append(obs_2.getVal()) . # so that all combination of values are in the dataset; val_cart_product = np.array(list(itertools.product(val_obs_1, val_obs_2))); data = {; 'obs_1': val_cart_product[:, 0],; 'obs_2': val_cart_product[:, 1]; }. dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)); ```. This gives (memory dependent):; ```; >>> dataset.to_numpy(); {'obs_1': array([ 72. , 100.5, 72. , ..., 178.5, 128. , 179.5]),; 'obs_2': array([100.5, 72. , 101.5, ..., 128. , 179.5, 132. ])}; ```. The expected output should be; ```; >>> dataset.to_numpy(); {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),; 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 179.5])}; ```. This happens because the arrays `data['obs_1']` and `data['obs_2']` are not c-contiguous:; ```; >>> data['obs_1'].flags; C_CONTIGUOUS : False; F_CONTIGUOUS : False; OWNDATA : False; WRITEABLE : True; ALIGNED : True; WRITEBACKIFCOPY : False; UPDATEIFCOPY : False; ```. If we make the arrays c-contiguous, the resulting dataset is correct:; ```; for key, arr in data.items():; if not arr.flags.c_contiguous:; data[key] = np.ascontiguousarray(arr); dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)); ```; this gives; ```; >>> dataset.to_numpy(); {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),; 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 17",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13605:950,depend,dependent,950,https://root.cern,https://github.com/root-project/root/issues/13605,1,['depend'],['dependent']
Integrability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. If you build ROOT 6.30.01, some TMVA / SOFIE ONNX support is compiled in, which required building some protobuf generated code. However, due to the fact /opt/homebrew/ is prepended to the search path, you get a conflict like:. ```; /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:17:2: error: This file was generated by an older version of protoc which is; #error This file was generated by an older version of protoc which is; ^; /Volumes/build/alice-ci-workdir/alidist-o2/sw/BUILD/8ad3db67bd8069efafa78e7f340f28929ca4c88f/ROOT/tmva/sofie_parsers/onnx_proto3.pb.h:18:2: error: incompatible with your Protocol Buffer headers. Please; #error incompatible with your Protocol Buffer headers. Please; ^; ```. in the case you are trying to use, for whatever reason, a protobuf which is not provided by homebrew. Could you please append (rather than prepend) the /opt/homebrew/include path?. ### Reproducer. Just try to build ROOT with your own protobuf which is different and incompatible from the one provided by homebrew. ### ROOT version. 6.30.01. ### Installation method. Own build. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14207:762,Protocol,Protocol,762,https://root.cern,https://github.com/root-project/root/issues/14207,2,['Protocol'],['Protocol']
Integrability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. In order to try to silence some warnings coming from ""externals"" during dictionary generation for our classes (where our types would publicly depend on externals that themselves generate some warning), we just now started to teach our build system to provide include paths separately with `-I` and `-isystem` to the dictionary generation commands. (See: https://gitlab.cern.ch/atlas/atlasexternals/-/merge_requests/1028). As it happens, this didn't solve our original issue with an older version of [TBB](https://github.com/oneapi-src/oneTBB), but that I did not manage to reproduce with a standalone example yet, so let's ignore that one for now. (You can find some more info in: https://gitlab.cern.ch/atlas/athena/-/merge_requests/64172). But one issue that I found during this development is fairly easy to reproduce. It seems that one can not provide `-isystem` and `-D` command line options to `genreflex` in any order. Specifying `-D` flags after `-isystem` flags seems to not work. ### Reproducer. Take the following file, called `header.h`:. ```c++; #ifndef HEADER_H; #define HEADER_H. // Require the preprocessor definition.; #ifndef DO_NOT_FAIL; #error ""Preprocessor definition not set!""; #endif. /// Dummy type; struct TypeWithDictionary {; int foo;; };. #endif; ```. With the following additional `selection.xml` file:. ```xml; <lcgdict>; <class name=""TypeWithDictionary"" />; </lcgdict>; ```. With these two, I can run the following happily:. ```; [bash][atspot01]:root-dict-isystem > genreflex header.h --select=selection.xml -o test_dict_success.cpp -D DO_NOT_FAIL -isystem /some/path; [bash][atspot01]:root-dict-isystem > head test_dict_success.cpp ; // Do NOT change. Changes will be lost next time file is generated. #define R__DICTIONARY_FILENAME test_dict_success; #define R__NO_DEPRECATION. /*******************************************************************/; #include <stddef.h>; #include <stdio.h>; #i",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13207:217,depend,depend,217,https://root.cern,https://github.com/root-project/root/issues/13207,1,['depend'],['depend']
Integrability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS 14, if you compile a library with ACLiC, it is not possible to load it in PyROOT with `gSystem.Load()` without loading `libRint` before. ### Reproducer. ```sh; # Creating a dummy library; echo ""void foo() {}"" > foo.C; root -l -b -q -e "".L foo.C+"". # With the ROOT interpreter, everything goes fine; root -l -b -q -e 'std::cout << gSystem->Load(""foo_C"") << std::endl;'. # Let's see with a compiled script; echo '#include <TSystem.h>; #include <iostream>; int main() { std::cout << gSystem->Load(""foo_C"") << std::endl; }' > main.cpp. g++ main.cpp $(root-config --cflags) -I $(root-config --incdir) -L $(root-config --libdir) -lCore -o main; ./main. # But with PyROOT, it doesn't work on macos 14 beta; python3 -c 'import ROOT; print(ROOT.gSystem.Load(""foo_C""))'. # With loading Rint before, it works!; python3 -c 'import ROOT; ROOT.gSystem.Load(""libRint""); print(ROOT.gSystem.Load(""foo_C""))'. ```; The Python version without loading libRint first is failing on macos 14 beta with the following error message:; ```txt; cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/jenkins/night/LABEL/macbeta/SPEC/cxx20/V/master/build/roottest/python/pythonizations/foo_C.so, 0x0009): Library not loaded: @rpath/libRint.so; Referenced from: <3831F8AB-C7D6-3522-AF78-6E908F97B77A> /Users/sftnight/build/jenkins/night/LABEL/macbeta/SPEC/cxx20/V/master/build/roottest/python/pythonizations/foo_C.so; Reason: no LC_RPATH's found; -1; ```. ### ROOT version. ROOT `master`. ### Installation method. build from source. ### Operating system. macOS 14 (beta). ### Additional context. This problem makes several tests in the `macbeta` nighlies fail:; https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=macbeta,SPEC=cxx20,V=master/lastBuild/#showFailuresLink",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13734:1082,message,message,1082,https://root.cern,https://github.com/root-project/root/issues/13734,1,['message'],['message']
Integrability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. On macOS, it is possible to demonstrate two bugs of the WebGraphics with one simple PyROOT script:; 1. A crash, upon first execution; 2. A system freeze, once the browser is loaded. ## Crash; Upon first execution, a browser window is loaded, however the script exits, even if the `input` function should stop execution. The error message:; ```; [70538:42503:0510/092746.969274:ERROR:trust_store_mac.cc(750)] Error parsing certificate:; ERROR: Failed parsing extensions; [70538:259:0510/092747.479455:ERROR:background_contents_service.cc(441)] No extension found for BackgroundContents - id = ejidjjhkpiekdjhfgtyshbnagldlkglhimk. $ ; -> Created TensorFlow Lite XNNPACK delegate for CPU.; ```; The last line is not a mistake: it really appears on my terminal. ## Faulty behaviour: Freeze; Now that chrome is loaded, if I re-launch the same script, everything stop before quitting as expected, the webcanvas window is displayed, however it's not responsive: whatever is clicked has no effect. ### Reproducer. ```py; import ROOT. ROOT.gROOT.SetWebDisplay(). c = ROOT.TCanvas(); h = ROOT.TH1D("""","""",64, -4,4); h.FillRandom(""gaus""); h.Draw(). input(""Press Enter to exit""); ```. ### ROOT version. 6.32 and master. ### Installation method. Sources. ### Operating system. MacOS 14. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15474:405,message,message,405,https://root.cern,https://github.com/root-project/root/issues/15474,1,['message'],['message']
Integrability,### Check duplicate issues. - [X] Checked for duplicates. ### Description. ROOT_HEAD failed in the nightlies in centos7 platfom; The reported error estracted from the[ log file ](http://cdash.cern.ch/upload/43670d452f7f3ef813ce655ef9357e62800d1e7a/ROOT-HEAD-configure.log)is:; gnu/11.3.0/../../../../include/c++/11.3.0/x86_64-pc-linux-gnu:/cvmfs/sft.cern.ch/lcg/releases/gcc/11.3.0-ad0f5/x86_64-centos7/bin/../lib/gcc/x86_64-pc-linux-gnu/11.3.0/../../../../include/c++/11.3.0/backward' at runtime.; -- And then fallback to: 'g++'; -- Performing Test CXX_HAS_fno_rtti; -- Performing Test CXX_HAS_fno_rtti - Success; -- Performing Test found_arc4; -- Performing Test found_arc4 - Failed; -- Performing Test found_arc4_bsd; -- Performing Test found_arc4_bsd - Failed; -- Performing Test found_getrandom; -- Performing Test found_getrandom - Failed; CMake Error at core/unix/CMakeLists.txt:42 (message):; Fail to detect cryptographic random generator. ### Reproducer. [lcg_nightly_pipeline](https://lcgapp-services.cern.ch/spi-jenkins/view/LCG%20Nightlies/job/lcg_nightly_pipeline/). ### ROOT version. master. ### Installation method. build from source. ### Operating system. centos7. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14958:890,message,message,890,https://root.cern,https://github.com/root-project/root/issues/14958,1,['message'],['message']
Integrability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Since a few days, our GitHub Actions are failing when building ROOT via CMake. This is part of a SuperBuild with lots of other projects, and uses a parallel build. The problem is reproducible, i.e. all jobs fail at the same point. However, the failure depends on the ROOT version. When compiling v6-26-10, we get https://github.com/SyneRBI/SIRF-SuperBuild/issues/857; ```; CMake Error at /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/builds/ROOT/build/TBB-prefix/src/TBB-stamp/TBB-build-Release.cmake:49 (message):; Command failed: 2. 'make' 'compiler=gcc' 'cpp0x=1' 'CXXFLAGS= -mno-rtm' 'CPLUS=/usr/lib/ccache/g++-11' 'CONLY=/usr/lib/ccache/gcc-11' 'LDFLAGS='; See also; /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/builds/ROOT/build/TBB-prefix/src/TBB-stamp/TBB-build-*.log; ```; the log file says; ```; build/common.inc:48: ""Warning: deprecated cpp0x=1 is used, stdver must be used instead. Building in stdver=c++0x mode.""; ../../build/Makefile.tbb:28: CONFIG: cfg=debug arch=intel64 compiler=gcc target=linux runtime=cc11.4.0_libc2.35_kernel6.2.0; make[7]: *** read jobs pipe: Bad file descriptor. Stop.; make[7]: *** Waiting for unfinished jobs....; In file included from ../../src/tbb/concurrent_hash_map.cpp:17:; ../../include/tbb/concurrent_hash_map.h: In constructor ‘tbb::interface5::internal::hash_map_base::hash_map_base()’:; ../../include/tbb/concurrent_hash_map.h:131:24: warning: ‘void* memset(void*, int, size_t)’ clearing an object of type ‘struct tbb::interface5::internal::hash_map_base::bucket’ with no trivial copy-assignment; use value-initialization instead [-Wclass-memaccess]; 131 | std::memset(my_embedded_segment, 0, sizeof(my_embedded_segment));; | ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; ../../include/tbb/concurrent_hash_map.h:93:16: note: ‘struct tbb::interface5::internal::hash_map_base::bucket’ declared here; 93 | struct bucket : tbb::internal::",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14520:327,depend,depends,327,https://root.cern,https://github.com/root-project/root/issues/14520,2,"['depend', 'message']","['depends', 'message']"
Integrability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. Since last Friday's dev3LCG nightly (i.e. from 26/7) we cannot create a field for `signed char`. This used to work fine w/ the LCG dev3 nightly from 25/7. Here is the error message:. ```; Error in <TRint::HandleTermInput()>: ROOT::Experimental::RException caught: unknown type: signed char (unchecked RResult access!); At:; ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&, const std::string&, bool)::<lambda(const std::string&)> [/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/tree/ntuple/v7/src/RField.cxx:629]; static ROOT::Experimental::RResult<std::unique_ptr<ROOT::Experimental::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&, const std::string&, bool) [/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/tree/ntuple/v7/src/RField.cxx:852]; static ROOT::Experimental::RResult<std::unique_ptr<ROOT::Experimental::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&) [/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/tree/ntuple/v7/src/RField.cxx:592]. ```. ### Reproducer. To setup ROOT:; ```; export ATLAS_LOCAL_ROOT_BASE=/cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase; source ${ATLAS_LOCAL_ROOT_BASE}/user/atlasLocalSetup.sh; lsetup ""asetup Athena,main--dev3LCG,latest""; # any version after r26 (inclusive); ```. To reproduce the error:; ```; root [0] using namespace ROOT::Experimental;; root [1] auto field = RFieldBase::Create(""foo"", ""signed char"").Unwrap();; ```. ### ROOT version. dev3/Fri/ROOT/HEAD (from 26/7). ### Installation method. LCG dev3 nightly build. ### Operating system. AlmaLinux release 9.4 (Shamrock Pampas Cat). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16135:248,message,message,248,https://root.cern,https://github.com/root-project/root/issues/16135,1,['message'],['message']
Integrability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. The Char_t typedef here:. https://github.com/root-project/root/blob/4cf09dc362036e22eaa687cd2566fabb6c8ed693/core/foundation/inc/RtypesCore.h#L37. is incorrect--a bare `char` is not guaranteed to be signed or unsigned. > char — type for character representation which can be most efficiently processed on the target system (has the same representation and alignment as either signed char or unsigned char, but is always a distinct type). [Multibyte characters strings](https://en.cppreference.com/w/cpp/string/multibyte) use this type to represent code units. For every value of type unsigned char in range [​0​, 255], converting the value to char and then back to unsigned char produces the original value.(since C++11) The signedness of char depends on the compiler and the target platform: the defaults for ARM and PowerPC are typically unsigned, the defaults for x86 and x64 are typically signed. To actually guarantee to be a signed type, `Char_t` would have to be declared as `signed char`. From another issue, it appears ROOT is moving away from Rtypes.h since the C++ standard has a evolved a more complete type system, so this may be a ""who cares"" issue... ### Reproducer. n/a. ### ROOT version. latest. ### Installation method. n/a. ### Operating system. n/a. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15927:819,depend,depends,819,https://root.cern,https://github.com/root-project/root/issues/15927,1,['depend'],['depends']
Integrability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. The pythonization of `TDirectoryFile` has a `_TDirectoryFile_Get` function (used to implement `Get()`) that may return a TObject whose memory is not owned by either c++ or python, causing a memory leak. I [attempted to fix the issue](https://github.com/root-project/root/compare/master...silverweed:root:py_tdirectoryfile_fix_leak) with a simple `ROOT.SetOwnership`, but that causes some tests to fail, specifically `pyunittests-pyroot-pyz-tdirectoryfile-attrsyntax-get`. ### Reproducer. 1. in python, open a TFile containing many different objects (e.g. histograms); 2. Get all those objects using `file.Get(name)` in a `for` loop (relinquishing their reference at every iteration); 3. see the memory increase forever. You can test the bug with the following script:; ```; import resource; import ROOT. def print_memory_usage(message):; print(f""{message:50} {resource.getrusage(resource.RUSAGE_SELF).ru_maxrss}""). print_memory_usage(""start""); histogram_names = open(""histogram_names.txt"").read().splitlines(); print_memory_usage(""read histogram names""). fn = ""NTUP_PHYSVAL.40023485._000001.pool.root.1""; with ROOT.TFile.Open(fn) as f:; print_memory_usage(""open ROOT file""); for i, histogram_name in enumerate(sorted(histogram_names)):; h = f.Get(histogram_name); if i % 1000 == 0:; print_memory_usage(f""read {i+1} histograms""); print_memory_usage(""read all histograms""); print_memory_usage(""outside context maneger (closing ROOT file)""); ```. The files used were provided by the user who reported the issue, [see the forum post](https://root-forum.cern.ch/t/memory-leak-when-looking-on-histograms/60429). ### ROOT version. master. ### Installation method. built from source. ### Operating system. Linux. ### Additional context. This bug was reported on [the forum](https://root-forum.cern.ch/t/memory-leak-when-looking-on-histograms/60429)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16178:902,message,message,902,https://root.cern,https://github.com/root-project/root/issues/16178,2,['message'],['message']
Integrability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. This https://github.com/root-project/root/pull/14703 (my guess on the changes, I did not confirm that this is the case) seems to have caused issues in python projects depending on root. E.g. https://lcgapp-services.cern.ch/cdash/testDetails.php?test=23867111&build=312289 ; ```; # setting LC_ALL to ""C""; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; File ""/cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Thu/x86_64-el9-gcc11-opt/python/GaudiPython/__init__.py"", line 29, in <module>; from .Bindings import * # noqa: F401 F403; File ""/cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Thu/x86_64-el9-gcc11-opt/python/GaudiPython/Bindings.py"", line 55, in <module>; import cppyy; File ""/cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Thu/x86_64-el9-gcc11-opt/lib/cppyy/__init__.py"", line 71, in <module>; from ._cpython_cppyy import *; File ""/cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Thu/x86_64-el9-gcc11-opt/lib/cppyy/_cpython_cppyy.py"", line 18, in <module>; c = loader.load_cpp_backend(); File ""/cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Thu/x86_64-el9-gcc11-opt/lib/cppyy_backend/loader.py"", line 79, in load_cpp_backend; raise RuntimeError(""could not load cppyy_backend library""); RuntimeError: could not load cppyy_backend library; ```. and many others in the list https://lcgapp-services.cern.ch/cdash/viewTest.php?onlyfailed&buildid=312289. Are we missing some required changes to build options?. ### Reproducer. On any centos7 machine with cvmfs (or use available stack for your OS); ```; source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-gcc11-dbg/setup.sh; python -c ""import GaudiPython""; ```. ### ROOT version. Master from tonight.; Things were fine yesterday. ### Installation method. build from sources in lcgcmake, options https://gitlab.cern.ch/sft/lcgcmake/-/blob/master/projects/CMakeLists.txt#L95. ### Operating system. centos7, alma9, alma8, ubuntu20, ubuntu22. ### Add",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14904:242,depend,depending,242,https://root.cern,https://github.com/root-project/root/issues/14904,1,['depend'],['depending']
Integrability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. We have a custom histogram class which has a custom Merge method which is declared as protected. Instances of this class get merged together via TFileMerger. This worked fine until recently, when merging started to silently fail (only the first histogram was in the merged result, the others were ignored). The only thing we saw (which went unnoticed) is a message a few lines above saying:. ```c++; input_line_35:7:57: error: 'Merge' is a protected member of 'StepTHnT<TArrayF>'; new (ret) (long long) (((StepTHnT<TArrayF>*)obj)->Merge(*(TCollection**)args[0]));; ^; G__O2Framework dictionary payload:254:12: note: declared protected here; Long64_t Merge(TCollection* list) override;; ^; ```. Is this a known issue worth investigating? In the end our solution was to mark the Merge method as public, however it would be good to understand what happened and if the new behaviour is the desired one (and it would be good to have TFileMerger to throw if it does not manage to do its job). ### Reproducer. ```; void merge_test(); {; TFileMerger merger(kFALSE, kFALSE);; merger.OutputFile(""AnalysisResults.root"");; ; ifstream fin(""input_data.txt"");; while (fin.good()); {; char buffer[2000];; fin.getline(buffer, 2000);; ; if (strlen(buffer) == 0); continue;; ; Printf(""%s"", buffer);; ; merger.AddFile(buffer);; }; ; merger.Merge(); ; }; ```. ### ROOT version. 6.30.01. ### Installation method. aliBuild. ### Operating system. Linux, macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14963:432,message,message,432,https://root.cern,https://github.com/root-project/root/issues/14963,1,['message'],['message']
Integrability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. When a `TChain` is added as a friend to a `TTree` , branches coming from the `TChain` are no longer updated after switching to the second file in the chain. ### Reproducer. The [attached macro](https://github.com/user-attachments/files/17592119/bugDemo.txt) reproduces the issue. Save it `bugDemo.C` and run it. The correct behavior is to always print `true`, but we get some `false`. The code first constructs two trees with an `index` branch. The index is the entry number, going from 0 to 10 in the first file and 10 to 20 in the second one. Then, a longer tree is constructed with 20 empty entries. The two files containing the entry number as merged into a chain and attached as a friend to the empty tree. Iterating over the long tree yields the correct value of `index` until the 10th entry, than a constant 9 (the last value in the first file). Correct behavior is 0 to 20. This can be obtained by wrapping the long tree in a `TChain`. The underlying issue is that `TTree::LoadTree` lacks the following code present in `TChain::LoadTree`:; https://github.com/root-project/root/blob/2cc4b70d2e2bd89d9b639c894b4e0558be47c22b/tree/tree/src/TChain.cxx#L1407-L1434. ### ROOT version. Seen in:; * ROOT 6.30/04 (anaconda); * ROOT 6.28/04 (LCG 104). I couldn't find any code change in `master` in the relevant areas. ### Installation method. anaconda and LCG 104. ### Operating system. Linux (CentOS 9, Ubuntu 22.04, Ubuntu 24.04). ### Additional context. Possibly related to the following Jira tickets:; * https://its.cern.ch/jira/browse/ROOT-10778 (open); * https://its.cern.ch/jira/browse/ROOT-2935 (reportedly fixed in 6.04.00)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16804:981,wrap,wrapping,981,https://root.cern,https://github.com/root-project/root/issues/16804,1,['wrap'],['wrapping']
Integrability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. When attempting to produce a PCM from a module map specifying a header that cannot be found, I get the message; ```; /scratch/greenc/build/mrb-art-summer/e28-prof/build_slf7.x86_64/critic/critic/test/art/sampling-input/module.modulemap:3:10: error: cannot emit module critic_test_art_sampling-input_dict: size must be explicitly specified for missing header file ""canvas/Persistency/Common/Sampled.h""; header ""canvas/Persistency/Common/Sampled.h""; ^; ```; This—while unwelcome—is reasonable. However, `rootcling` then exits with status code 0 and the continues with the PCM file never generated. ### Reproducer. 1. Create a simple module map attempting to use a nonexistent header, e.g.; ```; module ""critic_test_art_sampling-input_dict"" {; requires cplusplus; header ""canvas/Persistency/Common/Sampled.h""; link ""libcanvas.so""; }; ```; 1. Attempt to create a PCM from it:; ```; rootcling --cxxmodule -f -v4 ...; ```; 1. Check the error code:; ```; echo $?; ```. ### ROOT version. ```; ------------------------------------------------------------------; | Welcome to ROOT 6.28/04 https://root.cern |; | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on May 08 2023, 02:44:07 |; | From tags/v6-28-04@v6-28-04 |; | With g++ (GCC) 13.1.0 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```. ### Installation method. UPS. ### Operating system. SL7. ### Additional context. * GCC13.1.0/C++20",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13675:178,message,message,178,https://root.cern,https://github.com/root-project/root/issues/13675,1,['message'],['message']
Integrability,"### Check duplicate issues. - [X] Checked for duplicates. ### Description. When trying to build any image based on `rootproject/root:6.32.02-ubuntu24.04` docker file and build any cmake application which references root, it fails with . ```; 9.604 CMake Error at /usr/share/cmake-3.28/Modules/FindPackageHandleStandardArgs.cmake:230 (message):; 9.604 Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY); 9.604 Call Stack (most recent call first):; 9.604 /usr/share/cmake-3.28/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE); 9.604 /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args); 9.604 /usr/share/cmake-3.28/Modules/CMakeFindDependencyMacro.cmake:76 (find_package); 9.604 /opt/root/cmake/ROOTConfig.cmake:167 (find_dependency); 9.604 CMakeLists.txt:363 (find_package); ```. I tried 3 different packages `ACTS`, `PODIO`, `JANA2` - all failed with the same error during the configuration. . ### Reproducer. Reproducer, where ACTS is taken as an example. ```Dockerfile. FROM rootproject/root:6.32.02-ubuntu24.04. # Number of build threads; ARG BUILD_THREADS=8. ARG DEBIAN_FRONTEND=noninteractive. RUN root-config --cflags. RUN apt-get update &&\; apt-get install -y python3-pip python3-dev sudo git cmake gdb ninja-build apt-utils bash ccache clang valgrind &&\; apt-get install -y dialog apt-utils&&\; apt-get install -y tzdata &&\; apt-get install -y libmsgsl-dev libftgl-dev libxml2-dev libldap2-dev libgsl0-dev libfftw3-dev libmysqlclient-dev libavahi-compat-libdnssd-dev libssl-dev python3-dev libcfitsio-dev xlibmesa-glu-dev libkrb5-dev gfortran graphviz-dev libpcre3-dev libglew-dev libxmu-dev libexpat-dev python3-jinja2 libtbb-dev libxerces-c-dev cmake libboost-filesystem-dev dpkg-dev libspdlog-dev libxext-dev qtbase5-dev libqt5opengl5-dev libx11-dev libboost-test-dev libocct-draw-dev libeigen3-dev libocct-data-exchange-dev python3-dev libocct-foundation-dev libfmt-dev libxft-dev libboost-program-options-dev libboost-dev binutils",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16038:334,message,message,334,https://root.cern,https://github.com/root-project/root/issues/16038,1,['message'],['message']
Integrability,"### Check duplicate issues. - [x] Checked for duplicates. ### Description. A minor note on warning message from HS3 suggest non-existing page,; https://github.com/root-project/root/blob/master/roofit/hs3/README.md. Full message; ```; unable to export class 'RooBreitWigner' - no export keys available!; there are several possible reasons for this:; 1. RooBreitWigner is a custom class that you or some package you are using added.; 2. RooBreitWigner is a ROOT class that nobody ever bothered to write a serialization definition for.; 3. something is wrong with your setup, e.g. you might have called RooFit::JSONIO::clearExportKeys() and/or never successfully read a file defining these keys with RooFit::JSONIO::loadExportKeys(filename); either way, please make sure that:; 3: you are reading a file with export keys - call RooFit::JSONIO::printExportKeys() to see what is available; 2 & 1: you might need to write a serialization definition yourself. check https://github.com/root-project/root/blob/master/roofit/hs3/README.md to see how to do this!; (int) 0; ```. ### Reproducer. 1. Use the latest root,; `source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-opt/setup.sh`. 2. run a script, `root -l -b -q export_pdf.cxx++`; ```c++; #include ""RooRealVar.h""; #include ""RooBreitWigner.h""; #include ""RooWorkspace.h""; #include ""RooFitHS3/RooJSONFactoryWSTool.h"". int export_pdf(); {; RooRealVar x(""x"", ""x"", -10, 10);; RooRealVar mean(""mean"", ""mean of gaussian"", 1, -10, 10);; RooRealVar gamma(""gamma"", ""width of bw"", 1, 0.1, 10);; RooBreitWigner bw(""bw"", ""non-rel bw"", x, mean, gamma);. RooWorkspace w(""ws"");; w.import(bw);. RooJSONFactoryWSTool tool(w);; tool.exportJSON(""standard_pdf.json"");; return 0;; }; ```. ### ROOT version. ```; root --version; ROOT Version: 6.33/01; Built for linuxx8664gcc on Apr 26 2024, 23:06:35; From heads/master@v6-31-01-1819-gb5ad658677; ```. ### Installation method. LCG. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15370:99,message,message,99,https://root.cern,https://github.com/root-project/root/issues/15370,2,['message'],['message']
Integrability,"### Check duplicate issues. - [x] Checked for duplicates. ### Description. Hello, I have been trying to play with parameter names with TF1 (and TFormula). I need to draw a TF1 curve, for simplicity I want to include clear parameter names.; But I see some very strange behaviors.. I play with parameter names and my formula gets completely mess up..; How can this be ?. The output of the reproducer is the following:; My f0 gets modified into t0..; ```; root [1] .x test.C; [f0] + [beta]*x; [t0]+[beta]*x <<<<< EXPECTED : ""[f0] + [beta]*x""; ```. ### Reproducer. Here is the reproduced. My example just use f0 and beta, but my program use some other parameters also depending on if/else conditions. . ```; {; 	double t0 = 0;; 	double t1 = 10;; 	; 	double f0 = 12.5;; 	double f1 = 2;. 	double beta = (f1-f0)/t1;. 	TString formulaStr = ""[f0] + [beta]*x"";; TF1 *formula = new TF1(""formula1"", formulaStr);; formula->SetParName (0, ""beta"");; formula->SetParameter(0, beta);; formula->SetParName (1, ""t0"");; formula->SetParameter(1, t0);; formula->SetParName (2, ""f0"");; formula->SetParameter(2, f0);; formula->SetParName (3, ""t1"");; formula->SetParameter(3, t1);; formula->SetParName (4, ""f1"");; formula->SetParameter(4, f1);. std::cout << formulaStr << std::endl;; std::cout << formula->GetFormula()->GetExpFormula() << std::endl;; }; ```. ### ROOT version. ROOT master 2023/08/31. ### Installation method. build from source. ### Operating system. macos. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13709:664,depend,depending,664,https://root.cern,https://github.com/root-project/root/issues/13709,1,['depend'],['depending']
Integrability,"### Check duplicate issues. - [x] Checked for duplicates. ### Description. Hello,. I have defined an enum class type, such that I can switch between mathematical representations easily. Considering the reproducer below, I get the following error message:; ```; Forward declarations from [..]/install/lib/libXXX.rootmap:3:11: error: unknown type name 'MyEnum'; template <MyEnum> class MyClass;; ^; ```. Here is an overview of the rootmap, MyEnum is not declared ; ``` #Rootmap; { decls }; [..]; template <MyEnum> class MyClass;; [..]; [ libXXX.dylib ]; [...]; ```. How can I fix the root map ? ; It seem `enum class` is missing in root map so MyEnum is not defined. ### Reproducer. Here are some abstractions:; ```; # LinkDef.h; #pragma link C++ enum class MyEnum;. #pragma link C++ class MyClass<MyEnum::E0>+;; #pragma link C++ class MyClass <MyEnum::E1>+;; #pragma link C++ class MyClass <MyEnum::E2>+;. # Header.h; enum class MyEnum { E0, E1, E2 };; template <MyEnum T = MyEnum::E0>; class MyClass : public MyClassAbstract; {; // [...]; }; ```. ### ROOT version. v6.32.04. ### Installation method. build from source. ### Operating system. macOS 15.0. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16496:246,message,message,246,https://root.cern,https://github.com/root-project/root/issues/16496,1,['message'],['message']
Integrability,"### Check duplicate issues. - [x] Checked for duplicates. ### Description. Hi all,. [MSVC] ROOT_x86 failed due to failed due to libCling.exp : error LNK2001: unresolved external symbol ""char const * __cdecl __std_find_trivial<char const ,char>(char const *,char const *,char). It can be reproduced on this commit `1f86c24` Could you please help look at this issue? Thanks in advance!. ### Reproducer. Steps to reproduce the behavior:; 1. https://github.com/root-project/root C:\gitP\root-project/root; 2. Open a VS2022 x86 cmd; 3. set VSCMD_SKIP_SENDTELEMETRY=1 & ""C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"" -host_arch=x86 -arch=x86 & set _CL_= /Bcapture_repro C:\a\_work\_temp\rwc_project_logs\ROOT\preprocessed_repro_build & set _LINK_= /onfailrepro:C:\a\_work\_temp\rwc_project_logs\ROOT\link_repro_build; 4. cd /d C:\gitP\root-project\root\build_x86; 5. msbuild /m /p:Platform=Win32 /p:Configuration=Release ALL_BUILD.vcxproj /t:Rebuild 2>&1. Error Message: After updating the hash commit, ROOT_amd64 passed but ROOT_X86 failed with the following error:; libCling.exp : error LNK2001: unresolved external symbol ""char const * __cdecl __std_find_trivial<char const ,char>(char const *,char const *,char)"". **What is the expected behaviour?**; Project Pass. **Operating System**; Windows. **What versions of the operating systems?**; VS 2022 + Windows Server 2022 Datacenter. **Architectures**; 86-bit. **Stacktrace**; No response. **Plug-in formats (if applicable)**; No response. **Plug-in host applications (DAWs) (if applicable)**; No response. **Testing on the develop branch**; The bug is present on the develop branch. ### ROOT version. N/A. ### Installation method. N/A. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15336:995,Message,Message,995,https://root.cern,https://github.com/root-project/root/issues/15336,1,['Message'],['Message']
Integrability,"### Check duplicate issues. - [x] Checked for duplicates. ### Description. I updated my mac system to 15 yesterday. My Mac is M1. The root did not work and I rebuilt it. However, I couldn't build and got the error; While building module 'Core':; While building module 'std' imported from input_line_1:1:; While building module '_wctype' imported from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/wctype.h:31:; While building module '__wctype' imported from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.0.sdk/usr/include/_wctype.h:36:; In file included from <module-includes>:1:; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.0.sdk/usr/include/___wctype.h:72:10: fatal error: cyclic dependency in module 'std': std -> _wctype -> __wctype -> std; #include <ctype.h>; ^; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.0.sdk/usr/include/_wctype.h:36:10: fatal error: could not build module '__wctype'; #include <_types/_wctrans_t.h>; ~~~~~~~~^; While building module 'Core':; While building module 'std' imported from input_line_1:1:; In file included from <module-includes>:1:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.0.sdk/usr/include/c++/v1/algorithm:1804:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.0.sdk/usr/include/c++/v1/__algorithm/find.h:31:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.0.sdk/usr/include/c++/v1/cwchar:112:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.0.sdk/usr/include/c++/v1/cwctype:56:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Devel",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16486:839,depend,dependency,839,https://root.cern,https://github.com/root-project/root/issues/16486,1,['depend'],['dependency']
Integrability,"### Check duplicate issues. - [x] Checked for duplicates. ### Description. If you build ROOT from a tarball, you'll see the message below during configuration:; ```; -- Found Git: /usr/bin/git (found version ""2.44.0""); CMake Warning at cmake/modules/SetROOTVersion.cmake:85 (message):; GIT_DESCRIBE_ALL is ``·with a format unexpected for tags. Not setting the; commit.; Call Stack (most recent call first):; cmake/modules/SetROOTVersion.cmake:99 (SET_ROOT_VERSION); CMakeLists.txt:77 (include). -- Building ROOT version 6.30.06; ```; Not a big deal, but might be worth fixing. ### Reproducer. Build ROOT from a tarball instead of a git clone. ### ROOT version. ROOT 6.30.06. ### Installation method. Portage. ### Operating system. Gentoo Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15178:124,message,message,124,https://root.cern,https://github.com/root-project/root/issues/15178,2,['message'],['message']
Integrability,"### Check duplicate issues. - [x] Checked for duplicates. ### Description. ROOT misbehaves when ASAN is enabled. Below different incarnation of the problem are illustrated:; - [ ] root/io/bigevent, root/io/event, root/io/compression, root/io/datamodelevolution, root/io/perf, root/treeformula/event, root/treeformula/retobj, ; root/treeformula/schemaEvolution, root/treeformula/sync, root/tree/friend, root/tree/evolution, root/tree/treeproblem, root/treeproxy, root/io/compression : bad linkage to asan functions; - [ ] root/io/references: badly setup dependency on libEvent; - [ ] root/tree/addresses : `AddressSanitizer: heap-buffer-overflow`; - [ ] root/io/newClassDef: Real failure with ASAN enabled; - [ ] root/io/cint: bad linkage to ASAN libraries. Should also check if the tests are needed at all. Moreover, the above (and root/tree/addresses) are automatic Makefile driven tests. They could be translated to CMake to gain granularity. ### Reproducer. Run with Asan. ### ROOT version. master. ### Installation method. From sources (need asan). ### Operating system. Linux, mac. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14682:553,depend,dependency,553,https://root.cern,https://github.com/root-project/root/issues/14682,1,['depend'],['dependency']
Integrability,"### Check duplicate issues. - [x] Checked for duplicates. ### Description. TMVA tests sporadically fail in ROOT's integration buils (both PR and Nightly). Often the stack traces are not easily readable, for example when the test is steered through PyROOT. However, at least one clear problem emerged in the I/O of `TMVA::Experimental::SOFIE::RModel` instances.; In [this build](https://github.com/root-project/root/actions/runs/8568832804/job/23483489958) it can be clearly seen that the segfault happens when a `RModel` instance is read from a ROOT file.; The stack trace is the following:; ``` ; TMVA SOFIE Operator Conv: asymmetric padding not supported. Assume an average padding ; ; *** Break *** segmentation violation; [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info); [/Users/sftnight/ROOT-CI/build/lib/libROOTTMVASofie.so] TMVA::Experimental::SOFIE::InitializedTensor::CastPersistentToShared() (no debug info); [/Users/sftnight/ROOT-CI/build/lib/libROOTTMVASofie.so] TMVA::Experimental::SOFIE::RModel::Streamer(TBuffer&) (no debug info); [/Users/sftnight/ROOT-CI/build/lib/libRIO.so] TKey::ReadObjectAny(TClass const*) (no debug info); [/Users/sftnight/ROOT-CI/build/lib/libRIO.so] TDirectoryFile::GetObjectChecked(char const*, TClass const*) (no debug info); [/Users/sftnight/ROOT-CI/build/tmva/sofie/test/emitFromROOT] EmitModel(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>) (no debug info); [/Users/sftnight/ROOT-CI/build/tmva/sofie/test/emitFromROOT] main (no debug info); [/usr/lib/dyld] start (no debug info); make[2]: *** [SofieCompileModels_ROOT] Error 139; make[1]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ROOT.dir/all] Error 2; make: *** [all] Error 2; ```. This bug could be affecting other ROOT branches (for sure at least master). Moreover, the I/O of those objects might be corrupt ( the class is in the `Experimental` na",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15156:114,integrat,integration,114,https://root.cern,https://github.com/root-project/root/issues/15156,1,['integrat'],['integration']
Integrability,"### Check duplicate issues. - [x] Checked for duplicates. ### Description. The latest master of ROOT doesn't compile with pytorch 2.0.1 installed. The error message is the following:; ```; Torch Version: 2.0.1; RecursiveScriptModule(; original_name=Model; (fc1): RecursiveScriptModule(original_name=Linear); (fc2): RecursiveScriptModule(original_name=Linear); (relu): RecursiveScriptModule(original_name=ReLU); (sigmoid): RecursiveScriptModule(original_name=Sigmoid); ); RecursiveScriptModule(; original_name=Model; (fc1): RecursiveScriptModule(original_name=Linear); (fc2): RecursiveScriptModule(original_name=Linear); (relu): RecursiveScriptModule(original_name=ReLU); (sigmoid): RecursiveScriptModule(original_name=Sigmoid); ); <string>:1: FutureWarning: 'torch.onnx.symbolic_helper._set_onnx_shape_inference' is deprecated in version 1.13 and will be removed in 2.0. Please remove its usage and avoid setting internal variables directly. Python error message:; Traceback (most recent call last):; File ""<string>"", line 6, in <module>; File ""<string>"", line 6, in <dictcomp>; TypeError: 'torch._C.Node' object is not subscriptable; terminate called after throwing an instance of 'std::runtime_error'; what(): ; Failed to run python code: for i in graph[0].nodes():; globals().update(locals()); nodeData={}; nodeData['nodeType']=i.kind(); nodeAttributeNames=[x for x in i.attributeNames()]; nodeAttributes={j:i[j] for j in nodeAttributeNames}; nodeData['nodeAttributes']=nodeAttributes; nodeInputs=[x for x in i.inputs()]; nodeInputNames=[x.debugName() for x in nodeInputs]; nodeData['nodeInputs']=nodeInputNames; nodeOutputs=[x for x in i.outputs()]; nodeOutputNames=[x.debugName() for x in nodeOutputs]; nodeData['nodeOutputs']=nodeOutputNames; nodeDType=[x.type().scalarType() for x in nodeOutputs]; nodeData['nodeDType']=nodeDType; modelData.append(nodeData); Subprocess aborted; make[2]: *** [tmva/pymva/test/CMakeFiles/SofieCompileModels_PyTorch.dir/build.make:70: SofieCompileModels_PyTorch] ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13155:157,message,message,157,https://root.cern,https://github.com/root-project/root/issues/13155,1,['message'],['message']
Integrability,"### Describe the bug. I open a workspace (RooWorkspace) that contains a pdf and various parameters. From these I do a loop on pseudo-experiments (""toys"") that generate a RooDataSet. For each toy in the loop, after generation, I delete the RooDataset. But the memory, as reported by the class ProcInfo_t, never decreases. It means that either ProcInfo_t is not actually showing the current memory information, or that is shows the ""integrated memory used since the beginning"",; or that RooDataSet would have a memory leak ?; or that I have a bug in my program ?. I provide a minimum reproducible example.; See for example : ""EXAMPLE OF PROBLEM"". The minimum program is here :; /afs/cern.ch/work/e/escalier/public/ForOthers/ProblemMemory. ### Expected behavior. the expected behaviour would be that when I delete the RooDataSet, the memory would reduce. ### To Reproduce; The README shows the quick steps for allowing to read the root file. ### Setup; I used root 6.18.00 to reproduce the problem on a french cluster of computer. On lxplus, I reproduce the problem, with root 6.20.02. ### Additional context",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8984:431,integrat,integrated,431,https://root.cern,https://github.com/root-project/root/issues/8984,1,['integrat'],['integrated']
Integrability,"### Describe the bug. If a RooProdPdf is in a RooAddPdf, its values change if one changes the normalization range of its factors with `RooAbsPdf::normRange()`. ### Expected behavior. The values of a RooProdPdf should not depend on the `normRange()` of its factors, because the RooProdPdf is responsible for normalizing itself. ### To Reproduce. Enable the new unit test in `testRooProdPdf` shipped with https://github.com/root-project/root/pull/11485. ### Setup. ROOT master on Arch Linux. ### Additional context. It is important now to fix the issues related to the `RooAbsPdf::normRange()` feature, because as of https://github.com/root-project/root/pull/11455 it is used in multi-range fits. Thus, we need to make sure it's less fragile. After this issue is fixed, it should be verified with `stressRooFit` that things would still work if one were to set the normalization ranges of all PDFs in the computation graph in [RooAbsOptTestStatistic::initSlave()](https://github.com/root-project/root/blob/master/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx#L294) not just the top-level PDF:. For debugging, it could be helpful to replace the RooProdPdfs with `RooFixedProdPdf` objects, which explicitly represent the conputation graph of a RooProdPdf for a given normalization set without internal caching:; ```C++; if(auto prodPdf = dynamic_cast<RooProdPdf *>(pdf)) {; auto normalizedPdf = std::make_unique<RooFixedProdPdf>(*prodPdf, currNormSet);. replaceArg(*normalizedPdf, *pdf);. newNodes.emplace_back(std::move(normalizedPdf));. continue;; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11486:221,depend,depend,221,https://root.cern,https://github.com/root-project/root/issues/11486,1,['depend'],['depend']
Integrability,"### Describe the bug. Reported in https://root-forum.cern.ch/t/new-pyroot-cant-pickle-derived-class-types/45415. ### Expected behavior. That the derived class is pickled without error / a proper error message appears. ### To Reproduce. In Derived.py:; ```python; import ROOT. class Derived(ROOT.TH1F):; def __reduce__(self):; return (self.__class__, ()); ```; In test.py:; ```python; from Derived import Derived; import pickle; pickle.dumps(Derived()); ```. Running test.py throws a segfault in the `__reduce__` implementation:; ```; #7 0x00007f6aeb43a8ac in TClass::StreamerTObject(TClass const*, void*, TBuffer&, TClass const*) () from /home/vpadulan/Programs/rootproject/rootinstall/v6-24-00/lib/libCore.so; #8 0x00007f6aeaaba5a6 in TBufferFile::WriteObjectClass(void const*, TClass const*, bool) () from /home/vpadulan/Programs/rootproject/rootinstall/v6-24-00/lib/libRIO.so; #9 0x00007f6aeaac1b74 in TBufferIO::WriteObjectAny(void const*, TClass const*, bool) () from /home/vpadulan/Programs/rootproject/rootinstall/v6-24-00/lib/libRIO.so; #10 0x00007f6add1ca55f in op_reduce(CPyCppyy::CPPInstance*, _object*) () from /home/vpadulan/Programs/rootproject/rootinstall/v6-24-00/lib/libROOTPythonizations3_8.so; #11 0x00007f6af8cab364 in cfunction_vectorcall_NOARGS () from /lib64/libpython3.8.so.1.0; #12 0x00007f6af8cb58e4 in PyVectorcall_Call () from /lib64/libpython3.8.so.1.0; #13 0x00007f6aeb6c8bf5 in CPyCppyy::im_call(_object*, _object*, _object*) () from /home/vpadulan/Programs/rootproject/rootinstall/v6-24-00/lib/libcppyy3_8.so; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8438:201,message,message,201,https://root.cern,https://github.com/root-project/root/issues/8438,1,['message'],['message']
Integrability,"### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++; void testPoissonIntegral() {. const double mu = 100;; const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is; // basically zero.; std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the; // Poisson to basically infinity.; std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral; std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't!; std::cout << getPoissonIntegral(100, inf, mu) << std::endl;; }; ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:; https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10868:1080,integrat,integration,1080,https://root.cern,https://github.com/root-project/root/issues/10868,1,['integrat'],['integration']
Integrability,"### Describe the bug. When using the `""I""` option for bin integration to fit a TH2, the result is identical to the fit result without that option, even though bin integration should change the fit result. ### Expected behavior. Either the bin integration should be done and therefore the fit result changes, or there should be warning printed and a note in the documentation that the bin integration option only supports 1-d histograms. ### To Reproduce. ```C++; void script() {. auto f2 = new TF2(""f2"",""[norm]*(5-[coefx]*x)*(5-y)"",0,5,0,5);; f2->SetParameters(1.0, 1.0);. int nBins = 10;. auto h2 = new TH2D(""h2"", ""h2"", nBins, 0., 5., nBins, 0., 5.);. h2->FillRandom(""f2"", 500000);. gStyle->SetOptFit(1111);. // kick parameters a bit before fitting; f2->SetParameters(0.9, 0.9);. h2->Fit(f2, """", """");; // h2->Fit(f2, ""I"", """"); // gives exactly the the same result; }; ```. ### Setup. ROOT master on Arch Linux. ### Additional context. I observed this unexpected behavior when trying to reproduce a problem on the ROOT forum:; https://root-forum.cern.ch/t/integrate-tf2-function-over-each-bin/50882",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11016:58,integrat,integration,58,https://root.cern,https://github.com/root-project/root/issues/11016,5,['integrat'],"['integrate-', 'integration']"
Integrability,"### Describe the bug. While investigating some test failures I found that even though a class is in a library's dictionary, and autoloading works in most cases, the autoloading fails if the first member function used is a new or delete and the class has non-standard new and delete operators. ### Expected behavior. Failures like these should not happen:. ```; 870/1231 Test #852: tutorial-roofit-rf509_wsinteractive .................................***Failed 1.39 sec; Processing /builddir/build/BUILD/root-6.26.00/tutorials/roofit/rf509_wsinteractive.C...; RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby ; Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University; All rights reserved, please read http://roofit.sourceforge.net/license.txt; IncrementalExecutor::executeFunction: symbol '_ZN9RooArgSetdlEPv' unresolved while linking [cling interface function]!; You are probably missing the definition of RooArgSet::operator delete(void*); Maybe you need to load the corresponding shared library?; Symbol found in '/builddir/build/BUILD/root-6.26.00/redhat-linux-build/lib/libRooFitCore.so.6.26.00'; did you mean to load it with '.L /builddir/build/BUILD/root-6.26.00/redhat-linux-build/lib/libRooFitCore.so.6.26.00'?; CMake Error at /builddir/build/BUILD/root-6.26.00/redhat-linux-build/RootTestDriver.cmake:227 (message):; error code: 1. 833/1153 Test #804: tutorial-roofit-rf408_RDataFrameToRooFit ............................***Failed 3.01 sec; Processing /builddir/build/BUILD/root-6.26.00/tutorials/roofit/rf408_RDataFrameToRooFit.C...; RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby ; Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University; All rights reserved, please read http://roofit.sourceforge.net/license.txt; IncrementalExecutor::executeFunction: symbol '_ZN10RooDataSetnwEm' unresolved while linking [cling interface function]!; You are probably missing the definition of RooDataSet::operator new(unsigned lon",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10203:877,interface,interface,877,https://root.cern,https://github.com/root-project/root/issues/10203,1,['interface'],['interface']
Integrability,"### Describe the bug. ```; Processing /data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default/root/tutorials/math/multivarGaus.C...; In file included from input_line_10:1:; /data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default/root/tutorials/math/multivarGaus.C:12:15: error: no type named 'GSLRandomEngine' in namespace 'ROOT::Math'; ROOT::Math::GSLRandomEngine rnd;; ~~~~~~~~~~~~^; CMake Error at /data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default/build/RootTestDriver.cmake:237 (message):; error code: 1; ```. ```; Directory: /data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default/build/runtutorials; ""tutorial-math-exampleFunction-py"" start time: May 11 01:28 CEST; Output:; ----------------------------------------------------------. ****************************************; Minimizer is Minuit / Migrad; MinFCN = 1.687e-08; NDf = 0; Edm = 3.37793e-08; NCalls = 146; Par_0 = 0.999952 +/- 1.00372 ; Par_1 = 0.999892 +/- 2.00986 ; Error in <TUnixSystem::FindDynamicLibrary>: libMathMore[.so | .dll | .dylib | .sl | .dl | .a] does not exist in /data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default/build/lib:/data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default/build/lib:.:/data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default/build/lib:/lib64/tls/haswell/x86_64:/lib64/tls/haswell:/lib64/tls/x86_64:/lib64/tls:/lib64/haswell/x86_64:/lib64/haswell:/lib64/x86_64:/lib64:/usr/lib64/tls/haswell/x86_64:/usr/lib64/tls/haswell:/usr/lib64/tls/x86_64:/usr/lib64/tls:/usr/lib64/haswell/x86_64:/usr/lib64/haswell:/usr/lib64/x86_64:/usr/lib64:/data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/defau",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8145:651,message,message,651,https://root.cern,https://github.com/root-project/root/issues/8145,1,['message'],['message']
Integrability,"### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->. After checking out a small commit that only touches a gtest, `libCling` gets rebuilt because a dependency (`VCSRevision.h`) changes, which in turn means everything that depends on cling gets rebuilt:. ```; // ... snip ...; [ 26%] Generating VCSRevision.h; [ 26%] Built target LLVMMCDisassembler; [ 26%] Built target LLVMOption; [ 26%] Built target LLVMMCParser; [ 26%] Built target LLVMRemarks; [ 26%] Built target clang-cmake-exports; [ 26%] Built target rconfigure; [ 27%] Built target obj.llvm-tblgen; [ 27%] Built target llvm_vcsrevision_h; [ 27%] Built target gitcommit; [ 27%] Built target LLVMDebugInfoMSF; [ 27%] Built target obj.clang-tblgen; [ 27%] Built target rootMan; [ 28%] Built target LLVMDebugInfoDWARF; [ 28%] Built target rsa; [ 28%] Built target LLVMDebugInfoCodeView; [ 28%] Built target haddMan; [ 28%] Built target LLVMMC; [ 28%] Built target hist2workspaceMan; [ 28%] Built target copy_pretty_printers; [ 28%] Built target rootclingMan; [ 28%] Built target ProofBenchPARFiles; [ 29%] Built target move_headers; [ 30%] Built target LLVMSupport; [ 30%] Built target Foundation_Stage1; [ 30%] Built target BaseTROOT; [ 30%] Built target Foundation; [ 30%] Built target clang-tblgen; [ 30%] Built target Clib; [ 30%] Built target llvm-tblgen; [ 30%] Built target Lz4; [ 30%] Built target TextInput; [ 30%] Built target Zstd; [ 30%] Built target Lzma; [ 30%] Built target Unix; [ 30%] Built target GuiCore; [ 30%] Built target Zip; [ 30%] Built target Cont; [ 30%] Built target Meta; [ 30%] Built target RootPcmObjs; [ 30%] Built target mathtext; [ 30%] Built target root; [ 30%] Built target rmkdepend; [ 30%] Built target AttributeCompatFuncTableGen; [ 30%] Built target rpdutil; [ 30%] Built target ClangAttrImpl; [ 30%] Built target intrinsics_gen; [ 30%] Built target ClangSACheckers; [ 30%] Built target InstCombineTableGen; [ 30%] Built target StmtDataCollectors; [ 30%] Built t",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7893:192,depend,dependency,192,https://root.cern,https://github.com/root-project/root/issues/7893,2,['depend'],"['dependency', 'depends']"
Integrability,"### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->. First reported [on the forum](https://root-forum.cern.ch/t/missing-tstreamerinfo-for-branches-of-rvec/41805).; `RDataFrame` creates `TTree` branches containing `RVecs` as `tree.Branch(""rvec"", &rvec.AsVector())`.; When writing to a classic `TFile`, the output file contains streamer infos related to RVecs such as `vector<float,ROOT::Detail::VecOps::RAdoptAllocator<float> >`. When using `TBufferMerger`, the output file does not contain such streamer infos. ROOT can read the data back anyway, but third party libraries such as `uproot` reportedly have a harder time. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. A reproducer that only depends on `RVec` and `TBufferMerger`:. ```cpp; #include <ROOT/TBufferMerger.hxx>; #include <ROOT/RVec.hxx>; #include <TTree.h>; #include <TFile.h>; #include <iostream>. int main(); {; // output file has vector<float, RAdoptAllocator<float>> in the streamerinfolist; {; TFile f(""standardwrite.root"", ""recreate"");; TTree t(""t"", ""t"", 99, &f);; ROOT::RVec<float> rv{1, 2, 3};; t.Branch(""v"", &rv.AsVector());; t.Fill();; f.Write();; }. std::cout << ""***** standard write ******"" << std::endl;; auto f2 = TFile::Open(""standardwrite.root"");; for (auto e : *f2->GetStreamerInfoList()) {; std::cout << e->GetName() << std::endl;; }. // output file does not have vector<float, RAdoptAllocator<float>> in the streamerinfolist; {; ROOT::Experimental::TBufferMerger bm(""buffermerger.root"", ""recreate"");; auto f = bm.GetFile();; TTree t(""t"", ""t"", 99, f.get());; ROOT::RVec<float> rv{1, 2, 3};; t.Branch(""v"", &rv.AsVector());; t.Fill();; f->Write();; }. std::cout << ""\n\n***** TBufferMerger ******"" << std::endl;; auto f = TFile::Open(""bufferm",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6611:971,depend,depends,971,https://root.cern,https://github.com/root-project/root/issues/6611,1,['depend'],['depends']
Integrability,"### Describe the bug; A crash is produced if you type `.Class` in the ROOT prompt. ```; ===========================================================================; struct std::atomic<_Tp *>; SIZE: (NA) FILE: atomic LINE: -1; List of member variables --------------------------------------------------; root.exe: /opt/root_src/interpreter/llvm/src/tools/clang/include/clang/AST/TypeNodes.def:100: clang::TypeInfo clang::ASTContext::getTypeInfoImpl(const clang::Type*) const: Assertion `!T->isDependentType() && ""should not see dependent types here""' failed.; ```. ### Expected behavior; No crash. Also, if you type `.Class TTree` it should only print TTree's class info, not all the list of classes. In analogy to .class TTree vs .class. ### To Reproduce; `.Class; `; or `.Class TTree`. ### Setup; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jan 12 2022, 10:17:19 |; | From heads/master@v6-25-01-2870-gdac9b6398d |; | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```. ### Additional context; https://github.com/root-project/root/pull/10121",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10140:527,depend,dependent,527,https://root.cern,https://github.com/root-project/root/issues/10140,1,['depend'],['dependent']
Integrability,"### Describe the bug; A reverted transaction due to a failed compilation ends up removing decls / JITed symbols that should be left untouched. Related issues: #6439, #7970, [ROOT-10848](https://sft.its.cern.ch/jira/browse/ROOT-10848), [ROOT-6254](https://sft.its.cern.ch/jira/browse/ROOT-6254), [ROOT-8084](https://sft.its.cern.ch/jira/browse/ROOT-8084), and [ROOT-8245](https://sft.its.cern.ch/jira/browse/ROOT-8245). ### Expected behavior; Clean unload. Reverting a transaction should probably not touch template instantiations / emitted symbols that correspond to deserialized decls. ### To Reproduce; ```c++; root [1] foo.size(); ROOT_prompt_1:1:4: error: no member named 'size' in 'std::unique_ptr<std::__cxx11::basic_string<char>, std::default_delete<std::__cxx11::basic_string<char> > >'; did you mean to use '->' instead of '.'?; foo.size(); ^; ->; root [2] foo->size(); ROOT_prompt_2:1:4: error: member reference type 'std::unique_ptr<std::string>' (aka 'unique_ptr<basic_string<char> >') is not a pointer; did you mean to use '.'?; foo->size(); ~~~^~; ```; or; ```c++; root [0] std::unique_ptr<TFile> foo{TFile::Open(""foo.root"", ""RECREATE"")};; root [1] foo.GetName(); ROOT_prompt_1:1:4: error: no member named 'GetName' in 'std::unique_ptr<TFile, std::default_delete<TFile> >'; did you mean to use '->' instead of '.'?; foo.GetName(); ^; ->; root [2] foo->GetName(); IncrementalExecutor::executeFunction: symbol '_ZSt3getILm0EJP5TFileSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_' unresolved while linking [cling interface function]!; You are probably missing the definition of std::tuple_element<0ul, std::tuple<TFile*, std::default_delete<TFile> > >::type const& std::get<0ul, TFile*, std::default_delete<TFile> >(std::tuple<TFile*, std::default_delete<TFile> > const&); Maybe you need to load the corresponding shared library?; ```. ### Setup; ROOT master, Arch Linux x86_64",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10049:1557,interface,interface,1557,https://root.cern,https://github.com/root-project/root/issues/10049,1,['interface'],['interface']
Integrability,"### Describe the bug; Because of #6563 and the fix in CMake we need to move from linking `${PYTHON_LIBRARIES}` to instead depend on `Python3::Python`. See https://gitlab.kitware.com/cmake/cmake/-/issues/21293. This fixes test failures:; ```; cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/night/LABEL/mac1015/SPEC/noimt/V/6-22/build/lib/libPyMVA.so, 9): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3; Referenced from: /Users/sftnight/build/night/LABEL/mac1015/SPEC/noimt/V/6-22/build/lib/libPyMVA.so; Reason: image not found; ```. ### Expected behavior; RPath correctly set. ### To Reproduce; Jenkins nightly master or 6.22 on macos15, https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-v6-22-00-patches/LABEL=mac1015,SPEC=noimt,V=6-22/. ### Setup. ### Additional context",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6753:122,depend,depend,122,https://root.cern,https://github.com/root-project/root/issues/6753,1,['depend'],['depend']
Integrability,"### Describe the bug; Cling produces in the dictionary files code like this:. ```; static const char* fwdDeclCode = R""DICTFWDDCLS(; #line 1 ; ```; Which is invalid for VS if the string is longer than ~16000 characters.; In these cases either the C2026 is issued ; https://docs.microsoft.com/en-us/cpp/error-messages/compiler-errors-1/compiler-error-c2026?view=msvc-160; or, much worse, the code is silently truncated and then the compiled executables crash in runtime on code parsing. ### Expected behavior; Cling should take into account this limitation in VS. ### To Reproduce; Generate relatively large dictionary or, optionally manually increase the size of string literal in a small generated dictionary. Sorry that I don't provide a reproducer. My primary goal was to avoid this behavior when I saw it and not to debug it. ### Setup; 1. ROOT 6.22, VS 16.8? ( not sure actually, I've tried many builds, some worked, other didn't); 2. Windows; 3. Official site. ### Additional context; One can try to use an array of char* like that is done `classesHeaders[]` for the and add `TROOT::RegisterModule()`` that would accept it. But I cannot submit a PR. Sorry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6824:307,message,messages,307,https://root.cern,https://github.com/root-project/root/issues/6824,1,['message'],['messages']
Integrability,"### Describe the bug; Hi All,. I have follow [Build from source](https://root.cern/install/#build-from-source) to build root project on Windows with VS 2019, but hit below CMake Error while building, it seems the error details are in FREETYPE-configure-out.log, and I have attached the log.; [FREETYPE-configure-out.log](https://github.com/root-project/root/files/7617109/FREETYPE-configure-out.log); Could you please help have a look? Thanks a lot!. Error:; CMake Error at F:/root-project/root_build/FREETYPE-prefix/src/FREETYPE-stamp/FREETYPE-configure-Release.cmake:49 (message):; Command failed: 1; ; 'C:/Program Files/CMake/bin/cmake.exe' '-G' 'Visual Studio 16 2019' '-DCMAKE_INSTALL_PREFIX=F:/root-project/root_install' '-GVisual Studio 16 2019' '-AWin32' '-Thost=x64' '-DCMAKE_GENERATOR_INSTANCE:INTERNAL=C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise' 'F:/root-project/root_build/FREETYPE-prefix/src/FREETYPE'; ; See also; ; F:/root-project/root_build/FREETYPE-prefix/src/FREETYPE-stamp/FREETYPE-configure-*.log; ; ### Expected behavior; Successfully build root project without errors. ### To Reproduce; 1. Open a x86 Native Tools Command Prompt for VS 2019; 2. git clone --branch latest-stable https://github.com/root-project/root.git root_src; 3. mkdir root_build root_install && cd root_build; 4. cmake -G""Visual Studio 16 2019"" -A Win32 -Thost=x64 -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_INSTALL_PREFIX=../root_install ../root_src; 5. cmake --build . --config Release --target install. ### Setup; 1. Operating system: Windows 10; 2. Visual studio version: 16.11.6; 2. How you obtained ROOT: built it myself.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9347:573,message,message,573,https://root.cern,https://github.com/root-project/root/issues/9347,1,['message'],['message']
Integrability,"### Describe the bug; Hi All,. I have follow below steps to build root project with msvc on AddressSanitizer mode, but hit below errors. And I have seen ""WARNING ""Address sanitizer builds only tested with gcc and Clang"" on CMakeLists. So I am not sure if root support asan mode with msvc. Could you please help have a look and confirm it? Thanks a lot!. (The error message shows ""The items cannot be built in parallel."" but I have tried build single parallel still hit this error); Error:; ```; CustomBuild:; ""The build of 'F:\gitP\root-project\root\build_x86_asan2\CMakeFiles\ecd3d997f4f89e0243288555110c5833\onepcm.rule' depends on 'F:\GITP\ROOT-PROJECT\ROOT\BUILD_X86_ASAN2\ETC\ALLDICT.CXX.PCH' which is produced by the build of 'F:\gitP\root-project\root\build_x86_asan2\CMakeFiles\1b80de060c1a00976f83382f69cf2b7f\allDict.cxx.pch.rule'. The items cannot be built in parallel.""; Generating etc/allDict.cxx.pch; ; Generating PCH for core core\clingutils core\imt core\rint core\thread graf2d\asimage graf2d\gpad graf2d\gpadv7 graf2d\graf graf2d\postscript graf2d\primitivesv7 graf2d\win32gdk graf3d\g3d graf3d\gl gui\fitpanel gui\fitpanelv7 gui\gui hist\hist hist\histdrawv7 hist\histpainter hist\histv7 hist\spectrum hist\spectrumpainter io\io math\genetic math\genvector math\mathcore math\matrix math\minuit math\minuit2 math\physics math\smatrix math\vecops net\net roofit\RDataFrameHelpers roofit\roofit roofit\roofitcore roofit\roostats tmva\sofie tmva\tmva tmva\tmvagui tree\dataframe tree\ntuple tree\tree tree\treeplayer tree\treeviewer; ; =================================================================; ==6948==ERROR: AddressSanitizer: allocator is out of memory trying to allocate 0x203ffff bytes; #0 0x6684e141 (C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\bin\HostX64\x86\clang_rt.asan_dynamic-i386.dll+0x1003e141); #1 0x693e0308 in llvm::safe_realloc(void *, unsigned int) (F:\gitP\root-project\root\build_x86_asan2\bin\libCling.dll+0x11",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9445:365,message,message,365,https://root.cern,https://github.com/root-project/root/issues/9445,2,"['depend', 'message']","['depends', 'message']"
Integrability,"### Describe the bug; I compile ROOT using QtCreator, which has an embedded Clang and Tidy Analyzer. After a couple of hours of analysis, I get a report with many warnings. - Some of them look unimportant; - Some of them could be auto-fixed by Clang; - Some of them look like real errors.; ; For example, in the file clingwrapper.cxx, obj is not deleted if WrapperCall returns false, which seems to lead to a leak:. ```; Cppyy::TCppObject_t Cppyy::CallO(TCppMethod_t method,; TCppObject_t self, size_t nargs, void* args, TCppType_t result_type); {; TClassRef& cr = type_from_handle(result_type);; void* obj = ::operator new(gInterpreter->ClassInfo_Size(cr->GetClassInfo()));; if (WrapperCall(method, nargs, args, self, obj)); return (TCppObject_t)obj;; return (TCppObject_t)0;; }; ```. ```; /opt/root_src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:889:26: warning: Potential leak of memory pointed to by 'obj' [clang-analyzer-cplusplus.NewDeleteLeaks]; 1: Calling 'CallO' in /opt/root_src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:2290; 2: Memory is allocated in /opt/root_src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:886; 3: Taking false branch in /opt/root_src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:887; 4: Potential leak of memory pointed to by 'obj' in /opt/root_src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:889; ```. My question is: how should I report them? In separate issues for each CMake subdirectory? All in the same Ticket? Or do the devs prefer to run it by themselves for easier check?. Concerning things as ""0 as nullptr"", would you accept a PR that fixes all of these across ROOT at the same time, see here https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-nullptr.html, or you prefer to keep with the old convention of using 0 ?. ### To Reproduce; - Install QtCreator; - Click on File, Import File or Project, click on the main ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7400:357,Wrap,WrapperCall,357,https://root.cern,https://github.com/root-project/root/issues/7400,2,['Wrap'],['WrapperCall']
Integrability,"### Describe the bug; I try to build the current master with the `-Dbuiltin_nlohmannjson=on`, but I obtain a lot of error messages [(make.log)](https://drive.google.com/file/d/161nAtyhRd3VFMud4V-F4xSQoype3T-Lt/view?usp=sharing). ### Expected behavior; The build succeeds. ### Setup. 1. ROOT version: current master (452f82119a07fb873a7b050004477d9d9f93120d); 2. Operating system: Archlinux, gcc 12.1.1",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11236:122,message,messages,122,https://root.cern,https://github.com/root-project/root/issues/11236,1,['message'],['messages']
Integrability,"### Describe the bug; I'm installing the most recent ROOT 6.22.06 from source archive on Arch Linux. At progress around 60% the compilation fails suggesting to look for details in . XROOTD-prefix/src/XROOTD-stamp/XROOTD-build-err.log. > CMake Error at /opt/root/build-root-6.22.06/XROOTD-prefix/src/XROOTD-stamp/XROOTD-build-Release.cmake:49 (message):; Command failed: 2; '/usr/bin/make'; See also; /opt/root/build-root-6.22.06/XROOTD-prefix/src/XROOTD-stamp/XROOTD-build-*.log; make[2]: *** [CMakeFiles/XROOTD.dir/build.make:131: XROOTD-prefix/src/XROOTD-stamp/XROOTD-build] Error 1 ; make[1]: *** [CMakeFiles/Makefile2:7256: CMakeFiles/XROOTD.dir/all] Error 2; make[1]: *** Waiting for unfinished jobs.... The file contains this infomation:. > [I] No git repository info found. Trying to interpret VERSION_INFO; [I] src/XrdVersion.hh successfully generated; /opt/root/build-root-6.22.06/XROOTD-prefix/src/XROOTD/src/XrdPosix/XrdPosix.cc: In function ‘int XrdPosix_Fstat(int, stat*)’:; /opt/root/build-root-6.22.06/XROOTD-prefix/src/XROOTD/src/XrdPosix/XrdPosix.cc:379:27: error: ‘_STAT_VER’ was not declared in this scope; 379 | : Xunix.Fstat64(_STAT_VER, fildes, (struct stat64 *)buf));; | ^~~~~~~~~; /opt/root/build-root-6.22.06/XROOTD-prefix/src/XROOTD/src/XrdPosix/XrdPosix.cc: In function ‘int XrdPosix_Lstat(const char*, stat*)’:; /opt/root/build-root-6.22.06/XROOTD-prefix/src/XROOTD/src/XrdPosix/XrdPosix.cc:563:27: error: ‘_STAT_VER’ was not declared in this scope; 563 | ? Xunix.Lstat64(_STAT_VER, path, (struct stat64 *)buf); | ^~~~~~~~~; /opt/root/build-root-6.22.06/XROOTD-prefix/src/XROOTD/src/XrdPosix/XrdPosix.cc: In function ‘int XrdPosix_Stat(const char*, stat*)’:; /opt/root/build-root-6.22.06/XROOTD-prefix/src/XROOTD/src/XrdPosix/XrdPosix.cc:891:26: error: ‘_STAT_VER’ was not declared in this scope; 891 | ? Xunix.Stat64(_STAT_VER, path, (struct stat64 *)buf); | ^~~~~~~~~; make[5]: *** [src/CMakeFiles/XrdPosixPreload.dir/build.make:108: src/CMakeFiles/XrdPosixPreload.dir/Xr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7292:343,message,message,343,https://root.cern,https://github.com/root-project/root/issues/7292,1,['message'],['message']
Integrability,"### Describe the bug; In the lcgcmake build system; Compiling ROOT master on macOS 11 (http://cdash.cern.ch/viewFiles.php?buildid=218660) or 12 (http://cdash.cern.ch/viewFiles.php?buildid=218674) fails to compile with the error message. ```; [ 55%] Copying clang's __clang_hip_libdevice_declares.h...; In file included from /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/src/TMacOSXSystem.mm:12:; /Users/sftnight/build/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/macosx/inc/TMacOSXSystem.h:16:10: fatal error: 'TUnixSystem.h' file not found; [ 55%] Linking CXX static library ../../libLLVMDebugInfoCodeView.a; #include ""TUnixSystem.h""; ```. Seems related to #10690 Which was touching the related CMakeLists.txt files. ### Expected behavior. Root compiles successfully on macOS. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. ### Setup. 1. ROOT version: master; 2. Operating system: macOS 11, 12; 3. git clone",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12130:228,message,message,228,https://root.cern,https://github.com/root-project/root/issues/12130,1,['message'],['message']
Integrability,"### Describe the bug; It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior; RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce; ```cpp; RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);; RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);; RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);; RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());; intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);; landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);; cout << integral->getVal() << endl;; ```; Produces : `... did not converge after 20 steps` instead of 30 steps; Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup; ROOT v6.26/02",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11067:65,integrat,integration,65,https://root.cern,https://github.com/root-project/root/issues/11067,1,['integrat'],['integration']
Integrability,"### Describe the bug; ROOT master (c8ad00846344c090c3a6f653e0decf38ad324d65) fails to build with g++ 12.2 with `cmake -DCMAKE_CXX_STANDARD=20`. The reported error is:; ```; In file included from /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamReader.h:16,; from /home/bgruber/dev/root/interpreter/llvm/src/lib/Support/BinaryStreamReader.cpp:9:; /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected unqualified-id before ‘const’; 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other); | ^~~~~; /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected ‘)’ before ‘const’; 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other); | ~^~~~~; | ); ```. Checking out the offending file:; ```c++; template <typename T>; class FixedStreamArrayIterator; : public iterator_facade_base<FixedStreamArrayIterator<T>,; std::random_access_iterator_tag, const T> {. public:; FixedStreamArrayIterator(const FixedStreamArray<T> &Array, uint32_t Index); : Array(Array), Index(Index) {}. FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other) // ERROR HERE; : Array(Other.Array), Index(Other.Index) {}; ...; ```; indeed looks like wrong C++ syntax (the constructor shall only be named via an id-expression referring to the injected class name, see [here](https://eel.is/c++draft/class.ctor#general-1)). The `<T>` should be removed. The issue was fixed in upstream LLVM with [this commit](https://github.com/llvm/llvm-project/commit/2ccf0b76bcaf0895e04f14e3ff53c59dd96f9f0f). Please consider cherry-picking this commit. ### To Reproduce; 1. git clone ROOT master; 2. `cmake -DCMAKE_CXX_STANDARD=20`; 3. `make`. ### Setup. * gcc 12.2; * Ubuntu 22.10",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12037:1396,inject,injected,1396,https://root.cern,https://github.com/root-project/root/issues/12037,1,['inject'],['injected']
Integrability,"### Describe the bug; RooFit throws exceptions about an interface change, and links to the release notes, but the release note don't mention anything.; https://github.com/root-project/root/blob/53c89259ed70f4ea5c089d6c90ceb445c3069be9/roofit/roofitcore/inc/RooAbsReal.h#L110-L123. This section needs to appear in the release notes, both in the 6.24 and the master branch. Note:; #7452 already has a section about the new batch interface. This could be extended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7454:56,interface,interface,56,https://root.cern,https://github.com/root-project/root/issues/7454,2,['interface'],['interface']
Integrability,"### Describe the bug; TGaxis::SetNdivisions is recommended to set the maximum number of digits of a TGaxis is instance, however its behavior leads to wrong data being printed, depending on the argument. https://root.cern.ch/doc/master/classTGaxis.html#a6b93d66237560f7b11701402a1a446ce. See here, for N=1,2,3,4, how the TGaxis completely changes:. ![image](https://user-images.githubusercontent.com/10653970/187413185-1a8923ff-aded-4317-a110-ff10e5ad404e.png). Weird things also happen with `SetStripDecimals(kFALSE)`:. ![image](https://user-images.githubusercontent.com/10653970/187413563-86b4c3c8-7d91-48e9-a70f-3e9826dca1b8.png). ### Expected behavior; Calling SetNdivisions or SetMaxDigits should not change the TGaxis being painted, otherwise it leads to wrong data being shown. ### To Reproduce; ```cpp; #include ""TGraph.h""; #include ""TF1.h""; #include ""TCanvas.h""; #include ""TStyle.h""; #include ""TGaxis.h"". void testgraphaxis(bool strip = kTRUE); {; new TCanvas();. TF1 *f2=new TF1(""fcal"",""pol2"",0,45);; f2->SetParameters(6.975e3,-6.339e1,3.10185e-1);; f2->Draw();. TF1 *f1=new TF1(""fcalinv"",""pol2"",f2->Eval(45),f2->Eval(0));; f1->SetParameters(2.239e2,-4.985e-2,2.55121e-6);//I had to invert my original graph and fit again to get the new parameters. TGraph* gr = new TGraph();; gr->SetPoint(0,5,0.2);; gr->SetPoint(1,7,0.5);; gr->GetXaxis()->SetLimits(0,45);; gr->GetYaxis()->SetRangeUser(0,1);. gStyle->SetStripDecimals(strip);. for (int N = 0; N < 12; ++N) {; new TCanvas();; gr->Draw(""APL"");. gPad->Modified();; gPad->Update();. TGaxis *A1 = new TGaxis(gPad->GetUxmin(),gPad->GetUymax(),gPad->GetUxmax(),gPad->GetUymax(),""fcalinv"",510,""-"");; if (N!=0) A1->SetNdivisions(N*1000000 + (A1->GetNdiv()%1000000));; A1->Draw();; }; }; ```. ### Setup; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jan 11 2022, 18:39:08 |; | ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11280:176,depend,depending,176,https://root.cern,https://github.com/root-project/root/issues/11280,1,['depend'],['depending']
Integrability,"### Describe the bug; When importing a TTree in a RooDataSet, if a RooCategory is filled from a tree branch of type Short_t, incorrect values are silently loaded. The category is always the same (it seems that it picks the first label in alphabetical order). The same problem appears for other types, only Int_t and UChar_t seem to work correctly. ### Expected behavior; Either correctly load the data set or fail with an error. ### To Reproduce; ```; TTree* tree = new TTree(""test_tree"", ""Test tree"");; Short_t cat_in;; tree->Branch(""cat"", &cat_in);. cat_in = 2; //category B; tree->Fill();. RooCategory cat(""cat"", ""Category"",{; {""B_cat"", 2},; {""A_cat"", 3}; });; RooDataSet data(""data"", ""RooDataSet"", RooArgSet(cat), RooFit::Import(*tree));. data.table(cat)->Print(""v"");; ```; We should get an event in category cat_B but instead we get an event in category cat_A. ### Setup; Latest ROOT from git, master branch, commit 8d87e2bb6e6a; Linux. ### Additional context; It seems to come from [RooAbsCategory::attachToTree](https://github.com/root-project/root/blob/943706c005c6723500e00061872d6eff4967d262/roofit/roofitcore/src/RooAbsCategory.cxx#L454) where there should probably be an error message if the type of branch is neither Int_t or UChar_t.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10278:1189,message,message,1189,https://root.cern,https://github.com/root-project/root/issues/10278,1,['message'],['message']
Integrability,"### Describe the bug; When trying to build with an external XRootD, cmake says it finds it but then it says it doesn't and this is making a spack build fail. Relevant lines in the cmake output:; ```; -- Looking for XROOTD; -- Found Xrootd version num: 5.5.4.post256 (setting -DROOTXRDVERS=5.5.4.po); -- Setting OLDPACK TRUE; -- XROOTD not found, enabling 'builtin_xrootd' option; -- Downloading and building XROOTD version 5.5.2; ```; When building with XROOTD from spack (where I found this issue) the error is more verbose but I think is the same issue:; ```; 121 -- Looking for XROOTD; 122 -- Found Xrootd version num: 5.5.3 (setting -DROOTXRDV; ERS=500050003); 123 -- libXrdMain not found: xproofd will be ; a wrapper around xrootd; 124 -- libXrdClient not found: use built-in; >> 125 CMake Error at cmake/modules/SearchInstalledSoftware.c; make:992 (message):; 126 XROOTD not found. Set environment variable XRDSYS t; o point to your XROOTD; 127 installation, or include the installation of XROOTD ; in the; 128 CMAKE_PREFIX_PATH. Alternatively, you can also enab; le the option; 129 'builtin_xrootd' to build XROOTD internally; ```. ### To Reproduce; ```; # To install xrootd; git clone https://github.com/xrootd/xrootd; cd xrootd; mkdir build; cd build; cmake .. -DCMAKE_INSTALL_PREFIX=../install; ```. ```; # To install ROOT; git clone https://github.com/root-project/root; cd root; mkdir builddir; cd builddir; cmake .. -DCMAKE_PREFIX_PATH=/path/to/xrootd/install -Dbuiltin_xrootd=OFF -Dxrootd=ON -DCMAKE_VERBOSE_MAKEFILE=ON; ```. ### Setup; cmake 3.26.2; OS: Arch Linux. ### Additional context; I'm posting it here since I tried different versions of XRootD and all failed, maybe it's an issue with XROOTD since it's complaining about not finding libXrdMain nor libXrdClient",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12631:714,wrap,wrapper,714,https://root.cern,https://github.com/root-project/root/issues/12631,2,"['message', 'wrap']","['message', 'wrapper']"
Integrability,"### Describe the bug; ```; root [1] .rawInput; root [2] std::vector<short> getV() { return {42}; }; root [3] .rawInput; root [4] getV()[0].foo(); ```; and that last line shows an error, good! But now:; ```; root [5] getV()[0]; IncrementalExecutor::executeFunction: symbol '_ZSt8_DestroyIPssEvT_S1_RSaIT0_E' unresolved while linking [cling interface function]!; You are probably missing the definition of void std::_Destroy<short*, short>(short*, short*, std::allocator<short>&); Maybe you need to load the corresponding shared library?; ```. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->. ### Additional context; <!--; Add any other context about the problem here.; -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7970:339,interface,interface,339,https://root.cern,https://github.com/root-project/root/issues/7970,1,['interface'],['interface']
Integrability,"### Describe the bug; `cmake -Dasan=ON` uses `add_compile_options` to add `-fsanitize=address` for all C++ files. This does not affect externally pulled in dependencies, in particular Clad. ### Expected behavior; The option should result in a build where *all* components are built with Address Sanitizer. ### To Reproduce; Configure with `-Dasan=ON` and notice that ASan reports a `use-after-poison` when only starting `./bin/root.exe`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7968:156,depend,dependencies,156,https://root.cern,https://github.com/root-project/root/issues/7968,1,['depend'],['dependencies']
Integrability,### Describe the bug; call Int_t(Uint_t). ```; Bool_t TMessageHandler::Notify(); {; if (fClass) return kFALSE;; // case of default handler; // encode class number in message id; if (!fMessObj) return kFALSE;; Int_t uid = Int_t(fMessObj->IsA()->GetUniqueID()); ; fMessId += 10000*uid;; fMessId = -fMessId;; Notified(); // emit Notified() signal; return kFALSE;; }; ```; GetUniqueID() returns Uint_t. ### Setup. ROOT master,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6715:166,message,message,166,https://root.cern,https://github.com/root-project/root/issues/6715,1,['message'],['message']
Integrability,"### Existing issues; On the forums we didn't find any existing issues, errors, bug or Jira ticket related to this.; @rpezzi . ### Describe the bug; We are creating an object of the type: e.g. `std::array<std::array<std::vector<std::vector<Int_t>>, 4>, 4>`; Then, we fill it in a loop and ensure all elements of a size different than 0 and we write it in a root file using `WriteObjectAny`.; However, later we are loading this object using functionalities from ROOT `GetObjectChecked`, and we are getting elements with size 0. We use exactly the same function to print the zero elements if existing, at the creation and loading level. ### Expected behavior; We expect that when loading later this object we fully recover it without empty elements (without size 0). ### To Reproduce; 1. Open root in a terminal, compile the macro: `.L example.C`; 2. Create the object, fill it, and print the elements with size zero if exisiting: `finderBinner()`; 3. Loading the object and print the elements with size zero if exisiting: `loadFinderBinning()`. ### Setup; 1. ROOT 6.26/04 ; 2. macOSx64 Monterey version 12.6; 3. ROOT built from `aliBuild build O2 --defaults o2`, on Nov 09 2022, alibuild software used for the ALICE experiment @CERN with all dependencies . ### Code ; You can download the code `example.C` which reproduce the bug here at this cernbox link:; https://cernbox.cern.ch/s/fbiqsIdjVUqYISe",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11722:1240,depend,dependencies,1240,https://root.cern,https://github.com/root-project/root/issues/11722,1,['depend'],['dependencies']
Integrability,"### Explain what you would like to see improved and how. (I will be using `DeltaPhi` for illustration here, but I suspect many functions have similar ""limitations"". The current way of doing things is perfectly valid and might even be preferable, this issue is also meant to gauge whether you would be willing to accept PR(s) with these changes in place). The current interface of `DeltaPhi` in `RVec.hxx` looks like this:; https://github.com/root-project/root/blob/7a4af49dc65a812a3feea24c98a49b84cd85caaf/math/vecops/inc/ROOT/RVec.hxx#L2876. This means that calling it with; ```cpp; auto dphi = DeltaPhi(3.14f, 1.23); ```; will lead to a template deduction error because both argument should have the same type. We have triggered this via RDataFrame from python by using the version that uses an `RVec` by passing a `vector<float>` and `vector<double>`. The error message you get at the moment tells us exactly that, but is also not the easiest to interpret if you are not too familiar with C++. One way around this is to introduce a temporary variable that converts one of the two vectors into the same type as the other. While this obviously works it's also not really elegant to do so. The ""proper""(?) way to fix this would to make `DeltaPhi` a bit more ""relaxed"" with its template arguments, something along the lines of:; ```cpp; template <typename T, typename U = T>; std::common_type_t<T, U> DeltaPhi(T v1, U v2, std::common_type_t<T, U> c = M_PI) { ; // implementation unchanged apart from updated static_assert to take into account T and U; }; ```; This would then have to be done also the the overloads taking an `RVec` to solve our issue. Is this something you would be interested in at all? Then we could maybe also discuss who would be doing the actual work for this. ### ROOT version. 6.18/00 onwards. ### Installation method. any . ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15077:367,interface,interface,367,https://root.cern,https://github.com/root-project/root/issues/15077,2,"['interface', 'message']","['interface', 'message']"
Integrability,"### Explain what you would like to see improved and how. From https://its.cern.ch/jira/browse/ROOT-10118. In Python, it's ""Pythonic"" convention that you can test the validity of containers by implicit cast to bool, e.g. ""if mylist: do_something"" rather than ""if len(mylist) > 0: ..."". Unfortunately PyROOT's wrapping of STL containers seems to break this: if I read a ROOT tree containing branches of type std::vector<float>, PyROOT's wrapper classes are automatically used, but the test ""if tree.some_vector_branch: ..."" always evaluates true, even if the vector is empty. To be consistently Pythonic and avoid bad surprises for users, can the STL container Pythonisations be given a def __bool__(self): return bool(self.size()) or similar method?. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14573:308,wrap,wrapping,308,https://root.cern,https://github.com/root-project/root/issues/14573,2,['wrap'],"['wrapper', 'wrapping']"
Integrability,"### Explain what you would like to see improved and how. From https://its.cern.ch/jira/browse/ROOT-10909. The PR https://github.com/root-project/root/pull/5408 will add a requirements.txt file to the repo, which should reflect our dependencies to python packages. The current status does not cover TMVA with xgboost, sklearn and keras as runtime dependencies, which should be added. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14553:231,depend,dependencies,231,https://root.cern,https://github.com/root-project/root/issues/14553,2,['depend'],['dependencies']
Integrability,"### Explain what you would like to see improved and how. From https://its.cern.ch/jira/browse/ROOT-5159. It recently took me many many hours to figure out that my code could not read out a branch because TTree::SetMakeClass() was not set. As far as I can tell this is neither explained in the ROOT manual, nor the TTree documentation page. I found a old RootTalk message (http://root.cern.ch/root/roottalk/roottalk03/1853.html) regarding it, but only post mortem because one has to search for SetMakeClass, and at least this one had no clue that SetMakeClass was the problem to begin with. . Some explanation and warning about this feature in the TTree documentation would be very much appreciated. . Sue Ann Koay ; sakoay@cern.ch. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14583:363,message,message,363,https://root.cern,https://github.com/root-project/root/issues/14583,1,['message'],['message']
Integrability,### Explain what you would like to see improved and how. From https://its.cern.ch/jira/browse/ROOT-5195. At the 2013 ROOT Workshop Peter Waller pointed that the interface to clone a subset of the branches needed to be clarified (and documented) or simplified. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14550:161,interface,interface,161,https://root.cern,https://github.com/root-project/root/issues/14550,1,['interface'],['interface']
Integrability,"### Explain what you would like to see improved and how. From https://its.cern.ch/jira/browse/ROOT-8515. https://root.cern.ch/doc/master/classTEntryList.html is dominated by two large, ugly pieces of old code, that have nothing to do with TEntryList but generate graphics. I would even argue that those graphics don't help in the understanding of TEntryList and can be removed.; Additionally, both TEntryList and TEventList should inform the reader about which one is deprecated and which one to use. They should do this for the deprecated version right as the first sentence of the doc, so people don't waste time reading up on an irrelevant interface.; Thanks!; Axel. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14544:643,interface,interface,643,https://root.cern,https://github.com/root-project/root/issues/14544,1,['interface'],['interface']
Integrability,"### Explain what you would like to see improved and how. Hello Root team,. It would be really interesting to deploy Root on Pip to facilitate the management of projects which rely on pip/poetry. Currently the only supported package manager is conda, which has a poor integration with poetry for example. Would it be difficult to package root for pip?; I don't know how to do it but with some explanations, i would be highly motivated to help you do this. Best regards.; Anthony. ### ROOT version. All. ### Installation method. PIP. ### Operating system. All. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14890:267,integrat,integration,267,https://root.cern,https://github.com/root-project/root/issues/14890,1,['integrat'],['integration']
Integrability,"### Explain what you would like to see improved and how. I found myself trying to use a glob in `TChain::Add` with a remote path. I discovered that in XRootD, this is supported:; ```; TChain c{""Events""};; c.Add(""root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod/Run*"");; c.GetListOfFiles()->GetEntries(); (int) 4; ```; Whereas with https (through davix) this is not supported; ```; TChain c{""Events""};; c.Add(""https://root.cern/files/HiggsTauTauReduced/*.root"");; Error in <TDavixSystem::DavixOpendir>: failed to opendir the directory: HTTP 405 : Method Not Allowed, Permission refused (17); ```. First off, we should understand more clearly with the different libraries if this use case is 1. knowingly supported (xrootd), knowingly unsupported (davix) 2. a valid use case or seen as a corner case. Base on that, we should decide whether to actually support it in ROOT, which would mean support it with all the different remote protocols, or remove support with xrootd and decide to always throw an exception in case remote globbing is attempted. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13258:944,protocol,protocols,944,https://root.cern,https://github.com/root-project/root/issues/13258,1,['protocol'],['protocols']
Integrability,"### Explain what you would like to see improved and how. One should fix following warning. Appears in following line: https://github.com/root-project/root/blob/master/tree/dataframe/inc/ROOT/RDF/InterfaceUtils.hxx#L270. ```; In file included from /usr/include/c++/14/string:51,; from /home/linev/git/webgui/core/meta/inc/TSchemaHelper.h:17,; from /home/linev/git/webgui/core/meta/inc/TGenericClassInfo.h:21,; from /home/linev/git/webgui/core/base/inc/Rtypes.h:193,; from /home/linev/git/webgui/core/base/inc/TObject.h:17,; from /home/linev/git/webgui/core/base/inc/TNamed.h:25,; from /home/linev/git/webgui/core/base/inc/TDirectory.h:24,; from /home/linev/git/webgui/core/base/inc/TROOT.h:28,; from /home/linev/git/webgui/tree/dataframe/inc/ROOT/RDataFrame.hxx:19,; from /home/linev/git/webgui/tree/dataframe/test/dataframe_utils.cxx:1:; In static member function ‘static constexpr _Up* std::__copy_move<_IsMove, true, std::random_access_iterator_tag>::__copy_m(_Tp*, _Tp*, _Up*) [with _Tp = long unsigned int; _Up = long unsigned int; bool _IsMove = false]’,; inlined from ‘constexpr _OI std::__copy_move_a2(_II, _II, _OI) [with bool _IsMove = false; _II = long unsigned int*; _OI = long unsigned int*]’ at /usr/include/c++/14/bits/stl_algobase.h:521:30,; inlined from ‘constexpr _OI std::__copy_move_a1(_II, _II, _OI) [with bool _IsMove = false; _II = long unsigned int*; _OI = long unsigned int*]’ at /usr/include/c++/14/bits/stl_algobase.h:548:42,; inlined from ‘constexpr _OI std::__copy_move_a(_II, _II, _OI) [with bool _IsMove = false; _II = long unsigned int*; _OI = long unsigned int*]’ at /usr/include/c++/14/bits/stl_algobase.h:555:31,; inlined from ‘constexpr _OI std::copy(_II, _II, _OI) [with _II = long unsigned int*; _OI = long unsigned int*]’ at /usr/include/c++/14/bits/stl_algobase.h:651:7,; inlined from ‘constexpr std::vector<bool, _Alloc>::iterator std::vector<bool, _Alloc>::_M_copy_aligned(const_iterator, const_iterator, iterator) [with _Alloc = std::allocator<bool>]’ at /usr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16360:195,Interface,InterfaceUtils,195,https://root.cern,https://github.com/root-project/root/issues/16360,1,['Interface'],['InterfaceUtils']
Integrability,"### Explain what you would like to see improved and how. This forum post https://root-forum.cern.ch/t/too-many-operators-for-the-ttree-project-conditions/58009/5 triggered a discussion that probably `RResultPtr` could better behave with respect to ownership of its pointee. For example, this function; ```cpp; TH1D *DrawStuff(const char *columnname) {; auto file = TFile::Open(""tutorials/hsimple.root"", ""READ"");; auto ntuple = file->Get<TTree>(""ntuple"");; ROOT::RDataFrame df(*ntuple);; auto ht = df.Histo1D(*h, columname);; return ht.GetPtr();; }; ```. Will return a dangling pointer since the `RResultPtr` going out of scope will destroy the pointee. The forum user presents a pattern such as. ```cpp; THStack* histStack = new THStack(""histStack"", ""Bs_MCORR"");; for(int i=0; i<sampNumb; i++) {; TFile* file = new TFile(rootList[i]);; TTree* tree = (TTree*)file->Get(""DecayTree"");; ROOT::RDataFrame df(*tree);; auto ht = df.Filter(conds[i].Data()).Histo1D(h, ""Bs_MCORR"");; histStack->Add(ht.GetPtr(), , ""HIST && E1 && EX0"");; }; histStack->Draw();; ```. Which also doesn't work with the current API. Admittedly, this example would not work in general since `THStack` does not take ownership of the passed histograms and assumes they will be kept alive by ROOT global objects. In general, for this kind of use case we could convey the message to users they can store the histograms in a vector of shared pointers which is the clearest and most standard data structure to represent the situation correctly. So we need:. * `std::shared_ptr<T> RResultPtr<T>::GetSharedPtr()`; * More documentation on the RDataFrame user guide about these use cases; * A tutorial starting from the forum post reproducer once we have the API. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14766:1335,message,message,1335,https://root.cern,https://github.com/root-project/root/issues/14766,1,['message'],['message']
Integrability,"### Explain what you would like to see improved and how. This is a follow-up to #16736, see https://github.com/root-project/root/pull/16782#discussion_r1820807153. <details>; Depending on whether `p` argument is `nullptr` or not, the method actually does 2 different things. It either calculates `xp` given `p` or it calculates `p`. So it is either F^-1(p) or F(x).; </details>. The default parameter of p = nullptr brings the method to return just the bin edges, so it is not very useful. ### ROOT version. master, although notation matches what #16782 brings. ### Installation method. irrelevant. ### Operating system. irrelevant. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16784:175,Depend,Depending,175,https://root.cern,https://github.com/root-project/root/issues/16784,1,['Depend'],['Depending']
Integrability,"### Explain what you would like to see improved and how. Unfortunately, Vc, a very nice library, is currently not supporting cpp17 and is not supported any more.; On Fedora 36 the compilation of ROOT presents deprecation warnings, but it's just a matter of time before they become errors.; For a particular class of these warnings, i.e. the usage of std::iterator, a PR was proposed to Vc and will be hopefully considered https://github.com/VcDevel/Vc/pull/356 . However, it might be necessary to identify a path to get rid of the dependency on this unsupported product. ### ROOT version. all. ### Installation method. all. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13713:531,depend,dependency,531,https://root.cern,https://github.com/root-project/root/issues/13713,1,['depend'],['dependency']
Integrability,### Explain what you would like to see improved and how. We can speed up the builds significantly by using the github actions cache system. More can be read here: https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows . Essentially we need a `actions/cache/restore@v3`. This is done in the clad CI here: https://github.com/vgvassilev/clad/blob/d2df9008e071f7f78d1606a040b21149ade66eea/.github/workflows/ci.yml#L637-L678. The idea is to cache the builds of ROOT up to cling and make a hash that will invalidate the cache only if something in cling is touched. In that case the system will regenerate the caches. We need to figure out if the 10GB storage is enough per project or we can store these things locally. For the Clad project it has been working flawlessly for ~1 year now. . ### ROOT version. N/A. ### Installation method. N/A. ### Operating system. N/A. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14987:222,depend,dependencies-to-speed-up-workflows,222,https://root.cern,https://github.com/root-project/root/issues/14987,1,['depend'],['dependencies-to-speed-up-workflows']
Integrability,"### Explain what you would like to see improved and how. We should move all headers from $ROOTSYS/include to $ROOTSYS/ROOT/{component} and we should automatically generate wrapping headers that `#include` the relevant ROOT/ header with a deprecation warning.; Eg. ```bash; mv ROOTSYS/include/TLish.h ROOTSYS/include/ROOT/core/TLish.h; cat ROOTSYS/include/TLish.h; ```. ```cpp; #warn ""This forwarding header will go away in X please include \""ROOT/Base/TLish.h\"" ""; #include ""ROOT/core/TLish.h""; ```. The trampoline header file can be generated by our build system by adding a -DROOT_COMPATIBILITY switch that's on by default for few releases and then off. ### ROOT version. master. ### Installation method. N/A. ### Operating system. N/A. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16327:172,wrap,wrapping,172,https://root.cern,https://github.com/root-project/root/issues/16327,1,['wrap'],['wrapping']
Integrability,"### Explain what you would like to see improved and how. i am looking at speeding up some code that uses TMatrixDSym widely (for large matrices whose size is not known at compile time). One primary bottleneck is code used to set or get elements in the matrix like. ```; TMatrixDSym d(100);; for ( int i=0; i< 100; i++) d(i,i)=i;; ```. which is limited by the virtual function calls needed for the checks. . https://github.com/root-project/root/blob/master/math/matrix/inc/TMatrixT.h#L255. In the case I was looking at, the code to fill the matrix was slower than the code to invert it due to this... The only workaround I find is to use GetMatrixArray() to get access to the underlying array and then hope that the internals don't change (while already ignoring fRowLwb and fColLwb being potentially non-zero. Using [] is kinda 2x worse as there are two layers of these sanity checks instead of just one. I see this workaround is already in widespread use in math/matrix classes.. Is there a better approach currently possible? If not, would it be possible to provide the equivalent of ; ```; d.GetMatrixArray()[i*100+i] = i;; ```; via some more readable/safer interface (useful at least for both TMatrixT and TVectorT)?. ### ROOT version. any recent. ### Installation method. build from source. ### Operating system. linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15285:1161,interface,interface,1161,https://root.cern,https://github.com/root-project/root/issues/15285,1,['interface'],['interface']
Integrability,"### Explain what you would like to see improved. After https://github.com/root-project/root/pull/10366 was merged, there were some further ideas to fine tune the GitHub issue templates. I leave them here for the record. - [ ] Backtrace. (For example, when ROOT crashes and prints the stacktrace, there could be an option to forward it to a specific textarea in the YML template.); - [x] Should we add three backquotes before and after GetSetup() so that it is formatted as monospace when filling ROOT version?; - [ ] Name of the build machine. (I don't know how else to figure out whether it's one of our binaries, a package, or built by the user? Iirc that's not available right now? Actually not related to build method, so not too useful); - [ ] OS name; - [ ] ROOT-version prepopulated textarea contains also information that might fit better in other textarea. Should we split? or remove the dupe textarea?; - [x] Update on web full list of commands, add .gh issue, do as in update help message https://github.com/root-project/web/pull/776 https://github.com/root-project/web/pull/864; - [ ] Recommend also on ROOT manual these commands; - [ ] Maybe add similar instruction on main ROOT webpage as https://www.kicad.org/help/report-an-issue/; - [x] Mention in the Forum --> Done by Bertrand; - [ ] Add aliases (see below)? ++ update web/manual to reflect this. ### Share how it could be improved. _No response_. ### How to reproduce?. The way to submit a bug report without opening ROOT by hand would be:. ```; root -b -e '.gh bug' -q; root -b -e '.gh feature' -q; root -b -e '.gh improvement' -q; root -b -e '.forum bug' -q; ```. Not sure if it's worth to define an alias to these commands, in a similar fashion to rootbrowse, etc. For example:. ```; rootbug; rootfeature; rootimprovement; rootforum; ```. ### ROOT version; ```; ROOT v6.29/01; Built for linuxx8664gcc on Jun 20 2023, 17:02:12; From heads/ghissue@v6-23-01-RF-binSampling-8983-g6aec26bfaf; With g++ (Ubuntu 11.3.0-1ubuntu1~22.04.1",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13062:992,message,message,992,https://root.cern,https://github.com/root-project/root/issues/13062,1,['message'],['message']
Integrability,"### Explain what you would like to see improved. In CMSSW we want to have dictionaries defined explicitly for all classes that are part of I/O. Occasionally some things slip through causing (sometimes?) ROOT to try to auto parse the header of the corresponding class. Many times the auto parsing works (but is not desirable), in some cases it fails with an unhelpful error message (in most cases so far this has been in conjunction with CUDA, by rootcling being unable to write to the `cuda.pcm` that is in cvmfs). With auto parsing disabled, we'd be able to emit an error message pointing to the class whose dictionary is missing. I gave a try on `TInterpreter::SetClassAutoparsing(false)` in https://github.com/cms-sw/cmssw/pull/41344, and while in specific cases I got the desired behavior (of CMSSW framework emitting a descriptive error message for a missing dictionary instead of ROOT trying to auto-parse the corresponding header), the fact that the `SetClassAutoparsing()` is a global setting makes it difficult to disable the auto parsing in a useful way in the concurrent setup of CMSSW. There are a few cases (like open ROOT file, set up a string cut parser that uses ROOT reflection underneath) where the auto-parsing needs to be enabled, and these activities may be running concurrently to activities where I'd like to have the auto-parsing disabled. ### Share how it could be improved. Make the auto parsing setting more fine grained, e.g. explicitly in the relevant API calls or as a `thread_local`. Being able to query the value of the setting could be useful as well. ### How to reproduce?. A recipe to reproduce can be cooked up if necessary based on https://github.com/cms-sw/cmssw/pull/41344. ### ROOT version. 6.26. ### How did you install ROOT?. Part of CMSSW stack. ### Which operating system are you using?. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13035:373,message,message,373,https://root.cern,https://github.com/root-project/root/issues/13035,3,['message'],['message']
Integrability,"### Explain what you would like to see improved. RooProdPdf and RooProduct have different constructor interfaces.; In a workspace like this:; ```; RooWorkspace w;; w.factory(""RooGaussian::a(x[-10,10],0.,1.)""); w.factory(""RooGaussian::b(y[-10,10],0.,1.)""); ```; Now, consider this:; ```; w.factory(""RooProdPdf::p1({a,b})""); w.factory(""RooProduct::p2({x,y})""); ```; `p2` does what you think it would.; `p1` does not. On the other hand:; ```; w.factory(""RooProdPdf::p3(a,b)""); w.factory(""RooProduct::p4(x,y)""); ```; `p3` works.; `p4` does not. ### How it could be improved. The constructor interfaces of these classes should be harmonized.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7809:102,interface,interfaces,102,https://root.cern,https://github.com/root-project/root/issues/7809,2,['interface'],['interfaces']
Integrability,"### Explain what you would like to see improved; <!--; Explain what isn't as good as it could be and why; -->. Currently there is a setup step done in the client before actually starting the distributed computations. During the setup, a list of ranges of entries from the original dataset is computed. The logic is as follows:; 1. For each file of the dataset, open it and compute a list of all the clusters in the file.; 2. From the list of all clusters of all files, divide it into groups of clusters (`Range`s) depending on the `npartitions` parameter of the dataframe. Each `Range` will be assigned its own task in the distributed resources. The point 1. above can be particularly expensive to run since it relies on `TFile::Open` . If the files of the dataset are stored remotely, the overhead adds up pretty quickly. The call happens specifically in:; https://github.com/root-project/root/blob/db3d4240abbda1c946fd2a7af08544cf1b357911/bindings/experimental/distrdf/python/DistRDF/Node.py#L363-L368. ### Optional: share how it could be improved; <!--; If you already have an idea what we could improve, then please tell us.; -->. Ideally we could avoid calling TFile::Open in the client. @Axel-Naumann proposed on mattermost to estimate the number of clusters of each file depending on its size and consequently compute the number of tasks to run on the distributed resources:; ```; If you have these files:. 50MB; 100MB; 300MB; 3GB. then I'd translate that to cluster estimates:. 2; 3; 10; 100. and split this into n tasks accordingly.; ```. The single task in the distributed worker would then be responsible to open only the file(s) where the estimated clusters should be stored. This needs to be explored. ### Additional context; <!--; Add any other context about the problem here.; -->; Thanks to @stwunsch for bringing this up. This issue will keep track of further discussion and updates on the matter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8232:514,depend,depending,514,https://root.cern,https://github.com/root-project/root/issues/8232,2,['depend'],['depending']
Integrability,"### Explain what you would like to see improved; <!--; Explain what isn't as good as it could be and why; -->. Currently, if our build system finds a suitable Python3 interpreter but does not find a Python2 interpreter, the CMake output looks like this:. ```; -- Looking for Python; -- Could NOT find Python2 (missing: Python2_EXECUTABLE Python2_INCLUDE_DIRS Python2_LIBRARIES Python2_NumPy_INCLUDE_DIRS Interpreter Development NumPy Development.Module Development.Embed); Reason given by package:; Interpreter: Wrong major version for the interpreter ""/usr/bin/python""; ```. The CMake output should mention that Python3 was found and things are just fine. The current message looks like ROOT searched for Python2, could not find it and that was it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8084:669,message,message,669,https://root.cern,https://github.com/root-project/root/issues/8084,1,['message'],['message']
Integrability,### Explain what you would like to see improved; <!--; Explain what isn't as good as it could be and why; -->. It would be nice if RDataFrame's `RResultPtr` type offered the option to return the result while releasing its ownership. This is useful e.g. to transfer ownership of that result to ROOT7 graphics interfaces. E.g. `RResultPtr<T>::Release() -> unique_ptr<T>`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7047:308,interface,interfaces,308,https://root.cern,https://github.com/root-project/root/issues/7047,1,['interface'],['interfaces']
Integrability,"### Explain what you would like to see improved; <!--; Explain what isn't as good as it could be and why; -->. The current builtin version of XRootD is [`v5.3.1`](https://github.com/xrootd/xrootd/releases/tag/v5.3.1) (last updated by @oshadura in PR #7335). https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L11. However, in versions of XRootD **pre** [`v5.4.1`](https://github.com/xrootd/xrootd/releases/tag/v5.4.1) (released today 2022-02-23) if XRootD is built with the Python bindings enabled with a modern version of `setuptools` (specifically [`setuptools` v0.60.0+](https://pypi.org/project/setuptools/60.0.0/)) there will be build warnings from `setuptools` and an atypical install path given a dependence on the now deprecated `easy-install.pth`. (c.f. https://github.com/xrootd/xrootd/issues/1579 for lots more details.). At the moment, this does not affect ROOT at all as ROOT's builtin XRootD explicitly disables the Python bindings. https://github.com/root-project/root/blob/a940bdbc40d9a0cdac8975c287e1cb7ada0d0c65/builtins/xrootd/CMakeLists.txt#L43. given 2c23502137acd9276fc21da300ab3d562278d57f (from @peremato in 2015). I am unclear on the specifics of explicitly disabling the Python bindings from being built as there is no associated PR for the commit. If there is not a modern reason for this to stay disabled (my assumption is that there is and I am missing it), updating to XRootD `v5.4.1` would allow for the Python bindings to be optionally enabled and to be build safely with the improvements to the Python bindings build process (and also bring along new features and bug fixes). If there are reasons to keep XRootD below `v5.4.X` then this Issue can get closed. ### Optional: share how it could be improved; <!--; If you already have an idea what we could improve, then please tell us.; -->. Make a PR similar to PR #7335 that would update the builtin to XRootD [`v5.4.1`](https://github.com/xrootd/xrootd/re",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9967:767,depend,dependence,767,https://root.cern,https://github.com/root-project/root/issues/9967,1,['depend'],['dependence']
Integrability,### Explain what you would like to see improved; Allow to use root as dependency using `FetchContent`. ### To Reproduce; ```cmake; cmake_minimum_required(VERSION 3.16). project(Test). include(FetchContent). FetchContent_Declare(; root; GIT_REPOSITORY https://github.com/root-project/root.git; GIT_TAG latest-stable; ). FetchContent_MakeAvailable(root); ```; ### Setup; ROOT version : latest-stable; Operating system : Linux; How you obtained ROOT : github,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8923:70,depend,dependency,70,https://root.cern,https://github.com/root-project/root/issues/8923,1,['depend'],['dependency']
Integrability,"### Explain what you would like to see improved; As per the [v1 binary format specification](https://github.com/root-project/root/blob/master/tree/ntuple/v7/doc/specifications.md#locators-and-envelope-links), the `RNTupleLocator` structure may have information for either: _(i)_ referencing on-disk data, _(ii)_ URI string, or _(iii) any other type-dependent data - see note [1]. In principle, that information should be stored as a `std::variant<...>`, and (de-)serialization routines updated. . [1] Object storage, e.g. Intel DAOS, deliver higher throughput for larger block sizes. In order to transfer larger blocks, a number of pages can be concatenated to be stored under the same key.; Therefore, such storage backends may need, besides a 64-bit object-ID, extra members that encode that the page is part of a larger block.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11758:349,depend,dependent,349,https://root.cern,https://github.com/root-project/root/issues/11758,2,"['depend', 'rout']","['dependent', 'routines']"
Integrability,"### Explain what you would like to see improved; Currently, cling uses `cling::utils::getWrapPoint()` to cut the input line in two parts: one that will become part of an internal wrapper function (i.e., `__cling_Un1Qu3xxx`) and the other that will not.; This mechanism is overly simplistic and cannot correctly handle some cases, e.g. users would expect that the excerpts below are equivalent, however,; ```c++; root [0] namespace foo { int i; }; root [1] using namespace foo; std::cout << ""hello\n"";; hello; root [2] i; (int) 0; ```; translates into do not wrap `using namespace foo;` and wrap `std::cout << ""hello\n"";`, while; ```c++; root [0] namespace foo { int i; }; root [1] std::cout << ""hello\n""; using namespace foo;; hello; root [2] i; input_line_11:2:3: error: use of undeclared identifier 'i'; (i); ^; ```; will wrap all the input. Therefore, the `using` directive is not parsed at the TU level. Also, this function adds missing `;` for some cases, but the current support is somewhat limited (see related issue #8064). ### Optional: share how it could be improved; Cling should cut the input line in several independent fragments that will be either wrapped or directly parsed by clang. Additionally, these fragments shall incorporate some marks, such as ""needs wrapper"" or ""needs terminating semicolon"". The proposed solution might also add the terminating `;` where required, if requested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9171:179,wrap,wrapper,179,https://root.cern,https://github.com/root-project/root/issues/9171,6,['wrap'],"['wrap', 'wrapped', 'wrapper']"
Integrability,"### Explain what you would like to see improved; It would be a nice interface improvement to be able to define an RNTuple model directly in the constructor. As a result, somthing like the following would be possible:. auto ntuple = RNTupleWriter::Recreate({; RField<std::uint32_t>(""id""),; RField<std::vector<float>>(""vpx""),; RField<std::vector<float>>(""vpy""),; RField<std::vector<float>>(""vpz""); }, ""NTuple"", kNTupleFileName);. See #8688 for the full discussion.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8711:68,interface,interface,68,https://root.cern,https://github.com/root-project/root/issues/8711,1,['interface'],['interface']
Integrability,"### Explain what you would like to see improved; List of things that can be vectorised / speeded up in RooFit. - [x] Vectorise https://github.com/root-project/root/blob/bd6bb9f6f62f08eba591edfc7e25b8f45857a562/roofit/roofitcore/src/RooAbsPdf.cxx#L373-L378; - [x] Same for computing logarithms in same class (getLogProbabilities()); - [x] RooNLLVar::computeBatched(); - [x] Investigate if norm and logs can be contracted. - [ ] Generation of events. Unless specialised generator functions are implemented, RooFit employs accept/reject sampling. Since this has to evaluate the PDF many times, one could think about using the batch interface to generate e.g. 2x the requested number of events, and do accept/reject on those. Repeat until enough events have been generated, and throw away the rest.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7032:409,contract,contracted,409,https://root.cern,https://github.com/root-project/root/issues/7032,2,"['contract', 'interface']","['contracted', 'interface']"
Integrability,"### Explain what you would like to see improved; RNTuple DAOS unit tests should be automatically run in a testing build. Specifically, `-Ddaos_mock=ON` should be set if `testing` is defined. `daos_mock` has no dependency on the real libdaos and is safe to run in our testing environment. ### Optional: share how it could be improved; Once PR #6825 is merged, a follow-up PR will be created to address this.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8074:210,depend,dependency,210,https://root.cern,https://github.com/root-project/root/issues/8074,1,['depend'],['dependency']
Integrability,"### Explain what you would like to see improved; RNTuple metadata is serialized to a machine-independent representation. However, contents of a page are written using the native endianess of the architecture on which RNTuple runs. According to the RNTuple v1 specification, these should be laid out always in little-endian order.; ; ### Optional: share how it could be improved; If running on a big-endian machine, (un)packing of data pages for some data types should carry out a (16, 32, or 64-bit) byte swap, depending on the type.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10383:511,depend,depending,511,https://root.cern,https://github.com/root-project/root/issues/10383,1,['depend'],['depending']
Integrability,"### Explain what you would like to see improved; ROOT is configured to look for a bunch of configuration files in your ""Home"" directory, e.g. hidden files .rootrc, rootlogon.C, root aliases, etc. This is the traditional way things were programmed, but now many programs (KiCad, Qt, ...) have been moving towards using the more consensus ""configuration"" folders, e.g. .config/root in order not to pollute your HOME directory with tenths of files, one for each program you use. ### Optional: share how it could be improved; For ROOT7, move things gradually to use ""configuration"" folders. I understand that this is though quite low priority :). Some solutions out there that take care of the multiple naming of config folders depending on your OS:; - https://github.com/Malvineous/cfgpath; - https://doc.qt.io/qt-5/qsettings.html#platform-specific-notes; - https://docs.kicad.org/doxygen/classSETTINGS__MANAGER.html#a5e93287a5efd1e9517c1ddcd2f23bb9a. ### Setup; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jan 12 2022, 10:17:19 |; | From heads/master@v6-25-01-2870-gdac9b6398d |; | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10148:724,depend,depending,724,https://root.cern,https://github.com/root-project/root/issues/10148,1,['depend'],['depending']
Integrability,"### Explain what you would like to see improved; Some legacy CINT commands are not available for Cling, but could be quite useful, like:. - [ ] ""./keyword"" search keyword in help information; - [ ] "".l"" for printing list of local variables ("".g"" does exist already for printing the list of global variables). ### Optional: share how it could be improved; Rescue from CINT the ones considered most useful. Reminder:. - [ ] Update accordingly in TApplication.cxx and/or MetaSema.cpp help messages; - [ ] Update accordingly in https://github.com/root-project/web/blob/main/manual/cling/index.md; - [ ] Copy resulting output to https://github.com/root-project/web/blob/main/manual/first_steps_with_root/index.md; - [ ] https://github.com/root-project/NotebookPrimer/blob/master/notebooks/2-ROOT-Basics.ipynb. ### Setup; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jan 12 2022, 10:17:19 |; | From heads/master@v6-25-01-2870-gdac9b6398d |; | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```. ### Additional context; https://github.com/root-project/root/issues/10065; Here is the full list of ROOTv5.34:; ```; Note1: Cint is not aimed to be a 100% ANSI/ISO compliant C/C++ language; processor. It rather is a portable script language environment which; is close enough to the standard C++. Note2: Regulary check either of /tmp /usr/tmp /temp /windows/temp directory; and remove temp-files which are accidentally left by cint. Note3: Cint reads source file on-the-fly from the file system. Do not change; the active source during cint run. Use -C option or C1 command otherwise. Note4: In source code trace mode, cint sometimes displays extra-characters.; This is harmless. Please ignore. CINT/ROOT ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10191:486,message,messages,486,https://root.cern,https://github.com/root-project/root/issues/10191,1,['message'],['messages']
Integrability,"### Explain what you would like to see improved; Support the storage of user-defined classes that behave as collections of elements. Such classes provide access to the collection via a class that overrides member functions in the `TVirtualCollectionProxy` class. . The collection proxy for a class is typically set during initialization, usually using `TClass::CopyCollectionProxy()` or similar. In later stages, RNTuple might provide this functionality through an interface different from the legacy `TVirtualCollectionProxy`. . ### Additional context; This is required for ATLAS data model, more specifically the `DataVector<T>` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11523:465,interface,interface,465,https://root.cern,https://github.com/root-project/root/issues/11523,1,['interface'],['interface']
Integrability,"### Explain what you would like to see improved; The current Jenkins build matrix doesn't have any builds with `RooFit::MultiProcess` activated currently. PRs that touch anything related to this may silently break things, because it is too easy to forget to manually pass the build flags to the Jenkins bot to activate it. ### Optional: share how it could be improved; Ideally, all builds, except the Windows one, would build with `RooFit::MultiProcess`. To do this, currently, the easiest option is to add `-Droofit_multiprocess=ON -Dbuiltin_zeromq=ON -Dbuiltin_cppzmq=ON` to the build matrix (except the Windows build, because `MultiProcess` is not supported on Windows). A more minimalistic alternative would be to add the build flags to the `ROOT-performance-centos8-multicore/default` build only. ### Additional context; Note that the builtin options are necessary to avoid having to install ZeroMQ on the CI system as a dependency while still having `fail-on-missing` activated as well, as is currently the case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9430:926,depend,dependency,926,https://root.cern,https://github.com/root-project/root/issues/9430,1,['depend'],['dependency']
Integrability,"### Explain what you would like to see improved; There is a class for multidimensional integration, [IntegratorMultiDim](https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html).; From that it's very hard to understand how to use that (in particular, what function should be passed to that and how). . ### Optional: share how it could be improved; Please add examples how to use that. ; In its class description and probably to tutorials (they don't contain any code with that class). ### Additional context; There was a [discussion on the ROOT Forum](https://root-forum.cern.ch/t/multi-dimensional-adaptive-integration/7663/3) with a ready good example. It was promised that people are working on the documentation, but it seems to be forgotten since then.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7740:87,integrat,integration,87,https://root.cern,https://github.com/root-project/root/issues/7740,3,"['Integrat', 'integrat']","['IntegratorMultiDim', 'integration']"
Integrability,"### Explain what you would like to see improved; Users should be allowed to customize the underlying object class of DAOS objects,; depending on their particular scenario. Unless the user specifies otherwise, we will; probably default to `OC_SX`. ### Optional: share how it could be improved; These kind of backend-specific parameters should be exposed via a subclass of; `RNTupleWriteOptions`, e.g. `RNTupleDaosWriteOptions`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8205:132,depend,depending,132,https://root.cern,https://github.com/root-project/root/issues/8205,1,['depend'],['depending']
Integrability,"### Explain what you would like to see improved; We had CI builds stuck in downloading dependencies, e.g. VecCore. That should timeout. ### Optional: share how it could be improved; Add the `TIMEOUT` parameter to all `ExternalProject` calls downloading sources.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6635:87,depend,dependencies,87,https://root.cern,https://github.com/root-project/root/issues/6635,1,['depend'],['dependencies']
Integrability,"### Explain what you would like to see improved; When modifying ROOT source code (and even when not), it takes quite some time to recompile, even with ccache enabled. It seems that many things are re-compiled even if they do not depend directly on each other. ### Optional: share how it could be improved; Remove unneeded dependencies. ### To Reproduce; No-modification at all of the source code, ccache ON.; 1. cd into build directory; 2. Call `time make`; 3. Takes 59 seconds with 1 core; 4. Takes 7 seconds with 32 cores. Quite some time is spent on these lines, they seem to be rebuilt even if nothing was changed:; ```; [ 76%] Built target X86CommonTableGen; [ 76%] Built target LLVMX86Info; [ 76%] Built target LLVMX86AsmParser; [ 76%] Built target LLVMX86Utils; [ 76%] Built target LLVMX86Disassembler; [ 76%] Built target LLVMX86Desc; [ 76%] Built target LLVMX86CodeGen; ```. Now, an example with modification:; 1. cd into build directory; 2. Call `touch sourceDir/core/base/src/TROOT.cxx`; 3. Call `time make`; 4. Takes 485 seconds in 1 core; 5. Takes 102 seconds in 32 cores. Many dictionaries `G__.cxx`, `.pcm` objects are being rebuilt and libraries relinked even if no header changed. ### Setup; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.25/01 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jul 07 2021, 12:59:42 |; | From heads/master@v6-25-01-1572-gaa21d63ca3 |; | With c++ (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0 |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```. ### Additional context; Maybe related https://github.com/root-project/root/pull/791",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8624:229,depend,depend,229,https://root.cern,https://github.com/root-project/root/issues/8624,2,['depend'],"['depend', 'dependencies']"
Integrability,"### Explain what you would like to see improved; When using RDF from PyROOT and checking the type / string representation of some RDF operation, one gets very different things depending on the operation; ```python; >>> import ROOT; >>> df = ROOT.RDataFrame(100); >>> type(df); <class cppyy.gbl.ROOT.RDataFrame at 0x55b7a99f15a0>; >>> type(df.Count); <class 'cppyy.CPPOverload'>; >>> type(df.Histo1D); <class 'functools.partial'>; >>> type(df.Report); <class 'cppyy.CPPOverload'>; >>> type(df.Display); <class 'cppyy.TemplateProxy'>; >>> type(df.Min); <class 'cppyy.TemplateProxy'>; >>> df.Count; <cppyy.CPPOverload object at 0x7f4f22f32ca0>; >>> df.Histo1D; functools.partial(<bound method _histo_profile of <cppyy.gbl.ROOT.RDataFrame object at 0x55b7a9b6fb70>>, ('_OriginalHisto1D', <class cppyy.gbl.ROOT.RDF.TH1DModel at 0x55b7a88dbbb0>)); >>> df.Define; ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Define(basic_string_view<char,char_traits<char> > name, basic_string_view<char,char_traits<char> > expression); >>> df.Filter; ROOT::RDF::RInterface<ROOT::Detail::RDF::RJittedFilter,void> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Filter(basic_string_view<char,char_traits<char> > expression, basic_string_view<char,char_traits<char> > name = """"); >>> df.Report; <cppyy.CPPOverload object at 0x7f4f22f32ca0>; >>> df.Max; ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Max(basic_string_view<char,char_traits<char> > columnName = """"); >>> df.Min; ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Min(basic_string_view<char,char_traits<char> > columnName = """"); >>> df.Mean; ROOT::RDF::RResultPtr<double> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Mean(basic_string_view<char,char_traits<char> > columnName = """"); >>> df.Display; ROOT::RDF::RResultPtr<ROOT::RDF::RDisplay> ROOT::RDF::RInterface<ROOT::Det",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9023:176,depend,depending,176,https://root.cern,https://github.com/root-project/root/issues/9023,1,['depend'],['depending']
Integrability,"### Explain what you would like to see improved; While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:; ```; WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md; ```. ### Optional: share how it could be improved; You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce; Steps to reproduce the behavior:; 1. Install full Slackware 15.0; 2. Install ROOT dependencies; 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup; 1. ROOT version: 6.26/10; 2. Operating system: Slackware 15.0; 3. ROOT built from the official source tarball",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11749:456,synchroniz,synchronize,456,https://root.cern,https://github.com/root-project/root/issues/11749,2,"['depend', 'synchroniz']","['dependencies', 'synchronize']"
Integrability,"### Explain what you would like to see improved; root executable emits a lot of non-requested output which:; 1. force the users to do workarounds just to make root print only what was instructed by user to do; 2. makes it harder to be used as interpreter (to be used in shebang). ### Optional: share how it could be improved; there should be NO output if it was not requested ... ; moreover, IMHO, it's kind of silly that there is a need for `root` and `root.exe`; and users that need to remove annoyances need to `alias root='root.exe -l'`; so, i would say, that all differences between non exe and exe should be removed and hidden under a flag; and all banners or any other text should be by default disabled (so `-l` in fact should enable the banner if requested); for compatibility the .exe files should be replaced with symlinks to the actual main executables. ### To Reproduce; just use it. ### Setup; any root version. ### Additional context; so, my argument is that, given the _interpreter_ profile of the root executable (the fact that it can execute a human text input make is an interpreter in the usage sense), there should be no actions performed that were not instructed by the user/developer; if so, there is a breach of contract like: `i told you to print a new line and this information and i got another newline and some other text beside what i wanted`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8446:1236,contract,contract,1236,https://root.cern,https://github.com/root-project/root/issues/8446,1,['contract'],['contract']
Integrability,"### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13536:389,depend,depend,389,https://root.cern,https://github.com/root-project/root/issues/13536,3,['depend'],"['depend', 'depended', 'dependencies']"
Integrability,"### Feature description. Currently, ROOT loads fonts via the `Root.TTFontPath`. This makes a lot of sense from a ROOT maintainer perspective (simply ship all used fonts), but is a roadblock for a distribution maintainer (embedded files are usually not wished if not otherwise possible). Thus, it would be nice if ROOT would _additionally_ support [fontconfig](https://www.freedesktop.org/wiki/Software/fontconfig/), which is the default way to find fonts on Linux. In particular, the font interface should first look into `Root.TTFontPath` and then fallback to fontconfig. This means that the font-finding interface needs two parameters: the font file name and a fontconfig name as fallback. The current font interface is a bit all over the place. There is at least `graf2d/graf/src/TTF.cxx`, `graf3d/gl/src/TGLFontManager.cxx` and `graf3d/gl/src/TGLText.cxx` that handle font names, probably more. Fedora uses [this patch](https://src.fedoraproject.org/rpms/root/blob/rawhide/f/root-fontconfig.patch) from @ellert to get rid of the non-free MS fonts (see also https://github.com/root-project/root/issues/8357), which is a good start but the patch is not really feasible upstream due to Windows/OSX support. /cc @Axel-Naumann @dpiparo. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16229:489,interface,interface,489,https://root.cern,https://github.com/root-project/root/issues/16229,3,['interface'],['interface']
Integrability,"### Feature description. Geometry module of ROOT (TGeo) features scaled solids, while support for them in TGDMLWrite class is extremely limited and inconsistent. For now, it is possible to export to GDML only two scaled solids: TGeoCone (directly, but only for a subset of possible scalings) and TGeoSphere (only if it has an intersection with a box). All remaining scaled solids are exported as non-scaled ones, which could be an ugly surprise of an unaware user. One of the main roles of GDML export is for establishing an interface to Geant4. During a discussion with Andrei Gheata, he has mentioned that Geant4 is now natively supports scaled solids. The suggested feature is to update TGDMLWrite class to use the “scaledSolid” tag. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13194:525,interface,interface,525,https://root.cern,https://github.com/root-project/root/issues/13194,1,['interface'],['interface']
Integrability,"### Feature description. It would be nice to have a command line wrapper around the `RNTupleImporter` interface, to improve usability and prevent having to type the boilerplate every time in the interpreter or a macro. Possible usage could be as follows:. ```sh; ttree2rntuple TTREE_NAME TTREE_PATH RNTUPLE_PATH [options]; ```; Options include setting the RNTuple name, max number of events to convert etc. (basically, every setter in the `RNTupleImporter` class). For the configuration that goes through `RNTupleWriteOptions`, an option could be to provide something along the lines of `--set-X=Y`, where `X` is the name of the option and `Y` the name of the value (e.g. `--set-compression=505`). `TTREE_NAME` could also be made optional, in which case all trees in `TTREE_PATH` are converted (in principle, the `RNTupleImporter` interface allows for this, I'm not sure if this can be nicely translated to a CLI). N.B. `ttree2rntuple` is (to me) an obvious naming candidate, other names are of course also possible. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13924:65,wrap,wrapper,65,https://root.cern,https://github.com/root-project/root/issues/13924,3,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"### Is your feature request related to a problem? Please describe. Currently it's hard to debug issues that happen when the modules are rebuilt as there is no information displayed about why ROOT decided to rebuild them. For an example see https://github.com/conda-forge/root-feedstock/issues/136. ### Describe the solution you'd like. When rebuilding modules information will be displayed such as: `/usr/include/foo.h got updated, must regenerate module bar`. ### Describe alternatives you've considered. ### Additional context. I've tried a few thing to try and force a module rebuild, e.g. editing headers, touching files and installing different versions of dependencies but ROOT never seems to notice. The best I've managed is to delete all `lib/*.pcm` files which obviously triggers them to be rebuilt:. ```bash; $ root; input_line_1:1:10: remark: building module 'std' as '/home/cburr/miniconda3/envs/test/lib/std.pcm' [-Rmodule-build]; #include <new>; ^; input_line_1:1:10: remark: finished building module 'std' [-Rmodule-build]; input_line_2:1:10: remark: building module 'Cling_Runtime' as '/home/cburr/miniconda3/envs/test/lib/Cling_Runtime.pcm' [-Rmodule-build]; #include ""cling/Interpreter/RuntimeUniverse.h""; ^; While building module 'Cling_Runtime' imported from input_line_2:1:; In file included from <module-includes>:3:; /home/cburr/miniconda3/envs/test/etc//cling/Interpreter/DynamicLookupRuntimeUniverse.h:16:10: remark: building module 'Cling_Runtime_Extra' as '/home/cburr/miniconda3/envs/test/lib/Cling_Runtime_Extra.pcm' [-Rmodule-build]; #include ""cling/Interpreter/DynamicExprInfo.h""; ^; ```. I don't know if ROOT is supposed to be able to recover from this but I run in to three issues, the first is the known `tbb` dependency issue in 6.24.0 that is already fixed for the next patch release. The second issue is that `MathCore.pcm` fails to build with:. ```bash; <<< cling interactive line includer >>>: remark: building module 'MathCore' as '/home/cburr/miniconda3/envs/t",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8518:662,depend,dependencies,662,https://root.cern,https://github.com/root-project/root/issues/8518,1,['depend'],['dependencies']
Integrability,"### Is your feature request related to a problem? Please describe. It's not relevant for this feature request, but: this would allow CMS to trace autoparsing by setting an environment variable, after https://github.com/root-project/root/pull/7609 is merged. ### Describe the solution you'd like. ```bash; export ROOT_LOG='ROOT.InterpreterPerf=Debug(3),ROOT.RBrowser=Error'; ```; should set verbosity for `ROOT.InterpreterPerf` to `kDebug+3` and for `ROOT.RBrowser` to `kError`. ### Describe alternatives you've considered; `.` in variable names is forbidden in bash, so `export ROOT_LOG_ROOT.InterpreterPerf='Debug(3)'` doesn't work, and we'd need to mangle this. That's ugly and complex. We could also have an entry in `.rootrc` - but it brings in a dependency for `RLogger` on `TEnv` that I'd like to avoid. ### Additional context. https://github.com/root-project/root/issues/6931",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7614:751,depend,dependency,751,https://root.cern,https://github.com/root-project/root/issues/7614,1,['depend'],['dependency']
Integrability,"### Is your feature request related to a problem? Please describe.; 1. We would like to compile ROOT without triggering a 'call home' in the CMakeLists.txt, at https://github.com/root-project/root/blob/master/CMakeLists.txt#L124, so we can install ROOT on network-isolated nodes without incurring artificial build delays, or on network-connected nodes which we would prefer to remain private.; 2. When desired, we would like the ROOT internet connection check to work regardless of captive portals and other web screening portals, since currently those sites may appear as connected because the content of the downloaded file is not checked for accuracy.; 3. We would like to be notified in advance of the privacy policy that governs the data that is (inevitably) collected by the root.cern webservers without the user's consent or knowledge, since there exist user privacy expectations here. [GDPR principles](https://gdpr.eu/what-is-gdpr/) that may apply: lack of transparency, collection beyond the limited purpose, lack of data minimization, and probably some others (I am not a laywer). ### Describe the solution you'd like; The 'call home' in https://github.com/root-project/root/blob/master/CMakeLists.txt#L124 should default to off, and should only be called when explicitly requested by a user, and only when the features (`builtin_gsl` and `clad`) that depend on it are enabled. When it is used, the internet connection check should check a checksum of the downloaded file. ### Describe alternatives you've considered; Alternatively, the user can be alerted upon downloading the ROOT source code from any of its various locations that compiling this software may trigger data collection on the root.cern server, e.g. https://root.cern/install/build_from_source/, https://github.com/root-project/root/releases, etc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11603:1363,depend,depend,1363,https://root.cern,https://github.com/root-project/root/issues/11603,1,['depend'],['depend']
Integrability,"### Is your feature request related to a problem? Please describe.; <!--; A clear and concise description of what the problem is. E.g ""I always have to [...] when I want to [...]""; -->. Rather often for minimisation in `RooFit`, using `RooAbsPDf::fitTo`, for complicated functions a maximal number of calls is reached. Since there is no direct war to access this parameter of `RooMinimiser` from `RooAbsPDf::fitTo`,; for such cases I need to switch from `RooAbsPdf::fitTo` to a manual creation of `RooMinimiser` object, ; configure it and use it to minimize (manually created) NLL. . ### Describe the solution you'd like; <!--; A clear and concise description of what you want to happen.; -->. It will be very good to have a dedicated option(`RooCmdArg`) to `RooAbsPdf::fitTo` function that allows to redefine the default number of calls, such that one can use it together with other options, e.g. . ```; dataset = ...; pdf = ...; result = pdf.FitTo ( dataset , ROOT.RooFit.Save() , ROOT.RooFit.MaxCalls( 10000 ) , ... ); ```; ; ### Describe alternatives you've considered; <!--; Can you think of alternative solutions or features?; -->. The standard way that I use , is in case `RooAbsPdf::fitTo` reaches maximal number of calls, switch ; to manual creation and configuration of `RooMinimiser`, manual creation of NLL and edssentially bypass very nice and convinient `RooAbsPdf::fitTo` interface. . ### Additional context; <!--; Add any other context or screenshots about the feature requested here.; -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11875:1387,interface,interface,1387,https://root.cern,https://github.com/root-project/root/issues/11875,1,['interface'],['interface']
Integrability,"### Is your feature request related to a problem? Please describe.; A long-standing TGaxis issue is that calling secondaryXaxis->SetMaxDigits(N) affects all other X and Y axes in the current canvas. ### Describe the solution you'd like; TGaxis::SetMaxDigits, StripDecimals, etc. are all axes-dependent and don't affect the default state of other axes. ### Additional context; https://root-forum.cern.ch/t/tgaxis-setmaxdigits/11543/2?u=ferhue; https://sft.its.cern.ch/jira/browse/ROOT-35; https://root-forum.cern.ch/t/tgaxis-setmaxdigits-not-working-as-expected/2889/3; https://root-forum.cern.ch/t/tgaxis-and-setmaxdigits/19425/5",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8774:292,depend,dependent,292,https://root.cern,https://github.com/root-project/root/issues/8774,1,['depend'],['dependent']
Integrability,"### Is your feature request related to a problem? Please describe.; I'm merging multiple root files into one with hadd. I realized some of the files were corrupted, because the jobs that produced them were killed in the middle. When I try to open these files I see messages about ""recovered keys"".; When merging those files with hadd there are multiple messages displayed, like:; ```Info in <TFile::Recover>: ppfx_me000z-200i_run_98.root, recovered key TDirectoryFile:nuebar_thintarget at address 5276; Info in <TFile::Recover>: ppfx_me000z-200i_run_98.root, recovered key TDirectoryFile:nuebar_mippnumi at address 5409; Info in <TFile::Recover>: ppfx_me000z-200i_run_98.root, recovered key TDirectoryFile:nuebar_attenuation at address 5538; Info in <TFile::Recover>: ppfx_me000z-200i_run_98.root, recovered key TDirectoryFile:nuebar_others at address 5673; Info in <TFile::Recover>: ppfx_me000z-200i_run_98.root, recovered key TDirectoryFile:nuebar_total at address 5798; Warning in <TFile::Init>: successfully recovered 21 keys; Warning in <TFile::Init>: no StreamerInfo found in ppfx_me000z-200i_run_98.root therefore preventing schema evolution when reading this file. The file was produced with version 5.34/32 of ROOT.; hadd Source file 2: ppfx_me000z-200i_run_526.root; Warning in <TFile::Init>: no StreamerInfo found in ppfx_me000z-200i_run_526.root therefore preventing schema evolution when reading this file. The file was produced with version 5.34/32 of ROOT.; hadd Target path: out.root:/; hadd Target path: out.root:/nom; hadd Target path: out.root:/nom/parent; Error in <TBufferFile::ReadClassBuffer>: Could not find the StreamerInfo for version 7 of the class TH1, object skipped at offset 110; Error in <TBufferFile::CheckByteCount>: object of class TH1 read too few bytes: 2 instead of 2216; Error in <TBufferFile::ReadClassBuffer>: Could not find the StreamerInfo for version 7 of the class TH1, object skipped at offset 107; Error in <TBufferFile::CheckByteCount>: object of class ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8952:265,message,messages,265,https://root.cern,https://github.com/root-project/root/issues/8952,2,['message'],['messages']
Integrability,"### Is your feature request related to a problem? Please describe.; If I want to read data from a webDav/http endpoint using an oidc token, I'd need to be able to pass the token somehow in ROOT to the Davix client wrapper. Possibly through env variable and rootrc. ### Describe the solution you'd like; Make the Davix client wrapper able to take the token from env variable and rootrc. ### Additional context; Preparatory for future WLCG (and not only) authN/Z model.; I was thinking to something like this as a required change, but, of course, I'd need more feedback: https://github.com/root-project/root/compare/master...dciangot:davix_bearer_token?expand=1",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6802:214,wrap,wrapper,214,https://root.cern,https://github.com/root-project/root/issues/6802,2,['wrap'],['wrapper']
Integrability,"### More detailed description of main commit (1st commit). This commit addresses Jira issue [ROOT-2784](https://sft.its.cern.ch/jira/browse/ROOT-2784) (from 2010, oldest open RooFit ""bug""!). Emit warning message in RooCmdConfig when multiple named arguments of; the same type are encountered, for which no chaining behavior is; defined. To make the warning message more clear, a map is implemeted to look up; the name of the function in the `RooFit` namespace that is used to; create the repeated RooCmdArg. Usually, the names of the argument and; the name of the function that created it are identical, but there are; exceptions that are hardcoded in this map. Furthermore, a warning message is also emitted for the commands that; have a defined chaining behavior (`Import`, `Link`, and `Slice`), where; the alternatives that take a `std::map` with the multiple commands is; suggested. This is done to encourage RooFit code that can be easily; ported to Python if desired, because chainig command arguments with the; same name is not possible in Python RooFit (commands are passed as; keyword arguments, which can't be repeated). Having such a warning message also helps users that try to chain more; commands than `RooAbsReal::plotOn` can digest. They will get the; solution in the warning message instead of having to ask in the forum,; which happend for example in [this forum post](https://root-forum.cern.ch/t/simultaneous-fit-with-8-pdfs-using-roosimultaneous-and-roodataset/45331). ### Quick description of other commits. * commit 1:; * main commit explianed above; * commit 2 - 4:; * update RooFit code to not trigger the warnings; * commit 5:; * update RooFit C tutorial files to not trigger the warnings; * Python tutorials can only be updated after pythonizations for `Import`, `Link`, and `Slice`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8427:204,message,message,204,https://root.cern,https://github.com/root-project/root/pull/8427,5,['message'],['message']
Integrability,"### The WebSocket data handler in ROOT is not complete; The data handler (as defined in line 136 in TCivetWeb.cxx) only checks the `fin` bit (`code & 0x0f`) bit but not the `opcode` (`code & 0x0f`), which may leads to unexpected behaviour in some circumstance. ### Optional: both `fin` and `opcode` need to be checked to determine the type of frame received.; As stated in RF4855, the the `fin` bit and `opcode` work together to represent the state of the frame. As shown below, the `fin` (standing for `finished`) only set for frames contain a complete message (single frame message), or the last frames of multi-frame messages. The `opcode` indicates the type of frames, i.e., continuation, text, binary, or closing. For multi-frame messages, the `opcode` indicates the text or binary nature only in the first frame, and the `opcode` set to zero for the rest of the frames. ; - single frame: `fin = 1` and `opcode = 1,2,8` (1: text; 2: binary; 8 closing);; - cont'd frame - 1st: `fin = 0` and `opcode = 1,2`(1: text; 2: binary);; - cont'd frame - 2..(n-1)-th: `fin = 0` and `opcode = 0 `;; - cont'd frame - n-th (last): `fin = 1` and `opcode = 0`;; - closing: `fin = 1` and `opcode = 8 `. Only use `fin` may lead to two problems:; 1. the closing message from client will be interpreted as data. In my case, I receive two bytes (0x03, 0xC5).; 2. the binary or text nature of the multi-frame message will not be interpreted, because this is only indicate in the first frame. This may not be an issue, though, because the single-frame message in CivetWeb can be as long as 131,000 bytes, which is long enough for most communication from clients. I hope this can be fixed in the future release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9207:554,message,message,554,https://root.cern,https://github.com/root-project/root/issues/9207,7,['message'],"['message', 'messages']"
Integrability,"### This Pull request:. Hi @guitargeek , the class `RooPolyFunc` is introduced with this pull request. This class allow to form multi-variable polynomials of arbitrary number of variables. . The class also allows for RooFit functions to be Taylor expanded as a function of the dependent variables. This is provided by static functions which return the Taylor expanded function as a `RooPolyFunc`. ## Checklist:. - [x] tested changes locally; - [x] added tutorials; - [x] added unit test; - [ ] analytical integral",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9184:277,depend,dependent,277,https://root.cern,https://github.com/root-project/root/pull/9184,1,['depend'],['dependent']
Integrability,### This Pull request:; * Fix axis labels ; * CaloTower selection in context of REveDataCollection when collection filter is applied; * Fix client's duplicate error messages from server; * Minor correction in Summary view layout; * Add expression validator for new column expression in table; * Review log messages; * Introduce HttpPublic option which disable usage of RFileDialog; * Updates REnderCore with fixes in font renderin. From verion 1.5 to 1.6.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16829:165,message,messages,165,https://root.cern,https://github.com/root-project/root/pull/16829,2,['message'],['messages']
Integrability,"### To Reproduce. ```; root tutorials/graphics/triangles.C ; root [] c1->SaveAs(""c1.C""); root [] .x c1.C; ```; One gets several error messages: `error: use of undeclared identifier 'ci'`. Problem can be easily fixed. PR will be provided after #11914 will be merged",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11916:134,message,messages,134,https://root.cern,https://github.com/root-project/root/issues/11916,1,['message'],['messages']
Integrability,"### Version; ROOT version: 6.18/04; OS: Linux, SLC7; How you obtained ROOT: conda install; ### Describe the bug. When using pyROOT (might not necessarily be due to using pyROOT) with '-h' or '--help' in sys.argv, if a ROOT method is called, a root CLI help message will be wrongly printed out. In a lot of cases when designing a python package that uses ROOT with CLI support, this bug will make the CLI print out the root help instead of the intended help message from the python package. ### To reproduce the issue (e.g. using python interpreter):; ```; import sys; sys.argv.append('-h'); import ROOT; ROOT.Double(); ```; This will print out the following message:. """"""; usage: root [-b B] [-x X] [-e E] [-n N] [-t T] [-q Q] [-l L] [-config CONFIG]; [-memstat MEMSTAT] [-h HELP] [--version VERSION]; [--notebook NOTEBOOK] [--web WEB] [--web=<browser> WEB=<BROWSER>]; [dir] [file:data.root] [file1.C...fileN.C]. OPTIONS:; -b Run in batch mode without graphics; -x Exit on exceptions; -e Execute the command passed between single quotes; -n Do not execute logon and logoff macros as specified in .rootrc; -t Enable thread-safety and implicit multi-threading (IMT); -q Exit after processing command line macro files; -l Do not show splash screen; -config print ./configure options; -memstat run with memory usage monitoring; -h, -?, --help Show summary of options; --version Show the ROOT version; --notebook Execute ROOT notebook; --web Display graphics in a default web browser; --web=<browser> Display graphics in specified web browser; [dir] if dir is a valid directory cd to it before executing; [file:data.root] Open the ROOT file data.root; [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C; """"""; And the program will terminate. ### Expected behaviour. No root CLI help message should be printed out",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7161:257,message,message,257,https://root.cern,https://github.com/root-project/root/issues/7161,4,['message'],['message']
Integrability,"#To do so one needs to pass -Dbuiltin_llvm=Off -Dbuiltin_clang=Off and the; PATH should contain the path to llvm-config. Note this is not enabling ROOT to work with vanilla clang!. This patch allows ROOT to be built against a prebuilt clang and llvm from; https://root.cern.ch/git/{llvm.git,clang.git}. It allows to reduce ROOT's; build times (in cases when cmake decides to rebuild the in-tree llvm for; no good reason). It moves the common denominator of different ROOT builds; in one place to save space. It also allows easy switch between LLVM in; debug and release mode. To build the external clang and llvm exactly in the same way as the; in-tree builds use:. CMAKE_FLAGS=""\; -DLLVM_ENABLE_WARNINGS=OFF \; -DLLVM_INCLUDE_TESTS=OFF \; -DCLANG_INCLUDE_TESTS=OFF \; -DLLVM_INCLUDE_EXAMPLES=OFF \; -DCLANG_BUILD_TOOLS=OFF \; -DCLANG_TOOL_ARCMT_TEST_BUILD=OFF \; -DCLANG_TOOL_CLANG_CHECK_BUILD=OFF \; -DCLANG_TOOL_CLANG_FORMAT_BUILD=OFF \; -DCLANG_TOOL_CLANG_FORMAT_VS_BUILD=OFF \; -DCLANG_TOOL_CLANG_FUZZER_BUILD=OFF \; -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD=OFF \; -DCLANG_TOOL_CLANG_OFFLOAD_BUNDLER_BUILD=OFF \; -DCLANG_TOOL_CLANG_RENAME_BUILD=OFF \; -DCLANG_TOOL_C_ARCMT_TEST_BUILD=OFF \; -DCLANG_TOOL_C_INDEX_TEST_BUILD=OFF \; -DCLANG_TOOL_DIAGTOOL_BUILD=OFF \; -DCLANG_TOOL_LIBCLANG_BUILD=OFF \; -DCLANG_TOOL_SCAN_BUILD_BUILD=OFF \; -DCLANG_TOOL_SCAN_VIEW_BUILD=OFF \; -DLLVM_BUILD_TOOLS=ON \; -DLLVM_TOOL_LLVM_AR_BUILD=OFF \; -DCLANG_TOOL_CLANG_OFFLOAD_BUNDLER_BUILD=OFF \; -DLLVM_FORCE_USE_OLD_TOOLCHAIN=ON \; -DCLANG_ENABLE_STATIC_ANALYZER=OFF \; -DCLANG_ENABLE_ARCMT=OFF \; -DCLANG_ENABLE_FORMAT=OFF \; -DLLVM_TARGETS_TO_BUILD=host \; -DLLVM_ABI_BREAKING_CHECKS=FORCE_OFF \; -DLLVM_ENABLE_ABI_BREAKING_CHECKS=OFF \; -DCMAKE_INSTALL_PREFIX=.. \; -DCMAKE_BUILD_TYPE=Debug"". cmake ""$CMAKE_FLAGS"" ../../../sources/root-llvm/. EDIT: We actially need -DLLVM_BUILD_TOOLS=OFF to be ON to build the llvm-config binary. Fixed in the description of this PR but not in the commit message.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1798:1977,message,message,1977,https://root.cern,https://github.com/root-project/root/pull/1798,1,['message'],['message']
Integrability,' in /opt/root_src/geom/geom/src/TGeoCone.cxx:501; 7: Taking false branch in /opt/root_src/geom/geom/src/TGeoCone.cxx:501; 8: Calling 'TGeoCone::DistFromOutsideS' in /opt/root_src/geom/geom/src/TGeoCone.cxx:503; 9: Assuming 'dz' is > 0 in /opt/root_src/geom/geom/src/TGeoCone.cxx:365; 10: Taking false branch in /opt/root_src/geom/geom/src/TGeoCone.cxx:365; 11: Assuming the condition is false in /opt/root_src/geom/geom/src/TGeoCone.cxx:370; 12: Taking false branch in /opt/root_src/geom/geom/src/TGeoCone.cxx:370; 13: Assuming the condition is false in /opt/root_src/geom/geom/src/TGeoCone.cxx:379; 14: Taking false branch in /opt/root_src/geom/geom/src/TGeoCone.cxx:379; 15: Assuming 'ro1' is <= 0 in /opt/root_src/geom/geom/src/TGeoCone.cxx:393; 16: '?' condition is false in /opt/root_src/geom/geom/src/TGeoCone.cxx:393; 17: 'hasrmin' is false in /opt/root_src/geom/geom/src/TGeoCone.cxx:397; 18: Taking false branch in /opt/root_src/geom/geom/src/TGeoCone.cxx:397; 19: Assuming 'rout' is <= 0 in /opt/root_src/geom/geom/src/TGeoCone.cxx:406; 20: Left side of '&&' is false in /opt/root_src/geom/geom/src/TGeoCone.cxx:406; 21: 'in' is false in /opt/root_src/geom/geom/src/TGeoCone.cxx:410; 22: Taking false branch in /opt/root_src/geom/geom/src/TGeoCone.cxx:410; 23: 'inrmin' is true in /opt/root_src/geom/geom/src/TGeoCone.cxx:443; 24: Taking false branch in /opt/root_src/geom/geom/src/TGeoCone.cxx:443; 25: 'hasrmin' is false in /opt/root_src/geom/geom/src/TGeoCone.cxx:459; 26: Taking false branch in /opt/root_src/geom/geom/src/TGeoCone.cxx:459; 27: 'inrmax' is false in /opt/root_src/geom/geom/src/TGeoCone.cxx:471; 28: Taking false branch in /opt/root_src/geom/geom/src/TGeoCone.cxx:471; 29: Assuming 'delta' is >= 0 in /opt/root_src/geom/geom/src/TGeoCone.cxx:475; 30: Taking false branch in /opt/root_src/geom/geom/src/TGeoCone.cxx:475; 31: The left operand of '-' is a garbage value in /opt/root_src/geom/geom/src/TGeoCone.cxx:476; /opt/root_src/geom/geom/src/TGeoCone.cxx:585:31: warni,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:20011,rout,rout,20011,https://root.cern,https://github.com/root-project/root/issues/7428,1,['rout'],['rout']
Integrability,' in /opt/root_src/geom/geom/src/TGeoCone.cxx:501; 7: Taking false branch in /opt/root_src/geom/geom/src/TGeoCone.cxx:501; 8: Calling 'TGeoCone::DistFromOutsideS' in /opt/root_src/geom/geom/src/TGeoCone.cxx:503; 9: Assuming 'dz' is > 0 in /opt/root_src/geom/geom/src/TGeoCone.cxx:365; 10: Taking false branch in /opt/root_src/geom/geom/src/TGeoCone.cxx:365; 11: Assuming the condition is false in /opt/root_src/geom/geom/src/TGeoCone.cxx:370; 12: Taking false branch in /opt/root_src/geom/geom/src/TGeoCone.cxx:370; 13: Assuming the condition is false in /opt/root_src/geom/geom/src/TGeoCone.cxx:379; 14: Taking false branch in /opt/root_src/geom/geom/src/TGeoCone.cxx:379; 15: Assuming 'ro1' is <= 0 in /opt/root_src/geom/geom/src/TGeoCone.cxx:393; 16: '?' condition is false in /opt/root_src/geom/geom/src/TGeoCone.cxx:393; 17: 'hasrmin' is false in /opt/root_src/geom/geom/src/TGeoCone.cxx:397; 18: Taking false branch in /opt/root_src/geom/geom/src/TGeoCone.cxx:397; 19: Assuming 'rout' is > 0 in /opt/root_src/geom/geom/src/TGeoCone.cxx:406; 20: Left side of '&&' is true in /opt/root_src/geom/geom/src/TGeoCone.cxx:406; 21: Assuming the condition is true in /opt/root_src/geom/geom/src/TGeoCone.cxx:406; 22: Taking true branch in /opt/root_src/geom/geom/src/TGeoCone.cxx:406; 23: 'in' is true in /opt/root_src/geom/geom/src/TGeoCone.cxx:410; 24: Taking true branch in /opt/root_src/geom/geom/src/TGeoCone.cxx:410; 25: 'hasrmin' is false in /opt/root_src/geom/geom/src/TGeoCone.cxx:413; 26: '?' condition is false in /opt/root_src/geom/geom/src/TGeoCone.cxx:413; 27: Assuming 'safz' is > 'safrmin' in /opt/root_src/geom/geom/src/TGeoCone.cxx:415; 28: Left side of '&&' is false in /opt/root_src/geom/geom/src/TGeoCone.cxx:415; 29: Assuming 'safrmax' is >= 'safrmin' in /opt/root_src/geom/geom/src/TGeoCone.cxx:420; 30: Taking false branch in /opt/root_src/geom/geom/src/TGeoCone.cxx:420; 31: Assuming 'ddotn' is < 0 in /opt/root_src/geom/geom/src/TGeoCone.cxx:428; 32: Taking false branch in /op,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:12018,rout,rout,12018,https://root.cern,https://github.com/root-project/root/issues/7428,1,['rout'],['rout']
Integrability,"'__atomic_fetch_add_8' unresolved. It does not fail on any other Fedora architectures including 32 bit arm. Fedora koji scratch build: https://koji.fedoraproject.org/koji/taskinfo?taskID=55575382. ```; 50/1028 Test #11: pyunittests-pyroot-pyz-ttree-branch-attr ............................***Failed 1.24 sec; test_alias_branch (ttree_branch_attr.TTreeBranchAttr) ... ok; test_array_branch (ttree_branch_attr.TTreeBranchAttr) ... ok; test_basic_type_branch (ttree_branch_attr.TTreeBranchAttr) ... ok; test_char_array_branch (ttree_branch_attr.TTreeBranchAttr) ... ok; test_ntuples (ttree_branch_attr.TTreeBranchAttr) ... ok; test_struct_branch (ttree_branch_attr.TTreeBranchAttr) ... ok; test_struct_branch_leaflist (ttree_branch_attr.TTreeBranchAttr) ... ok; test_ttree_subclass_in_namespace (ttree_branch_attr.TTreeBranchAttr) ... IncrementalExecutor::executeFunction: symbol '__atomic_fetch_add_8' unresolved while linking symbol '__cf_16'!; ERROR; test_vector_branch (ttree_branch_attr.TTreeBranchAttr) ... ok; ======================================================================; ERROR: test_ttree_subclass_in_namespace (ttree_branch_attr.TTreeBranchAttr); ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.22.04/bindings/pyroot/pythonizations/test/ttree_branch_attr.py"", line 139, in test_ttree_subclass_in_namespace; t = ROOT.Foo.MyTree(); TypeError: Foo::MyTree constructor failed; ----------------------------------------------------------------------; Ran 9 tests in 0.509s; FAILED (errors=1); CMake Error at /builddir/build/BUILD/root-6.22.04/cmake/modules/RootTestDriver.cmake:237 (message):; error code: 1; ```; ### Expected behavior; Successful test on all architectures. ### To Reproduce; 1. Compile root 6.22.04 for ix32; 2. Run unit tests. ### Setup; 1. ROOT version: 6.22.04; 2. Operating system: Fedora Linux 32/33/34 for ix32; 3. Compilation from source during packaging for Fedora/EPEL",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6813:2032,message,message,2032,https://root.cern,https://github.com/root-project/root/issues/6813,1,['message'],['message']
Integrability,"'s annoying to have all these explicit usage of `this`, just to access a class member that is already marked as a class member with the underscore prefix convention. Please replace all occurences of `this->_` in the source file with just `_`.; - [x] [`makeCrosssectionContainer()`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2128) returns a `TPair*` that is owned by the caller. Please return `std::unique_ptr<TPair>` is this case, or even better return a `std::pair` instead (avoid using old ROOT container classes that were written before the standard library was introduced).; - [x] Similarly, [`createTH1`](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L2621) returns an owning raw pointer too, while it should return a `std::unique_ptr<TH1>` in this case. Can this interface still be changed without disrupting users too much? **No, this can break usercode, so this suggestion was not implemented!**. All these flaws above have been addressed by @rahulgrit in #9912. Some more flaws were fixed in #11023. - [x] The `getCache` function takes a unused argument. It is a private function, so to signature can simply be changed and the argument removed; - [x] The unused `_ownsParameters` member should be removed. However, that's not all! There are more issues with this class that have to be resolved in a followup PR:. - [x] Various memory leaks (search for `new ` in the file and you will find them, almost everything created on the heap is leaking.; - for example, [here](https://github.com/root-project/root/blob/1608dfa0d8d630617d6b529ccb090a0bbab00bbc/roofit/roofit/src/RooLagrangianMorphFunc.cxx#L836) we even have some RooDataHists that leak; - [x] There is a static counter variable in the default constructor. It is unused and should be removed; - [x] The `RooStringVar` is used in the configuration of the class. We sho",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9845:2175,interface,interface,2175,https://root.cern,https://github.com/root-project/root/issues/9845,1,['interface'],['interface']
Integrability,"(For context, this is important for multi-dimensional constant arrays as described in [ROOT-7016](https://sft.its.cern.ch/jira/browse/ROOT-7016) and tested in Cling's `Interfaces/evaluate.C` test. But for reasons unknown to me, the ROOT prompt now seems to have a different way of handling this case because just reverting commit https://github.com/root-project/root/commit/d97e4dca36370a1f036026cb6976416670882bc6 still works there...). Instead of using relying on recursive templated calls, perform the type cast in the `ValueExtractionSynthesizer`. This has the advantage of avoiding an ODR violation warning in `MultipleInterpreters.C` with LLVM 16 (while unclear if that one is correct or not).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13477:168,Interface,Interfaces,168,https://root.cern,https://github.com/root-project/root/pull/13477,1,['Interface'],['Interfaces']
Integrability,"(Helper &&h, const ColumnNames_t &bl, std::shared_ptr<PrevDataFrame> pd,; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/bin/../lib/gcc/x86_64-conda-linux-gnu/7.5.0/../../../../x86_64-conda-linux-gnu/include/c++/7.5.0/bits/unique_ptr.h:821:34: note: in instantiation of member function 'ROOT::Internal::RDF::RAction<ROOT::Internal::RDF::FillHelper, ROOT::Detail::RDF::RNodeBase, ROOT::TypeTraits::TypeList<ROOT::VecOps::RVec<bool> > >::RAction' requested here; { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/InterfaceUtils.hxx:157:19: note: in instantiation of function template specialization 'std::make_unique<ROOT::Internal::RDF::RAction<ROOT::Internal::RDF::FillHelper, ROOT::Detail::RDF::RNodeBase, ROOT::TypeTraits::TypeList<ROOT::VecOps::RVec<bool> > >, ROOT::Internal::RDF::FillHelper, const std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > &, std::shared_ptr<ROOT::Detail::RDF::RNodeBase>, ROOT::Internal::RDF::RBookedCustomColumns>' requested here; return std::make_unique<Action_t>(Helper_t(h, nSlots), bl, std::move(prevNode), std::move(customColumns));; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/InterfaceUtils.hxx:458:21: note: in instantiation of function template specialization 'ROOT::Internal::RDF::BuildAction<ROOT::VecOps::RVec<bool> , ROOT::Detail::RDF::RNodeBase>' requested here; auto actionPtr = BuildAction<BranchTypes...>(bl, std::move(rOnHeap), nSlots, std::move(prevNodePtr), ActionTag{},; ^; input_line_35:2:23: note: in instantiation of function template specialization 'ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, ROOT::VecOps::RVec<bool> , ROOT::Detail::RDF::RNodeBase, TH1D>' requested here; ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, R",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6675:6885,Interface,InterfaceUtils,6885,https://root.cern,https://github.com/root-project/root/issues/6675,1,['Interface'],['InterfaceUtils']
Integrability,") and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: ; ```; tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service; tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message log",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9792:1117,message,message,1117,https://root.cern,https://github.com/root-project/root/issues/9792,1,['message'],['message']
Integrability,"), as I get runtime segfaults when I build a project with nvc++ and link it against root built with gcc 9.3.0. However, building root fails during cmake (3.21.3) with; ```; CMake Warning at cmake/modules/CheckCompiler.cmake:12 (message):; Unsupported compiler: NVHPC.; Call Stack (most recent call first):; CMakeLists.txt:130 (include). nvc++-Error-Unknown switch: -; CMake Error at cmake/modules/CheckCompiler.cmake:129 (if):; if given arguments:. ""STRGREATER"" ""201703L"". Unknown arguments specified; Call Stack (most recent call first):; CMakeLists.txt:130 (include); ```. so it looks like nvc++ doesn't know about the `__cplusplus` macro. If I hack around this, cmake finishes, but then the compilation dies with ; ```; [ 27%] Building CXX object interpreter/llvm/src/lib/Support/CMakeFiles/LLVMSupport.dir/GraphWriter.cpp.o; ""/bld4/atlas/root/src_6.24/interpreter/llvm/src/lib/Support/ErrorHandling.cpp"", line 116: error: the global scope has no ""write""; ssize_t written = ::write(2, MessageStr.data(), MessageStr.size());; ^; ```; and; ```; NVC++-F-0000-Internal compiler error. get_call_sptr(): indirect call not via LDA/ACON 154 (/bld4/atlas/root/src_6.24/interpreter/llvm/src/lib/DebugInfo/DWARF/DWARFContext.cpp: 193); NVC++/x86-64 Linux 21.9-0: compilation aborted; make[2]: *** [interpreter/llvm/src/lib/DebugInfo/DWARF/CMakeFiles/LLVMDebugInfoDWARF.dir/DWARFContext.cpp.o] Error 2; make[2]: *** Waiting for unfinished jobs....; [ 52%] Built target obj.clang-tblgen; make[1]: *** [interpreter/llvm/src/lib/DebugInfo/DWARF/CMakeFiles/LLVMDebugInfoDWARF.dir/all] Error 2; CMake Error at /bld4/atlas/root/bld.v6-24-06_nvhpc_c17/TBB-prefix/src/TBB-stamp/TBB-build-Release.cmake:49 (message):; Command failed: 2. 'make' 'cpp0x=1' 'CXXFLAGS= -mno-rtm' 'CPLUS=/opt/nvidia/hpc_sdk/Linux_x86_64/21.9/compilers/bin/nvc++' 'CONLY=/opt/nvidia/hpc_sdk/Linux_x86_64/21.9/compilers/bin/nvc' 'LDFLAGS='; ```. Has anyone tried/succeeded building root with nvc++?. FWIW, nvc++ was configured with gcc 9.3.0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9036:1091,Message,MessageStr,1091,https://root.cern,https://github.com/root-project/root/issues/9036,2,"['Message', 'message']","['MessageStr', 'message']"
Integrability,"). I think this method requires more explanation. It all started from my proposal to rely on Itanium C++ ABI to implement cast. I won't post that mail here because it is written in such a broken English. On 24/03/17 22:32, Axel Naumann wrote:; > Hi Berserker,; >; > I'm more and more convinced that this is the way to go... I'm talking; > specifically about; > <https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/libsupc%2B%2B/cxxabi.h#L591>; > here.; >; > Do you think you could give it a shot in the form of a PR? . On 25/03/17 19:06, Berserker Troll wrote:; > Hi Axel,; > ; > __dynamic_cast is standardized, but works only for polymorphic classes, while TClass::DynamicCast and exception-based cast also work for non-polymorphic ones.; > If you want TDirectory to work for all kinds of classes you should consider not dynamic_cast algorithm [1], but exception handler matching one [2].; > Unfortunately, [2] says:; >> Since the RTTI related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data).; > ; > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3].; > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6].; > ; > So, if we want this exception hander matching algorithm, there are a couple of options:; > 1) Stick to libsupc++ with its ""public"" __do_catch() member function; > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardised list of type_info-derived types [8",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/463:1251,rout,routines,1251,https://root.cern,https://github.com/root-project/root/pull/463,2,"['interface', 'rout']","['interfaces', 'routines']"
Integrability,* Add array interface; * Add `__getitem__` magic; * Add tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4043:12,interface,interface,12,https://root.cern,https://github.com/root-project/root/pull/4043,1,['interface'],['interface']
Integrability,"* Add infrastructure to call distcc as prefix; * Use distcc as CCACHE_PREFIX if ccache is enabled. Works extremely well! I get a speedup of almost 2x using a second laptop with a comparable CPU. My third laptop is so slow that it does not help at all ;) However, a screenshot of the monitoring:. ![screenshot_25-05-20_23-19-08](https://user-images.githubusercontent.com/6951222/82887084-c6801a80-9f47-11ea-969a-10fc9b2c7a4f.png). Also works nicely with ccache. Though I'm not too sure whether it's nice how I integrated it (see the `CCACHE_PREFIX` envvar set in the command for `RULE_LAUNCH_COMPILE`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5705:509,integrat,integrated,509,https://root.cern,https://github.com/root-project/root/pull/5705,1,['integrat'],['integrated']
Integrability,"* Avoid coning of plot variable twice then plotting a `RooAbsReal`, as the new BatchMode doesn't like model cloning; * Some minor fixes in `BatchModeHelpers`; * Improving the interface of `RooAbsReal::createPlotProjection`; * Use also the different BatchMode backends in the `createNLL` calls in `stressRooFit`, extending text coverage also to (profile) likelihood scans with the new BatchMode. The likelihood scans in the tutorials are up to 10 times faster now when using the new BatchMode compared to RooFit legacy. More detail can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11123:175,interface,interface,175,https://root.cern,https://github.com/root-project/root/pull/11123,1,['interface'],['interface']
Integrability,"* Decouple browsing and geometry drawing functionality; * Try to provide generic browsing module (server and client), using ui5 TreeTable; * Support partial and full loading of browsing structures (depending on size); * Support online and offline operations (later used for web snapshots); * Update JSROOT with latest three.js r102",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3648:198,depend,depending,198,https://root.cern,https://github.com/root-project/root/pull/3648,1,['depend'],['depending']
Integrability,* Increases the test coverage of interacting with third-party python packages; * Improve message to user if the pandas package is not found,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5397:89,message,message,89,https://root.cern,https://github.com/root-project/root/pull/5397,1,['message'],['message']
Integrability,"* Removes unneeded custom pdfs; * Fix dependency of RooStats tutorials on HistFactory test data creation; * Veto all RooStats tutorials if XML is not found, just like is done for the HistFactory tutorials",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14074:38,depend,dependency,38,https://root.cern,https://github.com/root-project/root/pull/14074,1,['depend'],['dependency']
Integrability,* Rename function access a channel from EveLog() to REveLog(); * Make logger stored messages thred local,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8191:84,message,messages,84,https://root.cern,https://github.com/root-project/root/pull/8191,1,['message'],['messages']
Integrability,* Reuse REveData table in REveTableProxyBuilder::Build() function; * Add interface in REveManager for client version,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4186:73,interface,interface,73,https://root.cern,https://github.com/root-project/root/pull/4186,1,['interface'],['interface']
Integrability,"* The `ROOFIT_MEMORY_SAFE_INTERFACES` macro is explained in the release notes, so that users and framework developers can use it to detect memory leaks. * Since people are now encouraged to use it, the `RooFit::Detail::owningPtr` helper function was renamed to `RooFit::makeOwningPtr`, because this is now not an implementation detail anymore but part of the user interface. * Remove `takeOwnership` constructor arguments from `PiecewiseInterpolation` and `RooAddition`, because there are not memory-safe and it's not easily possible to only exclude selected parameters behind the `ROOFIT_MEMORY_SAFE_INTERFACES` macro without also changing the sources. Like this, we ensure that the memory-safe interfaces can be used without re-building ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14177:364,interface,interface,364,https://root.cern,https://github.com/root-project/root/pull/14177,2,['interface'],"['interface', 'interfaces']"
Integrability,* Try/catch exceptions in steaming of table; * Stream REveLog message conent in the the end-change content form server; * Add support for different projections than RPhi RhoZ in REveJetCone,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9643:62,message,message,62,https://root.cern,https://github.com/root-project/root/pull/9643,1,['message'],['message']
Integrability,* [cmake] Fix dependency of some TMVA_SOFIE tutorials. * [tmva] Set unique model file names for tutorials. The tutorials were using the same model file name and this was causing a problem when running the tutorials in parallel as in the CI builds. Fix also some deprectations happening when using now the new Keras version based on tensorflow.keras Fix dependency also for Python Keras tutorials. Disable also Regression Keras tutorials in CI builds since they are too slow for the regression evaluation on single events. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11325:14,depend,dependency,14,https://root.cern,https://github.com/root-project/root/pull/11325,2,['depend'],['dependency']
Integrability,"* `RooInt` was only a wrapper class to save unit test integer results to reference files (like `RooDouble`), but it is unused by now. * `RooTFoamBinding` is an implementation detail of the `RooFoamGenerator` and should not be part of the public interface. * `RooConvIntegrandBinding` is an implementation detail of `RooNumConvPdf`/`RooNumConvolution` and should not be part of the public interface. * Some unnecessary includes are removed",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12754:22,wrap,wrapper,22,https://root.cern,https://github.com/root-project/root/pull/12754,3,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"* modernize memory management; * don't define factory interfaces in header files; * remove unneeded base classes, LinkDef entries, and ClassDefs for helper classes",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11896:54,interface,interfaces,54,https://root.cern,https://github.com/root-project/root/pull/11896,1,['interface'],['interfaces']
Integrability,"* moves `MinuitFcnGrad`, `RooGradMinimizerFcn`, and the implementations; of `LikelihoodWrapper` and `LikelihoodGradientWrapper` out of the; public interfaces. * removing these public interfaces is unproblematic because they have; not been released yet. * new factory methods added to `Likelihood(Gradient)Wrapper` so we can; still create specific implementations for testing. * `clang-format` applied",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9871:147,interface,interfaces,147,https://root.cern,https://github.com/root-project/root/pull/9871,3,"['Wrap', 'interface']","['Wrapper', 'interfaces']"
Integrability,"* replace ROOTSYS by $ROOTSYS; * import new options for `root` and `root-config` from the current help messages; * extended the explanation of `root` for macro compilation (`+`, `+O`, ...), combinations of macro and data files, combinations of macros with expressions; * updated a few URLs; * updated root-config explanation for Makefiles (adapting to built-in rules). Please check, especially the third point is based my on my regular usage of root and not on the official documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1487:103,message,messages,103,https://root.cern,https://github.com/root-project/root/pull/1487,1,['message'],['messages']
Integrability,"***tl;dr;*** This PR eliminates (almost all of) the dependencies between the implicit and explicit multithreading execution modes in ROOT and allows the co-existance of several TThreadExecutor instances, each one executing on a different number of threads. . It doesn't change any other behaviour in the eyes of the user. TO DO:. - [ ] Decide on explicit-implicit MT execution modes' interactions; - [ ] Rename TPoolManager; - [ ] Decide if allowing change of the number of threads when calling several times EnableImplicitMT(x) with a varying x without an intermediate call to DisableImplicitMT(); - [ ] Add warnings . ***********************************************************************************. # Previous behaviour; Previous to this PR, the number of threads was limited during the lifetime of the tbb scheduler, kept alive by TPoolManager as a ```std::shared_ptr``` as long as references to it existed, to the value set on its initialization. ```cpp; //We initialize the scheduler with 4 threads; ROOT::EnableIMT(4);; { ; //The scheduler is active, so the value passed to TThreadExecutor; //is overriden with the number of threads the scheduler has been; //initialized with (4); TThreadExecutor executor(9);; }; ROOT::DisableIMT();. //The scheduler is not alive at this point, ; //so we initialize it with 2 threads; ROOT::EnableIMT(2);; ROOT::TThreadExecutor executor(8);; ROOT::DisableIMT();. executor.MapReduce(...); //Runs on two threads!. ROOT::EnableIMT(3);; //Still two threads! TThreadExecutor instance was keeping the scheduler alive; ```; This also implies that given two co-existent instances of TThreadExecutor initialized with a different number of threads, the first one to be initialized forces on the second one the number of threads to work with. ```cpp; ROOT::TThreadExecutor executor(4);; ROOT::TThreadExecutor executor2(8); //will run limited to two threads!!; ```; This setup was useful [to avoid undefined behaviours between the implicit and explicit parallelism mode",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2389:52,depend,dependencies,52,https://root.cern,https://github.com/root-project/root/pull/2389,1,['depend'],['dependencies']
Integrability,"**1st commit:** Do not randomly add to lookup results during <code>EvaluateT()</code>; Axel fixed the notorious bug which prevented having templated <code>printValue()</code> functions in the ""RuntimePrintValue.h"" header which is declared programmatically on the first <code>printValue()</code>invocation. Runtime resolving of some identifiers was used when it shouldn't be. Moving the checking of this condition to the beginning of the function fixed the issue. **2nd commit:** Removed old <code>printValue</code> from TDatime and TString. **3rd commit:** New <code>printValue</code> integration. **4th commit:** Re-added <code>printValue</code> functionality to TString and TDatime. **5th, final commit:** Minor fix",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/75:585,integrat,integration,585,https://root.cern,https://github.com/root-project/root/pull/75,1,['integrat'],['integration']
Integrability,"**Context:**; I am working in CBM at GSI/FAIR and helping for the support of our CBMROOT CI chains.; One of our nodes was updated to Debian 12 and then had hundreds of errors in the logs of a test running without trouble on other nodes.; All errors are an identical `Error in <TTF::SetTextSize>: error in FT_Set_Char_Size`, which comes from [TTF.cxx l.574, in `TTF::SetTextSize`](https://github.com/root-project/root/blob/c6f4076e69beaa6283d520c365831dfb0149d083/graf2d/graf/src/TTF.cxx#L574). **Problem:**; The error message helps neither; - to find out the call origin ; - to identify the root cause; - to fix the problem. as it provides ; 1. neither the parameters used in the top call ; 2. nor the actual error code returned by the underlying TTF library. **Proposed solution:** ; (inspired by a quick look at handling in `graf3d/ftgl/[inc src]/FTSize.[h cxx] `); ```diff; diff --git a/graf2d/graf/src/TTF.cxx b/graf2d/graf/src/TTF.cxx; index b8acf771d9..2f844b98da 100644; --- a/graf2d/graf/src/TTF.cxx; +++ b/graf2d/graf/src/TTF.cxx; @@ -570,8 +570,9 @@ void TTF::SetTextSize(Float_t textsize); }; ; Int_t tsize = (Int_t)(textsize*kScale+0.5) << 6;; - if (FT_Set_Char_Size(fgFace[fgCurFontIdx], tsize, tsize, 72, 72)); - Error(""TTF::SetTextSize"", ""error in FT_Set_Char_Size"");; + FT_Error err = FT_Set_Char_Size(fgFace[fgCurFontIdx], tsize, tsize, 72, 72);; + if (err); + Error(""TTF::SetTextSize"", ""error in FT_Set_Char_Size: %d (input size %f, calc. size %x)"", err, textsize, tsize);; }; ; ////////////////////////////////////////////////////////////////////////////////; ```. Patch tested locally based on ROOT v6.26.10 under Debian 12 (as far as I can tell this part of the file was not changed since the initial commit so the ROOT version should not matter).; The one thing where I am unsure is whether the calculated size (`tsize`) should be printed in hexadecimal (as it is offseted by multiple bits) or as standard integer. **Effect:**; In our case it allowed to find out that the automat",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14592:518,message,message,518,https://root.cern,https://github.com/root-project/root/issues/14592,1,['message'],['message']
Integrability,"**Edit:** I'll post the newest version always at the bottom of the feed. The interface here at the top is not state-of-the-art!. ---. I've created this issue to discuss how the feature should look like, see the attached PR for the impl. My current interface looks as follows:. ```python; import ROOT. df = ROOT.RDataFrame(1)\; .Define('myInt', 'int(1)')\; .Define('myFloat', 'float(1)')\; .Define('myVec', 'ROOT::RVec<float>({1, 2, 3})'). print(df.GetSchema()); # Prints you this:; '''; Column Type; ------ ----; myInt int; myFloat float; myVec ROOT::VecOps::RVec<float>; '''; ```. - ~Do we like the name of the function?~ Describe is better; - ~Do we like that it returns a string rather than printing to stdout?~ We like strings!; - ~Should we add a header to the table?~ Edit: Done, see above!; - ~Should we add any other information (see `TTree::Print`)?~ Yes, see below",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7561:77,interface,interface,77,https://root.cern,https://github.com/root-project/root/issues/7561,2,['interface'],['interface']
Integrability,**NOTE:** This PR needs a rebase and is dependent on #303,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/314:40,depend,dependent,40,https://root.cern,https://github.com/root-project/root/pull/314,1,['depend'],['dependent']
Integrability,"**Need**:. The need for a new evaluation metric for testing the convergence of the optimizer is essential. The already existing metric was maximumRelativeError() between two matrices which takes the maximum of all the relative errors between its individual elements. But the relative error between these elements depends on the element values. i.e. Relative error between a and b = abs(a-b)/(abs(a)+abs(b)). Let use consider 2 cases,. case a) If two values are a = 0.0001 , b = 0.0002, relative error = 0.3333; case b) If two values are a = 10.0001 b = 10.0002 relative error = 4.99992e-6 . Since the unit tests for optimizer is written in a way so that a sample 3 layer DNN will learn this function Y = K * X. So, If X = I ( Identity matrix ), then Y = K * I = K. This should be equivalent to the output of the trained DNN when I is feed as Input. Let Y' be the output of the trained DNN. So I need to compare the matrices K and Y' for approximate equality with a certain threshold. So If I use maximumRelativeError for comparing the approximate equality for two matrices, then even though the difference is small for two cases, the relative error is significantly different. So there is a need for a new evaluation metric.; ; **Goal**:. The goal of this PR is to implement new evaluation metric meanAbsoluteError() between two matrices which takes the mean of all the absolute errors of individual elements. Absolute error between a and b = abs(a-b). So both the cases described above will have the same absolute error. So I propose this would be a good choice of metric for comparing two matrices for approximate equality as needed for testing optimizers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2376:313,depend,depends,313,https://root.cern,https://github.com/root-project/root/pull/2376,1,['depend'],['depends']
Integrability,"**This is a replay of #16274 with the ""clear build"" label for the CI, to see if we can reproduce the build error that were observed after merging said PR**. Our CMake code modifies `find_package` to ignore any ROOT builtins, such that the builtin LLVM doesn't find and use system versions of the builtin dependencies. This is a bit hacky, but fortunately this needs to be done only when builtins are used. Therefore, this commit suggests to only do this redefinition of `find_package` if any builtins are used. This closes #8633, where it was requested to avoid this hack for the sake of being compatible with the `vcpkg` package manager. Although the hack is not completely removed, it is removed for the case where not builtins are used, which is probably what is done when using a C++ package manager to manage dependencies.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16285:304,depend,dependencies,304,https://root.cern,https://github.com/root-project/root/pull/16285,2,['depend'],['dependencies']
Integrability,"*Ported over from JIRA (https://its.cern.ch/jira/browse/ROOT-7704), where there was already lots of discussion. See also the previous attempt in #5541*. ## Original ticket. Is it possibile to use lambda function created in c++ into python?; ```python; ROOT.gROOT.ProcessLine(""auto l = []{cout << 100 << endl;}""); ROOT.l; ```; I get:; ```txt; /home/turra/root/lib/ROOT.py:436: RuntimeWarning: creating converter for unknown type ""(lambda)""; attr = _root.LookupCppEntity( name, PyConfig.ExposeCppMacros ); ```; I see on the contrary that it is possibile to use std::function; ```python; ROOT.gROOT.ProcessLine(""std::function<void()> f = []{cout << 100 << endl;}""); ROOT.f(); ```; the problem is that each lambda function is a different type. Is it possible to wrap them in a std::function automatically?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16168:758,wrap,wrap,758,https://root.cern,https://github.com/root-project/root/issues/16168,1,['wrap'],['wrap']
Integrability,", in _handle_request_noblock; self.process_request(request, client_address); ```. ### Reproducer. Grab the image:; ```; $ docker run --security-opt label=disable -it registry.cern.ch/root-ci/ubuntu2404:buildready; ```; Then:; ``` ; (; rm -rf /github/home/ROOT-CI; mkdir -p /github/home/ROOT-CI; ); (; curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/ubuntu2404/master/RelWithDebInfo/3f796869dae3bde0bfafc4ef8051339eb5ca133c/2024-08-12.tar.gz; ); (; cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz; ); (; cd '/github/home/ROOT-CI/src'; git checkout master; git fetch; git reset --hard @{u}; ); (; cd '/github/home/ROOT-CI/src'; git fetch https://github.com/root-project/root 9fc748389d42ce698fe8654ac177f9cf9a542f5c; ); (; cd '/github/home/ROOT-CI/src'; ; git config user.email ""rootci@root.cern""; git config user.name 'ROOT Continous Integration'; ; git fetch origin 7d45ab2957efacf7b6685f4ae126a9fed243494c:fix-15733; git checkout fix-15733; git rebase 531620f59e898e5ec809043135583d15b0d151a6; ); (; git clone --branch master --single-branch https://github.com/root-project/roottest.git ""/github/home/ROOT-CI/roottest""; ); (; cd '/github/home/ROOT-CI/roottest'; ; git config user.email ""rootci@root.cern""; git config user.name 'ROOT Continous Integration'; ; git fetch ; git checkout ; git rebase master; ); (; which cmake; cmake --version; which c++ || true; c++ --version || true; uname -a || true; cat /etc/os-release || true; sw_vers || true; uptime || true; df || true; ); (; cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L; ); (; cmake --build '/github/home/ROOT-CI/build' --config 'RelWithDebInfo' --parallel '16'; ); (; cd '/github/home/ROOT-CI/build'; ctest --output-on-failure --parallel 16 --output-junit TestResults.xml; ); ```. ### ROOT version. master. ### Installation method. docker copy/pasted from CI. ### Operating system. Alma9 + Ubuntu. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16242:5213,Integrat,Integration,5213,https://root.cern,https://github.com/root-project/root/issues/16242,2,['Integrat'],['Integration']
Integrability,"- A rebase or similar apparently cut the documentation in two, and a stray sentence now leads the documentation of the second overload.; - The first overload has no documentation at all ... Please make it a habit immediately write a good docstring in the same commit where the interface is fixed defined. https://github.com/root-project/root/blob/a8874141392745a4f9b35fa52d41ada66f203df5/roofit/roofitcore/inc/RooAbsReal.h#L126-L139. https://root.cern.ch/doc/master/classRooAbsReal.html#a3f4185c14daa089c29ae3ba1e90b5235",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9523:277,interface,interface,277,https://root.cern,https://github.com/root-project/root/issues/9523,1,['interface'],['interface']
Integrability,- Add an implementation of getValV for RooAddPdf to use stored normalization as default one when the pdf is evaluated without passing a norm. set.; - Disable printing of warning message when evaluating un-normalized RooAddPdf in : ; - RooAbsPdf::printValue; - RooAbsArg::graphVizTree; - when getVal(0) is called in constructor of RooRealIntegral when a normalization set is not defined.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7750:178,message,message,178,https://root.cern,https://github.com/root-project/root/pull/7750,1,['message'],['message']
Integrability,"- Add back MathCore, needed by TPyFitFunction; - Drop TTreeAsMatrix.h from dictionary to cut unnecessary dependency on RDataFrame",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2809:105,depend,dependency,105,https://root.cern,https://github.com/root-project/root/pull/2809,1,['depend'],['dependency']
Integrability,"- In matplolib one can use the ""Default X-Points"" feature to plot X/Y graphs: If one do not; specify the points in the x-axis, they will get the default values 0, 1, 2, 3, (etc. depending; on the length of the y-points). The matplotlib script will be:; ```; import matplotlib.pyplot as plt; import numpy as np; points = np.array([3, 8, 1, 10, 5, 7]); plt.plot(ypoints); plt. show(); ```; It is now possible to do the same with the ROOt TGraph:; ```; double y[6] = {3, 8, 1, 10, 5, 7};; auto g = new TGraph(6,y);; g->Draw();; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10588:178,depend,depending,178,https://root.cern,https://github.com/root-project/root/pull/10588,1,['depend'],['depending']
Integrability,"- Instead of a raw pointer, a deleter, and some custom memory management methods, RValue now stores a shared void pointer to the object to be written to / read from disk. Follow-up PRs are coming to change the `RField::BindValue` API to a shared pointer interface and to change RValue to not return raw pointers.; - Splits the `REntry::CaptureValueUnsafe` API into a shared-pointer based safe `BindValue` and a `BindRawPtr` unsafe version. This could be a separate PR but it ended up here... It probably makes sense to review the final change set and not go through the transitional commits.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14412:254,interface,interface,254,https://root.cern,https://github.com/root-project/root/pull/14412,1,['interface'],['interface']
Integrability,"- Move some RenderCore specific classes and all shaders into RenderCore source tree. - Implement all existing Three.js functionality with RenderCore. - In RenderCore, further improve on existing functionality:; - Textured points - arbitrary size and shape.; - Mesh lines - arbitrary thickness.; - Object and sub-object picking through color buffer with fragment depth detection.; - Camera handling like in TEve, with ability to pick rotation center. - The development branch has been squashed to hide redundant changes. Full history is available in PR osschar/root#41. ## C++ / Server Changes. - REveManager: Make RenderCore the default rendering engine. - Stream interpreter errors and show them in client log. - Add flag fIsRCore to REveManager. - Make REvePointSet secondary-selectable. - Add parameter for projection depth in REveDataCollection. ## JS / Client Changes. - Remove error MessageBox popup during client updates. - EveManager.js: Check change bits in ImportSceneBinary when scene changes are streamed. - EveScene.js: Optimize visibility changes. - EveScene.js: pass eve_element instead of object3d in cases where it simplifies the code. - EveScene.js, GlViewer classes: Cleamup highlite/selection management so it can be abstracted for RCore. - Separate viewer-side selection processing for Three / RCore. ## Tutorials / Demos Changes. - event_demo.C: secondary select points, jet title include pT. - Tune marker sizes, colors, visual parameters.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11936:889,Message,MessageBox,889,https://root.cern,https://github.com/root-project/root/pull/11936,1,['Message'],['MessageBox']
Integrability,- Refactor AdaBoost; - Add multi-class support; - Add ranking feature; - Remove deprecated file `tmva/pymva/test/Classification.C`. **NOTE:** This PR needs a rebase and is dependent on #303,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/315:172,depend,dependent,172,https://root.cern,https://github.com/root-project/root/pull/315,1,['depend'],['dependent']
Integrability,- Replace `long` types by `Longptr_t`; - Fix pointer formatting (use `%zx` and `size_t` for architecture dependent format),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7944:105,depend,dependent,105,https://root.cern,https://github.com/root-project/root/pull/7944,1,['depend'],['dependent']
Integrability,"- Replace some more `long` types by `Longptr_t`; - Fix pointer formatting (use `%zx` and `size_t` for architecture dependent format); - Fix several `warning C4267: 'argument': conversion from 'size_t' to 'Ssiz_t', possible loss of data`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7894:115,depend,dependent,115,https://root.cern,https://github.com/root-project/root/pull/7894,1,['depend'],['dependent']
Integrability,- Set minimum CUDA version to 8.0 (doesn't build otherwise); - Fix include path of CUDA dependent library `dnn_cuda` (previously used path `ROOT_INCLUDE_DIRS` is not in local scope),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/283:88,depend,dependent,88,https://root.cern,https://github.com/root-project/root/pull/283,1,['depend'],['dependent']
Integrability,- Set the `-std:c++14` / `-std:c++17` flag depending on the version of Visual Studio (only if building outside ROOT); - Split the one line exports in three lines to fix a potential issue with Ninja on Windows (missing a white space between each `/EXPORT:` specifier),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9083:43,depend,depending,43,https://root.cern,https://github.com/root-project/root/pull/9083,1,['depend'],['depending']
Integrability,- TGDMLWrite: Fix interface to write partial trees. Partial trees must be identified by a TGeoNode and not by a TGeoVolume. Otherwise surfaces cannot be attached to the top level nodes of a partial tree.; - TGDMLWrite: add values of material/surface property tables to output; - TGDMLWrite: add output of CONST properties; - TGDMLParse: protect against trailing '\n' and other white spaces when reading property table values,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4160:18,interface,interface,18,https://root.cern,https://github.com/root-project/root/pull/4160,1,['interface'],['interface']
Integrability,"- TMVA_Higgs_Classification.C. a tutorial using the public Higgs UCI dataset for a classification problem using a Deep Neural network from TMVA, that is made with fully connected layers. - TMVA_CNN_Classification.C. Tutorial showing the usage of Convolutional neural network in TMVA.; The macro generates on the fly some toys images (size 16x16) of two different classes and then a; convolutional neural network is used for their classification.; This example builds and uses also a CNN built on the fly using Keras through the ROOT PyKeras package; This example shows also how to use a batch normalization layer in TMVA. - TMVA_RNN_Classification.C. Tutorial showing the usage of Recurrent neural network in TMVA.; Toys time dependednt data of two different classes are generated on the fly and then; a recurrent neural network is used for classification.; Both TMVA and PyKeras networks are built and used.; The network uses by default one LSTM layer, but optionally it can be built with; a simple RNN or a GRU layer or also 3 different recurrent networks for each recurrent layer type; can be made",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5441:726,depend,dependednt,726,https://root.cern,https://github.com/root-project/root/pull/5441,1,['depend'],['dependednt']
Integrability,- Veto tutorial multiVarGaus.C when mathmore is not available; - Disable printing error message in exampleFunction.py when mathmore is not available. This fixes ROOT-8145,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8288:88,message,message,88,https://root.cern,https://github.com/root-project/root/pull/8288,1,['message'],['message']
Integrability,"- When `CMAKE_CXX_FLAGS` are defined at the command line, the; build-type-specific flags will be appended to `CMAKE_CXX_FLAGS`,; possibly overriding all flags set by users.; - With this patch, pre-defined ROOT flags are prepended, giving; users the option to override flags like -O2.; - Further, a status message is printed when ROOT overrides the build type and the final compiler flags are also printed in the correct order. Previously, these flags were printed wrongly, giving the false impression that the user could override e.g. the `-O` flags.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4049:305,message,message,305,https://root.cern,https://github.com/root-project/root/pull/4049,1,['message'],['message']
Integrability,"- When a plot in overlapping ranges is requested, the normalisation is not; computed correctly. Now, any overlap between plot ranges is removed; before plotting.; - [RF4756] When integrating a peaked function in a side band, the normalisation integral; might vanish. This will raise an evaluation error. Now, if the function; value also vanishes, this is accepted without error.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4107:179,integrat,integrating,179,https://root.cern,https://github.com/root-project/root/pull/4107,1,['integrat'],['integrating']
Integrability,- When imt is off one needs to have still the imt dependency for using TExecutor; - Fix correct definition for variable defining location of vdt headers.; It should be VDT_INCLUDE_DIRS and not VDT_INCLUDE_DIR,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9441:50,depend,dependency,50,https://root.cern,https://github.com/root-project/root/pull/9441,1,['depend'],['dependency']
Integrability,"- [ ] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; Exception is throwing std::length_error with message vector too long. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. ```; #include <ROOT/RDataFrame.hxx>; #include <TFile.h>; #include <TTree.h>. int; main(int argc, char* argv[]); {; std::uint32_t v0 = 0;; std::uint32_t v1 = 0;. TFile file(""sbx.root"", ""RECREATE"");; TTree tree(""tree-name"", ""tree-title"");; tree.Branch(""v0"", &v0);; tree.Branch(""v1"", &v1);. for (std::size_t i = 0; i < 10; ++i); {; v0 = i;; v1 = i * 2;; tree.Fill();; }. tree.Scan();; tree.Write();. try; {; ROOT::RDataFrame df(tree);; }; catch (std::length_error& ex); {; std::cout << ex.what() << std::endl;; std::cout << std::endl;; }. return 0;; }; ```. ### Setup; <!--; 1. ROOT version 6.26.10 and 6.29.01; 2. Operating system Windows Visual Studio 2022 64-bit x64 ; 3. How you obtained ROOT Downloaded exe installer; -->; ROOT version 6.26.10 and 6.29.01; Operating system Windows Visual Studio 2022 64-bit x64 ; How you obtained ROOT Downloaded exe installer. ### Additional context; <!--; Add any other context about the problem here.; -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12540:503,message,message,503,https://root.cern,https://github.com/root-project/root/issues/12540,1,['message'],['message']
Integrability,"- [ ] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; I was build ROOT from source on a FreeBSD VM.; after command: cmake -Dall=ON -Dcuda=OFF -Dalien=OFF -Doracle=OFF ../root-6.26.06,; I got a warning:; Looking for XROOTD; -- Found Xrootd version num: 4.10.0 (setting -DROOTXRDVERS=400100000); -- libXrdMain not found: xproofd will be a wrapper around xrootd; -- include_dirs: /usr/local/include/xrootd;/usr/local/include/xrootd/private; -- libraries: /usr/local/lib/libXrdUtils.so;/usr/local/lib/libXrdClient.so;/usr/local/lib/libXrdCl.so; CMake Warning (dev) at /usr/local/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:438 (message):; The package name passed to `find_package_handle_standard_args` (PkgConfig); does not match the name of the calling package (Arrow). This can lead to; problems in calling code that expects `find_package` result variables; (e.g., `_FOUND`) to follow a certain pattern.; Call Stack (most recent call first):; /usr/local/share/cmake/Modules/FindPkgConfig.cmake:99 (find_package_handle_standard_args); cmake/modules/FindArrow.cmake:39 (include); cmake/modules/SearchInstalledSoftware.cmake:17 (_find_package); cmake/modules/SearchInstalledSoftware.cmake:1040 (find_package); CMakeLists.txt:245 (include); This warning is for project developers. Use -Wno-dev to suppress it. I just ignored it.; after command: cmake --build . --target install, everything goes well and then it stopped with following message. [ 52%] Generating G__Core.cxx, ../lib/Core.pcm; #0 0x00000000044aaf65 llvm::sys::PrintStackTrace(llvm::raw_ostream&) Signals.cpp:0:0; #1 0x00000000044a91b6 llvm::sys::RunSignalHandlers() Signals.cpp:0:0; #2 0x0000000",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11430:672,wrap,wrapper,672,https://root.cern,https://github.com/root-project/root/issues/11430,1,['wrap'],['wrapper']
Integrability,"- [ ] Checked for duplicates; Yes, kind of. I thought that there was a ticket about this by @amadio, but I didn't find anything. ## Describe the bug; In a setup where ROOT was installed in a system directory, ROOT was picking up headers from that directory instead of its own. ### How to reproduce:; 1. `echo '#error This is the wrong header' > /my/include/directory/RooSpan.h` (or a few other headers).; 2. Install some builtins into that directory, e.g. VDT; 3. `cmake -DCMAKE_PREFIX_PATH=/my/include/directory/ <root>` to create a dependency to that include directory.; 4. Build. Now ROOT should find VDT, and add a `-I/my/include/directory/` to the compile command, which will accidentally include other parts of ROOT.; The problem is that it's difficult to provoke this error using only one header:; - All core includes are prepended to every compile command, so none of the core includes will be picked up wrongly.; - Library A will always find its own includes in the correct location, because it's also prepended. The problem only becomes visible when `A` depends on `B and C`, and `B` depends on something in `/system/include/` (e.g. VDT), and `C` is *also* installed in those system includes. This generates a compile command such as:; ```; -I.../core/x -I.../core/y -I.../core/... -I.../A/include -I.../B/include -I/system/include/ -I.../C/include ...; ```; Instead of picking up `C` from ROOT's build directory, it now comes from `/system/include/`. ### Expected behavior; ROOT picks up all its own includes first, and system includes last. This can be achieved with `-isystem ...`, so every `-I ...` is searched before `-isystem ...`.; In CMake, this means:; - Using imported targets when software comes from system directories (these are implicitly system includes); - Explicitly marking some include directories `SYSTEM`. ### Setup; Centos8; ROOT installed in `/data/software/`; ROOT configured with; `cmake -DCMAKE_PREFIX_PATH=/data/software ... <root>`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8708:534,depend,dependency,534,https://root.cern,https://github.com/root-project/root/issues/8708,3,['depend'],"['dependency', 'depends']"
Integrability,"- [ ] Implement batch eval for Chi2 test stat; - [x] Implement recovery from disallowed regions for batch eval (https://github.com/root-project/root/pull/6401); - [x] Implement getWeightBatch() and getBatches() for RooDataHist; - [ ] Implement getBatch for RooTreeDataStore?; - [ ] Don't clear all intermediate values in batch fits between fit cycles. Only the ones that changed.; - [ ] Disable recalculateCache etc belonging to Lvl2 optimisation.; - [ ] Use batch evaluation & inverted CDF for toys; - [ ] Continue to improve interface with variadic templates; - [ ] Profile and optimise new Batch interface; - [ ] Modernise proxyList member of RooSimultaneous; - [ ] Investigate if retrieving batch data with category states is better for batch evaluations. (vs. splitting composite datasets into components, and creating one NLL for each.); - [ ] Continue modernisation of RooSimultaneous. Requires rebasing and fixing an index bug in https://github.com/hageboeck/root/tree/updateRooSimultaneous; - [ ] Implement analytical integration of RooJohnson.; - [ ] Correct interface of RooAbsData and derived classes to use e.g. `std::size_t` for indexing events. `int` doesn't make sense.; - [ ] Always have a debug version of RooFit around with `-DROOFIT_CHECK_CACHED_VALUES`.; - [ ] Use analytic integrals in RooBinSamplingPdf when available.; - [ ] Check that different integrator settings are honoured in RooBinSamplingPdf.; - [ ] https://sft.its.cern.ch/jira/browse/ROOT-8304; - [ ] Implement evaluateSpan() in classes relevant for HistFactory fits.; - [ ] Throw Gaussian & Poisson constraints into dedicated fast class.; - [ ] Switch on FastEvaluations topic in RooFit message streams, and use it to trace down PDFs that don't implement the faster interface.; - [ ] #7210, slowly augment PDFs with checks of the definition range of parameters. This prevents evaluation errors and can stabilise fits.; - [ ] #7217, pythonisations for RooFit; - [ ] Vectorized generation of events. Unless specialised",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6557:527,interface,interface,527,https://root.cern,https://github.com/root-project/root/issues/6557,2,['interface'],['interface']
Integrability,"- [ x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->; ### Describe the bug. When compiling some of my classes I got the following error message. The code was compiling before I removed some lines in one of the included header files. ```; /Users/uhlig/software/fair/cbm/cbmroot_git/analysis/PWGDIL/dielectron/papaframework/PairAnalysisSpectrum.cxx:78:1: error: redefinition of 'R__dummyintdefault78'; ClassImp(PairAnalysisSpectrum); ^; /opt/fairsoft/apr21p2/include/root/Rtypes.h:361:24: note: expanded from macro 'ClassImp'; #define ClassImp(name) ClassImpUnique(name,default); ^; /opt/fairsoft/apr21p2/include/root/Rtypes.h:356:21: note: expanded from macro 'ClassImpUnique'; static int _R__UNIQUE_(_NAME2_(R__dummyint,key)) __attribute__((unused)) = \; ^; /opt/fairsoft/apr21p2/include/root/ROOT/RConfig.hxx:456:27: note: expanded from macro '_R__UNIQUE_'; # define _R__UNIQUE_(X) _R__JOIN_(X,__LINE__); ^; /opt/fairsoft/apr21p2/include/root/ROOT/RConfig.hxx:453:27: note: expanded from macro '_R__JOIN_'; # define _R__JOIN_(X,Y) _NAME2_(X,Y); ^; /opt/fairsoft/apr21p2/include/root/ROOT/RConfig.hxx:435:33: note: expanded from macro '_NAME2_'; # define _NAME2_(name1,name2) name1##name2; ^; <scratch space>:81:1: note: expanded from here; R__dummyintdefault78; ^; /Users/uhlig/software/fair/cbm/cbmroot_git/analysis/PWGDIL/dielectron/papaframework/PairAnalysisHistos.h:78:1: note: previous definition is here; ClassImp(PairAnalysisHn); ^; /opt/fairsoft/apr21p2/include/root/Rtypes.h:361:24: note: expanded from macro 'ClassImp'; #define ClassImp(name) ClassImpUnique(name,default); ^; /opt/fairsoft/apr21p2/include/root/Rtypes.h:356:21: note: expanded from macro 'ClassImpUnique'; static int",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10948:444,message,message,444,https://root.cern,https://github.com/root-project/root/issues/10948,1,['message'],['message']
Integrability,"- [ y] Checked for duplicates. ### The bug; In TBrowser, SetShowProjectionY and then specifying the number of bins produces an error message and no projection.; Error in <TClingCallFunc::IFacePtr(kind)>: Attempt to get interface while invalid.; Error in <TClingCallFunc::Exec(address, interpVal)>: Called with no wrapper, not implemented!. ### Expected behavior; It should open a new window containing the projection. ### To Reproduce; Open a 2D histogram. Right-click on it. Select SetShowProjectionY. Click Ok on the popup window to confirm the number of bins. . ### Setup; Root 6.24/04; CentOS 8.5.2111 ; Built from source. ### Additional context; It worked fine under Redhat 7.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9330:133,message,message,133,https://root.cern,https://github.com/root-project/root/issues/9330,3,"['interface', 'message', 'wrap']","['interface', 'message', 'wrapper']"
Integrability,"- [X] Checked for duplicates. ### Describe the bug; A non-void returning function (specifically, returning `std::vector<ROOT::RDF::RResultPtr<TH1D>>`) that throws, causes `cling::Value::~Value()` to try freeing resources that were, in principle, already released as part of exception handling. See behavior below:; ```c++; root [0] .x pointer_not_allocated_error.cc; free(): double free detected in tcache 2; ```. In principle, this seems to be dependent on NRVO. Crash seems to be avoided either by _(i)_ commenting out; ```c++; histograms.push_back(h);; ```; ; or _(ii)_ changing the `return` statement as follows; ```diff; - return histograms;; + return {h};; ```. ### To Reproduce; The issue can be reproduced with the following code in ArchLinux x86_64 with ROOT master:; ```c++; vector<ROOT::RDF::RResultPtr<TH1D>> pointer_not_allocated_error(){; // Create a data frame with 100 rows; ROOT::RDataFrame rdf(100);. // Define a new column `x` that contains random numbers and create a histogram; ROOT::RDF::RResultPtr<TH1D> h = rdf.Define(""x"", [](){ return gRandom->Rndm(); }).Histo1D(""x"");. // Add the histogram to a vector; vector<ROOT::RDF::RResultPtr<TH1D>> histograms;; histograms.push_back(h);. // Attempt to throw an error; throw std::runtime_error(""intended error throw for debugging"");. return histograms;; }; ```. ### Additional context; For additional context see https://root-forum.cern.ch/t/pointer-not-allocated-when-adding-rresultptr-to-vector/51831/2. Interesting part of the gdb backtrace follows (thanks @eguiraud!):; ```; >>> bt; #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at pthread_kill.c:44; #1 0x00007ffff72a1503 in __pthread_kill_internal (signo=6, threadid=<optimized out>) at pthread_kill.c:78; #2 0x00007ffff7251958 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26; #3 0x00007ffff723b53d in __GI_abort () at abort.c:79; #4 0x00007ffff729563e in __libc_message (action=action@entry=do_abort, fmt=f",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11494:445,depend,dependent,445,https://root.cern,https://github.com/root-project/root/issues/11494,1,['depend'],['dependent']
Integrability,"- [X] Checked for duplicates. ### Describe the bug; The source code build fails at build target G__Gviz3d with the following error messages:; ```; [ 96%] Built target G__Gviz3d; [ 96%] Building CXX object graf3d/gviz3d/CMakeFiles/Gviz3d.dir/src/TStructNodeEditor.cxx.o; In file included from /opt/local/HEA/root/root-6.26.00/graf3d/gviz3d/src/TStructNodeEditor.cxx:21:; /opt/local/HEA/root/root-6.26.00/core/meta/inc/TClass.h:242:4: error: ‘ClassConvStreamerFunc_t’ does not name a type; did you mean ‘ClassStreamerFunc_t’?; 242 | ClassConvStreamerFunc_t fConvStreamerFunc; //Wrapper around this class custom conversion Streamer member function.; | ^~~~~~~~~~~~~~~~~~~~~~~; | ClassStreamerFunc_t; /opt/local/HEA/root/root-6.26.00/core/meta/inc/TClass.h:272:12: error: ‘Longptr_t’ does not name a type; did you mean ‘Long64_t’?; 272 | mutable Longptr_t fOffsetStreamer; //!saved info to call Streamer; | ^~~~~~~~~; | Long64_t; /opt/local/HEA/root/root-6.26.00/core/meta/inc/TClass.h:289:23: error: expected ‘;’ at end of member declaration; 289 | TMethod *GetClassMethod(Longptr_t faddr);; | ^~~~~~~~~~~~~~; | ;; /opt/local/HEA/root/root-6.26.00/core/meta/inc/TClass.h:289:47: error: expected ‘)’ before ‘faddr’; 289 | TMethod *GetClassMethod(Longptr_t faddr);; | ~ ^~~~~~; | ); /opt/local/HEA/root/root-6.26.00/core/meta/inc/TClass.h:387:63: error: ‘Longptr_t’ has not been declared; 387 | void BuildEmulatedRealData(const char *name, Longptr_t offset, TClass *cl, Bool_t isTransient = kFALSE);; | ^~~~~~~~~; /opt/local/HEA/root/root-6.26.00/core/meta/inc/TClass.h:413:105: error: ‘TMethod* TClass::GetClassMethod(const char*, const char*, Bool_t)’ conflicts with a previous declaration; 413 | TMethod *GetClassMethod(const char *name, const char *params, Bool_t objectIsConst = kFALSE);; | ^; /opt/local/HEA/root/root-6.26.00/core/meta/inc/TClass.h:289:23: note: previous declaration ‘TMethod* TClass::GetClassMethod’; 289 | TMethod *GetClassMethod(Longptr_t faddr);; | ^~~~~~~~~~~~~~; /opt/local/HEA",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10155:131,message,messages,131,https://root.cern,https://github.com/root-project/root/issues/10155,2,"['Wrap', 'message']","['Wrapper', 'messages']"
Integrability,"- [X] Checked for duplicates. ### Describe the bug; When i create a `RooDataSet` from a numpy array using `RooDataSet.from_numpy` the values are ""clipped"" to the range of the `RooRealVar` (setting values outside the bounds to the values at the boundary). probably caused by this code:; https://github.com/root-project/root/blob/e4e8e62c2a04bd5c167b69118bf1afba7b35081b/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py#L101-L102. ### Expected behavior; I think it should instead skip events outside of the range. When i import a TTree instead events will be skipped. ### To Reproduce; ```python; import ROOT; import numpy as np; x = ROOT.RooRealVar(""x"", """", 2, 5); rds = ROOT.RooDataSet.from_numpy({""x"": np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])}, [x]); list(rds.store().realStoreList().data().data()); ```; gives me; ```; [2.0, 2.0, 3.0, 4.0, 5.0, 5.0, 5.0, 5.0, 5.0]; ```; Compared to the TTree version:; ```python; ROOT.RDF.MakeNumpyDataFrame({""x"": np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])}).Snapshot(""tree"", ""npdf.root""); f = ROOT.TFile.Open(""npdf.root""); tree = f.Get(""tree""); rds = ROOT.RooDataSet("""", """", [x], ROOT.RooFit.Import(tree)); list(rds.store().realStoreList().data().data()); ```; gives me; ```; [2.0, 3.0, 4.0, 5.0]; ```. ### Setup; ```; ROOT Version: 6.26/00; Built for linuxx8664gcc on Mar 03 2022, 06:51:13; From tags/v6-26-00@v6-26-00; ```; installed on archlinux with pacman. ### Additional context; Thanks a lot for creating these pythonizations! I think this is really nice, making pyROOT interoperable with the rest of the python ecosystem!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10447:1538,interoperab,interoperable,1538,https://root.cern,https://github.com/root-project/root/issues/10447,1,['interoperab'],['interoperable']
Integrability,"- [X] Checked for duplicates. ### Describe the bug; `valgrind ... --suppressions=etc/valgrind-root.supp tree/dataframe/test/dataframe_concurrency` gives. ```; ==30221== Conditional jump or move depends on uninitialised value(s); ==30221== at 0x9D14829: (anonymous namespace)::DAGCombiner::visitOR(llvm::SDNode*) (in /home/axel/build/root/24/rel/lib/libCling.so); ==30221== by 0x9D4BF24: (anonymous namespace)::DAGCombiner::visit(llvm::SDNode*) (in /home/axel/build/root/24/rel/lib/libCling.so); ==30221== by 0x9D4D13E: (anonymous namespace)::DAGCombiner::combine(llvm::SDNode*) (in /home/axel/build/root/24/rel/lib/libCling.so); ==30221== by 0x9D4EA0D: llvm::SelectionDAG::Combine(llvm::CombineLevel, llvm::AAResults*, llvm::CodeGenOpt::Level) (in /home/axel/build/root/24/rel/lib/libCling.so); ==30221== by 0x9E2B521: llvm::SelectionDAGISel::CodeGenAndEmitDAG() (in /home/axel/build/root/24/rel/lib/libCling.so); ==30221== by 0x9E2F293: llvm::SelectionDAGISel::SelectAllBasicBlocks(llvm::Function const&) (in /home/axel/build/root/24/rel/lib/libCling.so); ==30221== by 0x9E3214B: llvm::SelectionDAGISel::runOnMachineFunction(llvm::MachineFunction&) [clone .part.0] (in /home/axel/build/root/24/rel/lib/libCling.so); ==30221== by 0x98D5399: (anonymous namespace)::X86DAGToDAGISel::runOnMachineFunction(llvm::MachineFunction&) (in /home/axel/build/root/24/rel/lib/libCling.so); ==30221== by 0x9FE37CA: llvm::MachineFunctionPass::runOnFunction(llvm::Function&) (in /home/axel/build/root/24/rel/lib/libCling.so); ==30221== by 0xB1BAA47: llvm::FPPassManager::runOnFunction(llvm::Function&) (in /home/axel/build/root/24/rel/lib/libCling.so); ==30221== by 0xB1BAAD0: llvm::FPPassManager::runOnModule(llvm::Module&) (in /home/axel/build/root/24/rel/lib/libCling.so); ==30221== by 0xB1B9A9F: llvm::legacy::PassManagerImpl::run(llvm::Module&) (in /home/axel/build/root/24/rel/lib/libCling.so); ==30221== by 0x965F899: llvm::orc::SimpleCompiler::operator()(llvm::Module&) (in /home/axel/build/root/24/rel/lib/li",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8899:194,depend,depends,194,https://root.cern,https://github.com/root-project/root/issues/8899,1,['depend'],['depends']
Integrability,"- [X] Checked for duplicates. With CMake >= 3.24 we get; ```; .../LZMA-prefix/src/LZMA-stamp/LZMA-build-Release.cmake:49 (message):; Command failed: 2. 'make'. See also. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-*.log; ```; which has; ```; WARNING: 'aclocal-1.15' is missing on your system.; You should only need it if you modified 'acinclude.m4' or; 'configure.ac' or m4 files included by 'configure.ac'.; The 'aclocal' program is part of the GNU Automake package:; <http://www.gnu.org/software/automake>; It also requires GNU Autoconf, GNU m4 and Perl in order to run:; <http://www.gnu.org/software/autoconf>; <http://www.gnu.org/software/m4/>; <http://www.perl.org/>; make: *** [Makefile:514: aclocal.m4] Error 127; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11743:122,message,message,122,https://root.cern,https://github.com/root-project/root/issues/11743,1,['message'],['message']
Integrability,"- [X] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->. `GetLeaf(branchname, leafname)` seems to ignore the `branchname` argument if friend trees are present -- or in any case, it returns a non-null pointer even for a bogus `branchname` argument, but only if friend trees are present. Note that depending on the situation this might result in wrong data being read. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. `GetLeaf(branchname, leafname)` should return the same pointer whether a friend tree is present or not. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. ```cpp; #include <TFile.h>; #include <TTree.h>; #include <iostream>. int main() {; {; TFile f(""f.root"", ""recreate"");; TTree t(""t"", ""t"");; int x = 42;; t.Branch(""x"", &x);; t.Fill();; t.Write();; }. TFile f(""f.root"");; auto *t = f.Get<TTree>(""t"");; std::cout << t->GetLeaf(""asdklj"", ""x"") << '\n'; // prints 0 as expected. TFile f2(""f.root"");; auto *t2 = f2.Get<TTree>(""t"");; t->AddFriend(t2);; std::cout << t->GetLeaf(""asdklj"", ""x"") << '\n'; // prints the address of leaf `x`, unexpected. return 0;; }; ```. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->. I am using master@a7cceb7478e . ### Additional context; <!--; Add any other context about",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6964:697,depend,depending,697,https://root.cern,https://github.com/root-project/root/issues/6964,1,['depend'],['depending']
Integrability,"- [X] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; Creating a branch in `TTree` with type `std::vector<A>` raises an internal error in ROOT, when class `A` inherits from a class that uses the old I/O system. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; Branch should be created successfully (I don't know if this behavior is supposed to be supported) or ROOT should abort with a more descriptive error message. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; Compile and run the following macro with `root -l -b -q T.C+`:; ```C++; #include <vector>; #include ""TTree.h"". #pragma link C++ class A;; #pragma link C++ class B+;; #pragma link C++ class std::vector<B>+;. struct A {; int x;; ClassDef(A, 1);; };; ClassImp(A);. struct B : A {; int y;; ClassDef(B, 1);; };; ClassImp(B);. void T() {; TTree* tree = new TTree(""T"", ""T"");; std::vector<B> bvec;; tree->Branch(""B"", &bvec);; }; ```; Macro aborts with the error: ; ```Fatal in <TBranchElement::InitializeOffsets>: Could not find the real data member 'B' when constructing the branch 'B' [Likely an internal error, please report to the developers].```. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; 1. ROOT version: 6.22.08 (built myself), 6.26.00 (",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10240:863,message,message,863,https://root.cern,https://github.com/root-project/root/issues/10240,1,['message'],['message']
Integrability,"- [check ] Checked for duplicates; ### Describe the bug. With regard to the file; **interpreter/CMakeLists.txt**; commit 408de13e131818a3620ce44a7341892f4bdfc420; moved the line ; `get_directory_property(LLVM_DEFS DIRECTORY llvm/src COMPILE_DEFINITIONS)`; from inside; `if (builtin_llvm)`; to inside; `if (builtin_cling)`. Error looks like: . CMake Error at interpreter/CMakeLists.txt:452 (get_directory_property):; get_directory_property DIRECTORY argument provided but requested directory; not found. This could be because the directory argument was invalid or, it; is valid but has not been processed yet. ### Expected behavior; The previous method of handling this was to simply skip this procedure. The compile flags from the external LLVM would not be appended to CLING compile flags. The new logic always checks for this dir even if llvm is external. As a result, it no longer works with my external LLVM, which doesn't have a copy of the /src directory in its installation dir. My build system removes the source trees and build dirs to save space on disk. LLVM install dir does contain cmakefiles under lib/cmake/ and those were used to identify it correctly. . ### To Reproduce. ### Setup; obtained root from https://root.cern.ch/download/root_v6.24.00.source.tar.gz. ### Additional context; I am building with cmake and I have builtin_llvm OFF but builtin_cling ON because the internet told me I am not allowed to use my own cling, I have to use the one with root-patches. I am trying very hard to not use the builtin_llvm because it clashes with the other builds on my system so root either fails to build or just crashes, depending on the version. I am an easybuilder and if I can get this to work, lots of other easybuilders will be able to replicate my procedure and build ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8141:1635,depend,depending,1635,https://root.cern,https://github.com/root-project/root/issues/8141,1,['depend'],['depending']
Integrability,"- [x ] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; `sudo root --notebook --log-level 10 --allow-root` works; `root --notebook --log-level 10` does not, jupyter is trying to reconnect to the kernel every few seconds.; There is no helpful debug output. For debugging I put some print statements around that line but that doesn't help much:; `/usr/lib/python3.8/site-packages/JupyROOT/kernel/rootkernel.py`; and noticed that the kernel freezes on line 57:; `MetaKernel.__init__(self,**kwargs)`. With sudo it does not freeze. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; 1. ROOT Version: 6.22/02; 2. arch linux; 3. I tried both the package manager version and the [manual installation](https://root.cern/install). I also gave miniconda and anaconda a try but both don't work for ROOT because of dependency conflicts. The python kernel works flawlessly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6608:1306,depend,dependency,1306,https://root.cern,https://github.com/root-project/root/issues/6608,1,['depend'],['dependency']
Integrability,"- [x] Checked for duplicates. ### Describe the bug. ROOT overrides CMake's `find_package` in `cmake/modules/SearchInstalledSoftware.cmake`, which is not uncommon, but relies on undocumented behavior of CMake. See e.g.: https://crascit.com/2018/09/14/do-not-redefine-cmake-commands/. This however breaks other tools, that also rely on this behavior, resulting in an infinite recursion. My concrete example is vcpkg, a popular package manager (not only for Windows), that pulls itself into a CMake project via a toolchain file to inject dependencies. Unfortunately, vcpkg needs to hook `find_package` itself to point it to the installed dependencies. ### Expected behavior. ROOT can be configured with vcpkg and other tools sensitive to overriden `find_package`. This requires ROOT to not override `find_package`. ### To Reproduce. Clone ROOT, create `build_win` folder, run:; ```; PS C:\dev\root\build_win> cmake -DCMAKE_TOOLCHAIN_FILE=D:\dev\vcpkg\scripts\buildsystems\vcpkg.cmake ..; -- Building for: Visual Studio 16 2019; -- Selecting Windows SDK version 10.0.19041.0 to target Windows 10.0.19042.; -- The C compiler identification is MSVC 19.29.30037.0; -- The CXX compiler identification is MSVC 19.29.30037.0; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30037/bin/Hostx64/x64/cl.exe - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30037/bin/Hostx64/x64/cl.exe - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Git: C:/Program Files/Git/cmd/git.exe (found version ""2.30.0.windows.2""); -- Detected ROOT_VERSION 6.25.01; -- Looking for Python; -- Could NOT find Python3 (mi",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8633:528,inject,inject,528,https://root.cern,https://github.com/root-project/root/issues/8633,3,"['depend', 'inject']","['dependencies', 'inject']"
Integrability,"- [x] Checked for duplicates. ### Describe the bug. The `ROOTVecOps` library incorrectly declares a `PRIVATE` dependency on the VDT headers. https://github.com/root-project/root/blob/master/math/vecops/CMakeLists.txt#L27. (To be correct, it declares its dependency on VDT in a very silly way that does not make any sense to me...). Even though it clearly ""publicly"" depends on those headers. https://github.com/root-project/root/blob/master/math/vecops/inc/ROOT/RVec.hxx#L54. ### Expected behavior. When using the exported target `ROOT::ROOTVecOps`, I would expect to be able to use `RVec.hxx` just by linking my own target against `ROOT::ROOTVecOps`. Not having to care about the ""internal"" dependency of the ROOT code on VDT myself. To fix, the following should happen:; - VDT should be used in the ROOT CMake configuration through an imported target, not through `${VDT_INCLUDE_DIRS}` and `${VDT_LIBRARIES}`. (Since these make relocation very hard.); - Once `ROOTVecOps` depends on a library like `VDT::vdt`, `ROOTConfig.cmake.in` will need to include. ```cmake; find_dependency(VDT); ```. somewhere around here: https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in#L88-L99. In such a setup, as long as `builtin_vdt` is ""correctly"" installed alongside ROOT, the configuration should start becoming correct under all circumstances. ### To Reproduce. Don't really have a reproducer. But a CMake project like:. ```cmake; cmake_minimum_required( VERSION 3.10 ); project( VecOpsTest ). find_package( ROOT REQUIRED ). add_executable( VecOpsTest VecOpsText.cpp ); target_link_libraries( VecOpsTest PRIVATE ROOT::ROOTVecOps ); ```. , with a simple. ```c++; #include <ROOT/RVec.hxx>. int main() { return 0; }; ```. (as `VecOpsTest.cpp`) should be able to produce an error. As long as ROOT and VDT headers are not in the same location. Which is usually the case unfortunately... ### Setup. This is primarily an issue with ""LCG builds"" of ROOT. Where currently we have to manuall",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11797:110,depend,dependency,110,https://root.cern,https://github.com/root-project/root/issues/11797,5,['depend'],"['dependency', 'depends']"
Integrability,"- [x] Checked for duplicates. ### Describe the bug. tutorial-tree-drawsparse fails on s390x. ### Expected behavior. No failure. ### To Reproduce. Steps to reproduce the behavior:; 1. Build root for 6.28.00 on s390x; 2. Run unit tests. ### Setup. 1. ROOT version: 6.28.00; 2. Operating system: Fedora Linux s390x, RHEL+EPEL s390x; 3. How you obtained ROOT: build from source. ### Additional context. Output from failing test:; ~~~; 1008/1272 Test #1006: tutorial-tree-drawsparse ................................\; ............***Failed 0.97 sec; Processing /builddir/build/BUILD/root-6.28.00/tutorials/tree/drawsparse.C...; /usr/include/c++/13/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = double; _Alloc = std::allocator<double>; reference = double&; size_type = long unsigned int]: Assertion '__n < this->size()' failed.; CMake Error at /builddir/build/BUILD/root-6.28.00/redhat-linux-build/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ~~~",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12431:992,message,message,992,https://root.cern,https://github.com/root-project/root/issues/12431,1,['message'],['message']
Integrability,- [x] Checked for duplicates. ### Describe the bug; Builtin TBB has broken on MacOS M1 (reported [here](https://root-forum.cern.ch/t/help-on-compile-root-on-new-arm-macbook/42495/7)); ```; CMake Error at /Users/fermi/dev/root/build/TBB-prefix/src/TBB-stamp/TBB-build-Release.cmake:49 (message):; Command failed: 2; ‘make’ ‘compiler=clang’ ‘cpp0x=1’ ‘CXXFLAGS= -mno-rtm -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.0.sdk’ ‘CPLUS=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++’ ‘CONLY=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc’ ‘LDFLAGS= -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.0.sdk’; See also; /Users/fermi/dev/root/build/TBB-prefix/src/TBB-stamp/TBB-build-*.log; make[2]: *** [TBB-prefix/src/TBB-stamp/TBB-build] Error 1; make[1]: *** [CMakeFiles/TBB.dir/all] Error 2; make: *** [all] Error [2](url); ```; with:; ```; unknown/unsupported architecture name for: -arch armv4t; ```. ### Available patch; https://github.com/oneapi-src/oneTBB/pull/258. ### Setup; ROOT on MacOS M1,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6903:285,message,message,285,https://root.cern,https://github.com/root-project/root/issues/6903,1,['message'],['message']
Integrability,"- [x] Checked for duplicates. ### Describe the bug; CMake EXPORT sets should only reference targets which are required for building dependent packages, not every auxiliary tool. I.e.:; 1. Libraries (implies corresponding headers); 2. Tools like code generators, preprocessors ... If a tool may be invoked by a dependent project during build, include it in the export set, otherwise, leave it out. ### Expected behavior; Only minimal set of programs is referenced by the `ROOTConfig-targets*cmake` file. E.g. `hadd` should not be exported, but it is: ; `list(APPEND _cmake_import_check_files_for_ROOT::hadd ""${_IMPORT_PREFIX}/bin/hadd"" )`. Currently, the following binaries are exported:; ```; ""${_IMPORT_PREFIX}/bin/hadd""; ""${_IMPORT_PREFIX}/bin/hist2workspace""; ""${_IMPORT_PREFIX}/bin/proofserv.exe""; ""${_IMPORT_PREFIX}/bin/rmkdepend""; ""${_IMPORT_PREFIX}/bin/root""; ""${_IMPORT_PREFIX}/bin/rootcling""; ""${_IMPORT_PREFIX}/bin/root.exe""; ""${_IMPORT_PREFIX}/bin/rootnb.exe""; ""${_IMPORT_PREFIX}/bin/rootn.exe""; ""${_IMPORT_PREFIX}/bin/roots.exe""; ""${_IMPORT_PREFIX}/bin/xpdtest""; ```. ROOT already has the `CMAKENOEXPORT` parameter to support this with `ROOT_EXECUTABLE`. ### To Reproduce; `cmake; make; make install`. ### Setup; 1. ROOT version: 6.26.06; 2. Operating system: Linux",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11448:132,depend,dependent,132,https://root.cern,https://github.com/root-project/root/issues/11448,2,['depend'],['dependent']
Integrability,"- [x] Checked for duplicates. ### Describe the bug; Calling `Display` on an RDataFrame created from an RNTuple that contains user-defined classes causes ROOT to crash with an error message `No on-disk column information for for field X`, where `X` is a data member of the class in question. Other methods appear to be working correctly, as well as explicitly specifying which data member should be read (i.e. `df.Display({""electrons.pt""})`). ### Expected behavior; Nothing crashes and an `RDisplay` object is returned. ### To Reproduce; Minimal reproducer:; ```c++; #include <ROOT/RDataFrame.hxx>; #include <ROOT/RNTuple.hxx>; #include <ROOT/RNTupleDS.hxx>; #include <ROOT/RNTupleModel.hxx>. #include <iostream>. using ROOT::Experimental::RNTupleModel;; using ROOT::Experimental::RNTupleWriteOptions;; using ROOT::Experimental::RNTupleWriter;. const std::string kNTupleName = ""N"";; const std::string kNTupleFileName = ""ntuple_electrons.root"";. struct Electron {; float pt = 0;; };. void write() {; auto model = RNTupleModel::Create();; auto fldElectrons = model->MakeField<Electron>(""electrons"");. auto ntuple = RNTupleWriter::Recreate(std::move(model), kNTupleName, kNTupleFileName);. fldElectrons->pt = 42.;; ntuple->Fill();; }. void read() {; auto df = ROOT::RDF::Experimental::FromRNTuple(kNTupleName, kNTupleFileName);; auto dfDef = df.Define(""ptSquared"", ""electrons.pt * electrons.pt"");. dfDef.Describe().Print();. auto dfDisp = df.Display();; dfDisp->Print();; }. void ntuple_rdf_custom_class() {; write();; read();; }; ``` . ### Setup; 1. ROOT version: master; 2. Operating system: Ubuntu 22",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12852:181,message,message,181,https://root.cern,https://github.com/root-project/root/issues/12852,1,['message'],['message']
Integrability,"- [x] Checked for duplicates. ### Describe the bug; Configuring with `-DCUDA=ON` leads to; ```; -- Detecting CUDA compile features; -- Detecting CUDA compile features - done; CMake Warning (dev) at /opt/cmake-3.19/share/cmake-3.19/Modules/FindPackageHandleStandardArgs.cmake:426 (message):; The package name passed to `find_package_handle_standard_args` (CUDNN) does; not match the name of the calling package (CuDNN). This can lead to; problems in calling code that expects `find_package` result variables; (e.g., `_FOUND`) to follow a certain pattern.; Call Stack (most recent call first):; cmake/modules/FindCuDNN.cmake:40 (find_package_handle_standard_args); cmake/modules/SearchInstalledSoftware.cmake:17 (_find_package); cmake/modules/SearchInstalledSoftware.cmake:1669 (find_package); CMakeLists.txt:219 (include); This warning is for project developers. Use -Wno-dev to suppress it. -- Found CUDNN: /usr/include ; -- Found cuDNN: v? (include: /usr/include, library: /usr/lib64/libcudnn.so); ```. ### Expected behavior; Don't warn. ### To Reproduce; `cmake -Dcuda=ON <src>`. ### Setup; - centos8; - cuda 11.3 installed via yum.; - Manos' master branch. It branched off from master on 22. Jun @ d026b4918a . ### Additional context; --",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8537:280,message,message,280,https://root.cern,https://github.com/root-project/root/issues/8537,1,['message'],['message']
Integrability,"- [x] Checked for duplicates. ### Describe the bug; If the external nhlohman json is used ROOT an error occurs if ROOTEve is used; ```; CMake Error at cmake/DD4hepBuild.cmake:625 (add_library):; Target ""DDEvePlugins"" links to target ""nlohmann_json::nlohmann_json"" but; the target was not found. Perhaps a find_package() call is missing for an; IMPORTED target, or an ALIAS target is missing?; Call Stack (most recent call first):; DDEve/CMakeLists.txt:43 (dd4hep_add_plugin); ```; (original discovery via lcg nightlies in DD4hep package build on top of root master. ### Expected behavior. ROOT targets resolve all their dependencies so that other CMake projects can use them without error or change to their cmake; `Find_dependency` added to e.g., ROOTConfig.cmake; or; this needs to be PRIVATE ?; https://github.com/linev/root/blob/88bdfd736f0b859b40973c457b75df9c73b0bbaf/graf3d/eve7/CMakeLists.txt#L139. ### To Reproduce; have a project with a library linking against ROOTEve; Assuming `cmake` is in the PATH (compiler and OS shouldn't matter); ```bash; wget http://lcgpackages.web.cern.ch/lcgpackages/tarFiles/latest/ROOT-HEAD_db894-x86_64-centos7-gcc8-opt.tgz; tar xzf ROOT-HEAD_db894-x86_64-centos7-gcc8-opt.tgz; mkdir test; cd test; cat > CMakeLists.txt <<EOF; CMAKE_MINIMUM_REQUIRED(VERSION 3.12 FATAL_ERROR); PROJECT(myeve); find_package(ROOT REQUIRED); add_library(myeve SHARED myeve.cpp); TARGET_LINK_LIBRARIES(myeve ROOT::ROOTEve); EOF. cat > myeve.cpp <<EOF; int main (); {; return 1;; }; EOF; mkdir build; cd build. # assuming cmake is in the path; cmake -D ROOT_DIR=${PWD}/../../ROOT/HEAD/x86_64-centos7-gcc8-opt/cmake ..; ```. gives; ```; CMake Error at CMakeLists.txt:4 (add_library):; Target ""myeve"" links to target ""nlohmann_json::nlohmann_json"" but the; target was not found. Perhaps a find_package() call is missing for an; IMPORTED target, or an ALIAS target is missing?; ```. ### Setup. 1. ROOT master, `cmake ... -Dbuiltin_nlohmannjson=OFF ....`; 2. centos7; 3. build with LCGC",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6784:620,depend,dependencies,620,https://root.cern,https://github.com/root-project/root/issues/6784,1,['depend'],['dependencies']
Integrability,"- [x] Checked for duplicates. ### Describe the bug; In TMVA documentation at ; https://root.cern/doc/master/group__TMVA.html; there is a link ""The full description of the Multi Variate Analysis package"", which leads to ; http://tmva.sourceforge.net/. On that site it's written: ""In 2013, TMVA was completely integrated into ROOT and is now released as part of it. The new official home can be found at the ROOT website (here). "", where the link ""here"" leads to; https://root.cern/tmva/; which doesn't exist. The same link is in TMVA's sourceforge page as ""Project Page"". Also I note that in the [TMVA Reference guide](https://root.cern/doc/master/group__TMVA.html) there are links to ; The TMVA Users Guide.; The TMVA Options Reference,; that all lead to sourceforge.net (and they are both broken). Probably they should be moved to root.cern?. ### Expected behavior; If the sourceforge link should be deleted, remove that. If it is relevant, then please fix the link to root.cern there or the page at root.cern/tmva .",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7627:308,integrat,integrated,308,https://root.cern,https://github.com/root-project/root/issues/7627,1,['integrat'],['integrated']
Integrability,"- [x] Checked for duplicates. ### Describe the bug; In the ROOT prompt, `.?` prints a slightly outdated help message. Both the Cling-specific part (MetaSema) and the ROOT-specific special commands (TApplication) need revision. ### Expected behavior; All options are documented, and outdated ones are removed. - [x] Update accordingly in https://github.com/root-project/web/blob/main/manual/cling/index.md; - [x] Copy resulting output to https://github.com/root-project/web/blob/main/manual/first_steps_with_root/index.md; - [x] https://github.com/root-project/NotebookPrimer/blob/master/notebooks/2-ROOT-Basics.ipynb; - [x] .![shell]; - [x] .qqqqq; - [x] "" "" << metaString << ""R [user@]host[:dir] [-l user] [-d dbg] [script]\t- Launch process in a remote host\n""; - [x] "" "" << metaString << ""demo\t- Launch GUI demo\n""; - [x] "" "" << metaString << ""credits\t- Show credits\n""; - [x] "" "" << metaString << ""license\t- Show license\n""; - [x] CTRL+D also works as a way to exit; - [x] CTRL+C can interrupt; - [x] CTRL+Z pauses job; - [x] CTRL+L clear screen; - [x] CTRL+Del Ctrl Left Ctrl Right Ctrol Backspace https://github.com/root-project/root/pull/10091; - [x] CTRL+S for forward search https://github.com/root-project/root/issues/10137; - [x] .exit; - [x] .quit; - [x] .typedef; - [x] .include; - [x] Specify also a new command, e.g. .flags, to show ; - [x] .undo / .U to unload the last n input lines doesn't seem to work; - [x] .O1 to set the optimization level is implemented even if .help says it's not; - [x] Translate 0x1F code etc to key name; - [x] Clarify what .files and .fileEx and .stats mean. ### To Reproduce; `.?`. ### Setup; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jan 12 2022, 10:17:19 |; | From heads/master@v6-25-01-2870-gdac9b6398d |; | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |; | Try '.help', '",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10065:109,message,message,109,https://root.cern,https://github.com/root-project/root/issues/10065,1,['message'],['message']
Integrability,"- [x] Checked for duplicates. ### Describe the bug; We are [testing](https://github.com/cms-sw/cmsdist/pull/8020) latest [ROOT changes](https://github.com/root-project/root/compare/cd992545ae...6018b5fd45) in CMSSW, and we are getting the following build error:; ```; from /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_12_5_ROOT6_X_2022-08-14-2300/src/PhysicsTools/Utilities/interface/RooFitFunction.h:3,; from /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_12_5_ROOT6_X_2022-08-14-2300/src/PhysicsTools/Utilities/test/testRooFitFunction.cpp:1:; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc10/external/gcc/10.3.0-84898dea653199466402e67d73657f10/include/c++/10.3.0/bits/stl_pair.h: In instantiation of 'constexpr std::pair::type>::__type, typename std::__strip_reference_wrapper::type>::__type> std::make_pair(_T1&&, _T2&&) [with _T1 = std::shared_ptr; _T2 = RooTemplateProxy; typename std::__strip_reference_wrapper::type>::__type = RooTemplateProxy; typename std::__strip_reference_wrapper::type>::__type = std::shared_ptr]':; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_12_5_ROOT6_X_2022-08-14-2300/src/PhysicsTools/Utilities/interface/RooFitFunction.h:56:37: required from 'root::RooFitFunction::RooFitFunction(const char*, const char*, const Expr&, RooAbsReal&, RooAbsReal&, funct::Parameter&, RooAbsReal&, funct::Parameter&, RooAbsReal&, funct::Parameter&) [with X = funct::X; Expr = funct::Expression]'; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/CMSSW_12_5_ROOT6_X_2022-08-14-2300/src/PhysicsTools/Utilities/test/testRooFitFunction.cpp:30:77: required from here; /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc10/external/gcc/10.3.0-84898dea653199466402e67d73657f10/include/c++/10.3.0/bits/stl_pair.h:572:14: error: no matching function for call to 'std::pair, RooTemplateProxy >::pair(std::shared_ptr, RooTemplateProxy)'; 572 | return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));; | ^~~~~~~~~~~~",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11188:382,interface,interface,382,https://root.cern,https://github.com/root-project/root/issues/11188,2,['interface'],['interface']
Integrability,"- [x] Checked for duplicates. ### Describe the bug; When compiling with GCC c++ 4.8.5, GoogleTest fails to build. A sample of messages:. ```; In file included from /user/pbos/project_atlas/root-20211202/cmake-build-release/googletest-prefix/src/googletest/googletest/include/gtest/internal/gtest-death-test-internal.h:39:0,; from /user/pbos/project_atlas/root-20211202/cmake-build-release/googletest-prefix/src/googletest/googletest/include/gtest/gtest-death-test.h:41,; from /user/pbos/project_atlas/root-20211202/cmake-build-release/googletest-prefix/src/googletest/googletest/include/gtest/gtest.h:64,; from /user/pbos/project_atlas/root-20211202/cmake-build-release/googletest-prefix/src/googletest/googletest/src/gtest-all.cc:38:; /user/pbos/project_atlas/root-20211202/cmake-build-release/googletest-prefix/src/googletest/googletest/include/gtest/gtest-matchers.h: In static member function ‘static constexpr bool testing::internal::MatcherBase<T>::IsInlined()’:; /user/pbos/project_atlas/root-20211202/cmake-build-release/googletest-prefix/src/googletest/googletest/include/gtest/gtest-matchers.h:414:12: error: ‘is_trivially_copy_constructible’ is not a member of ‘std’; std::is_trivially_copy_constructible<M>::value &&; ^; /user/pbos/project_atlas/root-20211202/cmake-build-release/googletest-prefix/src/googletest/googletest/include/gtest/gtest-matchers.h:414:50: error: expected primary-expression before ‘>’ token; std::is_trivially_copy_constructible<M>::value &&; ^; /user/pbos/project_atlas/root-20211202/cmake-build-release/googletest-prefix/src/googletest/googletest/include/gtest/gtest-matchers.h:414:51: error: ‘::value’ has not been declared; std::is_trivially_copy_constructible<M>::value &&; ^; ```; There is more, but I think this already indicates that one of the issues is the GCC version, since `is_trivially_copy_constructible` is available from GCC 5. ### Expected behavior; CMake should not configure successfully on GCC versions below 5 when configuring with `-Dtesting=",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9370:126,message,messages,126,https://root.cern,https://github.com/root-project/root/issues/9370,1,['message'],['messages']
Integrability,"- [x] Checked for duplicates. ### Describe the bug; When root fails to load the dictionary payload it used to give a clear message that a header file couldn't be included.; ```; In file included from G__DDG4 dictionary payload:445:; In file included from /cvmfs/sft.cern.ch/lcg/views/LCG_97a_FCC_2/x86_64-centos7-gcc8-opt/include/DDG4/Geant4Config.h:100:; /cvmfs/sft.cern.ch/lcg/views/LCG_97a_FCC_2/x86_64-centos7-gcc8-opt/include/DDG4/Geant4TrackingAction.h:18:10: fatal error: 'G4VUserTrackInformation.hh' file not found; #include ""G4VUserTrackInformation.hh""; ^~~~~~~~~~~~~~~~~~~~~~~~~~~~; Error in <TInterpreter::AutoParse>: Error parsing payload code for class dd4hep::sim::KernelHandle with content:; ```; See full [error.txt](https://github.com/root-project/root/files/5517699/error.txt). But with the root master or 6.22.00, there is only; ```; Error in <TInterpreter::AutoParse>: Error parsing payload code for class dd4hep::sim::KernelHandle with content:. #line 1 ""G__DDG4 dictionary payload""; ```; In both cases followed by the rest of the ""dictionary payload"", see attached . [error98.txt](https://github.com/root-project/root/files/5517700/error98.txt); [errorDev.txt](https://github.com/root-project/root/files/5517701/errorDev.txt). The solution to the parsing of the paylog in both cases is the same, adding the Geant4 header location to ROOT_INCLUDE_PATH, this is understood. But the message about the missing header file should still be printed, when it cannot be found, shouldn't it?; Running the command with `strace` let's one see that it fails to find the Geant4 headers. ### Expected behavior; Print the ""file not found"" message. ### To Reproduce; This gives the error message, but of course is nothing to see if the problem is solved:; ```; source /cvmfs/sft.cern.ch/lcg/views/LCG_98/x86_64-centos7-gcc8-opt/setup.sh; ddsim --compactFile ${DD4hepINSTALL}/DDDetectors/compact/SiD.xml -N 2 -G --gun.particle pi+ --outputFile my.root; ```. This is for the environment that still ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6791:123,message,message,123,https://root.cern,https://github.com/root-project/root/issues/6791,1,['message'],['message']
Integrability,"- [x] Checked for duplicates. Maybe related: #7063. ### Describe the bug; ROOT fails to link TBB on Ubuntu 22.10. ### Expected behavior; Successful build. ### To Reproduce; 1. git clone ROOT; 2. `cmake`; 3. `make`. ### Setup; 1. ROOT master 487e1fcffb49242ee9029685435f67e610628a57; 2. Ubuntu 22.10; 3. installed all dependencies according to [here](https://root.cern/install/dependencies/); 4. installed `libtbb-dev`, which is not listed in the required dependencies.; ```; bgruber@graviola:~/dev/root$ apt list --installed | grep tbb. WARNING: apt does not have a stable CLI interface. Use with caution in scripts. libtbb-dev/kinetic,now 2021.5.0-15ubuntu1 amd64 [installed]; libtbb12/kinetic,now 2021.5.0-15ubuntu1 amd64 [installed,automatic]; libtbbbind-2-5/kinetic,now 2021.5.0-15ubuntu1 amd64 [installed,automatic]; libtbbmalloc2/kinetic,now 2021.5.0-15ubuntu1 amd64 [installed,automatic]; ```. ### cmake cache; ```; TBB_BINARY_DIR ; TBB_INCLUDE_DIR /usr/include ; TBB_LIBRARY /usr/local/lib/libtbb.so; TBB_LIBRARY_DEBUG TBB_LIBRARY_DEBUG-NOTFOUND ; TBB_LIBRARY_RELEASE /usr/local/lib/libtbb.so; TBB_ROOT_DIR /usr; ```. ### make output:; ```; [ 51%] Linking CXX shared library ../../lib/libImt.so; /usr/bin/ld: CMakeFiles/Imt.dir/src/TTaskGroup.cxx.o: in function `ROOT::Experimental::TTaskGroup::TTaskGroup()':; TTaskGroup.cxx:(.text+0x6b): undefined reference to `tbb::detail::r1::initialize(tbb::detail::d1::task_group_context&)'; /usr/bin/ld: CMakeFiles/Imt.dir/src/TTaskGroup.cxx.o: in function `ROOT::Experimental::TTaskGroup::Cancel()':; TTaskGroup.cxx:(.text+0xfa): undefined reference to `tbb::detail::r1::cancel_group_execution(tbb::detail::d1::task_group_context&)'; /usr/bin/ld: CMakeFiles/Imt.dir/src/TTaskGroup.cxx.o: in function `ROOT::Experimental::TTaskGroup::Run(std::function<void ()> const&)':; TTaskGroup.cxx:(.text+0x173): undefined reference to `tbb::detail::r1::allocate(tbb::detail::d1::small_object_pool*&, unsigned long)'; /usr/bin/ld: TTaskGroup.cxx:(.text+0x214): un",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11931:317,depend,dependencies,317,https://root.cern,https://github.com/root-project/root/issues/11931,4,"['depend', 'interface']","['dependencies', 'interface']"
Integrability,"- [x] Checked for duplicates. When using clang trunk to build ROOT (main branch), it fails due to `case value is not a constant expression`. ```; ❯ clang --version; clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8); Target: x86_64-unknown-linux-gnu; Thread model: posix; InstalledDir: /home/jun/opt/clang/bin; ```. cmake commands:; ```; cmake -DCMAKE_BUILD_TYPE=Debug \; -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \; -DCMAKE_C_COMPILER=clang \; -DCMAKE_CXX_COMPILER=clang++ \; -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \; -GNinja .. ```; System info:; I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:; ```; FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o ; /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -c /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx; /home",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11128:670,message,message,670,https://root.cern,https://github.com/root-project/root/issues/11128,1,['message'],['message']
Integrability,"- [x] Checked for duplicates. `TCling::UpdateListOfLoadedSharedLibraries()` iterates through the linked list of dynamic libraries maintained by glibc and saves a pointer into the middle of the list:. https://github.com/root-project/root/blob/49c45b3291c71ffc7f603ae4267f112fdaf77ac4/core/metacling/src/TCling.cxx#L3285-L3290. This is a linked list that can be modified by the activity of other threads, so access to it needs to be protected by a glibc internal `dl_load_write_lock`. glibc provides an interface for this purpose, `dl_iterate_phdr(3)`:. https://linux.die.net/man/3/dl_iterate_phdr. which should be used instead of iterating through the list without the appropriate locking. This bug is not trivial to reproduce, but is believed to be responsible for crashes observed in CMS relval tests https://github.com/cms-sw/cmssw/issues/30359",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6797:501,interface,interface,501,https://root.cern,https://github.com/root-project/root/issues/6797,1,['interface'],['interface']
Integrability,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug. ROOT installed from the binary distribtution for Ubuntu 22 is broken and can't start, at least for 6.26.08 and 6.26.10 (N.B. this is using WSL2). ### Expected behavior. `root` should start normally. ### To Reproduce. - Install dependencies via `apt`; - N.B. `python` and `python-dev` do not exist on Ubuntu22; use `python3` and `python-is-python3` instead; likewise `libglew1.5-dev` should now be `libglew-dev`; - Download and unpack `root_v6.26.10.Linux-ubuntu22-x86_64-gcc11.3.tar.gz` in `/opt`; - `cd /opt/root; source bin/thisroot.sh`; - Then I get the following:. ```; ➜ which root; /opt/root/bin/root; ➜ root; input_line_1:1:2: fatal error: module file '/home/sftnight/build/ws/BUILDTYPE/Release/LABEL/ROOT-ubuntu2204/V/6-26/build/lib/libc.pcm' not found: module file not found; #include <new>; ^; input_line_1:1:2: note: imported by module 'std' in '/opt/root/lib/std.pcm'; Warning in cling::IncrementalParser::CheckABICompatibility():; Failed to extract C++ standard library version.; Replaced symbol atexit cannot be found in JIT!; Replaced symbol at_quick_exit cannot be found in JIT!; Module libc not found.; Failed to load module std; <<< cling interactive line includer >>>: fatal error: module file '/home/sftnight/build/ws/BUILDTYPE/Release/LABEL/ROOT-ubuntu2204/V/6-26/build/lib/libc.pcm' not found: module file not found; <<< cling interactive line includer >>>: note: imported by module '_Builtin_intrinsics' in '/opt/root/lib/_Builtin_intrinsics.pcm'; Failed to load module _Builtin_intrinsics; Failed to load module ROOT_Foundation_C; Failed to load module ROOT_Rtypes; Failed to load module ROOT_F",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11901:610,depend,dependencies,610,https://root.cern,https://github.com/root-project/root/issues/11901,1,['depend'],['dependencies']
Integrability,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug. Trying to compile root 6.24r1 with binutils 2.36 or later fails if `builtin_afterImage=ON` with the following error. ```; CMake Error at .../root/AFTERIMAGE-prefix/src/AFTERIMAGE-stamp/AFTERIMAGE-build-RelWithDebInfo.cmake:49 (message):; Command failed: 2. 'make'. See also. .../root/AFTERIMAGE-prefix/src/AFTERIMAGE-stamp/AFTERIMAGE-build-*.log; ```. The mentioned logfiles show. ```; ar: libdeps specified more than once; make[5]: *** [libAfterImage.a] Error 1; ```. This is caused by a change to `ar` in [binutils 2.36](https://sourceware.org/git/gitweb.cgi?p=binutils-gdb.git;a=blob_plain;f=binutils/NEWS;hb=refs/tags/binutils-2_36) so that the ""previously unused modifier l"" now has a meaning. . The fix is quite simple, one can just replace `ar clq` in the AfterImage Makefile with `ar cq`, see for example a similar problem in tightvnc: https://www.mail-archive.com/debian-bugs-dist@lists.debian.org/msg1789948.html. ### Expected behavior. Expected behavior is to compile successfully . ### To Reproduce. You need a system with binutils 2.36 installed (can be easily installed in a local prefix). ### Setup. * Ubuntu 18.04, ; * GCC 10.2,; * ROOT 6.24rc1 from https://github.com/root-project/root/archive/v6-24-00-rc1.tar.gz; * Compilation using `-Dasimage=ON -Dbuiltin_afterimage=ON`. ### Additional context",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7558:610,message,message,610,https://root.cern,https://github.com/root-project/root/issues/7558,1,['message'],['message']
Integrability,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; I am getting this error when I try to make a cmake project with ROOT:; ```; C:\Users\advai\Documents\Coding\HeatSimulation>cmake .; -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.19042.; CMake Error at C:/Users/advai/ROOT/root/cmake/ROOTConfig-targets.cmake:872 (message):; The imported target ""ROOT::hadd"" references the file. ""C:/Users/advai/ROOT/root/bin/hadd.exe"". but this file does not exist. Possible reasons include:. * The file was deleted, renamed, or moved to another location. * An install or uninstall procedure did not complete successfully. * The installation package was faulty and contained. ""C:/Users/advai/ROOT/root/cmake/ROOTConfig-targets.cmake"". but not all the files it references. Call Stack (most recent call first):; C:/Users/advai/ROOT/root/cmake/ROOTConfig.cmake:98 (include); CMakeLists.txt:7 (find_package). -- Configuring incomplete, errors occurred!; See also ""C:/Users/advai/Documents/Coding/HeatSimulation/CMakeFiles/CMakeOutput.log"". C:\Users\advai\Documents\Coding\HeatSimulation>cmake .; -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.19042.; CMake Error at C:/Users/advai/ROOT/root/cmake/ROOTConfig-targets.cmake:872 (message):; The imported target ""ROOT::hadd"" references the file. ""C:/Users/advai/ROOT/root/bin/hadd.exe"". but this file does not exist. Possible reasons include:. * The file was deleted, renamed, or moved to another location. * An install or uninstall procedure did not complete successfully. * The installation package was faulty and containe",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7982:743,message,message,743,https://root.cern,https://github.com/root-project/root/issues/7982,1,['message'],['message']
Integrability,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; I have a model containing a `RooRealSumPdf` which wraps a `RooAbsReal` with an analytical integral (I tested with `RooGaussModel` and `RooPolyVar`). One of the parameters of the `RooAbsReal` is a function of the actual fit parameter (a `RooProduct` containing a `RooRealVar` for example).; When using batchmode, in the computation of the integral of the `RooAbsReal` (which is internal to the `RooRealSumPdf`, since it overrides `analyticalIntegralWN`), the value of the transformed parameter is not synced with the changes of the `RooRealVar` it contains, leading to a wrong integral.; Inspecting the `RooFitDriver` contents shows that the dataMap entry corresponding to the transformed parameter has the correct value, it's just the integral which uses the wrong one. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; Integral uses correct parameters. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; ```C++; void testIntegralDesync() {; using namespace RooFit;; RooRealVar x(""x"", """", 0, 1);; ; RooRealVar par(""par"", """", -0.005, -5, 5);; RooProduct par_mod(""par_mod"", """", RooArgSet(par, RooConst(10)));; ; // RooPolyVar fn(""fn"", """", x, RooArgList(RooConst(1), par_mod));; // RooRealSumPdf pdf(""pdf"", """", fn, RooConst(1));; ; RooGaussModel gm(""gm"", """", x, Roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11578:508,wrap,wraps,508,https://root.cern,https://github.com/root-project/root/issues/11578,1,['wrap'],['wraps']
Integrability,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; Running `ROOT::GetImplicitMTPoolSize()` gives the error message; `ROOT_prompt_12:1:7: error: no member named 'GetImplicitMTPoolSize' in namespace 'ROOT'`.; Running `ROOT::GetThreadPoolSize()` instead works and gives the correct number of threads with MT enabled. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; In the source [`ROOT::GetImplicitMTPoolSize()`](https://github.com/root-project/root/blob/master/core/base/src/TROOT.cxx#L580) is defined just below [`ROOT::GetThreadPoolSize()`](https://github.com/root-project/root/blob/master/core/base/src/TROOT.cxx#L565) so both should exist and give the same result since the former calls the later internally. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; Start an interactive session of ROOT.; Run `ROOT::GetImplicitMTPoolSize()`. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; Error reproduced in ROOT 6.26/00 (fedora 35, installed with dnf) and 6.24/07 (lxplus cc7, gcc10, via /cvmfs).; No error in version 6.20/07. ### Additional context; <!--; Add any other context about the problem here.; -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10413:514,message,message,514,https://root.cern,https://github.com/root-project/root/issues/10413,1,['message'],['message']
Integrability,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; When opening a GDML geometry with TEveManager I get this error message:; ```; Error in <TFile::Init>: HERD.gdml not a ROOT file; ```; Apart from the message, there's no evident malfunctioning and everything works as expected. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; No error message if really there is no malfunctioning triggered by using a GDML file. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; This can be simply reproduced in the Root shell by opening any GDML file as:; ```; $ root; root [0] TEveManager m(500, 500); (TEveManager &) @0x7fbabb351008; root [1] m.GetGeometry(""HERD.gdml""); TEveManager::GetGeometry loading: 'HERD.gdml' -> 'HERD.gdml'.; Info in <TGeoManager::Import>: Reading geometry from file: HERD.gdml; Info in <TGeoManager::TGeoManager>: Geometry GDMLImport, Geometry imported from GDML created; Info in <TGeoManager::SetTopVolume>: Top volume is worldLogical. Master volume is worldLogical; Info in <TGeoNavigator::BuildCache>: --- Maximum geometry depth set to 100; Info in <TGeoManager::CheckGeometry>: Fixing runtime shapes...; Info in <TGeoManager::CheckGeometry>: ...Nothing to fix; Info in <TGeoManager::CloseGeometry>: Counting nodes...; Info in <TGeoManager::Voxelize>: Voxelizing...; Info in <TGeoManager::CloseGe",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7987:521,message,message,521,https://root.cern,https://github.com/root-project/root/issues/7987,3,['message'],['message']
Integrability,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; When using the pythonization of _some_ `RooCmdArgs` together with the `RooArgSet` pythonization, the created set is dropped too early.; It does not always cause a segfault (depends on the `RooCmdArg`) but it is visible in `valgrind`.; I've seen this happen with `Minos`, `Slice`, `Project`, `Parameters` and SelectVar, while I tested `Conditional`, `Constrain`, `ExternalConstraints`, `Components` and `VisualizeError` and they show no issue (not even in `valgrind`). ; I _think_ the difference is wether the `RooArgSet` is stored as a `RooArgSet` in the `RooCmdArg` (works fine) or as a `TObject*` (dropped early).; I've also noticed that this happens only when you combine the two pythonizations, e.g. both; ```Python; model.fitTo(data, Minos = ROOT.RooArgSet(parameter)); model.fitTo(data, ROOT.RooFit.Minos({parameter})); ```; work fine, only; ```Python; model.fitTo(data, Minos = {parameter}); ```; is affected. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; No use after free. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; ```Python; import ROOT. x = ROOT.RooRealVar('x', '', 0, 1); y = ROOT.RooRealVar('y', '', 0, 1). mu = ROOT.RooRealVar(""mu"", """", 0.5, 0, 1); gx = ROOT.RooGaussian(""gx"", """", x, mu, ROOT.RooFit.RooConst(0.2)); gy = ROOT.RooGaussi",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11421:631,depend,depends,631,https://root.cern,https://github.com/root-project/root/issues/11421,1,['depend'],['depends']
Integrability,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; `RooLinearVar`s and other `RooAbsRealLValue`s are special inside integrals, as `RooRealIntegral` over the underling `RooRealVar` can transparently integrate over the `RooLinearVar` variable and then use the jacobian to correct the result.; If the integral is inside a plot instead, the integral does not see the `RooLinearVar` as client of the integration variable, and decides to just integrate numerically, which, at least in my case, is slow. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; `RooLinearVar` are used in the integration even when doing a plot projection. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; ```python; import ROOT; from ROOT.RooFit import RooConst. x = ROOT.RooRealVar('x', '', 0, 1); y = ROOT.RooRealVar('y', '', 0, 1). x2 = ROOT.RooLinearVar('x2', '', x, RooConst(1), RooConst(0)); y2 = ROOT.RooLinearVar('y2', '', y, RooConst(1), RooConst(0)). # RooGaussian can integrate over x or mu, but not both; # still, the issue is visible regardless; D2 = ROOT.RooGaussian('g', '', x2, y2, RooConst(0.2)). # needed only to set the correct normalization in the frame; dt = D2.generate({x,y}, NumEvents = 10). # works fine, numerical integral only for the 2D normalization integral, and its over y2 (meaning that the RooLinearVar integr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12646:605,integrat,integrate,605,https://root.cern,https://github.com/root-project/root/issues/12646,3,['integrat'],"['integrate', 'integration']"
Integrability,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; I am trying to build Root (6.24.00_patches) against external XrootD that was built from a commit (`332967c` in my case).; However, ROOT complains that it can't find Xrootd:; ```; -- Looking for XROOTD; -- Found Xrootd version num: 20220304-332967c (setting -DROOTXRDVERS=20220304); -- Setting OLDPACK TRUE; CMake Error at cmake/modules/SearchInstalledSoftware.cmake:908 (message):; XROOTD not found. Set environment variable XRDSYS to point to your XROOTD; installation, or inlcude the installation of XROOTD in the; CMAKE_PREFIX_PATH. Alternatively, you can also enable the option; 'builtin_xrootd' to build XROOTD internally; Call Stack (most recent call first):; CMakeLists.txt:219 (include); ```. ### Expected behavior; XroodD should be detected. ### Additional context; In my case, the version of XrootD, as defined in `XrdVersion.hh` is `20220304-332967c` (date + commit ID, see [xrootd code](https://github.com/xrootd/xrootd/blob/master/genversion.sh#L193-L196)). Since it is not a dotted version, FindXROOTD [assumes](https://github.com/root-project/root/blob/master/cmake/modules/FindXROOTD.cmake#L47) that this is some old XrootD and uses the date part as a version. . One possible fix would be to look for `-` in version and use that as an indication of untagged version (same as if version is `unknown`, which is only used if XrootD couldn't use git to determine own version).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10604:754,message,message,754,https://root.cern,https://github.com/root-project/root/issues/10604,1,['message'],['message']
Integrability,"- [x] Checked for duplicates; <!--; Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->; The bug is not reported. ### Describe the bug; <!--. -->; When I compile my code using TMVA reader, I got the following message. ld: warning: libguide.so, needed by /cvmfs/ams.cern.ch/Offline/root/Linux/root6-14-04-icc19/lib/libTMVA.so, not found (try using -rpath or -rpath-link). Then, I execute my .exe file, and get:; error while loading shared libraries: libguide.so: cannot open shared object file: No such file or directory. ### Expected behavior; <!--; -->; No warning during compiling. No error when running. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->; #include <cstdlib>; #include <iostream>; #include ""TString.h""; #include ""TTree.h""; #include ""TGraph.h""; #include ""TFile.h""; #include <TMVA/Reader.h>; #include ""TF1.h""; using namespace std;; int main(int argc, char *argv[]){; int t_i = 19;; float mu, Delta, Ng, Ec, h, epsilon_c, ng, Gamma, L_M_5;; TMVA::Reader *reader = new TMVA::Reader(""!Color:!Silent"");; reader->AddVariable( ""mu"", &mu );; reader->AddVariable( ""Delta"", &Delta );; reader->AddVariable( ""Ng"", &Ng );; reader->AddVariable( ""Ec"", &Ec );; reader->AddVariable( ""h"", &h );; reader->AddVariable( ""epsilon_c"", &epsilon_c );; reader->AddVariable( ""ng"", &ng );; reader->AddVariable( ""Gamma"", &Gamma );; reader->AddVariable( ""L-5"", &L_M_5 );; reader->BookMVA( ""MLP method"", Form(""/eos/user/j/jfeng5/work/quantum_computing/mc/tmva/weights/qc_MLP_%d.weights.xml"",t_i ));; TFile tf_fi(",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6904:481,message,message,481,https://root.cern,https://github.com/root-project/root/issues/6904,1,['message'],['message']
Integrability,"- [x] Checked for duplicates; It might be somehow associated with #7182. ### Describe the bug; In the attached [archive](https://github.com/root-project/root/files/8690168/roofit-integral.tar.gz) there is a macro test.C showing the problem. The problem is that even though all user-created objects die when functions `Integral()` and `Plot()` finish, the integral value is different if `Plot()` is invoked before the second call to `Integral()`. Both removing the call to `Plot()` or using the same value of `delta` in `Integral()` and `Plot()` make the test pass. Looks like `ws.pdf(""signal"")->plotOn(frame);` creates some global cache of the integral which is used with newly created objects. ### Expected behavior; The integral value should not depend on the `Plot()` step - be equal before and after the `Plot()`. ### To Reproduce; Unpack the attached archive and run `root -b -l -q test.C` in the unpacked directory. ### Setup; The test passes for ROOT versions up to 6.22.00, fails in 6.22.06 and later (I didn't check between). It doesn't depend on the operating system nor machine. In the archive there is also a script test.sh that can be run on lxplus.cern.ch selecting different root versions. . ### Additional context",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10577:748,depend,depend,748,https://root.cern,https://github.com/root-project/root/issues/10577,2,['depend'],['depend']
Integrability,"- `SetUpWindows.cmake`: Remove the `-D_WIN32` and `-D_WIN64` compiler flags that are set internally by the compiler and can cause redefinition warnings (e.g. with roottest); - `TWinNTSystem.cxx`: Don't add dependencies on system DLLs from the `C:\Windows` directory, their import libraries might not be available (e.g. in debug mode)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13362:206,depend,dependencies,206,https://root.cern,https://github.com/root-project/root/pull/13362,1,['depend'],['dependencies']
Integrability,"- add check if rms is NaN; - output value of rms (zero, negative, or NaN); - set rms to zero if it is NaN (before only done for zero or negative values). → I suspect the training will have problems in that situation anyway but **I think** it makes the message easier to digest:. before:; ```; …; <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05; …; <HEADER> TFHandler_Factory : Variable Mean RMS [ Min Max ]; : ------------------------------------------------------------------------------------------------------------------; : LifeTime: 0.0011344 -nan [ 8.5046e-05 0.024133 ]. …; : Some more output; : -nan -nan -nan -nan -nan -nan; <FATAL> : <GetSeparation> signal and background histograms have different or invalid dimensions:; ***> abort program execution; terminate called after throwing an instance of 'std::runtime_error'; what(): FATAL error. ```; after; ```; …; <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05; …; <WARNING> <WARNING> : Variable ""LifeTime"" has zero, negative, or NaN RMS^2: -nan ==> set to zero. Please check the variable content. ```; I.e. the nan does not appear in the table anymore (where I didn't spot it first) but the abnormal value gets pulled out into a WARNING message. (Where it also comes with variable name, as opposed to the long list of correlation matrix warning, which makes it non-trivial to understand which variables are problematic, if many, and comes w/o human readable names). tbh: I have not yet understood why NaN arrives there (… well a few lines before the √ of a negative number is computed … but I don't yet know why that arrived there. Still investigating, will follow up once I know more).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1669:252,message,message,252,https://root.cern,https://github.com/root-project/root/pull/1669,2,['message'],['message']
Integrability,- add dependencied on Core and IO (needed to resolve the symbols at link time on Windows); - add a few symbols to be exported; - use the ANSI version of system functions; - convert the backslashs to forward slashs in the rootmap file path,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1122:6,depend,dependencied,6,https://root.cern,https://github.com/root-project/root/pull/1122,1,['depend'],['dependencied']
Integrability,- fix ROOTTest executions problem : remove failed word from warning message; - gridMode considers now CAPath correctly; - correct problem related to X509_CERT_DIR and gridmode,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15:68,message,message,68,https://root.cern,https://github.com/root-project/root/pull/15,2,['message'],['message']
Integrability,- fix an error message (text was misleading); - correclty initialize a data member; - allow initialHesse to be used with Minimizer option in fitTo,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10053:15,message,message,15,https://root.cern,https://github.com/root-project/root/pull/10053,1,['message'],['message']
Integrability,- initial port of physics-data -> EVE representation infrastructure from Fireworks;; - cleanup of TObject inheritance;; - first steps towards multi client synchronized selection support.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3466:155,synchroniz,synchronized,155,https://root.cern,https://github.com/root-project/root/pull/3466,1,['synchroniz'],['synchronized']
Integrability,"- primitives and lists of primitives are supported; anything needing references are not. Despite the fact many of ROOT's very useful deserialization features are not supported, the limited feature set covers a range of analysis use cases. In particular, the current version of CMS's proposed NanoAOD format can be read solely via bulk APIs. Where the bulk IO APIs are applicable, we see an order-magnitude improvement in event rates for some use cases (including CMS NanoAOD). The speedup becomes more noticeable as the data read from the event is smaller (meaning the traditional ROOT IO overheads are larger). Somewhere in the neighborhood of 5KB objects read per event is the point where bulk IO APIs should be noticeably faster. This PR provides three interfaces:; - A raw, low-level interface. The user can invoke the bulk IO APIs directly and get a buffer of primitive types, serialized or deserialized. It is not envisioned this is used by users, but by API writers.; - A `TTreeReader`-like interface, `TTreeReaderFast`. This is meant to be used by users; it utilizes the low-level interface to retrieve the serialized buffer and templated code will inline the deserializing as part of iterating through the tree. The speed here is gained by the fact only a single pass in memory is needed to deserialize *and* apply user code, rather than two.; - The intent is that this interface can be extended in the future and used by `TDataFrame`, provided we can make `TDataFrame` sufficiently fast.; - A Python-based `numpy` export interface. This exposes the (possibly serialized) memory directly as numpy arrays, allowing for efficient access to ROOT-serialized objects from the Python language.; - The `numpy` interface is low-level for Python; we intend to further explore the ideal high-level interface through projects such as https://github.com/diana-hep/plur. So indeed, lot's of experimental / internal interface work here - but we felt that (a) a sufficient amount depends on this and (b) we",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/943:1416,interface,interface,1416,https://root.cern,https://github.com/root-project/root/pull/943,1,['interface'],['interface']
Integrability,"- the CUDA sm level can be set via CLING_TEST_CUDA_SM_LEVEL environment variable (e.g. ""35""), before running the tests; - this necessary, because the minimum sm level depends on the use CUDA SDK; - for example, CUDA 8.0 supports sm level 2.0, which is not support from CUDA 10.1 anymore",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7190:167,depend,depends,167,https://root.cern,https://github.com/root-project/root/pull/7190,1,['depend'],['depends']
Integrability,"- try harder to find branches and leaves users requested when; trying to figure out their type; - when building the list of valid column names, use the output of; TBranch::GetFullName instead of the names (joined by dots) of; the branches we traversed so far. With multiple nested; TBranchElements, the traversal might be `a.b.c` while the name; returned by TBranch::GetFullName (which is what TTree::GetBranch; recognizes) might be simply `a.c` (see e.g. ROOT-9975). These changes fix ROOT-9975, although in some corner cases they might; change which column names RDataFrame considers valid (any ""reasonable""; user application that was working should keep working -- no tutorial,; test or integration benchmark we have was broken by these changes). A test is at https://github.com/root-project/roottest/pull/632 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6988:690,integrat,integration,690,https://root.cern,https://github.com/root-project/root/pull/6988,1,['integrat'],['integration']
Integrability,- use for the registration of MathCore functions the Mathcore header files (e.g. DistFuncMathCore); - move file definining registration of Mathmore functions in roofitmore. This fixes ROOT-10709 and remove dependency introduced in #5439,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5452:206,depend,dependency,206,https://root.cern,https://github.com/root-project/root/pull/5452,1,['depend'],['dependency']
Integrability,"-----------------------------------; extVecFld [#0] -- SplitIndex64 {id:1}; # Elements: 2; # Pages: 2; Avg elements / page: 1; Avg page size: 8 B; Size on storage: 16 B; Compression: 1.00; ............................................................; extVecFld._0 [#0] -- SplitReal32 {id:2}; # Elements: 2; # Pages: 1; Avg elements / page: 2; Avg page size: 12 B; Size on storage: 12 B; Compression: 0.67; ............................................................; fld [#0] -- SplitReal32 {id:0}; # Elements: 2; # Pages: 2; Avg elements / page: 1; Avg page size: 4 B; Size on storage: 8 B; Compression: 1.00; ............................................................; ```; Note the column with ID 2 (middle row of the column details). This column contains the actual elements of `extVecFld`. As can be seen in the macro, there should be three elements, but it is reported to only contain two. To reproduce the `TBrowser` issue, open a ROOT promt with the RNTuple and start a browser session (N.B., web graphics need to be used):; ```sh; $ root -l modelext.root; root [0] ; Attaching file modelext.root as _file0...; (TFile *) 0x2e48180; root [1] TBrowser t; ```; In the browser window, double-click on `modelext.root`, decollapse the field list of `ntuple;1`, decollapse the field list of `extVecFld` and double click on the leaf field named `_0`. ROOT then crashes with the following message:; ```txt; terminate called after throwing an instance of 'ROOT::Experimental::RException'; what(): entry with index 3 out of bounds; At:; virtual ROOT::Experimental::Internal::RPage ROOT::Experimental::Internal::RPageSourceFile::PopulatePage(ROOT::Experimental::Internal::RPageStorage::ColumnHandle_t, ROOT::Experimental::NTupleSize_t) [/home/florine/cern/root/src/tree/ntuple/v7/src/RPageStorageFile.cxx:435]; ```. ### ROOT version. 6.30 and up (most likely also 6.28, haven't verified yet). ### Installation method. built from source. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15661:5251,message,message,5251,https://root.cern,https://github.com/root-project/root/issues/15661,1,['message'],['message']
Integrability,-04/0/core/thread/inc -I/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-32-04/0/core/zip/inc -I/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-32-04/0/core/lzma/inc -I/Users/ktf/src/sw/osx_arm64/lzma/v5.2.3-local1/include -I/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-32-04/0/core/lz4/inc -I/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-32-04/0/core/zstd/inc -I/opt/homebrew/include -I/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-32-04/0/core/macosx/inc -I/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-32-04/0/core/unix/inc -I/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-32-04/0/core/unix/../clib/res -I/Users/ktf/src/sw/BUILD/7aa97d0224e628a02dfa9bddf88351f532b5c298/ROOT/builtins/pcre/PCRE-prefix/src/PCRE-build -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.0.sdk/usr/include -I/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-32-04/0/builtins/xxhash ROOT/TErrorDefaultHandler.hxx ROOT/TExecutorCRTP.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TColor.h TColorGradient.h TDatime.h TDirectory.h TEnv.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TInetAddress.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TObjString.h TParameter.h TPluginManager.h TPoint.h TPRegexp.h TProcessID.h TProcessUUID.h TQClass.h TQCommand.h TQConnection.h TQObject.h TRedirectOutputGuard.h TRefCnt.h TRef.h TRegexp.h TRemoteObject.h TROOT.h TRootIOCtor.h TStopwatch.h TStorage.h TString.h TStringLong.h TStyle.h TSysEvtHandler.h TSystemDirectory.h TSystemFile.h TSystem.h TTask.h TThreadSlots.h TTime.h TTimer.h TTimeStamp.h TUri.h TUrl.h TUUID.h TVersionCheck.h TVirtualAuth.h TVirtualFFT.h TVirtualGL.h TVirtualMonitoring.h TVirtualMapFile.h TVirtualMutex.h TVirtualPadEditor.h TVirtualPad,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16449:6155,Message,MessageTypes,6155,https://root.cern,https://github.com/root-project/root/issues/16449,1,['Message'],['MessageTypes']
Integrability,"-6.30.04/core/metacling/test/TClingDataMemberInfoTests.cxx:230: Failure; Value of: 1 == *(int*)(ROOT::GetROOT())->GetGlobal(""var1"")->GetAddress(); Actual: false; Expected: true; /builddir/build/BUILD/root-6.30.04/core/metacling/test/TClingDataMemberInfoTests.cxx:233: Failure; Value of: -2 == *(int*)(ROOT::GetROOT())->GetGlobal(""var2"")->GetAddress(); Actual: false; Expected: true; /builddir/build/BUILD/root-6.30.04/core/metacling/test/TClingDataMemberInfoTests.cxx:242: Failure; Expected equality of these values:; 3000; *(int*)(ROOT::GetROOT())->GetGlobal(""kError"")->GetAddress(); Which is: 0; [ FAILED ] TClingDataMemberInfo.Offset (7 ms); [ RUN ] TClingDataMemberInfo.issue8553; [ OK ] TClingDataMemberInfo.issue8553 (4 ms); [----------] 4 tests from TClingDataMemberInfo (14 ms total); [----------] 5 tests from TClingMethodInfo; [ RUN ] TClingMethodInfo.Prototype; [ OK ] TClingMethodInfo.Prototype (0 ms); [ RUN ] TClingMethodInfo.ROOT10789; [ OK ] TClingMethodInfo.ROOT10789 (2 ms); [ RUN ] TClingMethodInfo.DerivedCtorROOT11010; [ OK ] TClingMethodInfo.DerivedCtorROOT11010 (81 ms); [ RUN ] TClingMethodInfo.TemplateFun; [ OK ] TClingMethodInfo.TemplateFun (1 ms); [ RUN ] TClingMethodInfo.Ctors; [ OK ] TClingMethodInfo.Ctors (4 ms); [----------] 5 tests from TClingMethodInfo (90 ms total); [----------] Global test environment tear-down; [==========] 33 tests from 4 test suites ran. (7341 ms total); [ PASSED ] 32 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TClingDataMemberInfo.Offset; 1 FAILED TEST; YOU HAVE 1 DISABLED TEST; CMake Error at /builddir/build/BUILD/root-6.30.04/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ```. ### Reproducer. Build root 6.30.02 for s390x; Run tests. ### ROOT version. root 6.30.04. ### Installation method. build from source. ### Operating system. Fedora Linux 40 for s390x; Fedora Linux 39 for s390x; Fedora Linux 38 for s390x; RHEL 9 + EPEL 9 for s390x; RHEL 8 + EPEL 8 for s390x. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14512:5075,message,message,5075,https://root.cern,https://github.com/root-project/root/issues/14512,1,['message'],['message']
Integrability,"-DINSTALL=1 | Enables an extra step to call make install; | -DCDASH=1 | Enables submission to CDash (needs CTestConfig.cmake). When enabling coverage, a report is generated by default in the `coverage/` directory inside the build directory. The results can be viewed by opening the file `html/coverage_details.html`. This step can be disabled by passing `-DGCOVR=0` to `ctest`. It is recommended to use a debug build to generate the coverage analysis. The configuration can be specified directly on the command line via the `-C` option. For example, to run a coverage build in debug mode, with less verbose output, and showing test output when a test failure happens, one can run:; ```sh; ctest -V --output-on-failure -C Debug -DCOVERAGE=1 -S test.cmake; ```; Some environment variables can also influence the behavior of the script, like `CC`, `CXX`, `CMAKE_GENERATOR`, `CTEST_CONFIGURATION_TYPE`, `CMAKE_BUILD_PARALLEL_LEVEL`, `CTEST_PARALLEL_LEVEL`, `CMAKE_ARGS`, `CDASH`, `DESTDIR`, `BASE_REF`, `HEAD_REF`, and GitHub Actions environment variables. These are mostly self-explanatory and can be used to override the provided defaults. For example, to build with the clang compiler and use Ninja as CMake generator, one can run:; ```sh; env CC=clang CXX=clang++ CMAKE_GENERATOR=Ninja ctest -V -S test.cmake; ```; Finally, the script tries to load configuration files from the `.ci/` subdirectory in the source directory. The default configuration is in `.ci/config.cmake`. It is used if no specific configuration is found for the detected OS. For example, on Ubuntu, a file named `ubuntu.cmake` will be used if present instead of `config.cmake`. The script also tries to detect a version, so, for example, on Alma, one could use `almalinux8.cmake` which would have higher precedence than `almalinux.cmake`. The default `config.cmake` tries to enable as many options as possible without failing if the dependencies are not installed. Sample `ubuntu.cmake` and `macos.cmake` are added in this commit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14999:2502,depend,dependencies,2502,https://root.cern,https://github.com/root-project/root/pull/14999,1,['depend'],['dependencies']
Integrability,"-Dfortran=OFF""; ""-Dimt=ON""; ""-Dgfal=OFF""; ""-Dgviz=OFF""; ""-Dhdfs=OFF""; ""-Dhttp=ON""; ""-Dkrb5=OFF""; ""-Dldap=OFF""; ""-Dmonalisa=OFF""; ""-Dmysql=OFF""; ""-Dodbc=OFF""; ""-Dopengl=ON""; ""-Doracle=OFF""; ""-Dpgsql=OFF""; ""-Dpythia6=OFF""; ""-Dpythia8=OFF""; ""-Drfio=OFF""; ""-Droot7=OFF""; ""-Dsqlite=OFF""; ""-Dssl=ON""; ""-Dtmva=ON""; ""-Dvdt=OFF""; ""-Dwebgui=OFF""; ""-Dxml=ON""; ""-Dxrootd=OFF""; ]; ++ lib.optional (stdenv.cc.libc != null) ""-DC_INCLUDE_DIRS=${lib.getDev stdenv.cc.libc}/include""; ++ lib.optionals stdenv.isDarwin [; ""-DOPENGL_INCLUDE_DIR=${OpenGL}/Library/Frameworks""; ""-DCMAKE_DISABLE_FIND_PACKAGE_Python2=TRUE"". # fatal error: module map file '/nix/store/<hash>-Libsystem-osx-10.12.6/include/module.modulemap' not found; # fatal error: could not build module '_Builtin_intrinsics'; ""-Druntime_cxxmodules=OFF""; ];. NIX_LDFLAGS = lib.optionalString (stdenv.isLinux && stdenv.isAarch64 && stdenv.cc.isGNU) ""-lgcc"";. postInstall = ''; for prog in rootbrowse rootcp rooteventselector rootls rootmkdir rootmv rootprint rootrm rootslimtree; do; wrapProgram ""$out/bin/$prog"" \; --set PYTHONPATH ""$out/lib"" \; --set ${lib.optionalString stdenv.isDarwin ""DY""}LD_LIBRARY_PATH ""$out/lib""; done. # Make ldd and sed available to the ROOT executable; wrapProgram ""$out/bin/root"" --prefix PATH : ""${lib.makeBinPath [; gnused # sed; stdenv.cc # c++ ld etc.; stdenv.cc.libc # ldd; ]}"". # Patch thisroot.{sh,csh,fish}. # The main target of `thisroot.sh` is ""bash-like shells"",; # but it also need to support Bash-less POSIX shell like dash,; # as they are mentioned in `thisroot.sh`. # `thisroot.sh` would include commands `lsof` and `procps` since ROOT 6.28.; # See https://github.com/root-project/root/pull/10332. patchRcPathPosix ""$out/bin/thisroot.sh"" ""${lib.makeBinPath [; coreutils # dirname tail; gnugrep # grep; gnused # sed; lsof # lsof # for ROOT (>=6.28); man # manpath; procps # ps # for ROOT (>=6.28); which # which; ]}""; patchRcPathCsh ""$out/bin/thisroot.csh"" ""${lib.makeBinPath [; coreutils; gnugrep; gnused; lsof # l",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11920:7473,wrap,wrapProgram,7473,https://root.cern,https://github.com/root-project/root/issues/11920,1,['wrap'],['wrapProgram']
Integrability,"-Dpythia8=OFF""; ""-Drfio=OFF""; ""-Droot7=OFF""; ""-Dsqlite=OFF""; ""-Dssl=ON""; ""-Dtmva=ON""; ""-Dvdt=OFF""; ""-Dwebgui=OFF""; ""-Dxml=ON""; ""-Dxrootd=OFF""; ]; ++ lib.optional (stdenv.cc.libc != null) ""-DC_INCLUDE_DIRS=${lib.getDev stdenv.cc.libc}/include""; ++ lib.optionals stdenv.isDarwin [; ""-DOPENGL_INCLUDE_DIR=${OpenGL}/Library/Frameworks""; ""-DCMAKE_DISABLE_FIND_PACKAGE_Python2=TRUE"". # fatal error: module map file '/nix/store/<hash>-Libsystem-osx-10.12.6/include/module.modulemap' not found; # fatal error: could not build module '_Builtin_intrinsics'; ""-Druntime_cxxmodules=OFF""; ];. NIX_LDFLAGS = lib.optionalString (stdenv.isLinux && stdenv.isAarch64 && stdenv.cc.isGNU) ""-lgcc"";. postInstall = ''; for prog in rootbrowse rootcp rooteventselector rootls rootmkdir rootmv rootprint rootrm rootslimtree; do; wrapProgram ""$out/bin/$prog"" \; --set PYTHONPATH ""$out/lib"" \; --set ${lib.optionalString stdenv.isDarwin ""DY""}LD_LIBRARY_PATH ""$out/lib""; done. # Make ldd and sed available to the ROOT executable; wrapProgram ""$out/bin/root"" --prefix PATH : ""${lib.makeBinPath [; gnused # sed; stdenv.cc # c++ ld etc.; stdenv.cc.libc # ldd; ]}"". # Patch thisroot.{sh,csh,fish}. # The main target of `thisroot.sh` is ""bash-like shells"",; # but it also need to support Bash-less POSIX shell like dash,; # as they are mentioned in `thisroot.sh`. # `thisroot.sh` would include commands `lsof` and `procps` since ROOT 6.28.; # See https://github.com/root-project/root/pull/10332. patchRcPathPosix ""$out/bin/thisroot.sh"" ""${lib.makeBinPath [; coreutils # dirname tail; gnugrep # grep; gnused # sed; lsof # lsof # for ROOT (>=6.28); man # manpath; procps # ps # for ROOT (>=6.28); which # which; ]}""; patchRcPathCsh ""$out/bin/thisroot.csh"" ""${lib.makeBinPath [; coreutils; gnugrep; gnused; lsof # lsof # for ROOT (>=6.28); man; which; ]}""; patchRcPathFish ""$out/bin/thisroot.fish"" ""${lib.makeBinPath [; coreutils; man; which; ]}""; '';. setupHook = ./setup-hook.sh;; }; ```. `flake.nix`. ```Nix; {; inputs.flake-utils.url",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11920:7671,wrap,wrapProgram,7671,https://root.cern,https://github.com/root-project/root/issues/11920,1,['wrap'],['wrapProgram']
Integrability,-Fix the correct dependency of sofie tests. No ned to depend on protobuf; - Use weight file for Linear tests from ROOT; - Test also the case where the weight file is not present but the session is enabled; - Produce a runtime error when a weight file is enabled but the Session is disabled,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11529:17,depend,dependency,17,https://root.cern,https://github.com/root-project/root/pull/11529,2,['depend'],"['depend', 'dependency']"
Integrability,"., result=..., dropstd=true); at /home/pcanal/root_working/code/root/core/clingutils/src/TClingUtils.cxx:615; 615 {; (gdb) p tname.c_str(); $33 = 0x555556b67030 ""function<int(const Zyx*,const std::string&)>""; (gdb) bt; #0 ROOT::TMetaUtils::TClingLookupHelper::GetPartiallyDesugaredNameWithScopeHandling (this=0x55555616cc10, tname=..., result=..., dropstd=true); at /home/pcanal/root_working/code/root/core/clingutils/src/TClingUtils.cxx:615; #1 0x00007ffff7ce30ea in TClassEdit::TSplitType::ShortType (this=0x7fffffffa780, answ=..., mode=3618) at /home/pcanal/root_working/code/root/core/foundation/src/TClassEdit.cxx:437; #2 0x00007ffff7ce48e9 in TClassEdit::GetNormalizedName (norm_name=..., name=...) at /home/pcanal/root_working/code/root/core/foundation/src/TClassEdit.cxx:854; #3 0x00007ffff7d0a5a3 in TClass::GetClass (name=0x7ffff78de000 ""vector<function<int(const Zyx*,const std::string&)> >"", load=true, silent=false, hint_pair_offset=0, hint_pair_size=0); at /home/pcanal/root_working/code/root/core/meta/src/TClass.cxx:3041; #4 0x00007ffff7d0a221 in TClass::GetClass (name=0x7ffff78de000 ""vector<function<int(const Zyx*,const std::string&)> >"", load=true, silent=false); at /home/pcanal/root_working/code/root/core/meta/src/TClass.cxx:2957; #5 0x00007ffff78df048 in ?? (); #6 0x0000000000000000 in ?? (); (gdb) n; .....; 633 const cling::LookupHelper& lh = fInterpreter->getLookupHelper();; (gdb); 634 clang::QualType t = lh.findType(tname.c_str(), ToLHDS(WantDiags()));; (gdb); 639 if (!t.isNull()) {; (gdb) p t.dump(); TemplateSpecializationType 0x555556b681d0 'function<int (const int *, const std::string &)>' sugar function; |-TemplateArgument type 'int (const int *, const std::string &)'; `-RecordType 0x555556b67b20 'class std::function<int (const int *, const class std::__cxx11::basic_string<char> &)>'; `-ClassTemplateSpecialization 0x555556b67a18 'function'; $34 = void; ```. (This likely involves the fact that Clang's type printing routine spell unknown type as 'int' :) ).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8470:2971,rout,routine,2971,https://root.cern,https://github.com/root-project/root/issues/8470,1,['rout'],['routine']
Integrability,"... and TCling__SplitAclicMode. The FileNotFound() method of TPPClingCallbacks is called via; Callbacks->FileNotFound(Filename, RecoveryPath) in; Preprocessor::HandleIncludeDirective(), allowing to compile code via; ACLiC when specifying #include ""myfile.C+"", and hence suppressing; preprocessor error message like:; input_line_23:1:10: fatal error: 'myfile.C+' file not found",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4:302,message,message,302,https://root.cern,https://github.com/root-project/root/pull/4,1,['message'],['message']
Integrability,"...and add a test. The new argument is to make TTreeProcessorMT consistent with other; multi-threading interfaces, namely TThreadExecutor. This is the last; ingredient required to fix ROOT-10561.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5278:103,interface,interfaces,103,https://root.cern,https://github.com/root-project/root/pull/5278,1,['interface'],['interfaces']
Integrability,...and make it part of the common RAxisBase interface.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5023:44,interface,interface,44,https://root.cern,https://github.com/root-project/root/pull/5023,1,['interface'],['interface']
Integrability,"...instead of relying on ReadClassBuffer(). This is necessary for schema evolution with RNTuple's custom streamer. ## Changes or fixes:; Using `TBuffer::ReadClassBuffer` in `RNTuple::Streamer` is wrong because it doesn't handle cases where the schema of RNTuple changes. To do that, we need to manually read back the fields depending on the class version. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary) - not necessary",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15516:324,depend,depending,324,https://root.cern,https://github.com/root-project/root/pull/15516,1,['depend'],['depending']
Integrability,".6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' ; collect2: error: ld returned 1 exit status; make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1; ```. This looks like an incompatibility between clang and cling - which both are builtin.; Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with; ```; -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd; ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; ROOT 6.26.04; OS Ubuntu 22.04 (amd64) `pbuilder` sandbox on 20.04 system; Source: official tarball. ### Additional context; <!--; Add any other context about the problem here.; -->; nothing yet. Full log (1.2MB) [here](https://hypatia.aei.mpg.de/lsc-amd64-jammy/root-cds_6.26.04.sg-0.22+ubuntu22.04.0_amd64.--pbuilderlog)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10777:2561,depend,dependencies,2561,https://root.cern,https://github.com/root-project/root/issues/10777,1,['depend'],['dependencies']
Integrability,".h tmp/el8_amd64_gcc11/classes/classes_def.xml; In file included from input_line_8:57:; In file included from ./tmp/el8_amd64_gcc11/src/CalibTracker/Records/src/CalibTrackerRecords/a/CalibTrackerRecords_xr.h:1:; /data/cmsbld/jenkins/workspace/build-any-ib/w/tmp/BUILDROOT/8111f4777df89fbcfd3398ad239ef48c/opt/cmssw/el8_amd64_gcc11/cms/cmssw/CMSSW_12_6_CXXMODULE_X_2022-11-22-2300/src/CalibTracker/Records/interface/SiPixel2DTemplateDBObjectESProducerRcd.h:4:10: remark: building module 'FWCoreFramework' as '/data/cmsbld/jenkins/workspace/build-any-ib/w/tmp/BUILDROOT/8111f4777df89fbcfd3398ad239ef48c/opt/cmssw/el8_amd64_gcc11/cms/cmssw/CMSSW_12_6_CXXMODULE_X_2022-11-22-2300/tmp/el8_amd64_gcc11/src/CalibTracker/Records/src/CalibTrackerRecords/a/FWCoreFramework.pcm' [-Rmodule-build]; #include ""FWCore/Framework/interface/EventSetupRecordImplementation.h""; ^; Error: Building module 'FWCoreFramework' implicitly. If 'FWCoreFramework' requires a ; dictionary please specify build dependency: 'tmp/el8_amd64_gcc11/src/CalibTracker/Records/src/CalibTrackerRecords/a/CalibTrackerRecords_xr.cc' depends on 'FWCoreFramework'.; Otherwise, specify '-mByproduct FWCoreFramework' to disable this diagnostic.; While building module 'CalibTrackerRecords':; While building module 'FWCoreFramework' imported from /data/cmsbld/jenkins/workspace/build-any-ib/w/tmp/BUILDROOT/8111f4777df89fbcfd3398ad239ef48c/opt/cmssw/el8_amd64_gcc11/cms/cmssw/CMSSW_12_6_CXXMODULE_X_2022-11-22-2300/src/CalibTracker/Records/interface/SiPixel2DTemplateDBObjectESProducerRcd.h:4:; While building module 'FWCoreServiceRegistry' imported from /data/cmsbld/jenkins/workspace/build-any-ib/w/tmp/BUILDROOT/8111f4777df89fbcfd3398ad239ef48c/opt/cmssw/el8_amd64_gcc11/cms/cmssw/CMSSW_12_6_CXXMODULE_X_2022-11-22-2300/src/FWCore/Framework/interface/EventSetupRecordImpl.h:45:; While building module 'FWCoreParameterSet' imported from /data/cmsbld/jenkins/workspace/build-any-ib/w/tmp/BUILDROOT/8111f4777df89fbcfd3398ad239ef48c/opt/cmssw/el8_a",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11765:4585,depend,dependency,4585,https://root.cern,https://github.com/root-project/root/issues/11765,1,['depend'],['dependency']
Integrability,".py works fine, so the problem relates to the ctest configuration. Here is the output when I ran the test with Python in a fresh environment with all dependencies installed:; ```; /home/rembserj/spaces/master/root/src/root/bindings/pyroot/pythonizations/test/dependency_versions.py:2: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html; import pkg_resources; Attempting requirement 'numpy>=1.4.1'; Attempting requirement 'scikit-learn'; Attempting requirement 'xgboost'; Attempting requirement 'tensorflow'; Attempting requirement 'torch'; Attempting requirement 'numba>=0.47.0; python_version < ""3.11""'; Attempting requirement 'numba>=0.57.0; python_version >= ""3.11"" and python_version < ""3.12""'; Attempting requirement 'cffi>=1.9.1'; Attempting requirement 'notebook>=4.4.1'; Attempting requirement 'metakernel>=0.20.0'; Ignore dependency pyspark>=2.4; Ignore dependency dask>=2022.08.1; python_version >= ""3.8""; Ignore dependency distributed>=2022.08.1; python_version >= ""3.8""; .; ----------------------------------------------------------------------; Ran 1 test in 0.149s. OK; ```. And here is the output with ctest:; ```; AILED (errors=1); Attempting requirement 'numpy>=1.4.1'; Attempting requirement 'scikit-learn'; Attempting requirement 'xgboost'; Attempting requirement 'tensorflow'; Attempting requirement 'torch'; Attempting requirement 'numba>=0.47.0; python_version < ""3.11""'; Attempting requirement 'numba>=0.57.0; python_version >= ""3.11"" and python_version < ""3.12""'; Attempting requirement 'cffi>=1.9.1'; Attempting requirement 'notebook>=4.4.1'; Attempting requirement 'metakernel>=0.20.0'; Ignore dependency pyspark>=2.4; Ignore dependency dask>=2022.08.1; python_version >= ""3.8""; Ignore dependency distributed>=2022.08.1; python_version >= ""3.8"". Full path to requirements.txt: /home/rembserj/code/root/requirements.txt; Details about not matched dependencies:; - The 'tensorflow' distribution was not found",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15272:1330,depend,dependency,1330,https://root.cern,https://github.com/root-project/root/pull/15272,1,['depend'],['dependency']
Integrability,/ message logger; tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service; tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger; tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; /,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9792:2113,message,message,2113,https://root.cern,https://github.com/root-project/root/issues/9792,1,['message'],['message']
Integrability,/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.0.sdk/usr/include/c++/v1/wctype.h:68:; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/wctype.h:31:10: fatal error: could not build module '_wctype'; #include <_wctype.h>; ~~~~~~~~^. ### Reproducer. While building module 'Core':; While building module 'std' imported from input_line_1:1:; While building module '_wctype' imported from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/wctype.h:31:; While building module '__wctype' imported from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.0.sdk/usr/include/_wctype.h:36:; In file included from <module-includes>:1:; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.0.sdk/usr/include/___wctype.h:72:10: fatal error: cyclic dependency in module 'std': std -> _wctype -> __wctype -> std; #include <ctype.h>; ^; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.0.sdk/usr/include/_wctype.h:36:10: fatal error: could not build module '__wctype'; #include <_types/_wctrans_t.h>; ~~~~~~~~^; While building module 'Core':; While building module 'std' imported from input_line_1:1:; In file included from <module-includes>:1:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.0.sdk/usr/include/c++/v1/algorithm:1804:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.0.sdk/usr/include/c++/v1/__algorithm/find.h:31:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.0.sdk/usr/include/c++/v1/cwchar:112:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16486:2902,depend,dependency,2902,https://root.cern,https://github.com/root-project/root/issues/16486,1,['depend'],['dependency']
Integrability,/CMSSW_12_6_CXXMODULE_X_2022-11-22-2300/src/CalibTracker/Records/interface/SiPixel2DTemplateDBObjectESProducerRcd.h:4:; While building module 'FWCoreServiceRegistry' imported from /data/cmsbld/jenkins/workspace/build-any-ib/w/tmp/BUILDROOT/8111f4777df89fbcfd3398ad239ef48c/opt/cmssw/el8_amd64_gcc11/cms/cmssw/CMSSW_12_6_CXXMODULE_X_2022-11-22-2300/src/FWCore/Framework/interface/EventSetupRecordImpl.h:45:; While building module 'FWCoreParameterSet' imported from /data/cmsbld/jenkins/workspace/build-any-ib/w/tmp/BUILDROOT/8111f4777df89fbcfd3398ad239ef48c/opt/cmssw/el8_amd64_gcc11/cms/cmssw/CMSSW_12_6_CXXMODULE_X_2022-11-22-2300/src/FWCore/ServiceRegistry/interface/ServiceRegistry.h:22:; While building module 'FWCorePluginManager' imported from /data/cmsbld/jenkins/workspace/build-any-ib/w/tmp/BUILDROOT/8111f4777df89fbcfd3398ad239ef48c/opt/cmssw/el8_amd64_gcc11/cms/cmssw/CMSSW_12_6_CXXMODULE_X_2022-11-22-2300/include/el8_amd64_gcc11/cxxmodules/../../../src/FWCore/ParameterSet/interface/ParameterSetDescriptionFillerPluginFactory.h:24:; In file included from <module-includes>:1:; In file included from /data/cmsbld/jenkins/workspace/build-any-ib/w/tmp/BUILDROOT/8111f4777df89fbcfd3398ad239ef48c/opt/cmssw/el8_amd64_gcc11/cms/cmssw/CMSSW_12_6_CXXMODULE_X_2022-11-22-2300/include/el8_amd64_gcc11/cxxmodules/../../../src/FWCore/PluginManager/interface/CacheParser.h:33:; In file included from /data/cmsbld/jenkins/workspace/build-any-ib/w/tmp/BUILDROOT/8111f4777df89fbcfd3398ad239ef48c/opt/cmssw/el8_amd64_gcc11/cms/cmssw/CMSSW_12_6_CXXMODULE_X_2022-11-22-2300/src/FWCore/PluginManager/interface/PluginInfo.h:22:; In file included from /data/cmsbld/jenkins/workspace/build-any-ib/w/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/bin/../lib/gcc/x86_64-redhat-linux-gnu/11.2.1/../../../../include/c++/11.2.1/filesystem:45:; /data/cmsbld/jenkins/workspace/build-any-ib/w/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/bin/../lib/gcc/x86_64-redhat-linux,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11765:6019,interface,interface,6019,https://root.cern,https://github.com/root-project/root/issues/11765,1,['interface'],['interface']
Integrability,"/IncrementalParser.cpp:663; #25 0x00007fffeebcbc4e in cling::Interpreter::DeclareInternal (this=0x4a0f30, input=..., CO=..., T=0x7fffffffd680) at /local2/pcanal/cint_working/rootcling/v6-14-00-patches/interpreter/cling/lib/Interpreter/Interpreter.cpp:1195; #26 0x00007fffeebca8e8 in cling::Interpreter::declare (this=0x4a0f30, input=..., T=0x7fffffffd680) at /local2/pcanal/cint_working/rootcling/v6-14-00-patches/interpreter/cling/lib/Interpreter/Interpreter.cpp:823; #27 0x00007fffeebcb560 in cling::Interpreter::DeclareCFunction (this=0x4a0f30, name=..., code=..., withAccessControl=true) at /local2/pcanal/cint_working/rootcling/v6-14-00-patches/interpreter/cling/lib/Interpreter/Interpreter.cpp:1096; #28 0x00007fffeebcb862 in cling::Interpreter::compileFunction (this=0x4a0f30, name=..., code=..., ifUnique=false, withAccessControl=true); at /local2/pcanal/cint_working/rootcling/v6-14-00-patches/interpreter/cling/lib/Interpreter/Interpreter.cpp:1140; #29 0x00007fffeeafb83c in TClingCallFunc::compile_wrapper (withAccessControl=true, wrapper=..., wrapper_name=..., this=0xcf3c10) at /local2/pcanal/cint_working/rootcling/v6-14-00-patches/core/metacling/src/TClingCallFunc.cxx:270; #30 TClingCallFunc::make_wrapper (this=this@entry=0xcf3c10) at /local2/pcanal/cint_working/rootcling/v6-14-00-patches/core/metacling/src/TClingCallFunc.cxx:1096; #31 0x00007fffeeafbcb8 in TClingCallFunc::IFacePtr (this=this@entry=0xcf3c10) at /local2/pcanal/cint_working/rootcling/v6-14-00-patches/core/metacling/src/TClingCallFunc.cxx:2233; #32 0x00007fffeeafbe83 in TClingCallFunc::ExecT<long> (address=0x0, this=0xcf3c10) at /local2/pcanal/cint_working/rootcling/v6-14-00-patches/core/metacling/src/TClingCallFunc.cxx:2045; #33 TClingCallFunc::ExecInt (this=0xcf3c10, address=0x0) at /local2/pcanal/cint_working/rootcling/v6-14-00-patches/core/metacling/src/TClingCallFunc.cxx:2065; #34 0x00007ffff7c56e8d in TMethodCall::Execute (this=0xd97710, object=<optimized out>, retLong=@0x7fffffffd958: 0) at /local2",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2776:8477,wrap,wrapper,8477,https://root.cern,https://github.com/root-project/root/pull/2776,2,['wrap'],['wrapper']
Integrability,"/Users/advai/ROOT/root/cmake/ROOTConfig-targets.cmake:872 (message):; The imported target ""ROOT::hadd"" references the file. ""C:/Users/advai/ROOT/root/bin/hadd.exe"". but this file does not exist. Possible reasons include:. * The file was deleted, renamed, or moved to another location. * An install or uninstall procedure did not complete successfully. * The installation package was faulty and contained. ""C:/Users/advai/ROOT/root/cmake/ROOTConfig-targets.cmake"". but not all the files it references. Call Stack (most recent call first):; C:/Users/advai/ROOT/root/cmake/ROOTConfig.cmake:98 (include); CMakeLists.txt:7 (find_package). -- Configuring incomplete, errors occurred!; See also ""C:/Users/advai/Documents/Coding/HeatSimulation/CMakeFiles/CMakeOutput.log"". C:\Users\advai\Documents\Coding\HeatSimulation>cmake .; -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.19042.; CMake Error at C:/Users/advai/ROOT/root/cmake/ROOTConfig-targets.cmake:872 (message):; The imported target ""ROOT::hadd"" references the file. ""C:/Users/advai/ROOT/root/bin/hadd.exe"". but this file does not exist. Possible reasons include:. * The file was deleted, renamed, or moved to another location. * An install or uninstall procedure did not complete successfully. * The installation package was faulty and contained. ""C:/Users/advai/ROOT/root/cmake/ROOTConfig-targets.cmake"". but not all the files it references. Call Stack (most recent call first):; C:/Users/advai/ROOT/root/cmake/ROOTConfig.cmake:98 (include); CMakeLists.txt:7 (find_package). -- Configuring incomplete, errors occurred!; See also ""C:/Users/advai/Documents/Coding/HeatSimulation/CMakeFiles/CMakeOutput.log"". C:\Users\advai\Documents\Coding\HeatSimulation>cmake .; -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.19042.; CMake Error at C:/Users/advai/ROOT/root/cmake/ROOTConfig-targets.cmake:872 (message):; The imported target ""ROOT::hadd"" references the file. ""C:/Users/advai/ROOT/root/bin/hadd.exe"". but th",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7982:1658,message,message,1658,https://root.cern,https://github.com/root-project/root/issues/7982,2,['message'],['message']
Integrability,"/Users/advai/ROOT/root/cmake/ROOTConfig-targets.cmake:872 (message):; The imported target ""ROOT::hadd"" references the file. ""C:/Users/advai/ROOT/root/bin/hadd.exe"". but this file does not exist. Possible reasons include:. * The file was deleted, renamed, or moved to another location. * An install or uninstall procedure did not complete successfully. * The installation package was faulty and contained. ""C:/Users/advai/ROOT/root/cmake/ROOTConfig-targets.cmake"". but not all the files it references. Call Stack (most recent call first):; C:/Users/advai/ROOT/root/cmake/ROOTConfig.cmake:98 (include); CMakeLists.txt:7 (find_package). -- Configuring incomplete, errors occurred!; See also ""C:/Users/advai/Documents/Coding/HeatSimulation/CMakeFiles/CMakeOutput.log"". C:\Users\advai\Documents\Coding\HeatSimulation>cmake .; -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.19042.; CMake Error at C:/Users/advai/ROOT/root/cmake/ROOTConfig-targets.cmake:872 (message):; The imported target ""ROOT::hadd"" references the file. ""C:/Users/advai/ROOT/root/bin/hadd.exe"". but this file does not exist. Possible reasons include:. * The file was deleted, renamed, or moved to another location. * An install or uninstall procedure did not complete successfully. * The installation package was faulty and contained. ""C:/Users/advai/ROOT/root/cmake/ROOTConfig-targets.cmake"". but not all the files it references. Call Stack (most recent call first):; C:/Users/advai/ROOT/root/cmake/ROOTConfig.cmake:98 (include); CMakeLists.txt:7 (find_package). -- Configuring incomplete, errors occurred!; ```; Apparently it cant find hadd.exe . ; ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; It working?; ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7982:3488,message,message,3488,https://root.cern,https://github.com/root-project/root/issues/7982,1,['message'],['message']
Integrability,"/code></a> 0.5.2</li>; <li>Additional commits viewable in <a href=""https://github.com/isaacs/node-mkdirp/compare/0.5.1...v0.5.6"">compare view</a></li>; </ul>; </details>; <details>; <summary>Maintainer changes</summary>; <p>This version was pushed to npm by <a href=""https://www.npmjs.com/~isaacs"">isaacs</a>, a new releaser for mkdirp since your current version.</p>; </details>; <br />. Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11865:9789,Depend,Dependabot,9789,https://root.cern,https://github.com/root-project/root/pull/11865,9,"['Depend', 'depend']","['Dependabot', 'dependabot']"
Integrability,"/code></a> fix infinite loop on windows machines</li>; <li><a href=""https://github.com/isaacs/node-mkdirp/commit/d784e70d1eb3fc73bcda52f22f57ec55c00c2525""><code>d784e70</code></a> 0.5.3</li>; <li><a href=""https://github.com/isaacs/node-mkdirp/commit/d612c5ddca62d50282147f5d199810bf1de0b314""><code>d612c5d</code></a> add files list so this package isn't a monster</li>; <li><a href=""https://github.com/isaacs/node-mkdirp/commit/b2e7ba0dd8ac7029735969c5a6062d49e839b30d""><code>b2e7ba0</code></a> 0.5.2</li>; <li>Additional commits viewable in <a href=""https://github.com/isaacs/node-mkdirp/compare/0.5.1...v0.5.6"">compare view</a></li>; </ul>; </details>; <details>; <summary>Maintainer changes</summary>; <p>This version was pushed to npm by <a href=""https://www.npmjs.com/~isaacs"">isaacs</a>, a new releaser for mkdirp since your current version.</p>; </details>; <br />. Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11865:9603,depend,dependabot,9603,https://root.cern,https://github.com/root-project/root/pull/11865,1,['depend'],['dependabot']
Integrability,/core/clingutils/inc -I/home/stephan/Projects/ROOT/core/clingutils/res -I/home/stephan/Projects/ROOT/core/cont/inc -I/home/stephan/Projects/ROOT/core/foundation/inc -I/home/stephan/Projects/ROOT/core/foundation/v7/inc -I/home/stephan/Projects/ROOT/core/foundation/res -I/home/stephan/Projects/ROOT/core/gui/inc -I/home/stephan/Projects/ROOT/core/meta/inc -I/home/stephan/Projects/ROOT/core/rint/inc -I/home/stephan/Projects/ROOT/core/textinput/inc -I/home/stephan/Projects/ROOT/core/textinput/src -I/home/stephan/Projects/ROOT/core/thread/inc -I/home/stephan/Projects/ROOT/core/zip/inc -I/home/stephan/Projects/ROOT/core/lzma/inc -I/usr/include -I/home/stephan/Projects/ROOT/core/lz4/inc -I/home/stephan/Projects/ROOT/core/zstd/inc -I/home/stephan/Projects/ROOT/core/unix/inc -I/home/stephan/Projects/ROOT/core/unix/../clib/res -I/home/stephan/Projects/ROOT/builtins/xxhash ROOT/TErrorDefaultHandler.hxx ROOT/TSequentialExecutor.hxx ROOT/StringConv.hxx Buttons.h Bytes.h Byteswap.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TColor.h TColorGradient.h TDatime.h TDirectory.h TEnv.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TInetAddress.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TObjString.h TParameter.h TPluginManager.h TPoint.h TPRegexp.h TProcessID.h TProcessUUID.h TQClass.h TQCommand.h TQConnection.h TQObject.h TRedirectOutputGuard.h TRefCnt.h TRef.h TRegexp.h TRemoteObject.h TROOT.h TRootIOCtor.h TStopwatch.h TStorage.h TString.h TStringLong.h TStyle.h TSysEvtHandler.h TSystemDirectory.h TSystemFile.h TSystem.h TTask.h TThreadSlots.h TTime.h TTimer.h TTimeStamp.h TUri.h TUrl.h TUUID.h TVersionCheck.h TVirtualAuth.h TVirtualFFT.h TVirtualGL.h TVirtualMonitoring.h TVirtualMutex.h TVirtualPadEditor.h TVirtualPad.h TVirtualPadPain,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12156:3053,Message,MessageTypes,3053,https://root.cern,https://github.com/root-project/root/issues/12156,1,['Message'],['MessageTypes']
Integrability,"/github.com/isaacs/node-mkdirp/commit/d784e70d1eb3fc73bcda52f22f57ec55c00c2525""><code>d784e70</code></a> 0.5.3</li>; <li><a href=""https://github.com/isaacs/node-mkdirp/commit/d612c5ddca62d50282147f5d199810bf1de0b314""><code>d612c5d</code></a> add files list so this package isn't a monster</li>; <li><a href=""https://github.com/isaacs/node-mkdirp/commit/b2e7ba0dd8ac7029735969c5a6062d49e839b30d""><code>b2e7ba0</code></a> 0.5.2</li>; <li>Additional commits viewable in <a href=""https://github.com/isaacs/node-mkdirp/compare/0.5.1...v0.5.6"">compare view</a></li>; </ul>; </details>; <details>; <summary>Maintainer changes</summary>; <p>This version was pushed to npm by <a href=""https://www.npmjs.com/~isaacs"">isaacs</a>, a new releaser for mkdirp since your current version.</p>; </details>; <br />. Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR a",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11865:9632,depend,dependabot-automerge-start,9632,https://root.cern,https://github.com/root-project/root/pull/11865,2,['depend'],"['dependabot-automerge-end', 'dependabot-automerge-start']"
Integrability,"/isaacs/node-mkdirp/commit/2867920c08dc6c47bad0ea5b385a8e78bade0c8f""><code>2867920</code></a> fix infinite loop on windows machines</li>; <li><a href=""https://github.com/isaacs/node-mkdirp/commit/d784e70d1eb3fc73bcda52f22f57ec55c00c2525""><code>d784e70</code></a> 0.5.3</li>; <li><a href=""https://github.com/isaacs/node-mkdirp/commit/d612c5ddca62d50282147f5d199810bf1de0b314""><code>d612c5d</code></a> add files list so this package isn't a monster</li>; <li><a href=""https://github.com/isaacs/node-mkdirp/commit/b2e7ba0dd8ac7029735969c5a6062d49e839b30d""><code>b2e7ba0</code></a> 0.5.2</li>; <li>Additional commits viewable in <a href=""https://github.com/isaacs/node-mkdirp/compare/0.5.1...v0.5.6"">compare view</a></li>; </ul>; </details>; <details>; <summary>Maintainer changes</summary>; <p>This version was pushed to npm by <a href=""https://www.npmjs.com/~isaacs"">isaacs</a>, a new releaser for mkdirp since your current version.</p>; </details>; <br />. Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11865:9457,Depend,Dependabot,9457,https://root.cern,https://github.com/root-project/root/pull/11865,1,['Depend'],['Dependabot']
Integrability,"/local/include/xrootd/private; -- libraries: /usr/local/lib/libXrdUtils.so;/usr/local/lib/libXrdClient.so;/usr/local/lib/libXrdCl.so; CMake Warning (dev) at /usr/local/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:438 (message):; The package name passed to `find_package_handle_standard_args` (PkgConfig); does not match the name of the calling package (Arrow). This can lead to; problems in calling code that expects `find_package` result variables; (e.g., `_FOUND`) to follow a certain pattern.; Call Stack (most recent call first):; /usr/local/share/cmake/Modules/FindPkgConfig.cmake:99 (find_package_handle_standard_args); cmake/modules/FindArrow.cmake:39 (include); cmake/modules/SearchInstalledSoftware.cmake:17 (_find_package); cmake/modules/SearchInstalledSoftware.cmake:1040 (find_package); CMakeLists.txt:245 (include); This warning is for project developers. Use -Wno-dev to suppress it. I just ignored it.; after command: cmake --build . --target install, everything goes well and then it stopped with following message. [ 52%] Generating G__Core.cxx, ../lib/Core.pcm; #0 0x00000000044aaf65 llvm::sys::PrintStackTrace(llvm::raw_ostream&) Signals.cpp:0:0; #1 0x00000000044a91b6 llvm::sys::RunSignalHandlers() Signals.cpp:0:0; #2 0x00000000044ab726 SignalHandler(int) Signals.cpp:0:0; #3 0x0000000804b32580 (/lib/libthr.so.3+0x1a580); #4 0x0000000804b31b3f (/lib/libthr.so.3+0x19b3f); #5 0x00007ffffffff2d3 ([vdso]+0x2d3); #6 0x0000000804e8ee84 strlen (/lib/libc.so.7+0x157e84); #7 0x000000000161c729 std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::basic_string<std::nullptr_t>(char const*) rootcling_stage1.cxx:0:0; #8 0x000000000161c673 GetEtcDir() rootcling_stage1.cxx:0:0; #9 0x0000000001686202 RootClingMain(int, char**, bool) (/home/cai/root/bld/core/rootcling_stage1/src/rootcling_stage1+0x1686202); #10 0x0000000001697075 ROOT_rootcling_Driver (/home/cai/root/bld/core/rootcling_stage1/src/rootcling_stage1+0x1697075); Stack dump:; 0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11430:1776,message,message,1776,https://root.cern,https://github.com/root-project/root/issues/11430,1,['message'],['message']
Integrability,/src/FWCore/Framework/interface/EventSetupRecordImpl.h:45:; While building module 'FWCoreParameterSet' imported from /data/cmsbld/jenkins/workspace/build-any-ib/w/tmp/BUILDROOT/8111f4777df89fbcfd3398ad239ef48c/opt/cmssw/el8_amd64_gcc11/cms/cmssw/CMSSW_12_6_CXXMODULE_X_2022-11-22-2300/src/FWCore/ServiceRegistry/interface/ServiceRegistry.h:22:; While building module 'FWCorePluginManager' imported from /data/cmsbld/jenkins/workspace/build-any-ib/w/tmp/BUILDROOT/8111f4777df89fbcfd3398ad239ef48c/opt/cmssw/el8_amd64_gcc11/cms/cmssw/CMSSW_12_6_CXXMODULE_X_2022-11-22-2300/include/el8_amd64_gcc11/cxxmodules/../../../src/FWCore/ParameterSet/interface/ParameterSetDescriptionFillerPluginFactory.h:24:; In file included from <module-includes>:1:; In file included from /data/cmsbld/jenkins/workspace/build-any-ib/w/tmp/BUILDROOT/8111f4777df89fbcfd3398ad239ef48c/opt/cmssw/el8_amd64_gcc11/cms/cmssw/CMSSW_12_6_CXXMODULE_X_2022-11-22-2300/include/el8_amd64_gcc11/cxxmodules/../../../src/FWCore/PluginManager/interface/CacheParser.h:33:; In file included from /data/cmsbld/jenkins/workspace/build-any-ib/w/tmp/BUILDROOT/8111f4777df89fbcfd3398ad239ef48c/opt/cmssw/el8_amd64_gcc11/cms/cmssw/CMSSW_12_6_CXXMODULE_X_2022-11-22-2300/src/FWCore/PluginManager/interface/PluginInfo.h:22:; In file included from /data/cmsbld/jenkins/workspace/build-any-ib/w/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/bin/../lib/gcc/x86_64-redhat-linux-gnu/11.2.1/../../../../include/c++/11.2.1/filesystem:45:; /data/cmsbld/jenkins/workspace/build-any-ib/w/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/bin/../lib/gcc/x86_64-redhat-linux-gnu/11.2.1/../../../../include/c++/11.2.1/bits/fs_path.h:76:27: error: redefinition of '__is_encoded_char<char>'; inline constexpr bool __is_encoded_char<char> = true;; ^; /data/cmsbld/jenkins/workspace/build-any-ib/w/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/bin/../lib/gcc/x86_64-redhat-linux-gnu/11.2.1/../../../../i,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11765:6382,interface,interface,6382,https://root.cern,https://github.com/root-project/root/issues/11765,1,['interface'],['interface']
Integrability,"/tmva/TMVA_Higgs_Classification.py"", line 141, in <module>; factory.BookMethod(; File ""/builddir/build/BUILD/root-6.28.00/redhat-linux-build/lib/ROOT/_pythonization/_tmva/_factory.py"", line 61, in BookMethod; return self._BookMethod(*args, **kwargs); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; TypeError: none of the 3 overloaded methods succeeded. Full details:; TMVA::MethodBase* TMVA::Factory::BookMethod(TMVA::DataLoader* loader, TString theMethodName, TString methodTitle, TString theOption = """") =>; TypeError: could not convert argument 2; TMVA::MethodBase* TMVA::Factory::BookMethod(TMVA::DataLoader* loader, TMVA::Types::EMVA theMethod, TString methodTitle, TString theOption = """") =>; runtime_error: FATAL error; TMVA::MethodBase* TMVA::Factory::BookMethod(TMVA::DataLoader*, TMVA::Types::EMVA, TString, TString, TMVA::Types::EMVA, TString) =>; TypeError: takes at least 6 arguments (4 given); CMake Error at /builddir/build/BUILD/root-6.28.00/redhat-linux-build/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### tutorial-tmva-TMVA_RNN_Classification-py. TypeError: none of the 3 overloaded methods succeeded.; ~~~; 1272/1272 Test #1269: tutorial-tmva-TMVA_RNN_Classification-py ............................***Failed 1.39 sec; Warning in <TMVA_RNN_Classificaton>: Skip using Keras since tensorflow is not installed; Warning in <TMVA_RNN_Classification>: TMVA is not build with GPU or CPU multi-thread support. Cannot use TMVA Deep Learning for RNN; DataSetInfo : [dataset] : Added class ""Signal""; : Add Tree sgn of type Signal with 2000 events; DataSetInfo : [dataset] : Added class ""Background""; : Add Tree bkg of type Background with 2000 events; <FATAL> : Unknown method index in map: 0; ***> abort program execution; Running with nthreads = 25769803776; --- RNNClassification : Using input file: time_data_t10_d30.root; number of variables is 300; vars_time0[0]; [ --- ]; vars_time9[29]; prepared DATA LOADER ; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.2",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12429:12373,message,message,12373,https://root.cern,https://github.com/root-project/root/issues/12429,1,['message'],['message']
Integrability,"01-24-2300/external/slc7_amd64_gcc900/lib/libCling.so; #26 0x00002b8fceee69fa in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () from /cvmfs/cms-ib.cern.ch/week1/slc7_amd64_gcc900/cms/cmssw-patch/CMSSW_11_3_ROOT6_X_2021-01-24-2300/external/slc7_amd64_gcc900/lib/libCling.so; #27 0x00002b8fceee79e1 in cling::Interpreter::DeclareCFunction(llvm::StringRef, llvm::StringRef, bool, cling::Transaction*&) () from /cvmfs/cms-ib.cern.ch/week1/slc7_amd64_gcc900/cms/cmssw-patch/CMSSW_11_3_ROOT6_X_2021-01-24-2300/external/slc7_amd64_gcc900/lib/libCling.so; #28 0x00002b8fceeeaa2d in cling::Interpreter::compileFunction(llvm::StringRef, llvm::StringRef, bool, bool) () from /cvmfs/cms-ib.cern.ch/week1/slc7_amd64_gcc900/cms/cmssw-patch/CMSSW_11_3_ROOT6_X_2021-01-24-2300/external/slc7_amd64_gcc900/lib/libCling.so; #29 0x00002b8fcee7556b in TClingCallFunc::compile_wrapper (this=0x2b913aff4c00, wrapper_name=..., wrapper=..., withAccessControl=true) at /data/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc900/lcg/root/6.23.01-8e7a9c4406e195d049d6d9526c8e2ae6/root-6.23.01/core/metacling/src/TClingCallFunc.cxx:267; #30 0x00002b8fcee78390 in TClingCallFunc::make_wrapper (this=0x2b913aff4c00) at /data/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc900/lcg/root/6.23.01-8e7a9c4406e195d049d6d9526c8e2ae6/root-6.23.01/core/metacling/src/TClingCallFunc.cxx:1117; #31 0x00002b8fcee7d5a8 in TClingCallFunc::IFacePtr (this=0x2b913aff4c00) at /data/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc900/lcg/root/6.23.01-8e7a9c4406e195d049d6d9526c8e2ae6/root-6.23.01/core/metacling/src/TClingCallFunc.cxx:2301; #32 0x00002b8fced52d75 in TCling::CallFunc_IFacePtr (this=0x2b8fb708cf80, func=0x2b913aff4c00) at /data/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc900/lcg/root/6.23.01-8e7a9c4406e195d049d6d9526c8e2ae6/root-6.23.01/core/metacling/src/TCling.cxx:7882; #33 0x00002",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7093:10896,wrap,wrapper,10896,https://root.cern,https://github.com/root-project/root/issues/7093,1,['wrap'],['wrapper']
Integrability,"05	2.4577e-05	t=0.19; 	new:	3.25114e-07	3.25114e-07	3.25115e-07	3.25115e-07	2.4577e-05	t=0.41; 	ROOT:	7.94638e-14	7.95337e-14	7.9692e-14	7.98497e-14	2.4577e-05	t=0.3; Old integrator reached poor precision: 2.45769e-05 +/- 4.91464e-11 instead of 1e-06; Integrating log(a*x), relEps = 1e-08; 	 	mean 	median 	q95 	q99 	max; 	old:	1.62946e-08	1.62946e-08	1.62946e-08	1.62946e-08	1.62946e-08	t=1.26; 	new:	3.98296e-10	3.98296e-10	3.98297e-10	3.98297e-10	1.62946e-08	t=1.48; 	ROOT:	7.94604e-14	7.95337e-14	7.96915e-14	7.98493e-14	1.62946e-08	t=0.38; [ OK ] Roo1DIntegrator.ConvergenceSettings_log (4402 ms); [ RUN ] Roo1DIntegrator.ConvergenceSettings_pol4; Integrating Polynomial 4th order, relEps = 0.001; 	 	mean 	median 	q95 	q99 	max; 	old:	3.01835e-16	1.45346e-16	5.65891e-16	2.22915e-15	1.15949e-13	t=0.04; 	new:	3.3408e-16	1.84038e-16	6.31068e-16	2.24297e-15	1.15949e-13	t=0.05; 	ROOT:	3.09356e-16	1.56283e-16	5.63307e-16	2.02418e-15	1.15949e-13	t=0.05; Integrating Polynomial 4th order, relEps = 1e-06; 	 	mean 	median 	q95 	q99 	max; 	old:	1.40432e-16	2.12767e-16	4.25546e-16	4.25569e-16	6.38354e-16	t=0.05; 	new:	1.77284e-16	2.12771e-16	4.25564e-16	6.38325e-16	6.38354e-16	t=0.04; 	ROOT:	1.44538e-16	2.12768e-16	4.25551e-16	4.25569e-16	6.38354e-16	t=0.06; Integrating Polynomial 4th order, relEps = 1e-08; 	 	mean 	median 	q95 	q99 	max; 	old:	1.40424e-16	2.12764e-16	4.25528e-16	4.25528e-16	6.38292e-16	t=0.06; 	new:	1.7536e-16	2.12764e-16	4.25528e-16	6.38292e-16	6.38292e-16	t=0.02; 	ROOT:	1.45531e-16	2.12764e-16	4.25528e-16	4.25528e-16	6.38292e-16	t=0.03; [ OK ] Roo1DIntegrator.ConvergenceSettings_pol4 (501 ms); [ RUN ] Roo1DIntegrator.ConvergenceSettings_breitWig; Integrating Breit-Wigner distribution, relEps = 0.001; 	 	mean 	median 	q95 	q99 	max; 	old:	0.0303175	0.0209141	0.0827284	0.116045	0.125775	t=0.05; 	new:	0.00084728	0.000305644	0.00479046	0.0129056	0.125775	t=0.02; 	ROOT:	1.69943e-06	6.01714e-12	2.93861e-09	6.96465e-08	0.125775	t=0.25; Old integrator reached poor precis",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6632:1711,Integrat,Integrating,1711,https://root.cern,https://github.com/root-project/root/pull/6632,1,['Integrat'],['Integrating']
Integrability,"1-22-2300/src/CalibTracker/Records/interface/SiPixel2DTemplateDBObjectESProducerRcd.h:4:10: remark: building module 'FWCoreFramework' as '/data/cmsbld/jenkins/workspace/build-any-ib/w/tmp/BUILDROOT/8111f4777df89fbcfd3398ad239ef48c/opt/cmssw/el8_amd64_gcc11/cms/cmssw/CMSSW_12_6_CXXMODULE_X_2022-11-22-2300/tmp/el8_amd64_gcc11/src/CalibTracker/Records/src/CalibTrackerRecords/a/FWCoreFramework.pcm' [-Rmodule-build]; #include ""FWCore/Framework/interface/EventSetupRecordImplementation.h""; ^; Error: Building module 'FWCoreFramework' implicitly. If 'FWCoreFramework' requires a ; dictionary please specify build dependency: 'tmp/el8_amd64_gcc11/src/CalibTracker/Records/src/CalibTrackerRecords/a/CalibTrackerRecords_xr.cc' depends on 'FWCoreFramework'.; Otherwise, specify '-mByproduct FWCoreFramework' to disable this diagnostic.; While building module 'CalibTrackerRecords':; While building module 'FWCoreFramework' imported from /data/cmsbld/jenkins/workspace/build-any-ib/w/tmp/BUILDROOT/8111f4777df89fbcfd3398ad239ef48c/opt/cmssw/el8_amd64_gcc11/cms/cmssw/CMSSW_12_6_CXXMODULE_X_2022-11-22-2300/src/CalibTracker/Records/interface/SiPixel2DTemplateDBObjectESProducerRcd.h:4:; While building module 'FWCoreServiceRegistry' imported from /data/cmsbld/jenkins/workspace/build-any-ib/w/tmp/BUILDROOT/8111f4777df89fbcfd3398ad239ef48c/opt/cmssw/el8_amd64_gcc11/cms/cmssw/CMSSW_12_6_CXXMODULE_X_2022-11-22-2300/src/FWCore/Framework/interface/EventSetupRecordImpl.h:45:; While building module 'FWCoreParameterSet' imported from /data/cmsbld/jenkins/workspace/build-any-ib/w/tmp/BUILDROOT/8111f4777df89fbcfd3398ad239ef48c/opt/cmssw/el8_amd64_gcc11/cms/cmssw/CMSSW_12_6_CXXMODULE_X_2022-11-22-2300/src/FWCore/ServiceRegistry/interface/ServiceRegistry.h:22:; While building module 'FWCorePluginManager' imported from /data/cmsbld/jenkins/workspace/build-any-ib/w/tmp/BUILDROOT/8111f4777df89fbcfd3398ad239ef48c/opt/cmssw/el8_amd64_gcc11/cms/cmssw/CMSSW_12_6_CXXMODULE_X_2022-11-22-2300/include/el8_amd64_gcc11/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11765:5098,interface,interface,5098,https://root.cern,https://github.com/root-project/root/issues/11765,1,['interface'],['interface']
Integrability,1. Annotate more RooFit interfaces with the `RooFit::OwningPtr<T>` type.; 2. Fix memory leaks in RooFit tutorials by wrapping toy datasets in `std::unique_ptr`; 3. Fix a warning in the tutorials by consistently using `override` in the code generated by `RooClassFactory`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13096:24,interface,interfaces,24,https://root.cern,https://github.com/root-project/root/pull/13096,2,"['interface', 'wrap']","['interfaces', 'wrapping']"
Integrability,"1. Create TWebCanvas from TRootGuiFactory if nothing else is configured; 2. Add warning message when web-based canvas started by default; 3. Add `Canvas.Name` parameter to rootrc to be able change default behaviour back; 4. Set `Canvas.Name` during configure depending if `webgui` compiled or not. Should behaves similar as with `TBrowser`.; If no extra command-line arguments are specified, web canvas will be started and warning message will appear.; Via `.rootrc ` file or with `--web=off` web canvas can be disabled. In batch mode one have to use `root --web -b tutorials/hsimple.C` to use web-based image generation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13107:88,message,message,88,https://root.cern,https://github.com/root-project/root/pull/13107,3,"['depend', 'message']","['depending', 'message']"
Integrability,1. Do not expose special parameters to URL string - now in default HTML file special attributes can be inserted together with `JSROOT.ConnectWebWindow` call; 2. Correctly handle `#` in WebWindow URL. Such symbol used for routing inside webpage and will be often used with openui5; 3. Unify handling of URL options with RWebDisplayArgs. For now only `key` and `batch_mode` parameters are exposed to web window URL; 4. Update/extend doxygen docu; 5. Fix error in v7 CanvasPainter - v616 already fixed,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3561:221,rout,routing,221,https://root.cern,https://github.com/root-project/root/pull/3561,1,['rout'],['routing']
Integrability,1. Fix - handle reordering of fragments in multipart reply https://github.com/root-project/jsroot/issues/319; 2. Fix - properly show non-zero entries https://github.com/root-project/jsroot/issues/320; 3. Fix - display empty hist bin if fSumw2 not zero; 4. Fix - let use batch_mode script injection in interactive session,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16792:288,inject,injection,288,https://root.cern,https://github.com/root-project/root/pull/16792,1,['inject'],['injection']
Integrability,"1. Fix problem with fragmented websocket messages - some browsers can split messages on 120KB chunks. Now message merged together before delivered to the user.; 2. Solve problem with Google Chrome run in headless mode. ; Now chrome browser can run in headless mode without any special debugging flags, which opens some http ports. Now THttpServer provides special ""dummy"" script, which timedout until batch job is not finished.; 3. Try to correctly handle situation when browser hangs and does not reply for a long time. After pre-configured timeout (default 50 sec) such browser application will be closed.; 4. Let identify connecting websocket at the very beginning - with the first connect request. Allows to reject not allowed connection. Also for the future simplifies re-connection.; 5. In TWebWindow clearly identify batch job connection, let reuse if for consequent jobs, close it after 20 sec of idle time; 6. Use std::recursive_mutex in WebWindowsManager to protect methods which creates THttpServer / creates new window / starts new web browser. Comment out special manager guard - useless without special threading functionality; 7. Correspondent changes in JSROOT. ; 8. Special handling of 2d/3d canvas when producing PNG images - now is more consistent, no need to use THREE.SVGRenderer for that; 9. Add canvas size to the RPadDisplayItem class, used only in batch mode to configure image size; 10. Use workaround with static mutex to protect I/O in canvas painter in multi-threaded environment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2603:41,message,messages,41,https://root.cern,https://github.com/root-project/root/pull/2603,3,['message'],"['message', 'messages']"
Integrability,"1. Introduce special timer to send data to clients. If not everything can be send at once, after short timeout will be tried again; 2. Extend functionality of control message, manage it per connection. All special messages like enabling editor, moving web browser, enable/disable tooltip - all belong now to control message; 3. Change message priority, try to send as much as possible. First one sends control message, then specially requests for menu or projection and finally update for canvas drawing.; 4. Implement `Raise() / Iconify()` methods, they fully depend on the web browser",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13285:167,message,message,167,https://root.cern,https://github.com/root-project/root/pull/13285,6,"['depend', 'message']","['depend', 'message', 'messages']"
Integrability,"1. Let load and directly draw `TGeoVolume` object in geometry viewer - disregard of `TGeoManager` state; 2. Let draw `TGeoVolumeAssembly` from `RBrowser`; 3. Functionality to produce JSON from geometry viewer data, such JSON can be used on JSROOT for three.js model generation; 4. Update JSROOT; 5. Remove dependency from EVE7 components in geometry viewer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11449:306,depend,dependency,306,https://root.cern,https://github.com/root-project/root/pull/11449,1,['depend'],['dependency']
Integrability,"1. Loopback is always on for web widgets, only unix socket configured by `rootssh` can be enabled; 2. Also disable usage of FastCGI with web widgets (never tested with webgui, may be used by REve); 3. Shrink warning messages for `TWebCanvas` and `RBrowser`, do not mention `--web=server:port` which is not secure for previous releases and will not work with recent fixes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14119:216,message,messages,216,https://root.cern,https://github.com/root-project/root/pull/14119,1,['message'],['messages']
Integrability,"1. Process active pad `TExec` when pad click/mouse move event is produced. JSROOT client deliver such events only when execs are configured. Good example is `hist/DynamicSlice.C` tutorial; 2. Process `TExec` from histogram list of functions. Here execs processed when client confirms drawing and returns applied ranges. Working example is `hist/htproj.C` tutorial; 3. Analyze modification of sub-pads, only data for modified pads send to the client. Improve performance when canvas with many sub-pads, but only few of them are modified. Good example is `hist/tprofile2polyRealistic.C` tutorial, which currently working very slow. ; 4. Optimize server/client communication. If canvas marked modified without real change of data, no extra message will be send to client. Also allows break self-triggered Modify/Update loops with `TExec` ; 5. Adjust several `TExec` tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11727:737,message,message,737,https://root.cern,https://github.com/root-project/root/pull/11727,1,['message'],['message']
Integrability,"1. Rename `rootssh.sh` -> `rootssh`; 2. Let run commands on remote node with `rootssh` like; ```; [shell] rootssh user@remotehost ""source path/to/bin/thisroot.sh; root --web=server -e 'new TBrowser'""; ``` ; 3. Let specify local port and browser kind for `rootssh`:; ```; [shell] rootssh --port 7575 -browser chromium user@remotehost ""source path/to/bin/thisroot.sh; root --web=server -e 'new TBrowser'""; ``` ; 4. Provide usage printout when `rootssh` called without arguments; ; 5. Add possibility to create `TWebCanvas` and `RBrowser` in base `TGuiFactory` class via plugin mechanism when web display is configured. Let use these web-based widgets when only `gBatchGuiFactory` is created.; 6. Remove dependency of `TWebCanvas` from `Gui` library, no need for special gui factory while now base class can be used.; 7. Provide plugin to be able caret `TWebCanvas` via plugin manager.; 8. Fix problem in `TBrowserImp` plugins definition - `Option_t *` was not mentioned in methods signatures.; 9. Update release notes",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11822:701,depend,dependency,701,https://root.cern,https://github.com/root-project/root/pull/11822,1,['depend'],['dependency']
Integrability,"1. Support `TBox`, `TLatex`, `TLine`, `TMarker` drawing on ""frame"", support drawing on swapped axes; 2. Improve performance of TH3/RH3 drawing by using THREE.InstancedMesh; 3. Implement batch mode with '&batch' URL parameter to create SVG/PNG images with default GUI; 4. Adjust node.js implementation to produce identical output with normal browser; 5. Create necessary infrastructure for testing with 'puppeteer'; 6. Support inject of ES6 modules via '&inject=path.mjs'; 7. Using importmap for 'jsroot' in all major HTML files and in demos; 8. Implement `settings.CutAxisLabels` flag to remove labels which may exceed graphical range; 9. Let save canvas as JSON file from context menu, object as JSON from inspector; 10. Upgrade three.js r162 -> r168, use r162 only in node.js because of ""gl"" module; 11. Create unified svg2pdf/jspdf ES6 module, works both in browsers and node.js; 12. Internals - upgrade to eslint 9; 13. Fix - correctly handle in I/O empty std::map; 14. Fix - reading of small (<1KB) ROOT files; 15. Fix - race condition in zstd initialization [#318](https://github.com/root-project/jsroot/issues/318); 16. Fix - deployment with zstd [#317](https://github.com/root-project/jsroot/issues/317); 17. Remove unused md5.mjs",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16416:426,inject,inject,426,https://root.cern,https://github.com/root-project/root/pull/16416,2,['inject'],['inject']
Integrability,"1. Support plain TBranch; 2. Fix error with item double-click; 3. When any ROOT files opened, show ""ROOT Files"" subfolder with files inside; 4. Show warning message when double-click action takes too long time; 5. Provide toggle button between current dir and top folder",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7938:157,message,message,157,https://root.cern,https://github.com/root-project/root/pull/7938,1,['message'],['message']
Integrability,"1. When filter expression entered, reopen folders again. Means if `TFile` keys were shown, they will be shown again. ; 2. When object like `TH1` or `TTree` read from `TFile`, it will be removed from managed objects and owned by `RBrowser`. This allows to correctly work with different histograms version at the time.; 3. Show `TFile` size ; 4. Fix two LGTM warnings; 5. Add `root7` as dependency for `RGeomViewer`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11585:385,depend,dependency,385,https://root.cern,https://github.com/root-project/root/pull/11585,1,['depend'],['dependency']
Integrability,"1.0.7"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=path-parse&package-manager=npm_and_yarn&previous-version=1.0.6&new-version=1.0.7)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11863:931,Depend,Dependabot,931,https://root.cern,https://github.com/root-project/root/pull/11863,9,"['Depend', 'depend']","['Dependabot', 'dependabot']"
Integrability,"1098: tutorial-dataframe-df006_ranges-py ..................................***Failed 7.50 sec; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/tutorials/dataframe/df006_ranges.py"", line 44, in <module>; d_15_end_3 = d.Range(15, 0, 3); ^^^^^^^^^^^^^^^^^; TypeError: none of the 2 overloaded methods succeeded. Full details:; ROOT::RDF::RInterface<ROOT::Detail::RDF::RRange<ROOT::Detail::RDF::RLoopManager>,void> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Range(unsigned int end) =>; TypeError: takes at most 1 arguments (3 given); ROOT::RDF::RInterface<ROOT::Detail::RDF::RRange<ROOT::Detail::RDF::RLoopManager>,void> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Range(unsigned int begin, unsigned int end, unsigned int stride = 1) =>; runtime_error: Range: stride must be strictly greater than 0 and end must be greater than begin.; CMake Error at /builddir/build/BUILD/root-6.28.00/redhat-linux-build/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### tutorial-fit-combinedFit-py. cppyy.gbl.std.out_of_range: none of the 2 overloaded methods succeeded.; ~~~; 1110/1272 Test #1115: tutorial-fit-combinedFit-py .........................................***Failed 1.71 sec; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/tutorials/fit/combinedFit.py"", line 98, in <module>; fitter.Config().ParSettings(4).Fix(); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; cppyy.gbl.std.out_of_range: none of the 2 overloaded methods succeeded. Full details:; const ROOT::Fit::ParameterSettings& ROOT::Fit::FitConfig::ParSettings(unsigned int i) =>; out_of_range: vector::_M_range_check: __n (which is 0) >= this->size() (which is 0); ROOT::Fit::ParameterSettings& ROOT::Fit::FitConfig::ParSettings(unsigned int i) =>; out_of_range: vector::_M_range_check: __n (which is 0) >= this->size() (which is 0); CMake Error at /builddir/build/BUILD/root-6.28.00/redhat-linux-build/RootTestDriver.cmake:232 (message):; error code: 1; ~~~.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12429:5734,message,message,5734,https://root.cern,https://github.com/root-project/root/issues/12429,1,['message'],['message']
Integrability,"136; 28: Field 'fFunc' is not equal to null in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:150; 29: '?' condition is true in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:150; 30: expanded from macro 'assert' in /usr/include/assert.h:93; 31: Assuming field 'fDim' is equal to 1 in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:153; 32: Taking true branch in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:153; 33: Calling constructor for 'WrappedMemFunction<ROOT::Fit::FitUtil::IntegralEvaluator<ROOT::Fit::FitUtil::ParamDerivFunc<ROOT::Math::IParametricGradFunctionMultiDimTempl<double>>>, double (ROOT::Fit::FitUtil::IntegralEvaluator<ROOT::Fit::FitUtil::ParamDerivFunc<ROOT::Math::IParametricGradFunctionMultiDimTempl<double>>>::*)(double) const>' in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:155; 34: Returning from constructor for 'WrappedMemFunction<ROOT::Fit::FitUtil::IntegralEvaluator<ROOT::Fit::FitUtil::ParamDerivFunc<ROOT::Math::IParametricGradFunctionMultiDimTempl<double>>>, double (ROOT::Fit::FitUtil::IntegralEvaluator<ROOT::Fit::FitUtil::ParamDerivFunc<ROOT::Math::IParametricGradFunctionMultiDimTempl<double>>>::*)(double) const>' in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:155; 35: Returning from 'IntegralEvaluator::SetFunction' in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:136; 36: Returning from constructor for 'IntegralEvaluator<ROOT::Fit::FitUtil::ParamDerivFunc<ROOT::Math::IParametricGradFunctionMultiDimTempl<double>>>' in /opt/root_src/math/mathcore/src/FitUtil.cxx:207; 37: Assuming 'k' is < 'npar' in /opt/root_src/math/mathcore/src/FitUtil.cxx:210; 38: Loop condition is true. Entering loop body in /opt/root_src/math/mathcore/src/FitUtil.cxx:210; 39: Passing null pointer value via 2nd parameter 'x2' in /opt/root_src/math/mathcore/src/FitUtil.cxx:212; 40: Calling 'IntegralEvaluator::operator()' in /opt/root_src/math/mathcore/src/FitUtil.cxx:212; 41: Assuming field 'fIg1Dim' is null in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:207; 42: Taking f",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7458:11975,Wrap,WrappedMemFunction,11975,https://root.cern,https://github.com/root-project/root/issues/7458,1,['Wrap'],['WrappedMemFunction']
Integrability,"136; 28: Field 'fFunc' is not equal to null in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:150; 29: '?' condition is true in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:150; 30: expanded from macro 'assert' in /usr/include/assert.h:93; 31: Assuming field 'fDim' is equal to 1 in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:153; 32: Taking true branch in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:153; 33: Calling constructor for 'WrappedMemFunction<ROOT::Fit::FitUtil::IntegralEvaluator<ROOT::Fit::FitUtil::ParamDerivFunc<ROOT::Math::IParametricGradFunctionMultiDimTempl<double>>>, double (ROOT::Fit::FitUtil::IntegralEvaluator<ROOT::Fit::FitUtil::ParamDerivFunc<ROOT::Math::IParametricGradFunctionMultiDimTempl<double>>>::*)(double) const>' in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:155; 34: Returning from constructor for 'WrappedMemFunction<ROOT::Fit::FitUtil::IntegralEvaluator<ROOT::Fit::FitUtil::ParamDerivFunc<ROOT::Math::IParametricGradFunctionMultiDimTempl<double>>>, double (ROOT::Fit::FitUtil::IntegralEvaluator<ROOT::Fit::FitUtil::ParamDerivFunc<ROOT::Math::IParametricGradFunctionMultiDimTempl<double>>>::*)(double) const>' in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:155; 35: Returning from 'IntegralEvaluator::SetFunction' in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:136; 36: Returning from constructor for 'IntegralEvaluator<ROOT::Fit::FitUtil::ParamDerivFunc<ROOT::Math::IParametricGradFunctionMultiDimTempl<double>>>' in /opt/root_src/math/mathcore/src/FitUtil.cxx:207; 37: Assuming 'k' is < 'npar' in /opt/root_src/math/mathcore/src/FitUtil.cxx:210; 38: Loop condition is true. Entering loop body in /opt/root_src/math/mathcore/src/FitUtil.cxx:210; 39: Passing null pointer value via 2nd parameter 'x2' in /opt/root_src/math/mathcore/src/FitUtil.cxx:212; 40: Calling 'IntegralEvaluator::operator()' in /opt/root_src/math/mathcore/src/FitUtil.cxx:212; 41: Field 'fIg1Dim' is non-null in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:207; 42: Taking true b",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7458:7191,Wrap,WrappedMemFunction,7191,https://root.cern,https://github.com/root-project/root/issues/7458,1,['Wrap'],['WrappedMemFunction']
Integrability,"14.32.31326\include\type_traits(585): message : see reference to class template instantiation 'llvm::detail::copy_construction_triviality_helper<T>' being compiled [C:\build\night\LABEL\windows64\SPEC\default\V\master\build\interpreter\cling\lib\Utils\obj.clingUtils.vcxproj]; 04:42:17 with; 04:42:17 [; 04:42:17 T=clang::FixItHint; 04:42:17 ]; 04:42:17 C:\build\night\LABEL\windows64\SPEC\default\V\master\root\interpreter\llvm\src\include\llvm/Support/type_traits.h(100): message : see reference to class template instantiation 'std::is_copy_constructible<llvm::detail::copy_construction_triviality_helper<T>>' being compiled [C:\build\night\LABEL\windows64\SPEC\default\V\master\build\interpreter\cling\lib\Utils\obj.clingUtils.vcxproj]; 04:42:17 with; 04:42:17 [; 04:42:17 T=clang::FixItHint; 04:42:17 ]; 04:42:17 C:\build\night\LABEL\windows64\SPEC\default\V\master\root\interpreter\llvm\src\include\llvm/ADT/SmallVector.h(312): message : see reference to class template instantiation 'llvm::is_trivially_copy_constructible<T>' being compiled [C:\build\night\LABEL\windows64\SPEC\default\V\master\build\interpreter\cling\lib\Utils\obj.clingUtils.vcxproj]; 04:42:17 with; 04:42:17 [; 04:42:17 T=clang::FixItHint; 04:42:17 ]; 04:42:17 C:\build\night\LABEL\windows64\SPEC\default\V\master\root\interpreter\llvm\src\include\llvm/ADT/SmallVector.h(1168): message : see reference to class template instantiation 'llvm::SmallVectorImpl<T>' being compiled [C:\build\night\LABEL\windows64\SPEC\default\V\master\build\interpreter\cling\lib\Utils\obj.clingUtils.vcxproj]; 04:42:17 with; 04:42:17 [; 04:42:17 T=clang::FixItHint; 04:42:17 ]; 04:42:17 C:\build\night\LABEL\windows64\SPEC\default\V\master\root\interpreter\llvm\src\tools\clang\include\clang/Basic/Diagnostic.h(180): message : see reference to class template instantiation 'llvm::SmallVector<clang::FixItHint,6>' being compiled [C:\build\night\LABEL\windows64\SPEC\default\V\master\build\interpreter\cling\lib\Utils\obj.clingUtils.vcxproj]; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12379:1494,message,message,1494,https://root.cern,https://github.com/root-project/root/pull/12379,6,['message'],['message']
Integrability,"1da4cd4006""><code>f8145c5</code></a> Add 'allowWindowsEscape' option</li>; <li><a href=""https://github.com/isaacs/minimatch/commit/570e8b1aef6c9e823a824aa0b9be10db43857cd7""><code>570e8b1</code></a> add publishConfig for v3 publishes</li>; <li><a href=""https://github.com/isaacs/minimatch/commit/5b7cd3372be253759fb4d865eb3f38f189a5fcdf""><code>5b7cd33</code></a> 3.0.6</li>; <li><a href=""https://github.com/isaacs/minimatch/commit/20b4b562830680867feb75f9c635aca08e5c86ff""><code>20b4b56</code></a> [fix] revert all breaking syntax changes</li>; <li><a href=""https://github.com/isaacs/minimatch/commit/2ff038852ec03e85e60e0eb333005c680ac8a543""><code>2ff0388</code></a> document, expose, and test 'partial:true' option</li>; <li>Additional commits viewable in <a href=""https://github.com/isaacs/minimatch/compare/v3.0.4...v3.1.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=minimatch&package-manager=npm_and_yarn&previous-version=3.0.4&new-version=3.1.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11864:1914,depend,dependency-name,1914,https://root.cern,https://github.com/root-project/root/pull/11864,1,['depend'],['dependency-name']
Integrability,"2022\Community\VC\Tools\MSVC\14.35.32215\include\format(3526,20): message : or 'std::wstring std::format<const std::unique_ptr<llvm::GIMatchDagPredicate,std::default_delete<llvm::GIMatchDagPredicate>>*>(const std::basic_format_string<wchar_t,const std::unique_ptr<llvm::GIMatchDagPredicate,std::default_delete<llvm::GIMatchDagPredicate>> *>,const std::unique_ptr<llvm::GIMatchDagPredicate,std::default_delete<llvm::GIMatchDagPredicate>> *&&)' [found using argument-dependent lookup] [C:\Users\bellenot\build\x64\release\interpreter\llvm\src\utils\TableGen\GlobalISel\LLVMTableGenGlobalISel.vcxproj]; interpreter\llvm\src\utils\TableGen\GlobalISel\GIMatchDag.cpp(85,11): message : 'std::wstring std::format<const std::unique_ptr<llvm::GIMatchDagPredicate,std::default_delete<llvm::GIMatchDagPredicate>>*>(const std::basic_format_string<wchar_t,const std::unique_ptr<llvm::GIMatchDagPredicate,std::default_delete<llvm::GIMatchDagPredicate>> *>,const std::unique_ptr<llvm::GIMatchDagPredicate,std::default_delete<llvm::GIMatchDagPredicate>> *&&)': cannot convert argument 1 from 'const char [5]' to 'const std::basic_format_string<wchar_t,const std::unique_ptr<llvm::GIMatchDagPredicate,std::default_delete<llvm::GIMatchDagPredicate>> *>' [C:\Users\bellenot\build\x64\release\interpreter\llvm\src\utils\TableGen\GlobalISel\LLVMTableGenGlobalISel.vcxproj]; interpreter\llvm\src\utils\TableGen\GlobalISel\GIMatchDag.cpp(85,18): message : No constructor could take the source type, or constructor overload resolution was ambiguous [C:\Users\bellenot\build\x64\release\interpreter\llvm\src\utils\TableGen\GlobalISel\LLVMTableGenGlobalISel.vcxproj]; C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\format(3521,19): message : or 'std::string std::format<const std::unique_ptr<llvm::GIMatchDagPredicate,std::default_delete<llvm::GIMatchDagPredicate>>*>(const std::basic_format_string<char,const std::unique_ptr<llvm::GIMatchDagPredicate,std::default_delete<llvm::GIMatc",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12523:7563,message,message,7563,https://root.cern,https://github.com/root-project/root/pull/12523,1,['message'],['message']
Integrability,"292e-16	t=0.06; 	new:	1.7536e-16	2.12764e-16	4.25528e-16	6.38292e-16	6.38292e-16	t=0.02; 	ROOT:	1.45531e-16	2.12764e-16	4.25528e-16	4.25528e-16	6.38292e-16	t=0.03; [ OK ] Roo1DIntegrator.ConvergenceSettings_pol4 (501 ms); [ RUN ] Roo1DIntegrator.ConvergenceSettings_breitWig; Integrating Breit-Wigner distribution, relEps = 0.001; 	 	mean 	median 	q95 	q99 	max; 	old:	0.0303175	0.0209141	0.0827284	0.116045	0.125775	t=0.05; 	new:	0.00084728	0.000305644	0.00479046	0.0129056	0.125775	t=0.02; 	ROOT:	1.69943e-06	6.01714e-12	2.93861e-09	6.96465e-08	0.125775	t=0.25; Old integrator reached poor precision: 0.0303175 +/- 0.0273059 instead of 0.001; Integrating Breit-Wigner distribution, relEps = 1e-06; 	 	mean 	median 	q95 	q99 	max; 	old:	3.37556e-06	3.37556e-06	3.39334e-06	3.39492e-06	3.39532e-06	t=0.18; 	new:	2.27034e-08	2.27035e-08	2.28213e-08	2.28318e-08	3.39532e-06	t=0.18; 	ROOT:	1.98411e-16	2.29224e-16	4.58502e-16	4.58676e-16	3.39532e-06	t=0.16; Integrating Breit-Wigner distribution, relEps = 1e-08; 	 	mean 	median 	q95 	q99 	max; 	old:	2.28344e-08	2.28344e-08	2.28344e-08	2.28344e-08	2.28344e-08	t=0.3; 	new:	1.21223e-10	1.21223e-10	1.21223e-10	1.21223e-10	2.28344e-08	t=0.25; 	ROOT:	2.1239e-16	2.29339e-16	4.58677e-16	5.73346e-16	2.28344e-08	t=0.2; [ OK ] Roo1DIntegrator.ConvergenceSettings_breitWig (1691 ms); [ RUN ] Roo1DIntegrator.ConvergenceSettings_Erf; Integrating Gaussian distribution, relEps = 0.001; 	 	mean 	median 	q95 	q99 	max; 	old:	7.08849e-07	1.10954e-07	3.73492e-06	5.0379e-06	5.42401e-06	t=0.04; 	new:	1.1389e-09	4.99603e-11	6.97092e-09	1.01533e-08	5.42401e-06	t=0.07; 	ROOT:	1.64064e-16	1.47929e-16	3.92701e-16	5.06943e-16	5.42401e-06	t=0.03; Integrating Gaussian distribution, relEps = 1e-06; 	 	mean 	median 	q95 	q99 	max; 	old:	5.85915e-11	5.85915e-11	5.92462e-11	5.93042e-11	5.93189e-11	t=0.02; 	new:	2.36704e-12	2.36701e-12	2.36767e-12	2.36784e-12	5.93189e-11	t=0.02; 	ROOT:	1.74104e-16	1.77729e-16	3.55466e-16	5.33192e-16	5.93189e-11	t=0.07; Integrating Gauss",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6632:3111,Integrat,Integrating,3111,https://root.cern,https://github.com/root-project/root/pull/6632,1,['Integrat'],['Integrating']
Integrability,"2b74b31cd79dc51b; which modifies the `TFileMerger` class. . The slow down affect ROOT versions `>= 6.22.08`. The problem is the call of the ; ```; else; dirtodelete.Add(result);; ```. When hadding files, those two lines are called for each object found in a TDirectory. ; So for instance if you store histograms in a TDirectory the directory is going to be added to `dirtodelete` as many times as you have histograms in that directory. And this slows down condiderably the hadd command as previously there was not such thing done. The deletion is called several times over the same object as well which is also inneficient. . With some inputs containing several TDirectories, hadding with ROOT version `6.22.06` takes around 1 hour on lxplus ; whereas with ROOT version `>= 6.22.08` it would take more than a day... I can provide inputs files to illustrate the problem that are stored here ; /eos/user/b/bouquet/VHbbcc_results/testHadd_3periods/; (3 files of size ~5GB each they contain ~640 TDirectory each one containing around 6000 histograms) . Or available thanks to the following link ; https://cernbox.cern.ch/index.php/s/FBryG2p5Lshp6Lx; (in practive you can download just one file and replicate it 2 times to have 3 files to hadd and do tests) . I can tell the hadd is much slower as the names of Tdirectory processed are printed out and the difference in time to process only just one TDirectory is large depending on the ROOT version used it takes few seconds (`v6.22.06`) versus 10-15 minutes (`>= v6.22.08`). . This bug needs to be absolutely fixed as it would affect many analyses and it needs backported to all the root versions starting from `6.22.08`. . I made a test commenting the two lines with the following gitlab repository https://gitlab.cern.ch/robouque/haddtests; ```; else; dirtodelete.Add(result);; ```; the speed is restored even using `ROOT 6.22.08`. So the problem really comes from adding the directory many times to that list. Many thanks in advance, ; Best, ; Romain",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9939:1686,depend,depending,1686,https://root.cern,https://github.com/root-project/root/issues/9939,1,['depend'],['depending']
Integrability,"2e4b30b8c2 [RF] Better server redirection in compileForNormSet without attributes; d5ca98077e [RF] New function for server changing without setting attributes; 1f8a1666d1 [RF] Factor out marking compiled args in `NormalizationHelpers`; 7db5be20e9 [RF] Support multiple NLL with BatchMode existing at the same time; 24f1ca4fc1 [RF] Add exception if `RooAbsArg::_dataToken` is corrupted; ef69ad7633 [RF] Refactor BatchMode likelihood creation code; 364f67393d [RF] Disable RooFit multiprocess ProcessTimer test; e7d4ec3a69 [RF] Introduce `ROOFIT_MEMORY_SAFE_INTERFACES` macro; 3fd6057316 [RF] Use `RooFit::OwningPtr<>` also for RooAbsReal::createIntegral(); 8ad7711af6 [RF] Fix several memory leaks in `RooProdPdf::rearrangeProduct()`; ab420820bb [RF] Remove unused `binb` variable in RooBinnedGenContext; 81fbc904d4 [RF] Less manual memory management in RooFit; ff32c33446 [RF] Modernize memory management in RooStats; d89d54ce65 [RF] Fix `getPropagatedError()` negative parameter case for zero error; 4542e761eb [RF] Flag `RooAbsArg::getObservables()` as returning owning pointer; c246acb066 [RF] Always use `addOwned()` overload that takes `unique_ptr`; f17180742c [RF] Add `ExternalConstraints`, createNLL() and fitTo() to ModelConfig; cf98956266 [RF] Add exceptions to setter methods for non-existing objects; 1cc5ec46c8 [RF] Forbid resetting RooFormula; b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test; 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes; 3dcea7036a [RF] Support simultaneous fits in NLL code generation; a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface; 3d01cd2e8f [RF] Remove deprecated RooAbsString; 059af6d55a [RF] Remove RooAbsRootFinder; bdc19e090e [RF] Get rid of RooScaledFunc; 88dbb6ad17 [RF] Make RooGenProdProj private; 94ee158ddc [RF] Remove deprecated RooCatType; d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12905:3041,interface,interface,3041,https://root.cern,https://github.com/root-project/root/pull/12905,1,['interface'],['interface']
Integrability,"3-11</h2>; <h3>Commits</h3>; <ul>; <li>security notice <a href=""https://github.com/minimistjs/minimist/commit/4cf1354839cb972e38496d35e12f806eea92c11f""><code>4cf1354</code></a></li>; <li>additional test for constructor prototype pollution <a href=""https://github.com/minimistjs/minimist/commit/1043d212c3caaf871966e710f52cfdf02f9eea4b""><code>1043d21</code></a></li>; </ul>; <h2><a href=""https://github.com/minimistjs/minimist/compare/v1.2.2...v1.2.3"">v1.2.3</a> - 2020-03-10</h2>; <h3>Commits</h3>; <ul>; <li>more failing proto pollution tests <a href=""https://github.com/minimistjs/minimist/commit/13c01a5327736903704984b7f65616b8476850cc""><code>13c01a5</code></a></li>; <li>even more aggressive checks for protocol pollution <a href=""https://github.com/minimistjs/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab""><code>38a4d1c</code></a></li>; </ul>; <h2><a href=""https://github.com/minimistjs/minimist/compare/v1.2.1...v1.2.2"">v1.2.2</a> - 2020-03-10</h2>; <h3>Commits</h3>; <ul>; <li>failing test for protocol pollution <a href=""https://github.com/minimistjs/minimist/commit/0efed0340ec8433638758f7ca0c77cb20a0bfbab""><code>0efed03</code></a></li>; <li>cleanup <a href=""https://github.com/minimistjs/minimist/commit/67d3722413448d00a62963d2d30c34656a92d7e2""><code>67d3722</code></a></li>; <li>console.dir -&gt; console.log <a href=""https://github.com/minimistjs/minimist/commit/47acf72c715a630bf9ea013867f47f1dd69dfc54""><code>47acf72</code></a></li>; <li>don't assign onto <strong>proto</strong> <a href=""https://github.com/minimistjs/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94""><code>63e7ed0</code></a></li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/minimistjs/minimist/commit/c590d75b741a12b5423e2b299f38a7f7c7d25a18""><code>c590d75</code></a> v1.2.7</li>; <li><a href=""https://github.com/minimistjs/minimist/commit/0ebf4ebcd5f7787a5524d31a849ef41316b83",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11865:4590,protocol,protocol,4590,https://root.cern,https://github.com/root-project/root/pull/11865,1,['protocol'],['protocol']
Integrability,"491031 libCore.so`TMacOSXSystem::ProcessPendingEvents(this=0x0000000100c06d60) at TMacOSXSystem.mm:473; frame #42: 0x000000010049097d libCore.so`TMacOSXSystem::DispatchOneEvent(this=0x0000000100c06d60, pendingOnly=true) at TMacOSXSystem.mm:365; frame #43: 0x0000000100294f4b libCore.so`TSystem::ProcessEvents(this=0x0000000100c06d60) at TSystem.cxx:429; frame #44: 0x0000000100fe5844 threadsh2_C.so`threadsh2() at threadsh2.C:196; frame #45: 0x0000000100fec06a; frame #46: 0x0000000103d7dc2f libCling.so`cling::IncrementalExecutor::executeWrapper(this=0x0000000100a1d410, function=(Data = ""_Z15__cling_Un1Qu30Pv"", Length = 21), returnValue=0x00007fff5fbfbde0) at IncrementalExecutor.h:196; frame #47: 0x0000000103d7db1f libCling.so`cling::Interpreter::RunFunction(this=0x0000000100a0e3b0, FD=0x000000011780f6b0, res=0x00007fff5fbfbde0) at Interpreter.cpp:980; frame #48: 0x0000000103d7a92a libCling.so`cling::Interpreter::EvaluateInternal(this=0x0000000100a0e3b0, input=""threadsh2()"", CO=CompilationOptions @ 0x00007fff5fbfaae8, V=0x00007fff5fbfbde0, T=0x0000000000000000, wrapPoint=44) at Interpreter.cpp:1232; frame #49: 0x0000000103d79e27 libCling.so`cling::Interpreter::process(this=0x0000000100a0e3b0, input=""threadsh2()"", V=0x00007fff5fbfbde0, T=0x0000000000000000, disableValuePrinting=false) at Interpreter.cpp:684; frame #50: 0x0000000103e552a5 libCling.so`cling::MetaProcessor::process(this=0x0000000100b65aa0, input_line=(Data = ""threadsh2()"", Length = 11), compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0, disableValuePrinting=false) at MetaProcessor.cpp:341; frame #51: 0x000000010397bd63 libCling.so`HandleInterpreterException(metaProcessor=0x0000000100b65aa0, input_line=""threadsh2()"", compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0) at TCling.cxx:2053; frame #52: 0x000000010397a16e libCling.so`TCling::ProcessLine(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:2170; frame #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1573:8339,wrap,wrapPoint,8339,https://root.cern,https://github.com/root-project/root/pull/1573,1,['wrap'],['wrapPoint']
Integrability,"5""><code>d784e70</code></a> 0.5.3</li>; <li><a href=""https://github.com/isaacs/node-mkdirp/commit/d612c5ddca62d50282147f5d199810bf1de0b314""><code>d612c5d</code></a> add files list so this package isn't a monster</li>; <li><a href=""https://github.com/isaacs/node-mkdirp/commit/b2e7ba0dd8ac7029735969c5a6062d49e839b30d""><code>b2e7ba0</code></a> 0.5.2</li>; <li>Additional commits viewable in <a href=""https://github.com/isaacs/node-mkdirp/compare/0.5.1...v0.5.6"">compare view</a></li>; </ul>; </details>; <details>; <summary>Maintainer changes</summary>; <p>This version was pushed to npm by <a href=""https://www.npmjs.com/~isaacs"">isaacs</a>, a new releaser for mkdirp since your current version.</p>; </details>; <br />. Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11865:9722,Depend,Dependabot,9722,https://root.cern,https://github.com/root-project/root/pull/11865,1,['Depend'],['Dependabot']
Integrability,"5.79821e+10 vs 57.9821GiB and 54GB; Checking 8.90604e+13 vs 89.0604TiB and 81TB; Checking 1.36797e+17 vs 136.797EiB and 121.5EB; Checking 2.1012e+20 vs 210.12ZiB and 182.25ZB; Checking 3.22744e+23 vs 322.744YiB and 273.375YB; (int) 0. -- END TEST OUTPUT --; -- BEGIN TEST ERROR --; Info in <TUnixSystem::ACLiC>: creating shared library /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx.so; In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/roottest/root/core/assertHumanReadable_cxx_ACLiC_dict.cxx:41:; In file included from /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:1:; [NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/build/include/ROOT/StringConv.hxx:103:18: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;35mwarning: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1mimplicit conversion from 'long long' to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Wimplicit-int-float-conversion][NON-XML-CHAR-0x1B][0m; if (v < std::numeric_limits<T>::max()) {; [NON-XML-CHAR-0x1B][0;1;32m ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~; [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][1m/mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/roottest/root/core/assertHumanReadable.cxx:9:29: [NON-XML-CHAR-0x1B][0m[NON-XML-CHAR-0x1B][0;1;30mnote: [NON-XML-CHAR-0x1B][0min instantiation of function template specialization 'ROOT::FromHumanReadableSize<long long>' requested here[NON-XML-CHAR-0x1B][0m; auto parseResult = ROOT::FromHumanReadableSize(input,res);; [NON-XML-CHAR-0x1B][0;1;32m ^; [NON-XML-CHAR-0x1B][0m1 warning generated. -- END TEST ERROR --; CMake Error at /mnt/build/wsincrv6-18-00-patches/LABEL/ROOT-ubuntu1804-clangHEAD/SPEC/noimt/root/cmake/modules/RootTestDriver.cmake:179 (message):; Unexpected error output",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4257:4150,message,message,4150,https://root.cern,https://github.com/root-project/root/pull/4257,1,['message'],['message']
Integrability,"6.22.02 build error on mac OS 10.15. Building 6.22.02 from source on macOS fails. Note I maintain the ROOT6 port in MacPorts, and my ultimate aim here is to update that build to 6.22.02 (currently 6.22.00). We use a number additional options and dependencies, hence the cmake configure command is a bit long (apologies). 6.22.00 builds just fine using the exact same configuration, so the issue is new to 6.22.02. I have attached the output from the configure and build steps (as outlined below). [configure.log](https://github.com/root-project/root/files/5231518/configure.log). [build.log](https://github.com/root-project/root/files/5231520/build.log). Unfortunately the build log error messages aren't hugely helpful (at least to me) in pointing to the issue, so I am hoping someone can offer suggestions as to where to look. First indication of a problem is; ```; [ 74%] Linking CXX shared library ../lib/libCore.so; <snip>; make[1]: *** read jobs pipe: Resource temporarily unavailable. Stop.; make[1]: *** Waiting for unfinished jobs....[ 74%] Linking CXX shared library ../lib/libCore.so; ```. ## Expected behavior; Builds OK. ## To Reproduce; ```; git clone git@github.com:root-project/root.git; cd root; git checkout v6-22-02; cd ..; mkdir install build; cd build; cmake -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=""/opt/local"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/lib"" -DCMAKE_SYSTEM_PREFIX_PATH=""/opt/local;/usr"" -DCMAKE_C_COMPILER=""$CC"" -DCMAKE_CXX_COMPILER=""$CXX"" -DCMAKE_POLICY_DEFAULT_CMP0025=NEW -DCMAKE_POLICY_DEFAULT_CMP0060=NEW -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_FIND_FRAMEWORK=LAST -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_MODULE_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_PREFIX_PATH=""/opt/local/share/cmake/Modules"" -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON -DCMAKE_INSTALL_RPATH=""/opt/local/lib"" -Wno-dev -Dgnuinstall=ON -Drpath=ON -DCMAKE_INSTALL_PREFIX=""/opt/local/libex",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6366:246,depend,dependencies,246,https://root.cern,https://github.com/root-project/root/issues/6366,2,"['depend', 'message']","['dependencies', 'messages']"
Integrability,"68,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]; [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]; [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]; [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]; [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]; CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]; ```. ### Expected behavior; ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this?. ### To Reproduce; Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup; 1. ROOT version: `master`; 2. Operating system: Windows 11; 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additional context; Supporting `explicit(bool)` will also improve build throughput, as `std::pair`, `std::tuple`, and `std::optional`'s constructor sets were nearly twice the size with the `_HAS_CONDITIONAL_EXPLICIT=0` workaround.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10875:2452,depend,dependency,2452,https://root.cern,https://github.com/root-project/root/issues/10875,1,['depend'],['dependency']
Integrability,"6; 0x00000055030c74cc in __libc_start_main + 0x98 from /lib/aarch64-linux-gnu/libc.so.6; 0x0000005500001070 in _start + 0x30 from /mnt/root-build-ubuntu/bin/root.exe; Root > make[2]: *** [CMakeFiles/hsimple.dir/build.make:79: tutorials/hsimple.root] Error 129; make[2]: Target 'CMakeFiles/hsimple.dir/build' not remade because of errors.; make[2]: Leaving directory '/mnt/root-build-ubuntu'; make[1]: *** [CMakeFiles/Makefile2:7589: CMakeFiles/hsimple.dir/all] Error 2; make[1]: Target 'all' not remade because of errors.; make[1]: Leaving directory '/mnt/root-build-ubuntu'; make: *** [Makefile:156: all] Error 2; make: Target 'default_target' not remade because of errors.; make: Leaving directory '/mnt/root-build-ubuntu'; ```. ### Reproducer. ```; # Enable multiarch support for docker (https://hub.docker.com/r/multiarch/qemu-user-static/); docker run --privileged --rm multiarch/qemu-user-static --reset --persistent yes; # Start ubuntu docker container ; docker run --platform linux/arm64/v8 --rm -it ubuntu:latest; # Install minimal dependencies; apt-get update; apt-get install build-essential git cmake python3; # Clone ROOT to commit just before problem; git clone https://github.com/root-project/root; git -C root reset --hard a886646; # Apply unrelated patch (see below); sed 's/^ \([^s].*\.cxx\)/ src\/\1/g' hist/hist/CMakeLists.txt; # Configure and build (took 10 hours); cmake -Broot-build -Sroot -Dasimage=OFF -Dclad=OFF -Ddataframe=OFF -Ddavix=OFF -Dfftw3=OFF -Dgdml=off -Dhttp=off -Dimt=OFF -Dmathmore=OFF -Dminuit2=OFF -Dmlp=OFF -Dopengl=OFF -Dpyroot=OFF -Dpythia8=OFF -Droofit=OFF -Dwebgui=OFF -Droot7=OFF -Dspectrum=OFF -Dsqlite=OFF -Dssl=OFF -Dtmva=OFF -Dtmva-cpu=OFF -Dvdt=OFF -Dx11=OFF -Dxml=OFF -Dxrootd=OFF -DCMAKE_INSTALL_PREFIX=root-install; make -Croot-build -j7 install; # Reset ROOT to next commit, which introduced the problem ; git -C root reset --hard e9d264e; # Apply unrelated patch (see below); sed 's/^ \([^s].*\.cxx\)/ src\/\1/g' hist/hist/CMakeLists.txt; make ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13845:3789,depend,dependencies,3789,https://root.cern,https://github.com/root-project/root/issues/13845,1,['depend'],['dependencies']
Integrability,7/602 Test #11: mathcore-testSampleQuantiles ...............................***Failed 2.24 sec; Test ordered data ....; Testing for type 7 :		.............	 OK !; Testing for type 1 :		.............	 OK !; Testing for type 2 :		.... Failed for prob = 0.3 - R gives 0.85 TMath gives 0.7; .. Failed for prob = 0.6 - R gives 1.65 TMath gives 1.5; Failed for prob = 0.7 - R gives 1.9 TMath gives 1.8; ....; Test Failed for type 2; Testing for type 3 :		.............	 OK !; Testing for type 4 :		.............	 OK !; Testing for type 5 :		.............	 OK !; Testing for type 6 :		.............	 OK !; Testing for type 7 :		.............	 OK !; Testing for type 8 :		.............	 OK !; Testing for type 9 :		.............	 OK !; Test data in random order....; Testing for type 7 :		.............	 OK !; Testing for type 1 :		.............	 OK !; Testing for type 2 :		.... Failed for prob = 0.3 - R gives 0.85 TMath gives 0.7; .. Failed for prob = 0.6 - R gives 1.65 TMath gives 1.5; Failed for prob = 0.7 - R gives 1.9 TMath gives 1.8; ....; Test Failed for type 2; Testing for type 3 :		.............	 OK !; Testing for type 4 :		.............	 OK !; Testing for type 5 :		.............	 OK !; Testing for type 6 :		.............	 OK !; Testing for type 7 :		.............	 OK !; Testing for type 8 :		.............	 OK !; Testing for type 9 :		.............	 OK !; Test sample quantiles FAILED ; CMake Error at /builddir/build/BUILD/root-6.08.04/cmake/modules/RootTestDriver.cmake:196 (message):; error code: 255. The PR implements the same check for type < 4 that is done later in the else clause for type >= 4. So this treats all types the same and the test failure goes away.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/359:1488,message,message,1488,https://root.cern,https://github.com/root-project/root/pull/359,1,['message'],['message']
Integrability,"77%] Built target clingMetaProcessor; [ 77%] Built target CLING; [ 77%] Built target LLVMRES; [ 77%] Built target ClingUtils; [ 77%] Built target Dictgen; [ 77%] Built target rootcling_stage1; [ 77%] Built target MetaCling; [ 77%] Generating G__Core.cxx, ../lib/Core.pcm; [ 77%] Linking CXX shared library ../../../lib/libCling.so; [ 77%] Built target Cling; While building module 'Core':; While building module 'std' imported from input_line_1:1:; While building module '_wctype' imported from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/wctype.h:31:; While building module '__wctype' imported from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_wctype.h:36:; In file included from <module-includes>:1:; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/___wctype.h:72:10: fatal error: cyclic dependency in module 'std': std -> _wctype -> __wctype -> std; #include <ctype.h>; ^; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/_wctype.h:36:10: fatal error: could not build module '__wctype'; #include <_types/_wctrans_t.h>; ~~~~~~~~^; While building module 'Core':; While building module 'std' imported from input_line_1:1:; In file included from <module-includes>:1:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.0.sdk/usr/include/c++/v1/algorithm:1804:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.0.sdk/usr/include/c++/v1/__algorithm/find.h:31:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.0.sdk/usr/include/c++/v1/cwchar:112:; In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.0",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16498:1106,depend,dependency,1106,https://root.cern,https://github.com/root-project/root/issues/16498,1,['depend'],['dependency']
Integrability,"8_amd64_gcc11/external/tinyxml2/6.2.0-20b4f0dfd078828bfb8e7fdd5ba85221/include -DCMSSW_REFLEX_DICT tmp/el8_amd64_gcc11/src/CalibTracker/Records/src/CalibTrackerRecords/a/CalibTrackerRecords_xr.h tmp/el8_amd64_gcc11/classes/classes_def.xml; In file included from input_line_8:57:; In file included from ./tmp/el8_amd64_gcc11/src/CalibTracker/Records/src/CalibTrackerRecords/a/CalibTrackerRecords_xr.h:1:; /data/cmsbld/jenkins/workspace/build-any-ib/w/tmp/BUILDROOT/8111f4777df89fbcfd3398ad239ef48c/opt/cmssw/el8_amd64_gcc11/cms/cmssw/CMSSW_12_6_CXXMODULE_X_2022-11-22-2300/src/CalibTracker/Records/interface/SiPixel2DTemplateDBObjectESProducerRcd.h:4:10: remark: building module 'FWCoreFramework' as '/data/cmsbld/jenkins/workspace/build-any-ib/w/tmp/BUILDROOT/8111f4777df89fbcfd3398ad239ef48c/opt/cmssw/el8_amd64_gcc11/cms/cmssw/CMSSW_12_6_CXXMODULE_X_2022-11-22-2300/tmp/el8_amd64_gcc11/src/CalibTracker/Records/src/CalibTrackerRecords/a/FWCoreFramework.pcm' [-Rmodule-build]; #include ""FWCore/Framework/interface/EventSetupRecordImplementation.h""; ^; Error: Building module 'FWCoreFramework' implicitly. If 'FWCoreFramework' requires a ; dictionary please specify build dependency: 'tmp/el8_amd64_gcc11/src/CalibTracker/Records/src/CalibTrackerRecords/a/CalibTrackerRecords_xr.cc' depends on 'FWCoreFramework'.; Otherwise, specify '-mByproduct FWCoreFramework' to disable this diagnostic.; While building module 'CalibTrackerRecords':; While building module 'FWCoreFramework' imported from /data/cmsbld/jenkins/workspace/build-any-ib/w/tmp/BUILDROOT/8111f4777df89fbcfd3398ad239ef48c/opt/cmssw/el8_amd64_gcc11/cms/cmssw/CMSSW_12_6_CXXMODULE_X_2022-11-22-2300/src/CalibTracker/Records/interface/SiPixel2DTemplateDBObjectESProducerRcd.h:4:; While building module 'FWCoreServiceRegistry' imported from /data/cmsbld/jenkins/workspace/build-any-ib/w/tmp/BUILDROOT/8111f4777df89fbcfd3398ad239ef48c/opt/cmssw/el8_amd64_gcc11/cms/cmssw/CMSSW_12_6_CXXMODULE_X_2022-11-22-2300/src/FWCore/Framework/interface/Ev",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11765:4418,interface,interface,4418,https://root.cern,https://github.com/root-project/root/issues/11765,1,['interface'],['interface']
Integrability,"9 	max; 	old:	0.0016594	0.00161012	0.00193414	0.00225071	0.0168282	t=0.04; 	new:	0.000505525	0.00049051	0.000589222	0.000685661	0.0168282	t=0.03; 	ROOT:	3.45732e-08	3.36752e-08	4.03318e-08	4.62674e-08	0.0168282	t=0.14; Integrating log(a*x), relEps = 1e-06; 	 	mean 	median 	q95 	q99 	max; 	old:	2.45769e-05	2.45769e-05	2.4577e-05	2.4577e-05	2.4577e-05	t=0.19; 	new:	3.25114e-07	3.25114e-07	3.25115e-07	3.25115e-07	2.4577e-05	t=0.41; 	ROOT:	7.94638e-14	7.95337e-14	7.9692e-14	7.98497e-14	2.4577e-05	t=0.3; Old integrator reached poor precision: 2.45769e-05 +/- 4.91464e-11 instead of 1e-06; Integrating log(a*x), relEps = 1e-08; 	 	mean 	median 	q95 	q99 	max; 	old:	1.62946e-08	1.62946e-08	1.62946e-08	1.62946e-08	1.62946e-08	t=1.26; 	new:	3.98296e-10	3.98296e-10	3.98297e-10	3.98297e-10	1.62946e-08	t=1.48; 	ROOT:	7.94604e-14	7.95337e-14	7.96915e-14	7.98493e-14	1.62946e-08	t=0.38; [ OK ] Roo1DIntegrator.ConvergenceSettings_log (4402 ms); [ RUN ] Roo1DIntegrator.ConvergenceSettings_pol4; Integrating Polynomial 4th order, relEps = 0.001; 	 	mean 	median 	q95 	q99 	max; 	old:	3.01835e-16	1.45346e-16	5.65891e-16	2.22915e-15	1.15949e-13	t=0.04; 	new:	3.3408e-16	1.84038e-16	6.31068e-16	2.24297e-15	1.15949e-13	t=0.05; 	ROOT:	3.09356e-16	1.56283e-16	5.63307e-16	2.02418e-15	1.15949e-13	t=0.05; Integrating Polynomial 4th order, relEps = 1e-06; 	 	mean 	median 	q95 	q99 	max; 	old:	1.40432e-16	2.12767e-16	4.25546e-16	4.25569e-16	6.38354e-16	t=0.05; 	new:	1.77284e-16	2.12771e-16	4.25564e-16	6.38325e-16	6.38354e-16	t=0.04; 	ROOT:	1.44538e-16	2.12768e-16	4.25551e-16	4.25569e-16	6.38354e-16	t=0.06; Integrating Polynomial 4th order, relEps = 1e-08; 	 	mean 	median 	q95 	q99 	max; 	old:	1.40424e-16	2.12764e-16	4.25528e-16	4.25528e-16	6.38292e-16	t=0.06; 	new:	1.7536e-16	2.12764e-16	4.25528e-16	6.38292e-16	6.38292e-16	t=0.02; 	ROOT:	1.45531e-16	2.12764e-16	4.25528e-16	4.25528e-16	6.38292e-16	t=0.03; [ OK ] Roo1DIntegrator.ConvergenceSettings_pol4 (501 ms); [ RUN ] Roo1DIntegrator.ConvergenceSett",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6632:1407,Integrat,Integrating,1407,https://root.cern,https://github.com/root-project/root/pull/6632,1,['Integrat'],['Integrating']
Integrability,"::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\rele",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11153:1615,message,message,1615,https://root.cern,https://github.com/root-project/root/pull/11153,1,['message'],['message']
Integrability,"::default_delete<llvm::GIMatchDagPredicate>> *&&)': cannot convert argument 1 from 'const char [5]' to 'const std::basic_format_string<wchar_t,const std::unique_ptr<llvm::GIMatchDagPredicate,std::default_delete<llvm::GIMatchDagPredicate>> *>' [C:\Users\bellenot\build\x64\release\interpreter\llvm\src\utils\TableGen\GlobalISel\LLVMTableGenGlobalISel.vcxproj]; interpreter\llvm\src\utils\TableGen\GlobalISel\GIMatchDag.cpp(85,18): message : No constructor could take the source type, or constructor overload resolution was ambiguous [C:\Users\bellenot\build\x64\release\interpreter\llvm\src\utils\TableGen\GlobalISel\LLVMTableGenGlobalISel.vcxproj]; C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\format(3521,19): message : or 'std::string std::format<const std::unique_ptr<llvm::GIMatchDagPredicate,std::default_delete<llvm::GIMatchDagPredicate>>*>(const std::basic_format_string<char,const std::unique_ptr<llvm::GIMatchDagPredicate,std::default_delete<llvm::GIMatchDagPredicate>> *>,const std::unique_ptr<llvm::GIMatchDagPredicate,std::default_delete<llvm::GIMatchDagPredicate>>*&&)' [found using argument-dependent lookup] [C:\Users\bellenot\build\x64\release\interpreter\llvm\src\utils\TableGen\GlobalISel\LLVMTableGenGlobalISel.vcxproj]; C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\format(3536,20): message : or 'std::wstring std::format(const std::locale &,const std::basic_format_string<wchar_t,type_identity<_Args>::type...>,_Types &&...)' [C:\Users\bellenot\build\x64\release\interpreter\llvm\src\utils\TableGen\GlobalISel\LLVMTableGenGlobalISel.vcxproj]; interpreter\llvm\src\utils\TableGen\GlobalISel\GIMatchDag.cpp(85,18): message : 'initializing': cannot convert from 'const char [5]' to 'const std::locale &' [C:\Users\bellenot\build\x64\release\interpreter\llvm\src\utils\TableGen\GlobalISel\LLVMTableGenGlobalISel.vcxproj]; interpreter\llvm\src\utils\TableGen\GlobalISel\GIMatchDag.cpp(85,18): me",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12523:8642,message,message,8642,https://root.cern,https://github.com/root-project/root/pull/12523,2,"['depend', 'message']","['dependent', 'message']"
Integrability,"::lookup (UnmangledName=..., JD=..., this=0x10993f430) at /builddir/build/BUILD/root-6.28.00/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/LLJIT.h:132; #13 llvm::orc::LLJIT::lookup (UnmangledName=..., this=0x10993f430) at /builddir/build/BUILD/root-6.28.00/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/LLJIT.h:137; #14 cling::IncrementalJIT::getSymbolAddress (this=0x109984c70, Name=..., IncludeHostSymbols=<optimized out>) at /builddir/build/BUILD/root-6.28.00/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp:583; #15 0x00007fffa3050770 in cling::IncrementalExecutor::getPointerToGlobalFromJIT (this=0x1099ceb50, name=...) at /usr/include/c++/8/bits/unique_ptr.h:345; #16 0x00007fffa2f9fee4 in cling::Interpreter::compileFunction (this=0x10994ea90, name=..., code=..., ifUnique=<optimized out>, withAccessControl=<optimized out>) at /usr/include/c++/8/bits/unique_ptr.h:345; #17 0x00007fffa2efea78 in TClingCallFunc::compile_wrapper (this=<optimized out>, wrapper_name=..., wrapper=..., withAccessControl=<optimized out>) at /usr/include/c++/8/bits/basic_string.h:2306; #18 0x00007fffa2f067e8 in TClingCallFunc::make_ctor_wrapper (this=0x7ffff83e96e0, info=0x10a9e3870, kind=<optimized out>, type_name=...) at /builddir/build/BUILD/root-6.28.00/core/metacling/src/TClingCallFunc.cxx:1215; #19 0x00007fffa2f07164 in TClingCallFunc::ExecDefaultConstructor (this=0x7ffff83e96e0, info=0x10a9e3870, kind=<optimized out>, type_name="""", address=0x0, nary=0) at /builddir/build/BUILD/root-6.28.00/core/metacling/src/TClingCallFunc.cxx:1895; #20 0x00007fffa2f1838c in TClingClassInfo::New (this=0x10a9e3870, normCtxt=...) at /builddir/build/BUILD/root-6.28.00/core/metacling/src/TClingClassInfo.cxx:1098; #21 0x00007fffa2e2cdf4 in TCling::ClassInfo_New (this=<optimized out>, cinfo=<optimized out>) at /builddir/build/BUILD/root-6.28.00/core/metacling/src/TCling.cxx:8290; #22 0x00007fffa8f0be24 in TClass::NewObject (this=0x10a9218e0, defConstructor=<optimized out>, quiet=<optimized ou",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12372:5190,wrap,wrapper,5190,https://root.cern,https://github.com/root-project/root/issues/12372,1,['wrap'],['wrapper']
Integrability,"::lookup (UnmangledName=..., JD=..., this=0x16584c2e0) at /builddir/build/BUILD/root-6.28.00/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/LLJIT.h:132; #16 llvm::orc::LLJIT::lookup (UnmangledName=..., this=0x16584c2e0) at /builddir/build/BUILD/root-6.28.00/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/LLJIT.h:137; #17 cling::IncrementalJIT::getSymbolAddress (this=0x1657ff820, Name=..., IncludeHostSymbols=<optimized out>) at /builddir/build/BUILD/root-6.28.00/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp:572; #18 0x00007fff76a50690 in cling::IncrementalExecutor::getPointerToGlobalFromJIT (this=0x165848f30, name=...) at /usr/include/c++/8/bits/unique_ptr.h:345; #19 0x00007fff7699fe04 in cling::Interpreter::compileFunction (this=0x165715770, name=..., code=..., ifUnique=<optimized out>, withAccessControl=<optimized out>) at /usr/include/c++/8/bits/unique_ptr.h:345; #20 0x00007fff768fea38 in TClingCallFunc::compile_wrapper (this=<optimized out>, wrapper_name=..., wrapper=..., withAccessControl=<optimized out>) at /usr/include/c++/8/bits/basic_string.h:2306; #21 0x00007fff76908a68 in TClingCallFunc::make_wrapper (this=0x16b07b660) at /builddir/build/BUILD/root-6.28.00/core/metacling/src/TClingCallFunc.cxx:1006; #22 0x00007fff76908e78 in TClingCallFunc::IFacePtr (this=0x16b07b660) at /builddir/build/BUILD/root-6.28.00/core/metacling/src/TClingCallFunc.cxx:2004; #23 0x00007fff7682c3bc in TCling::CallFunc_IFacePtr (this=<optimized out>, func=<optimized out>) at /builddir/build/BUILD/root-6.28.00/core/metacling/src/TCling.cxx:7888; #24 0x00007fff7ca8f81c in GetCallFunc (method=<optimized out>) at /usr/include/c++/8/bits/locale_facets.h:877; #25 WrapperCall (method=6088041216, nargs=2, args_=0x7fffc4480880, self=0x16b1482f0, result=0x16b0b6990) at /builddir/build/BUILD/root-6.28.00/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:765; #26 0x00007fff7ca90e5c in Cppyy::CallO (method=6088041216, self=0x16b1482f0, nargs=2, args=0x7fffc44",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12372:30603,wrap,wrapper,30603,https://root.cern,https://github.com/root-project/root/issues/12372,1,['wrap'],['wrapper']
Integrability,"::message_t>’ to ‘void*’; /usr/include/zmq.hpp:635:21: note: candidate: bool zmq::socket_t::recv(zmq::message_t*, int); inline bool recv (message_t *msg_, int flags_ = 0); ^~~~; /usr/include/zmq.hpp:635:21: note: no known conversion for argument 1 from ‘std::reference_wrapper<zmq::message_t>’ to ‘zmq::message_t*’; In file included from /tmp/ROOT/v6-26-00-patches/roofit/roofitZMQ/res/RooFit_ZMQ/ZeroMQPoller.h:17:0,; from /tmp/ROOT/v6-26-00-patches/roofit/roofitZMQ/src/ZeroMQPoller.cpp:14:; (...); /tmp/ROOT/v6-26-00-patches/roofit/roofitZMQ/src/ZeroMQPoller.cpp:231:14: error: ‘m_fds’ was not declared in this scope; auto it = m_fds.find(fd);; ^~~~~; /tmp/ROOT/v6-26-00-patches/roofit/roofitZMQ/src/ZeroMQPoller.cpp:231:14: note: suggested alternative: ‘m_free’; auto it = m_fds.find(fd);; ^~~~~; m_free; Consolidate compiler generated dependencies of target obj.clingInterpreter; [ 73%] Built target obj.clingInterpreter; [ 73%] Built target clingInterpreter; [ 73%] Built target CLING; [ 73%] Built target clad; [ 73%] Built target LLVMRES; Consolidate compiler generated dependencies of target ClingUtils; roofit/roofitZMQ/CMakeFiles/RooFitZMQ.dir/build.make:89: recipe for target 'roofit/roofitZMQ/CMakeFiles/RooFitZMQ.dir/src/ZeroMQPoller.cpp.o' failed; make[2]: *** [roofit/roofitZMQ/CMakeFiles/RooFitZMQ.dir/src/ZeroMQPoller.cpp.o] Error 1; make[2]: Target 'roofit/roofitZMQ/CMakeFiles/RooFitZMQ.dir/build' not remade because of errors.; CMakeFiles/Makefile2:35161: recipe for target 'roofit/roofitZMQ/CMakeFiles/RooFitZMQ.dir/all' failed; make[1]: *** [roofit/roofitZMQ/CMakeFiles/RooFitZMQ.dir/all] Error 2; (...); ```; It seems that the problem is related to the system provided ""`libzmq`"".; The configuration step says:; `-- ZeroMQ not found. Switching on builtin_zeromq option`; but it also finds:; `pkgcfg_lib_PC_LIBZMQ_zmq:FILEPATH=/usr/lib/x86_64-linux-gnu/libzmq.so`; and then it uses the system provided `/usr/include/zmq.hpp` (from the ""`libzmq3-dev 4.2.5-1ubuntu0.2`"" package).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10107:3133,depend,dependencies,3133,https://root.cern,https://github.com/root-project/root/issues/10107,1,['depend'],['dependencies']
Integrability,":Internal::TExecutor x2{};; ROOT::Internal::TExecutor x3(ROOT::Internal::ExecutionPolicy::kMultithread, 20); // will actually have ROOT::GetPoolSize() threads; ROOT::Internal::TExecutor x4(ROOT::Internal::ExecutionPolicy::kMultiprocess, 8);; ROOT::Internal::TExecutor x5(ROOT::Internal::ExecutionPolicy::kSerial, 8); //nProcessing units is ignored in this case. x1.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map; x2.Map([](){return 1;}, 20); // runs TThreadExecutor::Map; x3.Map([](){return 1;}, 20); // runs TThreadExecutor::Map; x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map; x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map; ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | ; ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |; TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |; TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |; TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |; TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |; TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the chil",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6327:1401,depend,dependencies,1401,https://root.cern,https://github.com/root-project/root/pull/6327,1,['depend'],['dependencies']
Integrability,":Reshape; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/rtensor.py"", line 218, in test_reshape; self.assertEqual(x.GetMemoryLayout(), 1); AssertionError: 16777216 != 1; ======================================================================; FAIL: test_transpose (rtensor.NumpyCompliance.test_transpose); Test np.transpose vs RTensor::Transpose; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/rtensor.py"", line 151, in test_transpose; self.assertEqual(x.GetMemoryLayout(), 1); AssertionError: 16777216 != 1; ----------------------------------------------------------------------; Ran 11 tests in 2.036s; FAILED (failures=3); CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### pyunittests-pyroot-pyz-stl-vector; ~~~; 61/1272 Test #18: pyunittests-pyroot-pyz-stl-vector ...................................***Failed 0.84 sec; test_vec_char_data (stl_vector.STL_vector.test_vec_char_data); Test that calling std::vector<char>::data() returns a Python string ... FAIL; test_vec_const_char_p (stl_vector.STL_vector.test_vec_const_char_p); Test that creating a std::vector<const char*> does not raise any ... ok; ======================================================================; FAIL: test_vec_char_data (stl_vector.STL_vector.test_vec_char_data); Test that calling std::vector<char>::data() returns a Python string; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/stl_vector.py"", line 19, in test_vec_char_data; self.assertEqual(v.data(), ''.join(elems)); AssertionError: '' != 'abc'; + abc; ---------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12429:3399,message,message,3399,https://root.cern,https://github.com/root-project/root/issues/12429,1,['message'],['message']
Integrability,":\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\format(3526,20): message : or 'std::wstring std::format<const std::unique_ptr<llvm::GIMatchDagInstr,std::default_delete<llvm::GIMatchDagInstr>>*>(const std::basic_format_string<wchar_t,const std::unique_ptr<llvm::GIMatchDagInstr,std::default_delete<llvm::GIMatchDagInstr>> *>,const std::unique_ptr<llvm::GIMatchDagInstr,std::default_delete<llvm::GIMatchDagInstr>> *&&)' [found using argument-dependent lookup] [C:\Users\bellenot\build\x64\release\interpreter\llvm\src\utils\TableGen\GlobalISel\LLVMTableGenGlobalISel.vcxproj]; interpreter\llvm\src\utils\TableGen\GlobalISel\GIMatchDag.cpp(51,11): message : 'std::wstring std::format<const std::unique_ptr<llvm::GIMatchDagInstr,std::default_delete<llvm::GIMatchDagInstr>>*>(const std::basic_format_string<wchar_t,const std::unique_ptr<llvm::GIMatchDagInstr,std::default_delete<llvm::GIMatchDagInstr>> *>,const std::unique_ptr<llvm::GIMatchDagInstr,std::default_delete<llvm::GIMatchDagInstr>> *&&)': cannot convert argument 1 from 'const char [5]' to 'const std::basic_format_string<wchar_t,const std::unique_ptr<llvm::GIMatchDagInstr,std::default_delete<llvm::GIMatchDagInstr>> *>' [C:\Users\bellenot\build\x64\release\interpreter\llvm\src\utils\TableGen\GlobalISel\LLVMTableGenGlobalISel.vcxproj]; interpreter\llvm\src\utils\TableGen\GlobalISel\GIMatchDag.cpp(51,18): message : No constructor could take the source type, or constructor overload resolution was ambiguous [C:\Users\bellenot\build\x64\release\interpreter\llvm\src\utils\TableGen\GlobalISel\LLVMTableGenGlobalISel.vcxproj]; C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\format(3521,19): message : or 'std::string std::format<const std::unique_ptr<llvm::GIMatchDagInstr,std::default_delete<llvm::GIMatchDagInstr>>*>(const std::basic_format_string<char,const std::unique_ptr<llvm::GIMatchDagInstr,std::default_delete<llvm::GIMatchDagInstr>> *>,const std::un",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12523:1545,message,message,1545,https://root.cern,https://github.com/root-project/root/pull/12523,1,['message'],['message']
Integrability,":length_error'; '; what(): what(): vector::_M_fill_insertvector::_M_fill_insertvector::_M_fill_insertvector::_M_fill_insert; terminate called after throwing an instance of '. terminate called after throwing an instance of 'std::length_errorstd::length_error'. '; what(): what(): vector::_M_fill_insert; vector::_M_fill_insert; terminate called after throwing an instance of 'terminate called after throwing an instance of 'std::length_error'; terminate called after throwing an instance of 'std::length_error'; terminate called after throwing an instance of 'terminate called after throwing an instance of 'std::length_errorstd::length_errorstd::length_error'; what(): vector::_M_fill_insert; what(): vector::_M_fill_insert; '; '; what(): vector::_M_fill_insert what(): ; vector::_M_fill_insert; what(): vector::_M_fill_insert; terminate called after throwing an instance of 'std::length_error'; what(): vector::_M_fill_insert; terminate called after throwing an instance of 'std::length_error'; what(): vector::_M_fill_insert; terminate called after throwing an instance of 'std::length_error'; what(): vector::_M_fill_insert; terminate called after throwing an instance of 'std::length_error'; terminate called after throwing an instance of ' what(): vector::_M_fill_insert; std::length_error'; terminate called after throwing an instance of 'std::length_error what(): terminate called after throwing an instance of ''; terminate called after throwing an instance of 'vector::_M_fill_insertstd::length_error; '; std::length_error'; what(): vector::_M_fill_insert; what(): vector::_M_fill_insert; what(): vector::_M_fill_insert; RooRealMPFE::evaluate(nll_exp_expData_55d734b4c5e0_MPFE0) ERROR: unexpected message from server process: 8; ```. At the same time, either setting `BatchMode(0)` or reducing the number of requested CPU cores allows to avoid this misbehavior. I have also encountered a case (with a complex simultanous fit) where the `BatchMode(1)` alone was leading to this terminate even ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9406:3052,message,message,3052,https://root.cern,https://github.com/root-project/root/issues/9406,1,['message'],['message']
Integrability,":operator delete(void*); Maybe you need to load the corresponding shared library?; Symbol found in '/builddir/build/BUILD/root-6.26.00/redhat-linux-build/lib/libRooFitCore.so.6.26.00'; did you mean to load it with '.L /builddir/build/BUILD/root-6.26.00/redhat-linux-build/lib/libRooFitCore.so.6.26.00'?; CMake Error at /builddir/build/BUILD/root-6.26.00/redhat-linux-build/RootTestDriver.cmake:227 (message):; error code: 1. 833/1153 Test #804: tutorial-roofit-rf408_RDataFrameToRooFit ............................***Failed 3.01 sec; Processing /builddir/build/BUILD/root-6.26.00/tutorials/roofit/rf408_RDataFrameToRooFit.C...; RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby ; Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University; All rights reserved, please read http://roofit.sourceforge.net/license.txt; IncrementalExecutor::executeFunction: symbol '_ZN10RooDataSetnwEm' unresolved while linking [cling interface function]!; You are probably missing the definition of RooDataSet::operator new(unsigned long); Maybe you need to load the corresponding shared library?; Symbol found in '/builddir/build/BUILD/root-6.26.00/x86_64-redhat-linux-gnu/lib/libRooFitCore.so.6.26.00'; did you mean to load it with '.L /builddir/build/BUILD/root-6.26.00/x86_64-redhat-linux-gnu/lib/libRooFitCore.so.6.26.00'?; CMake Error at /builddir/build/BUILD/root-6.26.00/x86_64-redhat-linux-gnu/RootTestDriver.cmake:227 (message):; error code: 1; ```. ### To Reproduce. Steps to reproduce the behavior:. The test failures don't happen every time the tests are run, so it is not a good reproducer.; However, you can see the problem this way:; ```; $ root; ------------------------------------------------------------------; | Welcome to ROOT 6.26/00 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jan 28 2022, 00:00:00 |; | From tag , 3 March 2022 |; | With g++ (GCC) 12.0.1 20220308 (Red Hat 12.0.1-0) |; |",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10203:1899,interface,interface,1899,https://root.cern,https://github.com/root-project/root/issues/10203,1,['interface'],['interface']
Integrability,"; +++ b/tree/treeplayer/src/TTreeProcessorMT.cxx; @@ -492,7 +492,8 @@ void TTreeProcessorMT::Process(std::function<void(TTreeReader &)> func); const auto &clusters = clustersAndEntries.first[0];; const auto &entries = clustersAndEntries.second[0];; auto processCluster = [&](const EntryRange &c) {; - auto r = fTreeView->GetTreeReader(c.first, c.second, treeNames, fileNames, fFriendInfo, fEntryList, {entries});; + gDirectory = nullptr; // TDirectory::TContext ctxt(nullptr);; + auto r = fTreeView->GetTreeReader(c.first, c.second, treeNames, fileNames, fFriendInfo, fEntryList, {entries});; func(*r);; };; fPool.Foreach(processCluster, clusters);; ```; Some might require some redesign:; ```; // Avoid spin lock inside GetThisSlotNumber just to get a thread local value ... but is this value; // really the same for the life of the thread ... and if so why is the next bottleneck then in: ROOT::Internal::RSlotStack::ReturnSlot; diff --git a/core/thread/inc/ROOT/TThreadedObject.hxx b/core/thread/inc/ROOT/TThreadedObject.hxx; index b3d73228e3..cff216e67f 100644; --- a/core/thread/inc/ROOT/TThreadedObject.hxx; +++ b/core/thread/inc/ROOT/TThreadedObject.hxx; @@ -279,7 +279,8 @@ namespace ROOT {; /// ~~~; std::shared_ptr<T> Get(); {; - return GetAtSlot(GetThisSlotNumber());; + static thread_local unsigned thisSlotNumber = GetThisSlotNumber();; + return GetAtSlot(thisSlotNumber);; }; ; /// Access the wrapped object and allow to call its methods.; ```; The next bottleneck after that might be:; ```; #5 0x00007ffff01a8c69 in std::unique_lock<std::mutex>::unique_lock (this=0x7ffedfffd910, __m=...) at /usr/include/c++/11/bits/unique_lock.h:69; #6 0x00007ffff01ca1e9 in TClingClassInfo::GetBaseOffset (this=0x555558a126a0, base=0x555555c8b500, address=0x0, isDerivedObject=true) at /home/pcanal/root_working/code/root/core/metacling/src/TClingClassInfo.cxx:616; ```. Note: that those in themselves are not sufficient to improve performance (which could also be bottlenecked by the posix system).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12761:4114,wrap,wrapped,4114,https://root.cern,https://github.com/root-project/root/issues/12761,1,['wrap'],['wrapped']
Integrability,"; -- Looking for BLAS for optional parts of TMVA; -- Building LLVM in 'Release' mode.; -- Could NOT find Z3: Found unsuitable version ""0.0.0"", but required is at least ""4.7.1"" (found Z3_LIBRARIES-NOTFOUND); -- Found libtool - /Library/Developer/CommandLineTools/usr/bin/libtool; -- Native target ARM is not selected; lli will not JIT code; -- Threads disabled.; -- Doxygen disabled.; -- Go bindings disabled.; -- Found ld64 - /Library/Developer/CommandLineTools/usr/bin/ld; -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH) ; -- OCaml bindings disabled.; -- LLVM host triple: arm-apple-darwin23.2.0; -- LLVM default target triple: arm-apple-darwin23.2.0; -- Building with -fPIC; -- Constructing LLVMBuild project information; -- Linker detection: unknown; -- Targeting AArch64; -- Targeting NVPTX; -- Clang version: 9.0.1; -- Cling version (from VERSION file): ROOT_1.0~dev; CMake Warning at interpreter/cling/lib/Interpreter/CMakeLists.txt:278 (MESSAGE):; Cannot determine location of C++ headers for runtime. -- Cling will look for C++ headers in '' at runtime.; -- And then fallback to: 'clang'; -- Performing Test found_stdstringview; -- Performing Test found_stdstringview - Success; -- Performing Test found_stod_stringview; -- Performing Test found_stod_stringview - Failed; -- Performing Test found_stdapply; -- Performing Test found_stdapply - Success; -- Performing Test found_stdinvoke; -- Performing Test found_stdinvoke - Success; -- Performing Test found_stdindexsequence; -- Performing Test found_stdindexsequence - Success; -- ROOT Configuration . System Darwin-23.2.0; Processor 10 core Apple M1 Max (arm64); Build type Release; Install path /Users/marcomeyer/Software/root/20240113; Compiler AppleClang 15.0.0.15000100; Compiler flags:; C -m64 -pipe -W -Wall -fsigned-char -fno-common -Qunused-arguments -pthread -O3 -DNDEBUG; C++ -std=c++17 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-boun",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14337:3449,MESSAGE,MESSAGE,3449,https://root.cern,https://github.com/root-project/root/issues/14337,1,['MESSAGE'],['MESSAGE']
Integrability,; // message logger; tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service; tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger; tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogge,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9792:2186,message,message,2186,https://root.cern,https://github.com/root-project/root/issues/9792,1,['message'],['message']
Integrability,"; ```; Use of DEBUG and std::cout; ```c++; #ifdef DEBUG; std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;; #endif; ```; The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors; - level 1: all of level 0 + warnings; - level 2: all of level 1 + info; - level 3: all of level 2 + debug. and add the corresponding macros; ```c++; MN_WARN_MSG; MN_WARN_MSG2; MN_WARN_VAL; MN_WARN_VAL2; MN_DEBUG_MSG; MN_DEBUG_MSG2; MN_DEBUG_VAL; MN_DEBUG_VAL2; ```; in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes?. This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance?. The impact on performance is expected t",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6421:2171,message,messages,2171,https://root.cern,https://github.com/root-project/root/issues/6421,1,['message'],['messages']
Integrability,; tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service; tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9792:1424,message,message,1424,https://root.cern,https://github.com/root-project/root/issues/9792,1,['message'],['message']
Integrability,"</li>; <li><a href=""https://github.com/isaacs/minimatch/commit/f8145c54f34075069f4a23cb214d871da4cd4006""><code>f8145c5</code></a> Add 'allowWindowsEscape' option</li>; <li><a href=""https://github.com/isaacs/minimatch/commit/570e8b1aef6c9e823a824aa0b9be10db43857cd7""><code>570e8b1</code></a> add publishConfig for v3 publishes</li>; <li><a href=""https://github.com/isaacs/minimatch/commit/5b7cd3372be253759fb4d865eb3f38f189a5fcdf""><code>5b7cd33</code></a> 3.0.6</li>; <li><a href=""https://github.com/isaacs/minimatch/commit/20b4b562830680867feb75f9c635aca08e5c86ff""><code>20b4b56</code></a> [fix] revert all breaking syntax changes</li>; <li><a href=""https://github.com/isaacs/minimatch/commit/2ff038852ec03e85e60e0eb333005c680ac8a543""><code>2ff0388</code></a> document, expose, and test 'partial:true' option</li>; <li>Additional commits viewable in <a href=""https://github.com/isaacs/minimatch/compare/v3.0.4...v3.1.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=minimatch&package-manager=npm_and_yarn&previous-version=3.0.4&new-version=3.1.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cance",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11864:1815,Depend,Dependabot,1815,https://root.cern,https://github.com/root-project/root/pull/11864,2,"['Depend', 'depend']","['Dependabot', 'dependabot-badges']"
Integrability,"<ROOT::Fit::FitUtil::ParamDerivFunc<ROOT::Math::IParametricGradFunctionMultiDimTempl<double>>>' in /opt/root_src/math/mathcore/src/FitUtil.cxx:207; 25: 'useIntegral' is true in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:135; 26: Taking true branch in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:135; 27: Calling 'IntegralEvaluator::SetFunction' in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:136; 28: Field 'fFunc' is not equal to null in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:150; 29: '?' condition is true in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:150; 30: expanded from macro 'assert' in /usr/include/assert.h:93; 31: Assuming field 'fDim' is equal to 1 in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:153; 32: Taking true branch in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:153; 33: Calling constructor for 'WrappedMemFunction<ROOT::Fit::FitUtil::IntegralEvaluator<ROOT::Fit::FitUtil::ParamDerivFunc<ROOT::Math::IParametricGradFunctionMultiDimTempl<double>>>, double (ROOT::Fit::FitUtil::IntegralEvaluator<ROOT::Fit::FitUtil::ParamDerivFunc<ROOT::Math::IParametricGradFunctionMultiDimTempl<double>>>::*)(double) const>' in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:155; 34: Returning from constructor for 'WrappedMemFunction<ROOT::Fit::FitUtil::IntegralEvaluator<ROOT::Fit::FitUtil::ParamDerivFunc<ROOT::Math::IParametricGradFunctionMultiDimTempl<double>>>, double (ROOT::Fit::FitUtil::IntegralEvaluator<ROOT::Fit::FitUtil::ParamDerivFunc<ROOT::Math::IParametricGradFunctionMultiDimTempl<double>>>::*)(double) const>' in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:155; 35: Returning from 'IntegralEvaluator::SetFunction' in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:136; 36: Returning from constructor for 'IntegralEvaluator<ROOT::Fit::FitUtil::ParamDerivFunc<ROOT::Math::IParametricGradFunctionMultiDimTempl<double>>>' in /opt/root_src/math/mathcore/src/FitUtil.cxx:207; 37: Assuming 'k' is < 'npar' in /opt/root_src/math/mathcore/src/FitUtil.cxx:210; 38: Lo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7458:6789,Wrap,WrappedMemFunction,6789,https://root.cern,https://github.com/root-project/root/issues/7458,2,['Wrap'],['WrappedMemFunction']
Integrability,"<TInterpreter::AutoParse>: Error parsing payload code for class dd4hep::sim::KernelHandle with content:. #line 1 ""G__DDG4 dictionary payload""; ```; In both cases followed by the rest of the ""dictionary payload"", see attached . [error98.txt](https://github.com/root-project/root/files/5517700/error98.txt); [errorDev.txt](https://github.com/root-project/root/files/5517701/errorDev.txt). The solution to the parsing of the paylog in both cases is the same, adding the Geant4 header location to ROOT_INCLUDE_PATH, this is understood. But the message about the missing header file should still be printed, when it cannot be found, shouldn't it?; Running the command with `strace` let's one see that it fails to find the Geant4 headers. ### Expected behavior; Print the ""file not found"" message. ### To Reproduce; This gives the error message, but of course is nothing to see if the problem is solved:; ```; source /cvmfs/sft.cern.ch/lcg/views/LCG_98/x86_64-centos7-gcc8-opt/setup.sh; ddsim --compactFile ${DD4hepINSTALL}/DDDetectors/compact/SiD.xml -N 2 -G --gun.particle pi+ --outputFile my.root; ```. This is for the environment that still prints the header not found message; ```; source /cvmfs/sft.cern.ch/lcg/views/LCG_97a_FCC_2/x86_64-centos7-gcc8-opt/setup.sh; ddsim --compactFile ${DD4hepINSTALL}/DDDetectors/compact/SiD.xml -N 2 -G --gun.particle pi+ --outputFile my.root; ```; (That the XML file isn't there doesn't matter, the argument has to be filled). ### Setup. 1. ROOT master, 6.22.00; 2. centos7; 3. lcg install. ### Additional context. This isn't really high priority, as a work around is available, but from; https://sft.its.cern.ch/jira/browse/ROOT-11029?focusedCommentId=110376&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-110376; where @Axel-Naumann said; > I'm still a bit unhappy about the quality of the diagnostics;. I figured this is worth an issue. Originally discovered in: https://github.com/key4hep/EDM4hep/issues/42#issuecomment-721167821",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6791:2029,message,message,2029,https://root.cern,https://github.com/root-project/root/issues/6791,1,['message'],['message']
Integrability,"==ABORTING; [1] 5670 abort ./a.out AO2D.root; ```. Besides the crash, i would appreciate if one could show me how to create RNTuples in a given folder (which is probably something trivial I am missing). ### Reproducer. ```C++; #include <iostream>; #include <getopt.h>; #include <TFile.h>; #include <TTree.h>; #include <TKey.h>; #include <TLeaf.h>; #include <ROOT/RNTuple.hxx>; #include <ROOT/RNTupleModel.hxx>; #include <ROOT/RField.hxx>. void print_help(); {; std::cout << ""Usage: ao2dToAO2NT [options] input_file"" << std::endl;; std::cout << ""Options:"" << std::endl;; std::cout << "" -o, --output-file <file> Output file name"" << std::endl;; std::cout << "" -h, --help Print this help message"" << std::endl;; std::cout << "" -v, --verbose Verbose output"" << std::endl;; }. bool verbose = false;; std::string outputFile = ""ntuple.root"";; std::string inputFile;. void debug(const std::string& message); {; if (verbose) {; std::cout << message << std::endl;; }; }. void log(const std::string& message); {; std::cout << message << std::endl;; }. void error(const std::string& message); {; std::cerr << message << std::endl;; exit(1);; }. int main(int argc, char* argv[]); {; // Use getopt_long to parse the command line; // the first positional argument is the input file.; // -o is the output file; // -h is the help message; // -v is the verbose flag; static struct option long_options[] = {; {""output-file"", required_argument, nullptr, 'o'},; {""help"", no_argument, nullptr, 'h'},; {""verbose"", no_argument, nullptr, 'v'},; {nullptr, 0, nullptr, 0}};; int option_index = 0;; while (true) {; int c = getopt_long(argc, argv, ""o:hv"", long_options, &option_index);; // If the help flag is set, print the help message and exit; if (c == 'h') {; print_help();; return 0;; }; // If the verbose flag is set, print the verbose message; else if (c == 'v') {; verbose = true;; }; // If the output file is set, print the output file name; else if (c == 'o') {; outputFile = optarg;. } else if (c == -1) {; break;; } ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13996:9197,message,message,9197,https://root.cern,https://github.com/root-project/root/issues/13996,2,['message'],['message']
Integrability,"@bbockelm @pcanal @dpiparo . Here is the new imt unzipping basket with TTaskGroup interface. Comparing to #785 , I noticed there are still 3%(in Real Time) ~ 5%(in CPU Time) performance drops in new implementation. The degradation is caused by tbb function:. tbb::internal::custom_scheduler<tbb::internal::IntelSchedulerTraits>::receive_or_steal_task(long&). I suspect the reason is because #785 in the following function:. https://github.com/zzxuanyuan/root/blob/15cceff19b48dfe4a4b0c69c1ec07ea75bd1ccb5/tree/tree/src/TTreeCacheUnzip.cxx#L708. CreateTasks() explicitly creates 2 tasks (empty_task and MappingTask; and set_ref_count(2) means 2 tasks in total). The scheduler might make a better decision here since it knows there will be only one task except empty_task running in future. On the other hand, TTaskGroup uses tbb::task_group which calls the following function:. https://github.com/01org/tbb/blob/b9805bacadd4d0474fd3358cf0c7153042ce50c3/include/tbb/task_group.h#L108. task_group_base() also first creates a empty_task. However, it only creates 1 task(itself) by setting reference count as 1 (set_ref_count(1)). When it invoke another task by calling . https://github.com/01org/tbb/blob/b9805bacadd4d0474fd3358cf0c7153042ce50c3/include/tbb/task_group.h#L103. allocate_additional_child() will create a new task as child and increment reference count by 1. I guess accumulating tasks on-the-fly might degrade the performance since the tbb scheduler could spend more time on finding tasks to work on. In a short, I think explicitly defining the total number of tasks and task graph should have better performance (more efficient for scheduler I guess) than adding more tasks to task_group as the program runs. There are two alternative approaches that might improve the performance. ; 1. Since we have already know we will only have one task (except empty_task) to add into the task_group, we could revise TTaskGroup interface and notify it what task is going to run in advance.; 2. We coul",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1010:82,interface,interface,82,https://root.cern,https://github.com/root-project/root/pull/1010,1,['interface'],['interface']
Integrability,"@vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent.; When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:; `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree; - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```; const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;; host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;; ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```; Int_t fMemAvailable; // available RAM in MB; Int_t fMemCached; // cached RAM in MB; Int_t fMemBuffer; // buffer RAM in MB; Int_t fMemShared; // shared RAM in MB; Int_t fSwapCached; // cached swap in MB; Int_t fSReclaimable // slab that might be reclaimed; ```. Results:. ```; ➜ ROOT free -h; total used free shared buff/cache available; Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi; Swap: 7.6Gi 2.1Gi 5.5Gi; ```. ```; ➜ ROOT root -l; root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);; root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;; 23877 2786 7562; root [2] ; ```; Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14695:114,depend,dependent,114,https://root.cern,https://github.com/root-project/root/pull/14695,1,['depend'],['dependent']
Integrability,A RooAddPdf needs to have always a normalization set defined when evaluating. ; If this set is not defined it evaluates the component pdf without a normalization. This can cause an ambiguous definition of the coefficients and therefore a different shape of the pdf given the same coefficient values. ; See problem reported in ROOT-10814. This PR just add a warning message to warn users to not evaluate the pdf without having provided first a normalization set. . This simple code shows the problem: ; https://cernbox.cern.ch/index.php/s/iosEw6qHq51SLbi,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7129:365,message,message,365,https://root.cern,https://github.com/root-project/root/pull/7129,1,['message'],['message']
Integrability,"A constant source of dependabot unhappiness, and we really do not use this.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13008:21,depend,dependabot,21,https://root.cern,https://github.com/root-project/root/pull/13008,1,['depend'],['dependabot']
Integrability,"A lot of code but mainly due to the tests and pythonizations. Main place to focus on is `TMVA/RTensor.hxx`. In the following examples of the implemented features:. C++ example:. ```cpp; using namespace TMVA::Experimental;; RTensor<float> x({2, 3}); // container with shape (2, 3); x(0,0) = 1; // set element (0,0) to 1; cout << x(0, 0) << endl; // read element (0,0); // Returns:; // 1; cout << x << endl;; // Returns:; // { { 1, 0, 0 } { 0, 0, 0 } }; ```. Python example:. ```python; import ROOT; x = ROOT.TMVA.Experimental.RTensor(""float"")((2, 3)) # container with shape (2, 3); x[0,0] = 1 # set element (0,0); print(x[0,0]) # read element (0,0); # Returns:; # 1; print(x); # Returns:; # { { 1, 0, 0 } { 0, 0, 0 } }; ```. Memory adoption capability:. ```cpp; using namespace TMVA::Experimental;; float data[6] = {1, 2, 3, 4, 5, 6};; RTensor<float> x(data, {2, 3}); // adopt memory with given shape; cout << x << endl;; // Returns:; // { { 1, 2, 3 } { 4, 5, 6 } }; ```. Column-major and row-major memory ordering:. ```cpp; using namespace TMVA::Experimental;; float data[6] = {1, 2, 3, 4, 5, 6};; RTensor<float> x(data, {2, 3}, MemoryOrder::RowMajor);; cout << x << endl;; // Returns:; // { { 1, 2, 3 } { 4, 5, 6 } }; RTensor<float> x(data, {2, 3}, MemoryOrder::ColumnMajor);; cout << x << endl;; // Returns:; // { { 1, 3, 5 } { 2, 4, 6 } }; ```. RTensor to numpy conversion:. ```python; import ROOT; data = ROOT.std.vector(""float"")((1, 2, 3, 4, 5, 6)); x = ROOT.TMVA.Experimental.RTensor(""float"")(data.data(), (2, 3)); print(x); # Returns:; # { { 1, 2, 3 } { 4, 5, 6 } }. import numpy; y = numpy.asarray(x); print(y); # Returns:; # [[1, 2, 3],; # [4, 5, 6]]; ```. Missing features:. - [ ] STL iterator interface; - [ ] `ExpandDim` and `Squeeze` methods (shape manipulation); - [ ] `Apply` method (element manipulation, similar to STL iterator); - [ ] `ROOT.AsTensor` method (`numpy.array` to `RTensor` conversion)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2593:1704,interface,interface,1704,https://root.cern,https://github.com/root-project/root/pull/2593,1,['interface'],['interface']
Integrability,"A new `RooStringView` is introduced as a copy-free drop-in replacement for `const char*` in public RooFit interfaces, which also accepts a `std::string`. So far, this new `RooStringView` is used in the RooWorkspace accessors, and also in the dataset classes as it's a superior solution over using `std::string` view, which is not guaranteed to be null-terminated and needs specific preprocessor macros for the C++ case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9747:106,interface,interfaces,106,https://root.cern,https://github.com/root-project/root/pull/9747,1,['interface'],['interfaces']
Integrability,"A parallel writer enables the creation of multiple `RNTupleFillContext`, where each context prepares independent clusters that are appended to the common ntuple with internal synchronization. At the moment, this synchronization makes sure that only one thread is writing to the file at any moment. Fully parallel writing into reserved offsets can be a future extension, pending further investigation and evaluation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14519:175,synchroniz,synchronization,175,https://root.cern,https://github.com/root-project/root/pull/14519,2,['synchroniz'],['synchronization']
Integrability,A very common source of confusion for users is compilation errors coming from ROOT when the C++ standard they use to compile their application is different from the C++ standard with which ROOT was compiled. Some examples:. - https://root-forum.cern.ch/t/solution-for-rstringview-hxx37-error/44639; - https://mattermost.web.cern.ch/root/pl/xiyid5urd7nqtgt381czew1wso; - https://root-forum.cern.ch/t/compiler-error-related-to-c-17-string-view-with-gcc9-1/34727. It would be nice if we could catch this case in a frequently-included header or similar and provide a human-friendly error message instead.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8063:584,message,message,584,https://root.cern,https://github.com/root-project/root/issues/8063,1,['message'],['message']
Integrability,ACLiC now synthesizes a modulemap with a suffix _ACLiC_dict.modulemap. The file contains the source file to be compiled and the corresponding library.; ; The modulemap is then passed to rootcling via -fmodule-map-file= flag to avoid naming clashes with possibly existing other modulemap files.; ; This patch teaches cling to work with the -fmodule-map-file= flag.; ; ACLiC supports automatic inclusion of Rtypes.h (making ClassDef macro available). Modules are built in isolation and are resilient to #include of Rtypes.h at rootcling startup time. We make module Core (containing Rtypes.h) visible via a newly implemented callback. Depends on #3798,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3850:633,Depend,Depends,633,https://root.cern,https://github.com/root-project/root/pull/3850,1,['Depend'],['Depends']
Integrability,"AbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++; namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model; RooRealVar x{""x"", ""x"", 0, -10, 10};; RooRealVar mu{""mu"", ""mu"", 0, 0, 10};; RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;; x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values; std::vector<double> xValsHost;; for (std::size_t i = 0; i < numBins; ++i) {; x.setBin(i);; xValsHost.push_back(x.getVal());; }. // Copy observable values to the array; CudaInterface::DeviceArray<double> xValsDevice{numBins};; CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver; std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array; ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};; driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate; std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results; std::vector<double> hostOut(deviceOut.size());; CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);; for (int i = 0; i < numBins; ++i) {; std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;; }; ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. The evaluation of PDFs with the RooFitDriver also on the GPU is a very useful feature that we should not hide away for longer, now that it has proven itself as a backend for the likelihoods. This PR also removes some old code. More details in the commit description.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13389:1690,interface,interface,1690,https://root.cern,https://github.com/root-project/root/pull/13389,2,['interface'],['interface']
Integrability,"According to the RFC 2616, a 301 Status Code only ""SHOULD"" return; the new URI -- not ""MUST"". http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.2. Jira #7809: https://sft.its.cern.ch/jira/browse/ROOT-7809",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/108:112,Protocol,Protocols,112,https://root.cern,https://github.com/root-project/root/pull/108,1,['Protocol'],['Protocols']
Integrability,"According to the console logs the tests did not execute successfully, probably because of a badly setup dependency on libEvent. ### How it could be improved; Tests should be remade using CMake with a proper Event generation library and then tested for correctness against libasan.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8909:104,depend,dependency,104,https://root.cern,https://github.com/root-project/root/issues/8909,1,['depend'],['dependency']
Integrability,According to; https://docs.github.com/en/actions/managing-workflow-runs/skipping-workflow-runs writing [skip ci] anywhere in a commit message should automatically skipp the CI runs for this PR.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14609:134,message,message,134,https://root.cern,https://github.com/root-project/root/pull/14609,1,['message'],['message']
Integrability,"Add GitHub workflow to diff copy of LLVM and Clang, so we (hopefully) never forget to synchronize patches to LLVM and Clang into https://github.com/root-project/llvm-project/.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12117:86,synchroniz,synchronize,86,https://root.cern,https://github.com/root-project/root/pull/12117,1,['synchroniz'],['synchronize']
Integrability,Add HTTP Bearer token to Davix wrapper from config or env,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6818:31,wrap,wrapper,31,https://root.cern,https://github.com/root-project/root/pull/6818,1,['wrap'],['wrapper']
Integrability,Add README for the bulk IO interface.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3644:27,interface,interface,27,https://root.cern,https://github.com/root-project/root/pull/3644,1,['interface'],['interface']
Integrability,Add Rint as a dependency of rootcling,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11687:14,depend,dependency,14,https://root.cern,https://github.com/root-project/root/pull/11687,1,['depend'],['dependency']
Integrability,"Add Size() interface to TListOfFunctions and call this from GetNmethods,; so that we don't have to allocate memory for this. Profiled the peak meory performance in valgrind; total(B) ; master: 427,544,680; HEAD: 427,542,328",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1762:11,interface,interface,11,https://root.cern,https://github.com/root-project/root/pull/1762,1,['interface'],['interface']
Integrability,Add TMVA PyTorch Interface to Release Notes v6-24-00,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7624:17,Interface,Interface,17,https://root.cern,https://github.com/root-project/root/pull/7624,1,['Interface'],['Interface']
Integrability,"Add `long long` and `unsigned long long` to array interface. In PyROOT, these types are normalized to the ROOT types `Long64_t` and `ULong64_t`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3670:50,interface,interface,50,https://root.cern,https://github.com/root-project/root/pull/3670,1,['interface'],['interface']
Integrability,Add a Tutorial for IntegratorMultiDim,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7740:19,Integrat,IntegratorMultiDim,19,https://root.cern,https://github.com/root-project/root/issues/7740,1,['Integrat'],['IntegratorMultiDim']
Integrability,Add a chunking interface to TProcessExecutor,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/364:15,interface,interface,15,https://root.cern,https://github.com/root-project/root/pull/364,1,['interface'],['interface']
Integrability,Add a message for the long-deprecated Gtypes.h and Htypes.h headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4489:6,message,message,6,https://root.cern,https://github.com/root-project/root/pull/4489,1,['message'],['message']
Integrability,Add a message to enable builtin_glew on latest CMake for Mac,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5238:6,message,message,6,https://root.cern,https://github.com/root-project/root/pull/5238,1,['message'],['message']
Integrability,"Add a new interface to RooFit, which uses a `RunContext` object to store data. This allows for passing data around between nodes of the computation graph without having to alter class members.; Some residual altering of class members remains, so the interface is not thread safe. It, however, solves the problem of not being able to compute an integral, the likelihoods of entries in a dataset + possibly some other set of x-values while another computation is running. This is the key to solving things like ROOT-3874 or faster integrators. In this PR, the interface is never used. Uses + tests will come in later PRs, but I couldn't dump 30 commits in one PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6615:10,interface,interface,10,https://root.cern,https://github.com/root-project/root/pull/6615,4,"['integrat', 'interface']","['integrators', 'interface']"
Integrability,"Add a new page source and sink that use S3 as the backing store. Davix; is used as the S3 interface. The implementation is nearly identical; to the DAOS backend and there is a lot of duplicated code. ```cpp; std::string s3Uri(""s3://$(S3_BUCKET).$(S3_HOST)"");; {; auto model = RNTupleModel::Create();; auto pt = model->MakeField<float>(""pt"");; auto vec = model->MakeField<std::vector<int>>(""vec"");; // create a new RNTuple named `my_ntuple`; // -- objects are written to /bucket/my_ntuple/; auto writer = RNTupleWriter::Recreate(std::move(model), ""my_ntuple"", s3Uri);; for (int i = 0; i < 100; i++) {; *pt = 42.0;; *vec = {1, 2, 3};; writer->Fill();; }; }. // opens the RNTuple at the path /bucket/my_ntuple/; auto ntuple = RNTupleReader::Open(""my_ntuple"", s3Uri);; ```; results in the following objects stored in the bucket:; ```shell; my_ntuple/0 # page 0, 1, ... ; my_ntuple/1; my_ntuple/18446744073709551613 # footer; my_ntuple/18446744073709551614 # header; my_ntuple/18446744073709551615 # anchor; my_ntuple/2; ```; Like the current DAOS backend, one object is allocated for every page,; plus three for the header, footer, and anchor. Performance will not be; very good yet as only a single request at a time is issued. Pages are issued keys sequentially from 0, like the DAOS backend. There; are three reserved keys:; * anchor: u64(-1); * header: u64(-2); * footer: u64(-3). S3 access is controlled using the (ROOT & Davix-compatible) envvars:; * S3_REGION; * S3_SECRET_KEY; * S3_ACCESS_KEY. Perhaps these should be changed to the official AWS envvars. Todo:; - [ ] re-add cluster caching functionality to `PopulatePageFromCluster`; - [ ] implement `LoadCluster`; - [ ] test mocks; - [ ] test with real RNTuples; - [ ] issue concurrent requests to S3",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8525:90,interface,interface,90,https://root.cern,https://github.com/root-project/root/pull/8525,1,['interface'],['interface']
Integrability,"Add a utility function to call `TEntryList::Enter` with entries in a certain range, instead of having to do the loop manually. Especially useful in PyROOT to avoid doing the same in a Python loop; ### Initial idea; ```py; >>> import ROOT; >>> e = ROOT.TEntryList(); >>> e.GetN(); 0; >>> ROOT.ROOT.Detail.EnterRange(e, 0, 10); >>> e.GetN(); 10; ```. Not sure about the namespace and the naming, can be discussed. ### Final interface. ```py; >>> import ROOT; >>> e = ROOT.TEntryList(); >>> e.EnterRange(0,10); >>> e.GetN(); 10; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8740:422,interface,interface,422,https://root.cern,https://github.com/root-project/root/pull/8740,1,['interface'],['interface']
Integrability,Add a warning message to indicate that MethodDNN is deprecated and now MethodDL should be used. Improve handling of inputShapeLayout. InputBatchLayout is not really needed anymore and it is now removed from the tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5665:14,message,message,14,https://root.cern,https://github.com/root-project/root/pull/5665,1,['message'],['message']
Integrability,Add a warning message when the RooAddPdf normalization set is not defined (ROOT-10814),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7129:14,message,message,14,https://root.cern,https://github.com/root-project/root/pull/7129,1,['message'],['message']
Integrability,"Add an interface to gInterpreter, which can be used like:; ```; root [1] gInterpreter->HasPCMForLibrary(""libCore.so""); (bool) true; ```; With this, you can check if there is a pcm for a certain library.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2915:7,interface,interface,7,https://root.cern,https://github.com/root-project/root/pull/2915,1,['interface'],['interface']
Integrability,Add and apply the new TThreadExecutor::Foreach interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/397:47,interface,interface,47,https://root.cern,https://github.com/root-project/root/pull/397,1,['interface'],['interface']
Integrability,Add clearer wrt ownership interface to produce TInterpreterValue,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2795:26,interface,interface,26,https://root.cern,https://github.com/root-project/root/pull/2795,2,['interface'],['interface']
Integrability,Add dependency of Core on etc/gitinfo.txt,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14145:4,depend,dependency,4,https://root.cern,https://github.com/root-project/root/pull/14145,1,['depend'],['dependency']
Integrability,Add dependency.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/417:4,depend,dependency,4,https://root.cern,https://github.com/root-project/root/pull/417,1,['depend'],['dependency']
Integrability,"Add deprecation messages in PQ2, old deamons and authentication tools",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1755:16,message,messages,16,https://root.cern,https://github.com/root-project/root/pull/1755,1,['message'],['messages']
Integrability,Add detailed error message if RNTupleWriter::Write() fails,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14677:19,message,message,19,https://root.cern,https://github.com/root-project/root/pull/14677,1,['message'],['message']
Integrability,Add error message for failing TGrid::Connect issues,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16426:10,message,message,10,https://root.cern,https://github.com/root-project/root/pull/16426,1,['message'],['message']
Integrability,"Add error message for overflow in converting double to ULong64_t. ## Changes or fixes:; This routine returns now an unsigned 64 bit integer; For large values, larger than 1.84e+19, we print an error message; advising to use the Trandom::PoissonD for such large values,; and return the max value UINT64_MAX. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #6927",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14668:10,message,message,10,https://root.cern,https://github.com/root-project/root/pull/14668,3,"['message', 'rout']","['message', 'routine']"
Integrability,Add explicit dependency between Imt and G__Imt targets,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3227:13,depend,dependency,13,https://root.cern,https://github.com/root-project/root/pull/3227,1,['depend'],['dependency']
Integrability,Add integrator multi dim tutorial,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14730:4,integrat,integrator,4,https://root.cern,https://github.com/root-project/root/pull/14730,1,['integrat'],['integrator']
Integrability,Add interface to add a friend in RFriendInfo,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10841:4,interface,interface,4,https://root.cern,https://github.com/root-project/root/pull/10841,1,['interface'],['interface']
Integrability,Add libRooFitMore: Move roofit file depending on GSL in a new library,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4536:36,depend,depending,36,https://root.cern,https://github.com/root-project/root/pull/4536,1,['depend'],['depending']
Integrability,Add missing dependencies.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5233:12,depend,dependencies,12,https://root.cern,https://github.com/root-project/root/pull/5233,1,['depend'],['dependencies']
Integrability,Add missing dependency for Hist library,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4477:12,depend,dependency,12,https://root.cern,https://github.com/root-project/root/pull/4477,1,['depend'],['dependency']
Integrability,Add missing header to MonaLisa interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1163:31,interface,interface,31,https://root.cern,https://github.com/root-project/root/pull/1163,2,['interface'],['interface']
Integrability,"Add more functionality to new batch interface, notably; - The direct retrieval of spans from datasets / data histograms.; - Code that uses the new interface in RooNLLVar for testing. For the moment protected by an `#ifdef ROOFIT_NEW_BATCH_INTEFACE`.; - An implementation of a batch computation for the RooProdPdf. @phsft-bot build with flags -DCMAKE_CXX_FLAGS=-DROOFIT_NEW_BATCH_INTERFACE",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6650:36,interface,interface,36,https://root.cern,https://github.com/root-project/root/pull/6650,2,['interface'],['interface']
Integrability,Add numbered LinkDef headers to dependencies of Core module,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1374:32,depend,dependencies,32,https://root.cern,https://github.com/root-project/root/pull/1374,1,['depend'],['dependencies']
Integrability,"Add options to add extra dependencies in {REFLEX,ROOT}_GENERATE_DICTIONARY()",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4122:25,depend,dependencies,25,https://root.cern,https://github.com/root-project/root/pull/4122,1,['depend'],['dependencies']
Integrability,Add python version of RDF tutorial producing dimuon spectrum from CMS Open Data. This PR depends on #3571.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3631:89,depend,depends,89,https://root.cern,https://github.com/root-project/root/pull/3631,1,['depend'],['depends']
Integrability,"Add release notes for PyROOT (current and experimental), Jupyter notebook integration and command line tools.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3060:74,integrat,integration,74,https://root.cern,https://github.com/root-project/root/pull/3060,1,['integrat'],['integration']
Integrability,Add several improvements to use Unuran with the DistSampler interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8630:60,interface,interface,60,https://root.cern,https://github.com/root-project/root/pull/8630,1,['interface'],['interface']
Integrability,Add the physical column ID to the error message shown when a different compression setting than expected is encountered. This should help in locating potential bugs/mistakes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15654:40,message,message,40,https://root.cern,https://github.com/root-project/root/pull/15654,1,['message'],['message']
Integrability,"Add yet another fence in TClass::GetClass to avoid lookups and memory consumption. This PR aims to fix #9029. Give the sophisticated implementation of TClass::GetClass, perhaps it would be good to collect some feedback, especially by @pcanal . # This Pull request:; This PR avoids lookups and parsing in some cases.; One of the principles of the TClass::GetClass method implementation is to avoid as much as possible. . ## Changes or fixes:; This commit adds yet another fence in TClass::GetClass, checking if the name in input is the name of a known fundamental type or typedef to it.; In order to avoid code duplication, a routine previously available within the implementation of TClassEdit has been made available with a public API. ## Checklist:. - [v ] tested changes locally; - [v ] updated the docs (if necessary). This PR fixes #9029",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13341:625,rout,routine,625,https://root.cern,https://github.com/root-project/root/pull/13341,1,['rout'],['routine']
Integrability,Added PyTorch TMVA Interface to release notes. PTAL @lmoneta,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7624:19,Interface,Interface,19,https://root.cern,https://github.com/root-project/root/pull/7624,1,['Interface'],['Interface']
Integrability,Added TChain-like interface to THnBase histograms.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/212:18,interface,interface,18,https://root.cern,https://github.com/root-project/root/pull/212,1,['interface'],['interface']
Integrability,"Added an initial integration and test on how Automatic Differentiation (AD) can be implemented in RooFit. Currently, one can print the code of simple RF models they make with already supported classes. These simple models can also be evaluated through the generated code. This commit does not implement gradient calculation through clad. This pull request defines the necessary interfaces to support AD for RooFit classes; it also defines the functions that build the code required for AD and a wrapper class that wraps the JIT-ed function. . Also moved some of the `BatchModeHelpers` functions and classes to the header so that the `ADModeHelpers` can use them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11773:17,integrat,integration,17,https://root.cern,https://github.com/root-project/root/pull/11773,4,"['integrat', 'interface', 'wrap']","['integration', 'interfaces', 'wrapper', 'wraps']"
Integrability,Added dependencies to onepcm target to protect from running to early in build system.; ROOT_LIBRARY_TARGETS records all targets that is used for generation of allDict.cxx.pch.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2687:6,depend,dependencies,6,https://root.cern,https://github.com/root-project/root/pull/2687,1,['depend'],['dependencies']
Integrability,Added dependency on builtins from object libraries.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/899:6,depend,dependency,6,https://root.cern,https://github.com/root-project/root/pull/899,1,['depend'],['dependency']
Integrability,Added missing newline in error message,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/832:31,message,message,31,https://root.cern,https://github.com/root-project/root/pull/832,1,['message'],['message']
Integrability,"Added numpy array interface for; - `TVec`; - `TVector`; - `TMatrix`; - `std::vector`. and data types; - `float`; - `double`; - `int` (only `TVec` and `std::vector`); - `long` (only `TVec` and `std::vector`); - `unsigned int` (only `TVec` and `std::vector`); - `unsigned long` (only `TVec` and `std::vector`). WIP:; - ~~Which classes to be added?~~; - ~~Which data types?~~; - ~~What about the `numpy` dependence of the unittest?~~ I asked for numpy to activate the test.; - ~~Segfault for `TMatrixT(""int"")` and `TVectorT(""int"")`?~~ Not a problem of this PR.; - ~~Check endianess during compile-time?~~ Checked for `R__BYTESWAP` with pre-compiler.; - ~~What about histogram classes?~~ Not possible to maintain same return structure than `numpy.hist` solely by tweaking the array interface (that was the actual idea); - ~~What about the unsigned types?~~ Done for `std::vector` and `TVec`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1753:18,interface,interface,18,https://root.cern,https://github.com/root-project/root/pull/1753,3,"['depend', 'interface']","['dependence', 'interface']"
Integrability,"Added support for the VecGeom library as external package (-Dvecgeom). Creating new library libConverterVG within geom module. This contains the conversion interface for ROOT shapes into vecgeom ones, activated using the plugin mechanism from ROOT. Included also the class TGeoVGShape bridging TGeoShape methods to either VecGeom solid (navigation) or existing ROOT shape (visualisation and the rest). The conversion can be done once a ROOT geometry is in memory using:; TVirtualGeoConverter::Instance()->ConvertGeometry(); Once this is done, all TGeo functionality and tests can be accessed as for a standard TGeo geometry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/156:156,interface,interface,156,https://root.cern,https://github.com/root-project/root/pull/156,4,"['bridg', 'interface']","['bridging', 'interface']"
Integrability,Adding missing dependency to PyROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2802:15,depend,dependency,15,https://root.cern,https://github.com/root-project/root/pull/2802,1,['depend'],['dependency']
Integrability,Adding runtime_options and add dependencies between rootcling invocations.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/877:31,depend,dependencies,31,https://root.cern,https://github.com/root-project/root/pull/877,1,['depend'],['dependencies']
Integrability,Addition of Unique Ptr type Open interface with implementation,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14017:33,interface,interface,33,https://root.cern,https://github.com/root-project/root/pull/14017,1,['interface'],['interface']
Integrability,"Address: https://github.com/root-project/root/pull/12650#issuecomment-1517450219. From @hahnjo:. Hi @pcanal, our AddressSanitizer build reports a heap-buffer-overflow: https://lcgapp-services.cern.ch/root-jenkins/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastCompletedBuild/testReport/projectroot.roottest.root.tree/stl/roottest_root_tree_stl_make/. I bisected this to commit https://github.com/root-project/root/commit/2fa93de2a51e248a56418d8c6488b043746d0925; the error message says ""0x60700022d458 is located 8 bytes to the left of 80-byte region"". However, the stack trace points to the loop immediately after the added condition to perform the binary search. Could you take a look, please? What does TMath::BinarySearch return in case the element is not found?. Answer: yep it was missing the error handling (return value of -1)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12695:482,message,message,482,https://root.cern,https://github.com/root-project/root/pull/12695,1,['message'],['message']
Integrability,Addresses point 9 in the HEP-CCE/SOP interface review.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16557:37,interface,interface,37,https://root.cern,https://github.com/root-project/root/pull/16557,1,['interface'],['interface']
Integrability,Adds a STL iterator interface to RTensor iterating over the given view of the data. Still incomplete since not the full interface of the iterator is implemented.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3995:20,interface,interface,20,https://root.cern,https://github.com/root-project/root/pull/3995,2,['interface'],['interface']
Integrability,"Adds a `RRawFile` class in the `ROOT::Experimental::Detail` namespace for accessing files byte-wise or line-wise. This is supposed to be used in RNTuple as well as in the CSV and SQlite `RDataSource` classes. Files are addressed by URLs (e.g. http://server/file or file:///local/path) and derived classes of `RRawFile` implement the protocol-dependent low-level read routine. The class allows for; - unified access to files, either local or remote; - Automatic handling of UNIX and Windows line breaks ; - Control of the I/O buffer mechanism. Current todos:; - [ ] Use upcoming `RStatus` / `RException` based error handling; - [ ] Use RRawFile in RCsvDS and RSqliteDS and compare the performance to the current implementation ; - [x] Implementation of Davix based I/O, using ROOT's plugin infrastructure in order to avoid a dependency of RIO to RDAVIX; - [x] Revised I/O buffering mechanism to avoid buffer thrashing on `Readln`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3030:333,protocol,protocol-dependent,333,https://root.cern,https://github.com/root-project/root/pull/3030,3,"['depend', 'protocol', 'rout']","['dependency', 'protocol-dependent', 'routine']"
Integrability,Adds drawing possibilities for average ROC curves with cross validation. This integrates the work of @mohammaduzair9. Superseeds PR #2454.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2913:78,integrat,integrates,78,https://root.cern,https://github.com/root-project/root/pull/2913,1,['integrat'],['integrates']
Integrability,"After commit a0fa4fa, the integration of a RooParamHistFunc still; doesn't work when the RooParamHistFunc was cloned with `cloneTree`.; This was because the ranges were stored in a hash map keyed by argument; pointer and then not the correct clones of the arguments were used to; look up the ranges afterwards. This commit is fixing that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7479:26,integrat,integration,26,https://root.cern,https://github.com/root-project/root/pull/7479,1,['integrat'],['integration']
Integrability,"After commit a0fa4fa, the integration of a RooParamHistFunc still; doesn't work when the RooParamHistFunc was cloned with `cloneTree`.; This was because the ranges were stored in a hash map keyed by argument; pointer and then not the correct clones of the arguments were used to; look up the ranges afterwards. This commit is fixing that. The problem was reported in the ROOT forum: https://root-forum.cern.ch/t/barlow-beeston-in-subrange/43909/5.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7478:26,integrat,integration,26,https://root.cern,https://github.com/root-project/root/pull/7478,1,['integrat'],['integration']
Integrability,"After discussion, we only want to use `RRawFile` for files of dynamic type `TFile`, `TDavixFile`, and `TNetXNGFile`. Otherwise the native `TFile` (subclass) is wrapped in a `RRawFileTFile`. FYI @makortel @Dr15Jones",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15246:160,wrap,wrapped,160,https://root.cern,https://github.com/root-project/root/pull/15246,1,['wrap'],['wrapped']
Integrability,"After giving RooFit's categories a new interface, a lot of legacy code was left in place - the new categories support both the old and new interface.; The PR was split in two parts partly for testing that old code would still work, partly to make #5502 smaller.; Here, the big cleanup happens:; - Most uses of the legacy interface are replaced with the new interface; - Now-unused classes are removed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5514:39,interface,interface,39,https://root.cern,https://github.com/root-project/root/pull/5514,4,['interface'],['interface']
Integrability,"After my previous work on the RooFit minimizer interfaces, it is relatively easy to allow passing a custom gradient function to the RooMinimizer constructor. The interface might still evolve in the future, but this commit is still a milestone because now we can get actual `RooFitResult` objects that were obtained minimizing a RooFuncWrapper that wraps both the likelihood and the gradient code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12521:47,interface,interfaces,47,https://root.cern,https://github.com/root-project/root/pull/12521,3,"['interface', 'wrap']","['interface', 'interfaces', 'wraps']"
Integrability,"After recent change I get compiler error with `-Ddev=On` option like:. ```; tmva/sofie/inc/TMVA/ROperator_Conv.hxx: In instantiation of ‘std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Conv<T>::ShapeInference(std::vector<std::vector<long unsigned int> >) [with T = float]’:; /home/linev/git/webgui/tmva/sofie/inc/TMVA/ROperator_Conv.hxx:89:37: required from here; /home/linev/git/webgui/tmva/sofie/inc/TMVA/ROperator_Conv.hxx:99:19: error: comparison of unsigned expression in ‘< 0’ is always false [-Werror=type-limits]; 99 | if (fDim < 0 || fDim > 2) {; | ~~~~~^~~; ```. Looking in the code, and error message `std::runtime_error(""TMVA SOFIE Conv Op Shape inference only accept tensor with 3, 4 or 5 dimensions"")`, I suspect that these checks are wrong. One should have `if (fDim < 1 || fDim > 3)`. But while `fDim` is unsigned integer, one better ; checks original size `if (input[i].size() < 3 || input[i].size() > 5)`. Please fix",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9453:638,message,message,638,https://root.cern,https://github.com/root-project/root/issues/9453,1,['message'],['message']
Integrability,"After removing globbing in core module, if to fetch a fresh master; some headers were not able to get a valid relative path causing next error:; -- /home/oksana/CERN_sources/root/builds/include/TArrayF.h; CMake Error at cmake/modules/RootNewMacros.cmake:292 (message):; Header path '/home/oksana/CERN_sources/root/builds/include/TArrayF.h'; TArrayF.h is not relative!; Call Stack (most recent call first):; core/base/CMakeLists.txt:232 (ROOT_GENERATE_DICTIONARY); Adding extra replacement pattern, matching - $CMAKE_BUILD_DIR/include, fixes issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2554:259,message,message,259,https://root.cern,https://github.com/root-project/root/pull/2554,1,['message'],['message']
Integrability,"After reviewing the implementation of `RPageSinkBuf` and starting to prototype parallel RNTuple writing, I would like to propose moving the code related to descriptor building and serialization into a new class. The main observation here is that ""wrapping"" `RPageSink`s do not need that functionality, only the ""final"" sink that actually writes to files or DAOS. For now, I named the class `RPagePersistentSink`, but that's of course up for debate. Other options include ""final"" (even though that is ambiguous in the context of a class hierarchy) and ""serializing"". The first two commits may be useful independent of the rest of the series; the one to ""Avoid calling `PageSink::UpdateSchema` from `RPageSinkBuf`"" depends on moving the `Commit` implementations first (which access `fOpenColumnRanges` and `fOpenPageRanges`. *If* we decide that we want to introduce an intermediate class, we need to carefully benchmark with buffered writes disabled (ie without `RPageSinkBuf`) because there will now be two `virtual` function calls for every `Commit`; with `RPageSinkBuf` we avoid the duplicate serialization. I would expect negligible impact, but better to be sure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14142:247,wrap,wrapping,247,https://root.cern,https://github.com/root-project/root/pull/14142,2,"['depend', 'wrap']","['depends', 'wrapping']"
Integrability,"After the new batch interface was merged, one can rewrite the Romberg integrator to use batch evaluations. It turned out that the old integrator has a bug: It sometimes stops too early. Here's the performance of different integrators as extracted from tests that come via this PR. The numbers are the relative deviation from the analytic solution:; ```; Integrating log(a*x), relEps = 0.001; 	 	mean 	median 	q95 	q99 	max; 	old:	0.0016594	0.00161012	0.00193414	0.00225071	0.0168282	t=0.04; 	new:	0.000505525	0.00049051	0.000589222	0.000685661	0.0168282	t=0.03; 	ROOT:	3.45732e-08	3.36752e-08	4.03318e-08	4.62674e-08	0.0168282	t=0.14; Integrating log(a*x), relEps = 1e-06; 	 	mean 	median 	q95 	q99 	max; 	old:	2.45769e-05	2.45769e-05	2.4577e-05	2.4577e-05	2.4577e-05	t=0.19; 	new:	3.25114e-07	3.25114e-07	3.25115e-07	3.25115e-07	2.4577e-05	t=0.41; 	ROOT:	7.94638e-14	7.95337e-14	7.9692e-14	7.98497e-14	2.4577e-05	t=0.3; Old integrator reached poor precision: 2.45769e-05 +/- 4.91464e-11 instead of 1e-06; Integrating log(a*x), relEps = 1e-08; 	 	mean 	median 	q95 	q99 	max; 	old:	1.62946e-08	1.62946e-08	1.62946e-08	1.62946e-08	1.62946e-08	t=1.26; 	new:	3.98296e-10	3.98296e-10	3.98297e-10	3.98297e-10	1.62946e-08	t=1.48; 	ROOT:	7.94604e-14	7.95337e-14	7.96915e-14	7.98493e-14	1.62946e-08	t=0.38; [ OK ] Roo1DIntegrator.ConvergenceSettings_log (4402 ms); [ RUN ] Roo1DIntegrator.ConvergenceSettings_pol4; Integrating Polynomial 4th order, relEps = 0.001; 	 	mean 	median 	q95 	q99 	max; 	old:	3.01835e-16	1.45346e-16	5.65891e-16	2.22915e-15	1.15949e-13	t=0.04; 	new:	3.3408e-16	1.84038e-16	6.31068e-16	2.24297e-15	1.15949e-13	t=0.05; 	ROOT:	3.09356e-16	1.56283e-16	5.63307e-16	2.02418e-15	1.15949e-13	t=0.05; Integrating Polynomial 4th order, relEps = 1e-06; 	 	mean 	median 	q95 	q99 	max; 	old:	1.40432e-16	2.12767e-16	4.25546e-16	4.25569e-16	6.38354e-16	t=0.05; 	new:	1.77284e-16	2.12771e-16	4.25564e-16	6.38325e-16	6.38354e-16	t=0.04; 	ROOT:	1.44538e-16	2.12768e-16	4.25551e-16	4.25569e-16	6.383",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6632:20,interface,interface,20,https://root.cern,https://github.com/root-project/root/pull/6632,7,"['Integrat', 'integrat', 'interface']","['Integrating', 'integrator', 'integrators', 'interface']"
Integrability,"After the upgrade to LLVM 13, the test `roottest-root-meta-tclass-execInitOrder` will *crash* with AddressSanitizer instrumentation:; ```; 2187: Processing /home/jhahnfel/ROOT/src/roottest/root/meta/tclass/execInitOrder.cxx+...; 2187: Error in <TClass::LoadClassInfo>: no interpreter information for class Derived is available even though it has a TClass initialization routine.; 2187: Error in <TClass::LoadClassInfo>: no interpreter information for class Derived is available even though it has a TClass initialization routine.; 2187: Error in <TClass::LoadClassInfo>: no interpreter information for class Derived is available even though it has a TClass initialization routine.; 2187: Error in <TClass::LoadClassInfo>: no interpreter information for class Derived is available even though it has a TClass initialization routine.; 2187: Derived is found to inherit from TObject; 2187:; 2187: *** Break *** segmentation violation; 2187:; 2187:; 2187:; 2187: ===========================================================; 2187: There was a crash.; 2187: This is the entire stack trace of all threads:; 2187: ===========================================================; 2187: #0 0x00007f2a616e15db in waitpid () from /lib64/libc.so.6; 2187: #1 0x00007f2a61643ce7 in do_system () from /lib64/libc.so.6; 2187: #2 0x00007f2a630125cb in TUnixSystem::StackTrace (this=<optimized out>) at /home/jhahnfel/ROOT/src/core/unix/src/TUnixSystem.cxx:2395; 2187: #3 0x00007f2a6301c2df in TUnixSystem::DispatchSignals (this=0x617000000080, sig=kSigSegmentationViolation) at /home/jhahnfel/ROOT/src/core/unix/src/TUnixSystem.cxx:3615; 2187: #4 <signal handler called>; 2187: #5 0x00000000002d353e in __interceptor_strcmp.part.325 (); 2187: #6 0x00007f2a62e33daf in TClassTable::AddAlternate (normName=0x7f2a6007c780 <.str> ""UserClassViaTypedef"", alternate=0x7f2a6007c7c0 <.str> ""UserClass_t"") at /home/jhahnfel/ROOT/src/core/cont/src/TClassTable.cxx:447; 2187: #7 0x00007f2a62e382ed in ROOT::AddClassAlternate (normName=",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11867:370,rout,routine,370,https://root.cern,https://github.com/root-project/root/issues/11867,4,['rout'],['routine']
Integrability,Allow to use root as dependency using FetchContent,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8941:21,depend,dependency,21,https://root.cern,https://github.com/root-project/root/pull/8941,1,['depend'],['dependency']
Integrability,Allow to use root as dependency using `FetchContent`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8923:21,depend,dependency,21,https://root.cern,https://github.com/root-project/root/issues/8923,1,['depend'],['dependency']
Integrability,"Alright, I've put in the comments from @etejedor (thanks!). Now we've a refined version regarding the user interface:. ```python; @ROOT.DeclareCppCallable([""float""], ""float""); def f(x); return 2.0 * x. # General use-cases; ROOT.CppCallable.f(21) # Returns 42; ROOT.gInterpreter.ProcessLine(""cout << CppCallable::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe; df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""CppCallable::f(x)""); ```. You can set an optional name. ```python; @ROOT.DeclareCppCallable([""float""], ""float"", name=""g""); def f(x); return 2.0 * x. ROOT.CppCallable.g(21.0) # Returns 42; ```. By default, we try numba first and then fall back to the generic implementation. You can force only numba using `numba_only=True` as optional argument. ```python; @ROOT.DeclareCppCallable([""float""], ""float"", numba_only=True); def f(x); return 2.0 * x; ```. In addition, you can set a `verbose` flag to let PyROOT tell you if the decorator falls back to the generic implementation. ```python; @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True); def f(x); return ROOT.std.string(str(x)). ROOT.CppCallable.f(x); # 1) Throws Python warning:; # /home/stefan/foo.py:5: RuntimeWarning: Failed to compile Python callable using numba. Fall back to generic implementation.; # @ROOT.DeclareCppCallable([""float""], ""string"", verbose=True); # 2) Falls back to generic impl and prints ""42"" (as string); ```. **DEPRECATED:**. I've cleaned up and improved the feature. Here's the basic workflow now:. ```python; @ROOT.DeclareCallable([""float""], ""float""); def f(x); return 2.0 * x. # General use-cases; ROOT.ROOT.f(21) # Returns 42; ROOT.gInterpreter.ProcessLine(""cout << ROOT::f(21.0) << endl;"") # Prints 42.0. # Inject callable into dataframe; df = ROOT.ROOT.RDataFrame(10).Define(""x"", ""rdfentry__"").Define(""ROOT::f(x)""); ```. The `DeclareCallable` dispatches between numba and the generic implementation. It tries to compile the thingy with numba (falls through silently",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3488:107,interface,interface,107,https://root.cern,https://github.com/root-project/root/pull/3488,2,"['Inject', 'interface']","['Inject', 'interface']"
Integrability,Also adjust `rfield_check` that was checking the wrong message.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16627:55,message,message,55,https://root.cern,https://github.com/root-project/root/pull/16627,1,['message'],['message']
Integrability,Also avoid some heap allocations of `RooArgSet`s in `RooAbsPdf`. See commit messages for more information. The leak was a problem reported in the forum:; https://root-forum.cern.ch/t/roomomentmorph-slow-memory-leak/45062,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8238:76,message,messages,76,https://root.cern,https://github.com/root-project/root/pull/8238,1,['message'],['messages']
Integrability,Also fix TMVA-IMT dependencies and improve some of the memory allocations in LossFunction.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2632:18,depend,dependencies,18,https://root.cern,https://github.com/root-project/root/pull/2632,1,['depend'],['dependencies']
Integrability,Also fix/reduce library dependency for libRHTTP. Resolves #12766,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12798:24,depend,dependency,24,https://root.cern,https://github.com/root-project/root/pull/12798,1,['depend'],['dependency']
Integrability,Also make isBinnedDistribution depend on the vars rather than always return true. ## Changes or fixes:. Makes ParamHistFunc more flexible/powerful. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10516:31,depend,depend,31,https://root.cern,https://github.com/root-project/root/pull/10516,1,['depend'],['depend']
Integrability,"Also, throw an exception with a helpful error message if the user attempts to use `RooFit::Slice()` with a comma-separates list of category states, which is not supported. This addresses a question on the forum:; https://root-forum.cern.ch/t/plotting-two-categories-of-simultaneous-fit-in-a-single-plot/56250",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13637:46,message,message,46,https://root.cern,https://github.com/root-project/root/pull/13637,1,['message'],['message']
Integrability,"Although padding is implementation-dependent, most add enough padding at the end to comply with the requirements of the type with strictest alignment.; Given that `GetValueSize()` is used to allocate memory for the described type, not accouting trailing padding may cause issues. `ROOT::Experimental::RFieldDescriptor::CreateField()` has a direct use of RRecordField. Despite it seems to be working in all tested platforms, be on the safe side and add this padding. This, does not affect derived classes `RPairField` and `RTupleField`, that override determination of the size of the type. ## Checklist:; - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10790:35,depend,dependent,35,https://root.cern,https://github.com/root-project/root/pull/10790,1,['depend'],['dependent']
Integrability,Always link dependencies for external projects,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3050:12,depend,dependencies,12,https://root.cern,https://github.com/root-project/root/pull/3050,1,['depend'],['dependencies']
Integrability,An Info message is printed when this happens.; This resolves [ROOT-9270](https://sft.its.cern.ch/jira/browse/ROOT-9270).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1758:8,message,message,8,https://root.cern,https://github.com/root-project/root/pull/1758,1,['message'],['message']
Integrability,"Another attempt to silence many `Warnings C4624` like for example:; ```; 04:42:17 C:\build\night\LABEL\windows64\SPEC\default\V\master\root\interpreter\llvm\src\include\llvm/Support/type_traits.h(79,1): warning C4624: 'llvm::detail::copy_construction_triviality_helper<T>': destructor was implicitly defined as deleted [C:\build\night\LABEL\windows64\SPEC\default\V\master\build\interpreter\cling\lib\Utils\obj.clingUtils.vcxproj]; 04:42:17 with; 04:42:17 [; 04:42:17 T=clang::FixItHint; 04:42:17 ]; 04:42:17 C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits(585): message : see reference to class template instantiation 'llvm::detail::copy_construction_triviality_helper<T>' being compiled [C:\build\night\LABEL\windows64\SPEC\default\V\master\build\interpreter\cling\lib\Utils\obj.clingUtils.vcxproj]; 04:42:17 with; 04:42:17 [; 04:42:17 T=clang::FixItHint; 04:42:17 ]; 04:42:17 C:\build\night\LABEL\windows64\SPEC\default\V\master\root\interpreter\llvm\src\include\llvm/Support/type_traits.h(100): message : see reference to class template instantiation 'std::is_copy_constructible<llvm::detail::copy_construction_triviality_helper<T>>' being compiled [C:\build\night\LABEL\windows64\SPEC\default\V\master\build\interpreter\cling\lib\Utils\obj.clingUtils.vcxproj]; 04:42:17 with; 04:42:17 [; 04:42:17 T=clang::FixItHint; 04:42:17 ]; 04:42:17 C:\build\night\LABEL\windows64\SPEC\default\V\master\root\interpreter\llvm\src\include\llvm/ADT/SmallVector.h(312): message : see reference to class template instantiation 'llvm::is_trivially_copy_constructible<T>' being compiled [C:\build\night\LABEL\windows64\SPEC\default\V\master\build\interpreter\cling\lib\Utils\obj.clingUtils.vcxproj]; 04:42:17 with; 04:42:17 [; 04:42:17 T=clang::FixItHint; 04:42:17 ]; 04:42:17 C:\build\night\LABEL\windows64\SPEC\default\V\master\root\interpreter\llvm\src\include\llvm/ADT/SmallVector.h(1168): message : see reference to class template instantiation 'llvm::Smal",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12416:617,message,message,617,https://root.cern,https://github.com/root-project/root/pull/12416,1,['message'],['message']
Integrability,"Apple has switched to high-resolution timing for APFS, giving mu second resolution.; Ninja supports that since 1.9.0. BUT the binutils by Apple just write out zeros,; causing wrong time stamps and causing re-build events. CMake has worked around that by touching the library generated by Apple binutils,; to update its timestamp. That means:; On Apple (assuming Apple filesystem), with a recent Ninja, CMake has to be >= 3.14.4. This will be toned down to a WARNING message later - but for now, until we find the; CI nodes suffering from this, keep it as a FATAL_ERROR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6196:466,message,message,466,https://root.cern,https://github.com/root-project/root/pull/6196,1,['message'],['message']
Integrability,"Arguments for removing the splash screen:; * It introduces a dependency of the `root` executable of graphics libraries, like X11 on Linux or Cocoa on macOS.; * The Windows version is not kept up to date ([see the list of core developers](https://github.com/root-project/root/blob/master/core/winnt/src/Win32Splash.cxx#L32)).; * According to [Wikipedia](https://en.wikipedia.org/wiki/Splash_screen), ""splash screens are typically used by particularly large applications to notify the user that the program is in the process of loading"". The ROOT interpreter takes almost no time to load today. Probably that was different in the past, and a splash screen was justified back then.; * Users don't see it unless they run `root` with the `-a` option. In this case, the interpreter quits immediately (I think the option only exists just to show the splash screen for the historical record).; * It [doesn't work on multi-display setups](https://github.com/root-project/root/issues/14819).; * `root -b -a` turns on display even if you think it should run in batch mode; * It doesn't work on Wayland (see #15723) --> EDIT: It does work on wayland, it's just that the Xs were not fine.; * We're avoiding three `FIXME`s in the CMakeLists.txt in case of Cocoa. Closes #14819.; Closes [ROOT-10948](https://its.cern.ch/jira/browse/ROOT-10948).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15056:61,depend,dependency,61,https://root.cern,https://github.com/root-project/root/pull/15056,1,['depend'],['dependency']
Integrability,"As RVec is a class template, even if ROOT is compiled with -DNDEBUG; these asserts might be compiled in user code depending on whether or; not they remember to include `-DNDEBUG` in their debug flags.; I think the performance penalty is too high w.r.t. the benefit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9376:114,depend,depending,114,https://root.cern,https://github.com/root-project/root/pull/9376,1,['depend'],['depending']
Integrability,"As a follow up of the discussion in ROOT-9846:. https://sft.its.cern.ch/jira/browse/ROOT-9846. This PR injects the necessary pythonizations to support the `len(c)` syntax when getting the size of containers (`TCollection`, `TArray`, `RooAbsCollection` and their respective derivates) from Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3082:103,inject,injects,103,https://root.cern,https://github.com/root-project/root/pull/3082,1,['inject'],['injects']
Integrability,"As an intermediate step, needed was to add interface to add a friend in RFriendInfo. The current v6-26 RDatasetSpec resides in the internal namespace. This is needed to allow the fix for friends support in DistRDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11046:43,interface,interface,43,https://root.cern,https://github.com/root-project/root/pull/11046,1,['interface'],['interface']
Integrability,"As announced in 6.24 via a deprecation message, TTree.AsMatrix will be removed in 6.26. Any use of it should be replaced with; RDataFrame.AsNumpy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9144:39,message,message,39,https://root.cern,https://github.com/root-project/root/pull/9144,1,['message'],['message']
Integrability,"As commit 2db042523a explains, this header doesn't exist anymore since glibc 2.26. The oldest distributions that ROOT currently supports are EL8 and Debian 10, both of which have glibc 2.28. Remove the module as it also causes problems on FreeBSD due to including `locale.h` and a cyclic dependency `std -> xlocale.h -> std`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12999:288,depend,dependency,288,https://root.cern,https://github.com/root-project/root/pull/12999,1,['depend'],['dependency']
Integrability,"As discussed during https://indico.cern.ch/event/1176978/ :+1: . - [x] always add `EXTRA_CLING_ARGS='-O0 -fno-omit-frame-pointer' when `CLING_DEBUG=1`; - [x] suggest re-running with `CLING_DEBUG=1` in the message surrounding the ROOT-generated stack traces; - [x] investigate the runtime and memory cost of `CLING_DEBUG=1`, consider having it on by default in some cases, e.g. for interactive usage",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10870:205,message,message,205,https://root.cern,https://github.com/root-project/root/issues/10870,1,['message'],['message']
Integrability,"As discussed in the last I/O meeting, the current RFieldBase API for reading and writing is flawed. The `RFieldBase::Read()` and `RFieldBase::Append()` methods take `RFieldValue` parameters, as thin wrappers around the target/source memory location. This is a misuse of the `RFieldValue` class and does not provide any additional benefit. This PR changes the RFieldBase read/write APIs to use void pointers instead. It applies a similar change to the underlying `RColumn` read/write API (note that `RColumn` is supposed to be an internal API. NB: it still needs to move from `ROOT::Detail` to `ROOT::Internal`). In a follow-up PR, the following change is foreseen:; - Make `RFieldValue` an inner class of `RFieldBase`, i.e. `RFieldBase::RValue`; - Make `RFieldBase::Read()` and `RFieldBase::Append()` protected; - Call the `RFieldBase` read/write API only through `RFieldBase::RValue`; ; This would prevent random memory locations from using the RField read/write API. Only memory locations that come from a certain field (e.g., created by that field) will use the RField read/write API.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13219:199,wrap,wrappers,199,https://root.cern,https://github.com/root-project/root/pull/13219,1,['wrap'],['wrappers']
Integrability,"As discussed with @bluehood and @dpiparo, having ""passive"" function names is not desirable. Therefore, we adapt the interface accordingly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2626:116,interface,interface,116,https://root.cern,https://github.com/root-project/root/pull/2626,1,['interface'],['interface']
Integrability,"As explained in reviews.llvm.org/D43871, having cstdlib as part; of the stl module causes cyclic references between Clang's builtin; module and our stl module. The best fix is to not have cstdlib; in our module (which is anyway just a wrapping header around; stdlib.h).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3391:235,wrap,wrapping,235,https://root.cern,https://github.com/root-project/root/pull/3391,1,['wrap'],['wrapping']
Integrability,"As far as I can tell, it is currently not possible to use the REFLEX_GENERATE_DICTIONARY without variables that define include directories (or compile definitions). I would like to be able to let those be extract from target properties. I would also like to be not forced to set directory properties to have a more fine grained handle on dependencies. Even with directory properties extracting, e.g., include directories doesn't work when the generator expression comes out to be a list of directories.; E.g.; ```cmake; include_directories( $<TARGET_PROPERTY:podio::podio,INCLUDE_DIRECTORIES> ); ```; would lead to `... -I dir1;dir2`. Joining by hand (`$<JOIN....>`) also doesn't work because either the whitespace is not treated correctly, or COMMAND_EXPAND_LISTS is not part of ADD_CUSTOM_COMMAND, but that wouldn't solve my problem with using directory properties in the first place. So I propose the contained changes, which then lets one do; E.g.; ```cmake; add_library(edm4hep SHARED ${sources} ${headers}); target_link_libraries(edm4hep; PUBLIC; podio::podio; ); target_include_directories(edm4hep; PUBLIC; $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>; $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/edm4hep>; $<INSTALL_INTERFACE:edm4hep>; ); REFLEX_GENERATE_DICTIONARY(edm4hep ${headers} SELECTION src/selection.xml; USES edm4hep; ); ```; And all the required include directories are derived automatically from the edm4hep target given to `USES`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5019:338,depend,dependencies,338,https://root.cern,https://github.com/root-project/root/pull/5019,1,['depend'],['dependencies']
Integrability,"As mentioned [here](https://github.com/root-project/root/commit/24a1193e66b2499940fb581acf0144228bfdcd6e#diff-e181029772a3e9aeffcda7614c4b0b4af48d409768e3c48b8077f245a78f38c9R200-R204) in some setups the compiler is actually a symlink to `ccache`. When ROOT is compiled with such a wrapper, it stores `ccache` as the compiler in `compiledata.h` (with `#define CLING_CXX_RLTV ""ccache ""`) and then ROOT cannot figure out compiler include paths at runtime:. ```sh; $ root; ERROR in cling::CIFactory::createCI(): cannot extract standard library include paths!; Invoking:; LC_ALL=C ccache -xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \/.*++/p' -e '}'; Results was:; With exit code 0; ------------------------------------------------------------------; | Welcome to ROOT 6.26/02 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Apr 12 2022, 16:28:03 |; | From tags/v6-26-02@v6-26-02 |; | With |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10556:282,wrap,wrapper,282,https://root.cern,https://github.com/root-project/root/issues/10556,1,['wrap'],['wrapper']
Integrability,"As per Jira ticket ROOT-8483:. Creating a TTreeReaderValue after having looped over a TTreeReader prompts an error message at runtime. This error mentions calling `TTreeReader::Reset` as a solution, but said method does not exist.; Assuming `TTreeReader::Restart` was meant, the patch is trivial.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/304:115,message,message,115,https://root.cern,https://github.com/root-project/root/pull/304,1,['message'],['message']
Integrability,"As per a conversation with @jblomer on 16/11/2022 (and probably also related to https://github.com/root-project/root/pull/11628#discussion_r1023123773), it would be useful to provide a way for users to set a per-field callback function to be invoked after reading a value object. As an alternative to the (yet to be supported) manual schema evolution rules, this can be used as a simple way to inspect/modify the value object after reading. ### Describe the solution you'd like; Something similar to `RFieldBase::SetReadCallback(void (*)(RFieldValue&))` might be part of the `RFieldBase` public interface in order to allow users to set such callback.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11730:595,interface,interface,595,https://root.cern,https://github.com/root-project/root/issues/11730,1,['interface'],['interface']
Integrability,"As per discussion with Axel: have the ROOT interpreter warn about nullptr dereferences, but avoid injecting the checks in code that is not used interactively, as they bring a notable slowdown even to bug-free code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9112:98,inject,injecting,98,https://root.cern,https://github.com/root-project/root/issues/9112,1,['inject'],['injecting']
Integrability,"As pointed out by @bellenot , we need to cover the case in which the specified flags are (wrongly) `-Dpyroot=OFF` and `-Dpyroot_legacy=ON`. The proposed solution in this PR shows a fatal error message saying ""please reconfigure with pyroot=ON too"". Alternatively, we could automatically enable `pyroot` if `pyroot_legacy` has been set to ON. To be discussed with the reviewers. This assumes:; 1. `-Dpyroot=ON` means ""build me PyROOT"".; 2. `-Dpyroot_legacy=ON` means ""from the PyROOTs you have, build me the old one!"". So (1) activates PyROOT and (2) selects which PyROOT to build. Please shout if you have a different point of view.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5790:193,message,message,193,https://root.cern,https://github.com/root-project/root/pull/5790,1,['message'],['message']
Integrability,"As report by @scott-snyder in https://github.com/root-project/root/pull/11263. Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary; information (see ATR-25049). The ROOT internal class TClassTable records information about all classes; that could potentially be created. This is effectively a singleton,; but TClassTable itself does no locking. Rather, it depends on callers; already having acquired the root internal mutex. When a shared library; is loaded that contains dictionary information, TClassTable gets calls; to register information for classes defined in that file. However,; the ROOT lock is not acquired in that case. So a shared library load; could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock; when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading; in order to acquire the lock, but this hack is not possible with newer; versions of glibc, so this will eventually become a blocker for; moving to centos9.). See also https://github.com/root-project/root/pull/11263#issuecomment-1231069071",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12552:379,depend,depends,379,https://root.cern,https://github.com/root-project/root/issues/12552,1,['depend'],['depends']
Integrability,"As reported here:. https://sft.its.cern.ch/jira/browse/ROOT-8935. when looking up an enum, the current PyROOT returns an unsigned integer. The changes of this PR, migrated from current Cppyy, allow to create an enum type during the lookup and inject the enum values in it. This is done both for global and non-global lookups. This PR also includes a fix to get the underlying type of the enum when picking a converter for its values.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4121:243,inject,inject,243,https://root.cern,https://github.com/root-project/root/pull/4121,1,['inject'],['inject']
Integrability,"As requested by Vassil, I replaced the cmake INSTALL directive with the ROOT_INSTALL_HEADERS; directive and added EXCLUDE options for the BLAS and CUDA dependent headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/299:152,depend,dependent,152,https://root.cern,https://github.com/root-project/root/pull/299,1,['depend'],['dependent']
Integrability,"As said in TODO, LoadDictionaryForSTLType is passing ""#include <...>"" to; CINT interface to parse and process it, and was expensive. In Cling, we; have a new interface GenerateDictionary which we can instead use to; generate dictionary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1752:79,interface,interface,79,https://root.cern,https://github.com/root-project/root/pull/1752,2,['interface'],['interface']
Integrability,"As seen in https://github.com/cms-sw/cmssw/issues/33361, in some normal usage circumstances, TTreeCache::FillBuffer will issue an Error message (turned into an exception by CMSSW):; ```; fCurrentClusterStart=11348 fEntryCurrent=11392 fNextClusterStart=11394; but fEntryCurrent should not be in between the two ; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8048:136,message,message,136,https://root.cern,https://github.com/root-project/root/issues/8048,1,['message'],['message']
Integrability,"As seen in https://github.com/cms-sw/cmssw/pull/40435, ROOT I/O annotation can be moved from the comments to using `C++ attributes` (in particular because support for the comment is implemented internally through the same mechanics). To quote the referred pull request:. The way dictionary information are propagated from the `C++` code or `XML` dictionaries to reflex and cling is rather roundabout:. - a; - `<field name=""data_"" comment=""!""/>` tags `XML` dictionaries are parsed by `genreflex` and injected into the `LLVM AST` of the corresponding `C++` code as comments `//!`;; - `C++` comments like `//!` or `//[size_]` are converted by `genreflex/rootcling` into `LLVM AST` annotations; cling parses the `LLVM` annotations and uses them to generate the desired behavior in the dictionaries. This approach does not work well with macro-generated data members:. - macros cannot generate comments, so `//!` or `//[size_]` cannot be used directly;; - macros cannot easily be used to generate the `class_def.xml` file, requiring manual intervention for their implementation and maintenance. However, it turns out that dictionaries can bypass the comments and use LLVM annotations directly within the C++ code. So; ```; private:; int size_;; float* data_; //[size_]; float* transient_; //!; ```; can be also expressed as; ```; private:; int size_;; float* data_ [[clang::annotate(""[size_]"")]];; float* transient_ [[clang::annotate(""!"")]];; ```; and annotations can be generated by macros. In order to avoid spurious warnings when compiling the header, we should offer a (set of) macro(s), eg:. - `ROOT_IO_TRANSIENT` can be used to annotate transient data members, like `//!; - `ROO_IO_SIZE(SIZE)` can be used to annotate dynamic arrays, like `//[SIZE]`; or. - `ROOT_IO_ANNOTATE` that can be used with `ROOT_IO_ANNOATE(""!"")` and `ROOT_IO_ANNOTATE(""[size]"")`. The advantage of the earlier case would be to (possibly) allow simplification of the internal parsing, by using:; ```; float* data_ [[rootio::siz",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12012:499,inject,injected,499,https://root.cern,https://github.com/root-project/root/issues/12012,1,['inject'],['injected']
Integrability,"As seen in https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/3440/LABEL=ROOT-centos9,SPEC=noimt,V=master/testReport/junit/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_simple_lz4_compr_level1 : ; ```; hadd Target file: hsimple401.root; hadd compression setting for all output: 401; hadd Source file 1: hsimple.root; hadd Target path: hsimple401.root:/; -- TEST COMMAND -- ; cd /home/sftnight/build/night/LABEL/ROOT-centos9/SPEC/noimt/V/master/build/roottest/root/io/filemerger; /usr/bin/timeout -s USR2 270s /home/sftnight/build/night/LABEL/ROOT-centos9/SPEC/noimt/V/master/build/bin/root.exe -q -l -b /home/sftnight/build/night/LABEL/ROOT-centos9/SPEC/noimt/V/master/roottest/root/io/filemerger/testSimpleFile.C(""hsimple401.root"",25000,401,418980,7); -- BEGIN TEST OUTPUT --. Processing /home/sftnight/build/night/LABEL/ROOT-centos9/SPEC/noimt/V/master/roottest/root/io/filemerger/testSimpleFile.C(""hsimple401.root"",25000,401,418980,7)...; Checking hsimple401.root; (int) 1000. -- END TEST OUTPUT --; -- BEGIN TEST ERROR --; Error in <testSimpleFile>: Disk size of hsimple401.root should have been 418980 but is 418988 (tolerance 7 bytes). -- END TEST ERROR --; CMake Error at /home/sftnight/build/night/LABEL/ROOT-centos9/SPEC/noimt/V/master/build/RootTestDriver.cmake:186 (message):; got exit code 255 but expected 0; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12438:1317,message,message,1317,https://root.cern,https://github.com/root-project/root/issues/12438,1,['message'],['message']
Integrability,"As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```; <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature; <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'; Error: Module 'MathCore.pcm' failed to load.; Error: Error loading the default rootcling header files.; make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1; ```. while indeed. ```; $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm; -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm; -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm; -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm; -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm; -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm; ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11686:148,depend,dependency,148,https://root.cern,https://github.com/root-project/root/issues/11686,1,['depend'],['dependency']
Integrability,"As stated in the team meeting a month ago, we need dependencies between rootcling invocations when running with C++ modules because each built module needs to reference any depending C++ modules. This patch also adds a build option for C++ modules that needs to be set for this setting to get active. This build option should replace the environment variable that we had before in areas where it is more practical to have a fixed CMake setting such as running PRs on Jenkins or when having CMake specific code for C++ modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/877:51,depend,dependencies,51,https://root.cern,https://github.com/root-project/root/pull/877,2,['depend'],"['dependencies', 'depending']"
Integrability,"As stated in. https://bitbucket.org/wlav/cppyy/issues/176/issue-with-python-list-created-from-vector. in Cppyy-1.5.6 when we do the following:. l = [e for e in cppyy.gbl.get_vec()]. where get_vec() is a C++ injected function that returns a C++; std::vector<std::string>, the variable 'e' that goes through the vector is; not a Python string, but a temporary object of type std::string. Being 'e' a reference to a temporary, the vector goes out of scope. The second of the two solutions suggested in the discussion is applied; where necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4648:207,inject,injected,207,https://root.cern,https://github.com/root-project/root/pull/4648,1,['inject'],['injected']
Integrability,"As there is one RLoopManager per computation graph, when aliases; were managed by RLoopManager they were computation-graph-wide.; It is desirable to make Alias definitions behave coherently with; Defines instead, i.e. have Aliases be only accessible in the branch; of the computation graph in which they were defined, and only in; nodes that are downstream of the one where the alias is added. This resolves #7381, ""[DF] Let Aliases be defined per computation graph; branch, not globally"". In particular, in this commit:; - move alias management from RLoopManager to RBookedColumns; - remove alias-managing logic from RLoopManager; - refactor several functions so they only take RBookedColumns as input; rather than a list of defined names plus a map of aliases; (CheckForDefinition, CheckForRedefinition, FindUnknownColumns,; GetValidatedColumnNames, BookFilterJit, FindUsedColumns,; ParseRDFExpression); - use RBookedColumns::ResolveAlias instead of ResolveAlias helper function; - adapt dataframe_utils test to the new signature of FindUnknownColumns. Note that this is a backward-incompatible change for user code that; relied on this global definition of Aliases. We expect this to be an; exceedingly rare usecase, and if such code exists it will produce a; clear error message.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9496:1275,message,message,1275,https://root.cern,https://github.com/root-project/root/pull/9496,1,['message'],['message']
Integrability,"As we discussed in #2644, the nicest interface for printing is; printValue, and we should support people using this rather than going; through cling::Value::print(). This patch contains:; - Implementation of declarePrintValue; - Re-Implementation of ClingPrintValue because I changed to use Evaluate; some time ago; - removing of RVec version of printValue which wasn't used at all; - Fix test/vecops_rvec.cxx, printValue is never supposed to be called by; a normal user.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2664:37,interface,interface,37,https://root.cern,https://github.com/root-project/root/pull/2664,1,['interface'],['interface']
Integrability,"At this place buffer was allocated using length of source string.; gcc does not like when strncpy length argument directly derives from; source string length. Actually, buffer should not depend from source; length - here it was workaround for old problem, which is already fixed.; Therefore just use constant buffer length",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2472:187,depend,depend,187,https://root.cern,https://github.com/root-project/root/pull/2472,1,['depend'],['depend']
Integrability,Avoid XRootD dependency in public headers,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16660:13,depend,dependency,13,https://root.cern,https://github.com/root-project/root/pull/16660,1,['depend'],['dependency']
Integrability,"Avoid connecting the DNS and avoid using getaddrinfo and instead scan the list of network interface. In many cases those 2 operations were taking a significant amount of time during startup (in few cases; more than 5s). In some cases (e.g. MacOS and possibly other WiFi use) the hostname is actually not registered and; consequently the search failed anyway .... One drawback of the scan is that there is no cheap way to tell which of the IP4 addresses listed is; the 'public' address since only information are IP, port and name ... and the name is more or so; arbitrary (different on BSD and linux, depends on VPN or bridge, etc) ... so for now we just (try; to) skip the loopback interface. A better technique (which would lead again to a 'spurrious' startup delay) is to open a socket to; a known server (eg google's DNS 8.8.8.8) and then interogate the socket to find out the IP seen; by the server.; For example with (https://stackoverflow.com/questions/212528/get-the-ip-address-of-the-machine); ```; void GetPrimaryIp(char* buffer, size_t buflen); {; assert(buflen >= 16);. int sock = socket(AF_INET, SOCK_DGRAM, 0);; assert(sock != -1);. const char* kGoogleDnsIp = 8.8.8.8;; uint16_t kDnsPort = 53;; struct sockaddr_in serv;; memset(&serv, 0, sizeof(serv));; serv.sin_family = AF_INET;; serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);; serv.sin_port = htons(kDnsPort);. int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));; assert(err != -1);. sockaddr_in name;; socklen_t namelen = sizeof(name);; err = getsockname(sock, (sockaddr*) &name, &namelen);; assert(err != -1);. const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);; assert(p);. close(sock);; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4310:90,interface,interface,90,https://root.cern,https://github.com/root-project/root/pull/4310,4,"['bridg', 'depend', 'interface']","['bridge', 'depends', 'interface']"
Integrability,Avoid spurrious errors message about iteration not set in ClassInfo.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1300:23,message,message,23,https://root.cern,https://github.com/root-project/root/pull/1300,1,['message'],['message']
Integrability,"Backport from master: Silent the following zillion of warnings on Windows:; ```; C:\Users\sftnight\git\master\interpreter\llvm\src\include\llvm/Support/type_traits.h(97,1): warning C4624: 'llvm::detail::trivial_helper<T>': destructor was implicitly defined as deleted [C:\Users\sftnight\build\relwithdebinfo\interpreter\cling\lib\Interpreter\obj.clingInterpreter.vcxproj]; with; [; T=clang::Sema::ModuleScope; ]; C:\Users\sftnight\git\master\interpreter\llvm\src\include\llvm/Support/type_traits.h(150): message : see reference to class template instantiation 'llvm::detail::trivial_helper<T>' being compiled [C:\Users\sftnight\build\relwithdebinfo\interpreter\cling\lib\Interpreter\obj.clingInterpreter.vcxproj]; with; [; T=clang::Sema::ModuleScope; ]; C:\Users\sftnight\git\master\interpreter\llvm\src\include\llvm/ADT/SmallVector.h(315): message : see reference to class template instantiation 'llvm::is_trivially_copyable<T>' being compiled [C:\Users\sftnight\build\relwithdebinfo\interpreter\cling\lib\Interpreter\obj.clingInterpreter.vcxproj]; with; [; T=clang::Sema::ModuleScope; ]; C:\Users\sftnight\git\master\interpreter\llvm\src\include\llvm/ADT/SmallVector.h(837): message : see reference to class template instantiation 'llvm::SmallVectorImpl<T>' being compiled [C:\Users\sftnight\build\relwithdebinfo\interpreter\cling\lib\Interpreter\obj.clingInterpreter.vcxproj]; with; [; T=clang::Sema::ModuleScope; ]; C:\Users\sftnight\git\master\interpreter\llvm\src\tools\clang\include\clang/Sema/Sema.h(1724): message : see reference to class template instantiation 'llvm::SmallVector<clang::Sema::ModuleScope,16>' being compiled [C:\Users\sftnight\build\relwithdebinfo\interpreter\cling\lib\Interpreter\obj.clingInterpreter.vcxproj]; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7462:504,message,message,504,https://root.cern,https://github.com/root-project/root/pull/7462,4,['message'],['message']
Integrability,Backport in 6.20 of #5598 ; Fix compilation of cuda with C++14 when normal ROOT is compile with C++17 which has std::string_view. Fix it by modifying the pre-processor macros defined in RCOnfigure.h when compiling Cuda.; A better fix would be to remove the TString dependency in the Cuda compiled code. TString is used when doing I/O of the DeepNet layers to XML. In principle this code could be moved out of Cuda,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5604:265,depend,dependency,265,https://root.cern,https://github.com/root-project/root/pull/5604,1,['depend'],['dependency']
Integrability,"Backport of #7750. Add an implementation of getValV for RooAddPdf to use stored normalization set by default when the pdf is evaluated without passing a set. Disable printing of warning message of evaluating un-normalized RooAddPdf when doing:; - Call getVal in constructor of RooRealIntegral (not sure why this is needed); - printValue of any RooAbsPdf, where getVal(0) is also called; - RooAbsArg::graphVizTree where also getVal(0) is called when exporting the tree in a graphVizTree. This avoids having un-needed warning messages when printing or examing RooWorkspaces or pdf's",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7814:186,message,message,186,https://root.cern,https://github.com/root-project/root/pull/7814,2,['message'],"['message', 'messages']"
Integrability,"Backport of D27629, commit 18805ea951. Original commit message:; ```; Makes sure that the unwind info uses 64bits pcrel relocation if a large; code model is specified and handle the corresponding relocation in the; ExecutionEngine. This can happen with certain kernel configuration (the; same as the one in https://reviews.llvm.org/D27609, found at least on; the ArchLinux stock kernel and the one used on https://www.packet.net/); using the builtin JIT memory manager. Co-authored-by: Yichao Yu <yyc1992@gmail.com>; Co-authored-by: Valentin Churavy <v.churavy@gmail.com>; ```. Note: The handling in ExecutionEngine was committed in a different; revision and is already part of LLVM 9. We need the part about emitting; relocations because eh_frame (allocated in a data section) may be more; than 4Gb away from the code section it references. See the discussion; in https://github.com/cms-sw/cmssw/issues/31123 for context.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7563:55,message,message,55,https://root.cern,https://github.com/root-project/root/pull/7563,1,['message'],['message']
Integrability,"Backport of D27629, commit 18805ea951. Original commit message:; ```; Makes sure that the unwind info uses 64bits pcrel relocation if a large; code model is specified and handle the corresponding relocation in the; ExecutionEngine. This can happen with certain kernel configuration (the; same as the one in https://reviews.llvm.org/D27609, found at least on; the ArchLinux stock kernel and the one used on https://www.packet.net/); using the builtin JIT memory manager. Co-authored-by: Yichao Yu <yyc1992@gmail.com>; Co-authored-by: Valentin Churavy <v.churavy@gmail.com>; ```. Note: The handling in ExecutionEngine was committed in a different; revision and is already part of LLVM 9. We need the part about emitting; relocations because eh_frame (allocated in a data section) may be more; than 4Gb away from the code section it references. See the discussion; in https://github.com/cms-sw/cmssw/issues/31123 for context. (cherry picked from commit f481e8fe6df177ec1a50a10b7d76df5fb0b5c2a2). v6.24 version of #7563",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7606:55,message,message,55,https://root.cern,https://github.com/root-project/root/pull/7606,1,['message'],['message']
Integrability,"Backport of D99607, commit 6415f424bc. Original commit message:; ```; When using the large code model with FastISel (for example via; clang -O0 which adds the optnone attribute), FP constants could; still be materialized using adrp + ldr. Unconditionally enable; the existing path for MachO to materialize the constant in code. [...]; ```. See the discussion in https://github.com/cms-sw/cmssw/issues/31123; for context on the observed crashes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7806:55,message,message,55,https://root.cern,https://github.com/root-project/root/pull/7806,2,['message'],['message']
Integrability,"Backport of [D99607](https://reviews.llvm.org/D99607), commit https://github.com/llvm/llvm-project/commit/6415f424bc2a3bbb4f2fd7bb67863968ac3c19f6. Original commit message:; ```; When using the large code model with FastISel (for example via; clang -O0 which adds the optnone attribute), FP constants could; still be materialized using adrp + ldr. Unconditionally enable; the existing path for MachO to materialize the constant in code. [...]; ```. See the discussion in https://github.com/cms-sw/cmssw/issues/31123 for context on the observed crashes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7757:164,message,message,164,https://root.cern,https://github.com/root-project/root/pull/7757,1,['message'],['message']
Integrability,"Backport of [D99607](https://reviews.llvm.org/D99607). Original commit message:; ```; When using the large code model with FastISel (for example via; clang -O0 which adds the optnone attribute), FP constants could; still be materialized using adrp + ldr. Unconditionally enable; the existing path for MachO to materialize the constant in code. [...]; ```. See the discussion in https://github.com/cms-sw/cmssw/issues/31123 for context on the observed crashes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7758:71,message,message,71,https://root.cern,https://github.com/root-project/root/pull/7758,1,['message'],['message']
Integrability,"Backport of commit 1b5404aff3. Original commit message:; ```; We would previously pick between calling an initializer list constructor; and calling a default constructor unstably in this situation, depending; on whether the inherited default constructor had already been used; elsewhere in the program.; ```. This commit first appeared in LLVM 10 and fixes some problems with modules when building with GCC 12, for example ODRHash asserts in `roottest-root-io-uniquePointer`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11359:47,message,message,47,https://root.cern,https://github.com/root-project/root/pull/11359,2,"['depend', 'message']","['depending', 'message']"
Integrability,"Backport of commit 1b5404aff3. Original commit message:; ```; We would previously pick between calling an initializer list constructor; and calling a default constructor unstably in this situation, depending; on whether the inherited default constructor had already been used; elsewhere in the program.; ```. This commit first appeared in LLVM 10 and fixes some problems with modules when building with GCC 12, for example ODRHash asserts in `roottest-root-io-uniquePointer`. (cherry picked from commit cf32d2bc738367fe0d5c8ccbc0856d345f824228). Backport of PR https://github.com/root-project/root/pull/11359",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11362:47,message,message,47,https://root.cern,https://github.com/root-project/root/pull/11362,2,"['depend', 'message']","['depending', 'message']"
Integrability,"Backport of https://github.com/root-project/root/pull/6055. Same as for the PR in master, if a better solution can be implemented using the automatic C++ wrappers of cppyy (work started by @vepadulano ), the changes in this PR will not be necessary anymore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6065:154,wrap,wrappers,154,https://root.cern,https://github.com/root-project/root/pull/6065,1,['wrap'],['wrappers']
Integrability,"Base classes for attributes defined in gpad, but also some classes like; RPad uses line or fill attributes. Later attributes can be extracted; into separate library. Should resolve circular dependency error, detected only on Windows",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3702:190,depend,dependency,190,https://root.cern,https://github.com/root-project/root/pull/3702,1,['depend'],['dependency']
Integrability,"Basic workflow is as follows (have a look at the commited tutorial):. **Combinations of two vectors:**; ```cpp; RVec<double> v1{1., 2., 3.};; RVec<double> v2{-4., -5.};; auto idx = Combinations(v1, v2);; auto c1 = Take(v1, idx[0]);; auto c2 = Take(v2, idx[1]);; auto v3 = c1 * c2;; ```. **Unique combinations of elements from a single vector:**; ```cpp; RVec<double> v1{1., 2., 3.};; auto idx = Combinations(v1, 2);; auto c1 = Take(v1, idx[0]);; auto c2 = Take(v1, idx[1]);; auto v2 = c1 * c2;; ```; Depends on #2351",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2477:500,Depend,Depends,500,https://root.cern,https://github.com/root-project/root/pull/2477,1,['Depend'],['Depends']
Integrability,"Because RDataFrame is not available on 32bit, we have to disable the; experimental parts of TMVA which are dependent on it as well.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3957:107,depend,dependent,107,https://root.cern,https://github.com/root-project/root/pull/3957,1,['depend'],['dependent']
Integrability,"Because of limited flaoting point precision, an error message was issued; on 32 bit architectures. The concerned check for equality check is now; a bit more forgiving.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4212:54,message,message,54,https://root.cern,https://github.com/root-project/root/pull/4212,1,['message'],['message']
Integrability,"Because of limited floating point precision, an error message was issued; on 32 bit architectures. The concerned check for equality is now; a bit more forgiving. (cherry picked from commit b8235e91725d94dc6231e8006e2de53dc1b2671e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4218:54,message,message,54,https://root.cern,https://github.com/root-project/root/pull/4218,1,['message'],['message']
Integrability,"Because of these errors (see e.g. https://bit.ly/31y2jSa):. ```; Plugin dlopen(libXrdSecgsi-4.so, 256): image not found sec.protocol libXrdSecgsi-4.so; Secsss: 0x30 cryptography load failed; Protocol not supported; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5946:124,protocol,protocol,124,https://root.cern,https://github.com/root-project/root/pull/5946,4,"['Protocol', 'protocol']","['Protocol', 'protocol']"
Integrability,"Because of these errors (see e.g. https://bit.ly/31y2jSa):. ```; Plugin dlopen(libXrdSecgsi-4.so, 256): image not found sec.protocol libXrdSecgsi-4.so; Secsss: 0x30 cryptography load failed; Protocol not supported; ```. @hageboeck i'm not sure whether this interferes with #5938",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5943:124,protocol,protocol,124,https://root.cern,https://github.com/root-project/root/pull/5943,2,"['Protocol', 'protocol']","['Protocol', 'protocol']"
Integrability,"Before this commit, if users requested `VariationsFor(result)` but; `result` did not depend on any variation, we constructed a (no-op); RVariedAction anyway and added it to the computation graph. With this patch we do not add this no-op node to the computation; graph if it's not needed. RResultMap had to be taught how to deal; with this case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10683:85,depend,depend,85,https://root.cern,https://github.com/root-project/root/pull/10683,2,['depend'],['depend']
Integrability,"Both `Foo<double>` and `Foo<Double32_t>` have the same typeid.; Before this commit, TClass::GetClass(typeid(Foo<double>)) would return; whatever was registered *last*. This is not ""stable""; it depends on which; branch is accessed first, or which TClass::GetClass call happens first, or; which library is loaded first. Make this more reporducible by consistently preferring types will less; Double32_t / Float16_t occurrences uin the typename. While at this, only remove a TClass from the typeid=>TClass map if it; really is the value for the typename.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12480:193,depend,depends,193,https://root.cern,https://github.com/root-project/root/pull/12480,1,['depend'],['depends']
Integrability,"Boundary/FindNode implementations. * The use of a 3D voxel grid (TGeoVoxelGrid) structure, able to store properties ""local"" or in the vicinity of a cartesian coordinate P. This structure allows to reduce the (typical) algorithmic complexity for ""Safety"" queries to ~O(1) (with a constant factor determined by the voxel size). Filling of the 3D voxel grid cache for Safety is done on-the-fly (using the BVH once). * (Optional) Additional caching of ""last-call"" safety values for really quick return when the value is still valid at the next call. Ideas for these improvements come from prior work in related libraries such as VecGeom. -----. Implementation details:. * The implementation is, for now (until fully tested), provided in a backward compatible manner:. - By default, nothing changes; - Users have to activate the BVH mode by setting an environment variable TGEO_PW_USEBVH; - Users may hence compare the 2 modes. * Functions for Safety, FindNode, FindBoundary dispatch to some internal implementation. This causes an extra lookup/jump, which can be removed once BVH is fully validated. * For the BVH, a well known open source implementation is included in header-only form. The headers are copied from https://github.com/madmann91/bvh commit 66e445b92f68801a6dd8ef943fe3038976ecb4ff. * A new class, TGeoVoxelGrid is provided for the cartesian VoxelGrid container. ----. Performance examples:. In a test with the ALICE simulation framework including the ITS + TPC detectors with 48240 volumes on the parallel world, we see. * initialization time goes from TGeoVoxelFinder: 10s ---> BVH: 40ms; * Geant simulation time: 10s --> 2s; * memory usage: 3GB --> 1GB. Hence, this PR will make a big difference for the ALICE simulation program. It was verified, that identical results (number of hits, steps, etc) are obtained when going from TGeoVoxelFinder --> BVH+GRID. ----. Outlook:. Similar techniques could be applied to ordinary TGeoNavigator routines. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16442:2954,rout,routines,2954,https://root.cern,https://github.com/root-project/root/pull/16442,1,['rout'],['routines']
Integrability,Bug reports: https://gitlab.kitware.com/cmake/cmake/-/issues/19662; and; https://github.com/microsoft/vcpkg/pull/7967. -- Looking for GLEW; CMake Error at cmake/modules/SearchInstalledSoftware.cmake:520 (message):; Please enable builtin Glew due bug in latest CMake (use cmake option; -Dbuiltin_glew=ON).; Call Stack (most recent call first):; CMakeLists.txt:168 (include),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5238:204,message,message,204,https://root.cern,https://github.com/root-project/root/pull/5238,1,['message'],['message']
Integrability,"Building ROOT with gcc 11.2.0 on a centos7 system with the following configuration:. cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_EXTENSIONS=Off -DCMAKE_INSTALL_PREFIX=/opt/root/v6-26-02_gc112_c17 -GNinja ../src. fails with the following error:; ```; [2542/9705] Performing download step (download, verify and extract) for 'XROOTD'; FAILED: builtins/xrootd/XROOTD-prefix/src/XROOTD-stamp/XROOTD-download /bld6/root/bld/builtins/xrootd/XROOTD-prefix/src/XROOTD-stamp/XROOTD-download ; cd /bld6/root/bld/builtins/xrootd/XROOTD-prefix/src && /bld4/opt/cmake/3.22.2/bin/cmake -P /bld6/root/bld/builtins/xrootd/XROOTD-prefix/src/XROOTD-stamp/XROOTD-download-Release.cmake && /bld4/opt/cmake/3.22.2/bin/cmake -E touch /bld6/root/bld/builtins/xrootd/XROOTD-prefix/src/XROOTD-stamp/XROOTD-download; CMake Error at XROOTD-stamp/XROOTD-download-Release.cmake:49 (message):; Command failed: 1. '/bld4/opt/cmake/3.22.2/bin/cmake' '-Dmake=' '-Dconfig=' '-P' '/bld6/root/bld/builtins/xrootd/XROOTD-prefix/src/XROOTD-stamp/XROOTD-download-Release-impl.cmake'. ```. attached are the XROOTD-download-err.log and XROOTD-download-out.log; [XROOTD-download-err.log](https://github.com/root-project/root/files/8624870/XROOTD-download-err.log); [XROOTD-download-out.log](https://github.com/root-project/root/files/8624872/XROOTD-download-out.log)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10527:850,message,message,850,https://root.cern,https://github.com/root-project/root/issues/10527,1,['message'],['message']
Integrability,"Building clad should not depend on the result of the connectivity check, but whether it is enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15416:25,depend,depend,25,https://root.cern,https://github.com/root-project/root/pull/15416,1,['depend'],['depend']
Integrability,Builtin CFITSIO: 3.45 -> 4.4.0 to avoid indirect CURL dependency,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15508:54,depend,dependency,54,https://root.cern,https://github.com/root-project/root/pull/15508,1,['depend'],['dependency']
Integrability,"Bumps [minimist](https://github.com/minimistjs/minimist) and [mkdirp](https://github.com/isaacs/node-mkdirp). These dependencies needed to be updated together.; Updates `minimist` from 0.0.8 to 1.2.7; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/minimistjs/minimist/blob/main/CHANGELOG.md"">minimist's changelog</a>.</em></p>; <blockquote>; <h2><a href=""https://github.com/minimistjs/minimist/compare/v1.2.6...v1.2.7"">v1.2.7</a> - 2022-10-10</h2>; <h3>Commits</h3>; <ul>; <li>[meta] add <code>auto-changelog</code> <a href=""https://github.com/minimistjs/minimist/commit/0ebf4ebcd5f7787a5524d31a849ef41316b83c3c""><code>0ebf4eb</code></a></li>; <li>[actions] add reusable workflows <a href=""https://github.com/minimistjs/minimist/commit/e115b63fa9d3909f33b00a2db647ff79068388de""><code>e115b63</code></a></li>; <li>[eslint] add eslint; rules to enable later are warnings <a href=""https://github.com/minimistjs/minimist/commit/f58745b9bb84348e1be72af7dbba5840c7c13013""><code>f58745b</code></a></li>; <li>[Dev Deps] switch from <code>covert</code> to <code>nyc</code> <a href=""https://github.com/minimistjs/minimist/commit/ab033567b9c8b31117cb026dc7f1e592ce455c65""><code>ab03356</code></a></li>; <li>[readme] rename and add badges <a href=""https://github.com/minimistjs/minimist/commit/236f4a07e4ebe5ee44f1496ec6974991ab293ffd""><code>236f4a0</code></a></li>; <li>[meta] create FUNDING.yml; add <code>funding</code> in package.json <a href=""https://github.com/minimistjs/minimist/commit/783a49bfd47e8335d3098a8cac75662cf71eb32a""><code>783a49b</code></a></li>; <li>[meta] use <code>npmignore</code> to autogenerate an npmignore file <a href=""https://github.com/minimistjs/minimist/commit/f81ece6aaec2fa14e69ff4f1e0407a8c4e2635a2""><code>f81ece6</code></a></li>; <li>Only apps should have lockfiles <a href=""https://github.com/minimistjs/minimist/commit/56cad44c7f879b9bb5ec18fcc349308024a89bfc""><code>56cad44</code></a></li>; <li>[Dev Deps] update <code>covert</code",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11865:116,depend,dependencies,116,https://root.cern,https://github.com/root-project/root/pull/11865,1,['depend'],['dependencies']
Integrability,"Bumps [path-parse](https://github.com/jbgutierrez/path-parse) from 1.0.6 to 1.0.7.; <details>; <summary>Commits</summary>; <ul>; <li>See full diff in <a href=""https://github.com/jbgutierrez/path-parse/commits/v1.0.7"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=path-parse&package-manager=npm_and_yarn&previous-version=1.0.6&new-version=1.0.7)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11863:270,Depend,Dependabot,270,https://root.cern,https://github.com/root-project/root/pull/11863,9,"['Depend', 'depend']","['Dependabot', 'dependabot', 'dependabot-automerge-end', 'dependabot-automerge-start', 'dependabot-badges', 'dependabot-security-updates', 'dependency-name']"
Integrability,"By introducing a virtual `FCNBase::HasGradient()` method and moving the; former `FCNGradientBase` interface to the base class, we don't need to; repeat lots of code just for dealing with both the `FCNBase` and; `FCNGradientBase` types. This is a completely backwards compatible change that makes the Minuit 2; code more maintainable. Another commit in this PR removed the unused `FCNGradientBase::CheckGradient()` member function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16393:98,interface,interface,98,https://root.cern,https://github.com/root-project/root/pull/16393,1,['interface'],['interface']
Integrability,C++ modules: dependency issue on out of date Rint.pcm,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10271:13,depend,dependency,13,https://root.cern,https://github.com/root-project/root/issues/10271,1,['depend'],['dependency']
Integrability,CMake GenerateDict dependency fixes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3404:19,depend,dependency,19,https://root.cern,https://github.com/root-project/root/pull/3404,1,['depend'],['dependency']
Integrability,CMake dependency on Python: use targets,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6753:6,depend,dependency,6,https://root.cern,https://github.com/root-project/root/issues/6753,1,['depend'],['dependency']
Integrability,CMake integration with external projects,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/916:6,integrat,integration,6,https://root.cern,https://github.com/root-project/root/pull/916,1,['integrat'],['integration']
Integrability,"CMake offers three visibility qualifiers for target include; directories, which are populated to target properties as shown in the; following table:. | | `INTERFACE` | `PUBLIC` | `PRIVATE` |; | --- | --- | --- | --- |; | `INCLUDE_DIRECTORIES` | | x | x |; | `INTERFACE_INCLUDE_DIRECTORIES` | X | x | |. For dictionary generation the `PUBLIC` and `INTERFACE` qualifiers and; hence the `INTERFACE_INCLUDE_DIRECTORIES` are to be preferred, because; header files meant to be consumed by the user are usually put into; `PUBLIC` and/or `INTERFACE` qualified directories. Furthermore, the CMake; imported targets always have `INTERFACE` visibility. This commit changes the current behaviour to read the; `INTERFACE_INCLUDE_DIRECTORIES` (as opposed to the `INCLUDE_DIRECTORIES`); target property which will catch more desired use cases, including; imported targets. In other words, this will now ignore `PRIVATE` include; directories, but include `INTERFACE` include directories - `PUBLIC` ones; stay unchanged. In addition, this commit adds a condition which ignores include; directories formulated as a CMake generator expression. Unfortunately,; there is currently no way to evaluate those seperately.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/942:155,INTERFACE,INTERFACE,155,https://root.cern,https://github.com/root-project/root/pull/942,5,['INTERFACE'],['INTERFACE']
Integrability,CTest fixtures which have previously been added to Rootbench have been useful in defining better dependencies for tests. Since we currently cannot have dependencies between tests fixtures should be added into both root and roottest.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8707:97,depend,dependencies,97,https://root.cern,https://github.com/root-project/root/issues/8707,2,['depend'],['dependencies']
Integrability,"CXXRecordDecls will synthesize special functions through lookup, but; do not expose them as part of the DeclContext iteration. Synthesize them,; and inject them into the iteration of TClingMethodInfo. This is especially; needed for modules which aggressively prune these special functions, relying; on DefinitionData instead. This also fixes roottest/root/meta/runMemberComments.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5036:149,inject,inject,149,https://root.cern,https://github.com/root-project/root/pull/5036,1,['inject'],['inject']
Integrability,"Call typed overload of `SetBranchAddress` for array types like `np.ndarray` or `array.array`. The correct C++ template parameter is inferred from the array interface type information. This is an improvement for two reasons:. 1. We don't need to cast the arrays to a `void *` to avoid template resolution problems anymore. 2. More importantly: ROOT will do a runtime check for type compatibility, which was requested in the JIRA ticked linked below. To see the benefit of the added type check, take for example this code, where the branch address is set to an array address with a mismatched type:. ```python; import array; import ROOT. def create():; f = ROOT.TFile(""dummy.root"", 'RECREATE'); t = ROOT.TTree(""tree"", 'A tree'); a = array.array('f', [42]); br = t.Branch('a', a, 'a/F'). for x in (21, 42, 1337):; a[0] = x; t.Fill(). t.Write(); f.Close(). def test(typecode='f'):; f = ROOT.TFile(""dummy.root"", 'READ'); t = f.Get('tree'); a = array.array(typecode, [0]); status = t.SetBranchAddress('a', a); print(""Status = %s"" % (status, )). for i in range(t.GetEntries()):; t.GetEntry(i); print(""a = %s"" % (a[0], )). create(); test(""f""); test(""d""); ```. Before this commit, the output would be like this:; ```txt; Status = 4; a = 21.0; a = 42.0; a = 1337.0; Status = 4; a = 5.442276803e-315; a = 5.483722033e-315; a = 5.690664868e-315; ```. With this commit, you get a clear error:; ```txt; Status = 0; a = 21.0; a = 42.0; a = 1337.0; Error in <TTree::SetBranchAddress>: The pointer type given ""Double_t"" (8) does not correspond to the type needed ""Float_t"" (5) by the branch: a; Status = -2; a = 0.0; a = 0.0; a = 0.0; ```. Closes the following JIRA ticket:; https://its.cern.ch/jira/browse/ROOT-8213",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16171:156,interface,interface,156,https://root.cern,https://github.com/root-project/root/pull/16171,1,['interface'],['interface']
Integrability,Calling `GSLMCIntegrator::SetMode` crashed because the internal workspace was not yet created. ; This PR fixes this and also the way the extra option parameters are retrieved and set in the GSLMCIntegrator. . A small change in the interface is done by returning now a unique_ptr instead of a row pointer in ; `GSLMCIntegrator::ExtraOptions()`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14058:231,interface,interface,231,https://root.cern,https://github.com/root-project/root/pull/14058,1,['interface'],['interface']
Integrability,"Change ""TTreeReader::Reset"" to ""Restart"" in error message",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/304:50,message,message,50,https://root.cern,https://github.com/root-project/root/pull/304,1,['message'],['message']
Integrability,Change deprecation message for python option,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5131:19,message,message,19,https://root.cern,https://github.com/root-project/root/pull/5131,1,['message'],['message']
Integrability,Change http to https in gdb message,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6541:28,message,message,28,https://root.cern,https://github.com/root-project/root/pull/6541,1,['message'],['message']
Integrability,"Change primary responsible for page memory management from page pool to page storage. This is a preparation for asynchronous interfaces. In the new scheme, RColumn uses `RPageStorage::ReservePage` (writing) or `RPageStorage::PopulatePage` (reading) to allocate pages and `RPageStorage::ReleasePage` for freeing them. The page storage, in turn, may use a shared page pool. In this case, ownership of a page's memory is transferred to the page pool, which will free a page if there are no further users. Addresses ROOT-10205",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4014:125,interface,interfaces,125,https://root.cern,https://github.com/root-project/root/pull/4014,1,['interface'],['interfaces']
Integrability,"Change the structure of BinData, FitData to a more data-oriented one. This is the second in a series of PR for the integration of the vectorization + parallelization of the fit in ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/367:115,integrat,integration,115,https://root.cern,https://github.com/root-project/root/pull/367,1,['integrat'],['integration']
Integrability,"Changed the internal handeling of filters in RBatchGenerator. ; Instead of adding a new filter for each filter, the filters are concatenated to a string and applied as a single filter ; Note: The Python interface of the RBatchGenerator does not change.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13313:203,interface,interface,203,https://root.cern,https://github.com/root-project/root/pull/13313,1,['interface'],['interface']
Integrability,Changes the RNTuple support in RBrowser from page source to the reader interface along the way. It turns out that the views are not only an interface for zero-copy reading but they also provide a quite useful way to read individual fields from a reader.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14530:71,interface,interface,71,https://root.cern,https://github.com/root-project/root/pull/14530,2,['interface'],['interface']
Integrability,"Clang 18 changed the name mangling of function templates, see https://releases.llvm.org/18.1.0/tools/clang/docs/ReleaseNotes.html#c-specific-potentially-breaking-changes. The first mentioned case is ""When a template parameter in a function template depends on a previous template parameter"", for example:; ```; struct A {; template <typename T, std::enable_if_t<std::is_integral_v<T>, int> = 0>; void Member(T p) {}; };. template void A::Member(int);; ```. With Clang < 18 and current versions of GCC, this will mangle to `_ZN1A6MemberIiLi0EEEvT_`, but Clang 18 and later will mangle it to `_ZN1A6MemberIiTnNSt9enable_ifIXsr3stdE13is_integral_vIT_EEiE4typeELi0EEEvS2_` (unless reverted for compatibility with `-fclang-abi-compat=17`). For ROOT's use of Cling, this poses a bidirectional problem:; * If building current master with Clang 18, the compiler will, by default, mangle according to the new rules. At runtime, Cling based on LLVM/Clang 16 will generate the old name, but that symbol cannot be found in the shared library.; * Conversely, in the current attempt to upgrade to LLVM/Clang 18, the opposite situation will happen when building with an ""older"" compiler so the shared library has the old name. In both cases, a failure of `tutorial-tmva-tmva103_Application` can be observed, when Cling cannot find the symbol. Unfortunately, it is not easily possible to detect which symbol names are in the shared library because it depends on the host compiler and configuration. Furthermore, with the current LLVM/Clang 16, we do not have access to the new mangling. Finally, it is unclear if generating the template instantiations in question actually takes up significant time during compilation. As such, the best approach in the current situation is to remove the `extern template` declarations and let the compiler / Cling re-generate them as needed. FYI @devajithvs",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16176:249,depend,depends,249,https://root.cern,https://github.com/root-project/root/pull/16176,2,['depend'],['depends']
Integrability,Cleaned up dependencies for TMVA tuts for avoiding race conditions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/426:11,depend,dependencies,11,https://root.cern,https://github.com/root-project/root/pull/426,1,['depend'],['dependencies']
Integrability,"ClingWorkAroundUnnamedDetection2 -compilerI/usr/i; nclude/c++/9 -compilerI/usr/include/x86_64-linux-gnu/c++/9 -compilerI/usr/include/c++/9/backward -compilerI/usr/lib/gcc/x86_64-linux-gnu/9/include -compilerI/usr/local/include -compilerI/; usr/include/x86_64-linux-gnu -compilerI/usr/include -compilerI/usr/lib/gcc/x86_64-linux-gnu/9/include -compilerI/usr/local/include -compilerI/usr/include/x86_64-linux-gnu -compilerI/usr/i; nclude -I/home/pcanal/root_working/build/master-debug/include -I/home/pcanal/root_working/code/root/roottest -I/home/pcanal/root_working/code/root/roottest/root/meta/MakeProject -I/home/p; canal/root_working/build/master-debug/etc/cling /home/pcanal/root_working/code/root/roottest/root/meta/MakeProject/stl_makeproject_test.h /home/pcanal/root_working/code/root/roottest/root; /meta/MakeProject/stl_makeproject_test_linkdef.h; In file included from input_line_10:36:; /home/pcanal/root_working/code/root/roottest/root/meta/MakeProject/stl_makeproject_test.h:10:2: fatal error: module file '/home/pcanal/root_working/build/master-debug/lib/Imt.pcm' is out ; of date and needs to be rebuilt: could not read module signature; #include ""TH1D.h""; ^; /home/pcanal/root_working/code/root/roottest/root/meta/MakeProject/stl_makeproject_test.h:10:2: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/master-debug/rootte; st/root/meta/MakeProject/MathCore.pcm'; /home/pcanal/root_working/code/root/roottest/root/meta/MakeProject/stl_makeproject_test.h:10:2: note: imported by module 'Hist' in '/home/pcanal/root_working/build/master-debug/roottest/r; oot/meta/MakeProject/Hist.pcm'; Error: /home/pcanal/root_working/build/master-debug/bin/rootcling: compilation failure (/home/pcanal/root_working/build/master-debug/roottest/root/meta/MakeProject/stl_makeproject_testb1a; 3e30369_dictUmbrella.h); ```. and indeed, `libHist` has not been build yet. So it seem that `roottest/root/meta/MakeProject/stl_makeproject_test.cxx` is missing a dependency on `libHist`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9600:3104,depend,dependency,3104,https://root.cern,https://github.com/root-project/root/issues/9600,1,['depend'],['dependency']
Integrability,"Closes https://github.com/root-project/root/issues/14553. This PR adds the dependencies for the TMVA GNN unit tests to the; docker images via the `requirements.txt`. However, this will only have a; delayed effect until the images are re-built. Therefore, we can't; validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be; opened to revert this commit. For the JsMVA dependency, we don't have to worry about anything.; The JsMVA tests have already been temporarily disabled by @dpiparo 7 years ago:; https://github.com/root-project/roottest/blame/master/python/JsMVA/CMakeLists.txt. Note: adding the new dependencies only grows the environment by 20 MB, which is less then 1 % of a size increase (the size of the environment is currently 2.3 GB).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15512:75,depend,dependencies,75,https://root.cern,https://github.com/root-project/root/pull/15512,3,['depend'],"['dependencies', 'dependency']"
Integrability,"Co-authored-by: Jakob Blomer. This commit is a proof-of-concept `MapV` implementation for floats. If; the interface is approved, the remaining mappable types will done too. Spun off from https://github.com/root-project/root/pull/7112",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8210:106,interface,interface,106,https://root.cern,https://github.com/root-project/root/pull/8210,1,['interface'],['interface']
Integrability,Collection of three short improvements:; - Better docs for SPlot; - Shorten run time of rf402 tutorial by removing unnecessary printouts; - [ROOT-10521] Better const-correctness in RooAbsData interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4875:192,interface,interface,192,https://root.cern,https://github.com/root-project/root/pull/4875,1,['interface'],['interface']
Integrability,"Columns defined via DefinePerSample cannot ever have a dependency; on the systematic variation (they don't depend on any dataset; column), so when a RDefinePerSample is asked to `MakeVariations`; it just does nothing, and program logic should never end up; requesting a varied value for a RDefinePerSample. The commit also adds a test for this case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9935:55,depend,dependency,55,https://root.cern,https://github.com/root-project/root/pull/9935,2,['depend'],"['depend', 'dependency']"
Integrability,"Commit 46ba2eefd00371b024ae239626c7600cd3259885 (https://github.com/root-project/root/pull/12082) enabled a few modules for Windows, but added `NO_CXXMODULE` to a couple others that don't work yet. This requires support for figuring out which dependencies have modules and which ones don't. Unfortunately, this support had some flaws and had to be reverted in commit 2d7373d47ef2acc53f4eed004082fee83caab6a3 (https://github.com/root-project/root/pull/12561) - see the summary and commit messages for more details. To summarize, the core of the problem is that the build system expected a dependency to have a module if it had been registered beforehand. This is incompatible with how we build `libCore` and some other fundamental libraries. We likely have to implement it the other way around, ie keep track of which targets will produce a module. This may be enough and work for the use cases we have on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12591:243,depend,dependencies,243,https://root.cern,https://github.com/root-project/root/issues/12591,3,"['depend', 'message']","['dependencies', 'dependency', 'messages']"
Integrability,"Complete code reformatted to use JS classes.; Makes layout more clear and compact.; Optimize io code - use more internal constants, which; very well can be optimized by JS. Exclude `rawinflate.js` - code integrated and optimized in io script; Update `dat.gui.js`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9779:204,integrat,integrated,204,https://root.cern,https://github.com/root-project/root/pull/9779,1,['integrat'],['integrated']
Integrability,"Completes the support for fields with multiple column representations. For the moment, only the unit tests can change the column representation between clusters on writing. Eventually, we may add a proper interface. Merging will also lead to this situation. In all cases but the nullable field, we can exploit the fact that the number of columns of multiple representations is the same and the corresponding columns have the same number of elements and cluster boundaries. Therefore, when reading we team up the corresponding columns of multiple representations. When we map another page, the column teams can then figure out amongst each other the column that is not suppressed for the given page / element index and forward the call. Follow-up of #16054",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16143:205,interface,interface,205,https://root.cern,https://github.com/root-project/root/pull/16143,1,['interface'],['interface']
Integrability,"Consider the following test case:. test.c; ```cpp; #include ""TInterpreter.h""; #include ""TClass.h""; #include ""TMethod.h""; #include ""TROOT.h""; #include <iostream>. struct Dummy {; double x;; };. struct Dummy2{; };. template<typename... Args, typename Extra = Dummy2>; double sumT(Args... args) {; return (args.x + ...);; }. int test() {; auto meth_explicit = gROOT->GetGlobalFunctionWithPrototype(""sumT"", ""Dummy, Dummy, Dummy"");; TMethodCall call_explicit(meth_explicit);. double res;; const Dummy arg{5.};; const void *args[3] = {&arg, &arg, &arg};; call_explicit.Execute(nullptr, args, 3, &res);; std::cout << ""res = "" << res << std::endl;. return 0;; }; ```. The attempted call fails, because the ""extra"" template argument is explicitly appended to the list of template arguments when the call wrapper is compiled. (This issue prevents templated functions with this feature being called from PyROOT). ```; In file included from input_line_8:1:; /home/b/bendavid/pyrootdebug7/test.c:16:16: error: no member named 'x' in 'Dummy2'; return (args.x + ...);; ~~~~ ^; input_line_10:8:17: note: in instantiation of function template specialization 'sumT<Dummy, Dummy, Dummy, Dummy2, Dummy2>' requested here; Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],; ^; Error in <TClingCallFunc::make_wrapper>: Failed to compile; ==== SOURCE BEGIN ====; #pragma clang diagnostic push; #pragma clang diagnostic ignored ""-Wformat-security""; __attribute__((used)) __attribute__((annotate(""__cling__ptrcheck(off)""))); extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret); {; if (ret) {; new (ret) (double) (((double (&)(Dummy, Dummy,; Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],; *(Dummy*)args[2]));; return;; }; else {; (void)(((double (&)(Dummy, Dummy,; Dummy))sumT<Dummy, Dummy, Dummy, Dummy2>)(*(Dummy*)args[0], *(Dummy*)args[1],; *(Dummy*)args[2]));; return;; }; }; #pragma clang diagnostic pop; ==== SOURCE END ====; Error in <TClingCal",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12549:795,wrap,wrapper,795,https://root.cern,https://github.com/root-project/root/issues/12549,1,['wrap'],['wrapper']
Integrability,"Consolidate RBDT as specified in the ROOT plan of work 2024. The backends of RBDT are replaced with a single new backend:; the logic from the FastForest library:; https://github.com/guitargeek/XGBoost-FastForest. The logic in that library was originally taken from the GBRForest in; CMSSW:; https://github.com/cms-sw/cmssw/blob/master/CommonTools/MVAUtils/interface/GBRForestTools.h. The interface remains the same, only that the template parameter; specifying the backend is gone. This change adds support for unbalanced trees. To see the fixed logic, as one run a modified version of the `tmva101_Training.py` tutorial (remember to run `tutorials/tmva/tmva100_DataPreparation.py` first):; ```python; import ROOT; import numpy as np. from tmva100_DataPreparation import variables. def load_data(signal_filename, background_filename):; # Read data from ROOT files; data_sig = ROOT.RDataFrame(""Events"", signal_filename).AsNumpy(); data_bkg = ROOT.RDataFrame(""Events"", background_filename).AsNumpy(). # Convert inputs to format readable by machine learning tools; x_sig = np.vstack([data_sig[var] for var in variables]).T; x_bkg = np.vstack([data_bkg[var] for var in variables]).T; x = np.vstack([x_sig, x_bkg]). # Create labels; num_sig = x_sig.shape[0]; num_bkg = x_bkg.shape[0]; y = np.hstack([np.ones(num_sig), np.zeros(num_bkg)]). # Compute weights balancing both classes; num_all = num_sig + num_bkg; w = np.hstack([np.ones(num_sig) * num_all / num_sig, np.ones(num_bkg) * num_all / num_bkg]). return x, y, w. # Load data; x, y, w = load_data(""train_signal.root"", ""train_background.root""). # Fit xgboost model; from xgboost import XGBClassifier; xbdt = XGBClassifier(max_depth=3, n_estimators=500); xbdt.fit(x, y, sample_weight=w). # Save model in TMVA format; ROOT.TMVA.Experimental.SaveXGBoost(xbdt, ""myBDT"", ""tmva101.root"", num_inputs=x.shape[1]). # Load data; x, y_true, w = load_data(""test_signal.root"", ""test_background.root""). # Load trained model; File = ""tmva101.root"". bdt = ROOT.TMVA.Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15173:356,interface,interface,356,https://root.cern,https://github.com/root-project/root/pull/15173,2,['interface'],['interface']
Integrability,"Copy post from Mattermost:. Normally one writes:; ```; TList *lst = new TList(); ; TIter iter(lst);; ```. This works fine. In many places of RooFit (and also in some other classes) one can see following syntax:; ```; TIter iter = lst->MakeIterator();; ```. It is also fine while where is constructor signature TIter(TIterator *it).; But if one does again:; ```; iter = lst->MakeIterator();; ```. One do not get that one expects. While C++ does:. 1. creates temporary TIter instance, ; 2. Calls TIter &operator=(const TIter &rhs) ; 3. deletes temporary `TIter` instance with original `TIterator` object which was created by `lst->MakeIterator()`. Means we have unnecessary duplication of `TIterator` in between. Moreover, following code **MAY** produce wrong results:; ```; iter = lst->MakeIterator(kIterBackward);; ```. It depends if assign operator implemented properly for derived `TIterator` classes.; Probably, we should define assign operator abstract:; ```; virtual TIterator &operator=(const TIterator &) = 0;; ```; To ensure that all derived classes implement it",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7633:823,depend,depends,823,https://root.cern,https://github.com/root-project/root/issues/7633,1,['depend'],['depends']
Integrability,"Could not find any duplicate. ### Describe the bug; When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt.; The message is related to SOFIE:. ```; IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'!; You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&); Maybe you need to load the corresponding shared library?; Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'?; ```. ROOT 6.24/06 works fine. ### Expected behavior; No warning message. ### To Reproduce; Steps to reproduce the behavior:; 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 ; 2. Source dev4arm; `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`; 3. Start ROOT, e.g. `root -b -q`. ### Setup; 1. ROOT version: 6.26/04; 2. Operating system: aarch64, centos7; 3. LCG stack. ### Additional context; Affecting ATLAS ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10877:110,message,message,110,https://root.cern,https://github.com/root-project/root/issues/10877,2,['message'],['message']
Integrability,Crash message should point to github,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6540:6,message,message,6,https://root.cern,https://github.com/root-project/root/issues/6540,1,['message'],['message']
Integrability,"Create notebooks from fit, add jsroot integration",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/207:38,integrat,integration,38,https://root.cern,https://github.com/root-project/root/pull/207,1,['integrat'],['integration']
Integrability,"Creating a new pull request since I force-pushed to the old branch. This PR improves VecCore integration into ROOT. Before we copied all VecCore and Vc headers into the build directory, since rootcling did not get the right includes when Vc or VecCore were builtin. Now the right includes are propagates by calling set_property() with the necessary include directories. Ideally, in the future we should take the includes not from the DIRECTORY property, but from the target dependencies for each subcomponent.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/851:93,integrat,integration,93,https://root.cern,https://github.com/root-project/root/pull/851,2,"['depend', 'integrat']","['dependencies', 'integration']"
Integrability,Current histfactory is optional (it requires xml is to enable/available) but the test depending on it are run nonetheless. So with; ```; $ grep xml CMakeCache.txt ; ...; //Enable support for XML (requires libxml2); xml:BOOL=OFF; ...; ```; In particular tutorial-roostats-CreateExampleFile is ran but fails:; ```; Output:; ----------------------------------------------------------. Processing /home/pcanal/root_working/code/root/tutorials/roostats/CreateExampleFile.C...; sh: 1: prepareHistFactory: not found; sh: 1: hist2workspace: not found; <end of output>; ```; The following tutorial then fails; ```; 702:tutorial-roostats-OneSidedFrequentistUpperLimitWithBands; 703:tutorial-roostats-StandardBayesianMCMCDemo; 704:tutorial-roostats-StandardBayesianNumericalDemo; 705:tutorial-roostats-StandardFeldmanCousinsDemo; 706:tutorial-roostats-StandardFrequentistDiscovery; 707:tutorial-roostats-StandardHistFactoryPlotsWithCategories; 708:tutorial-roostats-StandardHypoTestDemo; 709:tutorial-roostats-StandardHypoTestInvDemo; 710:tutorial-roostats-StandardProfileInspectorDemo; 711:tutorial-roostats-StandardProfileLikelihoodDemo; 712:tutorial-roostats-StandardTestStatDistributionDemo; 713:tutorial-roostats-TwoSidedFrequentistUpperLimitWithBands; ```; most (if not all) due to the missing root file.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6911:86,depend,depending,86,https://root.cern,https://github.com/root-project/root/issues/6911,1,['depend'],['depending']
Integrability,"Current state:; - the normalized name continues to remove `std::`; - it injects using declarations for the ""most common"" stdlib identifiers; - this PR adds `std::` where ""needed"", to the normalized name, to make identifiers ""compilable"" (in dictionary source). The last point requires to have an authoritative list of ""things in the std namespace"", to prepend `std::` to them. This does not scale - any stdlib implementation might have any non-public identifier that might be needed also for public types, e.g. some libstdc++ have `std::thread::id` as type alias to `std::__thread_id`. Alternatively, this PR could implement a ""if lookup fails, try again with prepending `std::`"". This is an issue for types such as `foo<bar, baz<boo,boz>>` where either any type must be tested for std-ization separately or all possible permutations (`std::foo<bar, baz<boo,boz>>`, `foo<std::bar, baz<boo,boz>>`,`std::foo<std::bar, baz<boo,boz>>`...) must be tried.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11027:72,inject,injects,72,https://root.cern,https://github.com/root-project/root/pull/11027,1,['inject'],['injects']
Integrability,"Currently RDF reads all column values via a single RColumnValue type,; which knows how to deal with TTreeReaderValues, TTreeReaderArrays,; datasource columns and defined columns. Not only that's too many hats; for a single type, but this design requires some runtime logical branching; to decide which path to take that can be simplified.; Finally and most importantly, going forward we want smarter integration; with RDataSource, and we will require RDataSource-specialized column readers.; In order to allow this latter use-case and simplify some logical; branching, instead of a single RColumnValue type we add specialized; column reader types. RDefineReader reads values of Defined columns, RTreeColumnReader reads values; via TTreeReaderValues or TTreeReaderArrays depending on the class specialization,; and RDSColumnReader reads values from a datasource.; A given computation graph will only make use of one between; RTreeColumnReader and RDSColumnReader. The new column readers bring two main advantages:; - logical branching has been reduced (for now, at the cost of introducing a; virtual call); - the new design makes it simpler to insert datasource-specific column; readers",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6170:400,integrat,integration,400,https://root.cern,https://github.com/root-project/root/pull/6170,2,"['depend', 'integrat']","['depending', 'integration']"
Integrability,Currently all included Qt headers in this ROOT module are duplicated; into each submodule. We now wrap all includes to Qt headers in a; single wrapper module which includes and owns those declarations. This should fix warnings related to ambiguous linkage of all the; constants that the Qt headers define (and which make the builds; yellow).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2011:98,wrap,wrap,98,https://root.cern,https://github.com/root-project/root/pull/2011,2,['wrap'],"['wrap', 'wrapper']"
Integrability,"Currently if we compile this test we get ld warning messages like this:. ```; ld: direct access in function ... to global weak symbol. This was likely; caused by different translation units being compiled with different; visibility settings.; ```. This seems to be caused by the fact that visibility=hidden is spreading; from the parent directory to the test directory, even though it should; only land in the src/ directory. As CMAKE_CXX_FLAGS is working on a; per subdirectory basis, we just move the code for handling the source; code to the src/ folder, which should contain the visibility=hidden.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/644:52,message,messages,52,https://root.cern,https://github.com/root-project/root/pull/644,1,['message'],['messages']
Integrability,"Currently there is a chance that rootcling includes and builds; the 'complex' dictionary before it is built, which will cause; the build to fail. To fix this we need this dependency here. The specific line that includes the complex header is; `core/dictgen/src/rootcling_impl.cxx:3045`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1247:171,depend,dependency,171,https://root.cern,https://github.com/root-project/root/pull/1247,1,['depend'],['dependency']
Integrability,"Currently we rebuilt LTO everytime you rerun cmake, as CMake; touches the vcsrevision file that LTO depends on. Make isn't; smart enough to realise it's still just an empty file, so it; retriggers the LTO compilations whenever you run CMake. Again, this patch will be obsolete on the next LLVM upgrade; as this CMake code is refactored upstream.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/842:100,depend,depends,100,https://root.cern,https://github.com/root-project/root/pull/842,1,['depend'],['depends']
Integrability,"Currently, if ::Name() interface is called we pretty print the Decl name. This is suboptimal because it causes many memory allocations for something which is essentially immutable. This PR introduces step-by-step working cache if ::Name() was called. It reduces the temporary memory allocations by 12 Mb in standard ROOT and 130Mb in -Druntime_cxxmodules=On cache. The benchmarking test was provided by @pcanal in #3012. It is important to reduce the temporary allocations because they can contribute to increasing of the peak memory usage of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3616:23,interface,interface,23,https://root.cern,https://github.com/root-project/root/pull/3616,1,['interface'],['interface']
Integrability,"Custom ranges seemed to be supported for analytical integration in; RooNDKeysPdf, but the code was not activated. Numerical integration was; always used for custom ranges. Unfortunately, using the existing code for analytical integration with; custom ranges gives the wrong result. This commit suggests how this can; be done with new and simpler code that has a logic similar to; RooNDKeysPdf::evaluate() to get the correct result. This is a draft PR for now. I still need to study the problem a bit more, because when you have many data points for the KDE the new analytical integration gives a result different from numerical integration at the percent level. I need to figure out if this is a mistake in the analytical integration, or if the numerical integration is unstable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8019:52,integrat,integration,52,https://root.cern,https://github.com/root-project/root/pull/8019,7,['integrat'],['integration']
Integrability,"DE_DIRS=/home/mkrzewic/src/root/interpreter/llvm-project/clang/include' '/home/mkrzewic/build/root/interpreter/llvm-project/llvm/tools/clang//include' '-DCMAKE_CXX_STANDARD=17' '-DClang_DIR=/home/mkrzewic/build/root/interpreter/llvm-project/llvm/tools/clang/' '-DClang_CONFIG_EXTRA_PATH_HINTS=' '-DLLVM_FORCE_USE_OLD_TOOLCHAIN=ON' '-DCLAD_BUILD_STATIC_ONLY=ON' '-GUnix Makefiles' '-S' '/home/mkrzewic/build/root/interpreter/cling/tools/plugins/clad/clad-prefix/src/clad' '-B' '/home/mkrzewic/build/root/interpreter/cling/tools/plugins/clad/clad-prefix/src/clad-build'. See also. /home/mkrzewic/build/root/interpreter/cling/tools/plugins/clad/clad-prefix/src/clad-stamp/clad-configure-*.log. -- stdout output is:; -- Configuring incomplete, errors occurred!. -- stderr output is:; CMake Warning:; Ignoring extra path from command line:. ""/home/mkrzewic/build/root/interpreter/llvm-project/llvm/tools/clang/include"". CMake Warning:; Ignoring extra path from command line:. ""/home/mkrzewic/build/root/interpreter/llvm-project/llvm/tools/clang//include"". CMake Error at CMakeLists.txt:86 (message):; Found unsupported version: LLVM 2.13.2;. Please set LLVM_DIR pointing to the llvm version 5.0 to 16.0.x build or; installation folder. CMake Error at /home/mkrzewic/build/root/interpreter/cling/tools/plugins/clad/clad-prefix/src/clad-stamp/clad-configure-Release.cmake:47 (message):; Stopping after outputting logs. gmake[2]: *** [interpreter/cling/tools/plugins/clad/CMakeFiles/clad.dir/build.make:92: interpreter/cling/tools/plugins/clad/clad-prefix/src/clad-stamp/clad-configure] Error 1; gmake[1]: *** [CMakeFiles/Makefile2:44491: interpreter/cling/tools/plugins/clad/CMakeFiles/clad.dir/all] Error 2; gmake: *** [Makefile:166: all] Error 2; ```. ### Reproducer. cmake ../../src/root -Droottest=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo; cmake --build . ### ROOT version. master@0afffc6fc9. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14492:2521,message,message,2521,https://root.cern,https://github.com/root-project/root/issues/14492,2,['message'],['message']
Integrability,"Dear ROOT developers,. we have met with a problem reading more than 2-dimensional arrays in TTrees using MakeClass. The problem appears only on the **Windows ROOT 6 version** (same code works on ROOT 6 on Linux, as well as on ROOT 5 in Windows). The code to reproduce is simple:. A tree is created by:; ```; TFile f(""newtree.root"", ""NEW"");; TTree t(""MyTree"", ""Test tree"");; double x[5][5][5];; t.Branch(""x"", x, ""x[5][5][5]"");; t.Fill();; t.Write();; f.Close();; ```; Then produce MakeClass from the tree: ```MyTree->MakeClass()```. Finally, try to read that tree via the class MyTree:; ```; .L MyTree.C; MyTree t;; t.Loop(); // crashes with bad-memory-allocation message (or silently); t.b_x->GetAddress(); // also crashes; ```. No problem is seen when using 2D or 1D arrays, nor simple numbers. Thanks, Pavel",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8833:663,message,message,663,https://root.cern,https://github.com/root-project/root/issues/8833,1,['message'],['message']
Integrability,"Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd.; We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:; ```; -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001); --; -- libXrdMain not found: xproofd will be a wrapper around xrootd; -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private; -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```; This then causes problem when our ROOT is used on some other machine.; So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version?. Thanks,; Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11750:656,wrap,wrapper,656,https://root.cern,https://github.com/root-project/root/issues/11750,1,['wrap'],['wrapper']
Integrability,"Dear ROOT maintainers, . The TTreeSQL class seems a bit broken. ; - It does not support sqlite (which nowadays might be the most likely format someone might use a TTree for) because of the way it parses columns. ; - Some of the data type conversions don't make sense to me (but maybe I misunderstand). In particular the string conversions don't seem like they'd work. . Here is a commit to address those issues. I wanted to also add proper support for database date/datetime/timestamp types (right now I turn them into a string) but I was not sure how to do that. I think what would work is to have an e.g. TDateSQL class that uses a TString for storage (since I believe that's what the SQL API right now would give us) that could then be transparently converted to TDatime or TTimeStamp as needed. This would be easy to implement, but I have not yet because there must be a better way... . Below is the commit message. There are also a few typo fixes that I included. . This commit has a few changes:; -Column names are now obtained from the Table metadata, ensuring that sqlite will work properly; -Variable length strings are properly supported (using TString); -The data type mapping was modified to make a bit more sense (in my opinion), but could still use some work.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3707:911,message,message,911,https://root.cern,https://github.com/root-project/root/pull/3707,1,['message'],['message']
Integrability,"Dear ROOT team,. while integrating some CMake functionality provided by ROOT through the `ROOT_USE_FILE` include into our project, some small issues came up. If we are mistaken and there are better solutions than the one I provided, your advice is very welcome. Our `FindROOT.cmake` implementation looks like this:; ```cmake; find_package(ROOT QUIET CONFIG; HINTS; ${ROOT_ROOT} # aliBuild; ${ROOTSYS} # upstream; $ENV{ROOTSYS} # upstream; ${SIMPATH} # FairSoft; ); include(FindPackageHandleStandardArgs); find_package_handle_standard_args(ROOT CONFIG_MODE); include(${ROOT_USE_FILE}); ```; which is called in a `CMakeLists.txt` like this; ```cmake; find_package(ROOT 6.10.04 REQUIRED); ```. Please see the commit messages for more details about the issues we had. Best regards,; Dennis",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/916:23,integrat,integrating,23,https://root.cern,https://github.com/root-project/root/pull/916,2,"['integrat', 'message']","['integrating', 'messages']"
Integrability,"Dear all,. while root-6.28.03 compiled with the patch provided in response to issue #12659 a similar problem is back now in root-6.28.04 (retrieved via latest-stable from github today). I just did (on suse TW):; ```; git clone --branch latest-stable --depth=1 https://github.com/root-project/root.git root_src; mkdir root_build; cd root_build; cmake ../root_src -j4; ```. and this produced:; ```; ...; [ 76%] Built target ClingUtils; [ 76%] Building CXX object core/rootcling_stage1/CMakeFiles/rootcling_stage1.dir/src/rootcling_stage1.cxx.o; [ 76%] Linking CXX shared library ../../../lib/libCling.so; [ 76%] Linking CXX executable src/rootcling_stage1; [ 76%] Built target rootcling_stage1; [ 76%] Generating G__Core.cxx, ../lib/Core.pcm; [ 76%] Built target Cling; While building module 'Core':; While building module 'std' imported from input_line_1:1:; In file included from <module-includes>:52:; In file included from /usr/include/c++/13/memory_resource:60:; In file included from /usr/include/c++/13/bits/memory_resource.h:46:; /usr/include/c++/13/bits/utility.h:219:27: error: redefinition of '__is_in_place_type_v<in_place_type_t<_Tp>>'; inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;; ^; ./usr/include/c++/13/bits/stl_pair.h:62:11: note: '/usr/include/c++/13/bits/utility.h' included multiple times, additional include site in header from module 'std.bits/stl_pair.h'; # include <bits/utility.h> // for std::tuple_element, std::tuple_size; ^; ..; ```. It's not the exact same error message as in #12659 but seems rather close in nature ...; Could you please have look if the patch from 6.28.03 needs further additions to address this in 6.28.04?. Thanks & Cheers,; --Sven",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12897:1519,message,message,1519,https://root.cern,https://github.com/root-project/root/issues/12897,1,['message'],['message']
Integrability,"DeclUnloader was trying to unload template instantiations whose point of (first) instantiation was the PCH. This caused problems with the code below. In particular, the class specialization `std::vector<int>` was instantiated in the PCH as part of `std::stack<...>`, which in turn was required by the STL <regex> header.; ```; root [0] std::vector<int> foo, bar;; root [1] std::swap(foo, bar);; root [2] .undo 1; root [3] std::swap(foo, bar);; IncrementalExecutor::executeFunction: symbol '_ZSt15__alloc_on_swapISaIiEEvRT_S2_' unresolved while linking [cling interface function]!; ```. This PR fixes the issue avoiding the unload of decls instantiated in the PCH.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4447:559,interface,interface,559,https://root.cern,https://github.com/root-project/root/pull/4447,1,['interface'],['interface']
Integrability,"Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:; Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309; https://its.cern.ch/jira/browse/ROOT-10593; https://its.cern.ch/jira/browse/ROOT-10284; https://its.cern.ch/jira/browse/ROOT-8828; https://its.cern.ch/jira/browse/ROOT-8538; https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:; Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14645:231,inject,injection,231,https://root.cern,https://github.com/root-project/root/pull/14645,4,"['inject', 'message']","['injection', 'message', 'messages']"
Integrability,"Declares a new method `RNTuple::Merge` to conform to the `hadd` merger interface, namely: ; https://github.com/root-project/root/blob/331efa4c00fefc38980eaaf7b41b8e95fcd1a23b/io/doc/v530/index.html#L43-L53. I originally thought about to adding this method `RNTupleReader`, but think this is the right choice since it's the `RNTuple` blob that's stored on disk, and we have to parse it into a `RNTupleReader` to do any useful work. . Actually running it segfaults, and I'm not sure whether I've made a mistake in linking or elsewhere. ; ~~**Edit:** segfault fixed by #6016~~; **Edit**: I believe the segfault is fixed by 12fef499c109da4c2454d9cca2e60e88a883aa1c, where I avoid assuming that mergeable objects are derived from `TObject`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6008:71,interface,interface,71,https://root.cern,https://github.com/root-project/root/pull/6008,1,['interface'],['interface']
Integrability,Deleted two empty files that were just including the header and made; some cosmetic changes to root/multiproc and TPool derived classes:; - #include reordering.; - standarize the use of TError::Error as the way of throwing error; messages instead of mixing it with std::cerr here and there.; - added missing copyright notices and module identification lines.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/164:230,message,messages,230,https://root.cern,https://github.com/root-project/root/pull/164,1,['message'],['messages']
Integrability,Dependencies using ${GENERATE_REFLEX_TEST} variable do not work in roottest,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7978:0,Depend,Dependencies,0,https://root.cern,https://github.com/root-project/root/issues/7978,1,['Depend'],['Dependencies']
Integrability,Dependent on #2329,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2332:0,Depend,Dependent,0,https://root.cern,https://github.com/root-project/root/pull/2332,1,['Depend'],['Dependent']
Integrability,"Depending from selected file extension, show only appropriate files; Preliminary windows support in RFileDialog",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4734:0,Depend,Depending,0,https://root.cern,https://github.com/root-project/root/pull/4734,1,['Depend'],['Depending']
Integrability,Depends on #16645,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16769:0,Depend,Depends,0,https://root.cern,https://github.com/root-project/root/pull/16769,1,['Depend'],['Depends']
Integrability,Depends on #3032,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3039:0,Depend,Depends,0,https://root.cern,https://github.com/root-project/root/pull/3039,1,['Depend'],['Depends']
Integrability,Depends on #3043,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3798:0,Depend,Depends,0,https://root.cern,https://github.com/root-project/root/pull/3798,1,['Depend'],['Depends']
Integrability,Depends on #3850.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4005:0,Depend,Depends,0,https://root.cern,https://github.com/root-project/root/pull/4005,1,['Depend'],['Depends']
Integrability,Depends on #4269,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4270:0,Depend,Depends,0,https://root.cern,https://github.com/root-project/root/pull/4270,1,['Depend'],['Depends']
Integrability,"Depends on #4401, requires rebase.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4448:0,Depend,Depends,0,https://root.cern,https://github.com/root-project/root/pull/4448,1,['Depend'],['Depends']
Integrability,"Depends on label size of the axis, but now the lower limit is the default label size. That way, zero size label axes are still click and draggable",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/196:0,Depend,Depends,0,https://root.cern,https://github.com/root-project/root/pull/196,1,['Depend'],['Depends']
Integrability,"Depends on: #1317, adds only one other commit:. It seems automatically loading TreePlayer when TDataFrame is used; without the appropriate include never worked. This was previously; fixed by just adding TreePlayer (which contains TDF) to the PCH.; ; As always, let's recreate this hack with modules to make restore; the old behavior with modules turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1328:0,Depend,Depends,0,https://root.cern,https://github.com/root-project/root/pull/1328,1,['Depend'],['Depends']
Integrability,"Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; .dot file generated with RooAbsArg::graphVizTree produces an invalid .dot file if the graph title contains spaces. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; RooAbsArg::graphVizTree should produce a valid .dot file even when the names of the elements contain spaces. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; ROOT macro, save to graphvizMWE.C and run with `root graphvizMWE.C`:; ```; void graphvizMWE(void){; // Create a simple dependency tree; RooRealVar x{};; RooRealVar sigma{};; RooRealVar mu{};. RooGaussian Gaussian(""my_gaussian"", ""Gaussian"", x, mu, sigma);; RooGaussian GaussianWithSpace(""my gaussian"", ""Gaussian"", x, mu, sigma);. // Create GraphViz trees; Gaussian.graphVizTree(""tree_example.dot"");; GaussianWithSpace.graphVizTree(""tree_example2.dot""); // Produces invalid output; }; ```; Then attempt to convert the produced `.dot` files to images using; `dot -Tpng tree_example.dot -o example1.png # Produces an image`; `dot -Tpng tree_example2.dot -o example2.png # Error!`. The first of these will produce a .png image, the second will fail with a message like: `Error: tree_example2.dot: syntax error in line 1 near 'gaussian'`. Can be fixed by enclosing the graph title in quotes: i.e. changing line 1 of `tree_example2.dot` from; `digraph my gaussian{`; to; `digraph ""my gaussian""{`. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; ROOT built from source. ROOT Version: 6.23/01; Built for linuxx8664gcc on Jun 05 2020, 15:06:16; From heads/master@v6-23-01-229-gd4ac502837. Ubuntu 18.04.5 LTS",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7067:1815,message,message,1815,https://root.cern,https://github.com/root-project/root/issues/7067,1,['message'],['message']
Integrability,"Describe the bug; When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt.; The message is related to SOFIE:. ```; IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'!; You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&); Maybe you need to load the corresponding shared library?; Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'?; ```. ROOT 6.24/06 works fine. ### Expected behavior; No warning message. ### To Reproduce; Steps to reproduce the behavior:; 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 ; 2. Source dev4arm; `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`; 3. Start ROOT, e.g. `root -b -q`. ### Setup; 1. ROOT version: 6.26/04; 2. Operating system: aarch64, centos7; 3. LCG stack. ### Additional context; Affecting ATLAS (first noticed by Asoka Da Silva)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10877:1601,message,message,1601,https://root.cern,https://github.com/root-project/root/issues/10877,1,['message'],['message']
Integrability,"Dirty flag propagation appeared to be unnecessary in the batch mode; because the RooFitDriver manages the evaluation of nodes, but some nodes; have internal computation graphs that rely on the dirty flag; propagation, notably the integrals of a RooAbsAnaConvPdf. This fixes some stressRooFit tests wit the RooFit batchmode:; ```; Test 21 : Conditional use of per-event error p.d.f. F(t|dt)......OK; Test 28 : P.d.f. marginalization through integration.............OK; ```. The only tests that still needs to be fixed now is:; ```; Test 22 : Full per-event error p.d.f. F(t|dt)G(dt)...............FAILED; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9458:440,integrat,integration,440,https://root.cern,https://github.com/root-project/root/pull/9458,1,['integrat'],['integration']
Integrability,Disable tests depending on xml when xml is not found,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12002:14,depend,depending,14,https://root.cern,https://github.com/root-project/root/pull/12002,1,['depend'],['depending']
Integrability,"Disclaimer: I am not sure whether this is:; * 0 bug report (intented / wontfix),; * 1 or 2 bug reports. . Depending on feedback, We can close and / or I can create dedicated bugs. . ### Observations; There are two changes in 6.26.00:; * `TRint` exits hard for unknown arguments. ; * `TRint` crashes when instantiated with `*argc = nullptr` and / or `argv = nullptr` which are the default values for `TApplication` and hence may be used by existing users of the `TRint` constructor. . ### Affected use cases; Applications may do something like:; ```cpp; TRint *app = new TRint(""app"", 0, NULL);; ...; app->Run(kTRUE);; ```; Applications may also use `TRint` during operation. One existing model some applications I use are employing is:; * Create a `TRint` shortly after startup, passing in `argc` and `argv`. ; * Allow the user to drop to a ROOT interpreter prompt. This is then done by calling `app->Run(kTRUE);`. A user can use the interpreter to inspect state of the analysis software, and exit it again to let the software continue. . The latter approach is extremely useful for example to shell out after analysis software startup, or inside an event, such that the user can interactively analyze objects right from a ROOT interpreter shell. . ### Questions; * Is the use case ""use TRint as class to drop into the interpreter"" supported? ; The changelog of 6.26.00 reads like `TRint` is meant for internal use by `root.exe` only, but there seems to be no easy alternative. ; Depending on the reply, this could be a separate bug report, or a ""wontfix"". ; * If the use case is / should be supported, It would be useful to be able to allow unsupported arguments to pass through, for use in applications which are not `root.exe`. ; * For improved backwards compatibility and safety, not crashing when being passed `*argc = nullptr` and / or `argv = nullptr` would be nice. . In case somebody else is hit by this, I am right now using this hack as workaround:; ```cpp; int dargc = 1;; char** dargv = &a",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10090:106,Depend,Depending,106,https://root.cern,https://github.com/root-project/root/issues/10090,1,['Depend'],['Depending']
Integrability,"Disclaimer: not everyone tagged in this comment agreed to the totality of my changes, and all dissenting comments have been considered. Anything included this PR is carved in stone and everything is open for discussion. I'm proposing a generalized executor interface that resolves to the specific ones (```TThreadExecutor```, ```TProcessExecutor```, a new ```SequentialExecutor```) with an execution policy received as a parameter. This is a use case that we found in places such as ```TMVA``` (@omazapa, @lmoneta) and the various fitting functions, where currently we rely on several if-else instructions where we check the execution policy (or even if ROOT has been compiled with IMT) to instantiate the right executor. My suggestion is to move ```TExecutor``` to ```ROOT::TExecutorBaseImpl``` (maybe in ```ROOT::Internals```?) and reuse the name. This breaks ROOT's very strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp ; ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);; auto mapFunction = [](unsigned i){return 1u;};; auto reductionFunction = [](const std::vector<unsigned> &v) {; return std::accumulate(v.begin(), v.end(), 0u);; };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSeq<unsigned>(20), reductionFunction);; ```. *",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1312:257,interface,interface,257,https://root.cern,https://github.com/root-project/root/pull/1312,1,['interface'],['interface']
Integrability,"Discussed with @etejedor, still needs to be discussed with @oshadura.; Commit message needs to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5607:78,message,message,78,https://root.cern,https://github.com/root-project/root/pull/5607,1,['message'],['message']
Integrability,Do not add a non-existent target to the list of dependencies.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/509:48,depend,dependencies,48,https://root.cern,https://github.com/root-project/root/pull/509,1,['depend'],['dependencies']
Integrability,Do not change the class layout depending on NDEBUG!,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2060:31,depend,depending,31,https://root.cern,https://github.com/root-project/root/pull/2060,1,['depend'],['depending']
Integrability,Do not evaluate dependent immediate invocations,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13700:16,depend,dependent,16,https://root.cern,https://github.com/root-project/root/pull/13700,1,['depend'],['dependent']
Integrability,"Do not set up the iterator in the ctor.; ; Many interfaces in ROOT namely TCling do not need to iterate over decls to find what they look for. They use the regular lookup facilities which are provided by cling or clang.; ; In a few cases we still use the pattern:; `TClingClassInfo(fInterpreter) ci; ci.GetDataMember(..);`; where we are supposed to look for a ROOT's definition of a data member on the global scope. In turn, this pattern does not walk the decls but performs a 'regular' lookup.; ; This patch removes the expensive setup of the iterators (triggering humongous amount of deserializations). We lazily set up the iterators only when we are about to start iterating (most notably coming from the legacy PyROOT interfaces).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1668:48,interface,interfaces,48,https://root.cern,https://github.com/root-project/root/pull/1668,2,['interface'],['interfaces']
Integrability,Documentation for TH1's Chi2Test() routine,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12290:35,rout,routine,35,https://root.cern,https://github.com/root-project/root/issues/12290,1,['rout'],['routine']
Integrability,"Documentation of the method reported here for ease of review:. This method books a custom action for execution. The behavior of the action is completely dependent on the; Helper object provided by the caller. The minimum required interface for the helper is the following (more; methods can be present, e.g. a constructor that takes the number of worker threads is usually useful):. * Helper must publicly inherit from ROOT::Detail::TDF::TActionImpl<Helper>; * Helper(Helper &&): a move-constructor is required. Copy-constructors are discouraged.; * ColumnTypes_t: alias for a ROOT::TypeTraits::TypeList instantiation that specifies the types of the; columns to be passed to this action helper.; * Result_t: alias for the type of the result of this action helper. Must be default-constructible.; * ROOT::Detail::TDF::ColumnNames_t GetColumnNames() const: return the names of the columns processed by this; action. The number of names must be equal to the size of ColumnTypes_t.; * void Exec(unsigned int slot, ColumnTypes...columnValues): each working thread shall call this method; during the event-loop, possibly concurrently. No two threads will ever call Exec with the same 'slot' value:; this parameter is there to facilitate writing thread-safe helpers. The other arguments will be the values of; the requested columns for the particular entry being processed.; * void InitTask(TTreeReader *, unsigned int slot): each working thread shall call this method during the event; loop, before processing a batch of entries (possibly read from the TTreeReader passed as argument, if not null).; This method can be used e.g. to prepare the helper to process a batch of entries in a given thread. Can be no-op.; * void Initialize(): this method is called once before starting the event-loop. Useful for setup operations.; Can be no-op.; * void Finalize(): this method is called at the end of the event loop. Commonly used to finalize the contents; of the result.; * Result_t &PartialUpdate(unsigned int s",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1905:153,depend,dependent,153,https://root.cern,https://github.com/root-project/root/pull/1905,2,"['depend', 'interface']","['dependent', 'interface']"
Integrability,Documentation updates and sometimes also code changes that e.g. format warning messages or replace ineffective `assert`s by `throw`s.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5315:79,message,messages,79,https://root.cern,https://github.com/root-project/root/pull/5315,1,['message'],['messages']
Integrability,"Doing in a empty build directory; ```; cmake -Dminimal=ON $ROOT_SRC_DIR; cmake -Dbuiltin_xrootd=ON .; ```; fails with:; ```; CMake Error at cmake/modules/SearchInstalledSoftware.cmake:924 (target_link_libraries):; The link interface of target ""XRootD"" contains:. OpenSSL::SSL. but the target was not found. Possible reasons include:. * There is a typo in the target name.; * A find_package call is missing for an IMPORTED target.; * An ALIAS target is missing. Call Stack (most recent call first):; CMakeLists.txt:305 (include); ```; while on the same machine and in another empty directory doing just:; ```; cmake -Dbuiltin_xrootd=ON .; ```. The difference between the two case is that the `ssl` variable usually default to `ON` but in the minimal case it default to `OFF` and turning on `builtin_xrootd` does not turn `ssl` back on. The reason why this matters is that `find_package` defaults to declaring its results only inside the parent_scope. In practice we see `find_package` works properly in the top level `CMakeList.txt` and in one level of indirection (typically `cmake/modules/SearchInstalledSoftware.cmake`) but a second level of direction (i.e. inside the `add_subdirectory(builtins/xrootd)` inside `SearchInstalledSoftware.cmake`), it does not work. From https://cmake.org/cmake/help/latest/command/find_package.html we read:. > New in version 3.24: Specifying the GLOBAL keyword will promote all imported targets to a global scope in the importing project. Alternatively, this functionality can be enabled by setting the [CMAKE_FIND_PACKAGE_TARGETS_GLOBAL](https://cmake.org/cmake/help/latest/variable/CMAKE_FIND_PACKAGE_TARGETS_GLOBAL.html#variable:CMAKE_FIND_PACKAGE_TARGETS_GLOBAL) variable. So there is 3 possible solution. 1. Require `CMake` version `3.24` and add the `GLOBAL` keyword where needed (or set the variable); 2. Make sure that `builtin_xrootd` (and any other similar components) to turn `ssl` ON when turned ON; 3. Move the `find_package(OpenSSL) from inside `builti",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16374:223,interface,interface,223,https://root.cern,https://github.com/root-project/root/issues/16374,1,['interface'],['interface']
Integrability,"Don't use a default w=1.0 in the Fill functions, but instead declare inlined no-weight overloads to correctly override TH2 methods. Note that the overrides are actually quite questionable, because they don't respect the actual TH2 interface, where the third parameter is the weight ""w"" and not an additional coordinate ""z"". However, that's how the TProfile2D interface was defined a long time ago, so these overrides are preserved for backwards compatibility. The better design would have been to give the function a different name, or always require an explicit `w` parameter such that the signatures are always different. Closes #15688.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15693:231,interface,interface,231,https://root.cern,https://github.com/root-project/root/pull/15693,2,['interface'],['interface']
Integrability,Done! I think I've integrated all changes. **TODO:**. - [x] Make commit message more expressive; - [x] Try to make the counters in `RDefineBase` and `GraphNode` atomics; - [x] Look for another solution for the static `TRegex` members; - [x] Add a random sleep to the test cases to stir things up; - [x] Add tests for `Cache` and `Snapshot`; - [x] Point out in the docs that `SaveGraph` is not thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6266:19,integrat,integrated,19,https://root.cern,https://github.com/root-project/root/pull/6266,2,"['integrat', 'message']","['integrated', 'message']"
Integrability,Doxygen fixes in integrator classes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7746:17,integrat,integrator,17,https://root.cern,https://github.com/root-project/root/pull/7746,1,['integrat'],['integrator']
Integrability,Doxygen fixes in integrator classes; Typos,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7746:17,integrat,integrator,17,https://root.cern,https://github.com/root-project/root/pull/7746,1,['integrat'],['integrator']
Integrability,Drop MathCore and ROOTVecOps from PyROOT dependencies,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3225:41,depend,dependencies,41,https://root.cern,https://github.com/root-project/root/pull/3225,1,['depend'],['dependencies']
Integrability,"Due to faulty logic, we were using different RDefine objects for; each systematic variation even if the define itself did not depend; on the systematic variation under consideration.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10622:126,depend,depend,126,https://root.cern,https://github.com/root-project/root/pull/10622,1,['depend'],['depend']
Integrability,Due to pymva being automatically built with tmva and depending on numpy it was possible to configuration due to missing the package (and fail-on-missing being enabled). This patch introduces a switch in the cmake configuration to allow independently disabling pymva. Warning: Did _not_ try building yet (hoping the CI system will take care of that). Relevant output for `cmake ../root-src -DPYTHON_EXECUTABLE=$(which python) -Dtmva-pymva=on -Dfail-on-missing=off`:; ```; -- Looking for python; -- Looking for numpy (python package); -- TMVA: numpy not found for python /Users/ashlaban/.local/share/virtualenvs/root-conf-test-qZnOX_ZL/bin/python. Switching off tmva-pymva option; ```. Relevant output for `cmake ../root-src -DPYTHON_EXECUTABLE=$(which python) -Dtmva-pymva=on -Dfail-on-missing=on`:; ```; -- Looking for python; -- Looking for numpy (python package); CMake Error at cmake/modules/SearchInstalledSoftware.cmake:467 (message):; TMVA: numpy python package not found and tmva-pymva component required; (python executable:; /Users/ashlaban/.local/share/virtualenvs/root-conf-test-qZnOX_ZL/bin/python); ```. Relevant output for `cmake ../root-src -DPYTHON_EXECUTABLE=$(which python) -Dtmva-pymva=off -Dfail-on-missing=on` and `cmake ../root-src -DPYTHON_EXECUTABLE=$(which python) -Dtmva-pymva=off -Dfail-on-missing=off`:; ```; ```. Meaning in these cases it configures without issue.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2972:53,depend,depending,53,https://root.cern,https://github.com/root-project/root/pull/2972,2,"['depend', 'message']","['depending', 'message']"
Integrability,"Due to some planned major improvements to RVec (namely the addition of; a small buffer optimization) the layout of RVec objects will change in; a backward-incompatible way between v6.24 and v6.26. Because of this, we now print a warning if an application is reading or; writing a ROOT::RVec object from/to a ROOT file. We assume this is an; exceedingly rare case, as the ROOT interface typically used to; manipulate RVecs is RDataFrame, and RDataFrame performs an on-the-fly; RVec <-> std::vector conversion rather than writing RVecs to disk. Note that, currently, RVecs written e.g. in a TTree cannot be read back; using certain ROOT interfaces (e.g. TTreeReaderArray and RDataFrame).; These limitations will also be lifted in v6.26.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7222:376,interface,interface,376,https://root.cern,https://github.com/root-project/root/pull/7222,2,['interface'],"['interface', 'interfaces']"
Integrability,"Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary; information (see [ATR-25049](https://its.cern.ch/jira/browse/ATR-25049)). The ROOT internal class TClassTable records information about all classes; that could potentially be created. This is effectively a singleton,; but TClassTable itself does no locking. Rather, it depends on callers; already having acquired the root internal mutex. When a shared library; is loaded that contains dictionary information, TClassTable gets calls; to register information for classes defined in that file. However,; the ROOT lock is not acquired in that case. So a shared library load; could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock; when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading; in order to acquire the lock, but this hack is not possible with newer; versions of glibc, so this will eventually become a blocker for; moving to centos9.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11263:345,depend,depends,345,https://root.cern,https://github.com/root-project/root/pull/11263,1,['depend'],['depends']
Integrability,"Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup.; ; This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1632:490,depend,dependencies,490,https://root.cern,https://github.com/root-project/root/pull/1632,3,['depend'],"['dependencies', 'depends']"
Integrability,Enable again the usage of ROOT error messages (TError) in Minuit2,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6059:37,message,messages,37,https://root.cern,https://github.com/root-project/root/pull/6059,1,['message'],['messages']
Integrability,Enable argument dependent lookup (ADL) in math.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/445:16,depend,dependent,16,https://root.cern,https://github.com/root-project/root/pull/445,1,['depend'],['dependent']
Integrability,Error message when opening a GDML with TEveManager,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7987:6,message,message,6,https://root.cern,https://github.com/root-project/root/issues/7987,1,['message'],['message']
Integrability,Error value and context of call to FT_Set_Char_Size in TTF::SetTextSize should be in error message,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14592:91,message,message,91,https://root.cern,https://github.com/root-project/root/issues/14592,1,['message'],['message']
Integrability,Eve-7 Add simple window management and improve message log,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9515:47,message,message,47,https://root.cern,https://github.com/root-project/root/pull/9515,2,['message'],['message']
Integrability,Eve-7 Enable routing to table views,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7369:13,rout,routing,13,https://root.cern,https://github.com/root-project/root/pull/7369,1,['rout'],['routing']
Integrability,Examples for the mentioned features. Dependent on PR #1872.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1889:37,Depend,Dependent,37,https://root.cern,https://github.com/root-project/root/pull/1889,1,['Depend'],['Dependent']
Integrability,Exceptions thrown in an event loop are caught to print a message. This catch block is leveraged to finalize all scheduled actions in order to properly deallocate memory where needed and save the partial results which are obtained. # This Pull request:; Is work in progress and lacks a test battery; ## Changes or fixes:; Allows to finalize actions scheduled in a RDF analysis in case an exception is thrown during the event loop. ## Checklist:. - [V] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #10484,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13546:57,message,message,57,https://root.cern,https://github.com/root-project/root/pull/13546,1,['message'],['message']
Integrability,Extend TCanvasImp interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/622:18,interface,interface,18,https://root.cern,https://github.com/root-project/root/pull/622,1,['interface'],['interface']
Integrability,Extend the message ID type to Long_t to fix overflow described in #6715,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6740:11,message,message,11,https://root.cern,https://github.com/root-project/root/pull/6740,1,['message'],['message']
Integrability,Extended fitting interfaces.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/567:17,interface,interfaces,17,https://root.cern,https://github.com/root-project/root/pull/567,1,['interface'],['interfaces']
Integrability,"Extracted here to circumvent ODR clash between; std::Sp_counted_ptr_inplace<llvm::sys::fs::detail::DirIterState, std::allocator<llvm::sys::fs::detail::DirIterState>, (_gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&); coming from a no-rtti and a rtti build in libstdc++ from GCC >= 8.1.; In its function body, rtti uses `arg0 == typeid(...)` protected by #ifdef __cpp_rtti. Depending; on which symbol (with or without rtti) the linker picks up, the argument `arg0` is a valid; type_info - or not, in which case this comparison crashes.; Circumvent this by removing the rtti-use of this function:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2748:389,Depend,Depending,389,https://root.cern,https://github.com/root-project/root/pull/2748,1,['Depend'],['Depending']
Integrability,Extracted the code that makes generates an example file into its own file and made this a dependency of the others.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/365:90,depend,dependency,90,https://root.cern,https://github.com/root-project/root/pull/365,1,['depend'],['dependency']
Integrability,Extraction from #5181 . First of all - add libraries in dependency list when class from such library used; Second - try to remove includes which are not used and coming from libraries which are not in dep list; In two places try to use virtual interfaces (TVirtualTreePlayer and TVirtualPacketizer) to avoid linking to implementation library.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5231:56,depend,dependency,56,https://root.cern,https://github.com/root-project/root/pull/5231,2,"['depend', 'interface']","['dependency', 'interfaces']"
Integrability,"F] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers; f4fc140268 [RF] Remove RooMomentMorphND; 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf; d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10; 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper.; 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument; 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext; ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(); c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew.; 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation; c51376731b [RF][NFC] Fix typo.; 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off.; 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit.; 98d004c200 [RF] Fix visibility of the res/ directories.; e97347056c [RF] Make RooBatchCompute dependency public.; 4483b01b7f [RF] Add initial interface and implementation for code-squashing.; f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer; 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; bf4990c5d4 [RF] Exclude RooHistError from IO; 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; f355c3ced4 [RF] Code-format `testRooDataHist.cxx`; 3fd99f7679 [RF] Enable AD code-gen test for RooFit.; a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext; 1367091202 [RF] Code modernization of RooAbsReal; 5c20fdc652 [RF] Add inti",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12681:2364,interface,interface,2364,https://root.cern,https://github.com/root-project/root/pull/12681,4,['interface'],['interface']
Integrability,"Feature: Save training progress to root file, present it in TMVAGui. Add training history object for TMVA, here I incorporate usage to log DNN epoch performance with DNN_CPU and PyKeras. The tool is intended to be general enough that it can be used by any ML algorithm. For example, XGBoost could also record its progress per iteration with this object. A request for this functionality can be found on the root forums; https://root-forum.cern.ch/t/how-to-get-training-history-using-tmva-keras-interface/28799. My solution does not require tensorboard and records are stored within the root file. Test:; ```; . bin/thisroot.sh; cd tutorials/tmva/; make; ./TMVAClassification; root -l; TMVA::TMVAGui(""TMVA.root""); //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx ; .q. cd keras; python ClassificationKeras.py; root -l; TMVA::TMVAGui(""TMVA.root""); //Click on Training History... See Keras training history for PyKeras_val_acc, PyKeras_acc, PyKeras_loss and PyKeras_val_loss; ```. Feedback welcomed",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4337:494,interface,interface,494,https://root.cern,https://github.com/root-project/root/pull/4337,1,['interface'],['interface']
Integrability,"FileExtension> > > const&, bool, cling::Interpreter const*) () from /home/geonwoo/root/lib/libCling.so; #16 0x00007fd7ce21b224 in TCling::TCling(char const*, char const*, char const* const*) () from /home/geonwoo/root/lib/libCling.so; #17 0x00007fd7ce21ceea in CreateInterpreter () from /home/geonwoo/root/lib/libCling.so; #18 0x00007fd7d1edeb13 in TROOT::InitInterpreter() () from /home/geonwoo/root/lib/libCore.so.6.22; #19 0x00007fd7d1edf00f in ROOT::Internal::GetROOT2() () from /home/geonwoo/root/lib/libCore.so.6.22; #20 0x00007fd7d1eebdcd in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/geonwoo/root/lib/libCore.so.6.22; #21 0x00007fd7d2263f0f in TRint::TRint(char const*, int*, char**, void*, int, bool) () from /home/geonwoo/root/lib/libRint.so.6.22; #22 0x0000561a6211b174 in main (); ===========================================================; ```. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; i installed root from homepage, ; ```; $ wget https://root.cern/download/root_v6.22.00.Linux-ubuntu19-x86_64-gcc9.2.tar.gz; $ tar -xzvf root_v6.22.00.Linux-ubuntu19-x86_64-gcc9.2.tar.gz; $ source root/bin/thisroot.sh # also available: thisroot.{csh,fish,bat}; ```; i finished these steps and finally i had tried to excute root by $root and then this error message had poped up . ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; 1.latest version 2. oracle VM VirtualBox in window 10 3.i don't know i just followed steps from cern homepage. ### Additional context; <!--; Add any other context about the problem here.; -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6859:9895,message,message,9895,https://root.cern,https://github.com/root-project/root/issues/6859,1,['message'],['message']
Integrability,Filter doesn't display command line option `-js` and `-nodraw` in the description anymore. Tutorials now use `gROOT->GetTutorialsDir()` to access tutorial files. converttonotebooks now displays an error message that is picked up by jenkins when nbconvert fails.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/209:203,message,message,203,https://root.cern,https://github.com/root-project/root/pull/209,1,['message'],['message']
Integrability,"First attempt at moving the globbing logic in `TChain::Add` out of the method. The main remaining question is where will this new free function actually live. It depends on `TRegexp`, `TString` and `TSystem`, so I guess somewhere in `core/base`. Any ideas here?. I removed usage of `TList` in the function, with C++17 support I could use `std::filesystem` instead of `gSystem` which could be another small improvement in the logic.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13160:162,depend,depends,162,https://root.cern,https://github.com/root-project/root/pull/13160,1,['depend'],['depends']
Integrability,"First reported here: https://bugs.gentoo.org/793002. To reproduce, it should be enough to configure with; ```; $ cmake .. -DCMAKE_C_COMPILER=gcc-11.1.0 -DCMAKE_CXX_COMPILER=g++-11.1.0 -DCMAKE_CXX_STANDARD=11 -Dminimal=ON; ```; to reproduce the error below; ```; Consolidate compiler generated dependencies of target Foundation_Stage1; [ 18%] Building CXX object core/foundation/CMakeFiles/Foundation_Stage1.dir/src/RConversionRuleParser.cxx.o; In file included from /srv/root/src/root/core/foundation/inc/ROOT/RWrap_libcpp_string_view.h:545,; from /srv/root/src/root/core/foundation/inc/ROOT/RStringView.hxx:26,; from /srv/root/src/root/core/foundation/inc/TClassEdit.h:65,; from /srv/root/src/root/core/foundation/src/RConversionRuleParser.cxx:18:; /srv/root/src/root/core/foundation/inc/ROOT/libcpp_string_view.h: In member function ‘constexpr std::experimental::__ROOT::basic_string_view<_CharT, _Traits>::size_type std::experimental::__ROOT::basic_string_view<_CharT, _Traits>::max_size() const’:; /srv/root/src/root/core/foundation/inc/ROOT/libcpp_string_view.h:275:63: error: ‘numeric_limits’ is not a member of ‘std’; 275 | size_type max_size() const _NOEXCEPT { return (_VSTD::numeric_limits<size_type>::max)(); }; | ^~~~~~~~~~~~~~; /srv/root/src/root/core/foundation/inc/ROOT/libcpp_string_view.h:275:87: error: expected primary-expression before ‘>’ token; 275 | size_type max_size() const _NOEXCEPT { return (_VSTD::numeric_limits<size_type>::max)(); }; | ^; /srv/root/src/root/core/foundation/inc/ROOT/libcpp_string_view.h:275:90: error: ‘::max’ has not been declared; did you mean ‘std::max’?; 275 | size_type max_size() const _NOEXCEPT { return (_VSTD::numeric_limits<size_type>::max)(); }; | ^~~; | std::max; In file included from /usr/lib/gcc/x86_64-pc-linux-gnu/11.1.0/include/g++-v11/algorithm:62,; from /srv/root/src/root/core/foundation/res/TSchemaRuleProcessor.h:15,; from /srv/root/src/root/core/foundation/src/RConversionRuleParser.cxx:17:; /usr/lib/gcc/x86_64-pc-linux-gnu/11.1",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8281:293,depend,dependencies,293,https://root.cern,https://github.com/root-project/root/issues/8281,1,['depend'],['dependencies']
Integrability,First steps in direction of development RNTuple C API with minimal dependencies,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6322:67,depend,dependencies,67,https://root.cern,https://github.com/root-project/root/pull/6322,1,['depend'],['dependencies']
Integrability,"Fix #7912. In this report, the v5 file has a 'map<TString, RooExpensiveObjectCache::ExpensiveObject*>'; however it is recorded as 'map<TString, ExpensiveObject*>'. However the map stored in; the file is empty and thus no information was recorded about `ExpensiveObject`,; consequently when the map's StreamerInfo request the TClass for the underlying pair,; it is returned nullptr (since we no longer create the TClass for a pair where one or; more of the component is unknown). The routine `FixCollectionV5` needed to be updated to handle this situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7926:483,rout,routine,483,https://root.cern,https://github.com/root-project/root/pull/7926,3,['rout'],['routine']
Integrability,Fix NO_CXXMODULE handling logic for dependencies,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5903:36,depend,dependencies,36,https://root.cern,https://github.com/root-project/root/pull/5903,1,['depend'],['dependencies']
Integrability,Fix PyROOT dependencies for cxxmodules build,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2809:11,depend,dependencies,11,https://root.cern,https://github.com/root-project/root/pull/2809,1,['depend'],['dependencies']
Integrability,Fix RLogger interface in CEF and Qt5 adapters,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6959:12,interface,interface,12,https://root.cern,https://github.com/root-project/root/pull/6959,2,"['adapter', 'interface']","['adapters', 'interface']"
Integrability,Fix ROOT libraries dependencies,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5231:19,depend,dependencies,19,https://root.cern,https://github.com/root-project/root/pull/5231,1,['depend'],['dependencies']
Integrability,Fix TMVA dependency on Cuda,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7017:9,depend,dependency,9,https://root.cern,https://github.com/root-project/root/pull/7017,1,['depend'],['dependency']
Integrability,Fix Windows exception handling for newer LLVM interfaces. Block it’s …,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/732:46,interface,interfaces,46,https://root.cern,https://github.com/root-project/root/pull/732,1,['interface'],['interfaces']
Integrability,"Fix [this](http://cdash.cern.ch/viewBuildError.php?type=1&buildid=362417) warning:. ```; Scanning dependencies of target testRootFinder; [ 96%] Building CXX object math/mathcore/test/CMakeFiles/testRootFinder.dir/testRootFinder.cxx.o; /.../root/graf3d/gl/src/gl2ps.cxx: In function ‘void gl2psBuildBspTree(GL2PSbsptree*, GL2PSlist*)’:; /.../root/graf3d/gl/src/gl2ps.cxx:1540:19: warning: ‘prim’ may be used uninitialized in this function [-Wmaybe-uninitialized]; GL2PSprimitive *prim, *frontprim = NULL, *backprim = NULL;; ^~~~; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/618:98,depend,dependencies,98,https://root.cern,https://github.com/root-project/root/pull/618,1,['depend'],['dependencies']
Integrability,"Fix `mt201_parallelHistoFill.C` failing with the following error:; ```; 779: Processing C:/root-dev/git/master/tutorials/multicore/mt201_parallelHistoFill.C...; 779: [runStaticInitializersOnce]: Failed to materialize symbols: { (main, { ?_Swap@?$_Ptr_base@VTH1F@@@std@@IEAAXAEAV12@@Z,; [...]; 779: [runStaticInitializersOnce]: Failed to materialize symbols: { (main, { __orc_init_func.cling-module-9 }) }; 779: cling JIT session error: Failed to materialize symbols: { (main, { ?mt201_parallelHistoFill@@YAHXZ }) }; 779: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):; 779: error code: 1; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14786:590,message,message,590,https://root.cern,https://github.com/root-project/root/pull/14786,2,['message'],['message']
Integrability,"Fix a few minor things and pave the way to integrate cutflow reports in TDataFrame. * TDFAction ctor can take a shared_ptr instead of a weak_ptr: TDFAction; can safely assume that the previous node in the chain still exists when it is; being constructed; * fPrevData is now a reference instead of a raw pointer in all classes:; a reference better indicates that we always expect fPrevData to be a valid; node of the chain. In fact, the only case when this condition might not be; met is when the TDataFrameImpl object goes out-of-scope before other nodes; of the chain; we detect this case and throw before trying to access; invalid fPrevData pointers/references.; * use `Long64_t` instead of `int` for all entry variables",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/333:43,integrat,integrate,43,https://root.cern,https://github.com/root-project/root/pull/333,1,['integrat'],['integrate']
Integrability,"Fix a long-standing problem in RooFit's faster batch computations. [ROOT-10987] When a PDF doesn't implement the faster batch interface,; RooFit's old, single-value computations have to be used as a fallback.; If RooFit, however, tries to precalculate those values, the nodes of; the computation graph will always yield the same wrong value, since; they are switched to ""always clean"".; This happens e.g. when a node of the graph doesn't depend on parameters,; but only on observables. To fix this, the global static that inihibits ""always clean"" has to be; set while the computation is running. **NB**:; The test for this exists since ages, but was marked `WILLFAIL`. I will switching it back to normal in a roottest PR (to come).; Automatic checkout of the corresponding roottest branch will run the test in normal mode already in this build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6178:126,interface,interface,126,https://root.cern,https://github.com/root-project/root/pull/6178,2,"['depend', 'interface']","['depend', 'interface']"
Integrability,Fix a printout message in Minuit2,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8134:15,message,message,15,https://root.cern,https://github.com/root-project/root/pull/8134,1,['message'],['message']
Integrability,Fix an access violation error when using `fscanf` on Windows 64 bit:; ```; 243: Processing C:/Users/sftnight/git/master/test/stressGraphics.cxx...; 243: **********************************************************************; 243: * Starting Graphics - S T R E S S suite *; 243: **********************************************************************; 243: * Starting Basic Graphics - S T R E S S *; 243: **********************************************************************; 243: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:227 (message):; 243: error code: Access violation; 243:; 243:; 1/1 Test #243: test-stressgraphics-interpreted ...***Failed 4.33 sec; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9959:553,message,message,553,https://root.cern,https://github.com/root-project/root/pull/9959,1,['message'],['message']
Integrability,"Fix bug introduced in https://github.com/root-project/root/commit/bc4e3d3787a30a5e4ccad5371044975f4481232e. fSelEntry is a nullptr or not, depending on which constructor is called. Editable-combo-box constructor leaves fSelEntry as a nullptr, thus guards are needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14397:139,depend,depending,139,https://root.cern,https://github.com/root-project/root/pull/14397,1,['depend'],['depending']
Integrability,"Fix bug introduced in https://github.com/root-project/root/commit/bc4e3d3787a30a5e4ccad5371044975f4481232e. fSelEntry is a nullptr or not, depending on which constructor is called. Editable-combo-box constructor leaves fSelEntry as a nullptr, thus guards are needed. There are guards everywhere in the code except in this function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14301:139,depend,depending,139,https://root.cern,https://github.com/root-project/root/pull/14301,1,['depend'],['depending']
Integrability,Fix compilation errors in win32gdk (typos) and winnt (interface changes),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1093:54,interface,interface,54,https://root.cern,https://github.com/root-project/root/pull/1093,1,['interface'],['interface']
Integrability,"Fix compilation of dataframe-resptr test on RHEL/EPEL 7 using the default compiler (gcc 4.8.5) and the gtest library provided by the system (gtest 1.6.0) instead of the bundled one. Error message with the original sources:; ````; In file included from /usr/include/gtest/gtest.h:57:0,; from /builddir/build/BUILD/root-6.14.00/tree/dataframe/test/dataframe_resptr.cxx:2:; /builddir/build/BUILD/root-6.14.00/tree/dataframe/test/dataframe_resptr.cxx: In member function 'virtual void RResultPtr_ImplConv_Test::TestBody()':; /builddir/build/BUILD/root-6.14.00/tree/dataframe/test/dataframe_resptr.cxx:48:4: error: no matching function for call to 'testing::AssertionResult::AssertionResult(ROOT::RDF::RResultPtr<TH1D>&)'; EXPECT_TRUE(m);; ^; /builddir/build/BUILD/root-6.14.00/tree/dataframe/test/dataframe_resptr.cxx:48:4: note: candidates are:; In file included from /builddir/build/BUILD/root-6.14.00/tree/dataframe/test/dataframe_resptr.cxx:2:0:; /usr/include/gtest/gtest.h:271:12: note: testing::AssertionResult::AssertionResult(bool); explicit AssertionResult(bool success) : success_(success) {}; ^; /usr/include/gtest/gtest.h:271:12: note: no known conversion for argument 1 from 'ROOT::RDF::RResultPtr<TH1D>' to 'bool'; /usr/include/gtest/gtest.h:269:3: note: testing::AssertionResult::AssertionResult(const testing::AssertionResult&); AssertionResult(const AssertionResult& other);; ^; /usr/include/gtest/gtest.h:269:3: note: no known conversion for argument 1 from 'ROOT::RDF::RResultPtr<TH1D>' to 'const testing::AssertionResult&'; ````",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2263:188,message,message,188,https://root.cern,https://github.com/root-project/root/pull/2263,1,['message'],['message']
Integrability,Fix dependencies in periodic target,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2499:4,depend,dependencies,4,https://root.cern,https://github.com/root-project/root/pull/2499,1,['depend'],['dependencies']
Integrability,Fix dependency of Mathcore from Mathmore,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5418:4,depend,dependency,4,https://root.cern,https://github.com/root-project/root/pull/5418,1,['depend'],['dependency']
Integrability,Fix dependency of pymva on sofie,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8930:4,depend,dependency,4,https://root.cern,https://github.com/root-project/root/pull/8930,1,['depend'],['dependency']
Integrability,Fix dependency propagation of Vdt when builtin_vdt=ON,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3986:4,depend,dependency,4,https://root.cern,https://github.com/root-project/root/pull/3986,1,['depend'],['dependency']
Integrability,Fix error message in Brent root finder algorithm ( used by TF1::GetX),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5076:10,message,message,10,https://root.cern,https://github.com/root-project/root/pull/5076,1,['message'],['message']
Integrability,"Fix for a bug in rooteventselector when applying both a cut and the exclusion of branches, reported by:; https://sft.its.cern.ch/jira/browse/ROOT-9797. More information in the commit message.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2996:183,message,message,183,https://root.cern,https://github.com/root-project/root/pull/2996,1,['message'],['message']
Integrability,"Fix function, which was introduced with commit 822106a898267fca74214fc83d64d6110b2d66c5; Now, error messages of the device compiler are correctly prefixed with `cling-ptx: `",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7392:100,message,messages,100,https://root.cern,https://github.com/root-project/root/pull/7392,1,['message'],['messages']
Integrability,Fix header->dict dependencies.; Simplify core dictionary.; Simplify cmake code for dictionary generation (modulo modules - that's still to be simplified...),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3404:17,depend,dependencies,17,https://root.cern,https://github.com/root-project/root/pull/3404,1,['depend'],['dependencies']
Integrability,Fix logic of handling dependencies when NO_CXXMODULE is specified,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5798:22,depend,dependencies,22,https://root.cern,https://github.com/root-project/root/pull/5798,1,['depend'],['dependencies']
Integrability,Fix lookup of Visual Studio directories + improve error messages,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2678:56,message,messages,56,https://root.cern,https://github.com/root-project/root/pull/2678,1,['message'],['messages']
Integrability,"Fix nullptr dereference bugs in TClass and TList, wrap TClass.cxx to 120 columns to follow coding conventions, and avoid StreamerInfo lookup when it is cached.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/953:50,wrap,wrap,50,https://root.cern,https://github.com/root-project/root/pull/953,1,['wrap'],['wrap']
Integrability,Fix potential startup error messages on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5627:28,message,messages,28,https://root.cern,https://github.com/root-project/root/pull/5627,1,['message'],['messages']
Integrability,Fix printing of warning message when calling without a normalization set but fixCoefNormalization has been called,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8030:24,message,message,24,https://root.cern,https://github.com/root-project/root/pull/8030,1,['message'],['message']
Integrability,"Fix protobuf warnings as suggested in https://github.com/protocolbuffers/protobuf/issues/7140#issuecomment-599467033. The warnings should however be fixed in the latest protobuf version, 3.17",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8937:57,protocol,protocolbuffers,57,https://root.cern,https://github.com/root-project/root/pull/8937,1,['protocol'],['protocolbuffers']
Integrability,Fix some dependency issues in the tests of TMVA-sofie,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8799:9,depend,dependency,9,https://root.cern,https://github.com/root-project/root/pull/8799,1,['depend'],['dependency']
Integrability,Fix some warnings during doxygen documentation generation.; See the commit messages for details.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6029:75,message,messages,75,https://root.cern,https://github.com/root-project/root/pull/6029,1,['message'],['messages']
Integrability,"Fix stressRooFit test #4, a fit of a beta pdf, avoiding the x=0 point where the pdf diverges for some parameter values. This fixes ROOT-10834. This PR fixes also a dependency issue in building test with make in both stressRooFit and StressRooStats",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5860:164,depend,dependency,164,https://root.cern,https://github.com/root-project/root/pull/5860,1,['depend'],['dependency']
Integrability,Fix the GSL random number generator wrapper for external engines (e.g. random engine from ROOT),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4419:36,wrap,wrapper,36,https://root.cern,https://github.com/root-project/root/pull/4419,1,['wrap'],['wrapper']
Integrability,"Fix the GSL wrapper of the function generating random numbers according to a ND Gaussian. Do not create gsl_matrix and vector but use a view. Also since the GSL function requires the Cholesky factorized L matrix of the covariance, have an interface to provide the factorized matrix to gain time. This will fix the old JIRA issue [ROOT-767](https://sft.its.cern.ch/jira/browse/ROOT-767)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12615:12,wrap,wrapper,12,https://root.cern,https://github.com/root-project/root/pull/12615,2,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"Fix the `ntpl002_vector.C`, `ntpl005_introspection.C`, `ntpl006_friends.C`, and `ntpl007_mtFill.C` tutorials failing with the following errors:; ```; Processing ntpl002_vector.C...; IncrementalExecutor::executeFunction: symbol '_Smtx_unlock_shared' unresolved while linking [cling interface function]!; You are probably missing the definition of _Smtx_unlock_shared; Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_Smtx_lock_shared' unresolved while linking [cling interface function]!; You are probably missing the definition of _Smtx_lock_shared; Maybe you need to load the corresponding shared library?; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10262:281,interface,interface,281,https://root.cern,https://github.com/root-project/root/pull/10262,2,['interface'],['interface']
Integrability,Fix the compilation of Cuda with C++14 when normal ROOT is compile with C++17 which has std::string_view. Support compilation when configuting with: ; cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_CUDA_STANDARD=14. The fix is done by modifying the pre-processor macros defined in RConfigure.h when compiling Cuda.; A better fix would be to remove the TString dependency in the Cuda compiled code. TString is used only when doing I/O of the DeepNet layers to XML. In principle this code could be moved out of Cuda.; Something to be done in a future code re-factoring,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5598:351,depend,dependency,351,https://root.cern,https://github.com/root-project/root/pull/5598,1,['depend'],['dependency']
Integrability,Fix the dependency of Python and C++ tutorials using the Higgs_trained_model.h5 file,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15115:8,depend,dependency,8,https://root.cern,https://github.com/root-project/root/pull/15115,1,['depend'],['dependency']
Integrability,"Fix the following compilation errors when using the /std:c++17 flag on Windows:; ```; roofit\roofitcore\src\RooDataSet.cxx(2073,43): error C2664: 'RooDataSet::RooDataSet(std::string_view,std::string_view,RooDataSet *,const RooArgSet &,const RooFormulaVar *,const char *,size_t,size_t,Bool_t,const char *)': cannot convert argument 1 from 'TString' to 'std::string_view'; roofit\roofitcore\src\RooDataSet.cxx(2073,17): message : No user-defined-conversion operator available that can perform this conversion, or the operator cannot be called; roofit\roofitcore\src\RooDataSet.cxx(625,13): message : see declaration of 'RooDataSet::RooDataSet'; roofit\roofitcore\src\RooDataSet.cxx(2074,43): error C2664: 'RooDataSet::RooDataSet(std::string_view,std::string_view,RooDataSet *,const RooArgSet &,const RooFormulaVar *,const char *,size_t,size_t,Bool_t,const char *)': cannot convert argument 1 from 'TString' to 'std::string_view'; roofit\roofitcore\src\RooDataSet.cxx(2074,17): message : No user-defined-conversion operator available that can perform this conversion, or the operator cannot be called; roofit\roofitcore\src\RooDataSet.cxx(625,13): message : see declaration of 'RooDataSet::RooDataSet'; roofit\roofitcore\src\RooDataSet.cxx(2075,43): error C2664: 'RooDataSet::RooDataSet(std::string_view,std::string_view,RooDataSet *,const RooArgSet &,const RooFormulaVar *,const char *,size_t,size_t,Bool_t,const char *)': cannot convert argument 2 from 'TString' to 'std::string_view'; roofit\roofitcore\src\RooDataSet.cxx(2075,23): message : No user-defined-conversion operator available that can perform this conversion, or the operator cannot be called; roofit\roofitcore\src\RooDataSet.cxx(625,13): message : see declaration of 'RooDataSet::RooDataSet'; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8789:418,message,message,418,https://root.cern,https://github.com/root-project/root/pull/8789,6,['message'],['message']
Integrability,"Fix the following compilation errors with `-std:c++20` on Windows:; ```; interpreter\llvm\src\utils\TableGen\GlobalISel\GIMatchDag.cpp(51,11): error C2666: 'llvm::format': overloaded functions have similar conversions [C:\Users\bellenot\build\x64\release\interpreter\llvm\src\utils\TableGen\GlobalISel\LLVMTableGenGlobalISel.vcxproj]; interpreter\llvm\src\include\llvm/Support/Format.h(124,29): message : could be 'llvm::format_object<const std::unique_ptr<llvm::GIMatchDagInstr,std::default_delete<llvm::GIMatchDagInstr>> *> llvm::format<const std::unique_ptr<llvm::GIMatchDagInstr,std::default_delete<llvm::GIMatchDagInstr>>*>(const char *,const std::unique_ptr<llvm::GIMatchDagInstr,std::default_delete<llvm::GIMatchDagInstr>> *const &)' [C:\Users\bellenot\build\x64\release\interpreter\llvm\src\utils\TableGen\GlobalISel\LLVMTableGenGlobalISel.vcxproj]; C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\format(3526,20): message : or 'std::wstring std::format<const std::unique_ptr<llvm::GIMatchDagInstr,std::default_delete<llvm::GIMatchDagInstr>>*>(const std::basic_format_string<wchar_t,const std::unique_ptr<llvm::GIMatchDagInstr,std::default_delete<llvm::GIMatchDagInstr>> *>,const std::unique_ptr<llvm::GIMatchDagInstr,std::default_delete<llvm::GIMatchDagInstr>> *&&)' [found using argument-dependent lookup] [C:\Users\bellenot\build\x64\release\interpreter\llvm\src\utils\TableGen\GlobalISel\LLVMTableGenGlobalISel.vcxproj]; interpreter\llvm\src\utils\TableGen\GlobalISel\GIMatchDag.cpp(51,11): message : 'std::wstring std::format<const std::unique_ptr<llvm::GIMatchDagInstr,std::default_delete<llvm::GIMatchDagInstr>>*>(const std::basic_format_string<wchar_t,const std::unique_ptr<llvm::GIMatchDagInstr,std::default_delete<llvm::GIMatchDagInstr>> *>,const std::unique_ptr<llvm::GIMatchDagInstr,std::default_delete<llvm::GIMatchDagInstr>> *&&)': cannot convert argument 1 from 'const char [5]' to 'const std::basic_format_string<wchar_t,const std::uni",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12523:395,message,message,395,https://root.cern,https://github.com/root-project/root/pull/12523,1,['message'],['message']
Integrability,"Fix the following error messages displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:; ```; In file included from input_line_3:38:; In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'; struct _CrtEnableIf<true, _Ty>; ^~~~~~~~~~~~~~~~~~~~~~~; C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here; struct _CrtEnableIf<true, _Ty>; ^; In file included from input_line_3:38:; In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'; typedef struct __crt_locale_data_public; ^; C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include; site here; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include; site here; ^; In file included from input_line_3:38:; In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:; C:\Program Files (x86)\Window",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5627:24,message,messages,24,https://root.cern,https://github.com/root-project/root/pull/5627,2,['message'],['messages']
Integrability,"Fix the following error on Windows:. In file included from input_line_10:1:; C:\Users\sftnight\git\master\tutorials\roofit\rf204b_extendedLikelihood_rangedFit.C:71:13: error: call to constructor of 'RooRealVar' is ambiguous; RooRealVar alpha(""alpha"", ""alpha"", -0.04, -0.1, -0);; ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; C:/Users/sftnight/build/release\include\RooRealVar.h:41:3: note: candidate constructor; RooRealVar(const char *name, const char *title, Double_t minValue,; ^; C:/Users/sftnight/build/release\include\RooRealVar.h:43:3: note: candidate constructor; RooRealVar(const char *name, const char *title, Double_t value,; ^; CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; error code: 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6009:704,message,message,704,https://root.cern,https://github.com/root-project/root/pull/6009,1,['message'],['message']
Integrability,"Fix the isssue with the static constexpr class members of RColor not being properly exported, even with `CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS`, and causing the following kind of error, for example when trying to execute the root7 box.cxx macro:; ```; Processing box.cxx...; IncrementalExecutor::executeFunction: symbol '?kGreen@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]!; You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kGreen; Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '?kRed@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]!; You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kRed; Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '?kBlue@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]!; You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kBlue; Maybe you need to load the corresponding shared library?; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6157:405,interface,interface,405,https://root.cern,https://github.com/root-project/root/pull/6157,3,['interface'],['interface']
Integrability,Fix this kind of error message on Windows:; 155: input_line_18:2:19: error: invalid digit 'B' in octal constant; 155: *((std::string*)0B8DCA20) = cling::printValue((int*)0xeff520);*((std::string*)0B8DB9E0) = cling::printValue((int*)0xb8c1250);*((std::string*)0B8DB9F8) = cling::printValue((int*)0xb8c1254);*((std::string*)0B8DBA10) = cling::printValue((int*)0xb8c1258);*((std::string*)0B8DCA50) = cling::printValue((double*)0xeff530);,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2760:23,message,message,23,https://root.cern,https://github.com/root-project/root/pull/2760,1,['message'],['message']
Integrability,Fix to avoid redefinition of injected value of macro in test stressTMVA. Visible for C++ module build for Clang 8.0.0:. In file included from <module-includes>:26: ../build/include/TMVA/MethodDNN.h:56:9: warning: 'DNNCPU' macro redefined [-Wmacro-redefined]. #define DNNCPU. While building module 'TMVA' imported from /.../root/test/stressTMVA.cxx:70: In file included from <built-in>:379:; #define DNNCPU 1,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2598:29,inject,injected,29,https://root.cern,https://github.com/root-project/root/pull/2598,1,['inject'],['injected']
Integrability,Fix to avoid redefinition of injected value of macro in test stressTMVA. Visible for C++ module build for Clang 8.0.0:; ```; In file included from <module-includes>:26: ../build/include/TMVA/MethodDNN.h:56:9: warning: 'DNNCPU' macro redefined [-Wmacro-redefined]. #define DNNCPU. While building module 'TMVA' imported from /.../root/test/stressTMVA.cxx:70: In file included from <built-in>:379:; #define DNNCPU 1; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2582:29,inject,injected,29,https://root.cern,https://github.com/root-project/root/pull/2582,1,['inject'],['injected']
Integrability,Fix warning message in THtml,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6689:12,message,message,12,https://root.cern,https://github.com/root-project/root/pull/6689,1,['message'],['message']
Integrability,Fixed Issue reported on ; https://sft.its.cern.ch/jira/browse/ROOT-10755; https://root-forum.cern.ch/t/rootr-root-r-interface-problems-with-x11-graphics/39299,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5608:116,interface,interface-problems-with-,116,https://root.cern,https://github.com/root-project/root/pull/5608,1,['interface'],['interface-problems-with-']
Integrability,"Fixed a faulty loop condition in RooAddModel that lead to a crash in; RoofitUnBinnedBenchmark.; Further, fix the definition of basis functions in RooBMixDecay, which; lead to an info message about not using a parameter in a RooFormulaVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4790:183,message,message,183,https://root.cern,https://github.com/root-project/root/pull/4790,1,['message'],['message']
Integrability,Fixed dependencies between tests on roostats,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/365:6,depend,dependencies,6,https://root.cern,https://github.com/root-project/root/pull/365,1,['depend'],['dependencies']
Integrability,Fixed dependencies for TMVA tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/420:6,depend,dependencies,6,https://root.cern,https://github.com/root-project/root/pull/420,1,['depend'],['dependencies']
Integrability,Fixed tutorial. Added explicit dependency of shared library on ROOT dictionary,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14619:31,depend,dependency,31,https://root.cern,https://github.com/root-project/root/pull/14619,1,['depend'],['dependency']
Integrability,Fixes #6743 ROOT crashes with no helpful error messages if a TApplication is not present and tree->StartViewer() is called. Now it prints the following warning:; ```; Warning in <TTreePlayer::StartViewer>: The tree viewer cannot run in batch mode; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6752:47,message,messages,47,https://root.cern,https://github.com/root-project/root/pull/6752,1,['message'],['messages']
Integrability,"Fixes #7828 partially, missing integration into Describe",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7832:31,integrat,integration,31,https://root.cern,https://github.com/root-project/root/pull/7832,1,['integrat'],['integration']
Integrability,"Fixes #7829 partially, missing integration into Describe",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7833:31,integrat,integration,31,https://root.cern,https://github.com/root-project/root/pull/7833,1,['integrat'],['integration']
Integrability,Fixes #8141. This PR requires a new clad release v0.9. The clad master is incompatible with ROOT atm and the release of 0.9 depends on #8371,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8766:124,depend,depends,124,https://root.cern,https://github.com/root-project/root/pull/8766,1,['depend'],['depends']
Integrability,Fixes a problem with using genreflex to create a dictionary for a class that inherits from TObject. The problem was triggered by the thread-safety changes.; Depends on previous pull request (#12).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13:157,Depend,Depends,157,https://root.cern,https://github.com/root-project/root/pull/13,1,['Depend'],['Depends']
Integrability,"Fixes for bug ROOT-1036 (FitResult::Scan); When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer !; This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. ; One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals.; Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4557:758,integrat,integrator,758,https://root.cern,https://github.com/root-project/root/pull/4557,1,['integrat'],['integrator']
Integrability,Fixes https://github.com/root-project/root/issues/7740. # This Pull request:. ## Changes or fixes:; Add tutorial about multi dimensional integrator. ## Checklist:. - [x ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes # ; https://github.com/root-project/root/issues/7740,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14730:137,integrat,integrator,137,https://root.cern,https://github.com/root-project/root/pull/14730,1,['integrat'],['integrator']
Integrability,Fixes the dependence of the correct handling of the signal and background classes; on the order in which in which data sets are filled. This was described here:; https://root-forum.cern.ch/t/tmva-signal-background-target-responses-inverted,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/779:10,depend,dependence,10,https://root.cern,https://github.com/root-project/root/pull/779,1,['depend'],['dependence']
Integrability,"Fixes the following warning with CMake 3.24:; ```; CMake Warning (dev) at /usr/share/cmake/Modules/ExternalProject.cmake:3071 (message):; The DOWNLOAD_EXTRACT_TIMESTAMP option was not given and policy CMP0135 is; not set. The policy's OLD behavior will be used. When using a URL; download, the timestamps of extracted files should preferably be that of; the time of extraction, otherwise code that depends on the extracted; contents might not be rebuilt if the URL changes. The OLD behavior; preserves the timestamps from the archive instead, but this is usually not; what you want. Update your project to the NEW behavior or specify the; DOWNLOAD_EXTRACT_TIMESTAMP option with a value of true to avoid this; robustness issue.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11231:127,message,message,127,https://root.cern,https://github.com/root-project/root/pull/11231,4,"['depend', 'message']","['depends', 'message']"
Integrability,"Follow-up on https://github.com/root-project/root/pull/7198 as promised in https://github.com/root-project/root/pull/7198#issuecomment-782401337. A new testRooParamHistFunc was introduced. The analytic integration of a; RooParamHistFunc is tested both for trivial and non-trivial parameters,; since the integration over subranges was problematic (as reported in; issue #7182).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7322:202,integrat,integration,202,https://root.cern,https://github.com/root-project/root/pull/7322,2,['integrat'],['integration']
Integrability,"Following a ""suggestion"" by @daritter ;-). Rationale: these days, not having `DISPLAY` set is likely intentional (unlike in say good old AIX days). So printing the message ""just because"" is unlikely to be helpful. If OTOH the GUI *is* requested, printing a helpful ""you probably want `ssh -Y`"" is nice - so let's do that (in non-batch), but in `TUnixSystem::SetDisplay()`, which is invoked by the graphics initialization hook. This gets rid of all the utmp code in `rootx.cxx`, near-duplicating the code of `TUnixSystem.cxx`. Yay.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3530:164,message,message,164,https://root.cern,https://github.com/root-project/root/pull/3530,1,['message'],['message']
Integrability,"For ACLiC, we have to generate "".out"" files which contains dependency; library name separated by "" "". This was done by creating; std::vector<(identifier from rootmap file), (library name)> and comparing this with decls from the input file.; However with modules, we want not to use rootmap files. Module's name; already contains information about library (modulename should be; consistent to the library) so we need not to store all information in; the vector anymore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2396:59,depend,dependency,59,https://root.cern,https://github.com/root-project/root/pull/2396,1,['depend'],['dependency']
Integrability,"For a long time, users had to increase their maximum stack size in order; to read RooFit workspaces. Otherwise, the process would simply end; without any message.; The problem is an 8kB stack buffer for the I/O of stl sets, which is; always declared but rarely used. Here, the buffer is replaced with a; heap buffer. This is an analysis of stack frames at -O2 in the moment of a crash:; ```; tot. size call count frame size; 5468960 665 8224 libRIO.so`TGenCollectionStreamer::ReadObjects(this nElements b; 566576 2083 272 libRIO.so`int TStreamerInfo::ReadBuffer<char**>(TBuffer&, char**; 307664 2747 112 libRIO.so`TBufferFile::ReadClassBuffer(this cl pointer; 133248 2082 64 libRIO.so`TStreamerInfoActions::GenericReadAction(buf addr config; 131856 2747 48 libRIO.so`TBufferFile::ApplySequence(this sequence obj; 74480 665 112 libRIO.so`TBufferFile::ReadObjectAny(this clCast at; 68064 1418 48 libCore.so`TStreamerBase::ReadBuffer(this b pointer; 42560 665 64 libRIO.so`TGenCollectionStreamer::ReadBufferGeneric(this b obj; 42560 665 64 libRIO.so`TBufferFile::ReadFastArray(this start cl; 31920 665 48 libRIO.so`int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*,; 21280 665 32 libRooFitCore.so`RooAbsArg::Streamer(this R__b at; 14592 152 96 libRooFitCore.so`RooRealVar::Streamer(this R__b at; 1056 22 48 libRooFitCore.so`RooHistFunc::Streamer(this R__b at; 720 15 48 libHistFactory.so`PiecewiseInterpolation::Streamer(this R__b at; ```. and after this fix:; ```; 54400	200	272	 200 libRIO.so`int TStreamerInfo::ReadBuffer<char**>(this b 	272; 29792	266	112	 266 libRIO.so`TBufferFile::ReadClassBuffer(this cl pointer 	112; 12864	201	64	 201 libRIO.so`TStreamerInfoActions::GenericReadAction(buf addr config 	64; 12768	266	48	 266 libRIO.so`TBufferFile::ApplySequence(this sequence obj 	48; 8320	65	128	 65 libRIO.so`TGenCollectionStreamer::ReadObjects(this nElements b 	128; 7280	65	112	 65 libRIO.so`TBufferFile::ReadObjectAny(this clCast at 	112; 6",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9470:154,message,message,154,https://root.cern,https://github.com/root-project/root/pull/9470,1,['message'],['message']
Integrability,"For better modularity in the future, the major end-user ROOT components; like RDataFrame, RooFit, and TMVA should not depend on each other. There was a dependency of RooFit on RDataFrame because of the; RooAbsDataHelper, but it is actually easy to avoid this with forward; declarations. This should have no impact on the user, because if they use RDF, they; probably include it already if they're not using the interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16606:118,depend,depend,118,https://root.cern,https://github.com/root-project/root/pull/16606,2,['depend'],"['depend', 'dependency']"
Integrability,"For now just add a test for the specific scenario, see description in the commit message. The test will likely fail on many platforms, for reference I leave a log with the RDataFrame verbosity turned up. [many_threads.log](https://github.com/root-project/root/files/15387003/many_threads.log). Look for the lines with `Jitting and executing the following code`, there will be (at least) one like; ```; Info in <[ROOT.RDF] Debug /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:329 in Long64_t ROOT::Internal::RDF::InterpreterCalc(const std::string &, const std::string &)>: Jitting and executing the following code:. Info in <[ROOT.RDF] Info /Users/vpadulan/Programs/rootproject/rootsrc/tree/dataframe/src/RLoopManager.cxx:917 in void ROOT::Detail::RDF::RLoopManager::Run(bool)>: Finished event loop number 0 (0s CPU, 0.000169039s elapsed).; ```. Note that after the line there is an empty space. This means that the thread is trying to JIT an empty string, which will trigger an exception, as it boils down to doing; ```; root [0] TInterpreter::EErrorCode errorCode(TInterpreter::kNoError);; root [1] gInterpreter->Calc("""", &errorCode);; root [2] errorCode; (TInterpreter::EErrorCode) (TInterpreter::kDangerous) : (unsigned int) 2; ```; And RDF throws always unless the return code is `kNoError`. **Note**: I will introduce the commit with the fix after a first round of failing tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15578:81,message,message,81,https://root.cern,https://github.com/root-project/root/pull/15578,1,['message'],['message']
Integrability,"For our users, it's important to fix certain parameters in the likelihood easily with any overhead. So far, this didn't work when using gradients from AD, because the gradients were only produced for the parameters that are floating at the time where the likelihood is created. However, it has no additional runtime overhead in backwards AD mode to simply generate the gradient for **all** parameters, and then filter out the right elements in the the RooMinimizer-related code. This is what is implemented in the second commit of this PR. Some changes in the RooAbsMinimizerFcn were necessary to do this filtering: so far it didn't store any information on all the parameters in order. It only stored two separate lists for floating and constant parameters. The first commit in this PR adds the necessary data members (`_allParams` and `_allParamsInit`) to the RooAbsMinimizerFcn for the filtering of parameters. Furthermore, the previous datamembers that stored the parameters separately are removed to avoid duplication and possible desync of information. On this occasion, the parameter management was completely rewritten to be more concise and robust. This will also help later when we integrate the discrete profiling from CMS combine, where changing the state and filtering of minimization parameters is also relevant. It was validated with the ATLAS and CMS likelihoods from ICHEP 2024 that this PR results in no performance regression, even though we are now generating the gradient for more parameters (roughly up to two times more, because for every floating nuisance parameter there is usually one constant global observable that constrains it).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16750:1192,integrat,integrate,1192,https://root.cern,https://github.com/root-project/root/pull/16750,1,['integrat'],['integrate']
Integrability,"For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected; * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr); * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5603:143,rout,routines,143,https://root.cern,https://github.com/root-project/root/pull/5603,1,['rout'],['routines']
Integrability,"For some algorithms like numeric integration, we want to enable PDF evaluation on the GPU with the RooFitDriver also for the case where the input arrays are already on the device and don't come from a `RooAbsData`. This is implemented in this PR, such that things like this are now possible:. ```c++; namespace CudaInterface = RooFit::Detail::CudaInterface;. // Define model; RooRealVar x{""x"", ""x"", 0, -10, 10};; RooRealVar mu{""mu"", ""mu"", 0, 0, 10};; RooRealVar sigma{""sigma"", ""sigma"", 3, 0.1, 10};. RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};. std::size_t numBins = 20;; x.setBins(numBins);. RooArgSet normSet{x};. // Create array of observable values; std::vector<double> xValsHost;; for (std::size_t i = 0; i < numBins; ++i) {; x.setBin(i);; xValsHost.push_back(x.getVal());; }. // Copy observable values to the array; CudaInterface::DeviceArray<double> xValsDevice{numBins};; CudaInterface::copyHostToDevice(xValsHost.data(), xValsDevice.data(), numBins);. // Compile pdf for evaluation with RooFitDriver; std::unique_ptr<RooAbsReal> gaussCompiled{RooFit::Detail::compileForNormSet(gauss, normSet)};. // Instantiate RooFitDriver and set device input array; ROOT::Experimental::RooFitDriver driver{*gaussCompiled, RooFit::BatchModeOption::Cuda};; driver.setInput(""x"", {xValsDevice.data(), numBins}, /*isOnDevice=*/ true);. // Evaluate; std::span<const double> deviceOut = driver.run();. // Copy back to host and pring results; std::vector<double> hostOut(deviceOut.size());; CudaInterface::copyDeviceToHost(deviceOut.data(), hostOut.data(), numBins);; for (int i = 0; i < numBins; ++i) {; std::cout << xValsHost[i] << "" "" << hostOut[i] << std::endl;; }; ```. The `RooFitDriver.h` interface is also significantly reduced to not include anything that strictly has to do something with the evaluation. This makes the interface less confusing, which is important because I want to make this class public to the users in the next PR. The evaluation of PDFs with the RooFitDriver also on the GPU i",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13389:33,integrat,integration,33,https://root.cern,https://github.com/root-project/root/pull/13389,1,['integrat'],['integration']
Integrability,"For some reason root-config calls on macOS 10.13.2 are extremely slow (not sure if this is related to the meltdown / spectre mitigations). ```bash; [O2/latest] ~/work/active/sw/BUILD/ROOT-latest/ROOT %> time root-config --version; 6.13/01; root-config --version 0.24s user 1.06s system 131% cpu 0.989 total; ```. which than means that whatever dependent project using `FindROOT.cmake` is slowed down quite a lot when trying to do incremental builds. This is because of the multiple `root-config` invocations in such a macro, which are also not cached so they get done on any `make` invocation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1569:344,depend,dependent,344,https://root.cern,https://github.com/root-project/root/pull/1569,1,['depend'],['dependent']
Integrability,"For the minimization, the RooMinimizer sets the error logging mode; temporarily to `CollectErrors`, which collects all error messages in; strings. This results in a HUGE overhead, which is completely; unnecessary if evaluation error printing is disabled. In that case, the; error evaluation mode should be set to counting only, which is what this; commit implements. This speeds up fits with frequent evaluation errors a lot, for example; the `testNaNPacker` tests are sped up by 25x.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12328:125,message,messages,125,https://root.cern,https://github.com/root-project/root/pull/12328,1,['message'],['messages']
Integrability,"For the new RooFit BatchMode, the model pdf had to be ""compiled"" for a; fixed normalization set before being evaluated by the RooFit driver. This step was implemented in a rather hacky way, because it only became; clear gradually how important this step is, as many changes need to be; done to the computation graph before it can be used by the BatchMode. It started by ""unrolling"" the normalization integrals such that they are; separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new; object that exposes the full intenal computation graph that is cached by; the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute; graph, and there was also a third pass to figure out dependencies and; normalization sets in the graph, and some more recursive passes the; attach new servers. This all became very compilcated and hard to debug, as the separate; passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general; way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the; newly-proposed function; `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set; is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing; the RooProdPdfs can be implemented in the overload for this function of; the specific class. There is even an overload for the RooSimultaneous; now, which contains all the logic of making the RooSimultaenous ready; for the NLL creation. There are still some rough edges in the new interface, but it is already; a big step forward that will make debugging much easier because it's now; much less compilcated to understand how the computation graph is set up; by the BatchMode. Also, this m",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12079:795,depend,dependencies,795,https://root.cern,https://github.com/root-project/root/pull/12079,1,['depend'],['dependencies']
Integrability,"For the pyROOT interface, we wanted to support that the user can pass a; Python set whenever the interface expects a RooArgSet. This is achieved by pythonizing the `__init__` function of the RooArgSet Python mirror class. This PR also includes a complete migration of all RooFit tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8751:15,interface,interface,15,https://root.cern,https://github.com/root-project/root/pull/8751,2,['interface'],['interface']
Integrability,"From @henryiii :. > ROOT can't pass homebrew's audit any more because it is now injecting `-flat_namespace`. Flat namespaces have been deprecated since the move to Intel. I believe this was done due to `-undefined dynamic_lookup` producing a warning - Apple plans to add something to replace this in the future, but it's not the old `-flat_namespace`. See [Homebrew/homebrew-core#114543 (comment)](https://github.com/Homebrew/homebrew-core/pull/114543#issuecomment-1330719444); > Flat namespace makes major changes to the layout, is more deprecated than dynamic_lookup, and isn't supposed to even work in conda-forge. See also https://github.com/pybind/pybind11/pull/4301 .; > `-undefined dynamic_lookup` does silence the linker on missing symbols, that's what it's for. The problem is that the method it uses is deprecated, producing a warning (and already broken in iOS) `-flat_namespace` doesn't just silence the linker, it changes the binary layout for every symbol. You could always just silence the warning `-Wl,-w` or `-Wl,-no_fixup_chains`; this will eventually break, but is less deprecated than `-flat_namespace`.; > Apple's official statement is basically ""live with the warning for now, we'll find a way to not break all CPython extensions eventually"" from what I gather.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11937:80,inject,injecting,80,https://root.cern,https://github.com/root-project/root/issues/11937,1,['inject'],['injecting']
Integrability,"From this simple reproducer:. ```cpp; #include <TCanvas.h>; #include <TFile.h>; #include <TTree.h>. #include <ROOT/RDataFrame.hxx>; #include <iostream>; #include <string>; #include <vector>. void generateData(const char *filename, int n, double value); {; TFile f{filename, ""RECREATE"", ""file for testing""};. double var1;. TTree tree{""AnalysisTree"", ""AnalysisTree""};; tree.Branch(""column1"", &var1, ""column1/D"");. for (unsigned int i = 0; i < n; i++) {; var1 = value;; tree.Fill();; }. tree.Write();; f.Write();; f.Close();; }. int main(); {; std::vector<std::string> fileNames{""test1.root"", ""test2.root""};; std::vector<double> weights{2, 0.5};. // Create two files with trees for testing; // 10 entries of 0.5; generateData(""test1.root"", 10, 0.5);; // 10 entries of 2; generateData(""test2.root"", 10, 2);. // Create Dataframe from files; ROOT::RDataFrame df(""AnalysisTree"", fileNames);. // Define weights depending on input file; auto df2 =; df.DefinePerSample(""weightbysample"", [&fileNames, &weights](unsigned int, const ROOT::RDF::RSampleInfo &id) {; for (unsigned int i = 0; i < fileNames.size(); i++); if (id.Contains(fileNames[i])); return weights[i];; return -1.;; });. auto s0 = df2.Sum<double>(""weightbysample"");; auto d0 = df2.Display({""weightbysample""}, 20);; std::cout << ""sum of weights: "" << *s0 << ""\n"";; d0->Print();. auto s1 = df2.Sum<double>(""weightbysample"");; auto d1 = df2.Display({""weightbysample""}, 20);; std::cout << ""sum of weights: "" << *s1 << ""\n"";; d1->Print();. }; ```. The `DefinePerSample` operation defines a column of 20 entries, 10 should have value `2`, the following 10 should have value `0.5`. The first set of `Sum` and `Display` operations show the correct behaviour, then the second set of operations reports a wrong result. All the 20 entries of the column are `0.5`:. ```; sum of weights: 25; +-----+----------------+; | Row | weightbysample | ; +-----+----------------+; | 0 | 2.0000000 | ; +-----+----------------+; | 1 | 2.0000000 | ; +-----+----------------+",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12043:903,depend,depending,903,https://root.cern,https://github.com/root-project/root/issues/12043,1,['depend'],['depending']
Integrability,"Fully exclude source directory from include paths - for dictionary generation and for objects compilation. Significantly reduce list of dirs in CXX flags.; Makes dependency files very clear - `${CMAKE_BINARY_DIR}/include` used in 99%, rest are special includes from `res/` subfolders.; Tested with and without cxx modules",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5170:162,depend,dependency,162,https://root.cern,https://github.com/root-project/root/pull/5170,1,['depend'],['dependency']
Integrability,"Fwd decls from rootmap files were injected to ROOT at the startup time.; However with modules we don't need any foward decls as we're preloading; all modules. Our future plan is to remove rootmap files as a whole, but we still need; to support more features (see 2380). So for now we can remove what we; are not using. *edit This patch also contains adding fHasCxxModule as a private member. This improves startup memory by 10 mbytes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2592:34,inject,injected,34,https://root.cern,https://github.com/root-project/root/pull/2592,1,['inject'],['injected']
Integrability,"GNU ld has a way to control the symbol versions by 'fixing' the library; appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which; are supposed to be resolved either in libc or glibc which are system; libraries. Our symbol dependency chain builder does not look into system; libraries for performance (and legacy reasons). Thus the undefined symbols; from the C/C++ runtime cause us to scan every time all non-system libraries; when we know what would be the outcome. More information can be found in the binutils documentation:; https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4112:266,depend,dependency,266,https://root.cern,https://github.com/root-project/root/pull/4112,2,['depend'],['dependency']
Integrability,GenerateDict dependency fixes; split G__Core,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3371:13,depend,dependency,13,https://root.cern,https://github.com/root-project/root/pull/3371,1,['depend'],['dependency']
Integrability,"Get rid of the remaining memory leaks, avoid code duplication for simultaneous binned fit test, etc. There is also an additional commit that continues the campaign of making the `roofitcore` tests depend less on `roofit`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11793:197,depend,depend,197,https://root.cern,https://github.com/root-project/root/pull/11793,1,['depend'],['depend']
Integrability,GetColumn method of the interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1071:24,interface,interface,24,https://root.cern,https://github.com/root-project/root/pull/1071,1,['interface'],['interface']
Integrability,"GetTreeFullPaths assumed that the first occurrence of "":/"" was; the separator between filename and tree name in strings such as; ""file.root:/dir/tree"". However, the separator is the _last_; occurrence of "":/"" -- e.g. if the file is read via a remote; protocol, its name starts with ""protocol://"". This logic is of course still broken in case the name of the tree; or the one of the directory that contains it contains "":/"", we; do not support that case. This fixes #10216.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10217:251,protocol,protocol,251,https://root.cern,https://github.com/root-project/root/pull/10217,4,['protocol'],['protocol']
Integrability,"GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--. -->; segfault in build process. ; ### Expected behavior; <!--; -->; build process completes. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; standard cmake build process, as described in the guide. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; ROOT v6-26-10 (@4dddea35); FreeBSD 13.2 RELEASE (clang 14.0.5), required dependencies installed from ports. ### Additional context; <!--; Add any other context about the problem here.; -->. a port exists v6-28-02 (development/root), installs in binary form (so somebody got it to compile, did not have too much time to test it thoroughly). In my case, however, the port also does not compile, craps out somewhere else. plus it hauls in too many dependencies so it is less than ideal.; I imagine getting it to work on FreeBSD would not end at fixing this issue here. The fbsd port maintainer has some patches which might help, but I have also seen that e.g. procfs is deprecated in new releases and libprocstat has to be used, etc, etc.; With that being said, it would be extremely nice to get ROOT to work on FreeBSD...; thanks,. ```; [ 52%] Built target rootcling_stage1; [ 52%] Generating G__Core.cxx, ../lib/Core.pcm; #0 0x000000000446e3d5 llvm::sys::PrintStackTrace(llvm::raw_ostream&) Signals.cpp:0:0; #1 0x000000000446c646 llvm::sys::RunSignalHandlers() Signals.cpp:0:0; #2 0x00",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12787:1048,depend,dependencies,1048,https://root.cern,https://github.com/root-project/root/issues/12787,1,['depend'],['dependencies']
Integrability,"Given two consecutive identifiers, the first token is necessarily a type name, e.g. in `foo bar`, `foo` is a type. This pull-request disables runtime resolution for this case. Previously, the lookup was returning a VarDecl of type `DependentTy` regardless of the identifier being probably a mistyped type. This caused clang to start parsing an expression, which ended up in misleading diagnostic messages. More details here: https://sft.its.cern.ch/jira/browse/ROOT-5268. Sibling PR in roottest: https://github.com/root-project/roottest/pull/786. ## Changes or fixes:; - Disable runtime resolution for identifiers that are followed by an identifier token. ## Checklist:; - [X] tested changes locally. This PR fixes JIRA issue ROOT-5268.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9160:232,Depend,DependentTy,232,https://root.cern,https://github.com/root-project/root/pull/9160,2,"['Depend', 'message']","['DependentTy', 'messages']"
Integrability,"Given. ```python; import ROOT. df = ROOT.RDataFrame(""Events"", ""root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root""); ```. I see that `TROOT::EndOfProcessCleanups()` is called twice, once before the `RDataFrame` destructor, once after, with these callstacks:. ```; #0 TROOT::EndOfProcessCleanups (this=0x7ffff6e43ee0 <ROOT::Internal::GetROOT1()::alloc>) at ../core/base/src/TROOT.cxx:1206; #1 0x00007ffff7e7758a in WrapperCall (method=93825045955840, nargs=0, args_=0x7fffffffdc30, self=0x7ffff6e43ee0 <ROOT::Internal::GetROOT1()::alloc>, result=0x0) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778; #2 0x00007ffff7e778bc in Cppyy::CallV (method=93825045955840, self=0x7ffff6e43ee0 <ROOT::Internal::GetROOT1()::alloc>, nargs=0, args=0x7fffffffdc30) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:829; #3 0x00007ffff707536a in GILCallV (method=93825045955840, self=0x7ffff6e43ee0 <ROOT::Internal::GetROOT1()::alloc>, ctxt=0x7fffffffdc10) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:68; #4 0x00007ffff7077a1b in CPyCppyy::(anonymous namespace)::VoidExecutor::Execute (this=0x7ffff70fd980 <(anonymous namespace)::InitExecFactories_t::InitExecFactories_t()::{lambda()#41}::operator()() const::e>, method=93825045955840, self=0x7ffff6e43ee0 <ROOT::Internal::GetROOT1()::alloc>, ctxt=0x7fffffffdc10) at ../bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:410; #5 0x00007ffff7058a76 in CPyCppyy::CPPMethod::ExecuteFast (this=0x555558890a70, self=0x7ffff6e43ee0 <ROOT::Internal::GetROOT1()::alloc>, offset=0, ctxt=0x7fffffffdc10) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74; #6 0x00007ffff7059020 in CPyCppyy::CPPMethod::ExecuteProtected (this=0x555558890a70, self=0x7ffff6e43ee0 <ROOT::Internal::GetROOT1()::alloc>, offset=0, ctxt=0x7fffffffdc10) at ../bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149; #7 0x00007ffff70582a9 in CPyCppyy::CPPMethod::Execu",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10743:479,Wrap,WrapperCall,479,https://root.cern,https://github.com/root-project/root/issues/10743,1,['Wrap'],['WrapperCall']
Integrability,"Given; ```cpp; // tree_with_pair.cpp; void tree_with_pair() {; TTree t(""t"", ""t"");; auto x = std::make_pair(42, 84);; //t.Branch(""topbranch"", &x, ""a/I:b/I""); t.Branch(""topbranch"", &x);; t.Fill();; t.Scan();; }; ```. , without this patch the output is:. ```; Error in <HandleInterpreterException>: Trying to dereference null pointer or trying to call routine taking non-null arguments; Execution of your code was aborted.; In module 'Core':; /home/blue/ROOT/dev/cmake-build-foo/include/TClass.h:635:38: warning: null passed to a callee that requires a non-null argument [-Wnonnull]; size_t hint_offset = ((char*)&(p->second)) - (char*)p;; ^; ```. with this patch:. ```; Processing tree_with_pair.cpp...; ************************************; * Row * topbranch * topbranch *; ************************************; * 0 * 42 * 84 *; ************************************; ```. This fixes #11215 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11227:349,rout,routine,349,https://root.cern,https://github.com/root-project/root/pull/11227,1,['rout'],['routine']
Integrability,Gradient interfaces templated. Chi2 gradient parallelized and vectorized.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/793:9,interface,interfaces,9,https://root.cern,https://github.com/root-project/root/pull/793,1,['interface'],['interfaces']
Integrability,Hadd improve help message and Doxygen documentation,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12844:18,message,message,18,https://root.cern,https://github.com/root-project/root/pull/12844,1,['message'],['message']
Integrability,"Handle unknown feature and/or option, addressing the issue #7662 on Windows. Gives something like:; ```; C:\Users\sftnight>root-config --flags; --flags: Unknown option or argument!. Usage: root-config [options]. --arch Print the architecture (compiler/OS); --platform Print the platform (OS); --libs Print regular ROOT libraries; --glibs Print regular + GUI ROOT libraries; --evelibs Print regular + GUI + Eve libraries; --cflags Print compiler flags and header path; --bindir Print the executable directory; --libdir Print the library directory; --incdir Print the header directory; --etcdir Print the configuration directory; --tutdir Print the tutorials directory; --srcdir Print the top of the original source directory; --auxlibs Print auxiliary libraries; --config Print arguments used for configuration with CMake; --features Print list of all supported features; --has-<feature> Test if <feature> is compiled in; --version Print the ROOT version; --git-revision Print the ROOT git revision number; --python-version Print the Python version used by ROOT; --python2-version Print the Python2 version used by PyROOT; --python3-version Print the Python3 version used by PyROOT; --ncpu Print number of available (hyperthreaded) cores; --cc Print alternative C compiler specified when ROOT was built; --cxx Print alternative C++ compiler specified when ROOT was built; --f77 Print alternative Fortran compiler specified when ROOT was built; --ld Print alternative Linker specified when ROOT was built; --help Print this message. C:\Users\sftnight>root-config --has-feet; --has-feet: unknown feature!. C:\Users\sftnight>root-config --has-feet --has-pyroot; --has-feet: unknown feature! yes; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7663:1522,message,message,1522,https://root.cern,https://github.com/root-project/root/pull/7663,1,['message'],['message']
Integrability,"Hello!. ROOT-R is now supported with JupyROOT, the problem was a message from ; R ""error c stack usage is too close to the limit"".; It was fixed using module resource from python to set unlimited stack size in multithread execution,; anyway the stack in OS will be the limit. ""see ulimit -s"" for Gnu/Linux. Best.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/139:65,message,message,65,https://root.cern,https://github.com/root-project/root/pull/139,1,['message'],['message']
Integrability,"Hello,. The `TCollection.h` header file cannot be included at the same time as the standard `span` header file. This bug impacts all the headers that include `TCollection.h` including `TCanvas.h`. Here is a minimal example to reproduce the bug when compiled with GCC 12.2.0 in C++20, with ROOT 6.26.06:. ```cpp; #include <span>; #include <TCollection.h>; ```. and here is the output:. ```; Consolidate compiler generated dependencies of target main; [ 50%] Building CXX object CMakeFiles/main.dir/main.cpp.o; In file included from /usr/include/TCollection.h:33,; from /tmp/scratchpad/main.cpp:2:; /usr/include/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid; 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]); | ^~; /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:; /usr/include/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous; 188 | return std::span<U>(arr, arr + N);; | ^~~~; In file included from /usr/include/ROOT/RSpan.hxx:33,; from /usr/include/ROOT/RRangeCast.hxx:17:; /usr/include/ROOT/span.hxx:155:7: note: candidates are: ‘template<class T> class std::__ROOT::span’; 155 | class span {; | ^~~~; In file included from /tmp/scratchpad/main.cpp:1:; /usr/include/c++/12.2.0/span:56:11: note: ‘template<class _Type, long unsigned int _Extent> class std::span’; 56 | class span;; | ^~~~; /usr/include/ROOT/RRangeCast.hxx:188:22: error: expected primary-expression before ‘>’ token; 188 | return std::span<U>(arr, arr + N);; | ^; /usr/include/ROOT/RRangeCast.hxx: At global scope:; /usr/include/ROOT/RRangeCast.hxx:225:32: error: template argument 3 is invalid; 225 | RRangeCast<T, true, std::span<U>> RangeDynCast(U (&arr)[N]); | ^~; /usr/include/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeDynCast(U (&)[N])’:; /usr/include/ROOT/RRangeCast.hxx:227:16: error: reference to ‘span’ is ambiguous; 227 | return std::span<U>(arr, arr + N);; | ^~~~; /usr/include/ROOT/span.hxx:155:7: note: candidates are",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11587:421,depend,dependencies,421,https://root.cern,https://github.com/root-project/root/issues/11587,1,['depend'],['dependencies']
Integrability,"Hello,. This is a follow-up to the [discussion on the Forum](https://root-forum.cern.ch/t/is-there-a-wrapper-for-trandom-derivatives-to-provide-the-std-uniformrandombitgenerator-interface/43842). I realised that what I labelled myself as the solution indeed answers to the original problem, but does not solve my actual problem: I have an object of `TRandom`-derived class shared among several other objects and in one place I would like to wrap this object in the std `UniformRandomBitGenerator` interface or preferably use it directly. This cannot be done with `TMVA::RandomGenerator` because it holds its own instance of TRandom-like. So maybe ROOT devs could consider adding the required typedef, 2 static methods and the `operator()` returning `UInt` directly to the base class (`TRandom` or `ROOT::Math::TRandomEngine`) to make it std library compatible out of the box?. Cheers,; Antoni",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7979:101,wrap,wrapper-for-trandom-derivatives-to-provide-the-std-uniformrandombitgenerator-interface,101,https://root.cern,https://github.com/root-project/root/issues/7979,3,"['interface', 'wrap']","['interface', 'wrap', 'wrapper-for-trandom-derivatives-to-provide-the-std-uniformrandombitgenerator-interface']"
Integrability,"Hello. I noticed a weird feature in root 6.24.00, when trying to fit a model using a RooSimultaneous pdf. . Am I doing something forbidden in root 6.24.00 ?. Best,. Jean-Baptiste. ### Describe the bug; I have a model with a single category, describing the shape of a distribution, with three unconstrained nuisance parameters, one constrained nuisance parameter and one parameter of interest. The three unconstrained NP describe the shape of the background and the background yield. The poi is proportional to the signal yield. The dataset is a background only dataset. . I can do the fit with as pdf : model_had1A = RooProdPdf (fsb_had1A, constbias_had1A) where; fsb = ns x fs + nb x fb, fs and fb are signal and background pdf, ns contains the poi, nb is free floating. It runs; smoothly even if we are close to the unphysical region (poi < 0). (Probably many error messages from the exploration of the unphysical region have been removed from the output.); I can also try a fit with the pdf : simPdf = RooSimultaneous (indexCat=had1A, had1A=model_had1A) : this is virtually the same pdf, but this time embeded in a RooSimultaneous object. The fit fails. Between the two root versions, one things that appeared weird to me is that fsb_had1A does not seem to be; normalized when embeded in the RooSimultaneous in root 6.24.00. Maybe that is fine, but this is different from; what I see in root 6.22.02. ### Expected behavior; I would expect exactly the same results in both fits, with a best fit poi = 0 and a reasonable uncertainty.; This is what I see in root-6.22.02. In root 6.24.00 the fit with a RooSimultaneous fails. . ### To Reproduce; I put the code here /afs/cern.ch/user/j/jdevivi/public/ISSUEROOFIT. In root-6.24.00, I just do ; root.exe testWSsimulvsprod.C. In root-6.22.02, I do; root.exe load.C testWSsimulvsprod.C; since I use a RooCrystalBall from root-6.24 and did not put the code in the workspace. Log files can be found in the same directory. ### Setup; ROOT version : 6.24.00; ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8307:868,message,messages,868,https://root.cern,https://github.com/root-project/root/issues/8307,1,['message'],['messages']
Integrability,"Here is a suggestion for a class to input and output JSON data. It is _not_ meant for (`T`)object serialisation (there's `TBufferJSON` for that) - but for use cases where one wants to import or export JSON data into ROOT-based code. Examples could be . - Input and output of HEPData data. For example, one may want to read in some table via JSON and visualize, or one has produced a result one wants to upload to HEPData ; - Interoperability with Python. Python has support for many data format - not least JSON. . The attached class `TJSON` allows for this in a relatively straight forward manner. For example, one can do . ```c++; TJSON null;; TJSON b(true);; TJSON s(""RawString"");; TJSON s2(std::string(""C++String""));; TJSON i(42);; TJSON f(3.14);; TJSON a = TJSON::Array();; TJSON o = TJSON::Object();; ```; for null, boolean, string, numbers (int and float), arrays or objects (associative container). . A more complex object can be created like . ```c++ ; TJSON o2 = std::map<std::string,TJSON>{; {""key1"",""value""},; {""key2"",true},; {""key3"",; {""key4"", TJSON::Array(""This"",""is"",""an"",""array""),; ""key5"",; {""boolean"", true}; }; }; };; ```. and elements are accessed via `operator[]` . ```c++; assert o2[""key1""] == ""value"";; assert o2[""key3""][""key4""][1] == ""is""; ```. One can loop over arrays or objects via `TJSON::ArrayRange` or `TJSON::ObjectRange` respectively. . ```c++; TJSON a = TJSON::Array();; TJSON o = TJSON::Object();. for (size_t i = 0; i < 4; i++); a[i] = ""Test""+std::to_string(i);. o[""key0""] = ""value1"";; o[""key1""] = a;; o[""key2""] = 123;. std::cout << ""Array: "" << std::endl;; for (auto& e : a.ArrayRange()); std::cout << e << std::endl;. std::cout << ""Object: "" << std::endl;; for (auto& kv : o.ObjectRange()); std::cout << ""o["" << kv.first << ""] = "" << kv.second << std::endl;; ```. JSON can be read and written to streams . ```c++; std::cout << ""=== Loading ==="" << std::endl;; std::string s(""{\""key1\"":\""string\"",""; 		"" \""key2\"": true,""; 		"" \""key3\"": 1234,""; 		"" \""key4\"":null}"");.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6889:425,Interoperab,Interoperability,425,https://root.cern,https://github.com/root-project/root/issues/6889,1,['Interoperab'],['Interoperability']
Integrability,"Hi @Axel-Naumann,. This is not really a pull request but I thought it might be a good way to get feedback from you guys and maybe some help improving it. This is not meant for merging, we are fine with an out of tree patch for now, but we would of course be very happy if something like this becomes upstream eventually. This is a very ""hacky"" try to be able to create ROOT files with; deterministic checksum that is not dependent on timestamp or hostname or; anything: Create a file with the same content twice on different; machines should yield the same checksum (assuming they have the same root file format version and same class definitions ...). We cannot really modify the software using these checksums and it's not just ROOT files but also other files in there so a distinction between ""content checksum"" and ""file checksum"" would be rather tricky. That's why we went for the brutal approach. We need this mostly for small files in a well controlled environment:; The file is created in one place at one time and not incrementally over; a long time, no threads. . So we would be fine with a global flag to not store time dependent information in files but it is of course ugly. A slightly less horrific version might be to have a `TDeterministicFile` which behaves like `TFile` with the only difference that it has a zeros for dates/uuids but I don't know the classes well enough to judge if that is feasible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4083:421,depend,dependent,421,https://root.cern,https://github.com/root-project/root/pull/4083,2,['depend'],['dependent']
Integrability,"Hi @guitargeek , this pull request add the tutorials for the lagrangian morphing class and also; add an example for the factory interface. The are some accompanying fixes as listed below.; Please take a look and let me know if this looks good !. ## This Pull request:. - Add two tutorials `rf711_lagrangianmorph` and `rf712_lagrangianmorphfit` to demonstrate ; the usage of the `RooLagrangianMorphFunc` class; - The PR also includes an update to `rf512_wsfactory_oper` showing an example for the new; options of `taylorexpand` and `lagrangianmorph`; ; ## Changes or fixes:; - formatting of `tutorials/roofit/rf710_roopoly.py`; - The attribute for new physics couplings in the `RooLagrangianMorphFunc` class is changed ; from `NP` to `NewPhysics` to avoid confusion with other abbreviations; - The `lagrangianmorph` factory interface is update to accept arguments in any order. ## Checklist:. - [ ] tested changes locally. Cheers,; Rahul",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9665:128,interface,interface,128,https://root.cern,https://github.com/root-project/root/pull/9665,2,['interface'],['interface']
Integrability,"Hi Axel and Lorenzo,. I take the code and I put it in one commit to let review it easy.; In resume the changes are ; -> Now you can use R functions in C++ very easy using the class TRFunctionImport, that have overloaded operators to use objects like functions that receives template arguments and return TRObjects.; -> Documentation updated in http://oproject.org/tiki-index.php?page=ROOT+R+Users+Guide#Import; -> added documentation in doxygen; -> new propieties for TRDataFrame with operators. You can see the output of documentation in; http://files.oproject.org/root/rootdoc/html/group___r.html; users guide in markdown integrate to doxygen ; http://files.oproject.org/root/rootdoc/html/md__home_omazapa_root_bindings_r_doc_users-guide__r_o_o_t_r__users__guide.html. I have the code now in http://github.com/oprojects/root. Best Regards; O.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/83:624,integrat,integrate,624,https://root.cern,https://github.com/root-project/root/pull/83,1,['integrat'],['integrate']
Integrability,"Hi Guys,. * Added support to check if R interface is running in the thread of event loop, to avoid segfault in scientific linux running tests.; * Fixed some datatypes according to coding conventions. Cheers,; Omar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/446:40,interface,interface,40,https://root.cern,https://github.com/root-project/root/pull/446,1,['interface'],['interface']
Integrability,"Hi Guys,. According to the new design of TMVA the interfaces TMVAGui, TMVAMultiClassGui and TMVARegGui needs an update to support the new format that is stored the results.; In this pull requests I have the code to updated TMVAGui to do visualization of two class classification.; lets see http://oproject.org/tiki-index.php?page=TMVA#TMVAGuis. I will continue working to updated TMVAMultiClassGui and TMVARegGui.; NOTE: all requirements accorded in the meeting was implemented. Best Regards. Omar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/143:50,interface,interfaces,50,https://root.cern,https://github.com/root-project/root/pull/143,1,['interface'],['interfaces']
Integrability,"Hi `root-project/root`!. This is a one-off automatically generated pull request from LGTM.com :robot:. You might have heard that we’ve integrated LGTM’s underlying CodeQL analysis engine natively into GitHub. The result is [**GitHub code scanning**](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)!. With LGTM fully integrated into code scanning, we are focused on improving CodeQL within the native GitHub code scanning experience. In order to take advantage of current and future improvements to our analysis capabilities, we suggest you enable code scanning on your repository. Please take a look at our [blog post for more information](https://github.blog/2022-08-15-the-next-step-for-lgtm-com-github-code-scanning/). This pull request enables code scanning by adding an auto-generated [`codeql.yml` workflow file for GitHub Actions](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/setting-up-code-scanning-for-a-repository#setting-up-code-scanning-manually) to your repository — take a look! We tested it before opening this pull request, so all should be working :heavy_check_mark:. In fact, you might already have seen some alerts appear on this pull request!. Where needed and if possible, we’ve adjusted the configuration to the needs of your particular repository. But of course, you should feel free to tweak it further! Check [this page](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#editing-a-code-scanning-workflow) for detailed documentation. Questions? Check out the FAQ below!. ### FAQ; <details>; <summary>Click here to expand the FAQ section</summary>. #### How often will the code scanning analysis run?; By default, code scanning will trigger a scan with the CodeQL engine on the following events:; * On every pull req",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11808:135,integrat,integrated,135,https://root.cern,https://github.com/root-project/root/pull/11808,2,['integrat'],['integrated']
Integrability,"Hi everyone!. I am a GSoC student working on introducing Recurrent Neural Networks in TMVA. This is the first part of commits which introduces the `RNNLayer` class as well as `RecurrentNet` wrapper along with their respective methods (Forward, Backward etc). I will soon add tests for different functions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/685:190,wrap,wrapper,190,https://root.cern,https://github.com/root-project/root/pull/685,2,['wrap'],['wrapper']
Integrability,"Hi please check here:; https://root-forum.cern.ch/t/6-24-00-does-not-complile-on-redhat-8-3/45161. details:. Hello,; I’m running into problems compiling root 6.24.00:. $ cmake -Dclad=OFF -DCMAKE_INSTALL_PREFIX=…/root_install …/root-6.24.00; $ cmake --build . – install -j8. …; [ 76%] Linking CXX static library …/…/…/…/lib/libclingInterpreter.a; [ 76%] Built target clingInterpreter; Scanning dependencies of target CLING; [ 76%] Built target CLING; Scanning dependencies of target LLVMRES; [ 76%] Copying LLVM resource and header files; [ 76%] Built target LLVMRES; (stucks…). $ cmake --build . --install; [ 0%] Built target AFTERIMAGE; [ 0%] Built target OPENUI5; [ 0%] Built target LZMA; [ 0%] Performing download step (download, verify and extract) for ‘VDT’; (stucks). seems that vdt uses network access, which I do not have (not mentioned in the docs).; I think I do not need it anyhow…. so again:; $ rm -rf *; $ cmake -Dclad=OFF -Dvdt=OFF -DCMAKE_INSTALL_PREFIX=…/root_install …/root-6.24.00; $ cmake --build . --install; …; [ 79%] Generating G__Thread.cxx, …/…/lib/Thread.pcm; [ 79%] Generating G__forward_listDict.cxx, …/…/lib/libforward_listDict.rootmap; [ 79%] Generating G__vectorDict.cxx, …/…/lib/libvectorDict.rootmap; In file included from input_line_7:21:; /srv/ussapc/home/ussapc/sw/root_build/include/ROOT/TReentrantRWLock.hxx:26:10: fatal error: ‘tbb/enumerable_thread_specific.h’ file not found; #include “tbb/enumerable_thread_specific.h”; ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; Error: /srv/ussapc/home/ussapc/sw/root_build/core/rootcling_stage1/src/rootcling_stage1: compilation failure (/srv/ussapc/home/ussapc/sw/root_build/lib/libThreaddb2bde6cdd_dictUmbrella.h); gmake[2]: *** [core/thread/CMakeFiles/G__Thread.dir/build.make:109: core/thread/G__Thread.cxx] Error 1; gmake[1]: *** [CMakeFiles/Makefile2:27339: core/thread/CMakeFiles/G__Thread.dir/all] Error 2; gmake[1]: *** Waiting for unfinished jobs…. I found out that tbb is required by imt, so again; $ rm -rf *; $ cmake -D",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8292:393,depend,dependencies,393,https://root.cern,https://github.com/root-project/root/issues/8292,2,['depend'],['dependencies']
Integrability,"Hi, . A regression was introduced in TMutiGraph with a log scale; I found a commit that seems to be linked to my problem [https://github.com/osschar/root/commit/d087f000322c7958f02c8e9ddce2a302502c8604](https://github.com/osschar/root/commit/d087f000322c7958f02c8e9ddce2a302502c8604). my OS is debian10 x86_64 with gcc8.3. here is sample script to reproduce the bug :. ```; void multigraph(); {; auto c1 = new TCanvas(""c1"",""multigraph"",700,500);; c1->SetGrid();; c1->SetLogx();; c1->SetLogy();; auto *mg = new TMultiGraph();; std::vector<double> x1;; std::vector<double> sig1;; std::vector<double> sig2;; for (double E=1e-4;E<2e7;E*=1.1); {; 		x1.push_back(E);; 		sig1.push_back(10*pow(E,-0.1));; 		sig2.push_back(15*pow(E,-0.15));; 		}; auto g1 = new TGraph(x1.size(), x1.data(), sig1.data());; mg->Add(g1);; auto g2 = new TGraph(x1.size(), x1.data(), sig2.data());; mg->Add(g2);; mg->SetTitle(""; E (eV);#sigma (b)"");; mg->GetXaxis()->CenterTitle(true);; mg->GetYaxis()->CenterTitle(true);; mg->Draw(""AL"");; c1->SaveAs(""multigraph.pdf"");; }; ```. It works fine on versions 6.14.08, 6.18.04 and 6.20.06; TMultiGraph scale is wrong with versions 6.22.08, 6.24.06.; There is also an error message at the console (negative value for log scale). ```; Processing multigraph.C...; Error in <THistPainter::PaintInit>: log scale requested with a negative argument (-1.720339); Info in <TCanvas::Print>: pdf file multigraph.pdf has been created; ```. I remove the patch [https://github.com/osschar/root/commit/d087f000322c7958f02c8e9ddce2a302502c8604](https://github.com/osschar/root/commit/d087f000322c7958f02c8e9ddce2a302502c8604) on version 6.24.06 and it works again. thanks in advance",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9011:1187,message,message,1187,https://root.cern,https://github.com/root-project/root/issues/9011,1,['message'],['message']
Integrability,"Hi, I am one of the iminuit developers (https://github.com/iminuit/iminuit). We are glad that Minuit2 is still usable as a package separate from ROOT and thank the ROOT developers for that. It makes our life much easier. The iminuit package is build by copying the Minuit2 code in ROOT and building a Cython wrapper around it. Because we compile and use the Minuit2 code outside of the ROOT build environment, we found and fixed some bugs, which we would like to merge upstream in ROOT as well. Each of the two commits in this PR fixes one issue. The first is rather trivial, `MnPrint` is used unconditionally, even though the corresponding header `MnPrint.h` is only included if certain compiler flags are set. The second one is a change in the interface of the `MinimumBuilder` base class. We run Minuit using the `MnMigrad` class. Without this change, there is no way to change the print level in a particular instance of MnMigrad. The change does not violate the logical constness of MinimumBuilder.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1677:308,wrap,wrapper,308,https://root.cern,https://github.com/root-project/root/pull/1677,2,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"Hi,. # This Pull request: . This PR comes from this [forum thread](https://root-forum.cern.ch/t/use-root-io-as-library-in-a-c-stand-alone-project/55539/5). This tutorial is a minimal working example about how to create a ROOT dictionary for a custom class, and its use for writing and reading a TTree. Further changes may be needed before full integration into ROOT project. ## Changes or fixes:. New folder added, `tutorials/tree/dictionary`. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13205:344,integrat,integration,344,https://root.cern,https://github.com/root-project/root/pull/13205,1,['integrat'],['integration']
Integrability,"Hi,. I need to install ROOT 6.16 in my laptop (macOS Monterey M1 chip), but it's becoming so difficult due to the installation of TBB, and it also cannot detect the arm architecture (so when I configure the cmake building, I get ```Targeting X86```). . Regarding the TBB issue, this is the output; ```cmake; -- TBB download command succeeded. See also /Users/apereiro/root-histfact-test/new_build/TBB-prefix/src/TBB-stamp/TBB-download-*.log; [ 0%] No update step for 'TBB'; [ 0%] No patch step for 'TBB'; [ 0%] No configure step for 'TBB'; [ 0%] Performing build step for 'TBB'; CMake Error at /Users/apereiro/root-histfact-test/new_build/TBB-prefix/src/TBB-stamp/TBB-build-RelWithDebInfo.cmake:49 (message):; Command failed: 2. 'make' 'compiler=clang' 'CXXFLAGS= -mno-rtm -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX12.1.sdk' 'CPLUS=/Library/Developer/CommandLineTools/usr/bin/c++' 'CONLY=/Library/Developer/CommandLineTools/usr/bin/cc'. See also. /Users/apereiro/root-histfact-test/new_build/TBB-prefix/src/TBB-stamp/TBB-build-*.log; ```. I have been following [this](https://github.com/root-project/root/pull/6120/commits) pull request made by Axel and I made the same changes from the commits, but it's not sufficient to fix the whole problem. . Also I tried to configure with ```-Dbuiltin_tbb=OFF``` since I have the latest tbb from homebrew, but I get; ```cmake; -- Found TBB: /opt/homebrew; CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1159 (if):; if given arguments:. ""VERSION_LESS"" ""2018""; ```. Can you point me to a solution, or propagate the patches you have been developing to older versions like this one?. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10370:699,message,message,699,https://root.cern,https://github.com/root-project/root/issues/10370,1,['message'],['message']
Integrability,"Hi,. When compiling and attempting to run the Celeritas example (see https://github.com/celeritas-project/celeritas) with a build of ROOT v6.26/00 with gcc 11 we get the following errors:; ```; Error in <TCling::RegisterModule>: Dictionary trigger function for libCore not found; Error in <TCling::RegisterModule>: Dictionary trigger function for libMathCore not found; Error in <TCling::RegisterModule>: Dictionary trigger function for libThread not found; Error in <TCling::RegisterModule>: Dictionary trigger function for libRIO not found; Error in <TCling::RegisterModule>: Dictionary trigger function for libNet not found; Error in <TCling::RegisterModule>: Dictionary trigger function for libTree not found; Error in <TCling::RegisterModule>: Dictionary trigger function for libceleritas_root not found; Error in <TClass::LoadClassInfo>: no interpreter information for class celeritas::ImportData is available even though it has a TClass initialization routine.; ```; A simple use of root works fine (eg. simple.root is created just fine). However loading the celeritas library:; ```; root[0] .L path_to_celeritas_build/libceleritas_root.so; ```; leads to a weird error about not find `path_to_root_installation/*bin*/libNet_rdict.pcm`. We trace is down to the line in `TCling.cxx`:; ```; std::string dyLibName = cling::DynamicLibraryManager::getSymbolLocation(triggerFunc);; ```; for `libNet` returning the name of executable (`blahblah/bin/root.exe`). However loading the slightly simpler library `libceleritas.root` (which is used by `libceleritas_root.so`), works just fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10162:959,rout,routine,959,https://root.cern,https://github.com/root-project/root/issues/10162,1,['rout'],['routine']
Integrability,"Hi,. While trying to compile some code which uses ROOT::Math::PxPyPzMVector, I run into; ```; In file included from v6-22-06/install/include/Math/Vector4D.h:12:; v6-22-06/install/include/Math/GenVector/PxPyPzE4D.h:154:17: error: call to function 'sqrt' that is neither visible in the template definition nor found by argument-dependent lookup; return sqrt(mm);; ^; v6-22-06/install/include/Math/GenVector/PxPyPzM4D.h:108:14: note: in instantiation of member function 'ROOT::Math::PxPyPzE4D<double>::M' requested here; fM = v.M();. ```. In the header files all standard functions should be prefixed with `std::`. I guess this is a remnant from days when there were `using namespace std` statements in the headers... Cheers,; Antoni",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7905:326,depend,dependent,326,https://root.cern,https://github.com/root-project/root/issues/7905,1,['depend'],['dependent']
Integrability,"Hi,; I ran into a memory leak training a BDT yesterday.; Strangely only when running through the root_numpy interface.; The problem appears to scale with number of training events (somewhere between 6.4k and 12.8k training events I run out of RAM); Valgrind/memcheck pointed into `TMVA::DecisionTree::TrainNodeFast` (assuming I read the output correctly. valgrind gave me some 370k lines and i tried with diff'ing a many-event run with a few-event run to get rid of unrelated issues); since this is in an if IMT block, I tried rebuilding root without IMT => tada leak gone.; So diffing the if and else blocks of the preprocessor if (i.e. two different `TMVA::DecisionTree::TrainNodeFast` implementations) I noticed these lines commented out. This patch does not fix the original problem for me, and I'm still on the chase, but the change looks right to me. EDIT: I should add, this does not seem to be a general root_numpy issue because other TMVA methods don't see the issue. the memory only starts exploding during the BDT training. I don't see the issue with tmva through pyroot either. so I really need all three root_numpy+IMT+BDT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2836:108,interface,interface,108,https://root.cern,https://github.com/root-project/root/pull/2836,1,['interface'],['interface']
Integrability,"Hi,; I'm trying to use lambda expressions to define TF1 objects.; Inside python I run the following code:; `from ROOT import TF1`; `f = TF1('f', lambda x: x[0], 0, 1)`; `f.Draw()`. but I get a blank canvas and this error:; ```; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/home/daniel/alice/sw/ubuntu2004_x86-64/ROOT/v6-24-06-13/lib/ROOT/_application.py"", line 68, in displayhook; gInterpreter.EndOfLineAction(); TypeError: void TInterpreter::EndOfLineAction() =>; TypeError: callable was deleted; ```. I'm using pyroot inside the AliPhysics environment. I tested these lines on 4 different machines that use different versions of python: 3.6, 3.7, 3.8 and 3.9. Only with the two older versions it runs as expected. For python 3.8 and 3.9 the error message is the same. Do you know what might be the cause of this behavior with newer versions of python?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9465:784,message,message,784,https://root.cern,https://github.com/root-project/root/issues/9465,1,['message'],['message']
Integrability,"Hi,; We are trying to test latest ROOT 6.28 patches (commit 36349764e9) and ROOT master (commit 84d6328434) branch changes in cmssw. Though root itself builds fine in both cases but we get CMSSW build errors [a]. Note that we did not see such errors with ROOT 6.28-patches commit b684439239. Looks like rootcling and `c++20` issue. Is it a known issue?. [a] ; https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-394617/32404/build.log; ```; >> Checking EDM Class Version for src/DataFormats/L1GlobalCaloTrigger/src/classes_def.xml in libDataFormatsL1GlobalCaloTrigger.so; /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/etc/cling/std.modulemap:554:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'; module ""bits/uses_allocator_args.h"" [optional] {; ^; /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/include/c++/11.2.1/memory_resource:42:10: note: submodule of top-level module 'std' implicitly imported here; #include <bits/uses_allocator_args.h> // uninitialized_construct_using_alloc; ^; ```. this is the stack trace we see when this error occurs; ```; ===========================================================; There was a crash (kSigAbort).; This is the entire stack trace of all threads:; ===========================================================; #0 0x00002b4bd10da72b in waitpid () from /lib64/libc.so.6; #1 0x00002b4bd103bcf7 in do_system () from /lib64/libc.so.6; #2 0x00002b4bd1d2345c in TUnixSystem::Exec (this=0x7472d0, shellcmd=0xc1f5720 ""/pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/etc/gdb-backtrace.sh 43811 1>&2"") at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:418,integrat,integration,418,https://root.cern,https://github.com/root-project/root/issues/12771,1,['integrat'],['integration']
Integrability,"Hi,; We are trying to update root 6.24 branch (commit https://github.com/root-project/root/commit/7c0cfaca4c70c7394328547c05e00028b0079a03) in CMSSW special integration builds (https://github.com/cms-sw/cmsdist/pull/6746/files ) but looks like pyROOT fails/hangs for some special dictionaries. . While building cmssw , we use https://github.com/cms-sw/cmssw/blob/master/FWCore/Utilities/scripts/edmCheckClassVersion to check for root dictionaries class versions. This works for most of our dictionaries e.g following two run fine ( https://github.com/cms-sw/cmssw/blob/master/DataFormats/TauReco/src/classes_def_hlt.xml, https://github.com/cms-sw/cmssw/blob/master/DataFormats/TauReco/src/classes_def_1.xml ); ```; > src/FWCore/Utilities/scripts/edmCheckClassVersion -l libDataFormatsTauReco.so -x src/DataFormats/TauReco/src/classes_def_hlt.xml; > src/FWCore/Utilities/scripts/edmCheckClassVersion -l libDataFormatsTauReco.so -x src/DataFormats/TauReco/src/classes_def_1.xml; ```; but it fails/hangs for https://github.com/cms-sw/cmssw/blob/master/DataFormats/TauReco/src/classes_def_2.xml; ```; > src/FWCore/Utilities/scripts/edmCheckClassVersion -l libDataFormatsTauReco.so -x src/DataFormats/TauReco/src/classes_def_2.xml; ```; Most of the times the above command just hangs with error https://muzaffar.web.cern.ch/root624/err1.log but once I was able to get this error https://muzaffar.web.cern.ch/root624/err.log . Can you please look in to it and see if this log helps? . In case you want to try it yourself then you go to cmsdev25 and do; ```; >cd /build/muz/r624/w/tmp/BUILDROOT/ea8220342d406ab7dbc2d210a1e9351b/opt/cmssw/slc7_amd64_gcc900/cms/cmssw/CMSSW_11_3_ROOT624_X_2021-03-25-1100; >cmsenv; >/build/muz/r624/w/tmp/BUILDROOT/ea8220342d406ab7dbc2d210a1e9351b/opt/cmssw/slc7_amd64_gcc900/cms/cmssw/CMSSW_11_3_ROOT624_X_2021-03-25-1100/src/FWCore/Utilities/scripts/edmCheckClassVersion -l libDataFormatsTauReco.so -x /build/muz/r624/w/tmp/BUILDROOT/ea8220342d406ab7dbc2d210a1e9351b/opt/cmss",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718:157,integrat,integration,157,https://root.cern,https://github.com/root-project/root/issues/7718,1,['integrat'],['integration']
Integrability,"HistFactory is spamming messages to cout when hist2workspace runs.; - A new message topic HistFactory was added to RooFit's message streams,; which allows to suppress these messages.; - ObjectHandling messages are now automatically suppressed when HistFactory runs.; - Documentation of ParamHistFunction improved a bit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3913:24,message,messages,24,https://root.cern,https://github.com/root-project/root/pull/3913,5,['message'],"['message', 'messages']"
Integrability,"I already told Axel I was ""playing"" with clang-tidy. Here are some first results, basically low-hanging fruits only. I also included some of my own TMVA patches (more progress bars / unordered_map) and code modernization for TMVA. Biggest improvement is probably the missing TString move assignment operator, that makes sorting a vector<TString> much much faster if the strings are too long for short string optimization. Most of these patches can be applied in any order, they do not depend on each other. We can discuss the large modernize-loops commit. I didn't have enough time to go through the loop variable names. The autogenerated names are not always the best (especially if the name ""i"" is generated). Nevertheless I wanted to push all these changes before SB52 :-)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1585:485,depend,depend,485,https://root.cern,https://github.com/root-project/root/pull/1585,1,['depend'],['depend']
Integrability,"I believe this is what happens:; - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation.; - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals.; - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6315:218,integrat,integrated,218,https://root.cern,https://github.com/root-project/root/pull/6315,1,['integrat'],['integrated']
Integrability,"I did the same ""style"" of integration as was done for roottest repository",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1142:26,integrat,integration,26,https://root.cern,https://github.com/root-project/root/pull/1142,1,['integrat'],['integration']
Integrability,"I have question. Does `roottest` runs `cmake --build . --target cling-test` when the cling interpreter code is changed? From time to time I see, that commits are merged regardless of whether the CI fails.; If I understand Cling's workflow correctly, changes are integrated and tested in ROOT and automatically streamed down to Cling after the merge in ROOT. So, if `roottest` does not run the integrated tests in cling, it is possible that the Cling CI is bypassed, or I'm wrong?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6957:262,integrat,integrated,262,https://root.cern,https://github.com/root-project/root/issues/6957,2,['integrat'],['integrated']
Integrability,"I introduced those targets because I thought we actually have; dependencies between the different rootcling invocations because; of the C++ modules. After some discussion with Axel, it turns out; we actually always have dependencies here, as the dictionaries; should regenerate the dictionary when one of the referenced; libraries/headers change (as the declarations in there change,; which might influence the current dictionary). We can just safely remove this, the actual dependency which is; ARG_DEPENDENCIES is still in the custom command dependencies; (currently the ROOTCLING_ targets where just a no-op that was; supposed to activated in a later commit when we remove the; ARG_DEPENDENCIES and replace it with the ROOTCLING_; dependencies if runtime_modules was set to ON).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/963:63,depend,dependencies,63,https://root.cern,https://github.com/root-project/root/pull/963,5,['depend'],"['dependencies', 'dependency']"
Integrability,"I know this is not a small change, so any comments are welcome!. Background:; RooCintUtils was providing a wrapper between Cint and roofit. This implementation is very old, and is; using Cint iteration interface a lot. Recently we were trying to kill; RooCintUtils code where its using iteration and to change them to new; Cling interface in order to improve the performance. RooCintUtils is an utility class, so this is internal namespace which is only used inside roofit.; Since there are just 3 methods left, this RooCintUtils is no longer; worth spending a file. Let's delete this and migrate methods to; RooFactoryWSTool.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1722:107,wrap,wrapper,107,https://root.cern,https://github.com/root-project/root/pull/1722,3,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"I may be missing something but I seem to be unable to compile ROOT 6.28/04 with c++14. I use. ```; cmake ../root/root-6.28.04/ -DCMAKE_CXX_VERSION=14; ```. And get the following confirmation at the end of the cmake output. ```; System Linux-3.10.0-1160.88.1.el7.x86_64; Processor 36 core Intel(R) Xeon(R) CPU E5-2695 v4 @ 2.10GHz (x86_64); Build type Release; Compiler GNU 6.3.0; Compiler flags:; C -pipe -Wall -W -pthread -O3 -DNDEBUG; C++ -std=c++14 -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG; Linker flags:; Executable -rdynamic; Module; Shared -Wl,--no-undefined -Wl,--hash-style=""both""; ```; As far as I can tell, gcc6.3.0 should have full c++14 capability. However, eventually I get the following errors:. ```; Consolidate compiler generated dependencies of target Dictgen; Consolidate compiler generated dependencies of target ClingUtils; Consolidate compiler generated dependencies of target MetaCling; [ 78%] Built target ClingUtils; [ 78%] Built target Dictgen; Consolidate compiler generated dependencies of target rootcling_stage1; [ 78%] Built target rootcling_stage1; [ 78%] Built target MetaCling; [ 78%] Generating G__Core.cxx, ../lib/Core.pcm; [ 78%] Linking CXX shared library ../../../lib/libCling.so; /home/root-build/etc/cling/std.modulemap:462:12: error: header 'bits/invoke.h' not found; header ""bits/invoke.h""; ^; input_line_1:1:10: note: submodule of top-level module 'std' implicitly imported here; #include <new>; ^; Warning in cling::IncrementalParser::CheckABICompatibility():; Failed to extract C++ standard library version.; While building module 'Core':; While building module 'Cling_Runtime' imported from input_line_2:1:; While building module 'Cling_Runtime_Extra' imported from /home/root-build/etc/cling/Interpreter/RuntimeUniverse.h:27:; /home/root-build/etc/cling/std.modulemap:462:12: error: header 'bits/invoke.h' not found; header ""bits/invoke.h""; ^; /home/root-build/etc/cling/Interpreter/DynamicExprInfo.h:13:10: note: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13453:786,depend,dependencies,786,https://root.cern,https://github.com/root-project/root/issues/13453,4,['depend'],['dependencies']
Integrability,"I tested this in a private repository, but unfortunately I can only check the final integration after merging...",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8654:84,integrat,integration,84,https://root.cern,https://github.com/root-project/root/pull/8654,1,['integrat'],['integration']
Integrability,"I think there's a potentially nasty backward incompatibility issue arising from this commit: https://github.com/root-project/root/commit/90ba866a65bd44e74a995aa330e0a950114443d6#diff-896028fd27621f8bfe9d0774c5529e27df523e5bd7fcfe2ac54f6fd1ced316f9. Details of how the problem appeared to me are below, but I will say that the problem went away when I compiled 6.22 branch with the `_value` data member removed (since it masks the RooAbsReal one). I am guessing here that a RooConstVar version 2 written to disk isn't properly loaded as a RooConstVar version 1. But what is odd is that under some circumstances it seems that the const var value is correctly loaded -- it seems connected to if the arg is ""dirty"" or not. Sorry for being a bit vague, I dont fully understand why it is sometimes a problem and sometimes not but the problem goes away when the above commit is effectively ported back into 6.22. The issue first appeared for me when I opened a workspace (I wanted to attach to this issue but it wont let me attach a root file) created in 6.23.01 in 6.22.00 ... the only warning I get is: . ```; Warning in <TStreamerInfo::BuildOld>: Cannot convert RooRealVarSharedProperties::_altBinning from type: unordered_map<string,RooAbsBinning*> to type: RooLinkedList, skip element; ```. But when I tried to evaluate the pdf in the workspace like this:. ```; RooWorkspace* w = f1.Get<RooWorkspace>(""Test"");; auto func = w->pdf(""SR_model"");; auto obs = w->var(""obs_x_SR"");; func->getVal(*obs);; ```. I got this:. ```; message : p.d.f normalization integral is zero or negative: 0; server values: !funcList=(L_x_bkg_SR_overallSyst_x_StatUncert = 47.1,L_x_sig_SR_overallSyst_x_StatUncert = 3.82), !coefList=(binWidth_obs_x_SR_0 = 5.5,binWidth_obs_x_SR_1 = 5.5); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7646:1518,message,message,1518,https://root.cern,https://github.com/root-project/root/issues/7646,1,['message'],['message']
Integrability,"I think this is the correct fix for #1677; the non-const version of `Minimizer()` was missing from the interface. `Builder()` already has both const and non-const versions, so this should be enough to fix the chain `MnMigrad.Minimizer().Builder().SetPrintLevel(...)`. @HDembinski please check.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1946:103,interface,interface,103,https://root.cern,https://github.com/root-project/root/pull/1946,1,['interface'],['interface']
Integrability,"I took the chance to also move the function to a better header, since we discussed that `InterfaceUtils` is for stuff which `RInterface` depends from and not the other way around.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13162:89,Interface,InterfaceUtils,89,https://root.cern,https://github.com/root-project/root/pull/13162,2,"['Interface', 'depend']","['InterfaceUtils', 'depends']"
Integrability,"I was looking into ways to improve the target-based usage of ROOT in CMake. I found the missing `INTERFACE_INCLUDE_DIRECTORIES` has already been added to master (Yay!), but there are still other additions that could really help a user trying to use targets:. | New target | Usage |; |---|---|; | `ROOT::Libraries` | This is the target equivalent of `ROOT_LIBRARIES`, and links all common and requested components. |; | ~~`ROOT::Flags`~~ | ~~The target equivalent of `ROOT_*_FLAGS`, `ROOT_DEFINITIONS`, and `ROOT_EXE_LINKER_FLAGS`. Adds the flags that ROOT recommends; this is a smart target and will add `C`, `CXX`, and `FORTRAN` flags as needed depending on the target you link to.~~ |. ~~I have added `_LIST` versions of `FLAGS` variables, since CMake expects the flags to be a real list in most cases (really everywhere except in the `CMAKE_CXX_FLAGS` variable itself). Actually changing them to CMake lists directly might break users code, so this way is safer.~~. Target based approach before (showing the old INCLUDE issue too). ```cmake; cmake_minimum_required(VERSION 3.4). project(RootSimpleExample LANGUAGES CXX); find_package(ROOT CONFIG REQUIRED COMPONENTS RooFit RooFitCore); # Note: Symbols missing compiling error if user forgets RooFitCore!. # Already fixed in ROOT master; set_property(TARGET ROOT::Core PROPERTY; INTERFACE_INCLUDE_DIRECTORIES ""${ROOT_INCLUDE_DIRS}""). # Fix for ROOT_*_FLAGS not actually being a CMake list; separate_arguments(ROOT_CXX_FLAGS); separate_arguments(ROOT_EXE_LINKER_FLAGS). # Setting up the recommended ROOT flags; add_library(ROOT::Flags IMPORTED INTERFACE); set_property(TARGET ROOT::Flags APPEND PROPERTY; INTERFACE_COMPILE_OPTIONS ${ROOT_CXX_FLAGS}); set_property(TARGET ROOT::Flags APPEND PROPERTY; INTERFACE_COMPILE_DEFINITIONS ${ROOT_DEFINITIONS}); #set_property(TARGET ROOT::Flags APPEND PROPERTY; # INTERFACE_LINK_LIBRARIES ${ROOT_EXE_LINKER_FLAGS}). # Adding an exectuable program and linking to needed ROOT libraries; add_executable(RootSimple",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1959:646,depend,depending,646,https://root.cern,https://github.com/root-project/root/pull/1959,1,['depend'],['depending']
Integrability,"I would like to have a posibility to build only the math libraries or that they are split out from the main project, as we don't want to use root as an application but are writing simulations in c++ and would not like to build our own math lib. . At the moment it is possible to build the math libs one by one but the c++ interpreter is build as a dependency of them (also some dependency that uses openssl) which is not needed to use the pure math libs. This increases build times unreasonably. I just build the MathMore target. For this Target about 97% of the compile steps where made up of compiling the interpretor.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6617:348,depend,dependency,348,https://root.cern,https://github.com/root-project/root/issues/6617,2,['depend'],['dependency']
Integrability,"I'm looking into the facade to fix [ROOT-10629](https://sft.its.cern.ch/jira/browse/ROOT-10629). However, we can improve in the lookup logic. Especially to throw more meaningful error messages. In short: Imho, stacking `try` blocks is not a good idea. The behaviour now:. ```bash; >>> import ROOT; >>> ROOT.foo; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/home/stefan/builds/root-dev/lib/python3.8/ROOT/_facade.py"", line 171, in _getattr; return getattr(self, name); File ""/home/stefan/builds/root-dev/lib/python3.8/ROOT/_facade.py"", line 144, in _fallback_getattr; raise AttributeError(""Failed to import {} from ROOT"".format(name)); AttributeError: Failed to import foo from ROOT; ```. The behaviour before:. ```bash; >>> import ROOT; >>> ROOT.foo; Traceback (most recent call last):; File ""/home/stefan/builds/root-dev/lib/python3.8/ROOT/_facade.py"", line 137, in _fallback_getattr; return getattr(gbl_namespace, name); AttributeError: <namespace cppyy.gbl at 0x5641444c41f0> has no attribute 'foo'. Full details:; type object '' has no attribute 'foo'; 'foo' is not a known C++ class; 'foo' is not a known C++ template; 'foo' is not a known C++ enum. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""/home/stefan/builds/root-dev/lib/python3.8/ROOT/_facade.py"", line 140, in _fallback_getattr; return getattr(gbl_namespace.ROOT, name); AttributeError: <namespace cppyy.gbl.ROOT at 0x564145da5680> has no attribute 'foo'. Full details:; type object 'ROOT' has no attribute 'foo'; 'ROOT::foo' is not a known C++ class; 'foo' is not a known C++ template; 'foo' is not a known C++ enum. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/home/stefan/builds/root-dev/lib/python3.8/ROOT/_facade.py"", line 173, in _getattr; return getattr(self, name); File ""/home/stefan/builds/root-dev/lib/python3.8/ROOT/_fac",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5187:184,message,messages,184,https://root.cern,https://github.com/root-project/root/pull/5187,1,['message'],['messages']
Integrability,"I'm trying to build root (v6.24.06) with nvc++ from NVIDIA's nvhpc project (ver 21.9), as I get runtime segfaults when I build a project with nvc++ and link it against root built with gcc 9.3.0. However, building root fails during cmake (3.21.3) with; ```; CMake Warning at cmake/modules/CheckCompiler.cmake:12 (message):; Unsupported compiler: NVHPC.; Call Stack (most recent call first):; CMakeLists.txt:130 (include). nvc++-Error-Unknown switch: -; CMake Error at cmake/modules/CheckCompiler.cmake:129 (if):; if given arguments:. ""STRGREATER"" ""201703L"". Unknown arguments specified; Call Stack (most recent call first):; CMakeLists.txt:130 (include); ```. so it looks like nvc++ doesn't know about the `__cplusplus` macro. If I hack around this, cmake finishes, but then the compilation dies with ; ```; [ 27%] Building CXX object interpreter/llvm/src/lib/Support/CMakeFiles/LLVMSupport.dir/GraphWriter.cpp.o; ""/bld4/atlas/root/src_6.24/interpreter/llvm/src/lib/Support/ErrorHandling.cpp"", line 116: error: the global scope has no ""write""; ssize_t written = ::write(2, MessageStr.data(), MessageStr.size());; ^; ```; and; ```; NVC++-F-0000-Internal compiler error. get_call_sptr(): indirect call not via LDA/ACON 154 (/bld4/atlas/root/src_6.24/interpreter/llvm/src/lib/DebugInfo/DWARF/DWARFContext.cpp: 193); NVC++/x86-64 Linux 21.9-0: compilation aborted; make[2]: *** [interpreter/llvm/src/lib/DebugInfo/DWARF/CMakeFiles/LLVMDebugInfoDWARF.dir/DWARFContext.cpp.o] Error 2; make[2]: *** Waiting for unfinished jobs....; [ 52%] Built target obj.clang-tblgen; make[1]: *** [interpreter/llvm/src/lib/DebugInfo/DWARF/CMakeFiles/LLVMDebugInfoDWARF.dir/all] Error 2; CMake Error at /bld4/atlas/root/bld.v6-24-06_nvhpc_c17/TBB-prefix/src/TBB-stamp/TBB-build-Release.cmake:49 (message):; Command failed: 2. 'make' 'cpp0x=1' 'CXXFLAGS= -mno-rtm' 'CPLUS=/opt/nvidia/hpc_sdk/Linux_x86_64/21.9/compilers/bin/nvc++' 'CONLY=/opt/nvidia/hpc_sdk/Linux_x86_64/21.9/compilers/bin/nvc' 'LDFLAGS='; ```. Has anyone tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9036:312,message,message,312,https://root.cern,https://github.com/root-project/root/issues/9036,1,['message'],['message']
Integrability,"I'm trying to compile ROOT v6.24/06 on Void Linux with musl libc, however the build fails with the following error message:; ```cc; /builddir/root-6.24.06/core/clib/src/mmapsup.c:47:15: error: conflicting types for 'getpagesize'; 47 | extern size_t getpagesize PARAMS ((void));; | ^~~~~~~~~~~; In file included from /builddir/root-6.24.06/core/clib/res/mmprivate.h:56,; from /builddir/root-6.24.06/core/clib/src/mmapsup.c:26:; /usr/include/unistd.h:163:5: note: previous declaration of 'getpagesize' was here; 163 | int getpagesize(void);; | ^~~~~~~~~~~; ```. The relevant part of `mmapsup.c` is:; ```c; #if defined(R__LINUX) && !defined(R__GLIBC) && !defined(__CYGWIN__) \; || (defined(__CYGWIN__) && (CYGWIN_VERSION_API_MAJOR > 0 || CYGWIN_VERSION_API_MINOR < 213)); extern size_t getpagesize PARAMS ((void));; #else; extern int getpagesize PARAMS ((void));; #endif; ```. My understanding is that as musl doesn't define `R__GLIBC`, the condition resolves in favor of declaring `getpagesize` return value as `size_t`. However, this conflicts with the declaration present in `unistd.h` (which is included several lines above this), which declares it as `int` (in accordance with the POSIX standard). The same code snippet also causes error during `core/clib/src/mvalloc.c` compilation. It's not entirely clear to me why should `getpagesize` be declared in the first place, as it is declared in the included `unistd.h` file - my guess is for some kind of compatibility, although POSIX dropped it twenty years ago and Cygwin seems to have implemented it at least four years ago, likely more, I am not sure how this works on Windows - let alone as `size_t`. Thus my suggestion is to remove the above code block from both of the mentioned files entirely, which seems to fix the problem for me (at least until the compilation fails on another problem, which I haven't analyzed yet; and I'm still able to compile for glibc too) and my question is: would it break anything crucial (as I mentioned, `getpagesi",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9253:115,message,message,115,https://root.cern,https://github.com/root-project/root/issues/9253,1,['message'],['message']
Integrability,"I, _OI) [with bool _IsMove = false; _II = long unsigned int*; _OI = long unsigned int*]’ at /usr/include/c++/14/bits/stl_algobase.h:548:42,; inlined from ‘constexpr _OI std::__copy_move_a(_II, _II, _OI) [with bool _IsMove = false; _II = long unsigned int*; _OI = long unsigned int*]’ at /usr/include/c++/14/bits/stl_algobase.h:555:31,; inlined from ‘constexpr _OI std::copy(_II, _II, _OI) [with _II = long unsigned int*; _OI = long unsigned int*]’ at /usr/include/c++/14/bits/stl_algobase.h:651:7,; inlined from ‘constexpr std::vector<bool, _Alloc>::iterator std::vector<bool, _Alloc>::_M_copy_aligned(const_iterator, const_iterator, iterator) [with _Alloc = std::allocator<bool>]’ at /usr/include/c++/14/bits/stl_bvector.h:1342:28,; inlined from ‘constexpr void std::vector<bool, _Alloc>::_M_reallocate(size_type) [with _Alloc = std::allocator<bool>]’ at /usr/include/c++/14/bits/vector.tcc:1059:40,; inlined from ‘constexpr void std::vector<bool, _Alloc>::reserve(size_type) [with _Alloc = std::allocator<bool>]’ at /usr/include/c++/14/bits/stl_bvector.h:1130:17,; inlined from ‘ROOT::Internal::RDF::BuildAction<char, unsigned char, int, unsigned int, short int, short unsigned int, double, float, long long int, long long unsigned int, bool, ROOT::Detail::RDF::RLoopManager>(const ROOT::RDF::ColumnNames_t&, const ; std::shared_ptr<SnapshotHelperArgs>&, unsigned int, std::shared_ptr<ROOT::Detail::RDF::RLoopManager>, ActionTags::Snapshot, const RColumnRegister&)::<lambda()>’ at tree/dataframe/inc/ROOT/RDF/InterfaceUtils.hxx:270:20:; /usr/include/c++/14/bits/stl_algobase.h:452:30: warning: ‘void* __builtin_memmove(void*, const void*, long unsigned int)’ forming offset 8 is out of the bounds [0, 8] [-Warray-bounds=]; 452 | __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);; | ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; ```. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16360:2823,Interface,InterfaceUtils,2823,https://root.cern,https://github.com/root-project/root/issues/16360,1,['Interface'],['InterfaceUtils']
Integrability,"I. See https://setuptools.pypa.io/en/latest/pkg_resources.html; import pkg_resources; Attempting requirement 'numpy>=1.4.1'; Attempting requirement 'scikit-learn'; Attempting requirement 'xgboost'; Attempting requirement 'tensorflow'; Attempting requirement 'torch'; Attempting requirement 'numba>=0.47.0; python_version < ""3.11""'; Attempting requirement 'numba>=0.57.0; python_version >= ""3.11"" and python_version < ""3.12""'; Attempting requirement 'cffi>=1.9.1'; Attempting requirement 'notebook>=4.4.1'; Attempting requirement 'metakernel>=0.20.0'; Ignore dependency pyspark>=2.4; Ignore dependency dask>=2022.08.1; python_version >= ""3.8""; Ignore dependency distributed>=2022.08.1; python_version >= ""3.8""; .; ----------------------------------------------------------------------; Ran 1 test in 0.149s. OK; ```. And here is the output with ctest:; ```; AILED (errors=1); Attempting requirement 'numpy>=1.4.1'; Attempting requirement 'scikit-learn'; Attempting requirement 'xgboost'; Attempting requirement 'tensorflow'; Attempting requirement 'torch'; Attempting requirement 'numba>=0.47.0; python_version < ""3.11""'; Attempting requirement 'numba>=0.57.0; python_version >= ""3.11"" and python_version < ""3.12""'; Attempting requirement 'cffi>=1.9.1'; Attempting requirement 'notebook>=4.4.1'; Attempting requirement 'metakernel>=0.20.0'; Ignore dependency pyspark>=2.4; Ignore dependency dask>=2022.08.1; python_version >= ""3.8""; Ignore dependency distributed>=2022.08.1; python_version >= ""3.8"". Full path to requirements.txt: /home/rembserj/code/root/requirements.txt; Details about not matched dependencies:; - The 'tensorflow' distribution was not found and is required by the application; - The 'torch' distribution was not found and is required by the application; - The 'metakernel>=0.20.0' distribution was not found and is required by the application; CMake Error at /home/rembserj/code/root/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ```. Needs backport up to 6.28.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15272:2027,depend,dependency,2027,https://root.cern,https://github.com/root-project/root/pull/15272,5,"['depend', 'message']","['dependencies', 'dependency', 'message']"
Integrability,I/Users/vvassilev/workspace/sources/root -I/Users/vvassilev/workspace/builds/root/etc/cling/ -I/Users/vvassilev/workspace/builds/root/include -I/Users/vvassilev/workspace/sources/root/builtins/zlib -I/Users/vvassilev/workspace/sources/root/core/base/inc -I/Users/vvassilev/workspace/sources/root/core/clib/inc -I/Users/vvassilev/workspace/sources/root/core/cont/inc -I/Users/vvassilev/workspace/sources/root/core/foundation/inc -I/Users/vvassilev/workspace/sources/root/core/macosx/inc -I/Users/vvassilev/workspace/sources/root/core/unix/inc -I/Users/vvassilev/workspace/sources/root/core/winnt/inc -I/Users/vvassilev/workspace/sources/root/core/clingutils/inc -I/Users/vvassilev/workspace/sources/root/core/meta/inc -I/Users/vvassilev/workspace/sources/root/core/textinput/inc -I/Users/vvassilev/workspace/sources/root/core -writeEmptyRootPCM -DSYSTEM_TYPE_macosx ROOT/StringConv.hxx ROOT/TExecutor.hxx ROOT/TSequentialExecutor.hxx Buttons.h Bytes.h Byteswap.h Gtypes.h GuiTypes.h KeySymbols.h MessageTypes.h Riostream.h Rtypes.h TApplication.h TApplicationImp.h TAtt3D.h TAttAxis.h TAttBBox2D.h TAttBBox.h TAttFill.h TAttLine.h TAttMarker.h TAttPad.h TAttText.h TBase64.h TBenchmark.h TBrowser.h TBrowserImp.h TBuffer3D.h TBuffer3DTypes.h TBuffer.h TCanvasImp.h TColorGradient.h TColor.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TDatime.h TDirectory.h TEnv.h TError.h TException.h TExec.h TFileCollection.h TFileInfo.h TFolder.h TGuiFactory.h TInetAddress.h TInspectorImp.h TMacro.h TMathBase.h TMD5.h TMemberInspector.h TMessageHandler.h TNamed.h TNotifyLink.h TObject.h TObjectSpy.h TObjString.h TParameter.h TPluginManager.h TPoint.h TPRegexp.h TProcessID.h TProcessUUID.h TQClass.h TQCommand.h TQConnection.h TQObject.h TRedirectOutputGuard.h TRefCnt.h TRef.h TRegexp.h TRemoteObject.h TROOT.h TRootIOCtor.h TStopwatch.h TStorage.h TString.h TStringLong.h TStyle.h TSysEvtHandler.h TSystemDirectory.h TSystemFile.h TSystem.h TTask.h TThreadSlots.h TTime.h TTimer.h TTimeStamp.h TUri.h T,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3586:5021,Message,MessageTypes,5021,https://root.cern,https://github.com/root-project/root/pull/3586,1,['Message'],['MessageTypes']
Integrability,"If a dependency is added multiple times, but proven to be satisfied only once, RooCmdArg rejects the command.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2950:5,depend,dependency,5,https://root.cern,https://github.com/root-project/root/pull/2950,1,['depend'],['dependency']
Integrability,"If components are not specified, we should assume nlohmann_json is not required. Propagating the dependency on nlohmann_json just for the sake of one ROOT feature (ROOTEve) that might be used is unreasonable. We can expect from the users that link against ROOTEve to list this component explicitly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16703:97,depend,dependency,97,https://root.cern,https://github.com/root-project/root/pull/16703,1,['depend'],['dependency']
Integrability,"If one of the pdfs in a RooProdPdf is extended, it should not be; considered to be extracted as a constraint term. Also, fix; `RooProdPdf::getConnectedParameters()` which should not consider the; extended pdf as disconnected, as the expected events of this RooProdPdf; depend on it. Closes this old Jira ticket:; https://sft.its.cern.ch/jira/browse/ROOT-7604. FYI, @will-cern, sorry that it took almost 10 years :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13025:269,depend,depend,269,https://root.cern,https://github.com/root-project/root/pull/13025,1,['depend'],['depend']
Integrability,"If possible, this should be replaced by the automatic wrapping of Python callables provided by new cppyy (work started by @vepadulano).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6055:54,wrap,wrapping,54,https://root.cern,https://github.com/root-project/root/pull/6055,1,['wrap'],['wrapping']
Integrability,"If the G__X filenames don't match with a module called X, then; CMake can't find the right dependencies and we get race conditions.; This patch fixes all a few more typos that caused those problems. Found by our debug code in RootNewMacros (which is now nearly silent).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/769:91,depend,dependencies,91,https://root.cern,https://github.com/root-project/root/pull/769,1,['depend'],['dependencies']
Integrability,"If the method `__str__` is already defined on the C++ side, don't inject; the cling based pretty printing. Related to ROOT-10967. @etejedor You see any performance implications with the check added below? Do we trigger lookups with the `dir(...)`? Just to be sure :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6119:66,inject,inject,66,https://root.cern,https://github.com/root-project/root/pull/6119,1,['inject'],['inject']
Integrability,"If we call TCling::Load on an already loaded library we dlclose and dlopen the library. However, currently we do not have a facility to 'reload'/undo the effect of TCling::LoadPCM. This patch adds a section in the dictionary for de-registration which is reverse to TCling::RegisterModule -- TCling::UnRegisterModule. It tracks down which library is being reloaded and does not trigger a re-read of the rdict pcm. The current stub is can be further expanded to undo the effects caused by TCling::RegisterModule and/or improve the TCling shutdown by running the interpreter-dependent shutdown of the dictionary. The intent of this patch is to fix the failing OSX tests with. Error in <TCling::LoadPCM>: ROOT PCM /.../libTree_rdict.pcm file does not exist; Info in <TCling::LoadPCM>: In-memory ROOT PCM candidate /.../libASImageGui_rdict.pcm; Info in <TCling::LoadPCM>: In-memory ROOT PCM candidate /.../libASImage_rdict.pcm",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5420:572,depend,dependent,572,https://root.cern,https://github.com/root-project/root/pull/5420,1,['depend'],['dependent']
Integrability,"If we follow the route to disable all unnecessary binaries coming from builtins, here also the commit to disable them for lzma.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7542:17,rout,route,17,https://root.cern,https://github.com/root-project/root/pull/7542,1,['rout'],['route']
Integrability,"If we have dependencies which we expect to build (like in this case); we should use DEPENDENCIES. LIBRARIES is a terrible misnomer and we probably should; fix that. This patch teaches rootcling to build the pcms in order and; particularly, ROOTWebDisplay.pcm before the WebGui6.pcm",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3000:11,depend,dependencies,11,https://root.cern,https://github.com/root-project/root/pull/3000,2,"['DEPEND', 'depend']","['DEPENDENCIES', 'dependencies']"
Integrability,"If we have; ```; root_generate_dictionary(HitClassesRootInterfaces; ${CMAKE_CURRENT_SOURCE_DIR}/demo-geant-integration/HitRootIO.hh; ${CMAKE_CURRENT_SOURCE_DIR}/demo-geant-integration/SensitiveHit.hh; NOINSTALL; MODULE demo-geant-integration; DEPENDENCIES Celeritas::accel ${Geant4_LIBRARIES} Celeritas::corecel ; LINKDEF ""${CMAKE_CURRENT_SOURCE_DIR}/demo-geant-integration/HitClassesLinkDef.h""; ); ```; `root_generate_dictionary` will call (if they are proper target at that point) `get_property(dep_include_dirs TARGET ${dep} PROPERTY INCLUDE_DIRECTORIES)`. However there is 2 problems.; (a) It ignores [INTERFACE_INCLUDE_DIRECTORIES](https://cmake.org/cmake/help/latest/prop_tgt/INTERFACE_INCLUDE_DIRECTORIES.html) and [INTERFACE_SYSTEM_INCLUDE_DIRECTORIES](https://cmake.org/cmake/help/latest/prop_tgt/INTERFACE_SYSTEM_INCLUDE_DIRECTORIES.html); the former is used by `Geant4` (as it should) to publish its installed directories. (b) It fails the properties contains cmake generator expressions that does not expand yet. For example `$<INSTALL_INTERFACE:include>`; it fails badly because it then passed to rootcling a `-I` followed by 'nothing' hence shallowing the next arguments.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12263:107,integrat,integration,107,https://root.cern,https://github.com/root-project/root/issues/12263,5,"['DEPEND', 'integrat']","['DEPENDENCIES', 'integration']"
Integrability,"If widget URL includes sensitive information,; one just put it into local file and start browser with such local HTML file. ; Internally its will redirect to normal http server. This is most easy way to hide secret information from the system.; Exactly this method used by Jupyter. . Now it possible to enforce unique key (single-time-token) authentication for web widgets.; In such case URL to connect web widgets always has include `?key=` parameter - which generated new every time; new URL string is requested. Attempt to connect with same key twice will fail. To support such functionality, `GetWindowUrl()` add to all web-based widgets to let use such capability also; from `RBrowser` which integrate all existing widgets together. In addition to that jupyter does, ROOT adds secret session key (after `#` symbol), which remains only on client side.; This session key together with connection key are used to create ~~MD5~~ HMAC/SHA256 checksum, which is sends to server instead as connection request. While connection request may be retried many times, new request will get new number and therefore new ~~MD5~~ HMAC checksum. Once connection is accepted - same key cannot be use for new connection, but still will be used for ~~MD5~~ HMAC packets signs. To solve main-in-the-middle problem, each data packet is signed with ~~md5~~ HMAC checksum. Each packet includes sequence counter, which also protected by ~~md5~~ HMAC checksum. Therefore even if anybody gain control over http traffic between; client and server, it only be able to observe traffic but will not be able manipulate it - as long as secret session; key is not gained by other means. Also re-submitting same packets will not be possible - while packet with; already used counter will not be accepted. HTTP sniffing can only catch connection request and try to use it faster than normal client.; But even if connection gained by sniffer - it will not be able use it. To use connection, each packet ; should be signed by ~~md5~~ H",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14136:697,integrat,integrate,697,https://root.cern,https://github.com/root-project/root/pull/14136,1,['integrat'],['integrate']
Integrability,"If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13538:48,depend,depends,48,https://root.cern,https://github.com/root-project/root/pull/13538,2,"['depend', 'interface']","['depends', 'interface']"
Integrability,"If you plot a shifted RooHistPdf, it doesn't look good. Probably because it is sampled at the wrong points, the numeric bin integrator doesn't work in this case, or both. This is a problem that comes up relatively often in the ROOT forum, the last time here:; https://root-forum.cern.ch/t/roofit-in-root-6-28-04/55267. By looking for the keyword ""shift"" in the RooFit forum, one can see that this problem also came up in the past already:; https://root-forum.cern.ch/search?expanded=true&q=shift%20%23roofit-and-roostats; For example here:; https://root-forum.cern.ch/t/how-to-implement-a-horizontal-shift-for-roohistpdf/16787/6. I think I can approximately reproduce the workflow of the user that posted on the forum with this code. ```C++; void repro(); {; using namespace RooFit;. RooRealVar x(""x"", """", 1000, 1500);; x.setBins(50);. RooRealVar shift(""shift"", """", 10.0, -100, 100);. RooFormulaVar xShifted(""x_shifted"", ""x - shift"", {x, shift});; // Doesn't work better either...; // RooLinearVar xShifted(""x_shifted"", """", x, RooConst(1.0), shift);. std::vector<std::unique_ptr<RooDataHist>> templateHists;; RooArgSet pdfs;; RooArgSet yields;. // Fill the templates; for (std::size_t i = 0; i < 2; ++i) {; auto suffix = std::to_string(i);. TF1 pdf(""pdf"", ""gaus"", x.getMin(), x.getMax());; pdf.SetParameters(1, 1200 + 100 * i, 50);; pdf.Print();; TH1D h(""h"", """", x.numBins(), x.getMin(), x.getMax());; h.FillRandom(""pdf"", 10000);. templateHists.emplace_back(std::make_unique<RooDataHist>((""template_data_hist_"" + suffix).c_str(), """", x, &h));; pdfs.addOwned(; *new RooHistPdf((""template_hist_pdf_"" + suffix).c_str(), """", xShifted, x, *templateHists.back(), 0));; yields.addOwned(*new RooRealVar((""n_"" + suffix).c_str(), """", 1000, 100, 100000));; }. // Construct final model; RooAddPdf model(""model"", """", pdfs, yields);. std::unique_ptr<RooDataHist> data{model.generateBinned(x)};. // If the range is larger than the variable range, the problem is even amplified; model.fitTo(*data, Range(0.0, 5000));.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13030:124,integrat,integrator,124,https://root.cern,https://github.com/root-project/root/issues/13030,1,['integrat'],['integrator']
Integrability,"If you print a default numeric integrator config object, it will tell; you for the RooImproperIntegrator1D:. ```; *** RooImproperIntegrator1D ***; Capabilities: [1-D] [OpenEnded]; Configuration:; (Depends on 'RooIntegrator1D'); ```. However, in almost all of the code branches, it does not use the; `RooIntegrator1D` of the given numeric integrator configuration, but; falls back to the default by not forwarding the configuration to the; created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create; a new configuration object with the required summation rule for the; `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11074:31,integrat,integrator,31,https://root.cern,https://github.com/root-project/root/pull/11074,4,"['Depend', 'integrat']","['Depends', 'integrator']"
Integrability,"Implement a basic buffered page sink, to try and coalesce column page writes within a single cluster. The buffered sink `RPageSinkBuf` wraps another page sink, e.g. `RPageSinkFile` and buffers calls to the inner sink's `CommitPage` method.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7783:135,wrap,wraps,135,https://root.cern,https://github.com/root-project/root/pull/7783,1,['wrap'],['wraps']
Integrability,"Implement proper handling of canvas window size and canvas drawing area size. By default web browser with given window size/position will be started. Depending from context menu,; status line, other layout components drawing area will be reduced to some value and always adjust to that area. With the call `TCanvas::SetCanvasSize(width,height)` one can fix drawing area to exact value, which does not change with web browser resize. One can toggle state either with context menu or by calling ``c1->SetCanvasSize(0,0)`. All browser window position/size changes are reflected in the TCanvas members. Provide JSROOT with new resize logic, also includes support of TLatex in 3D plots",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13268:150,Depend,Depending,150,https://root.cern,https://github.com/root-project/root/pull/13268,1,['Depend'],['Depending']
Integrability,"Implementation of the C++ side of RTensor. This PR replaces #2593. In addition, a second commit adds the feature `TMVA::Experimental::AsTensor`, which reads out an `RDataFrame` node as an `RTensor`. See the tutorials for examples or the short snipplets below. **RTensor basics:**; ```cpp; using namespace TMVA::Experimental;. // Create an RTensor from existing data; float data[] = {1, 2, 3, 4, 5, 6};; RTensor<float> x(data, {2, 3});; std::cout << x << std::endl;; // { { 1, 2, 3 }, { 4, 5, 6 } }. // Reshape the tensor without touching the data; x.Reshape({1, 6});; std::cout << x << std::endl;; // { { 1, 2, 3, 4, 5, 6 } }. // Remove dimensions of 1; x.Squeeze();; std::cout << x << std::endl;; // { 1, 2, 3, 4, 5, 6 }. // Add dimensions; x.ExpandDims(0);; std::cout << x << std::endl;; // { { 1, 2, 3, 4, 5, 6 } }. // Transpose the tensor; x.Transpose();; std::cout << x << std::endl;; // { {1}, {2}, {3}, {4}, {5}, {6} }. // Extract slices as new RTensor objects; x.Reshape({2, 3});; std::cout << x << std::endl;; // { { 1, 3, 5 }, { 2, 4, 6 } }. auto y = x.Slice({-1, 0});; std::cout << y << std::endl;; // { 1, 2 }. auto z = x.Slice({0, -1});; std::cout << z << std::endl;; // { 1, 3, 5 }. // STL iterator interface and range-based loops; for(auto &v: x) v++;; std::cout << x << std::endl;; // { { 2, 4, 6 }, { 3, 5, 7 } }; ```. **TMVA::Experimental::AsTensor usage:**. ```cpp; ROOT::RDataFrame df(5);; auto df2 = df.Define(""x"", ""1.f*rdfentry_"").Define(""y"", ""-1.f*rdfentry_"");; auto x = TMVA::Experimental::AsTensor<float>(df2);; std::cout << x << std::endl;; // { { 0, -0 }, { 1, -1 }, { 2, -2 }, { 3, -3 }, { 4, -4 } }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3221:1213,interface,interface,1213,https://root.cern,https://github.com/root-project/root/pull/3221,1,['interface'],['interface']
Integrability,"Implemented tessellated shape in TGeo, as a wrapper shape without navigation functionality, allowing future conversions to/from Geant4 and VecGeom done by frameworks such as DD4HEP. Currently missing navigation functionality, but having ROOT/GDML persistence support and visualization.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4817:44,wrap,wrapper,44,https://root.cern,https://github.com/root-project/root/pull/4817,1,['wrap'],['wrapper']
Integrability,"Implements `RooLinkedList::begin()`, `end()`, `rbegin()`, `rend()` and; extends the `RooLinkedListIterImpl` interface to support range-based; loops for the `RooLinkedList`. Range-based loops on `RooLinkedList` are also used in some places in; RooFit to test this new feature. In particular the function; `RooCmdConfig::process` is used in basically every RooFit script. This commit also adds `RooLinkedList::size()` and `empty()` for better compatibility with STL containers and automatic pythonizations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8842:108,interface,interface,108,https://root.cern,https://github.com/root-project/root/pull/8842,1,['interface'],['interface']
Integrability,"Improve `TWebCanvas` communication, more use of control messages",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13285:56,message,messages,56,https://root.cern,https://github.com/root-project/root/pull/13285,1,['message'],['messages']
Integrability,Improve diagnostics when interface called with wrong arguments.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1724:25,interface,interface,25,https://root.cern,https://github.com/root-project/root/pull/1724,1,['interface'],['interface']
Integrability,"Improve error message when the requested type doesn't match the on-disk type:; ```cpp; // underlying column is a double; auto view = ntuple->GetView<float>(""myDouble"");; ```. Before:; ```; Unexpected column type: Real64 of column #0 for field myDouble; ```; After:; ```; On-disk type `Real64` of column #0 for field `myDouble` is not convertible to requested type `Real32`; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8227:14,message,message,14,https://root.cern,https://github.com/root-project/root/pull/8227,1,['message'],['message']
Integrability,"Improve logging:; * Add button in menu bar to show the highest severity message; * Show client log message in Dialog instead of popover. Add simple window management: in view menu add items to switch sides, make single, and hide/show views",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9515:72,message,message,72,https://root.cern,https://github.com/root-project/root/pull/9515,2,['message'],['message']
Integrability,"Improve the error message when you try to build NumPy arrays with types; that the interpreter doesn't know about. Running the reproducer from the JIRA ticket, one now gets this output:; ```txt; TClass::Init:0: RuntimeWarning: no dictionary for class Foo is available; { ""a"", ""b"", ""foo"", ""foo.a"", ""foo.b"" }; Traceback (most recent call last):; File ""/home/rembserj/root-support/jira/ROOT-10930/reproducer.py"", line 13, in <module>; print(df.AsNumpy()); ^^^^^^^^^^^^; File ""/home/rembserj/spaces/master/install/lib/root/ROOT/_pythonization/_rdataframe.py"", line 243, in RDataFrameAsNumpy; raise RuntimeError(; RuntimeError: The column named ""foo"" is of type ""Foo"", which is not known to the ROOT interpreter. Please load the corresponding header files or dictionaries.; ```. This was the output before:; ```txt; TClass::Init:0: RuntimeWarning: no dictionary for class Foo is available; { ""a"", ""b"", ""foo"", ""foo.a"", ""foo.b"" }; Traceback (most recent call last):; File ""/home/rembserj/root-support/jira/ROOT-10930/reproducer.py"", line 5, in <module>; print(df.AsNumpy()); ^^^^^^^^^^^^; File ""/home/rembserj/spaces/master/install/lib/root/ROOT/_pythonization/_rdataframe.py"", line 236, in RDataFrameAsNumpy; result_ptrs[column] = df.Take[column_type](column); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^; TypeError: Could not find ""Take<Foo>"" (set cppyy.set_debug() for C++ errors):; Failed to instantiate ""Take<Foo>(std::string)""; ```. Closes the following Jira issue:; https://its.cern.ch/jira/browse/ROOT-10930",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16281:18,message,message,18,https://root.cern,https://github.com/root-project/root/pull/16281,1,['message'],['message']
Integrability,Improved error message on wrong exit code in test driver,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/904:15,message,message,15,https://root.cern,https://github.com/root-project/root/pull/904,1,['message'],['message']
Integrability,Improvements and new interfaces in KahanSum,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/485:21,interface,interfaces,21,https://root.cern,https://github.com/root-project/root/pull/485,1,['interface'],['interfaces']
Integrability,"Improves the interplay of `RPage`, `RPageAllocator`, `RPagePool`, and `RPageSource/Sink`. - The `RPageAllocator` becomes an abstract interface for creating pages and allocating the page buffer.; - There is currently one concrete implementation, the `RPageAllocatorHeap`; - Pages are movable only and release the page buffer on destruction using the page allocator that created them; - The page pool owns pages and hands out `RPageRef` objects, which are proxies for the use counter (reference counter) of the page; - The `RPageRef` class is movable only and decreases the reference counter of the page in the page pool on destruction; - Remove the `RPageStorage::ReleasePage()` method; - `RPageSource::LoadPage` hands out `RPageRef` objects from their page pool",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16164:133,interface,interface,133,https://root.cern,https://github.com/root-project/root/pull/16164,1,['interface'],['interface']
Integrability,"Imt has a header-only dependency on MultiProc, which causes the linker; to discard said dependency on some platforms. By creating an extra symbol; dependency (for instance outlining the constructor using TProcessExecutor); we stabilize the linking.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7070:22,depend,dependency,22,https://root.cern,https://github.com/root-project/root/pull/7070,3,['depend'],['dependency']
Integrability,"In RooAbsPdf, the following check is done to check if the normalization; set has changed:; ```C++; RooFit::getUniqueId(nset) != RooFit::getUniqueId(_normSet); ```. This works, but like the previous pointer comparison it still gives; false results if the `_normSet` was replaced buy another RooArgSet at; the same memory location. The problem can be reproduced with this code:. ```C++; using namespace RooFit;. // Create observables; RooRealVar x(""x"", ""x"", -5, 5);; RooRealVar y(""y"", ""y"", -5, 5);. // Create signal pdf gauss(x)*gauss(y); RooGaussian gx(""gx"", ""gx"", x, RooConst(0), RooConst(1));; RooGaussian gy(""gy"", ""gy"", y, RooConst(0), RooConst(1));; RooProdPdf sig(""sig"", ""sig"", {gx, gy});. // Create composite pdf; RooAddPdf model(""model"", ""model"", RooArgList(sig), RooConst(100.));. // The results of the last two lines depend on the order of execution; // which should not be the case!; std::cout << model.getVal(x) << std::endl;; std::cout << model.getVal({x, y}) << std::endl;; ```. The solution would be to replace the `_normSet` member directly with; its unique ID value, but then it could not be used anymore. Hence we; need both. This commit also adds a new private `RooAbsPdf` member functions to set; the `_normSet` together with the new `_normSetId` member, and one; protected `isActiveNormSet(RooArgSet const*)` function. The latter; function is comparing the input to the current `_normSet`, but shortcuts; to `false` is the ID does not match with the last `_normSet` ID. Like; this, we avoid dereferencing invalid `_normSet` pointers. This change is mainly done to fix several of the ASAN build failures in; RooFit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11176:825,depend,depend,825,https://root.cern,https://github.com/root-project/root/pull/11176,1,['depend'],['depend']
Integrability,"In RooDataSet, there are constructors to create a dataset as a subset of; another RooDataSet or a TTree, passing either a cut string or a; RooFormulaVar as the cut variable. There were two implementations for the cut string and the RooFormulaVar; case, but it's better to implement one in terms of the other to avoid; code duplication and divergence. The RooFormulaVar version has to be implemented in terms of the cut; string version, because the cut string version is more general: it can; also take an empty string, signifying no cut. Removing functions from the public interface of the data store classes is; okay, because as implementation details of the RooFit dataset classes; they are not supposed to be public anyway.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10506:573,interface,interface,573,https://root.cern,https://github.com/root-project/root/pull/10506,1,['interface'],['interface']
Integrability,"In RooFit, there are many functions that return pointers that are owned; by the caller. We can't change this interface anymore, but we can wrap; the return values transparently in a raw pointer wrapper that is called; a `RooFit::Owner`. On the C++ side, this helps to analyze your code and detect potential; memory leaks. On the Python side, we can tell cppyy to take ownership; of the object if the pointer is wrapped in a owning pointer such as the; `RooFit::Owner`. This is more flexible and convenient than the existing; cppyy way of flagging the CPPOverloads on the Python side with the; `__creates__ = True` attribute for at least two reasons:. 1. This flag can't be applied at the granularity of indivirual C++; overloads; 2. It's only on the Python side, so if you want to flag these functions; in C++ as well as in Python you have to do some bookkeeping. A unit test was implemented to check that the `RooFit::Owner` behaves in; Python as expected, and that there is no memory leaking when using; functions that return them. As a first example, the `RooFit::Owner` is used in the highly used; function `RooAbsPdf::generate`, so we also get quite some test coverage; from the tutorials. In the future after this initial effort, the remaining RooFit functions; should be migrated to fix many memory leaks in PyROOT user code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9392:109,interface,interface,109,https://root.cern,https://github.com/root-project/root/pull/9392,4,"['interface', 'wrap']","['interface', 'wrap', 'wrapped', 'wrapper']"
Integrability,"In SPlots, `RooAbsArg::attachDataSet()` is called on the input pdf,; redirecting the parameters of the pdf to the RooRealVars in the dataset.; This is not reversed, leaving the pdf in a corrupt state when the; dataset gets deleted. This can happen in particular if the SPlots object; created an owning clone of the dataset, attaches the pdf, and then goes; out of scope. This commit suggests to not attach the pdf to the dataset, as it is not; necessary. When looping over the dataset and evaluating the pdf later,; the pdf variables get synced with the dataset variables anyway. This was; done via `RooStats::SetParameters`, which is just a wrapper around; `RooAbsCollection::assign()`. I suggest to use `assign()` directly to make; more explicit to the reader what happens. It was verified that SPlot still works correctly, by looking at the output of; the `roostats/rs301_splot.C` tutorial, which is unaffected by this PR. Closes Jira issue [ROOT-8018](https://sft.its.cern.ch/jira/browse/ROOT-8018). A simpler reproducer of the problem based on the notebook in the Jira; issue is this one:. ```Python; import ROOT. bdt = ROOT.RooRealVar(""BDT"", ""some awesome BDT"", 0.0, 1.0); mass = ROOT.RooRealVar(""mass"", ""invariant mass"", 5100.0, 5300, ""MeV/c^{2}""). sigyield = ROOT.RooRealVar(""sigyield"", ""signal yield"", 100, 0, 100000); bkgyield = ROOT.RooRealVar(""bkgyield"", ""background yield"", 900, 0, 100000). bmassPDF = ROOT.RooGaussian(; ""bmass"",; ""B mass shape"",; mass,; ROOT.RooFit.RooConst(5200.0),; ROOT.RooFit.RooConst(20.0),; ); bkgmPDF = ROOT.RooExponential(; ""bkgmass"", ""bkg mass shape"", mass, ROOT.RooFit.RooConst(-1.0 / 200.0); ); combmPDF = ROOT.RooAddPdf(; ""fullmasspdf"",; ""full mass pdf"",; ROOT.RooArgList(bmassPDF, bkgmPDF),; ROOT.RooArgList(sigyield, bkgyield),; ). toydata = combmPDF.generate(ROOT.RooArgSet(bdt, mass), 10000); ROOT.SetOwnership(toydata, True). set1 = ROOT.RooArgList(sigyield, bkgyield); set2 = ROOT.RooArgList(). def make_splot(toydata):; smalldata = toydata.reduce(ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10811:642,wrap,wrapper,642,https://root.cern,https://github.com/root-project/root/pull/10811,1,['wrap'],['wrapper']
Integrability,"In TMVA code the `fLogger` data member appears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: ; ```; tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service; tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/Ra",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9792:165,message,message,165,https://root.cern,https://github.com/root-project/root/issues/9792,10,['message'],['message']
Integrability,"In `RooProdPdf::getConstraints()`, the full computation graph was; traversed two or three times for each component pdf, depending on the; code branch. There were calls to `pdf->dependsOnValue()` and; `pdf->getParameters(&observables)`, but both are very expensive for; large computation graphs because they check if any of the observables is; in the server list of any RooAbsArg in the graph. It is much cheaper to call `pdf->getParameters(nullptr)` to get all; value server variables of a pdf, and then use `overlaps` to check if the; pdf depends on observables or constrained parameters. To get then the set of actual parameters, it is suggested to use; `tmp.remove(observables)`, which is is cheap for RooArgSets because of; the hash-assisted find by name. This commit speeds up the `createNLL()` call for the ATLAS Higgs; combination workspace by 30 %. Here one can see the flamegraphs for createNLL in the ATLAS Higgs combination fit [before this commit](https://rembserj.web.cern.ch/rembserj/flamegraphs/perf_before_11015.svg) and [after](https://rembserj.web.cern.ch/rembserj/flamegraphs/perf_after_11015.svg).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11015:120,depend,depending,120,https://root.cern,https://github.com/root-project/root/pull/11015,3,['depend'],"['depending', 'depends', 'dependsOnValue']"
Integrability,"In a conditional fit, it happens that the value normalization integrals can; be different for every event because a pdf is conditional on another; observable. That's why the integral also has to be evaluated with the batch; interface in general, which this PR implements.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7742:224,interface,interface,224,https://root.cern,https://github.com/root-project/root/pull/7742,1,['interface'],['interface']
Integrability,In case of exception in JavaScript painting code show warning sign and let easily see associated log message. Before some printout was done in browser console which is not easily accessible by users.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16424:101,message,message,101,https://root.cern,https://github.com/root-project/root/pull/16424,1,['message'],['message']
Integrability,In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. Occasionally when loading a shared object the dynamic linker will tell us if something is missing (via dlerror) but only on the intialization path. This patch fixes ROOT-10637.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5235:138,depend,dependencies,138,https://root.cern,https://github.com/root-project/root/pull/5235,1,['depend'],['dependencies']
Integrability,"In civetweb socket handler check different operation codes; According to RFC6455, all not-supported codes should be handled as; failure. Means application should get close message for the socket. Prevent getting close message twice. This PR fixes #9207",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9209:172,message,message,172,https://root.cern,https://github.com/root-project/root/pull/9209,2,['message'],['message']
Integrability,"In cmssw we see that depending on the invoking code the trigger function is; resolved sometimes with the symlink-ed path and sometimes without. This can be observed in the cmssw biglib setup where all plugin libraries; are assembled into a single library to yield performance improvement of (10%). This is seen in cms-sw/cmsdist#5172 where libHistPainter_rdict.pcm is not; found in the fPendingRdicts because it was registered with the 'other'; path. cc: @davidlange6, @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4288:21,depend,depending,21,https://root.cern,https://github.com/root-project/root/pull/4288,1,['depend'],['depending']
Integrability,"In gcc 11, core/meta/src/TEnumConstant.cxx cannot be built.; Error message:; ```; /tmp/root-6.22.06/core/foundation/inc/ROOT/libcpp_string_view.h:275:63: error: ‘numeric_limits’ is not a member of ‘std’; 275 | size_type max_size() const _NOEXCEPT { return (_VSTD::numeric_limits<size_type>::max)(); }; | ^~~~~~~~~~~~~~; ```; This is because <limits> is not explicitly included by core/foundation/inc/ROOT/libcpp_string_view.h. It can be built if the header is included.; https://github.com/root-project/root/blob/71e0b990b889ff292be5bfa79d1f85e15440eaa5/core/foundation/inc/ROOT/RWrap_libcpp_string_view.h#L40-L45",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8513:67,message,message,67,https://root.cern,https://github.com/root-project/root/issues/8513,1,['message'],['message']
Integrability,"In https://github.com/root-project/root/pull/11604, many redundancies in the RooMinimizer design became apparent,; and this PR aims to avoid them. The following changes are made:. * The signature of `RooAbsMinimizerFcn::Synchronize()` is changed to not; take a `bool optConst` argument anymore. Ths is because the value of; the argument that was passed by the RooMinimizer instance was always a; member of the `RooAbsMinimizerFcn` anyway. * Change type of `RooMinimizer::Config::verbose` to `bool`, because; `setVerbose()` also takes a `bool` flag. * Give `RooAbsMinimizerFcn` access to the RooMinimizer configuration; such that configuration data does not need to be duplicated. A separate commit in this PR formats the code of the `RooMinimizerFcn`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11695:220,Synchroniz,Synchronize,220,https://root.cern,https://github.com/root-project/root/pull/11695,1,['Synchroniz'],['Synchronize']
Integrability,"In https://github.com/root-project/root/pull/7616, it was not taken care that the `RooNLLVar` constructor interface changes were backwards compatible, since the affected constructors were considered as internal. However, this caused problems for users nonetheless, hence the interface was changed to be backwards compatible. Closing https://github.com/root-project/root/issues/8976.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8986:106,interface,interface,106,https://root.cern,https://github.com/root-project/root/pull/8986,2,['interface'],['interface']
Integrability,"In older cppyy, template instanciations are cached by fully-qualified; name directly in the namespace. Therefore, no extra code is required to; cover template instances in the pythonization code. With the new cppyy, this is not the case anymore, and instances are; instead cached in the `_instatiations` attribute of the template class [1]. This commit considers this, in a way that is backwards compatible also; with the older cppyy version that ROOT currently uses. A second commit in this PR removes some not so Pythonic ""C++-style"" code from PyROOT. [1] https://github.com/wlav/cppyy/commit/f2e1ea783afd2e4f195b6cbaf09d72b9fa3cd865. Spinoff of the bigger synchronization PR for easier review:; https://github.com/root-project/root/pull/14507",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14940:659,synchroniz,synchronization,659,https://root.cern,https://github.com/root-project/root/pull/14940,1,['synchroniz'],['synchronization']
Integrability,"In order to be able to build unit test support also outside of a ROOT; build (e.g. for standalone roottest or for user tests), the unit test; support library needs to be visible outside of ROOT. Therefore, it is; moved to `core/testsupport`, and now installed and exported under the; name `ROOT::TestSupport` when testing is enabled. A warning message was added to `ROOT_ADD_GTEST` in case this library isn't; found when a new gtest is defined. Fix #9507. ## For reviewers; - [x] I'm not happy with the naming. The folder is `core/test_support`, the library `ROOT::ROOTTestSupport`, but the namespace and the header are historically named `ROOTUnitTestSupport`. Which one?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9528:344,message,message,344,https://root.cern,https://github.com/root-project/root/pull/9528,1,['message'],['message']
Integrability,In order to fix ROOT-10034 a new Executor class has been created.; The class wraps the TExecutor types of ROOT and create in MT running a TThreadExecutor or a TSequentialExecutor. ; This allows to use exactly same code in all TMVA depending on sequential or MT running. ; In addition now the TMVA::Config can control the MT running. The behaviour is the following: ; - ROOT::IsImplicitMTEnabled() = false TMVA uses TSequentialExecutor (no MT); - ROOT::IsImplicitMTEnabled() = true TMVA uses TThreadExecutor with the number of threads provided in ROOT::EnableImplicitMT; - TMVA::gConfig.EnableMT(nthreads) : run MT using TThreadExecutor with nthreads (if the ROOT thread pool has not been created before) otherwise use existing pool; - TMVA::gConfig.DisableMT() - delete TThreadExecutor if it has been created (i.e. release the thread pool) and use TSequentialExecutor,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3585:77,wrap,wraps,77,https://root.cern,https://github.com/root-project/root/pull/3585,2,"['depend', 'wrap']","['depending', 'wraps']"
Integrability,"In order to:; - make the build system less entangled and more maintainable ; - give a solution to the bug mentioned in https://github.com/root-project/root/pull/4939; we move the search for Python installation in a new script called SearchRootCoreDeps, where also the search for main Root dependencies will happen at some point. The misleading 'python' option, which was basically enabling pyroot, is deprecated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4945:289,depend,dependencies,289,https://root.cern,https://github.com/root-project/root/pull/4945,1,['depend'],['dependencies']
Integrability,"In our analysis package we obtain a segfault without traceback when calling InheritsFrom() on an object derived from a TObject. The awkward issue is dependent on the ordering of the objects and dictionaries in the shared library. ; Note: important is the fact, that another class has a static member of that TClass(). The compiled object of the other class can then not be linked before the Dictionary-object of the first class. Maybe it's just my ignorance of a deeper understanding of the whole concept, or maybe it is a bug somewhere. A rather minimum example is attached would look like:; int main() { ; TMyDerivedClass::Class()->InheritsFrom(TObject::Class());; }. Please run `make all`, then `test1` (works) and `test2` does not work, while the difference is only in the order of the objects in the shared library.; I have included into that example another class that works well (as it is not a static member elsewhere.); I have included a Dump() call, and one recognizes the differences for identical objects in the two shared libraries (e.g. fTitle="""", *fData=0, ...). [root_issue.tar.gz](https://github.com/root-project/root/files/5405256/root_issue.tar.gz). We tested with root 6.20 and gcc9.2 (from lcg) and 6.22 and gcc4.8, both on EL7.; The code previously worked well with ROOT 5.34.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6670:149,depend,dependent,149,https://root.cern,https://github.com/root-project/root/issues/6670,1,['depend'],['dependent']
Integrability,"In particular, all creations and deletions of `shared_ptr`s have been removed from the event loop. This is a long due optimization that required several changes in the internal behaviour of TDataFrame{Impl,Action,Branch,Filter}. Unfortunately all changes are entangled, so the third commit is quite fat. The main change to the internal logic is that `TDataFrame{Action,Branch,Filter}` now store a tuple of `TDataFrameValue`s rather than (possibly null) shared pointers to `TTreeReaderValueBase`.; `TDataFrameValue` offers a transparent, unified interface to the different kinds of values that the nodes must handle: temporary columns, to be evaluated on-the-fly, `TTreeReaderArray`s that must be converted to `array_view`s and `TTreeReaderValue`s.; `TDataFrameValue` also incorporates validity checks on the value types, e.g. that arrays read via `TTreeReaderArray` are actually contiguous in memory and that the type of a temporary column is the same as the type expected by the node that makes use of it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/442:545,interface,interface,545,https://root.cern,https://github.com/root-project/root/pull/442,1,['interface'],['interface']
Integrability,"In pass through mode, the RooRealIntegral should have registered the; function as a value server, because we directly depend on its value. It's important to do this correctly, because the new BatchMode uses the; value server interface to analyze the computation graph. Furthermore, it is now ensured that in pass-through mode, no servers are; registered other than the actual function and the additional factorized; observables. There are also some other commits to ensure no invalid proxies are created; via copy/move assignment and construction. Final commit in this PR does some code modernization of the RooRealIntegral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11129:118,depend,depend,118,https://root.cern,https://github.com/root-project/root/pull/11129,2,"['depend', 'interface']","['depend', 'interface']"
Integrability,"In preparation for a future removal of Python 2 support, add the `pyroot-python2` cmake build option (OFF by default). Users who really need Python 2 support can still get it, but warn them that it will be removed in a future ROOT release. This leads to . ```; $: cmake -Dpyroot-python2=ON; [...]; CMake Warning at cmake/modules/SearchRootCoreDeps.cmake:153 (message):; Building ROOT with Python 2 support is deprecated. The support for Python 2; will be removed in ROOT version 6.32.; Call Stack (most recent call first):; CMakeLists.txt:169 (include); ```. ```; $: python -c ""import ROOT""; /home/vpadulan/Programs/rootproject/rootbuild/py2-cmake-test-conda-py2/lib/ROOT/__init__.py:36: DeprecationWarning: The support for Python 2 in ROOT is deprecated. It will be removed in ROOT version 6.32.; ""ROOT version 6.32."", category=DeprecationWarning); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13606:359,message,message,359,https://root.cern,https://github.com/root-project/root/pull/13606,1,['message'],['message']
Integrability,"In preparation of moving TError to foundation, this PR removes the direct use of gEnv and gSystem from TError. The functionality is implemented by helper functions instead, which are registered and de-registered upon creation and destruction gEnv and gSystem. The three tasks implemented by helpers are. - Read the ROOT environment in order to get the value of `Root.ErrorIgnoreLevel`; - Get the last system error message; - Abort the process",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5855:414,message,message,414,https://root.cern,https://github.com/root-project/root/pull/5855,1,['message'],['message']
Integrability,"In roottest (sorry, that repo has issues disabled), test dependencies specified as shown below do not work:. ```cmake; if(NOT MSVC OR win_broken_tests); ROOTTEST_GENERATE_REFLEX_DICTIONARY(One One.h SELECTION One_selection.xml NO_ROOTMAP); set(depends ${GENERATE_REFLEX_TEST}). ROOTTEST_GENERATE_REFLEX_DICTIONARY(Two Two.h SELECTION Two_selection.xml NO_ROOTMAP); set(depends ${depends} ${GENERATE_REFLEX_TEST}). ROOTTEST_ADD_TEST(execLoadLibs; MACRO execLoadLibs.C; OUTREF execLoadLibs.oref; ERRREF execLoadLibs.eref; DEPENDS ${depends}); endif(); ```; I had the `execLoadLibs` test failing for me until I ran all three tests by hand. That's from `roottest/root/meta/ROOT-5694/CMakeLists.txt`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7978:57,depend,dependencies,57,https://root.cern,https://github.com/root-project/root/issues/7978,6,"['DEPEND', 'depend']","['DEPENDS', 'dependencies', 'depends']"
Integrability,"In some case when calling `RooAddPdf::generate` an evaluation of the RooAddPdf happens without the normalisation set defined, causing the priting of a Warning message. Since in this case the evaluation result is not used we can suppress this message. ; Here is the example code reproducing this:; ```; void testRooAddPdfGenerate() {. RooWorkspace w(""w"");. w.factory(""Gaussian::f1(x[0,10],m1[3,0,10],s1[1,0,10])"");; w.factory(""Gaussian::f2(x,m2[7,0,10],s2[0.5,0,10])"");; w.factory(""SUM::sigPdf(n1[1000,0,100000]*f1, n2[1000,0,100000]*f2)"");; w.factory(""Gaussian::bkgPdf(x,mb[5,0,10],sb[7,0,10])"");; w.factory(""sum::ns(n1,n2)"");; w.factory(""SUM::model(ns*sigPdf,nb[2000,0,100000]*bkgPdf)"");; ; auto x = w.var(""x"");; auto pdf = w.pdf(""model"");. auto data = pdf->generate(*x);. ; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10235:159,message,message,159,https://root.cern,https://github.com/root-project/root/pull/10235,2,['message'],['message']
Integrability,"In some cases with template instantiation from pyroot together with RDF code which should fail to compile with clear error messages leads instead to cryptic output. Even worse, execution continues and gives undefined results. Example. ```python; import ROOT. ret = ROOT.gInterpreter.Declare('#include ""test.h""'). print(""declare ret"", ret). print(""creating helper""); helper = ROOT.helper[ROOT.std.vector[""double""]](). d = ROOT.ROOT.RDataFrame(1000). print(""Define with helper""); d = d.Define(""fx"", helper, []); print(""done define""). res = d.Sum(""fx""). print(res.GetValue()); ```. ```cpp; template <typename T>; class helper {. public:. helper() {}. std::size_t operator() () {; const double res = 0.;; res = T{0, 0}.size();; return res;; }. };; ```. Note the assignment to ```const double``` which should fail to compile. output (centos stream 8, root 6.26/10); ```; declare ret True; creating helper; Define with helper; IncrementalExecutor::executeFunction: symbol '_ZN6helperISt6vectorIdSaIdEEEclEv' unresolved while linking symbol '__cf_13'!; You are probably missing the definition of helper<std::vector<double, std::allocator<double> > >::operator()(); Maybe you need to load the corresponding shared library?; done define; 9.408421539373414e+16; ```. (if the spurious const is removed then instead one gets the correct output of 2000 and no error message)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11854:123,message,messages,123,https://root.cern,https://github.com/root-project/root/issues/11854,2,['message'],"['message', 'messages']"
Integrability,"In the Belle2 Software the libraries are linked with `--as-needed`; linker arguments and in conjunction with the weird loading order (binary; depends on ROOT, load python, load library depending on ROOT) we seem to; run into problems that libCling is unloaded earlier than expected. Since the `TCling_UnloadMarker` was introduced for Belle2 and removal; doesn't seem to cause any problems we discussed in [ROOT-10659](https://sft.its.cern.ch/jira/browse/ROOT-10659) to remove; this again and it so far all tests on our software stack didn't show any; problems with that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5548:142,depend,depends,142,https://root.cern,https://github.com/root-project/root/pull/5548,2,['depend'],"['depending', 'depends']"
Integrability,"In the ROOT 6.26 development cycle, the RooProdPdf was partially rewritten in moden C++ with less manual memory allocation to improve performance (PR #7907). In that PR, a unit test that verifies the RooProdPdf can correctly deal with factorizing PDFs was implemented. However, that test used an arbitrary PDF where the correct factorization was checked in a rather crude way: check by hashing the content of the RooProdPdf cache element for a given normalization set that said PR doesn't change any behavior (the reference hash was hardcoded in the unit test). This commit suggests a better alternative for the unit test, checking for a multidimensional product pdf of factorizing uniform pdfs that the pdf values for differenc normalization sets is as expected. This should cover the same functionality and is less fragile and implementation dependend than hashing the cache elements. This closes GitHub issue #12430, as the rewritten test is not affected anymore by the problem reported in that issue. The commit also removed the `RooProdPdf::writeCacheToStream()` function that was an implementation detail of the old unit test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12447:844,depend,dependend,844,https://root.cern,https://github.com/root-project/root/pull/12447,1,['depend'],['dependend']
Integrability,"In the RooBatchCompute CPU library, all scalar inputs have to be copied; n times into a buffer that is as long as the SIMD registers, to allow; for vectorization in all cases. To avoid frequent memory allocations, this buffer was made a `static`; variable in the original implementation of the batchcompute library,; which of course made it non-threadsafe. This is now hitting us, because RooFit needs to be able to do multiple; fits concurrently. This is a requirement for CMSSW, and a blocker for; ROOT master adoption in CMSSW since the new CPU backend is the default:; https://github.com/cms-sw/cmsdist/pull/9034. This commit fixes the concurrency problem by doing the buffering in the; DataMaps that are used in the `RooFit::Evaluator`. Like this, multiple; computation graphs can be concurrently evaluated. It was tested with the ATLAS benchmarks in `rootbench` that the fitting; performance remains the same. This PR also makes some code style and memory management improvements documented in the commit messages. It also updates the documentation to make clear the new CPU backend is now the default, which was not done in this PR:; https://github.com/root-project/root/pull/14742",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14877:1011,message,messages,1011,https://root.cern,https://github.com/root-project/root/pull/14877,1,['message'],['messages']
Integrability,"In the RooChi2Var, there was another case of inconsistency between; constructors that seemingly do the same but actually don't. A RooChi2Var should be created with the constructors that take RooFit; command arguments. However, there were also other constructors used by; the RooFit test statistic implementation details (i.e. in; `RooAbsOptTestStatistic::create`) that when used with default aruments; behave inconsistently with the command arg constructors: the default; error type is different, and errors will be estimated from the pdf and; not from the data. This lead to the confusing situation that when creates a `RooChi2Var`; without any command arguments, the default error mode is suddenly; different. This inconsistency should be removed by having only the; command argument constructors part of the public interface. Making these constructors private should not be a problem. There were; already considered implementaiton details before, and their interface; was already changed anyway to use the configuration structs in 6.26.; Nobody has complained about that so far. Closes #10557.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10566:818,interface,interface,818,https://root.cern,https://github.com/root-project/root/pull/10566,2,['interface'],['interface']
Integrability,"In the RooPoisson integration code, it is hardcoded to return 1.0 if the upper boundary is infinite. But this should only be done if the lower boundary is not greater than zero. Closes #10868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11697:18,integrat,integration,18,https://root.cern,https://github.com/root-project/root/pull/11697,1,['integrat'],['integration']
Integrability,"In the RooRealIntegral and RooGenProdProj classes, the normalization sets were so far not forwarded to the servers, which resulted in undefined normalization sets for integrated PDFs as reported in #11476. A unit test that covers #11476 and the related JIRA issue ROOT-9436 is also implemented. Closes #11476.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11696:167,integrat,integrated,167,https://root.cern,https://github.com/root-project/root/pull/11696,1,['integrat'],['integrated']
Integrability,"In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12699:89,integrat,integration,89,https://root.cern,https://github.com/root-project/root/pull/12699,4,['integrat'],['integration']
Integrability,"In the `RooRealIntegral` constructor, there was a `O(N^2)` operation on; the computation graph, checking the dependency of the top-level function; on each other node. This is very expensive in the numer of RooAbsArgs N; is large. Instead of calling `dependsOnValue` for each leaf node, which is; very expensive because it's a recursive function, the value server; leaves are all put in a RooArgSet before the leaf iteration to check; quickly if a leaf is also a value server. This change speeds up the `createNLL` step of large models like the; ATLAS Higgs combination by at least a factor of two or three. In the same PR, I also bring a little other commit, where the ownership of the `cloneSet` in `cloneTree` is released before removing the top node element, in order to avoid ownership ambiguities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10959:109,depend,dependency,109,https://root.cern,https://github.com/root-project/root/pull/10959,2,['depend'],"['dependency', 'dependsOnValue']"
Integrability,"In the `getParameters()` implementation of the RooFitDriver wrapper,; there was a call to `RooAbsArg::getParameters()`, which is expensive. It's better to let the Driver figure out what the parameters are, given; that it already stores all the information to figure this out very; quickly. This speeds up the likelihood creation for ATLAS Higgs combination; models by about 20 % when using the BatchMode. This commit also fixes some memory leaks in the `compileForNormSet()` implementations that were put there on purpose in lack of a better solution at the time, but now they are not needed anymore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13020:60,wrap,wrapper,60,https://root.cern,https://github.com/root-project/root/pull/13020,1,['wrap'],['wrapper']
Integrability,"In the `master` nightlies on Ubuntu 22.04, we see some warnings caused by civentweb:; https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2204,SPEC=soversion,V=master/lastBuild/parsed_console/. ```; warning: ‘SHA1_Init’ is deprecated: Since OpenSSL 3.0 [-Wdeprecated-declarations]; 12345 | SHA1_Init(&sha_ctx);; warning: ‘SHA1_Update’ is deprecated: Since OpenSSL 3.0 [-Wdeprecated-declarations]; warning: ‘SHA1_Final’ is deprecated: Since OpenSSL 3.0 [-Wdeprecated-declarations]; ```. Usage of these deprecated functions has been removed in the civetweb master branch:; https://github.com/civetweb/civetweb/pull/1072. Hence, once civetweb 1.16 is out, the code should by synchronized again with the ROOT repository to avoid these warnings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10403:726,synchroniz,synchronized,726,https://root.cern,https://github.com/root-project/root/issues/10403,1,['synchroniz'],['synchronized']
Integrability,"In the course of reducing dependencies in `TError.[hxx|cxx]`, replace the `TVirtualMutex` type of `gErrorMutex` by `std::mutex`. Note the other changes. - `gErrorMutex` is not exported anymore (@Axel-Naumann this breaks backwards-compatibility _if_ anyone is actually using the symbol... what do you think?); - `gErrorMutex` is not a pointer anymore but it is a global, though anonymous-namespaced, `std::mutex`; this means init-time construction of a non-PoD type, which might be a problem. We get around taking the big ROOT lock for initializing the pointer though.; - Slight adjustments to the includes",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5762:26,depend,dependencies,26,https://root.cern,https://github.com/root-project/root/pull/5762,1,['depend'],['dependencies']
Integrability,"In the current development cycle leading up to ROOT 6.28, there was some performance regression in RooStats tutorials like `HybridInstructional.C`, which can be seen for example in this CI bot comment:. https://github.com/root-project/root/pull/11740#issuecomment-1333720963. For some reason, there are now numeric integrals in the log that don't pop up in ROOT 6.26:; ```; [#1] INFO:NumericIntegration -- RooRealIntegral::init(py_Int[b]) using numeric integrator RooIntegrator1D to calculate Int(b); [#1] INFO:NumericIntegration -- RooRealIntegral::init(px_Int[b]) using numeric integrator RooIntegrator1D to calculate Int(b); [#1] INFO:NumericIntegration -- RooRealIntegral::init([py_X_prior_b_X_px]_Norm[b]_denominator_Int[b]) using numeric integrator RooIntegrator1D to calculate Int(b); [#1] INFO:NumericIntegration -- RooRealIntegral::init(py_Int[b]) using numeric integrator RooIntegrator1D to calculate Int(b); [#1] INFO:NumericIntegration -- RooRealIntegral::init(px_Int[b]) using numeric integrator RooIntegrator1D to calculate Int(b); ```. RooFit in ROOT master needs to be fixed again such that these integrals don't happen. Since this is a performance regression, the priority to fix this is high. A simpler script to reproduce the performance regression outside of RooStats is this one:; ```C++; void repro(); {; RooWorkspace w;; w.factory(""Poisson::px(x[150,0,500],b[100,0,300])"");; w.factory(""Poisson::py(y[100,0,500],prod::taub(tau[1.],b))"");; w.factory(""Uniform::prior_b(b)"");; w.factory(""PROD::foo(px|b,py,prior_b)"");. RooRealVar& x = *w.var(""x"");; RooRealVar& b = *w.var(""b"");; RooAbsPdf& foo = *w.pdf(""foo"");. std::unique_ptr<RooAbsReal> integ{foo.createIntegral({b}, {b, x})};. for(int i = 0; i < 10; ++i) {; x.setVal(i % 500);. std::cout << integ->getVal() << std::endl;; }; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11814:453,integrat,integrator,453,https://root.cern,https://github.com/root-project/root/issues/11814,5,['integrat'],['integrator']
Integrability,"In the current implementation of `RooDataSet::reduceEng`, the dataset; itself was queried to get the weight variable used in the reduced; dataset. This didn't work with the `RooCompositeDataStore`, because a; dataset with this data store doesn't have a weight variable, as these; are encapsulated in the components of the composite store. Hence,; reducing a weighted dataset with a RooCompositeDataStore yields an; unweighted dataset, which is a bug. To fix this problem, this commit implements a separate reduction logic; for the RooCompositeDataStore: the components are now reduced; individually, instead of naively creating a RooCompositeDataStore from a; RooVectorDataStore/RooTreeDataStore. To avoid further code branches in; RooDataSet, a new virtual function `RooAbsDataStore::reduce` is; introduced. The first two commits update the data reduction implementation details such the bugfix is easier to implement (see commit messages for more details). This closes https://github.com/root-project/root/issues/6951.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10397:931,message,messages,931,https://root.cern,https://github.com/root-project/root/pull/10397,1,['message'],['messages']
Integrability,"In the discussion thread to JIRA ticket ROOT-10864, Axel suggested the removal of the option to disable minuit2 as a possible solution. I think this is a very good idea good idea, because:. * Minuit2 only depends on `Hist` and `MathCore` anyway. * Now that Minuit2 is the default for *all* minimization in ROOT, building ROOT without Minuit2 changes the behavior of ROOT way too much, in a ways that people that set `minuit2=OFF` probably are not intending or aware of. This closes the following JIRA ticket:; https://sft.its.cern.ch/jira/browse/ROOT-10864",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14100:205,depend,depends,205,https://root.cern,https://github.com/root-project/root/pull/14100,1,['depend'],['depends']
Integrability,"In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:; ```; Direct leak of 16 byte(s) in 1 object(s) allocated from:; #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599); #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370; #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108; ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15477:1124,Interface,InterfaceUtils,1124,https://root.cern,https://github.com/root-project/root/pull/15477,1,['Interface'],['InterfaceUtils']
Integrability,"In the past, it was possible to build the [roottest suite](https://github.com/root-project/roottest) standalone, just having ROOT sourced in your environment. This possibility is also advertised in the README.md of roottest. After https://github.com/root-project/root/commit/56c6ace5340003a9135d565f4d5fa68be67aa0d5, it is not possible anymore to do that, because the unit tests depend on the `ROOTUnitTestSupport` library which is only available at ROOT compile time. Maybe a possible solution is to install the `ROOTUnitTestSupport` library as part of ROOT? I don't know what's the best solution here, so I'm only opening an issue for now. But I think this need to be fixed before the next ROOT release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9507:379,depend,depend,379,https://root.cern,https://github.com/root-project/root/issues/9507,1,['depend'],['depend']
Integrability,"In this PR I implement the skeleton of the batch compute library as well as the new class RooFitDriver, which manages all the computations that need to be done in a fit and redirects them to the RooBatchCompute library. RooFitDriver: scans the computation graph for the dependencies, handles the memory needed for the computations, schedules the order of the computations (in the future it will also schedule multi-threaded computations). In other words it ""drives"" the computation library. RooBatchCompute: the library responsible for performing the actual computations. Each instance of it (eg RooBatchCompute_AVX, RooBatchCompute_CUDA etc) has architecture-specific code. To use it, one (a PDF or another RooAbsReal class) should call rbc::dispatch() and provide the enum name of the computing function to be used, the array in which the output should be store, the number of events and an rbc::DataMap object which holds the values for every parameter and observable in the fit model.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8240:270,depend,dependencies,270,https://root.cern,https://github.com/root-project/root/pull/8240,1,['depend'],['dependencies']
Integrability,"In this PR:. - Protection against null pointer dereference if fOff==nullptr.; - Better error messages if the images cannot be loaded. . Tag @couet . Also, I've tried to compile ROOT version with -Dgminimal=ON but it turns out one needs also -Dasimage=ON to make it for ROOT possible to load the standard pixmaps. Would that make sense to include the support of these pixmaps into -Dgminimal ?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6714:93,message,messages,93,https://root.cern,https://github.com/root-project/root/pull/6714,1,['message'],['messages']
Integrability,"In v6-30 we no longer record the kIsOnHeap and kNotDeleted, however older version of ROOT do not yet set them properly when reading. This leads to spurrious error message like:. ```; Error in <TList::Clear>: A list is accessing an object (0x2d77b50) already deleted (list name = TList); ```. But also failure in some case where action is not taken because the object is incorrect thought to be already deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12845:163,message,message,163,https://root.cern,https://github.com/root-project/root/pull/12845,1,['message'],['message']
Integrability,"In working in #8709, several RooFit issues were found. They often concern cmake and misconfigured dependencies, but also a few code things.; Here, I collected them in a branch to facilitate reviewing #8709 later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12536:98,depend,dependencies,98,https://root.cern,https://github.com/root-project/root/pull/12536,1,['depend'],['dependencies']
Integrability,"In writing a paper I noticed that although I promised that users can exchange the integrator of RooBinSamplingPdf,; they cannot. They can only alter options of the existing integrator.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6921:82,integrat,integrator,82,https://root.cern,https://github.com/root-project/root/pull/6921,2,['integrat'],['integrator']
Integrability,Include New Deep Learning Module with support for CNN.; Integrate the development of the 2017 GSOC students.; For the moment this PR does not include the RNN and the DAE,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1826:56,Integrat,Integrate,56,https://root.cern,https://github.com/root-project/root/pull/1826,1,['Integrat'],['Integrate']
Integrability,"Include `gsl_integration.h` in RooFitMore instead of copy-pasting code from gsl. The linking is done in the same was as in `math/mathmore/CMakeLists.txt`. This should add no additional dependency compilcations, because RooFitMore already linked against MathMore, which requires GSL to be present. The copy-pasted code was present in that file for at least 19 years now:; https://github.com/root-project/root/blob/11067c129e04ea8ec9f620b66ee89ab03c726174/roofitcore/src/RooAdaptiveGaussKronrodIntegrator1D.cxx. Probably it was easier in that time to copy-paste than to manage the dependencies correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13701:185,depend,dependency,185,https://root.cern,https://github.com/root-project/root/pull/13701,2,['depend'],"['dependencies', 'dependency']"
Integrability,"Include two new status values, may cause problem when; showing error messages for such value",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7219:69,message,messages,69,https://root.cern,https://github.com/root-project/root/pull/7219,1,['message'],['messages']
Integrability,Includes moving CommitCluster out of the public RFieldBase interface.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14591:59,interface,interface,59,https://root.cern,https://github.com/root-project/root/pull/14591,1,['interface'],['interface']
Integrability,Incorrect Dependency on VDT,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11797:10,Depend,Dependency,10,https://root.cern,https://github.com/root-project/root/issues/11797,1,['Depend'],['Dependency']
Integrability,Increase gDebug level needed for too frequent messages in TFoamVect.cxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6835:46,message,messages,46,https://root.cern,https://github.com/root-project/root/pull/6835,1,['message'],['messages']
Integrability,"Increase the speed of BDT training. For regression analysis with Grad boosting, the speed gain is almost 2x.; For multiclass the gain depends on the number of multiclasses.; For classification: haven't done the test. Non BDT algorithms will also be faster (assuming the progress bar is enabled).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/100:134,depend,depends,134,https://root.cern,https://github.com/root-project/root/pull/100,1,['depend'],['depends']
Integrability,Initial python command line interface to TSimpleAnalysis.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/236:28,interface,interface,28,https://root.cern,https://github.com/root-project/root/pull/236,1,['interface'],['interface']
Integrability,"Inject the ""_tls_array"" constant (0x2C) symbol to avoid unresolved symbol er…",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1804:0,Inject,Inject,0,https://root.cern,https://github.com/root-project/root/pull/1804,1,['Inject'],['Inject']
Integrability,Injecting class span inside the std namespace is asking for problem,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13042:0,Inject,Injecting,0,https://root.cern,https://github.com/root-project/root/issues/13042,1,['Inject'],['Injecting']
Integrability,"Instead of looking for libraries resolving each unresolved symbol,; just load each lib resolving symbols: this will allow subsequent; missing symbols to be resolved from the loaded library quickly,; without touching disk. When loading an existing ACLiC library, and if we expect it; to contain the dependencies (explicit linking), just load itt,; instead of trying to (re-)determine its dependencies from its; undefined symbols: the outcome should be just the library; dependencies we expect the library to know already.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8017:298,depend,dependencies,298,https://root.cern,https://github.com/root-project/root/pull/8017,3,['depend'],['dependencies']
Integrability,"Instead of using one `RPageSinkBuf` per context, implement a synchronizing page sink that compresses pages and writes them through to storage, but only commits them when the context's cluster is ready. This uses much less memory, but results in higher lock contention and very fragmented files. ---. We likely don't want to merge this because buffered writing offers better scalability *and* allows to reorder pages, resulting in better read performance. But for future reference, this is how it could be implemented.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14939:61,synchroniz,synchronizing,61,https://root.cern,https://github.com/root-project/root/pull/14939,1,['synchroniz'],['synchronizing']
Integrability,"Instr,std::default_delete<llvm::GIMatchDagInstr>> *)' [C:\Users\bellenot\build\x64\release\interpreter\llvm\src\utils\TableGen\GlobalISel\LLVMTableGenGlobalISel.vcxproj]; interpreter\llvm\src\utils\TableGen\GlobalISel\GIMatchDag.cpp(51,11): message : note: qualification adjustment (const/volatile) may be causing the ambiguity [C:\Users\bellenot\build\x64\release\interpreter\llvm\src\utils\TableGen\GlobalISel\LLVMTableGenGlobalISel.vcxproj]; interpreter\llvm\src\utils\TableGen\GlobalISel\GIMatchDag.cpp(85,11): error C2666: 'llvm::format': overloaded functions have similar conversions [C:\Users\bellenot\build\x64\release\interpreter\llvm\src\utils\TableGen\GlobalISel\LLVMTableGenGlobalISel.vcxproj]; interpreter\llvm\src\include\llvm/Support/Format.h(124,29): message : could be 'llvm::format_object<const std::unique_ptr<llvm::GIMatchDagPredicate,std::default_delete<llvm::GIMatchDagPredicate>> *> llvm::format<const std::unique_ptr<llvm::GIMatchDagPredicate,std::default_delete<llvm::GIMatchDagPredicate>>*>(const char *,const std::unique_ptr<llvm::GIMatchDagPredicate,std::default_delete<llvm::GIMatchDagPredicate>> *const &)' [C:\Users\bellenot\build\x64\release\interpreter\llvm\src\utils\TableGen\GlobalISel\LLVMTableGenGlobalISel.vcxproj]; C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\format(3526,20): message : or 'std::wstring std::format<const std::unique_ptr<llvm::GIMatchDagPredicate,std::default_delete<llvm::GIMatchDagPredicate>>*>(const std::basic_format_string<wchar_t,const std::unique_ptr<llvm::GIMatchDagPredicate,std::default_delete<llvm::GIMatchDagPredicate>> *>,const std::unique_ptr<llvm::GIMatchDagPredicate,std::default_delete<llvm::GIMatchDagPredicate>> *&&)' [found using argument-dependent lookup] [C:\Users\bellenot\build\x64\release\interpreter\llvm\src\utils\TableGen\GlobalISel\LLVMTableGenGlobalISel.vcxproj]; interpreter\llvm\src\utils\TableGen\GlobalISel\GIMatchDag.cpp(85,11): message : 'std::wstring std::format",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12523:6365,message,message,6365,https://root.cern,https://github.com/root-project/root/pull/12523,1,['message'],['message']
Integrability,"Integrals of derived PDFs have their client-server interface messed up,; and it's inconsistent with non-derived PDFs. Here is a reproducer:. ```C++; void repro() {; using namespace RooFit;; RooRealVar x(""x"", """", 0, 1);. RooRealVar par(""par"", """", -0.005, -5, 5);; RooProduct parMod(""par_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));; RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};; integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};; integ2->Print(""v"");; }; ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):; ```; (0x7ffc9b9bf798,-S) RooRealVar::x """"; (0x7ffc9b9bf240,--) RooGaussian::gauss """"; (0x7ffc9b9bff68,V-) RooProduct::par_mod """"; (0x55ac531cd470,V-) RooConstVar::2 ""2""; ```. The integral of the `RooGenericPdf` should have the same value servers,; but it doesn't. Instead, it uses the leaves of the computation graph:; ```; (0x7ffc9b9bf798,-S) RooRealVar::x """"; (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """"; (0x7ffc9b9bfb80,V-) RooRealVar::par """"; (0x55ac51984c50,V-) RooConstVar::10 ""10""; (0x55ac531cd470,V-) RooConstVar::2 ""2""; ```. That means, the direct value server `par_mod` is **skipped** now,; misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the; `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it; wrong. That's why this commit suggests to change the logic in `RooRealIntegral`; to always add the next direct value servers that don't depend on the; integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the; mathematically direct value servers and not the computation graph leaves; is also implemented. Closes https://github.com/root-project/root/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11597:51,interface,interface,51,https://root.cern,https://github.com/root-project/root/pull/11597,1,['interface'],['interface']
Integrability,Integrate Bitshuffle pre-conditioner for LZ4,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6221:0,Integrat,Integrate,0,https://root.cern,https://github.com/root-project/root/pull/6221,1,['Integrat'],['Integrate']
Integrability,Integrate [Bitshuffle pre-conditioner](https://github.com/kiyo-masui/bitshuffle) to LZ4 compression algorithm.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6221:0,Integrat,Integrate,0,https://root.cern,https://github.com/root-project/root/pull/6221,1,['Integrat'],['Integrate']
Integrability,Integrate clad,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1563:0,Integrat,Integrate,0,https://root.cern,https://github.com/root-project/root/pull/1563,1,['Integrat'],['Integrate']
Integrability,"Integrating a RooAbsRealLValue like a RooRealVar doesn't work in RooFit,; which one can check with this code:. ```C++; RooRealVar x{""x"", ""x"", 2.0, -5.0, 5.0};; std::unique_ptr<RooAbsReal> xint{x.createIntegral(x)};; xint->Print();; ```. The integral of x from -5 to 5 should be zero, but the integral object; only returns the current value of the variable. Some users expect the integral to work, and give the same result as; this, which correctly prints out zero:. ```C++; RooRealVar x{""x"", ""x"", 2.0, -5.0, 5.0};; RooProduct xId{""xId"", ""xId"", RooArgList{x}};; std::unique_ptr<RooAbsReal> xint{xId.createIntegral(x)};; xint->Print();; ```. This is assumed in two RooFit unit tests:. * [testRooWrapperPdf](https://github.com/root-project/root/blob/master/roofit/roofitcore/test/testRooWrapperPdf.cxx#L27); * [testNestedPDFs](https://github.com/guitargeek/roottest/blob/master/root/roofitstats/vectorisedPDFs/testNestedPDFs.cxx#L45) in roottest. Both tests **work only by chance** because the stored x value is the; same as its integral! As soon as the x value or limits would change, the; results don't make sense anymore. As the integration of RooAbsRealLValues never worked correctly and was; not used anywhere outside artificial unit tests, this commit suggests so; prohibit the integration of RooAbsRealLValues by throwing an exception; if `RooAbsRealLValue::createIntegral()` is called. Related to https://github.com/root-project/roottest/pull/894.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11162:0,Integrat,Integrating,0,https://root.cern,https://github.com/root-project/root/pull/11162,3,"['Integrat', 'integrat']","['Integrating', 'integration']"
Integrability,Integration of Qt5Web and CEF Web Displays for ROOT 7,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1663:0,Integrat,Integration,0,https://root.cern,https://github.com/root-project/root/pull/1663,1,['Integrat'],['Integration']
Integrability,Integration of all different layers in one Deep Learning module.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/817:0,Integrat,Integration,0,https://root.cern,https://github.com/root-project/root/pull/817,1,['Integrat'],['Integration']
Integrability,Integration of improvements suggested by running clang-tidy on the CrossValidation class.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2630:0,Integrat,Integration,0,https://root.cern,https://github.com/root-project/root/pull/2630,1,['Integrat'],['Integration']
Integrability,Integration of rootbench repository into ROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1142:0,Integrat,Integration,0,https://root.cern,https://github.com/root-project/root/pull/1142,1,['Integrat'],['Integration']
Integrability,"Intel Compiler cannot compile this piece of code:. static constexpr unsigned attrIdxToArrayIdx(unsigned Index) {; // MSVC warns about '~0U + 1' wrapping around when this is called on; // FunctionIndex, so cast to int first.; return static_cast<int>(Index) + 1;; }. int main(int, char**) {. static_assert(attrIdxToArrayIdx(~0U) == 0U, ""FOO"");; return 0;; }. The problem can be worked around by including the uncessary cast in an #ifdef; for MSVC, which is the only compiler that needs it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1372:144,wrap,wrapping,144,https://root.cern,https://github.com/root-project/root/pull/1372,1,['wrap'],['wrapping']
Integrability,"Introduce yet another layer of abstraction in ROpaqueTaskArena,; a class inheriting from tbb::task_arena that will allow us to keep; tbb hidden from ROOT interfaces while solving the issue of having to; forward-declare tbb::task_arena in an interface-dependent way. Thanks @Axel-Naumann !",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7062:154,interface,interfaces,154,https://root.cern,https://github.com/root-project/root/pull/7062,2,['interface'],"['interface-dependent', 'interfaces']"
Integrability,"Introduces an RNTupleDescriptor directory class that stores the field structure, the attached columns and their structure, as well as the cluster structure. The descriptor can be used independently of the concrete page storage implementation. Serialization and deserialization of header and footer does not depend on libCore. Along the way, this PR also straightens up naming: field names are now relative to their parent fields, i.e. fields are identified by (name, parent id). Columns have no names anymore. Columns are identified by (field id, column index). At some point we can add the possibility to address nested fields by a fully qualified name, e.g. in views. At the moment that's not yet necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4134:307,depend,depend,307,https://root.cern,https://github.com/root-project/root/pull/4134,1,['depend'],['depend']
Integrability,"Introduces the ""trivially constructible"" and ""trivially destructible"" traits for the types wrapped by an RField. Maintaining these traits allows for optimizations when reading collections: for collections of simple types (e.g., `int`s, `float`s), we don't need to call the element constructors and destructors when the collection changes size from event to event. For the vector-heavy ATLAS OpenData benchmark, this results in a 5-10% performance improvement both with RDF and with RNTuple views (hot disk cache, zstd compressed input). Fixes #10520",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11628:91,wrap,wrapped,91,https://root.cern,https://github.com/root-project/root/pull/11628,1,['wrap'],['wrapped']
Integrability,Introduces the RFieldBase::RDeleter functor that can destroy a value created by an RField. The deleter interface is virtual and RField descendents implement their own version of it. The deleter works without the corresponding field and therefore is the basis to hand out shared pointers to objects in the RValues returned by the field. Also switches to new and delete for allocation instead of malloc/free.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14380:103,interface,interface,103,https://root.cern,https://github.com/root-project/root/pull/14380,1,['interface'],['interface']
Integrability,"Introducing RTreeViewer, integrated with RBrowser. Activated when `TTree` item clicked in the browser. Main features:; 1. Edit draw expressions, cut, options; 2. Input help branch/leafs names as suggested items; 3. Select dialog with fulllist and search over branch list; 4. Drawing performed into recent canvas created in `RBrowser`. Several changes in RBrowser to let implement special features required by tree viewer - ; like activate canvas widget after tree draw. ![tree_draw0](https://user-images.githubusercontent.com/4936580/195348575-b207f199-35fc-4cd6-8d09-d2894c5dba16.png); ![tree_draw1](https://user-images.githubusercontent.com/4936580/195348581-30ca4aae-9d27-4f42-98e7-dc5b596cbefc.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11548:25,integrat,integrated,25,https://root.cern,https://github.com/root-project/root/pull/11548,1,['integrat'],['integrated']
Integrability,"Introducing a class acting as a heterogenuous container to store; metadata. Since the intended use case would be obtaining metadata from; json files, the nlohmann::json is used as the underlying container.; This required an extra dependency in tree/dataframe. The RDatasetSpec now only has attributes (treenames, fileglobs, friendinfo,; entryrange, groupinfo), getters and only a single ctor taking a RSpecBuilder.; The user is no longer supposed to build a RDatasetSpec directly.; Therefore all corresponding tests are now removed. The RSpecBuilder has exactly the same attributes as RDatasetSpec, and writable; methods only - e.g. AddGroup, WithFriends, WithRange, Build (but no getters). The RLoopManager now has an extra attribute storing the group; information. It could be set only by the ctor taking a RDatasetSpec. The RDatasetSpec was holding the number of fileglobs in each group.; In the RLoopManager ctor (accepting a RDatasetSpec) the globs are; expanded and the group sizes are updated. However, group positioning; remains relevant to the global TChain in RLoopManager and hence; currently accesing groups/metadata requires global TTreeProcessorMT; chain creation. RSampleInfo now holds RMetadata and thus, could be accessed from DefinePerSample. ---; Example of a valid json file to be parsed:; ```json; {; 	""groups"": [{; 			""tag"": ""SIMULATED"",; 			""trees"": [""tree"", ""subTree"", ""subTree""],; 			""files"": [""test_dir/specTestFile00*.root"", ""specTestFile1.root"", ""specTestFile2.root""],; 			""metadata"": {; 				""year"": 2040,; 				""lumi"": 3.14,; 				""edeposit"": 19.0,; 				""datatype"": ""MC""; 			}; 		},; 		{; 			""tag"": ""REAL"",; 			""trees"": [""subTreeA""],; 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],; 			""metadata"": {; 				""year"": 2012,; 				""century"": 20,; 				""experiment"": ""CMS""; 			}; 		},; 		{; 			""tag"": ""BLABLA"",; 			""trees"": [""subTreeA""],; 			""files"": [""specTestFile4.root"", ""specTestFile4.root""],; 			""metadata"": {; 				""year"": 2030,; 				""century"": 20,; 				""experiment"":",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11526:230,depend,dependency,230,https://root.cern,https://github.com/root-project/root/pull/11526,1,['depend'],['dependency']
Integrability,Is the error message about out of date pcm inverted ?,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7704:13,message,message,13,https://root.cern,https://github.com/root-project/root/issues/7704,1,['message'],['message']
Integrability,"It appears ROOT already depends on at least GTest 1.10.0, by using the following in some places without compatibility code:; * `GTEST_SKIP`; * `TestWithParam` with non-default constructible type; * The new ""test suite"" naming instead of the old ""test case"" (I found at least `TYPED_TEST_SUITE` and `SetUpTestSuite` + `TearDownTestSuite`). Given that an older version is only found on EL8, where we have been using `builtin_gtest` since a while, I propose to drop the remaining compatibility code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15355:24,depend,depends,24,https://root.cern,https://github.com/root-project/root/pull/15355,1,['depend'],['depends']
Integrability,"It fixes next Jira issue https://sft.its.cern.ch/jira/browse/ROOT-10640 (where looks like OpenGL works only with X11 for ROOT) and since Glew depends on OpenGL, then it is transitively depends on X11: http://cdash.cern.ch/buildSummary.php?buildid=866822 (build was built with `-Dbuiltin_glew=ON -Dx11=OFF`). Fixes: https://github.com/root-project/root/pull/5524",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5524:142,depend,depends,142,https://root.cern,https://github.com/root-project/root/pull/5524,2,['depend'],['depends']
Integrability,"It happens often that one passes a temporary RooArgSet to the; RooCmdArg constructor, where the RooCmdArg is itself a temporary that is; passed to a RooFit function. The RooCmdArg contains only pointers to the; RooArgSets, so this pattern relies on the RooArgSet being kept alive; until the function end. In code, this pattern would look like this statement:; ```C++; func(RooCmdArg{RooArgSet{}});; ```. In C++, this works because the temporaries survive until the statement; end. But in Python, the inner temporary RooArgSet will be destructed; after the RooCmdArg has been constructed, leaving the RooCmdArg with; dangling pointers. To solve this problem, all the functions that can create a RooCmdArg; from a RooArgSet are overloaded with versions accepting rvalue; references. These overloads are indeed used for temporaries both in C++; and Python. In the rvalue reference versions, the temporaries are moved; into a vector of std::unique_ptr<TObject>. The constructed RooCmdArg; then takes ownership of this vector wrapped in a shared_ptr. This addresses Jira issues [ROOT-5022](https://sft.its.cern.ch/jira/browse/ROOT-5022), [ROOT-9861](https://sft.its.cern.ch/jira/browse/ROOT-9861), and [ROOT-4373](https://sft.its.cern.ch/jira/browse/ROOT-4373). Here some examples of C++ and Python code that work after this change:. ```C++; void minimal_example() {; using namespace RooFit;. RooRealVar x(""x"",""x"", 0.0, 1.0);. RooDataSet data{};. RooCmdArg * arg = new RooCmdArg(ProjWData(x, data));. ((RooArgSet*)arg->getObject(0))->Print();. std::cout << dynamic_cast<RooArgSet const*>(arg->getObject(0)) << std::endl;. delete arg;. }; ```. ```Python; import ROOT. x = ROOT.RooRealVar(""x"", ""x title"", 0, 0, 10). arg = ROOT.RooFit.NormSet( ROOT.RooArgSet(x) ); arg.getObject(0)[""x""].Print(); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8032:1021,wrap,wrapped,1021,https://root.cern,https://github.com/root-project/root/pull/8032,1,['wrap'],['wrapped']
Integrability,"It is a dependency of ROOTDataFrame which is already included in; ROOT_LIBRARIES, so we want it there.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7569:8,depend,dependency,8,https://root.cern,https://github.com/root-project/root/pull/7569,4,['depend'],['dependency']
Integrability,It is a synchronization of revert commits with branch 6.14 patches.; Next PR will generalize a switch between compression algorithms.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2889:8,synchroniz,synchronization,8,https://root.cern,https://github.com/root-project/root/pull/2889,1,['synchroniz'],['synchronization']
Integrability,"It is base class for TBufferText and TBufferFile, combining common methods of both. It implements methods to work with objects map and some other virtual methods, defined in TBuffer interface. In TBufferFile **nullptr** replaces 0 (where it make sense) and ``printf()`` replaced with ``Info()``; Also clang format applied to the sources (excluding TBufferFile), use. As a next step, one can put following methods in TBufferIO:; * ReadClassBuffer; * WriteClassBuffer; * ReadClassEmulated; * ApplySequence. But here one need tiny virtual interface to use proper actions list for TBufferText or TBufferFile.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1661:182,interface,interface,182,https://root.cern,https://github.com/root-project/root/pull/1661,2,['interface'],['interface']
Integrability,"It is broken by design, there is no way that this interface can; be used in a safe way. Just get rid of it.# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12166:50,interface,interface,50,https://root.cern,https://github.com/root-project/root/pull/12166,1,['interface'],['interface']
Integrability,"It is confusing to the users that the chi2 fit is by default not extended, even if the pdf is extended. Because this is what happens in normal likelihood fits. This commit makes that behavior consistent and explains it in the release notes. Also, a new error message is added for the case you forcing a non extended fit on a pdf that must be extended, because this is guaranteed to give wrong results. This change addresses the confusion on the forum:; https://root-forum.cern.ch/t/failing-chi2-fit/56309",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13638:259,message,message,259,https://root.cern,https://github.com/root-project/root/pull/13638,1,['message'],['message']
Integrability,"It is not recommended to link directly to the Python libraries, but instead, use `-undefined dynamic_lookup` (macOS flag). Depending on how Python was built, using dynamic or static links to the libPython, a direct link can cause it to segfault. This uses that method, and was a necessary change for the conda-forge package for Python 3 macOS. See, for example:; https://pybind11.readthedocs.io/en/stable/compiling.html#building-manually. Note: This might be reasonable to do for Linux too, but maybe with the appropriate flags. The current patch is as conservative as possible. Discussion has moved here: <https://sft.its.cern.ch/jira/browse/ROOT-9950>",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3396:123,Depend,Depending,123,https://root.cern,https://github.com/root-project/root/pull/3396,1,['Depend'],['Depending']
Integrability,It is not used in TVirtualX interfaces.; It is re-declared in TGLUtil.h include.; Was introduced 14 years ago with the commit:. https://github.com/root-project/root/commit/fc7ab2b. In my mind - it is wrong place,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2908:28,interface,interfaces,28,https://root.cern,https://github.com/root-project/root/pull/2908,1,['interface'],['interfaces']
Integrability,"It is possible to set ranges for a `RooCategory`, suggesting that this; is a possible way to select only a subset of channels in a simultaneous; fit. However, this was not working so far, and this commit implements; that. This commit implements that feature for both the old test statistic; classes and the new BatchMode. As now it also makes sense to fit to a range that is not defined for the; observables but for the categories only, the message that is printed; when your observables don't define the range is demoted from a warning; to an info message. The debug message that was printed when channels are not selected also; got removed, because it had some overhead from `sumEntries`, the; debugging prints are rarely used, and the message is not true anymore; because chanels might also be skipped now becauese the are not selected; in the category range. Also, a new unit test is implemented that verifies the `RooFit::Range()`; command argument for fitTo can be used to select specific components; from a RooSimultaneous. Closes issue https://github.com/root-project/root/issues/8231. Two additional commits in this PR make some improvements to the `RooAbsTestStatistic` code, as described in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11785:441,message,message,441,https://root.cern,https://github.com/root-project/root/pull/11785,4,['message'],['message']
Integrability,"It seems that VecCore is a wrapper over Vc, however ROOT uses Vc in the context; of VecCore but also standalone. Adapt CMake to only try to load the Vc module when the Vc option is on as VecCore; might have not exposed Vc... This change improves root-project/root@f2ac9b349f",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9572:27,wrap,wrapper,27,https://root.cern,https://github.com/root-project/root/pull/9572,1,['wrap'],['wrapper']
Integrability,"It seems that the exported targets in ROOT 6.26 changed. Some software ([corryvreckan](https://gitlab.cern.ch/corryvreckan/corryvreckan)) that was compiling without issues in older root versions encounters issues when running cmake (3.22.3). . I believe that this is related to missing exported CMake targets. ### Describe the bug. CMake Error at src/core/CMakeLists.txt:73 (ADD_LIBRARY):; Target ""CorryvreckanCore"" links to target ""Threads::Threads"" but the target; was not found. Perhaps a find_package() call is missing for an IMPORTED; target, or an ALIAS target is missing?; ; ; CMake Error at src/core/CMakeLists.txt:73 (ADD_LIBRARY):; Target ""CorryvreckanCore"" links to target ""OpenMP::OpenMP_CXX"" but the; target was not found. Perhaps a find_package() call is missing for an; IMPORTED target, or an ALIAS target is missing?; ; ; CMake Error at src/core/CMakeLists.txt:73 (ADD_LIBRARY):; Target ""CorryvreckanCore"" links to target ""MPI::MPI_CXX"" but the target was; not found. Perhaps a find_package() call is missing for an IMPORTED; target, or an ALIAS target is missing?. The dependency seems to be pulled in via Minuit2. . The following additions to the CMakeLists of the project fix the issue:. ```; if(NOT TARGET Threads::Threads); find_package(Threads); endif(); if(NOT TARGET MPI::MPI_CXX); find_package(MPI); endif(); if(NOT TARGET OpenMP::OpenMP_CXX); find_package(OpenMP); endif(); ```. ### Setup. Compiling from source. Tested in master and using 6.26/00. Using archlinux, using CMake 3.22.3. The issue seems to only be present on archlinux, probably because for other OSs, the dependencies are handled internally rather than being imported (?).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10283:1086,depend,dependency,1086,https://root.cern,https://github.com/root-project/root/issues/10283,2,['depend'],"['dependencies', 'dependency']"
Integrability,It simplifies some interfaces and removes one extra responsibility from the column readers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11307:19,interface,interfaces,19,https://root.cern,https://github.com/root-project/root/pull/11307,1,['interface'],['interfaces']
Integrability,"It turns out that RNTuple data should better not be stored in custom directories because. 1. It is hard to get the TBrowser integration correctly; the TBrowser can only know the special status of the directory when looking at the object, looking at its key is not enough; 2. All the page keys get added to the directory's key list, which is inefficient. Instead, RNTuple will be changed to replicate the TTree approach: an ntuple is represented by a single, small `RNTuple` object, but the actual page data is stored in anonymous keys.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4651:124,integrat,integration,124,https://root.cern,https://github.com/root-project/root/pull/4651,1,['integrat'],['integration']
Integrability,"It turns out that just calling every function like this; ```; functionname[<template args>](args); ```; doesn't always result in correct code. In a concrete example, PyROOT is currently not able to generate a; valid wrapper for comparing libc++ std::vector<int>::iterator objects.; The wrapper becomes invalid by over-specifying the template arguments; and trying to call:; ```; std::__1::operator==<int *, int *>(a, b); ```. Now we first try to cast such functions to the correct type before; we start doing a lookup, e.g. above example would be:. ```; ((bool (&)(const std::__wrap_iter<int*>&,const std::__wrap_iter<int*>&))std::__1::operator==<int*, int*>)(i,i)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/614:216,wrap,wrapper,216,https://root.cern,https://github.com/root-project/root/pull/614,2,['wrap'],['wrapper']
Integrability,"It uses RBrowser and RBrowsable functionality to select some files or input new file SaveAs.; Provide sync and async modes. Actual ui5 coding should be implemented by @Falcort . Now RFileDialog starts its own window, later adapter will be provided to use RFileDialog inside other widgets - like RCanvas or RBrowser. Provide simple tutorial macro.; For meaningful async mode I add `RDirectory::Remove(name)` method (@Axel-Naumann)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4607:223,adapter,adapter,223,https://root.cern,https://github.com/root-project/root/pull/4607,1,['adapter'],['adapter']
Integrability,It was a dependency when building it using the old version 1.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6233:9,depend,dependency,9,https://root.cern,https://github.com/root-project/root/pull/6233,1,['depend'],['dependency']
Integrability,"It was not good to have this signature in RooAbsData, because the; implementations in RooDataHist and RooDataSet were inconsistent. The RooDataSet indeed took the weight error as the third argument, but; the RooDataHist version instead took the sum of weights squared, which; is equivalent to the squared weight error. That means using `RooAbsData::add(row, weight, weightError)` results in; different weight uncertainties depending on which data implementation; you use. This should not happen. It probably didn't happen to many; people, but I was affected by this when implementing; `RooAbsData::split()` (see https://github.com/root-project/root/pull/12459/commits/909d2564045d1cdb99865c4da6b7e79e463b548f). The solution to this problem it to remove the `add(row, weight,; weightError)` from the virtual RooAbsData interface. The `add(row,; weight)` signature can stay, because this one is implemented; consistently in RooDataSet and RooDataHist.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12479:423,depend,depending,423,https://root.cern,https://github.com/root-project/root/pull/12479,2,"['depend', 'interface']","['depending', 'interface']"
Integrability,"It would also help if the NLL in RooFit for binned fits is reformulated such that the normalization integral is only approximated by evaluating at the bin centers. Like this, the average binning effects are cancelling out because they appear both in the numerator and denominator. Only bin-dependent binning effects are remaining then. Besides reducing binning effects, this would improve numerical fit stability because no numeric integration of the PDF function needs to be done in the integral is not known analytically. More detail with the mathematical background can be found on the ROOT forum:; https://root-forum.cern.ch/t/minimized-nll-not-corresponding-to-best-chi2/50120/22",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11951:290,depend,dependent,290,https://root.cern,https://github.com/root-project/root/issues/11951,2,"['depend', 'integrat']","['dependent', 'integration']"
Integrability,"It would greatly help memory safety if ROOT could use more smart pointers in its interfaces. However, the automatic downcasting of returned values is only working for raw pointers. It should work for smart pointers as well. For example, right now this doesn't work:; ```Python; class ClassA {; public:. ClassDef(ClassA, 0);; };. class ClassB : public ClassA {; public:; void helloB() {}. ClassDef(ClassB, 0);; };. ClassA *fooRawPtr() { return new ClassB{}; }. std::unique_ptr<ClassA> fooUniquePtr() { return std::make_unique<ClassB>(); }; ```; Output:; ```txt; <class cppyy.gbl.ClassB at 0x5e1ddf85ed20>; Traceback (most recent call last):; File ""/home/rembserj/repro.py"", line 30, in <module>; out_2.helloB(); ^^^^^^^^^^^^; AttributeError: 'ClassA' object has no attribute 'helloB'; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16210:81,interface,interfaces,81,https://root.cern,https://github.com/root-project/root/issues/16210,1,['interface'],['interfaces']
Integrability,"It's AST supposed to depend on NDEBUG, so having this as a module is; wrong.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/537:21,depend,depend,21,https://root.cern,https://github.com/root-project/root/pull/537,1,['depend'],['depend']
Integrability,"It's better if the RDataFrame doesn't depend on `nlohmann::json` for this reason:. If you build ROOT **without** the builtin nlohmannjson, it finds the json header with `find_package(nlohmann_json)`, which is fine. However, if the `nlohmann/json.hpp` header is not in the default include path, one is now forced to also do `find_package(nlohmann_json)` in every compiled project that uses RDataFrame!. This happened to one of our students recently, which is why I got aware of the problem. On most Linux systems, this is not a problem because `json.hpp` is in a standard location, but for macOS this doesn't seem to be the case necessarily.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14043:38,depend,depend,38,https://root.cern,https://github.com/root-project/root/pull/14043,1,['depend'],['depend']
Integrability,"It's not your fault, but you opened Pandora's box 🙂; - No c-style casts in any code that gets touched after 2018; - `assert(0)` is useless in production code. Please throw `std::invalid_argument`.; - Don't use legacy iterators and don't define variables outside of the loop.; - Instead, use something like this:; ```c++; for (unsigned int i = 0; i < inFuncList.size(); ++i) {; auto func = static_cast<RooAbsArg*>(inFuncList[i]);; auto coef = static_cast<RooAbsArg*>(inCoefList[i]);; ...; ```; or directly `dynamic_cast` to the required types. If one of those doesn't exist or has the wrong type, issue an error message and throw. _Originally posted by @hageboeck in https://github.com/root-project/root/pull/8368#discussion_r647458786_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8374:611,message,message,611,https://root.cern,https://github.com/root-project/root/issues/8374,1,['message'],['message']
Integrability,"Jira: https://sft.its.cern.ch/jira/browse/ROOT-10491. We miss the test for reading boolean branches with `RDataFrame.AsNumpy`! Added the test and start investigating when it breaks - such as reported in the Jira ticket. Following the discussion on the forum [here](https://root-forum.cern.ch/t/asnumpy-fails-with-boolean-branches/37282), we see that the error shows a missing `data` member for the `std::vector<bool>`:. ```; df.AsNumpy(); ---------------------------------------------------------------------------; AttributeError Traceback (most recent call last); <ipython-input-10-e856f5516a02> in <module>(); ----> 1 df.AsNumpy(). /Applications/root_build/lib/ROOT.pyc in _RDataFrameAsNumpy(df, columns, exclude); 429 else:; 430 tmp = numpy.empty(len(cpp_reference), dtype=numpy.object); --> 431 for i, x in enumerate(cpp_reference):; 432 tmp[i] = x # This creates only the wrapping of the objects and does not copy.; 433 py_arrays[column] = ndarray(tmp, result_ptrs[column]). AttributeError: 'vector<bool>' object has no attribute 'data'; ```. The error seems to be triggered when iterating over `std::vector<bool>` in python. My guess is some weirdness in the given std version of macOS 10.15. @etejedor We should add a test for this at the right place not only for `AsNumpy`. Edit: Added a fix for current PyROOT by protecting the tp_iter field for `vector<bool>`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4718:878,wrap,wrapping,878,https://root.cern,https://github.com/root-project/root/pull/4718,1,['wrap'],['wrapping']
Integrability,"Last argument in strncpy is length of destination buffer and should not depend from length of source string. Fixes warning from gcc14:; ```; git/webgui/core/meta/src/TClass.cxx:701:20: warning: ‘char* strncpy(char*, const char*, size_t)’ specified bound depends on the length of the source argument [-Wstringop-truncation]; 701 | strncpy(line + kvalue, *ppointer, std::min( i, kline - kvalue));; | ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; git/webgui/core/meta/src/TClass.cxx:691:20: note: length computed here; 691 | i = strlen(*ppointer);; | ~~~~~~^~~~~~~~~~~; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16358:72,depend,depend,72,https://root.cern,https://github.com/root-project/root/pull/16358,2,['depend'],"['depend', 'depends']"
Integrability,"Launching the Python tutorials from the 'tutorials/launcher.py' module injected; the `__main__` namespace in the tutorial itself. In general it is not a problem,; but it can sometimes hide errors like the one fixed by; https://github.com/root-project/root/pull/10177 . Using a rootlogon file serves; the same purpose and the tutorials can thus be launched by simply calling; 'python tutorialname.py'.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10207:71,inject,injected,71,https://root.cern,https://github.com/root-project/root/pull/10207,1,['inject'],['injected']
Integrability,"Like this, people can get the test support library for using `ROOT_ADD_GTEST` with the automatic ROOT output checking, without having to build all of ROOTs tests itself (`testing=ON`). Off by default to not force a build dependency on gtest. Closes #16612. Important to fix the LCG and CMSSW nightlies.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16625:221,depend,dependency,221,https://root.cern,https://github.com/root-project/root/pull/16625,1,['depend'],['dependency']
Integrability,"Link to compilation error:; https://epsft-jenkins.cern.ch/view/ROOT%20Nightly/job/root-nightly-master/1977/LABEL=mac1012,SPEC=noimt/parsed_console/. The error is due to a bug in clang3.5, reproducible in isolation:; https://godbolt.org/z/jtYXv6. The workaround is to avoid specifying the template parameters of a; template base class -- the full type is injected in the derived class; anyway (thanks Axel!).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3098:354,inject,injected,354,https://root.cern,https://github.com/root-project/root/pull/3098,1,['inject'],['injected']
Integrability,"List of relevant PR missing in the release notes for 6.24. - XROOTD #7380 ; - TMVA : optimizer options : #7318; - ChangeLabel: #7294; - Buffer Merger improvements : #7286; - Eve7: The first implementation of log view #7270; - TMVA: Update Keras tutorials using tensorflow.keras #7255; - builtins: Zstd 1.4.8 #7214; - RooFit: warning message for RooAddPdf without norm set: #7129 ; - RooFit: Improve plotting of RooBinSamplingPdf. #7110; - Hist: Fixes and improvements for the TKDE class #7096; - Fix a memory leak in TF1::Copy #7035; - Fix for new version of cudnn version 8 #7003; - Minuit2: Use Numerical gradient as input to the seed generator when using external gradients in Minuit2 #7001; - TF1: Enable using Automatic differentiation for computing Parameter Gradient in TF1 #6956; - Math: Fix correction factor for Confidence level in ROOT::Fit::FitResult #6902; - TMVA: Implement MethodCategory::GetMulticlassValues() #6886; - Hist: Add THistRange class defining a generic histogram range and its iterator #6795; - TMVA: Support for Keras 2.4 (tf.keras) #6793; - Eve-7: Add example of calorimeter representation of REveDataCollection #6783; - Math: Fix BinData copy constructor #6776; - [tmva] Add possibility to make ROC curve for the training dataset from TMVA::Factory #6724; - Math: Changes in TRandom3::GetSeed #6723; - Minuit2: new Minuit2 logging #6705; - ntuple] Several interface improvements (unique pointer, const) #6655; - Optimize TPrincipal::AddRow function #6630",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7858:333,message,message,333,https://root.cern,https://github.com/root-project/root/issues/7858,2,"['interface', 'message']","['interface', 'message']"
Integrability,Load dependent libraries as part of AutoLoading.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5486:5,depend,dependent,5,https://root.cern,https://github.com/root-project/root/pull/5486,1,['depend'],['dependent']
Integrability,Made TFile Error message more accurate,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10656:17,message,message,17,https://root.cern,https://github.com/root-project/root/pull/10656,1,['message'],['message']
Integrability,"Made it explicit that the builtin GSL build should use `-fPIC`. Without it the build, at least on SLC6 with GCC 6.2 would fail to link against the generated GSL library, with messages like:. ```; [100%] Linking CXX shared library ../../lib/libMathMore.so; /cvmfs/sft.cern.ch/lcg/contrib/bintuils/2.28/x86_64-slc6/bin/ld: ../../lib/libgsl.a(blas.o): relocation R_X86_64_32 against `.rodata' can not be used when making a shared object; recompile with -fPIC; /cvmfs/sft.cern.ch/lcg/contrib/bintuils/2.28/x86_64-slc6/bin/ld: ../../lib/libgsl.a(deriv.o): relocation R_X86_64_32 against `.rodata' can not be used when making a shared object; recompile with -fPIC; /cvmfs/sft.cern.ch/lcg/contrib/bintuils/2.28/x86_64-slc6/bin/ld: ../../lib/libgsl.a(eval.o): relocation R_X86_64_32 against `.rodata' can not be used when making a shared object; recompile with -fPIC; /cvmfs/sft.cern.ch/lcg/contrib/bintuils/2.28/x86_64-slc6/bin/ld: ../../lib/libgsl.a(lt1-init.o): relocation R_X86_64_32 against `.rodata' can not be used when making a shared object; recompile with -fPIC; /cvmfs/sft.cern.ch/lcg/contrib/bintuils/2.28/x86_64-slc6/bin/ld: ../../lib/libgsl.a(integ.o): relocation R_X86_64_32 against `.rodata' can not be used when making a shared object; recompile with -fPIC; /cvmfs/sft.cern.ch/lcg/contrib/bintuils/2.28/x86_64-slc6/bin/ld: ../../lib/libgsl.a(error.o): relocation R_X86_64_32 against `.rodata' can not be used when making a shared object; recompile with -fPIC; /cvmfs/sft.cern.ch/lcg/contrib/bintuils/2.28/x86_64-slc6/bin/ld: ../../lib/libgsl.a(stream.o): relocation R_X86_64_32 against `.rodata' can not be used when making a shared object; recompile with -fPIC; /cvmfs/sft.cern.ch/lcg/contrib/bintuils/2.28/x86_64-slc6/bin/ld: ../../lib/libgsl.a(strerror.o): relocation R_X86_64_32S against `.rodata' can not be used when making a shared object; recompile with -fPIC; /cvmfs/sft.cern.ch/lcg/contrib/bintuils/2.28/x86_64-slc6/bin/ld: ../../lib/libgsl.a(qag.o): relocation R_X86_64_32S against",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1996:175,message,messages,175,https://root.cern,https://github.com/root-project/root/pull/1996,1,['message'],['messages']
Integrability,"Made the `RIO` library's dependence on `libatomic` public. Unfortunately the previous incantation was not transitive. The clients were not set up to link against libatomic themselves as well. And with [TFile.h](https://github.com/root-project/root/blob/master/io/io/inc/TFile.h#L129-L132) publicly exposing a dependence on `std::atomic`, and multiple classes implemented in the project that inherit from `TFile` (and are built into other libraries), this really is a must. This ties to both #4561 (where I described ARM's explicit dependence on `libatomic` ""in certain situations""), and also to #6432 (ROOT's CMake configuration could really do with a significant cleanup/rewrite). Unfortunately such errors will keep coming back if we can not set up a centralised test for this. Any chance that that could be done?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6609:25,depend,dependence,25,https://root.cern,https://github.com/root-project/root/pull/6609,3,['depend'],['dependence']
Integrability,Make IMT an optional dependency.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5448:21,depend,dependency,21,https://root.cern,https://github.com/root-project/root/pull/5448,1,['depend'],['dependency']
Integrability,Make ReadClass error message more verbose,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/911:21,message,message,21,https://root.cern,https://github.com/root-project/root/pull/911,1,['message'],['message']
Integrability,Make TRandom compatible with the std UniformRandomBitGenerator interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7979:63,interface,interface,63,https://root.cern,https://github.com/root-project/root/issues/7979,1,['interface'],['interface']
Integrability,"Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g.; ```c++; [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`; void g() { f(); }. f(); // but this should not; ```. Alternatively, as discussed with @Axel-Naumann, we could insert `#pragma clang diagnositc ...` directives in [`Interpreter::WrapInput()`](https://github.com/root-project/root/blob/master/interpreter/cling/lib/Interpreter/Interpreter.cpp#L1130), but I see that as much less elegant. ## Checklist:; - [X] tested changes locally; - [X] the patch passes cling tests. This PR fixes #11562.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12654:101,depend,depends,101,https://root.cern,https://github.com/root-project/root/pull/12654,3,"['Wrap', 'depend', 'wrap']","['WrapInput', 'depends', 'wrapped']"
Integrability,"Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g.; ```c++; [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`; void g() { f(); }. f(); // but this should not; ```. This PR is a backport of #12654.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12703:101,depend,depends,101,https://root.cern,https://github.com/root-project/root/pull/12703,2,"['depend', 'wrap']","['depends', 'wrapped']"
Integrability,Make configuration fail when dependencies are not found and fail-on-missing=ON,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3975:29,depend,dependencies,29,https://root.cern,https://github.com/root-project/root/pull/3975,1,['depend'],['dependencies']
Integrability,Make fit chunking dependent on IMT pool size,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2039:18,depend,dependent,18,https://root.cern,https://github.com/root-project/root/pull/2039,1,['depend'],['dependent']
Integrability,Make sure the CI build all math packages (even GPL ones) in PR builds and add also tmva-sofie and r interface on node where ; these can be built (where protobuf and r installations exist),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14836:100,interface,interface,100,https://root.cern,https://github.com/root-project/root/pull/14836,1,['interface'],['interface']
Integrability,"Make sure the y position of a window is not negative (hiding the title bar) and add missing dependencies on the `iconv`, `glib`, and `gdk` source code",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9866:92,depend,dependencies,92,https://root.cern,https://github.com/root-project/root/pull/9866,1,['depend'],['dependencies']
Integrability,Make sure we're using the macOS-native framework version in the OpenGL case. See:; * https://cmake.org/cmake/help/latest/module/FindOpenGL.html#macos-specific; * https://github.com/root-project/root/blob/master/cmake/modules/SearchInstalledSoftware.cmake#L22. This avoids indirectly picking up a X11 dependency by using some other OpenGL installed on the system.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15435:300,depend,dependency,300,https://root.cern,https://github.com/root-project/root/pull/15435,1,['depend'],['dependency']
Integrability,"Many people pythonized the RooWorkspace themselves by adding a new; attribute `_import` that calls getattr(self, ""import"") under the; hood. However, `_import` is now the reference to the original cppyy; overload, and resetting it with a wrapper around `import` would cause; infinite recursions! We prevent resetting that attribute here, which; is a clearer error to the user than an infinite call stack involving; the internal pythonization code. The ""official"" way of calling `RooWorkspace::import()` in PyROOT is now `RooWorkspace.Import`. Should be backported to the 6.26 release if possible, so that people are not caught by surprise.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9896:237,wrap,wrapper,237,https://root.cern,https://github.com/root-project/root/pull/9896,1,['wrap'],['wrapper']
Integrability,"Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZN5cling7runtime8internal15LifetimeHandlerD1Ev' unresolved while linking function '_GLOBAL__sub_I_cling_module_16'!; You are probably missing the definition of cling::runtime::internal::LifetimeHandler::~LifetimeHandler(); Maybe you need to load the corresponding shared library?; root [3] .q. $ root -l; root [0] ROOT::VecOps::RVec<double> v {2., 3., 1.};; root [1] auto firstTwo2 = Take(v, 2);; ROOT_prompt_1:1:1: error: Syntax error; auto firstTwo2 = Take(v, 2);; ^; FunctionDecl 0x2b43f38 <input_line_9:1:1, ROOT_prompt_1:3:1> input_line_9:1:6 __cling_Un1Qu31 'void (void *)'; |-ParmVarDecl 0x2b43e80 <col:22, col:28> col:28 vpClingValue 'void *'; |-CompoundStmt 0x2b442c0 <col:42, ROOT_prompt_1:3:1>; | |-DeclStmt 0x2b442a0 <line:1:1, col:28>; | | `-VarDecl 0x2b44018 <col:1, col:27> col:6 firstTwo2 'auto' cinit; | | `-CallExpr 0x2b44270 <col:18, col:27> '<dependent type>'; | | |-DeclRefExpr 0x2b441f0 <col:18> '<dependent type>' lvalue Var 0x2b44158 'Take' '<dependent type>'; | | |-DeclRefExpr 0x2b44230 <col:23> 'ROOT::VecOps::RVec<double>':'ROOT::VecOps::RVec<double>' lvalue Var 0x2230488 'v' 'ROOT::VecOps::RVec<double>':'ROOT::VecOps::RVec<double>'; | | `-IntegerLiteral 0x2b44250 <col:26> 'int' 2; | `-NullStmt 0x2b442b8 <line:2:1>; |-AnnotateAttr 0x2b440f0 <<invalid sloc>> R""ATTRDUMP(__ResolveAtRuntime)ATTRDUMP""; `-AnnotateAttr 0x2b441c0 <<invalid sloc>> R""ATTRDUMP(__ResolveAtRuntime)ATTRDUMP""; <<<NULL>>>; root [2] .q. ```. ### Setup. 1. ROOT version; * 6.22/08. ```; ROOT Version: 6.22/08; Built for linuxx8664gcc on Mar 10 2021, 14:20:04; From tags/v6-22-08@v6-22-08; ```. * 6.25/01; ```; ROOT Version: 6.25/01; Built for linuxx8664gcc on Jan 01 1980, 00:00:00; From @; ```. 2. Operating system: NixOS, a linux distribution; * `nix-info -m`; - system: `""x86_64-linux""`; - host os: `Linux 5.10.73, NixOS, 21.05.20211019.8fe3b97 (Okapi)`; - multi-user?: `yes`; - sandbox: `ye",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9261:10690,depend,dependent,10690,https://root.cern,https://github.com/root-project/root/issues/9261,3,['depend'],['dependent']
Integrability,"Memory leak in TFile::WriteObjectAny, depending on data type",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7236:38,depend,depending,38,https://root.cern,https://github.com/root-project/root/issues/7236,1,['depend'],['depending']
Integrability,"Merge the `RooIntegrator1D` class with its slight variations: `RooIntegrator2D`, `RooSegmentedIntegrator1D`, and `RooSegmentedIntegrator2D`. To reflect the fact that it can now be used for the n-dimenstional case, it is renamed to `RooRombergIntegrator`. This greatly reduces boilerplate code to implement the different numeric integration methods (more detail in the PR description).; It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:; ```c++; // runNumIntValidation.C. #include <RooFormulaVar.h>; #include <RooNumIntConfig.h>; #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label); {; RooRealVar x{""x"", ""x"", 0, 10};; RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;; RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {; cfg.method2D().setLabel(label.c_str());; }; if (ndim == 1) {; cfg.method1D().setLabel(label.c_str());; }. RooArgSet iset{x};; if (ndim > 1); iset.add(y);; std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};; double val = integ->getVal();; std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;; }. void runNumIntValidation(); {; RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};; std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {; testIntegrationMethod(1, label);; }. for (auto const &label : methods2d) {; testIntegrationMethod(2, label);; }; }; ```. The output with this PR is the same as with ROOT master:; ```; RooIntegrator1D:; 488.294986988088. RooSegmentedIntegrator1D:; 488.294680086881. RooAda",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13384:328,integrat,integration,328,https://root.cern,https://github.com/root-project/root/pull/13384,2,['integrat'],['integration']
Integrability,Message Passing Interface for ROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/730:0,Message,Message,0,https://root.cern,https://github.com/root-project/root/pull/730,2,"['Interface', 'Message']","['Interface', 'Message']"
Integrability,Methods from TH1 that are using GetNbinsX and GetNbinsY that do not make sense for a TH2Poly and will compute sometiung wrong. They are re-implemented now in TH2Poly and an error message is printed. . This fixes ROOT-7139,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3904:179,message,message,179,https://root.cern,https://github.com/root-project/root/pull/3904,1,['message'],['message']
Integrability,"Minuit migrad minimization: 1. the setup phase where the initial gradient is calculated and 2. the line search phases. To make the above possible, a few bugs had to be fixed:; - `RooAbsL` classes have `evaluatePartition` which allows you to specify the range of events and components over which to evaluate the likelihood. This had some bugs: the extended term and possible subsidiary components were added for each partition, leading to N duplicates (for N partitions). Commits 3db2e0dd36478813cfb534451f459348e8d90da9 and c2a8bc9df029f65ee575e140825af6c509860538.; - As a result of this fix, which reorders some terms in the sum, the LikelihoodGradientJob test was failing for a specific case due to increased floating point differences. We would like to add back in an option for retaining bit-wise exact same results in the future, but since the minimization still converges to the same value within the desired precision, for now we leave it like this, since the user can still pick the old ways if they prefer their exact old results. Commit b7f7fa7b705e2dfb767187dce3f6a32275f30d9e.; - `LikelihoodJob` had a bug where it didn't reset its `result` sum variable to zero before doing a new sum. Commits 042e1577d8c303d532016537e7467d6e2fbfcd9c and 44197a2a64f77b47587e5ee200d360c4514b8098. Finally, I made a mini optimization in `LikelihoodJob` by using `publish_from_master_to_workers` more efficiently, which reduces communication overhead slightly (and makes the code a bit cleaner). Also in commit 567b7988d56b6c1db6102d857b523fc2da607dbc. Note that although this is a bit of a big PR, the commits are factored out into the above list of changes, so I hope this makes it easy to review. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). Documentation not yet updated, I will check if this is necessary (I didn't think so, because it doesn't actually add much to the user interface, all the classes were already there, they just didn't work before like this).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10966:2256,interface,interface,2256,https://root.cern,https://github.com/root-project/root/pull/10966,1,['interface'],['interface']
Integrability,"Minuit2 uses the Pimpl idiom with a shared_ptr to avoid frequent copies, but the implementation is not good. The full interface of each class is duplicated, which is not necessary and makes the code confusing and difficult to change. This patch simplifies the implementation but keeps the semantics the same. This patch is a precursor of some improvements that I have prepared.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7882:118,interface,interface,118,https://root.cern,https://github.com/root-project/root/pull/7882,1,['interface'],['interface']
Integrability,Minuit2: Explained delgam warning messages in info,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11652:34,message,messages,34,https://root.cern,https://github.com/root-project/root/pull/11652,1,['message'],['messages']
Integrability,Missing Rint dependency for rootcling,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11686:13,depend,dependency,13,https://root.cern,https://github.com/root-project/root/issues/11686,1,['depend'],['dependency']
Integrability,Missing clad dependency.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16668:13,depend,dependency,13,https://root.cern,https://github.com/root-project/root/issues/16668,1,['depend'],['dependency']
Integrability,Missing dependency or clean up in TMVA test/tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16553:8,depend,dependency,8,https://root.cern,https://github.com/root-project/root/issues/16553,1,['depend'],['dependency']
Integrability,Missing dependency when building roottest as part of ROOT.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9600:8,depend,dependency,8,https://root.cern,https://github.com/root-project/root/issues/9600,1,['depend'],['dependency']
Integrability,"More info in the commit descriptions. This should fix the compiler errors reported on the forum:; https://root-forum.cern.ch/t/error-compiling-with-ubuntu-20-04-4-lts/49097. Should be backported to 6.26. This PR also suggests a slight change to the HistFactory::JSONTool interface which is not necessarily a bugfix, but it's better to hide away the `JSONTool::Export` function as of 6.26.02 such that people don't start using it and we we are stuck with that interface.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10082:271,interface,interface,271,https://root.cern,https://github.com/root-project/root/pull/10082,2,['interface'],['interface']
Integrability,Move TDavixFileInternal out of the public interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/295:42,interface,interface,42,https://root.cern,https://github.com/root-project/root/pull/295,1,['interface'],['interface']
Integrability,"Move declaration of ESockOptions and ESendRecvOptions enums from TSocket.h to TSystem.h, to get rid of this include dependencies in CMake:; include_directories(${CMAKE_SOURCE_DIR}/net/net/inc)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3274:116,depend,dependencies,116,https://root.cern,https://github.com/root-project/root/pull/3274,1,['depend'],['dependencies']
Integrability,"Move root-project/cling#469. This depends on PR #11360. cc: @sarabellei, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11474:34,depend,depends,34,https://root.cern,https://github.com/root-project/root/pull/11474,1,['depend'],['depends']
Integrability,"Move the fRoofit classes depending on GSL in a new library libRooFitMore. The classes are: . - AdaptiveGauss and GausKronrod 1D integrator from Roofitcore; - Legendre, non-central chi2 and SphArmonic pdf",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4536:25,depend,depending,25,https://root.cern,https://github.com/root-project/root/pull/4536,2,"['depend', 'integrat']","['depending', 'integrator']"
Integrability,Moved TPDGCode.h (used in 'pythia6' and 'pythia8') from 'vmc' to to 'eg'; this makes all other libraries in 'montecarlo' not dependent on 'vmc',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3691:125,depend,dependent,125,https://root.cern,https://github.com/root-project/root/pull/3691,1,['depend'],['dependent']
Integrability,Moving OCC-dependent headers out of the way,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3069:11,depend,dependent,11,https://root.cern,https://github.com/root-project/root/pull/3069,1,['depend'],['dependent']
Integrability,"Moving `RooMath` to RooBatchCompute caused linker errors for users that; we want to avoid: RooBatchCompute is a RooFit implementation detail and; we don't want poeple to link against it. For this reason, RooMath is moved back into RooFitCore, and the; Faddeeva implementation that is also used in RooBatchCompute is split; off into a new file `faddeeva_impl.h` that is not part of the public; interface.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10359:393,interface,interface,393,https://root.cern,https://github.com/root-project/root/pull/10359,1,['interface'],['interface']
Integrability,"Multi-range fits in RooFit are more complicated than they should be. In principle, all that is required is to change the normalization range of the PDF to the union of the ranges. There is a RooAbdPdf interface to suggest that this could be done easily like this:; ```C++; pdf.setNormRange(""range1,range2""); ```. But this doesn't work well for RooAddPdfs, which is probably why it was chosen to implement mulit-range fits as a sum of separate RooNLLVars. But in this case, the PDFs are normalized separately, and extra terms need to be introduced to correct for that. This resulted in lots of complicated code, and still there are issues like #11447, i.e. is still doesn't work for simultaneous fits. That's why I decided to fix the `setNormRange()` for RooAddPdfs, and then starting from that re-implement multi-ranged fits in both the new BatchMode and the old RooFit based on that. . Closes #11447.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11455:201,interface,interface,201,https://root.cern,https://github.com/root-project/root/pull/11455,1,['interface'],['interface']
Integrability,"NetxNG needs the include directory for XRootD, but when XRootD is enabled as a builtin, the include directory points to the build directory and causes CMake to fail with an [error](http://cdash.cern.ch/viewConfigure.php?buildid=570698) like the one below:; ```; CMake Error in net/netxng/CMakeLists.txt:; Target ""NetxNG"" INTERFACE_INCLUDE_DIRECTORIES property contains path:. ""${BUILDDIR}/include/xrootd"". which is prefixed in the build directory.; ```; This is a blocker to move to modern CMake constructs (using targets and properties) for targets that use headers of builtins in their own headers, as we cannot create imported or exported targets with proper dependencies.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2727:662,depend,dependencies,662,https://root.cern,https://github.com/root-project/root/pull/2727,1,['depend'],['dependencies']
Integrability,"New member functions of RooFit classes were introduced exclusively to PyROOT for better interoperability between RooFit and Numpy and Pandas:. 1. `RooDataSet.from_numpy`: Import a RooDataSet from a dictionary of numpy arrays (static method); 2. `RooDataSet.to_numpy`: Export a RooDataSet to a dictionary of numpy arrays; 3. `RooDataSet.from_pandas`: Import a RooDataSet from a Pandas dataframe (static method); 4. `RooDataSet.to_pandas`: Export a RooDataSet to a Pandas dataframe; 5. `RooRealVar.bins`: Get bin boundaries for a `RooRealVar` as a NumPy array. - Unit tests were implemented that make closure tests for weighted and unweighted datasets, and also test if the support for `RooAbsCategory` works; - Besides implementing these functions as pythonizations, this PR makes some changes to the `RooVectorDataStore` interface to enable this data import/export functionality; - Some changes were made to the RooFit pythonization infrastructure to support static methods in the Python mirror classes; - A new tutorial was written to showcase these features; - Release notes were added; - Windows tests are disabled for now because they fail for reasons that I don't understand (see draft PR #8784). This is part of the feature set presented at ACAT 2021 and promised for the next ROOT release. The equivalent import/export functions for `RooDataHist` will follow later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9346:88,interoperab,interoperability,88,https://root.cern,https://github.com/root-project/root/pull/9346,2,"['interface', 'interoperab']","['interface', 'interoperability']"
Integrability,New printValue() integration,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/75:17,integrat,integration,17,https://root.cern,https://github.com/root-project/root/pull/75,1,['integrat'],['integration']
Integrability,"Newer CMake uses extraction timestamps for extracted files, instead of the timestamp as stored in the tar file, see; https://cmake.org/cmake/help/latest/policy/CMP0135.html#policy:CMP0135 This causes (massive) problems with configure/Makefile tar files, where the configure/Makefile dependencies (e.g. autoconf input files) might be newer than configure/Makefile, causing configure/Makefile to wanting to regenerate themselves because they are supposedly out of date.; This is https://gitlab.kitware.com/cmake/cmake/-/issues/24003. For anything with ""./configure"", force the timestamp as stored in the tar file. (cherry picked from commit e79ef2e76ea8e20c9e4edc28844b97f82122033f). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11752:283,depend,dependencies,283,https://root.cern,https://github.com/root-project/root/pull/11752,1,['depend'],['dependencies']
Integrability,"Newer CMake uses extraction timestamps for extracted files, instead of the timestamp as stored in the tar file, see; https://cmake.org/cmake/help/latest/policy/CMP0135.html#policy:CMP0135 This causes (massive) problems with configure/Makefile tar files, where the configure/Makefile dependencies (e.g. autoconf) might be newer than configure/Makefile, causing configure/Makefile to wanting to regenerate themselves because they are supposedly out of date. For anything with ""./configure"", force the timestamp as stored in the tar file. Fixes https://github.com/root-project/root/issues/11743",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11742:283,depend,dependencies,283,https://root.cern,https://github.com/root-project/root/pull/11742,1,['depend'],['dependencies']
Integrability,Ninja shows dependency issues in our build system; fix those first before switching to Ninja. This reverts commit fcfca4ccdaf97099a180e154c60bc3c621abfafe. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13591:12,depend,dependency,12,https://root.cern,https://github.com/root-project/root/pull/13591,1,['depend'],['dependency']
Integrability,"No actual behavior change is expected. CollectionProxy's `next wrapper/implementation` for Bitset is seemingly currently unused (hence the problem was not seen), however it will be used start in the next set of PRs introducing more Writing StreamerInfoActions (hence the existing bitset test will serve as tests). Related roottest PR: https://github.com/root-project/roottest/pull/1189",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16495:63,wrap,wrapper,63,https://root.cern,https://github.com/root-project/root/pull/16495,1,['wrap'],['wrapper']
Integrability,"Now Imt depends on MultiProc (https://github.com/root-project/root/pull/7040), so MultiProc gets loaded when importing ROOT in python and needs to be whitelisted",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7048:8,depend,depends,8,https://root.cern,https://github.com/root-project/root/pull/7048,1,['depend'],['depends']
Integrability,"Now TMVA does not have anymore dependency on Cuda at the header file.; In principle one could have MethodDL depending on Cuda tensor, but this is not needed if single event evaluation is not done on GPU.; With this PR now the Cuda headers are included from TMVA source files . This PR should avoid the problem of ROOT-10980 and #6999 should not be anymore needed",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7017:31,depend,dependency,31,https://root.cern,https://github.com/root-project/root/pull/7017,2,['depend'],"['dependency', 'depending']"
Integrability,Now both TCanvas or RCanvas can be used in RBrowser.; In both cases very similar code is used for embedding - some extension of interface was required.; On client side code is mostly identical.; For the moment TCanvas is default while RCanvas has some problem on client side with update,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4499:128,interface,interface,128,https://root.cern,https://github.com/root-project/root/pull/4499,1,['interface'],['interface']
Integrability,"Now, we create TBB tasks for compression whenever `TTree::Fill` is called and a basket must be compressed. In CMS, we saw significant speedup on KNL and high-core-count Xeons by doing this over the existing basic write IMT (likely because we have some branches that are flushed to disk much more frequently than targeted by the auto-flush routines).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/321:339,rout,routines,339,https://root.cern,https://github.com/root-project/root/pull/321,1,['rout'],['routines']
Integrability,NullDeref check changed from injection of if(stmt) to a runtime call.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/112:29,inject,injection,29,https://root.cern,https://github.com/root-project/root/pull/112,1,['inject'],['injection']
Integrability,"OT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; .dot file generated with RooAbsArg::graphVizTree produces an invalid .dot file if the graph title contains spaces. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; RooAbsArg::graphVizTree should produce a valid .dot file even when the names of the elements contain spaces. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->; ROOT macro, save to graphvizMWE.C and run with `root graphvizMWE.C`:; ```; void graphvizMWE(void){; // Create a simple dependency tree; RooRealVar x{};; RooRealVar sigma{};; RooRealVar mu{};. RooGaussian Gaussian(""my_gaussian"", ""Gaussian"", x, mu, sigma);; RooGaussian GaussianWithSpace(""my gaussian"", ""Gaussian"", x, mu, sigma);. // Create GraphViz trees; Gaussian.graphVizTree(""tree_example.dot"");; GaussianWithSpace.graphVizTree(""tree_example2.dot""); // Produces invalid output; }; ```; Then attempt to convert the produced `.dot` files to images using; `dot -Tpng tree_example.dot -o example1.png # Produces an image`; `dot -Tpng tree_example2.dot -o example2.png # Error!`. The first of these will produce a .png image, the second will fail with a message like: `Error: tree_example2.dot: syntax error in line 1 near 'gaussian'`. Can be fixed by enclosing the graph title in quotes: i.e. changing line 1 of `tree_example2.dot` from; `digraph my gaussian{`; to; `digraph ""my gaussian""{`. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7067:1183,depend,dependency,1183,https://root.cern,https://github.com/root-project/root/issues/7067,1,['depend'],['dependency']
Integrability,"OT::Internal::ExecutionPolicy::kMultiprocess, 8);; ROOT::Internal::TExecutor x5(ROOT::Internal::ExecutionPolicy::kSerial, 8); //nProcessing units is ignored in this case. x1.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map; x2.Map([](){return 1;}, 20); // runs TThreadExecutor::Map; x3.Map([](){return 1;}, 20); // runs TThreadExecutor::Map; x4.Map([](){return 1;}, 20); // runs TProcessExecutor::Map; x5.Map([](){return 1;}, 20); // runs TSequentialExecutor::Map; ```. * If ROOT is compiled with the flag `IMT=OFF`, kMultithread will not be available as an execution policy. In this case we also made some changes to the build system: libImt is now *always* built, but when the flag is disabled it only contains the TExecutor class. Sounds sneaky and it is confusing, but it's the best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | ; ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |; TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |; TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |; TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |; TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |; TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doubl",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6327:1478,interface,interfaces,1478,https://root.cern,https://github.com/root-project/root/pull/6327,2,['interface'],['interfaces']
Integrability,"OT::TGenericClassInfo::CreateRuleSet (this=0x2b4bf40eb840 <ROOT::GenerateInitInstanceLocal(reco::btag::TrackData const*)::instance>, vect=..., ProcessReadRules=true) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/meta/src/TGenericClassInfo.cxx:319; #40 0x00002b4bd1cd26bd in ROOT::TGenericClassInfo::GetClass (this=0x2b4bf40eb840 <ROOT::GenerateInitInstanceLocal(reco::btag::TrackData const*)::instance>) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/meta/src/TGenericClassInfo.cxx:286; #41 0x00002b4bd1cac20b in TClass::GetClass (name=0xc24d320 ""reco::btag::TrackData"", load=true, silent=false, hint_pair_offset=0, hint_pair_size=0) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/meta/src/TClass.cxx:3039; #42 0x00002b4bd1cabf33 in TClass::GetClass (name=0xc24d320 ""reco::btag::TrackData"", load=true, silent=false) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/meta/src/TClass.cxx:2970; #43 0x00002b4bf68090a5 in ?? (); #44 0x0000000000000001 in ?? (); #45 0x00000001951b6c50 in ?? (); #46 0x00007ffd951b6840 in ?? (); #47 0x00007ffd951b6948 in ?? (); #48 0x00007ffd951b6910 in ?? (); #49 0x00002b4bd18990fd in WrapperCall (method=47604637311029, nargs=140727105054640, args_=0x7ffd951b6760, self=0x7ffd951b6750, result=0x7ffd951b6748) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:774; ===========================================================; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:26566,Wrap,WrapperCall,26566,https://root.cern,https://github.com/root-project/root/issues/12771,1,['Wrap'],['WrapperCall']
Integrability,"Old proxy classes constantly require casting when the pointee of the; proxy is used. Now, the correct type is stored, and constness of the; public interface has been improved.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5501:147,interface,interface,147,https://root.cern,https://github.com/root-project/root/pull/5501,1,['interface'],['interface']
Integrability,"Old versions of Vdt (0.4.1 and below) do not export version information, but ROOT needs 0.4.0 at least, because of the vdt/tanh.h header, so we deduce the version based on the existence of that header and require the minimum version that ROOT needs. This file now also creates an imported; target that can be used within ROOT to link against VDT with dependencies taken care of automatically. Fixes [ROOT-9885](https://sft.its.cern.ch/jira/browse/ROOT-9885).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3827:351,depend,dependencies,351,https://root.cern,https://github.com/root-project/root/pull/3827,1,['depend'],['dependencies']
Integrability,On Mac it is not working from python - let do it from C++ . Define special method and call it via pyroot interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13760:105,interface,interface,105,https://root.cern,https://github.com/root-project/root/pull/13760,1,['interface'],['interface']
Integrability,"On MacOS this simple code using std::sort of RooAbsArg crashed because std::sort MacOS implementation goes to element outside of the collection. ; This simple code reproduced the problem by crashing on MacOS. ```; std::vector<RooAbsArg*> v;; int n = 38;. for (int i = 0; i < n; ++i) {; TString name = TString::Format(""a_%d"",i);; v.push_back( new RooRealVar (name, name, 10,0,20) );; }. std::sort(v.begin(), v.end(), [](RooAbsArg*a, RooAbsArg*b) { return a->dependsOn(*b); } );; ```; ; The PR with the simple check avoid a crash observed running the example in ; https://root-forum.cern.ch/t/upper-limit-for-signal-strength-on-off-problem-multiple-independent-runs/44657",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8111:457,depend,dependsOn,457,https://root.cern,https://github.com/root-project/root/pull/8111,1,['depend'],['dependsOn']
Integrability,"On Ubuntu 22, gcc 11.2 with get the apparently spurious message:; ```; aliceesdProjectSource.cxx: In copy constructor ‘AliESDkink::AliESDkink(const AliESDkink&)’:; aliceesdProjectSource.cxx:992:54: warning: writing 16 bytes into a region of size 8 [-Wstringop-overflow=]; 992 | for (Int_t i=0;i<4;i++) (&(fTPCdensity[0][0]))[i] = (&(rhs.fTPCdensity[0][0]))[i];; | ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; In file included from aliceesdProjectHeaders.h:20,; from aliceesdProjectSource.cxx:3:; AliESDkink.h:36:26: note: destination object ‘AliESDkink::fTPCdensity’ of size 8; 36 | Float_t fTPCdensity[2][2]; //tpc cluster density before and after kink; | ^~~~~~~~~~~; ^~~~~~~~~~~; ```; I.e. complaining about having only 8 bytes when 16 are reserved. We work around this issue by using:; ```; for (Int_t i=0;i<4;i++) reinterpret_cast<Float_t*>(fTPCdensity)[i] = (&(rhs.fTPCdensity[0][0]))[i];; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11556:56,message,message,56,https://root.cern,https://github.com/root-project/root/pull/11556,1,['message'],['message']
Integrability,"On Windows, the `TMVA_Higgs_Classification.C` tutorial gives the; following error:. ```; Processing C:/build/night/LABEL/windows10/SPEC/default/V/master/root/tutorials/tmva/TMVA_Higgs_Classification.C...; In file included from input_line_10:1:; C:\build\night\LABEL\windows10\SPEC\default\V\master\root\tutorials\tmva\TMVA_Higgs_Classification.C:322:27: error: no member named 'Python_Executable' in namespace 'TMVA'; gSystem->Exec(TMVA::Python_Executable() + "" make_higgs_model.py"");; ~~~~~~^; CMake Error at C:/build/night/LABEL/windows10/SPEC/default/V/master/build/RootTestDriver.cmake:227 (message):; error code: 1; ```. Using the same trick to get the Python executable name via; `gROOT->ProcessLine` that is also used in the other TMVA tutorials like; `TMVA_CNN_Classification.C` should fix the problem. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows10,SPEC=default,V=master/lastBuild/testReport/projectroot/runtutorials/tutorial_tmva_TMVA_Higgs_Classification/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10379:595,message,message,595,https://root.cern,https://github.com/root-project/root/pull/10379,1,['message'],['message']
Integrability,"On Windows, we currently cannot generate all modules due to crashes, so some dictionaries are generated with the option `NO_CXXMODULE`. This information needs to be propagated and taken into account when those dictionaries are, in turn, specified as dependencies. This re-implements the logic reverted in commit 2d7373d47e (see the message for details) and closes #12591.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12602:250,depend,dependencies,250,https://root.cern,https://github.com/root-project/root/pull/12602,2,"['depend', 'message']","['dependencies', 'message']"
Integrability,On el9 with the following config (and package from uscms cvmfs for non-builtin dependencies):; ```; cxx17 asimage builtin_clang builtin_cling builtin_gl2ps builtin_gtest builtin_llvm builtin_lz4 ; builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_xxhash builtin_zlib builtin_zstd clad; dataframe davix fitsio gdml http imt mysql opengl pyroot roofit root7 rpath runtime_cxxmodules; shared sqlite ssl tmva tmva-cpu tmva-pymva tpython spectrum vdt x11 xml xrootd; ```; In particular the following for compressions:; ```; builtin_lz4 builtin_lzma builtin_zlib builtin_zstd; ```; ```; cmslpc-el9-heavy01:src (master) pcanal$ uname -a; Linux cmslpc-el9-heavy01.fnal.gov 5.14.0-427.28.1.el9_4.x86_64 #1 SMP; PREEMPT_DYNAMIC Fri Aug 2 03:44:10 EDT 2024 x86_64 x86_64 x86_64; GNU/Linux; ```; The test 18 and 43 produced a PNG file that slight smaller that expected:; ```; Test 18: TGaxis 2.................................................. OK; PDF output................................................ OK; JPG output................................................ OK; PNG output......................................... 18 FAILED; Result = 15655; Reference = 16076; Error = 421 (was 350); C file result............................................. OK; ```; ```; Test 43: Divided pads and TLatex................................... OK; PDF output................................................ OK; JPG output................................................ OK; PNG output......................................... 43 FAILED; Result = 24855; Reference = 25421; Error = 566 (was 300); C file result............................................. OK; ```. Visual inspection of the png files showed no differences.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16492:79,depend,dependencies,79,https://root.cern,https://github.com/root-project/root/pull/16492,1,['depend'],['dependencies']
Integrability,"On macOS, we rely on the `textutil` executable to set some packaging metadata. However, we can't assume that it's always present. For example, in the nix packages build, it is not available, and there is a hack that disables setting the package metadata:; https://github.com/nixos/nixpkgs/blob/848699d4c1f669af01918b7cfdb438329667ddc2/pkgs/applications/science/misc/root/default.nix#L145. However, the `CPACK_PACKAGE_DESCRIPTION_FILE` and; `CPACK_RESOURCE_FILE_README` metadata that depends on `textutil` is optional and not crucial. It's used only in rare situations, like creating Windows installers automatically. See also the description here:; https://cmake.org/cmake/help/latest/module/CPack.html. It would be more appropriate to not fail the configuration if `textutil` is not found, but instead just to skip setting this metadata.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16433:483,depend,depends,483,https://root.cern,https://github.com/root-project/root/pull/16433,1,['depend'],['depends']
Integrability,"Once TBB used inside thread, one should provide that dependency",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8024:53,depend,dependency,53,https://root.cern,https://github.com/root-project/root/pull/8024,1,['depend'],['dependency']
Integrability,"Once TBB used inside thread, one should provide that dependency. Partially solves #8022. Need to be applied also for 6.24 branch",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8023:53,depend,dependency,53,https://root.cern,https://github.com/root-project/root/pull/8023,1,['depend'],['dependency']
Integrability,"One have to provide connection id when accepting file dialog request from client.; This allows to use file dialogs for window with multiple connections at the same time. In eve7 use `RWebWindow` methods to avoid direct dependency from `RBrowser`. `RFileDialog` also used in `RBrowser`, `RCanvas`, `TWebCanvas`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13154:219,depend,dependency,219,https://root.cern,https://github.com/root-project/root/pull/13154,1,['depend'],['dependency']
Integrability,"One need virtual method in `TVirtualIndex` to extract Ndim from the; `TTreeFormula`. Otherwise one has link `Tree` lib again `TreePlayer` and; `Hist`, making circular dependency",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5246:167,depend,dependency,167,https://root.cern,https://github.com/root-project/root/pull/5246,1,['depend'],['dependency']
Integrability,"Only register RooFitCuda as a link dependency, just like; RooFitMultiprocess. This should close https://github.com/root-project/root/issues/13415.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13417:35,depend,dependency,35,https://root.cern,https://github.com/root-project/root/pull/13417,1,['depend'],['dependency']
Integrability,"Opening and closing a TFile in python3.11 occasionally fails. Fresh build of ROOT version 27.01 with newest python (3.11) on macOS. Sometimes the MWE below will fail, and sometimes it will succeed:. ```; if __name__ == ""__main__"": ; with TFile(""file1.root"", ""recreate"") as outfile: ; h = ROOT.TH1F() ; outfile.Close(); ```. about half the time it gives the following error output:. `; *** Break *** segmentation violation; [/Users/austindestcroix/packages/root_py311_v6_26.10/myInstall_p311/lib/libCore.so] TUnixSystem::DispatchSignals(ESignals) (no debug info); [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info); [/Users/austindestcroix/packages/root_py311_v6_26.10/myInstall_p311/lib/libcppyy_backend3_11.so] WrapperCall(long, unsigned long, void*, void*, void*) (no debug info); [/Users/austindestcroix/packages/root_py311_v6_26.10/myInstall_p311/lib/libcppyy_backend3_11.so] WrapperCall(long, unsigned long, void*, void*, void*) (no debug info); [/Users/austindestcroix/packages/root_py311_v6_26.10/myInstall_p311/lib/libcppyy_backend3_11.so] Cppyy::CallConstructor(long, unsigned long, unsigned long, void*) (no debug info); [/Users/austindestcroix/packages/root_py311_v6_26.10/myInstall_p311/lib/libcppyy3_11.so] CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) (no debug info); [/Users/austindestcroix/packages/root_py311_v6_26.10/myInstall_p311/lib/libcppyy3_11.so] CPyCppyy::CPPMethod::ExecuteProtected(void*, long, CPyCppyy::CallContext*) (no debug info); [/Users/austindestcroix/packages/root_py311_v6_26.10/myInstall_p311/lib/libcppyy3_11.so] CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) (no debug info); [/Users/austindestcroix/packages/root_py311_v6_26.10/myInstall_p311/lib/libcppyy3_11.so] CPyCppyy::CPPConstructor::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) (no debug info); [/Users/austindestcroix/packages/root_py311_v6_26.10/myInstall_p311/lib/libcppyy3_11.so] CPyCppyy::(anonymous namespa",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11823:730,Wrap,WrapperCall,730,https://root.cern,https://github.com/root-project/root/issues/11823,2,['Wrap'],['WrapperCall']
Integrability,Original commit message:. The Sema::LookupConstructor is not iteration safe. When looking up a ctor the modules infrasturcture deserializes more ctor; candidates in the body of the function causing the internal vector implementation; to rellocate and invalidate the pointers. This workaround should address the failures reported by LCG. The real fix is being processed here https://reviews.llvm.org/D91524 and we; after being merged we should be able to backport it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7350:16,message,message,16,https://root.cern,https://github.com/root-project/root/pull/7350,1,['message'],['message']
Integrability,"Original commit message:; ""; The current logic of pseudo-automatic modulemap discovery is a little fragile; as it mounts a virtual file named module.modulemap in the location where the; a give system library header is found (cuda.h, etc). However, if the libraries; are squashed into a single folder then we end up mounting a file over another; virtual file. This should be a hard error, however, on systems such as OSX some; libraries already come with modulemap files and we should just not mount our; predefined ones. This makes it very difficult to distinguish when to issue the; hard error. While this patch is not a solution for the general when the modulemaps are; automatically discovered (-fimplicit-module-maps), we can use the real file; stems in cases where we are called with -fno-implicit-module-maps. As a side effect this fixes the *non-recommended* squashing of library header; files into a single folder.; """,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5178:16,message,message,16,https://root.cern,https://github.com/root-project/root/pull/5178,1,['message'],['message']
Integrability,"Original commit message:; ""Constify. NFC.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1373:16,message,message,16,https://root.cern,https://github.com/root-project/root/pull/1373,1,['message'],['message']
Integrability,"Original commit message:; ""[cxxmodules] Don't complain about redeclaration of declared annotated enum. Extend c14934e to support the case where the enum is deserialized from a module and the currently parsed enum comes from an annotated forward declaration. This patch should allow enabling the cmssw DataFormats/PatCandidates module which currently complains with:. scripts/edmCheckClassVersion -l libCondFormatsL1TObjects.so -x CondFormats/L1TObjects/src/classes_def.xml; DataFormatsL1GlobalTrigger_xr dictionary forward declarations' payload:9:216: error: enumeration previously declared with nonfixed underlying type; ...__attribute__((annotate(""$clingAutoload$DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h""))) L1GtObject : unsigned int;; ^; DataFormats/L1GlobalTrigger/interface/L1GtObject.h:28:6: note: previous declaration is here; enum L1GtObject {; ^. cc: @oshadura, @davidlange6, @smuzaffar, @mrodozov",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5059:16,message,message,16,https://root.cern,https://github.com/root-project/root/pull/5059,3,"['interface', 'message']","['interface', 'message']"
Integrability,"Original commit message:; ""[modules] Print input files when -module-file-info file switch is passed. This patch improves traceability of duplicated header files which end up in multiple pcms.; """,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2491:16,message,message,16,https://root.cern,https://github.com/root-project/root/pull/2491,1,['message'],['message']
Integrability,"Original commit message:; ""[tblgen] Remove uses of std::ptr_fun, it's removed in C++17."". @davidlt, does that fix ROOT-9085?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1297:16,message,message,16,https://root.cern,https://github.com/root-project/root/pull/1297,1,['message'],['message']
Integrability,"Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:; ```; Commit to a primary definition for a class when we load its first; member. Previously, we wouldn't do this if the first member loaded is within a; definition that's added to a class via an update record, which happens; when template instantiation adds a class definition to a declaration; that was imported from an AST file. This would lead to classes having member functions whose getParent; returned a class declaration that wasn't the primary definition, which; in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because; the setup required to get us into the broken state is very subtle, but; have confirmed that this fixes it.; ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:; ```; Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed.; ```; which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13370:9,message,message,9,https://root.cern,https://github.com/root-project/root/pull/13370,1,['message'],['message']
Integrability,"Original message:; ""[cmake] Use CLANG_BINARY_DIR to determine the build directory. The patch puts the ClangConfig.cmake in the expected location when clang is; embedded into a framework.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1536:9,message,message,9,https://root.cern,https://github.com/root-project/root/pull/1536,1,['message'],['message']
Integrability,Otherwise one has to set dependency from ProofPlayer lib,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5240:25,depend,dependency,25,https://root.cern,https://github.com/root-project/root/pull/5240,1,['depend'],['dependency']
Integrability,"Otherwise the externals are built in x86_64 mode and are not compatible with the rest of the libraries. The error message is then something like:; ```; ld: warning: ignoring file lib/liblzma.a, building for macOS-arm64 but attempting to link with file built for macOS-x86_64; ```. See also https://discourse.cmake.org/t/building-application-using-externalproject-add-on-m1-cpu/4931/7",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12887:114,message,message,114,https://root.cern,https://github.com/root-project/root/pull/12887,1,['message'],['message']
Integrability,Otherwise variable `ROOT_qt5web_FOUND` will be set and depend project may try to build libraries which using it,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12872:55,depend,depend,55,https://root.cern,https://github.com/root-project/root/pull/12872,2,['depend'],['depend']
Integrability,"Our CMake code modifies `find_package` to ignore any ROOT builtins, such that the builtin LLVM doesn't find and use system versions of the builtin dependencies. This is a bit hacky, but fortunately this needs to be done only when builtins are used. Therefore, this commit suggests to only do this redefinition of `find_package` if any builtins are used. This closes #8633, where it was requested to avoid this hack for the sake of being compatible with the `vcpkg` package manager. Although the hack is not completely removed, it is removed for the case where not builtins are used, which is probably what is done when using a C++ package manager to manage dependencies.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16274:147,depend,dependencies,147,https://root.cern,https://github.com/root-project/root/pull/16274,2,['depend'],['dependencies']
Integrability,"Output lines are in wrong order when running CTest on Windows x64, as shown below:; ```; 1397: -- BEGIN TEST OUTPUT --; 1397:; 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C...; 1397: WithDtor(): 1; 1397: Ident: IAmWithDtor!; 1397: Now deleting TInterpreterValue; 1397: ~WithDtor() 0; 1397: Now all WithDor should be gone; we have 0 left; 1397: About to return a WithDtor; 1397:; 1397: -- END TEST OUTPUT --; 1397: -- BEGIN OUTDIFF OUTPUT --; 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021; 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022; 1397: @@ -1,7 +1,7 @@; 1397:; 1397: WithDtor():1; 1397: -AbouttoreturnaWithDtor; 1397: Ident:IAmWithDtor!; 1397: NowdeletingTInterpreterValue; 1397: ~WithDtor()0; 1397: NowallWithDorshouldbegone;wehave0left; 1397: +AbouttoreturnaWithDtor; 1397:; 1397: -- END OUTDIFF OUTPUT --; 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):; 1397: compare 'stdout' error: 1; 1397:; 1397:; 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec; ```; The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position).; This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9944:1074,message,message,1074,https://root.cern,https://github.com/root-project/root/issues/9944,1,['message'],['message']
Integrability,"Over the years we have a pathological issue with cling when it calls directly; compiler API. Most of the API assume they are called from code residing in a; text file. This code has valid source locations which can be used for; comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling; should have an interface which gives a pseudo-valid, commonly-rooted unique; source location. We are bitten by this fact when preloading modules as if we have diagnostics; they cannot be ordered due to the fact that the compared decls from two; different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have; this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4339:401,interface,interface,401,https://root.cern,https://github.com/root-project/root/pull/4339,1,['interface'],['interface']
Integrability,"Overall goals:; - fix currently broken dependencies, e.g. touch a header in histfactory does not regenerate its dictionary;; - simplify G__Core CMake setup;; - remove unnecessary dictionaries;; - reduce dependencies / occasions to rebuild dictionaries, e.g. touch hist/hist/src/TH1.cxx and the dictionaries of libraries depending on libHist were rebuild, and so was the PCH. I see an issue with runtime_cxxmodules; let's see what Jenkins says!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3371:39,depend,dependencies,39,https://root.cern,https://github.com/root-project/root/pull/3371,3,['depend'],"['dependencies', 'depending']"
Integrability,"Part of the RooFit code modernization, avoiding the use of unnecessary; wrapper classes and using a simple templated struct instead. The change in this PR is thoroughly tested by `stressRooFit`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10115:72,wrap,wrapper,72,https://root.cern,https://github.com/root-project/root/pull/10115,1,['wrap'],['wrapper']
Integrability,"Partial fix of #8708.; In a setup where ROOT was installed in a system directory, ROOT was picking up headers from that directory instead of its own. . ## How to reproduce:; 1. `echo '#error This is the wrong header' > /my/include/directory/RooSpan.h` (or a few other headers).; 2. Install some builtins into that directory, e.g. VDT; 3. `cmake -DCMAKE_PREFIX_PATH=/my/include/directory/ <root>` to create a dependency to that include directory.; 4. Build. The problem only becomes visible when `A` depends on `B and C`, and `B` depends on something in `/system/include/`, and `C` is installed in those system includes as well. This generates a compile command such as:; ```; -I.../core/x -I.../core/y -I.../core/... -I.../A/include -I.../B/include -I/system/include/ -I.../C/include ...; ```. ## In this PR:; - Includes for VDT and XROOTD are fixed by making them `IMPORTED` targets, so their includes have lowest precedence.; - Some cheating where include directories are copied around between targets is removed. CMake should handle this.; - Some dependency and target management is simplified (or rather modernised with target-based cmake); - A broken dependency in RooFit is fixed, which was previously hidden by the cheating with include directories. ## What remains to be done:; It is likely that more builtins (or rather `FindXXX` have to be converted to `IMPORTED` targets, so they don't provoke this error again. A broken configuration can be detected by; 1. Having CMake pick up a dependency in some common directory; 2. Either; - Placing a lot of `#error`-ROOT headers in there or; - Searching `compile_commands.json` for `-I/my/include/directory/`; 3. Fixing the `FindXXX` for this dependency.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8709:408,depend,dependency,408,https://root.cern,https://github.com/root-project/root/pull/8709,7,['depend'],"['dependency', 'depends']"
Integrability,"Partially solves: [ROOT-10915](https://its.cern.ch/jira/browse/ROOT-10915). Reasoning from the ticket:; > It seems most header files are not added to the library targets that compose ROOT. This is most imminent to me when I create a Visual Studio project by CMake. Almost all header files are missing in the solution explorer. > While this still allows to build ROOT, the IDE experience is severly limited. Automatic code refactoring and static analysis fails to a large degree, because the headers are not considered part of the project. E.g. the clang-tidy integration in Visual Studio cannot fix any header files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6014:559,integrat,integration,559,https://root.cern,https://github.com/root-project/root/pull/6014,1,['integrat'],['integration']
Integrability,"Parts of this were accessed through redefining private/protected as public; which, besides of being a nasty hack, does not work with gcc-5. TColor had a static bool member fgInitDone that is now a local static in InitializeColors(). I just added a bool argument force=kFALSE as this was a minimal change. If desired, I can do the following:; . Split InitializeColors() into initial part that does the check is-init-done and the actual initialization code that is private.; . Introduce new static function InitializeColorsForce() that skips the check.; This way the interface to InitializeColors() will not change.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/99:565,interface,interface,565,https://root.cern,https://github.com/root-project/root/pull/99,1,['interface'],['interface']
Integrability,"Please search in; * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue); * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT); for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"".; -->. ### Describe the bug; <!--; I was build ROOT from source on a FreeBSD VM.; after command: cmake -Dall=ON -Dcuda=OFF -Dalien=OFF -Doracle=OFF ../root-6.26.06,; I got a warning:; Looking for XROOTD; -- Found Xrootd version num: 4.10.0 (setting -DROOTXRDVERS=400100000); -- libXrdMain not found: xproofd will be a wrapper around xrootd; -- include_dirs: /usr/local/include/xrootd;/usr/local/include/xrootd/private; -- libraries: /usr/local/lib/libXrdUtils.so;/usr/local/lib/libXrdClient.so;/usr/local/lib/libXrdCl.so; CMake Warning (dev) at /usr/local/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:438 (message):; The package name passed to `find_package_handle_standard_args` (PkgConfig); does not match the name of the calling package (Arrow). This can lead to; problems in calling code that expects `find_package` result variables; (e.g., `_FOUND`) to follow a certain pattern.; Call Stack (most recent call first):; /usr/local/share/cmake/Modules/FindPkgConfig.cmake:99 (find_package_handle_standard_args); cmake/modules/FindArrow.cmake:39 (include); cmake/modules/SearchInstalledSoftware.cmake:17 (_find_package); cmake/modules/SearchInstalledSoftware.cmake:1040 (find_package); CMakeLists.txt:245 (include); This warning is for project developers. Use -Wno-dev to suppress it. I just ignored it.; after command: cmake --build . --target install, everything goes well and then it stopped with following message. [ 52%] Generating G__Core.cxx, ../lib/Core.pcm; #0 0x00000000044aaf65 llvm::sys::PrintStackTrace(llvm::raw_ostream&) Signals.cpp:0:0; #1 0x00000000044a91b6 llvm::sys::RunSignalHandlers() Signals.cpp:0:0; #2 0x00000000044ab726 SignalHandler(int) Signals",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11430:971,message,message,971,https://root.cern,https://github.com/root-project/root/issues/11430,1,['message'],['message']
Integrability,Please see commit messages for full explanation of the changes. Failing test: http://cdash.cern.ch/testDetails.php?test=24129853&build=345069,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/512:18,message,messages,18,https://root.cern,https://github.com/root-project/root/pull/512,1,['message'],['messages']
Integrability,Please see commit messages for more details.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4330:18,message,messages,18,https://root.cern,https://github.com/root-project/root/pull/4330,1,['message'],['messages']
Integrability,"Please see commit messages for more information. Note: For the regular binary releases, `-Drpath=ON -DCMAKE_INSTALL_RPATH='$ORIGIN/../lib'` should be added to our Jenkins jobs in order to use relative `RUNPATH` and not require setting `LD_LIBRARY_PATH` afterwards for using ROOT.; The only setup that will be really required later would be setting `PYTHONPATH` to the same as `root-config --libdir` before trying to `import ROOT` from Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6735:18,message,messages,18,https://root.cern,https://github.com/root-project/root/pull/6735,1,['message'],['messages']
Integrability,Please see commit messages for more information. This probably also fixes [ROOT-9139](https://sft.its.cern.ch/jira/browse/ROOT-9139).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1419:18,message,messages,18,https://root.cern,https://github.com/root-project/root/pull/1419,1,['message'],['messages']
Integrability,Plus additional cleanup of interface in THttpServer class. Changing arguments order in TWebWindow::Send() methods. Address most comments from #1785,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1852:27,interface,interface,27,https://root.cern,https://github.com/root-project/root/pull/1852,1,['interface'],['interface']
Integrability,"Prevent the following error when running the test with VS 2022 v17.9.0:; ```; 779: Processing C:/root-dev/git/master/tutorials/multicore/mt201_parallelHistoFill.C...; 779: [runStaticInitializersOnce]: Failed to materialize symbols: { (main, { ?_Swap@?$_Ptr_base@VTH1F@@@std@@IEAAXAEAV12@@Z,; [...]; 779: [runStaticInitializersOnce]: Failed to materialize symbols: { (main, { __orc_init_func.cling-module-9 }) }; 779: cling JIT session error: Failed to materialize symbols: { (main, { ?mt201_parallelHistoFill@@YAHXZ }) }; 779: CMake Error at C:/root-dev/build/x64/debug/RootTestDriver.cmake:232 (message):; 779: error code: 1; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14783:596,message,message,596,https://root.cern,https://github.com/root-project/root/pull/14783,1,['message'],['message']
Integrability,"Previously if a message (for example warning of duplicate dictionary) happened during intialization, it would trigger the initialization of gROOT and could trigger a nested Warning. for example due to the duplicate rootmap file entry and would cause a dead lock (recursiverly taking the non recursive lock GetErrorMutex().",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11384:16,message,message,16,https://root.cern,https://github.com/root-project/root/pull/11384,1,['message'],['message']
Integrability,"Previously if a user with Python2 didn't have pyspark installed on the system it would trigger the wrong error; ```; File ""/home/vpadulan/Programs/rootproject/rootinstall/devrelease/lib/DistRDF/Backends/Spark/Backend.py"", line 22, in <module>; except ModuleNotFoundError:; NameError: name 'ModuleNotFoundError' is not defined; ```; Switch to the base class `ImportError` which is Python2 compatible, also improve the error message to include the link to the installation guide for pyspark (this works equally for Python2 and Python3):; ```; File ""/home/vpadulan/Programs/rootproject/rootinstall/devrelease/lib/DistRDF/Backends/Spark/Backend.py"", line 23, in <module>; raise ImportError((""cannot import module 'pyspark'. Refer to ""; ImportError: cannot import module 'pyspark'. Refer to https://spark.apache.org/docs/latest/api/python/getting_started/install.html for instructions on how to install PySpark on your system.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7705:423,message,message,423,https://root.cern,https://github.com/root-project/root/pull/7705,1,['message'],['message']
Integrability,"Previously the modules were only a environment variable, so we never; had any CMake code that added the correct dependencies here. Now we; do have runtime_cxxmodules, and we can actually properly add a; dependency here.; Without this patch a deleted C++ module file actually will never be regenerated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1038:112,depend,dependencies,112,https://root.cern,https://github.com/root-project/root/pull/1038,2,['depend'],"['dependencies', 'dependency']"
Integrability,Previously we had some strange dependency net with multiple commands; that sometimes lead to only having half a modulemap in the build dir.; Now there is only one target that depends on the generated modulemap; and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/541:31,depend,dependency,31,https://root.cern,https://github.com/root-project/root/pull/541,4,['depend'],"['dependency', 'depends']"
Integrability,Print instructive error message if builtin_llvm=off,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1509:24,message,message,24,https://root.cern,https://github.com/root-project/root/pull/1509,1,['message'],['message']
Integrability,"Print status message during cmake if PyMVA is not build and python is activated but numpy is not found. Otherwise, a missing numpy drops PyMVA silently (and confuses the user).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/272:13,message,message,13,https://root.cern,https://github.com/root-project/root/pull/272,1,['message'],['message']
Integrability,"Printing a welcome message when importing a module is uncommon in Python and quite old fashioned. If one wants to see the ROOT version, one can always print `ROOT.__version__` like for many other modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14661:19,message,message,19,https://root.cern,https://github.com/root-project/root/pull/14661,1,['message'],['message']
Integrability,"Prior to this change, TProcessID::RecursiveRemove would call TExMap::Remove without checking whether the object was in that map or not. In addition TExMap::Remove complains if it can not be found.; This resulted in spurious error message when the number of TProcessID increased passed 255 but some of the object with lower index TProcessID were deleted. See https://root-forum.cern.ch/t/resetting-tprocessid-objectcount-in-multihtreading-environment/38899; for a concrete example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5446:230,message,message,230,https://root.cern,https://github.com/root-project/root/pull/5446,1,['message'],['message']
Integrability,"Probably due to historical reasons, the Minuit2 code uses several systems to report errors, warnings, and debug info. Some of these only work when certain compile flags are set (WARNINGMSG and DEBUG). I would like to unify these systems and use the MnPrint facilities consistently everywhere. This would have the advantage that debug info can be turned on at any time without recompiling and it has additional advantages for frontends to Minuit2, like [iminuit](https://github.com/scikit-hep/iminuit). I would like to work on this, but need some feedback before I invest time. ### Proposed changes. Currently, there are three systems to report info, errors, warnings, and debug messages. The latter two need to be enabled with compile flags (WARNINGMSG and DEBUG). Examples from VariableMetricBuilder.cxx:. Direct use of the MnPrint facilities (this is the ""proper"" way); ```c++; if (PrintLevel() > 1) {; MnPrint::PrintState(std::cout, result.back(), ""VariableMetric: Iteration # "",result.size()-1);; }; ```; Use of MnPrint macros for info messages that are only enabled when WARNINGMSG is set; ```c++; #ifdef WARNINGMSG; MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");; #endif; ```; Use of DEBUG and std::cout; ```c++; #ifdef DEBUG; std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;; #endif; ```; The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors; - level 1: all of level 0 + warnings; - level 2: all of level 1 + info; - level 3: all of level 2 + debug. and add the corresponding macros; ```c++; MN_WARN_MSG; MN_WARN_MSG2; MN_WARN_VAL; MN_WARN_VAL2; MN_DEBUG_MSG; MN_DEBUG_MSG2; MN_DEBUG_VAL; MN_DEBUG_VAL2; ```; in addition to the existing MN_INFO_* and MN",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6421:678,message,messages,678,https://root.cern,https://github.com/root-project/root/issues/6421,1,['message'],['messages']
Integrability,Prompt error message and stop the event loop instead.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3746:13,message,message,13,https://root.cern,https://github.com/root-project/root/pull/3746,1,['message'],['message']
Integrability,"Proof of concept of ROOT working with HPX as a backend. Includes one commit for the build system and another one that applies the necessary changes in the code, specifically to TThreadExecutor, and proposes an interface to specify the backend to run with when calling EnableImplicitMT. As suggested, making the choice of using hpx (instead of tbb) at runtime allows for an easier integration of the hpx library in ROOT. Drawbacks at this point: . - Can't choose the size of the threadpool. HPX always proceeds with as many as physical cores.; - Breaks all RDataFrame tests that run with a specified number of cores/slots.; - Requires `#include <hpx/hpx_main.hpp>` in the script with the main.; - Compilation becomes more cumbersome, ending up with something like: ``g++ myProgram.cpp `root-config --cflags --libs` `pkg-config --cflags --libs hpx_application` - DHPX_APPLICATION_NAME=myProgram -o myProgram.out``; - Performance (benchmarking at the moment). This PR requires HPX to be installed. If someone wants to give it a try, @amadio was so kind to build HPX into the Gentoo prefix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5364:210,interface,interface,210,https://root.cern,https://github.com/root-project/root/pull/5364,2,"['integrat', 'interface']","['integration', 'interface']"
Integrability,Propagate the path to cuda to the TMVA-dependent Genetic dictionary.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6999:39,depend,dependent,39,https://root.cern,https://github.com/root-project/root/pull/6999,1,['depend'],['dependent']
Integrability,Proper check for destruction of global interface object,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/476:39,interface,interface,39,https://root.cern,https://github.com/root-project/root/pull/476,1,['interface'],['interface']
Integrability,"Proposal to add a `requirements.txt` file and a corresponding test checking the dependencies also by the version requirement. The test throws an error for each dependency seperately due to the `SubTest`. A single exception looks like this:. ```; 3: pkg_resources.VersionConflict: (xgboost 0.80 (/home/stefan/.local/lib/python3.8/site-packages), Requirement.parse('xgboost>=0.81')); ```. @eguiraud @Axel-Naumann @etejedor @oshadura Ping :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5408:80,depend,dependencies,80,https://root.cern,https://github.com/root-project/root/pull/5408,2,['depend'],"['dependencies', 'dependency']"
Integrability,Protobuf now generates its own CMake config files. The new config files are necessary because Protobuf has grown a dependence on abseil-cpp.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14144:115,depend,dependence,115,https://root.cern,https://github.com/root-project/root/pull/14144,1,['depend'],['dependence']
Integrability,"Provide RFileDialog class. Can be used standalone or embed into other widgets.; Used now in RBrowser to implement SaveAs functionality for edited file. Key feature - sharing of web connection of RBrowser also for RFileDialog.; Includes changes in RWebWindow classes and in JSROOT,; but opens a lot of possibility for MDI interface developments in the future!. Now code is ready to be merged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4662:321,interface,interface,321,https://root.cern,https://github.com/root-project/root/pull/4662,1,['interface'],['interface']
Integrability,"Provide access to whether the enum is a scoped enum through TEnum::Property().; Add an interface to determine the underlying type of an enum, as EDataType.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4031:87,interface,interface,87,https://root.cern,https://github.com/root-project/root/pull/4031,1,['interface'],['interface']
Integrability,"Public interface creating an interpreter transaction, needs locking. I attach a stack trace from a condor job running with the latest nightly build a Python script (AGC benchmark), which led to the change in this PR. I'm not sure how to create a simple reproducer/test yet unfortunately. [htcondor-worker-trace.txt](https://github.com/root-project/root/files/12642962/htcondor-worker-trace.txt)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13657:7,interface,interface,7,https://root.cern,https://github.com/root-project/root/pull/13657,1,['interface'],['interface']
Integrability,"Put it into graf2d/gpad. For the moment it is not possible to add v7 TText into graf2d/graf due to cross-referencing between libGpad and libGraf in that case. Normally libGpad linked against libGraf, but if one adds v7 TText into libGraf, one need several v7 classes (including TCanvas) from libGpad. One gets circular dependency. Should be resolved after Axel redesigns draw attributes container. . Also include JSROOT code for FitPanel and TText. Update docu for THttpServer and JSROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1235:319,depend,dependency,319,https://root.cern,https://github.com/root-project/root/pull/1235,1,['depend'],['dependency']
Integrability,PyROOT does not really need to link against all libraries listed as dependencies in the CMakeLists.txt file. Some of the libraries should be loaded on demand at runtime. Related JIRA issues:; - https://sft.its.cern.ch/jira/browse/ROOT-9728; - https://sft.its.cern.ch/jira/browse/ROOT-9729,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2800:68,depend,dependencies,68,https://root.cern,https://github.com/root-project/root/pull/2800,1,['depend'],['dependencies']
Integrability,"Python2 headers still use the register keyword, which causes; issues when compiling ROOT with C++ 17, since that is also the; standard that will be used for jitting. In particular, when cppyy generates a C++ wrapper for a Python; callable parameter, CPyCppyy/API.h is jitted and so are the; Python headers. In Python2 with C++17, such jitting fails and,; as a result, the C++ wrapper can't be generated. This commit ignores -Wregister when in Python2 and C++ 17. Fixes #8152",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8263:208,wrap,wrapper,208,https://root.cern,https://github.com/root-project/root/pull/8263,2,['wrap'],['wrapper']
Integrability,"RBrowserDataCleanup derives from TObject, so it is necessary to add a `ClassDef` call as per; https://root.cern/manual/io_custom_classes/#the-classdef-macro. Also, the class is for internal use, so move it to `Internal` namespace. Generate the corresponding dictionary in Linkdef.h for proper class streaming. This seems to fix `roottest-root-core-execStatusBitsCheck` related to #13058 , but maybe the current status of these changes needs to be revisited. It seems weird to me that we need a class that depends from `TObject` in the new webgui, (especially because this adds a nasty `#include <TObject.h>` which wasn't even present before, I wonder how it compiled) but I'm maybe missing something here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13257:505,depend,depends,505,https://root.cern,https://github.com/root-project/root/pull/13257,1,['depend'],['depends']
Integrability,RConfigure module / dictionary dependency,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5782:31,depend,dependency,31,https://root.cern,https://github.com/root-project/root/pull/5782,1,['depend'],['dependency']
Integrability,"RNINGMSG is set; ```c++; #ifdef WARNINGMSG; MN_INFO_MSG(""VariableMetricBuilder: initial matrix not pos.def."");; #endif; ```; Use of DEBUG and std::cout; ```c++; #ifdef DEBUG; std::cout<<""VariableMetricBuilder convergence when edm < ""<<edmval<<std::endl;; #endif; ```; The latter two need to be enabled at compile-time. If they are enabled, there is no fine-grained run-time control, because the MnPrint system only distinguishes two verbosity levels 0 and 1. On level 0, only errors are reported. On level 1, errors and ""info"" are reported. I propose to enhance this by two more levels. - level 0: report errors; - level 1: all of level 0 + warnings; - level 2: all of level 1 + info; - level 3: all of level 2 + debug. and add the corresponding macros; ```c++; MN_WARN_MSG; MN_WARN_MSG2; MN_WARN_VAL; MN_WARN_VAL2; MN_DEBUG_MSG; MN_DEBUG_MSG2; MN_DEBUG_VAL; MN_DEBUG_VAL2; ```; in addition to the existing MN_INFO_* and MN_DEBUG_* macros. Level 1 would enable the warning messages that are currently only available when the compiler flag WARNINGMSG is defined. Level 3 would enable the debug messages that are currently only available when the compiler flag DEBUG is defined. In my experience, trouble with minimizing some function is common so it would be a great asset to enable more debug output at anytime by just increasing the print level without recompiling ROOT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes?. This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6421:2051,message,messages,2051,https://root.cern,https://github.com/root-project/root/issues/6421,1,['message'],['messages']
Integrability,"RNTupleWriter::CommitCluster (this=0xd7486120, commitClusterGroup=true) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTuple.cxx:370; #12 0xf7e2c674 in ROOT::Experimental::RNTupleWriter::~RNTupleWriter (this=0xd7486120, __in_chrg=<optimized out>) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTuple.cxx:327; #13 0x56560f58 in std::default_delete<ROOT::Experimental::RNTupleWriter>::operator() (__ptr=0xd7486120, this=<optimized out>) at /usr/include/c++/13/bits/unique_ptr.h:100; #14 0x565606cf in std::default_delete<ROOT::Experimental::RNTupleWriter>::operator() (__ptr=<optimized out>, this=<optimized out>) at /usr/include/c++/13/bits/unique_ptr.h:94; #15 std::unique_ptr<ROOT::Experimental::RNTupleWriter, std::default_delete<ROOT::Experimental::RNTupleWriter> >::~unique_ptr (this=0xffde8b50, __in_chrg=<optimized out>) at /usr/include/c++/13/bits/unique_ptr.h:405; #16 RNTuple_LargeFile2_Test::TestBody (this=0x57246b80) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_extended.cxx:260; #17 0xf7d7159c in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) [clone .constprop.0] () from /lib/libgtest.so.1.13.0; #18 0xf7d5cf46 in testing::Test::Run() () from /lib/libgtest.so.1.13.0; #19 0xf7d5d17a in testing::TestInfo::Run() () from /lib/libgtest.so.1.13.0; #20 0xf7d5d327 in testing::TestSuite::Run() () from /lib/libgtest.so.1.13.0; #21 0xf7d6a95b in testing::internal::UnitTestImpl::RunAllTests() () from /lib/libgtest.so.1.13.0; #22 0xf7d695cb in testing::UnitTest::Run() () from /lib/libgtest.so.1.13.0; #23 0xf7d1e137 in main () from /lib/libgtest_main.so.1.13.0; #24 0xf6837969 in __libc_start_call_main () from /lib/libc.so.6; #25 0xf6837a2c in __libc_start_main_impl () from /lib/libc.so.6; #26 0x56560e0b in _start (); CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ~~~",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12427:12388,message,message,12388,https://root.cern,https://github.com/root-project/root/issues/12427,1,['message'],['message']
Integrability,"ROOT can't autoparse classes inside namespaces with the rootmap; system (as the loading callbacks don't correctly land where; they are supposed to land with our injected namespaces). As this; turns out to be a feature of some kind, let's preload TMVA/TreePlayer; to fix all failing tests that are related to this feature/bug with; modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1355:161,inject,injected,161,https://root.cern,https://github.com/root-project/root/pull/1355,1,['inject'],['injected']
Integrability,"ROOT can't autoparse classes inside namespaces with the rootmap; system (as the loading callbacks don't correctly land where; they are supposed to land with our injected namespaces). As this; turns out to be a feature of some kind, let's preload; TMVA/TreePlayer/Graf to fix all failing tests that are related; to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. 1. figure out how to fix this bug in the rootmap-based loading; without regressin in performance. 2. replace the rootmap system with something else like attaching; all C++ modules on startup. Note that we already do something like this in normal ROOT by; including these packages into the PCH which also makes those; decls available in the normal clang lookup. This PR depends on #1394",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1396:161,inject,injected,161,https://root.cern,https://github.com/root-project/root/pull/1396,2,"['depend', 'inject']","['depends', 'injected']"
Integrability,ROOT cannot read compiler includes when compiled with a ccache compiler wrapper,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10556:72,wrap,wrapper,72,https://root.cern,https://github.com/root-project/root/issues/10556,1,['wrap'],['wrapper']
Integrability,ROOT crashes with no helpful error messages if a TApplication is not present and tree->StartViewer() is called,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6743:35,message,messages,35,https://root.cern,https://github.com/root-project/root/issues/6743,1,['message'],['messages']
Integrability,"ROOT injects forward declarations of entities as trampolines to resolve the full definitions and load the corresponding library. This allows the ROOT users to 'just' type a name and the interpreter will resolve its definition and dlopen the library describing it. There is a well-known (not well understood until now) limitation with this system: we cannot load entities in namespaces. Namely, if we type `ROOT::TDF::TDataFrame;` the system won't be able to resolve it. This is because we enable the system to load only the contents of namespaces from the forward declarations. For example,; ```cpp; // rootmap file; namespace ROOT{ namespace Experimental { class TDataFrame; } } // #1. // real code; namespace ROOT{ namespace Experimental { class TDataFrame {}; } } // #2. [root] ROOT::Experimental::TDataFrame d; // #3; ```; `#1` is piped at root/interpreter start up; we find the DeclContext and flag it. `#3` triggers a lookup and `#includes #2`. The problem is that we do not issue a lookup in `#2`. The effect is that we practically cannot autoload entities from namespaces. Turning it 'just' on breaks performance and starts loading irrelevant libraries. This is because clang eagerly deserializes template specialization declarations for the decl context in question when computing linkage information in CodeGen. All heavy lifting is done in [D41416](https://reviews.llvm.org/D41416) and landed in e51a2b9de4. It enables finer-grained template specialization deserialization removing the effect of loading irrelevant libraries. The performance impact will be seen shortly after we land this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1547:5,inject,injects,5,https://root.cern,https://github.com/root-project/root/pull/1547,1,['inject'],['injects']
Integrability,ROOT recompilation speed with CMake and dependencies,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8624:40,depend,dependencies,40,https://root.cern,https://github.com/root-project/root/issues/8624,1,['depend'],['dependencies']
Integrability,"ROOT's ""dynamic path"" has some environment variables to control it. Those environment variables have some issues:. * They are dependant on the OS (DYLD* on macOS, LD_LIBRARY_PATH on Linux, etc); * LD_LIBRARY_PATH/etc modify the system's search path for dynamic libraries, which can result in all sorts of bad things. We would like to have a dedicated environment variable, that is; * OS independant.; * does only affect ROOT. Let's name it ROOT_LIBRARY_PATH (suggestion on mattermost.web.cern.ch). It was suggested to put this into `system.rootrc` and/or `.rootrc`. This has some issues:. * `.rootrc` is good for a per user solution. We would like to have a package level solution.; * `system.rootrc` is usually a place for the local sysadmin to modify. It could be used by a distribution package to put ""defaults"". But that's not really nice.; * Finally, `.rootrc` entries replace `system.rootrc` entries. So any package level configuration would be gone the moment, that the user sets `Unix.*.Root.DynamicPath`. So getting the above mentioned environment variable to work at a package level, means to put it into TUnixSystem.cpp. cc: @dennisklein",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7031:126,depend,dependant,126,https://root.cern,https://github.com/root-project/root/pull/7031,1,['depend'],['dependant']
Integrability,ROOT-10637: Resolve dependencies and relink if explicit linking is on,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5235:20,depend,dependencies,20,https://root.cern,https://github.com/root-project/root/pull/5235,1,['depend'],['dependencies']
Integrability,"ROOT-7921; When using the RooCustomizer factory interface, deep trees couldn't be; reused in subsequent expressions. ROOT-10670; Due to changes somewhere in math, the RooMinimizer in ROOT 6.20 falls; back to Minuit after using minimize() with a different minimiser.; minim.minimize(""Minuit2"");; minim.hesse(); // Users expected minuit2 here, but now minuit. The usual behaviour was restored by remembering the choice of minimiser; in `minimize`, which apparently happened behind the scenes in math in; the past.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5337:48,interface,interface,48,https://root.cern,https://github.com/root-project/root/pull/5337,1,['interface'],['interface']
Integrability,ROOT-9216: Move mathcore tests that depend on RooFit into test/roofit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2016:36,depend,depend,36,https://root.cern,https://github.com/root-project/root/pull/2016,1,['depend'],['depend']
Integrability,ROOT-9729: Remove unused library dependencies from PyROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2800:33,depend,dependencies,33,https://root.cern,https://github.com/root-project/root/pull/2800,1,['depend'],['dependencies']
Integrability,"ROOT::TestSupport checks info/warning/error messages during unit tests. Previously, it would generate one global failure irrespective of how many messages have been received, or how many were missing. It would then list all messages that are being checked, irrespective of whether they were received or not. Now, each missing or unexpected message generates a dedicated test failure. ## Before; ```; ../../../root-src/core/testsupport/src/TestSupport.cxx:93: Failure; Failed; ROOT::TestSupport::CheckDiagsRAII: Unexpected diagnostic messages received.; ../../../root-src/core/testsupport/src/TestSupport.cxx:96: Failure; Failed; ROOT::TestSupport::CheckDiagsRAII: Diagnostic message missing.; -------------------------; Pre-registered messages:; kError	1x received	(required, subMatch)	'prepareMethod' msg='Can't compile function TFormula'; kError	0x received	(required, fullMatch)	'TFormula::InputFormulaIntoCling' msg='Error compiling formula expression in Cling____'; kError	1x received	(required, subMatch)	'TFormula::ProcessFormula' msg=' is invalid'; kError	1x received	(required, subMatch)	'TFormula::ProcessFormula' msg='has not been matched in the formula expression'; kError	2x received	(required, subMatch)	'cling' msg='undeclared identifier'; Unexpected messages received:; kError	'TFormula::InputFormulaIntoCling' msg='Error compiling formula expression in Cling'; -------------------------; ```. ## After; ```; ../../../root-src/core/testsupport/src/TestSupport.cxx:96: Failure; Failed; ROOT::TestSupport::CheckDiagsRAII: Expected diagnostic message missing:; severity: kError; received: 0 times (required, fullMatch)	; origin: ""TFormula::InputFormulaIntoCling""; message: Error compiling formula expression in Cling____. ../../../root-src/core/testsupport/src/TestSupport.cxx:101: Failure; Failed; ROOT::TestSupport::CheckDiagsRAII: Unexpected diagnostic message:; severity: kError; origin: ""TFormula::InputFormulaIntoCling""; message: Error compiling formula expression in Cling; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12469:44,message,messages,44,https://root.cern,https://github.com/root-project/root/pull/12469,12,['message'],"['message', 'messages']"
Integrability,ROOT_HEAD failed with error message: Fail to detect cryptographic random generator,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14958:28,message,message,28,https://root.cern,https://github.com/root-project/root/issues/14958,1,['message'],['message']
Integrability,"ROOT_LINKER_LIBRARY implicitly adds G__XYZ as dependency if that target exists.; This causes Imt to depend both on G__Imt and G__Imt.cxx, triggering the dictionary build twice.; See the result of $ grep -r ""Generating G__Imt"" core/imt; core/imt/CMakeFiles/Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap""; core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". With this change, G__Imt.cxx has only one target:; $ grep -r ""Generating G__Imt"" core/imt; core/imt/CMakeFiles/G__Imt.dir/build.make:@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --blue --bold --progress-dir=/Users/axel/build/root/cmake/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) ""Generating G__Imt.cxx, ../../lib/libImt.rootmap"". This fixes sporadic build problems due to two targets creating the same output file concurrently:; [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap; Scanning dependencies of target G__Imt; [ 73%] Generating G__Imt.cxx, ../../lib/libImt.rootmap; [ 73%] Building CXX object core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o; g++: error: /mnt/build/workspace/lcg_release_tar/BUILDTYPE/Debug/COMPILER/native/LABEL/ubuntu16/build/projects/ROOT-6.16.00/src/ROOT-6.16.00-build/core/imt/G__Imt.cxx: No such file or directory; g++: fatal error: no input files; compilation terminated.; core/imt/CMakeFiles/Imt.dir/build.make:106: recipe for target 'core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o' failed; make[5]: *** [core/imt/CMakeFiles/Imt.dir/G__Imt.cxx.o] Error 1; [ 73%] Built target G__Imt; make[5]: Target 'core/imt/CMakeFiles/Imt.dir/build' not remade because of errors.; CMakeFiles/Makefile2:18311: recipe for target 'core/imt",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3636:46,depend,dependency,46,https://root.cern,https://github.com/root-project/root/pull/3636,2,['depend'],"['depend', 'dependency']"
Integrability,ROOT_STANDARD_LIBRARY_PACKAGE passes all DEPENDENCIES to roocling via ROOT_GENERATE_DICTIONARY. This is part of PR #5443,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5449:41,DEPEND,DEPENDENCIES,41,https://root.cern,https://github.com/root-project/root/pull/5449,1,['DEPEND'],['DEPENDENCIES']
Integrability,Range synchronization for histograms filled in parallel in auto-bin mode,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/902:6,synchroniz,synchronization,6,https://root.cern,https://github.com/root-project/root/pull/902,1,['synchroniz'],['synchronization']
Integrability,Re-Implement methods in TH2Poly from TH1 or TH2 to emit an error message.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3904:65,message,message,65,https://root.cern,https://github.com/root-project/root/pull/3904,1,['message'],['message']
Integrability,"Re-enable many tests on Windows, depending on the c++ standard (14/17) and the architecture (x86/x64)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10406:33,depend,depending,33,https://root.cern,https://github.com/root-project/root/pull/10406,1,['depend'],['depending']
Integrability,"Rebase PR #1396. Original PR comment:; ""ROOT can't autoparse classes inside namespaces with the rootmap; system (as the loading callbacks don't correctly land where; they are supposed to land with our injected namespaces). As this; turns out to be a feature of some kind, let's preload; TMVA/TreePlayer/Graf to fix all failing tests that are related; to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. figure out how to fix this bug in the rootmap-based loading; without regressin in performance. replace the rootmap system with something else like attaching; all C++ modules on startup. Note that we already do something like this in normal ROOT by; including these packages into the PCH which also makes those; decls available in the normal clang lookup.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1697:201,inject,injected,201,https://root.cern,https://github.com/root-project/root/pull/1697,1,['inject'],['injected']
Integrability,"Rebased/improved version of #4966. Several parameters can be configured via rootrc file:; ```; WebEve.GLViewer: Three #kind of GLViewer, either Three, JSRoot or RCore; WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called; WebEve.HTimeout: 200 # timeout in ms for elements highlight; WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset; WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact; ```; Implement Browse functionality - shows selected item in SummaryView. In `JSRoot` viewer: ; * Provide single-click mouse handler, used for tracks/jets selection; In `Three` viewer: ; * Improve highlight handling in plain three.js mode; * provide position-dependent context menu; In `RCore` viewer:; * load required script during `init` call. Support more dashed styles for lines. By default, double-click ignored in GL view, can be configured",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4972:769,depend,dependent,769,https://root.cern,https://github.com/root-project/root/pull/4972,1,['depend'],['dependent']
Integrability,"Recently, I am seeing test failures in local builds depending on the build directory, or rather the length of its name / path. I bisected this to commit https://github.com/root-project/root/commit/46ba2eefd00371b024ae239626c7600cd3259885 (""Enable a few modules for Windows"") which introduced a check to filter dependencies without cxxmodule. There are (at least) two problems with this check: First, we add the `cpp_module` which is equal to the `library_target_name` and not the pcm file name. This results in currently no module dependencies being passed to `rootcling` at all because the condition is never true!. This could be fixed by checking `dep IN_LIST local_modules_idx_deps`. However, that still doesn't work because `local_modules_idx_deps` does not contain all modules from the start but is constructed on-the-fly. This is particularly a problem for `libCore` whose dictionary is only created after the other libraries located below `core/` are processed, for example `Imt`. The problem is that `libImt` depends on `Core`, but at the time `ROOT_GENERATE_DICTIONARY` is called for `Imt`, it doesn't know yet about the dictionary of `Core`. Finally, I'm not sure if completely omitting the dependency for a target with `NO_CXXMODULE` in case of `runtime_cxxmodules` is correct. Based on the code around, I would expect to fall back to `*_rdict.pcm` in that case. Note: This change will probably break the (partial) support for modules on Windows, but for the the reasons spelled out above, I don't see an easy fix given the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12561:52,depend,depending,52,https://root.cern,https://github.com/root-project/root/pull/12561,5,['depend'],"['dependencies', 'dependency', 'depending', 'depends']"
Integrability,"Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value; and shape servers of integrals was rewritten. However, the new; implementation analyzed the computation graph by pointer, which caused a; wrong list of servers if one passed clones of the integration variables; to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable; wrongly being registered as a value server of the integral. This made; the reproducer code in the issue thread very slow, because the integral; was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11662:333,integrat,integration,333,https://root.cern,https://github.com/root-project/root/pull/11662,2,['integrat'],['integration']
Integrability,Redirect TFile::Open() calls to XRootD protocol if possible,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11644:39,protocol,protocol,39,https://root.cern,https://github.com/root-project/root/pull/11644,1,['protocol'],['protocol']
Integrability,Refactor dependency between head node and its backend,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10560:9,depend,dependency,9,https://root.cern,https://github.com/root-project/root/pull/10560,1,['depend'],['dependency']
Integrability,Refactored reference guide webpage of RDataFrame. See each commit message for the parts that have been changed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9606:66,message,message,66,https://root.cern,https://github.com/root-project/root/pull/9606,1,['message'],['message']
Integrability,"Reformulation of https://github.com/root-project/root/pull/12480. ---. Both `Foo<double>` and `Foo<Double32_t>` have the same typeid.; Before this commit, TClass::GetClass(typeid(Foo)) would return; whatever was registered last. This is not ""stable""; it depends on which; branch is accessed first, or which TClass::GetClass call happens first, or; which library is loaded first. Make this more reporducible by consistently preferring types will less; Double32_t / Float16_t occurrences in the typename. While at this, only remove a TClass from the typeid=>TClass map if it; really is the value for the typename. ---. This PR fixes #12509",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15599:254,depend,depends,254,https://root.cern,https://github.com/root-project/root/pull/15599,1,['depend'],['depends']
Integrability,"Reimplemented the numpy array interface for the experimental pyroot. I've pushed the setup mostly to python, which makes the code much nicer compared to the implementation in the ""standard"" pyroot. This PR sits on top of #2467 (and therefore blocked by #2449).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2468:30,interface,interface,30,https://root.cern,https://github.com/root-project/root/pull/2468,1,['interface'],['interface']
Integrability,Reject all but the first auto auto attempt per wrapper (ROOT-8828).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/710:47,wrap,wrapper,47,https://root.cern,https://github.com/root-project/root/pull/710,1,['wrap'],['wrapper']
Integrability,"Related to #11245 . The `-O` option of hadd can be used to force the recompression of the whole target tree (including branches and baskets) to the compression algorithm set with `-f` option. This is not clear in the current `hadd` help message.; The first commit updates the help for the `-O` option, most probably this can be further improved so suggestions are welcome!. Other commits are style changes to the message for a clearer output and code. After this PR:; ```; $: hadd -h; usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]; [-cachesize CACHESIZE]; [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]; [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]; TARGET SOURCES. OPTIONS:; -a Append to the output; -k Skip corrupt or non-existent files, do not exit; -T Do not merge TTree objects; -O If hadd is used to merge TTree objects, compress the whole target tree; (including its branches and baskets) with the desired compression; algorithm. This can be set for example through the '-f' option; -v Explicitly set the verbosity level: 0 request no output, 99 is the; default; -j Parallelize the execution in multiple processes; -dbg Parallelize the execution in multiple processes in debug mode (Does; not delete partial files stored inside working directory); -d Carry out the partial multiprocess execution in the specified; directory; -n Open at most 'maxopenedfiles' at once (use 0 to request to use the; system maximum); -cachesize Resize the prefetching cache use to speed up I/O operations (use 0 to; disable); -experimental-io-features Used with an argument provided, enables the corresponding experimental; feature for output trees; -f Gives the ability to specify the compression level of the target file; (by default 4); -fk Sets the target file to contain the baskets with the same compression; as the input files (unless -O is specified). Compresses the meta data; using the compression level specified in the first input or the; compression setting after f",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11254:237,message,message,237,https://root.cern,https://github.com/root-project/root/pull/11254,2,['message'],['message']
Integrability,Remove TMath dependencies from TTimestamp.cxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/466:13,depend,dependencies,13,https://root.cern,https://github.com/root-project/root/pull/466,1,['depend'],['dependencies']
Integrability,Remove Tree dependency from libMultiProc,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1847:12,depend,dependency,12,https://root.cern,https://github.com/root-project/root/pull/1847,1,['depend'],['dependency']
Integrability,Remove a remaining MathMore dependency from roofit/roofit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5452:28,depend,dependency,28,https://root.cern,https://github.com/root-project/root/pull/5452,1,['depend'],['dependency']
Integrability,"Remove class hierarchy in RFieldValue. The templated, type-safe; inherited classes made the design vulnerable to slicing, because the; RField interface uses the base class. Instead, we use now templated; constructors and templated member functions in RFieldValue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3829:142,interface,interface,142,https://root.cern,https://github.com/root-project/root/pull/3829,1,['interface'],['interface']
Integrability,Remove dependencies of TUnixSystem & TWinNTSystem on net/net/inc,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3274:7,depend,dependencies,7,https://root.cern,https://github.com/root-project/root/pull/3274,1,['depend'],['dependencies']
Integrability,"Remove dependency from TBufferFile.; Now simply duplicate some code from TBufferFile in TBufferXML.; This is last version, which is fully compatible with previous XML I/O. Next steps - introduce TBufferText class, which will be base for JSON and XML classes.; Several methods will be shared between these two classes.; And both XML and JSON will use text actions for objects streaming, ; which may lead into incompatible changes in XML format.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1481:7,depend,dependency,7,https://root.cern,https://github.com/root-project/root/pull/1481,1,['depend'],['dependency']
Integrability,Remove dependency from dask_jobqueue,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11374:7,depend,dependency,7,https://root.cern,https://github.com/root-project/root/pull/11374,1,['depend'],['dependency']
Integrability,"Remove deprecated interfaces, fix and prepare macros for 6.34",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14059:18,interface,interfaces,18,https://root.cern,https://github.com/root-project/root/pull/14059,1,['interface'],['interfaces']
Integrability,"Remove deprecated python option, added an info message",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5857:47,message,message,47,https://root.cern,https://github.com/root-project/root/pull/5857,1,['message'],['message']
Integrability,Remove extra single quote in error message to avoid confusion what the actual class name is.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10099:35,message,message,35,https://root.cern,https://github.com/root-project/root/pull/10099,1,['message'],['message']
Integrability,Remove gEnv and gSystem dependencies from TError,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5855:24,depend,dependencies,24,https://root.cern,https://github.com/root-project/root/pull/5855,1,['depend'],['dependencies']
Integrability,Remove imt and multiproc (unsupported) dependencies on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1106:39,depend,dependencies,39,https://root.cern,https://github.com/root-project/root/pull/1106,1,['depend'],['dependencies']
Integrability,Remove not needed fatal message (fixing ##8280),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8348:24,message,message,24,https://root.cern,https://github.com/root-project/root/pull/8348,1,['message'],['message']
Integrability,Remove not needed fatal message (fixing #8280),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8341:24,message,message,24,https://root.cern,https://github.com/root-project/root/pull/8341,1,['message'],['message']
Integrability,Remove splash screen to avoid `root.exe` dependence on x11 or cocoa,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15056:41,depend,dependence,41,https://root.cern,https://github.com/root-project/root/pull/15056,1,['depend'],['dependence']
Integrability,"Remove the call to `gSystem->Load(""libMathCore"")` to try to remove dependency between the Rint and Mathcore c++ modules",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10330:67,depend,dependency,67,https://root.cern,https://github.com/root-project/root/pull/10330,1,['depend'],['dependency']
Integrability,Remove the deprecated Oracle interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14828:29,interface,interface,29,https://root.cern,https://github.com/root-project/root/pull/14828,1,['interface'],['interface']
Integrability,Remove the deprecated Pythia 6 interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14823:31,interface,interface,31,https://root.cern,https://github.com/root-project/root/pull/14823,1,['interface'],['interface']
Integrability,Remove the redundant dependencies from the target. This fixes a cxxmodules; nightly builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1741:21,depend,dependencies,21,https://root.cern,https://github.com/root-project/root/pull/1741,1,['depend'],['dependencies']
Integrability,"Remove the usage of `RResult`-related function as the returned importer object is not wrapped in it anymore. Also point to the tutorial, and mention the specification for type compatibility.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13950:86,wrap,wrapped,86,https://root.cern,https://github.com/root-project/root/pull/13950,1,['wrap'],['wrapped']
Integrability,Removed circular dependencies in 'montecarlo':,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3691:17,depend,dependencies,17,https://root.cern,https://github.com/root-project/root/pull/3691,1,['depend'],['dependencies']
Integrability,Removed unnecesary dependencies from ROOT's object files.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/791:19,depend,dependencies,19,https://root.cern,https://github.com/root-project/root/pull/791,1,['depend'],['dependencies']
Integrability,Removes MarkovChain interfaces that are one-time used in `MCMCInterval` . Now obtain the reduced markov chain data (also as Hist ) by calling `reduce` on the RooDataSet (which can be directly accessed through `MarkovChain::GetAsConstDataSet`). . Updates all `reduce` and `reduceEng`methods to const across `RooAbsData` and other RooFit classes with overrides.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16334:20,interface,interfaces,20,https://root.cern,https://github.com/root-project/root/pull/16334,1,['interface'],['interfaces']
Integrability,"Removes ambiguity in case a column name ends with a dot, which incidentally is something that causes ""unknown column name"" error messages commonly enough. Sibling PR in roottest: https://github.com/root-project/roottest/pull/917",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11772:129,message,messages,129,https://root.cern,https://github.com/root-project/root/pull/11772,1,['message'],['messages']
Integrability,Removing source code dependency on Graf3d for Core. Code is dead and look like not used anywhere.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2408:21,depend,dependency,21,https://root.cern,https://github.com/root-project/root/pull/2408,1,['depend'],['dependency']
Integrability,Removing usage of enum is easy in favor of using builtin strings to distinguish operation type in distributed RDataFrame. This also avoids an extra dependency for Python2,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7772:148,depend,dependency,148,https://root.cern,https://github.com/root-project/root/pull/7772,1,['depend'],['dependency']
Integrability,"Rename TBasket::Reset to TBasket::WriteReset; Add TBasket::ReadResetBuffer which will shrink the buffer is it is currently significantly larger; than it is needed to any of the next 10 baskets. [Improvement for ROOT-10927, in this exact reported case this gain an additional 25 MB per TTree but really is depend on the size of the last baskets]",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6036:305,depend,depend,305,https://root.cern,https://github.com/root-project/root/pull/6036,1,['depend'],['depend']
Integrability,"Renderer specific code has been moved to GlViewer classes:; * GlViewer is the ""base class""; * GlViewerJSRoot for JSRoot GeoPainter; * GlViewerThree for THREE.js; * GlViewerRCore for the experimental RenderCore interface (just starting)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4970:210,interface,interface,210,https://root.cern,https://github.com/root-project/root/pull/4970,1,['interface'],['interface']
Integrability,Replace fwd decl of json with wrapper type,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11196:30,wrap,wrapper,30,https://root.cern,https://github.com/root-project/root/pull/11196,1,['wrap'],['wrapper']
Integrability,"Replace the RooLinkedList in the central collections of RooFit (RooArgSet, RooArgList) with a std::vector. This speeds up the tutorials of RooFit/RooStats by 10 to 20 %.; The interface with respect to iterators and size() now resembles an STL container. When iterating on the updated collections, only begin(), end() and range-based for loops should be used. The legacy RooFit iterators are still supported, but should not be used, since they are slower. They were flagged with the `R__SUGGEST_ALTERNATIVE` macro. **For Reviewers**; Reviews are most appreciated in `RooAbsCollection.h` (interfaces) and maybe `RooAbsCollection.cxx`. This is the central change.; All other changes are mostly places where old iterators have been replaced by new iterators to make RooFit faster.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3345:175,interface,interface,175,https://root.cern,https://github.com/root-project/root/pull/3345,2,['interface'],"['interface', 'interfaces']"
Integrability,"Replace the RooLinkedList in the central collections of RooFit (RooArgSet, RooArgList, RooRefCountList) with a std::vector. This speeds up the tutorials of RooFit/RooStats by 10 to 20 %.; The interface with respect to iterators and size() now resembles an STL container. When iterating on the updated collections, only begin(), end() and range-based for loops should be used. The legacy RooFit iterators are still supported, but should not be used, since they are slower. They were flagged with the R__SUGGEST_ALTERNATIVE macro. This PR is identical to #3345, but more improvements were added on top of the branch used there. This is to test if the test failures on centos7 persist.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3380:192,interface,interface,192,https://root.cern,https://github.com/root-project/root/pull/3380,1,['interface'],['interface']
Integrability,"Replacing tbb::task_scheduler_init for tbb::task_arena. It does not change current ROOT MT behaviour. Description in the commit message:. > replace TPoolManager by RTaskArenaWrapper; > ; > Replace all uses of TPoolManager, based on the deprecated; > tbb_task_scheduler_init and its implicit task_arena, by explicit; > manipulation of our own central instance of task_arena, as; > suggested by intel:; > https://software.intel.com/sites/default/files/managed/b2/d2/TBBRevamp.pdf; > ; > Work out some gymnastics to keep tbb out of the headers,; > encapsulating it within the new RTaskArenaWrapper class. Couldn't; > find a solution for the forward-declaration tbb::task_arena, which; > is an alias of a versioned namespace dependent class that we are; > forced to forward declare instead (tbb::interface7::tbb_task_arena).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5582:128,message,message,128,https://root.cern,https://github.com/root-project/root/pull/5582,2,"['depend', 'message']","['dependent', 'message']"
Integrability,"Reproduce #5069 again - something went wrong when I want to merge it. Simple search for following includes were done:. * `TSystem.h`; * `TStyle.h`; * `TClass.h`; * `TEnv.h`; * `TObjString.h`; * `TObjArray.h`; * `TList.h`. These are relative ""big"" includes, therefore can improve compilation and dependencies. Let see which tests are affected",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5071:295,depend,dependencies,295,https://root.cern,https://github.com/root-project/root/pull/5071,1,['depend'],['dependencies']
Integrability,"Reproducer:. ```; root [0] auto x = std::make_pair(42, 84);; root [1] auto *xp = &x;; root [2] TTree t(""t"", ""t""); (TTree &) Name: t Title: t; root [3] t.Branch(""x"", &xp); Error in <HandleInterpreterException>: Trying to dereference null pointer or trying to call routine taking non-null arguments; Execution of your code was aborted.; In module 'Core':; /home/blue/ROOT/dev/cmake-build-foo/include/TClass.h:635:38: warning: null passed to a callee that requires a non-null argument [-Wnonnull]; size_t hint_offset = ((char*)&(p->second)) - (char*)p;; ^; root [4] t.Branch(""x"", &x); Error in <HandleInterpreterException>: Trying to dereference null pointer or trying to call routine taking non-null arguments; Execution of your code was aborted.; /home/blue/ROOT/dev/cmake-build-foo/include/TClass.h:635:38: warning: null passed to a callee that requires a non-null argument [-Wnonnull]; size_t hint_offset = ((char*)&(p->second)) - (char*)p;; ^; ```. Note the ""Execution of your code was aborted"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11215:263,rout,routine,263,https://root.cern,https://github.com/root-project/root/issues/11215,2,['rout'],['routine']
Integrability,"Result from the discussion in today's PPP:. Option 1:; - The `Range` node will always stay single threaded and nothing changes here; - We add a new overload for the ctor which takes the range, similar to the `TEntryList` version (but more user friendly); - Upside: Simple to understand; - Downside: Yet another ctor overload, which needs to be implemented for all existing interfaces, e.g. the factory functions. Option 2:; - We let `Range` run with MT enabled if (and just if) the `Range` node is the only one in the graph and the first one after the root node; - Upside: Not another ctor overload; - Downside: Confusing for the user (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7702:373,interface,interfaces,373,https://root.cern,https://github.com/root-project/root/issues/7702,1,['interface'],['interfaces']
Integrability,Reuse component from `RBrowser`. Provide plugin to load file dialog on demand.; Avoids hard dependency from RBrowser libs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13118:92,depend,dependency,92,https://root.cern,https://github.com/root-project/root/pull/13118,1,['depend'],['dependency']
Integrability,"Revert ""Fix NO_CXXMODULE handling logic for dependencies""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6153:44,depend,dependencies,44,https://root.cern,https://github.com/root-project/root/pull/6153,1,['depend'],['dependencies']
Integrability,"Revert ""Fix logic of handling dependencies when NO_CXXMODULE is specified""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5883:30,depend,dependencies,30,https://root.cern,https://github.com/root-project/root/pull/5883,1,['depend'],['dependencies']
Integrability,"Revert ""[RDF] Fix a dependency issue for an RDF test.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5730:20,depend,dependency,20,https://root.cern,https://github.com/root-project/root/pull/5730,1,['depend'],['dependency']
Integrability,"RooAbsArg::cloneTree()` to RooHelpers; cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`; 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers; f4fc140268 [RF] Remove RooMomentMorphND; d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10; 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper.; 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument; 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext; ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(); c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew.; 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation; c51376731b [RF][NFC] Fix typo.; 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off.; 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit.; 98d004c200 [RF] Fix visibility of the res/ directories.; e97347056c [RF] Make RooBatchCompute dependency public.; 4483b01b7f [RF] Add initial interface and implementation for code-squashing.; f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer; 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; bf4990c5d4 [RF] Exclude RooHistError from IO; 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; f355c3ced4 [RF] Code-format `testRooDataHist.cxx`; 3fd99f7679 [RF] Enable AD code-gen test for RooFit.; a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext; 1367091",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12723:2346,depend,dependency,2346,https://root.cern,https://github.com/root-project/root/pull/12723,5,['depend'],['dependency']
Integrability,"RooFit categories were using the class `RooCatType (: public TObject)`; instead of an integer to represent category states. It contains an integer; and a char[256], which can store a part of the category name.; This prevents fast batch access, and increases the overhead for data storage; and data loading. From now on, categories are represented as integers.; Every state index also has a state name attached, but instead of storing; it in each row of the dataset, the mapping from state index to; state name is now stored in the category class. **For reviewers**:; Although there is a lot of noise, that's mostly getting rid of unnecessary classes. The user-facing interfaces are stable (to be proven by the fact that all the rest of RooFit still compiles, and that tutorials run).; This is the chance to modernise/improve the `RooCategory` interface. It would be nice if you could specifically look at `RooCategory.h`, maybe in conjunction with the modernised tutorial on how they can be used in the future:; https://github.com/hageboeck/root/blob/cleanupCategories/tutorials/roofit/rf404_categories.C. More details what happened:; - Replace RooCatType by an integer.; - Replace names saved in each instance of RooCatType by a map in; RooAbsCategory that maps state numbers to strings. This saves 64 bytes; + the size of TObject for each event, and makes loading strings in each; event unnecessary.; - Convert RooVectorDataStore from saving RooCatType to integers of; category states.; - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Provide new interfaces for categories to work without RooCatType.; - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since; derived category classes might need to recompute their shapes if one; of their input categories change.; - Add function to define multiple category states at once with; initialiser lists. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen.; - Stop including RooCatType wh",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5219:667,interface,interfaces,667,https://root.cern,https://github.com/root-project/root/pull/5219,2,['interface'],"['interface', 'interfaces']"
Integrability,"RooFit contains a number of functions that cannot be used as PDFs since; they don't have automatic normalisation. When wrapped into the wrapper; PDF, functions can be used in the same way as PDFs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4383:119,wrap,wrapped,119,https://root.cern,https://github.com/root-project/root/pull/4383,2,['wrap'],"['wrapped', 'wrapper']"
Integrability,"RooFit currently includes the `RooCBShape` and `RooDSCBShape` to; represent the family of crystal ball distributions. The `RooCBShape`; only has a left tail, and `RooDSCBShape` has two independently; parametrized tails. Some users also want a crystal ball where the width of the Gaussian; core is different on the left and the right side (see e.g. Jira ticket; [ROOT-10388](https://sft.its.cern.ch/jira/browse/ROOT-10388)). To make the RooFit code more maintainable and also cover the use case; of an asymmetric Gaussian core, this commit implements a new; `RooCrystalBall` class that should cover all classes of crystal ball; shapes, such that `RooCBShape` and `RooDSCBShape` are in principle not; necessary anymore. The new features of the `RooCrystalBall` class that make it different; from `RooDSCBShape` are:. - possibility to set sigma of left side and right side of Gaussian; core separately. - code modernization and using `std::` math functions. - three constructors: fully parametrized, symmetric Gaussian core; (to replace `RooDSCBShape`), only left tail (to replace; `RooCBShape`). - useage of inlined helper functions to avoid code duplication. It is also carefully tested in `testRooCrystalBal`:. - test the fully parameterized case. - test the constructor for left-tail only case and compare values; with `RooCBShape`. - test the constructor with symmetric Gaussian core and compare; values with `RooDSCBShape`. - test the constructor for right-tail only and symmetric tails. - test integration with many possible combinations integration; ranges to cover all branches of integration code",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7257:1498,integrat,integration,1498,https://root.cern,https://github.com/root-project/root/pull/7257,3,['integrat'],['integration']
Integrability,"RooFit uses doubles everywhere else, so if importing a model from JSON; should give the same biswise results as creating the model in the; workspace factory language, `double` needs to be used in the JSON; interface too. There is also another commit that fixes a typo, and another commit that adds an easy way to fill lists via the JSON interface in order to reduce the number of lines of code needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12223:206,interface,interface,206,https://root.cern,https://github.com/root-project/root/pull/12223,2,['interface'],['interface']
Integrability,RooRealIntegral was configured to forcefully select all components when integrating.; This is not desired if single components should be projected out. The default has been; set to not select all components. This fixes ROOT-10098.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3905:72,integrat,integrating,72,https://root.cern,https://github.com/root-project/root/pull/3905,1,['integrat'],['integrating']
Integrability,RooRealIntegral was configured to forcefully select all components when integrating.; This is not desired if single components should be projected out. The default has been; set to not select all components. This fixes ROOT-10098. (cherry picked from commit 68f2aea99f92e9e90e345658d154164c3c96fa82),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3948:72,integrat,integrating,72,https://root.cern,https://github.com/root-project/root/pull/3948,1,['integrat'],['integrating']
Integrability,RooRealIntegral was configured to forcefully select all components when integrating.; This is not desired if single components should be projected out. The default has been; set to not select all components. This is meant to fix ROOT-10098.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3908:72,integrat,integrating,72,https://root.cern,https://github.com/root-project/root/pull/3908,1,['integrat'],['integrating']
Integrability,"RooResolutionModels can accept RooAbsRealLValue as convolution variable,; but the function convVar() just returned a c-style cast to RooRealVar&.; Removing this required generalising a few other interfaces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4975:195,interface,interfaces,195,https://root.cern,https://github.com/root-project/root/pull/4975,1,['interface'],['interfaces']
Integrability,"RooStringVar is a class to store string values. It limits the number of; characters that can be stored, leading to a crash when trying to plot; ranges with long names. This limitation was removed by implementing; equivalent functionality with a class that just wraps a std::string. It further had an unnecessary base class, which was removed, and where; possible, #includes of RooStringVar itself were removed. It should not; be used whenever possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5003:261,wrap,wraps,261,https://root.cern,https://github.com/root-project/root/pull/5003,1,['wrap'],['wraps']
Integrability,"Root has two different ways to configure the build - the traditional configure script and cmake. The builds generated by the two systems are similar, but far from equivalent. Historically the configure script has been more feature complete and some things that the configure script is able to do are either missing or broken in the cmake build. However, new features are often only added to the cmake build. This has resulted in that today neither of the two is able to build root with a complete set of features. The cmake build is more standard and behaves in a more predictive way, e.g. it understands CFLAGS, LDFLAGS and friends which the configure script never did. It also integrates the test suite in the build and allows for running ""make test"", a feature that the configure script is missing. So the cmake build is in many ways better, if it wasn't for those missing and broken things mentioned earlier. This pull request is an attempt to address those missing and broken issues (though it fixes a few things for the configure script as well). Also contains a fix for ROOT-7326.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/153:679,integrat,integrates,679,https://root.cern,https://github.com/root-project/root/pull/153,1,['integrat'],['integrates']
Integrability,"Rootbench depends on copy assignment for the `Sample` class. After implementing move semantics to speed up hist2workspace, the copy assignment had been implicitly deleted. This was fixed, and a gtest has been added. Further, HistRef, a member of Sample, is now movable, and the histograms given back by Sample are now `const TH1*` instead of `TH1*`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3339:10,depend,depends,10,https://root.cern,https://github.com/root-project/root/pull/3339,1,['depend'],['depends']
Integrability,Rootcling builds a set of modules implicitly based on #including of a header; contained in the nominated module. The build system has no way to track such; dependencies and even if it could there would be no rule to execute to; regenerate the outdated module. This patch extends rootcling to also keep track of the implicitly generated; modules and delete them (to regenerate them). A more sustainable solution is to; request each module to be built explicitly which requires a bit of refactoring; in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4219:156,depend,dependencies,156,https://root.cern,https://github.com/root-project/root/pull/4219,1,['depend'],['dependencies']
Integrability,Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to; get the TCling's instance of the cling interpreter. This in turn might; need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing; system modules such as libc and stl to be loaded. This criples rootcling; and whenever it #includes a header file we get an error that we included; a module from ROOT which depends on modules stl but it is not accessible; through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1395:419,depend,depends,419,https://root.cern,https://github.com/root-project/root/pull/1395,1,['depend'],['depends']
Integrability,"Running `ROOT.TParameter[""char""]().Print()` triggers the following backtrace:. ```; #6 0x00007f5aa1508536 in cling::Interpreter::EvaluateInternal (this=0x55c3b6db88f0, ; input=""TParameter<char>::kMultiply;"", CO=..., V=0x7ffeae65ef40, wrapPoint=45); at /home/axel/build/root/master2/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1379; #7 0x00007f5aa1506307 in cling::Interpreter::process (this=0x55c3b6db88f0, ; input=""TParameter<char>::kMultiply;"", V=0x7ffeae65ef40, T=0x0, disableValuePrinting=false); at /home/axel/build/root/master2/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:840; #8 0x00007f5aa175d89a in cling::MetaProcessor::process (this=0x55c3b78351a0, input_line=..., ; compRes=@0x7ffeae65eefc: cling::Interpreter::kSuccess, result=0x7ffeae65ef40, disableValuePrinting=false); at /home/axel/build/root/master2/src/interpreter/cling/lib/MetaProcessor/MetaProcessor.cpp:341; #9 0x00007f5aa12b19c0 in HandleInterpreterException (metaProcessor=0x55c3b78351a0, ; input_line=0x55c3bb82fd10 ""TParameter<char>::kMultiply;"", ; compRes=@0x7ffeae65eefc: cling::Interpreter::kSuccess, result=0x7ffeae65ef40); at /home/axel/build/root/master2/src/core/metacling/src/TCling.cxx:2448; #10 0x00007f5aa12b265d in TCling::ProcessLine (this=0x55c3b6cef830, ; line=0x55c3bb8310e0 ""TParameter<char>::kMultiply;"", error=0x0); at /home/axel/build/root/master2/src/core/metacling/src/TCling.cxx:2608; #11 0x00007f5aa710b936 in Cppyy::GetDatamemberOffset (scope=18, idata=3); at /home/axel/build/root/master2/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:1995; #12 0x00007f5aa7288e96 in CPyCppyy::BuildScopeProxyDict (scope=18, pyclass=0x55c3bb8545f0); at /home/axel/build/root/master2/src/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:353; #13 0x00007f5aa728a648 in CPyCppyy::CreateScopeProxy (name=""TParameter<char>"", parent=0x55c3b870c0b0); at /home/axel/build/root/master2/src/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:681; #14 0x00007f5aa7265443 i",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10724:234,wrap,wrapPoint,234,https://root.cern,https://github.com/root-project/root/issues/10724,1,['wrap'],['wrapPoint']
Integrability,"S I use the following code to set up the generation of dictionary source files:. https://gitlab.cern.ch/atlas/atlasexternals/-/blob/master/Build/AtlasCMake/modules/AtlasDictionaryFunctions.cmake. And that provides a much better behaviour. Mainly because in ATLAS's setup dictionary generations do not need to wait for anything. Even if the library that a dictionary is being produced for depends on a number of upstream libraries, the dictionary for that library can be generated before all the upstream libraries would have finished building. In practice this actually means that the start of any ATLAS software build is dominated by running dictionary generation. As GNU Make and Ninja both prefer running those build steps first. (As they do not have any dependencies themselves.). The reason I blame the dictionary generation code is that regular C(\+\+) code building with Ninja scales very well to many cores. Even when one has many small libraries in a project, Ninja can start the build of object files before all of the libraries that they depend on would've finished building. (In ATLAS's offline software the very end of a build is taken up purely by library/executable linking steps.). ## To Reproduce. Unfortunately you need a pretty powerful machine to do so... But once you do, just do something similar to what I did:. ```; cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 \; -Dall=ON -Dbuiltin_gsl=ON -Dbuiltin_freetype=ON -Dbuiltin_lzma=ON -Dbuiltin_veccore=ON \; -DXROOTD_ROOT_DIR=~/software/xrootd/4.12.2/x86_64-ubuntu2004-gcc9-opt \; -DTBB_ROOT_DIR=~/software/oneTBB/2020.2/x86_64-ubuntu2004-gcc9-opt \; -DCMAKE_INSTALL_PREFIX=~/software/root/6.20.08/x86_64-ubuntu2004-gcc9-opt ../root-6.20.08/; ninja; ```. ## Setup. As mentioned earlier, I used ROOT 6.20/08 for this particular test. But the behaviour has been like this since forever. I performed the build on Ubuntu 20.04 with GCC 9, but that should make little difference to the overall behaviour. ## Additio",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6432:2532,depend,depend,2532,https://root.cern,https://github.com/root-project/root/issues/6432,1,['depend'],['depend']
Integrability,SXSystem.h TUnixSystem.h /Users/ktf/src/sw/SOURCES/ROOT/alice-v6-32-04/0/core/base/inc/LinkDef.h; 2024-09-17@11:13:37:DEBUG:ROOT:ROOT:0: While building module 'Core':; 2024-09-17@11:13:37:DEBUG:ROOT:ROOT:0: While building module 'std' imported from input_line_1:1:; 2024-09-17@11:13:37:DEBUG:ROOT:ROOT:0: While building module '_wctype' imported from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/wctype.h:31:; 2024-09-17@11:13:37:DEBUG:ROOT:ROOT:0: While building module '__wctype' imported from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.0.sdk/usr/include/_wctype.h:36:; 2024-09-17@11:13:37:DEBUG:ROOT:ROOT:0: In file included from <module-includes>:1:; 2024-09-17@11:13:37:DEBUG:ROOT:ROOT:0: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.0.sdk/usr/include/___wctype.h:72:10: fatal error: cyclic dependency in module 'std': std -> _wctype -> __wctype -> std; 2024-09-17@11:13:37:DEBUG:ROOT:ROOT:0: #include <ctype.h>; 2024-09-17@11:13:37:DEBUG:ROOT:ROOT:0: ^; 2024-09-17@11:13:37:DEBUG:ROOT:ROOT:0: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.0.sdk/usr/include/_wctype.h:36:10: fatal error: could not build module '__wctype'; 2024-09-17@11:13:37:DEBUG:ROOT:ROOT:0: #include <_types/_wctrans_t.h>; 2024-09-17@11:13:37:DEBUG:ROOT:ROOT:0: ~~~~~~~~^; 2024-09-17@11:13:37:DEBUG:ROOT:ROOT:0: While building module 'Core':; 2024-09-17@11:13:37:DEBUG:ROOT:ROOT:0: While building module 'std' imported from input_line_1:1:; 2024-09-17@11:13:37:DEBUG:ROOT:ROOT:0: In file included from <module-includes>:1:; 2024-09-17@11:13:37:DEBUG:ROOT:ROOT:0: In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/v1/algorithm:1804:; 2024-09-17@11:13:37:DEBUG:ROOT:ROOT:0: In file included from /Applications/Xcode.app/Contents/Develope,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16449:9770,depend,dependency,9770,https://root.cern,https://github.com/root-project/root/issues/16449,1,['depend'],['dependency']
Integrability,"See also this discussion here:; https://github.com/root-project/root/pull/15812#issuecomment-2252107168. The PR #15812 introduced a direct dependency of `graf3d/gl` on TASImage, which is only built if `asimage=ON`. It would be better if the PNG export would be done via the `TImage` plugin system, so there is no dependency at build time. Or if this can't be done, at least error out at configuration time if one attempts to build with this combination of flags. Here is the culprit:; https://github.com/root-project/root/blob/master/graf3d/gl/src/TGLSdfFontMaker.cxx#L198. @osschar @linev . See also:; * https://root.cern.ch/doc/master/classTASImage.html; * https://root.cern/doc/master/imgconv_8C.html",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16250:139,depend,dependency,139,https://root.cern,https://github.com/root-project/root/issues/16250,2,['depend'],['dependency']
Integrability,"See cms-sw/cmssw#33361. Fixes #8048. Now, set the start point of the filling to be the end of the previous filling rather than the start of the current cluster (which can sometimes; be before the end of the previous filling). Issue: The error message was inaccurate, it did not take into account jagged filling of the TTreeCache. In this case, the cache was filled with a little more than one cluster and when it needs to do the next refill it restarted from the cluster start boundary of that partially downloaded cluster which is “indeed” within the range of the last TreeCache fill (i.e. the error). We did not see the problem with a local file because the TTreeCache usage is different. CMSSW take note of whether prefetching (asynchronous reads) is available for a while or not. In the setup CMSSW has, the prefetching (asynchronous reads) is available for the local file but not for the network/remote file. In addition when prefetching (asynchronous reads) is not available, CMSSW uses multiple TTreeCache for a given TTree while it uses only one when prefetching (asynchronous reads) is available. This results in the pattern of filling to be different between the 2 cases.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8049:243,message,message,243,https://root.cern,https://github.com/root-project/root/pull/8049,1,['message'],['message']
Integrability,See commit message for more details.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4342:11,message,message,11,https://root.cern,https://github.com/root-project/root/pull/4342,1,['message'],['message']
Integrability,"See https://reviews.llvm.org/D39416 for more details. Original commit message:. The MultiplexExternalSemaSource doesn't correctly overload the getModule function,; causing the multiplexer to not forward this call as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1257:70,message,message,70,https://root.cern,https://github.com/root-project/root/pull/1257,1,['message'],['message']
Integrability,"See in-code comment for more details. Note: this bug is routinely seen on the CI, where it causes occasional failures to the tests in question. Despite this solution being very suboptimal (the bug is most likely still present in many places of our codebase and can be encountered by users in the wild) we should at least be able to remove the random CI failures on our side. A proper solution would be nice, but it seems hard to come up with one that doesn't have big performance implications. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16412:56,rout,routinely,56,https://root.cern,https://github.com/root-project/root/pull/16412,1,['rout'],['routinely']
Integrability,"See more details in the commit messages. This is a followup to https://github.com/root-project/root/pull/8878, and the first commit silences a harmless error message that appeared after https://github.com/root-project/root/commit/d5c3c5885726d11d14b59249e601e81ecfe8021d.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9795:31,message,messages,31,https://root.cern,https://github.com/root-project/root/pull/9795,2,['message'],"['message', 'messages']"
Integrability,"See the commit messages for more details. The first commit in this PR partly fixes https://github.com/root-project/root/issues/9196. Simple code to reproduce the issue that this PR is fixing:; ```C++; #include ""RooRealVar.h"". #include ""TSystem.h"". void reproducer(); {; ProcInfo_t pinfo;; for(std::size_t i = 0; i < 10000; ++i) {. RooRealVar x(""x"",""x"",0);; RooRealVar y(x);. if(i % 500 == 0) {; gSystem->GetProcInfo(&pinfo);; std::cout << i << "" memory usage "" << pinfo.fMemResident; << "" "" << pinfo.fMemVirtual << std::endl;; }. }; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9270:15,message,messages,15,https://root.cern,https://github.com/root-project/root/pull/9270,1,['message'],['messages']
Integrability,See the discussion in the commit messages. This should fix #6360.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6364:33,message,messages,33,https://root.cern,https://github.com/root-project/root/pull/6364,1,['message'],['messages']
Integrability,See the individual commit messages.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8729:26,message,messages,26,https://root.cern,https://github.com/root-project/root/pull/8729,1,['message'],['messages']
Integrability,"Seems to be, cling/llvm9 have problems to parse OCCI headers. ; With enabled oracle hsimple.C crashes making some message about accessing libOracle module; In any case such form is preferable for plugins",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7465:114,message,message,114,https://root.cern,https://github.com/root-project/root/pull/7465,1,['message'],['message']
Integrability,"Set the environment for the tutorials, which is the eventual ROOT_environ plus some environment variables related to limiting the number of threads used by NumPy.; See: https://stackoverflow.com/questions/30791550/limit-number-of-threads-in-numpy. Possibly related to #16552, but the main motivation is to avoid an excessive number of threads when running the RooFit tutorials for simulation based inference. So far, the environment was set inside these tutorials, but this is distracting to users who look at these tutorials. Also, make sure that the same environment is used for all tutorials that are wrapped in `ROOT_ADD_TEST`. Furthermore, remove unused helper function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16717:604,wrap,wrapped,604,https://root.cern,https://github.com/root-project/root/pull/16717,1,['wrap'],['wrapped']
Integrability,SetErrorDef was not implemented for the FCNGradAdapter used to wrap the user functions in the Minuit interface. This causes that the current set ErrorDef was not used when minimizing but the one set when constructed the function. This fixes issue #12338,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12339:63,wrap,wrap,63,https://root.cern,https://github.com/root-project/root/pull/12339,2,"['interface', 'wrap']","['interface', 'wrap']"
Integrability,"Several browsable components depends from libraries, which only build when -Droot7=ON specified. These; are RCanvas and RNtuple. Therefore check root7; before building them. Fixes #16449",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16459:29,depend,depends,29,https://root.cern,https://github.com/root-project/root/pull/16459,1,['depend'],['depends']
Integrability,"Several browsable components depends from libraries, which only build when -Droot7=ON specified. These; are RCanvas and RNtuple. Therefore check root7; before building them. Solves #16449",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16461:29,depend,depends,29,https://root.cern,https://github.com/root-project/root/pull/16461,1,['depend'],['depends']
Integrability,"Several small issues came up in the forum, and this is a collection of documentation updates, a few safety checks added to roofit and more understandable warning/error messages. Further, the class RooRealProxy (kind of a pointer with extra functionality) has been replaced by a templated class, as it always requires casting when the pointed-to object is used. Since it is internal to RooFit, this should not affect users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4739:168,message,messages,168,https://root.cern,https://github.com/root-project/root/pull/4739,1,['message'],['messages']
Integrability,"Signed-off-by: Stephan Lachnit <stephanlachnit@debian.org>. # This Pull request:. ## Changes or fixes:. Fix for #12152. Requires #12153. The idea is the following:. - add `libbsd` option & `find_packge` module defining `LIBBSD::libbsd` target; - define `R__USE_LIBBSD` in `RConfigure.h` if `libbsd` enabled; - adjust `strlcpy` to include `bsd/string.h` if `R__USE_LIBBSD` defined; - add `LIBBSD::libbsd` to the public linking interface of `Clib`. Unfortunately, this does not work. The reason here is that (for some reason beyond me) `rootcling_stage1`, `libCling.so`, `bin/root` and probably more don't link to `Clib` as *target* but instead fetch the *target object* directly. Relevant CMake documentation:; - [`$<TARGET_OBJECTS:tgt`](https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#genex:TARGET_OBJECTS); - [Object Libraries](https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#object-libraries); - [Linking Object Libraries](https://cmake.org/cmake/help/v3.13/command/target_link_libraries.html#linking-object-libraries). Example using `rootcling_stage1`:. Currently in CMake:; ```cmake; ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx; $<TARGET_OBJECTS:Clib>; $<TARGET_OBJECTS:ClingUtils>; $<TARGET_OBJECTS:Dictgen>; $<TARGET_OBJECTS:Foundation_Stage1>; LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}; NOINSTALL); ```; I link against the `Clib` object library, but ignores any target properties like for example this line:; ```cmake; # alternative for strlcpy on linux, see https://github.com/root-project/root/issues/12152; if(libbsd); target_link_libraries(Clib PUBLIC LIBBSD::libbsd); endif(); ```. I don't see why using the `Clib` target directly should break anything? It's linked also directly, the only difference is that target properties are ignored which shouldn't be the case. I added a commit with this approach and it seems to work. ## Checklist:. - [ ] tested changes locally; - [ ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12154:426,interface,interface,426,https://root.cern,https://github.com/root-project/root/pull/12154,1,['interface'],['interface']
Integrability,"Silence a zillion of compilation warnings like:; ```; warning C4267: 'initializing': conversion from 'size_t' to 'UInt_t', possible loss of data; ```; From Microsoft:; Compiler Warning (level 3) C4267; 'var' : conversion from 'size_t' to 'type', possible loss of data; The compiler detected a conversion from size_t to a smaller type.; To fix this warning, use size_t instead of type. Alternatively, use an integral type that is at least as large as size_t.; (size_t is unsigned __int64 or unsigned integer, depending on the target platform)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9197:508,depend,depending,508,https://root.cern,https://github.com/root-project/root/pull/9197,1,['depend'],['depending']
Integrability,"Silence many `Warnings C4624` like for example:; ```; 04:42:17 C:\build\night\LABEL\windows64\SPEC\default\V\master\root\interpreter\llvm\src\include\llvm/Support/type_traits.h(79,1): warning C4624: 'llvm::detail::copy_construction_triviality_helper<T>': destructor was implicitly defined as deleted [C:\build\night\LABEL\windows64\SPEC\default\V\master\build\interpreter\cling\lib\Utils\obj.clingUtils.vcxproj]; 04:42:17 with; 04:42:17 [; 04:42:17 T=clang::FixItHint; 04:42:17 ]; 04:42:17 C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits(585): message : see reference to class template instantiation 'llvm::detail::copy_construction_triviality_helper<T>' being compiled [C:\build\night\LABEL\windows64\SPEC\default\V\master\build\interpreter\cling\lib\Utils\obj.clingUtils.vcxproj]; 04:42:17 with; 04:42:17 [; 04:42:17 T=clang::FixItHint; 04:42:17 ]; 04:42:17 C:\build\night\LABEL\windows64\SPEC\default\V\master\root\interpreter\llvm\src\include\llvm/Support/type_traits.h(100): message : see reference to class template instantiation 'std::is_copy_constructible<llvm::detail::copy_construction_triviality_helper<T>>' being compiled [C:\build\night\LABEL\windows64\SPEC\default\V\master\build\interpreter\cling\lib\Utils\obj.clingUtils.vcxproj]; 04:42:17 with; 04:42:17 [; 04:42:17 T=clang::FixItHint; 04:42:17 ]; 04:42:17 C:\build\night\LABEL\windows64\SPEC\default\V\master\root\interpreter\llvm\src\include\llvm/ADT/SmallVector.h(312): message : see reference to class template instantiation 'llvm::is_trivially_copy_constructible<T>' being compiled [C:\build\night\LABEL\windows64\SPEC\default\V\master\build\interpreter\cling\lib\Utils\obj.clingUtils.vcxproj]; 04:42:17 with; 04:42:17 [; 04:42:17 T=clang::FixItHint; 04:42:17 ]; 04:42:17 C:\build\night\LABEL\windows64\SPEC\default\V\master\root\interpreter\llvm\src\include\llvm/ADT/SmallVector.h(1168): message : see reference to class template instantiation 'llvm::SmallVectorImpl<T>' bei",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12379:598,message,message,598,https://root.cern,https://github.com/root-project/root/pull/12379,1,['message'],['message']
Integrability,"Silent the following zillion of warnings on Windows:; ```; C:\Users\sftnight\git\master\interpreter\llvm\src\include\llvm/Support/type_traits.h(97,1): warning C4624: 'llvm::detail::trivial_helper<T>': destructor was implicitly defined as deleted [C:\Users\sftnight\build\relwithdebinfo\interpreter\cling\lib\Interpreter\obj.clingInterpreter.vcxproj]; with; [; T=clang::Sema::ModuleScope; ]; C:\Users\sftnight\git\master\interpreter\llvm\src\include\llvm/Support/type_traits.h(150): message : see reference to class template instantiation 'llvm::detail::trivial_helper<T>' being compiled [C:\Users\sftnight\build\relwithdebinfo\interpreter\cling\lib\Interpreter\obj.clingInterpreter.vcxproj]; with; [; T=clang::Sema::ModuleScope; ]; C:\Users\sftnight\git\master\interpreter\llvm\src\include\llvm/ADT/SmallVector.h(315): message : see reference to class template instantiation 'llvm::is_trivially_copyable<T>' being compiled [C:\Users\sftnight\build\relwithdebinfo\interpreter\cling\lib\Interpreter\obj.clingInterpreter.vcxproj]; with; [; T=clang::Sema::ModuleScope; ]; C:\Users\sftnight\git\master\interpreter\llvm\src\include\llvm/ADT/SmallVector.h(837): message : see reference to class template instantiation 'llvm::SmallVectorImpl<T>' being compiled [C:\Users\sftnight\build\relwithdebinfo\interpreter\cling\lib\Interpreter\obj.clingInterpreter.vcxproj]; with; [; T=clang::Sema::ModuleScope; ]; C:\Users\sftnight\git\master\interpreter\llvm\src\tools\clang\include\clang/Sema/Sema.h(1724): message : see reference to class template instantiation 'llvm::SmallVector<clang::Sema::ModuleScope,16>' being compiled [C:\Users\sftnight\build\relwithdebinfo\interpreter\cling\lib\Interpreter\obj.clingInterpreter.vcxproj]; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7446:482,message,message,482,https://root.cern,https://github.com/root-project/root/pull/7446,4,['message'],['message']
Integrability,"Simple search for following includes were done:. * `TSystem.h`, ; * `TStyle.h`; * `TClass.h`; * `TEnv.h`; * `TObjString.h`; * `TObjArray.h`; * `TList.h`. These are relative ""big"" includes, therefore can improve compilation and dependencies. Let see which tests are affected",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5069:227,depend,dependencies,227,https://root.cern,https://github.com/root-project/root/pull/5069,1,['depend'],['dependencies']
Integrability,Simplify CMake integration of LLVM,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13221:15,integrat,integration,15,https://root.cern,https://github.com/root-project/root/pull/13221,1,['integrat'],['integration']
Integrability,Simplify the platform-dependent part of a couple of add_custom_command,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12341:22,depend,dependent,22,https://root.cern,https://github.com/root-project/root/pull/12341,1,['depend'],['dependent']
Integrability,"Since ROOT 6.30, we are not building ROOT with the `math/fftw`; subpackage anymore (`fftw3=OFF`). It is the interface between ROOT and; fftw3, but is incompatible with fftws GPL license. That means that for default ROOT builds, the `RooFFTConvPdf` class for; FFT convolutions is not working anymore, because it uses `math/fftw`. This commit implements a solution to make the `RooFFTConvPdf` work; again in this situation: the routine that uses fftw is declared; on-the-fly to the interpreter. This will work if the user has an; external install of `fftw3`, which is usually available in all Linux; distributions. Closes #14162. Note: the error that you get if `fftw3.h` can't be found looks like this:; ```txt; input_line_21:1:10: fatal error: 'fftw3.h' file not found; #include ""fftw3.h""; ^~~~~~~~~; [#0] ERROR:Eval -- RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header.; You have three options to fix this problem:; 1) Install fftw3 on your system so that the interpreter can find it; 2) In case fftw3.h is installed somewhere else,; tell ROOT with gInterpreter->AddIncludePath() where to find it; 3) Compile ROOT with the -Dfftw3=ON in the CMake configuration,; such that ROOT comes with built-in fftw3 convolution routines. terminate called after throwing an instance of 'std::runtime_error'; what(): RooFFTConvPdf evaluation Failed! The interpreter could not find the fftw3.h header; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14174:108,interface,interface,108,https://root.cern,https://github.com/root-project/root/pull/14174,3,"['interface', 'rout']","['interface', 'routine', 'routines']"
Integrability,"Since glew.h is directly used/included in ROOT's public interfaces, the correct way will be to ship it as well with ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5583:56,interface,interfaces,56,https://root.cern,https://github.com/root-project/root/pull/5583,1,['interface'],['interfaces']
Integrability,"Since https://github.com/nlohmann/json/pull/3590, the `basic_json` class and the `json` `using`-declaration are located in a ""versioned, ABI-tagged inline namespace"". This makes it impossible to forward declare the type in `REveElement.hxx`.; Instead introduce a new struct `REveJsonWrapper` that just wraps a `json` object (after including the full `nlohmann/json.hpp`). As the `struct` is under our control, we can easily forward declare the type and use it for method arguments. Fixes #11130",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11196:302,wrap,wraps,302,https://root.cern,https://github.com/root-project/root/pull/11196,1,['wrap'],['wraps']
Integrability,"Since rf408 depends on RDF, it make sense to veto it when RDF is off.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7385:12,depend,depends,12,https://root.cern,https://github.com/root-project/root/pull/7385,1,['depend'],['depends']
Integrability,"Since the distributed RDataFrame feature is experimental let's give it access to more modern features of the Python language. 3.7 seems a good compromise between maturity (released in October 2018) and features (typing, dataclasses). **NOTE**:; I'm uncertain about whether giving a message at configure time that DistRDF is active in the build process. I have put a simple message for now, could be changed or removed. Let me know your opinions",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9060:282,message,message,282,https://root.cern,https://github.com/root-project/root/pull/9060,2,['message'],['message']
Integrability,"Since the proper creation of the TClass will require the dictionary for all its component let; load all the dependent library too. Note that even with explicit linking, the dictionary may; not be loaded as part of the 'main' library when the dictionary is a library separate from the; classes' code (see ATLAS setup for example). This solves ROOT-10663.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5486:108,depend,dependent,108,https://root.cern,https://github.com/root-project/root/pull/5486,1,['depend'],['dependent']
Integrability,"Since we enabled warnings by default in rootcling, which pointed; out a bunch of warnings in the code base, we also set rootcling; into a mode in which it is unable to ever fail. The reason for this is this faulty if statement. If we enable warnings,; we set the errorIgnoreLevel to kWarning. But this if statement only records; any errors if the errorIgnoreLevel is NOT kWarning (which is between; kThrowOnWarning and kError). The new if statements only checks if the the printed message is an error; or higher (which would include any kind of fatal error). If the errorIgnoreLevel; is set higher, we already correctly filter this at the start of the method; where we return on filtered messages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/831:481,message,message,481,https://root.cern,https://github.com/root-project/root/pull/831,2,['message'],"['message', 'messages']"
Integrability,"Skip CI for the moment, i need to test it a bit more. Naming is probably not ideal. Introduce a new R__NEW_TBB macro to address the change in interface in TBB 2021 and adapt the forward declaration of task_arena accordingly. Deals with the problem @mrodozov reported in issue https://github.com/root-project/root/issues/6933 and by @krasznaa in PR https://github.com/root-project/root/pull/6174 (in whose conversation I first noticed the problem and then immediately forgot about what the real issue was and focused on the code, apologies for that). *Note*: This does not solve the ideal situation in which we can live not forward declaring `tbb::task_arena` and keep tbb hidden from the public interfaces, but patches ROOT to work with the new OneAPI and TBB versions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7059:142,interface,interface,142,https://root.cern,https://github.com/root-project/root/pull/7059,2,['interface'],"['interface', 'interfaces']"
Integrability,"Snapshot, Cache, Define and Filter did not check that the types of; columns used as arguments in jitted code were valid (in particular,; that the type of custom columns was correctly understood by cling).; This patch provides a function that performs the validity check,; GetValidatedArgTypes, that is used everywhere instead of GetColumnTypes; (now unused and therefore deleted) and ColumnName2ColumnTypeName. An exception with a user-friendly error message is thrown in case of; error, which fixes ROOT-10458.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5595:451,message,message,451,https://root.cern,https://github.com/root-project/root/pull/5595,1,['message'],['message']
Integrability,So far we only trigger an assertion in LLVM when we can't find the; modulemap file which is not very user-friendly. With this patch; we actually prints an error message in this situation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/527:161,message,message,161,https://root.cern,https://github.com/root-project/root/pull/527,1,['message'],['message']
Integrability,"So far, ROOT, in particular the `roofit_multiprocess` feature was depending on a feature developed by @egpbos that was not part of the ZeroMQ 4.3.4 release yet. Therefore, it was a bit awkward to check if ZeroMQ had that feature. Now that it's released, we can just do a proper cmake version check. The only caveat is that ZeroMQ needs to be built with `-DENABLE_DRAFTS`; to work for `roofit_multiprocess`, which is explained in the build; options documentation. Also, move some compilation flags to specifically RooFitZMQ, where they; are needed. This PR superseeds two other PRs:; * https://github.com/root-project/root/pull/13995; * https://github.com/root-project/root/pull/9473",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14003:66,depend,depending,66,https://root.cern,https://github.com/root-project/root/pull/14003,1,['depend'],['depending']
Integrability,"So far, deprecated RooFit code has been moved into [roofit/roofitcore/inc/RooFitLegacy](https://github.com/root-project/root/tree/master/roofit/roofitcore/inc/RooFitLegacy) and [roofit/roofitcore/src/RooFitLegacy](https://github.com/root-project/root/tree/master/roofit/roofitcore/src/RooFitLegacy). But to really separate the legacy code from the current RooFit, we want to introduce a new library called RooFitLegacy in a new `roofit/roofitlegacy` directory. This new library would depend on RooFitCore. RooFitCore could only have an interface dependency on RooFitLegacy to make sure that the code using RooFitLegacy classes still links. In CMake, this would look like:. ```cmake; target_link_libraries(RooFitCore INTERFACE RooFitLegacy); ```. Or maybe we can even leave this dependency out, leading to a more aggressive deprecation by making old code not link anymore. Once the RooFitLegacy library becomes large enough to visibly impact compile time, we can also make building the legacy library optional by introducing a new `roofitlegacy` cmake flag.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8759:484,depend,depend,484,https://root.cern,https://github.com/root-project/root/issues/8759,5,"['INTERFACE', 'depend', 'interface']","['INTERFACE', 'depend', 'dependency', 'interface']"
Integrability,"So far, the `ParamHistFunc` BatchMode implementation was still; sub-uptimal because it used the non-vectorized interface of the; RooDataHist. Using the new `RooAbsBinning::binNumbers()` function too look up; multiple bin indices at once, the implementaiton can be improved and; sped. In the three-dimensional many-bin case, the new implementation is a bit; more than three times faster than the old one. This should benefit; HistFactory fits with many bins. A new `testParamHistFunc` unit test was also introduced to validate the; results of a ParamHistFunc both with and without the batch mode,; comparing to manually computed reference results.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11170:111,interface,interface,111,https://root.cern,https://github.com/root-project/root/pull/11170,1,['interface'],['interface']
Integrability,"So far, the signature for the function that is called for the vectorized evaluation was this one:. ```c++; void RooAbsReal::computeBatch(double* output, size_t nEvents,; RooFit::Detail::DataMap const& dataMap) const; ```. This commit is suggesting a new signature:. ```c++; void doEval(RooFit::EvalContext & ctx) const;; ```. The idea is to make the signature as short as possible, so it doesn't have to be changed anymore if more information needs to be passed. That's why the only parameter is now an `EvalContext` object, reminicint of the old `RunContext` object that fulfilled this task in the very first implementation of the BatchMode by Stephan. The name is now simply `doEval`, because the overloaded term ""Batch"" should be dropped. It needed to be something with ""evaluate"", because there is also `RooAbsReal::evaluate()` and we are talking about ""evaluation backends"". The motivation to change this interface now is because I want to write a documentation for developers (like CMS combine mainteiners) on how to use these new interfaces. And if they start to use it, the interfaces should not change anymore. Than's why I'm doing this change now, which I had in mind already for some time.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13939:910,interface,interface,910,https://root.cern,https://github.com/root-project/root/pull/13939,3,['interface'],"['interface', 'interfaces']"
Integrability,"So far, the whole HistFactory package was not built if `xml=OFF`, even; if only one part of HistFactory uses TXML: the `ConfigParser` class and; it's executable wrapper `hist2workspace`. With this commit, we only refrain from building the ConfigParser and the; hist2workspace executable if `xml=OFF`, but still build the rest of; HistFactory. The reason for doing this now was the RooFitHS3 package: it depends on; HistFactory, but doesn't use the XML-specific classes. After this; commit, RooFitHS3 builds also with `xml=OFF`. The RooStats tutorials that depend on `hist2workspace` are now also; disabled if XML is not ON. This PR should fix the compiler errors reported on the forum:; https://root-forum.cern.ch/t/installing-root-error-on-ubuntu/49146",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10104:161,wrap,wrapper,161,https://root.cern,https://github.com/root-project/root/pull/10104,3,"['depend', 'wrap']","['depend', 'depends', 'wrapper']"
Integrability,Solves conflicting behaviours between classes depending on tbb. See more here: https://indico.cern.ch/event/607814/contributions/2466931/attachments/1409778/2155811/TScheduler.pdf,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/337:46,depend,depending,46,https://root.cern,https://github.com/root-project/root/pull/337,1,['depend'],['depending']
Integrability,Some RooAbsArg member functions were replaced a long time ago with drop-in alternatives that everyone uses since forever. We might as well deprecate these member functions now to slim down the interface.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16430:193,interface,interface,193,https://root.cern,https://github.com/root-project/root/pull/16430,1,['interface'],['interface']
Integrability,"Some RooFit classes used the RooRealVar or RooAbsRealLValue types for; some of their parameters in the constructor, which is not as flexible as; RooRealVar because they are further down in the dependency hierachy. This commit sustitutes `RooRealVar` in for some of these cases that were; encountered when investigating RooFit problems reported in the forum.; More precisely, I wanted to use a `RooFormulaVar` in a `RooDecay` which; was not possible before but now it is.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7325:193,depend,dependency,193,https://root.cern,https://github.com/root-project/root/pull/7325,1,['depend'],['dependency']
Integrability,"Some RooFit functions, in particular the ones related to; multiprocessing, created many files directly in the `/tmp` directory.; Some users and @hageboeck found that this was unnessecarily polluting; the `/tmp` directory and the files should rather go into a subdirectory. This commit suggests to use the subdirectory `/tmp/roofit` for add; temporary RooFit files that get created during multiprocessing and; testing. The path for temporary RooFit files can now be retrieved with a new; `RooFit::tmpPath()` function that is not exposted by the user but only; meant to be used by the RooFit implementations. The first time; `RooFit::tmpPath()` is called, it will check if the directory exists and; create it if it doesn't. This new function goes into a new package; `roofit/common` that is meant to be at the base of the RooFit dependency; graph, meaning all of `roofitcore`, `multiprocess`, and `roofitZMQ` can; depend on the `common` package to get the temporary files path.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9504:827,depend,dependency,827,https://root.cern,https://github.com/root-project/root/pull/9504,2,['depend'],"['depend', 'dependency']"
Integrability,"Some boost histogram utility functions have trouble being called from PyROOT. I've traced this back to what looks like a name normalization problem. Unfortunately I did not manage to put together a standalone example without the boost histogram dependency. Consider the following test case:. test.c; ```cpp; #include ""TInterpreter.h""; #include ""TClass.h""; #include ""TMethod.h""; #include <iostream>; #include <boost/histogram.hpp>. int test() {; auto ns = TClass::GetClass(""boost::histogram"");; auto meth = ns->GetMethodWithPrototype(""make_histogram"", ""boost::histogram::axis::regular<>&&"");. std::cout << ""meth->GetReturnTypeName(): "" << meth->GetReturnTypeName() << std::endl;; std::cout << ""meth->GetReturnTypeNormalizedName(): "" << meth->GetReturnTypeNormalizedName() << std::endl;. auto cl = TClass::GetClass(meth->GetReturnTypeNormalizedName().c_str());; std::cout << ""cl: "" << cl << std::endl;. return 0;; }; ```. output:; ```; meth->GetReturnTypeName(): boost::histogram::histogram<tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default> >,boost::histogram::unlimited_storage<allocator<char> > >; meth->GetReturnTypeNormalizedName(): boost::histogram::histogram<tuple<regular<double,use_default,use_default,use_default> >,unlimited_storage<allocator<char> > >; cl: 0; (int) 0; ```. So note that the normalized return type is missing the ```boost::histogram``` namespace for the template arguments of the std::tuple. (and then obviously trying to lookup the type again fails). This prevents properly calling this function and other similar ones from PyROOT because the normalized return type is used e.g. here https://github.com/root-project/root/blob/4483b01b7f4bad47332f98d773dbd9b8c7f36b9d/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1515",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12548:245,depend,dependency,245,https://root.cern,https://github.com/root-project/root/issues/12548,1,['depend'],['dependency']
Integrability,"Some improvements in the RooFit build configuration to avoid that information that is only necessary for RooFit at build time is leaking into the public user interface. In particular, it is not necessary to define these `R__HAS_<*>` flags in the public ROOT config only to use them in the private `.cxx` sources. This should be avoided and instead be done with defines in the build configuration. * Move stressRooFit and stressRooStats to `roofit` directory; * Remove `R__HAS_ROOFIT_MULTIPROCESS` from ROOT configuration; * No need to check `R__HAS_MATHMORE` in roofitmore sources; * Avoid need for `R__HAS_CUDA`. More detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13915:158,interface,interface,158,https://root.cern,https://github.com/root-project/root/pull/13915,1,['interface'],['interface']
Integrability,"Some libraries are layered can depend on other libraries on a private paths. That is, libA can depend on libB which is neither on the LD_LIBRARY_PATH nor on a known system path. The posix linker injects ""variables"" such as @rpath which is expanded at link time to resolve the libraries on a relative path. Prior to this patch, cling's Dyld-based symbol resolution could not trace down such cases causing failures in symbol resolution when a symbol is only defined in libB (a private library). This patch implements the basic posix linker substitutions allowing cling's Dyld-based symbol resolution implementation to follow more closely the linker rules. ## Performance. |platform|test|master|PRv1|PRv2| mem master|mem PRv2|; |:--------|:---|:---------:|:-----------:|:-----------:|:-----------:|:-----------:|; |ubu20|roottest-python-pythonizations|6.5|6.55|6.65|342076|347168|; |ubu20|roottest-cling|112.8|114.53|181.26|411048|416036|; |ubu20|roottest-python|148.5|136.26|144.72|394292|397120|; |ubu20|roottest-root-hist|16.78|17.35|15.45|465156|235084|; |ubu20|roottest-root-math|28.28|27.89|27.40|424072|371256|; |ubu20|roottest-root-tree|462.84|510.59|465.79|796512|797992|; |ubu20|roottest-root-treeformula|117.53|129.16|114.44|261184|260168|; |ubu20|root-io-stdarray|66.90|67.89|65.71|263424|255120|; |ubu20|roottest-root-treeformula|117.55|129.10|; |osx 10.15|roottest-python-pythonizations|17.25|16.06|; |osx 10.15|roottest-cling|346.06|343.46|; |osx 10.15|roottest-root-hist|36.06|36.22|; |osx 10.15|roottest-root-math|49.78|52.42|; |osx 10.15|root-io-stdarray|119.32|118.73|. That PR should reduce the number of `stat` calls improving #7774. Kudos Alexander Penev (@alexander-penev).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6969:31,depend,depend,31,https://root.cern,https://github.com/root-project/root/pull/6969,3,"['depend', 'inject']","['depend', 'injects']"
Integrability,"Some of the TMVA tutorials run in parallel and rely on the same generated file. Typically, one tutorial may depend on another one that generates the file. The top level ones did not depend on each other, thus running in parallel and causing a race condition. This PR should solve this issue by making them depend on each other.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/426:108,depend,depend,108,https://root.cern,https://github.com/root-project/root/pull/426,3,['depend'],['depend']
Integrability,"Some platforms have problems (rightfully so!) in finding symbols; from libCling.so, which is dlopened with RTLD_LOCAL. libCling should; me made available to RuntimeDyld, but priority should be given to; the main binary, i.e. the ""traditional"" symbol resolution. This is; achieved by injecting libCling as a symbol source into the; DynLibManager *after* the initialization of cling::Interpreter. This fixes e.g. ROOT-10499, by resolving to the process's `cout`,; not the ""copy"" in libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6108:283,inject,injecting,283,https://root.cern,https://github.com/root-project/root/pull/6108,1,['inject'],['injecting']
Integrability,"Some speedups to targeted RooFit classes to speed up the RooFit tests such that the performance gain with the batch mode is more prominent relatively (as this PR removes unnecessary overhead that affected both the batch mode and the scalar mode). More detail in the commit messages. All changes are tested by the stressRooFit suite, including the multidimentional case in the RooNDKeysPdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10671:273,message,messages,273,https://root.cern,https://github.com/root-project/root/pull/10671,1,['message'],['messages']
Integrability,Some users get the `RooMinimizer::getMultiGenFcn()` to get a pointer to; the fit function object passed to minuit to do their own routines before; doing the actual Minimization. The parameters settings should better be; synchronized before returning. @cburgard,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10643:130,rout,routines,130,https://root.cern,https://github.com/root-project/root/pull/10643,2,"['rout', 'synchroniz']","['routines', 'synchronized']"
Integrability,"Sometime happens that `zoombox == 0` and ROOT crashes.; It happens in our QtROOT interface, where event sequence could be slightly different as with normal X.; Would be nice, if patch also will go into 6.10 branch",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1061:81,interface,interface,81,https://root.cern,https://github.com/root-project/root/pull/1061,1,['interface'],['interface']
Integrability,Sometimes we set the memory of `cling::Value` using an interface which does not capture well the type information.; See https://github.com/root-project/root/pull/11252/files#r991306302,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12116:55,interface,interface,55,https://root.cern,https://github.com/root-project/root/issues/12116,1,['interface'],['interface']
Integrability,Specifically this fixes the one described at:; https://sft.its.cern.ch/jira/browse/ROOT-9773?focusedCommentId=87824&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-87824; where the issue was that adding a single branch did not close the learning and 'worth' provoke a learning; prefill. We solved this by distinguishing at the interface level adding branch manual and adding branch as; part of the learning. We can now avoid the LearningPrefill during manual adds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3007:357,interface,interface,357,https://root.cern,https://github.com/root-project/root/pull/3007,3,['interface'],['interface']
Integrability,Speed-up CNN and RNN tutorials in TMVA (use less epochs) and add some fixes for IMT and to not use root-config in the python versions. ; Add also a dependency in the Python tutorials on the C++ to avoid conflicts with the same file name. Remove not needed veto for the no-imt case for the TMVA_CNN_Classification.C tutorial introduced in #13712,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13818:148,depend,dependency,148,https://root.cern,https://github.com/root-project/root/pull/13818,1,['depend'],['dependency']
Integrability,"Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO; * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7; * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree; * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7; * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class.; For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4767:153,depend,depends,153,https://root.cern,https://github.com/root-project/root/pull/4767,6,['depend'],"['depend', 'dependency', 'depending', 'depends']"
Integrability,"Spun off from [discussion](https://github.com/root-project/root/pull/5934/commits/6f3ec9372b011536fc314eef0835508a07d2513b#r448782416) on #5934, this PR lets us wrap move-only types in `RResult`. We add a new method `Unwrap()` to obtain the inner type by value. The caller takes ownership of the inner type, and for move-only types the `RResult` is left in an unspecified state. I decided against adding safeguards against double-moves for now because it would result in false-positive messages for types without move specializations (e.g. `return std::move(42)`). Instead, we should make clear through documentation and examples that `Unwrap()` consumes the `RResult`. . The existing const-ref access method `Get()` has been renamed `Inspect()` following Mozilla's `RResult`-like type [here](https://searchfox.org/mozilla-central/source/mfbt/Result.h#90-91). `Get()` has caused some confusion in code review and we've been looking for alternative names. . Example: ; ```cpp; auto TestMoveOnly = []() -> RResult<std::unique_ptr<int>> {; return std::make_unique<int>(1);; };; auto res = TestMoveOnly();. // Using Inspect to make a copy won't compile; // auto copy_inner = res.Inspect();. // This will compile, but we only have read-only access; const auto& copy_inner = res.Inspect();; EXPECT_EQ(1, *copy_inner);. // Instead, Unwrap is required to get ownership of the move-only type; auto move_inner = res.Unwrap();; EXPECT_EQ(1, *move_inner);; move_inner.reset();; move_inner = std::make_unique<int>(2);; EXPECT_EQ(2, *move_inner);; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5985:161,wrap,wrap,161,https://root.cern,https://github.com/root-project/root/pull/5985,2,"['message', 'wrap']","['messages', 'wrap']"
Integrability,Spurious error message when reading a `char` from a `TTreeReader<signed char>`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11837:15,message,message,15,https://root.cern,https://github.com/root-project/root/issues/11837,1,['message'],['message']
Integrability,"Starting from the `debian:sid` Docker image, create the following environment:; ```; apt update && apt dist-upgrade; apt install cmake gcc g++ git libxrootd-client-dev ninja-build python3; ```; Then clone `root.git` and configure + build with; ```; cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -Dx11=OFF ../root/; ninja; ```; Afterwards try executing `./bin/root.exe tutorials/dataframe/df103_NanoAODHiggsAnalysis.C`. It will hang and setting `XRD_LOGLEVEL=Debug` reveals:; ```; [2023-02-06 12:00:28.136048 +0000][Debug ][XRootDTransport ] [eospublic.cern.ch:1094.0] Sending authentication data; [2023-02-06 12:00:28.137346 +0000][Debug ][XRootDTransport ] [eospublic.cern.ch:1094.0] Trying to authenticate using krb5; [2023-02-06 12:00:28.137406 +0000][Debug ][XRootDTransport ] [eospublic.cern.ch:1094.0] Cannot get credentials for protocol krb5: Seckrb5: No or invalid credentials; No credentials cache found (p=xrootd/eospublic.cern.ch@CERN.CH).; [2023-02-06 12:00:28.137968 +0000][Debug ][XRootDTransport ] [eospublic.cern.ch:1094.0] Trying to authenticate using gsi; [2023-02-06 12:00:32.761097 +0000][Debug ][XRootDTransport ] [eospublic.cern.ch:1094.0] Cannot get credentials for protocol gsi: Secgsi: ErrParseBuffer: unknown CA: cannot verify server certificate: kXGS_init; ```. Instead, installing the `xrootd-client` package and running; ```; xrdcp root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod_skimmed/SMHiggsToZZTo4L.root .; ```; works just fine - the `Debug` log shows that it proceeds with `Trying to authenticate using uni` (after `Cannot get credentials for protocol gsi` was also signaled kind of immediately).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12231:831,protocol,protocol,831,https://root.cern,https://github.com/root-project/root/issues/12231,3,['protocol'],['protocol']
Integrability,Strips the RNTuple unit test utility header and the unit test library dependencies from unnecessary baggage. Follow-up from https://github.com/root-project/root/pull/13342#discussion_r1277816509,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13351:70,depend,dependencies,70,https://root.cern,https://github.com/root-project/root/pull/13351,1,['depend'],['dependencies']
Integrability,Support INTERFACE include directories in ROOT_GENERATE_DICTIONARY,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/942:8,INTERFACE,INTERFACE,8,https://root.cern,https://github.com/root-project/root/pull/942,1,['INTERFACE'],['INTERFACE']
Integrability,"Support for user defined sensitive detectors; new TVirtualMC::NIELEdep(); clean-up:; Details:; o TVirtualMCSensitiveDetector: the interface class for a user sensitive detector; o New functions in TVirtualMC:; void SetSensitiveDetector(const TString &volName, TVirtualMCSensitiveDetector *sd);; TVirtualMCSensitiveDetector *GetSensitiveDetector(const TString &volName) const;; void SetExclusiveSDScoring(Bool_t exclusiveSDScoring);; o New function in TVirtualMCApplication:; void ConstructSensitiveDetectors();; - Added new TVirtualMC::NIELEdep() function; - Removed default implementation for TVirtualMC::TrackPosition/Momentum with Float_t arguments",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1892:130,interface,interface,130,https://root.cern,https://github.com/root-project/root/pull/1892,1,['interface'],['interface']
Integrability,Synchronize commit 52e1488840 to the monorepo.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15001:0,Synchroniz,Synchronize,0,https://root.cern,https://github.com/root-project/root/pull/15001,1,['Synchroniz'],['Synchronize']
Integrability,Synchronize construction of TApplication,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/35:0,Synchroniz,Synchronize,0,https://root.cern,https://github.com/root-project/root/pull/35,1,['Synchroniz'],['Synchronize']
Integrability,Synchronizes with this upstream commit and directly makes use of the new; API to avoid a patch:; https://github.com/wlav/CPyCppyy/commit/993b17bce2f43516a85931b40035ac7252e2ab7e,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15788:0,Synchroniz,Synchronizes,0,https://root.cern,https://github.com/root-project/root/pull/15788,1,['Synchroniz'],['Synchronizes']
Integrability,TBufferFile: remove stray quote in error message,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10099:41,message,message,41,https://root.cern,https://github.com/root-project/root/pull/10099,1,['message'],['message']
Integrability,"TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35; 1148: #72 0x7f7b0e2265db in TBufferJSON::StoreObject(void const*, TClass const*) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:708:7; 1148: #73 0x7f7ad3c6329b in ROOT::Experimental::RCanvasPainter::CreateSnapshot[abi:cxx11](ROOT::Experimental::RDrawable::RDisplayContext&) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:739:20; 1148: #74 0x7f7ad3c669ad in ROOT::Experimental::RCanvasPainter::ProduceBatchOutput(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, int) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:461:20; 1148: #75 0x7f7afc354443 in ROOT::Experimental::RCanvas::SaveAs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/jhahnfel/ROOT/src/graf2d/gpadv7/src/RCanvas.cxx:176:21; 1148: #76 0x7f7afeafe017 (<unknown module>); 1148: #77 0x7f7b121bc8c9 in WrapperCall(long, unsigned long, void*, void*, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778:13; 1148: #78 0x7f7b121bd174 in unsigned char CallT<unsigned char>(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816:9; 1148: #79 0x7f7b121bd174 in Cppyy::CallB(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833:1; 1148: #80 0x7f7b0ffe1a61 in CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(long, void*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148:19; 1148: #81 0x7f7b0ffaf717 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74:29; 1148: #82 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/b",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11629:12525,Wrap,WrapperCall,12525,https://root.cern,https://github.com/root-project/root/issues/11629,1,['Wrap'],['WrapperCall']
Integrability,TClassEdit::ResolveTypedef add support for unknown::wrapper<int>,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4471:52,wrap,wrapper,52,https://root.cern,https://github.com/root-project/root/pull/4471,1,['wrap'],['wrapper']
Integrability,"TCling::Load reloads the library the `system` optional parameter is false. If the library is not marked as `system` TCling reloads it if was alread loaded. That is, it dlcloses and dlopens the library instead of doing nothing. There is no point in reloading our library dependencies. The regression was introduced in 9b6df8c originated from https://github.com/root-project/root/commit/e649f59e3160f829bc1a4813f8aa73bdd16b6cff",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5485:270,depend,dependencies,270,https://root.cern,https://github.com/root-project/root/pull/5485,1,['depend'],['dependencies']
Integrability,"TClingCallFunc provides an interface between compiled and interpreted code. That is, we can create at compile time a function to be called by the interpreter and get back its result into compiled code. To do that we require connecting to a function declaration available in the interpreter and calling it by setting input arguments. However, the input arguments are set with the SetArg which can resolve to a type and argument representation different from the signature of the interpreter function we will call. This is practically not a problem integral types because their representation is mostly the same. The problem becomes visible when we call SetArg with a `double` and the function signature expects a `float`. That works out of the box when the compiler can see both ends and insert proper representation casts. Unfortunately, when crossing the compiler/interpreter boundary we use `void*` and that information is lost. This patch adds some representation adjustments so that the compiled code (SetArg) and the interpreted code (CallFunc) can agree on the memory representation before calling. Fixes #14405",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14853:27,interface,interface,27,https://root.cern,https://github.com/root-project/root/pull/14853,1,['interface'],['interface']
Integrability,"TClingCallFunc provides an interface between compiled and interpreted code. That is, we can create at compile time a function to be called by the interpreter and get back its result into compiled code. To do that we require connecting to a function declaration available in the interpreter and calling it by setting input arguments. However, the input arguments are set with the SetArg which can resolve to a type and argument representation different from the signature of the interpreter function we will call. This is practically not a problem integral types because their representation is mostly the same. The problem becomes visible when we call SetArg with a double and the function signature expects a float. That works out of the box when the compiler can see both ends and insert proper representation casts. Unfortunately, when crossing the compiler/interpreter boundary we use void* and that information is lost. This patch adds some representation adjustments so that the compiled code (SetArg) and the interpreted code (CallFunc) can agree on the memory representation before calling. Fixes https://github.com/root-project/root/issues/14405",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14888:27,interface,interface,27,https://root.cern,https://github.com/root-project/root/pull/14888,1,['interface'],['interface']
Integrability,TDavixFile: add support for cross-protocol metalinks,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1352:34,protocol,protocol,34,https://root.cern,https://github.com/root-project/root/pull/1352,1,['protocol'],['protocol']
Integrability,"TFile's ctor's error message should point to TFile::Open when filename contains ""://""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10039:21,message,message,21,https://root.cern,https://github.com/root-project/root/issues/10039,1,['message'],['message']
Integrability,TFormula already supports gradient calculation using clad. This commit extends that support for hessian calculation. Thus the hessian generation is done by clad and TFormula wraps it in a trampoline function.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8371:174,wrap,wraps,174,https://root.cern,https://github.com/root-project/root/pull/8371,1,['wrap'],['wraps']
Integrability,"TFormula generates a function on the fly along with a trampoline function; which ensures uniform calling of it. Once compiled, the function can be; called on different data and multiple times. We extend this concept by computing the gradient of the nominated function.; The gradient generation is done by clad and TFormula wraps it in a similar; easy-to-call trampoline function. Patch by Aleksandr Efremov(@efremale) and me!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2745:323,wrap,wraps,323,https://root.cern,https://github.com/root-project/root/pull/2745,1,['wrap'],['wraps']
Integrability,"TIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #6 ROOT::Experimental::RClassField::RClassField (this=0x7ffc9edb22f0, fieldName=..., className=..., classp=<optimized out>) at /usr/include/c++/13/bits/new_allocator.h:88; #7 0x00007f3e5fcafc66 in ROOT::Experimental::RClassField::RClassField (this=this; entry=0x7ffc9edb22f0, fieldName=""klass"", className=""8G325Y212U"") at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RField.cxx:841; #8 0x0000558efca002c2 in ROOT::Experimental::RField<TestEBO, void>::RField (name=..., this=0x7ffc9edb22f0) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/inc/ROOT/RField.hxx:643; #9 RNTuple_TClassEBO_Test::TestBody (this=<optimized out>) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_types.cxx:387; #10 0x00007f3e5fc02eb3 in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) [clone .constprop.0] () from /lib64/libgtest.so.1.13.0; #11 0x00007f3e5fbef17e in testing::Test::Run() () from /lib64/libgtest.so.1.13.0; #12 0x00007f3e5fbef385 in testing::TestInfo::Run() () from /lib64/libgtest.so.1.13.0; #13 0x00007f3e5fbef4d7 in testing::TestSuite::Run() () from /lib64/libgtest.so.1.13.0; #14 0x00007f3e5fbfc090 in testing::internal::UnitTestImpl::RunAllTests() () from /lib64/libgtest.so.1.13.0; #15 0x00007f3e5fbfae98 in testing::UnitTest::Run() () from /lib64/libgtest.so.1.13.0; #16 0x00007f3e5fbac116 in main () from /lib64/libgtest_main.so.1.13.0; #17 0x00007f3e5f048b4a in __libc_start_call_main () from /lib64/libc.so.6; #18 0x00007f3e5f048c0b in __libc_start_main_impl () from /lib64/libc.so.6; #19 0x0000558efc9fc045 in _start (); ===========================================================; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 139; ~~~",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12428:11432,message,message,11432,https://root.cern,https://github.com/root-project/root/issues/12428,1,['message'],['message']
Integrability,"TMVA, fix warning messages",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/193:18,message,messages,18,https://root.cern,https://github.com/root-project/root/pull/193,1,['message'],['messages']
Integrability,TSystem interface improvements,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4874:8,interface,interface,8,https://root.cern,https://github.com/root-project/root/pull/4874,1,['interface'],['interface']
Integrability,TWebCanvas - use TVirtualPS interface for custom objects drawings,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2862:28,interface,interface,28,https://root.cern,https://github.com/root-project/root/pull/2862,1,['interface'],['interface']
Integrability,"Take a model with completely independent identical observables that have both a signal and a background component:; ```; p(x,y) = p(x) * p(y) = (s(x) + b(x)) * (s(y) + b(y)) ; ```; It should be equivalent to define this as a sum of products:; ```; p(x,y) = s(x,y) + b(x,y) = s(x) * s(y) + b(x) * b(y); ```; All sums in these expressions are normalized sums. However, in RooFit, you get different probabilities depending on how you define the model, either as a product of sums or sum of products. The case of sum of products seems to be wrong, as it doesn't factorize correctly. This can be reproduced with the following script:. ```C++; using namespace RooFit;. // Create observables; RooRealVar x(""x"", ""x"", -5, 5);; RooRealVar y(""y"", ""y"", -5, 5);. // Gaussian signal in x and y; RooGaussian gx(""gx"", ""gx"", x, RooConst(0), RooConst(1));; RooGaussian gy(""gy"", ""gy"", y, RooConst(0), RooConst(1));. // Polynomial background in x and y; RooPolynomial px(""px"", ""px"", x, RooArgSet(-0.1, 0.004));; RooPolynomial py(""py"", ""py"", y, RooArgSet(-0.1, 0.004));. // Normalization sets to try for model evaluation; RooArgSet nsetx{x};; RooArgSet nsety{y};; RooArgSet nsetxy{x, y};. {; // Formulate model as a product of sums; RooAddPdf modelx(""modelx"", ""modelx"", {gx, px}, RooConst(0.1));; RooAddPdf modely(""modely"", ""modely"", {gy, py}, RooConst(0.1));; RooProdPdf model(""model"", ""model"", {modelx, modely});. std::cout << ""Product of sums:"" << std::endl;. std::cout << ""p(x) = "" << modelx.getVal(nsetx) << std::endl;; std::cout << ""p(y) = "" << modely.getVal(nsety) << std::endl;; std::cout << ""p(x) * p(y) = "" << model.getVal(nsetxy) << std::endl;; std::cout << std::endl;; }. {; // Formulate model as a sum of products; RooProdPdf sig(""sig"", ""sig"", {gx, gy});; RooProdPdf bkg(""bkg"", ""bkg"", {px, py});; RooAddPdf model(""model"", ""model"", {sig, bkg}, RooConst(0.1));. std::cout << ""Sum of products:"" << std::endl;. std::cout << ""p(x) = "" << model.getVal(nsetx) << std::endl;; std::cout << ""p(y) = "" << model.getVal(ns",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11177:410,depend,depending,410,https://root.cern,https://github.com/root-project/root/issues/11177,1,['depend'],['depending']
Integrability,Template WrappedMultiTF1 keeping backwards compatibility and adding a templated std::function interface for TF1. This is the first in a series of PR for the integration of the vectorization + parallelization of the fit in ROOT.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/346:94,interface,interface,94,https://root.cern,https://github.com/root-project/root/pull/346,2,"['integrat', 'interface']","['integration', 'interface']"
Integrability,Temporary revert of new discovery routine,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3733:34,rout,routine,34,https://root.cern,https://github.com/root-project/root/pull/3733,1,['rout'],['routine']
Integrability,Test depending on histfactory are run even if histfactory is not build,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6911:5,depend,depending,5,https://root.cern,https://github.com/root-project/root/issues/6911,1,['depend'],['depending']
Integrability,Test error/warning/info messages in RDF tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5845:24,message,messages,24,https://root.cern,https://github.com/root-project/root/pull/5845,1,['message'],['messages']
Integrability,"Thanks @amadio for the suggestion!. `PassAsVec<N, T>(func)` is a callable that takes N arguments of type T,; passes them to func as a collection (`func({v1, v2, ...}`) and returns; the result of the call to `func`. This helper makes it possible to pass several columns of the same; type to a callable that accepts a vector of that type. Example usage:; ```c++; bool myVecFunc(std::vector<float> args);; df.Filter(PassAsVec<3, float>(myVecFunc), {""var1"", ""var2"", ""var3""});; ```. @stwunsch could this be interesting for the new TMVA interfaces?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2295:531,interface,interfaces,531,https://root.cern,https://github.com/root-project/root/pull/2295,1,['interface'],['interfaces']
Integrability,Thanks @etejedor for noticing the error messages I missed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1309:40,message,messages,40,https://root.cern,https://github.com/root-project/root/pull/1309,1,['message'],['messages']
Integrability,Thanks for fixing the root 6.24 build issues for ppc64le with gcc9.3 ( https://github.com/root-project/root/issues/9297) but looks like we still have build issues with GCC 10.3 and 11.2. We get build errors like [a] full build log is available at https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-8678b1/21211/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/log . FYI @vgvassilev @hahnjo. [a] https://github.com/cms-sw/cmsdist/pull/7500#issuecomment-992272002; ```; /scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/slc7_ppc64le_gcc10/external/gcc/10.3.0-84898dea653199466402e67d73657f10/bin/g++ -DGTEST_HAS_RTTI=0 -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -Iinterpreter/llvm/src/tools/clang/lib/Lex -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/lib/Lex -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/include -Iinterpreter/llvm/src/tools/clang/include -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/slc7_ppc64le_gcc10/external/libxml2/2.9.10-32fb6ccc7a5c1482269c150e9287ec24/include/libxml2 -Iinterpreter/llvm/src/include -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/include -D__ROOFIT_NOBANNER -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-semantic-interposition -fPIC -fvisibility-inlines-hidden -Werror=date-time -std=c++1z -w -fdiagnostics-color -ffunction-sections -fdata-sections -fno-common -Woverloaded-virtual -fno-strict-aliasing -O3 -DNDEBUG -fvisibility,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9424:305,integrat,integration,305,https://root.cern,https://github.com/root-project/root/issues/9424,1,['integrat'],['integration']
Integrability,"Thanks to @cwiel for pointing out the issue. I've refactored the code and reduced code duplication massively. The bug is fixed by writing a pointer unequal zero in the array interface since numpy does not take this as exception. Actually, it does not matter at all what is written in the `""data""` field of the array interface since it is never accessed. Edit: Added a backport for experimental pyroot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3535:174,interface,interface,174,https://root.cern,https://github.com/root-project/root/pull/3535,2,['interface'],['interface']
Integrability,Thanks to Tomas Dado for noticing that this was broken. We should ensure that ROOT always builds with this flag. See also:; * https://root.cern/doc/v632/release-notes.html#compile-your-code-with-memory-safe-interfaces; * https://github.com/root-project/root/blob/master/roofit/roofitcore/inc/RooFit/Config.h#L16,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15946:207,interface,interfaces,207,https://root.cern,https://github.com/root-project/root/pull/15946,1,['interface'],['interfaces']
Integrability,"The ""Math/Error.h"" header is not shipped with standalone Minuit2. It is not a perfect solution to just ship it with Minuit2, because the Error.h header behaves differently depending on the `MATHCORE_STANDALONE` macro being defined or not. The code would only work correctly if the user defines the `MATHCORE_STANDALONE` herself in the user code that uses standalone Minuit2, which would be annoying. Instead, this commit proposes another solution to the problem: for all headers also used in Minuit2 standalone, MathCore; moves the definitions of all functions that use `Math/Error.h` out of the header files in the cxx files. Like this, the `Math/Error.h` is only a build dependency of standalone Minuit2, and the user doesn't need to define the `MATHCORE_STANDALONE` macro for it to work. Including the ""Math/Util.h"" header needs to be avoided for similar reasons (it's about another preprocessor macro related to `veccore`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13646:172,depend,depending,172,https://root.cern,https://github.com/root-project/root/pull/13646,2,['depend'],"['dependency', 'depending']"
Integrability,"The Core module is now just called `Core`, and no longer `libCore.so`,; which leads to the confusing PCM file name `libCore.so.pcm` which is 75%; just boilerplate prefixes and suffixes. This also make the error; messages from clang more readable now as they use the same module name.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/878:212,message,messages,212,https://root.cern,https://github.com/root-project/root/pull/878,1,['message'],['messages']
Integrability,The EnableAutoLoading interface needs to know about the internal TCling implementation to safely enable the autoloading facility in ROOT. Calling this interface cannot be user responsibility as he/she should not know the initialization details of TCling. Make this interface a nop and add a deprecation warning. This should resolve ROOT-10514 and ROOT-10528.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4868:22,interface,interface,22,https://root.cern,https://github.com/root-project/root/pull/4868,3,['interface'],['interface']
Integrability,"The Oracle interface was deprecated in ROOT 6.30 and scheduled for removal in 6.32. As we are now in the 6.32 development cycle, everything related to `oracle` can be removed. See also 1c74d59d.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14828:11,interface,interface,11,https://root.cern,https://github.com/root-project/root/pull/14828,1,['interface'],['interface']
Integrability,"The PROOF interface in RooFit/RooStats didn't work anymore for a long time, so nobody will be suprised if this is removed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14993:10,interface,interface,10,https://root.cern,https://github.com/root-project/root/pull/14993,1,['interface'],['interface']
Integrability,"The PiecewiseInterpolation class is used in the context of HistFactory models, where is is always used the same way: all RooAbsReals in _lowSet, _histSet, and also nominal are 1D RooHistFuncs with with same structure. Therefore, we can make a big optimization: we get the bin index ony once here in the generated code for PiecewiseInterpolation. Then, we also rearrange the histogram data in such a way that we can always pass the same arrays to the free function that implements the interpolation, just with a dynamic offset calculated from the bin index. This change is covered by the `testHistFactory` unit test. Together with the change suggested in the other draft PR, where the generated code is split up into separate functions for each channel, this PR addresses the plan of work item ""Reduce JITting time for AD in RooFit"". Different from that optimization, this one doesn't depend on the upcoming Clad 1.5, so it can be merged without upgrading Clad.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15543:884,depend,depend,884,https://root.cern,https://github.com/root-project/root/pull/15543,1,['depend'],['depend']
Integrability,"The Pythia 6 interface was deprecated in ROOT 6.30 and scheduled for removal in 6.32. As we are now in the 6.32 development cycle, everything related to `pythia6` can be removed. See also 1c74d59d.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14823:13,interface,interface,13,https://root.cern,https://github.com/root-project/root/pull/14823,1,['interface'],['interface']
Integrability,The RDF dependencies were cleaned up in commit 8d7fa5f87c and commit f215692b3d removed the RDF unit test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16292:8,depend,dependencies,8,https://root.cern,https://github.com/root-project/root/pull/16292,1,['depend'],['dependencies']
Integrability,"The RException class is supposed to serve as base class for all ROOT; exceptions. It contains an `RError` member with diagnostic information.; The `RResult<T>` class can be used as a return value of operations that; may fail. The `RResult<T>` object wraps either a valid value or an `RError`.; If an error state remains unchecked, the `RResult` class will throw an; exception on destruction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4683:250,wrap,wraps,250,https://root.cern,https://github.com/root-project/root/pull/4683,1,['wrap'],['wraps']
Integrability,"The RNTupleUtil standard library should contain data transformation and inspection tools for RNTuples. To start with, it contains the stub class RNTupleImporter that will convert TTrees to RNTuple. In the future, we may add, e.g., visualization and debugging tools. While the RNTuple core library should remain light on dependencies, the RNTupleUtil library may depend on Tree, graphics, RDF and the rest of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11753:320,depend,dependencies,320,https://root.cern,https://github.com/root-project/root/pull/11753,2,['depend'],"['depend', 'dependencies']"
Integrability,"The ROOT file datasource, `RRootDS`, was a proof of concept to show that RDF's generic data-source API could cover cases as complex as ROOT files. However, it never reached feature parity with the no-datasource, integrated TTree reading case (nor it was meant to). In this PR:. 1. Make ROOT::MakeRootDataFrame equal to standard constructors: ; RRootDS does not support the same set of features as ""standard"" RDF,; and this can be very surprising, see e.g.; https://root-forum.cern.ch/t/chaining-rdataframe-define-does-not-work-in-some-cases/38213; With this change, ROOT::MakeRootDataFrame returns a ""normal"" RDF, with; all expected features. This resolves ROOT-10596.; 2. Remove MakeROOTDatFrame tutorials:; `MakeRootDataFrame` is not a feature we want to advertise. RDataFrame's class constructors provide same or better functionality.; 3. Deprecate RRootDS's constructor:; users should not be constructing RRootDS directly anyway. They should; do so via `MakeRootDataFrame`, which from the next version will instead; construct a standard dataframe with no datasource.; We deprecate RRootDS's constructor as an extra cautionary measure,; so we can move RRootDS out of the public namespace and into the; internal namespace soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5516:212,integrat,integrated,212,https://root.cern,https://github.com/root-project/root/pull/5516,1,['integrat'],['integrated']
Integrability,"The RapidYAML of the RooFit JSON interface is now always disabled because it doesn't work anymore for RooFitHS3. The `nlohmann_json` interface is always used and works well, hence rapidyaml was not tested anymore and the code was rotting until it didn't work. The relevant code is still left in the CMakeLists.txt in case someone wants to revive the RapilYAML backend. Closes #15118. Backport of https://github.com/root-project/root/pull/15247.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15260:33,interface,interface,33,https://root.cern,https://github.com/root-project/root/pull/15260,6,['interface'],['interface']
Integrability,"The RapidYAML of the RooFit JSON interface is now always disabled because it doesn't work anymore for RooFitHS3. The `nlohmann_json` interface is always used and works well, hence rapidyaml was not tested anymore and the code was rotting until it didn't work. The relevant code is still left in the CMakeLists.txt in case someone wants to revive the RapilYAML backend. Closes #15118. Should be backported up to 6.28.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15247:33,interface,interface,33,https://root.cern,https://github.com/root-project/root/pull/15247,2,['interface'],['interface']
Integrability,"The RooBatchCompute library should not need to know about the data map; implementation. It does not depend on the architecture, and also there; are often incompatibilities when using `std::map` (or; `std::unordered_map`) with nvcc with the standard library headers on the; system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10590:100,depend,depend,100,https://root.cern,https://github.com/root-project/root/pull/10590,1,['depend'],['depend']
Integrability,"The RooHistPdf and RooHistFunc should be able to do analytic integration if the input is a linear transformation of a variable using RooLinearVar. This makes the fits faster where one wants to shift a template on the x-axis, which is for example talked about in this forum post: https://root-forum.cern.ch/t/roofit-pdf-normalization-integration/53905",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12482:61,integrat,integration,61,https://root.cern,https://github.com/root-project/root/pull/12482,2,['integrat'],['integration']
Integrability,"The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13336:58,wrap,wrapper,58,https://root.cern,https://github.com/root-project/root/pull/13336,5,"['depend', 'integrat', 'wrap']","['dependencies', 'integration', 'wrapper']"
Integrability,"The RooMinimizer interface does not allow for changing the number of points on a likelihood contour.; By promoting this parameter to a default argument, this is now accessible to the user.; Doxygen was updated accordingly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3327:17,interface,interface,17,https://root.cern,https://github.com/root-project/root/pull/3327,1,['interface'],['interface']
Integrability,"The RooProdPdf is not trivial to deal with in BatchMode, because its; actual servers depend on the normalization set. One should rather think of the RooProdPdf as something like a caching; PDF, but instead of creating a cached HistPdf for a given normalization; set, it creates an internal computation graph representing the; normalized product for a given normalization set. This internal computation graph is not expsed via the usual; client-server interface. However, this is strictly required for the new; BatchMode: internal computation graphs are not allowed because the; RooFitDriver would not be able to manage memory copies between host and; device, and also schedeuling. For this reason, BatchMode support is removed from the RooProdPdf class.; We only keep a `RooProdPdf::calculateBatch` function that can be used to; evaluated a given cache element when all the internal args are contained; in the BatchMode data map. To correctly evaluate these computation graphs in the batchMode, a new; class is introduced that wraps them with the correct client-server; interface. Instances of this class are then created for each ProdPdf in; the original computation graph, and the ProdPdfs are replaced with these; objects. This means all the different RooProdPdf cache configurations are now; correctly dealt with in the BatchMode, making the; `RooProdPdf/TestProdPdf.CachingOpt` unit test also pass with the; BatchMode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11400:85,depend,depend,85,https://root.cern,https://github.com/root-project/root/pull/11400,4,"['depend', 'interface', 'wrap']","['depend', 'interface', 'wraps']"
Integrability,"The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++; RooWorkspace ws;; ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");; RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};; integral->Print(""v"");; std::cout << integral->getVal() << std::endl;; ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13334:227,wrap,wrapping,227,https://root.cern,https://github.com/root-project/root/pull/13334,1,['wrap'],['wrapping']
Integrability,"The RooRealMPFE class is an implementation detail of the old RooFit multiprocessing. It should not be part of the public interface, and also not have a `ClassDef` that allows you to do IO with it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16346:121,interface,interface,121,https://root.cern,https://github.com/root-project/root/pull/16346,1,['interface'],['interface']
Integrability,"The TFile objects need to be closed before the ROOT files can be; deleted. Otherwise, we get errors such as these on Windows 10:. ```; Traceback (most recent call last):; File ""C:/build/night/LABEL/windows10/SPEC/default/V/master/root/tutorials/pyroot/pyroot006_tcontext_context_manager.py"", line 56, in <module>; os.remove(""pyroot006_file_{}.root"".format(i)); PermissionError: [WinError 32] The process cannot access the file because it is being used by another process: 'pyroot006_file_1.root'; CMake Error at C:/build/night/LABEL/windows10/SPEC/default/V/master/build/RootTestDriver.cmake:227 (message):; error code: 1; ```. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows10,SPEC=default,V=master/lastBuild/testReport/projectroot/runtutorials/tutorial_pyroot_pyroot006_tcontext_context_manager_py/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10378:597,message,message,597,https://root.cern,https://github.com/root-project/root/pull/10378,1,['message'],['message']
Integrability,"The TRandom3 generator was observed to fail; a very simple test on the SetSeed/GetSeed interface:. ```; gRandom->SetSeed(11);; auto a = gRandom->GetSeed();; gRandom->SetSeed(12);; auto b = gRandom->GetSeed();; assert(a != b);; ```. Indeed a `GetSeed()` following any `SetSeed(seed)` call always returns the magic number 624. This is because in the current implementation. `GetSeed() { return fMT[fCount624]; }`. we access memory location `fMT[624]` which does not exist in fMT ... and so the value of fCount624 is returned, which happens to be `624`. This commit fixes this bug by imposing an index range between 0 and 623.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14135:87,interface,interface,87,https://root.cern,https://github.com/root-project/root/pull/14135,1,['interface'],['interface']
Integrability,"The UI says:; > Input 'version' has been deprecated with message: The version property will not be supported after October 1, 2019. Use node-version instead. Also bump to the latest NodeJS version 16.x which will become the next LTS version in October and be supported until 2024 (12.x will go EOL in April 2022, next year).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8680:57,message,message,57,https://root.cern,https://github.com/root-project/root/pull/8680,1,['message'],['message']
Integrability,"The [TDirectory::WriteObject](https://github.com/root-project/root/blob/35b5aaef38b6635e131e7d93a0c96f69bb293b9d/core/base/inc/TDirectory.h#L265-L268) method allows writing objects to files. If the written object actually has a title, this should be discarded because the function doesn't manage it as a TObject-derived instance on purpose. For example, the program below:. ```cpp; int main(){; TFile f{""myfile.root"",""recreate""};; TH1F h{""myhistoname"",""myhistotitle"",100,0,100};; f.WriteObject(&h, h.GetName());; f.Close();; }; ```. When executed creates a file where the object ""h"" gets the default title ""object title"":. ```bash; $ rootls -l myfile.root; TH1F Aug 21 10:41 2021 myhistoname;1 ""object title""; ```. This is because The [TKey constructor that accepts a void pointer](https://github.com/root-project/root/blob/35b5aaef38b6635e131e7d93a0c96f69bb293b9d/io/io/src/TKey.cxx#L299-L300) calls the parent TNamed constructor with a default title, because in general there is no guarantee the object has the interface `GetTitle(),SetTitle()` and there is no extra ""title"" parameter to the constructor. This commit provides a solution by creating a new overload for `TDirectory::WriteObject`, using SFINAE to make it available for types that are derived from TObject. The method redirects to `WriteTObject` instead of `WriteObjectAny`. This way, the correct TKey constructor is called that uses the actual object title. As a result, the example above will now output a file like this:. ```; $ rootls -l myfile.root; TH1F Aug 21 11:00 2021 myhistoname;1 ""myhistotitle""; ```. The already present method is modified with SFINAE as well, to only be available if the type T of the template is not derived from TObject.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8934:1013,interface,interface,1013,https://root.cern,https://github.com/root-project/root/pull/8934,1,['interface'],['interface']
Integrability,"The [TKey constructor that accepts a void pointer](https://github.com/root-project/root/blob/35b5aaef38b6635e131e7d93a0c96f69bb293b9d/io/io/src/TKey.cxx#L299-L300) calls the parent TNamed constructor with a default title, because in general there is no guarantee the object has the interface `GetTitle(),SetTitle()` and there is no extra ""title"" parameter to the constructor. This leads though to some weird situations when using the [TDirectory::WriteObject](https://github.com/root-project/root/blob/35b5aaef38b6635e131e7d93a0c96f69bb293b9d/core/base/inc/TDirectory.h#L265-L268) method to write objects to files. If the written object actually has a title, this would be discarded because the function doesn't manage it as a TObject-derived instance on purpose. For example, the program below:. ```cpp; #include <TFile.h>; #include <TH1F.h>. int main(){; TFile f{""myfile.root"",""recreate""};; TH1F h{""myhistoname"",""myhistotitle"",100,0,100};; f.WriteObject(&h, h.GetName());; f.Close();; }; ```. When executed creates a file where the object ""h"" gets the default title ""object title"":. ```bash; $ rootls -l myfile.root; TH1F Aug 21 10:41 2021 myhistoname;1 ""object title""; ```. This commit adds an extra check in the TKey constructor above. If the object is derived from TNamed, then we know that it has a title (either empty or provided by the user), so we should use that instead of ""object title"". It could be interesting to have a way to; generalise this to classes that have a `GetTitle(), SetTitle()` interface, but it would be more difficult. After this commit, the example; above outputs a file that contains the histogram object with the correct title:. ```bash; $ rootls -l myfile.root; TH1F Aug 21 11:00 2021 myhistoname;1 ""myhistotitle""; ```. ## Note; This commit provides an idea of a fix, if there's a faster way to get to the object title that doesn't involve all those casts it would be great :smile:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8879:282,interface,interface,282,https://root.cern,https://github.com/root-project/root/pull/8879,2,['interface'],['interface']
Integrability,"The _column model_ turned into an unnecessary wrapper for the column type. The patch replaces the use of the column model by using directly the column type. Along with it, some unused flags of the column information in the header are removed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15991:46,wrap,wrapper,46,https://root.cern,https://github.com/root-project/root/pull/15991,1,['wrap'],['wrapper']
Integrability,"The `Blas.h` header is only used by the tmva-cpu implementation, so it should be made private by moving it to `src`. The problem with having it in `inc` was that this header included GSL, and therefore GSL appeared to be a public dependency of TMVA, which is not true. Closes #14263.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14330:230,depend,dependency,230,https://root.cern,https://github.com/root-project/root/pull/14330,1,['depend'],['dependency']
Integrability,"The `RPyROOTApplication` is a `TApplication` that sets up the nuts and bolts for interactive ROOT use from Python, closely following `TRint`. This PR adds the basic behaviour for `TApplication` implemented in C++, i.e. parsing of arguments, configuration of some ROOT globals and setup of an error message handler that is able to translate ROOT warnings into Python warnings. The custom parsing of arguments can be disabled by the user by specifying a configuration option after importing ROOT:; ```python; import ROOT; ROOT.PyConfig.IgnoreCommandLineOptions = True; ```. Moreover, this PR also brings in some logic that is located in `ROOT.py` in the current PyROOT. Such logic makes it possible to use ROOT interactive graphics from Python. The graphics are activated only if the batch mode is off, and they are configured by means of hooks: no thread is explicitly created to process the GUI events as before. The batch mode can be activated by doing:; ```python; import ROOT; ROOT.gROOT.SetBatch(True); ```; or in the command line:; ```bash; > python my_script.py -b; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3731:298,message,message,298,https://root.cern,https://github.com/root-project/root/pull/3731,1,['message'],['message']
Integrability,"The `RRawFileTFile` wraps an open `TFile`, but does not take ownership. This enables opening `RNTuple` anchors from `TFile`s that are not natively supported by `RRawFile`, for example `TMemFile` as used by `TBufferMerger`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14867:20,wrap,wraps,20,https://root.cern,https://github.com/root-project/root/pull/14867,1,['wrap'],['wraps']
Integrability,"The `RooAbsBinning` interface for bin index lookups was changed to; enable vectorized implementations. Instead of having the override; `RooAbsBinning::binNumber()`, the binning implementations now have to; override the `RooAbsBinning::binNumbers()` function to evaluate the bin; indices of multiple values in one function call. The interface of `RooAbsBinning::binNumbers()` is designed to facilitate; the accregation of bin indices over multiple dimensions, and it uses a; `double` ouput vector such that the caller can reuse the output buffer; for other computations. The former `RooAbsBinning::binNumber()` method is now implement in terms; of the vectorized version, such that we automatically get wide test; coverage. It was verified that this doesn't come with a performance; overhead. This will greatly facilitate the vectorization of the RooHistPdf and; RooHistFunc later. A second commit in this PR applies some other improvements to the `RooBinning` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11151:20,interface,interface,20,https://root.cern,https://github.com/root-project/root/pull/11151,2,['interface'],['interface']
Integrability,"The `RooAbsL` class is implemented for four kinds of likelihoods: binned, unbinned, ""subsidiary"" (an optimization for numerical stability that gathers components like global observables) and ""sum"" (over multiple components of the other types). These classes provide ways to compute their components in parallelizable chunks that can be used by the calculator classes as they see fit. On top of the likelihood classes, we also provide for convenience a set of likelihood builders. The calculator ""`...Wrapper`"" classes are abstract interfaces. These can be implemented for different kinds of algorithms, or with different kinds of optimization ""back-ends"" in mind. In an upcoming PR, we will introduce the fork-based multi-processing implementation based on `RooFit::MultiProcess`. Other possible implementations could use the GPU or external tools like TensorFlow. The coupling of all these classes to `RooMinimizer` is made via the `MinuitFcnGrad` class, which owns the `...Wrappers` that calculate the likelihood components. ## Todo:. There are still a couple of things that require attention, which I hope the reviewers can help me with:. 1. I have a Kahan summation helper class. This should probably be replaced with the new Kahan summation class in ROOT itself, but I didn't get to this yet. Maybe it is not urgent to do now, up for discussion.; 2. `likelihood_builders.cxx` is still missing the top level entry point function. This should be quite a simple function: it should just check whether the pdf is binned, unbinned or sum and has subsidiary terms. All the building blocks are already present, so it is just a matter of building it, but didn't get to it yet.; 3. `optional_parameter_types.h`: maybe we could replace this with @guitargeek's new configuration structs.; 4. `testRooRealL.getValRooAddition` fails because it doesn't know `RooFormulaVar`... I'm not sure what this means, but I vaguely remember that (I think) @hageboeck and @cburgard were talking about this, so I was hoping",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8700:1274,Wrap,Wrappers,1274,https://root.cern,https://github.com/root-project/root/pull/8700,1,['Wrap'],['Wrappers']
Integrability,"The `RooAbsReal::createIntegral()` function returns an owning pointer,; so the return value needs to be wrapped in an `std::unique_ptr`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9477:104,wrap,wrapped,104,https://root.cern,https://github.com/root-project/root/pull/9477,1,['wrap'],['wrapped']
Integrability,The `RooCFunction*Binding` classes and the associated `RooFit::bindFunction()` and `RooFit::bindPdf()` functions are deprecated and will be removed in ROOT 6.32. Their functionality is redundant with the `RooFormulaVar` and `RooGenericPdf` that should be used instead. This is another deprecation done in the spirit of avoiding duplicate interfaces and user confusion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11983:338,interface,interfaces,338,https://root.cern,https://github.com/root-project/root/pull/11983,1,['interface'],['interfaces']
Integrability,"The `RooEffProd` class contains some caching logic to always provide a; normalization set to the integrated pdf. However, this should better not; be done, because as the the former documentation sais it ""breaks the; default RooAbsPdf normalization handling"". It is also inconsistent,; because, other RooFit classes like `RooProduct` don't do that. Also, it is not the task of the RooEffProd to protect pdfs from being; evaluated without normalization set if their shape depends on it. The; concerned pdfs (like RooAddPdf) already do that themselves. The reason why this is removed now it that the caching of normalization; integrals doesn't work with the new RooFit batch mode. This commit is tested by the `stressRooFit` unit test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10100:97,integrat,integrated,97,https://root.cern,https://github.com/root-project/root/pull/10100,2,"['depend', 'integrat']","['depends', 'integrated']"
Integrability,"The `RooGenFunction` was only a lightweight adaptor that exports a RooAbsReal as a `ROOT::Math::IGenFunction`. The same can be easily achieved with the generic `ROOT::Math::Functor1D`, so in the spirit of not duplicating interfaces, the `RooGenFunction` is removed. The same goes for the `RooMultiGenFunction`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11981:221,interface,interfaces,221,https://root.cern,https://github.com/root-project/root/pull/11981,1,['interface'],['interfaces']
Integrability,"The `RooGrid` is a utility class for the `RooMCIntegrator`, which doesn't support IO itself. Therefore, it doesn't make sense to have a `ClassDef(1)` macro. It is only putting the unnecessary burden of keeping backwards compatibility on the developers. Therefore, this commit suggests to leave out the `ClassDef` macro out of `RooGrid`, and also remove the unnecessary base classes `TObject` and `RooPrintable`. There is only one printing function that makes sense anyway, which is kept without implementing the full `RooPrintable` interface.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11963:532,interface,interface,532,https://root.cern,https://github.com/root-project/root/pull/11963,1,['interface'],['interface']
Integrability,"The `RooRealIntegral` class is smart enough to figure out which; variables the function the integrated function doesn't depend on and; trivially integrates them itself by multiplying with the variable; definition range. However, if the integration range is a subrange of the variable range,; this was not considered. This resulted in wrong results. for integrals; like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend; on x. These kind of integrals can occur in the projections that the; RooAddPdf does, so it's important that they work, and fixing this; partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which; also used these kind of integrals. Without this fix, the `Integrate()`; feature for `chi2FitTo()` was completely broken, which can be seen in; the output of the `rf609` tutorial with any previous ROOT version. The; tutorial looks okay by chance, because the function is dominted by the; quadratic term in `x` that is constant in the fit. But if one makes this; a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set; constant to begin with, to sweep the bug under the rug. Now, the; tutorials are updated to have the quadratic coefficient floating too.; And also `stressRooFit`, since the reference file has to be updated; anyway. To demonstrate that things work correctly now, a new unit test was; implemented that does the closure check of the `integrate()` feature of; the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12011:92,integrat,integrated,92,https://root.cern,https://github.com/root-project/root/pull/12011,7,"['Integrat', 'depend', 'integrat']","['Integrate', 'depend', 'integrate', 'integrated', 'integrates', 'integration']"
Integrability,"The `RooSTLRefCountList` is used in the `RooAbsArg` client server ; interface, which is why speeding up lookup operations is very important ; for large models. ; ; With this commit: ; ; The `RooSTLRefCountList` is used in the `RooAbsArg` client server; interface, which is why speeding up lookup operations is very important; for large models. With this commit:. * A `RooSTLRefCountList` has an additinal member that tracks the; ordering of the elements by `RooAbsArg::namePtr()` address. * Subsequently, looking up elements by name pointer is much faster. * Care was taken to handle the case where elements already in the; collection get renamed (see inline documentation and unit test). * The `RooSTLRefCountList` can notice if it was read from IO and; determine the ordering before doing any lookups. As far as I can tell, this change has now drawbacks other than some; increased memory usage. The order of the elements is still the same, so; no user code should be affected.; ; As far as I can tell, this change has now drawbacks other than some ; increased memory usage. The order of the elements is still the same, so ; no user code should be affected. Benchmark before this commit ([profile](https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/VHbb-STXS_mu__createNLL)):; ```; ---------------------------------------------------------------------------------; Benchmark Time CPU Iterations; ---------------------------------------------------------------------------------; VHbb-STXS_mu__createNLL/0/iterations:1 14.1 s 14.0 s 1. ```; Benchmark after this commit ([profile](https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/VHbb-STXS_mu__createNLL_2)):; ```; ---------------------------------------------------------------------------------; Benchmark Time CPU Iterations; ---------------------------------------------------------------------------------; VHbb-STXS_mu__createNLL/0/iterations:1 5.13 s 5.13 s 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9403:68,interface,interface,68,https://root.cern,https://github.com/root-project/root/pull/9403,2,['interface'],['interface']
Integrability,"The `TestGauss` unit tests in roottest are failing with Jonas' ROOT; build (gcc 10 on Arch Linux). The failure was tracked down to a; `nullptr` dereferencing in when accessing `RunContext::spans`. The origin of the `nullptr` is in `RooVectorDataStore::getBatches`,; where the `unordered_map` with pointers to the variables is filled via; `unordered_map::emplace`. For some reason, the key becomes a nullptr; *right after emplacing* ([link to code](https://github.com/root-project/root/blob/https://github.com/root-project/root/blob/9296e5ed912b3010456fa4b50db77f2c4c97a09a/roofit/roofitcore/src/RooVectorDataStore.cxx#L1345/roofit/roofitcore/src/RooVectorDataStore.cxx#L1345)). For some other reason, wrapping the `RooAbsReal const*` pointer in a; struct that is used as the key for `RunContext::spans` solves the; problem. This is implemented in this commit. This PR is more of a draft PR for now, because before merging I would really like to understand what's going on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8590:701,wrap,wrapping,701,https://root.cern,https://github.com/root-project/root/pull/8590,1,['wrap'],['wrapping']
Integrability,"The `bool` columns in RDF are special, because the Take action returns a `std::vector<bool>`, which has an implementation-depended memory layout for space optimization. Therefore, I suggest supporting taking `bool` columns as `unsigned char` with `Take()`, such that in `RDataFrameAsNumpy` the values can be directly taken as bytes. This avoids superfluous copying in the code, and keeps the special logic in the pythonization side minimal. Closes #8639.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15180:122,depend,depended,122,https://root.cern,https://github.com/root-project/root/pull/15180,1,['depend'],['depended']
Integrability,"The `c++ --print-file-name` command now seems to work, and it is indeed the more appropriate way to get the location of the asan shared library on MacOS. Also fix the following problems occurring when building on MacOS with -Dasan=ON. Error:; ```; CMake Error at cmake/modules/CheckAtomic.cmake:59 (message):; Host compiler appears to require libatomic, but cannot find it.; ```; Fix: fix typos in asan symbols (extra `_`) and specify correct linker flag (-U). Error:; ```; error: static AddressSanitizer runtime is not supported on darwin; ```; Fix: remove `-static-libsan` flag. This is required by latest MacOS Xcode",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16499:299,message,message,299,https://root.cern,https://github.com/root-project/root/pull/16499,1,['message'],['message']
Integrability,"The `computeCategoryOldStyle` function in the RooMultiCategory class; gave wrong results in case the multi-category uses categories where the; ordinal number of the category doesn't match the category index. Since the `computeCategoryOldStyle` function was still used for; assertions in debug mode, this caused unnecessary assertion failures as; reported on the forum:. https://root-forum.cern.ch/t/roorealvar-setbinning-with-name-in-pyroot/51069. The code in the forum, together with some added printouts in; `RooMultiCategory::evaluate()` clearly demonstrated that the old-style; implementation is wrong. As the new implementation is already tested for a few releases now, the; most sustainable way to fix the wrong assertion failure is to simply; remove the comparison with the old-style interfaces in debug builds. Since after this change, the `RooMultiCatIter` is only used for the deprecated; `RooSuperCategory::MakeIterator()`, this PR also suggests to remove that; deprecated function together with the `RooMultiCatIter`. This is kind of a followup to https://github.com/root-project/root/pull/5502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11117:791,interface,interfaces,791,https://root.cern,https://github.com/root-project/root/pull/11117,1,['interface'],['interfaces']
Integrability,"The `dnn_cuda` library is only an intermediate library that is not meant to be installed with ROOT, so it needs to be static since TMVA needs to export its dependencies and if this library is shared; the dependency won't be there after a `make install'. Therefore the error in CMake:. ```; CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""TMVA"" which requires target ""dnn_cuda"" that is not in the export set.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3066:156,depend,dependencies,156,https://root.cern,https://github.com/root-project/root/pull/3066,2,['depend'],"['dependencies', 'dependency']"
Integrability,"The `math/mlp` library is very small and has no dependencies outside the minimal ROOT:; https://github.com/root-project/root/blob/master/math/mlp/CMakeLists.txt. Therefore, I think it's not worth it to have an extra build option to disable this component. Removing build options helps in reducing the test matrix and user confusion.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13862:48,depend,dependencies,48,https://root.cern,https://github.com/root-project/root/pull/13862,1,['depend'],['dependencies']
Integrability,"The `test.cmake` script is meant to automate some of the standard configure, build, test, install cycle during development, but also for continuous integration. The script can be generically called as; ```sh; ctest -VV -S test.cmake; ```; from the top directory of the repository. There are several options to customize the build, the main ones are:. | Option | Description |; |----------------------|-------------|; | -DCOVERAGE=1 | Enables test coverage analysis with gcov; | -DMEMCHECK=1 | Enables memory checking with valgrind; | -DSTATIC_ANALYSIS=1 | Enables static analysis with clang-tidy; | -DINSTALL=1 | Enables an extra step to call make install; | -DCDASH=1 | Enables submission to CDash (needs CTestConfig.cmake). When enabling coverage, a report is generated by default in the `coverage/` directory inside the build directory. The results can be viewed by opening the file `html/coverage_details.html`. This step can be disabled by passing `-DGCOVR=0` to `ctest`. It is recommended to use a debug build to generate the coverage analysis. The configuration can be specified directly on the command line via the `-C` option. For example, to run a coverage build in debug mode, with less verbose output, and showing test output when a test failure happens, one can run:; ```sh; ctest -V --output-on-failure -C Debug -DCOVERAGE=1 -S test.cmake; ```; Some environment variables can also influence the behavior of the script, like `CC`, `CXX`, `CMAKE_GENERATOR`, `CTEST_CONFIGURATION_TYPE`, `CMAKE_BUILD_PARALLEL_LEVEL`, `CTEST_PARALLEL_LEVEL`, `CMAKE_ARGS`, `CDASH`, `DESTDIR`, `BASE_REF`, `HEAD_REF`, and GitHub Actions environment variables. These are mostly self-explanatory and can be used to override the provided defaults. For example, to build with the clang compiler and use Ninja as CMake generator, one can run:; ```sh; env CC=clang CXX=clang++ CMAKE_GENERATOR=Ninja ctest -V -S test.cmake; ```; Finally, the script tries to load configuration files from the `.ci/` subdirectory in t",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14999:148,integrat,integration,148,https://root.cern,https://github.com/root-project/root/pull/14999,1,['integrat'],['integration']
Integrability,"The analytical integral code of the `RooTruthModel` was making the wrong assumption that if one uses the single-sided bases, the minimum x value is always at zero (or the maximum value at zero, for the case of the flipped bases). This resulted in wrong integral values when integrating over a subrange, as reported here on the forum:. https://root-forum.cern.ch/t/possible-bug-in-integration-of-roobdecay-and-rooabsanaconvpdf/56968. This commit rewrites the RooTruthModel analytical integral code to also consider these cases. To avoid that with the additional code branches the code becomes too verbose, the code was refactored to use a helper function for evaluating indefinite integrals of symmetric or asymmetric basis functions. The refactored code is tested by the integration tests in `stressRooFit`, and the problem that was reported on the forum is covered by a new unit test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14021:274,integrat,integrating,274,https://root.cern,https://github.com/root-project/root/pull/14021,3,['integrat'],"['integrating', 'integration', 'integration-of-roobdecay-and-rooabsanaconvpdf']"
Integrability,"The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework.; Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:; ```; OVERVIEW: rootcling; USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>; ; OPTIONS:; ; Generic Options:; ; -help - Display available options (-help-hidden for more); -help-list - Display list of available options (-help-list-hidden for more); -version - Display the version of this program; ; rootcling common options:; ; -D=<string> - Specify defined macros.; -I=<string> - Specify an include path.; -W=<string> - Specify compiler diagnostics options.; -c - Deprecated, legacy flag which is ignored.; -cxxmodule - Generate a C++ module.; -excludePath=<string> - Do not store the <path> in the dictionary.; -f - Overwrite <file>s.; -failOnWarnings - Fail if there are warnings.; -inlineInputHeader - Does not generate #include <header> but expands the header content.; -interpreteronly - Generate minimal dictionary for interactivity (without IO information).; -m=<string> - The list of dependent modules of the dictionary.; -multiDict - If this library has multiple separate LinkDef files.; -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH.; -p - Deprecated, legacy flag which is ignored.; -rmf=<string> - Generate a rootmap file with the specified name.; -rml=<string> - Generate rootmap file.; -s=<string> - The path to the library of the built dictionary.; -selSyntaxOnly - Check the selection syntax only.; -split - Sp",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4171:541,message,messages,541,https://root.cern,https://github.com/root-project/root/pull/4171,1,['message'],['messages']
Integrability,"The array interface now inferes the size of the data-type with `sizeof` by itself. This fixes [this](https://epsft-jenkins.cern.ch/view/ROOT/job/root-nightly-master/1703/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=slc6-i686/testReport/junit/projectroot.bindings.pyroot/test/pyunittests_pyroot_array_interface/) failure for `long` types on 32bit sytems not being 8 bytes long.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1925:10,interface,interface,10,https://root.cern,https://github.com/root-project/root/pull/1925,1,['interface'],['interface']
Integrability,The bare file container is only used for testing and therefore should not be part of the public interface.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14761:96,interface,interface,96,https://root.cern,https://github.com/root-project/root/pull/14761,1,['interface'],['interface']
Integrability,"The batched evaluation mode in the RooBinIntegrator was still; implemented with the old `getValues()` interface. Nowadays,; `getValues()` can still be used, but it's not the intended entry point; to the batched evaluation anymore. There is still a compatibility layer,; but it has lots of overhead because the new `RooFitDriver` is created; everytime `getValues()` is called. Therefore, it is better to disable the batched evaluation code path for; now. Until the `RooRealBinding` is refactored to not create a new; RooFitDriver everytime `getValues()` is called. Two other minor changes are also done in this PR in the first two commits. For more detail, see the commit description.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11912:102,interface,interface,102,https://root.cern,https://github.com/root-project/root/pull/11912,1,['interface'],['interface']
Integrability,"The builtin Vdt and Vc builds, when enabled, cause some targets to depend on libraries (`libvdt.so`, `libVc.a`) that are the output of the `ExternalProject` command. However, unless they are explicitly listed as outputs (as done in this patch), the build tool may not know how to generate them. Typically, this isn't a problem because the builtins are done sufficiently early in the build and it's nearly impossible to hit the Vc dependency before the library is installed. `make` is satisfied as long the library is on disk by time it hits the later rule, even if it has no clue how it got there. However, some build tools (such as `ninja`) explicitly check for missing libraries and refuse to attempt the build because no rule explicitly builds the missing library. As far as I can tell, the `BUILD_BYPRODUCTS` attribute was added in CMake 3.2; as ROOT already requires 3.4.3, this patch should not be a problem. @pcanal @karies",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/323:67,depend,depend,67,https://root.cern,https://github.com/root-project/root/pull/323,2,['depend'],"['depend', 'dependency']"
Integrability,"The change of the interface of TGDMLWrite is in conflict with old DD4hep versions. To temporarily overcome this problem the old interface is kept. ; The old interface however should be removed when standard installations use a compatible pairs of DD4hep and ROOT >= 6.20. DD4hep when using ROOT 6.20.0 or greater will only use the new interface, where a partial tree is exported to GDML identified by it's TGeoNode instance.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4163:18,interface,interface,18,https://root.cern,https://github.com/root-project/root/pull/4163,4,['interface'],['interface']
Integrability,"The cling argument `--cuda-path` is necessary if the CUDA SDK is not installed under `/usr/local/cuda`, e.g. on HPC systems. The integration tests are also updated to handle a CUDA SDK under a non-standard location. # Additional diagnostic. To find the bug, I also add some diagnostic functions for the PTX compiler. 1. Now error messages are prefixed in CUDA mode to better decide which of the two compiler pipelines is causing the error. example; ```; - example before:; error: cannot find CUDA installation. Provide its path via --cuda-path, or pass -nocudainc to build without CUDA includes.; error: cannot find libdevice for sm_20. Provide path to different CUDA installation via --cuda-path, or pass -nocudalib to build without linking with libdevice.; error: cannot find CUDA installation. Provide its path via --cuda-path, or pass -nocudainc to build without CUDA includes. - example after:; cling: error: cannot find CUDA installation. Provide its path via --cuda-path, or pass -nocudainc to build without CUDA includes.; cling-ptx: error: cannot find libdevice for sm_20. Provide path to different CUDA installation via --cuda-path, or pass -nocudalib to build without linking with libdevice.; cling-ptx: error: cannot find CUDA installation. Provide its path via --cuda-path, or pass -nocudainc to build without CUDA includes.; ```. 2. Now, the class `cudaIncrementalDeviceCompiler` available through reflection via the `gCling` object.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6707:129,integrat,integration,129,https://root.cern,https://github.com/root-project/root/pull/6707,2,"['integrat', 'message']","['integration', 'messages']"
Integrability,"The code; ```; if (${CMAKE_MINIMUM_REQUIRED_VERSION} VERSION_GREATER_EQUAL ""3.10.0""); message(FATAL_ERROR ""Remove this condition""); ```; in the ROOT CMakeLists introduced in #6605 breaks the CMake configuration if another package sets a higher minimum version.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8280:86,message,message,86,https://root.cern,https://github.com/root-project/root/issues/8280,1,['message'],['message']
Integrability,"The connection check only makes sense for `fail-on-missing=OFF`, where the result is used to decide whether to download a missing dependency as a builtin from the internet, or to disable the feature that has the missing dependency. With `fail-on-missing=ON`, it doesn't matter because disabling features is not allowed. Therefore, we can skip the connection check to save some configuration overhead and just assume we have internet: if a builtin can't be downloaded there will be a configuration failure either way. Closes #11603 without introducing an additional flag. To be backported to 6.32, because it will improve the packaging of the release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15467:130,depend,dependency,130,https://root.cern,https://github.com/root-project/root/pull/15467,2,['depend'],['dependency']
Integrability,"The core part of tmva/sofie does not depend on protobuffer and it is used in pymva to parse a model from Keras to Tmva::Sofie format. ; It is now always built as tmva, while only sofie_parser is built when protobuf is found.; This PR fixes the problem seed when building pymva when protobuf is not found",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8930:37,depend,depend,37,https://root.cern,https://github.com/root-project/root/pull/8930,1,['depend'],['depend']
Integrability,"The ctor of `GSLMCIntegrator` creates a `GSLRngWrapper` instance on the heap and calls its `Allocate()` member function which in turn allocates memory for a GSL random number generator via `gsl_rng_alloc()`. When the `GSLMCIntegrator` instance goes out of scope, its dtor is invoked which deletes the `GSLRngWrapper` pointer and thus invokes its dtor as well. However, `~GSLRngWrapper()` frees the allocated memory only if `fOwn` pointer is set to true, which is only set so in the assignment operator, but not in the `Allocate()` member function. Therefore, the `GSLMCIntegrator` class is leaking memory. This poses a problem, when doing a large number of integrations inside a for loop. The leak was discovered by running valgrind and inspecting the code. Minimal example:; ```cpp; #include <Math/GSLMCIntegrator.h> // ROOT::Math::GSLMCIntegrator. /* built with:. g++ -ggdb3 -Og `root-config --cflags` mcintegrator.cpp -o mcintegrator \; `root-config --libs` -lMathMore. */. int; main(); {; for(unsigned i = 0; i < 20000; ++i); {; ROOT::Math::GSLMCIntegrator vegas(""vegas"", 0., 1.e-1, 10);; }; return 0;; }; ```. Before fix:; ```; valgrind --tool=memcheck --leak-check=full --show-leak-kinds=definite \; --undef-value-errors=no ./mcintegrator. ==12320== Memcheck, a memory error detector; ==12320== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==12320== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info; ==12320== Command: ./mcintegrator; ==12320==; ==12320==; ==12320== HEAP SUMMARY:; ==12320== in use at exit: 100,655,858 bytes in 44,260 blocks; ==12320== total heap usage: 67,782 allocs, 23,522 frees, 101,539,078 bytes allocated; ==12320==; ==12320== 99,089,984 (319,984 direct, 98,770,000 indirect) bytes in 19,999 blocks are definitely lost in loss record 3,515 of 3,515; ==12320== at 0x4C2BE7F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so); ==12320== by 0xAD090F2: gsl_rng_alloc (in /usr/lib/libgsl.so.23.0.0); ==12320== by 0x8223765: ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/928:657,integrat,integrations,657,https://root.cern,https://github.com/root-project/root/pull/928,1,['integrat'],['integrations']
Integrability,"The current code goes through different codepaths depending on the platform. One of the codepaths relies on a non-standard extension (variable-length arrays) and the other manually allocates and frees a char array.; Using a std::string, while losing a bit of performance on Linux/Mac, simplifies and unifies the codepaths and avoids using non-standard C++ (which in turns enable building with -Werror).; The perf hit is most likely negligible, especially given the use of dynamic_cast in the same block.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16476:50,depend,depending,50,https://root.cern,https://github.com/root-project/root/pull/16476,1,['depend'],['depending']
Integrability,"The current implementation of the PyMVA interface in `PyMethodBase` has following problem:. We are using currently a global local python namespace for **all** instances of **all** PyMVA method. So you can easily interfere with an other method running in the same factory. Most likely, this happens if you book two instances of the same method in one factory. We can solve this by introducing **private** local python namespaces. In this version, we are sharing the global namespaces with all instances of a PyMVA method (and ofc the running python instance), but create a seperate local namespace for each instance. So you can do whatever you want in your method/instance and you don't interfere with others.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/308:40,interface,interface,40,https://root.cern,https://github.com/root-project/root/pull/308,1,['interface'],['interface']
Integrability,"The current logic for processing TTree/TChain datasets with IMT and when a TTreeIndex is involved requires a copy of each index in each thread, since their state depends on the TTree/TChain they are attached to. Previously, the copy was done via `TObject::Clone` which inevitably makes use of I/O functions, i.e. serialising/deserialising the TTreeIndex/TChainIndex, thus making the copy more costly than necessary. This commit introduces overloads of `Clone` for TTreeIndex and TChainIndex enabling their copy in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14812:162,depend,depends,162,https://root.cern,https://github.com/root-project/root/pull/14812,1,['depend'],['depends']
Integrability,The dataframe tutorials json spec files were not displayed properly. Moreover there was no direct correspondence between the code source and the json file. Those files do not have any doc in them. This PR makes a direct link to the GitHub source file. The dependency between source code and json is therefore more obvious.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14959:256,depend,dependency,256,https://root.cern,https://github.com/root-project/root/pull/14959,1,['depend'],['dependency']
Integrability,"The default `SIGPIPE` handler installed by `TUnixSystem` does not do anything except print a message and possibly causing an endless loop of `SIGPIPE` handling:. ```; echo 'std::cout << ""foo"" << std::endl;' | root -l |& true; python -c 'import ROOT; print ""foo""' |& true; ```. This fixes ROOT-4568 and ROOT-7659. The alternative would be to remove all pending sigpipe signals which might have occurred while handling the signal itself. This would keep the current behavior and still fix the endless loop. . However think that not handling SIGPIPE by default would be a wiser choice as I don't see a real use case for printing that a SIGPIPE was received and then continuing normally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/413:93,message,message,93,https://root.cern,https://github.com/root-project/root/pull/413,1,['message'],['message']
Integrability,"The dependency of `Vdt::Vdt` imported target should have been automatically added by CMake due to it being listed in the `BUILD_BYPRODUCTS` of the `ExternalProject_Add()` command, but not all versions of CMake work, so it is necessary to build it early by force. Targets listed in `ROOT_BUILTIN_TARGETS`; get added as a dependency of the move_headers target, which is reasonable since they often provide headers without which ROOT cannot be built in any case (e.g. `vdt/vdtMath.h`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2205:4,depend,dependency,4,https://root.cern,https://github.com/root-project/root/pull/2205,2,['depend'],['dependency']
Integrability,"The different overloads of `RooAbsRealLValue::inRange()` implemented; different tolerances when checking if a value `x` falls inside a; specific range. Some overloads checked if the interval; `[x - 1e-6, x + 1e6]` is overlapping with the range, an other overload; checked if the interval `[x - 1e-8*x, x + 1e8*x]` is overlapping. It's better is this is done consistently and predictably so this commit; suggests to leave out these epsilon margins that were never documented.; For backwards compatibility, one can set a custom relative or absolute; epsilon via the `RooNumber` interface. Also, the checks if the range limits are `RooNumber::isInfinite()` were; removed. They were mathematically redundant, since in RooFit, +/-; infinity is simply defined as +/-1e30. This PR fixes some corner cases in which you get paradox results from rage checks, like in this example:; ```C++; RooRealVar x{""x"", ""x"", 1e-6, 2e-6};; RooRealVar y{""y"", ""y"", 1e30, 1e30};. std::cout << x.inRange(0.0, nullptr) << std::endl;; std::cout << y.inRange(0.0, nullptr) << std::endl;; // both checks will return true without this PR!; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11999:576,interface,interface,576,https://root.cern,https://github.com/root-project/root/pull/11999,1,['interface'],['interface']
Integrability,The dynamic library manager's dyld can search a symbol in the library path.; This patch uses that functionality to aid the 'unresolved while linking'; diagnostics. Now we get:; ```; cling -L lib/. ****************** CLING ******************; * Type C++ code and press enter to run it *; * Type .q to exit *; *******************************************; [cling]$ extern int gErrorIgnoreLevel;; [cling]$ gErrorIgnoreLevel; IncrementalExecutor::executeFunction: symbol 'gErrorIgnoreLevel' unresolved while linking [cling interface function]!; Symbol found in '/.../lib/libCore.so'; did you mean to load it with .L /.../lib/libCore.so ?; [cling]$; ```. We should merge it after #6385 to not disturb the upgrade process.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6606:518,interface,interface,518,https://root.cern,https://github.com/root-project/root/pull/6606,1,['interface'],['interface']
Integrability,"The enums inside `RCompressionSetting` are now enum classes rather than struct-wrapped enums. This means that converting between them and `int` requires an explicit cast. ## Remarks; While for old code I believe it's best to leave everything as-is (casts aside), it would be nice to review the root 7 code to assess where and why we still use `int` as the type for compression and see case-by-case if it would be best replaced by the strong enum type.; Of course this would be in one or more separate PRs. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR partially addresses #8444",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15714:79,wrap,wrapped,79,https://root.cern,https://github.com/root-project/root/pull/15714,1,['wrap'],['wrapped']
Integrability,"The fact that TRandom3::Rndm() etc. are not marked final is a sensible hit in performance for applications that call it in an event loop (because the compiler does not dare de-virtualize the call, so you always have a cache miss/data dependency when you encounter the call).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12547:234,depend,dependency,234,https://root.cern,https://github.com/root-project/root/issues/12547,1,['depend'],['dependency']
Integrability,"The fact that gradient computations are supported in a `ROOT::Math`; function wrapper was only transmitted by the static class type. However, this is rather inconvenient:. 1. If you forget to downcast your function to the gradient type, the; provided gradient won't be used. 2. Many minimizer function signatures must be overloaded for both the; function with and without gradients. 3. In RooFit, this caused particular pain: depending on if an external; gradient is provided, the function wrapper in the `RooMinimizer`; needs to have a different base class, and the RooMinimizer needs to; cast it correctly when fitting. This commit suggests two new virtual functions:. * `IBaseFunctionMultiDimTempl::HasGradient()` for multi-dim functions. * `IBaseFunctionOneDim::HasGradient()` for 1D functions. Like this, the gradient support can be queried without dynamic casting; at runtime, simplifying lots of other code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12257:78,wrap,wrapper,78,https://root.cern,https://github.com/root-project/root/pull/12257,3,"['depend', 'wrap']","['depending', 'wrapper']"
Integrability,"The first commit introduces `DefineSlotEntry`, analogous to `DefineSlot` but also passes the entry number to the registered callable. The second commit is a simple refactoring of `Define` to separate user interface from internal details and error checking.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1216:205,interface,interface,205,https://root.cern,https://github.com/root-project/root/pull/1216,1,['interface'],['interface']
Integrability,"The framework one depends on https://github.com/root-project/root/issues/6753; and https://gitlab.kitware.com/cmake/cmake/-/issues/21293; before we can potentially use it. And anyway if users install their own; Python we should be nice and use that, not Python coming with Xcode / cmd line tools. Works around:; dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac10beta/SPEC/cxx17/V/master/build/lib/libROOTTPython.so, 9): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3; Referenced from: /Users/sftnight/build/jenkins/night/LABEL/mac10beta/SPEC/cxx17/V/master/build/lib/libROOTTPython.so; Reason: image not found",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6789:18,depend,depends,18,https://root.cern,https://github.com/root-project/root/pull/6789,1,['depend'],['depends']
Integrability,"The functionality to fit pulls in the RooMCStudy with a Gaussian is; widely used, and it's not good that it uses a RooGenericPdf because of; the numeric integration. Probably the RooGaussian was not used because unlike the RooMCStudy, the; RooGaussian is not in RooFitCore and using it would result in a circular; dependency. This commit suggests a way to use the RooGaussian anyway, via the; RooWorkspace factory interface. The PR also includes a second commit that gets rid of manual memory management in the `RooMCStudy` class, which also affects the friend class `RooAbsMCStudyModule` that accesses some protected members of the RooMCStudy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11777:153,integrat,integration,153,https://root.cern,https://github.com/root-project/root/pull/11777,3,"['depend', 'integrat', 'interface']","['dependency', 'integration', 'interface']"
Integrability,The getNameAsString interface causes a lot of temporary allocations.; The analysis if a decl is a cling-style wrapper can work only on a; simple declarations on the global scope. This patch filters out complex declarations (eg in namespaces) and; checks only the identifier content. The patch reduces the memory footprint difference shown in root-project/root#3012.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3593:20,interface,interface,20,https://root.cern,https://github.com/root-project/root/pull/3593,2,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it.; ; Kudos Arpitha Raghunandan (@arpi-r)!. We still need some performance measurements but the preliminary results are promising. Performance; ===. Methodology; ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:; 1) root master without modules (modulesoff); 2) root master with modules (moduleson); 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation; ---; A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4016:1764,Depend,Depends,1764,https://root.cern,https://github.com/root-project/root/pull/4016,1,['Depend'],['Depends']
Integrability,"The goal is to make RooFit completely independent on the cuda flag, except for building the BatchCompute CUDA library or not. This commit is the first step towards this goal. What is changed:. 1) The RooBatchCompute library has now two initialization functions: one for the CPU and one for CUDA. Like this, the CUDA library is only attempted to get loaded by the `RooFit::Evaluator` if evaluation on the GPU is requested, and not always when ROOT was built with `cuda=ON`. 2) Some code that was behind `ROOFIT_CUDA` prepprocessor macro `ifdefs` is now always built, if it doesn't depend on any symbols from CUDA libraries anyway.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15746:580,depend,depend,580,https://root.cern,https://github.com/root-project/root/pull/15746,1,['depend'],['depend']
Integrability,"The idea of the RooGenProdProj is that we divide two integral objects; each created with this makeIntgral() function to get the normalized; integral of a product. Therefore, we don't need to normalize the; numerater and denominator integrals themselves. Doing the normalization; would be expensive and it would cancel out anyway. However, if we don't; specify an explicit normalization integral in createIntegral(), the; last-used normalization set might be used to normalize the pdf,; resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed; to an empty set in this case. Note that in RooFit, a nullptr; normalization set and an empty normalization set is not equivalent. The; former implies taking the last-used normalization set, and the latter; means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit; test is implemented to make sure no new numeric integrals pop up in the; reproducer code to that issue. Unfortunately, this change means that there will be again warnings about; missing `RooAddPdf` normalization sets, but this is not a regression; because these warnings only got fixed in the 6.28 development cycle in; https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12010:569,integrat,integrated,569,https://root.cern,https://github.com/root-project/root/pull/12010,1,['integrat'],['integrated']
Integrability,"The implementation of the `fitTo()` and `chi2FitTo()` functions are; merged to a single function. This is the first step in unifying the NLL; and chi2-fitting code path. In later refactorings, we will also change the user interface to do; chi-square fits like this:; ```c++; model.fitTo(data, FitType(""chi-square""));; ```. The reason why this is done now is because this will make it easy to; achieve feature parity of the chi2 fits with respect to the NLL fits. In; particular, it will make it easy to use the new vectorizing CPU backend,; which should be made the default in RooFit this year.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14336:222,interface,interface,222,https://root.cern,https://github.com/root-project/root/pull/14336,1,['interface'],['interface']
Integrability,"The implementations of the virtual `RooAbsL::getParameters()` either returned an owning of a non-owning pointer, depending on the implementation class. RooSubsidiaryL returned a non-owning pointer, and the default implementation an owning pointer. The caller code of course doesn't know what to do with this, resulting in memory leaks. To fix this problem, the interface is suggested to return `std::unique_ptr<RooArgSet>`. Changing this interface now is okay because it has not been adopted by the users yet (it's from the new test statistic classes introduced in ROOT 6.26).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12595:113,depend,depending,113,https://root.cern,https://github.com/root-project/root/pull/12595,3,"['depend', 'interface']","['depending', 'interface']"
Integrability,"The integral of the crystal ball shape might vanish quickly due to; a finite precision when integrating far from the centre.; This leads to divisions by zero.; Now, a very small value is returned.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4065:92,integrat,integrating,92,https://root.cern,https://github.com/root-project/root/pull/4065,1,['integrat'],['integrating']
Integrability,"The integrator implementations are meant to be created via the numeric integrator factory interface. Making them public is therefore not necessary, and not having them in the public interface gives us more flexibility when refactoring later.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12146:4,integrat,integrator,4,https://root.cern,https://github.com/root-project/root/pull/12146,4,"['integrat', 'interface']","['integrator', 'interface']"
Integrability,"The interfaces of ROOT's `string_view` and `std::string_view` are; different (e.g., no `to_string()` member function in `std::string_view`). Reference: http://en.cppreference.com/w/cpp/header/string_view",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/804:4,interface,interfaces,4,https://root.cern,https://github.com/root-project/root/pull/804,1,['interface'],['interfaces']
Integrability,"The interfaces of `RooPoisson` and `RooDataSet` are extended to support some of the new developments in other PRs:. * getters for `x` and `mean` of RooPoisson (needed by https://github.com/root-project/root/pull/8944); * `RooDataSet::weightVar()` to access weight variable if set (needed by https://github.com/root-project/root/pull/8944, https://github.com/root-project/root/pull/9004)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9337:4,interface,interfaces,4,https://root.cern,https://github.com/root-project/root/pull/9337,1,['interface'],['interfaces']
Integrability,"The issue described in https://github.com/root-project/root/issues/11329 was work-around for the specific case of `std::vector<int>` being an hidden decl in the `regex` module (in #11468). However, this same problem can (will?) happen to any arbitrary class whose decl just happens to be already present as a ""hidden"" decl inside a dependent module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11492:332,depend,dependent,332,https://root.cern,https://github.com/root-project/root/issues/11492,1,['depend'],['dependent']
Integrability,"The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15583:25,depend,dependencies,25,https://root.cern,https://github.com/root-project/root/pull/15583,2,['depend'],['dependencies']
Integrability,"The last commit that touched `roofit/histfactory/test/CMakeLists.txt` was accidentally removing the dependency on RooFitCommon, which needs to be there to avoid linker errors on Windows. Fixes these Windows build errors in the nightlies:; https://lcgapp-services.cern.ch/root-jenkins/job/root-incremental-master/LABEL=windows10,SPEC=default/10959/parsed_console/log_content.html#ERROR1",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11394:100,depend,dependency,100,https://root.cern,https://github.com/root-project/root/pull/11394,1,['depend'],['dependency']
Integrability,"The line.cxx example has been modified accordingly. But when executed it gives errors messages like:; error: no matching literal operator for call to 'operator""""_normal'",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1915:86,message,messages,86,https://root.cern,https://github.com/root-project/root/pull/1915,1,['message'],['messages']
Integrability,"The linking of rootcling_stage1 and libCling requires a lot of memory.; Since these are linked from mostly the same objects, the build is ready; to link them at the same time. If you make a parallel build this means; that the two targets that require the most amount of memory are being; linked in parallel. This exhausts the available memory, and the; computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is; not really there since it is not needed for building, but it prevents the; two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes; (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between; rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1516:391,depend,dependency,391,https://root.cern,https://github.com/root-project/root/pull/1516,3,['depend'],['dependency']
Integrability,The logic for summing over histogram bins in different ranges used in; RooHistPdf is also implemented in RooParamHistFunc. This means the; range is now considered when computing integrals of RooParamHistFunc. RooParamHistFunc allows you to scale the counts in each bin with a; parameter. The interface of RooDataHist::sum was extended with a; function parameter to inject the logic of scaling the bin weight; depending on the bin index. This commit partly fixes issue #7182. We still need to implement the; range feature in RooHistFunc.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7198:292,interface,interface,292,https://root.cern,https://github.com/root-project/root/pull/7198,3,"['depend', 'inject', 'interface']","['depending', 'inject', 'interface']"
Integrability,"The logic that determined the offset hiding of not was coded inside the `RooNLLVarNew` evaluation function so far. This caused trouble, because a change in the global `RooAbsReal::hideOffset()` state did not mark the NLL as dirty. Therefore, it was unpredictable if the offset was actually hidden or not. This commit suggests an improved logic:. * Reducer nodes like the NLL always register a value and an offset to the `EvalContext`. * The evaluator decides whether to subtract the offset or not. * A change in `hideOffset()` makes the evaluator wrapper set all reducer nodes to dirty. A new unit test to cover this was also implemented. FYI, @will-cern",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15081:547,wrap,wrapper,547,https://root.cern,https://github.com/root-project/root/pull/15081,1,['wrap'],['wrapper']
Integrability,"The longtime-deprecated `RooStats::HistFactory::EstimateSummary` class; is removed, including the functions that use it. The information that it; was meant to store is managed by the; `RooStats::HistFactory::Measurement` object since many years. As printed out by the HistFactory in a warning message for a long time; already, setting the `Const` attribute to the `<NormFactor>` tag is; deprecated and it will be ignored. Instead, add; `<ParamSetting Const=""True""> myparam </ParamSetting>`; to your top-level XML's `<Measurement>` entry.; ; This deprecation implied that the constant parameter flag in the; `RooStats:HistFactory::NormFactor` class had no effect as well. To avoid; ambiguity in the future, the possibility to set and retrieve this flag with; `NormFactor::SetConst()` and `NormFactor::GetConst()` was removed, and the; aforementioned deprecated warning is not printed anymore. Closes #8059. FYI @gartrog and @cburgard, if as ATLAS Higgs factory power users you have; something against this change please let me know!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10766:293,message,message,293,https://root.cern,https://github.com/root-project/root/pull/10766,1,['message'],['message']
Integrability,"The macro should be already set via `${VecCore_DEFINITIONS}`, so setting it unconditionally is redundant and leads to many warnings. However, the build system is not quite ready for setting this only via; `${VecCore_DEFINITIONS}`, so we need to conditionally set it if dependencies are satisfied and it is not set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/677:269,depend,dependencies,269,https://root.cern,https://github.com/root-project/root/pull/677,1,['depend'],['dependencies']
Integrability,"The macros MN_INFO_MSG and friends check the global MnPrint::Level() before they print anything, which is not synchronized with the local printLevel in the class. The expected behavior is that MN_INFO_MSG and friends correspond to the local printLevel in the class. A call was added to synchronize MnPrint::Level() with the local printLevel.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2305:110,synchroniz,synchronized,110,https://root.cern,https://github.com/root-project/root/pull/2305,2,['synchroniz'],"['synchronize', 'synchronized']"
Integrability,"The main change in this PR is that the `CustomColumn` term is replaced by the clearer, shorter `Define` term. This require quite a few changes all over RDataFrame internals. Motivation for the change can be found below, copy-pasted from the commit message. This will make future backports a bit of a pain, but I think it's worth doing it now, for the following reasons:; * we are at a historical low of RDF-related open bugs -> less backports are expected in the future; * recent large refactorings in RAction.hxx (#6220) and in the column reader logic (#6170) already make backports much less likely to apply cleanly to release branches, so if there is a less bad time to do this, it's probably now; * expected upcoming refactorings necessary to support bulk entry processing will put another nail in the coffin of backportable bug-fixes; * I think we can all agree that RCustomColumn is a terribly opaque name for something that at this point we all know as a ""Define"", and in a few years I'd rather not have doctoral students complain about how my class names are completely arbitrary and unnecessarily hard to understand . The original commit message:. Until recently, RCustomColumns could correspond to data-source columns; or defined columns. Due to recent refactorings, RCustomColumns are now; back to serving only their original purpose: representing Define nodes; in the computation graph.; RCustomColumn is a very opaque name, and it crops up when debugging,; reading code and looking at performance profilings. The new name,; RDefine, clearly describes what the class is supposed to do and it is in; line with RDF's naming convention (we already have RFilter). Other names also become much more readable and shorter:; RBookedCustomColumns becomes RBookedDefines, RJittedCustomColumn becomes; RJittedDefine, and so forth.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6223:248,message,message,248,https://root.cern,https://github.com/root-project/root/pull/6223,2,['message'],['message']
Integrability,"The marker styles 3, 5 and 31 were draw different depending on whether they were drawn by a class based on TVirtualX or based on TVirtualPS as it can be seen in this picture:; ![temp](https://user-images.githubusercontent.com/5320187/72254803-64142680-3605-11ea-8255-40dd13038c80.jpg); Furthermore, the marker styles 9-19 were treated differently (In TVirtualX classes they were treated like marker style 1 and in TVirtualPS classes they were treated like marker style 20). This patch changes the drawing of TVirtualPS based classes to the drawing of TVirtualX based classes like for example TGX11. The updated classes are TPDF, TPostscript, TImageDump and TSVG. Since this slightly changes the corresponding file output, some reference values for testing had to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4762:50,depend,depending,50,https://root.cern,https://github.com/root-project/root/pull/4762,1,['depend'],['depending']
Integrability,"The new internal class is TReentrantRWLock access externally via the abstract interface TVirtualRWMutex. The next steps after this is to start using by:; 1) Replace gROOTMutex by a TRWMutexImp; 2) Add R__READLOCKGUARD; 3) Add a TListWithRWLock and THashListWithRWLock; 4) Use those in TROOT; 5) Remove current external locks for those ROOT lists (in particular the ListOfFiles); 6) Update all RecursiveRemove implementation (in particular TCling::RecursiveRemove, without update it destroys scalability) to make use of the Read/Write lock.; 7) Introduce scalability test on RecursiveRemove",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/676:78,interface,interface,78,https://root.cern,https://github.com/root-project/root/pull/676,1,['interface'],['interface']
Integrability,"The new release includes some improvements in Reverse mode:; * Reduce the quadratic cloning complexity to linear.; * Support variable reassignments pontentially depending on control flow.; * Support operators `+=`, `-=`, `*=`, `/=`, `,`, `++`, `--`.; * Allow assignments to array subscripts.; * Support nested assignments in expressions `a = b * ((c ? d : e) = f = g);`; * Enable differentiation of for-loops. See more at: https://github.com/vgvassilev/clad/blob/v0.6/docs/ReleaseNotes.md. This patch enables us to upgrade to llvm9. Clad supports from clang5 to clang9.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5282:161,depend,depending,161,https://root.cern,https://github.com/root-project/root/pull/5282,1,['depend'],['depending']
Integrability,"The new release includes some improvements in both Forward and; Reverse mode:; * Extend the way to specify a dependent variables. Consider function, `double f(double x, double y, double z) {...}`, `clad::differentiate(f, ""z"")` is equivalent to `clad::differentiate(f, 2)`. `clad::gradient(f, ""x, y"")` differentiates with respect to `x` and `y` but not `z`. The gradient results are stored in a `_result` parameter in the same order as `x` and `y` were specified. Namely, the result of `x` is stored in `_result[0]` and the result of `y` in `_result[1]`. If we invert the arguments specified in the string to `clad::gradient(f, ""y, x"")` the results will be stored inversely.; * Enable recursive differentiation.; * Support single- and multi-dimensional arrays -- works for arrays with constant size like `double A[] = {1, 2, 3};`, `double A[3];` or `double A[1][2][3][4];`. See more at: https://github.com/vgvassilev/clad/blob/v0.5/docs/ReleaseNotes.md. Kudos go to @efremale!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3652:109,depend,dependent,109,https://root.cern,https://github.com/root-project/root/pull/3652,1,['depend'],['dependent']
Integrability,The new release includes some improvements:; * Implement #pragma clad ON/OFF/DEFAULT to control regions where clad is active; * Add getCode() interface for interactive use. See more at: https://github.com/vgvassilev/clad/blob/v0.8/docs/ReleaseNotes.md,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8275:142,interface,interface,142,https://root.cern,https://github.com/root-project/root/pull/8275,1,['interface'],['interface']
Integrability,The new release includes some improvements:; * Implement hessian matrices via the clad::jacobian interface. See more at: https://github.com/vgvassilev/clad/blob/v0.7/docs/ReleaseNotes.md. This patch should be the last part of the fix for ROOT-10886.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6346:97,interface,interface,97,https://root.cern,https://github.com/root-project/root/pull/6346,1,['interface'],['interface']
Integrability,"The newest ROOT version in LCG dev3 nightlies crashes in a situation where the earlier versions (<6.27) printed this message:; ```; Error in cling::AutoLoadingVisitor::InsertIntoAutoLoadingState: ; Missing FileEntry for TestClassPrimitives.h ; requested to autoload type TestClassPrimitives ; ```; Now I see this stack trace instead:. ```; #0 0x00007fffebc82b61 in cling::AutoLoadingVisitor::InsertIntoAutoLoadingState(clang::Decl*, std::pair<llvm::StringRef, llvm::StringRef>)::{lambda(llvm::StringRef, bool)#1}::operator()(llvm::StringRef, bool) const () from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Thu/ROOT/HEAD/x86_64-centos7-gcc11-opt/lib/libCling.so; #1 0x00007fffebc835ac in cling::AutoLoadingVisitor::VisitDecl(clang::Decl*) (); from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Thu/ROOT/HEAD/x86_64-centos7-gcc11-opt/lib/libCling.so; #2 0x00007fffebc970c9 in clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseCXXRecordDecl(clang::CXXRecordDecl*) (); from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Thu/ROOT/HEAD/x86_64-centos7-gcc11-opt/lib/libCling.so; #3 0x00007fffebc8274a in cling::AutoloadCallback::TransactionCommitted(cling::Transaction const&) (); from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Thu/ROOT/HEAD/x86_64-centos7-gcc11-opt/lib/libCling.so; #4 0x00007fffebc64088 in cling::MultiplexInterpreterCallbacks::TransactionCommitted(cling::Transaction const&) (); from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Thu/ROOT/HEAD/x86_64-centos7-gcc11-opt/lib/libCling.so; #5 0x00007fffebce26f7 in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > >&, bool) (); from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Thu/ROOT/HEAD/x86_64-centos7-gcc11-opt/lib/libCling.so; #6 0x00007fffebce5429 in cling::IncrementalP",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11933:117,message,message,117,https://root.cern,https://github.com/root-project/root/issues/11933,1,['message'],['message']
Integrability,"The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1568:10,integrat,integrated,10,https://root.cern,https://github.com/root-project/root/pull/1568,1,['integrat'],['integrated']
Integrability,"The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4742:103,depend,dependencies,103,https://root.cern,https://github.com/root-project/root/pull/4742,2,['depend'],['dependencies']
Integrability,"The number of cores available in the Dask cluster object, i.e. those; that are already known to the scheduler, can be retrieved from the; client object through the `ncores()` method. In some cases, the scheduler has no information about the worker; nodes when the user first creates it. Most notably, when connecting; to batch resources with e.g. an HTCondorCluster. In this case, the; number of cores is actually known only when the resource manager; starts the requested jobs and this can happen much later in the; application. In these cases, we can infer the number of cores that; will be available from the specification that was passed by the user; to when creating the cluster object. This is stored in dictionary; attributes of the cluster itself. In order to dispatch the logic on the types of clusters that; connect to batch computing resources, we have to import also the; dask_jobqueue module, which effectively becomes another runtime; dependency when using the Dask backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10747:949,depend,dependency,949,https://root.cern,https://github.com/root-project/root/pull/10747,1,['depend'],['dependency']
Integrability,"The object files of the ROOT libraries currently depend on the; dictionary generation because CMake inherits the add_library; dependencies just for good measure. To speed up (re-)compilation,; we remove this dependency by compiling everything first into; a CMake OBJECT library and then link against those object files,; prevent CMake from adding those extra dependencies.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/791:49,depend,depend,49,https://root.cern,https://github.com/root-project/root/pull/791,4,['depend'],"['depend', 'dependencies', 'dependency']"
Integrability,"The officially supported way to build LLVM/Clang as a shared library is via the LLVM_BUILD_LLVM_DYLIB and LLVM_LINK_LLVM_DYLIB CMake options (see: https://llvm.org/docs/BuildingADistribution.html). When built this way, the whole of Clang API is exposed as a shared library (libclang-cpp.so). * CMakeLists.txt: Query if we're in shared mode via llvm-config, and register the result as LLVM_LIB_IS_SHARED.; [LLVM_LIB_IS_SHARED] <target_link_libraries>: Use the PUBLIC interface of the LLVM shared library.; * lib/Interpreter/CMakeLists.txt [LLVM_LIB_IS_SHARED]: When defined, replace the individual Clang components by clang-cpp.; * lib/MetaProcessor/CMakeLists.txt: Likewise.; * lib/Utils/CMakeLists.txt: Likewise.; * tools/Jupyter/CMakeLists.txt: Likewise.; * tools/driver/CMakeLists.txt: Likewise.; * tools/libcling/CMakeLists.txt: Likewise. Fixes: <https://github.com/root-project/cling/issues/430>. - [x ] tested changes locally; -> Yes, using the Guix packages for building cling. This PR fixes https://github.com/root-project/cling/issues/430",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15563:466,interface,interface,466,https://root.cern,https://github.com/root-project/root/pull/15563,1,['interface'],['interface']
Integrability,"The old test statistic classes also supported enabling the offset; feature after their construction via the `RooAbsReal::enableOffsetting`; hook. This function is now also correctly overloaded in the; `RooNLLVarNew` for the BatchMode. Furthermore, the implementation of `RooAddition::enableOffsetting` is; now moved to the base class `RooAbsReal`. This implementation was only; recursively calling `enableOffsetting` for the servers, which did the; job for the old test statistics, which were only combined with; `RooAdditions`. The new BatchMode also adds the NLLs with RooAdditions,; but on top of them sits another wrapper class, the; `RooFitDriverWrapper`. It should also forward the `enableOffsetting`; calls correctly. The most general solution to this problem is probably; to forward the `enableOffsetting` call for all `RooAbsReal`-derived; classed, up to the point where the recursion ends either at an old or a; new test statistic object. This PR also includes two minor commits. One for avoiding some warnings in tests, and another one that cleans unused includes of `RooNLLVar.h`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11668:618,wrap,wrapper,618,https://root.cern,https://github.com/root-project/root/pull/11668,1,['wrap'],['wrapper']
Integrability,"The option `dataframe_distpyspark` is superseded by `test_distrdf_pyspark`, to clarify that finding pyspark and its dependencies (like Java) during configuration is strictly needed only for the tests. Generally speaking, pyspark (and Java) are optional runtime dependencies that interest only users of the distributed RDataFrame python module with the Spark backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7413:116,depend,dependencies,116,https://root.cern,https://github.com/root-project/root/pull/7413,2,['depend'],['dependencies']
Integrability,"The original issue is with some python tutorial failing on macOS nodes due to; ```; <TNetXNGFile::Open>: [FATAL] Auth failed; ```; Which in turn is due to a failure in loading some xrootd security libraries, among which; ```; [Error ][Utility ] Unable to pre-load libXrdSecpwd.so: Plugin unable to load libXrdSecpwd-4.so; dlopen(libXrdSecpwd-4.so, 256): image not found; ```. This happens because the library depends on other libraries (`libXrdCrypto`, `libXrdUtils`) and cannot find them since the `@rpath` palceholder is not substituted with the correct path to the libraries directory at runtime.; While this is true for the xrootd libraries in `build/lib`, it's not for the ones in `build/XROOTD-prefix/../src` which have the `LC_RPATH` variable set. The difference can be shown with `otool -l`; ```; $ otool -l build/lib/libXrdSecpwd-4.so > libXrdSecpwd_buildlib.txt; $ otool -l build/XROOTD-prefix/src/XROOTD-build/src/libXrdSecpwd-4.so > libXrdSecpwd_xrootdprefixlib.txt; $ diff libXrdSecpwd_buildlib.txt libXrdSecpwd_xrootdprefixlib.txt; < build/lib/libXrdSecpwd-4.so:; ---; > build/XROOTD-prefix/src/XROOTD-build/src/libXrdSecpwd-4.so:; 307a308,311; > cmd LC_RPATH; > cmdsize 80; > path /Users/sftnight/vpadulan/build/XROOTD-prefix/src/XROOTD-build/src (offset 12); > Load command 14; 312c316; < Load command 14; ---; ```. This `LC_RPATH` variable is set for our own libraries, e.g. `libHtml.so`; ```; $ otool -l build/lib/libHtml.so; [...]; Load command 15; cmd LC_RPATH; cmdsize 80; path /Users/sftnight/vpadulan/build/lib (offset 12); ```; But for some reason this information is lost after building `builtin_xrootd` (probably while installing the libraries from the prefix to the install directory). A way to solve this is by manually adding the `CMAKE_INSTALL_RPATH` option to the `cmake` invokation of `builtin_xrootd` as is done in this PR. The result is:; ```; $ otool -l build/lib/libXrdSecpwd-4.so; [...]; Load command 15; cmd LC_RPATH; cmdsize 80; path /Users/sftnight/vpadulan/bui",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6128:409,depend,depends,409,https://root.cern,https://github.com/root-project/root/pull/6128,1,['depend'],['depends']
Integrability,"The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation; detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to; wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also; changed such that it takes ownership of the integrator, avoiding the; need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13350:46,integrat,integrator,46,https://root.cern,https://github.com/root-project/root/pull/13350,7,"['integrat', 'interface', 'wrap']","['integrator', 'integrators', 'interface', 'wrap']"
Integrability,"The pretty-print pythonization should sxclude classes which have the method `__str__` already defined in C++ Since version 1.12.11, CPyCppyy is internally renaming any direct C++ `__str__` attribute to `__cpp_str` and replaces `__str__` with a pythonic wrapper [1]. Therefore, the ""CPPOverload"" name check below doesn't work anymore with that version. Fortunately, we can just check if the `__cpp_str` attribute exists instead. Still, this code does both checks for maximum compatibility. [1] https://github.com/wlav/CPyCppyy/commit/10b15d8a5950125b8e1f2fbf289b1fc4398a6df6. Spinoff of the bigger synchronization PR for easier review:; https://github.com/root-project/root/pull/14507",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14934:253,wrap,wrapper,253,https://root.cern,https://github.com/root-project/root/pull/14934,2,"['synchroniz', 'wrap']","['synchronization', 'wrapper']"
Integrability,"The previous cling patches wraps `DeferredDeclsToEmit(vector<GlobalDecl>)`; into a struct that contains a `llvm::GlobalVlaue`, but it seems that this; field is useless and can be dropped. I have tested this patch in Cling and; spotted no new tests failing, so let's give ROOT a try. Signed-off-by: Jun Zhang <jun@junz.org>",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11076:27,wrap,wraps,27,https://root.cern,https://github.com/root-project/root/pull/11076,1,['wrap'],['wraps']
Integrability,"The previous implementation required TGeoTessellated shapes to be read attached to a TGeoManager. This removes the limitation, and allows also reading geometry files containing shapes converted to VecGeom corresponding solids. # This Pull request:. ## Changes or fixes:; * Restructured the `TGeoFacet` helper class, eliminating referencing vertices stored in the associated `TGeoTessellated` object, since this required calling a specific method `TGeoTessellated::AfterStreamer` to fix all the facet objects. The new version moves all vertex operations from TGeoFacet to the TGeoTessellated class, making the latter readable from a root file even if not connected to a `TGeoManager`; * Added persistency to the class `TGeoVGShape` which interfaces `TGeoShape` to `vecgeom::VPlacedVolume`. This allows to write/read geometry files after being converted to VecGeom. Upon reading, a check is made that the current root version was also compiled with VecGeom support, and if this is not the case a `Fatal` exception is fired. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #14283",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14327:737,interface,interfaces,737,https://root.cern,https://github.com/root-project/root/pull/14327,1,['interface'],['interfaces']
Integrability,"The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:; 1. The wording of the error message; 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this; ```python; >>> import ROOT; >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""); Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor; raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])); ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead.; ```; ```; $: root.exe; ------------------------------------------------------------------; | Welcome to ROOT 6.27/01 https://root.cern |; | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |; | From heads/master@v6-25-02-1893-ge1d4a59786 |; | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};; Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead; ```; ```; $: ./",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11063:87,protocol,protocols,87,https://root.cern,https://github.com/root-project/root/pull/11063,2,"['message', 'protocol']","['message', 'protocols']"
Integrability,"The purpose of this PR is to support discussion about the following proposal for a modern application interface for TMVA. See below the tutorial, which showcases the interface implemented in this PR as proof-of-concept. ```cpp; void train(const std::string& filename) {; // optimized out; }. void tmva003_RLegacyReader(); {; // First, let's train a model with TMVA.; const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";; train(filename);. // Next, we load the model from the TMVA XML file.; RLegacyReader model(""TMVAClassification/weights/TMVAClassification_BDT.weights.xml"");. // In case you need a reminder of the names and order of the variables during; // training, you can ask the model for it.; auto variables = model.GetVariableNames();; std::cout << ""\nVariable names used during training: "" << variables << ""\n\n"";. // The model can now be applied in different scenarios:; // 1) Event-by-event inference; // 2) Batch inference on data of multiple events; // 3) Model inference as part of an RDataFrame graph. // 1) Event-by-event inference; // The event-by-event inference takes the values of the variables as a std::vector<float>.; // Note that the return value is as well a std::vector<float> since the reader; // is also capable to process models with multiple outputs.; auto prediction = model.Predict({0.5, 1.0, -0.2, 1.5});; std::cout << ""Single-event inference: "" << prediction << ""\n\n"";. // 2) Batch inference on data of multiple events; // For batch inference, the data needs to be structured as a matrix. For this; // purpose, TMVA makes use of the RTensor class. For convenience, we use RDataFrame; // and the AsTensor utility to make the read-out from the ROOT file.; ROOT::RDataFrame df(""TreeS"", filename);; auto df2 = df.Range(3); // Read only 10 events; auto x = AsTensor<float>(df2, variables);; std::cout << ""RTensor input for inference on data of multiple events:\n"" << x << ""\n\n"";. auto y = model.Predict(x);; std::cout << ""Prediction perform",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3321:102,interface,interface,102,https://root.cern,https://github.com/root-project/root/pull/3321,2,['interface'],['interface']
Integrability,"The pythonisation proposed in this PR injects a `__setitem__` implementation into `TClonesArray` that customizes the setting of an item. The `__setitem__` pythonization that `TClonesArray` inherits from `TSeqCollection` does not apply in this case and a redefinition is required. The reason is `TClonesArray `sets objects by constructing them in-place, which is impossible to support as the Python object given as value must exist a priori. It can, however, be memcpy'd and stolen, which is the approach used in this redefinition. This is also the reason why this pythonisation needs to be implemented in C++.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3423:38,inject,injects,38,https://root.cern,https://github.com/root-project/root/pull/3423,1,['inject'],['injects']
Integrability,"The reason for this split is that Development is not required, hence we; can't rely on it being found to set variables which are usually set even; if only Interpreter (and NOT Development) is found. The if(PythonX_Development_FOUND) condition is kept for what concern the; variables set and used only for the secondary Python version used to; biuld PyROOT, since Development is required for PyROOT. In the info messages related to PyROOT, the condition to be printed now; requires both PythonX_Interpreter_FOUND and PythonX_Development_FOUND,; in order to avoid them to be printed in case Development is found but not Interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5600:411,message,messages,411,https://root.cern,https://github.com/root-project/root/pull/5600,1,['message'],['messages']
Integrability,"The recent commit `565e9aa19a` updated the `getPropagatedError` with; some additional checks, but these checks caused segfaults in some; specifit usecases:. * where the `RooAbsReal` is a parameter in the fit result itself. * where the `RooAbsReal` is a variable unrelated to the fit result. * where the `RooAbsReal` depends only on some of the parameters in the; fit result. This commit fixes these usecases again. A unit test that checks that these usecases don't fail anymore is now; implemented in `testRooAbsReal`. This PR also adds some other new unit tests that cover recent PRs and issues.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11445:316,depend,depends,316,https://root.cern,https://github.com/root-project/root/pull/11445,1,['depend'],['depends']
Integrability,"The rf503_wspaceread tutorial mus be run after the rf502_wspacewrite; tutorial in the unit tests. This dependency was already defined for the; C++ tutorial tests. The lines added to `tutorials/CMakeLists.txt` in; this commit make the same definitions for the Python tutorials, and also; indicate that the Python tests rf502 and rf503 should be run after the; C++ tests to avoid a race condition on the output file. Failures caused by the dependencies not handled correctly were observed in the ROOT nightlies, and this commit should avoid them in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8491:103,depend,dependency,103,https://root.cern,https://github.com/root-project/root/pull/8491,2,['depend'],"['dependencies', 'dependency']"
Integrability,"The routines `__aarch64_*` are defined in the static library libgcc.a and not necessarily included in libCling or otherwise present in the process, so the interpreter has a hard time finding them. Fixes #12294",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12353:4,rout,routines,4,https://root.cern,https://github.com/root-project/root/pull/12353,1,['rout'],['routines']
Integrability,"The routines `__aarch64_*` are defined in the static library libgcc.a and not necessarily included in libCling or otherwise present in the process, so the interpreter has a hard time finding them. Fixes #12294. (cherry picked from commit ddf9a8c3d113e3a3d48dbe13b6b4a6bf2338fb7a). Backport of https://github.com/root-project/root/pull/12353",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12360:4,rout,routines,4,https://root.cern,https://github.com/root-project/root/pull/12360,1,['rout'],['routines']
Integrability,"The string-based fit options are officially deprecated with this commit,; to finally remove them in the next release (ROOT v6.28). This will give us more flexibility when refactoring the RooMinimizer to; integrate new features like the batch mode, the new likelihood classes,; or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9907:204,integrat,integrate,204,https://root.cern,https://github.com/root-project/root/pull/9907,1,['integrat'],['integrate']
Integrability,"The string-based fit options were deprecated for a long time, and now is; a good time to remove the support for this completely. This will give us more flexibility when refactoring the RooMinimizer to; integrate new features like the batch mode, the new likelihood classes,; or automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9890:202,integrat,integrate,202,https://root.cern,https://github.com/root-project/root/pull/9890,1,['integrat'],['integrate']
Integrability,"The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source; or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as; dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that; the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4355:11,depend,dependencies,11,https://root.cern,https://github.com/root-project/root/pull/4355,5,"['DEPEND', 'Depend', 'depend']","['DEPENDS', 'Depending', 'dependencies', 'dependency']"
Integrability,"The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of D86765, commit bf890dcb0f; original commit message:; ```; [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus.; ```. (cherry picked from commit 06fd8e9e798919fdc29d8d6ec65d13d55ea30aa7, backport of PR https://github.com/root-project/root/pull/11551)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11560:289,message,message,289,https://root.cern,https://github.com/root-project/root/pull/11560,1,['message'],['message']
Integrability,"The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of [D86765](https://reviews.llvm.org/D86765), commit [bf890dcb0f](https://github.com/llvm/llvm-project/commit/bf890dcb0f5eb05b1a98cbd1cdd24c0c4ece8f8d); original commit message:; ```; [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11551:412,message,message,412,https://root.cern,https://github.com/root-project/root/pull/11551,1,['message'],['message']
Integrability,"The test of using the code in the RooFit AD backend is not enabled yet, because it doesn't seem to work with the current version of Clad in ROOT. However, the code is reused also for the normal `evaluate()` function, which is tested by `testRooCrystalBall.cxx`. So it would be good to integrate this change now, such that we can easily test in the CI if the `RooCBShape` works with a future version of Clad.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15449:285,integrat,integrate,285,https://root.cern,https://github.com/root-project/root/pull/15449,1,['integrat'],['integrate']
Integrability,"The unit test for RooWorkspace tests failures when importing models into the workspace.; Since RooFit will print `ERROR` messages, it looks like there is a problem in the test.; The error messages are now silenced.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3379:121,message,messages,121,https://root.cern,https://github.com/root-project/root/pull/3379,2,['message'],['messages']
Integrability,The user might use utilities which print on cout and expects the output; to be shown immediately. This patch automatically flushes std::cout after each execution of a wrapper.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3533:167,wrap,wrapper,167,https://root.cern,https://github.com/root-project/root/pull/3533,1,['wrap'],['wrapper']
Integrability,"The work of this MR has been presented in RooFit developer meetings a few times already. However, I would like to put this forward not as a ""final MR"" (would need to be rebased anyway), but as a way to get a preliminary review of this code. Purpose: HistFactory and RooWorkspace should be able to import and export their contents from and to text files, using a common JSON/YAML syntax. Method: The code has been written in such a way as to. - Minimize the amount of changes to existing code; - Make it as easy as possible for users to add new serializers/deserializers for new or existing classes; - Provide a clean interface as much as possible. Dependencies: The code requires a JSON/YML parser and emitter.; ROOT already includes the nlohmann JSON module, which is used as a default for the interface.; However, for development, I have been using the rapidyml package, which also supports reading and writing of YML files. As the code for this already exists, I have kept this in as an optional dependency. When available, it replaces the nlohmann interface and then also provides YML reading and writing capabilities, while the default is limited to JSON. Please review:. - general coding style; - packaging: Should these new files continue to live in RooStats, or should they go to a new subpackage of RooFit?; - code placement: Is the way I split the functionality up into different source files acceptable, or would you wish for a smaller/higher granularity of the splitting?; - build system: Is the way I encoded the optional dependency acceptable?; - class and function names: Are the names of classes and functions acceptable, or should things be renamed to be more conformant?. Please don't review yet:; - lack of functionality - more things will be added over time; - individual violations of the style guide (e.g. missing spaces or newlines) . Please specifically suggest where documenation should be added!; Does every function need a docstring, or just the ones announced in header fil",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5151:617,interface,interface,617,https://root.cern,https://github.com/root-project/root/pull/5151,4,"['Depend', 'depend', 'interface']","['Dependencies', 'dependency', 'interface']"
Integrability,"There are a number of trivial operations that users often want to perform on dataframes that are surprisingly hard to get right, for example adding several `Define`s in a loop or conditionally adding a `Filter` depending on a runtime boolean (both use-cases are challenging in C++, trivial in python). The way I see it, difficulties boil down to the fact that different dataframe nodes have different types (because their types incorporate e.g. the type of the callable passed to a `Filter` and the type of their parent node in the computation graph). In this PR I propose to add a common base class `ROOT::RDF::RNode` to all nodes of the graph (except leaves a.k.a results, which have a completely different interface),; so that users can, for example:; * take any dataframe node by reference in non-template functions as `RNode&`; * `emplace_back` dataframe nodes in ~`std::vector<RNode>`~ `vector<RInterface<RNode>>`; * have non-const pointers to dataframe nodes. and so on. For example, conditionally adding a `Range` do a dataframe now looks like this:. ```c++; auto maybe_ranged = [&df, mustAddRange] { ; return mustAddRange ? ROOT::RDF::RNode(d.Range(1)); : ROOT::RDF::RNode(d); ; }(); ; ```. while before this PR one would have to add fake `Filter(""true"")` filters to normalize the return type of the lambda, involving the interpreter for no reason. Internal `RDataFrame` code is also simplified by the introduction of this common base class.; The only downside I can think of is that if this mechanism is abused users might end up with extra, unnecessary virtual calls in their event loop -- on the other hand, this mechanism should only be used in situations that required either complex template magic or dirty and slow tricks before. Questions:; * can we come up with a better name than `ROOT::RDF::ToCommonNodeType` for the function that upcasts any dataframe object to the same type?; * should this cast only be explicit through an upcasting function call or should we allow implicit cas",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2182:211,depend,depending,211,https://root.cern,https://github.com/root-project/root/pull/2182,2,"['depend', 'interface']","['depending', 'interface']"
Integrability,"There are circular dependencies, which are detected on some build platforms",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3470:19,depend,dependencies,19,https://root.cern,https://github.com/root-project/root/pull/3470,1,['depend'],['dependencies']
Integrability,"There are several methods in TSystem, which returns `char *` as return value, which has to be deleted. These are:; * `ExapndPathName()`; * `DirName()` (Windows only, actually a bug); * `Which()`; * `ConcatFileName()`. There are many places in ROOT which does not do it correctly, making memory leaks.; I tried to fixed all these bugs - still open PRs are #4853, #4854, #4861, #4862, #4863 . Idea to modernize TSystem interface, providing thread-safe alternatives to all mentioned methods.; Means return TString instead of `char *` or `const char *`.; Keep old methods for a while, but replace in ROOT code to new one.; Later old methods should be declared as deprecated. This PR introduces `TString TSystem::GetDirName(const char *)` as replacement of `const char * TSystem::DirName(const char *)`. Solving Windows issue, which has memory leak. Replaces all places where DirName used by GetDirName - in most cases TString used anyway as storage for return value. . Also using more C++11 in declaration of TSystem classes. If we agreed on this approach, next methods can be refactored in same way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4874:417,interface,interface,417,https://root.cern,https://github.com/root-project/root/pull/4874,1,['interface'],['interface']
Integrability,There are two types of helper functions in PyROOT: those that are used from the pythonizors in Python and those that are used from the C++ implementation of the pythonizations. Only the former are exposed in the interface of the PyROOT extension module. This PR adds the necessary documentation to explain this.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2953:212,interface,interface,212,https://root.cern,https://github.com/root-project/root/pull/2953,1,['interface'],['interface']
Integrability,"There is a constructor of the RooAddPdf that takes no coefficients and; only a list of PDFs. This only makes sense if all of the PDFs are; extendible. Indeed, there are error messages when a PDF is not; extendible, but it would be better to throw an exception because this is; an error that will certainly break your model. This change is inspired by the following forum post:; https://root-forum.cern.ch/t/roofftconvpdf-not-working-in-product-with-rooaddpdf-even-in-new-root-versions/51442. One user error that resulted in the post was using the no-coefficient constructor with non-extendible PDFs, which would have been prevented by throwing an error as suggested in this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11323:175,message,messages,175,https://root.cern,https://github.com/root-project/root/pull/11323,1,['message'],['messages']
Integrability,"There is a dependency problem between the RooFit packages that will; start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,; RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from; the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3; needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular; dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from; RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on; RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because; people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for; statisitcal procedures. Specifying model details in the; configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig; and the Asimov dataset generation. By moving the ModelConfig to; RooFit, we are also half way done avoiding the dependency of; HistFactory on RooStats. * The only thing that people use from RooStats is often only the; ModelConfig anyway, because it lets them specify analysis details in; the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12578:11,depend,dependency,11,https://root.cern,https://github.com/root-project/root/pull/12578,7,"['depend', 'interface']","['dependency', 'depends', 'interfaces']"
Integrability,There is build problem on mac11 nodes:; ```; FAILED: core/thread/G__Thread.cxx lib/Thread.pcm ; /Users/sftnight/build/workspace/root-pullrequests-build/build/include/ROOT/TReentrantRWLock.hxx:26:10: fatal error: 'tbb/enumerable_thread_specific.h' file not found; ```; https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/115867/console. It is because of that PR: https://github.com/root-project/root/pull/7260. It exposes TBB to public includes - via ROOT/TReentrantRWLock.hxx file. First of all one should specify that `Thread` library depend on `TBB` builtins - thats easy. But also one should export `TBB_INCLUDE_DIRS` and `TBB_CXXFLAGS` as INTERFACE (not PRIVATE) properties of `Thread` library. Do we want this?,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8022:557,depend,depend,557,https://root.cern,https://github.com/root-project/root/issues/8022,2,"['INTERFACE', 'depend']","['INTERFACE', 'depend']"
Integrability,There is no such thing as ROOT_unfold_FOUND. It is built conditionally depending on whether there is xml support or not. From hist/CMakeLists.txt:; ~~~; if(xml); add_subdirectory(unfold); endif(); ~~~; The veto for the tutorials should therefore also depend on the xml support.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/313:71,depend,depending,71,https://root.cern,https://github.com/root-project/root/pull/313,2,['depend'],"['depend', 'depending']"
Integrability,"There used to be just one way of resolving an unknown name (eg. MyClass) -- by using the TCling::AutoLoad interface. However, there are two ingredients to resolve a name -- make the name known to the cling and make its library known to the JIT. Historically, these were one function. Later, we implemented performance optimization on top which divides the two steps in order to avoid excessive library loading. Now we have an auto parse step which is designed to avoid the heavy TCling::Autoload. The particular callback calls tryAutoParseInternal which is controlled by fIsAutoParsingSuspended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5756:106,interface,interface,106,https://root.cern,https://github.com/root-project/root/pull/5756,1,['interface'],['interface']
Integrability,Therewith removing all the intermittent failures in the integration builds for this branch.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15099:56,integrat,integration,56,https://root.cern,https://github.com/root-project/root/pull/15099,1,['integrat'],['integration']
Integrability,"These 3 small patches I am using for ROOT + Intel QuickAssist Technology (QAT). QAT provides HW-accelerated (de)compression and crypto (incl. hashing). For easy integration Intel provides zlib-shim and openssl-shim, support the most common interfaces (but not everything). Note, that QAT also has software fallback mechanism. More details are available in the commit messages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/523:161,integrat,integration,161,https://root.cern,https://github.com/root-project/root/pull/523,3,"['integrat', 'interface', 'message']","['integration', 'interfaces', 'messages']"
Integrability,These facilities are superseded by valgrind and other memory checkers.; memstat has been deprecated since v6.18. Big questions I didn't answer yet:; * [ ] do we still need `TStorage`?; * [ ] do we need to deprecate the removed `TApplication` interfaces?,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7867:242,interface,interfaces,242,https://root.cern,https://github.com/root-project/root/pull/7867,1,['interface'],['interfaces']
Integrability,These flags end up in ROOTConfig.cmake and propagate to dependent projects. Fixes: https://sft.its.cern.ch/jira/browse/ROOT-9212,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1967:56,depend,dependent,56,https://root.cern,https://github.com/root-project/root/pull/1967,1,['depend'],['dependent']
Integrability,These include:; - Bumping minimum Dask version to 2022.08.1 (see #11515); - Bumping minimum Python version to 3.8 (required by Dask); - Adding a message to signal whether distributed RDataFrame is included in the build or not,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11541:145,message,message,145,https://root.cern,https://github.com/root-project/root/pull/11541,1,['message'],['message']
Integrability,"These two files are almost 1000 LOC long combined, and contain several different classes (all of RDataFrame's different kinds of computation graph nodes). Splitting them in one file per class has three benefits:; 1) it makes dependencies between all classes much clearer; 2) It makes it much simpler to refactor or further develop one of the nodes (which incidentally is why I started this effort); 3) it makes for a good occasion to review and clean up our include lists",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2709:225,depend,dependencies,225,https://root.cern,https://github.com/root-project/root/pull/2709,1,['depend'],['dependencies']
Integrability,"This PR addresses the TODO comments to remove the superfluous public getters / properties logic in `TreeHeadNode`. Currently, just parses the user arguments in the `__init__` method and stores the needed attributes. My idea is that in the end we'll only need to store `npartitions` and `tree` (which are always needed) plus `defaultbranches` and `friendinfo` as ""optional"" class attributes (meaning they are initialized to `None` and changed if some conditions apply). . For simplicity, in this PR I still leave `treename` and `inputfiles` attributes which are needed in the `Ranges.get_clusters` function. The next PRs will address:; * The assumption we only have one unique treename in the RDataFrame; * Change in `Ranges.get_clusters` to accept a `TTree` instance as argument, pairing it with new C++ functions in `ROOT::Internal::TreeUtils` to retrieve a vector of clusters (plus some other metadata) depending if it's a TTree or TChain. If the logic for this PR is approved I'll add more docs and commit messages",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8816:905,depend,depending,905,https://root.cern,https://github.com/root-project/root/pull/8816,2,"['depend', 'message']","['depending', 'messages']"
Integrability,"This PR adds (a first version of) the `RNTupleIndex`, which is an in-memory structure that maps RNTuple field values (or combinations thereof) to an entry index in the RNTuple for which the index was built. Currently, the index only resides in memory and thus has to be (re)build each time. `RNTupleIndex` will be used by the `RNTupleProcessor` to enable dataset joins and will be as transparent as possible to users. Currently, no public interface is foreseen. At this point, no persistification is foreseen, but this might be added in the future. The implementation of the `RNTupleIndex` in this PR is hash-based. An implementation that is vector-based (but with the same interface) will also be considered. The idea is to benchmark and evaluate both implementations (and potentially more). Based on the results we can decide which one to actually use (or alternatively make multiple implementations available if they show clear tradeoffs in different use cases).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15116:439,interface,interface,439,https://root.cern,https://github.com/root-project/root/pull/15116,2,['interface'],['interface']
Integrability,"This PR adds a dependency of the Keras tutorial on the PyTorch ones, to avoid a conflict in the same used input file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12367:15,depend,dependency,15,https://root.cern,https://github.com/root-project/root/pull/12367,1,['depend'],['dependency']
Integrability,"This PR adds a first iteration of snapshotting to RNTuple from an RDataFrame. It uses the existing `Snapshot` interface, with an addition to `RSnapshotOptions`, `kOutputFormat`. This option can be set to write to either TTree, RNTuple, or take the default choice. The table below describes how `Snapshot` behaves accoring to the output format option:; | | From TTree | From RNTuple | From other DS |; | -------------- | --------------------- | ------------------------- | ------------------------ |; | **To TTree** | `ESnapshotOutputFormat::kDefault` | `ESnapshotOutputFormat::kTTree` | `ESnapshotOutputFormat::kDefault` |; | **To RNTuple** | Not yet possible, will be added in a follow-up, using functionality from `RNTupleImporter` | `ESnapshotOutputFormat::kDefault` | `ESnapshotOutputFormat::kRNTuple` |. ## Implementation; As mentioned, the existing `Snapshot` interface is used. A new `SnapshotRNTupleHelper` has been created to handle the creation and writing of the RNTuple, akin to the existing `SnapshotHelper` (which has been renamed to `SnapshotTTreeHelper` for consistency). ### RLoopManager data source initialization (rev bbf221f); The snapshot action creates a new loop manager which manages the snapshotted data set. The loop manager gets initialized before the actual snapshotting takes place. Originally, the pointer to the data source owned by the loop manager was marked as `const`. Because the RNTuple's data source _has_ to be created after the loop manager, for this PR the `const` qualifier has been dropped. ### Move `ROOT::RDF::Experimental::FromRNTuple` (rev 0a29b02); For snapshotting RNTuples, we need to include the header file for RNTupleDS in `ActionHelpers.hxx`. To avoid dependency conflicts related to including `ROOT/RDataFrame.hxx`, the free `FromRNTuple` functions have been moved to a separate header. ## Current limitations and follow-ups; This PR adds the minimal functionality for (single-threaded) snapshotting to RNTuple. A number of follow-ups are foresee",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15750:110,interface,interface,110,https://root.cern,https://github.com/root-project/root/pull/15750,2,['interface'],['interface']
Integrability,This PR adds a message viewing accessible through top left menu.; At the moment the view content is browser console messages and a checkbox to enable/disable debug mode. There are also minor changes in log messages and additional try/catch blocks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7270:15,message,message,15,https://root.cern,https://github.com/root-project/root/pull/7270,3,['message'],"['message', 'messages']"
Integrability,"This PR adds a new data source for `RDataFrame` that is able to provide data from SQlite `SELECT` queries. It will be useful for cvmfs, where we have file catalogs and monitoring information in sqlite files. For instance, one can do. auto rdf = ROOT::RDF::MakeSqliteDataFrame(""catalog.sqlite"", ""select * from catalog"");; auto h = rdf.Define(""lname"", ""name.length()"").Histo1D(""lname"");. to show the distribution of file name sizes. There are probably more use cases, for instance sqlite export of conditions data. This is work in progress, I'm posting it for early comments and feedback. My open points are. - Unit and integration tests are yet to be done; - The data source work single-threaded only at the moment. I initially thought it might be enough to return only a single row in `GetEntryRanges()` to make it thread-safe but that's apparently not enough. So I'm now thinking to wrap `SetEntry()` and `GetEntryRanges()` in a mutex.; - The code is not reusing `TSQLiteServer`. It felt like it requires stretching the `TSQLServer` interface in perhaps unwanted ways, for saving only a handful of direct sqlite API calls. On the other hand, with (probably quite a bit) more work it might be possible to have a more general data source that works on any SQL result set.; - Determining column types in SQlite is tricky as it is dynamically typed and in principle each row can have different column types. If a table column is queried as is, I can use the default/declared column type. For expressions, I'll use the type of the first row of the result set. Still it can result in a column to be of type `NULL` where subsequent rows actually have meaningful values. My guess is that the current heuristic is practical enough, and of course the user can formulate the `SELECT` query to avoid ambiguity.; - It would not be impossible to add support for remote reading of sqlite files. To do so, one can add a custom implementation of an sqlite virtual file system to have data pouring in directly from HTT",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2322:618,integrat,integration,618,https://root.cern,https://github.com/root-project/root/pull/2322,2,"['integrat', 'wrap']","['integration', 'wrap']"
Integrability,This PR adds some meaningful error message printing when a pythonization fails to be injected.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9729:35,message,message,35,https://root.cern,https://github.com/root-project/root/pull/9729,2,"['inject', 'message']","['injected', 'message']"
Integrability,"This PR adds support for defining, parsing and generating code for custom operator in TMVA SOFIE. SOFIE is being developed following the ONNX standards, but cases may arise when a particular operator is not defined or developed. In those scenarios, an user can still integrate the operator using the custom operator implementation. . For adding a custom operator in `RModel`, the user has to define the input tensor names, output tensor names, attribute values, output tensor shapes and a header file name. The `Generate()` function for the custom operator must be defined in a separate header file under a namespace, which is called for computing the output tensor values. . ## Checklist:; - [x] `ROperator_Custom` class; - [x] Including usage in generated code; - [x] Tests for ROperator_Custom operator; - [ ] Tutorials explaining the usage",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11065:267,integrat,integrate,267,https://root.cern,https://github.com/root-project/root/pull/11065,1,['integrat'],['integrate']
Integrability,"This PR adds to RooFit:. 1. Parallelism to gradient calculation in Minuit2 minimization in the form of a extensible interface in the RooFit::MultiProcess package.; 2. A refactored test statistics framework with cleaner separation of computation and physics/statistics concepts than in existing RooAbsTestStatistic derived classes. Currently, RooFit::TestStatistics is part of roofitcore. Note: `TestStatistics/likelihood_builders` still has to be finished, this will be done in the coming few weeks.; 3. RooFitZMQ, a wrapper of ZeroMQ functionality used in RooFit::MultiProcess for communication between processes. Modified after [code](https://gitlab.cern.ch/raaij/generate_and_sort/-/tree/master/ZMQ), contributed by @roelaaij. RooFitZMQ maybe still needs some attention, because in its current form it includes a big part of the libzmq source tree (needed for ppoll, see below), which I'm sure causes licensing issues (it's LGPLv3). I'm open to suggestions on how to handle this. To make the above additions possible, some modifications to both RooFit and non-RooFit code were made as well:. 1. In `Minuit2`:; 1. We added a subclass of the AnalyticalGradientCalculator called the ExternalInternalGradientCalculator. Whereas the AGC assumes that the gradient that is passed to it (from outside of Minuit2) is in normal parameter space, the EIGC allows its (External) user to use Minuit2 ""Internal"" parameter space, i.e. the parameter space that may be bounded into some range using transformation functions. This allowed us to exactly (floating point bit-wise) replicate the Minuit2 gradient calculation outside of Minuit2 itself, allowing us to parallelize this gradient calculation process exactly without having to worry about breaking Minuit2. The replication, `NumericalDerivatorMinuit2`, was based on earlier work by @lmoneta who already had separated out the bulk of the gradient calculation code from Minuit2.; 2. To make this all work, we also had to upgrade precision of the transformation",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8294:116,interface,interface,116,https://root.cern,https://github.com/root-project/root/pull/8294,2,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"This PR adds two sets of pythonizations to `TSeqCollection` and its subclasses:; - Injection of item access methods (`__getitem__`, `__setitem__`, `__delitem__`), both for integer indices and slices.; - Injection of Python-list-like methods (`insert`, `pop`, `reverse`, `sort`, `index`). The PR also includes the corresponding unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3387:83,Inject,Injection,83,https://root.cern,https://github.com/root-project/root/pull/3387,2,['Inject'],['Injection']
Integrability,This PR aims to add tutorials of PyTorch Interface in TMVA and is an extension to the main PR i.e #5757. Feel free to comment and share feedback.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6273:41,Interface,Interface,41,https://root.cern,https://github.com/root-project/root/pull/6273,1,['Interface'],['Interface']
Integrability,This PR allows the user to enable/disable specific interpreter capabilities without requiring to `#include` the heavier weight `Interpreter.h` (that also has dependencies on llvm). The only feature covered at the moment is definition shadowing. This allows for enabling/disabling it via:; ```; cling::runtime::gClingOpts->AllowRedefinition = 1; // or 0; ```. Closes cling issue [#360](https://github.com/root-project/cling/issues/360).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6928:158,depend,dependencies,158,https://root.cern,https://github.com/root-project/root/pull/6928,1,['depend'],['dependencies']
Integrability,"This PR allows us to use [`liburing`](https://github.com/axboe/liburing), the ""application-level"" interface to [`io_uring`](https://kernel.dk/io_uring.pdf), the new Linux kernel IO interface.; `liburing` takes care of many of the low-level details (e.g. `mmap` calls, barriers) required to correctly use `io_uring`. `io_uring` is supported on Linux kernels 5.1 and up, but it's up to the user to download and install `liburing` themselves, either from source (`make && make install`) or through a package manager. The rationale for including `liburing` in ROOT is to experiment with `io_uring`'s parallel, async IO features. This may drive performance improvements in low-level IO. . I based the CMake changes on how `jemalloc` is handled. I am not very experienced with CMake and would be happy to find out that I've done something wrong here. We need to able to include (at least) two `liburing` header files and link against the shared library, namely . * `#include ""liburing.h""`; * `#include ""liburing/io_uring.h""`; * `liburing.so`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5919:98,interface,interface,98,https://root.cern,https://github.com/root-project/root/pull/5919,2,['interface'],['interface']
Integrability,"This PR applies some fixes described in detail in the commit messages, with the goal to enable again the `IntegrateBins_SubRange` unit test which is done in the last commit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10269:61,message,messages,61,https://root.cern,https://github.com/root-project/root/pull/10269,1,['message'],['messages']
Integrability,"This PR change contains:; - Registering DeserializationListener to ASTReader and get callbacks; when decls are deserialized.; We inherited ASTDeserializationListener in DeclCollector and register; DeserializationListener to our ASTReader at DeclCollector setup time.; In the callback(DeclRead), we get owning modules from decls and store; the information in Transaction. - Load libraies for deserialized decls; Before executeTransaction(where linking happens) we put our callback; beforeEmittingModuleForTransaction in InterpreterCallbacks. This loads; libraries when it wasn't in its first run, and store modules if it's; in its first run. This is because Interpreter is not yet initialized; at first run but we need to use Interpreter services when loading; libraries. I think this is the last piece of semantic change related to runtime; cxxmodules. This also enables us to reduce dependency on rootmap files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1882:884,depend,dependency,884,https://root.cern,https://github.com/root-project/root/pull/1882,1,['depend'],['dependency']
Integrability,This PR changes sort behaviour and coloring of table cells (gray/black) depending on REveDataItem filter status.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5674:72,depend,depending,72,https://root.cern,https://github.com/root-project/root/pull/5674,1,['depend'],['depending']
Integrability,"This PR completes the fix provided for ROOT-8935 with another fix for ROOT-10279, by preventing; the injection of the constants of a scoped enum into the scope of the enum. The bug surfaced as a result of modifying `PropertyProxy::Set` to fix ROOT-9835. There is still a pending issue identified while testing the fixes above: when a scoped enum belongs to the global namespace, once we do a lookup of that scoped enum its constants are added to the global space too and can be accessed as `ROOT.constant_name`, which is wrong. A subsequent PR will fix this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4246:101,inject,injection,101,https://root.cern,https://github.com/root-project/root/pull/4246,1,['inject'],['injection']
Integrability,This PR fixes #13017 and also #13177. In addition the PR contains two additional unrelated commits for 2 improvements (see commit messages),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13063:130,message,messages,130,https://root.cern,https://github.com/root-project/root/pull/13063,1,['message'],['messages']
Integrability,"This PR fixes #14550. I've opted for now to just clarify the documentation, mostly because I'm not sure to what extent we can and want to change the TTree interface at this point.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14711:155,interface,interface,155,https://root.cern,https://github.com/root-project/root/pull/14711,1,['interface'],['interface']
Integrability,"This PR fixes #15617, where the number of files is incorrectly returned by `RInterfaceBase`/`RDFDescription` for RDF's constructed from an `RDataSource`. It involves the addition of `GetNFiles` to the public interface of `RDataSource` and calling it in the relevant places. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15653:208,interface,interface,208,https://root.cern,https://github.com/root-project/root/pull/15653,1,['interface'],['interface']
Integrability,This PR fixes an issue in parsing correctly the Convolution operator from an ONNX file. . In addition an utility funciton to convert the tensor shape to a string is added to improve the produced error messages,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8993:201,message,messages,201,https://root.cern,https://github.com/root-project/root/pull/8993,1,['message'],['messages']
Integrability,This PR fixes teh usage in ROOT of TF1::IntegralError when running in MT; In this case the global TVirtualFitter object is not existing and one needs to pass the covariance matrix from TFitResult. Update error message when using TF1::IntegralError when running in MT . Update also documentation to indicate this case,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5702:210,message,message,210,https://root.cern,https://github.com/root-project/root/pull/5702,1,['message'],['message']
Integrability,This PR fixes the delition of the internal function pointer that is used to wrap C/C++ functions in TF1. ; Also the copying of the function is now fixed and the intgernal structure is corrected copy when copying TF1 objects. . Also re-define some internal functions as protected that by mistakes they were declared public. . This PR fixes ROOT-10191,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3981:76,wrap,wrap,76,https://root.cern,https://github.com/root-project/root/pull/3981,1,['wrap'],['wrap']
Integrability,This PR fixes the issue described in:. https://sft.its.cern.ch/jira/browse/ROOT-9836. This should help with the development of `RDataFrame.AsMatrix` by @stwunsch . More information can be found in the commit message.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3055:208,message,message,208,https://root.cern,https://github.com/root-project/root/pull/3055,1,['message'],['message']
Integrability,"This PR fixes tons of memory leaks in RooFitHS3 by never using manual memory allocation in RooFitHS3. To facilitate this, an overload of `RooAbsArg::addOwnedComponents` was added that takes transfers the ownership via smart pointers (otherwise one would have to use raw owning pointers or `std::unique_ptr<T>::release()` which I want to avoid). If the CI passes, I'll squash the second and third commit and add commit messages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9690:418,message,messages,418,https://root.cern,https://github.com/root-project/root/pull/9690,1,['message'],['messages']
Integrability,"This PR follows up on https://github.com/root-project/root/pull/7723, which introduced the pythonization of `RooAbsReal::plotOn`. However, the unit test that came with #7723 also assumed pythonizations of `RooAbsPdf::plotOn` and `RooAbsData::plotOn`. This was not noticed before since the unit tests were not run in the continuous integration. This PR refactors the RooFit pythonization code to easily pythonize also `RooAbsPdf::plotOn` and `RooAbsData::plotOn` such that the unit tests pass. I need to figure out what needs to be done to run the pythonization unit tests in the bot tests for the future. Please take a look @Harshalzzzzzzz, this should be interesting for you!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7753:331,integrat,integration,331,https://root.cern,https://github.com/root-project/root/pull/7753,1,['integrat'],['integration']
Integrability,This PR has misc improvements and depends on PR #3769.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3774:34,depend,depends,34,https://root.cern,https://github.com/root-project/root/pull/3774,1,['depend'],['depends']
Integrability,"This PR implements an iterator over an `NTuple's` field descriptors (i.e. field metadata). It is a building block for the upcoming NTuple merger algorithm by allowing comparison between two `NTuples`. This PR is a slimmed down version of PR #5768. . **Edit**: Users can optionally sort the NTuple iterator range, (e.g. field names by alphabetical order) with arbitrary comparison functions (see e05a85b). . <details>; <summary>Notes on previous sort approach</summary>; <br>; We wanted to be able to iterate over `FieldDescriptors` in alphabetical order by name, this is implemented in a3a3da6 using a layer of indirection, namely a vector of offsets `RFieldDescriptorRange::fOffsets`. ; I decided on making this an optional adapter method `SortByNames` instead of the default ordering, because it turns out iterating over `FieldDescriptors` is used elsewhere in the code (see improvements in API client code in 222a412). </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5848:725,adapter,adapter,725,https://root.cern,https://github.com/root-project/root/pull/5848,1,['adapter'],['adapter']
Integrability,"This PR implements the possibility to store global observables in RooFit datasets, and makes the necessary changes in the `RooAbsPdf::fitTo` code path to consider the global observables in the data if available. If one wants to restore the old behavior of taking the global observable values from the model even if they are stored in the data, one can use the new `GlobalObservablesSource` command argument. . Unit tests for all new functionality is also implemented. Please find the more information in the commit messages. Ideas for future developments in future PRs:; 1. make it possible to specify the global observables when generating a dataset:; `model.generate(x, 1000, GlobalObservables(g))`; 2. make it possible to also sample global observable values when generating a toy dataset:; `model.generate({x, g}, 1000, GlobalObservables(g))`; 3. Add a tutorial to show all the new functionality related to global observables. Closes https://github.com/root-project/root/issues/8123.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8878:515,message,messages,515,https://root.cern,https://github.com/root-project/root/pull/8878,1,['message'],['messages']
Integrability,"This PR improves VecCore integration into ROOT. Before we copied all VecCore and Vc headers into the build directory, since rootcling did not get the right includes when Vc or VecCore were builtin. Now the right includes are propagates by calling `set_property()` with the necessary include directories. Ideally, in the future we should take the includes not from the `DIRECTORY` property, but from the target dependencies for each subcomponent.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/830:25,integrat,integration,25,https://root.cern,https://github.com/root-project/root/pull/830,2,"['depend', 'integrat']","['dependencies', 'integration']"
Integrability,"This PR includes reverts the previous changes to the generation of C++ wrappers during C++-Python inheritance, and introduces a fix to not mistake a move constructor of the base class for a copy constructor. It also introduces the support for protected methods and data members during the generation of the C++ wrapper. Both fixes were taken from upstream cppyy. The PR relies on a previous fix on ROOT meta: https://github.com/root-project/root/pull/6173",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6185:71,wrap,wrappers,71,https://root.cern,https://github.com/root-project/root/pull/6185,2,['wrap'],"['wrapper', 'wrappers']"
Integrability,"This PR includes the commits of; * PR #833 ; * a fix (dependent on #833) for task-unsafety in TDataFrame's TColumnValue; * PR #828 ; * a patch for task-unsafety in TDataFrame's thread-slot distribution by @dpiparo (commit 2787af2). If we want to push these commits little by little, PR #833 and PR #828 should be merged first, then I can open a third PR with the second (and fourth?) fix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/835:54,depend,dependent,54,https://root.cern,https://github.com/root-project/root/pull/835,1,['depend'],['dependent']
Integrability,This PR includes two sets of pythonisations for `TObject`:; - Injection of `__contains__` to support 'obj1 in obj2` syntax; https://sft.its.cern.ch/jira/browse/ROOT-9968; - Addition of comparison operators; https://sft.its.cern.ch/jira/browse/ROOT-9969,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3445:62,Inject,Injection,62,https://root.cern,https://github.com/root-project/root/pull/3445,1,['Inject'],['Injection']
Integrability,"This PR integrates recently developed `RNTupleMerger` (#13858) into `TFileMerger` so that it can be used via `hadd` etc. For the time being, the PR is in draft mode to facilitate the discussion.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14398:8,integrat,integrates,8,https://root.cern,https://github.com/root-project/root/pull/14398,1,['integrat'],['integrates']
Integrability,"This PR integrates the remaining tutorial translations that were still missing after https://github.com/root-project/root/pull/8091. After this PR, Jira issue [ROOT-10966](https://sft.its.cern.ch/jira/browse/ROOT-10966) can be resolved.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8463:8,integrat,integrates,8,https://root.cern,https://github.com/root-project/root/pull/8463,1,['integrat'],['integrates']
Integrability,"This PR introduces (with unit tests!) the concept of a forward-compatibility feature break flag for `TBasket`. This allows the `TBasket` class to identify if the object being deserialized was written by a newer version of ROOT using a feature that breaks forward-compatibility. Note that much care was taken so older versions of ROOT that *don't* recognize the new flag will believe the file is corrupt; they will give a misleading error message, but will not silently serve corrupted data. If this approach goes forward, I intend to backport the flags to older versions of ROOT -- they should be able to recognize files they aren't supposed to read. I do not plan to backport the new IO features themselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/959:438,message,message,438,https://root.cern,https://github.com/root-project/root/pull/959,1,['message'],['message']
